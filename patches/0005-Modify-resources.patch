From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Anton Tayanovskyy <anton@pulumi.com>
Date: Wed, 7 Feb 2024 13:53:37 -0500
Subject: [PATCH] Modify resources


diff --git a/internal/services/advisor/advisor_recommendations_data_source.go b/internal/services/advisor/advisor_recommendations_data_source.go
index 39c0506972..c4965dfbdb 100644
--- a/internal/services/advisor/advisor_recommendations_data_source.go
+++ b/internal/services/advisor/advisor_recommendations_data_source.go
@@ -8,6 +8,9 @@ import (
 	"strings"
 	"time"
 
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
+
 	"github.com/hashicorp/go-azure-helpers/lang/pointer"
 	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
 	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
@@ -38,7 +41,8 @@ func dataSourceAdvisorRecommendations() *pluginsdk.Resource {
 						string(getrecommendations.CategoryPerformance),
 						string(getrecommendations.CategoryCost),
 						string(getrecommendations.CategoryOperationalExcellence),
-					}, false),
+					}, features.CaseInsensitive()),
+					DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 				},
 			},
 
diff --git a/internal/services/analysisservices/analysis_services_server_resource.go b/internal/services/analysisservices/analysis_services_server_resource.go
index 40c52aa5bd..dab70b9c5c 100644
--- a/internal/services/analysisservices/analysis_services_server_resource.go
+++ b/internal/services/analysisservices/analysis_services_server_resource.go
@@ -6,6 +6,8 @@ package analysisservices
 import (
 	"bytes"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strings"
 	"time"
@@ -120,7 +122,8 @@ func resourceAnalysisServicesServer() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(servers.ConnectionModeAll),
 					string(servers.ConnectionModeReadOnly),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"backup_blob_container_uri": {
diff --git a/internal/services/appservice/helpers/function_app_schema.go b/internal/services/appservice/helpers/function_app_schema.go
index 06b5fa4d90..bdda339536 100644
--- a/internal/services/appservice/helpers/function_app_schema.go
+++ b/internal/services/appservice/helpers/function_app_schema.go
@@ -1059,10 +1059,11 @@ func linuxFunctionAppStackSchema() *pluginsdk.Schema {
 					Description: "The version of .Net. Possible values are `3.1`, `6.0` and `7.0`",
 				},
 
+				// FORK: Removed default value due to pulumi-azure#1227
+				// These modifications can be removed once pulumi-terraform-bridge#577 is fixed.
 				"use_dotnet_isolated_runtime": {
 					Type:     pluginsdk.TypeBool,
 					Optional: true,
-					Default:  false,
 					ConflictsWith: []string{
 						"site_config.0.application_stack.0.python_version",
 						"site_config.0.application_stack.0.java_version",
diff --git a/internal/services/appservice/linux_function_app_slot_resource_test.go b/internal/services/appservice/linux_function_app_slot_resource_test.go
index 4b02552385..5dfdc6a81e 100644
--- a/internal/services/appservice/linux_function_app_slot_resource_test.go
+++ b/internal/services/appservice/linux_function_app_slot_resource_test.go
@@ -1098,11 +1098,21 @@ func TestAccLinuxFunctionAppSlot_identityKeyVaultIdentity(t *testing.T) {
 
 	data.ResourceTest(t, r, []acceptance.TestStep{
 		{
-			Config: r.identityUserAssignedKeyVaultIdentity(data, SkuStandardPlan),
+			Config: r.basic(data, SkuStandardPlan),
+			Check: acceptance.ComposeTestCheckFunc(
+				check.That(data.ResourceName).ExistsInAzure(r),
+				check.That(data.ResourceName).Key("kind").HasValue("functionapp,linux"),
+			),
+		},
+		data.ImportStep(),
+		{
+			Config: r.updateStorageAccount(data, SkuStandardPlan),
 			Check: acceptance.ComposeTestCheckFunc(
 				check.That(data.ResourceName).ExistsInAzure(r),
+				check.That(data.ResourceName).Key("kind").HasValue("functionapp,linux"),
 			),
 		},
+		data.ImportStep(),
 	})
 }
 
@@ -1147,7 +1157,6 @@ func TestAccLinuxFunctionAppSlot_storageAccountKeyVaultSecret(t *testing.T) {
 			Config: r.storageAccountKVSecret(data, SkuStandardPlan),
 			Check: acceptance.ComposeTestCheckFunc(
 				check.That(data.ResourceName).ExistsInAzure(r),
-				check.That(data.ResourceName).Key("kind").HasValue("functionapp,linux"),
 			),
 		},
 		data.ImportStep("site_credential.0.password"),
diff --git a/internal/services/automation/automation_runbook_resource.go b/internal/services/automation/automation_runbook_resource.go
index fd0873abad..a3c6fb2896 100644
--- a/internal/services/automation/automation_runbook_resource.go
+++ b/internal/services/automation/automation_runbook_resource.go
@@ -8,6 +8,8 @@ import (
 	"log"
 	"time"
 
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+
 	"github.com/gofrs/uuid"
 	"github.com/hashicorp/go-azure-helpers/lang/pointer"
 	"github.com/hashicorp/go-azure-helpers/lang/response"
@@ -132,7 +134,7 @@ func resourceAutomationRunbook() *pluginsdk.Resource {
 					string(runbook.RunbookTypeEnumPowerShellWorkflow),
 					string(runbook.RunbookTypeEnumPowerShellSevenTwo),
 					string(runbook.RunbookTypeEnumScript),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"log_progress": {
diff --git a/internal/services/automation/automation_schedule_resource.go b/internal/services/automation/automation_schedule_resource.go
index 111ae21ae1..ed886bf6b7 100644
--- a/internal/services/automation/automation_schedule_resource.go
+++ b/internal/services/automation/automation_schedule_resource.go
@@ -6,6 +6,7 @@ package automation
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"strings"
 	"time"
@@ -74,7 +75,7 @@ func resourceAutomationSchedule() *pluginsdk.Resource {
 					string(schedule.ScheduleFrequencyMonth),
 					string(schedule.ScheduleFrequencyOneTime),
 					string(schedule.ScheduleFrequencyWeek),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			// ignored when frequency is `OneTime`
@@ -127,7 +128,8 @@ func resourceAutomationSchedule() *pluginsdk.Resource {
 						string(schedule.ScheduleDayFriday),
 						string(schedule.ScheduleDaySaturday),
 						string(schedule.ScheduleDaySunday),
-					}, false),
+					}, features.CaseInsensitive()),
+					DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 				},
 				Set:           set.HashStringIgnoreCase,
 				ConflictsWith: []string{"month_days", "monthly_occurrence"},
@@ -164,7 +166,7 @@ func resourceAutomationSchedule() *pluginsdk.Resource {
 								string(schedule.ScheduleDayFriday),
 								string(schedule.ScheduleDaySaturday),
 								string(schedule.ScheduleDaySunday),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 						"occurrence": {
 							Type:     pluginsdk.TypeInt,
diff --git a/internal/services/cdn/cdn_endpoint_resource.go b/internal/services/cdn/cdn_endpoint_resource.go
index 81c443076a..862c644a49 100644
--- a/internal/services/cdn/cdn_endpoint_resource.go
+++ b/internal/services/cdn/cdn_endpoint_resource.go
@@ -5,6 +5,8 @@ package cdn
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"time"
 
@@ -170,7 +172,8 @@ func resourceCdnEndpoint() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(cdn.ActionTypeAllow),
 								string(cdn.ActionTypeBlock),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 						"country_codes": {
 							Type:     pluginsdk.TypeList,
@@ -192,7 +195,8 @@ func resourceCdnEndpoint() *pluginsdk.Resource {
 					string(cdn.OptimizationTypeGeneralWebDelivery),
 					string(cdn.OptimizationTypeLargeFileDownload),
 					string(cdn.OptimizationTypeVideoOnDemandMediaStreaming),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"fqdn": {
diff --git a/internal/services/cdn/cdn_profile_resource.go b/internal/services/cdn/cdn_profile_resource.go
index 67956f15c9..0b70ccb184 100644
--- a/internal/services/cdn/cdn_profile_resource.go
+++ b/internal/services/cdn/cdn_profile_resource.go
@@ -5,6 +5,8 @@ package cdn
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"time"
 
 	"github.com/Azure/azure-sdk-for-go/services/cdn/mgmt/2020-09-01/cdn" // nolint: staticcheck
@@ -67,7 +69,8 @@ func resourceCdnProfile() *pluginsdk.Resource {
 					string(cdn.SkuNameStandardVerizon),
 					string(cdn.SkuNameStandardMicrosoft),
 					string(cdn.SkuNamePremiumVerizon),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"tags": tags.Schema(),
diff --git a/internal/services/compute/image_resource.go b/internal/services/compute/image_resource.go
index d1de175cb8..d18589669e 100644
--- a/internal/services/compute/image_resource.go
+++ b/internal/services/compute/image_resource.go
@@ -7,6 +7,9 @@ import (
 	"fmt"
 	"time"
 
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/tombuildsstuff/kermit/sdk/compute/2022-08-01/compute"
+
 	"github.com/hashicorp/go-azure-helpers/lang/pointer"
 	"github.com/hashicorp/go-azure-helpers/lang/response"
 	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
@@ -88,18 +91,18 @@ func resourceImage() *pluginsdk.Resource {
 							Type:     pluginsdk.TypeString,
 							Optional: true,
 							ValidateFunc: validation.StringInSlice([]string{
-								string(images.OperatingSystemTypesLinux),
-								string(images.OperatingSystemTypesWindows),
-							}, false),
+								string(compute.OperatingSystemTypesLinux),
+								string(compute.OperatingSystemTypesWindows),
+							}, features.CaseInsensitive()),
 						},
 
 						"os_state": {
 							Type:     pluginsdk.TypeString,
 							Optional: true,
 							ValidateFunc: validation.StringInSlice([]string{
-								string(images.OperatingSystemStateTypesGeneralized),
-								string(images.OperatingSystemStateTypesSpecialized),
-							}, false),
+								string(compute.OperatingSystemStateTypesGeneralized),
+								string(compute.OperatingSystemStateTypesSpecialized),
+							}, features.CaseInsensitive()),
 						},
 
 						"managed_disk_id": {
@@ -123,10 +126,10 @@ func resourceImage() *pluginsdk.Resource {
 							Optional: true,
 							Default:  string(images.CachingTypesNone),
 							ValidateFunc: validation.StringInSlice([]string{
-								string(images.CachingTypesNone),
-								string(images.CachingTypesReadOnly),
-								string(images.CachingTypesReadWrite),
-							}, false),
+								string(compute.CachingTypesNone),
+								string(compute.CachingTypesReadOnly),
+								string(compute.CachingTypesReadWrite),
+							}, features.CaseInsensitive()),
 						},
 
 						"size_gb": {
@@ -176,10 +179,11 @@ func resourceImage() *pluginsdk.Resource {
 							Optional: true,
 							Default:  string(images.CachingTypesNone),
 							ValidateFunc: validation.StringInSlice([]string{
-								string(images.CachingTypesNone),
-								string(images.CachingTypesReadOnly),
-								string(images.CachingTypesReadWrite),
-							}, false),
+								string(compute.CachingTypesNone),
+								string(compute.CachingTypesReadOnly),
+								string(compute.CachingTypesReadWrite),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"size_gb": {
diff --git a/internal/services/compute/linux_virtual_machine_resource.go b/internal/services/compute/linux_virtual_machine_resource.go
index 18857dca52..9120f6a6bd 100644
--- a/internal/services/compute/linux_virtual_machine_resource.go
+++ b/internal/services/compute/linux_virtual_machine_resource.go
@@ -361,11 +361,11 @@ func resourceLinuxVirtualMachine() *pluginsdk.Resource {
 			},
 
 			"platform_fault_domain": {
-				Type:         pluginsdk.TypeInt,
-				Optional:     true,
-				Default:      -1,
-				ForceNew:     true,
-				RequiredWith: []string{"virtual_machine_scale_set_id"},
+				Type:     pluginsdk.TypeInt,
+				Optional: true,
+				Default:  -1,
+				ForceNew: true,
+				//RequiredWith: []string{"virtual_machine_scale_set_id"},
 				ValidateFunc: validation.IntAtLeast(-1),
 			},
 
diff --git a/internal/services/compute/managed_disk_resource.go b/internal/services/compute/managed_disk_resource.go
index 619b11b2a3..2b87497d64 100644
--- a/internal/services/compute/managed_disk_resource.go
+++ b/internal/services/compute/managed_disk_resource.go
@@ -164,6 +164,7 @@ func resourceManagedDisk() *pluginsdk.Resource {
 				Type:     pluginsdk.TypeString,
 				Optional: true,
 				ValidateFunc: validation.StringInSlice([]string{
+
 					string(disks.OperatingSystemTypesWindows),
 					string(disks.OperatingSystemTypesLinux),
 				}, false),
diff --git a/internal/services/compute/snapshot_resource.go b/internal/services/compute/snapshot_resource.go
index 539c138df6..5446846a89 100644
--- a/internal/services/compute/snapshot_resource.go
+++ b/internal/services/compute/snapshot_resource.go
@@ -68,7 +68,7 @@ func resourceSnapshot() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(snapshots.DiskCreateOptionCopy),
 					string(snapshots.DiskCreateOptionImport),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"incremental_enabled": {
diff --git a/internal/services/compute/virtual_machine_data_disk_attachment_resource.go b/internal/services/compute/virtual_machine_data_disk_attachment_resource.go
index db0a760341..fe30ade2d5 100644
--- a/internal/services/compute/virtual_machine_data_disk_attachment_resource.go
+++ b/internal/services/compute/virtual_machine_data_disk_attachment_resource.go
@@ -5,6 +5,7 @@ package compute
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -71,7 +72,8 @@ func resourceVirtualMachineDataDiskAttachment() *pluginsdk.Resource {
 					string(virtualmachines.CachingTypesNone),
 					string(virtualmachines.CachingTypesReadOnly),
 					string(virtualmachines.CachingTypesReadWrite),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"create_option": {
@@ -82,7 +84,8 @@ func resourceVirtualMachineDataDiskAttachment() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(virtualmachines.DiskCreateOptionTypesAttach),
 					string(virtualmachines.DiskCreateOptionTypesEmpty),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"write_accelerator_enabled": {
diff --git a/internal/services/compute/windows_virtual_machine_resource.go b/internal/services/compute/windows_virtual_machine_resource.go
index 4c6030c160..e320bb0c99 100644
--- a/internal/services/compute/windows_virtual_machine_resource.go
+++ b/internal/services/compute/windows_virtual_machine_resource.go
@@ -383,11 +383,11 @@ func resourceWindowsVirtualMachine() *pluginsdk.Resource {
 			},
 
 			"platform_fault_domain": {
-				Type:         pluginsdk.TypeInt,
-				Optional:     true,
-				Default:      -1,
-				ForceNew:     true,
-				RequiredWith: []string{"virtual_machine_scale_set_id"},
+				Type:     pluginsdk.TypeInt,
+				Optional: true,
+				Default:  -1,
+				ForceNew: true,
+				//RequiredWith: []string{"virtual_machine_scale_set_id"},
 				ValidateFunc: validation.IntAtLeast(-1),
 			},
 
diff --git a/internal/services/containers/container_group_resource.go b/internal/services/containers/container_group_resource.go
index 8c58fcc2df..be6dd18437 100644
--- a/internal/services/containers/container_group_resource.go
+++ b/internal/services/containers/container_group_resource.go
@@ -11,6 +11,8 @@ import (
 	"strings"
 	"time"
 
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
+
 	"github.com/hashicorp/go-azure-helpers/lang/pointer"
 	"github.com/hashicorp/go-azure-helpers/lang/response"
 	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
@@ -72,7 +74,8 @@ func resourceContainerGroup() *pluginsdk.Resource {
 					string(containerinstance.ContainerGroupIPAddressTypePublic),
 					string(containerinstance.ContainerGroupIPAddressTypePrivate),
 					"None",
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"os_type": {
@@ -82,7 +85,8 @@ func resourceContainerGroup() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(containerinstance.OperatingSystemTypesWindows),
 					string(containerinstance.OperatingSystemTypesLinux),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"image_registry_credential": {
@@ -168,7 +172,7 @@ func resourceContainerGroup() *pluginsdk.Resource {
 					string(containerinstance.ContainerGroupRestartPolicyAlways),
 					string(containerinstance.ContainerGroupRestartPolicyNever),
 					string(containerinstance.ContainerGroupRestartPolicyOnFailure),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"dns_name_label": {
diff --git a/internal/services/containers/container_registry_resource.go b/internal/services/containers/container_registry_resource.go
index b4421f2947..0eb8adf83a 100644
--- a/internal/services/containers/container_registry_resource.go
+++ b/internal/services/containers/container_registry_resource.go
@@ -7,7 +7,6 @@ import (
 	"context"
 	"fmt"
 	"log"
-	"sort"
 	"strings"
 	"time"
 
@@ -762,11 +761,6 @@ func resourceContainerRegistryRead(d *pluginsdk.ResourceData, meta interface{})
 		}
 	}
 
-	// The order of the georeplications returned from the list API is not consistent. We simply order it alphabetically to be consistent.
-	sort.Slice(geoReplications, func(i, j int) bool {
-		return geoReplications[i].(map[string]interface{})["location"].(string) < geoReplications[j].(map[string]interface{})["location"].(string)
-	})
-
 	d.Set("georeplications", geoReplications)
 
 	return nil
diff --git a/internal/services/containers/kubernetes_cluster_resource.go b/internal/services/containers/kubernetes_cluster_resource.go
index d147df68f2..f726cb9772 100644
--- a/internal/services/containers/kubernetes_cluster_resource.go
+++ b/internal/services/containers/kubernetes_cluster_resource.go
@@ -1060,7 +1060,7 @@ func resourceKubernetesCluster() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(managedclusters.LoadBalancerSkuBasic),
 								string(managedclusters.LoadBalancerSkuStandard),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"outbound_type": {
diff --git a/internal/services/cosmos/common/schema.go b/internal/services/cosmos/common/schema.go
index b141d14cfd..0e3d2fd1b2 100644
--- a/internal/services/cosmos/common/schema.go
+++ b/internal/services/cosmos/common/schema.go
@@ -107,9 +107,10 @@ func CosmosDbIndexingPolicySchema() *pluginsdk.Schema {
 				// `automatic` is excluded as it is deprecated; see https://stackoverflow.com/a/58721386
 				// `indexing_mode` case changes from 2020-04-01 to 2021-01-15 issue https://github.com/Azure/azure-rest-api-specs/issues/14051
 				"indexing_mode": {
-					Type:     pluginsdk.TypeString,
-					Optional: true,
-					Default:  documentdb.IndexingModeConsistent,
+					Type:             pluginsdk.TypeString,
+					Optional:         true,
+					Default:          documentdb.IndexingModeConsistent,
+					DiffSuppressFunc: suppress.CaseDifferenceV2Only, // Open issue https://github.com/Azure/azure-sdk-for-go/issues/6603
 					ValidateFunc: validation.StringInSlice([]string{
 						string(documentdb.IndexingModeConsistent),
 						string(documentdb.IndexingModeNone),
diff --git a/internal/services/cosmos/cosmosdb_account_resource.go b/internal/services/cosmos/cosmosdb_account_resource.go
index bdbf31ad05..fb941af76c 100644
--- a/internal/services/cosmos/cosmosdb_account_resource.go
+++ b/internal/services/cosmos/cosmosdb_account_resource.go
@@ -13,6 +13,8 @@ import (
 	"strings"
 	"time"
 
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
+
 	"github.com/Azure/azure-sdk-for-go/services/cosmos-db/mgmt/2021-10-15/documentdb" // nolint: staticcheck
 	"github.com/hashicorp/go-azure-helpers/lang/pointer"
 	"github.com/hashicorp/go-azure-helpers/lang/response"
@@ -204,7 +206,7 @@ func resourceCosmosDbAccount() *pluginsdk.Resource {
 				Required: true,
 				ValidateFunc: validation.StringInSlice([]string{
 					string(cosmosdb.DatabaseAccountOfferTypeStandard),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"analytical_storage": {
@@ -291,7 +293,7 @@ func resourceCosmosDbAccount() *pluginsdk.Resource {
 					string(cosmosdb.DatabaseAccountKindGlobalDocumentDB),
 					string(cosmosdb.DatabaseAccountKindMongoDB),
 					string(cosmosdb.DatabaseAccountKindParse),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"ip_range_filter": func() *schema.Schema {
@@ -387,7 +389,7 @@ func resourceCosmosDbAccount() *pluginsdk.Resource {
 								string(cosmosdb.DefaultConsistencyLevelEventual),
 								string(cosmosdb.DefaultConsistencyLevelSession),
 								string(cosmosdb.DefaultConsistencyLevelStrong),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						// This value can only change if the 'consistency_level' is set to 'BoundedStaleness'
@@ -446,8 +448,9 @@ func resourceCosmosDbAccount() *pluginsdk.Resource {
 				Elem: &pluginsdk.Resource{
 					Schema: map[string]*pluginsdk.Schema{
 						"name": {
-							Type:     pluginsdk.TypeString,
-							Required: true,
+							Type:             pluginsdk.TypeString,
+							Required:         true,
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 							ValidateFunc: validation.StringInSlice([]string{
 								string(databaseAccountCapabilitiesEnableAggregationPipeline),
 								string(databaseAccountCapabilitiesEnableCassandra),
diff --git a/internal/services/cosmos/cosmosdb_cassandra_cluster_resource_test.go b/internal/services/cosmos/cosmosdb_cassandra_cluster_resource_test.go
index e6a2b93e01..53efd0fc1f 100644
--- a/internal/services/cosmos/cosmosdb_cassandra_cluster_resource_test.go
+++ b/internal/services/cosmos/cosmosdb_cassandra_cluster_resource_test.go
@@ -18,6 +18,18 @@ import (
 
 type CassandraClusterResource struct{}
 
+func TestAccCassandraCluster(t *testing.T) {
+	// NOTE: this is a combined test rather than separate split out tests due to all below TCs sharing same sp
+	acceptance.RunTestsInSequence(t, map[string]map[string]func(t *testing.T){
+		"basic": {
+			"basic":          testAccCassandraCluster_basic,
+			"requiresImport": testAccCassandraCluster_requiresImport,
+			"complete":       testAccCassandraCluster_complete,
+			"update":         testAccCassandraCluster_update,
+		},
+	})
+}
+
 func testAccCassandraCluster_basic(t *testing.T) {
 	data := acceptance.BuildTestData(t, "azurerm_cosmosdb_cassandra_cluster", "test")
 	r := CassandraClusterResource{}
diff --git a/internal/services/cosmos/cosmosdb_gremlin_graph_resource.go b/internal/services/cosmos/cosmosdb_gremlin_graph_resource.go
index ba13f83bab..6c6e7bd44b 100644
--- a/internal/services/cosmos/cosmosdb_gremlin_graph_resource.go
+++ b/internal/services/cosmos/cosmosdb_gremlin_graph_resource.go
@@ -6,6 +6,7 @@ package cosmos
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strings"
 	"time"
@@ -126,8 +127,9 @@ func resourceCosmosDbGremlinGraph() *pluginsdk.Resource {
 
 						// case change in 2021-01-15, issue https://github.com/Azure/azure-rest-api-specs/issues/14051
 						"indexing_mode": {
-							Type:     pluginsdk.TypeString,
-							Required: true,
+							Type:             pluginsdk.TypeString,
+							Required:         true,
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only, // Open issue https://github.com/Azure/azure-sdk-for-go/issues/6603
 							ValidateFunc: validation.StringInSlice([]string{
 								string(cosmosdb.IndexingModeConsistent),
 								string(cosmosdb.IndexingModeNone),
diff --git a/internal/services/dns/dns_caa_record_resource.go b/internal/services/dns/dns_caa_record_resource.go
index 24f5734126..ed9096b273 100644
--- a/internal/services/dns/dns_caa_record_resource.go
+++ b/internal/services/dns/dns_caa_record_resource.go
@@ -14,8 +14,10 @@ import (
 	"github.com/hashicorp/go-azure-sdk/resource-manager/dns/2018-05-01/recordsets"
 	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/services/dns/migration"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
 )
@@ -82,7 +84,8 @@ func resourceDnsCaaRecord() *pluginsdk.Resource {
 								"issue",
 								"issuewild",
 								"iodef",
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"value": {
diff --git a/internal/services/eventhub/eventhub_namespace_resource.go b/internal/services/eventhub/eventhub_namespace_resource.go
index 4c348213e9..578b65b5ac 100644
--- a/internal/services/eventhub/eventhub_namespace_resource.go
+++ b/internal/services/eventhub/eventhub_namespace_resource.go
@@ -80,7 +80,7 @@ func resourceEventHubNamespace() *pluginsdk.Resource {
 					string(namespaces.SkuNameBasic),
 					string(namespaces.SkuNameStandard),
 					string(namespaces.SkuNamePremium),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"capacity": {
diff --git a/internal/services/eventhub/eventhub_resource.go b/internal/services/eventhub/eventhub_resource.go
index b3cb1e5f84..7cb1c42d70 100644
--- a/internal/services/eventhub/eventhub_resource.go
+++ b/internal/services/eventhub/eventhub_resource.go
@@ -5,6 +5,7 @@ package eventhub
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -93,7 +94,7 @@ func resourceEventHub() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(eventhubs.EncodingCaptureDescriptionAvro),
 								string(eventhubs.EncodingCaptureDescriptionAvroDeflate),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 						"interval_in_seconds": {
 							Type:         pluginsdk.TypeInt,
diff --git a/internal/services/firewall/firewall_policy_resource.go b/internal/services/firewall/firewall_policy_resource.go
index 29d42ef784..f2f9d678ab 100644
--- a/internal/services/firewall/firewall_policy_resource.go
+++ b/internal/services/firewall/firewall_policy_resource.go
@@ -8,6 +8,8 @@ import (
 	"log"
 	"time"
 
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+
 	"github.com/hashicorp/go-azure-helpers/lang/pointer"
 	"github.com/hashicorp/go-azure-helpers/lang/response"
 	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
@@ -790,14 +792,13 @@ func resourceFirewallPolicySchema() map[string]*pluginsdk.Schema {
 								"protocol": {
 									Type:     pluginsdk.TypeString,
 									Required: true,
-									// protocol to be one of [ICMP ANY TCP UDP] but response may be "Any"
-									DiffSuppressFunc: suppress.CaseDifference,
 									ValidateFunc: validation.StringInSlice([]string{
 										string(firewallpolicies.FirewallPolicyIntrusionDetectionProtocolICMP),
 										string(firewallpolicies.FirewallPolicyIntrusionDetectionProtocolANY),
 										string(firewallpolicies.FirewallPolicyIntrusionDetectionProtocolTCP),
 										string(firewallpolicies.FirewallPolicyIntrusionDetectionProtocolUDP),
-									}, true),
+									}, features.CaseInsensitive()),
+									DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 								},
 								"source_addresses": {
 									Type:     pluginsdk.TypeSet,
diff --git a/internal/services/hdinsight/hdinsight_hadoop_cluster_resource.go b/internal/services/hdinsight/hdinsight_hadoop_cluster_resource.go
index 067484d622..f17abd35c9 100644
--- a/internal/services/hdinsight/hdinsight_hadoop_cluster_resource.go
+++ b/internal/services/hdinsight/hdinsight_hadoop_cluster_resource.go
@@ -5,6 +5,7 @@ package hdinsight
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strings"
 	"time"
@@ -147,9 +148,10 @@ func resourceHDInsightHadoopCluster() *pluginsdk.Resource {
 									},
 
 									"vm_size": {
-										Type:         pluginsdk.TypeString,
-										Required:     true,
-										ValidateFunc: validation.StringInSlice(validate.NodeDefinitionVMSize, false),
+										Type:             pluginsdk.TypeString,
+										Required:         true,
+										DiffSuppressFunc: suppress.CaseDifferenceV2Only,
+										ValidateFunc:     validation.StringInSlice(validate.NodeDefinitionVMSize, false),
 									},
 
 									"install_script_action": {
diff --git a/internal/services/hdinsight/schema.go b/internal/services/hdinsight/schema.go
index 36c461cbdc..da5c8b4982 100644
--- a/internal/services/hdinsight/schema.go
+++ b/internal/services/hdinsight/schema.go
@@ -5,6 +5,8 @@ package hdinsight
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"net/url"
 	"regexp"
 	"strings"
@@ -42,7 +44,8 @@ func SchemaHDInsightTier() *pluginsdk.Schema {
 		ValidateFunc: validation.StringInSlice([]string{
 			string(clusters.TierStandard),
 			string(clusters.TierPremium),
-		}, false),
+		}, features.CaseInsensitive()),
+		DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 	}
 }
 
@@ -1165,10 +1168,11 @@ type HDInsightNodeDefinition struct {
 func SchemaHDInsightNodeDefinition(schemaLocation string, definition HDInsightNodeDefinition, required bool) *pluginsdk.Schema {
 	result := map[string]*pluginsdk.Schema{
 		"vm_size": {
-			Type:         pluginsdk.TypeString,
-			Required:     true,
-			ForceNew:     true,
-			ValidateFunc: validation.StringInSlice(validate.NodeDefinitionVMSize, false),
+			Type:             pluginsdk.TypeString,
+			Required:         true,
+			ForceNew:         true,
+			DiffSuppressFunc: suppress.CaseDifferenceV2Only,
+			ValidateFunc:     validation.StringInSlice(validate.NodeDefinitionVMSize, false),
 		},
 		"username": {
 			Type:     pluginsdk.TypeString,
diff --git a/internal/services/iotcentral/iotcentral_application_resource.go b/internal/services/iotcentral/iotcentral_application_resource.go
index e15c10ac79..ebcdb70c0b 100644
--- a/internal/services/iotcentral/iotcentral_application_resource.go
+++ b/internal/services/iotcentral/iotcentral_application_resource.go
@@ -90,7 +90,7 @@ func resourceIotCentralApplication() *pluginsdk.Resource {
 					string(apps.AppSkuSTOne),
 					string(apps.AppSkuSTTwo),
 					string(apps.AppSkuSTZero),
-				}, false),
+				}, features.CaseInsensitive()),
 				Default: string(apps.AppSkuSTOne),
 			},
 			"template": {
diff --git a/internal/services/iothub/iothub_resource.go b/internal/services/iothub/iothub_resource.go
index 3d40271135..b2dccadabb 100644
--- a/internal/services/iothub/iothub_resource.go
+++ b/internal/services/iothub/iothub_resource.go
@@ -30,6 +30,7 @@ import (
 	servicebusValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/servicebus/validate"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
 	"github.com/hashicorp/terraform-provider-azurerm/utils"
@@ -341,11 +342,13 @@ func resourceIotHub() *pluginsdk.Resource {
 						},
 
 						"encoding": {
-							Type:             pluginsdk.TypeString,
-							Optional:         true,
-							ForceNew:         true,
-							Default:          string(devices.EncodingAvro),
-							DiffSuppressFunc: suppressIfTypeIsNot("AzureIotHub.StorageContainer"),
+							Type:     pluginsdk.TypeString,
+							Optional: true,
+							ForceNew: true,
+							Default:  string(devices.EncodingAvro),
+							DiffSuppressFunc: suppressWhenAny(
+								suppressIfTypeIsNot("AzureIotHub.StorageContainer"),
+								suppress.CaseDifferenceV2Only),
 							ValidateFunc: validation.StringInSlice([]string{
 								string(devices.EncodingAvro),
 								string(devices.EncodingAvroDeflate),
diff --git a/internal/services/keyvault/key_vault_certificate_resource.go b/internal/services/keyvault/key_vault_certificate_resource.go
index 90e02d8080..8970530193 100644
--- a/internal/services/keyvault/key_vault_certificate_resource.go
+++ b/internal/services/keyvault/key_vault_certificate_resource.go
@@ -9,6 +9,8 @@ import (
 	"encoding/base64"
 	"encoding/hex"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"math"
 	"strings"
@@ -157,7 +159,8 @@ func resourceKeyVaultCertificate() *pluginsdk.Resource {
 											string(keyvault.JSONWebKeyTypeRSA),
 											string(keyvault.JSONWebKeyTypeRSAHSM),
 											string(keyvault.JSONWebKeyTypeOct),
-										}, false),
+										}, features.CaseInsensitive()),
+										DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 									},
 									"reuse_key": {
 										Type:     pluginsdk.TypeBool,
diff --git a/internal/services/legacy/virtual_machine_resource.go b/internal/services/legacy/virtual_machine_resource.go
index 2bc0fb2243..03efb5e451 100644
--- a/internal/services/legacy/virtual_machine_resource.go
+++ b/internal/services/legacy/virtual_machine_resource.go
@@ -13,6 +13,8 @@ import (
 	"strings"
 	"time"
 
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+
 	"github.com/hashicorp/go-azure-helpers/lang/pointer"
 	"github.com/hashicorp/go-azure-helpers/lang/response"
 	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
@@ -154,7 +156,7 @@ func resourceVirtualMachine() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					"Windows_Client",
 					"Windows_Server",
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"vm_size": {
@@ -220,7 +222,8 @@ func resourceVirtualMachine() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(virtualmachines.OperatingSystemTypesLinux),
 								string(virtualmachines.OperatingSystemTypesWindows),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"name": {
@@ -255,7 +258,8 @@ func resourceVirtualMachine() *pluginsdk.Resource {
 								string(virtualmachines.StorageAccountTypesPremiumLRS),
 								string(virtualmachines.StorageAccountTypesStandardLRS),
 								string(virtualmachines.StorageAccountTypesStandardSSDLRS),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"image_uri": {
@@ -329,7 +333,8 @@ func resourceVirtualMachine() *pluginsdk.Resource {
 								string(virtualmachines.StorageAccountTypesStandardLRS),
 								string(virtualmachines.StorageAccountTypesStandardSSDLRS),
 								string(virtualmachines.StorageAccountTypesUltraSSDLRS),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"create_option": {
@@ -476,7 +481,8 @@ func resourceVirtualMachine() *pluginsdk.Resource {
 										ValidateFunc: validation.StringInSlice([]string{
 											"HTTP",
 											"HTTPS",
-										}, false),
+										}, features.CaseInsensitive()),
+										DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 									},
 									"certificate_url": {
 										Type:     pluginsdk.TypeString,
diff --git a/internal/services/legacy/virtual_machine_scale_set_resource.go b/internal/services/legacy/virtual_machine_scale_set_resource.go
index 799f142449..6aada8c4d7 100644
--- a/internal/services/legacy/virtual_machine_scale_set_resource.go
+++ b/internal/services/legacy/virtual_machine_scale_set_resource.go
@@ -12,6 +12,8 @@ import (
 	"strings"
 	"time"
 
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+
 	"github.com/hashicorp/go-azure-helpers/lang/pointer"
 	"github.com/hashicorp/go-azure-helpers/lang/response"
 	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
@@ -123,7 +125,7 @@ func resourceVirtualMachineScaleSet() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					"Windows_Client",
 					"Windows_Server",
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"upgrade_policy_mode": {
@@ -133,7 +135,8 @@ func resourceVirtualMachineScaleSet() *pluginsdk.Resource {
 					string(virtualmachinescalesets.UpgradeModeAutomatic),
 					string(virtualmachinescalesets.UpgradeModeManual),
 					string(virtualmachinescalesets.UpgradeModeRolling),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"health_probe_id": {
@@ -206,7 +209,8 @@ func resourceVirtualMachineScaleSet() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(virtualmachinescalesets.VirtualMachinePriorityTypesLow),
 					string(virtualmachinescalesets.VirtualMachinePriorityTypesRegular),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"eviction_policy": {
@@ -572,7 +576,8 @@ func resourceVirtualMachineScaleSet() *pluginsdk.Resource {
 								string(virtualmachinescalesets.StorageAccountTypesPremiumLRS),
 								string(virtualmachinescalesets.StorageAccountTypesStandardLRS),
 								string(virtualmachinescalesets.StorageAccountTypesStandardSSDLRS),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"caching": {
@@ -631,7 +636,8 @@ func resourceVirtualMachineScaleSet() *pluginsdk.Resource {
 								string(virtualmachinescalesets.StorageAccountTypesPremiumLRS),
 								string(virtualmachinescalesets.StorageAccountTypesStandardLRS),
 								string(virtualmachinescalesets.StorageAccountTypesStandardSSDLRS),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 					},
 				},
diff --git a/internal/services/loadbalancer/loadbalancer_resource.go b/internal/services/loadbalancer/loadbalancer_resource.go
index 88ad72fb9d..f9c43c1458 100644
--- a/internal/services/loadbalancer/loadbalancer_resource.go
+++ b/internal/services/loadbalancer/loadbalancer_resource.go
@@ -6,6 +6,7 @@ package loadbalancer
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"reflect"
 	"strconv"
@@ -399,7 +400,8 @@ func resourceArmLoadBalancerSchema() map[string]*pluginsdk.Schema {
 				string(loadbalancers.LoadBalancerSkuNameBasic),
 				string(loadbalancers.LoadBalancerSkuNameStandard),
 				string(loadbalancers.LoadBalancerSkuNameGateway),
-			}, false),
+			}, features.CaseInsensitive()),
+			DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 		},
 
 		"sku_tier": {
diff --git a/internal/services/loadbalancer/nat_pool_resource.go b/internal/services/loadbalancer/nat_pool_resource.go
index d07fec653a..2c55900279 100644
--- a/internal/services/loadbalancer/nat_pool_resource.go
+++ b/internal/services/loadbalancer/nat_pool_resource.go
@@ -5,6 +5,7 @@ package loadbalancer
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -71,7 +72,7 @@ func resourceArmLoadBalancerNatPool() *pluginsdk.Resource {
 					string(loadbalancers.TransportProtocolAll),
 					string(loadbalancers.TransportProtocolTcp),
 					string(loadbalancers.TransportProtocolUdp),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"frontend_port_start": {
diff --git a/internal/services/loadbalancer/nat_rule_resource.go b/internal/services/loadbalancer/nat_rule_resource.go
index 773f12d0c5..a3b8822324 100644
--- a/internal/services/loadbalancer/nat_rule_resource.go
+++ b/internal/services/loadbalancer/nat_rule_resource.go
@@ -5,6 +5,7 @@ package loadbalancer
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -69,7 +70,7 @@ func resourceArmLoadBalancerNatRule() *pluginsdk.Resource {
 					string(loadbalancers.TransportProtocolAll),
 					string(loadbalancers.TransportProtocolTcp),
 					string(loadbalancers.TransportProtocolUdp),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"frontend_port": {
diff --git a/internal/services/loadbalancer/probe_resource.go b/internal/services/loadbalancer/probe_resource.go
index 5b4376f28d..ea4551f9ab 100644
--- a/internal/services/loadbalancer/probe_resource.go
+++ b/internal/services/loadbalancer/probe_resource.go
@@ -5,6 +5,7 @@ package loadbalancer
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -67,7 +68,7 @@ func resourceArmLoadBalancerProbe() *pluginsdk.Resource {
 					string(loadbalancers.ProbeProtocolHTTP),
 					string(loadbalancers.ProbeProtocolHTTPS),
 					string(loadbalancers.ProbeProtocolTcp),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"port": {
diff --git a/internal/services/loadbalancer/rule_resource.go b/internal/services/loadbalancer/rule_resource.go
index 1ae1e82215..dd88209bf6 100644
--- a/internal/services/loadbalancer/rule_resource.go
+++ b/internal/services/loadbalancer/rule_resource.go
@@ -5,6 +5,7 @@ package loadbalancer
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -371,7 +372,7 @@ func resourceArmLoadBalancerRuleSchema() map[string]*pluginsdk.Schema {
 				string(loadbalancers.TransportProtocolAll),
 				string(loadbalancers.TransportProtocolTcp),
 				string(loadbalancers.TransportProtocolUdp),
-			}, false),
+			}, features.CaseInsensitive()),
 		},
 
 		"frontend_port": {
diff --git a/internal/services/loganalytics/log_analytics_datasource_windows_event_resource.go b/internal/services/loganalytics/log_analytics_datasource_windows_event_resource.go
index dbbf9132fb..2e56c94e0e 100644
--- a/internal/services/loganalytics/log_analytics_datasource_windows_event_resource.go
+++ b/internal/services/loganalytics/log_analytics_datasource_windows_event_resource.go
@@ -6,6 +6,7 @@ package loganalytics
 import (
 	"encoding/json"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -79,7 +80,8 @@ func resourceLogAnalyticsDataSourceWindowsEvent() *pluginsdk.Resource {
 				Elem: &pluginsdk.Schema{
 					Type: pluginsdk.TypeString,
 					// API backend accepts event_types case-insensitively
-					ValidateFunc: validation.StringInSlice([]string{"Error", "Warning", "Information"}, false),
+					ValidateFunc:     validation.StringInSlice([]string{"Error", "Warning", "Information"}, features.CaseInsensitive()),
+					DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 				},
 			},
 		},
diff --git a/internal/services/loganalytics/log_analytics_workspace_resource.go b/internal/services/loganalytics/log_analytics_workspace_resource.go
index b98942039f..6d29439643 100644
--- a/internal/services/loganalytics/log_analytics_workspace_resource.go
+++ b/internal/services/loganalytics/log_analytics_workspace_resource.go
@@ -6,6 +6,8 @@ package loganalytics
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strconv"
 	"strings"
@@ -115,7 +117,8 @@ func resourceLogAnalyticsWorkspace() *pluginsdk.Resource {
 					string(workspaces.WorkspaceSkuNameEnumStandard),
 					string(workspaces.WorkspaceSkuNameEnumCapacityReservation),
 					"Unlimited", // TODO check if this is actually no longer valid, removed in v28.0.0 of the SDK
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"reservation_capacity_in_gb_per_day": {
diff --git a/internal/services/logic/logic_app_integration_account_batch_configuration_resource.go b/internal/services/logic/logic_app_integration_account_batch_configuration_resource.go
index bdf780b66a..5a0bb36d62 100644
--- a/internal/services/logic/logic_app_integration_account_batch_configuration_resource.go
+++ b/internal/services/logic/logic_app_integration_account_batch_configuration_resource.go
@@ -10,6 +10,8 @@ import (
 	"strings"
 	"time"
 
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+
 	"github.com/hashicorp/go-azure-helpers/lang/response"
 	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
 	"github.com/hashicorp/go-azure-sdk/resource-manager/logic/2019-05-01/integrationaccountbatchconfigurations"
@@ -94,9 +96,10 @@ func resourceLogicAppIntegrationAccountBatchConfiguration() *pluginsdk.Resource
 							Elem: &pluginsdk.Resource{
 								Schema: map[string]*pluginsdk.Schema{
 									"frequency": {
-										Type:         pluginsdk.TypeString,
-										Required:     true,
-										ValidateFunc: validation.StringInSlice(integrationaccountbatchconfigurations.PossibleValuesForRecurrenceFrequency(), false),
+										Type:     pluginsdk.TypeString,
+										Required: true,
+										ValidateFunc: validation.StringInSlice(integrationaccountbatchconfigurations.PossibleValuesForRecurrenceFrequency(),
+											features.CaseInsensitive()),
 									},
 
 									"interval": {
@@ -155,9 +158,10 @@ func resourceLogicAppIntegrationAccountBatchConfiguration() *pluginsdk.Resource
 													Elem: &pluginsdk.Resource{
 														Schema: map[string]*pluginsdk.Schema{
 															"weekday": {
-																Type:         pluginsdk.TypeString,
-																Required:     true,
-																ValidateFunc: validation.StringInSlice(integrationaccountbatchconfigurations.PossibleValuesForDayOfWeek(), false),
+																Type:     pluginsdk.TypeString,
+																Required: true,
+																ValidateFunc: validation.StringInSlice(integrationaccountbatchconfigurations.PossibleValuesForDayOfWeek(),
+																	features.CaseInsensitive()),
 															},
 
 															"week": {
@@ -177,8 +181,9 @@ func resourceLogicAppIntegrationAccountBatchConfiguration() *pluginsdk.Resource
 													Type:     pluginsdk.TypeSet,
 													Optional: true,
 													Elem: &pluginsdk.Schema{
-														Type:         pluginsdk.TypeString,
-														ValidateFunc: validation.StringInSlice(integrationaccountbatchconfigurations.PossibleValuesForDaysOfWeek(), false),
+														Type: pluginsdk.TypeString,
+														ValidateFunc: validation.StringInSlice(integrationaccountbatchconfigurations.PossibleValuesForDaysOfWeek(),
+															features.CaseInsensitive()),
 													},
 													ConflictsWith: []string{"release_criteria.0.recurrence.0.schedule.0.month_days", "release_criteria.0.recurrence.0.schedule.0.monthly"},
 												},
diff --git a/internal/services/logic/logic_app_standard_resource.go b/internal/services/logic/logic_app_standard_resource.go
index 0c29d3383e..4faec6e9f7 100644
--- a/internal/services/logic/logic_app_standard_resource.go
+++ b/internal/services/logic/logic_app_standard_resource.go
@@ -10,6 +10,8 @@ import (
 	"strings"
 	"time"
 
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
+
 	"github.com/Azure/azure-sdk-for-go/services/web/mgmt/2021-02-01/web" // nolint: staticcheck
 	"github.com/hashicorp/go-azure-helpers/lang/pointer"
 	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
@@ -143,7 +145,8 @@ func resourceLogicAppStandard() *pluginsdk.Resource {
 								string(web.ConnectionStringTypeServiceBus),
 								string(web.ConnectionStringTypeSQLAzure),
 								string(web.ConnectionStringTypeSQLServer),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"value": {
@@ -871,7 +874,8 @@ func schemaLogicAppStandardSiteConfig() *pluginsdk.Schema {
 						"v4.0",
 						"v5.0",
 						"v6.0",
-					}, false),
+					}, features.CaseInsensitive()),
+					DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 				},
 
 				"vnet_route_all_enabled": {
diff --git a/internal/services/logz/logz_monitor_resource.go b/internal/services/logz/logz_monitor_resource.go
index 4c3ad9df42..c72a31367e 100644
--- a/internal/services/logz/logz_monitor_resource.go
+++ b/internal/services/logz/logz_monitor_resource.go
@@ -5,6 +5,7 @@ package logz
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -95,7 +96,8 @@ func resourceLogzMonitor() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								"MONTHLY",
 								"WEEKLY",
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"effective_date": {
@@ -112,8 +114,9 @@ func resourceLogzMonitor() *pluginsdk.Resource {
 							ForceNew: true,
 							ValidateFunc: validation.StringInSlice([]string{
 								PlanId100gb14days,
-							}, false),
-							Default: PlanId100gb14days,
+							}, features.CaseInsensitive()),
+							Default:          PlanId100gb14days,
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"usage_type": {
@@ -123,7 +126,8 @@ func resourceLogzMonitor() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								"PAYG",
 								"COMMITTED",
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 					},
 				},
diff --git a/internal/services/media/media_services_account_resource.go b/internal/services/media/media_services_account_resource.go
index 520bf65dd8..128cd14f20 100644
--- a/internal/services/media/media_services_account_resource.go
+++ b/internal/services/media/media_services_account_resource.go
@@ -10,6 +10,8 @@ import (
 	"strings"
 	"time"
 
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+
 	"github.com/hashicorp/go-azure-helpers/lang/pointer"
 	"github.com/hashicorp/go-azure-helpers/lang/response"
 	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
@@ -136,7 +138,7 @@ func resourceMediaServicesAccount() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(accounts.StorageAuthenticationSystem),
 					string(accounts.StorageAuthenticationManagedIdentity),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"key_delivery_access_control": {
@@ -152,7 +154,7 @@ func resourceMediaServicesAccount() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(accounts.DefaultActionDeny),
 								string(accounts.DefaultActionAllow),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"ip_allow_list": {
diff --git a/internal/services/monitor/monitor_autoscale_setting_resource.go b/internal/services/monitor/monitor_autoscale_setting_resource.go
index 2766565528..b7af892e01 100644
--- a/internal/services/monitor/monitor_autoscale_setting_resource.go
+++ b/internal/services/monitor/monitor_autoscale_setting_resource.go
@@ -5,6 +5,8 @@ package monitor
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strconv"
 	"time"
@@ -343,7 +345,8 @@ func resourceMonitorAutoScaleSetting() *pluginsdk.Resource {
 												"Friday",
 												"Saturday",
 												"Sunday",
-											}, false),
+											}, features.CaseInsensitive()),
+											DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 										},
 									},
 									"hours": {
diff --git a/internal/services/mssql/mssql_database_resource.go b/internal/services/mssql/mssql_database_resource.go
index bf746a51b7..59b2cb83ec 100644
--- a/internal/services/mssql/mssql_database_resource.go
+++ b/internal/services/mssql/mssql_database_resource.go
@@ -6,6 +6,7 @@ package mssql
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"strings"
 	"time"
@@ -1657,7 +1658,8 @@ func resourceMsSqlDatabaseSchema() map[string]*pluginsdk.Schema {
 								"Sql_Injection",
 								"Sql_Injection_Vulnerability",
 								"Access_Anomaly",
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 					},
 
@@ -1668,7 +1670,7 @@ func resourceMsSqlDatabaseSchema() map[string]*pluginsdk.Schema {
 						Optional: true,
 						Default:  EmailAccountAdminsStatusDisabled,
 						ValidateFunc: validation.StringInSlice(PossibleValuesForEmailAccountAdminsStatus(),
-							false),
+							features.CaseInsensitive()),
 					},
 
 					"email_addresses": {
@@ -1696,7 +1698,7 @@ func resourceMsSqlDatabaseSchema() map[string]*pluginsdk.Schema {
 						Optional: true,
 						Default:  string(serversecurityalertpolicies.SecurityAlertsPolicyStateDisabled),
 						ValidateFunc: validation.StringInSlice(serversecurityalertpolicies.PossibleValuesForSecurityAlertsPolicyState(),
-							false),
+							features.CaseInsensitive()),
 					},
 
 					"storage_account_access_key": {
diff --git a/internal/services/mssql/mssql_elasticpool_resource.go b/internal/services/mssql/mssql_elasticpool_resource.go
index a78b061fe0..d484e990ba 100644
--- a/internal/services/mssql/mssql_elasticpool_resource.go
+++ b/internal/services/mssql/mssql_elasticpool_resource.go
@@ -6,6 +6,8 @@ package mssql
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strings"
 	"time"
@@ -90,7 +92,8 @@ func resourceMsSqlElasticPool() *pluginsdk.Resource {
 								"BC_Gen5",
 								"BC_DC",
 								"HS_Gen5",
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"capacity": {
@@ -109,7 +112,8 @@ func resourceMsSqlElasticPool() *pluginsdk.Resource {
 								"GeneralPurpose",
 								"BusinessCritical",
 								"Hyperscale",
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"family": {
@@ -120,7 +124,8 @@ func resourceMsSqlElasticPool() *pluginsdk.Resource {
 								"Gen5",
 								"Fsv2",
 								"DC",
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 					},
 				},
diff --git a/internal/services/mssql/mssql_server_security_alert_policy_resource.go b/internal/services/mssql/mssql_server_security_alert_policy_resource.go
index 95a9635019..6cf10653d9 100644
--- a/internal/services/mssql/mssql_server_security_alert_policy_resource.go
+++ b/internal/services/mssql/mssql_server_security_alert_policy_resource.go
@@ -5,6 +5,8 @@ package mssql
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"time"
 
@@ -95,7 +97,8 @@ func resourceMsSqlServerSecurityAlertPolicy() *pluginsdk.Resource {
 					string(sql.SecurityAlertPolicyStateDisabled),
 					string(sql.SecurityAlertPolicyStateEnabled),
 					string(sql.SecurityAlertPolicyStateNew),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"storage_account_access_key": {
diff --git a/internal/services/mysql/mysql_server_resource.go b/internal/services/mysql/mysql_server_resource.go
index a7553589e1..8691c8bb72 100644
--- a/internal/services/mysql/mysql_server_resource.go
+++ b/internal/services/mysql/mysql_server_resource.go
@@ -6,6 +6,8 @@ package mysql
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strconv"
 	"strings"
@@ -309,8 +311,9 @@ func resourceMySqlServer() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(servers.ServerVersionFivePointSeven),
 					string(servers.ServerVersionEightPointZero),
-				}, false),
-				ForceNew: true,
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
+				ForceNew:         true,
 			},
 		},
 
diff --git a/internal/services/network/application_gateway_resource.go b/internal/services/network/application_gateway_resource.go
index f5b8bb0e57..4768418a78 100644
--- a/internal/services/network/application_gateway_resource.go
+++ b/internal/services/network/application_gateway_resource.go
@@ -7,6 +7,8 @@ import (
 	"bytes"
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strings"
 	"time"
@@ -213,7 +215,7 @@ func resourceApplicationGateway() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(network.ProtocolHTTP),
 								string(network.ProtocolHTTPS),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"cookie_based_affinity": {
@@ -222,7 +224,7 @@ func resourceApplicationGateway() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(network.ApplicationGatewayCookieBasedAffinityEnabled),
 								string(network.ApplicationGatewayCookieBasedAffinityDisabled),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"affinity_cookie_name": {
@@ -349,7 +351,7 @@ func resourceApplicationGateway() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(network.IPAllocationMethodDynamic),
 								string(network.IPAllocationMethodStatic),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"private_link_configuration_name": {
@@ -464,7 +466,7 @@ func resourceApplicationGateway() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(network.ProtocolHTTP),
 								string(network.ProtocolHTTPS),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"host_name": {
@@ -619,7 +621,8 @@ func resourceApplicationGateway() *pluginsdk.Resource {
 										ValidateFunc: validation.StringInSlice([]string{
 											string(network.IPAllocationMethodDynamic),
 											string(network.IPAllocationMethodStatic),
-										}, false),
+										}, features.CaseInsensitive()),
+										DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 									},
 
 									"primary": {
@@ -827,7 +830,7 @@ func resourceApplicationGateway() *pluginsdk.Resource {
 								string(network.ApplicationGatewaySkuNameWAFLarge),
 								string(network.ApplicationGatewaySkuNameWAFMedium),
 								string(network.ApplicationGatewaySkuNameWAFV2),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"tier": {
@@ -838,7 +841,7 @@ func resourceApplicationGateway() *pluginsdk.Resource {
 								string(network.ApplicationGatewayTierStandardV2),
 								string(network.ApplicationGatewayTierWAF),
 								string(network.ApplicationGatewayTierWAFV2),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"capacity": {
@@ -939,7 +942,7 @@ func resourceApplicationGateway() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(network.ProtocolHTTP),
 								string(network.ProtocolHTTPS),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"path": {
@@ -1416,7 +1419,7 @@ func resourceApplicationGateway() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(network.ApplicationGatewayFirewallModeDetection),
 								string(network.ApplicationGatewayFirewallModePrevention),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"rule_set_type": {
diff --git a/internal/services/network/express_route_circuit_resource.go b/internal/services/network/express_route_circuit_resource.go
index b500b50239..4896bd84aa 100644
--- a/internal/services/network/express_route_circuit_resource.go
+++ b/internal/services/network/express_route_circuit_resource.go
@@ -6,6 +6,7 @@ package network
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -78,7 +79,8 @@ func resourceExpressRouteCircuit() *pluginsdk.Resource {
 								string(network.ExpressRouteCircuitSkuTierLocal),
 								string(network.ExpressRouteCircuitSkuTierStandard),
 								string(network.ExpressRouteCircuitSkuTierPremium),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"family": {
@@ -87,7 +89,8 @@ func resourceExpressRouteCircuit() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(network.ExpressRouteCircuitSkuFamilyMeteredData),
 								string(network.ExpressRouteCircuitSkuFamilyUnlimitedData),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 					},
 				},
diff --git a/internal/services/network/network_security_group_resource.go b/internal/services/network/network_security_group_resource.go
index 668ca0a8d1..a5531c00ba 100644
--- a/internal/services/network/network_security_group_resource.go
+++ b/internal/services/network/network_security_group_resource.go
@@ -13,11 +13,13 @@ import (
 	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
 	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/services/network/parse"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/set"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
 	"github.com/hashicorp/terraform-provider-azurerm/utils"
@@ -84,7 +86,8 @@ func resourceNetworkSecurityGroup() *pluginsdk.Resource {
 								string(network.SecurityRuleProtocolIcmp),
 								string(network.SecurityRuleProtocolAh),
 								string(network.SecurityRuleProtocolEsp),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"source_port_range": {
@@ -155,7 +158,8 @@ func resourceNetworkSecurityGroup() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(network.SecurityRuleAccessAllow),
 								string(network.SecurityRuleAccessDeny),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"priority": {
@@ -170,7 +174,8 @@ func resourceNetworkSecurityGroup() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(network.SecurityRuleDirectionInbound),
 								string(network.SecurityRuleDirectionOutbound),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 					},
 				},
diff --git a/internal/services/network/network_security_rule_resource.go b/internal/services/network/network_security_rule_resource.go
index d1af54365a..3fb960d1bb 100644
--- a/internal/services/network/network_security_rule_resource.go
+++ b/internal/services/network/network_security_rule_resource.go
@@ -14,7 +14,9 @@ import (
 	"github.com/hashicorp/go-azure-sdk/resource-manager/network/2023-09-01/securityrules"
 	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
 	"github.com/hashicorp/terraform-provider-azurerm/utils"
@@ -70,7 +72,8 @@ func resourceNetworkSecurityRule() *pluginsdk.Resource {
 					string(securityrules.SecurityRuleProtocolIcmp),
 					string(securityrules.SecurityRuleProtocolAh),
 					string(securityrules.SecurityRuleProtocolEsp),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"source_port_range": {
@@ -132,7 +135,7 @@ func resourceNetworkSecurityRule() *pluginsdk.Resource {
 			//lintignore:S018
 			"source_application_security_group_ids": {
 				Type:     pluginsdk.TypeSet,
-				MaxItems: 10,
+				MaxItems: 1,
 				Optional: true,
 				Elem:     &pluginsdk.Schema{Type: pluginsdk.TypeString},
 				Set:      pluginsdk.HashString,
@@ -141,7 +144,7 @@ func resourceNetworkSecurityRule() *pluginsdk.Resource {
 			//lintignore:S018
 			"destination_application_security_group_ids": {
 				Type:     pluginsdk.TypeSet,
-				MaxItems: 10,
+				MaxItems: 1,
 				Optional: true,
 				Elem:     &pluginsdk.Schema{Type: pluginsdk.TypeString},
 				Set:      pluginsdk.HashString,
@@ -153,7 +156,8 @@ func resourceNetworkSecurityRule() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(securityrules.SecurityRuleAccessAllow),
 					string(securityrules.SecurityRuleAccessDeny),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"priority": {
@@ -168,7 +172,8 @@ func resourceNetworkSecurityRule() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(securityrules.SecurityRuleDirectionInbound),
 					string(securityrules.SecurityRuleDirectionOutbound),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 		},
 	}
diff --git a/internal/services/network/public_ip_prefix_resource.go b/internal/services/network/public_ip_prefix_resource.go
index f0f001ff61..d909b00794 100644
--- a/internal/services/network/public_ip_prefix_resource.go
+++ b/internal/services/network/public_ip_prefix_resource.go
@@ -5,6 +5,8 @@ package network
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"time"
 
@@ -73,14 +75,15 @@ func resourcePublicIpPrefix() *pluginsdk.Resource {
 			},
 
 			"ip_version": {
-				Type:     pluginsdk.TypeString,
-				Optional: true,
-				Default:  string(network.IPVersionIPv4),
-				ForceNew: true,
+				Type:             pluginsdk.TypeString,
+				Optional:         true,
+				Default:          string(network.IPVersionIPv4),
+				ForceNew:         true,
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 				ValidateFunc: validation.StringInSlice([]string{
 					string(network.IPVersionIPv4),
 					string(network.IPVersionIPv6),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"zones": commonschema.ZonesMultipleOptionalForceNew(),
diff --git a/internal/services/network/public_ip_resource.go b/internal/services/network/public_ip_resource.go
index 783d4697cc..f29ea8b4da 100644
--- a/internal/services/network/public_ip_resource.go
+++ b/internal/services/network/public_ip_resource.go
@@ -5,6 +5,7 @@ package network
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strings"
 	"time"
@@ -89,14 +90,15 @@ func resourcePublicIp() *pluginsdk.Resource {
 			"edge_zone": commonschema.EdgeZoneOptionalForceNew(),
 
 			"ip_version": {
-				Type:     pluginsdk.TypeString,
-				Optional: true,
-				Default:  string(network.IPVersionIPv4),
-				ForceNew: true,
+				Type:             pluginsdk.TypeString,
+				Optional:         true,
+				Default:          string(network.IPVersionIPv4),
+				ForceNew:         true,
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 				ValidateFunc: validation.StringInSlice([]string{
 					string(network.IPVersionIPv4),
 					string(network.IPVersionIPv6),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"sku": {
@@ -113,7 +115,7 @@ func resourcePublicIp() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(network.PublicIPAddressSkuNameBasic),
 					string(network.PublicIPAddressSkuNameStandard),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"sku_tier": {
diff --git a/internal/services/network/route_resource.go b/internal/services/network/route_resource.go
index 2676be7944..865bfbb836 100644
--- a/internal/services/network/route_resource.go
+++ b/internal/services/network/route_resource.go
@@ -5,6 +5,8 @@ package network
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"time"
 
 	"github.com/hashicorp/go-azure-helpers/lang/response"
@@ -71,7 +73,8 @@ func resourceRoute() *pluginsdk.Resource {
 					string(routes.RouteNextHopTypeInternet),
 					string(routes.RouteNextHopTypeVirtualAppliance),
 					string(routes.RouteNextHopTypeNone),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"next_hop_in_ip_address": {
diff --git a/internal/services/network/route_table_resource.go b/internal/services/network/route_table_resource.go
index 72be88cc09..fa4cfce350 100644
--- a/internal/services/network/route_table_resource.go
+++ b/internal/services/network/route_table_resource.go
@@ -5,6 +5,8 @@ package network
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"time"
 
@@ -84,7 +86,8 @@ func resourceRouteTable() *pluginsdk.Resource {
 								string(routetables.RouteNextHopTypeInternet),
 								string(routetables.RouteNextHopTypeVirtualAppliance),
 								string(routetables.RouteNextHopTypeNone),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"next_hop_in_ip_address": {
diff --git a/internal/services/network/virtual_network_gateway_connection_resource.go b/internal/services/network/virtual_network_gateway_connection_resource.go
index 5687410c2c..c265864390 100644
--- a/internal/services/network/virtual_network_gateway_connection_resource.go
+++ b/internal/services/network/virtual_network_gateway_connection_resource.go
@@ -6,6 +6,8 @@ package network
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"time"
 
@@ -62,7 +64,8 @@ func resourceVirtualNetworkGatewayConnection() *pluginsdk.Resource {
 					string(network.VirtualNetworkGatewayConnectionTypeExpressRoute),
 					string(network.VirtualNetworkGatewayConnectionTypeIPsec),
 					string(network.VirtualNetworkGatewayConnectionTypeVnet2Vnet),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"virtual_network_gateway_id": {
@@ -251,7 +254,7 @@ func resourceVirtualNetworkGatewayConnection() *pluginsdk.Resource {
 								string(network.DhGroupECP256),
 								string(network.DhGroupECP384),
 								string(network.DhGroupNone),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"ike_encryption": {
@@ -265,7 +268,7 @@ func resourceVirtualNetworkGatewayConnection() *pluginsdk.Resource {
 								string(network.IkeEncryptionDES3),
 								string(network.IkeEncryptionGCMAES128),
 								string(network.IkeEncryptionGCMAES256),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"ike_integrity": {
@@ -278,7 +281,7 @@ func resourceVirtualNetworkGatewayConnection() *pluginsdk.Resource {
 								string(network.IkeIntegritySHA1),
 								string(network.IkeIntegritySHA256),
 								string(network.IkeIntegritySHA384),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"ipsec_encryption": {
@@ -294,7 +297,7 @@ func resourceVirtualNetworkGatewayConnection() *pluginsdk.Resource {
 								string(network.IpsecEncryptionGCMAES192),
 								string(network.IpsecEncryptionGCMAES256),
 								string(network.IpsecEncryptionNone),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"ipsec_integrity": {
@@ -307,7 +310,7 @@ func resourceVirtualNetworkGatewayConnection() *pluginsdk.Resource {
 								string(network.IpsecIntegrityMD5),
 								string(network.IpsecIntegritySHA1),
 								string(network.IpsecIntegritySHA256),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"pfs_group": {
@@ -323,7 +326,7 @@ func resourceVirtualNetworkGatewayConnection() *pluginsdk.Resource {
 								string(network.PfsGroupPFS2048),
 								string(network.PfsGroupPFS24),
 								string(network.PfsGroupPFSMM),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"sa_datasize": {
diff --git a/internal/services/network/virtual_network_gateway_resource.go b/internal/services/network/virtual_network_gateway_resource.go
index 055b16308d..487608122e 100644
--- a/internal/services/network/virtual_network_gateway_resource.go
+++ b/internal/services/network/virtual_network_gateway_resource.go
@@ -6,6 +6,7 @@ package network
 import (
 	"bytes"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -68,7 +69,7 @@ func resourceVirtualNetworkGatewaySchema() map[string]*pluginsdk.Schema {
 			ValidateFunc: validation.StringInSlice([]string{
 				string(network.VirtualNetworkGatewayTypeExpressRoute),
 				string(network.VirtualNetworkGatewayTypeVpn),
-			}, false),
+			}, features.CaseInsensitive()),
 		},
 
 		"vpn_type": {
@@ -79,7 +80,7 @@ func resourceVirtualNetworkGatewaySchema() map[string]*pluginsdk.Schema {
 			ValidateFunc: validation.StringInSlice([]string{
 				string(network.VpnTypeRouteBased),
 				string(network.VpnTypePolicyBased),
-			}, false),
+			}, features.CaseInsensitive()),
 		},
 
 		"edge_zone": commonschema.EdgeZoneOptionalForceNew(),
@@ -508,7 +509,8 @@ func resourceVirtualNetworkGatewaySchema() map[string]*pluginsdk.Schema {
 								string(network.VpnClientProtocolIkeV2),
 								string(network.VpnClientProtocolOpenVPN),
 								string(network.VpnClientProtocolSSTP),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 					},
 				},
diff --git a/internal/services/notificationhub/notification_hub_namespace_resource.go b/internal/services/notificationhub/notification_hub_namespace_resource.go
index abd8c6b3f6..55bc1b0b1d 100644
--- a/internal/services/notificationhub/notification_hub_namespace_resource.go
+++ b/internal/services/notificationhub/notification_hub_namespace_resource.go
@@ -6,6 +6,7 @@ package notificationhub
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"strconv"
 	"time"
@@ -83,7 +84,7 @@ func resourceNotificationHubNamespace() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(namespaces.NamespaceTypeMessaging),
 					string(namespaces.NamespaceTypeNotificationHub),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"tags": commonschema.Tags(),
diff --git a/internal/services/policy/policy_definition_resource.go b/internal/services/policy/policy_definition_resource.go
index a159838239..91f3791833 100644
--- a/internal/services/policy/policy_definition_resource.go
+++ b/internal/services/policy/policy_definition_resource.go
@@ -6,6 +6,7 @@ package policy
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"strconv"
 	"time"
@@ -303,7 +304,7 @@ func resourceArmPolicyDefinitionSchema() map[string]*pluginsdk.Schema {
 				string(policy.TypeCustom),
 				string(policy.TypeNotSpecified),
 				string(policy.TypeStatic),
-			}, false),
+			}, features.CaseInsensitive()),
 		},
 
 		"mode": {
diff --git a/internal/services/portal/portal_dashboard_resource_test.go b/internal/services/portal/portal_dashboard_resource_test.go
index f5a509fd86..03b6351a59 100644
--- a/internal/services/portal/portal_dashboard_resource_test.go
+++ b/internal/services/portal/portal_dashboard_resource_test.go
@@ -75,6 +75,7 @@ func (PortalDashboardResource) Exists(ctx context.Context, clients *clients.Clie
 }
 
 func (PortalDashboardResource) basic(data acceptance.TestData) string {
+	resourceName := "azurerm_portal_dashboard"
 	return fmt.Sprintf(`
 provider "azurerm" {
   features {}
@@ -96,10 +97,12 @@ resource "azurerm_portal_dashboard" "test" {
 }
 DASH
 }
-`, data.RandomInteger, data.Locations.Primary)
+`, data.RandomInteger, data.Locations.Primary, resourceName)
 }
 
 func (PortalDashboardResource) complete(data acceptance.TestData) string {
+	resourceName := "azurerm_portal_dashboard"
+
 	return fmt.Sprintf(`
 provider "azurerm" {
   features {}
@@ -150,7 +153,7 @@ resource "azurerm_portal_dashboard" "test" {
 }
 DASH
 }
-`, data.RandomInteger, data.Locations.Primary)
+`, data.RandomInteger, data.Locations.Primary, resourceName)
 }
 
 func (PortalDashboardResource) hiddenTitle(data acceptance.TestData) string {
diff --git a/internal/services/postgres/postgresql_server_resource.go b/internal/services/postgres/postgresql_server_resource.go
index d68d5963fa..5da4ee2bdc 100644
--- a/internal/services/postgres/postgresql_server_resource.go
+++ b/internal/services/postgres/postgresql_server_resource.go
@@ -6,6 +6,8 @@ package postgres
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strconv"
 	"strings"
@@ -133,10 +135,12 @@ func resourcePostgreSQLServer() *pluginsdk.Resource {
 			},
 
 			"version": {
-				Type:         pluginsdk.TypeString,
-				Required:     true,
-				ForceNew:     true,
-				ValidateFunc: validation.StringInSlice(servers.PossibleValuesForServerVersion(), false),
+				Type:     pluginsdk.TypeString,
+				Required: true,
+				ForceNew: true,
+				ValidateFunc: validation.StringInSlice(servers.PossibleValuesForServerVersion(),
+					features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"administrator_login": {
diff --git a/internal/services/recoveryservices/recovery_services_vault_resource.go b/internal/services/recoveryservices/recovery_services_vault_resource.go
index b25ef6d5c9..a585a495ad 100644
--- a/internal/services/recoveryservices/recovery_services_vault_resource.go
+++ b/internal/services/recoveryservices/recovery_services_vault_resource.go
@@ -10,6 +10,8 @@ import (
 	"strings"
 	"time"
 
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+
 	"github.com/hashicorp/go-azure-helpers/lang/pointer"
 	"github.com/hashicorp/go-azure-helpers/lang/response"
 	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
@@ -121,7 +123,7 @@ func resourceRecoveryServicesVault() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(vaults.SkuNameRSZero),
 					string(vaults.SkuNameStandard),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"storage_mode_type": {
diff --git a/internal/services/recoveryservices/site_recovery_replicated_vm_resource.go b/internal/services/recoveryservices/site_recovery_replicated_vm_resource.go
index 32b5de4a99..081e69a07f 100644
--- a/internal/services/recoveryservices/site_recovery_replicated_vm_resource.go
+++ b/internal/services/recoveryservices/site_recovery_replicated_vm_resource.go
@@ -229,7 +229,7 @@ func resourceSiteRecoveryReplicatedVM() *pluginsdk.Resource {
 								string(disks.DiskStorageAccountTypesPremiumLRS),
 								string(disks.DiskStorageAccountTypesStandardSSDLRS),
 								string(disks.DiskStorageAccountTypesUltraSSDLRS),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"target_replica_disk_type": {
@@ -241,7 +241,7 @@ func resourceSiteRecoveryReplicatedVM() *pluginsdk.Resource {
 								string(disks.DiskStorageAccountTypesPremiumLRS),
 								string(disks.DiskStorageAccountTypesStandardSSDLRS),
 								string(disks.DiskStorageAccountTypesUltraSSDLRS),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"target_disk_encryption_set_id": {
diff --git a/internal/services/redis/redis_cache_resource.go b/internal/services/redis/redis_cache_resource.go
index 528b79961e..fc7196b399 100644
--- a/internal/services/redis/redis_cache_resource.go
+++ b/internal/services/redis/redis_cache_resource.go
@@ -6,6 +6,7 @@ package redis
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"strconv"
 	"strings"
@@ -98,7 +99,8 @@ func resourceRedisCache() *pluginsdk.Resource {
 					string(redis.SkuNameBasic),
 					string(redis.SkuNameStandard),
 					string(redis.SkuNamePremium),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"minimum_tls_version": {
diff --git a/internal/services/redis/redis_linked_server_resource.go b/internal/services/redis/redis_linked_server_resource.go
index ff302107f2..a8916e78f2 100644
--- a/internal/services/redis/redis_linked_server_resource.go
+++ b/internal/services/redis/redis_linked_server_resource.go
@@ -6,6 +6,7 @@ package redis
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -69,7 +70,7 @@ func resourceRedisLinkedServer() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(redis.ReplicationRolePrimary),
 					string(redis.ReplicationRoleSecondary),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"name": {
diff --git a/internal/services/resource/template_deployment_resource.go b/internal/services/resource/template_deployment_resource.go
index 7cb0c666d8..2bbe3566f2 100644
--- a/internal/services/resource/template_deployment_resource.go
+++ b/internal/services/resource/template_deployment_resource.go
@@ -7,6 +7,7 @@ import (
 	"context"
 	"encoding/json"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strconv"
 	"strings"
@@ -16,6 +17,7 @@ import (
 	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
 	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/services/resource/migration"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/services/resource/parse"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
@@ -83,7 +85,8 @@ func resourceTemplateDeployment() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(resources.DeploymentModeComplete),
 					string(resources.DeploymentModeIncremental),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"outputs": {
diff --git a/internal/services/securitycenter/security_center_automation_resource.go b/internal/services/securitycenter/security_center_automation_resource.go
index 0756a64ade..e4b858a999 100644
--- a/internal/services/securitycenter/security_center_automation_resource.go
+++ b/internal/services/securitycenter/security_center_automation_resource.go
@@ -5,6 +5,8 @@ package securitycenter
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strings"
 	"time"
@@ -104,7 +106,8 @@ func resourceSecurityCenterAutomation() *pluginsdk.Resource {
 								typeLogicApp,
 								typeLogAnalytics,
 								typeEventHub,
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"resource_id": {
@@ -185,7 +188,8 @@ func resourceSecurityCenterAutomation() *pluginsdk.Resource {
 														string(automations.OperatorLesserThanOrEqualTo),
 														string(automations.OperatorNotEquals),
 														string(automations.OperatorStartsWith),
-													}, false),
+													}, features.CaseInsensitive()),
+													DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 												},
 												"property_type": {
 													Type:     pluginsdk.TypeString,
@@ -195,7 +199,8 @@ func resourceSecurityCenterAutomation() *pluginsdk.Resource {
 														string(automations.PropertyTypeString),
 														string(automations.PropertyTypeBoolean),
 														string(automations.PropertyTypeNumber),
-													}, false),
+													}, features.CaseInsensitive()),
+													DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 												},
 											},
 										},
diff --git a/internal/services/securitycenter/security_center_server_vulnerability_assessment_resource.go b/internal/services/securitycenter/security_center_server_vulnerability_assessment_resource.go
index 693259db60..fa44554cd1 100644
--- a/internal/services/securitycenter/security_center_server_vulnerability_assessment_resource.go
+++ b/internal/services/securitycenter/security_center_server_vulnerability_assessment_resource.go
@@ -26,6 +26,7 @@ const (
 	hybridMachineProvider  = "Microsoft.HybridCompute"
 )
 
+// TODO: 3.0 - split this into two resources for VM and HybridVM
 func resourceServerVulnerabilityAssessment() *pluginsdk.Resource {
 	return &pluginsdk.Resource{
 		Create: resourceServerVulnerabilityAssessmentCreate,
diff --git a/internal/services/servicebus/servicebus_namespace_resource.go b/internal/services/servicebus/servicebus_namespace_resource.go
index 56fa2647cb..b03bdc1fa8 100644
--- a/internal/services/servicebus/servicebus_namespace_resource.go
+++ b/internal/services/servicebus/servicebus_namespace_resource.go
@@ -87,7 +87,8 @@ func resourceServiceBusNamespace() *pluginsdk.Resource {
 					string(namespaces.SkuNameBasic),
 					string(namespaces.SkuNameStandard),
 					string(namespaces.SkuNamePremium),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"capacity": {
diff --git a/internal/services/servicebus/servicebus_queue_resource.go b/internal/services/servicebus/servicebus_queue_resource.go
index fd6bafbc15..892ca423b4 100644
--- a/internal/services/servicebus/servicebus_queue_resource.go
+++ b/internal/services/servicebus/servicebus_queue_resource.go
@@ -46,6 +46,8 @@ func resourceServiceBusQueue() *pluginsdk.Resource {
 	}
 }
 
+// FORK: @stack72: Ensured the ResourceGroupName and NamespaceName was available as a computed attribute for use
+// in the servicebus mixins in Pulumi
 func resourceServicebusQueueSchema() map[string]*pluginsdk.Schema {
 	return map[string]*pluginsdk.Schema{
 		"name": {
@@ -166,6 +168,16 @@ func resourceServicebusQueueSchema() map[string]*pluginsdk.Schema {
 			ForceNew: true,
 		},
 
+		"resource_group_name": {
+			Type:     pluginsdk.TypeString,
+			Computed: true,
+		},
+
+		"namespace_name": {
+			Type:     pluginsdk.TypeString,
+			Computed: true,
+		},
+
 		"status": {
 			Type:     pluginsdk.TypeString,
 			Optional: true,
@@ -375,6 +387,8 @@ func resourceServiceBusQueueRead(d *pluginsdk.ResourceData, meta interface{}) er
 
 	d.Set("name", id.QueueName)
 	d.Set("namespace_id", namespaceId.ID())
+	d.Set("resource_group_name", id.ResourceGroupName)
+	d.Set("namespace_name", id.NamespaceName)
 
 	if model := resp.Model; model != nil {
 		if props := model.Properties; props != nil {
diff --git a/internal/services/servicebus/servicebus_subscription_rule_resource.go b/internal/services/servicebus/servicebus_subscription_rule_resource.go
index a4db7728d8..d0bbf2ec2f 100644
--- a/internal/services/servicebus/servicebus_subscription_rule_resource.go
+++ b/internal/services/servicebus/servicebus_subscription_rule_resource.go
@@ -5,6 +5,7 @@ package servicebus
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -69,7 +70,8 @@ func resourceServicebusSubscriptionRuleSchema() map[string]*pluginsdk.Schema {
 			ValidateFunc: validation.StringInSlice([]string{
 				string(subscriptions.FilterTypeSqlFilter),
 				string(subscriptions.FilterTypeCorrelationFilter),
-			}, false),
+			}, features.CaseInsensitive()),
+			DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 		},
 
 		"action": {
diff --git a/internal/services/servicebus/servicebus_topic_resource.go b/internal/services/servicebus/servicebus_topic_resource.go
index 7c2cdadb04..0b18171b8f 100644
--- a/internal/services/servicebus/servicebus_topic_resource.go
+++ b/internal/services/servicebus/servicebus_topic_resource.go
@@ -5,6 +5,8 @@ package servicebus
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"time"
 
@@ -44,6 +46,8 @@ func resourceServiceBusTopic() *pluginsdk.Resource {
 	}
 }
 
+// FORK: @stack72: Ensured the ResourceGroupName and NamespaceName was available as a computed attribute for use
+// in the servicebus mixins in Pulumi
 func resourceServiceBusTopicSchema() map[string]*pluginsdk.Schema {
 	return map[string]*pluginsdk.Schema{
 		"name": {
@@ -68,7 +72,8 @@ func resourceServiceBusTopicSchema() map[string]*pluginsdk.Schema {
 			ValidateFunc: validation.StringInSlice([]string{
 				string(topics.EntityStatusActive),
 				string(topics.EntityStatusDisabled),
-			}, false),
+			}, features.CaseInsensitive()),
+			DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 		},
 
 		"auto_delete_on_idle": {
@@ -135,6 +140,16 @@ func resourceServiceBusTopicSchema() map[string]*pluginsdk.Schema {
 			Type:     pluginsdk.TypeBool,
 			Optional: true,
 		},
+
+		"resource_group_name": {
+			Type:     pluginsdk.TypeString,
+			Computed: true,
+		},
+
+		"namespace_name": {
+			Type:     pluginsdk.TypeString,
+			Computed: true,
+		},
 	}
 }
 
@@ -240,6 +255,10 @@ func resourceServiceBusTopicRead(d *pluginsdk.ResourceData, meta interface{}) er
 	d.Set("name", id.TopicName)
 	d.Set("namespace_id", topics.NewNamespaceID(id.SubscriptionId, id.ResourceGroupName, id.NamespaceName).ID())
 
+	// FORK: We must maintain these properties in order to keep Pulumi mixins working.
+	d.Set("namespace_name", id.NamespaceName)
+	d.Set("resource_group_name", id.ResourceGroupName)
+
 	if model := resp.Model; model != nil {
 		if props := model.Properties; props != nil {
 			status := ""
diff --git a/internal/services/sql/sql_database_resource.go b/internal/services/sql/sql_database_resource.go
index 8fab920f07..1ca7f6154d 100644
--- a/internal/services/sql/sql_database_resource.go
+++ b/internal/services/sql/sql_database_resource.go
@@ -17,6 +17,7 @@ import (
 	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
 	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql/validate"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sql/parse"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
@@ -470,7 +471,7 @@ func resourceSqlDatabaseSchema() map[string]*pluginsdk.Schema {
 				string(sql.CreateModeRecovery),
 				string(sql.CreateModeRestore),
 				string(sql.CreateModeRestoreLongTermRetentionBackup),
-			}, false),
+			}, features.CaseInsensitive()),
 		},
 
 		"import": {
@@ -494,7 +495,7 @@ func resourceSqlDatabaseSchema() map[string]*pluginsdk.Schema {
 						ValidateFunc: validation.StringInSlice([]string{
 							"StorageAccessKey",
 							"SharedAccessKey",
-						}, false),
+						}, features.CaseInsensitive()),
 					},
 					"administrator_login": {
 						Type:     pluginsdk.TypeString,
@@ -511,7 +512,7 @@ func resourceSqlDatabaseSchema() map[string]*pluginsdk.Schema {
 						ValidateFunc: validation.StringInSlice([]string{
 							"ADPassword",
 							"SQL",
-						}, false),
+						}, features.CaseInsensitive()),
 					},
 					"operation_mode": {
 						Type:     pluginsdk.TypeString,
@@ -519,7 +520,7 @@ func resourceSqlDatabaseSchema() map[string]*pluginsdk.Schema {
 						Default:  "Import",
 						ValidateFunc: validation.StringInSlice([]string{
 							"Import",
-						}, false),
+						}, features.CaseInsensitive()),
 					},
 				},
 			},
@@ -557,7 +558,7 @@ func resourceSqlDatabaseSchema() map[string]*pluginsdk.Schema {
 				string(sql.System),
 				string(sql.System2),
 				string(sql.Web),
-			}, false),
+			}, features.CaseInsensitive()),
 		},
 
 		"collation": {
@@ -642,7 +643,8 @@ func resourceSqlDatabaseSchema() map[string]*pluginsdk.Schema {
 								"Sql_Injection",
 								"Sql_Injection_Vulnerability",
 								"Access_Anomaly",
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 					},
 
@@ -653,7 +655,7 @@ func resourceSqlDatabaseSchema() map[string]*pluginsdk.Schema {
 						ValidateFunc: validation.StringInSlice([]string{
 							string(sql.SecurityAlertPolicyEmailAccountAdminsDisabled),
 							string(sql.SecurityAlertPolicyEmailAccountAdminsEnabled),
-						}, false),
+						}, features.CaseInsensitive()),
 					},
 
 					"email_addresses": {
@@ -679,7 +681,7 @@ func resourceSqlDatabaseSchema() map[string]*pluginsdk.Schema {
 							string(sql.SecurityAlertPolicyStateDisabled),
 							string(sql.SecurityAlertPolicyStateEnabled),
 							string(sql.SecurityAlertPolicyStateNew),
-						}, false),
+						}, features.CaseInsensitive()),
 					},
 
 					"storage_account_access_key": {
diff --git a/internal/services/sql/sql_managed_instance_resource.go b/internal/services/sql/sql_managed_instance_resource.go
index aee7ee3589..dc5c126ad2 100644
--- a/internal/services/sql/sql_managed_instance_resource.go
+++ b/internal/services/sql/sql_managed_instance_resource.go
@@ -6,6 +6,8 @@ package sql
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strings"
 	"time"
@@ -113,7 +115,8 @@ func resourceArmSqlMiServer() *schema.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					"LicenseIncluded",
 					"BasePrice",
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"subnet_id": {
diff --git a/internal/services/sql/sql_server_resource.go b/internal/services/sql/sql_server_resource.go
index 16797800a2..6d74e94b4f 100644
--- a/internal/services/sql/sql_server_resource.go
+++ b/internal/services/sql/sql_server_resource.go
@@ -6,6 +6,8 @@ package sql
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strings"
 	"time"
@@ -118,7 +120,8 @@ func resourceSqlServer() *pluginsdk.Resource {
 									"Access_Anomaly",
 									"Data_Exfiltration",
 									"Unsafe_Action",
-								}, false),
+								}, features.CaseInsensitive()),
+								DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 							},
 						},
 
@@ -152,7 +155,7 @@ func resourceSqlServer() *pluginsdk.Resource {
 								string(sql.SecurityAlertPolicyStateDisabled),
 								string(sql.SecurityAlertPolicyStateEnabled),
 								string(sql.SecurityAlertPolicyStateNew), // Only kept for backward compatibility - TODO investigate if we can remove this in 4.0
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"storage_account_access_key": {
diff --git a/internal/services/storage/storage_account_data_source.go b/internal/services/storage/storage_account_data_source.go
index b215edff58..4381151544 100644
--- a/internal/services/storage/storage_account_data_source.go
+++ b/internal/services/storage/storage_account_data_source.go
@@ -37,7 +37,8 @@ func dataSourceStorageAccount() *pluginsdk.Resource {
 				ValidateFunc: validate.StorageAccountName,
 			},
 
-			"resource_group_name": commonschema.ResourceGroupNameForDataSource(),
+			// Fork: Ensuring that ResourceGroupName is optional when getting a storage account
+			"resource_group_name": commonschema.ResourceGroupNameOptional(),
 
 			"location": commonschema.LocationComputed(),
 
@@ -534,11 +535,28 @@ func dataSourceStorageAccount() *pluginsdk.Resource {
 }
 
 func dataSourceStorageAccountRead(d *pluginsdk.ResourceData, meta interface{}) error {
+	storageClient := meta.(*clients.Client).Storage
 	client := meta.(*clients.Client).Storage.AccountsClient
 	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
 	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
 	defer cancel()
 
+	name := d.Get("name").(string)
+	var resourceGroup string
+	if rg, ok := d.GetOk("resource_group_name"); ok {
+		resourceGroup = rg.(string)
+	} else {
+		account, err := storageClient.FindAccount(ctx, subscriptionId, name)
+		if err != nil {
+			return fmt.Errorf("Error retrieving Account %q: %s", name, err)
+		}
+		if account == nil {
+			return fmt.Errorf("Unable to locate Account %q", name)
+		}
+		resourceGroup = account.StorageAccountId.ResourceGroupName
+		d.Set("resource_group_name", resourceGroup)
+	}
+
 	storageDomainSuffix, ok := meta.(*clients.Client).Account.Environment.Storage.DomainSuffix()
 	if !ok {
 		return fmt.Errorf("could not determine Storage domain suffix for environment %q", meta.(*clients.Client).Account.Environment.Name)
diff --git a/internal/services/storage/storage_account_resource.go b/internal/services/storage/storage_account_resource.go
index a68e2afada..dfefdbb1ed 100644
--- a/internal/services/storage/storage_account_resource.go
+++ b/internal/services/storage/storage_account_resource.go
@@ -13,6 +13,9 @@ import (
 	"strings"
 	"time"
 
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
+
 	"github.com/Azure/azure-sdk-for-go/services/storage/mgmt/2021-09-01/storage" // nolint: staticcheck
 	azautorest "github.com/Azure/go-autorest/autorest"
 	"github.com/hashicorp/go-azure-helpers/lang/pointer"
@@ -150,8 +153,9 @@ func resourceStorageAccount() *pluginsdk.Resource {
 					string(storage.KindBlockBlobStorage),
 					string(storage.KindFileStorage),
 					string(storage.KindStorageV2),
-				}, false),
-				Default: string(storage.KindStorageV2),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
+				Default:          string(storage.KindStorageV2),
 			},
 
 			"account_tier": {
@@ -161,7 +165,8 @@ func resourceStorageAccount() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(storage.SkuTierStandard),
 					string(storage.SkuTierPremium),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"account_replication_type": {
@@ -174,7 +179,8 @@ func resourceStorageAccount() *pluginsdk.Resource {
 					"RAGRS",
 					"GZRS",
 					"RAGZRS",
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			// Only valid for FileStorage, BlobStorage & StorageV2 accounts, defaults to "Hot" in create function
@@ -185,7 +191,8 @@ func resourceStorageAccount() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(storage.AccessTierCool),
 					string(storage.AccessTierHot),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"azure_files_authentication": {
@@ -422,7 +429,8 @@ func resourceStorageAccount() *pluginsdk.Resource {
 									string(storage.BypassLogging),
 									string(storage.BypassMetrics),
 									string(storage.BypassNone),
-								}, false),
+								}, features.CaseInsensitive()),
+								DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 							},
 							Set: pluginsdk.HashString,
 						},
diff --git a/internal/services/storage/storage_management_policy_resource.go b/internal/services/storage/storage_management_policy_resource.go
index c90910e01c..1e3e9900e2 100644
--- a/internal/services/storage/storage_management_policy_resource.go
+++ b/internal/services/storage/storage_management_policy_resource.go
@@ -138,10 +138,9 @@ func resourceStorageManagementPolicy() *pluginsdk.Resource {
 													ValidateFunc: validation.IntBetween(0, 99999),
 												},
 												"tier_to_cool_after_days_since_last_access_time_greater_than": {
-													Type:         pluginsdk.TypeInt,
-													Optional:     true,
-													Default:      -1,
-													ValidateFunc: validation.IntBetween(0, 99999),
+													Type:     pluginsdk.TypeInt,
+													Optional: true,
+													Default:  -1,
 												},
 												"auto_tier_to_hot_from_cool_enabled": {
 													Type:     pluginsdk.TypeBool,
diff --git a/internal/services/synapse/synapse_sql_pool_security_alert_policy_resource.go b/internal/services/synapse/synapse_sql_pool_security_alert_policy_resource.go
index bdbad438b2..992f5ac5ab 100644
--- a/internal/services/synapse/synapse_sql_pool_security_alert_policy_resource.go
+++ b/internal/services/synapse/synapse_sql_pool_security_alert_policy_resource.go
@@ -5,6 +5,8 @@ package synapse
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"time"
 
@@ -90,7 +92,8 @@ func resourceSynapseSqlPoolSecurityAlertPolicy() *pluginsdk.Resource {
 					string(synapse.SecurityAlertPolicyStateDisabled),
 					string(synapse.SecurityAlertPolicyStateEnabled),
 					string(synapse.SecurityAlertPolicyStateNew),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"storage_account_access_key": {
diff --git a/internal/services/synapse/synapse_workspace_security_alert_policy_resource.go b/internal/services/synapse/synapse_workspace_security_alert_policy_resource.go
index c928831ac4..0fae0d312c 100644
--- a/internal/services/synapse/synapse_workspace_security_alert_policy_resource.go
+++ b/internal/services/synapse/synapse_workspace_security_alert_policy_resource.go
@@ -5,6 +5,8 @@ package synapse
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"time"
 
@@ -90,7 +92,8 @@ func resourceSynapseWorkspaceSecurityAlertPolicy() *pluginsdk.Resource {
 					string(synapse.SecurityAlertPolicyStateDisabled),
 					string(synapse.SecurityAlertPolicyStateEnabled),
 					string(synapse.SecurityAlertPolicyStateNew),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"storage_account_access_key": {
diff --git a/internal/services/trafficmanager/traffic_manager_profile_resource.go b/internal/services/trafficmanager/traffic_manager_profile_resource.go
index 88fa114d68..0e395b4046 100644
--- a/internal/services/trafficmanager/traffic_manager_profile_resource.go
+++ b/internal/services/trafficmanager/traffic_manager_profile_resource.go
@@ -5,6 +5,8 @@ package trafficmanager
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strconv"
 	"strings"
@@ -60,7 +62,8 @@ func resourceArmTrafficManagerProfile() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(profiles.ProfileStatusEnabled),
 					string(profiles.ProfileStatusDisabled),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"traffic_routing_method": {
@@ -136,7 +139,8 @@ func resourceArmTrafficManagerProfile() *pluginsdk.Resource {
 								string(profiles.MonitorProtocolHTTP),
 								string(profiles.MonitorProtocolHTTPS),
 								string(profiles.MonitorProtocolTCP),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"port": {
diff --git a/internal/services/web/app_service.go b/internal/services/web/app_service.go
index f5dac4de88..e85775dadd 100644
--- a/internal/services/web/app_service.go
+++ b/internal/services/web/app_service.go
@@ -5,6 +5,8 @@ package web
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strings"
 
@@ -261,7 +263,8 @@ func schemaAppServiceSiteConfig() *pluginsdk.Schema {
 						"v4.0",
 						"v5.0",
 						"v6.0",
-					}, false),
+					}, features.CaseInsensitive()),
+					DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 				},
 
 				"http2_enabled": {
@@ -293,7 +296,8 @@ func schemaAppServiceSiteConfig() *pluginsdk.Schema {
 						"JAVA",
 						"JETTY",
 						"TOMCAT",
-					}, false),
+					}, features.CaseInsensitive()),
+					DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 				},
 
 				"java_container_version": {
@@ -314,7 +318,8 @@ func schemaAppServiceSiteConfig() *pluginsdk.Schema {
 					ValidateFunc: validation.StringInSlice([]string{
 						string(web.ManagedPipelineModeClassic),
 						string(web.ManagedPipelineModeIntegrated),
-					}, false),
+					}, features.CaseInsensitive()),
+					DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 				},
 
 				"php_version": {
@@ -347,9 +352,10 @@ func schemaAppServiceSiteConfig() *pluginsdk.Schema {
 				},
 
 				"remote_debugging_version": {
-					Type:     pluginsdk.TypeString,
-					Optional: true,
-					Computed: true,
+					Type:             pluginsdk.TypeString,
+					Optional:         true,
+					Computed:         true,
+					DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 					ValidateFunc: validation.StringInSlice([]string{
 						"VS2017",
 						"VS2019",
diff --git a/internal/services/web/app_service_certificate_order_resource.go b/internal/services/web/app_service_certificate_order_resource.go
index cf219be2e2..de18a1e028 100644
--- a/internal/services/web/app_service_certificate_order_resource.go
+++ b/internal/services/web/app_service_certificate_order_resource.go
@@ -5,6 +5,7 @@ package web
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -119,7 +120,7 @@ func resourceAppServiceCertificateOrder() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					"Standard",
 					"WildCard",
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"validity_in_years": {
diff --git a/internal/services/web/function_app.go b/internal/services/web/function_app.go
index c3dfeff2cf..86a94c195d 100644
--- a/internal/services/web/function_app.go
+++ b/internal/services/web/function_app.go
@@ -6,6 +6,8 @@ package web
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strings"
 
@@ -164,7 +166,8 @@ func schemaAppServiceFunctionAppSiteConfig() *pluginsdk.Schema {
 						"v4.0",
 						"v5.0",
 						"v6.0",
-					}, false),
+					}, features.CaseInsensitive()),
+					DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 				},
 
 				"vnet_route_all_enabled": {
diff --git a/internal/services/web/function_app_slot_resource.go b/internal/services/web/function_app_slot_resource.go
index baaf28b822..ec0522f4b1 100644
--- a/internal/services/web/function_app_slot_resource.go
+++ b/internal/services/web/function_app_slot_resource.go
@@ -259,6 +259,7 @@ func resourceFunctionAppSlotCreate(d *pluginsdk.ResourceData, meta interface{})
 
 	appServicePlanID := d.Get("app_service_plan_id").(string)
 	enabled := d.Get("enabled").(bool)
+	clientAffinityEnabled := d.Get("client_affinity_enabled").(bool)
 	httpsOnly := d.Get("https_only").(bool)
 	dailyMemoryTimeQuota := d.Get("daily_memory_time_quota").(int)
 	t := d.Get("tags").(map[string]interface{})
@@ -281,11 +282,12 @@ func resourceFunctionAppSlotCreate(d *pluginsdk.ResourceData, meta interface{})
 		Location: &location,
 		Tags:     tags.Expand(t),
 		SiteProperties: &web.SiteProperties{
-			ServerFarmID:         utils.String(appServicePlanID),
-			Enabled:              utils.Bool(enabled),
-			HTTPSOnly:            utils.Bool(httpsOnly),
-			DailyMemoryTimeQuota: utils.Int32(int32(dailyMemoryTimeQuota)),
-			SiteConfig:           &siteConfig,
+			ServerFarmID:          utils.String(appServicePlanID),
+			Enabled:               utils.Bool(enabled),
+			ClientAffinityEnabled: utils.Bool(clientAffinityEnabled),
+			HTTPSOnly:             utils.Bool(httpsOnly),
+			DailyMemoryTimeQuota:  utils.Int32(int32(dailyMemoryTimeQuota)),
+			SiteConfig:            &siteConfig,
 		},
 	}
 
@@ -349,6 +351,7 @@ func resourceFunctionAppSlotUpdate(d *pluginsdk.ResourceData, meta interface{})
 	}
 	appServicePlanID := d.Get("app_service_plan_id").(string)
 	enabled := d.Get("enabled").(bool)
+	clientAffinityEnabled := d.Get("client_affinity_enabled").(bool)
 	httpsOnly := d.Get("https_only").(bool)
 	dailyMemoryTimeQuota := d.Get("daily_memory_time_quota").(int)
 	t := d.Get("tags").(map[string]interface{})
@@ -381,11 +384,12 @@ func resourceFunctionAppSlotUpdate(d *pluginsdk.ResourceData, meta interface{})
 		Location: &location,
 		Tags:     tags.Expand(t),
 		SiteProperties: &web.SiteProperties{
-			ServerFarmID:         utils.String(appServicePlanID),
-			Enabled:              utils.Bool(enabled),
-			HTTPSOnly:            utils.Bool(httpsOnly),
-			DailyMemoryTimeQuota: utils.Int32(int32(dailyMemoryTimeQuota)),
-			SiteConfig:           &siteConfig,
+			ServerFarmID:          utils.String(appServicePlanID),
+			Enabled:               utils.Bool(enabled),
+			ClientAffinityEnabled: utils.Bool(clientAffinityEnabled),
+			HTTPSOnly:             utils.Bool(httpsOnly),
+			DailyMemoryTimeQuota:  utils.Int32(int32(dailyMemoryTimeQuota)),
+			SiteConfig:            &siteConfig,
 		},
 	}
 
