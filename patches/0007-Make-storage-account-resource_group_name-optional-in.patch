From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Daniel Bradley <daniel@pulumi.com>
Date: Wed, 22 May 2024 12:47:41 +0100
Subject: [PATCH] Make storage account resource_group_name optional in data
 source

Look up resource_group_name by using `storageClient.FindAccount` as storage account names should be unique, and resolve back to the resource group it belongs to.

diff --git a/internal/services/storage/storage_account_data_source.go b/internal/services/storage/storage_account_data_source.go
index d9a1156241..b91b3cdc71 100644
--- a/internal/services/storage/storage_account_data_source.go
+++ b/internal/services/storage/storage_account_data_source.go
@@ -39,7 +39,8 @@ func dataSourceStorageAccount() *pluginsdk.Resource {
 				ValidateFunc: validate.StorageAccountName,
 			},
 
-			"resource_group_name": commonschema.ResourceGroupNameForDataSource(),
+			// Fork: Ensuring that ResourceGroupName is optional when getting a storage account
+			"resource_group_name": commonschema.ResourceGroupNameOptional(),
 
 			"location": commonschema.LocationComputed(),
 
@@ -550,10 +551,27 @@ func dataSourceStorageAccount() *pluginsdk.Resource {
 
 func dataSourceStorageAccountRead(d *pluginsdk.ResourceData, meta interface{}) error {
 	client := meta.(*clients.Client).Storage.ResourceManager.StorageAccounts
+	storageClient := meta.(*clients.Client).Storage
 	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
 	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
 	defer cancel()
 
+	name := d.Get("name").(string)
+	var resourceGroup string
+	if rg, ok := d.GetOk("resource_group_name"); ok {
+		resourceGroup = rg.(string)
+	} else {
+		account, err := storageClient.FindAccount(ctx, subscriptionId, name)
+		if err != nil {
+			return fmt.Errorf("Error retrieving Account %q: %s", name, err)
+		}
+		if account == nil {
+			return fmt.Errorf("Unable to locate Account %q", name)
+		}
+		resourceGroup = account.StorageAccountId.ResourceGroupName
+		d.Set("resource_group_name", resourceGroup)
+	}
+
 	storageDomainSuffix, ok := meta.(*clients.Client).Account.Environment.Storage.DomainSuffix()
 	if !ok {
 		return fmt.Errorf("could not determine Storage domain suffix for environment %q", meta.(*clients.Client).Account.Environment.Name)
