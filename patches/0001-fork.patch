diff --git b/CHANGELOG.md a/CHANGELOG.md
index 3d2dec23f7..a44e9d0b9e 100644
--- b/CHANGELOG.md
+++ a/CHANGELOG.md
@@ -1344,7 +1344,7 @@ BUG FIXES:
 
 BUG FIXES:
 
-* `azurerm_kubernetes_cluster` - prevent panic when setting `public_network_access_enabled` ([#19048](https://github.com/hashicorp/terraform-provider-azurerm/issues/19048))
+* `azurerm_kubernetes_cluster` - prevent panic when setting `public_network_access_enabled` [GH-19048]
 
 ## 3.29.0 (October 27, 2022)
 
@@ -1945,7 +1945,7 @@ BUG FIXES:
 
 ## 3.16.0 (July 28, 2022)
 
-FEATURES: 
+FEATURES:
 
 * **New Resource**: `azurerm_datadog_monitor` ([#16131](https://github.com/hashicorp/terraform-provider-azurerm/issues/16131))
 * **New Resource**: `azurerm_kusto_cluster_managed_private_endpoint` ([#17667](https://github.com/hashicorp/terraform-provider-azurerm/issues/17667))
@@ -1982,15 +1982,15 @@ BUG FIXES:
 
 ## 3.15.1 (July 25, 2022)
 
-BUG FIXES: 
+BUG FIXES:
 
-* `data.azurerm_servicebus_queue`  - fixa regression around `namespace_id` ([#17755](https://github.com/hashicorp/terraform-provider-azurerm/issues/17755))
-* `azurerm_postgresql_aad_administrator`  - fixthe state migration ([#17732](https://github.com/hashicorp/terraform-provider-azurerm/issues/17732))
-* `azurerm_postgresql_server`  - fixa regression around `id` ([#17755](https://github.com/hashicorp/terraform-provider-azurerm/issues/17755))
+* `data.azurerm_servicebus_queue` - fix a regression around `namespace_id` ([#17755](https://github.com/hashicorp/terraform-provider-azurerm/issues/17755))
+* `azurerm_postgresql_aad_administrator`: fix the state migration ([#17732](https://github.com/hashicorp/terraform-provider-azurerm/issues/17732))
+* `azurerm_postgresql_server` - fix a regression around `id` ([#17755](https://github.com/hashicorp/terraform-provider-azurerm/issues/17755))
 
 ## 3.15.0 (July 21, 2022)
 
-FEATURES: 
+FEATURES:
 
 * **New Data Source**: `azurerm_cdn_frontdoor_origin_group` ([#17089](https://github.com/hashicorp/terraform-provider-azurerm/issues/17089))
 * **New Data Source**: `azurerm_cdn_frontdoor_origin` ([#17089](https://github.com/hashicorp/terraform-provider-azurerm/issues/17089))
@@ -2018,7 +2018,7 @@ FEATURES:
 * **New Resource**: `azurerm_application_insights_workbook_template` ([#17433](https://github.com/hashicorp/terraform-provider-azurerm/issues/17433))
 * **New Resource**: `azurerm_gallery_application` ([#17394](https://github.com/hashicorp/terraform-provider-azurerm/issues/17394))
 * **New Resource**: `azurerm_gallery_application_version` ([#17394](https://github.com/hashicorp/terraform-provider-azurerm/issues/17394))
- 
+
 ENHANCEMENTS:
 
 * dependencies: updating to `v0.20220712.1111122` of `github.com/hashicorp/go-azure-sdk` ([#17606](https://github.com/hashicorp/terraform-provider-azurerm/issues/17606))
@@ -2052,7 +2052,7 @@ ENHANCEMENTS:
 * `azurerm_stream_analytics_output_blob` - support for the `authentication_mode` property ([#16652](https://github.com/hashicorp/terraform-provider-azurerm/issues/16652))
 * `azurerm_windows_virtual_machine_scale_set` - support for `capacity_reservation_group_id` property ([#17530](https://github.com/hashicorp/terraform-provider-azurerm/issues/17530))
 * `azurerm_windows_virtual_machine_scale_set` - support for the `placement` property for os disks ([#17013](https://github.com/hashicorp/terraform-provider-azurerm/issues/17013))
- 
+
 BUG FIXES:
 
 * `azurerm_api_management` - correct set the API Management Cipher `TLS_RSA_WITH_3DES_EDE_CBC_SHA` ([#17554](https://github.com/hashicorp/terraform-provider-azurerm/issues/17554))
@@ -2520,7 +2520,7 @@ ENHANCEMENTS:
 * dependencies: updating `digitaltwins` to use API Version `2020-12-01` ([#16044](https://github.com/hashicorp/terraform-provider-azurerm/issues/16044))
 * dependencies: updating `streamanalytics` to use API Version `2020-03-01` ([#16270](https://github.com/hashicorp/terraform-provider-azurerm/issues/16270))
 * provider: upgrading to Go `1.18` ([#16247](https://github.com/hashicorp/terraform-provider-azurerm/issues/16247))
-* Data Source: `azurerm_kubernetes_cluster` - support for the `oidc_issuer_enabled` and `oidc_issuer_url` properties [[#16130](https://github.com/hashicorp/terraform-provider-azurerm/issues/16130)] 
+* Data Source: `azurerm_kubernetes_cluster` - support for the `oidc_issuer_enabled` and `oidc_issuer_url` properties [[#16130](https://github.com/hashicorp/terraform-provider-azurerm/issues/16130)]
 * Data Source: `azurerm_service_plan` - add support for `zone_balancing_enabled` ([#16156](https://github.com/hashicorp/terraform-provider-azurerm/issues/16156))
 * `azurerm_application_gateway` - add `KNOWN-CVES` to accepted values for the `rule_group_name` property ([#16080](https://github.com/hashicorp/terraform-provider-azurerm/issues/16080))
 * `azurerm_automation_account` - the `dsc_primary_access_key` and `dsc_secondary_access_key` properties are now marked as sensitive ([#16161](https://github.com/hashicorp/terraform-provider-azurerm/issues/16161))
@@ -2529,7 +2529,7 @@ ENHANCEMENTS:
 * `azurerm_cosmosdb_gremlin_graph` - the property `indexing_mode` is now case-sensitive ([#16152](https://github.com/hashicorp/terraform-provider-azurerm/issues/16152))
 * `azurerm_cosmosdb_sql_container` - the property `indexing_mode` is now case-sensitive ([#16152](https://github.com/hashicorp/terraform-provider-azurerm/issues/16152))
 * `azurerm_dedicated_host` - support for the the `DSv3-Type4` and `ESv3-Type4` SKUs ([#16253](https://github.com/hashicorp/terraform-provider-azurerm/issues/16253))
-* `azurerm_kubernetes_cluster` - support for the `oidc_issuer_enabled` and `oidc_issuer_url` properties [[#16130](https://github.com/hashicorp/terraform-provider-azurerm/issues/16130)] 
+* `azurerm_kubernetes_cluster` - support for the `oidc_issuer_enabled` and `oidc_issuer_url` properties [[#16130](https://github.com/hashicorp/terraform-provider-azurerm/issues/16130)]
 * `azurerm_kubernetes_cluster` - the `network_profile` block now supports the `ip_versions` property ([#16088](https://github.com/hashicorp/terraform-provider-azurerm/issues/16088))
 * `azurerm_mssql_database` - support for the `ledger_enabled` property ([#16214](https://github.com/hashicorp/terraform-provider-azurerm/issues/16214))
 * `azurerm_service_plan` - support for the `zone_balancing_enabled` property ([#16156](https://github.com/hashicorp/terraform-provider-azurerm/issues/16156))
@@ -2642,7 +2642,7 @@ ENHANCEMENTS:
 * `azurerm_resource_group_policy_assignment` - support for User Assigned Identities ([#15376](https://github.com/hashicorp/terraform-provider-azurerm/issues/15376))
 * `azurerm_resource_policy_assignment` - support for User Assigned Identities ([#15376](https://github.com/hashicorp/terraform-provider-azurerm/issues/15376))
 * `azurerm_sentinel_alert_rule_scheduled` - support for `alert_details_override` ([#15901](https://github.com/hashicorp/terraform-provider-azurerm/issues/15901))
-* `azurerm_sentinel_alert_rule_scheduled` - support for `entity_mapping` [[#15901](https://github.com/hashicorp/terraform-provider-azurerm/issues/15901)] 
+* `azurerm_sentinel_alert_rule_scheduled` - support for `entity_mapping` [[#15901](https://github.com/hashicorp/terraform-provider-azurerm/issues/15901)]
 * `azurerm_sentinel_alert_rule_scheduled` - support for `custom_details` ([#15901](https://github.com/hashicorp/terraform-provider-azurerm/issues/15901))
 * `azurerm_sentinel_alert_rule_scheduled` - support for `group_by_alert_details` ([#15901](https://github.com/hashicorp/terraform-provider-azurerm/issues/15901))
 * `azurerm_sentinel_alert_rule_scheduled` - support for `group_by_custom_details` ([#15901](https://github.com/hashicorp/terraform-provider-azurerm/issues/15901))
@@ -2673,7 +2673,7 @@ ENHANCEMENTS:
 BUG FIXES:
 
 * provider: the `recover_soft_deleted_key_vaults` feature flag within the `key_vault` block now defaults to `true` ([#15984](https://github.com/hashicorp/terraform-provider-azurerm/issues/15984))
-* provider: the `purge_soft_delete_on_destroy ` feature flag within the `key_vault` block now defaults to `true` [[#15984](https://github.com/hashicorp/terraform-provider-azurerm/issues/15984)] 
+* provider: the `purge_soft_delete_on_destroy ` feature flag within the `key_vault` block now defaults to `true` [[#15984](https://github.com/hashicorp/terraform-provider-azurerm/issues/15984)]
 * `azurerm_app_configuration_feature` - detecting that the key is gone when the App Configuration has been deleted ([#15973](https://github.com/hashicorp/terraform-provider-azurerm/issues/15973))
 * `azurerm_app_configuration_key` - detecting that the key is gone when the App Configuration has been deleted ([#15973](https://github.com/hashicorp/terraform-provider-azurerm/issues/15973))
 * `azurerm_application_gateway` - the `backend_address_pool` block is now a Set rather than a List ([#6896](https://github.com/hashicorp/terraform-provider-azurerm/issues/6896))
@@ -2698,7 +2698,7 @@ BUG FIXES:
 * `azurerm_local_network_gateway`  - fixfor `address_space` cannot be updated ([#15159](https://github.com/hashicorp/terraform-provider-azurerm/issues/15159))
 * `azurerm_log_analytics_cluster_customer_managed_key` - detecting when the Customer Managed Key has been removed ([#15973](https://github.com/hashicorp/terraform-provider-azurerm/issues/15973))
 * `azurerm_mssql_database_vulnerability_assessment_rule_baseline` - prevent the resource from being replaced every apply ([#14759](https://github.com/hashicorp/terraform-provider-azurerm/issues/14759))
-* `azurerm_security_center_auto_provisioning ` - validating the Resource ID during import [[#15989](https://github.com/hashicorp/terraform-provider-azurerm/issues/15989)] 
+* `azurerm_security_center_auto_provisioning ` - validating the Resource ID during import [[#15989](https://github.com/hashicorp/terraform-provider-azurerm/issues/15989)]
 * `azurerm_security_center_setting` - changing the `setting_name` property now forces a new resource ([#15983](https://github.com/hashicorp/terraform-provider-azurerm/issues/15983))
 * `azurerm_synapse_workspace` - fixing a bug where workspaces created from a Dedicated SQL Pool / SQL Data Warehouse couldn't be retrieved ([#15829](https://github.com/hashicorp/terraform-provider-azurerm/issues/15829))
 * `azurerm_synapse_workspace_key` - keys can now be correctly rotated ([#15897](https://github.com/hashicorp/terraform-provider-azurerm/issues/15897))
diff --git b/GNUmakefile a/GNUmakefile
index 1f8b1955cd..4d06b626cd 100644
--- b/GNUmakefile
+++ a/GNUmakefile
@@ -84,6 +84,7 @@ test: fmtcheck
 	@TEST=$(TEST) ./scripts/run-gradually-deprecated.sh
 	@TEST=$(TEST) ./scripts/run-test.sh
 
+
 test-compile:
 	@if [ "$(TEST)" = "./..." ]; then \
 		echo "ERROR: Set TEST to a specific package. For example,"; \
diff --git b/internal/common/client_options.go a/internal/common/client_options.go
index 0e227eaa68..6477e38cae 100644
--- b/internal/common/client_options.go
+++ a/internal/common/client_options.go
@@ -12,7 +12,6 @@ import (
 	"github.com/hashicorp/go-azure-sdk/sdk/client"
 	"github.com/hashicorp/go-azure-sdk/sdk/client/resourcemanager"
 	"github.com/hashicorp/go-azure-sdk/sdk/environments"
-	"github.com/hashicorp/terraform-plugin-sdk/v2/meta"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"github.com/hashicorp/terraform-provider-azurerm/version"
 )
@@ -98,12 +97,8 @@ func (o ClientOptions) ConfigureClient(c *autorest.Client, authorizer autorest.A
 }
 
 func userAgent(userAgent, tfVersion, partnerID string, disableTerraformPartnerID bool) string {
-	tfUserAgent := fmt.Sprintf("HashiCorp Terraform/%s (+https://www.terraform.io) Terraform Plugin SDK/%s", tfVersion, meta.SDKVersionString())
-
-	providerUserAgent := fmt.Sprintf("%s terraform-provider-azurerm/%s", tfUserAgent, version.ProviderVersion)
-	if features.FourPointOhBeta() {
-		providerUserAgent = fmt.Sprintf("%s terraform-provider-azurerm/%s+4.0-beta", tfUserAgent, version.ProviderVersion)
-	}
+	// FORK: this gives us the ability to add a Pulumi Specific user agent
+	providerUserAgent := fmt.Sprintf("pulumi-azure/%s", version.ProviderVersion)
 	userAgent = strings.TrimSpace(fmt.Sprintf("%s %s", userAgent, providerUserAgent))
 
 	// append the CloudShell version to the user agent if it exists
@@ -112,11 +107,11 @@ func userAgent(userAgent, tfVersion, partnerID string, disableTerraformPartnerID
 	}
 
 	// only one pid can be interpreted currently
-	// hence, send partner ID if present, otherwise send Terraform GUID
+	// hence, send partner ID if present, otherwise send Pulumi GUID
 	// unless users have opted out
 	if partnerID == "" && !disableTerraformPartnerID {
-		// Microsoft’s Terraform Partner ID is this specific GUID
-		partnerID = "222c6c49-1b0a-5959-a213-6608f9eb8820"
+		// FORK: Microsoft’s Pulumi Partner ID is this specific GUID
+		partnerID = "a90539d8-a7a6-5826-95c4-1fbef22d4b22"
 	}
 
 	if partnerID != "" {
diff --git b/internal/features/four_point_oh.go a/internal/features/four_point_oh.go
index 5b88169333..a57b9fac8e 100644
--- b/internal/features/four_point_oh.go
+++ a/internal/features/four_point_oh.go
@@ -35,3 +35,9 @@ func FourPointOh() bool {
 func FourPointOhBeta() bool {
 	return FourPointOh() || false
 }
+
+// FORK: Small function to help us not make a breaking change in the Pulumi
+// provider where all Enums have been changed to case sensitive
+func CaseInsensitive() bool {
+	return true
+}
diff --git b/internal/provider/features.go a/internal/provider/features.go
index 2757e5c3b1..029a0c9936 100644
--- b/internal/provider/features.go
+++ a/internal/provider/features.go
@@ -295,7 +295,7 @@ func schemaFeatures(supportLegacyTestSuite bool) *pluginsdk.Schema {
 
 	return &pluginsdk.Schema{
 		Type:     pluginsdk.TypeList,
-		Required: true,
+		Optional: true,
 		MaxItems: 1,
 		MinItems: 1,
 		Elem: &pluginsdk.Resource{
diff --git b/internal/services/advisor/advisor_recommendations_data_source.go a/internal/services/advisor/advisor_recommendations_data_source.go
index 55357c814c..aed2f02b45 100644
--- b/internal/services/advisor/advisor_recommendations_data_source.go
+++ a/internal/services/advisor/advisor_recommendations_data_source.go
@@ -5,6 +5,9 @@ import (
 	"strings"
 	"time"
 
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
+
 	"github.com/hashicorp/go-azure-helpers/lang/pointer"
 	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
 	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
@@ -35,7 +38,8 @@ func dataSourceAdvisorRecommendations() *pluginsdk.Resource {
 						string(getrecommendations.CategoryPerformance),
 						string(getrecommendations.CategoryCost),
 						string(getrecommendations.CategoryOperationalExcellence),
-					}, false),
+					}, features.CaseInsensitive()),
+					DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 				},
 			},
 
diff --git b/internal/services/analysisservices/analysis_services_server_resource.go a/internal/services/analysisservices/analysis_services_server_resource.go
index 3ef985f093..dd6d5b992f 100644
--- b/internal/services/analysisservices/analysis_services_server_resource.go
+++ a/internal/services/analysisservices/analysis_services_server_resource.go
@@ -3,6 +3,8 @@ package analysisservices
 import (
 	"bytes"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strings"
 	"time"
@@ -117,7 +119,8 @@ func resourceAnalysisServicesServer() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(servers.ConnectionModeAll),
 					string(servers.ConnectionModeReadOnly),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"backup_blob_container_uri": {
diff --git b/internal/services/appservice/helpers/function_app_schema.go a/internal/services/appservice/helpers/function_app_schema.go
index 2a962494d5..0b2fe63105 100644
--- b/internal/services/appservice/helpers/function_app_schema.go
+++ a/internal/services/appservice/helpers/function_app_schema.go
@@ -1029,10 +1029,11 @@ func linuxFunctionAppStackSchema() *pluginsdk.Schema {
 					Description: "The version of .Net. Possible values are `3.1`, `6.0` and `7.0`",
 				},
 
+				// FORK: Removed default value due to pulumi-azure#1227
+				// These modifications can be removed once pulumi-terraform-bridge#577 is fixed.
 				"use_dotnet_isolated_runtime": {
 					Type:     pluginsdk.TypeBool,
 					Optional: true,
-					Default:  false,
 					ConflictsWith: []string{
 						"site_config.0.application_stack.0.python_version",
 						"site_config.0.application_stack.0.java_version",
diff --git b/internal/services/appservice/linux_function_app_slot_resource_test.go a/internal/services/appservice/linux_function_app_slot_resource_test.go
index 00b4ce212a..ffb16ada86 100644
--- b/internal/services/appservice/linux_function_app_slot_resource_test.go
+++ a/internal/services/appservice/linux_function_app_slot_resource_test.go
@@ -989,11 +989,21 @@ func TestAccLinuxFunctionAppSlot_identityKeyVaultIdentity(t *testing.T) {
 
 	data.ResourceTest(t, r, []acceptance.TestStep{
 		{
-			Config: r.identityUserAssignedKeyVaultIdentity(data, SkuStandardPlan),
+			Config: r.basic(data, SkuStandardPlan),
+			Check: acceptance.ComposeTestCheckFunc(
+				check.That(data.ResourceName).ExistsInAzure(r),
+				check.That(data.ResourceName).Key("kind").HasValue("functionapp,linux"),
+			),
+		},
+		data.ImportStep(),
+		{
+			Config: r.updateStorageAccount(data, SkuStandardPlan),
 			Check: acceptance.ComposeTestCheckFunc(
 				check.That(data.ResourceName).ExistsInAzure(r),
+				check.That(data.ResourceName).Key("kind").HasValue("functionapp,linux"),
 			),
 		},
+		data.ImportStep(),
 	})
 }
 
@@ -1038,7 +1048,6 @@ func TestAccLinuxFunctionAppSlot_storageAccountKeyVaultSecret(t *testing.T) {
 			Config: r.storageAccountKVSecret(data, SkuStandardPlan),
 			Check: acceptance.ComposeTestCheckFunc(
 				check.That(data.ResourceName).ExistsInAzure(r),
-				check.That(data.ResourceName).Key("kind").HasValue("functionapp,linux"),
 			),
 		},
 		data.ImportStep(),
diff --git b/internal/services/automation/automation_runbook_resource.go a/internal/services/automation/automation_runbook_resource.go
index fa2a38e546..225cd10301 100644
--- b/internal/services/automation/automation_runbook_resource.go
+++ a/internal/services/automation/automation_runbook_resource.go
@@ -7,6 +7,8 @@ import (
 	"log"
 	"time"
 
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+
 	"github.com/gofrs/uuid"
 	"github.com/hashicorp/go-azure-helpers/lang/pointer"
 	"github.com/hashicorp/go-azure-helpers/lang/response"
@@ -128,7 +130,7 @@ func resourceAutomationRunbook() *pluginsdk.Resource {
 					string(runbook.RunbookTypeEnumPythonThree),
 					string(runbook.RunbookTypeEnumPowerShellWorkflow),
 					string(runbook.RunbookTypeEnumScript),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"log_progress": {
diff --git b/internal/services/automation/automation_schedule_resource.go a/internal/services/automation/automation_schedule_resource.go
index e91a83971f..ef725c793f 100644
--- b/internal/services/automation/automation_schedule_resource.go
+++ a/internal/services/automation/automation_schedule_resource.go
@@ -3,6 +3,7 @@ package automation
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"strings"
 	"time"
@@ -71,7 +72,7 @@ func resourceAutomationSchedule() *pluginsdk.Resource {
 					string(schedule.ScheduleFrequencyMonth),
 					string(schedule.ScheduleFrequencyOneTime),
 					string(schedule.ScheduleFrequencyWeek),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			// ignored when frequency is `OneTime`
@@ -124,7 +125,8 @@ func resourceAutomationSchedule() *pluginsdk.Resource {
 						string(schedule.ScheduleDayFriday),
 						string(schedule.ScheduleDaySaturday),
 						string(schedule.ScheduleDaySunday),
-					}, false),
+					}, features.CaseInsensitive()),
+					DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 				},
 				Set:           set.HashStringIgnoreCase,
 				ConflictsWith: []string{"month_days", "monthly_occurrence"},
@@ -160,7 +162,7 @@ func resourceAutomationSchedule() *pluginsdk.Resource {
 								string(schedule.ScheduleDayFriday),
 								string(schedule.ScheduleDaySaturday),
 								string(schedule.ScheduleDaySunday),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 						"occurrence": {
 							Type:     pluginsdk.TypeInt,
diff --git b/internal/services/cdn/cdn_endpoint_resource.go a/internal/services/cdn/cdn_endpoint_resource.go
index 768c079bd1..c280d39319 100644
--- b/internal/services/cdn/cdn_endpoint_resource.go
+++ a/internal/services/cdn/cdn_endpoint_resource.go
@@ -2,6 +2,8 @@ package cdn
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"time"
 
@@ -167,7 +169,8 @@ func resourceCdnEndpoint() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(cdn.ActionTypeAllow),
 								string(cdn.ActionTypeBlock),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 						"country_codes": {
 							Type:     pluginsdk.TypeList,
@@ -189,7 +192,8 @@ func resourceCdnEndpoint() *pluginsdk.Resource {
 					string(cdn.OptimizationTypeGeneralWebDelivery),
 					string(cdn.OptimizationTypeLargeFileDownload),
 					string(cdn.OptimizationTypeVideoOnDemandMediaStreaming),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"fqdn": {
diff --git b/internal/services/cdn/cdn_profile_resource.go a/internal/services/cdn/cdn_profile_resource.go
index 11ec03362c..958c7a3fe7 100644
--- b/internal/services/cdn/cdn_profile_resource.go
+++ a/internal/services/cdn/cdn_profile_resource.go
@@ -2,6 +2,8 @@ package cdn
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"time"
 
 	"github.com/Azure/azure-sdk-for-go/services/cdn/mgmt/2020-09-01/cdn" // nolint: staticcheck
@@ -64,7 +66,8 @@ func resourceCdnProfile() *pluginsdk.Resource {
 					string(cdn.SkuNameStandardVerizon),
 					string(cdn.SkuNameStandardMicrosoft),
 					string(cdn.SkuNamePremiumVerizon),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"tags": tags.Schema(),
diff --git b/internal/services/compute/image_resource.go a/internal/services/compute/image_resource.go
index 099275fa02..d08bee3792 100644
--- b/internal/services/compute/image_resource.go
+++ a/internal/services/compute/image_resource.go
@@ -4,6 +4,9 @@ import (
 	"fmt"
 	"time"
 
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/tombuildsstuff/kermit/sdk/compute/2022-08-01/compute"
+
 	"github.com/hashicorp/go-azure-helpers/lang/pointer"
 	"github.com/hashicorp/go-azure-helpers/lang/response"
 	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
@@ -85,18 +88,18 @@ func resourceImage() *pluginsdk.Resource {
 							Type:     pluginsdk.TypeString,
 							Optional: true,
 							ValidateFunc: validation.StringInSlice([]string{
-								string(images.OperatingSystemTypesLinux),
-								string(images.OperatingSystemTypesWindows),
-							}, false),
+								string(compute.OperatingSystemTypesLinux),
+								string(compute.OperatingSystemTypesWindows),
+							}, features.CaseInsensitive()),
 						},
 
 						"os_state": {
 							Type:     pluginsdk.TypeString,
 							Optional: true,
 							ValidateFunc: validation.StringInSlice([]string{
-								string(images.OperatingSystemStateTypesGeneralized),
-								string(images.OperatingSystemStateTypesSpecialized),
-							}, false),
+								string(compute.OperatingSystemStateTypesGeneralized),
+								string(compute.OperatingSystemStateTypesSpecialized),
+							}, features.CaseInsensitive()),
 						},
 
 						"managed_disk_id": {
@@ -120,10 +123,10 @@ func resourceImage() *pluginsdk.Resource {
 							Optional: true,
 							Default:  string(images.CachingTypesNone),
 							ValidateFunc: validation.StringInSlice([]string{
-								string(images.CachingTypesNone),
-								string(images.CachingTypesReadOnly),
-								string(images.CachingTypesReadWrite),
-							}, false),
+								string(compute.CachingTypesNone),
+								string(compute.CachingTypesReadOnly),
+								string(compute.CachingTypesReadWrite),
+							}, features.CaseInsensitive()),
 						},
 
 						"size_gb": {
@@ -165,10 +168,11 @@ func resourceImage() *pluginsdk.Resource {
 							Optional: true,
 							Default:  string(images.CachingTypesNone),
 							ValidateFunc: validation.StringInSlice([]string{
-								string(images.CachingTypesNone),
-								string(images.CachingTypesReadOnly),
-								string(images.CachingTypesReadWrite),
-							}, false),
+								string(compute.CachingTypesNone),
+								string(compute.CachingTypesReadOnly),
+								string(compute.CachingTypesReadWrite),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"size_gb": {
diff --git b/internal/services/compute/linux_virtual_machine_resource.go a/internal/services/compute/linux_virtual_machine_resource.go
index 4dfe0cb011..a8515e0058 100644
--- b/internal/services/compute/linux_virtual_machine_resource.go
+++ a/internal/services/compute/linux_virtual_machine_resource.go
@@ -328,11 +328,11 @@ func resourceLinuxVirtualMachine() *pluginsdk.Resource {
 			},
 
 			"platform_fault_domain": {
-				Type:         pluginsdk.TypeInt,
-				Optional:     true,
-				Default:      -1,
-				ForceNew:     true,
-				RequiredWith: []string{"virtual_machine_scale_set_id"},
+				Type:     pluginsdk.TypeInt,
+				Optional: true,
+				Default:  -1,
+				ForceNew: true,
+				//RequiredWith: []string{"virtual_machine_scale_set_id"},
 				ValidateFunc: validation.IntAtLeast(-1),
 			},
 
diff --git b/internal/services/compute/managed_disk_resource.go a/internal/services/compute/managed_disk_resource.go
index 96e10732cc..59f059e7ed 100644
--- b/internal/services/compute/managed_disk_resource.go
+++ a/internal/services/compute/managed_disk_resource.go
@@ -149,6 +149,7 @@ func resourceManagedDisk() *pluginsdk.Resource {
 				Type:     pluginsdk.TypeString,
 				Optional: true,
 				ValidateFunc: validation.StringInSlice([]string{
+
 					string(disks.OperatingSystemTypesWindows),
 					string(disks.OperatingSystemTypesLinux),
 				}, false),
diff --git b/internal/services/compute/parse/proximity_placement_group.go a/internal/services/compute/parse/proximity_placement_group.go
new file mode 100644
index 0000000000..abb24fffd4
--- /dev/null
+++ a/internal/services/compute/parse/proximity_placement_group.go
@@ -0,0 +1,69 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+	"strings"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+type ProximityPlacementGroupId struct {
+	SubscriptionId string
+	ResourceGroup  string
+	Name           string
+}
+
+func NewProximityPlacementGroupID(subscriptionId, resourceGroup, name string) ProximityPlacementGroupId {
+	return ProximityPlacementGroupId{
+		SubscriptionId: subscriptionId,
+		ResourceGroup:  resourceGroup,
+		Name:           name,
+	}
+}
+
+func (id ProximityPlacementGroupId) String() string {
+	segments := []string{
+		fmt.Sprintf("Name %q", id.Name),
+		fmt.Sprintf("Resource Group %q", id.ResourceGroup),
+	}
+	segmentsStr := strings.Join(segments, " / ")
+	return fmt.Sprintf("%s: (%s)", "Proximity Placement Group", segmentsStr)
+}
+
+func (id ProximityPlacementGroupId) ID() string {
+	fmtString := "/subscriptions/%s/resourceGroups/%s/providers/Microsoft.Compute/proximityPlacementGroups/%s"
+	return fmt.Sprintf(fmtString, id.SubscriptionId, id.ResourceGroup, id.Name)
+}
+
+// ProximityPlacementGroupID parses a ProximityPlacementGroup ID into an ProximityPlacementGroupId struct
+func ProximityPlacementGroupID(input string) (*ProximityPlacementGroupId, error) {
+	id, err := resourceids.ParseAzureResourceID(input)
+	if err != nil {
+		return nil, err
+	}
+
+	resourceId := ProximityPlacementGroupId{
+		SubscriptionId: id.SubscriptionID,
+		ResourceGroup:  id.ResourceGroup,
+	}
+
+	if resourceId.SubscriptionId == "" {
+		return nil, fmt.Errorf("ID was missing the 'subscriptions' element")
+	}
+
+	if resourceId.ResourceGroup == "" {
+		return nil, fmt.Errorf("ID was missing the 'resourceGroups' element")
+	}
+
+	if resourceId.Name, err = id.PopSegment("proximityPlacementGroups"); err != nil {
+		return nil, err
+	}
+
+	if err := id.ValidateNoEmptySegments(input); err != nil {
+		return nil, err
+	}
+
+	return &resourceId, nil
+}
diff --git b/internal/services/compute/parse/proximity_placement_group_test.go a/internal/services/compute/parse/proximity_placement_group_test.go
new file mode 100644
index 0000000000..a5069aefd4
--- /dev/null
+++ a/internal/services/compute/parse/proximity_placement_group_test.go
@@ -0,0 +1,112 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"testing"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+var _ resourceids.Id = ProximityPlacementGroupId{}
+
+func TestProximityPlacementGroupIDFormatter(t *testing.T) {
+	actual := NewProximityPlacementGroupID("12345678-1234-9876-4563-123456789012", "group1", "proximityPlacementGroup1").ID()
+	expected := "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.Compute/proximityPlacementGroups/proximityPlacementGroup1"
+	if actual != expected {
+		t.Fatalf("Expected %q but got %q", expected, actual)
+	}
+}
+
+func TestProximityPlacementGroupID(t *testing.T) {
+	testData := []struct {
+		Input    string
+		Error    bool
+		Expected *ProximityPlacementGroupId
+	}{
+
+		{
+			// empty
+			Input: "",
+			Error: true,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Error: true,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Error: true,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Error: true,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Error: true,
+		},
+
+		{
+			// missing Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.Compute/",
+			Error: true,
+		},
+
+		{
+			// missing value for Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.Compute/proximityPlacementGroups/",
+			Error: true,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.Compute/proximityPlacementGroups/proximityPlacementGroup1",
+			Expected: &ProximityPlacementGroupId{
+				SubscriptionId: "12345678-1234-9876-4563-123456789012",
+				ResourceGroup:  "group1",
+				Name:           "proximityPlacementGroup1",
+			},
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/GROUP1/PROVIDERS/MICROSOFT.COMPUTE/PROXIMITYPLACEMENTGROUPS/PROXIMITYPLACEMENTGROUP1",
+			Error: true,
+		},
+	}
+
+	for _, v := range testData {
+		t.Logf("[DEBUG] Testing %q", v.Input)
+
+		actual, err := ProximityPlacementGroupID(v.Input)
+		if err != nil {
+			if v.Error {
+				continue
+			}
+
+			t.Fatalf("Expect a value but got an error: %s", err)
+		}
+		if v.Error {
+			t.Fatal("Expect an error but didn't get one")
+		}
+
+		if actual.SubscriptionId != v.Expected.SubscriptionId {
+			t.Fatalf("Expected %q but got %q for SubscriptionId", v.Expected.SubscriptionId, actual.SubscriptionId)
+		}
+		if actual.ResourceGroup != v.Expected.ResourceGroup {
+			t.Fatalf("Expected %q but got %q for ResourceGroup", v.Expected.ResourceGroup, actual.ResourceGroup)
+		}
+		if actual.Name != v.Expected.Name {
+			t.Fatalf("Expected %q but got %q for Name", v.Expected.Name, actual.Name)
+		}
+	}
+}
diff --git b/internal/services/compute/snapshot_resource.go a/internal/services/compute/snapshot_resource.go
index 58356943cb..2f23ea5f6d 100644
--- b/internal/services/compute/snapshot_resource.go
+++ a/internal/services/compute/snapshot_resource.go
@@ -64,7 +64,7 @@ func resourceSnapshot() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(snapshots.DiskCreateOptionCopy),
 					string(snapshots.DiskCreateOptionImport),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"incremental_enabled": {
diff --git b/internal/services/compute/validate/proximity_placement_group_id.go a/internal/services/compute/validate/proximity_placement_group_id.go
new file mode 100644
index 0000000000..2c48bb9ad7
--- /dev/null
+++ a/internal/services/compute/validate/proximity_placement_group_id.go
@@ -0,0 +1,23 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+
+	"github.com/hashicorp/terraform-provider-azurerm/internal/services/compute/parse"
+)
+
+func ProximityPlacementGroupID(input interface{}, key string) (warnings []string, errors []error) {
+	v, ok := input.(string)
+	if !ok {
+		errors = append(errors, fmt.Errorf("expected %q to be a string", key))
+		return
+	}
+
+	if _, err := parse.ProximityPlacementGroupID(v); err != nil {
+		errors = append(errors, err)
+	}
+
+	return
+}
diff --git b/internal/services/compute/validate/proximity_placement_group_id_test.go a/internal/services/compute/validate/proximity_placement_group_id_test.go
new file mode 100644
index 0000000000..413553dba3
--- /dev/null
+++ a/internal/services/compute/validate/proximity_placement_group_id_test.go
@@ -0,0 +1,76 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import "testing"
+
+func TestProximityPlacementGroupID(t *testing.T) {
+	cases := []struct {
+		Input string
+		Valid bool
+	}{
+
+		{
+			// empty
+			Input: "",
+			Valid: false,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Valid: false,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Valid: false,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Valid: false,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Valid: false,
+		},
+
+		{
+			// missing Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.Compute/",
+			Valid: false,
+		},
+
+		{
+			// missing value for Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.Compute/proximityPlacementGroups/",
+			Valid: false,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.Compute/proximityPlacementGroups/proximityPlacementGroup1",
+			Valid: true,
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/GROUP1/PROVIDERS/MICROSOFT.COMPUTE/PROXIMITYPLACEMENTGROUPS/PROXIMITYPLACEMENTGROUP1",
+			Valid: false,
+		},
+	}
+	for _, tc := range cases {
+		t.Logf("[DEBUG] Testing Value %s", tc.Input)
+		_, errors := ProximityPlacementGroupID(tc.Input, "test")
+		valid := len(errors) == 0
+
+		if tc.Valid != valid {
+			t.Fatalf("Expected %t but got %t", tc.Valid, valid)
+		}
+	}
+}
diff --git b/internal/services/compute/virtual_machine_data_disk_attachment_resource.go a/internal/services/compute/virtual_machine_data_disk_attachment_resource.go
index 5793bef1ff..50af818cae 100644
--- b/internal/services/compute/virtual_machine_data_disk_attachment_resource.go
+++ a/internal/services/compute/virtual_machine_data_disk_attachment_resource.go
@@ -2,6 +2,7 @@ package compute
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -68,7 +69,8 @@ func resourceVirtualMachineDataDiskAttachment() *pluginsdk.Resource {
 					string(compute.CachingTypesNone),
 					string(compute.CachingTypesReadOnly),
 					string(compute.CachingTypesReadWrite),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"create_option": {
@@ -79,7 +81,8 @@ func resourceVirtualMachineDataDiskAttachment() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(compute.DiskCreateOptionTypesAttach),
 					string(compute.DiskCreateOptionTypesEmpty),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"write_accelerator_enabled": {
diff --git b/internal/services/compute/windows_virtual_machine_resource.go a/internal/services/compute/windows_virtual_machine_resource.go
index 9ad08b1c00..d0be4559fe 100644
--- b/internal/services/compute/windows_virtual_machine_resource.go
+++ a/internal/services/compute/windows_virtual_machine_resource.go
@@ -350,11 +350,11 @@ func resourceWindowsVirtualMachine() *pluginsdk.Resource {
 			},
 
 			"platform_fault_domain": {
-				Type:         pluginsdk.TypeInt,
-				Optional:     true,
-				Default:      -1,
-				ForceNew:     true,
-				RequiredWith: []string{"virtual_machine_scale_set_id"},
+				Type:     pluginsdk.TypeInt,
+				Optional: true,
+				Default:  -1,
+				ForceNew: true,
+				//RequiredWith: []string{"virtual_machine_scale_set_id"},
 				ValidateFunc: validation.IntAtLeast(-1),
 			},
 
diff --git b/internal/services/containers/container_group_resource.go a/internal/services/containers/container_group_resource.go
index 051e6c271e..5fa4c93e0b 100644
--- b/internal/services/containers/container_group_resource.go
+++ a/internal/services/containers/container_group_resource.go
@@ -3,6 +3,8 @@ package containers
 import (
 	"bytes"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strings"
 	"time"
@@ -69,7 +71,8 @@ func resourceContainerGroup() *pluginsdk.Resource {
 					string(containerinstance.ContainerGroupIPAddressTypePublic),
 					string(containerinstance.ContainerGroupIPAddressTypePrivate),
 					"None",
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"os_type": {
@@ -79,7 +82,8 @@ func resourceContainerGroup() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(containerinstance.OperatingSystemTypesWindows),
 					string(containerinstance.OperatingSystemTypesLinux),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"image_registry_credential": {
@@ -157,7 +161,7 @@ func resourceContainerGroup() *pluginsdk.Resource {
 					string(containerinstance.ContainerGroupRestartPolicyAlways),
 					string(containerinstance.ContainerGroupRestartPolicyNever),
 					string(containerinstance.ContainerGroupRestartPolicyOnFailure),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"dns_name_label": {
diff --git b/internal/services/containers/container_registry_resource.go a/internal/services/containers/container_registry_resource.go
index 0109de6887..d793918a3a 100644
--- b/internal/services/containers/container_registry_resource.go
+++ a/internal/services/containers/container_registry_resource.go
@@ -4,7 +4,6 @@ import (
 	"context"
 	"fmt"
 	"log"
-	"sort"
 	"strings"
 	"time"
 
@@ -617,11 +616,6 @@ func resourceContainerRegistryRead(d *pluginsdk.ResourceData, meta interface{})
 		}
 	}
 
-	// The order of the georeplications returned from the list API is not consistent. We simply order it alphabetically to be consistent.
-	sort.Slice(geoReplications, func(i, j int) bool {
-		return geoReplications[i].(map[string]interface{})["location"].(string) < geoReplications[j].(map[string]interface{})["location"].(string)
-	})
-
 	d.Set("georeplications", geoReplications)
 
 	return nil
diff --git b/internal/services/containers/kubernetes_cluster_resource.go a/internal/services/containers/kubernetes_cluster_resource.go
index 37de5d53c9..16b7588f39 100644
--- b/internal/services/containers/kubernetes_cluster_resource.go
+++ a/internal/services/containers/kubernetes_cluster_resource.go
@@ -881,7 +881,7 @@ func resourceKubernetesCluster() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(managedclusters.LoadBalancerSkuBasic),
 								string(managedclusters.LoadBalancerSkuStandard),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"outbound_type": {
diff --git b/internal/services/cosmos/common/schema.go a/internal/services/cosmos/common/schema.go
index 589fd78279..b4574722aa 100644
--- b/internal/services/cosmos/common/schema.go
+++ a/internal/services/cosmos/common/schema.go
@@ -104,9 +104,10 @@ func CosmosDbIndexingPolicySchema() *pluginsdk.Schema {
 				// `automatic` is excluded as it is deprecated; see https://stackoverflow.com/a/58721386
 				// `indexing_mode` case changes from 2020-04-01 to 2021-01-15 issue https://github.com/Azure/azure-rest-api-specs/issues/14051
 				"indexing_mode": {
-					Type:     pluginsdk.TypeString,
-					Optional: true,
-					Default:  documentdb.IndexingModeConsistent,
+					Type:             pluginsdk.TypeString,
+					Optional:         true,
+					Default:          documentdb.IndexingModeConsistent,
+					DiffSuppressFunc: suppress.CaseDifferenceV2Only, // Open issue https://github.com/Azure/azure-sdk-for-go/issues/6603
 					ValidateFunc: validation.StringInSlice([]string{
 						string(documentdb.IndexingModeConsistent),
 						string(documentdb.IndexingModeNone),
diff --git b/internal/services/cosmos/cosmosdb_account_resource.go a/internal/services/cosmos/cosmosdb_account_resource.go
index 5414087d3c..028d4b53ef 100644
--- b/internal/services/cosmos/cosmosdb_account_resource.go
+++ a/internal/services/cosmos/cosmosdb_account_resource.go
@@ -4,6 +4,7 @@ import (
 	"bytes"
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"net/http"
 	"regexp"
@@ -189,7 +190,7 @@ func resourceCosmosDbAccount() *pluginsdk.Resource {
 				Required: true,
 				ValidateFunc: validation.StringInSlice([]string{
 					string(documentdb.DatabaseAccountOfferTypeStandard),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"analytical_storage": {
@@ -260,7 +261,7 @@ func resourceCosmosDbAccount() *pluginsdk.Resource {
 					string(documentdb.DatabaseAccountKindGlobalDocumentDB),
 					string(documentdb.DatabaseAccountKindMongoDB),
 					string(documentdb.DatabaseAccountKindParse),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"ip_range_filter": func() *schema.Schema {
@@ -334,7 +335,7 @@ func resourceCosmosDbAccount() *pluginsdk.Resource {
 								string(documentdb.DefaultConsistencyLevelEventual),
 								string(documentdb.DefaultConsistencyLevelSession),
 								string(documentdb.DefaultConsistencyLevelStrong),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"max_interval_in_seconds": {
@@ -391,8 +392,9 @@ func resourceCosmosDbAccount() *pluginsdk.Resource {
 				Elem: &pluginsdk.Resource{
 					Schema: map[string]*pluginsdk.Schema{
 						"name": {
-							Type:     pluginsdk.TypeString,
-							Required: true,
+							Type:             pluginsdk.TypeString,
+							Required:         true,
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 							ValidateFunc: validation.StringInSlice([]string{
 								string(databaseAccountCapabilitiesEnableAggregationPipeline),
 								string(databaseAccountCapabilitiesEnableCassandra),
diff --git b/internal/services/cosmos/cosmosdb_cassandra_cluster_resource_test.go a/internal/services/cosmos/cosmosdb_cassandra_cluster_resource_test.go
index bd7444ecf8..cc98d42083 100644
--- b/internal/services/cosmos/cosmosdb_cassandra_cluster_resource_test.go
+++ a/internal/services/cosmos/cosmosdb_cassandra_cluster_resource_test.go
@@ -15,6 +15,17 @@ import (
 
 type CassandraClusterResource struct{}
 
+func TestAccCassandraCluster(t *testing.T) {
+	// NOTE: this is a combined test rather than separate split out tests due to all below TCs sharing same sp
+	acceptance.RunTestsInSequence(t, map[string]map[string]func(t *testing.T){
+		"basic": {
+			"basic":          testAccCassandraCluster_basic,
+			"requiresImport": testAccCassandraCluster_requiresImport,
+			"tags":           testAccCassandraCluster_tags,
+		},
+	})
+}
+
 func testAccCassandraCluster_basic(t *testing.T) {
 	data := acceptance.BuildTestData(t, "azurerm_cosmosdb_cassandra_cluster", "test")
 	r := CassandraClusterResource{}
diff --git b/internal/services/cosmos/cosmosdb_gremlin_graph_resource.go a/internal/services/cosmos/cosmosdb_gremlin_graph_resource.go
index 2eb128da97..3e32536f7c 100644
--- b/internal/services/cosmos/cosmosdb_gremlin_graph_resource.go
+++ a/internal/services/cosmos/cosmosdb_gremlin_graph_resource.go
@@ -2,6 +2,7 @@ package cosmos
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strings"
 	"time"
@@ -113,8 +114,9 @@ func resourceCosmosDbGremlinGraph() *pluginsdk.Resource {
 
 						// case change in 2021-01-15, issue https://github.com/Azure/azure-rest-api-specs/issues/14051
 						"indexing_mode": {
-							Type:     pluginsdk.TypeString,
-							Required: true,
+							Type:             pluginsdk.TypeString,
+							Required:         true,
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only, // Open issue https://github.com/Azure/azure-sdk-for-go/issues/6603
 							ValidateFunc: validation.StringInSlice([]string{
 								string(documentdb.IndexingModeConsistent),
 								string(documentdb.IndexingModeNone),
diff --git b/internal/services/dns/dns_caa_record_resource.go a/internal/services/dns/dns_caa_record_resource.go
index 428f297761..4711ff2bcf 100644
--- b/internal/services/dns/dns_caa_record_resource.go
+++ a/internal/services/dns/dns_caa_record_resource.go
@@ -11,8 +11,10 @@ import (
 	"github.com/hashicorp/go-azure-sdk/resource-manager/dns/2018-05-01/recordsets"
 	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/services/dns/migration"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
 )
@@ -79,7 +81,8 @@ func resourceDnsCaaRecord() *pluginsdk.Resource {
 								"issue",
 								"issuewild",
 								"iodef",
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"value": {
diff --git b/internal/services/eventhub/eventhub_namespace_resource.go a/internal/services/eventhub/eventhub_namespace_resource.go
index b09900134e..5cf343e951 100644
--- b/internal/services/eventhub/eventhub_namespace_resource.go
+++ a/internal/services/eventhub/eventhub_namespace_resource.go
@@ -78,7 +78,7 @@ func resourceEventHubNamespace() *pluginsdk.Resource {
 					string(namespaces.SkuNameBasic),
 					string(namespaces.SkuNameStandard),
 					string(namespaces.SkuNamePremium),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"capacity": {
diff --git b/internal/services/eventhub/eventhub_resource.go a/internal/services/eventhub/eventhub_resource.go
index de31314464..3b7c6ee4a5 100644
--- b/internal/services/eventhub/eventhub_resource.go
+++ a/internal/services/eventhub/eventhub_resource.go
@@ -2,6 +2,7 @@ package eventhub
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -91,7 +92,7 @@ func resourceEventHub() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(eventhubs.EncodingCaptureDescriptionAvro),
 								string(eventhubs.EncodingCaptureDescriptionAvroDeflate),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 						"interval_in_seconds": {
 							Type:         pluginsdk.TypeInt,
diff --git b/internal/services/firewall/firewall_policy_resource.go a/internal/services/firewall/firewall_policy_resource.go
index 807cef29ac..48da0e5da8 100644
--- b/internal/services/firewall/firewall_policy_resource.go
+++ a/internal/services/firewall/firewall_policy_resource.go
@@ -2,6 +2,7 @@ package firewall
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -834,14 +835,13 @@ func resourceFirewallPolicySchema() map[string]*pluginsdk.Schema {
 								"protocol": {
 									Type:     pluginsdk.TypeString,
 									Required: true,
-									// protocol to be one of [ICMP ANY TCP UDP] but response may be "Any"
-									DiffSuppressFunc: suppress.CaseDifference,
 									ValidateFunc: validation.StringInSlice([]string{
 										string(network.FirewallPolicyIntrusionDetectionProtocolICMP),
 										string(network.FirewallPolicyIntrusionDetectionProtocolANY),
 										string(network.FirewallPolicyIntrusionDetectionProtocolTCP),
 										string(network.FirewallPolicyIntrusionDetectionProtocolUDP),
-									}, true),
+									}, features.CaseInsensitive()),
+									DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 								},
 								"source_addresses": {
 									Type:     pluginsdk.TypeSet,
diff --git b/internal/services/hdinsight/hdinsight_hadoop_cluster_resource.go a/internal/services/hdinsight/hdinsight_hadoop_cluster_resource.go
index 8e2ec520ad..3ab330fa5a 100644
--- b/internal/services/hdinsight/hdinsight_hadoop_cluster_resource.go
+++ a/internal/services/hdinsight/hdinsight_hadoop_cluster_resource.go
@@ -3,6 +3,7 @@ package hdinsight
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strings"
 	"time"
@@ -137,9 +138,10 @@ func resourceHDInsightHadoopCluster() *pluginsdk.Resource {
 									},
 
 									"vm_size": {
-										Type:         pluginsdk.TypeString,
-										Required:     true,
-										ValidateFunc: validation.StringInSlice(validate.NodeDefinitionVMSize, false),
+										Type:             pluginsdk.TypeString,
+										Required:         true,
+										DiffSuppressFunc: suppress.CaseDifferenceV2Only,
+										ValidateFunc:     validation.StringInSlice(validate.NodeDefinitionVMSize, false),
 									},
 
 									"install_script_action": {
diff --git b/internal/services/hdinsight/schema.go a/internal/services/hdinsight/schema.go
index 74bf0795eb..5bc323d3c2 100644
--- b/internal/services/hdinsight/schema.go
+++ a/internal/services/hdinsight/schema.go
@@ -2,6 +2,8 @@ package hdinsight
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"net/url"
 	"regexp"
 	"strings"
@@ -46,7 +48,8 @@ func SchemaHDInsightTier() *pluginsdk.Schema {
 		ValidateFunc: validation.StringInSlice([]string{
 			string(hdinsight.TierStandard),
 			string(hdinsight.TierPremium),
-		}, false),
+		}, features.CaseInsensitive()),
+		DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 	}
 }
 
@@ -1026,10 +1029,11 @@ type HDInsightNodeDefinition struct {
 func SchemaHDInsightNodeDefinition(schemaLocation string, definition HDInsightNodeDefinition, required bool) *pluginsdk.Schema {
 	result := map[string]*pluginsdk.Schema{
 		"vm_size": {
-			Type:         pluginsdk.TypeString,
-			Required:     true,
-			ForceNew:     true,
-			ValidateFunc: validation.StringInSlice(validate.NodeDefinitionVMSize, false),
+			Type:             pluginsdk.TypeString,
+			Required:         true,
+			ForceNew:         true,
+			DiffSuppressFunc: suppress.CaseDifferenceV2Only,
+			ValidateFunc:     validation.StringInSlice(validate.NodeDefinitionVMSize, false),
 		},
 		"username": {
 			Type:     pluginsdk.TypeString,
diff --git b/internal/services/iotcentral/iotcentral_application_resource.go a/internal/services/iotcentral/iotcentral_application_resource.go
index c8364cab23..516e765e70 100644
--- b/internal/services/iotcentral/iotcentral_application_resource.go
+++ a/internal/services/iotcentral/iotcentral_application_resource.go
@@ -87,7 +87,7 @@ func resourceIotCentralApplication() *pluginsdk.Resource {
 					string(apps.AppSkuSTOne),
 					string(apps.AppSkuSTTwo),
 					string(apps.AppSkuSTZero),
-				}, false),
+				}, features.CaseInsensitive()),
 				Default: string(apps.AppSkuSTOne),
 			},
 			"template": {
diff --git b/internal/services/iothub/iothub_resource.go a/internal/services/iothub/iothub_resource.go
index e7394315af..50e1671cd5 100644
--- b/internal/services/iothub/iothub_resource.go
+++ a/internal/services/iothub/iothub_resource.go
@@ -25,6 +25,7 @@ import (
 	servicebusValidate "github.com/hashicorp/terraform-provider-azurerm/internal/services/servicebus/validate"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
 	"github.com/hashicorp/terraform-provider-azurerm/utils"
@@ -347,11 +348,13 @@ func resourceIotHub() *pluginsdk.Resource {
 						},
 
 						"encoding": {
-							Type:             pluginsdk.TypeString,
-							Optional:         true,
-							ForceNew:         true,
-							Default:          string(devices.EncodingAvro),
-							DiffSuppressFunc: suppressIfTypeIsNot("AzureIotHub.StorageContainer"),
+							Type:     pluginsdk.TypeString,
+							Optional: true,
+							ForceNew: true,
+							Default:  string(devices.EncodingAvro),
+							DiffSuppressFunc: suppressWhenAny(
+								suppressIfTypeIsNot("AzureIotHub.StorageContainer"),
+								suppress.CaseDifferenceV2Only),
 							ValidateFunc: validation.StringInSlice([]string{
 								string(devices.EncodingAvro),
 								string(devices.EncodingAvroDeflate),
diff --git b/internal/services/keyvault/key_vault_certificate_resource.go a/internal/services/keyvault/key_vault_certificate_resource.go
index 2247187780..814f0e1a47 100644
--- b/internal/services/keyvault/key_vault_certificate_resource.go
+++ a/internal/services/keyvault/key_vault_certificate_resource.go
@@ -6,6 +6,8 @@ import (
 	"encoding/base64"
 	"encoding/hex"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"math"
 	"strings"
@@ -157,7 +159,8 @@ func resourceKeyVaultCertificate() *pluginsdk.Resource {
 											string(keyvault.JSONWebKeyTypeRSA),
 											string(keyvault.JSONWebKeyTypeRSAHSM),
 											string(keyvault.JSONWebKeyTypeOct),
-										}, false),
+										}, features.CaseInsensitive()),
+										DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 									},
 									"reuse_key": {
 										Type:     pluginsdk.TypeBool,
diff --git b/internal/services/legacy/virtual_machine_resource.go a/internal/services/legacy/virtual_machine_resource.go
index 10142be6a9..ec1c2ddff1 100644
--- b/internal/services/legacy/virtual_machine_resource.go
+++ a/internal/services/legacy/virtual_machine_resource.go
@@ -5,6 +5,7 @@ import (
 	"crypto/sha1"
 	"encoding/hex"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"strings"
 	"time"
@@ -181,7 +182,7 @@ func resourceVirtualMachine() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					"Windows_Client",
 					"Windows_Server",
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"vm_size": {
@@ -247,7 +248,8 @@ func resourceVirtualMachine() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(compute.OperatingSystemTypesLinux),
 								string(compute.OperatingSystemTypesWindows),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"name": {
@@ -282,7 +284,8 @@ func resourceVirtualMachine() *pluginsdk.Resource {
 								string(compute.StorageAccountTypesPremiumLRS),
 								string(compute.StorageAccountTypesStandardLRS),
 								string(compute.StorageAccountTypesStandardSSDLRS),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"image_uri": {
@@ -356,7 +359,8 @@ func resourceVirtualMachine() *pluginsdk.Resource {
 								string(compute.StorageAccountTypesStandardLRS),
 								string(compute.StorageAccountTypesStandardSSDLRS),
 								string(compute.StorageAccountTypesUltraSSDLRS),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"create_option": {
@@ -503,7 +507,8 @@ func resourceVirtualMachine() *pluginsdk.Resource {
 										ValidateFunc: validation.StringInSlice([]string{
 											"HTTP",
 											"HTTPS",
-										}, false),
+										}, features.CaseInsensitive()),
+										DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 									},
 									"certificate_url": {
 										Type:     pluginsdk.TypeString,
diff --git b/internal/services/legacy/virtual_machine_scale_set_resource.go a/internal/services/legacy/virtual_machine_scale_set_resource.go
index 916d168701..723d288090 100644
--- b/internal/services/legacy/virtual_machine_scale_set_resource.go
+++ a/internal/services/legacy/virtual_machine_scale_set_resource.go
@@ -4,6 +4,7 @@ import (
 	"bytes"
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"strings"
 	"time"
@@ -148,7 +149,7 @@ func resourceVirtualMachineScaleSet() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					"Windows_Client",
 					"Windows_Server",
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"upgrade_policy_mode": {
@@ -158,7 +159,8 @@ func resourceVirtualMachineScaleSet() *pluginsdk.Resource {
 					string(compute.UpgradeModeAutomatic),
 					string(compute.UpgradeModeManual),
 					string(compute.UpgradeModeRolling),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"health_probe_id": {
@@ -231,7 +233,8 @@ func resourceVirtualMachineScaleSet() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(compute.VirtualMachinePriorityTypesLow),
 					string(compute.VirtualMachinePriorityTypesRegular),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"eviction_policy": {
@@ -597,7 +600,8 @@ func resourceVirtualMachineScaleSet() *pluginsdk.Resource {
 								string(compute.StorageAccountTypesPremiumLRS),
 								string(compute.StorageAccountTypesStandardLRS),
 								string(compute.StorageAccountTypesStandardSSDLRS),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"caching": {
@@ -656,7 +660,8 @@ func resourceVirtualMachineScaleSet() *pluginsdk.Resource {
 								string(compute.StorageAccountTypesPremiumLRS),
 								string(compute.StorageAccountTypesStandardLRS),
 								string(compute.StorageAccountTypesStandardSSDLRS),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 					},
 				},
diff --git b/internal/services/loadbalancer/loadbalancer_resource.go a/internal/services/loadbalancer/loadbalancer_resource.go
index 222f4c640e..a862e68f66 100644
--- b/internal/services/loadbalancer/loadbalancer_resource.go
+++ a/internal/services/loadbalancer/loadbalancer_resource.go
@@ -3,6 +3,7 @@ package loadbalancer
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"reflect"
 	"strconv"
@@ -403,7 +404,8 @@ func resourceArmLoadBalancerSchema() map[string]*pluginsdk.Schema {
 				string(network.LoadBalancerSkuNameBasic),
 				string(network.LoadBalancerSkuNameStandard),
 				string(network.LoadBalancerSkuNameGateway),
-			}, false),
+			}, features.CaseInsensitive()),
+			DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 		},
 
 		"sku_tier": {
diff --git b/internal/services/loadbalancer/nat_pool_resource.go a/internal/services/loadbalancer/nat_pool_resource.go
index 9ad8fefef9..37ef7ead24 100644
--- b/internal/services/loadbalancer/nat_pool_resource.go
+++ a/internal/services/loadbalancer/nat_pool_resource.go
@@ -2,6 +2,7 @@ package loadbalancer
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -67,7 +68,7 @@ func resourceArmLoadBalancerNatPool() *pluginsdk.Resource {
 					string(network.TransportProtocolAll),
 					string(network.TransportProtocolTCP),
 					string(network.TransportProtocolUDP),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"frontend_port_start": {
diff --git b/internal/services/loadbalancer/nat_rule_resource.go a/internal/services/loadbalancer/nat_rule_resource.go
index c8a8a1bd18..8cb7a0db39 100644
--- b/internal/services/loadbalancer/nat_rule_resource.go
+++ a/internal/services/loadbalancer/nat_rule_resource.go
@@ -2,6 +2,7 @@ package loadbalancer
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -67,7 +68,7 @@ func resourceArmLoadBalancerNatRule() *pluginsdk.Resource {
 					string(network.TransportProtocolAll),
 					string(network.TransportProtocolTCP),
 					string(network.TransportProtocolUDP),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"frontend_port": {
diff --git b/internal/services/loadbalancer/probe_resource.go a/internal/services/loadbalancer/probe_resource.go
index 47de87848e..ed6caf1caf 100644
--- b/internal/services/loadbalancer/probe_resource.go
+++ a/internal/services/loadbalancer/probe_resource.go
@@ -2,6 +2,7 @@ package loadbalancer
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -65,7 +66,7 @@ func resourceArmLoadBalancerProbe() *pluginsdk.Resource {
 					string(network.ProbeProtocolHTTP),
 					string(network.ProbeProtocolHTTPS),
 					string(network.ProbeProtocolTCP),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"port": {
diff --git b/internal/services/loadbalancer/rule_resource.go a/internal/services/loadbalancer/rule_resource.go
index 1281c2ef8e..f1df0460a4 100644
--- b/internal/services/loadbalancer/rule_resource.go
+++ a/internal/services/loadbalancer/rule_resource.go
@@ -2,6 +2,7 @@ package loadbalancer
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -379,7 +380,7 @@ func resourceArmLoadBalancerRuleSchema() map[string]*pluginsdk.Schema {
 				string(network.TransportProtocolAll),
 				string(network.TransportProtocolTCP),
 				string(network.TransportProtocolUDP),
-			}, false),
+			}, features.CaseInsensitive()),
 		},
 
 		"frontend_port": {
diff --git b/internal/services/loganalytics/log_analytics_datasource_windows_event_resource.go a/internal/services/loganalytics/log_analytics_datasource_windows_event_resource.go
index 6611d82346..37a7649e11 100644
--- b/internal/services/loganalytics/log_analytics_datasource_windows_event_resource.go
+++ a/internal/services/loganalytics/log_analytics_datasource_windows_event_resource.go
@@ -3,6 +3,7 @@ package loganalytics
 import (
 	"encoding/json"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -76,7 +77,8 @@ func resourceLogAnalyticsDataSourceWindowsEvent() *pluginsdk.Resource {
 				Elem: &pluginsdk.Schema{
 					Type: pluginsdk.TypeString,
 					// API backend accepts event_types case-insensitively
-					ValidateFunc: validation.StringInSlice([]string{"Error", "Warning", "Information"}, false),
+					ValidateFunc:     validation.StringInSlice([]string{"Error", "Warning", "Information"}, features.CaseInsensitive()),
+					DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 				},
 			},
 		},
diff --git b/internal/services/loganalytics/log_analytics_workspace_resource.go a/internal/services/loganalytics/log_analytics_workspace_resource.go
index 81ffb799b9..c24f87d289 100644
--- b/internal/services/loganalytics/log_analytics_workspace_resource.go
+++ a/internal/services/loganalytics/log_analytics_workspace_resource.go
@@ -3,6 +3,8 @@ package loganalytics
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strconv"
 	"strings"
@@ -108,7 +110,8 @@ func resourceLogAnalyticsWorkspace() *pluginsdk.Resource {
 					string(workspaces.WorkspaceSkuNameEnumStandard),
 					string(workspaces.WorkspaceSkuNameEnumCapacityReservation),
 					"Unlimited", // TODO check if this is actually no longer valid, removed in v28.0.0 of the SDK
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"reservation_capacity_in_gb_per_day": {
diff --git b/internal/services/logic/logic_app_integration_account_batch_configuration_resource.go a/internal/services/logic/logic_app_integration_account_batch_configuration_resource.go
index 0b495e7567..575fd18ed8 100644
--- b/internal/services/logic/logic_app_integration_account_batch_configuration_resource.go
+++ a/internal/services/logic/logic_app_integration_account_batch_configuration_resource.go
@@ -7,6 +7,8 @@ import (
 	"strings"
 	"time"
 
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+
 	"github.com/hashicorp/go-azure-helpers/lang/response"
 	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
 	"github.com/hashicorp/go-azure-sdk/resource-manager/logic/2019-05-01/integrationaccountbatchconfigurations"
@@ -91,9 +93,10 @@ func resourceLogicAppIntegrationAccountBatchConfiguration() *pluginsdk.Resource
 							Elem: &pluginsdk.Resource{
 								Schema: map[string]*pluginsdk.Schema{
 									"frequency": {
-										Type:         pluginsdk.TypeString,
-										Required:     true,
-										ValidateFunc: validation.StringInSlice(integrationaccountbatchconfigurations.PossibleValuesForRecurrenceFrequency(), false),
+										Type:     pluginsdk.TypeString,
+										Required: true,
+										ValidateFunc: validation.StringInSlice(integrationaccountbatchconfigurations.PossibleValuesForRecurrenceFrequency(),
+											features.CaseInsensitive()),
 									},
 
 									"interval": {
@@ -152,9 +155,10 @@ func resourceLogicAppIntegrationAccountBatchConfiguration() *pluginsdk.Resource
 													Elem: &pluginsdk.Resource{
 														Schema: map[string]*pluginsdk.Schema{
 															"weekday": {
-																Type:         pluginsdk.TypeString,
-																Required:     true,
-																ValidateFunc: validation.StringInSlice(integrationaccountbatchconfigurations.PossibleValuesForDayOfWeek(), false),
+																Type:     pluginsdk.TypeString,
+																Required: true,
+																ValidateFunc: validation.StringInSlice(integrationaccountbatchconfigurations.PossibleValuesForDayOfWeek(),
+																	features.CaseInsensitive()),
 															},
 
 															"week": {
@@ -174,8 +178,9 @@ func resourceLogicAppIntegrationAccountBatchConfiguration() *pluginsdk.Resource
 													Type:     pluginsdk.TypeSet,
 													Optional: true,
 													Elem: &pluginsdk.Schema{
-														Type:         pluginsdk.TypeString,
-														ValidateFunc: validation.StringInSlice(integrationaccountbatchconfigurations.PossibleValuesForDaysOfWeek(), false),
+														Type: pluginsdk.TypeString,
+														ValidateFunc: validation.StringInSlice(integrationaccountbatchconfigurations.PossibleValuesForDaysOfWeek(),
+															features.CaseInsensitive()),
 													},
 													ConflictsWith: []string{"release_criteria.0.recurrence.0.schedule.0.month_days", "release_criteria.0.recurrence.0.schedule.0.monthly"},
 												},
diff --git b/internal/services/logic/logic_app_standard_resource.go a/internal/services/logic/logic_app_standard_resource.go
index 020e55a79d..b8ac92854c 100644
--- b/internal/services/logic/logic_app_standard_resource.go
+++ a/internal/services/logic/logic_app_standard_resource.go
@@ -2,6 +2,8 @@ package logic
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strconv"
 	"strings"
@@ -137,7 +139,8 @@ func resourceLogicAppStandard() *pluginsdk.Resource {
 								string(web.ConnectionStringTypeServiceBus),
 								string(web.ConnectionStringTypeSQLAzure),
 								string(web.ConnectionStringTypeSQLServer),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"value": {
@@ -856,7 +859,8 @@ func schemaLogicAppStandardSiteConfig() *pluginsdk.Schema {
 						"v4.0",
 						"v5.0",
 						"v6.0",
-					}, false),
+					}, features.CaseInsensitive()),
+					DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 				},
 
 				"vnet_route_all_enabled": {
diff --git b/internal/services/logz/logz_monitor_resource.go a/internal/services/logz/logz_monitor_resource.go
index fb9e77104c..ad25fee5a4 100644
--- b/internal/services/logz/logz_monitor_resource.go
+++ a/internal/services/logz/logz_monitor_resource.go
@@ -2,6 +2,7 @@ package logz
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -90,7 +91,8 @@ func resourceLogzMonitor() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								"MONTHLY",
 								"WEEKLY",
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"effective_date": {
@@ -107,8 +109,9 @@ func resourceLogzMonitor() *pluginsdk.Resource {
 							ForceNew: true,
 							ValidateFunc: validation.StringInSlice([]string{
 								PlanId100gb14days,
-							}, false),
-							Default: PlanId100gb14days,
+							}, features.CaseInsensitive()),
+							Default:          PlanId100gb14days,
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"usage_type": {
@@ -118,7 +121,8 @@ func resourceLogzMonitor() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								"PAYG",
 								"COMMITTED",
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 					},
 				},
diff --git b/internal/services/media/media_services_account_resource.go a/internal/services/media/media_services_account_resource.go
index 5a9e22f850..6afda9b772 100644
--- b/internal/services/media/media_services_account_resource.go
+++ a/internal/services/media/media_services_account_resource.go
@@ -7,6 +7,8 @@ import (
 	"strings"
 	"time"
 
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+
 	"github.com/hashicorp/go-azure-helpers/lang/pointer"
 	"github.com/hashicorp/go-azure-helpers/lang/response"
 	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
@@ -132,7 +134,7 @@ func resourceMediaServicesAccount() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(accounts.StorageAuthenticationSystem),
 					string(accounts.StorageAuthenticationManagedIdentity),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"key_delivery_access_control": {
@@ -148,7 +150,7 @@ func resourceMediaServicesAccount() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(accounts.DefaultActionDeny),
 								string(accounts.DefaultActionAllow),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"ip_allow_list": {
diff --git b/internal/services/monitor/monitor_autoscale_setting_resource.go a/internal/services/monitor/monitor_autoscale_setting_resource.go
index 1e2f4c3dc0..234fbb5145 100644
--- b/internal/services/monitor/monitor_autoscale_setting_resource.go
+++ a/internal/services/monitor/monitor_autoscale_setting_resource.go
@@ -2,6 +2,8 @@ package monitor
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strconv"
 	"time"
@@ -313,7 +315,8 @@ func resourceMonitorAutoScaleSetting() *pluginsdk.Resource {
 												"Friday",
 												"Saturday",
 												"Sunday",
-											}, false),
+											}, features.CaseInsensitive()),
+											DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 										},
 									},
 									"hours": {
diff --git b/internal/services/mssql/mssql_database_resource.go a/internal/services/mssql/mssql_database_resource.go
index 438171abd7..6a4099bc5b 100644
--- b/internal/services/mssql/mssql_database_resource.go
+++ a/internal/services/mssql/mssql_database_resource.go
@@ -3,6 +3,7 @@ package mssql
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"strings"
 	"time"
@@ -1015,7 +1016,8 @@ func resourceMsSqlDatabaseSchema() map[string]*pluginsdk.Schema {
 								"Sql_Injection",
 								"Sql_Injection_Vulnerability",
 								"Access_Anomaly",
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 					},
 
@@ -1026,7 +1028,7 @@ func resourceMsSqlDatabaseSchema() map[string]*pluginsdk.Schema {
 						ValidateFunc: validation.StringInSlice([]string{
 							"Disabled",
 							"Enabled",
-						}, false),
+						}, features.CaseInsensitive()),
 					},
 
 					"email_addresses": {
@@ -1052,7 +1054,7 @@ func resourceMsSqlDatabaseSchema() map[string]*pluginsdk.Schema {
 							string(sql.SecurityAlertPolicyStateDisabled),
 							string(sql.SecurityAlertPolicyStateEnabled),
 							string(sql.SecurityAlertPolicyStateNew),
-						}, false),
+						}, features.CaseInsensitive()),
 					},
 
 					"storage_account_access_key": {
diff --git b/internal/services/mssql/mssql_elasticpool_resource.go a/internal/services/mssql/mssql_elasticpool_resource.go
index b10272c64d..d944375f46 100644
--- b/internal/services/mssql/mssql_elasticpool_resource.go
+++ a/internal/services/mssql/mssql_elasticpool_resource.go
@@ -3,6 +3,8 @@ package mssql
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strings"
 	"time"
@@ -81,7 +83,8 @@ func resourceMsSqlElasticPool() *pluginsdk.Resource {
 								"BC_Gen4",
 								"BC_Gen5",
 								"BC_DC",
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"capacity": {
@@ -99,7 +102,8 @@ func resourceMsSqlElasticPool() *pluginsdk.Resource {
 								"Premium",
 								"GeneralPurpose",
 								"BusinessCritical",
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"family": {
@@ -110,7 +114,8 @@ func resourceMsSqlElasticPool() *pluginsdk.Resource {
 								"Gen5",
 								"Fsv2",
 								"DC",
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 					},
 				},
diff --git b/internal/services/mssql/mssql_server_security_alert_policy_resource.go a/internal/services/mssql/mssql_server_security_alert_policy_resource.go
index c34613009d..f45e829f05 100644
--- b/internal/services/mssql/mssql_server_security_alert_policy_resource.go
+++ a/internal/services/mssql/mssql_server_security_alert_policy_resource.go
@@ -2,6 +2,8 @@ package mssql
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"time"
 
@@ -92,7 +94,8 @@ func resourceMsSqlServerSecurityAlertPolicy() *pluginsdk.Resource {
 					string(sql.SecurityAlertPolicyStateDisabled),
 					string(sql.SecurityAlertPolicyStateEnabled),
 					string(sql.SecurityAlertPolicyStateNew),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"storage_account_access_key": {
diff --git b/internal/services/mysql/mysql_server_resource.go a/internal/services/mysql/mysql_server_resource.go
index 6ca2cab67b..724ad4b039 100644
--- b/internal/services/mysql/mysql_server_resource.go
+++ a/internal/services/mysql/mysql_server_resource.go
@@ -3,6 +3,8 @@ package mysql
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strconv"
 	"strings"
@@ -303,8 +305,9 @@ func resourceMySqlServer() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(mysql.FiveFullStopSeven),
 					string(mysql.EightFullStopZero),
-				}, false),
-				ForceNew: true,
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
+				ForceNew:         true,
 			},
 		},
 
diff --git b/internal/services/network/application_gateway_resource.go a/internal/services/network/application_gateway_resource.go
index 416621fd65..158c9bfb5d 100644
--- b/internal/services/network/application_gateway_resource.go
+++ a/internal/services/network/application_gateway_resource.go
@@ -4,6 +4,8 @@ import (
 	"bytes"
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strings"
 	"time"
@@ -207,7 +209,7 @@ func resourceApplicationGateway() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(network.ProtocolHTTP),
 								string(network.ProtocolHTTPS),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"cookie_based_affinity": {
@@ -216,7 +218,7 @@ func resourceApplicationGateway() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(network.ApplicationGatewayCookieBasedAffinityEnabled),
 								string(network.ApplicationGatewayCookieBasedAffinityDisabled),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"affinity_cookie_name": {
@@ -343,7 +345,7 @@ func resourceApplicationGateway() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(network.IPAllocationMethodDynamic),
 								string(network.IPAllocationMethodStatic),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"private_link_configuration_name": {
@@ -458,7 +460,7 @@ func resourceApplicationGateway() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(network.ProtocolHTTP),
 								string(network.ProtocolHTTPS),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"host_name": {
@@ -613,7 +615,8 @@ func resourceApplicationGateway() *pluginsdk.Resource {
 										ValidateFunc: validation.StringInSlice([]string{
 											string(network.IPAllocationMethodDynamic),
 											string(network.IPAllocationMethodStatic),
-										}, false),
+										}, features.CaseInsensitive()),
+										DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 									},
 
 									"primary": {
@@ -821,7 +824,7 @@ func resourceApplicationGateway() *pluginsdk.Resource {
 								string(network.ApplicationGatewaySkuNameWAFLarge),
 								string(network.ApplicationGatewaySkuNameWAFMedium),
 								string(network.ApplicationGatewaySkuNameWAFV2),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"tier": {
@@ -832,7 +835,7 @@ func resourceApplicationGateway() *pluginsdk.Resource {
 								string(network.ApplicationGatewayTierStandardV2),
 								string(network.ApplicationGatewayTierWAF),
 								string(network.ApplicationGatewayTierWAFV2),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"capacity": {
@@ -933,7 +936,7 @@ func resourceApplicationGateway() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(network.ProtocolHTTP),
 								string(network.ProtocolHTTPS),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"path": {
@@ -1402,7 +1405,7 @@ func resourceApplicationGateway() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(network.ApplicationGatewayFirewallModeDetection),
 								string(network.ApplicationGatewayFirewallModePrevention),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"rule_set_type": {
diff --git b/internal/services/network/express_route_circuit_resource.go a/internal/services/network/express_route_circuit_resource.go
index 08c892d472..c5daf29c0b 100644
--- b/internal/services/network/express_route_circuit_resource.go
+++ a/internal/services/network/express_route_circuit_resource.go
@@ -3,6 +3,7 @@ package network
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -75,7 +76,8 @@ func resourceExpressRouteCircuit() *pluginsdk.Resource {
 								string(network.ExpressRouteCircuitSkuTierLocal),
 								string(network.ExpressRouteCircuitSkuTierStandard),
 								string(network.ExpressRouteCircuitSkuTierPremium),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"family": {
@@ -84,7 +86,8 @@ func resourceExpressRouteCircuit() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(network.ExpressRouteCircuitSkuFamilyMeteredData),
 								string(network.ExpressRouteCircuitSkuFamilyUnlimitedData),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 					},
 				},
diff --git b/internal/services/network/network_interface_resource.go a/internal/services/network/network_interface_resource.go
index 07ecb06d4d..8b50708f98 100644
--- b/internal/services/network/network_interface_resource.go
+++ a/internal/services/network/network_interface_resource.go
@@ -2,6 +2,7 @@ package network
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -95,7 +96,8 @@ func resourceNetworkInterface() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(network.IPAllocationMethodDynamic),
 								string(network.IPAllocationMethodStatic),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"public_ip_address_id": {
diff --git b/internal/services/network/network_security_group_resource.go a/internal/services/network/network_security_group_resource.go
index 2937d42751..8e41e61b27 100644
--- b/internal/services/network/network_security_group_resource.go
+++ a/internal/services/network/network_security_group_resource.go
@@ -10,11 +10,13 @@ import (
 	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
 	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/locks"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/services/network/parse"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/set"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
 	"github.com/hashicorp/terraform-provider-azurerm/utils"
@@ -81,7 +83,8 @@ func resourceNetworkSecurityGroup() *pluginsdk.Resource {
 								string(network.SecurityRuleProtocolIcmp),
 								string(network.SecurityRuleProtocolAh),
 								string(network.SecurityRuleProtocolEsp),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"source_port_range": {
@@ -152,7 +155,8 @@ func resourceNetworkSecurityGroup() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(network.SecurityRuleAccessAllow),
 								string(network.SecurityRuleAccessDeny),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"priority": {
@@ -167,7 +171,8 @@ func resourceNetworkSecurityGroup() *pluginsdk.Resource {
 							ValidateFunc: validation.StringInSlice([]string{
 								string(network.SecurityRuleDirectionInbound),
 								string(network.SecurityRuleDirectionOutbound),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 					},
 				},
diff --git b/internal/services/network/network_security_rule_resource.go a/internal/services/network/network_security_rule_resource.go
index de10ee8c7c..f17772a4ab 100644
--- b/internal/services/network/network_security_rule_resource.go
+++ a/internal/services/network/network_security_rule_resource.go
@@ -8,8 +8,10 @@ import (
 	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
 	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/services/network/parse"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/validation"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/timeouts"
 	"github.com/hashicorp/terraform-provider-azurerm/utils"
@@ -65,7 +67,8 @@ func resourceNetworkSecurityRule() *pluginsdk.Resource {
 					string(network.SecurityRuleProtocolIcmp),
 					string(network.SecurityRuleProtocolAh),
 					string(network.SecurityRuleProtocolEsp),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"source_port_range": {
@@ -127,7 +130,7 @@ func resourceNetworkSecurityRule() *pluginsdk.Resource {
 			//lintignore:S018
 			"source_application_security_group_ids": {
 				Type:     pluginsdk.TypeSet,
-				MaxItems: 10,
+				MaxItems: 1,
 				Optional: true,
 				Elem:     &pluginsdk.Schema{Type: pluginsdk.TypeString},
 				Set:      pluginsdk.HashString,
@@ -136,7 +139,7 @@ func resourceNetworkSecurityRule() *pluginsdk.Resource {
 			//lintignore:S018
 			"destination_application_security_group_ids": {
 				Type:     pluginsdk.TypeSet,
-				MaxItems: 10,
+				MaxItems: 1,
 				Optional: true,
 				Elem:     &pluginsdk.Schema{Type: pluginsdk.TypeString},
 				Set:      pluginsdk.HashString,
@@ -148,7 +151,8 @@ func resourceNetworkSecurityRule() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(network.SecurityRuleAccessAllow),
 					string(network.SecurityRuleAccessDeny),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"priority": {
@@ -163,7 +167,8 @@ func resourceNetworkSecurityRule() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(network.SecurityRuleDirectionInbound),
 					string(network.SecurityRuleDirectionOutbound),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 		},
 	}
diff --git b/internal/services/network/public_ip_prefix_resource.go a/internal/services/network/public_ip_prefix_resource.go
index 8500dbc632..b4b4c693ad 100644
--- b/internal/services/network/public_ip_prefix_resource.go
+++ a/internal/services/network/public_ip_prefix_resource.go
@@ -2,6 +2,8 @@ package network
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"time"
 
@@ -70,14 +72,15 @@ func resourcePublicIpPrefix() *pluginsdk.Resource {
 			},
 
 			"ip_version": {
-				Type:     pluginsdk.TypeString,
-				Optional: true,
-				Default:  string(network.IPVersionIPv4),
-				ForceNew: true,
+				Type:             pluginsdk.TypeString,
+				Optional:         true,
+				Default:          string(network.IPVersionIPv4),
+				ForceNew:         true,
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 				ValidateFunc: validation.StringInSlice([]string{
 					string(network.IPVersionIPv4),
 					string(network.IPVersionIPv6),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"zones": commonschema.ZonesMultipleOptionalForceNew(),
diff --git b/internal/services/network/public_ip_resource.go a/internal/services/network/public_ip_resource.go
index 825aea4914..4af8a28410 100644
--- b/internal/services/network/public_ip_resource.go
+++ a/internal/services/network/public_ip_resource.go
@@ -2,6 +2,8 @@ package network
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strings"
 	"time"
@@ -84,14 +86,15 @@ func resourcePublicIp() *pluginsdk.Resource {
 			"edge_zone": commonschema.EdgeZoneOptionalForceNew(),
 
 			"ip_version": {
-				Type:     pluginsdk.TypeString,
-				Optional: true,
-				Default:  string(network.IPVersionIPv4),
-				ForceNew: true,
+				Type:             pluginsdk.TypeString,
+				Optional:         true,
+				Default:          string(network.IPVersionIPv4),
+				ForceNew:         true,
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 				ValidateFunc: validation.StringInSlice([]string{
 					string(network.IPVersionIPv4),
 					string(network.IPVersionIPv6),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"sku": {
@@ -102,7 +105,7 @@ func resourcePublicIp() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(network.PublicIPAddressSkuNameBasic),
 					string(network.PublicIPAddressSkuNameStandard),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"sku_tier": {
diff --git b/internal/services/network/route_resource.go a/internal/services/network/route_resource.go
index a5f4272fd9..dce0b8f892 100644
--- b/internal/services/network/route_resource.go
+++ a/internal/services/network/route_resource.go
@@ -2,6 +2,8 @@ package network
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"time"
 
 	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
@@ -68,7 +70,8 @@ func resourceRoute() *pluginsdk.Resource {
 					string(network.RouteNextHopTypeInternet),
 					string(network.RouteNextHopTypeVirtualAppliance),
 					string(network.RouteNextHopTypeNone),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"next_hop_in_ip_address": {
diff --git b/internal/services/network/route_table_resource.go a/internal/services/network/route_table_resource.go
index 325d935601..8e391dd17a 100644
--- b/internal/services/network/route_table_resource.go
+++ a/internal/services/network/route_table_resource.go
@@ -2,6 +2,8 @@ package network
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"time"
 
@@ -81,7 +83,8 @@ func resourceRouteTable() *pluginsdk.Resource {
 								string(network.RouteNextHopTypeInternet),
 								string(network.RouteNextHopTypeVirtualAppliance),
 								string(network.RouteNextHopTypeNone),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"next_hop_in_ip_address": {
diff --git b/internal/services/network/virtual_network_gateway_connection_resource.go a/internal/services/network/virtual_network_gateway_connection_resource.go
index 9043491926..0ad999353e 100644
--- b/internal/services/network/virtual_network_gateway_connection_resource.go
+++ a/internal/services/network/virtual_network_gateway_connection_resource.go
@@ -2,6 +2,8 @@ package network
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"time"
 
@@ -58,7 +60,8 @@ func resourceVirtualNetworkGatewayConnection() *pluginsdk.Resource {
 					string(network.VirtualNetworkGatewayConnectionTypeExpressRoute),
 					string(network.VirtualNetworkGatewayConnectionTypeIPsec),
 					string(network.VirtualNetworkGatewayConnectionTypeVnet2Vnet),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"virtual_network_gateway_id": {
@@ -241,7 +244,7 @@ func resourceVirtualNetworkGatewayConnection() *pluginsdk.Resource {
 								string(network.DhGroupECP256),
 								string(network.DhGroupECP384),
 								string(network.DhGroupNone),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"ike_encryption": {
@@ -255,7 +258,7 @@ func resourceVirtualNetworkGatewayConnection() *pluginsdk.Resource {
 								string(network.IkeEncryptionDES3),
 								string(network.IkeEncryptionGCMAES128),
 								string(network.IkeEncryptionGCMAES256),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"ike_integrity": {
@@ -268,7 +271,7 @@ func resourceVirtualNetworkGatewayConnection() *pluginsdk.Resource {
 								string(network.IkeIntegritySHA1),
 								string(network.IkeIntegritySHA256),
 								string(network.IkeIntegritySHA384),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"ipsec_encryption": {
@@ -284,7 +287,7 @@ func resourceVirtualNetworkGatewayConnection() *pluginsdk.Resource {
 								string(network.IpsecEncryptionGCMAES192),
 								string(network.IpsecEncryptionGCMAES256),
 								string(network.IpsecEncryptionNone),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"ipsec_integrity": {
@@ -297,7 +300,7 @@ func resourceVirtualNetworkGatewayConnection() *pluginsdk.Resource {
 								string(network.IpsecIntegrityMD5),
 								string(network.IpsecIntegritySHA1),
 								string(network.IpsecIntegritySHA256),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"pfs_group": {
@@ -313,7 +316,7 @@ func resourceVirtualNetworkGatewayConnection() *pluginsdk.Resource {
 								string(network.PfsGroupPFS2048),
 								string(network.PfsGroupPFS24),
 								string(network.PfsGroupPFSMM),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"sa_datasize": {
diff --git b/internal/services/network/virtual_network_gateway_resource.go a/internal/services/network/virtual_network_gateway_resource.go
index fdfc5e5497..7ef3a52139 100644
--- b/internal/services/network/virtual_network_gateway_resource.go
+++ a/internal/services/network/virtual_network_gateway_resource.go
@@ -3,6 +3,7 @@ package network
 import (
 	"bytes"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -64,7 +65,7 @@ func resourceVirtualNetworkGatewaySchema() map[string]*pluginsdk.Schema {
 			ValidateFunc: validation.StringInSlice([]string{
 				string(network.VirtualNetworkGatewayTypeExpressRoute),
 				string(network.VirtualNetworkGatewayTypeVpn),
-			}, false),
+			}, features.CaseInsensitive()),
 		},
 
 		"vpn_type": {
@@ -75,7 +76,7 @@ func resourceVirtualNetworkGatewaySchema() map[string]*pluginsdk.Schema {
 			ValidateFunc: validation.StringInSlice([]string{
 				string(network.VpnTypeRouteBased),
 				string(network.VpnTypePolicyBased),
-			}, false),
+			}, features.CaseInsensitive()),
 		},
 
 		"edge_zone": commonschema.EdgeZoneOptionalForceNew(),
@@ -280,7 +281,8 @@ func resourceVirtualNetworkGatewaySchema() map[string]*pluginsdk.Schema {
 								string(network.VpnClientProtocolIkeV2),
 								string(network.VpnClientProtocolOpenVPN),
 								string(network.VpnClientProtocolSSTP),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 					},
 				},
diff --git b/internal/services/network/virtual_network_resource_test.go a/internal/services/network/virtual_network_resource_test.go
index 4490e5e362..b8df48bb47 100644
--- b/internal/services/network/virtual_network_resource_test.go
+++ a/internal/services/network/virtual_network_resource_test.go
@@ -330,6 +330,52 @@ resource "azurerm_virtual_network" "test" {
 }
 `, data.RandomInteger, data.Locations.Primary, data.RandomInteger)
 }
+func TestVirtualNetworkResource_tagCount(t *testing.T) {
+	data := acceptance.BuildTestData(t, "azurerm_virtual_network", "test")
+	r := VirtualNetworkResource{}
+
+	data.ResourceTest(t, r, []acceptance.TestStep{
+		{
+			Config: r.tagCount(data),
+			Check: acceptance.ComposeTestCheckFunc(
+				check.That(data.ResourceName).ExistsInAzure(r),
+			),
+		},
+		data.ImportStep(),
+	})
+}
+func (r VirtualNetworkResource) tagCount(data acceptance.TestData) string {
+	tags := ""
+	for i := 0; i < 50; i++ {
+		tags += fmt.Sprintf("t%d = \"v%d\"\n", i, i)
+	}
+
+	return fmt.Sprintf(`
+provider "azurerm" {
+  features {}
+}
+
+resource "azurerm_resource_group" "test" {
+  name     = "acctestRG-%d"
+  location = "%s"
+}
+
+resource "azurerm_virtual_network" "test" {
+  name                = "acctestvirtnet%d"
+  address_space       = ["10.0.0.0/16"]
+  location            = azurerm_resource_group.test.location
+  resource_group_name = azurerm_resource_group.test.name
+
+  subnet {
+    name           = "subnet1"
+    address_prefix = "10.0.1.0/24"
+  }
+  tags = {
+                                    %s
+  }
+}
+`, data.RandomInteger, data.Locations.Primary, data.RandomInteger, tags)
+}
 
 func (r VirtualNetworkResource) tagCount(data acceptance.TestData) string {
 	tags := ""
diff --git b/internal/services/notificationhub/notification_hub_namespace_resource.go a/internal/services/notificationhub/notification_hub_namespace_resource.go
index d43b6b6168..6ea1b70c9a 100644
--- b/internal/services/notificationhub/notification_hub_namespace_resource.go
+++ a/internal/services/notificationhub/notification_hub_namespace_resource.go
@@ -3,6 +3,7 @@ package notificationhub
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"strconv"
 	"time"
@@ -79,7 +80,7 @@ func resourceNotificationHubNamespace() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(namespaces.NamespaceTypeMessaging),
 					string(namespaces.NamespaceTypeNotificationHub),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"tags": commonschema.Tags(),
diff --git b/internal/services/policy/policy_definition_resource.go a/internal/services/policy/policy_definition_resource.go
index f1f4369d0d..48640eede5 100644
--- b/internal/services/policy/policy_definition_resource.go
+++ a/internal/services/policy/policy_definition_resource.go
@@ -3,6 +3,7 @@ package policy
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"strconv"
 	"time"
@@ -300,7 +301,7 @@ func resourceArmPolicyDefinitionSchema() map[string]*pluginsdk.Schema {
 				string(policy.TypeCustom),
 				string(policy.TypeNotSpecified),
 				string(policy.TypeStatic),
-			}, false),
+			}, features.CaseInsensitive()),
 		},
 
 		"mode": {
diff --git b/internal/services/portal/portal_dashboard_resource_test.go a/internal/services/portal/portal_dashboard_resource_test.go
index 6d5b5e838b..60fc24fa2d 100644
--- b/internal/services/portal/portal_dashboard_resource_test.go
+++ a/internal/services/portal/portal_dashboard_resource_test.go
@@ -72,6 +72,7 @@ func (PortalDashboardResource) Exists(ctx context.Context, clients *clients.Clie
 }
 
 func (PortalDashboardResource) basic(data acceptance.TestData) string {
+	resourceName := "azurerm_portal_dashboard"
 	return fmt.Sprintf(`
 provider "azurerm" {
   features {}
@@ -93,10 +94,12 @@ resource "azurerm_portal_dashboard" "test" {
 }
 DASH
 }
-`, data.RandomInteger, data.Locations.Primary)
+`, data.RandomInteger, data.Locations.Primary, resourceName)
 }
 
 func (PortalDashboardResource) complete(data acceptance.TestData) string {
+	resourceName := "azurerm_portal_dashboard"
+
 	return fmt.Sprintf(`
 provider "azurerm" {
   features {}
@@ -147,7 +150,7 @@ resource "azurerm_portal_dashboard" "test" {
 }
 DASH
 }
-`, data.RandomInteger, data.Locations.Primary)
+`, data.RandomInteger, data.Locations.Primary, resourceName)
 }
 
 func (PortalDashboardResource) hiddenTitle(data acceptance.TestData) string {
diff --git b/internal/services/postgres/parse/configuration.go a/internal/services/postgres/parse/configuration.go
new file mode 100644
index 0000000000..69dee5a0be
--- /dev/null
+++ a/internal/services/postgres/parse/configuration.go
@@ -0,0 +1,75 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+	"strings"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+type ConfigurationId struct {
+	SubscriptionId string
+	ResourceGroup  string
+	ServerName     string
+	Name           string
+}
+
+func NewConfigurationID(subscriptionId, resourceGroup, serverName, name string) ConfigurationId {
+	return ConfigurationId{
+		SubscriptionId: subscriptionId,
+		ResourceGroup:  resourceGroup,
+		ServerName:     serverName,
+		Name:           name,
+	}
+}
+
+func (id ConfigurationId) String() string {
+	segments := []string{
+		fmt.Sprintf("Name %q", id.Name),
+		fmt.Sprintf("Server Name %q", id.ServerName),
+		fmt.Sprintf("Resource Group %q", id.ResourceGroup),
+	}
+	segmentsStr := strings.Join(segments, " / ")
+	return fmt.Sprintf("%s: (%s)", "Configuration", segmentsStr)
+}
+
+func (id ConfigurationId) ID() string {
+	fmtString := "/subscriptions/%s/resourceGroups/%s/providers/Microsoft.DBforPostgreSQL/servers/%s/configurations/%s"
+	return fmt.Sprintf(fmtString, id.SubscriptionId, id.ResourceGroup, id.ServerName, id.Name)
+}
+
+// ConfigurationID parses a Configuration ID into an ConfigurationId struct
+func ConfigurationID(input string) (*ConfigurationId, error) {
+	id, err := resourceids.ParseAzureResourceID(input)
+	if err != nil {
+		return nil, err
+	}
+
+	resourceId := ConfigurationId{
+		SubscriptionId: id.SubscriptionID,
+		ResourceGroup:  id.ResourceGroup,
+	}
+
+	if resourceId.SubscriptionId == "" {
+		return nil, fmt.Errorf("ID was missing the 'subscriptions' element")
+	}
+
+	if resourceId.ResourceGroup == "" {
+		return nil, fmt.Errorf("ID was missing the 'resourceGroups' element")
+	}
+
+	if resourceId.ServerName, err = id.PopSegment("servers"); err != nil {
+		return nil, err
+	}
+	if resourceId.Name, err = id.PopSegment("configurations"); err != nil {
+		return nil, err
+	}
+
+	if err := id.ValidateNoEmptySegments(input); err != nil {
+		return nil, err
+	}
+
+	return &resourceId, nil
+}
diff --git b/internal/services/postgres/parse/configuration_test.go a/internal/services/postgres/parse/configuration_test.go
new file mode 100644
index 0000000000..cc5d864704
--- /dev/null
+++ a/internal/services/postgres/parse/configuration_test.go
@@ -0,0 +1,128 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"testing"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+var _ resourceids.Id = ConfigurationId{}
+
+func TestConfigurationIDFormatter(t *testing.T) {
+	actual := NewConfigurationID("12345678-1234-9876-4563-123456789012", "resGroup1", "server1", "configuration1").ID()
+	expected := "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/configurations/configuration1"
+	if actual != expected {
+		t.Fatalf("Expected %q but got %q", expected, actual)
+	}
+}
+
+func TestConfigurationID(t *testing.T) {
+	testData := []struct {
+		Input    string
+		Error    bool
+		Expected *ConfigurationId
+	}{
+
+		{
+			// empty
+			Input: "",
+			Error: true,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Error: true,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Error: true,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Error: true,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Error: true,
+		},
+
+		{
+			// missing ServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/",
+			Error: true,
+		},
+
+		{
+			// missing value for ServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/",
+			Error: true,
+		},
+
+		{
+			// missing Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/",
+			Error: true,
+		},
+
+		{
+			// missing value for Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/configurations/",
+			Error: true,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/configurations/configuration1",
+			Expected: &ConfigurationId{
+				SubscriptionId: "12345678-1234-9876-4563-123456789012",
+				ResourceGroup:  "resGroup1",
+				ServerName:     "server1",
+				Name:           "configuration1",
+			},
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.DBFORPOSTGRESQL/SERVERS/SERVER1/CONFIGURATIONS/CONFIGURATION1",
+			Error: true,
+		},
+	}
+
+	for _, v := range testData {
+		t.Logf("[DEBUG] Testing %q", v.Input)
+
+		actual, err := ConfigurationID(v.Input)
+		if err != nil {
+			if v.Error {
+				continue
+			}
+
+			t.Fatalf("Expect a value but got an error: %s", err)
+		}
+		if v.Error {
+			t.Fatal("Expect an error but didn't get one")
+		}
+
+		if actual.SubscriptionId != v.Expected.SubscriptionId {
+			t.Fatalf("Expected %q but got %q for SubscriptionId", v.Expected.SubscriptionId, actual.SubscriptionId)
+		}
+		if actual.ResourceGroup != v.Expected.ResourceGroup {
+			t.Fatalf("Expected %q but got %q for ResourceGroup", v.Expected.ResourceGroup, actual.ResourceGroup)
+		}
+		if actual.ServerName != v.Expected.ServerName {
+			t.Fatalf("Expected %q but got %q for ServerName", v.Expected.ServerName, actual.ServerName)
+		}
+		if actual.Name != v.Expected.Name {
+			t.Fatalf("Expected %q but got %q for Name", v.Expected.Name, actual.Name)
+		}
+	}
+}
diff --git b/internal/services/postgres/parse/database.go a/internal/services/postgres/parse/database.go
new file mode 100644
index 0000000000..33e2dbf57a
--- /dev/null
+++ a/internal/services/postgres/parse/database.go
@@ -0,0 +1,75 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+	"strings"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+type DatabaseId struct {
+	SubscriptionId string
+	ResourceGroup  string
+	ServerName     string
+	Name           string
+}
+
+func NewDatabaseID(subscriptionId, resourceGroup, serverName, name string) DatabaseId {
+	return DatabaseId{
+		SubscriptionId: subscriptionId,
+		ResourceGroup:  resourceGroup,
+		ServerName:     serverName,
+		Name:           name,
+	}
+}
+
+func (id DatabaseId) String() string {
+	segments := []string{
+		fmt.Sprintf("Name %q", id.Name),
+		fmt.Sprintf("Server Name %q", id.ServerName),
+		fmt.Sprintf("Resource Group %q", id.ResourceGroup),
+	}
+	segmentsStr := strings.Join(segments, " / ")
+	return fmt.Sprintf("%s: (%s)", "Database", segmentsStr)
+}
+
+func (id DatabaseId) ID() string {
+	fmtString := "/subscriptions/%s/resourceGroups/%s/providers/Microsoft.DBforPostgreSQL/servers/%s/databases/%s"
+	return fmt.Sprintf(fmtString, id.SubscriptionId, id.ResourceGroup, id.ServerName, id.Name)
+}
+
+// DatabaseID parses a Database ID into an DatabaseId struct
+func DatabaseID(input string) (*DatabaseId, error) {
+	id, err := resourceids.ParseAzureResourceID(input)
+	if err != nil {
+		return nil, err
+	}
+
+	resourceId := DatabaseId{
+		SubscriptionId: id.SubscriptionID,
+		ResourceGroup:  id.ResourceGroup,
+	}
+
+	if resourceId.SubscriptionId == "" {
+		return nil, fmt.Errorf("ID was missing the 'subscriptions' element")
+	}
+
+	if resourceId.ResourceGroup == "" {
+		return nil, fmt.Errorf("ID was missing the 'resourceGroups' element")
+	}
+
+	if resourceId.ServerName, err = id.PopSegment("servers"); err != nil {
+		return nil, err
+	}
+	if resourceId.Name, err = id.PopSegment("databases"); err != nil {
+		return nil, err
+	}
+
+	if err := id.ValidateNoEmptySegments(input); err != nil {
+		return nil, err
+	}
+
+	return &resourceId, nil
+}
diff --git b/internal/services/postgres/parse/database_test.go a/internal/services/postgres/parse/database_test.go
new file mode 100644
index 0000000000..944f54622b
--- /dev/null
+++ a/internal/services/postgres/parse/database_test.go
@@ -0,0 +1,128 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"testing"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+var _ resourceids.Id = DatabaseId{}
+
+func TestDatabaseIDFormatter(t *testing.T) {
+	actual := NewDatabaseID("12345678-1234-9876-4563-123456789012", "resGroup1", "server1", "database1").ID()
+	expected := "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/databases/database1"
+	if actual != expected {
+		t.Fatalf("Expected %q but got %q", expected, actual)
+	}
+}
+
+func TestDatabaseID(t *testing.T) {
+	testData := []struct {
+		Input    string
+		Error    bool
+		Expected *DatabaseId
+	}{
+
+		{
+			// empty
+			Input: "",
+			Error: true,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Error: true,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Error: true,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Error: true,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Error: true,
+		},
+
+		{
+			// missing ServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/",
+			Error: true,
+		},
+
+		{
+			// missing value for ServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/",
+			Error: true,
+		},
+
+		{
+			// missing Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/",
+			Error: true,
+		},
+
+		{
+			// missing value for Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/databases/",
+			Error: true,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/databases/database1",
+			Expected: &DatabaseId{
+				SubscriptionId: "12345678-1234-9876-4563-123456789012",
+				ResourceGroup:  "resGroup1",
+				ServerName:     "server1",
+				Name:           "database1",
+			},
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.DBFORPOSTGRESQL/SERVERS/SERVER1/DATABASES/DATABASE1",
+			Error: true,
+		},
+	}
+
+	for _, v := range testData {
+		t.Logf("[DEBUG] Testing %q", v.Input)
+
+		actual, err := DatabaseID(v.Input)
+		if err != nil {
+			if v.Error {
+				continue
+			}
+
+			t.Fatalf("Expect a value but got an error: %s", err)
+		}
+		if v.Error {
+			t.Fatal("Expect an error but didn't get one")
+		}
+
+		if actual.SubscriptionId != v.Expected.SubscriptionId {
+			t.Fatalf("Expected %q but got %q for SubscriptionId", v.Expected.SubscriptionId, actual.SubscriptionId)
+		}
+		if actual.ResourceGroup != v.Expected.ResourceGroup {
+			t.Fatalf("Expected %q but got %q for ResourceGroup", v.Expected.ResourceGroup, actual.ResourceGroup)
+		}
+		if actual.ServerName != v.Expected.ServerName {
+			t.Fatalf("Expected %q but got %q for ServerName", v.Expected.ServerName, actual.ServerName)
+		}
+		if actual.Name != v.Expected.Name {
+			t.Fatalf("Expected %q but got %q for Name", v.Expected.Name, actual.Name)
+		}
+	}
+}
diff --git b/internal/services/postgres/parse/firewall_rule.go a/internal/services/postgres/parse/firewall_rule.go
new file mode 100644
index 0000000000..d18754cb95
--- /dev/null
+++ a/internal/services/postgres/parse/firewall_rule.go
@@ -0,0 +1,75 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+	"strings"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+type FirewallRuleId struct {
+	SubscriptionId string
+	ResourceGroup  string
+	ServerName     string
+	Name           string
+}
+
+func NewFirewallRuleID(subscriptionId, resourceGroup, serverName, name string) FirewallRuleId {
+	return FirewallRuleId{
+		SubscriptionId: subscriptionId,
+		ResourceGroup:  resourceGroup,
+		ServerName:     serverName,
+		Name:           name,
+	}
+}
+
+func (id FirewallRuleId) String() string {
+	segments := []string{
+		fmt.Sprintf("Name %q", id.Name),
+		fmt.Sprintf("Server Name %q", id.ServerName),
+		fmt.Sprintf("Resource Group %q", id.ResourceGroup),
+	}
+	segmentsStr := strings.Join(segments, " / ")
+	return fmt.Sprintf("%s: (%s)", "Firewall Rule", segmentsStr)
+}
+
+func (id FirewallRuleId) ID() string {
+	fmtString := "/subscriptions/%s/resourceGroups/%s/providers/Microsoft.DBforPostgreSQL/servers/%s/firewallRules/%s"
+	return fmt.Sprintf(fmtString, id.SubscriptionId, id.ResourceGroup, id.ServerName, id.Name)
+}
+
+// FirewallRuleID parses a FirewallRule ID into an FirewallRuleId struct
+func FirewallRuleID(input string) (*FirewallRuleId, error) {
+	id, err := resourceids.ParseAzureResourceID(input)
+	if err != nil {
+		return nil, err
+	}
+
+	resourceId := FirewallRuleId{
+		SubscriptionId: id.SubscriptionID,
+		ResourceGroup:  id.ResourceGroup,
+	}
+
+	if resourceId.SubscriptionId == "" {
+		return nil, fmt.Errorf("ID was missing the 'subscriptions' element")
+	}
+
+	if resourceId.ResourceGroup == "" {
+		return nil, fmt.Errorf("ID was missing the 'resourceGroups' element")
+	}
+
+	if resourceId.ServerName, err = id.PopSegment("servers"); err != nil {
+		return nil, err
+	}
+	if resourceId.Name, err = id.PopSegment("firewallRules"); err != nil {
+		return nil, err
+	}
+
+	if err := id.ValidateNoEmptySegments(input); err != nil {
+		return nil, err
+	}
+
+	return &resourceId, nil
+}
diff --git b/internal/services/postgres/parse/firewall_rule_test.go a/internal/services/postgres/parse/firewall_rule_test.go
new file mode 100644
index 0000000000..9f8e0caf19
--- /dev/null
+++ a/internal/services/postgres/parse/firewall_rule_test.go
@@ -0,0 +1,128 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"testing"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+var _ resourceids.Id = FirewallRuleId{}
+
+func TestFirewallRuleIDFormatter(t *testing.T) {
+	actual := NewFirewallRuleID("12345678-1234-9876-4563-123456789012", "resGroup1", "server1", "firewallRule1").ID()
+	expected := "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/firewallRules/firewallRule1"
+	if actual != expected {
+		t.Fatalf("Expected %q but got %q", expected, actual)
+	}
+}
+
+func TestFirewallRuleID(t *testing.T) {
+	testData := []struct {
+		Input    string
+		Error    bool
+		Expected *FirewallRuleId
+	}{
+
+		{
+			// empty
+			Input: "",
+			Error: true,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Error: true,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Error: true,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Error: true,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Error: true,
+		},
+
+		{
+			// missing ServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/",
+			Error: true,
+		},
+
+		{
+			// missing value for ServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/",
+			Error: true,
+		},
+
+		{
+			// missing Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/",
+			Error: true,
+		},
+
+		{
+			// missing value for Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/firewallRules/",
+			Error: true,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/firewallRules/firewallRule1",
+			Expected: &FirewallRuleId{
+				SubscriptionId: "12345678-1234-9876-4563-123456789012",
+				ResourceGroup:  "resGroup1",
+				ServerName:     "server1",
+				Name:           "firewallRule1",
+			},
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.DBFORPOSTGRESQL/SERVERS/SERVER1/FIREWALLRULES/FIREWALLRULE1",
+			Error: true,
+		},
+	}
+
+	for _, v := range testData {
+		t.Logf("[DEBUG] Testing %q", v.Input)
+
+		actual, err := FirewallRuleID(v.Input)
+		if err != nil {
+			if v.Error {
+				continue
+			}
+
+			t.Fatalf("Expect a value but got an error: %s", err)
+		}
+		if v.Error {
+			t.Fatal("Expect an error but didn't get one")
+		}
+
+		if actual.SubscriptionId != v.Expected.SubscriptionId {
+			t.Fatalf("Expected %q but got %q for SubscriptionId", v.Expected.SubscriptionId, actual.SubscriptionId)
+		}
+		if actual.ResourceGroup != v.Expected.ResourceGroup {
+			t.Fatalf("Expected %q but got %q for ResourceGroup", v.Expected.ResourceGroup, actual.ResourceGroup)
+		}
+		if actual.ServerName != v.Expected.ServerName {
+			t.Fatalf("Expected %q but got %q for ServerName", v.Expected.ServerName, actual.ServerName)
+		}
+		if actual.Name != v.Expected.Name {
+			t.Fatalf("Expected %q but got %q for Name", v.Expected.Name, actual.Name)
+		}
+	}
+}
diff --git b/internal/services/postgres/parse/flexible_server.go a/internal/services/postgres/parse/flexible_server.go
new file mode 100644
index 0000000000..ae13a5c53a
--- /dev/null
+++ a/internal/services/postgres/parse/flexible_server.go
@@ -0,0 +1,69 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+	"strings"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+type FlexibleServerId struct {
+	SubscriptionId string
+	ResourceGroup  string
+	Name           string
+}
+
+func NewFlexibleServerID(subscriptionId, resourceGroup, name string) FlexibleServerId {
+	return FlexibleServerId{
+		SubscriptionId: subscriptionId,
+		ResourceGroup:  resourceGroup,
+		Name:           name,
+	}
+}
+
+func (id FlexibleServerId) String() string {
+	segments := []string{
+		fmt.Sprintf("Name %q", id.Name),
+		fmt.Sprintf("Resource Group %q", id.ResourceGroup),
+	}
+	segmentsStr := strings.Join(segments, " / ")
+	return fmt.Sprintf("%s: (%s)", "Flexible Server", segmentsStr)
+}
+
+func (id FlexibleServerId) ID() string {
+	fmtString := "/subscriptions/%s/resourceGroups/%s/providers/Microsoft.DBforPostgreSQL/flexibleServers/%s"
+	return fmt.Sprintf(fmtString, id.SubscriptionId, id.ResourceGroup, id.Name)
+}
+
+// FlexibleServerID parses a FlexibleServer ID into an FlexibleServerId struct
+func FlexibleServerID(input string) (*FlexibleServerId, error) {
+	id, err := resourceids.ParseAzureResourceID(input)
+	if err != nil {
+		return nil, err
+	}
+
+	resourceId := FlexibleServerId{
+		SubscriptionId: id.SubscriptionID,
+		ResourceGroup:  id.ResourceGroup,
+	}
+
+	if resourceId.SubscriptionId == "" {
+		return nil, fmt.Errorf("ID was missing the 'subscriptions' element")
+	}
+
+	if resourceId.ResourceGroup == "" {
+		return nil, fmt.Errorf("ID was missing the 'resourceGroups' element")
+	}
+
+	if resourceId.Name, err = id.PopSegment("flexibleServers"); err != nil {
+		return nil, err
+	}
+
+	if err := id.ValidateNoEmptySegments(input); err != nil {
+		return nil, err
+	}
+
+	return &resourceId, nil
+}
diff --git b/internal/services/postgres/parse/flexible_server_configuration.go a/internal/services/postgres/parse/flexible_server_configuration.go
new file mode 100644
index 0000000000..8667dc68fa
--- /dev/null
+++ a/internal/services/postgres/parse/flexible_server_configuration.go
@@ -0,0 +1,75 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+	"strings"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+type FlexibleServerConfigurationId struct {
+	SubscriptionId     string
+	ResourceGroup      string
+	FlexibleServerName string
+	ConfigurationName  string
+}
+
+func NewFlexibleServerConfigurationID(subscriptionId, resourceGroup, flexibleServerName, configurationName string) FlexibleServerConfigurationId {
+	return FlexibleServerConfigurationId{
+		SubscriptionId:     subscriptionId,
+		ResourceGroup:      resourceGroup,
+		FlexibleServerName: flexibleServerName,
+		ConfigurationName:  configurationName,
+	}
+}
+
+func (id FlexibleServerConfigurationId) String() string {
+	segments := []string{
+		fmt.Sprintf("Configuration Name %q", id.ConfigurationName),
+		fmt.Sprintf("Flexible Server Name %q", id.FlexibleServerName),
+		fmt.Sprintf("Resource Group %q", id.ResourceGroup),
+	}
+	segmentsStr := strings.Join(segments, " / ")
+	return fmt.Sprintf("%s: (%s)", "Flexible Server Configuration", segmentsStr)
+}
+
+func (id FlexibleServerConfigurationId) ID() string {
+	fmtString := "/subscriptions/%s/resourceGroups/%s/providers/Microsoft.DBforPostgreSQL/flexibleServers/%s/configurations/%s"
+	return fmt.Sprintf(fmtString, id.SubscriptionId, id.ResourceGroup, id.FlexibleServerName, id.ConfigurationName)
+}
+
+// FlexibleServerConfigurationID parses a FlexibleServerConfiguration ID into an FlexibleServerConfigurationId struct
+func FlexibleServerConfigurationID(input string) (*FlexibleServerConfigurationId, error) {
+	id, err := resourceids.ParseAzureResourceID(input)
+	if err != nil {
+		return nil, err
+	}
+
+	resourceId := FlexibleServerConfigurationId{
+		SubscriptionId: id.SubscriptionID,
+		ResourceGroup:  id.ResourceGroup,
+	}
+
+	if resourceId.SubscriptionId == "" {
+		return nil, fmt.Errorf("ID was missing the 'subscriptions' element")
+	}
+
+	if resourceId.ResourceGroup == "" {
+		return nil, fmt.Errorf("ID was missing the 'resourceGroups' element")
+	}
+
+	if resourceId.FlexibleServerName, err = id.PopSegment("flexibleServers"); err != nil {
+		return nil, err
+	}
+	if resourceId.ConfigurationName, err = id.PopSegment("configurations"); err != nil {
+		return nil, err
+	}
+
+	if err := id.ValidateNoEmptySegments(input); err != nil {
+		return nil, err
+	}
+
+	return &resourceId, nil
+}
diff --git b/internal/services/postgres/parse/flexible_server_configuration_test.go a/internal/services/postgres/parse/flexible_server_configuration_test.go
new file mode 100644
index 0000000000..bd0adcadb0
--- /dev/null
+++ a/internal/services/postgres/parse/flexible_server_configuration_test.go
@@ -0,0 +1,128 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"testing"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+var _ resourceids.Id = FlexibleServerConfigurationId{}
+
+func TestFlexibleServerConfigurationIDFormatter(t *testing.T) {
+	actual := NewFlexibleServerConfigurationID("12345678-1234-9876-4563-123456789012", "resGroup1", "flexibleServer1", "configuration1").ID()
+	expected := "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/flexibleServer1/configurations/configuration1"
+	if actual != expected {
+		t.Fatalf("Expected %q but got %q", expected, actual)
+	}
+}
+
+func TestFlexibleServerConfigurationID(t *testing.T) {
+	testData := []struct {
+		Input    string
+		Error    bool
+		Expected *FlexibleServerConfigurationId
+	}{
+
+		{
+			// empty
+			Input: "",
+			Error: true,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Error: true,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Error: true,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Error: true,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Error: true,
+		},
+
+		{
+			// missing FlexibleServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/",
+			Error: true,
+		},
+
+		{
+			// missing value for FlexibleServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/",
+			Error: true,
+		},
+
+		{
+			// missing ConfigurationName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/flexibleServer1/",
+			Error: true,
+		},
+
+		{
+			// missing value for ConfigurationName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/flexibleServer1/configurations/",
+			Error: true,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/flexibleServer1/configurations/configuration1",
+			Expected: &FlexibleServerConfigurationId{
+				SubscriptionId:     "12345678-1234-9876-4563-123456789012",
+				ResourceGroup:      "resGroup1",
+				FlexibleServerName: "flexibleServer1",
+				ConfigurationName:  "configuration1",
+			},
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.DBFORPOSTGRESQL/FLEXIBLESERVERS/FLEXIBLESERVER1/CONFIGURATIONS/CONFIGURATION1",
+			Error: true,
+		},
+	}
+
+	for _, v := range testData {
+		t.Logf("[DEBUG] Testing %q", v.Input)
+
+		actual, err := FlexibleServerConfigurationID(v.Input)
+		if err != nil {
+			if v.Error {
+				continue
+			}
+
+			t.Fatalf("Expect a value but got an error: %s", err)
+		}
+		if v.Error {
+			t.Fatal("Expect an error but didn't get one")
+		}
+
+		if actual.SubscriptionId != v.Expected.SubscriptionId {
+			t.Fatalf("Expected %q but got %q for SubscriptionId", v.Expected.SubscriptionId, actual.SubscriptionId)
+		}
+		if actual.ResourceGroup != v.Expected.ResourceGroup {
+			t.Fatalf("Expected %q but got %q for ResourceGroup", v.Expected.ResourceGroup, actual.ResourceGroup)
+		}
+		if actual.FlexibleServerName != v.Expected.FlexibleServerName {
+			t.Fatalf("Expected %q but got %q for FlexibleServerName", v.Expected.FlexibleServerName, actual.FlexibleServerName)
+		}
+		if actual.ConfigurationName != v.Expected.ConfigurationName {
+			t.Fatalf("Expected %q but got %q for ConfigurationName", v.Expected.ConfigurationName, actual.ConfigurationName)
+		}
+	}
+}
diff --git b/internal/services/postgres/parse/flexible_server_database.go a/internal/services/postgres/parse/flexible_server_database.go
new file mode 100644
index 0000000000..3551579578
--- /dev/null
+++ a/internal/services/postgres/parse/flexible_server_database.go
@@ -0,0 +1,75 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+	"strings"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+type FlexibleServerDatabaseId struct {
+	SubscriptionId     string
+	ResourceGroup      string
+	FlexibleServerName string
+	DatabaseName       string
+}
+
+func NewFlexibleServerDatabaseID(subscriptionId, resourceGroup, flexibleServerName, databaseName string) FlexibleServerDatabaseId {
+	return FlexibleServerDatabaseId{
+		SubscriptionId:     subscriptionId,
+		ResourceGroup:      resourceGroup,
+		FlexibleServerName: flexibleServerName,
+		DatabaseName:       databaseName,
+	}
+}
+
+func (id FlexibleServerDatabaseId) String() string {
+	segments := []string{
+		fmt.Sprintf("Database Name %q", id.DatabaseName),
+		fmt.Sprintf("Flexible Server Name %q", id.FlexibleServerName),
+		fmt.Sprintf("Resource Group %q", id.ResourceGroup),
+	}
+	segmentsStr := strings.Join(segments, " / ")
+	return fmt.Sprintf("%s: (%s)", "Flexible Server Database", segmentsStr)
+}
+
+func (id FlexibleServerDatabaseId) ID() string {
+	fmtString := "/subscriptions/%s/resourceGroups/%s/providers/Microsoft.DBforPostgreSQL/flexibleServers/%s/databases/%s"
+	return fmt.Sprintf(fmtString, id.SubscriptionId, id.ResourceGroup, id.FlexibleServerName, id.DatabaseName)
+}
+
+// FlexibleServerDatabaseID parses a FlexibleServerDatabase ID into an FlexibleServerDatabaseId struct
+func FlexibleServerDatabaseID(input string) (*FlexibleServerDatabaseId, error) {
+	id, err := resourceids.ParseAzureResourceID(input)
+	if err != nil {
+		return nil, err
+	}
+
+	resourceId := FlexibleServerDatabaseId{
+		SubscriptionId: id.SubscriptionID,
+		ResourceGroup:  id.ResourceGroup,
+	}
+
+	if resourceId.SubscriptionId == "" {
+		return nil, fmt.Errorf("ID was missing the 'subscriptions' element")
+	}
+
+	if resourceId.ResourceGroup == "" {
+		return nil, fmt.Errorf("ID was missing the 'resourceGroups' element")
+	}
+
+	if resourceId.FlexibleServerName, err = id.PopSegment("flexibleServers"); err != nil {
+		return nil, err
+	}
+	if resourceId.DatabaseName, err = id.PopSegment("databases"); err != nil {
+		return nil, err
+	}
+
+	if err := id.ValidateNoEmptySegments(input); err != nil {
+		return nil, err
+	}
+
+	return &resourceId, nil
+}
diff --git b/internal/services/postgres/parse/flexible_server_database_test.go a/internal/services/postgres/parse/flexible_server_database_test.go
new file mode 100644
index 0000000000..ca6f4d64eb
--- /dev/null
+++ a/internal/services/postgres/parse/flexible_server_database_test.go
@@ -0,0 +1,128 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"testing"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+var _ resourceids.Id = FlexibleServerDatabaseId{}
+
+func TestFlexibleServerDatabaseIDFormatter(t *testing.T) {
+	actual := NewFlexibleServerDatabaseID("12345678-1234-9876-4563-123456789012", "resGroup1", "flexibleServer1", "database1").ID()
+	expected := "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/flexibleServer1/databases/database1"
+	if actual != expected {
+		t.Fatalf("Expected %q but got %q", expected, actual)
+	}
+}
+
+func TestFlexibleServerDatabaseID(t *testing.T) {
+	testData := []struct {
+		Input    string
+		Error    bool
+		Expected *FlexibleServerDatabaseId
+	}{
+
+		{
+			// empty
+			Input: "",
+			Error: true,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Error: true,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Error: true,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Error: true,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Error: true,
+		},
+
+		{
+			// missing FlexibleServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/",
+			Error: true,
+		},
+
+		{
+			// missing value for FlexibleServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/",
+			Error: true,
+		},
+
+		{
+			// missing DatabaseName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/flexibleServer1/",
+			Error: true,
+		},
+
+		{
+			// missing value for DatabaseName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/flexibleServer1/databases/",
+			Error: true,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/flexibleServer1/databases/database1",
+			Expected: &FlexibleServerDatabaseId{
+				SubscriptionId:     "12345678-1234-9876-4563-123456789012",
+				ResourceGroup:      "resGroup1",
+				FlexibleServerName: "flexibleServer1",
+				DatabaseName:       "database1",
+			},
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.DBFORPOSTGRESQL/FLEXIBLESERVERS/FLEXIBLESERVER1/DATABASES/DATABASE1",
+			Error: true,
+		},
+	}
+
+	for _, v := range testData {
+		t.Logf("[DEBUG] Testing %q", v.Input)
+
+		actual, err := FlexibleServerDatabaseID(v.Input)
+		if err != nil {
+			if v.Error {
+				continue
+			}
+
+			t.Fatalf("Expect a value but got an error: %s", err)
+		}
+		if v.Error {
+			t.Fatal("Expect an error but didn't get one")
+		}
+
+		if actual.SubscriptionId != v.Expected.SubscriptionId {
+			t.Fatalf("Expected %q but got %q for SubscriptionId", v.Expected.SubscriptionId, actual.SubscriptionId)
+		}
+		if actual.ResourceGroup != v.Expected.ResourceGroup {
+			t.Fatalf("Expected %q but got %q for ResourceGroup", v.Expected.ResourceGroup, actual.ResourceGroup)
+		}
+		if actual.FlexibleServerName != v.Expected.FlexibleServerName {
+			t.Fatalf("Expected %q but got %q for FlexibleServerName", v.Expected.FlexibleServerName, actual.FlexibleServerName)
+		}
+		if actual.DatabaseName != v.Expected.DatabaseName {
+			t.Fatalf("Expected %q but got %q for DatabaseName", v.Expected.DatabaseName, actual.DatabaseName)
+		}
+	}
+}
diff --git b/internal/services/postgres/parse/flexible_server_firewall_rule.go a/internal/services/postgres/parse/flexible_server_firewall_rule.go
new file mode 100644
index 0000000000..7a3d935c4c
--- /dev/null
+++ a/internal/services/postgres/parse/flexible_server_firewall_rule.go
@@ -0,0 +1,75 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+	"strings"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+type FlexibleServerFirewallRuleId struct {
+	SubscriptionId     string
+	ResourceGroup      string
+	FlexibleServerName string
+	FirewallRuleName   string
+}
+
+func NewFlexibleServerFirewallRuleID(subscriptionId, resourceGroup, flexibleServerName, firewallRuleName string) FlexibleServerFirewallRuleId {
+	return FlexibleServerFirewallRuleId{
+		SubscriptionId:     subscriptionId,
+		ResourceGroup:      resourceGroup,
+		FlexibleServerName: flexibleServerName,
+		FirewallRuleName:   firewallRuleName,
+	}
+}
+
+func (id FlexibleServerFirewallRuleId) String() string {
+	segments := []string{
+		fmt.Sprintf("Firewall Rule Name %q", id.FirewallRuleName),
+		fmt.Sprintf("Flexible Server Name %q", id.FlexibleServerName),
+		fmt.Sprintf("Resource Group %q", id.ResourceGroup),
+	}
+	segmentsStr := strings.Join(segments, " / ")
+	return fmt.Sprintf("%s: (%s)", "Flexible Server Firewall Rule", segmentsStr)
+}
+
+func (id FlexibleServerFirewallRuleId) ID() string {
+	fmtString := "/subscriptions/%s/resourceGroups/%s/providers/Microsoft.DBforPostgreSQL/flexibleServers/%s/firewallRules/%s"
+	return fmt.Sprintf(fmtString, id.SubscriptionId, id.ResourceGroup, id.FlexibleServerName, id.FirewallRuleName)
+}
+
+// FlexibleServerFirewallRuleID parses a FlexibleServerFirewallRule ID into an FlexibleServerFirewallRuleId struct
+func FlexibleServerFirewallRuleID(input string) (*FlexibleServerFirewallRuleId, error) {
+	id, err := resourceids.ParseAzureResourceID(input)
+	if err != nil {
+		return nil, err
+	}
+
+	resourceId := FlexibleServerFirewallRuleId{
+		SubscriptionId: id.SubscriptionID,
+		ResourceGroup:  id.ResourceGroup,
+	}
+
+	if resourceId.SubscriptionId == "" {
+		return nil, fmt.Errorf("ID was missing the 'subscriptions' element")
+	}
+
+	if resourceId.ResourceGroup == "" {
+		return nil, fmt.Errorf("ID was missing the 'resourceGroups' element")
+	}
+
+	if resourceId.FlexibleServerName, err = id.PopSegment("flexibleServers"); err != nil {
+		return nil, err
+	}
+	if resourceId.FirewallRuleName, err = id.PopSegment("firewallRules"); err != nil {
+		return nil, err
+	}
+
+	if err := id.ValidateNoEmptySegments(input); err != nil {
+		return nil, err
+	}
+
+	return &resourceId, nil
+}
diff --git b/internal/services/postgres/parse/flexible_server_firewall_rule_test.go a/internal/services/postgres/parse/flexible_server_firewall_rule_test.go
new file mode 100644
index 0000000000..0f938c5b30
--- /dev/null
+++ a/internal/services/postgres/parse/flexible_server_firewall_rule_test.go
@@ -0,0 +1,128 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"testing"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+var _ resourceids.Id = FlexibleServerFirewallRuleId{}
+
+func TestFlexibleServerFirewallRuleIDFormatter(t *testing.T) {
+	actual := NewFlexibleServerFirewallRuleID("12345678-1234-9876-4563-123456789012", "resGroup1", "flexibleServer1", "firewallRule1").ID()
+	expected := "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/flexibleServer1/firewallRules/firewallRule1"
+	if actual != expected {
+		t.Fatalf("Expected %q but got %q", expected, actual)
+	}
+}
+
+func TestFlexibleServerFirewallRuleID(t *testing.T) {
+	testData := []struct {
+		Input    string
+		Error    bool
+		Expected *FlexibleServerFirewallRuleId
+	}{
+
+		{
+			// empty
+			Input: "",
+			Error: true,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Error: true,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Error: true,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Error: true,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Error: true,
+		},
+
+		{
+			// missing FlexibleServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/",
+			Error: true,
+		},
+
+		{
+			// missing value for FlexibleServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/",
+			Error: true,
+		},
+
+		{
+			// missing FirewallRuleName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/flexibleServer1/",
+			Error: true,
+		},
+
+		{
+			// missing value for FirewallRuleName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/flexibleServer1/firewallRules/",
+			Error: true,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/flexibleServer1/firewallRules/firewallRule1",
+			Expected: &FlexibleServerFirewallRuleId{
+				SubscriptionId:     "12345678-1234-9876-4563-123456789012",
+				ResourceGroup:      "resGroup1",
+				FlexibleServerName: "flexibleServer1",
+				FirewallRuleName:   "firewallRule1",
+			},
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.DBFORPOSTGRESQL/FLEXIBLESERVERS/FLEXIBLESERVER1/FIREWALLRULES/FIREWALLRULE1",
+			Error: true,
+		},
+	}
+
+	for _, v := range testData {
+		t.Logf("[DEBUG] Testing %q", v.Input)
+
+		actual, err := FlexibleServerFirewallRuleID(v.Input)
+		if err != nil {
+			if v.Error {
+				continue
+			}
+
+			t.Fatalf("Expect a value but got an error: %s", err)
+		}
+		if v.Error {
+			t.Fatal("Expect an error but didn't get one")
+		}
+
+		if actual.SubscriptionId != v.Expected.SubscriptionId {
+			t.Fatalf("Expected %q but got %q for SubscriptionId", v.Expected.SubscriptionId, actual.SubscriptionId)
+		}
+		if actual.ResourceGroup != v.Expected.ResourceGroup {
+			t.Fatalf("Expected %q but got %q for ResourceGroup", v.Expected.ResourceGroup, actual.ResourceGroup)
+		}
+		if actual.FlexibleServerName != v.Expected.FlexibleServerName {
+			t.Fatalf("Expected %q but got %q for FlexibleServerName", v.Expected.FlexibleServerName, actual.FlexibleServerName)
+		}
+		if actual.FirewallRuleName != v.Expected.FirewallRuleName {
+			t.Fatalf("Expected %q but got %q for FirewallRuleName", v.Expected.FirewallRuleName, actual.FirewallRuleName)
+		}
+	}
+}
diff --git b/internal/services/postgres/parse/flexible_server_test.go a/internal/services/postgres/parse/flexible_server_test.go
new file mode 100644
index 0000000000..9902bf014f
--- /dev/null
+++ a/internal/services/postgres/parse/flexible_server_test.go
@@ -0,0 +1,112 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"testing"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+var _ resourceids.Id = FlexibleServerId{}
+
+func TestFlexibleServerIDFormatter(t *testing.T) {
+	actual := NewFlexibleServerID("12345678-1234-9876-4563-123456789012", "resGroup1", "flexibleServer1").ID()
+	expected := "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/flexibleServer1"
+	if actual != expected {
+		t.Fatalf("Expected %q but got %q", expected, actual)
+	}
+}
+
+func TestFlexibleServerID(t *testing.T) {
+	testData := []struct {
+		Input    string
+		Error    bool
+		Expected *FlexibleServerId
+	}{
+
+		{
+			// empty
+			Input: "",
+			Error: true,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Error: true,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Error: true,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Error: true,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Error: true,
+		},
+
+		{
+			// missing Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/",
+			Error: true,
+		},
+
+		{
+			// missing value for Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/",
+			Error: true,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/flexibleServer1",
+			Expected: &FlexibleServerId{
+				SubscriptionId: "12345678-1234-9876-4563-123456789012",
+				ResourceGroup:  "resGroup1",
+				Name:           "flexibleServer1",
+			},
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.DBFORPOSTGRESQL/FLEXIBLESERVERS/FLEXIBLESERVER1",
+			Error: true,
+		},
+	}
+
+	for _, v := range testData {
+		t.Logf("[DEBUG] Testing %q", v.Input)
+
+		actual, err := FlexibleServerID(v.Input)
+		if err != nil {
+			if v.Error {
+				continue
+			}
+
+			t.Fatalf("Expect a value but got an error: %s", err)
+		}
+		if v.Error {
+			t.Fatal("Expect an error but didn't get one")
+		}
+
+		if actual.SubscriptionId != v.Expected.SubscriptionId {
+			t.Fatalf("Expected %q but got %q for SubscriptionId", v.Expected.SubscriptionId, actual.SubscriptionId)
+		}
+		if actual.ResourceGroup != v.Expected.ResourceGroup {
+			t.Fatalf("Expected %q but got %q for ResourceGroup", v.Expected.ResourceGroup, actual.ResourceGroup)
+		}
+		if actual.Name != v.Expected.Name {
+			t.Fatalf("Expected %q but got %q for Name", v.Expected.Name, actual.Name)
+		}
+	}
+}
diff --git b/internal/services/postgres/parse/server.go a/internal/services/postgres/parse/server.go
new file mode 100644
index 0000000000..17dc8a9e70
--- /dev/null
+++ a/internal/services/postgres/parse/server.go
@@ -0,0 +1,69 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+	"strings"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+type ServerId struct {
+	SubscriptionId string
+	ResourceGroup  string
+	Name           string
+}
+
+func NewServerID(subscriptionId, resourceGroup, name string) ServerId {
+	return ServerId{
+		SubscriptionId: subscriptionId,
+		ResourceGroup:  resourceGroup,
+		Name:           name,
+	}
+}
+
+func (id ServerId) String() string {
+	segments := []string{
+		fmt.Sprintf("Name %q", id.Name),
+		fmt.Sprintf("Resource Group %q", id.ResourceGroup),
+	}
+	segmentsStr := strings.Join(segments, " / ")
+	return fmt.Sprintf("%s: (%s)", "Server", segmentsStr)
+}
+
+func (id ServerId) ID() string {
+	fmtString := "/subscriptions/%s/resourceGroups/%s/providers/Microsoft.DBforPostgreSQL/servers/%s"
+	return fmt.Sprintf(fmtString, id.SubscriptionId, id.ResourceGroup, id.Name)
+}
+
+// ServerID parses a Server ID into an ServerId struct
+func ServerID(input string) (*ServerId, error) {
+	id, err := resourceids.ParseAzureResourceID(input)
+	if err != nil {
+		return nil, err
+	}
+
+	resourceId := ServerId{
+		SubscriptionId: id.SubscriptionID,
+		ResourceGroup:  id.ResourceGroup,
+	}
+
+	if resourceId.SubscriptionId == "" {
+		return nil, fmt.Errorf("ID was missing the 'subscriptions' element")
+	}
+
+	if resourceId.ResourceGroup == "" {
+		return nil, fmt.Errorf("ID was missing the 'resourceGroups' element")
+	}
+
+	if resourceId.Name, err = id.PopSegment("servers"); err != nil {
+		return nil, err
+	}
+
+	if err := id.ValidateNoEmptySegments(input); err != nil {
+		return nil, err
+	}
+
+	return &resourceId, nil
+}
diff --git b/internal/services/postgres/parse/server_key.go a/internal/services/postgres/parse/server_key.go
new file mode 100644
index 0000000000..31da5fcb0e
--- /dev/null
+++ a/internal/services/postgres/parse/server_key.go
@@ -0,0 +1,75 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+	"strings"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+type ServerKeyId struct {
+	SubscriptionId string
+	ResourceGroup  string
+	ServerName     string
+	KeyName        string
+}
+
+func NewServerKeyID(subscriptionId, resourceGroup, serverName, keyName string) ServerKeyId {
+	return ServerKeyId{
+		SubscriptionId: subscriptionId,
+		ResourceGroup:  resourceGroup,
+		ServerName:     serverName,
+		KeyName:        keyName,
+	}
+}
+
+func (id ServerKeyId) String() string {
+	segments := []string{
+		fmt.Sprintf("Key Name %q", id.KeyName),
+		fmt.Sprintf("Server Name %q", id.ServerName),
+		fmt.Sprintf("Resource Group %q", id.ResourceGroup),
+	}
+	segmentsStr := strings.Join(segments, " / ")
+	return fmt.Sprintf("%s: (%s)", "Server Key", segmentsStr)
+}
+
+func (id ServerKeyId) ID() string {
+	fmtString := "/subscriptions/%s/resourceGroups/%s/providers/Microsoft.DBforPostgreSQL/servers/%s/keys/%s"
+	return fmt.Sprintf(fmtString, id.SubscriptionId, id.ResourceGroup, id.ServerName, id.KeyName)
+}
+
+// ServerKeyID parses a ServerKey ID into an ServerKeyId struct
+func ServerKeyID(input string) (*ServerKeyId, error) {
+	id, err := resourceids.ParseAzureResourceID(input)
+	if err != nil {
+		return nil, err
+	}
+
+	resourceId := ServerKeyId{
+		SubscriptionId: id.SubscriptionID,
+		ResourceGroup:  id.ResourceGroup,
+	}
+
+	if resourceId.SubscriptionId == "" {
+		return nil, fmt.Errorf("ID was missing the 'subscriptions' element")
+	}
+
+	if resourceId.ResourceGroup == "" {
+		return nil, fmt.Errorf("ID was missing the 'resourceGroups' element")
+	}
+
+	if resourceId.ServerName, err = id.PopSegment("servers"); err != nil {
+		return nil, err
+	}
+	if resourceId.KeyName, err = id.PopSegment("keys"); err != nil {
+		return nil, err
+	}
+
+	if err := id.ValidateNoEmptySegments(input); err != nil {
+		return nil, err
+	}
+
+	return &resourceId, nil
+}
diff --git b/internal/services/postgres/parse/server_key_test.go a/internal/services/postgres/parse/server_key_test.go
new file mode 100644
index 0000000000..4e4a93c469
--- /dev/null
+++ a/internal/services/postgres/parse/server_key_test.go
@@ -0,0 +1,128 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"testing"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+var _ resourceids.Id = ServerKeyId{}
+
+func TestServerKeyIDFormatter(t *testing.T) {
+	actual := NewServerKeyID("12345678-1234-9876-4563-123456789012", "resGroup1", "server1", "key1").ID()
+	expected := "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/keys/key1"
+	if actual != expected {
+		t.Fatalf("Expected %q but got %q", expected, actual)
+	}
+}
+
+func TestServerKeyID(t *testing.T) {
+	testData := []struct {
+		Input    string
+		Error    bool
+		Expected *ServerKeyId
+	}{
+
+		{
+			// empty
+			Input: "",
+			Error: true,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Error: true,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Error: true,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Error: true,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Error: true,
+		},
+
+		{
+			// missing ServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/",
+			Error: true,
+		},
+
+		{
+			// missing value for ServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/",
+			Error: true,
+		},
+
+		{
+			// missing KeyName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/",
+			Error: true,
+		},
+
+		{
+			// missing value for KeyName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/keys/",
+			Error: true,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/keys/key1",
+			Expected: &ServerKeyId{
+				SubscriptionId: "12345678-1234-9876-4563-123456789012",
+				ResourceGroup:  "resGroup1",
+				ServerName:     "server1",
+				KeyName:        "key1",
+			},
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.DBFORPOSTGRESQL/SERVERS/SERVER1/KEYS/KEY1",
+			Error: true,
+		},
+	}
+
+	for _, v := range testData {
+		t.Logf("[DEBUG] Testing %q", v.Input)
+
+		actual, err := ServerKeyID(v.Input)
+		if err != nil {
+			if v.Error {
+				continue
+			}
+
+			t.Fatalf("Expect a value but got an error: %s", err)
+		}
+		if v.Error {
+			t.Fatal("Expect an error but didn't get one")
+		}
+
+		if actual.SubscriptionId != v.Expected.SubscriptionId {
+			t.Fatalf("Expected %q but got %q for SubscriptionId", v.Expected.SubscriptionId, actual.SubscriptionId)
+		}
+		if actual.ResourceGroup != v.Expected.ResourceGroup {
+			t.Fatalf("Expected %q but got %q for ResourceGroup", v.Expected.ResourceGroup, actual.ResourceGroup)
+		}
+		if actual.ServerName != v.Expected.ServerName {
+			t.Fatalf("Expected %q but got %q for ServerName", v.Expected.ServerName, actual.ServerName)
+		}
+		if actual.KeyName != v.Expected.KeyName {
+			t.Fatalf("Expected %q but got %q for KeyName", v.Expected.KeyName, actual.KeyName)
+		}
+	}
+}
diff --git b/internal/services/postgres/parse/server_test.go a/internal/services/postgres/parse/server_test.go
new file mode 100644
index 0000000000..7b13b5a049
--- /dev/null
+++ a/internal/services/postgres/parse/server_test.go
@@ -0,0 +1,112 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"testing"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+var _ resourceids.Id = ServerId{}
+
+func TestServerIDFormatter(t *testing.T) {
+	actual := NewServerID("12345678-1234-9876-4563-123456789012", "resGroup1", "server1").ID()
+	expected := "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1"
+	if actual != expected {
+		t.Fatalf("Expected %q but got %q", expected, actual)
+	}
+}
+
+func TestServerID(t *testing.T) {
+	testData := []struct {
+		Input    string
+		Error    bool
+		Expected *ServerId
+	}{
+
+		{
+			// empty
+			Input: "",
+			Error: true,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Error: true,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Error: true,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Error: true,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Error: true,
+		},
+
+		{
+			// missing Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/",
+			Error: true,
+		},
+
+		{
+			// missing value for Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/",
+			Error: true,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1",
+			Expected: &ServerId{
+				SubscriptionId: "12345678-1234-9876-4563-123456789012",
+				ResourceGroup:  "resGroup1",
+				Name:           "server1",
+			},
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.DBFORPOSTGRESQL/SERVERS/SERVER1",
+			Error: true,
+		},
+	}
+
+	for _, v := range testData {
+		t.Logf("[DEBUG] Testing %q", v.Input)
+
+		actual, err := ServerID(v.Input)
+		if err != nil {
+			if v.Error {
+				continue
+			}
+
+			t.Fatalf("Expect a value but got an error: %s", err)
+		}
+		if v.Error {
+			t.Fatal("Expect an error but didn't get one")
+		}
+
+		if actual.SubscriptionId != v.Expected.SubscriptionId {
+			t.Fatalf("Expected %q but got %q for SubscriptionId", v.Expected.SubscriptionId, actual.SubscriptionId)
+		}
+		if actual.ResourceGroup != v.Expected.ResourceGroup {
+			t.Fatalf("Expected %q but got %q for ResourceGroup", v.Expected.ResourceGroup, actual.ResourceGroup)
+		}
+		if actual.Name != v.Expected.Name {
+			t.Fatalf("Expected %q but got %q for Name", v.Expected.Name, actual.Name)
+		}
+	}
+}
diff --git b/internal/services/postgres/parse/virtual_network_rule.go a/internal/services/postgres/parse/virtual_network_rule.go
new file mode 100644
index 0000000000..f080046b23
--- /dev/null
+++ a/internal/services/postgres/parse/virtual_network_rule.go
@@ -0,0 +1,75 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+	"strings"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+type VirtualNetworkRuleId struct {
+	SubscriptionId string
+	ResourceGroup  string
+	ServerName     string
+	Name           string
+}
+
+func NewVirtualNetworkRuleID(subscriptionId, resourceGroup, serverName, name string) VirtualNetworkRuleId {
+	return VirtualNetworkRuleId{
+		SubscriptionId: subscriptionId,
+		ResourceGroup:  resourceGroup,
+		ServerName:     serverName,
+		Name:           name,
+	}
+}
+
+func (id VirtualNetworkRuleId) String() string {
+	segments := []string{
+		fmt.Sprintf("Name %q", id.Name),
+		fmt.Sprintf("Server Name %q", id.ServerName),
+		fmt.Sprintf("Resource Group %q", id.ResourceGroup),
+	}
+	segmentsStr := strings.Join(segments, " / ")
+	return fmt.Sprintf("%s: (%s)", "Virtual Network Rule", segmentsStr)
+}
+
+func (id VirtualNetworkRuleId) ID() string {
+	fmtString := "/subscriptions/%s/resourceGroups/%s/providers/Microsoft.DBforPostgreSQL/servers/%s/virtualNetworkRules/%s"
+	return fmt.Sprintf(fmtString, id.SubscriptionId, id.ResourceGroup, id.ServerName, id.Name)
+}
+
+// VirtualNetworkRuleID parses a VirtualNetworkRule ID into an VirtualNetworkRuleId struct
+func VirtualNetworkRuleID(input string) (*VirtualNetworkRuleId, error) {
+	id, err := resourceids.ParseAzureResourceID(input)
+	if err != nil {
+		return nil, err
+	}
+
+	resourceId := VirtualNetworkRuleId{
+		SubscriptionId: id.SubscriptionID,
+		ResourceGroup:  id.ResourceGroup,
+	}
+
+	if resourceId.SubscriptionId == "" {
+		return nil, fmt.Errorf("ID was missing the 'subscriptions' element")
+	}
+
+	if resourceId.ResourceGroup == "" {
+		return nil, fmt.Errorf("ID was missing the 'resourceGroups' element")
+	}
+
+	if resourceId.ServerName, err = id.PopSegment("servers"); err != nil {
+		return nil, err
+	}
+	if resourceId.Name, err = id.PopSegment("virtualNetworkRules"); err != nil {
+		return nil, err
+	}
+
+	if err := id.ValidateNoEmptySegments(input); err != nil {
+		return nil, err
+	}
+
+	return &resourceId, nil
+}
diff --git b/internal/services/postgres/parse/virtual_network_rule_test.go a/internal/services/postgres/parse/virtual_network_rule_test.go
new file mode 100644
index 0000000000..e0a631283c
--- /dev/null
+++ a/internal/services/postgres/parse/virtual_network_rule_test.go
@@ -0,0 +1,128 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"testing"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+var _ resourceids.Id = VirtualNetworkRuleId{}
+
+func TestVirtualNetworkRuleIDFormatter(t *testing.T) {
+	actual := NewVirtualNetworkRuleID("12345678-1234-9876-4563-123456789012", "resGroup1", "server1", "virtualNetworkRule1").ID()
+	expected := "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/virtualNetworkRules/virtualNetworkRule1"
+	if actual != expected {
+		t.Fatalf("Expected %q but got %q", expected, actual)
+	}
+}
+
+func TestVirtualNetworkRuleID(t *testing.T) {
+	testData := []struct {
+		Input    string
+		Error    bool
+		Expected *VirtualNetworkRuleId
+	}{
+
+		{
+			// empty
+			Input: "",
+			Error: true,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Error: true,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Error: true,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Error: true,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Error: true,
+		},
+
+		{
+			// missing ServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/",
+			Error: true,
+		},
+
+		{
+			// missing value for ServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/",
+			Error: true,
+		},
+
+		{
+			// missing Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/",
+			Error: true,
+		},
+
+		{
+			// missing value for Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/virtualNetworkRules/",
+			Error: true,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/virtualNetworkRules/virtualNetworkRule1",
+			Expected: &VirtualNetworkRuleId{
+				SubscriptionId: "12345678-1234-9876-4563-123456789012",
+				ResourceGroup:  "resGroup1",
+				ServerName:     "server1",
+				Name:           "virtualNetworkRule1",
+			},
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.DBFORPOSTGRESQL/SERVERS/SERVER1/VIRTUALNETWORKRULES/VIRTUALNETWORKRULE1",
+			Error: true,
+		},
+	}
+
+	for _, v := range testData {
+		t.Logf("[DEBUG] Testing %q", v.Input)
+
+		actual, err := VirtualNetworkRuleID(v.Input)
+		if err != nil {
+			if v.Error {
+				continue
+			}
+
+			t.Fatalf("Expect a value but got an error: %s", err)
+		}
+		if v.Error {
+			t.Fatal("Expect an error but didn't get one")
+		}
+
+		if actual.SubscriptionId != v.Expected.SubscriptionId {
+			t.Fatalf("Expected %q but got %q for SubscriptionId", v.Expected.SubscriptionId, actual.SubscriptionId)
+		}
+		if actual.ResourceGroup != v.Expected.ResourceGroup {
+			t.Fatalf("Expected %q but got %q for ResourceGroup", v.Expected.ResourceGroup, actual.ResourceGroup)
+		}
+		if actual.ServerName != v.Expected.ServerName {
+			t.Fatalf("Expected %q but got %q for ServerName", v.Expected.ServerName, actual.ServerName)
+		}
+		if actual.Name != v.Expected.Name {
+			t.Fatalf("Expected %q but got %q for Name", v.Expected.Name, actual.Name)
+		}
+	}
+}
diff --git b/internal/services/postgres/postgresql_server_resource.go a/internal/services/postgres/postgresql_server_resource.go
index 1b069d032b..89bd76279c 100644
--- b/internal/services/postgres/postgresql_server_resource.go
+++ a/internal/services/postgres/postgresql_server_resource.go
@@ -3,6 +3,8 @@ package postgres
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strconv"
 	"strings"
@@ -127,10 +129,12 @@ func resourcePostgreSQLServer() *pluginsdk.Resource {
 			},
 
 			"version": {
-				Type:         pluginsdk.TypeString,
-				Required:     true,
-				ForceNew:     true,
-				ValidateFunc: validation.StringInSlice(servers.PossibleValuesForServerVersion(), false),
+				Type:     pluginsdk.TypeString,
+				Required: true,
+				ForceNew: true,
+				ValidateFunc: validation.StringInSlice(servers.PossibleValuesForServerVersion(),
+					features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"administrator_login": {
diff --git b/internal/services/postgres/validate/configuration_id.go a/internal/services/postgres/validate/configuration_id.go
new file mode 100644
index 0000000000..5fbc75f538
--- /dev/null
+++ a/internal/services/postgres/validate/configuration_id.go
@@ -0,0 +1,23 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+
+	"github.com/hashicorp/terraform-provider-azurerm/internal/services/postgres/parse"
+)
+
+func ConfigurationID(input interface{}, key string) (warnings []string, errors []error) {
+	v, ok := input.(string)
+	if !ok {
+		errors = append(errors, fmt.Errorf("expected %q to be a string", key))
+		return
+	}
+
+	if _, err := parse.ConfigurationID(v); err != nil {
+		errors = append(errors, err)
+	}
+
+	return
+}
diff --git b/internal/services/postgres/validate/configuration_id_test.go a/internal/services/postgres/validate/configuration_id_test.go
new file mode 100644
index 0000000000..098402a2fa
--- /dev/null
+++ a/internal/services/postgres/validate/configuration_id_test.go
@@ -0,0 +1,88 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import "testing"
+
+func TestConfigurationID(t *testing.T) {
+	cases := []struct {
+		Input string
+		Valid bool
+	}{
+
+		{
+			// empty
+			Input: "",
+			Valid: false,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Valid: false,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Valid: false,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Valid: false,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Valid: false,
+		},
+
+		{
+			// missing ServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/",
+			Valid: false,
+		},
+
+		{
+			// missing value for ServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/",
+			Valid: false,
+		},
+
+		{
+			// missing Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/",
+			Valid: false,
+		},
+
+		{
+			// missing value for Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/configurations/",
+			Valid: false,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/configurations/configuration1",
+			Valid: true,
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.DBFORPOSTGRESQL/SERVERS/SERVER1/CONFIGURATIONS/CONFIGURATION1",
+			Valid: false,
+		},
+	}
+	for _, tc := range cases {
+		t.Logf("[DEBUG] Testing Value %s", tc.Input)
+		_, errors := ConfigurationID(tc.Input, "test")
+		valid := len(errors) == 0
+
+		if tc.Valid != valid {
+			t.Fatalf("Expected %t but got %t", tc.Valid, valid)
+		}
+	}
+}
diff --git b/internal/services/postgres/validate/database_id.go a/internal/services/postgres/validate/database_id.go
new file mode 100644
index 0000000000..24a8ecbddc
--- /dev/null
+++ a/internal/services/postgres/validate/database_id.go
@@ -0,0 +1,23 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+
+	"github.com/hashicorp/terraform-provider-azurerm/internal/services/postgres/parse"
+)
+
+func DatabaseID(input interface{}, key string) (warnings []string, errors []error) {
+	v, ok := input.(string)
+	if !ok {
+		errors = append(errors, fmt.Errorf("expected %q to be a string", key))
+		return
+	}
+
+	if _, err := parse.DatabaseID(v); err != nil {
+		errors = append(errors, err)
+	}
+
+	return
+}
diff --git b/internal/services/postgres/validate/database_id_test.go a/internal/services/postgres/validate/database_id_test.go
new file mode 100644
index 0000000000..8744c37128
--- /dev/null
+++ a/internal/services/postgres/validate/database_id_test.go
@@ -0,0 +1,88 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import "testing"
+
+func TestDatabaseID(t *testing.T) {
+	cases := []struct {
+		Input string
+		Valid bool
+	}{
+
+		{
+			// empty
+			Input: "",
+			Valid: false,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Valid: false,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Valid: false,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Valid: false,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Valid: false,
+		},
+
+		{
+			// missing ServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/",
+			Valid: false,
+		},
+
+		{
+			// missing value for ServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/",
+			Valid: false,
+		},
+
+		{
+			// missing Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/",
+			Valid: false,
+		},
+
+		{
+			// missing value for Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/databases/",
+			Valid: false,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/databases/database1",
+			Valid: true,
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.DBFORPOSTGRESQL/SERVERS/SERVER1/DATABASES/DATABASE1",
+			Valid: false,
+		},
+	}
+	for _, tc := range cases {
+		t.Logf("[DEBUG] Testing Value %s", tc.Input)
+		_, errors := DatabaseID(tc.Input, "test")
+		valid := len(errors) == 0
+
+		if tc.Valid != valid {
+			t.Fatalf("Expected %t but got %t", tc.Valid, valid)
+		}
+	}
+}
diff --git b/internal/services/postgres/validate/firewall_rule_id.go a/internal/services/postgres/validate/firewall_rule_id.go
new file mode 100644
index 0000000000..e0ded2db61
--- /dev/null
+++ a/internal/services/postgres/validate/firewall_rule_id.go
@@ -0,0 +1,23 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+
+	"github.com/hashicorp/terraform-provider-azurerm/internal/services/postgres/parse"
+)
+
+func FirewallRuleID(input interface{}, key string) (warnings []string, errors []error) {
+	v, ok := input.(string)
+	if !ok {
+		errors = append(errors, fmt.Errorf("expected %q to be a string", key))
+		return
+	}
+
+	if _, err := parse.FirewallRuleID(v); err != nil {
+		errors = append(errors, err)
+	}
+
+	return
+}
diff --git b/internal/services/postgres/validate/firewall_rule_id_test.go a/internal/services/postgres/validate/firewall_rule_id_test.go
new file mode 100644
index 0000000000..77777ead15
--- /dev/null
+++ a/internal/services/postgres/validate/firewall_rule_id_test.go
@@ -0,0 +1,88 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import "testing"
+
+func TestFirewallRuleID(t *testing.T) {
+	cases := []struct {
+		Input string
+		Valid bool
+	}{
+
+		{
+			// empty
+			Input: "",
+			Valid: false,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Valid: false,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Valid: false,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Valid: false,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Valid: false,
+		},
+
+		{
+			// missing ServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/",
+			Valid: false,
+		},
+
+		{
+			// missing value for ServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/",
+			Valid: false,
+		},
+
+		{
+			// missing Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/",
+			Valid: false,
+		},
+
+		{
+			// missing value for Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/firewallRules/",
+			Valid: false,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/firewallRules/firewallRule1",
+			Valid: true,
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.DBFORPOSTGRESQL/SERVERS/SERVER1/FIREWALLRULES/FIREWALLRULE1",
+			Valid: false,
+		},
+	}
+	for _, tc := range cases {
+		t.Logf("[DEBUG] Testing Value %s", tc.Input)
+		_, errors := FirewallRuleID(tc.Input, "test")
+		valid := len(errors) == 0
+
+		if tc.Valid != valid {
+			t.Fatalf("Expected %t but got %t", tc.Valid, valid)
+		}
+	}
+}
diff --git b/internal/services/postgres/validate/flexible_server_configuration_id.go a/internal/services/postgres/validate/flexible_server_configuration_id.go
new file mode 100644
index 0000000000..fc654717d9
--- /dev/null
+++ a/internal/services/postgres/validate/flexible_server_configuration_id.go
@@ -0,0 +1,23 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+
+	"github.com/hashicorp/terraform-provider-azurerm/internal/services/postgres/parse"
+)
+
+func FlexibleServerConfigurationID(input interface{}, key string) (warnings []string, errors []error) {
+	v, ok := input.(string)
+	if !ok {
+		errors = append(errors, fmt.Errorf("expected %q to be a string", key))
+		return
+	}
+
+	if _, err := parse.FlexibleServerConfigurationID(v); err != nil {
+		errors = append(errors, err)
+	}
+
+	return
+}
diff --git b/internal/services/postgres/validate/flexible_server_configuration_id_test.go a/internal/services/postgres/validate/flexible_server_configuration_id_test.go
new file mode 100644
index 0000000000..682bd62c85
--- /dev/null
+++ a/internal/services/postgres/validate/flexible_server_configuration_id_test.go
@@ -0,0 +1,88 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import "testing"
+
+func TestFlexibleServerConfigurationID(t *testing.T) {
+	cases := []struct {
+		Input string
+		Valid bool
+	}{
+
+		{
+			// empty
+			Input: "",
+			Valid: false,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Valid: false,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Valid: false,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Valid: false,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Valid: false,
+		},
+
+		{
+			// missing FlexibleServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/",
+			Valid: false,
+		},
+
+		{
+			// missing value for FlexibleServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/",
+			Valid: false,
+		},
+
+		{
+			// missing ConfigurationName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/flexibleServer1/",
+			Valid: false,
+		},
+
+		{
+			// missing value for ConfigurationName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/flexibleServer1/configurations/",
+			Valid: false,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/flexibleServer1/configurations/configuration1",
+			Valid: true,
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.DBFORPOSTGRESQL/FLEXIBLESERVERS/FLEXIBLESERVER1/CONFIGURATIONS/CONFIGURATION1",
+			Valid: false,
+		},
+	}
+	for _, tc := range cases {
+		t.Logf("[DEBUG] Testing Value %s", tc.Input)
+		_, errors := FlexibleServerConfigurationID(tc.Input, "test")
+		valid := len(errors) == 0
+
+		if tc.Valid != valid {
+			t.Fatalf("Expected %t but got %t", tc.Valid, valid)
+		}
+	}
+}
diff --git b/internal/services/postgres/validate/flexible_server_database_id.go a/internal/services/postgres/validate/flexible_server_database_id.go
new file mode 100644
index 0000000000..c899f3d7fc
--- /dev/null
+++ a/internal/services/postgres/validate/flexible_server_database_id.go
@@ -0,0 +1,23 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+
+	"github.com/hashicorp/terraform-provider-azurerm/internal/services/postgres/parse"
+)
+
+func FlexibleServerDatabaseID(input interface{}, key string) (warnings []string, errors []error) {
+	v, ok := input.(string)
+	if !ok {
+		errors = append(errors, fmt.Errorf("expected %q to be a string", key))
+		return
+	}
+
+	if _, err := parse.FlexibleServerDatabaseID(v); err != nil {
+		errors = append(errors, err)
+	}
+
+	return
+}
diff --git b/internal/services/postgres/validate/flexible_server_database_id_test.go a/internal/services/postgres/validate/flexible_server_database_id_test.go
new file mode 100644
index 0000000000..9ee1cd6859
--- /dev/null
+++ a/internal/services/postgres/validate/flexible_server_database_id_test.go
@@ -0,0 +1,88 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import "testing"
+
+func TestFlexibleServerDatabaseID(t *testing.T) {
+	cases := []struct {
+		Input string
+		Valid bool
+	}{
+
+		{
+			// empty
+			Input: "",
+			Valid: false,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Valid: false,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Valid: false,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Valid: false,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Valid: false,
+		},
+
+		{
+			// missing FlexibleServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/",
+			Valid: false,
+		},
+
+		{
+			// missing value for FlexibleServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/",
+			Valid: false,
+		},
+
+		{
+			// missing DatabaseName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/flexibleServer1/",
+			Valid: false,
+		},
+
+		{
+			// missing value for DatabaseName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/flexibleServer1/databases/",
+			Valid: false,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/flexibleServer1/databases/database1",
+			Valid: true,
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.DBFORPOSTGRESQL/FLEXIBLESERVERS/FLEXIBLESERVER1/DATABASES/DATABASE1",
+			Valid: false,
+		},
+	}
+	for _, tc := range cases {
+		t.Logf("[DEBUG] Testing Value %s", tc.Input)
+		_, errors := FlexibleServerDatabaseID(tc.Input, "test")
+		valid := len(errors) == 0
+
+		if tc.Valid != valid {
+			t.Fatalf("Expected %t but got %t", tc.Valid, valid)
+		}
+	}
+}
diff --git b/internal/services/postgres/validate/flexible_server_firewall_rule_id.go a/internal/services/postgres/validate/flexible_server_firewall_rule_id.go
new file mode 100644
index 0000000000..62063f69a9
--- /dev/null
+++ a/internal/services/postgres/validate/flexible_server_firewall_rule_id.go
@@ -0,0 +1,23 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+
+	"github.com/hashicorp/terraform-provider-azurerm/internal/services/postgres/parse"
+)
+
+func FlexibleServerFirewallRuleID(input interface{}, key string) (warnings []string, errors []error) {
+	v, ok := input.(string)
+	if !ok {
+		errors = append(errors, fmt.Errorf("expected %q to be a string", key))
+		return
+	}
+
+	if _, err := parse.FlexibleServerFirewallRuleID(v); err != nil {
+		errors = append(errors, err)
+	}
+
+	return
+}
diff --git b/internal/services/postgres/validate/flexible_server_firewall_rule_id_test.go a/internal/services/postgres/validate/flexible_server_firewall_rule_id_test.go
new file mode 100644
index 0000000000..8eed3cdd11
--- /dev/null
+++ a/internal/services/postgres/validate/flexible_server_firewall_rule_id_test.go
@@ -0,0 +1,88 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import "testing"
+
+func TestFlexibleServerFirewallRuleID(t *testing.T) {
+	cases := []struct {
+		Input string
+		Valid bool
+	}{
+
+		{
+			// empty
+			Input: "",
+			Valid: false,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Valid: false,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Valid: false,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Valid: false,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Valid: false,
+		},
+
+		{
+			// missing FlexibleServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/",
+			Valid: false,
+		},
+
+		{
+			// missing value for FlexibleServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/",
+			Valid: false,
+		},
+
+		{
+			// missing FirewallRuleName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/flexibleServer1/",
+			Valid: false,
+		},
+
+		{
+			// missing value for FirewallRuleName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/flexibleServer1/firewallRules/",
+			Valid: false,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/flexibleServer1/firewallRules/firewallRule1",
+			Valid: true,
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.DBFORPOSTGRESQL/FLEXIBLESERVERS/FLEXIBLESERVER1/FIREWALLRULES/FIREWALLRULE1",
+			Valid: false,
+		},
+	}
+	for _, tc := range cases {
+		t.Logf("[DEBUG] Testing Value %s", tc.Input)
+		_, errors := FlexibleServerFirewallRuleID(tc.Input, "test")
+		valid := len(errors) == 0
+
+		if tc.Valid != valid {
+			t.Fatalf("Expected %t but got %t", tc.Valid, valid)
+		}
+	}
+}
diff --git b/internal/services/postgres/validate/flexible_server_id.go a/internal/services/postgres/validate/flexible_server_id.go
new file mode 100644
index 0000000000..1b998295da
--- /dev/null
+++ a/internal/services/postgres/validate/flexible_server_id.go
@@ -0,0 +1,23 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+
+	"github.com/hashicorp/terraform-provider-azurerm/internal/services/postgres/parse"
+)
+
+func FlexibleServerID(input interface{}, key string) (warnings []string, errors []error) {
+	v, ok := input.(string)
+	if !ok {
+		errors = append(errors, fmt.Errorf("expected %q to be a string", key))
+		return
+	}
+
+	if _, err := parse.FlexibleServerID(v); err != nil {
+		errors = append(errors, err)
+	}
+
+	return
+}
diff --git b/internal/services/postgres/validate/flexible_server_id_test.go a/internal/services/postgres/validate/flexible_server_id_test.go
new file mode 100644
index 0000000000..b0f0eae7d8
--- /dev/null
+++ a/internal/services/postgres/validate/flexible_server_id_test.go
@@ -0,0 +1,76 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import "testing"
+
+func TestFlexibleServerID(t *testing.T) {
+	cases := []struct {
+		Input string
+		Valid bool
+	}{
+
+		{
+			// empty
+			Input: "",
+			Valid: false,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Valid: false,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Valid: false,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Valid: false,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Valid: false,
+		},
+
+		{
+			// missing Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/",
+			Valid: false,
+		},
+
+		{
+			// missing value for Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/",
+			Valid: false,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/flexibleServer1",
+			Valid: true,
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.DBFORPOSTGRESQL/FLEXIBLESERVERS/FLEXIBLESERVER1",
+			Valid: false,
+		},
+	}
+	for _, tc := range cases {
+		t.Logf("[DEBUG] Testing Value %s", tc.Input)
+		_, errors := FlexibleServerID(tc.Input, "test")
+		valid := len(errors) == 0
+
+		if tc.Valid != valid {
+			t.Fatalf("Expected %t but got %t", tc.Valid, valid)
+		}
+	}
+}
diff --git b/internal/services/postgres/validate/server_id.go a/internal/services/postgres/validate/server_id.go
new file mode 100644
index 0000000000..a7864ea196
--- /dev/null
+++ a/internal/services/postgres/validate/server_id.go
@@ -0,0 +1,23 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+
+	"github.com/hashicorp/terraform-provider-azurerm/internal/services/postgres/parse"
+)
+
+func ServerID(input interface{}, key string) (warnings []string, errors []error) {
+	v, ok := input.(string)
+	if !ok {
+		errors = append(errors, fmt.Errorf("expected %q to be a string", key))
+		return
+	}
+
+	if _, err := parse.ServerID(v); err != nil {
+		errors = append(errors, err)
+	}
+
+	return
+}
diff --git b/internal/services/postgres/validate/server_id_test.go a/internal/services/postgres/validate/server_id_test.go
new file mode 100644
index 0000000000..1fcf76082f
--- /dev/null
+++ a/internal/services/postgres/validate/server_id_test.go
@@ -0,0 +1,76 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import "testing"
+
+func TestServerID(t *testing.T) {
+	cases := []struct {
+		Input string
+		Valid bool
+	}{
+
+		{
+			// empty
+			Input: "",
+			Valid: false,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Valid: false,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Valid: false,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Valid: false,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Valid: false,
+		},
+
+		{
+			// missing Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/",
+			Valid: false,
+		},
+
+		{
+			// missing value for Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/",
+			Valid: false,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1",
+			Valid: true,
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.DBFORPOSTGRESQL/SERVERS/SERVER1",
+			Valid: false,
+		},
+	}
+	for _, tc := range cases {
+		t.Logf("[DEBUG] Testing Value %s", tc.Input)
+		_, errors := ServerID(tc.Input, "test")
+		valid := len(errors) == 0
+
+		if tc.Valid != valid {
+			t.Fatalf("Expected %t but got %t", tc.Valid, valid)
+		}
+	}
+}
diff --git b/internal/services/postgres/validate/server_key_id.go a/internal/services/postgres/validate/server_key_id.go
new file mode 100644
index 0000000000..fda821517d
--- /dev/null
+++ a/internal/services/postgres/validate/server_key_id.go
@@ -0,0 +1,23 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+
+	"github.com/hashicorp/terraform-provider-azurerm/internal/services/postgres/parse"
+)
+
+func ServerKeyID(input interface{}, key string) (warnings []string, errors []error) {
+	v, ok := input.(string)
+	if !ok {
+		errors = append(errors, fmt.Errorf("expected %q to be a string", key))
+		return
+	}
+
+	if _, err := parse.ServerKeyID(v); err != nil {
+		errors = append(errors, err)
+	}
+
+	return
+}
diff --git b/internal/services/postgres/validate/server_key_id_test.go a/internal/services/postgres/validate/server_key_id_test.go
new file mode 100644
index 0000000000..c63b0d673a
--- /dev/null
+++ a/internal/services/postgres/validate/server_key_id_test.go
@@ -0,0 +1,88 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import "testing"
+
+func TestServerKeyID(t *testing.T) {
+	cases := []struct {
+		Input string
+		Valid bool
+	}{
+
+		{
+			// empty
+			Input: "",
+			Valid: false,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Valid: false,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Valid: false,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Valid: false,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Valid: false,
+		},
+
+		{
+			// missing ServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/",
+			Valid: false,
+		},
+
+		{
+			// missing value for ServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/",
+			Valid: false,
+		},
+
+		{
+			// missing KeyName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/",
+			Valid: false,
+		},
+
+		{
+			// missing value for KeyName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/keys/",
+			Valid: false,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/keys/key1",
+			Valid: true,
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.DBFORPOSTGRESQL/SERVERS/SERVER1/KEYS/KEY1",
+			Valid: false,
+		},
+	}
+	for _, tc := range cases {
+		t.Logf("[DEBUG] Testing Value %s", tc.Input)
+		_, errors := ServerKeyID(tc.Input, "test")
+		valid := len(errors) == 0
+
+		if tc.Valid != valid {
+			t.Fatalf("Expected %t but got %t", tc.Valid, valid)
+		}
+	}
+}
diff --git b/internal/services/postgres/validate/virtual_network_rule_id.go a/internal/services/postgres/validate/virtual_network_rule_id.go
new file mode 100644
index 0000000000..550db479d5
--- /dev/null
+++ a/internal/services/postgres/validate/virtual_network_rule_id.go
@@ -0,0 +1,23 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+
+	"github.com/hashicorp/terraform-provider-azurerm/internal/services/postgres/parse"
+)
+
+func VirtualNetworkRuleID(input interface{}, key string) (warnings []string, errors []error) {
+	v, ok := input.(string)
+	if !ok {
+		errors = append(errors, fmt.Errorf("expected %q to be a string", key))
+		return
+	}
+
+	if _, err := parse.VirtualNetworkRuleID(v); err != nil {
+		errors = append(errors, err)
+	}
+
+	return
+}
diff --git b/internal/services/postgres/validate/virtual_network_rule_id_test.go a/internal/services/postgres/validate/virtual_network_rule_id_test.go
new file mode 100644
index 0000000000..bb3af88774
--- /dev/null
+++ a/internal/services/postgres/validate/virtual_network_rule_id_test.go
@@ -0,0 +1,88 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import "testing"
+
+func TestVirtualNetworkRuleID(t *testing.T) {
+	cases := []struct {
+		Input string
+		Valid bool
+	}{
+
+		{
+			// empty
+			Input: "",
+			Valid: false,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Valid: false,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Valid: false,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Valid: false,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Valid: false,
+		},
+
+		{
+			// missing ServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/",
+			Valid: false,
+		},
+
+		{
+			// missing value for ServerName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/",
+			Valid: false,
+		},
+
+		{
+			// missing Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/",
+			Valid: false,
+		},
+
+		{
+			// missing value for Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/virtualNetworkRules/",
+			Valid: false,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/virtualNetworkRules/virtualNetworkRule1",
+			Valid: true,
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.DBFORPOSTGRESQL/SERVERS/SERVER1/VIRTUALNETWORKRULES/VIRTUALNETWORKRULE1",
+			Valid: false,
+		},
+	}
+	for _, tc := range cases {
+		t.Logf("[DEBUG] Testing Value %s", tc.Input)
+		_, errors := VirtualNetworkRuleID(tc.Input, "test")
+		valid := len(errors) == 0
+
+		if tc.Valid != valid {
+			t.Fatalf("Expected %t but got %t", tc.Valid, valid)
+		}
+	}
+}
diff --git b/internal/services/privatedns/parse/a_record.go a/internal/services/privatedns/parse/a_record.go
new file mode 100644
index 0000000000..1ff34aa6cc
--- /dev/null
+++ a/internal/services/privatedns/parse/a_record.go
@@ -0,0 +1,75 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+	"strings"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+type ARecordId struct {
+	SubscriptionId     string
+	ResourceGroup      string
+	PrivateDnsZoneName string
+	AName              string
+}
+
+func NewARecordID(subscriptionId, resourceGroup, privateDnsZoneName, aName string) ARecordId {
+	return ARecordId{
+		SubscriptionId:     subscriptionId,
+		ResourceGroup:      resourceGroup,
+		PrivateDnsZoneName: privateDnsZoneName,
+		AName:              aName,
+	}
+}
+
+func (id ARecordId) String() string {
+	segments := []string{
+		fmt.Sprintf("A Name %q", id.AName),
+		fmt.Sprintf("Private Dns Zone Name %q", id.PrivateDnsZoneName),
+		fmt.Sprintf("Resource Group %q", id.ResourceGroup),
+	}
+	segmentsStr := strings.Join(segments, " / ")
+	return fmt.Sprintf("%s: (%s)", "A Record", segmentsStr)
+}
+
+func (id ARecordId) ID() string {
+	fmtString := "/subscriptions/%s/resourceGroups/%s/providers/Microsoft.Network/privateDnsZones/%s/A/%s"
+	return fmt.Sprintf(fmtString, id.SubscriptionId, id.ResourceGroup, id.PrivateDnsZoneName, id.AName)
+}
+
+// ARecordID parses a ARecord ID into an ARecordId struct
+func ARecordID(input string) (*ARecordId, error) {
+	id, err := resourceids.ParseAzureResourceID(input)
+	if err != nil {
+		return nil, err
+	}
+
+	resourceId := ARecordId{
+		SubscriptionId: id.SubscriptionID,
+		ResourceGroup:  id.ResourceGroup,
+	}
+
+	if resourceId.SubscriptionId == "" {
+		return nil, fmt.Errorf("ID was missing the 'subscriptions' element")
+	}
+
+	if resourceId.ResourceGroup == "" {
+		return nil, fmt.Errorf("ID was missing the 'resourceGroups' element")
+	}
+
+	if resourceId.PrivateDnsZoneName, err = id.PopSegment("privateDnsZones"); err != nil {
+		return nil, err
+	}
+	if resourceId.AName, err = id.PopSegment("A"); err != nil {
+		return nil, err
+	}
+
+	if err := id.ValidateNoEmptySegments(input); err != nil {
+		return nil, err
+	}
+
+	return &resourceId, nil
+}
diff --git b/internal/services/privatedns/parse/a_record_test.go a/internal/services/privatedns/parse/a_record_test.go
new file mode 100644
index 0000000000..4077882d24
--- /dev/null
+++ a/internal/services/privatedns/parse/a_record_test.go
@@ -0,0 +1,128 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"testing"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+var _ resourceids.Id = ARecordId{}
+
+func TestARecordIDFormatter(t *testing.T) {
+	actual := NewARecordID("12345678-1234-9876-4563-123456789012", "resGroup1", "privateDnsZone1", "eh1").ID()
+	expected := "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/A/eh1"
+	if actual != expected {
+		t.Fatalf("Expected %q but got %q", expected, actual)
+	}
+}
+
+func TestARecordID(t *testing.T) {
+	testData := []struct {
+		Input    string
+		Error    bool
+		Expected *ARecordId
+	}{
+
+		{
+			// empty
+			Input: "",
+			Error: true,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Error: true,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Error: true,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Error: true,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Error: true,
+		},
+
+		{
+			// missing PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/",
+			Error: true,
+		},
+
+		{
+			// missing value for PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/",
+			Error: true,
+		},
+
+		{
+			// missing AName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/",
+			Error: true,
+		},
+
+		{
+			// missing value for AName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/A/",
+			Error: true,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/A/eh1",
+			Expected: &ARecordId{
+				SubscriptionId:     "12345678-1234-9876-4563-123456789012",
+				ResourceGroup:      "resGroup1",
+				PrivateDnsZoneName: "privateDnsZone1",
+				AName:              "eh1",
+			},
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.NETWORK/PRIVATEDNSZONES/PRIVATEDNSZONE1/A/EH1",
+			Error: true,
+		},
+	}
+
+	for _, v := range testData {
+		t.Logf("[DEBUG] Testing %q", v.Input)
+
+		actual, err := ARecordID(v.Input)
+		if err != nil {
+			if v.Error {
+				continue
+			}
+
+			t.Fatalf("Expect a value but got an error: %s", err)
+		}
+		if v.Error {
+			t.Fatal("Expect an error but didn't get one")
+		}
+
+		if actual.SubscriptionId != v.Expected.SubscriptionId {
+			t.Fatalf("Expected %q but got %q for SubscriptionId", v.Expected.SubscriptionId, actual.SubscriptionId)
+		}
+		if actual.ResourceGroup != v.Expected.ResourceGroup {
+			t.Fatalf("Expected %q but got %q for ResourceGroup", v.Expected.ResourceGroup, actual.ResourceGroup)
+		}
+		if actual.PrivateDnsZoneName != v.Expected.PrivateDnsZoneName {
+			t.Fatalf("Expected %q but got %q for PrivateDnsZoneName", v.Expected.PrivateDnsZoneName, actual.PrivateDnsZoneName)
+		}
+		if actual.AName != v.Expected.AName {
+			t.Fatalf("Expected %q but got %q for AName", v.Expected.AName, actual.AName)
+		}
+	}
+}
diff --git b/internal/services/privatedns/parse/aaaa_record.go a/internal/services/privatedns/parse/aaaa_record.go
new file mode 100644
index 0000000000..c44c0d268b
--- /dev/null
+++ a/internal/services/privatedns/parse/aaaa_record.go
@@ -0,0 +1,75 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+	"strings"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+type AaaaRecordId struct {
+	SubscriptionId     string
+	ResourceGroup      string
+	PrivateDnsZoneName string
+	AAAAName           string
+}
+
+func NewAaaaRecordID(subscriptionId, resourceGroup, privateDnsZoneName, aAAAName string) AaaaRecordId {
+	return AaaaRecordId{
+		SubscriptionId:     subscriptionId,
+		ResourceGroup:      resourceGroup,
+		PrivateDnsZoneName: privateDnsZoneName,
+		AAAAName:           aAAAName,
+	}
+}
+
+func (id AaaaRecordId) String() string {
+	segments := []string{
+		fmt.Sprintf("A A A A Name %q", id.AAAAName),
+		fmt.Sprintf("Private Dns Zone Name %q", id.PrivateDnsZoneName),
+		fmt.Sprintf("Resource Group %q", id.ResourceGroup),
+	}
+	segmentsStr := strings.Join(segments, " / ")
+	return fmt.Sprintf("%s: (%s)", "Aaaa Record", segmentsStr)
+}
+
+func (id AaaaRecordId) ID() string {
+	fmtString := "/subscriptions/%s/resourceGroups/%s/providers/Microsoft.Network/privateDnsZones/%s/AAAA/%s"
+	return fmt.Sprintf(fmtString, id.SubscriptionId, id.ResourceGroup, id.PrivateDnsZoneName, id.AAAAName)
+}
+
+// AaaaRecordID parses a AaaaRecord ID into an AaaaRecordId struct
+func AaaaRecordID(input string) (*AaaaRecordId, error) {
+	id, err := resourceids.ParseAzureResourceID(input)
+	if err != nil {
+		return nil, err
+	}
+
+	resourceId := AaaaRecordId{
+		SubscriptionId: id.SubscriptionID,
+		ResourceGroup:  id.ResourceGroup,
+	}
+
+	if resourceId.SubscriptionId == "" {
+		return nil, fmt.Errorf("ID was missing the 'subscriptions' element")
+	}
+
+	if resourceId.ResourceGroup == "" {
+		return nil, fmt.Errorf("ID was missing the 'resourceGroups' element")
+	}
+
+	if resourceId.PrivateDnsZoneName, err = id.PopSegment("privateDnsZones"); err != nil {
+		return nil, err
+	}
+	if resourceId.AAAAName, err = id.PopSegment("AAAA"); err != nil {
+		return nil, err
+	}
+
+	if err := id.ValidateNoEmptySegments(input); err != nil {
+		return nil, err
+	}
+
+	return &resourceId, nil
+}
diff --git b/internal/services/privatedns/parse/aaaa_record_test.go a/internal/services/privatedns/parse/aaaa_record_test.go
new file mode 100644
index 0000000000..3d61bf94fe
--- /dev/null
+++ a/internal/services/privatedns/parse/aaaa_record_test.go
@@ -0,0 +1,128 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"testing"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+var _ resourceids.Id = AaaaRecordId{}
+
+func TestAaaaRecordIDFormatter(t *testing.T) {
+	actual := NewAaaaRecordID("12345678-1234-9876-4563-123456789012", "resGroup1", "privateDnsZone1", "eheh1").ID()
+	expected := "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/AAAA/eheh1"
+	if actual != expected {
+		t.Fatalf("Expected %q but got %q", expected, actual)
+	}
+}
+
+func TestAaaaRecordID(t *testing.T) {
+	testData := []struct {
+		Input    string
+		Error    bool
+		Expected *AaaaRecordId
+	}{
+
+		{
+			// empty
+			Input: "",
+			Error: true,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Error: true,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Error: true,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Error: true,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Error: true,
+		},
+
+		{
+			// missing PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/",
+			Error: true,
+		},
+
+		{
+			// missing value for PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/",
+			Error: true,
+		},
+
+		{
+			// missing AAAAName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/",
+			Error: true,
+		},
+
+		{
+			// missing value for AAAAName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/AAAA/",
+			Error: true,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/AAAA/eheh1",
+			Expected: &AaaaRecordId{
+				SubscriptionId:     "12345678-1234-9876-4563-123456789012",
+				ResourceGroup:      "resGroup1",
+				PrivateDnsZoneName: "privateDnsZone1",
+				AAAAName:           "eheh1",
+			},
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.NETWORK/PRIVATEDNSZONES/PRIVATEDNSZONE1/AAAA/EHEH1",
+			Error: true,
+		},
+	}
+
+	for _, v := range testData {
+		t.Logf("[DEBUG] Testing %q", v.Input)
+
+		actual, err := AaaaRecordID(v.Input)
+		if err != nil {
+			if v.Error {
+				continue
+			}
+
+			t.Fatalf("Expect a value but got an error: %s", err)
+		}
+		if v.Error {
+			t.Fatal("Expect an error but didn't get one")
+		}
+
+		if actual.SubscriptionId != v.Expected.SubscriptionId {
+			t.Fatalf("Expected %q but got %q for SubscriptionId", v.Expected.SubscriptionId, actual.SubscriptionId)
+		}
+		if actual.ResourceGroup != v.Expected.ResourceGroup {
+			t.Fatalf("Expected %q but got %q for ResourceGroup", v.Expected.ResourceGroup, actual.ResourceGroup)
+		}
+		if actual.PrivateDnsZoneName != v.Expected.PrivateDnsZoneName {
+			t.Fatalf("Expected %q but got %q for PrivateDnsZoneName", v.Expected.PrivateDnsZoneName, actual.PrivateDnsZoneName)
+		}
+		if actual.AAAAName != v.Expected.AAAAName {
+			t.Fatalf("Expected %q but got %q for AAAAName", v.Expected.AAAAName, actual.AAAAName)
+		}
+	}
+}
diff --git b/internal/services/privatedns/parse/cname_record.go a/internal/services/privatedns/parse/cname_record.go
new file mode 100644
index 0000000000..52de00de2a
--- /dev/null
+++ a/internal/services/privatedns/parse/cname_record.go
@@ -0,0 +1,75 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+	"strings"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+type CnameRecordId struct {
+	SubscriptionId     string
+	ResourceGroup      string
+	PrivateDnsZoneName string
+	CNAMEName          string
+}
+
+func NewCnameRecordID(subscriptionId, resourceGroup, privateDnsZoneName, cNAMEName string) CnameRecordId {
+	return CnameRecordId{
+		SubscriptionId:     subscriptionId,
+		ResourceGroup:      resourceGroup,
+		PrivateDnsZoneName: privateDnsZoneName,
+		CNAMEName:          cNAMEName,
+	}
+}
+
+func (id CnameRecordId) String() string {
+	segments := []string{
+		fmt.Sprintf("C N A M E Name %q", id.CNAMEName),
+		fmt.Sprintf("Private Dns Zone Name %q", id.PrivateDnsZoneName),
+		fmt.Sprintf("Resource Group %q", id.ResourceGroup),
+	}
+	segmentsStr := strings.Join(segments, " / ")
+	return fmt.Sprintf("%s: (%s)", "Cname Record", segmentsStr)
+}
+
+func (id CnameRecordId) ID() string {
+	fmtString := "/subscriptions/%s/resourceGroups/%s/providers/Microsoft.Network/privateDnsZones/%s/CNAME/%s"
+	return fmt.Sprintf(fmtString, id.SubscriptionId, id.ResourceGroup, id.PrivateDnsZoneName, id.CNAMEName)
+}
+
+// CnameRecordID parses a CnameRecord ID into an CnameRecordId struct
+func CnameRecordID(input string) (*CnameRecordId, error) {
+	id, err := resourceids.ParseAzureResourceID(input)
+	if err != nil {
+		return nil, err
+	}
+
+	resourceId := CnameRecordId{
+		SubscriptionId: id.SubscriptionID,
+		ResourceGroup:  id.ResourceGroup,
+	}
+
+	if resourceId.SubscriptionId == "" {
+		return nil, fmt.Errorf("ID was missing the 'subscriptions' element")
+	}
+
+	if resourceId.ResourceGroup == "" {
+		return nil, fmt.Errorf("ID was missing the 'resourceGroups' element")
+	}
+
+	if resourceId.PrivateDnsZoneName, err = id.PopSegment("privateDnsZones"); err != nil {
+		return nil, err
+	}
+	if resourceId.CNAMEName, err = id.PopSegment("CNAME"); err != nil {
+		return nil, err
+	}
+
+	if err := id.ValidateNoEmptySegments(input); err != nil {
+		return nil, err
+	}
+
+	return &resourceId, nil
+}
diff --git b/internal/services/privatedns/parse/cname_record_test.go a/internal/services/privatedns/parse/cname_record_test.go
new file mode 100644
index 0000000000..5d18f58e25
--- /dev/null
+++ a/internal/services/privatedns/parse/cname_record_test.go
@@ -0,0 +1,128 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"testing"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+var _ resourceids.Id = CnameRecordId{}
+
+func TestCnameRecordIDFormatter(t *testing.T) {
+	actual := NewCnameRecordID("12345678-1234-9876-4563-123456789012", "resGroup1", "privateDnsZone1", "name1").ID()
+	expected := "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/CNAME/name1"
+	if actual != expected {
+		t.Fatalf("Expected %q but got %q", expected, actual)
+	}
+}
+
+func TestCnameRecordID(t *testing.T) {
+	testData := []struct {
+		Input    string
+		Error    bool
+		Expected *CnameRecordId
+	}{
+
+		{
+			// empty
+			Input: "",
+			Error: true,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Error: true,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Error: true,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Error: true,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Error: true,
+		},
+
+		{
+			// missing PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/",
+			Error: true,
+		},
+
+		{
+			// missing value for PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/",
+			Error: true,
+		},
+
+		{
+			// missing CNAMEName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/",
+			Error: true,
+		},
+
+		{
+			// missing value for CNAMEName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/CNAME/",
+			Error: true,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/CNAME/name1",
+			Expected: &CnameRecordId{
+				SubscriptionId:     "12345678-1234-9876-4563-123456789012",
+				ResourceGroup:      "resGroup1",
+				PrivateDnsZoneName: "privateDnsZone1",
+				CNAMEName:          "name1",
+			},
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.NETWORK/PRIVATEDNSZONES/PRIVATEDNSZONE1/CNAME/NAME1",
+			Error: true,
+		},
+	}
+
+	for _, v := range testData {
+		t.Logf("[DEBUG] Testing %q", v.Input)
+
+		actual, err := CnameRecordID(v.Input)
+		if err != nil {
+			if v.Error {
+				continue
+			}
+
+			t.Fatalf("Expect a value but got an error: %s", err)
+		}
+		if v.Error {
+			t.Fatal("Expect an error but didn't get one")
+		}
+
+		if actual.SubscriptionId != v.Expected.SubscriptionId {
+			t.Fatalf("Expected %q but got %q for SubscriptionId", v.Expected.SubscriptionId, actual.SubscriptionId)
+		}
+		if actual.ResourceGroup != v.Expected.ResourceGroup {
+			t.Fatalf("Expected %q but got %q for ResourceGroup", v.Expected.ResourceGroup, actual.ResourceGroup)
+		}
+		if actual.PrivateDnsZoneName != v.Expected.PrivateDnsZoneName {
+			t.Fatalf("Expected %q but got %q for PrivateDnsZoneName", v.Expected.PrivateDnsZoneName, actual.PrivateDnsZoneName)
+		}
+		if actual.CNAMEName != v.Expected.CNAMEName {
+			t.Fatalf("Expected %q but got %q for CNAMEName", v.Expected.CNAMEName, actual.CNAMEName)
+		}
+	}
+}
diff --git b/internal/services/privatedns/parse/mx_record.go a/internal/services/privatedns/parse/mx_record.go
new file mode 100644
index 0000000000..b753efdf2b
--- /dev/null
+++ a/internal/services/privatedns/parse/mx_record.go
@@ -0,0 +1,75 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+	"strings"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+type MxRecordId struct {
+	SubscriptionId     string
+	ResourceGroup      string
+	PrivateDnsZoneName string
+	MXName             string
+}
+
+func NewMxRecordID(subscriptionId, resourceGroup, privateDnsZoneName, mXName string) MxRecordId {
+	return MxRecordId{
+		SubscriptionId:     subscriptionId,
+		ResourceGroup:      resourceGroup,
+		PrivateDnsZoneName: privateDnsZoneName,
+		MXName:             mXName,
+	}
+}
+
+func (id MxRecordId) String() string {
+	segments := []string{
+		fmt.Sprintf("M X Name %q", id.MXName),
+		fmt.Sprintf("Private Dns Zone Name %q", id.PrivateDnsZoneName),
+		fmt.Sprintf("Resource Group %q", id.ResourceGroup),
+	}
+	segmentsStr := strings.Join(segments, " / ")
+	return fmt.Sprintf("%s: (%s)", "Mx Record", segmentsStr)
+}
+
+func (id MxRecordId) ID() string {
+	fmtString := "/subscriptions/%s/resourceGroups/%s/providers/Microsoft.Network/privateDnsZones/%s/MX/%s"
+	return fmt.Sprintf(fmtString, id.SubscriptionId, id.ResourceGroup, id.PrivateDnsZoneName, id.MXName)
+}
+
+// MxRecordID parses a MxRecord ID into an MxRecordId struct
+func MxRecordID(input string) (*MxRecordId, error) {
+	id, err := resourceids.ParseAzureResourceID(input)
+	if err != nil {
+		return nil, err
+	}
+
+	resourceId := MxRecordId{
+		SubscriptionId: id.SubscriptionID,
+		ResourceGroup:  id.ResourceGroup,
+	}
+
+	if resourceId.SubscriptionId == "" {
+		return nil, fmt.Errorf("ID was missing the 'subscriptions' element")
+	}
+
+	if resourceId.ResourceGroup == "" {
+		return nil, fmt.Errorf("ID was missing the 'resourceGroups' element")
+	}
+
+	if resourceId.PrivateDnsZoneName, err = id.PopSegment("privateDnsZones"); err != nil {
+		return nil, err
+	}
+	if resourceId.MXName, err = id.PopSegment("MX"); err != nil {
+		return nil, err
+	}
+
+	if err := id.ValidateNoEmptySegments(input); err != nil {
+		return nil, err
+	}
+
+	return &resourceId, nil
+}
diff --git b/internal/services/privatedns/parse/mx_record_test.go a/internal/services/privatedns/parse/mx_record_test.go
new file mode 100644
index 0000000000..3bd9befb82
--- /dev/null
+++ a/internal/services/privatedns/parse/mx_record_test.go
@@ -0,0 +1,128 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"testing"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+var _ resourceids.Id = MxRecordId{}
+
+func TestMxRecordIDFormatter(t *testing.T) {
+	actual := NewMxRecordID("12345678-1234-9876-4563-123456789012", "resGroup1", "privateDnsZone1", "mx1").ID()
+	expected := "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/MX/mx1"
+	if actual != expected {
+		t.Fatalf("Expected %q but got %q", expected, actual)
+	}
+}
+
+func TestMxRecordID(t *testing.T) {
+	testData := []struct {
+		Input    string
+		Error    bool
+		Expected *MxRecordId
+	}{
+
+		{
+			// empty
+			Input: "",
+			Error: true,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Error: true,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Error: true,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Error: true,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Error: true,
+		},
+
+		{
+			// missing PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/",
+			Error: true,
+		},
+
+		{
+			// missing value for PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/",
+			Error: true,
+		},
+
+		{
+			// missing MXName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/",
+			Error: true,
+		},
+
+		{
+			// missing value for MXName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/MX/",
+			Error: true,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/MX/mx1",
+			Expected: &MxRecordId{
+				SubscriptionId:     "12345678-1234-9876-4563-123456789012",
+				ResourceGroup:      "resGroup1",
+				PrivateDnsZoneName: "privateDnsZone1",
+				MXName:             "mx1",
+			},
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.NETWORK/PRIVATEDNSZONES/PRIVATEDNSZONE1/MX/MX1",
+			Error: true,
+		},
+	}
+
+	for _, v := range testData {
+		t.Logf("[DEBUG] Testing %q", v.Input)
+
+		actual, err := MxRecordID(v.Input)
+		if err != nil {
+			if v.Error {
+				continue
+			}
+
+			t.Fatalf("Expect a value but got an error: %s", err)
+		}
+		if v.Error {
+			t.Fatal("Expect an error but didn't get one")
+		}
+
+		if actual.SubscriptionId != v.Expected.SubscriptionId {
+			t.Fatalf("Expected %q but got %q for SubscriptionId", v.Expected.SubscriptionId, actual.SubscriptionId)
+		}
+		if actual.ResourceGroup != v.Expected.ResourceGroup {
+			t.Fatalf("Expected %q but got %q for ResourceGroup", v.Expected.ResourceGroup, actual.ResourceGroup)
+		}
+		if actual.PrivateDnsZoneName != v.Expected.PrivateDnsZoneName {
+			t.Fatalf("Expected %q but got %q for PrivateDnsZoneName", v.Expected.PrivateDnsZoneName, actual.PrivateDnsZoneName)
+		}
+		if actual.MXName != v.Expected.MXName {
+			t.Fatalf("Expected %q but got %q for MXName", v.Expected.MXName, actual.MXName)
+		}
+	}
+}
diff --git b/internal/services/privatedns/parse/private_dns_zone.go a/internal/services/privatedns/parse/private_dns_zone.go
new file mode 100644
index 0000000000..7ed4f6f732
--- /dev/null
+++ a/internal/services/privatedns/parse/private_dns_zone.go
@@ -0,0 +1,69 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+	"strings"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+type PrivateDnsZoneId struct {
+	SubscriptionId string
+	ResourceGroup  string
+	Name           string
+}
+
+func NewPrivateDnsZoneID(subscriptionId, resourceGroup, name string) PrivateDnsZoneId {
+	return PrivateDnsZoneId{
+		SubscriptionId: subscriptionId,
+		ResourceGroup:  resourceGroup,
+		Name:           name,
+	}
+}
+
+func (id PrivateDnsZoneId) String() string {
+	segments := []string{
+		fmt.Sprintf("Name %q", id.Name),
+		fmt.Sprintf("Resource Group %q", id.ResourceGroup),
+	}
+	segmentsStr := strings.Join(segments, " / ")
+	return fmt.Sprintf("%s: (%s)", "Private Dns Zone", segmentsStr)
+}
+
+func (id PrivateDnsZoneId) ID() string {
+	fmtString := "/subscriptions/%s/resourceGroups/%s/providers/Microsoft.Network/privateDnsZones/%s"
+	return fmt.Sprintf(fmtString, id.SubscriptionId, id.ResourceGroup, id.Name)
+}
+
+// PrivateDnsZoneID parses a PrivateDnsZone ID into an PrivateDnsZoneId struct
+func PrivateDnsZoneID(input string) (*PrivateDnsZoneId, error) {
+	id, err := resourceids.ParseAzureResourceID(input)
+	if err != nil {
+		return nil, err
+	}
+
+	resourceId := PrivateDnsZoneId{
+		SubscriptionId: id.SubscriptionID,
+		ResourceGroup:  id.ResourceGroup,
+	}
+
+	if resourceId.SubscriptionId == "" {
+		return nil, fmt.Errorf("ID was missing the 'subscriptions' element")
+	}
+
+	if resourceId.ResourceGroup == "" {
+		return nil, fmt.Errorf("ID was missing the 'resourceGroups' element")
+	}
+
+	if resourceId.Name, err = id.PopSegment("privateDnsZones"); err != nil {
+		return nil, err
+	}
+
+	if err := id.ValidateNoEmptySegments(input); err != nil {
+		return nil, err
+	}
+
+	return &resourceId, nil
+}
diff --git b/internal/services/privatedns/parse/private_dns_zone_test.go a/internal/services/privatedns/parse/private_dns_zone_test.go
new file mode 100644
index 0000000000..6edb3569ca
--- /dev/null
+++ a/internal/services/privatedns/parse/private_dns_zone_test.go
@@ -0,0 +1,112 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"testing"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+var _ resourceids.Id = PrivateDnsZoneId{}
+
+func TestPrivateDnsZoneIDFormatter(t *testing.T) {
+	actual := NewPrivateDnsZoneID("12345678-1234-9876-4563-123456789012", "resGroup1", "privateDnsZone1").ID()
+	expected := "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1"
+	if actual != expected {
+		t.Fatalf("Expected %q but got %q", expected, actual)
+	}
+}
+
+func TestPrivateDnsZoneID(t *testing.T) {
+	testData := []struct {
+		Input    string
+		Error    bool
+		Expected *PrivateDnsZoneId
+	}{
+
+		{
+			// empty
+			Input: "",
+			Error: true,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Error: true,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Error: true,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Error: true,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Error: true,
+		},
+
+		{
+			// missing Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/",
+			Error: true,
+		},
+
+		{
+			// missing value for Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/",
+			Error: true,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1",
+			Expected: &PrivateDnsZoneId{
+				SubscriptionId: "12345678-1234-9876-4563-123456789012",
+				ResourceGroup:  "resGroup1",
+				Name:           "privateDnsZone1",
+			},
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.NETWORK/PRIVATEDNSZONES/PRIVATEDNSZONE1",
+			Error: true,
+		},
+	}
+
+	for _, v := range testData {
+		t.Logf("[DEBUG] Testing %q", v.Input)
+
+		actual, err := PrivateDnsZoneID(v.Input)
+		if err != nil {
+			if v.Error {
+				continue
+			}
+
+			t.Fatalf("Expect a value but got an error: %s", err)
+		}
+		if v.Error {
+			t.Fatal("Expect an error but didn't get one")
+		}
+
+		if actual.SubscriptionId != v.Expected.SubscriptionId {
+			t.Fatalf("Expected %q but got %q for SubscriptionId", v.Expected.SubscriptionId, actual.SubscriptionId)
+		}
+		if actual.ResourceGroup != v.Expected.ResourceGroup {
+			t.Fatalf("Expected %q but got %q for ResourceGroup", v.Expected.ResourceGroup, actual.ResourceGroup)
+		}
+		if actual.Name != v.Expected.Name {
+			t.Fatalf("Expected %q but got %q for Name", v.Expected.Name, actual.Name)
+		}
+	}
+}
diff --git b/internal/services/privatedns/parse/ptr_record.go a/internal/services/privatedns/parse/ptr_record.go
new file mode 100644
index 0000000000..c665609f92
--- /dev/null
+++ a/internal/services/privatedns/parse/ptr_record.go
@@ -0,0 +1,75 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+	"strings"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+type PtrRecordId struct {
+	SubscriptionId     string
+	ResourceGroup      string
+	PrivateDnsZoneName string
+	PTRName            string
+}
+
+func NewPtrRecordID(subscriptionId, resourceGroup, privateDnsZoneName, pTRName string) PtrRecordId {
+	return PtrRecordId{
+		SubscriptionId:     subscriptionId,
+		ResourceGroup:      resourceGroup,
+		PrivateDnsZoneName: privateDnsZoneName,
+		PTRName:            pTRName,
+	}
+}
+
+func (id PtrRecordId) String() string {
+	segments := []string{
+		fmt.Sprintf("P T R Name %q", id.PTRName),
+		fmt.Sprintf("Private Dns Zone Name %q", id.PrivateDnsZoneName),
+		fmt.Sprintf("Resource Group %q", id.ResourceGroup),
+	}
+	segmentsStr := strings.Join(segments, " / ")
+	return fmt.Sprintf("%s: (%s)", "Ptr Record", segmentsStr)
+}
+
+func (id PtrRecordId) ID() string {
+	fmtString := "/subscriptions/%s/resourceGroups/%s/providers/Microsoft.Network/privateDnsZones/%s/PTR/%s"
+	return fmt.Sprintf(fmtString, id.SubscriptionId, id.ResourceGroup, id.PrivateDnsZoneName, id.PTRName)
+}
+
+// PtrRecordID parses a PtrRecord ID into an PtrRecordId struct
+func PtrRecordID(input string) (*PtrRecordId, error) {
+	id, err := resourceids.ParseAzureResourceID(input)
+	if err != nil {
+		return nil, err
+	}
+
+	resourceId := PtrRecordId{
+		SubscriptionId: id.SubscriptionID,
+		ResourceGroup:  id.ResourceGroup,
+	}
+
+	if resourceId.SubscriptionId == "" {
+		return nil, fmt.Errorf("ID was missing the 'subscriptions' element")
+	}
+
+	if resourceId.ResourceGroup == "" {
+		return nil, fmt.Errorf("ID was missing the 'resourceGroups' element")
+	}
+
+	if resourceId.PrivateDnsZoneName, err = id.PopSegment("privateDnsZones"); err != nil {
+		return nil, err
+	}
+	if resourceId.PTRName, err = id.PopSegment("PTR"); err != nil {
+		return nil, err
+	}
+
+	if err := id.ValidateNoEmptySegments(input); err != nil {
+		return nil, err
+	}
+
+	return &resourceId, nil
+}
diff --git b/internal/services/privatedns/parse/ptr_record_test.go a/internal/services/privatedns/parse/ptr_record_test.go
new file mode 100644
index 0000000000..b16c62f84a
--- /dev/null
+++ a/internal/services/privatedns/parse/ptr_record_test.go
@@ -0,0 +1,128 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"testing"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+var _ resourceids.Id = PtrRecordId{}
+
+func TestPtrRecordIDFormatter(t *testing.T) {
+	actual := NewPtrRecordID("12345678-1234-9876-4563-123456789012", "resGroup1", "privateDnsZone1", "ptr1").ID()
+	expected := "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/PTR/ptr1"
+	if actual != expected {
+		t.Fatalf("Expected %q but got %q", expected, actual)
+	}
+}
+
+func TestPtrRecordID(t *testing.T) {
+	testData := []struct {
+		Input    string
+		Error    bool
+		Expected *PtrRecordId
+	}{
+
+		{
+			// empty
+			Input: "",
+			Error: true,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Error: true,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Error: true,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Error: true,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Error: true,
+		},
+
+		{
+			// missing PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/",
+			Error: true,
+		},
+
+		{
+			// missing value for PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/",
+			Error: true,
+		},
+
+		{
+			// missing PTRName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/",
+			Error: true,
+		},
+
+		{
+			// missing value for PTRName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/PTR/",
+			Error: true,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/PTR/ptr1",
+			Expected: &PtrRecordId{
+				SubscriptionId:     "12345678-1234-9876-4563-123456789012",
+				ResourceGroup:      "resGroup1",
+				PrivateDnsZoneName: "privateDnsZone1",
+				PTRName:            "ptr1",
+			},
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.NETWORK/PRIVATEDNSZONES/PRIVATEDNSZONE1/PTR/PTR1",
+			Error: true,
+		},
+	}
+
+	for _, v := range testData {
+		t.Logf("[DEBUG] Testing %q", v.Input)
+
+		actual, err := PtrRecordID(v.Input)
+		if err != nil {
+			if v.Error {
+				continue
+			}
+
+			t.Fatalf("Expect a value but got an error: %s", err)
+		}
+		if v.Error {
+			t.Fatal("Expect an error but didn't get one")
+		}
+
+		if actual.SubscriptionId != v.Expected.SubscriptionId {
+			t.Fatalf("Expected %q but got %q for SubscriptionId", v.Expected.SubscriptionId, actual.SubscriptionId)
+		}
+		if actual.ResourceGroup != v.Expected.ResourceGroup {
+			t.Fatalf("Expected %q but got %q for ResourceGroup", v.Expected.ResourceGroup, actual.ResourceGroup)
+		}
+		if actual.PrivateDnsZoneName != v.Expected.PrivateDnsZoneName {
+			t.Fatalf("Expected %q but got %q for PrivateDnsZoneName", v.Expected.PrivateDnsZoneName, actual.PrivateDnsZoneName)
+		}
+		if actual.PTRName != v.Expected.PTRName {
+			t.Fatalf("Expected %q but got %q for PTRName", v.Expected.PTRName, actual.PTRName)
+		}
+	}
+}
diff --git b/internal/services/privatedns/parse/srv_record.go a/internal/services/privatedns/parse/srv_record.go
new file mode 100644
index 0000000000..9dffad560e
--- /dev/null
+++ a/internal/services/privatedns/parse/srv_record.go
@@ -0,0 +1,75 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+	"strings"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+type SrvRecordId struct {
+	SubscriptionId     string
+	ResourceGroup      string
+	PrivateDnsZoneName string
+	SRVName            string
+}
+
+func NewSrvRecordID(subscriptionId, resourceGroup, privateDnsZoneName, sRVName string) SrvRecordId {
+	return SrvRecordId{
+		SubscriptionId:     subscriptionId,
+		ResourceGroup:      resourceGroup,
+		PrivateDnsZoneName: privateDnsZoneName,
+		SRVName:            sRVName,
+	}
+}
+
+func (id SrvRecordId) String() string {
+	segments := []string{
+		fmt.Sprintf("S R V Name %q", id.SRVName),
+		fmt.Sprintf("Private Dns Zone Name %q", id.PrivateDnsZoneName),
+		fmt.Sprintf("Resource Group %q", id.ResourceGroup),
+	}
+	segmentsStr := strings.Join(segments, " / ")
+	return fmt.Sprintf("%s: (%s)", "Srv Record", segmentsStr)
+}
+
+func (id SrvRecordId) ID() string {
+	fmtString := "/subscriptions/%s/resourceGroups/%s/providers/Microsoft.Network/privateDnsZones/%s/SRV/%s"
+	return fmt.Sprintf(fmtString, id.SubscriptionId, id.ResourceGroup, id.PrivateDnsZoneName, id.SRVName)
+}
+
+// SrvRecordID parses a SrvRecord ID into an SrvRecordId struct
+func SrvRecordID(input string) (*SrvRecordId, error) {
+	id, err := resourceids.ParseAzureResourceID(input)
+	if err != nil {
+		return nil, err
+	}
+
+	resourceId := SrvRecordId{
+		SubscriptionId: id.SubscriptionID,
+		ResourceGroup:  id.ResourceGroup,
+	}
+
+	if resourceId.SubscriptionId == "" {
+		return nil, fmt.Errorf("ID was missing the 'subscriptions' element")
+	}
+
+	if resourceId.ResourceGroup == "" {
+		return nil, fmt.Errorf("ID was missing the 'resourceGroups' element")
+	}
+
+	if resourceId.PrivateDnsZoneName, err = id.PopSegment("privateDnsZones"); err != nil {
+		return nil, err
+	}
+	if resourceId.SRVName, err = id.PopSegment("SRV"); err != nil {
+		return nil, err
+	}
+
+	if err := id.ValidateNoEmptySegments(input); err != nil {
+		return nil, err
+	}
+
+	return &resourceId, nil
+}
diff --git b/internal/services/privatedns/parse/srv_record_test.go a/internal/services/privatedns/parse/srv_record_test.go
new file mode 100644
index 0000000000..2fceda33a8
--- /dev/null
+++ a/internal/services/privatedns/parse/srv_record_test.go
@@ -0,0 +1,128 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"testing"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+var _ resourceids.Id = SrvRecordId{}
+
+func TestSrvRecordIDFormatter(t *testing.T) {
+	actual := NewSrvRecordID("12345678-1234-9876-4563-123456789012", "resGroup1", "privateDnsZone1", "srv1").ID()
+	expected := "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/SRV/srv1"
+	if actual != expected {
+		t.Fatalf("Expected %q but got %q", expected, actual)
+	}
+}
+
+func TestSrvRecordID(t *testing.T) {
+	testData := []struct {
+		Input    string
+		Error    bool
+		Expected *SrvRecordId
+	}{
+
+		{
+			// empty
+			Input: "",
+			Error: true,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Error: true,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Error: true,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Error: true,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Error: true,
+		},
+
+		{
+			// missing PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/",
+			Error: true,
+		},
+
+		{
+			// missing value for PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/",
+			Error: true,
+		},
+
+		{
+			// missing SRVName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/",
+			Error: true,
+		},
+
+		{
+			// missing value for SRVName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/SRV/",
+			Error: true,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/SRV/srv1",
+			Expected: &SrvRecordId{
+				SubscriptionId:     "12345678-1234-9876-4563-123456789012",
+				ResourceGroup:      "resGroup1",
+				PrivateDnsZoneName: "privateDnsZone1",
+				SRVName:            "srv1",
+			},
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.NETWORK/PRIVATEDNSZONES/PRIVATEDNSZONE1/SRV/SRV1",
+			Error: true,
+		},
+	}
+
+	for _, v := range testData {
+		t.Logf("[DEBUG] Testing %q", v.Input)
+
+		actual, err := SrvRecordID(v.Input)
+		if err != nil {
+			if v.Error {
+				continue
+			}
+
+			t.Fatalf("Expect a value but got an error: %s", err)
+		}
+		if v.Error {
+			t.Fatal("Expect an error but didn't get one")
+		}
+
+		if actual.SubscriptionId != v.Expected.SubscriptionId {
+			t.Fatalf("Expected %q but got %q for SubscriptionId", v.Expected.SubscriptionId, actual.SubscriptionId)
+		}
+		if actual.ResourceGroup != v.Expected.ResourceGroup {
+			t.Fatalf("Expected %q but got %q for ResourceGroup", v.Expected.ResourceGroup, actual.ResourceGroup)
+		}
+		if actual.PrivateDnsZoneName != v.Expected.PrivateDnsZoneName {
+			t.Fatalf("Expected %q but got %q for PrivateDnsZoneName", v.Expected.PrivateDnsZoneName, actual.PrivateDnsZoneName)
+		}
+		if actual.SRVName != v.Expected.SRVName {
+			t.Fatalf("Expected %q but got %q for SRVName", v.Expected.SRVName, actual.SRVName)
+		}
+	}
+}
diff --git b/internal/services/privatedns/parse/txt_record.go a/internal/services/privatedns/parse/txt_record.go
new file mode 100644
index 0000000000..3eb8a1ba99
--- /dev/null
+++ a/internal/services/privatedns/parse/txt_record.go
@@ -0,0 +1,75 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+	"strings"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+type TxtRecordId struct {
+	SubscriptionId     string
+	ResourceGroup      string
+	PrivateDnsZoneName string
+	TXTName            string
+}
+
+func NewTxtRecordID(subscriptionId, resourceGroup, privateDnsZoneName, tXTName string) TxtRecordId {
+	return TxtRecordId{
+		SubscriptionId:     subscriptionId,
+		ResourceGroup:      resourceGroup,
+		PrivateDnsZoneName: privateDnsZoneName,
+		TXTName:            tXTName,
+	}
+}
+
+func (id TxtRecordId) String() string {
+	segments := []string{
+		fmt.Sprintf("T X T Name %q", id.TXTName),
+		fmt.Sprintf("Private Dns Zone Name %q", id.PrivateDnsZoneName),
+		fmt.Sprintf("Resource Group %q", id.ResourceGroup),
+	}
+	segmentsStr := strings.Join(segments, " / ")
+	return fmt.Sprintf("%s: (%s)", "Txt Record", segmentsStr)
+}
+
+func (id TxtRecordId) ID() string {
+	fmtString := "/subscriptions/%s/resourceGroups/%s/providers/Microsoft.Network/privateDnsZones/%s/TXT/%s"
+	return fmt.Sprintf(fmtString, id.SubscriptionId, id.ResourceGroup, id.PrivateDnsZoneName, id.TXTName)
+}
+
+// TxtRecordID parses a TxtRecord ID into an TxtRecordId struct
+func TxtRecordID(input string) (*TxtRecordId, error) {
+	id, err := resourceids.ParseAzureResourceID(input)
+	if err != nil {
+		return nil, err
+	}
+
+	resourceId := TxtRecordId{
+		SubscriptionId: id.SubscriptionID,
+		ResourceGroup:  id.ResourceGroup,
+	}
+
+	if resourceId.SubscriptionId == "" {
+		return nil, fmt.Errorf("ID was missing the 'subscriptions' element")
+	}
+
+	if resourceId.ResourceGroup == "" {
+		return nil, fmt.Errorf("ID was missing the 'resourceGroups' element")
+	}
+
+	if resourceId.PrivateDnsZoneName, err = id.PopSegment("privateDnsZones"); err != nil {
+		return nil, err
+	}
+	if resourceId.TXTName, err = id.PopSegment("TXT"); err != nil {
+		return nil, err
+	}
+
+	if err := id.ValidateNoEmptySegments(input); err != nil {
+		return nil, err
+	}
+
+	return &resourceId, nil
+}
diff --git b/internal/services/privatedns/parse/txt_record_test.go a/internal/services/privatedns/parse/txt_record_test.go
new file mode 100644
index 0000000000..4947041f90
--- /dev/null
+++ a/internal/services/privatedns/parse/txt_record_test.go
@@ -0,0 +1,128 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"testing"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+var _ resourceids.Id = TxtRecordId{}
+
+func TestTxtRecordIDFormatter(t *testing.T) {
+	actual := NewTxtRecordID("12345678-1234-9876-4563-123456789012", "resGroup1", "privateDnsZone1", "txt1").ID()
+	expected := "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/TXT/txt1"
+	if actual != expected {
+		t.Fatalf("Expected %q but got %q", expected, actual)
+	}
+}
+
+func TestTxtRecordID(t *testing.T) {
+	testData := []struct {
+		Input    string
+		Error    bool
+		Expected *TxtRecordId
+	}{
+
+		{
+			// empty
+			Input: "",
+			Error: true,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Error: true,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Error: true,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Error: true,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Error: true,
+		},
+
+		{
+			// missing PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/",
+			Error: true,
+		},
+
+		{
+			// missing value for PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/",
+			Error: true,
+		},
+
+		{
+			// missing TXTName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/",
+			Error: true,
+		},
+
+		{
+			// missing value for TXTName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/TXT/",
+			Error: true,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/TXT/txt1",
+			Expected: &TxtRecordId{
+				SubscriptionId:     "12345678-1234-9876-4563-123456789012",
+				ResourceGroup:      "resGroup1",
+				PrivateDnsZoneName: "privateDnsZone1",
+				TXTName:            "txt1",
+			},
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.NETWORK/PRIVATEDNSZONES/PRIVATEDNSZONE1/TXT/TXT1",
+			Error: true,
+		},
+	}
+
+	for _, v := range testData {
+		t.Logf("[DEBUG] Testing %q", v.Input)
+
+		actual, err := TxtRecordID(v.Input)
+		if err != nil {
+			if v.Error {
+				continue
+			}
+
+			t.Fatalf("Expect a value but got an error: %s", err)
+		}
+		if v.Error {
+			t.Fatal("Expect an error but didn't get one")
+		}
+
+		if actual.SubscriptionId != v.Expected.SubscriptionId {
+			t.Fatalf("Expected %q but got %q for SubscriptionId", v.Expected.SubscriptionId, actual.SubscriptionId)
+		}
+		if actual.ResourceGroup != v.Expected.ResourceGroup {
+			t.Fatalf("Expected %q but got %q for ResourceGroup", v.Expected.ResourceGroup, actual.ResourceGroup)
+		}
+		if actual.PrivateDnsZoneName != v.Expected.PrivateDnsZoneName {
+			t.Fatalf("Expected %q but got %q for PrivateDnsZoneName", v.Expected.PrivateDnsZoneName, actual.PrivateDnsZoneName)
+		}
+		if actual.TXTName != v.Expected.TXTName {
+			t.Fatalf("Expected %q but got %q for TXTName", v.Expected.TXTName, actual.TXTName)
+		}
+	}
+}
diff --git b/internal/services/privatedns/parse/virtual_network_link.go a/internal/services/privatedns/parse/virtual_network_link.go
new file mode 100644
index 0000000000..7ca1c96fdb
--- /dev/null
+++ a/internal/services/privatedns/parse/virtual_network_link.go
@@ -0,0 +1,75 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+	"strings"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+type VirtualNetworkLinkId struct {
+	SubscriptionId     string
+	ResourceGroup      string
+	PrivateDnsZoneName string
+	Name               string
+}
+
+func NewVirtualNetworkLinkID(subscriptionId, resourceGroup, privateDnsZoneName, name string) VirtualNetworkLinkId {
+	return VirtualNetworkLinkId{
+		SubscriptionId:     subscriptionId,
+		ResourceGroup:      resourceGroup,
+		PrivateDnsZoneName: privateDnsZoneName,
+		Name:               name,
+	}
+}
+
+func (id VirtualNetworkLinkId) String() string {
+	segments := []string{
+		fmt.Sprintf("Name %q", id.Name),
+		fmt.Sprintf("Private Dns Zone Name %q", id.PrivateDnsZoneName),
+		fmt.Sprintf("Resource Group %q", id.ResourceGroup),
+	}
+	segmentsStr := strings.Join(segments, " / ")
+	return fmt.Sprintf("%s: (%s)", "Virtual Network Link", segmentsStr)
+}
+
+func (id VirtualNetworkLinkId) ID() string {
+	fmtString := "/subscriptions/%s/resourceGroups/%s/providers/Microsoft.Network/privateDnsZones/%s/virtualNetworkLinks/%s"
+	return fmt.Sprintf(fmtString, id.SubscriptionId, id.ResourceGroup, id.PrivateDnsZoneName, id.Name)
+}
+
+// VirtualNetworkLinkID parses a VirtualNetworkLink ID into an VirtualNetworkLinkId struct
+func VirtualNetworkLinkID(input string) (*VirtualNetworkLinkId, error) {
+	id, err := resourceids.ParseAzureResourceID(input)
+	if err != nil {
+		return nil, err
+	}
+
+	resourceId := VirtualNetworkLinkId{
+		SubscriptionId: id.SubscriptionID,
+		ResourceGroup:  id.ResourceGroup,
+	}
+
+	if resourceId.SubscriptionId == "" {
+		return nil, fmt.Errorf("ID was missing the 'subscriptions' element")
+	}
+
+	if resourceId.ResourceGroup == "" {
+		return nil, fmt.Errorf("ID was missing the 'resourceGroups' element")
+	}
+
+	if resourceId.PrivateDnsZoneName, err = id.PopSegment("privateDnsZones"); err != nil {
+		return nil, err
+	}
+	if resourceId.Name, err = id.PopSegment("virtualNetworkLinks"); err != nil {
+		return nil, err
+	}
+
+	if err := id.ValidateNoEmptySegments(input); err != nil {
+		return nil, err
+	}
+
+	return &resourceId, nil
+}
diff --git b/internal/services/privatedns/parse/virtual_network_link_test.go a/internal/services/privatedns/parse/virtual_network_link_test.go
new file mode 100644
index 0000000000..1f45b56b1b
--- /dev/null
+++ a/internal/services/privatedns/parse/virtual_network_link_test.go
@@ -0,0 +1,128 @@
+package parse
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"testing"
+
+	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
+)
+
+var _ resourceids.Id = VirtualNetworkLinkId{}
+
+func TestVirtualNetworkLinkIDFormatter(t *testing.T) {
+	actual := NewVirtualNetworkLinkID("12345678-1234-9876-4563-123456789012", "resGroup1", "privateDnsZone1", "virtualNetworkLink1").ID()
+	expected := "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/virtualNetworkLinks/virtualNetworkLink1"
+	if actual != expected {
+		t.Fatalf("Expected %q but got %q", expected, actual)
+	}
+}
+
+func TestVirtualNetworkLinkID(t *testing.T) {
+	testData := []struct {
+		Input    string
+		Error    bool
+		Expected *VirtualNetworkLinkId
+	}{
+
+		{
+			// empty
+			Input: "",
+			Error: true,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Error: true,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Error: true,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Error: true,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Error: true,
+		},
+
+		{
+			// missing PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/",
+			Error: true,
+		},
+
+		{
+			// missing value for PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/",
+			Error: true,
+		},
+
+		{
+			// missing Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/",
+			Error: true,
+		},
+
+		{
+			// missing value for Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/virtualNetworkLinks/",
+			Error: true,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/virtualNetworkLinks/virtualNetworkLink1",
+			Expected: &VirtualNetworkLinkId{
+				SubscriptionId:     "12345678-1234-9876-4563-123456789012",
+				ResourceGroup:      "resGroup1",
+				PrivateDnsZoneName: "privateDnsZone1",
+				Name:               "virtualNetworkLink1",
+			},
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.NETWORK/PRIVATEDNSZONES/PRIVATEDNSZONE1/VIRTUALNETWORKLINKS/VIRTUALNETWORKLINK1",
+			Error: true,
+		},
+	}
+
+	for _, v := range testData {
+		t.Logf("[DEBUG] Testing %q", v.Input)
+
+		actual, err := VirtualNetworkLinkID(v.Input)
+		if err != nil {
+			if v.Error {
+				continue
+			}
+
+			t.Fatalf("Expect a value but got an error: %s", err)
+		}
+		if v.Error {
+			t.Fatal("Expect an error but didn't get one")
+		}
+
+		if actual.SubscriptionId != v.Expected.SubscriptionId {
+			t.Fatalf("Expected %q but got %q for SubscriptionId", v.Expected.SubscriptionId, actual.SubscriptionId)
+		}
+		if actual.ResourceGroup != v.Expected.ResourceGroup {
+			t.Fatalf("Expected %q but got %q for ResourceGroup", v.Expected.ResourceGroup, actual.ResourceGroup)
+		}
+		if actual.PrivateDnsZoneName != v.Expected.PrivateDnsZoneName {
+			t.Fatalf("Expected %q but got %q for PrivateDnsZoneName", v.Expected.PrivateDnsZoneName, actual.PrivateDnsZoneName)
+		}
+		if actual.Name != v.Expected.Name {
+			t.Fatalf("Expected %q but got %q for Name", v.Expected.Name, actual.Name)
+		}
+	}
+}
diff --git b/internal/services/privatedns/validate/a_record_id.go a/internal/services/privatedns/validate/a_record_id.go
new file mode 100644
index 0000000000..82a9bc6240
--- /dev/null
+++ a/internal/services/privatedns/validate/a_record_id.go
@@ -0,0 +1,23 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+
+	"github.com/hashicorp/terraform-provider-azurerm/internal/services/privatedns/parse"
+)
+
+func ARecordID(input interface{}, key string) (warnings []string, errors []error) {
+	v, ok := input.(string)
+	if !ok {
+		errors = append(errors, fmt.Errorf("expected %q to be a string", key))
+		return
+	}
+
+	if _, err := parse.ARecordID(v); err != nil {
+		errors = append(errors, err)
+	}
+
+	return
+}
diff --git b/internal/services/privatedns/validate/a_record_id_test.go a/internal/services/privatedns/validate/a_record_id_test.go
new file mode 100644
index 0000000000..137de55ed2
--- /dev/null
+++ a/internal/services/privatedns/validate/a_record_id_test.go
@@ -0,0 +1,88 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import "testing"
+
+func TestARecordID(t *testing.T) {
+	cases := []struct {
+		Input string
+		Valid bool
+	}{
+
+		{
+			// empty
+			Input: "",
+			Valid: false,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Valid: false,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Valid: false,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Valid: false,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Valid: false,
+		},
+
+		{
+			// missing PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/",
+			Valid: false,
+		},
+
+		{
+			// missing value for PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/",
+			Valid: false,
+		},
+
+		{
+			// missing AName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/",
+			Valid: false,
+		},
+
+		{
+			// missing value for AName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/A/",
+			Valid: false,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/A/eh1",
+			Valid: true,
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.NETWORK/PRIVATEDNSZONES/PRIVATEDNSZONE1/A/EH1",
+			Valid: false,
+		},
+	}
+	for _, tc := range cases {
+		t.Logf("[DEBUG] Testing Value %s", tc.Input)
+		_, errors := ARecordID(tc.Input, "test")
+		valid := len(errors) == 0
+
+		if tc.Valid != valid {
+			t.Fatalf("Expected %t but got %t", tc.Valid, valid)
+		}
+	}
+}
diff --git b/internal/services/privatedns/validate/aaaa_record_id.go a/internal/services/privatedns/validate/aaaa_record_id.go
new file mode 100644
index 0000000000..4a793181f7
--- /dev/null
+++ a/internal/services/privatedns/validate/aaaa_record_id.go
@@ -0,0 +1,23 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+
+	"github.com/hashicorp/terraform-provider-azurerm/internal/services/privatedns/parse"
+)
+
+func AaaaRecordID(input interface{}, key string) (warnings []string, errors []error) {
+	v, ok := input.(string)
+	if !ok {
+		errors = append(errors, fmt.Errorf("expected %q to be a string", key))
+		return
+	}
+
+	if _, err := parse.AaaaRecordID(v); err != nil {
+		errors = append(errors, err)
+	}
+
+	return
+}
diff --git b/internal/services/privatedns/validate/aaaa_record_id_test.go a/internal/services/privatedns/validate/aaaa_record_id_test.go
new file mode 100644
index 0000000000..722ad2db77
--- /dev/null
+++ a/internal/services/privatedns/validate/aaaa_record_id_test.go
@@ -0,0 +1,88 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import "testing"
+
+func TestAaaaRecordID(t *testing.T) {
+	cases := []struct {
+		Input string
+		Valid bool
+	}{
+
+		{
+			// empty
+			Input: "",
+			Valid: false,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Valid: false,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Valid: false,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Valid: false,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Valid: false,
+		},
+
+		{
+			// missing PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/",
+			Valid: false,
+		},
+
+		{
+			// missing value for PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/",
+			Valid: false,
+		},
+
+		{
+			// missing AAAAName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/",
+			Valid: false,
+		},
+
+		{
+			// missing value for AAAAName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/AAAA/",
+			Valid: false,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/AAAA/eheh1",
+			Valid: true,
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.NETWORK/PRIVATEDNSZONES/PRIVATEDNSZONE1/AAAA/EHEH1",
+			Valid: false,
+		},
+	}
+	for _, tc := range cases {
+		t.Logf("[DEBUG] Testing Value %s", tc.Input)
+		_, errors := AaaaRecordID(tc.Input, "test")
+		valid := len(errors) == 0
+
+		if tc.Valid != valid {
+			t.Fatalf("Expected %t but got %t", tc.Valid, valid)
+		}
+	}
+}
diff --git b/internal/services/privatedns/validate/cname_record_id.go a/internal/services/privatedns/validate/cname_record_id.go
new file mode 100644
index 0000000000..e7ba85b949
--- /dev/null
+++ a/internal/services/privatedns/validate/cname_record_id.go
@@ -0,0 +1,23 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+
+	"github.com/hashicorp/terraform-provider-azurerm/internal/services/privatedns/parse"
+)
+
+func CnameRecordID(input interface{}, key string) (warnings []string, errors []error) {
+	v, ok := input.(string)
+	if !ok {
+		errors = append(errors, fmt.Errorf("expected %q to be a string", key))
+		return
+	}
+
+	if _, err := parse.CnameRecordID(v); err != nil {
+		errors = append(errors, err)
+	}
+
+	return
+}
diff --git b/internal/services/privatedns/validate/cname_record_id_test.go a/internal/services/privatedns/validate/cname_record_id_test.go
new file mode 100644
index 0000000000..0a36d0a361
--- /dev/null
+++ a/internal/services/privatedns/validate/cname_record_id_test.go
@@ -0,0 +1,88 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import "testing"
+
+func TestCnameRecordID(t *testing.T) {
+	cases := []struct {
+		Input string
+		Valid bool
+	}{
+
+		{
+			// empty
+			Input: "",
+			Valid: false,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Valid: false,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Valid: false,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Valid: false,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Valid: false,
+		},
+
+		{
+			// missing PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/",
+			Valid: false,
+		},
+
+		{
+			// missing value for PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/",
+			Valid: false,
+		},
+
+		{
+			// missing CNAMEName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/",
+			Valid: false,
+		},
+
+		{
+			// missing value for CNAMEName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/CNAME/",
+			Valid: false,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/CNAME/name1",
+			Valid: true,
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.NETWORK/PRIVATEDNSZONES/PRIVATEDNSZONE1/CNAME/NAME1",
+			Valid: false,
+		},
+	}
+	for _, tc := range cases {
+		t.Logf("[DEBUG] Testing Value %s", tc.Input)
+		_, errors := CnameRecordID(tc.Input, "test")
+		valid := len(errors) == 0
+
+		if tc.Valid != valid {
+			t.Fatalf("Expected %t but got %t", tc.Valid, valid)
+		}
+	}
+}
diff --git b/internal/services/privatedns/validate/mx_record_id.go a/internal/services/privatedns/validate/mx_record_id.go
new file mode 100644
index 0000000000..101ee7ae36
--- /dev/null
+++ a/internal/services/privatedns/validate/mx_record_id.go
@@ -0,0 +1,23 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+
+	"github.com/hashicorp/terraform-provider-azurerm/internal/services/privatedns/parse"
+)
+
+func MxRecordID(input interface{}, key string) (warnings []string, errors []error) {
+	v, ok := input.(string)
+	if !ok {
+		errors = append(errors, fmt.Errorf("expected %q to be a string", key))
+		return
+	}
+
+	if _, err := parse.MxRecordID(v); err != nil {
+		errors = append(errors, err)
+	}
+
+	return
+}
diff --git b/internal/services/privatedns/validate/mx_record_id_test.go a/internal/services/privatedns/validate/mx_record_id_test.go
new file mode 100644
index 0000000000..3856df0dd6
--- /dev/null
+++ a/internal/services/privatedns/validate/mx_record_id_test.go
@@ -0,0 +1,88 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import "testing"
+
+func TestMxRecordID(t *testing.T) {
+	cases := []struct {
+		Input string
+		Valid bool
+	}{
+
+		{
+			// empty
+			Input: "",
+			Valid: false,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Valid: false,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Valid: false,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Valid: false,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Valid: false,
+		},
+
+		{
+			// missing PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/",
+			Valid: false,
+		},
+
+		{
+			// missing value for PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/",
+			Valid: false,
+		},
+
+		{
+			// missing MXName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/",
+			Valid: false,
+		},
+
+		{
+			// missing value for MXName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/MX/",
+			Valid: false,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/MX/mx1",
+			Valid: true,
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.NETWORK/PRIVATEDNSZONES/PRIVATEDNSZONE1/MX/MX1",
+			Valid: false,
+		},
+	}
+	for _, tc := range cases {
+		t.Logf("[DEBUG] Testing Value %s", tc.Input)
+		_, errors := MxRecordID(tc.Input, "test")
+		valid := len(errors) == 0
+
+		if tc.Valid != valid {
+			t.Fatalf("Expected %t but got %t", tc.Valid, valid)
+		}
+	}
+}
diff --git b/internal/services/privatedns/validate/private_dns_zone_id.go a/internal/services/privatedns/validate/private_dns_zone_id.go
new file mode 100644
index 0000000000..fc812dc9d7
--- /dev/null
+++ a/internal/services/privatedns/validate/private_dns_zone_id.go
@@ -0,0 +1,23 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+
+	"github.com/hashicorp/terraform-provider-azurerm/internal/services/privatedns/parse"
+)
+
+func PrivateDnsZoneID(input interface{}, key string) (warnings []string, errors []error) {
+	v, ok := input.(string)
+	if !ok {
+		errors = append(errors, fmt.Errorf("expected %q to be a string", key))
+		return
+	}
+
+	if _, err := parse.PrivateDnsZoneID(v); err != nil {
+		errors = append(errors, err)
+	}
+
+	return
+}
diff --git b/internal/services/privatedns/validate/private_dns_zone_id_test.go a/internal/services/privatedns/validate/private_dns_zone_id_test.go
new file mode 100644
index 0000000000..273feaa285
--- /dev/null
+++ a/internal/services/privatedns/validate/private_dns_zone_id_test.go
@@ -0,0 +1,76 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import "testing"
+
+func TestPrivateDnsZoneID(t *testing.T) {
+	cases := []struct {
+		Input string
+		Valid bool
+	}{
+
+		{
+			// empty
+			Input: "",
+			Valid: false,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Valid: false,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Valid: false,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Valid: false,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Valid: false,
+		},
+
+		{
+			// missing Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/",
+			Valid: false,
+		},
+
+		{
+			// missing value for Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/",
+			Valid: false,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1",
+			Valid: true,
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.NETWORK/PRIVATEDNSZONES/PRIVATEDNSZONE1",
+			Valid: false,
+		},
+	}
+	for _, tc := range cases {
+		t.Logf("[DEBUG] Testing Value %s", tc.Input)
+		_, errors := PrivateDnsZoneID(tc.Input, "test")
+		valid := len(errors) == 0
+
+		if tc.Valid != valid {
+			t.Fatalf("Expected %t but got %t", tc.Valid, valid)
+		}
+	}
+}
diff --git b/internal/services/privatedns/validate/ptr_record_id.go a/internal/services/privatedns/validate/ptr_record_id.go
new file mode 100644
index 0000000000..b135102f82
--- /dev/null
+++ a/internal/services/privatedns/validate/ptr_record_id.go
@@ -0,0 +1,23 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+
+	"github.com/hashicorp/terraform-provider-azurerm/internal/services/privatedns/parse"
+)
+
+func PtrRecordID(input interface{}, key string) (warnings []string, errors []error) {
+	v, ok := input.(string)
+	if !ok {
+		errors = append(errors, fmt.Errorf("expected %q to be a string", key))
+		return
+	}
+
+	if _, err := parse.PtrRecordID(v); err != nil {
+		errors = append(errors, err)
+	}
+
+	return
+}
diff --git b/internal/services/privatedns/validate/ptr_record_id_test.go a/internal/services/privatedns/validate/ptr_record_id_test.go
new file mode 100644
index 0000000000..8170964a3b
--- /dev/null
+++ a/internal/services/privatedns/validate/ptr_record_id_test.go
@@ -0,0 +1,88 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import "testing"
+
+func TestPtrRecordID(t *testing.T) {
+	cases := []struct {
+		Input string
+		Valid bool
+	}{
+
+		{
+			// empty
+			Input: "",
+			Valid: false,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Valid: false,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Valid: false,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Valid: false,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Valid: false,
+		},
+
+		{
+			// missing PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/",
+			Valid: false,
+		},
+
+		{
+			// missing value for PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/",
+			Valid: false,
+		},
+
+		{
+			// missing PTRName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/",
+			Valid: false,
+		},
+
+		{
+			// missing value for PTRName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/PTR/",
+			Valid: false,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/PTR/ptr1",
+			Valid: true,
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.NETWORK/PRIVATEDNSZONES/PRIVATEDNSZONE1/PTR/PTR1",
+			Valid: false,
+		},
+	}
+	for _, tc := range cases {
+		t.Logf("[DEBUG] Testing Value %s", tc.Input)
+		_, errors := PtrRecordID(tc.Input, "test")
+		valid := len(errors) == 0
+
+		if tc.Valid != valid {
+			t.Fatalf("Expected %t but got %t", tc.Valid, valid)
+		}
+	}
+}
diff --git b/internal/services/privatedns/validate/srv_record_id.go a/internal/services/privatedns/validate/srv_record_id.go
new file mode 100644
index 0000000000..0ee85e416d
--- /dev/null
+++ a/internal/services/privatedns/validate/srv_record_id.go
@@ -0,0 +1,23 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+
+	"github.com/hashicorp/terraform-provider-azurerm/internal/services/privatedns/parse"
+)
+
+func SrvRecordID(input interface{}, key string) (warnings []string, errors []error) {
+	v, ok := input.(string)
+	if !ok {
+		errors = append(errors, fmt.Errorf("expected %q to be a string", key))
+		return
+	}
+
+	if _, err := parse.SrvRecordID(v); err != nil {
+		errors = append(errors, err)
+	}
+
+	return
+}
diff --git b/internal/services/privatedns/validate/srv_record_id_test.go a/internal/services/privatedns/validate/srv_record_id_test.go
new file mode 100644
index 0000000000..cc109ab8cf
--- /dev/null
+++ a/internal/services/privatedns/validate/srv_record_id_test.go
@@ -0,0 +1,88 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import "testing"
+
+func TestSrvRecordID(t *testing.T) {
+	cases := []struct {
+		Input string
+		Valid bool
+	}{
+
+		{
+			// empty
+			Input: "",
+			Valid: false,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Valid: false,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Valid: false,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Valid: false,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Valid: false,
+		},
+
+		{
+			// missing PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/",
+			Valid: false,
+		},
+
+		{
+			// missing value for PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/",
+			Valid: false,
+		},
+
+		{
+			// missing SRVName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/",
+			Valid: false,
+		},
+
+		{
+			// missing value for SRVName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/SRV/",
+			Valid: false,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/SRV/srv1",
+			Valid: true,
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.NETWORK/PRIVATEDNSZONES/PRIVATEDNSZONE1/SRV/SRV1",
+			Valid: false,
+		},
+	}
+	for _, tc := range cases {
+		t.Logf("[DEBUG] Testing Value %s", tc.Input)
+		_, errors := SrvRecordID(tc.Input, "test")
+		valid := len(errors) == 0
+
+		if tc.Valid != valid {
+			t.Fatalf("Expected %t but got %t", tc.Valid, valid)
+		}
+	}
+}
diff --git b/internal/services/privatedns/validate/txt_record_id.go a/internal/services/privatedns/validate/txt_record_id.go
new file mode 100644
index 0000000000..8e9b0c9dfc
--- /dev/null
+++ a/internal/services/privatedns/validate/txt_record_id.go
@@ -0,0 +1,23 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+
+	"github.com/hashicorp/terraform-provider-azurerm/internal/services/privatedns/parse"
+)
+
+func TxtRecordID(input interface{}, key string) (warnings []string, errors []error) {
+	v, ok := input.(string)
+	if !ok {
+		errors = append(errors, fmt.Errorf("expected %q to be a string", key))
+		return
+	}
+
+	if _, err := parse.TxtRecordID(v); err != nil {
+		errors = append(errors, err)
+	}
+
+	return
+}
diff --git b/internal/services/privatedns/validate/txt_record_id_test.go a/internal/services/privatedns/validate/txt_record_id_test.go
new file mode 100644
index 0000000000..390bbcc051
--- /dev/null
+++ a/internal/services/privatedns/validate/txt_record_id_test.go
@@ -0,0 +1,88 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import "testing"
+
+func TestTxtRecordID(t *testing.T) {
+	cases := []struct {
+		Input string
+		Valid bool
+	}{
+
+		{
+			// empty
+			Input: "",
+			Valid: false,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Valid: false,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Valid: false,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Valid: false,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Valid: false,
+		},
+
+		{
+			// missing PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/",
+			Valid: false,
+		},
+
+		{
+			// missing value for PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/",
+			Valid: false,
+		},
+
+		{
+			// missing TXTName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/",
+			Valid: false,
+		},
+
+		{
+			// missing value for TXTName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/TXT/",
+			Valid: false,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/TXT/txt1",
+			Valid: true,
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.NETWORK/PRIVATEDNSZONES/PRIVATEDNSZONE1/TXT/TXT1",
+			Valid: false,
+		},
+	}
+	for _, tc := range cases {
+		t.Logf("[DEBUG] Testing Value %s", tc.Input)
+		_, errors := TxtRecordID(tc.Input, "test")
+		valid := len(errors) == 0
+
+		if tc.Valid != valid {
+			t.Fatalf("Expected %t but got %t", tc.Valid, valid)
+		}
+	}
+}
diff --git b/internal/services/privatedns/validate/virtual_network_link_id.go a/internal/services/privatedns/validate/virtual_network_link_id.go
new file mode 100644
index 0000000000..f538ea86ef
--- /dev/null
+++ a/internal/services/privatedns/validate/virtual_network_link_id.go
@@ -0,0 +1,23 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import (
+	"fmt"
+
+	"github.com/hashicorp/terraform-provider-azurerm/internal/services/privatedns/parse"
+)
+
+func VirtualNetworkLinkID(input interface{}, key string) (warnings []string, errors []error) {
+	v, ok := input.(string)
+	if !ok {
+		errors = append(errors, fmt.Errorf("expected %q to be a string", key))
+		return
+	}
+
+	if _, err := parse.VirtualNetworkLinkID(v); err != nil {
+		errors = append(errors, err)
+	}
+
+	return
+}
diff --git b/internal/services/privatedns/validate/virtual_network_link_id_test.go a/internal/services/privatedns/validate/virtual_network_link_id_test.go
new file mode 100644
index 0000000000..ad87350b81
--- /dev/null
+++ a/internal/services/privatedns/validate/virtual_network_link_id_test.go
@@ -0,0 +1,88 @@
+package validate
+
+// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten
+
+import "testing"
+
+func TestVirtualNetworkLinkID(t *testing.T) {
+	cases := []struct {
+		Input string
+		Valid bool
+	}{
+
+		{
+			// empty
+			Input: "",
+			Valid: false,
+		},
+
+		{
+			// missing SubscriptionId
+			Input: "/",
+			Valid: false,
+		},
+
+		{
+			// missing value for SubscriptionId
+			Input: "/subscriptions/",
+			Valid: false,
+		},
+
+		{
+			// missing ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
+			Valid: false,
+		},
+
+		{
+			// missing value for ResourceGroup
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/",
+			Valid: false,
+		},
+
+		{
+			// missing PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/",
+			Valid: false,
+		},
+
+		{
+			// missing value for PrivateDnsZoneName
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/",
+			Valid: false,
+		},
+
+		{
+			// missing Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/",
+			Valid: false,
+		},
+
+		{
+			// missing value for Name
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/virtualNetworkLinks/",
+			Valid: false,
+		},
+
+		{
+			// valid
+			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Network/privateDnsZones/privateDnsZone1/virtualNetworkLinks/virtualNetworkLink1",
+			Valid: true,
+		},
+
+		{
+			// upper-cased
+			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/RESGROUP1/PROVIDERS/MICROSOFT.NETWORK/PRIVATEDNSZONES/PRIVATEDNSZONE1/VIRTUALNETWORKLINKS/VIRTUALNETWORKLINK1",
+			Valid: false,
+		},
+	}
+	for _, tc := range cases {
+		t.Logf("[DEBUG] Testing Value %s", tc.Input)
+		_, errors := VirtualNetworkLinkID(tc.Input, "test")
+		valid := len(errors) == 0
+
+		if tc.Valid != valid {
+			t.Fatalf("Expected %t but got %t", tc.Valid, valid)
+		}
+	}
+}
diff --git b/internal/services/recoveryservices/recovery_services_vault_resource.go a/internal/services/recoveryservices/recovery_services_vault_resource.go
index 333e4e61c7..2b99c949bd 100644
--- b/internal/services/recoveryservices/recovery_services_vault_resource.go
+++ a/internal/services/recoveryservices/recovery_services_vault_resource.go
@@ -7,6 +7,8 @@ import (
 	"strings"
 	"time"
 
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+
 	"github.com/hashicorp/go-azure-helpers/lang/pointer"
 	"github.com/hashicorp/go-azure-helpers/lang/response"
 	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonids"
@@ -117,7 +119,7 @@ func resourceRecoveryServicesVault() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(vaults.SkuNameRSZero),
 					string(vaults.SkuNameStandard),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"storage_mode_type": {
diff --git b/internal/services/recoveryservices/site_recovery_replicated_vm_resource.go a/internal/services/recoveryservices/site_recovery_replicated_vm_resource.go
index 872f4eb0ee..d62fc13b8b 100644
--- b/internal/services/recoveryservices/site_recovery_replicated_vm_resource.go
+++ a/internal/services/recoveryservices/site_recovery_replicated_vm_resource.go
@@ -217,7 +217,7 @@ func resourceSiteRecoveryReplicatedVM() *pluginsdk.Resource {
 								string(disks.DiskStorageAccountTypesPremiumLRS),
 								string(disks.DiskStorageAccountTypesStandardSSDLRS),
 								string(disks.DiskStorageAccountTypesUltraSSDLRS),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 						"target_replica_disk_type": {
 							Type:     pluginsdk.TypeString,
@@ -228,7 +228,7 @@ func resourceSiteRecoveryReplicatedVM() *pluginsdk.Resource {
 								string(disks.DiskStorageAccountTypesPremiumLRS),
 								string(disks.DiskStorageAccountTypesStandardSSDLRS),
 								string(disks.DiskStorageAccountTypesUltraSSDLRS),
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 						"target_disk_encryption_set_id": {
 							Type:             pluginsdk.TypeString,
diff --git b/internal/services/redis/redis_cache_resource.go a/internal/services/redis/redis_cache_resource.go
index 3fb52ea195..43132b9c81 100644
--- b/internal/services/redis/redis_cache_resource.go
+++ a/internal/services/redis/redis_cache_resource.go
@@ -3,6 +3,7 @@ package redis
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"strconv"
 	"strings"
@@ -96,7 +97,8 @@ func resourceRedisCache() *pluginsdk.Resource {
 					string(redis.SkuNameBasic),
 					string(redis.SkuNameStandard),
 					string(redis.SkuNamePremium),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"minimum_tls_version": {
diff --git b/internal/services/redis/redis_linked_server_resource.go a/internal/services/redis/redis_linked_server_resource.go
index 7cf429fc97..21f5732bc5 100644
--- b/internal/services/redis/redis_linked_server_resource.go
+++ a/internal/services/redis/redis_linked_server_resource.go
@@ -3,6 +3,7 @@ package redis
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -66,7 +67,7 @@ func resourceRedisLinkedServer() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(redis.ReplicationRolePrimary),
 					string(redis.ReplicationRoleSecondary),
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"name": {
diff --git b/internal/services/resource/template_deployment_resource.go a/internal/services/resource/template_deployment_resource.go
index 967e8dad76..522c781070 100644
--- b/internal/services/resource/template_deployment_resource.go
+++ a/internal/services/resource/template_deployment_resource.go
@@ -4,6 +4,7 @@ import (
 	"context"
 	"encoding/json"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strconv"
 	"strings"
@@ -13,6 +14,7 @@ import (
 	"github.com/hashicorp/go-azure-helpers/resourcemanager/commonschema"
 	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/services/resource/migration"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/services/resource/parse"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/pluginsdk"
@@ -80,7 +82,8 @@ func resourceTemplateDeployment() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(resources.DeploymentModeComplete),
 					string(resources.DeploymentModeIncremental),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"outputs": {
diff --git b/internal/services/securitycenter/security_center_automation_resource.go a/internal/services/securitycenter/security_center_automation_resource.go
index 20389ea030..0f4e6d6564 100644
--- b/internal/services/securitycenter/security_center_automation_resource.go
+++ a/internal/services/securitycenter/security_center_automation_resource.go
@@ -2,6 +2,8 @@ package securitycenter
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strings"
 	"time"
@@ -98,7 +100,8 @@ func resourceSecurityCenterAutomation() *pluginsdk.Resource {
 								typeLogicApp,
 								typeLogAnalytics,
 								typeEventHub,
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"resource_id": {
@@ -177,7 +180,8 @@ func resourceSecurityCenterAutomation() *pluginsdk.Resource {
 														string(security.LesserThanOrEqualTo),
 														string(security.NotEquals),
 														string(security.StartsWith),
-													}, false),
+													}, features.CaseInsensitive()),
+													DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 												},
 												"property_type": {
 													Type:     pluginsdk.TypeString,
@@ -187,7 +191,8 @@ func resourceSecurityCenterAutomation() *pluginsdk.Resource {
 														string(security.String),
 														string(security.Boolean),
 														string(security.Number),
-													}, false),
+													}, features.CaseInsensitive()),
+													DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 												},
 											},
 										},
diff --git b/internal/services/securitycenter/security_center_server_vulnerability_assessment_resource.go a/internal/services/securitycenter/security_center_server_vulnerability_assessment_resource.go
index f52d923f81..6bc1417618 100644
--- b/internal/services/securitycenter/security_center_server_vulnerability_assessment_resource.go
+++ a/internal/services/securitycenter/security_center_server_vulnerability_assessment_resource.go
@@ -23,6 +23,7 @@ const (
 	hybridMachineProvider  = "Microsoft.HybridCompute"
 )
 
+// TODO: 3.0 - split this into two resources for VM and HybridVM
 func resourceServerVulnerabilityAssessment() *pluginsdk.Resource {
 	return &pluginsdk.Resource{
 		Create: resourceServerVulnerabilityAssessmentCreate,
diff --git b/internal/services/servicebus/servicebus_namespace_resource.go a/internal/services/servicebus/servicebus_namespace_resource.go
index e2b17981a8..dcc13c48ae 100644
--- b/internal/services/servicebus/servicebus_namespace_resource.go
+++ a/internal/services/servicebus/servicebus_namespace_resource.go
@@ -3,6 +3,8 @@ package servicebus
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strings"
 	"time"
@@ -82,7 +84,8 @@ func resourceServiceBusNamespace() *pluginsdk.Resource {
 					string(namespaces.SkuNameBasic),
 					string(namespaces.SkuNameStandard),
 					string(namespaces.SkuNamePremium),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"capacity": {
diff --git b/internal/services/servicebus/servicebus_queue_resource.go a/internal/services/servicebus/servicebus_queue_resource.go
index 127ff0c669..e669e42a62 100644
--- b/internal/services/servicebus/servicebus_queue_resource.go
+++ a/internal/services/servicebus/servicebus_queue_resource.go
@@ -43,6 +43,8 @@ func resourceServiceBusQueue() *pluginsdk.Resource {
 	}
 }
 
+// FORK: @stack72: Ensured the ResourceGroupName and NamespaceName was available as a computed attribute for use
+// in the servicebus mixins in Pulumi
 func resourceServicebusQueueSchema() map[string]*pluginsdk.Schema {
 	return map[string]*pluginsdk.Schema{
 		"name": {
@@ -163,6 +165,16 @@ func resourceServicebusQueueSchema() map[string]*pluginsdk.Schema {
 			ForceNew: true,
 		},
 
+		"resource_group_name": {
+			Type:     pluginsdk.TypeString,
+			Computed: true,
+		},
+
+		"namespace_name": {
+			Type:     pluginsdk.TypeString,
+			Computed: true,
+		},
+
 		"status": {
 			Type:     pluginsdk.TypeString,
 			Optional: true,
@@ -372,6 +384,8 @@ func resourceServiceBusQueueRead(d *pluginsdk.ResourceData, meta interface{}) er
 
 	d.Set("name", id.QueueName)
 	d.Set("namespace_id", namespaceId.ID())
+	d.Set("resource_group_name", id.ResourceGroupName)
+	d.Set("namespace_name", id.NamespaceName)
 
 	if model := resp.Model; model != nil {
 		if props := model.Properties; props != nil {
diff --git b/internal/services/servicebus/servicebus_subscription_rule_resource.go a/internal/services/servicebus/servicebus_subscription_rule_resource.go
index d968ab977c..195c70661c 100644
--- b/internal/services/servicebus/servicebus_subscription_rule_resource.go
+++ a/internal/services/servicebus/servicebus_subscription_rule_resource.go
@@ -2,6 +2,7 @@ package servicebus
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -66,7 +67,8 @@ func resourceServicebusSubscriptionRuleSchema() map[string]*pluginsdk.Schema {
 			ValidateFunc: validation.StringInSlice([]string{
 				string(subscriptions.FilterTypeSqlFilter),
 				string(subscriptions.FilterTypeCorrelationFilter),
-			}, false),
+			}, features.CaseInsensitive()),
+			DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 		},
 
 		"action": {
diff --git b/internal/services/servicebus/servicebus_topic_resource.go a/internal/services/servicebus/servicebus_topic_resource.go
index 59e2fddfc9..2f7391cf7f 100644
--- b/internal/services/servicebus/servicebus_topic_resource.go
+++ a/internal/services/servicebus/servicebus_topic_resource.go
@@ -2,6 +2,8 @@ package servicebus
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"time"
 
@@ -41,6 +43,8 @@ func resourceServiceBusTopic() *pluginsdk.Resource {
 	}
 }
 
+// FORK: @stack72: Ensured the ResourceGroupName and NamespaceName was available as a computed attribute for use
+// in the servicebus mixins in Pulumi
 func resourceServiceBusTopicSchema() map[string]*pluginsdk.Schema {
 	return map[string]*pluginsdk.Schema{
 		"name": {
@@ -65,7 +69,8 @@ func resourceServiceBusTopicSchema() map[string]*pluginsdk.Schema {
 			ValidateFunc: validation.StringInSlice([]string{
 				string(topics.EntityStatusActive),
 				string(topics.EntityStatusDisabled),
-			}, false),
+			}, features.CaseInsensitive()),
+			DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 		},
 
 		"auto_delete_on_idle": {
@@ -132,6 +137,16 @@ func resourceServiceBusTopicSchema() map[string]*pluginsdk.Schema {
 			Type:     pluginsdk.TypeBool,
 			Optional: true,
 		},
+
+		"resource_group_name": {
+			Type:     pluginsdk.TypeString,
+			Computed: true,
+		},
+
+		"namespace_name": {
+			Type:     pluginsdk.TypeString,
+			Computed: true,
+		},
 	}
 }
 
@@ -237,6 +252,10 @@ func resourceServiceBusTopicRead(d *pluginsdk.ResourceData, meta interface{}) er
 	d.Set("name", id.TopicName)
 	d.Set("namespace_id", topics.NewNamespaceID(id.SubscriptionId, id.ResourceGroupName, id.NamespaceName).ID())
 
+	// FORK: We must maintain these properties in order to keep Pulumi mixins working.
+	d.Set("namespace_name", id.NamespaceName)
+	d.Set("resource_group_name", id.ResourceGroupName)
+
 	if model := resp.Model; model != nil {
 		if props := model.Properties; props != nil {
 			status := ""
diff --git b/internal/services/sql/sql_database_resource.go a/internal/services/sql/sql_database_resource.go
index 858f598da3..b14a73a846 100644
--- b/internal/services/sql/sql_database_resource.go
+++ a/internal/services/sql/sql_database_resource.go
@@ -14,6 +14,7 @@ import (
 	"github.com/hashicorp/terraform-provider-azurerm/helpers/azure"
 	"github.com/hashicorp/terraform-provider-azurerm/helpers/tf"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/clients"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/services/mssql/validate"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/services/sql/parse"
 	"github.com/hashicorp/terraform-provider-azurerm/internal/tags"
@@ -467,7 +468,7 @@ func resourceSqlDatabaseSchema() map[string]*pluginsdk.Schema {
 				string(sql.CreateModeRecovery),
 				string(sql.CreateModeRestore),
 				string(sql.CreateModeRestoreLongTermRetentionBackup),
-			}, false),
+			}, features.CaseInsensitive()),
 		},
 
 		"import": {
@@ -491,7 +492,7 @@ func resourceSqlDatabaseSchema() map[string]*pluginsdk.Schema {
 						ValidateFunc: validation.StringInSlice([]string{
 							"StorageAccessKey",
 							"SharedAccessKey",
-						}, false),
+						}, features.CaseInsensitive()),
 					},
 					"administrator_login": {
 						Type:     pluginsdk.TypeString,
@@ -508,7 +509,7 @@ func resourceSqlDatabaseSchema() map[string]*pluginsdk.Schema {
 						ValidateFunc: validation.StringInSlice([]string{
 							"ADPassword",
 							"SQL",
-						}, false),
+						}, features.CaseInsensitive()),
 					},
 					"operation_mode": {
 						Type:     pluginsdk.TypeString,
@@ -516,7 +517,7 @@ func resourceSqlDatabaseSchema() map[string]*pluginsdk.Schema {
 						Default:  "Import",
 						ValidateFunc: validation.StringInSlice([]string{
 							"Import",
-						}, false),
+						}, features.CaseInsensitive()),
 					},
 				},
 			},
@@ -554,7 +555,7 @@ func resourceSqlDatabaseSchema() map[string]*pluginsdk.Schema {
 				string(sql.System),
 				string(sql.System2),
 				string(sql.Web),
-			}, false),
+			}, features.CaseInsensitive()),
 		},
 
 		"collation": {
@@ -639,7 +640,8 @@ func resourceSqlDatabaseSchema() map[string]*pluginsdk.Schema {
 								"Sql_Injection",
 								"Sql_Injection_Vulnerability",
 								"Access_Anomaly",
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 					},
 
@@ -650,7 +652,7 @@ func resourceSqlDatabaseSchema() map[string]*pluginsdk.Schema {
 						ValidateFunc: validation.StringInSlice([]string{
 							string(sql.SecurityAlertPolicyEmailAccountAdminsDisabled),
 							string(sql.SecurityAlertPolicyEmailAccountAdminsEnabled),
-						}, false),
+						}, features.CaseInsensitive()),
 					},
 
 					"email_addresses": {
@@ -676,7 +678,7 @@ func resourceSqlDatabaseSchema() map[string]*pluginsdk.Schema {
 							string(sql.SecurityAlertPolicyStateDisabled),
 							string(sql.SecurityAlertPolicyStateEnabled),
 							string(sql.SecurityAlertPolicyStateNew),
-						}, false),
+						}, features.CaseInsensitive()),
 					},
 
 					"storage_account_access_key": {
diff --git b/internal/services/sql/sql_managed_instance_resource.go a/internal/services/sql/sql_managed_instance_resource.go
index a324c81df6..7ab4a138dd 100644
--- b/internal/services/sql/sql_managed_instance_resource.go
+++ a/internal/services/sql/sql_managed_instance_resource.go
@@ -3,6 +3,8 @@ package sql
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strings"
 	"time"
@@ -110,7 +112,8 @@ func resourceArmSqlMiServer() *schema.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					"LicenseIncluded",
 					"BasePrice",
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"subnet_id": {
diff --git b/internal/services/sql/sql_server_resource.go a/internal/services/sql/sql_server_resource.go
index c701c9a1b0..e2e8cbb7c5 100644
--- b/internal/services/sql/sql_server_resource.go
+++ a/internal/services/sql/sql_server_resource.go
@@ -3,6 +3,8 @@ package sql
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strings"
 	"time"
@@ -115,7 +117,8 @@ func resourceSqlServer() *pluginsdk.Resource {
 									"Access_Anomaly",
 									"Data_Exfiltration",
 									"Unsafe_Action",
-								}, false),
+								}, features.CaseInsensitive()),
+								DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 							},
 						},
 
@@ -149,7 +152,7 @@ func resourceSqlServer() *pluginsdk.Resource {
 								string(sql.SecurityAlertPolicyStateDisabled),
 								string(sql.SecurityAlertPolicyStateEnabled),
 								string(sql.SecurityAlertPolicyStateNew), // Only kept for backward compatibility - TODO investigate if we can remove this in 4.0
-							}, false),
+							}, features.CaseInsensitive()),
 						},
 
 						"storage_account_access_key": {
diff --git b/internal/services/storage/storage_account_data_source.go a/internal/services/storage/storage_account_data_source.go
index 8a52e281be..ceb38abbaf 100644
--- b/internal/services/storage/storage_account_data_source.go
+++ a/internal/services/storage/storage_account_data_source.go
@@ -34,7 +34,8 @@ func dataSourceStorageAccount() *pluginsdk.Resource {
 				ValidateFunc: validate.StorageAccountName,
 			},
 
-			"resource_group_name": commonschema.ResourceGroupNameForDataSource(),
+			// Fork: Ensuring that ResourceGroupName is optional when getting a storage account
+			"resource_group_name": commonschema.ResourceGroupNameOptional(),
 
 			"location": commonschema.LocationComputed(),
 
@@ -331,11 +332,28 @@ func dataSourceStorageAccount() *pluginsdk.Resource {
 }
 
 func dataSourceStorageAccountRead(d *pluginsdk.ResourceData, meta interface{}) error {
+	storageClient := meta.(*clients.Client).Storage
 	client := meta.(*clients.Client).Storage.AccountsClient
 	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
 	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
 	defer cancel()
 
+	name := d.Get("name").(string)
+	var resourceGroup string
+	if rg, ok := d.GetOk("resource_group_name"); ok {
+		resourceGroup = rg.(string)
+	} else {
+		account, err := storageClient.FindAccount(ctx, name)
+		if err != nil {
+			return fmt.Errorf("Error retrieving Account %q: %s", name, err)
+		}
+		if account == nil {
+			return fmt.Errorf("Unable to locate Account %q", name)
+		}
+		resourceGroup = account.ResourceGroup
+		d.Set("resource_group_name", resourceGroup)
+	}
+
 	storageDomainSuffix, ok := meta.(*clients.Client).Account.Environment.Storage.DomainSuffix()
 	if !ok {
 		return fmt.Errorf("could not determine Storage domain suffix for environment %q", meta.(*clients.Client).Account.Environment.Name)
diff --git b/internal/services/storage/storage_account_resource.go a/internal/services/storage/storage_account_resource.go
index c69ba91952..3575f9de76 100644
--- b/internal/services/storage/storage_account_resource.go
+++ a/internal/services/storage/storage_account_resource.go
@@ -3,6 +3,8 @@ package storage
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"net/http"
 	"net/url"
@@ -126,8 +128,9 @@ func resourceStorageAccount() *pluginsdk.Resource {
 					string(storage.KindBlockBlobStorage),
 					string(storage.KindFileStorage),
 					string(storage.KindStorageV2),
-				}, false),
-				Default: string(storage.KindStorageV2),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
+				Default:          string(storage.KindStorageV2),
 			},
 
 			"account_tier": {
@@ -137,7 +140,8 @@ func resourceStorageAccount() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					"Standard",
 					"Premium",
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"account_replication_type": {
@@ -150,7 +154,8 @@ func resourceStorageAccount() *pluginsdk.Resource {
 					"RAGRS",
 					"GZRS",
 					"RAGZRS",
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			// Only valid for BlobStorage & StorageV2 accounts, defaults to "Hot" in create function
@@ -161,7 +166,8 @@ func resourceStorageAccount() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(storage.AccessTierCool),
 					string(storage.AccessTierHot),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"azure_files_authentication": {
@@ -379,7 +385,8 @@ func resourceStorageAccount() *pluginsdk.Resource {
 									string(storage.BypassLogging),
 									string(storage.BypassMetrics),
 									string(storage.BypassNone),
-								}, false),
+								}, features.CaseInsensitive()),
+								DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 							},
 							Set: pluginsdk.HashString,
 						},
diff --git b/internal/services/storage/storage_management_policy_resource.go a/internal/services/storage/storage_management_policy_resource.go
index 89eee77915..35dcb26dd2 100644
--- b/internal/services/storage/storage_management_policy_resource.go
+++ a/internal/services/storage/storage_management_policy_resource.go
@@ -131,10 +131,9 @@ func resourceStorageManagementPolicy() *pluginsdk.Resource {
 													ValidateFunc: validation.IntBetween(0, 99999),
 												},
 												"tier_to_cool_after_days_since_last_access_time_greater_than": {
-													Type:         pluginsdk.TypeInt,
-													Optional:     true,
-													Default:      -1,
-													ValidateFunc: validation.IntBetween(0, 99999),
+													Type:     pluginsdk.TypeInt,
+													Optional: true,
+													Default:  -1,
 												},
 												"auto_tier_to_hot_from_cool_enabled": {
 													Type:     pluginsdk.TypeBool,
diff --git b/internal/services/synapse/synapse_sql_pool_security_alert_policy_resource.go a/internal/services/synapse/synapse_sql_pool_security_alert_policy_resource.go
index f07c93c91c..5e9b8d0ac8 100644
--- b/internal/services/synapse/synapse_sql_pool_security_alert_policy_resource.go
+++ a/internal/services/synapse/synapse_sql_pool_security_alert_policy_resource.go
@@ -2,6 +2,8 @@ package synapse
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"time"
 
@@ -87,7 +89,8 @@ func resourceSynapseSqlPoolSecurityAlertPolicy() *pluginsdk.Resource {
 					string(synapse.SecurityAlertPolicyStateDisabled),
 					string(synapse.SecurityAlertPolicyStateEnabled),
 					string(synapse.SecurityAlertPolicyStateNew),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"storage_account_access_key": {
diff --git b/internal/services/synapse/synapse_workspace_security_alert_policy_resource.go a/internal/services/synapse/synapse_workspace_security_alert_policy_resource.go
index 3489104184..c84dd8082a 100644
--- b/internal/services/synapse/synapse_workspace_security_alert_policy_resource.go
+++ a/internal/services/synapse/synapse_workspace_security_alert_policy_resource.go
@@ -2,6 +2,8 @@ package synapse
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"time"
 
@@ -87,7 +89,8 @@ func resourceSynapseWorkspaceSecurityAlertPolicy() *pluginsdk.Resource {
 					string(synapse.SecurityAlertPolicyStateDisabled),
 					string(synapse.SecurityAlertPolicyStateEnabled),
 					string(synapse.SecurityAlertPolicyStateNew),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"storage_account_access_key": {
diff --git b/internal/services/trafficmanager/traffic_manager_profile_resource.go a/internal/services/trafficmanager/traffic_manager_profile_resource.go
index 288b279d0a..ac2775802c 100644
--- b/internal/services/trafficmanager/traffic_manager_profile_resource.go
+++ a/internal/services/trafficmanager/traffic_manager_profile_resource.go
@@ -2,6 +2,8 @@ package trafficmanager
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strconv"
 	"strings"
@@ -57,7 +59,8 @@ func resourceArmTrafficManagerProfile() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					string(profiles.ProfileStatusEnabled),
 					string(profiles.ProfileStatusDisabled),
-				}, false),
+				}, features.CaseInsensitive()),
+				DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 			},
 
 			"traffic_routing_method": {
@@ -133,7 +136,8 @@ func resourceArmTrafficManagerProfile() *pluginsdk.Resource {
 								string(profiles.MonitorProtocolHTTP),
 								string(profiles.MonitorProtocolHTTPS),
 								string(profiles.MonitorProtocolTCP),
-							}, false),
+							}, features.CaseInsensitive()),
+							DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 						},
 
 						"port": {
diff --git b/internal/services/web/app_service.go a/internal/services/web/app_service.go
index 441b9ab6f0..1dfa1864e6 100644
--- b/internal/services/web/app_service.go
+++ a/internal/services/web/app_service.go
@@ -2,6 +2,8 @@ package web
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strings"
 
@@ -258,7 +260,8 @@ func schemaAppServiceSiteConfig() *pluginsdk.Schema {
 						"v4.0",
 						"v5.0",
 						"v6.0",
-					}, false),
+					}, features.CaseInsensitive()),
+					DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 				},
 
 				"http2_enabled": {
@@ -290,7 +293,8 @@ func schemaAppServiceSiteConfig() *pluginsdk.Schema {
 						"JAVA",
 						"JETTY",
 						"TOMCAT",
-					}, false),
+					}, features.CaseInsensitive()),
+					DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 				},
 
 				"java_container_version": {
@@ -311,7 +315,8 @@ func schemaAppServiceSiteConfig() *pluginsdk.Schema {
 					ValidateFunc: validation.StringInSlice([]string{
 						string(web.ManagedPipelineModeClassic),
 						string(web.ManagedPipelineModeIntegrated),
-					}, false),
+					}, features.CaseInsensitive()),
+					DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 				},
 
 				"php_version": {
@@ -344,9 +349,10 @@ func schemaAppServiceSiteConfig() *pluginsdk.Schema {
 				},
 
 				"remote_debugging_version": {
-					Type:     pluginsdk.TypeString,
-					Optional: true,
-					Computed: true,
+					Type:             pluginsdk.TypeString,
+					Optional:         true,
+					Computed:         true,
+					DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 					ValidateFunc: validation.StringInSlice([]string{
 						"VS2017",
 						"VS2019",
diff --git b/internal/services/web/app_service_certificate_order_resource.go a/internal/services/web/app_service_certificate_order_resource.go
index 1ce60d4635..f18d4d6666 100644
--- b/internal/services/web/app_service_certificate_order_resource.go
+++ a/internal/services/web/app_service_certificate_order_resource.go
@@ -2,6 +2,7 @@ package web
 
 import (
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
 	"log"
 	"time"
 
@@ -110,7 +111,7 @@ func resourceAppServiceCertificateOrder() *pluginsdk.Resource {
 				ValidateFunc: validation.StringInSlice([]string{
 					"Standard",
 					"WildCard",
-				}, false),
+				}, features.CaseInsensitive()),
 			},
 
 			"validity_in_years": {
diff --git b/internal/services/web/function_app.go a/internal/services/web/function_app.go
index 797d940e7c..f29b4da953 100644
--- b/internal/services/web/function_app.go
+++ a/internal/services/web/function_app.go
@@ -3,6 +3,8 @@ package web
 import (
 	"context"
 	"fmt"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/features"
+	"github.com/hashicorp/terraform-provider-azurerm/internal/tf/suppress"
 	"log"
 	"strings"
 
@@ -161,7 +163,8 @@ func schemaAppServiceFunctionAppSiteConfig() *pluginsdk.Schema {
 						"v4.0",
 						"v5.0",
 						"v6.0",
-					}, false),
+					}, features.CaseInsensitive()),
+					DiffSuppressFunc: suppress.CaseDifferenceV2Only,
 				},
 
 				"vnet_route_all_enabled": {
diff --git b/internal/services/web/function_app_slot_resource.go a/internal/services/web/function_app_slot_resource.go
index f5da0048e7..08740abac0 100644
--- b/internal/services/web/function_app_slot_resource.go
+++ a/internal/services/web/function_app_slot_resource.go
@@ -256,6 +256,7 @@ func resourceFunctionAppSlotCreate(d *pluginsdk.ResourceData, meta interface{})
 
 	appServicePlanID := d.Get("app_service_plan_id").(string)
 	enabled := d.Get("enabled").(bool)
+	clientAffinityEnabled := d.Get("client_affinity_enabled").(bool)
 	httpsOnly := d.Get("https_only").(bool)
 	dailyMemoryTimeQuota := d.Get("daily_memory_time_quota").(int)
 	t := d.Get("tags").(map[string]interface{})
@@ -278,11 +279,12 @@ func resourceFunctionAppSlotCreate(d *pluginsdk.ResourceData, meta interface{})
 		Location: &location,
 		Tags:     tags.Expand(t),
 		SiteProperties: &web.SiteProperties{
-			ServerFarmID:         utils.String(appServicePlanID),
-			Enabled:              utils.Bool(enabled),
-			HTTPSOnly:            utils.Bool(httpsOnly),
-			DailyMemoryTimeQuota: utils.Int32(int32(dailyMemoryTimeQuota)),
-			SiteConfig:           &siteConfig,
+			ServerFarmID:          utils.String(appServicePlanID),
+			Enabled:               utils.Bool(enabled),
+			ClientAffinityEnabled: utils.Bool(clientAffinityEnabled),
+			HTTPSOnly:             utils.Bool(httpsOnly),
+			DailyMemoryTimeQuota:  utils.Int32(int32(dailyMemoryTimeQuota)),
+			SiteConfig:            &siteConfig,
 		},
 	}
 
@@ -346,6 +348,7 @@ func resourceFunctionAppSlotUpdate(d *pluginsdk.ResourceData, meta interface{})
 	}
 	appServicePlanID := d.Get("app_service_plan_id").(string)
 	enabled := d.Get("enabled").(bool)
+	clientAffinityEnabled := d.Get("client_affinity_enabled").(bool)
 	httpsOnly := d.Get("https_only").(bool)
 	dailyMemoryTimeQuota := d.Get("daily_memory_time_quota").(int)
 	t := d.Get("tags").(map[string]interface{})
@@ -378,11 +381,12 @@ func resourceFunctionAppSlotUpdate(d *pluginsdk.ResourceData, meta interface{})
 		Location: &location,
 		Tags:     tags.Expand(t),
 		SiteProperties: &web.SiteProperties{
-			ServerFarmID:         utils.String(appServicePlanID),
-			Enabled:              utils.Bool(enabled),
-			HTTPSOnly:            utils.Bool(httpsOnly),
-			DailyMemoryTimeQuota: utils.Int32(int32(dailyMemoryTimeQuota)),
-			SiteConfig:           &siteConfig,
+			ServerFarmID:          utils.String(appServicePlanID),
+			Enabled:               utils.Bool(enabled),
+			ClientAffinityEnabled: utils.Bool(clientAffinityEnabled),
+			HTTPSOnly:             utils.Bool(httpsOnly),
+			DailyMemoryTimeQuota:  utils.Int32(int32(dailyMemoryTimeQuota)),
+			SiteConfig:            &siteConfig,
 		},
 	}
 
diff --git b/internal/tf/suppress/deprecated_soon.go a/internal/tf/suppress/deprecated_soon.go
index 942454b4c8..d71e131240 100644
--- b/internal/tf/suppress/deprecated_soon.go
+++ a/internal/tf/suppress/deprecated_soon.go
@@ -14,3 +14,9 @@ func CaseDifference(_, old, new string, _ *schema.ResourceData) bool {
 	// fields should be case-sensitive, normalize the Azure Resource ID in the Read if required
 	return strings.EqualFold(old, new)
 }
+
+// CaseDifferenceV2Only only suppress case difference for v2.0.
+func CaseDifferenceV2Only(_, old, new string, _ *schema.ResourceData) bool {
+	// FORK: Force attributes to maintain case-insensitivity to avoid breaking changes in Pulumi programs.
+	return strings.EqualFold(old, new)
+}
diff --git b/website/docs/d/function_app_host_keys.html.markdown a/website/docs/d/function_app_host_keys.html.markdown
index 2f257bbaca..9b1088a716 100644
--- b/website/docs/d/function_app_host_keys.html.markdown
+++ a/website/docs/d/function_app_host_keys.html.markdown
@@ -19,8 +19,6 @@ data "azurerm_function_app_host_keys" "example" {
 }
 ```
 
-~> **Note:** All arguments including the secret value will be stored in the raw state as plain-text, including `default_function_key` and `primary_key`. [Read more about sensitive data in state](/docs/state/sensitive-data.html).
-
 ## Argument Reference
 
 The following arguments are supported:
diff --git b/website/docs/d/key_vault_certificate.html.markdown a/website/docs/d/key_vault_certificate.html.markdown
index d26f60d8b8..540f195562 100644
--- b/website/docs/d/key_vault_certificate.html.markdown
+++ a/website/docs/d/key_vault_certificate.html.markdown
@@ -10,9 +10,6 @@ description: |-
 
 Use this data source to access information about an existing Key Vault Certificate.
 
-~> **Note:** All arguments including the secret value will be stored in the raw state as plain-text.
-[Read more about sensitive data in state](/docs/state/sensitive-data.html).
-
 ## Example Usage
 
 ```hcl
diff --git b/website/docs/d/key_vault_certificate_data.html.markdown a/website/docs/d/key_vault_certificate_data.html.markdown
index c078bca045..c044e44b8f 100644
--- b/website/docs/d/key_vault_certificate_data.html.markdown
+++ a/website/docs/d/key_vault_certificate_data.html.markdown
@@ -10,9 +10,6 @@ description: |-
 
 Use this data source to access data stored in an existing Key Vault Certificate.
 
-~> **Note:** All arguments including the secret value will be stored in the raw state as plain-text.
-[Read more about sensitive data in state](/docs/state/sensitive-data.html).
-
 ~> **Note:** This data source uses the `GetSecret` function of the Azure API, to get the key of the certificate. Therefore you need secret/get permission
 
 ## Example Usage
diff --git b/website/docs/d/key_vault_key.html.markdown a/website/docs/d/key_vault_key.html.markdown
index 5e5b5fff00..5c1899919f 100644
--- b/website/docs/d/key_vault_key.html.markdown
+++ a/website/docs/d/key_vault_key.html.markdown
@@ -11,9 +11,6 @@ description: |-
 
 Use this data source to access information about an existing Key Vault Key.
 
-~> **Note:** All arguments including the secret value will be stored in the raw state as plain-text.
-[Read more about sensitive data in state](/docs/state/sensitive-data.html).
-
 ## Example Usage
 
 ```hcl
diff --git b/website/docs/d/key_vault_secret.html.markdown a/website/docs/d/key_vault_secret.html.markdown
index 5dbdb7d11e..2f4f4c2ff9 100644
--- b/website/docs/d/key_vault_secret.html.markdown
+++ a/website/docs/d/key_vault_secret.html.markdown
@@ -10,9 +10,6 @@ description: |-
 
 Use this data source to access information about an existing Key Vault Secret.
 
-~> **Note:** All arguments including the secret value will be stored in the raw state as plain-text.
-[Read more about sensitive data in state](/docs/state/sensitive-data.html).
-
 ## Example Usage
 
 ```hcl
diff --git b/website/docs/d/kubernetes_cluster.html.markdown a/website/docs/d/kubernetes_cluster.html.markdown
index d5d5705cca..dd2354836b 100644
--- b/website/docs/d/kubernetes_cluster.html.markdown
+++ a/website/docs/d/kubernetes_cluster.html.markdown
@@ -10,9 +10,6 @@ description: |-
 
 Use this data source to access information about an existing Managed Kubernetes Cluster (AKS).
 
-~> **Note:** All arguments including the client secret will be stored in the raw state as plain text.
-[Read more about sensitive data in the state](/docs/state/sensitive-data.html).
-
 ## Example Usage
 
 ```hcl
@@ -214,19 +211,6 @@ The `kube_admin_config` and `kube_config` blocks export the following:
 
 * `password` - A password or token used to authenticate to the Kubernetes cluster.
 
--> **NOTE:** It's possible to use these credentials with [the Kubernetes Provider](/docs/providers/kubernetes/index.html) like so:
-
-```hcl
-provider "kubernetes" {
-  host                   = data.azurerm_kubernetes_cluster.main.kube_config.0.host
-  username               = data.azurerm_kubernetes_cluster.main.kube_config.0.username
-  password               = data.azurerm_kubernetes_cluster.main.kube_config.0.password
-  client_certificate     = base64decode(data.azurerm_kubernetes_cluster.main.kube_config.0.client_certificate)
-  client_key             = base64decode(data.azurerm_kubernetes_cluster.main.kube_config.0.client_key)
-  cluster_ca_certificate = base64decode(data.azurerm_kubernetes_cluster.main.kube_config.0.cluster_ca_certificate)
-}
-```
-
 ---
 
 A `linux_profile` block exports the following:
diff --git b/website/docs/d/management_group.html.markdown a/website/docs/d/management_group.html.markdown
index 9cf191cf62..28c31a08a4 100644
--- b/website/docs/d/management_group.html.markdown
+++ a/website/docs/d/management_group.html.markdown
@@ -30,7 +30,7 @@ The following arguments are supported:
 
 * `display_name` - Specifies the display name of this Management Group.
 
-~> **NOTE** Whilst multiple management groups may share the same display name, when filtering Terraform expects a single management group to be found with this name.  
+~> **NOTE** Whilst multiple management groups may share the same display name, when filtering, the provider expects a single management group to be found with this name.  
 
 ## Attributes Reference
 
diff --git b/website/docs/d/monitor_action_group.html.markdown a/website/docs/d/monitor_action_group.html.markdown
index c95b92e697..24559cf509 100644
--- b/website/docs/d/monitor_action_group.html.markdown
+++ a/website/docs/d/monitor_action_group.html.markdown
@@ -14,7 +14,7 @@ Use this data source to access the properties of an Action Group.
 
 ```hcl
 data "azurerm_monitor_action_group" "example" {
-  resource_group_name = "terraform-example-rg"
+  resource_group_name = "example-rg"
   name                = "tfex-actiongroup"
 }
 
diff --git b/website/docs/d/monitor_scheduled_query_rules_alert.html.markdown a/website/docs/d/monitor_scheduled_query_rules_alert.html.markdown
index f11de6f47c..ea6c66c3ad 100644
--- b/website/docs/d/monitor_scheduled_query_rules_alert.html.markdown
+++ a/website/docs/d/monitor_scheduled_query_rules_alert.html.markdown
@@ -14,7 +14,7 @@ Use this data source to access the properties of an AlertingAction scheduled que
 
 ```hcl
 data "azurerm_monitor_scheduled_query_rules_alert" "example" {
-  resource_group_name = "terraform-example-rg"
+  resource_group_name = "example-rg"
   name                = "tfex-queryrule"
 }
 
diff --git b/website/docs/d/monitor_scheduled_query_rules_log.html.markdown a/website/docs/d/monitor_scheduled_query_rules_log.html.markdown
index 7fc07ee956..5e4efd6004 100644
--- b/website/docs/d/monitor_scheduled_query_rules_log.html.markdown
+++ a/website/docs/d/monitor_scheduled_query_rules_log.html.markdown
@@ -14,7 +14,7 @@ Use this data source to access the properties of a LogToMetricAction scheduled q
 
 ```hcl
 data "azurerm_monitor_scheduled_query_rules_log" "example" {
-  resource_group_name = "terraform-example-rg"
+  resource_group_name = "example-rg"
   name                = "tfex-queryrule"
 }
 
diff --git b/website/docs/d/notification_hub.html.markdown a/website/docs/d/notification_hub.html.markdown
index ea7d221980..8fdba45633 100644
--- b/website/docs/d/notification_hub.html.markdown
+++ a/website/docs/d/notification_hub.html.markdown
@@ -50,7 +50,7 @@ A `apns_credential` block exports:
 
 * `application_mode` - The Application Mode which defines which server the APNS Messages should be sent to. Possible values are `Production` and `Sandbox`.
 
-* `bundle_id` - The Bundle ID of the iOS/macOS application to send push notifications for, such as `com.hashicorp.example`.
+* `bundle_id` - The Bundle ID of the iOS/macOS application to send push notifications for, such as `com.org.example`.
 
 * `key_id` - The Apple Push Notifications Service (APNS) Key.
 
diff --git b/website/docs/d/policy_set_definition.html.markdown a/website/docs/d/policy_set_definition.html.markdown
index 96e5faf55a..8d6316a6e8 100644
--- b/website/docs/d/policy_set_definition.html.markdown
+++ a/website/docs/d/policy_set_definition.html.markdown
@@ -58,8 +58,6 @@ An `policy_definition_reference` block exports the following:
 
 * `parameters` - The mapping of the parameter values for the referenced policy rule. The keys are the parameter names.
 
--> **NOTE:** Since Terraform's concept of a map requires all of the elements to be of the same type, the value in parameters will all be converted to string type.
-
 ~> **Note:** This field only supports String fields and is deprecated in favour of the `parameters_values` field
 
 * `parameter_values` - The parameter values for the referenced policy rule. This field is a JSON object.
diff --git b/website/docs/d/redis_cache.html.markdown a/website/docs/d/redis_cache.html.markdown
index 0448d9004a..3f87368621 100644
--- b/website/docs/d/redis_cache.html.markdown
+++ a/website/docs/d/redis_cache.html.markdown
@@ -106,8 +106,6 @@ A `redis_configuration` block exports the following:
 
 * `rdb_storage_connection_string` - The Connection String to the Storage Account. Only supported for Premium SKUs.
 
-~> **Note:** There's a bug in the Redis API where the original storage connection string isn't being returned, which [is being tracked in this issue](https://github.com/Azure/azure-rest-api-specs/issues/3037). In the interim you can use [the `ignore_changes` attribute to ignore changes to this field](https://www.terraform.io/language/meta-arguments/lifecycle#ignore_changess) e.g.:
-
 ## Timeouts
 
 The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:
diff --git b/website/docs/d/storage_account_blob_container_sas.html.markdown a/website/docs/d/storage_account_blob_container_sas.html.markdown
index fe351b7ba4..4e89e00f49 100644
--- b/website/docs/d/storage_account_blob_container_sas.html.markdown
+++ a/website/docs/d/storage_account_blob_container_sas.html.markdown
@@ -68,7 +68,7 @@ output "sas_url_query_string" {
 
 ## Argument Reference
 
-* `connection_string` - The connection string for the storage account to which this SAS applies. Typically directly from the `primary_connection_string` attribute of a terraform created `azurerm_storage_account` resource.
+* `connection_string` - The connection string for the storage account to which this SAS applies. Typically directly from the `primary_connection_string` attribute of an `azurerm_storage_account` resource.
 
 * `container_name` - Name of the container.
 
diff --git b/website/docs/d/storage_account_sas.html.markdown a/website/docs/d/storage_account_sas.html.markdown
index a078984a7b..1dff00245c 100644
--- b/website/docs/d/storage_account_sas.html.markdown
+++ a/website/docs/d/storage_account_sas.html.markdown
@@ -78,7 +78,7 @@ output "sas_url_query_string" {
 
 ## Argument Reference
 
-* `connection_string` - The connection string for the storage account to which this SAS applies. Typically directly from the `primary_connection_string` attribute of a terraform created `azurerm_storage_account` resource.
+* `connection_string` - (Required) The connection string for the storage account to which this SAS applies. Typically directly from the `primary_connection_string` attribute of a `azurerm_storage_account` resource.
 * `https_only` - (Optional) Only permit `https` access. If `false`, both `http` and `https` are permitted. Defaults to `true`.
 * `ip_addresses` - (Optional) IP address, or a range of IP addresses, from which to accept requests. When specifying a range, note that the range is inclusive.  
 * `signed_version` - (Optional) Specifies the signed storage service version to use to authorize requests made with this account SAS. Defaults to `2017-07-29`.
diff --git b/website/docs/guides/3.0-upgrade-guide.html.markdown a/website/docs/guides/3.0-upgrade-guide.html.markdown
index 4cc96679d7..510129c9ff 100644
--- b/website/docs/guides/3.0-upgrade-guide.html.markdown
+++ a/website/docs/guides/3.0-upgrade-guide.html.markdown
@@ -222,6 +222,7 @@ The `azurerm_app_service` data source has been superseded by the `azurerm_linux_
 
 The `azurerm_app_service_plan` data source has been superseded by the `azurerm_service_plan` data source. Whilst this resource will continue to be available in the 2.x and 3.x releases it is feature-frozen for compatibility purposes, will no longer receive any updates and will be removed in a future major release of the Azure Provider.
 
+
 ### Data Source: `azurerm_backup_policy_file_share`
 
 The field `tags` will be removed since the API no longer supports these on this resource.
@@ -230,6 +231,7 @@ The field `tags` will be removed since the API no longer supports these on this
 
 The field `tags` will be removed since the API no longer supports these on this resource.
 
+
 ### Data Source: `azurerm_batch_pool`
 
 The deprecated field `start_task.environment` will be removed in favour of the `start_task.common_environment_properties` properties.
diff --git b/website/docs/r/api_management.html.markdown a/website/docs/r/api_management.html.markdown
index 7237a8c21b..98e66a4a8d 100644
--- b/website/docs/r/api_management.html.markdown
+++ a/website/docs/r/api_management.html.markdown
@@ -31,7 +31,7 @@ resource "azurerm_api_management" "example" {
   location            = azurerm_resource_group.example.location
   resource_group_name = azurerm_resource_group.example.name
   publisher_name      = "My Company"
-  publisher_email     = "company@terraform.io"
+  publisher_email     = "company@exmaple.com"
 
   sku_name = "Developer_1"
 }
diff --git b/website/docs/r/api_management_api.html.markdown a/website/docs/r/api_management_api.html.markdown
index 3575c8f9d4..46d8629c68 100644
--- b/website/docs/r/api_management_api.html.markdown
+++ a/website/docs/r/api_management_api.html.markdown
@@ -23,7 +23,7 @@ resource "azurerm_api_management" "example" {
   location            = azurerm_resource_group.example.location
   resource_group_name = azurerm_resource_group.example.name
   publisher_name      = "My Company"
-  publisher_email     = "company@terraform.io"
+  publisher_email     = "company@exmaple.com"
 
   sku_name = "Developer_1"
 }
@@ -136,7 +136,7 @@ A `license` block supports the following:
 
 A `oauth2_authorization` block supports the following:
 
-* `authorization_server_name` - (Required) OAuth authorization server identifier. The name of an [OAuth2 Authorization Server](https://www.terraform.io/docs/providers/azurerm/r/api_management_authorization_server.html).
+* `authorization_server_name` - (Required) OAuth authorization server identifier. The name of an OAuth2 Authorization Server.
 
 * `scope` - (Optional) Operations scope.
 
@@ -144,7 +144,7 @@ A `oauth2_authorization` block supports the following:
 
 A `openid_authentication` block supports the following:
 
-* `openid_provider_name` - (Required) OpenID Connect provider identifier. The name of an [OpenID Connect Provider](https://www.terraform.io/docs/providers/azurerm/r/api_management_openid_connect_provider.html).
+* `openid_provider_name` - (Required) OpenID Connect provider identifier. The name of an OpenID Connect Provider.
 
 * `bearer_token_sending_methods` - (Optional) How to send token to the server. A list of zero or more methods. Valid values are `authorizationHeader` and `query`.
 
diff --git b/website/docs/r/api_management_api_diagnostic.html.markdown a/website/docs/r/api_management_api_diagnostic.html.markdown
index e4924a5439..ea46c447fa 100644
--- b/website/docs/r/api_management_api_diagnostic.html.markdown
+++ a/website/docs/r/api_management_api_diagnostic.html.markdown
@@ -34,7 +34,7 @@ resource "azurerm_api_management" "example" {
   location            = azurerm_resource_group.example.location
   resource_group_name = azurerm_resource_group.example.name
   publisher_name      = "My Company"
-  publisher_email     = "company@terraform.io"
+  publisher_email     = "company@mycompany.io"
   sku_name            = "Developer_1"
 }
 
diff --git b/website/docs/r/api_management_api_policy.html.markdown a/website/docs/r/api_management_api_policy.html.markdown
index 9f74d4d537..9c7706ffbe 100644
--- b/website/docs/r/api_management_api_policy.html.markdown
+++ a/website/docs/r/api_management_api_policy.html.markdown
@@ -45,7 +45,7 @@ The following arguments are supported:
 
 * `resource_group_name` - (Required) The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
 
-* `xml_content` - (Optional) The XML Content for this Policy as a string. An XML file can be used here with Terraform's [file function](https://www.terraform.io/docs/configuration/functions/file.html) that is similar to Microsoft's `PolicyFilePath` option.
+* `xml_content` - (Optional) The XML Content for this Policy as a string.
 
 * `xml_link` - (Optional) A link to a Policy XML Document, which must be publicly available.
 
diff --git b/website/docs/r/api_management_backend.html.markdown a/website/docs/r/api_management_backend.html.markdown
index ed8cf79b66..2eee7160e6 100644
--- b/website/docs/r/api_management_backend.html.markdown
+++ a/website/docs/r/api_management_backend.html.markdown
@@ -23,7 +23,7 @@ resource "azurerm_api_management" "example" {
   location            = azurerm_resource_group.example.location
   resource_group_name = azurerm_resource_group.example.name
   publisher_name      = "My Company"
-  publisher_email     = "company@terraform.io"
+  publisher_email     = "company@exmaple.com"
 
   sku_name = "Developer_1"
 }
diff --git b/website/docs/r/api_management_certificate.html.markdown a/website/docs/r/api_management_certificate.html.markdown
index 8c9040b2e3..598c6a5b9b 100644
--- b/website/docs/r/api_management_certificate.html.markdown
+++ a/website/docs/r/api_management_certificate.html.markdown
@@ -27,7 +27,7 @@ resource "azurerm_api_management" "example" {
   location            = azurerm_resource_group.example.location
   resource_group_name = azurerm_resource_group.example.name
   publisher_name      = "My Company"
-  publisher_email     = "company@terraform.io"
+  publisher_email     = "company@exmaple.com"
 
   sku_name = "Developer_1"
 }
diff --git b/website/docs/r/api_management_custom_domain.html.markdown a/website/docs/r/api_management_custom_domain.html.markdown
index fe0d28921f..88823eb505 100644
--- b/website/docs/r/api_management_custom_domain.html.markdown
+++ a/website/docs/r/api_management_custom_domain.html.markdown
@@ -12,7 +12,7 @@ Manages a API Management Custom Domain.
 
 ## Disclaimers
 
-~> **Note:** It's possible to define Custom Domains both within [the `azurerm_api_management` resource](api_management.html) via the `hostname_configurations` block and by using this resource. However it's not possible to use both methods to manage Custom Domains within an API Management Service, since there will be conflicts.
+~> **Note:** It's possible to define Custom Domains both within the `azurerm_api_management` resource via the `hostname_configurations` block and by using this resource. However it's not possible to use both methods to manage Custom Domains within an API Management Service, since there will be conflicts.
 
 ## Example Usage
 
@@ -148,7 +148,7 @@ A `developer_portal`, `management`, `portal` or `scm` block supports the followi
 
 A `gateway` block supports the following:
 
--> **Tip:** The default gateway hostname ending with `.azure-api.net` must not be added as it will be automatically created by Azure and ignored by Terraform.
+-> **Tip:** The default gateway hostname ending with `.azure-api.net` must not be added as it will be automatically created by Azure and ignored by this provider.
 
 * `host_name` - (Required) The Hostname to use for the API Proxy Endpoint.
 
diff --git b/website/docs/r/api_management_diagnostic.html.markdown a/website/docs/r/api_management_diagnostic.html.markdown
index 5ff71b2f10..d42851f157 100644
--- b/website/docs/r/api_management_diagnostic.html.markdown
+++ a/website/docs/r/api_management_diagnostic.html.markdown
@@ -34,7 +34,7 @@ resource "azurerm_api_management" "example" {
   location            = azurerm_resource_group.example.location
   resource_group_name = azurerm_resource_group.example.name
   publisher_name      = "My Company"
-  publisher_email     = "company@terraform.io"
+  publisher_email     = "company@mycompany.io"
   sku_name            = "Developer_1"
 }
 resource "azurerm_api_management_logger" "example" {
diff --git b/website/docs/r/api_management_identity_provider_aad.html.markdown a/website/docs/r/api_management_identity_provider_aad.html.markdown
index 194ca67265..dbae2beaeb 100644
--- b/website/docs/r/api_management_identity_provider_aad.html.markdown
+++ a/website/docs/r/api_management_identity_provider_aad.html.markdown
@@ -23,7 +23,7 @@ resource "azurerm_api_management" "example" {
   location            = azurerm_resource_group.example.location
   resource_group_name = azurerm_resource_group.example.name
   publisher_name      = "My Company"
-  publisher_email     = "company@terraform.io"
+  publisher_email     = "company@mycompany.io"
   sku_name            = "Developer_1"
 }
 
diff --git b/website/docs/r/api_management_identity_provider_facebook.html.markdown a/website/docs/r/api_management_identity_provider_facebook.html.markdown
index 894322db3e..bacf715ae8 100644
--- b/website/docs/r/api_management_identity_provider_facebook.html.markdown
+++ a/website/docs/r/api_management_identity_provider_facebook.html.markdown
@@ -23,7 +23,7 @@ resource "azurerm_api_management" "example" {
   location            = azurerm_resource_group.example.location
   resource_group_name = azurerm_resource_group.example.name
   publisher_name      = "My Company"
-  publisher_email     = "company@terraform.io"
+  publisher_email     = "company@mycompany.io"
   sku_name            = "Developer_1"
 }
 
diff --git b/website/docs/r/api_management_identity_provider_google.html.markdown a/website/docs/r/api_management_identity_provider_google.html.markdown
index cb5e1afad6..5a3d619a8a 100644
--- b/website/docs/r/api_management_identity_provider_google.html.markdown
+++ a/website/docs/r/api_management_identity_provider_google.html.markdown
@@ -23,7 +23,7 @@ resource "azurerm_api_management" "example" {
   location            = azurerm_resource_group.example.location
   resource_group_name = azurerm_resource_group.example.name
   publisher_name      = "My Company"
-  publisher_email     = "company@terraform.io"
+  publisher_email     = "company@mycompany.io"
   sku_name            = "Developer_1"
 }
 
diff --git b/website/docs/r/api_management_identity_provider_microsoft.html.markdown a/website/docs/r/api_management_identity_provider_microsoft.html.markdown
index 8efa29e292..2ebc6e5dc2 100644
--- b/website/docs/r/api_management_identity_provider_microsoft.html.markdown
+++ a/website/docs/r/api_management_identity_provider_microsoft.html.markdown
@@ -23,7 +23,7 @@ resource "azurerm_api_management" "example" {
   location            = azurerm_resource_group.example.location
   resource_group_name = azurerm_resource_group.example.name
   publisher_name      = "My Company"
-  publisher_email     = "company@terraform.io"
+  publisher_email     = "company@mycompany.io"
   sku_name            = "Developer_1"
 }
 
diff --git b/website/docs/r/api_management_identity_provider_twitter.html.markdown a/website/docs/r/api_management_identity_provider_twitter.html.markdown
index 812c4d4e0d..eafc1ba3cf 100644
--- b/website/docs/r/api_management_identity_provider_twitter.html.markdown
+++ a/website/docs/r/api_management_identity_provider_twitter.html.markdown
@@ -23,7 +23,7 @@ resource "azurerm_api_management" "example" {
   location            = azurerm_resource_group.example.location
   resource_group_name = azurerm_resource_group.example.name
   publisher_name      = "My Company"
-  publisher_email     = "company@terraform.io"
+  publisher_email     = "company@mycompany.io"
   sku_name            = "Developer_1"
 }
 
diff --git b/website/docs/r/api_management_logger.html.markdown a/website/docs/r/api_management_logger.html.markdown
index ffbca1bdf3..306815f47a 100644
--- b/website/docs/r/api_management_logger.html.markdown
+++ a/website/docs/r/api_management_logger.html.markdown
@@ -30,7 +30,7 @@ resource "azurerm_api_management" "example" {
   location            = azurerm_resource_group.example.location
   resource_group_name = azurerm_resource_group.example.name
   publisher_name      = "My Company"
-  publisher_email     = "company@terraform.io"
+  publisher_email     = "company@exmaple.com"
 
   sku_name = "Developer_1"
 }
diff --git b/website/docs/r/api_management_named_value.html.markdown a/website/docs/r/api_management_named_value.html.markdown
index 4d2c6121e1..cba3035681 100644
--- b/website/docs/r/api_management_named_value.html.markdown
+++ a/website/docs/r/api_management_named_value.html.markdown
@@ -55,7 +55,7 @@ The following arguments are supported:
 
 * `secret` - (Optional) Specifies whether the API Management Named Value is secret. Valid values are `true` or `false`. The default value is `false`.
 
-~> **NOTE:** setting the field `secret` to `true` doesn't make this field sensitive in Terraform, instead it marks the value as secret and encrypts the value in Azure.
+~> **NOTE:** setting the field `secret` to `true` doesn't make this field sensitive in the provider, instead it marks the value as secret and encrypts the value in Azure.
 
 * `tags` - (Optional) A list of tags to be applied to the API Management Named Value.
 
diff --git b/website/docs/r/api_management_openid_connect_provider.html.markdown a/website/docs/r/api_management_openid_connect_provider.html.markdown
index ce521efb7a..c43da45129 100644
--- b/website/docs/r/api_management_openid_connect_provider.html.markdown
+++ a/website/docs/r/api_management_openid_connect_provider.html.markdown
@@ -23,7 +23,7 @@ resource "azurerm_api_management" "example" {
   location            = azurerm_resource_group.example.location
   resource_group_name = azurerm_resource_group.example.name
   publisher_name      = "My Company"
-  publisher_email     = "company@terraform.io"
+  publisher_email     = "company@exmaple.com"
 
   sku_name = "Developer_1"
 }
diff --git b/website/docs/r/api_management_policy.html.markdown a/website/docs/r/api_management_policy.html.markdown
index 5abffbbe00..58189d4d42 100644
--- b/website/docs/r/api_management_policy.html.markdown
+++ a/website/docs/r/api_management_policy.html.markdown
@@ -52,7 +52,7 @@ The following arguments are supported:
 
 ---
 
-* `xml_content` - (Optional) The XML Content for this Policy as a string. An XML file can be used here with Terraform's [file function](https://www.terraform.io/docs/configuration/functions/file.html) that is similar to Microsoft's `PolicyFilePath` option.
+* `xml_content` - (Optional) The XML Content for this Policy as a string.
 
 * `xml_link` - (Optional) A link to a Policy XML Document, which must be publicly available.
 
diff --git b/website/docs/r/api_management_product.html.markdown a/website/docs/r/api_management_product.html.markdown
index bed75b011b..84ed9eb8c1 100644
--- b/website/docs/r/api_management_product.html.markdown
+++ a/website/docs/r/api_management_product.html.markdown
@@ -23,7 +23,7 @@ resource "azurerm_api_management" "example" {
   location            = azurerm_resource_group.example.location
   resource_group_name = azurerm_resource_group.example.name
   publisher_name      = "My Company"
-  publisher_email     = "company@terraform.io"
+  publisher_email     = "company@exmaple.com"
 
   sku_name = "Developer_1"
 }
diff --git b/website/docs/r/api_management_user.html.markdown a/website/docs/r/api_management_user.html.markdown
index 95dac2d863..22f89d3199 100644
--- b/website/docs/r/api_management_user.html.markdown
+++ a/website/docs/r/api_management_user.html.markdown
@@ -23,7 +23,7 @@ resource "azurerm_api_management" "example" {
   location            = azurerm_resource_group.example.location
   resource_group_name = azurerm_resource_group.example.name
   publisher_name      = "My Company"
-  publisher_email     = "company@terraform.io"
+  publisher_email     = "company@exmaple.com"
 
   sku_name = "Developer_1"
 }
@@ -34,7 +34,7 @@ resource "azurerm_api_management_user" "example" {
   resource_group_name = azurerm_resource_group.example.name
   first_name          = "Example"
   last_name           = "User"
-  email               = "tom+tfdev@hashicorp.com"
+  email               = "user@example.com"
   state               = "active"
 }
 ```
diff --git b/website/docs/r/app_service.html.markdown a/website/docs/r/app_service.html.markdown
index d5289383f8..5c7dd9b89f 100644
--- b/website/docs/r/app_service.html.markdown
+++ a/website/docs/r/app_service.html.markdown
@@ -17,7 +17,7 @@ Manages an App Service (within an App Service Plan).
 
 ## Example Usage
 
-This example provisions a Windows App Service. Other examples of the `azurerm_app_service` resource can be found in [the `./examples/app-service` directory within the GitHub Repository](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/app-service)
+This example provisions a Windows App Service.
 
 ```hcl
 resource "azurerm_resource_group" "example" {
@@ -217,7 +217,7 @@ A `site_config` block supports the following:
 
 * `http2_enabled` - (Optional) Is HTTP2 Enabled on this App Service? Defaults to `false`.
 
-* `ip_restriction` - (Optional) A [List of objects](/docs/configuration/attr-as-blocks.html) representing IP restrictions as defined below.
+* `ip_restriction` - (Optional) A list of objects representing ip restrictions as defined below.
 
 -> **NOTE** User has to explicitly set `ip_restriction` to empty slice (`[]`) to remove it.
 
@@ -237,7 +237,7 @@ A `site_config` block supports the following:
 
 * `local_mysql_enabled` - (Optional) Is "MySQL In App" Enabled? This runs a local MySQL instance with your app and shares resources from the App Service plan.
 
-~> **NOTE:** MySQL In App is not intended for production environments and will not scale beyond a single instance. Instead you may wish [to use Azure Database for MySQL](/docs/providers/azurerm/r/mysql_database.html).
+~> **NOTE:** MySQL In App is not intended for production environments and will not scale beyond a single instance. Instead you may wish to use Azure Database for MySQL.
 
 * `linux_fx_version` - (Optional) Linux App Framework and version for the App Service. Possible options are a Docker container (`DOCKER|<user/image:tag>`), a base-64 encoded Docker Compose file (`COMPOSE|${filebase64("compose.yml")}`) or a base-64 encoded Kubernetes Manifest (`KUBE|${filebase64("kubernetes.yml")}`).
 
@@ -245,8 +245,6 @@ A `site_config` block supports the following:
 
 * `windows_fx_version` - (Optional) The Windows Docker container image (`DOCKER|<user/image:tag>`)
 
-Additional examples of how to run Containers via the `azurerm_app_service` resource can be found in [the `./examples/app-service` directory within the GitHub Repository](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/app-service).
-
 * `managed_pipeline_mode` - (Optional) The Managed Pipeline Mode. Possible values are `Integrated` and `Classic`. Defaults to `Integrated`.
 
 * `min_tls_version` - (Optional) The minimum supported TLS version for the app service. Possible values are `1.0`, `1.1`, and `1.2`. Defaults to `1.2` for new app services.
diff --git b/website/docs/r/app_service_certificate.html.markdown a/website/docs/r/app_service_certificate.html.markdown
index e6c811ac7f..85f23186f1 100644
--- b/website/docs/r/app_service_certificate.html.markdown
+++ a/website/docs/r/app_service_certificate.html.markdown
@@ -13,7 +13,7 @@ Manages an App Service certificate.
 
 ## Example Usage
 
-This example provisions an App Service Certificate from a Local File. Additional examples of how to use the `azurerm_app_service_certificate` resource can be found [in the `./examples/app-service-certificate` directory within the GitHub Repository](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/app-service-certificate).
+This example provisions an App Service Certificate from a Local File.
 
 ```hcl
 resource "azurerm_resource_group" "example" {
@@ -26,7 +26,7 @@ resource "azurerm_app_service_certificate" "example" {
   resource_group_name = azurerm_resource_group.example.name
   location            = azurerm_resource_group.example.location
   pfx_blob            = filebase64("certificate.pfx")
-  password            = "terraform"
+  password            = "password123!"
 }
 ```
 
@@ -50,7 +50,7 @@ The following arguments are supported:
 
 * `key_vault_secret_id` - (Optional) The ID of the Key Vault secret. Changing this forces a new resource to be created.
 
--> **NOTE:** If using `key_vault_secret_id`, the WebApp Service Resource Principal ID `abfa0a7c-a6b6-4736-8310-5855508787cd` must have 'Secret -> get' and 'Certificate -> get' permissions on the Key Vault containing the certificate. (Source: [App Service Blog](https://azure.github.io/AppService/2016/05/24/Deploying-Azure-Web-App-Certificate-through-Key-Vault.html)) If you use Terraform to create the access policy you have to specify the Object ID of this Principal. This Object ID can be retrieved via following data reference, since it is different in every AAD Tenant:
+-> **NOTE:** If using `key_vault_secret_id`, the WebApp Service Resource Principal ID `abfa0a7c-a6b6-4736-8310-5855508787cd` must have 'Secret -> get' and 'Certificate -> get' permissions on the Key Vault containing the certificate. (Source: [App Service Blog](https://azure.github.io/AppService/2016/05/24/Deploying-Azure-Web-App-Certificate-through-Key-Vault.html)) If you use this provide to create the access policy you have to specify the Object ID of this Principal. This Object ID can be retrieved via following data reference, since it is different in every AAD Tenant:
 
 ```hcl
 data "azuread_service_principal" "MicrosoftWebApp" {
diff --git b/website/docs/r/app_service_slot.html.markdown a/website/docs/r/app_service_slot.html.markdown
index 69ac879ae7..e1d772ba1a 100644
--- b/website/docs/r/app_service_slot.html.markdown
+++ a/website/docs/r/app_service_slot.html.markdown
@@ -235,7 +235,7 @@ A `site_config` block supports the following:
 
 * `http2_enabled` - (Optional) Is HTTP2 Enabled on this App Service? Defaults to `false`.
 
-* `ip_restriction` - (Optional) A [List of objects](/docs/configuration/attr-as-blocks.html) representing IP restrictions as defined below.
+* `ip_restriction` - (Optional) A list of objects representing ip restrictions as defined below.
 
 -> **NOTE** User has to explicitly set `ip_restriction` to empty slice (`[]`) to remove it.
 
@@ -255,7 +255,7 @@ A `site_config` block supports the following:
 
 * `local_mysql_enabled` - (Optional) Is "MySQL In App" Enabled? This runs a local MySQL instance with your app and shares resources from the App Service plan.
 
-~> **NOTE:** MySQL In App is not intended for production environments and will not scale beyond a single instance. Instead you may wish [to use Azure Database for MySQL](/docs/providers/azurerm/r/mysql_database.html).
+~> **NOTE:** MySQL In App is not intended for production environments and will not scale beyond a single instance. Instead you may wish to use Azure Database for MySQL.
 
 * `linux_fx_version` - (Optional) Linux App Framework and version for the App Service Slot. Possible options are a Docker container (`DOCKER|<user/image:tag>`), a base-64 encoded Docker Compose file (`COMPOSE|${filebase64("compose.yml")}`) or a base-64 encoded Kubernetes Manifest (`KUBE|${filebase64("kubernetes.yml")}`).
 
diff --git b/website/docs/r/application_insights_analytics_item.html.markdown a/website/docs/r/application_insights_analytics_item.html.markdown
index e9013a8f1a..f3f07aa79a 100644
--- b/website/docs/r/application_insights_analytics_item.html.markdown
+++ a/website/docs/r/application_insights_analytics_item.html.markdown
@@ -79,7 +79,7 @@ Application Insights Analytics Items can be imported using the `resource id`, e.
 terraform import azurerm_application_insights_analytics_item.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Insights/components/mycomponent1/analyticsItems/11111111-1111-1111-1111-111111111111
 ```
 
--> **Please Note:** This is a Terraform Unique ID matching the format: `{appInsightsID}/analyticsItems/{itemId}` for items with `scope` set to `shared`, or  `{appInsightsID}/myAnalyticsItems/{itemId}` for items with `scope` set to `user`
+-> **Please Note:** This is a provider Unique ID matching the format: `{appInsightsID}/analyticsItems/{itemId}` for items with `scope` set to `shared`, or  `{appInsightsID}/myAnalyticsItems/{itemId}` for items with `scope` set to `user`
 
 To find the Analytics Item ID you can query the REST API using the [`az rest` CLI command](https://docs.microsoft.com/cli/azure/reference-index?view=azure-cli-latest#az-rest), e.g.
 
diff --git b/website/docs/r/automation_job_schedule.html.markdown a/website/docs/r/automation_job_schedule.html.markdown
index cd27692bc6..182f5002d9 100644
--- b/website/docs/r/automation_job_schedule.html.markdown
+++ a/website/docs/r/automation_job_schedule.html.markdown
@@ -12,7 +12,7 @@ Links an Automation Runbook and Schedule.
 
 ## Example Usage
 
-This is an example of just the Job Schedule. A full example of the `azurerm_automation_job_schedule` resource can be found in [the `./examples/automation-account` directory within the GitHub Repository](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/automation-account)
+This is an example of just the Job Schedule.
 
 ```hcl
 resource "azurerm_automation_job_schedule" "example" {
diff --git b/website/docs/r/automation_variable_string.html.markdown a/website/docs/r/automation_variable_string.html.markdown
index 5ccb114861..4a514685b1 100644
--- b/website/docs/r/automation_variable_string.html.markdown
+++ a/website/docs/r/automation_variable_string.html.markdown
@@ -29,7 +29,7 @@ resource "azurerm_automation_variable_string" "example" {
   name                    = "tfex-example-var"
   resource_group_name     = azurerm_resource_group.example.name
   automation_account_name = azurerm_automation_account.example.name
-  value                   = "Hello, Terraform Basic Test."
+  value                   = "Hello, Basic Test."
 }
 ```
 
diff --git b/website/docs/r/azuread_service_principal_password.html.markdown a/website/docs/r/azuread_service_principal_password.html.markdown
new file mode 100644
index 0000000000..067d552662
--- /dev/null
+++ a/website/docs/r/azuread_service_principal_password.html.markdown
@@ -0,0 +1,77 @@
+---
+subcategory: "Azure Active Directory"
+layout: "azurerm"
+page_title: "Azure Resource Manager: azurerm_azuread_service_principal_password"
+description: |-
+  Manages a Password associated with a Service Principal within Azure Active Directory.
+
+---
+
+# azurerm_azuread_service_principal_password
+
+Manages a Password associated with a Service Principal within Azure Active Directory.
+
+-> **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write all applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API.
+
+## Example Usage
+
+```hcl
+resource "azurerm_azuread_application" "example" {
+  name                       = "example"
+  homepage                   = "https://homepage"
+  identifier_uris            = ["https://uri"]
+  reply_urls                 = ["https://replyurl"]
+  available_to_other_tenants = false
+  oauth2_allow_implicit_flow = true
+}
+
+resource "azurerm_azuread_service_principal" "example" {
+  application_id = azurerm_azuread_application.example.application_id
+}
+
+resource "azurerm_azuread_service_principal_password" "example" {
+  service_principal_id = azurerm_azuread_service_principal.example.id
+  value                = "VT=uSgbTanZhyz@%nL9Hpd+Tfay_MRV#"
+  end_date             = "2020-01-01T01:02:03Z"
+}
+```
+
+## Argument Reference
+
+The following arguments are supported:
+
+* `service_principal_id` - (Required) The ID of the Service Principal for which this password should be created. Changing this field forces a new resource to be created.
+
+* `value` - (Required) The Password for this Service Principal.
+
+* `end_date` - (Required) The End Date which the Password is valid until, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Changing this field forces a new resource to be created.
+
+* `key_id` - (Optional) A GUID used to uniquely identify this Key. If not specified a GUID will be created. Changing this field forces a new resource to be created.
+
+* `start_date` - (Optional) The Start Date which the Password is valid from, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the current date is used.  Changing this field forces a new resource to be created.
+
+
+## Attributes Reference
+
+The following attributes are exported:
+
+* `id` - The Key ID for the Azure Active Directory Service Principal Password.
+
+## Timeouts
+
+The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration/resources.html#timeouts) for certain actions:
+
+* `create` - (Defaults to 30 minutes) Used when creating the Azure Active Directory Service Principal Password.
+* `update` - (Defaults to 30 minutes) Used when updating the Azure Active Directory Service Principal Password.
+* `read` - (Defaults to 5 minutes) Used when retrieving the Azure Active Directory Service Principal Password.
+* `delete` - (Defaults to 30 minutes) Used when deleting the Azure Active Directory Service Principal Password.
+
+## Import
+
+Service Principal Passwords can be imported using the `object id`, e.g.
+
+```shell
+terraform import azurerm_azuread_service_principal_password.example 00000000-0000-0000-0000-000000000000/11111111-1111-1111-1111-111111111111
+```
+
+-> **NOTE:** This ID format is unique to this provider and is composed of the Service Principal's Object ID and the Service Principal Password's Key ID in the format `{ServicePrincipalObjectId}/{ServicePrincipalPasswordKeyId}`.
diff --git b/website/docs/r/batch_account.html.markdown a/website/docs/r/batch_account.html.markdown
index f019492611..a99659fd3e 100644
--- b/website/docs/r/batch_account.html.markdown
+++ a/website/docs/r/batch_account.html.markdown
@@ -49,7 +49,7 @@ The following arguments are supported:
 
 * `resource_group_name` - (Required) The name of the resource group in which to create the Batch account. Changing this forces a new resource to be created.
 
-~> **NOTE:** To work around [a bug in the Azure API](https://github.com/Azure/azure-rest-api-specs/issues/5574) this property is currently treated as case-insensitive. A future version of Terraform will require that the casing is correct.
+~> **NOTE:** To work around [a bug in the Azure API](https://github.com/Azure/azure-rest-api-specs/issues/5574) this property is currently treated as case-insensitive. A future version of this provider will require that the casing is correct.
 
 * `location` - (Required) Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
 
diff --git b/website/docs/r/batch_certificate.html.markdown a/website/docs/r/batch_certificate.html.markdown
index 0da8b118f1..f693e1da89 100644
--- b/website/docs/r/batch_certificate.html.markdown
+++ a/website/docs/r/batch_certificate.html.markdown
@@ -44,7 +44,7 @@ resource "azurerm_batch_certificate" "example" {
   account_name         = azurerm_batch_account.example.name
   certificate          = filebase64("certificate.pfx")
   format               = "Pfx"
-  password             = "terraform"
+  password             = "password"
   thumbprint           = "42C107874FD0E4A9583292A2F1098E8FE4B2EDDA"
   thumbprint_algorithm = "SHA1"
 }
diff --git b/website/docs/r/blueprint_assignment.html.markdown a/website/docs/r/blueprint_assignment.html.markdown
index 14647f9894..19d310fc89 100644
--- b/website/docs/r/blueprint_assignment.html.markdown
+++ a/website/docs/r/blueprint_assignment.html.markdown
@@ -12,7 +12,7 @@ Manages a Blueprint Assignment resource
 
 ~> **NOTE:** Azure Blueprints are in Preview and potentially subject to breaking change without notice.
 
-~> **NOTE:** Azure Blueprint Assignments can only be applied to Subscriptions.  Assignments to Management Groups is not currently supported by the service or by Terraform.
+~> **NOTE:** Azure Blueprint Assignments can only be applied to Subscriptions.  Assignments to Management Groups is not currently supported by the service or by this provider.
 
 ## Example Usage
 
diff --git b/website/docs/r/connection_monitor.html.markdown a/website/docs/r/connection_monitor.html.markdown
new file mode 100644
index 0000000000..2789c4e8a4
--- /dev/null
+++ a/website/docs/r/connection_monitor.html.markdown
@@ -0,0 +1,183 @@
+---
+subcategory: "Network"
+layout: "azurerm"
+page_title: "Azure Resource Manager: azurerm_connection_monitor"
+description: |-
+  Configures a Connection Monitor to monitor communication between a Virtual Machine and an endpoint using a Network Watcher.
+
+---
+
+# azurerm_connection_monitor
+
+Configures a Connection Monitor to monitor communication between a Virtual Machine and an endpoint using a Network Watcher.
+
+~> **NOTE:** This resource has been deprecated in favour of the `azurerm_network_connection_monitor` resource and will be removed in the next major version of the AzureRM Provider. The new resource shares the same fields as this one, and information on migrating across [can be found in this guide](../guides/migrating-between-renamed-resources.html).
+
+## Example Usage
+
+```hcl
+resource "azurerm_resource_group" "example" {
+  name     = "connection-monitor-rg"
+  location = "West US"
+}
+
+resource "azurerm_network_watcher" "example" {
+  name                = "network-watcher"
+  location            = azurerm_resource_group.example.location
+  resource_group_name = azurerm_resource_group.example.name
+}
+
+resource "azurerm_virtual_network" "example" {
+  name                = "production-network"
+  address_space       = ["10.0.0.0/16"]
+  location            = azurerm_resource_group.example.location
+  resource_group_name = azurerm_resource_group.example.name
+}
+
+resource "azurerm_subnet" "example" {
+  name                 = "internal"
+  resource_group_name  = azurerm_resource_group.example.name
+  virtual_network_name = azurerm_virtual_network.example.name
+  address_prefix       = "10.0.2.0/24"
+}
+
+resource "azurerm_network_interface" "example" {
+  name                = "cmtest-nic"
+  location            = azurerm_resource_group.example.location
+  resource_group_name = azurerm_resource_group.example.name
+
+  ip_configuration {
+    name                          = "testconfiguration1"
+    subnet_id                     = azurerm_subnet.example.id
+    private_ip_address_allocation = "Dynamic"
+  }
+}
+
+resource "azurerm_virtual_machine" "example" {
+  name                  = "cmtest-vm"
+  location              = azurerm_resource_group.example.location
+  resource_group_name   = azurerm_resource_group.example.name
+  network_interface_ids = [azurerm_network_interface.example.id]
+  vm_size               = "Standard_F2"
+
+  storage_image_reference {
+    publisher = "Canonical"
+    offer     = "UbuntuServer"
+    sku       = "16.04-LTS"
+    version   = "latest"
+  }
+
+  storage_os_disk {
+    name              = "osdisk"
+    caching           = "ReadWrite"
+    create_option     = "FromImage"
+    managed_disk_type = "Standard_LRS"
+  }
+
+  os_profile {
+    computer_name  = "cmtest-vm"
+    admin_username = "testadmin"
+    admin_password = "Password1234!"
+  }
+
+  os_profile_linux_config {
+    disable_password_authentication = false
+  }
+}
+
+resource "azurerm_virtual_machine_extension" "example" {
+  name                       = "cmtest-vm-network-watcher"
+  location                   = azurerm_resource_group.example.location
+  resource_group_name        = azurerm_resource_group.example.name
+  virtual_machine_name       = azurerm_virtual_machine.example.name
+  publisher                  = "Microsoft.Azure.NetworkWatcher"
+  type                       = "NetworkWatcherAgentLinux"
+  type_handler_version       = "1.4"
+  auto_upgrade_minor_version = true
+}
+
+resource "azurerm_connection_monitor" "example" {
+  name                 = "cmtest-connectionmonitor"
+  location             = azurerm_resource_group.example.location
+  resource_group_name  = azurerm_resource_group.example.name
+  network_watcher_name = azurerm_network_watcher.example.name
+
+  source {
+    virtual_machine_id = azurerm_virtual_machine.example.id
+  }
+
+  destination {
+    address = "exmaple.com"
+    port    = 80
+  }
+
+  depends_on = [azurerm_virtual_machine_extension.example]
+}
+```
+
+~> **NOTE:** This Resource requires that [the Network Watcher Agent Virtual Machine Extension](https://docs.microsoft.com/en-us/azure/network-watcher/connection-monitor) is installed on the Virtual Machine before monitoring can be started. The extension can be installed via [the `azurerm_virtual_machine_extension` resource](virtual_machine_extension.html).
+
+## Argument Reference
+
+The following arguments are supported:
+
+* `name` - (Required) The name of the Connection Monitor. Changing this forces a new resource to be created.
+
+* `network_watcher_name` - (Required) The name of the Network Watcher. Changing this forces a new resource to be created.
+
+* `resource_group_name` - (Required) The name of the resource group in which to create the Connection Monitor. Changing this forces a new resource to be created.
+
+* `location` - (Required) Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
+
+* `auto_start` - (Optional) Specifies whether the connection monitor will start automatically once created. Defaults to `true`. Changing this forces a new resource to be created.
+
+* `interval_in_seconds` - (Optional) Monitoring interval in seconds. Defaults to `60`.
+
+* `source` - (Required) A `source` block as defined below.
+
+* `destination` - (Required) A `destination` block as defined below.
+
+* `tags` - (Optional) A mapping of tags to assign to the resource.
+
+---
+
+A `source` block contains:
+
+* `virtual_machine_id` - (Required) The ID of the Virtual Machine to monitor connectivity from.
+
+* `port` - (Optional) The port on the Virtual Machine to monitor connectivity from. Defaults to `0` (Dynamic Port Assignment).
+
+A `destination` block contains:
+
+* `virtual_machine_id` - (Optional) The ID of the Virtual Machine to monitor connectivity to.
+
+* `address` - (Optional) IP address or domain name to monitor connectivity to.
+
+* `port` - (Required) The port on the destination to monitor connectivity to.
+
+~> **NOTE:** One of `virtual_machine_id` or `address` must be specified.
+
+## Attributes Reference
+
+The following attributes are exported:
+
+* `id` - The ID of the Connection Monitor.
+
+## Timeouts
+
+~> **Note:** Custom Timeouts are available [as an opt-in Beta in version 1.43 & 1.44 of the Azure Provider](/docs/providers/azurerm/guides/2.0-beta.html) and will be enabled by default in version 2.0 of the Azure Provider.
+
+The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration/resources.html#timeouts) for certain actions:
+
+* `create` - (Defaults to 30 minutes) Used when creating the Connection Monitor.
+* `update` - (Defaults to 30 minutes) Used when updating the Connection Monitor.
+* `read` - (Defaults to 5 minutes) Used when retrieving the Connection Monitor.
+* `delete` - (Defaults to 30 minutes) Used when deleting the Connection Monitor.
+
+## Import
+
+Connection Monitors can be imported using the `resource id`, e.g.
+
+```shell
+terraform import azurerm_connection_monitor.monitor1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/networkWatchers/watcher1/connectionMonitors/monitor1
+```
diff --git b/website/docs/r/container_group.html.markdown a/website/docs/r/container_group.html.markdown
index 3646b65e1b..9c3ad848f5 100644
--- b/website/docs/r/container_group.html.markdown
+++ a/website/docs/r/container_group.html.markdown
@@ -14,7 +14,7 @@ Manages as an Azure Container Group instance.
 
 ## Example Usage
 
-This example provisions a Basic Container. Other examples of the `azurerm_container_group` resource can be found in [the `./examples/container-instance` directory within the GitHub Repository](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/container-instance).
+This example provisions a Basic Container.
 
 ```hcl
 resource "azurerm_resource_group" "example" {
@@ -265,7 +265,7 @@ A `volume` block supports:
 
 ~> **Note** when using a storage account volume, all of `share_name`, `storage_account_name`, and `storage_account_key` must be specified.
 
-~> **Note:** The secret values must be supplied as Base64 encoded strings, such as by using the Terraform [base64encode function](https://www.terraform.io/docs/configuration/functions/base64encode.html). The secret values are decoded to their original values when mounted in the volume on the container.
+~> **Note:** The secret values must be supplied as Base64 encoded strings. The secret values are decoded to their original values when mounted in the volume on the container.
 
 ---
 
diff --git b/website/docs/r/container_registry.html.markdown a/website/docs/r/container_registry.html.markdown
index c45421c25f..5ea881d4cc 100644
--- b/website/docs/r/container_registry.html.markdown
+++ a/website/docs/r/container_registry.html.markdown
@@ -11,9 +11,6 @@ description: |-
 
 Manages an Azure Container Registry.
 
-~> **Note:** All arguments including the access key will be stored in the raw state as plain-text.
-[Read more about sensitive data in state](/docs/state/sensitive-data.html).
-
 ## Example Usage
 
 ```hcl
diff --git b/website/docs/r/cosmosdb_account.html.markdown a/website/docs/r/cosmosdb_account.html.markdown
index 50864e1878..f3af7882b2 100644
--- b/website/docs/r/cosmosdb_account.html.markdown
+++ a/website/docs/r/cosmosdb_account.html.markdown
@@ -13,9 +13,9 @@ Manages a CosmosDB (formally DocumentDB) Account.
 ## Example Usage
 
 ```hcl
-resource "azurerm_resource_group" "example" {
-  name     = "example-resource-group"
-  location = "West Europe"
+resource "azurerm_resource_group" "rg" {
+  name     = "sample-rg"
+  location = "westus"
 }
 
 resource "random_integer" "ri" {
diff --git b/website/docs/r/cosmosdb_cassandra_keyspace.html.markdown a/website/docs/r/cosmosdb_cassandra_keyspace.html.markdown
index 0d449c6c6b..aea3d28365 100644
--- b/website/docs/r/cosmosdb_cassandra_keyspace.html.markdown
+++ a/website/docs/r/cosmosdb_cassandra_keyspace.html.markdown
@@ -56,13 +56,13 @@ The following arguments are supported:
 
 * `account_name` - (Required) The name of the Cosmos DB Cassandra KeySpace to create the table within. Changing this forces a new resource to be created.
 
-* `throughput` - (Optional) The throughput of Cassandra KeySpace (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon database creation otherwise it cannot be updated without a manual terraform destroy-apply.
+* `throughput` - (Optional) The throughput of Cassandra KeySpace (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon database creation otherwise it cannot be updated without a manual resource destroy-apply.
 
-~> **Note:** throughput has a maximum value of `1000000` unless a higher limit is requested via Azure Support
+* `autoscale_settings` - (Optional) An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual resource destroy-apply.
 
-* `autoscale_settings` - (Optional) An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual terraform destroy-apply.
+* `autoscale_settings` - (Optional) An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual destroy-apply.
 
-~> **Note:** Switching between autoscale and manual throughput is not supported via Terraform and must be completed via the Azure Portal and refreshed.
+~> **Note:** Switching between autoscale and manual throughput is not supported via this provider and must be completed via the Azure Portal and refreshed.
 
 ---
 
diff --git b/website/docs/r/cosmosdb_cassandra_table.html.markdown a/website/docs/r/cosmosdb_cassandra_table.html.markdown
index 09200c9fbc..324ed11a4e 100644
--- b/website/docs/r/cosmosdb_cassandra_table.html.markdown
+++ a/website/docs/r/cosmosdb_cassandra_table.html.markdown
@@ -87,7 +87,7 @@ The following arguments are supported:
 
 * `autoscale_settings` - (Optional) An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual terraform destroy-apply.
 
-~> **Note:** Switching between autoscale and manual throughput is not supported via Terraform and must be completed via the Azure Portal and refreshed.
+~> **Note:** Switching between autoscale and manual throughput is not supported via this provider and must be completed via the Azure Portal and refreshed.
 
 ---
 
diff --git b/website/docs/r/cosmosdb_gremlin_database.html.markdown a/website/docs/r/cosmosdb_gremlin_database.html.markdown
index e7c6f9951f..7abae0926e 100644
--- b/website/docs/r/cosmosdb_gremlin_database.html.markdown
+++ a/website/docs/r/cosmosdb_gremlin_database.html.markdown
@@ -36,13 +36,13 @@ The following arguments are supported:
 
 * `account_name` - (Required) The name of the CosmosDB Account to create the Gremlin Database within. Changing this forces a new resource to be created.
 
-* `throughput` - (Optional) The throughput of the Gremlin database (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon database creation otherwise it cannot be updated without a manual terraform destroy-apply.
+* `throughput` - (Optional) The throughput of the Gremlin database (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon database creation otherwise it cannot be updated without a manual resource destroy-apply.
 
 ~> **Note:** throughput has a maximum value of `1000000` unless a higher limit is requested via Azure Support
 
-* `autoscale_settings` - (Optional) An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual terraform destroy-apply.
+* `autoscale_settings` - (Optional) An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual destroy-apply.
 
-~> **Note:** Switching between autoscale and manual throughput is not supported via Terraform and must be completed via the Azure Portal and refreshed.
+~> **Note:** Switching between autoscale and manual throughput is not supported via this provider and must be completed via the Azure Portal and refreshed. 
 
 ---
 
diff --git b/website/docs/r/cosmosdb_gremlin_graph.html.markdown a/website/docs/r/cosmosdb_gremlin_graph.html.markdown
index 5df3da82e6..d85b5653cf 100644
--- b/website/docs/r/cosmosdb_gremlin_graph.html.markdown
+++ a/website/docs/r/cosmosdb_gremlin_graph.html.markdown
@@ -68,13 +68,13 @@ The following arguments are supported:
 
 * `partition_key_version` - (Optional) Define a partition key version. Changing this forces a new resource to be created. Possible values are `1`and `2`. This should be set to `2` in order to use large partition keys.
 
-* `throughput` - (Optional) The throughput of the Gremlin graph (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon database creation otherwise it cannot be updated without a manual terraform destroy-apply.
+* `throughput` - (Optional) The throughput of the Gremlin graph (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon database creation otherwise it cannot be updated without a manual destroy-apply.
 
 * `default_ttl` - (Optional) The default time to live (TTL) of the Gremlin graph. If the value is missing or set to "-1", items don’t expire.
 
 * `autoscale_settings` - (Optional) An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual terraform destroy-apply. Requires `partition_key_path` to be set.
 
-~> **Note:** Switching between autoscale and manual throughput is not supported via Terraform and must be completed via the Azure Portal and refreshed.
+~> **Note:** Switching between autoscale and manual throughput is not supported via this provider and must be completed via the Azure Portal and refreshed.
 
 * `index_policy` - (Optional) The configuration of the indexing policy. One or more `index_policy` blocks as defined below.
 
diff --git b/website/docs/r/cosmosdb_mongo_collection.html.markdown a/website/docs/r/cosmosdb_mongo_collection.html.markdown
index 8884264c9b..908f7a884a 100644
--- b/website/docs/r/cosmosdb_mongo_collection.html.markdown
+++ a/website/docs/r/cosmosdb_mongo_collection.html.markdown
@@ -56,7 +56,7 @@ The following arguments are supported:
 * `throughput` - (Optional) The throughput of the MongoDB collection (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon database creation otherwise it cannot be updated without a manual terraform destroy-apply.
 * `autoscale_settings` - (Optional) An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual terraform destroy-apply.
 
-~> **Note:** Switching between autoscale and manual throughput is not supported via Terraform and must be completed via the Azure Portal and refreshed.
+~> **Note:** Switching between autoscale and manual throughput is not supported via this provider and must be completed via the Azure Portal and refreshed.
 
 ---
 
diff --git b/website/docs/r/cosmosdb_mongo_database.html.markdown a/website/docs/r/cosmosdb_mongo_database.html.markdown
index b10dc1693a..bfc5dfcfd7 100644
--- b/website/docs/r/cosmosdb_mongo_database.html.markdown
+++ a/website/docs/r/cosmosdb_mongo_database.html.markdown
@@ -36,13 +36,13 @@ The following arguments are supported:
 
 * `account_name` - (Required) The name of the Cosmos DB Mongo Database to create the table within. Changing this forces a new resource to be created.
 
-* `throughput` - (Optional) The throughput of the MongoDB database (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon database creation otherwise it cannot be updated without a manual terraform destroy-apply.
+* `throughput` - (Optional) The throughput of the MongoDB collection (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon database creation otherwise it cannot be updated without a manual resource destroy-apply.
 
 ~> **Note:** throughput has a maximum value of `1000000` unless a higher limit is requested via Azure Support.
 
-* `autoscale_settings` - (Optional) An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual terraform destroy-apply.
+* `autoscale_settings` - (Optional) An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual destroy-apply.
 
-~> **Note:** Switching between autoscale and manual throughput is not supported via Terraform and must be completed via the Azure Portal and refreshed.
+~> **Note:** Switching between autoscale and manual throughput is not supported via this provider and must be completed via the Azure Portal and refreshed.
 
 ---
 
diff --git b/website/docs/r/cosmosdb_sql_container.html.markdown a/website/docs/r/cosmosdb_sql_container.html.markdown
index d1745321f5..8cf56b2a69 100644
--- b/website/docs/r/cosmosdb_sql_container.html.markdown
+++ a/website/docs/r/cosmosdb_sql_container.html.markdown
@@ -73,11 +73,11 @@ The following arguments are supported:
 
 * `unique_key` - (Optional) One or more `unique_key` blocks as defined below. Changing this forces a new resource to be created.
 
-* `throughput` - (Optional) The throughput of SQL container (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon container creation otherwise it cannot be updated without a manual terraform destroy-apply.
+* `throughput` - (Optional) The throughput of SQL container (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon container creation otherwise it cannot be updated without a manual resource destroy-apply.
 
-* `autoscale_settings` - (Optional) An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual terraform destroy-apply. Requires `partition_key_path` to be set.
+* `autoscale_settings` - (Optional) An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual destroy-apply. Requires `partition_key_path` to be set.
 
-~> **Note:** Switching between autoscale and manual throughput is not supported via Terraform and must be completed via the Azure Portal and refreshed.
+~> **Note:** Switching between autoscale and manual throughput is not supported via this provider and must be completed via the Azure Portal and refreshed. 
 
 * `indexing_policy` - (Optional) An `indexing_policy` block as defined below.
 
diff --git b/website/docs/r/cosmosdb_sql_database.html.markdown a/website/docs/r/cosmosdb_sql_database.html.markdown
index f25b555bc7..7c97a4ba00 100644
--- b/website/docs/r/cosmosdb_sql_database.html.markdown
+++ a/website/docs/r/cosmosdb_sql_database.html.markdown
@@ -40,9 +40,9 @@ The following arguments are supported:
 
 ~> **Note:** Throughput has a maximum value of `1000000` unless a higher limit is requested via Azure Support
 
-* `autoscale_settings` - (Optional) An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual terraform destroy-apply.
+* `autoscale_settings` - (Optional) An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual destroy-apply.
 
-~> **Note:** Switching between autoscale and manual throughput is not supported via Terraform and must be completed via the Azure Portal and refreshed.
+~> **Note:** Switching between autoscale and manual throughput is not supported via this provider and must be completed via the Azure Portal and refreshed.
 
 ---
 
diff --git b/website/docs/r/cosmosdb_table.html.markdown a/website/docs/r/cosmosdb_table.html.markdown
index 9e93c39f0e..39fb29509c 100644
--- b/website/docs/r/cosmosdb_table.html.markdown
+++ a/website/docs/r/cosmosdb_table.html.markdown
@@ -36,13 +36,13 @@ The following arguments are supported:
 
 * `account_name` - (Required) The name of the Cosmos DB Table to create the table within. Changing this forces a new resource to be created.
 
-* `throughput` - (Optional) The throughput of Table (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon database creation otherwise it cannot be updated without a manual terraform destroy-apply.
+* `throughput` - (Optional) The throughput of Table (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon database creation otherwise it cannot be updated without a manual resource destroy-apply.
 
 ~> **Note:** throughput has a maximum value of `1000000` unless a higher limit is requested via Azure Support
 
-* `autoscale_settings` - (Optional) An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual terraform destroy-apply.
+* `autoscale_settings` - (Optional) An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual destroy-apply.
 
-~> **Note:** Switching between autoscale and manual throughput is not supported via Terraform and must be completed via the Azure Portal and refreshed.
+~> **Note:** Switching between autoscale and manual throughput is not supported via this provider and must be completed via the Azure Portal and refreshed. 
 
 ---
 
diff --git b/website/docs/r/dashboard.html.markdown a/website/docs/r/dashboard.html.markdown
index 3798b59a70..c2978eedbe 100644
--- b/website/docs/r/dashboard.html.markdown
+++ a/website/docs/r/dashboard.html.markdown
@@ -37,7 +37,7 @@ resource "azurerm_dashboard" "my-board" {
   resource_group_name = azurerm_resource_group.example.name
   location            = azurerm_resource_group.example.location
   tags = {
-    source = "terraform"
+    source = "managed"
   }
   dashboard_properties = <<DASH
 {
@@ -193,35 +193,7 @@ Since the contents of the dashboard JSON can be quite lengthy, use a template fi
                  ...
 ```
 
-This is then referenced in the `.tf` file by using a [`template_file`](https://www.terraform.io/docs/providers/template/d/file.html) data source (terraform 0.11 or earlier), or the [`templatefile`](https://www.terraform.io/docs/configuration/functions/templatefile.html) function (terraform 0.12+).
-
-`main.tf` (terraform 0.11 or earlier):
-
-```hcl
-data "template_file" "dash-template" {
-  template = "${file("${path.module}/dash.tpl")}"
-  vars = {
-    md_content = "Variable content here!"
-    video_link = "https://www.youtube.com/watch?v=......"
-    sub_id     = data.azurerm_subscription.current.subscription_id
-  }
-}
-
-#...
-
-resource "azurerm_dashboard" "my-board" {
-  name                = "my-cool-dashboard"
-  resource_group_name = azurerm_resource_group.example.name
-  location            = azurerm_resource_group.example.location
-  tags = {
-    source = "terraform"
-  }
-  dashboard_properties = data.template_file.dash-template.rendered
-}
-
-```
-
-`main.tf` (terraform 0.12+)
+`main.tf`
 
 ```hcl
 resource "azurerm_dashboard" "my-board" {
@@ -229,7 +201,7 @@ resource "azurerm_dashboard" "my-board" {
   resource_group_name = azurerm_resource_group.example.name
   location            = azurerm_resource_group.example.location
   tags = {
-    source = "terraform"
+    source = "managed"
   }
   dashboard_properties = templatefile("dash.tpl",
     {
diff --git b/website/docs/r/data_factory_integration_runtime_managed.html.markdown a/website/docs/r/data_factory_integration_runtime_managed.html.markdown
index f142ec3678..b1c7b20db2 100644
--- b/website/docs/r/data_factory_integration_runtime_managed.html.markdown
+++ a/website/docs/r/data_factory_integration_runtime_managed.html.markdown
@@ -10,7 +10,7 @@ description: |-
 
 Manages an Azure Data Factory Managed Integration Runtime.
 
-~> **NOTE:** The `azurerm_data_factory_integration_runtime_managed` resource has been superseded by the [`azurerm_data_factory_integration_runtime_azure_ssis`](data_factory_integration_runtime_azure_ssis.html) resource. The existing `azurerm_data_factory_integration_runtime_managed` resource will be deprecated (but still available) in version 3.0 of the AzureRM Terraform Provider - we recommend using the [`azurerm_data_factory_integration_runtime_azure_ssis`](data_factory_integration_runtime_azure_ssis.html) resource for new deployments.
+~> **NOTE:** The `azurerm_data_factory_integration_runtime_managed` resource has been superseded by the `azurerm_data_factory_integration_runtime_azure_ssis` resource. We recommend using the `azurerm_data_factory_integration_runtime_azure_ssis` resource for new deployments.
 
 ## Example Usage
 
diff --git b/website/docs/r/data_factory_integration_runtime_self_hosted.html.markdown a/website/docs/r/data_factory_integration_runtime_self_hosted.html.markdown
index 4f43abf604..3a2a944573 100644
--- b/website/docs/r/data_factory_integration_runtime_self_hosted.html.markdown
+++ a/website/docs/r/data_factory_integration_runtime_self_hosted.html.markdown
@@ -50,7 +50,7 @@ A `rbac_authorization` block supports the following:
 
 * `resource_id` - (Required) The resource identifier of the integration runtime to be shared.
 
--> **Please Note**: RBAC Authorization creates a [linked Self-hosted Integration Runtime targeting the Shared Self-hosted Integration Runtime in resource_id](https://docs.microsoft.com/azure/data-factory/create-shared-self-hosted-integration-runtime-powershell#share-the-self-hosted-integration-runtime-with-another-data-factory). The linked Self-hosted Integration Runtime needs Contributor access granted to the Shared Self-hosted Data Factory. See example [Shared Self-hosted](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/data-factory/shared-self-hosted).
+-> **Please Note**: RBAC Authorization creates a [linked Self-hosted Integration Runtime targeting the Shared Self-hosted Integration Runtime in resource_id](https://docs.microsoft.com/azure/data-factory/create-shared-self-hosted-integration-runtime-powershell#share-the-self-hosted-integration-runtime-with-another-data-factory). The linked Self-hosted Integration Runtime needs Contributor access granted to the Shared Self-hosted Data Factory.
 
 For more information on the configuration, please check out the [Azure documentation](https://docs.microsoft.com/rest/api/datafactory/integrationruntimes/createorupdate#linkedintegrationruntimerbacauthorization)
 
diff --git b/website/docs/r/data_factory_linked_service_azure_blob_storage.html.markdown a/website/docs/r/data_factory_linked_service_azure_blob_storage.html.markdown
index d35d1f370d..3d319f3af2 100644
--- b/website/docs/r/data_factory_linked_service_azure_blob_storage.html.markdown
+++ a/website/docs/r/data_factory_linked_service_azure_blob_storage.html.markdown
@@ -10,8 +10,6 @@ description: |-
 
 Manages a Linked Service (connection) between an Azure Blob Storage Account and Azure Data Factory.
 
-~> **Note:** All arguments including the client secret will be stored in the raw state as plain-text. [Read more about sensitive data in state](/docs/state/sensitive-data.html).
-
 ## Example Usage
 
 ```hcl
diff --git b/website/docs/r/data_factory_linked_service_azure_file_storage.html.markdown a/website/docs/r/data_factory_linked_service_azure_file_storage.html.markdown
index b04a2ecb03..31211c4bef 100644
--- b/website/docs/r/data_factory_linked_service_azure_file_storage.html.markdown
+++ a/website/docs/r/data_factory_linked_service_azure_file_storage.html.markdown
@@ -10,8 +10,6 @@ description: |-
 
 Manages a Linked Service (connection) between a SFTP Server and Azure Data Factory.
 
-~> **Note:** All arguments including the client secret will be stored in the raw state as plain-text. [Read more about sensitive data in state](/docs/state/sensitive-data.html).
-
 ## Example Usage
 
 ```hcl
diff --git b/website/docs/r/data_factory_linked_service_azure_function.html.markdown a/website/docs/r/data_factory_linked_service_azure_function.html.markdown
index 57bd6350d7..475c3612b1 100644
--- b/website/docs/r/data_factory_linked_service_azure_function.html.markdown
+++ a/website/docs/r/data_factory_linked_service_azure_function.html.markdown
@@ -10,7 +10,6 @@ description: |-
 
 Manages a Linked Service (connection) between an Azure Function and Azure Data Factory.
 
-~> **Note:** All arguments including the client secret will be stored in the raw state as plain-text. [Read more about sensitive data in state](/docs/state/sensitive-data.html).
 
 ## Example Usage
 
diff --git b/website/docs/r/data_factory_linked_service_azure_sql_database.html.markdown a/website/docs/r/data_factory_linked_service_azure_sql_database.html.markdown
index 50191cc54d..d60be5528a 100644
--- b/website/docs/r/data_factory_linked_service_azure_sql_database.html.markdown
+++ a/website/docs/r/data_factory_linked_service_azure_sql_database.html.markdown
@@ -10,7 +10,6 @@ description: |-
 
 Manages a Linked Service (connection) between Azure SQL Database and Azure Data Factory.
 
-~> **Note:** All arguments including the connection_string will be stored in the raw state as plain-text. [Read more about sensitive data in state](/docs/state/sensitive-data.html).
 
 ## Example Usage
 
diff --git b/website/docs/r/data_factory_linked_service_azure_table_storage.html.markdown a/website/docs/r/data_factory_linked_service_azure_table_storage.html.markdown
index f09f9c90ee..cfc673a2cf 100644
--- b/website/docs/r/data_factory_linked_service_azure_table_storage.html.markdown
+++ a/website/docs/r/data_factory_linked_service_azure_table_storage.html.markdown
@@ -10,7 +10,6 @@ description: |-
 
 Manages a Linked Service (connection) between an Azure Table Storage and Azure Data Factory.
 
-~> **Note:** All arguments including the client secret will be stored in the raw state as plain-text. [Read more about sensitive data in state](/docs/state/sensitive-data.html).
 
 ## Example Usage
 
diff --git b/website/docs/r/data_factory_linked_service_cosmosdb.html.markdown a/website/docs/r/data_factory_linked_service_cosmosdb.html.markdown
index ef0ccf5d3e..716d1b7e7d 100644
--- b/website/docs/r/data_factory_linked_service_cosmosdb.html.markdown
+++ a/website/docs/r/data_factory_linked_service_cosmosdb.html.markdown
@@ -10,7 +10,6 @@ description: |-
 
 Manages a Linked Service (connection) between a CosmosDB and Azure Data Factory using SQL API.
 
-~> **Note:** All arguments including the client secret will be stored in the raw state as plain-text. [Read more about sensitive data in state](/docs/state/sensitive-data.html).
 
 ## Example Usage
 
diff --git b/website/docs/r/data_factory_linked_service_data_lake_storage_gen2.html.markdown a/website/docs/r/data_factory_linked_service_data_lake_storage_gen2.html.markdown
index f4e6c062bb..39cf90de7a 100644
--- b/website/docs/r/data_factory_linked_service_data_lake_storage_gen2.html.markdown
+++ a/website/docs/r/data_factory_linked_service_data_lake_storage_gen2.html.markdown
@@ -10,8 +10,6 @@ description: |-
 
 Manages a Linked Service (connection) between Data Lake Storage Gen2 and Azure Data Factory.
 
-~> **Note:** All arguments including the `service_principal_key` will be stored in the raw state as plain-text. [Read more about sensitive data in state](/docs/state/sensitive-data.html).
-
 ## Example Usage
 
 ```hcl
diff --git b/website/docs/r/data_factory_linked_service_mysql.html.markdown a/website/docs/r/data_factory_linked_service_mysql.html.markdown
index 0492d13ad1..dd54d9318a 100644
--- b/website/docs/r/data_factory_linked_service_mysql.html.markdown
+++ a/website/docs/r/data_factory_linked_service_mysql.html.markdown
@@ -10,8 +10,6 @@ description: |-
 
 Manages a Linked Service (connection) between MySQL and Azure Data Factory.
 
-~> **Note:** All arguments including the connection_string will be stored in the raw state as plain-text. [Read more about sensitive data in state](/docs/state/sensitive-data.html).
-
 ## Example Usage
 
 ```hcl
diff --git b/website/docs/r/data_factory_linked_service_postgresql.html.markdown a/website/docs/r/data_factory_linked_service_postgresql.html.markdown
index acf742b94b..7288e0b61e 100644
--- b/website/docs/r/data_factory_linked_service_postgresql.html.markdown
+++ a/website/docs/r/data_factory_linked_service_postgresql.html.markdown
@@ -10,8 +10,6 @@ description: |-
 
 Manages a Linked Service (connection) between PostgreSQL and Azure Data Factory.
 
-~> **Note:** All arguments including the connection_string will be stored in the raw state as plain-text. [Read more about sensitive data in state](/docs/state/sensitive-data.html).
-
 ## Example Usage
 
 ```hcl
diff --git b/website/docs/r/data_factory_linked_service_sftp.html.markdown a/website/docs/r/data_factory_linked_service_sftp.html.markdown
index 51de2c5e37..09afb7ae09 100644
--- b/website/docs/r/data_factory_linked_service_sftp.html.markdown
+++ a/website/docs/r/data_factory_linked_service_sftp.html.markdown
@@ -10,7 +10,6 @@ description: |-
 
 Manages a Linked Service (connection) between a SFTP Server and Azure Data Factory.
 
-~> **Note:** All arguments including the client secret will be stored in the raw state as plain-text. [Read more about sensitive data in state](/docs/state/sensitive-data.html).
 
 ## Example Usage
 
diff --git b/website/docs/r/data_factory_linked_service_snowflake.html.markdown a/website/docs/r/data_factory_linked_service_snowflake.html.markdown
index 31cc92709b..b20e5c7e17 100644
--- b/website/docs/r/data_factory_linked_service_snowflake.html.markdown
+++ a/website/docs/r/data_factory_linked_service_snowflake.html.markdown
@@ -10,7 +10,6 @@ description: |-
 
 Manages a Linked Service (connection) between Snowflake and Azure Data Factory.
 
-~> **Note:** All arguments including the client secret will be stored in the raw state as plain-text. [Read more about sensitive data in state](/docs/state/sensitive-data.html).
 
 ## Example Usage
 
diff --git b/website/docs/r/data_factory_linked_service_sql_server.html.markdown a/website/docs/r/data_factory_linked_service_sql_server.html.markdown
index fc76a42d5d..6943a07f27 100644
--- b/website/docs/r/data_factory_linked_service_sql_server.html.markdown
+++ a/website/docs/r/data_factory_linked_service_sql_server.html.markdown
@@ -10,8 +10,6 @@ description: |-
 
 Manages a Linked Service (connection) between a SQL Server and Azure Data Factory.
 
-~> **Note:** All arguments including the client secret will be stored in the raw state as plain-text. [Read more about sensitive data in state](/docs/state/sensitive-data.html).
-
 ## Example Usage
 
 ```hcl
diff --git b/website/docs/r/data_factory_linked_service_synapse.html.markdown a/website/docs/r/data_factory_linked_service_synapse.html.markdown
index 5ca31542b5..9bb7bc4bce 100644
--- b/website/docs/r/data_factory_linked_service_synapse.html.markdown
+++ a/website/docs/r/data_factory_linked_service_synapse.html.markdown
@@ -10,7 +10,6 @@ description: |-
 
 Manages a Linked Service (connection) between Synapse and Azure Data Factory.
 
-~> **Note:** All arguments including the client secret will be stored in the raw state as plain-text. [Read more about sensitive data in state](/docs/state/sensitive-data.html).
 
 ## Example Usage
 
diff --git b/website/docs/r/data_factory_linked_service_web.html.markdown a/website/docs/r/data_factory_linked_service_web.html.markdown
index bf8941e60e..1fc268b133 100644
--- b/website/docs/r/data_factory_linked_service_web.html.markdown
+++ a/website/docs/r/data_factory_linked_service_web.html.markdown
@@ -10,7 +10,6 @@ description: |-
 
 Manages a Linked Service (connection) between a Web Server and Azure Data Factory.
 
-~> **Note:** All arguments including the client secret will be stored in the raw state as plain-text. [Read more about sensitive data in state](/docs/state/sensitive-data.html).
 
 ## Example Usage
 
diff --git b/website/docs/r/database_migration_project.html.markdown a/website/docs/r/database_migration_project.html.markdown
index e53c04c599..22baf3b75c 100644
--- b/website/docs/r/database_migration_project.html.markdown
+++ a/website/docs/r/database_migration_project.html.markdown
@@ -10,7 +10,7 @@ description: |-
 
 Manage a Azure Database Migration Project.
 
-~> **NOTE:** Destroying a Database Migration Project will leave any outstanding tasks untouched. This is to avoid unexpectedly deleting any tasks managed outside of terraform.
+~> **NOTE:** Destroying a Database Migration Project will leave any outstanding tasks untouched. This is to avoid unexpectedly deleting any tasks managed outside of this provider.
 
 ## Example Usage
 
diff --git b/website/docs/r/database_migration_service.html.markdown a/website/docs/r/database_migration_service.html.markdown
index 88a38129b7..8b4f1f661c 100644
--- b/website/docs/r/database_migration_service.html.markdown
+++ a/website/docs/r/database_migration_service.html.markdown
@@ -10,7 +10,7 @@ description: |-
 
 Manages a Azure Database Migration Service.
 
-~> **NOTE:** Destroying a Database Migration Service will leave any outstanding tasks untouched. This is to avoid unexpectedly deleting any tasks managed outside of terraform.
+~> **NOTE:** Destroying a Database Migration Service will leave any outstanding tasks untouched. This is to avoid unexpectedly deleting any tasks managed outside of this provide.
 
 ## Example Usage
 
diff --git b/website/docs/r/dev_test_global_vm_shutdown_schedule.html.markdown a/website/docs/r/dev_test_global_vm_shutdown_schedule.html.markdown
index d4a43bd35a..acfeaf1835 100644
--- b/website/docs/r/dev_test_global_vm_shutdown_schedule.html.markdown
+++ a/website/docs/r/dev_test_global_vm_shutdown_schedule.html.markdown
@@ -10,7 +10,7 @@ description: |-
 
 Manages automated shutdown schedules for Azure VMs that are not within an Azure DevTest Lab. While this is part of the DevTest Labs service in Azure,
 this resource applies only to standard VMs, not DevTest Lab VMs. To manage automated shutdown schedules for DevTest Lab VMs, reference the
-[`azurerm_dev_test_schedule` resource](dev_test_schedule.html)
+`azurerm_dev_test_schedule` resource
 
 ## Example Usage
 
diff --git b/website/docs/r/disk_encryption_set.html.markdown a/website/docs/r/disk_encryption_set.html.markdown
index b9c6bc4874..081e847753 100644
--- b/website/docs/r/disk_encryption_set.html.markdown
+++ a/website/docs/r/disk_encryption_set.html.markdown
@@ -10,6 +10,8 @@ description: |-
 
 Manages a Disk Encryption Set.
 
+-> **NOTE:** At this time the Key Vault used to store the Active Key for this Disk Encryption Set must have both Soft Delete & Purge Protection enabled - which are not yet supported by this provider.
+
 ## Example Usage
 
 ```hcl
diff --git b/website/docs/r/dns_caa_record.html.markdown a/website/docs/r/dns_caa_record.html.markdown
index 563bdbda22..0cdabf0961 100644
--- b/website/docs/r/dns_caa_record.html.markdown
+++ a/website/docs/r/dns_caa_record.html.markdown
@@ -52,7 +52,7 @@ resource "azurerm_dns_caa_record" "example" {
   record {
     flags = 0
     tag   = "iodef"
-    value = "mailto:terraform@nonexisting.tld"
+    value = "mailto:user@nonexisting.tld"
   }
 
   tags = {
diff --git b/website/docs/r/frontdoor.html.markdown a/website/docs/r/frontdoor.html.markdown
index 6086a64079..41bd7fa652 100644
--- b/website/docs/r/frontdoor.html.markdown
+++ a/website/docs/r/frontdoor.html.markdown
@@ -20,12 +20,6 @@ Below are some of the key scenarios that Azure Front Door Service addresses:
 * Use Front Door to improve application performance with SSL offload and routing requests to the fastest available application backend.
 * Use Front Door for application layer security and DDoS protection for your application.
 
-!> **Be Aware:** Microsoft rolled out a breaking change on Friday 9th April 2021 which may cause issues with the CDN/FrontDoor resources. [More information is available in this GitHub issue](https://github.com/hashicorp/terraform-provider-azurerm/issues/11231) - however unfortunately this may necessitate a breaking change to the CDN and Front Door resources, more information will be posted [in the GitHub issue](https://github.com/hashicorp/terraform-provider-azurerm/issues/11231) as the necessary changes are identified.
-
-!> **BREAKING CHANGE:** The `custom_https_provisioning_enabled` field and the `custom_https_configuration` block have been removed from the `azurerm_frontdoor` resource in the `v2.58.0` provider due to changes made by the service team. If you wish to enable the custom HTTPS configuration functionality within your `azurerm_frontdoor` resource moving forward you will need to define a separate `azurerm_frontdoor_custom_https_configuration` block in your configuration file.
-
-!> **BREAKING CHANGE:** With the release of the `v2.58.0` provider, if you run the `apply` command against an existing Front Door resource it **will not** apply the detected changes. Instead it will persist the `explicit_resource_order` mapping structure to the state file. Once this operation has completed the resource will resume functioning normally.This change in behavior in Terraform is due to an issue where the underlying service teams API is now returning the response JSON out of order from the way it was sent to the resource via Terraform causing unexpected discrepancies in the `plan` after the resource has been provisioned. If your pre-existing Front Door instance contains `custom_https_configuration` blocks there are additional steps that will need to be completed to successfully migrate your Front Door onto the `v2.58.0` provider which [can be found in this guide](https://registry.terraform.io/providers/hashicorp/azurerm/2.59.0/docs/guides/2.58.0-frontdoor-upgrade-guide).
-
 ## Example Usage
 
 ```hcl
diff --git b/website/docs/r/function_app.html.markdown a/website/docs/r/function_app.html.markdown
index d390b3f218..8f4c4275c9 100644
--- b/website/docs/r/function_app.html.markdown
+++ a/website/docs/r/function_app.html.markdown
@@ -237,7 +237,7 @@ The following arguments are supported:
 
 * `storage_account_access_key` - (Required) The access key which will be used to access the backend storage account for the Function App.
 
-~> **Note:** When integrating a `CI/CD pipeline` and expecting to run from a deployed package in `Azure` you must seed your `app settings` as part of terraform code for function app to be successfully deployed. `Important Default key pairs`: (`"WEBSITE_RUN_FROM_PACKAGE" = ""`, `"FUNCTIONS_WORKER_RUNTIME" = "node"` (or Python, etc), `"WEBSITE_NODE_DEFAULT_VERSION" = "10.14.1"`, `"APPINSIGHTS_INSTRUMENTATIONKEY" = ""`).
+~> **Note:** When integrating a `CI/CD pipeline` and expecting to run from a deployed package in `Azure` you must seed your `app settings` as part of the application code for function app to be successfully deployed. `Important Default key pairs`: (`"WEBSITE_RUN_FROM_PACKAGE" = ""`, `"FUNCTIONS_WORKER_RUNTIME" = "node"` (or python, etc), `"WEBSITE_NODE_DEFAULT_VERSION" = "10.14.1"`, `"APPINSIGHTS_INSTRUMENTATIONKEY" = ""`).
 
 ~> **Note:**  When using an App Service Plan in the `Free` or `Shared` Tiers `use_32_bit_worker_process` must be set to `true`.
 
diff --git b/website/docs/r/function_app_slot.html.markdown a/website/docs/r/function_app_slot.html.markdown
index 1e7fb48491..2324abe9f7 100644
--- b/website/docs/r/function_app_slot.html.markdown
+++ a/website/docs/r/function_app_slot.html.markdown
@@ -80,7 +80,7 @@ The following arguments are supported:
 
 * `app_settings` - (Optional) A key-value pair of App Settings.
 
-~> **Note:** When integrating a `CI/CD pipeline` and expecting to run from a deployed package in `Azure` you must seed your `app settings` as part of terraform code for function app to be successfully deployed. `Important Default key pairs`: (`"WEBSITE_RUN_FROM_PACKAGE" = ""`, `"FUNCTIONS_WORKER_RUNTIME" = "node"` (or Python, etc), `"WEBSITE_NODE_DEFAULT_VERSION" = "10.14.1"`, `"APPINSIGHTS_INSTRUMENTATIONKEY" = ""`).
+~> **Note:** When integrating a `CI/CD pipeline` and expecting to run from a deployed package in `Azure` you must seed your `app settings` as part of the application code for function app to be successfully deployed. `Important Default key pairs`: (`"WEBSITE_RUN_FROM_PACKAGE" = ""`, `"FUNCTIONS_WORKER_RUNTIME" = "node"` (or python, etc), `"WEBSITE_NODE_DEFAULT_VERSION" = "10.14.1"`, `"APPINSIGHTS_INSTRUMENTATIONKEY" = ""`).
 
 ~> **NOTE:** The values for `AzureWebJobsStorage` and `FUNCTIONS_EXTENSION_VERSION` will be filled by other input arguments and shouldn't be configured separately. `AzureWebJobsStorage` is filled based on `storage_account_name` and `storage_account_access_key`. `FUNCTIONS_EXTENSION_VERSION` is filled based on `version`.
 
diff --git b/website/docs/r/hdinsight_hadoop_cluster.html.markdown a/website/docs/r/hdinsight_hadoop_cluster.html.markdown
index 11c2e0bb3a..4d6ff566b6 100644
--- b/website/docs/r/hdinsight_hadoop_cluster.html.markdown
+++ a/website/docs/r/hdinsight_hadoop_cluster.html.markdown
@@ -45,7 +45,7 @@ resource "azurerm_hdinsight_hadoop_cluster" "example" {
 
   gateway {
     username = "acctestusrgw"
-    password = "TerrAform123!"
+    password = "PAssword123!"
   }
 
   storage_account {
diff --git b/website/docs/r/hdinsight_hbase_cluster.html.markdown a/website/docs/r/hdinsight_hbase_cluster.html.markdown
index bb85f440b7..90f045f1ad 100644
--- b/website/docs/r/hdinsight_hbase_cluster.html.markdown
+++ a/website/docs/r/hdinsight_hbase_cluster.html.markdown
@@ -45,7 +45,7 @@ resource "azurerm_hdinsight_hbase_cluster" "example" {
 
   gateway {
     username = "acctestusrgw"
-    password = "TerrAform123!"
+    password = "Password123!"
   }
 
   storage_account {
diff --git b/website/docs/r/hdinsight_interactive_query_cluster.html.markdown a/website/docs/r/hdinsight_interactive_query_cluster.html.markdown
index 1af03b06fa..5733c684f4 100644
--- b/website/docs/r/hdinsight_interactive_query_cluster.html.markdown
+++ a/website/docs/r/hdinsight_interactive_query_cluster.html.markdown
@@ -45,7 +45,7 @@ resource "azurerm_hdinsight_interactive_query_cluster" "example" {
 
   gateway {
     username = "acctestusrgw"
-    password = "TerrAform123!"
+    password = "Password!"
   }
 
   storage_account {
diff --git b/website/docs/r/hdinsight_kafka_cluster.html.markdown a/website/docs/r/hdinsight_kafka_cluster.html.markdown
index e033690aa2..4016bc177d 100644
--- b/website/docs/r/hdinsight_kafka_cluster.html.markdown
+++ a/website/docs/r/hdinsight_kafka_cluster.html.markdown
@@ -45,7 +45,7 @@ resource "azurerm_hdinsight_kafka_cluster" "example" {
 
   gateway {
     username = "acctestusrgw"
-    password = "TerrAform123!"
+    password = "Password123!"
   }
 
   storage_account {
diff --git b/website/docs/r/hdinsight_spark_cluster.html.markdown a/website/docs/r/hdinsight_spark_cluster.html.markdown
index c31bdad31c..0bcdaa7b93 100644
--- b/website/docs/r/hdinsight_spark_cluster.html.markdown
+++ a/website/docs/r/hdinsight_spark_cluster.html.markdown
@@ -45,7 +45,7 @@ resource "azurerm_hdinsight_spark_cluster" "example" {
 
   gateway {
     username = "acctestusrgw"
-    password = "TerrAform123!"
+    password = "Password123!"
   }
 
   storage_account {
diff --git b/website/docs/r/healthcare_service.html.markdown a/website/docs/r/healthcare_service.html.markdown
index bf47c3b7ca..373f58d791 100644
--- b/website/docs/r/healthcare_service.html.markdown
+++ a/website/docs/r/healthcare_service.html.markdown
@@ -71,9 +71,9 @@ The following arguments are supported:
 ---
 An `authentication_configuration` block supports the following:
 
-* `authority` - (Optional) The Azure Active Directory (tenant) that serves as the authentication authority to access the service. The default authority is the Directory defined in the authentication scheme in use when running Terraform.
-Authority must be registered to Azure AD and in the following format: <https://{Azure-AD-endpoint}/{tenant-id>}.
-* `audience` - (Optional) The intended audience to receive authentication tokens for the service. The default value is <https://azurehealthcareapis.com>
+* `authority` - (Optional) The Azure Active Directory (tenant) that serves as the authentication authority to access the service. The default authority is the Directory defined in the authentication scheme in use when running this provider.
+Authority must be registered to Azure AD and in the following format: https://{Azure-AD-endpoint}/{tenant-id}.
+* `audience` - (Optional) The intended audience to receive authentication tokens for the service. The default value is https://azurehealthcareapis.com
 * `smart_proxy_enabled` - (Optional) (Boolean) Enables the 'SMART on FHIR' option for mobile and web implementations.
 
 ---
diff --git b/website/docs/r/iothub.html.markdown a/website/docs/r/iothub.html.markdown
index 71e7e51642..c0467bad1b 100644
--- b/website/docs/r/iothub.html.markdown
+++ a/website/docs/r/iothub.html.markdown
@@ -156,6 +156,10 @@ The following arguments are supported:
 
 * `network_rule_set` - (Optional) A `network_rule_set` block as defined below.
 
+~> **NOTE:** The `ip_filter_rule` property block has been deprecated in favour of the `network_rule_set` block and will be removed in version 3.0 of the provider.
+
+* `network_rule_set` - (Optional) A `network_rule_set` block as defined below.
+
 * `route` - (Optional) A `route` block as defined below.
 
 * `enrichment` - (Optional) A `enrichment` block as defined below.
@@ -244,6 +248,26 @@ A `ip_rule` block supports the following:
 
 ---
 
+A `network_rule_set` block supports the following:
+
+* `default_action` - (Optional) Default Action for Network Rule Set. Possible values are `DefaultActionDeny`, `DefaultActionAllow`. Defaults to `DefaultActionDeny`.
+
+* `apply_to_builtin_eventhub_endpoint` - (Optional) Determines if Network Rule Set is also applied to the BuiltIn EventHub EndPoint of the IotHub. Defaults to `false`.
+
+* `ip_rule` - (Optional) One or more `ip_rule` blocks as defined below.
+
+---
+
+A `ip_rule` block supports the following:
+
+* `name` - (Required) The name of the ip rule.
+
+* `ip_mask` - (Required) The IP address range in CIDR notation for the ip rule.
+
+* `action` - (Optional) The desired action for requests captured by this rule. Possible values are `Allow`. Defaults to `Allow`.
+
+---
+
 A `route` block supports the following:
 
 * `name` - (Required) The name of the route.
diff --git b/website/docs/r/iothub_consumer_group.html.markdown a/website/docs/r/iothub_consumer_group.html.markdown
index 055d92342a..3408581bdc 100644
--- b/website/docs/r/iothub_consumer_group.html.markdown
+++ a/website/docs/r/iothub_consumer_group.html.markdown
@@ -34,7 +34,7 @@ resource "azurerm_iothub" "example" {
 }
 
 resource "azurerm_iothub_consumer_group" "example" {
-  name                   = "terraform"
+  name                   = "group"
   iothub_name            = azurerm_iothub.example.name
   eventhub_endpoint_name = "events"
   resource_group_name    = azurerm_resource_group.example.name
diff --git b/website/docs/r/key_vault.html.markdown a/website/docs/r/key_vault.html.markdown
index 2018ddf541..3bb018c43a 100644
--- b/website/docs/r/key_vault.html.markdown
+++ a/website/docs/r/key_vault.html.markdown
@@ -12,11 +12,9 @@ Manages a Key Vault.
 
 ## Disclaimers
 
-~> **Note:** It's possible to define Key Vault Access Policies both within [the `azurerm_key_vault` resource](key_vault.html) via the `access_policy` block and by using [the `azurerm_key_vault_access_policy` resource](key_vault_access_policy.html). However it's not possible to use both methods to manage Access Policies within a KeyVault, since there'll be conflicts.
+~> **Note:** It's possible to define Key Vault Access Policies both within the `azurerm_key_vault` resource via the `access_policy` block and by using the `azurerm_key_vault_access_policy` resource. However it's not possible to use both methods to manage Access Policies within a KeyVault, since there'll be conflicts.
 
-~> **Note:** It's possible to define Key Vault Certificate Contacts both within [the `azurerm_key_vault` resource](key_vault.html) via the `contact` block and by using [the `azurerm_key_vault_certificate_contacts` resource](key_vault_certificate_contacts.html). However it's not possible to use both methods to manage Certificate Contacts within a KeyVault, since there'll be conflicts.
-
-~> **Note:** Terraform will automatically recover a soft-deleted Key Vault during Creation if one is found - you can opt out of this using the `features` block within the Provider block.
+~> **Note:** It's possible to define Key Vault Certificate Contacts both within the `azurerm_key_vault` resource via the `contact` block and by using the `azurerm_key_vault_certificate_contacts` resource. However it's not possible to use both methods to manage Certificate Contacts within a KeyVault, since there'll be conflicts.
 
 ## Example Usage
 
@@ -83,7 +81,7 @@ The following arguments are supported:
 
 ---
 
-* `access_policy` - (Optional) [A list](/docs/configuration/attr-as-blocks.html) of up to 1024 objects describing access policies, as described below.
+* `access_policy` - (Optional) A list of up to 1024 objects describing access policies, as described below.
 
 -> **NOTE** Since `access_policy` can be configured both inline and via the separate `azurerm_key_vault_access_policy` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
 
@@ -99,7 +97,7 @@ The following arguments are supported:
 
 * `purge_protection_enabled` - (Optional) Is Purge Protection enabled for this Key Vault? 
 
-!> **Note:** Once Purge Protection has been Enabled it's not possible to Disable it. Support for [disabling purge protection is being tracked in this Azure API issue](https://github.com/Azure/azure-rest-api-specs/issues/8075). Deleting the Key Vault with Purge Protection Enabled will schedule the Key Vault to be deleted (which will happen by Azure in the configured number of days, currently 90 days - which will be configurable in Terraform in the future).
+!> **Note:** Once Purge Protection has been Enabled it's not possible to Disable it. Support for [disabling purge protection is being tracked in this Azure API issue](https://github.com/Azure/azure-rest-api-specs/issues/8075). Deleting the Key Vault with Purge Protection Enabled will schedule the Key Vault to be deleted (which will happen by Azure in the configured number of days, currently 90 days).
 
 * `public_network_access_enabled` - (Optional) Whether public network access is allowed for this Key Vault. Defaults to `true`.
 
diff --git b/website/docs/r/key_vault_access_policy.html.markdown a/website/docs/r/key_vault_access_policy.html.markdown
index 3945175d50..d4045c9a05 100644
--- b/website/docs/r/key_vault_access_policy.html.markdown
+++ a/website/docs/r/key_vault_access_policy.html.markdown
@@ -87,7 +87,7 @@ In addition to the Arguments listed above - the following Attributes are exporte
 
 * `id` - Key Vault Access Policy ID.
 
--> **NOTE:** This Identifier is unique to Terraform and doesn't map to an existing object within Azure.
+-> **NOTE:** This Identifier is unique to this provider and doesn't map to an existing object within Azure.
 
 ## Timeouts
 
@@ -120,4 +120,4 @@ terraform import azurerm_key_vault_access_policy.example /subscriptions/00000000
 
 where `11111111-1111-1111-1111-111111111111` is the `object_id`.
 
--> **NOTE:** Both Identifiers are unique to Terraform and don't map to an existing object within Azure.
+-> **NOTE:** Both Identifiers are unique to this provider and don't map to an existing object within Azure.
diff --git b/website/docs/r/key_vault_certificate.html.markdown a/website/docs/r/key_vault_certificate.html.markdown
index 982efa923d..c49d4d1aab 100644
--- b/website/docs/r/key_vault_certificate.html.markdown
+++ a/website/docs/r/key_vault_certificate.html.markdown
@@ -11,8 +11,6 @@ description: |-
 
 Manages a Key Vault Certificate.
 
-~> **Note:** the Azure Provider includes a Feature Toggle which will purge a Key Vault Certificate resource on destroy, rather than the default soft-delete. See [`purge_soft_deleted_certificates_on_destroy`](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/guides/features-block#purge_soft_deleted_certificates_on_destroy) for more information. 
-
 ## Example Usage (Importing a PFX)
 
 ~> **Note:** this example assumed the PFX file is located in the same directory at `certificate-to-import.pfx`.
@@ -103,7 +101,7 @@ resource "azurerm_key_vault_certificate" "example" {
 }
 ```
 
-## Example Usage (Generating a new certificate)
+### Generating a new certificate
 
 ```hcl
 data "azurerm_client_config" "current" {}
diff --git b/website/docs/r/key_vault_secret.html.markdown a/website/docs/r/key_vault_secret.html.markdown
index d97d53b42d..d04a166153 100644
--- b/website/docs/r/key_vault_secret.html.markdown
+++ a/website/docs/r/key_vault_secret.html.markdown
@@ -11,11 +11,6 @@ description: |-
 
 Manages a Key Vault Secret.
 
-~> **Note:** All arguments including the secret value will be stored in the raw state as plain-text.
-[Read more about sensitive data in state](/docs/state/sensitive-data.html).
-
-~> **Note:** the Azure Provider includes a Feature Toggle which will purge a Key Vault Secret resource on destroy, rather than the default soft-delete. See [`purge_soft_deleted_secrets_on_destroy`](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/guides/features-block#purge_soft_deleted_secrets_on_destroy) for more information.
-
 ## Example Usage
 
 ```hcl
diff --git b/website/docs/r/kubernetes_cluster.html.markdown a/website/docs/r/kubernetes_cluster.html.markdown
index 182e8f3541..eeffad272f 100644
--- b/website/docs/r/kubernetes_cluster.html.markdown
+++ a/website/docs/r/kubernetes_cluster.html.markdown
@@ -10,15 +10,9 @@ description: |-
 
 Manages a Managed Kubernetes Cluster (also known as AKS / Azure Kubernetes Service)
 
--> **Note:** Due to the fast-moving nature of AKS, we recommend using the latest version of the Azure Provider when using AKS - you can find [the latest version of the Azure Provider here](https://registry.terraform.io/providers/hashicorp/azurerm/latest).
-
-~> **Note:** All arguments including the client secret will be stored in the raw state as plain-text. [Read more about sensitive data in state](/docs/state/sensitive-data.html).
-
 ## Example Usage
 
-This example provisions a basic Managed Kubernetes Cluster. Other examples of the `azurerm_kubernetes_cluster` resource can be found in [the `./examples/kubernetes` directory within the GitHub Repository](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/kubernetes).
-
-An example of how to attach a specific Container Registry to a Managed Kubernetes Cluster can be found in the docs for [azurerm_container_registry](container_registry.html).
+This example provisions a basic Managed Kubernetes Cluster.
 
 ```hcl
 resource "azurerm_resource_group" "example" {
@@ -374,7 +368,7 @@ A `default_node_pool` block supports the following:
 
 -> **Note:** This requires that the `type` is set to `VirtualMachineScaleSets`.
 
--> **Note:** If you're using AutoScaling, you may wish to use [Terraform's `ignore_changes` functionality](https://www.terraform.io/docs/language/meta-arguments/lifecycle.html#ignore_changes) to ignore changes to the `node_count` field.
+-> **Note:** If you're using AutoScaling, you may wish to use [`ignoreChanges` functionality](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) to ignore changes to the `node_count` field.
 
 * `enable_host_encryption` - (Optional) Should the nodes in the Default Node Pool have host encryption enabled? Changing this forces a new resource to be created.
 
@@ -430,7 +424,7 @@ A `default_node_pool` block supports the following:
 
 * `tags` - (Optional) A mapping of tags to assign to the Node Pool.
 
-~> At this time there's a bug in the AKS API where Tags for a Node Pool are not stored in the correct case - you [may wish to use Terraform's `ignore_changes` functionality to ignore changes to the casing](https://www.terraform.io/language/meta-arguments/lifecycle#ignore_changess) until this is fixed in the AKS API.
+~> At this time there's a bug in the AKS API where Tags for a Node Pool are not stored in the correct case - you may wish to use `ignore_changes` functionality to ignore changes to the casing until this is fixed in the AKS API.
 
 * `ultra_ssd_enabled` - (Optional) Used to specify whether the UltraSSD is enabled in the Default Node Pool. Defaults to `false`. See [the documentation](https://docs.microsoft.com/azure/aks/use-ultra-disks) for more information. Changing this forces a new resource to be created.
 
@@ -456,7 +450,7 @@ If `enable_auto_scaling` is set to `true`, then the following fields can also be
 
 * `node_count` - (Optional) The initial number of nodes which should exist in this Node Pool. If specified this must be between `1` and `1000` and between `min_count` and `max_count`.
 
--> **Note:** If specified you may wish to use [Terraform's `ignore_changes` functionality](https://www.terraform.io/language/meta-arguments/lifecycle#ignore_changess) to ignore changes to this field.
+-> **Note:** If specified you may wish to use [`ignoreChanges` functionality](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) to ignore changes to this field.
 
 If `enable_auto_scaling` is set to `false`, then the following fields can also be configured:
 
@@ -636,8 +630,6 @@ A `network_profile` block supports the following:
 
 ~> **Note:** This range should not be used by any network element on or connected to this VNet. Service address CIDR must be smaller than /12. `docker_bridge_cidr`, `dns_service_ip` and `service_cidr` should all be empty or all should be set.
 
-Examples of how to use [AKS with Advanced Networking](https://docs.microsoft.com/azure/aks/networking-overview#advanced-networking) can be [found in the `./examples/kubernetes/` directory in the GitHub repository](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/kubernetes).
-
 * `ip_versions` - (Optional) Specifies a list of IP versions the Kubernetes Cluster will use to assign IP addresses to its nodes and pods. Possible values are `IPv4` and/or `IPv6`. `IPv4` must always be specified. Changing this forces a new resource to be created.
 
 ->**Note:** To configure dual-stack networking `ip_versions` should be set to `["IPv4", "IPv6"]`.
@@ -962,19 +954,6 @@ The `kube_admin_config` and `kube_config` blocks export the following:
 
 * `password` - A password or token used to authenticate to the Kubernetes cluster.
 
--> **Note:** It's possible to use these credentials with [the Kubernetes Provider](/providers/hashicorp/kubernetes/latest/docs) like so:
-
-```hcl
-provider "kubernetes" {
-  host                   = azurerm_kubernetes_cluster.main.kube_config.0.host
-  username               = azurerm_kubernetes_cluster.main.kube_config.0.username
-  password               = azurerm_kubernetes_cluster.main.kube_config.0.password
-  client_certificate     = base64decode(azurerm_kubernetes_cluster.main.kube_config.0.client_certificate)
-  client_key             = base64decode(azurerm_kubernetes_cluster.main.kube_config.0.client_key)
-  cluster_ca_certificate = base64decode(azurerm_kubernetes_cluster.main.kube_config.0.cluster_ca_certificate)
-}
-```
-
 ---
 
 The `ingress_application_gateway` block exports the following:
diff --git b/website/docs/r/kubernetes_cluster_node_pool.html.markdown a/website/docs/r/kubernetes_cluster_node_pool.html.markdown
index 36094d36f7..330275c022 100644
--- b/website/docs/r/kubernetes_cluster_node_pool.html.markdown
+++ a/website/docs/r/kubernetes_cluster_node_pool.html.markdown
@@ -10,13 +10,11 @@ description: |-
 
 Manages a Node Pool within a Kubernetes Cluster
 
--> **Note:** Due to the fast-moving nature of AKS, we recommend using the latest version of the Azure Provider when using AKS - you can find [the latest version of the Azure Provider here](https://registry.terraform.io/providers/hashicorp/azurerm/latest).
-
 ~> **NOTE:** Multiple Node Pools are only supported when the Kubernetes Cluster is using Virtual Machine Scale Sets.
 
 ## Example Usage
 
-This example provisions a basic Kubernetes Node Pool. Other examples of the `azurerm_kubernetes_cluster_node_pool` resource can be found in [the `./examples/kubernetes` directory within the GitHub Repository](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/kubernetes)
+This example provisions a basic Kubernetes Node Pool.
 
 ```hcl
 resource "azurerm_resource_group" "example" {
@@ -142,7 +140,7 @@ The following arguments are supported:
 
 * `tags` - (Optional) A mapping of tags to assign to the resource.
 
-~> At this time there's a bug in the AKS API where Tags for a Node Pool are not stored in the correct case - you [may wish to use Terraform's `ignore_changes` functionality to ignore changes to the casing](https://www.terraform.io/language/meta-arguments/lifecycle#ignore_changess) until this is fixed in the AKS API.
+~> At this time there's a bug in the AKS API where Tags for a Node Pool are not stored in the correct case - you may wish to use [`ignoreChanges`](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) functionality to ignore changes to the casing until this is fixed in the AKS API.
 
 * `scale_down_mode` - (Optional) Specifies how the node pool should deal with scaled-down nodes. Allowed values are `Delete` and `Deallocate`. Defaults to `Delete`.
 
@@ -174,7 +172,7 @@ If `enable_auto_scaling` is set to `true`, then the following fields can also be
 
 * `node_count` - (Optional) The initial number of nodes which should exist within this Node Pool. Valid values are between `0` and `1000` (inclusive) for user pools and between `1` and `1000` (inclusive) for system pools and must be a value in the range `min_count` - `max_count`.
 
--> **NOTE:** If you're specifying an initial number of nodes you may wish to use [Terraform's `ignore_changes` functionality](https://www.terraform.io/language/meta-arguments/lifecycle#ignore_changess) to ignore changes to this field.
+-> **NOTE:** If you're specifying an initial number of nodes you may wish to use [`ignoreChanges` functionality](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) to ignore changes to this field.
 
 If `enable_auto_scaling` is set to `false`, then the following fields can also be configured:
 
diff --git b/website/docs/r/lighthouse_definition.html.markdown a/website/docs/r/lighthouse_definition.html.markdown
index d33d3ca84c..4df5c79d74 100644
--- b/website/docs/r/lighthouse_definition.html.markdown
+++ a/website/docs/r/lighthouse_definition.html.markdown
@@ -20,7 +20,7 @@ data "azurerm_role_definition" "contributor" {
 
 resource "azurerm_lighthouse_definition" "example" {
   name               = "Sample definition"
-  description        = "This is a lighthouse definition created via Terraform"
+  description        = "This is a lighthouse definition created IaC"
   managing_tenant_id = "00000000-0000-0000-0000-000000000000"
   scope              = "/subscriptions/00000000-0000-0000-0000-000000000000"
 
diff --git b/website/docs/r/linux_virtual_machine.html.markdown a/website/docs/r/linux_virtual_machine.html.markdown
index 17e6c815bf..2f33b0e467 100644
--- b/website/docs/r/linux_virtual_machine.html.markdown
+++ a/website/docs/r/linux_virtual_machine.html.markdown
@@ -12,9 +12,9 @@ Manages a Linux Virtual Machine.
 
 ## Disclaimers
 
--> **Note** Terraform will automatically remove the OS Disk by default - this behaviour can be configured [using the `features` setting within the Provider block](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs#features).
+-> **Note** This provider will automatically remove the OS Disk by default - this behaviour can be configured using the `features` configuration within the Provider configuration block.
 
-~> **Note** All arguments including the administrator login and password will be stored in the raw state as plain-text. [Read more about sensitive data in state](/docs/state/sensitive-data.html).
+~> **Note** All arguments including the administrator login and password will be stored in the raw state as plain-text.
 
 -> **Note** This resource does not support Unmanaged Disks. If you need to use Unmanaged Disks you can continue to use [the `azurerm_virtual_machine` resource](virtual_machine.html) instead.
 
@@ -24,7 +24,7 @@ Manages a Linux Virtual Machine.
 
 ## Example Usage
 
-This example provisions a basic Linux Virtual Machine on an internal network. Additional examples of how to use the `azurerm_linux_virtual_machine` resource can be found [in the ./examples/virtual-machines/linux directory within the GitHub Repository](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/virtual-machines/linux).
+This example provisions a basic Linux Virtual Machine on an internal network.
 
 ```hcl
 resource "azurerm_resource_group" "example" {
diff --git b/website/docs/r/linux_virtual_machine_scale_set.html.markdown a/website/docs/r/linux_virtual_machine_scale_set.html.markdown
index 841fd4dda6..e3027950a4 100644
--- b/website/docs/r/linux_virtual_machine_scale_set.html.markdown
+++ a/website/docs/r/linux_virtual_machine_scale_set.html.markdown
@@ -12,15 +12,11 @@ Manages a Linux Virtual Machine Scale Set.
 
 ## Disclaimers
 
--> **NOTE:** As of the **v2.86.0** (November 19, 2021) release of the provider this resource will only create Virtual Machine Scale Sets with the **Uniform** Orchestration Mode.
-
--> **NOTE:** All arguments including the administrator login and password will be stored in the raw state as plain-text. [Read more about sensitive data in state](/docs/state/sensitive-data.html).
-
--> **NOTE:** Terraform will automatically update & reimage the nodes in the Scale Set (if Required) during an Update - this behaviour can be configured [using the `features` setting within the Provider block](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs#features).
+-> **NOTE:** This provider will automatically update & reimage the nodes in the Scale Set (if Required) during an Update - this behaviour can be configured using the `features` setting within the Provider block.
 
 ## Example Usage
 
-This example provisions a basic Linux Virtual Machine Scale Set on an internal network. Additional examples of how to use the `azurerm_linux_virtual_machine_scale_set` resource can be found [in the ./examples/vm-scale-set/linux` directory within the GitHub Repository](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/vm-scale-set/linux).
+This example provisions a basic Linux Virtual Machine Scale Set on an internal network.
 
 ```hcl
 locals {
@@ -100,7 +96,7 @@ resource "azurerm_linux_virtual_machine_scale_set" "example" {
 
 * `instances` - (Optional) The number of Virtual Machines in the Scale Set. Defaults to `0`.
 
--> **NOTE:** If you are using AutoScaling, you may wish to use [Terraform's `ignore_changes` functionality](https://www.terraform.io/language/meta-arguments/lifecycle#ignore_changess) to ignore changes to this field.
+-> **NOTE:** If you're using AutoScaling, you may wish to use [`Ignore Changes` functionality](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) to ignore changes to this field.
 
 * `sku` - (Required) The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
 
@@ -348,20 +344,12 @@ An `extension` block supports the following:
 
 -> **NOTE:** Keys within the `protected_settings` block are notoriously case-sensitive, where the casing required (e.g. TitleCase vs snakeCase) depends on the Extension being used. Please refer to the documentation for the specific Virtual Machine Extension you're looking to use for more information.
 
--> **NOTE:** Rather than defining JSON inline [you can use the `jsonencode` interpolation function](https://www.terraform.io/docs/configuration/functions/jsonencode.html) to define this in a cleaner way.
-
-* `protected_settings_from_key_vault` - (Optional) A `protected_settings_from_key_vault` block as defined below.
-
-~> **Note:** `protected_settings_from_key_vault` cannot be used with `protected_settings`
-
 * `provision_after_extensions` - (Optional) An ordered list of Extension names which this should be provisioned after.
 
 * `settings` - (Optional) A JSON String which specifies Settings for the Extension.
 
 -> **NOTE:** Keys within the `settings` block are notoriously case-sensitive, where the casing required (e.g. TitleCase vs snakeCase) depends on the Extension being used. Please refer to the documentation for the specific Virtual Machine Extension you're looking to use for more information.
 
--> **NOTE:** Rather than defining JSON inline [you can use the `jsonencode` interpolation function](https://www.terraform.io/docs/configuration/functions/jsonencode.html) to define this in a cleaner way.
-
 ---
 
 A `gallery_application` block supports the following:
diff --git b/website/docs/r/logic_app_action_custom.html.markdown a/website/docs/r/logic_app_action_custom.html.markdown
index cbbe42f164..3d311ae7c2 100644
--- b/website/docs/r/logic_app_action_custom.html.markdown
+++ a/website/docs/r/logic_app_action_custom.html.markdown
@@ -60,8 +60,6 @@ The following arguments are supported:
 
 * `body` - (Required) Specifies the JSON Blob defining the Body of this Custom Action.
 
--> **NOTE:** To make the Action more readable, you may wish to consider using HEREDOC syntax (as shown above) or [the `local_file` resource](https://www.terraform.io/docs/providers/local/d/file.html) to load the schema from a file on disk.
-
 ## Attributes Reference
 
 In addition to the Arguments listed above - the following Attributes are exported:
@@ -85,4 +83,4 @@ Logic App Custom Actions can be imported using the `resource id`, e.g.
 terraform import azurerm_logic_app_action_custom.custom1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Logic/workflows/workflow1/actions/custom1
 ```
 
--> **NOTE:** This ID is unique to Terraform and doesn't directly match to any other resource. To compose this ID, you can take the ID Logic App Workflow and append `/actions/{name of the action}`.
+-> **NOTE:** This ID is unique to this provider and doesn't directly match to any other resource. To compose this ID, you can take the ID Logic App Workflow and append `/actions/{name of the action}`.
diff --git b/website/docs/r/logic_app_action_http.html.markdown a/website/docs/r/logic_app_action_http.html.markdown
index ab30d4dd11..bfdcbc15c1 100644
--- b/website/docs/r/logic_app_action_http.html.markdown
+++ a/website/docs/r/logic_app_action_http.html.markdown
@@ -85,4 +85,4 @@ Logic App HTTP Actions can be imported using the `resource id`, e.g.
 terraform import azurerm_logic_app_action_http.webhook1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Logic/workflows/workflow1/actions/webhook1
 ```
 
--> **NOTE:** This ID is unique to Terraform and doesn't directly match to any other resource. To compose this ID, you can take the ID Logic App Workflow and append `/actions/{name of the action}`.
+-> **NOTE:** This ID is unique to this provider and doesn't directly match to any other resource. To compose this ID, you can take the ID Logic App Workflow and append `/actions/{name of the action}`.
diff --git b/website/docs/r/logic_app_trigger_custom.html.markdown a/website/docs/r/logic_app_trigger_custom.html.markdown
index cad0583ab4..8451e74af6 100644
--- b/website/docs/r/logic_app_trigger_custom.html.markdown
+++ a/website/docs/r/logic_app_trigger_custom.html.markdown
@@ -53,8 +53,6 @@ The following arguments are supported:
 
 * `body` - (Required) Specifies the JSON Blob defining the Body of this Custom Trigger.
 
--> **NOTE:** To make the Trigger more readable, you may wish to consider using HEREDOC syntax (as shown above) or [the `local_file` resource](https://www.terraform.io/docs/providers/local/d/file.html) to load the schema from a file on disk.
-
 ## Attributes Reference
 
 In addition to the Arguments listed above - the following Attributes are exported:
@@ -78,4 +76,4 @@ Logic App Custom Triggers can be imported using the `resource id`, e.g.
 terraform import azurerm_logic_app_trigger_custom.custom1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Logic/workflows/workflow1/triggers/custom1
 ```
 
--> **NOTE:** This ID is unique to Terraform and doesn't directly match to any other resource. To compose this ID, you can take the ID Logic App Workflow and append `/triggers/{name of the trigger}`.
+-> **NOTE:** This ID is unique to this provider and doesn't directly match to any other resource. To compose this ID, you can take the ID Logic App Workflow and append `/triggers/{name of the trigger}`.
diff --git b/website/docs/r/logic_app_trigger_http_request.html.markdown a/website/docs/r/logic_app_trigger_http_request.html.markdown
index acfcd4976e..dfe31fbe2d 100644
--- b/website/docs/r/logic_app_trigger_http_request.html.markdown
+++ a/website/docs/r/logic_app_trigger_http_request.html.markdown
@@ -54,8 +54,6 @@ The following arguments are supported:
 
 * `schema` - (Required) A JSON Blob defining the Schema of the incoming request. This needs to be valid JSON.
 
--> **NOTE:** To make the Trigger more readable, you may wish to consider using HEREDOC syntax (as shown above) or [the `local_file` resource](https://www.terraform.io/docs/providers/local/d/file.html) to load the schema from a file on disk.
-
 * `method` - (Optional) Specifies the HTTP Method which the request be using. Possible values include `DELETE`, `GET`, `PATCH`, `POST` or `PUT`.
 
 * `relative_path` - (Optional) Specifies the Relative Path used for this Request.
@@ -87,4 +85,4 @@ Logic App HTTP Request Triggers can be imported using the `resource id`, e.g.
 terraform import azurerm_logic_app_trigger_http_request.request1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Logic/workflows/workflow1/triggers/request1
 ```
 
--> **NOTE:** This ID is unique to Terraform and doesn't directly match to any other resource. To compose this ID, you can take the ID Logic App Workflow and append `/triggers/{name of the trigger}`.
+-> **NOTE:** This ID is unique to this provider and doesn't directly match to any other resource. To compose this ID, you can take the ID Logic App Workflow and append `/triggers/{name of the trigger}`.
diff --git b/website/docs/r/logic_app_trigger_recurrence.html.markdown a/website/docs/r/logic_app_trigger_recurrence.html.markdown
index 8cd3a53f29..7349e0e1e2 100644
--- b/website/docs/r/logic_app_trigger_recurrence.html.markdown
+++ a/website/docs/r/logic_app_trigger_recurrence.html.markdown
@@ -85,4 +85,4 @@ Logic App Recurrence Triggers can be imported using the `resource id`, e.g.
 terraform import azurerm_logic_app_trigger_recurrence.daily /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Logic/workflows/workflow1/triggers/daily
 ```
 
--> **NOTE:** This ID is unique to Terraform and doesn't directly match to any other resource. To compose this ID, you can take the ID Logic App Workflow and append `/triggers/{name of the trigger}`.
+-> **NOTE:** This ID is unique to this provider and doesn't directly match to any other resource. To compose this ID, you can take the ID Logic App Workflow and append `/triggers/{name of the trigger}`.
diff --git b/website/docs/r/managed_disk.html.markdown a/website/docs/r/managed_disk.html.markdown
index 0bc0732669..7e0aed1684 100644
--- b/website/docs/r/managed_disk.html.markdown
+++ a/website/docs/r/managed_disk.html.markdown
@@ -82,7 +82,7 @@ The following arguments are supported:
 
 -> **Note:** Azure Ultra Disk Storage is only available in a region that support availability zones and can only enabled on the following VM series: `ESv3`, `DSv3`, `FSv3`, `LSv2`, `M` and `Mv2`. For more information see the `Azure Ultra Disk Storage` [product documentation](https://docs.microsoft.com/azure/virtual-machines/windows/disks-enable-ultra-ssd).
 
-  * `create_option` - (Required) The method to use when creating the managed disk. Changing this forces a new resource to be created. Possible values include:
+* `create_option` - (Required) The method to use when creating the managed disk. Changing this forces a new resource to be created. Possible values include:
   * `Import` - Import a VHD file in to the managed disk (VHD specified with `source_uri`).
   * `ImportSecure` - Securely import a VHD file in to the managed disk (VHD specified with `source_uri`).
   * `Empty` - Create an empty managed disk.
@@ -113,7 +113,7 @@ The following arguments are supported:
 
 -> **NOTE:** In certain conditions the Data Disk size can be updated without shutting down the Virtual Machine, however only a subset of Virtual Machine SKUs/Disk combinations support this. More information can be found [for Linux Virtual Machines](https://learn.microsoft.com/en-us/azure/virtual-machines/linux/expand-disks?tabs=azure-cli%2Cubuntu#expand-without-downtime) and [Windows Virtual Machines](https://learn.microsoft.com/azure/virtual-machines/windows/expand-os-disk#expand-without-downtime) respectively.
 
-~> **NOTE:** If No Downtime Resizing is not available, be aware that changing this value is disruptive if the disk is attached to a Virtual Machine. The VM will be shut down and de-allocated as required by Azure to action the change. Terraform will attempt to start the machine again after the update if it was in a `running` state when the apply was started.
+~> **NOTE:** If No Downtime Resizing is not available, be aware that changing this value is disruptive if the disk is attached to a Virtual Machine. The VM will be shut down and de-allocated as required by Azure to action the change. The provider will attempt to start the machine again after the update if it was in a `running` state when the apply was started.
 
 ~> **NOTE:** When upgrading `disk_size_gb` from value less than 4095 to a value greater than 4095, the disk will be detached from its associated Virtual Machine as required by Azure to action the change. Terraform will attempt to reattach the disk again after the update.
 
diff --git b/website/docs/r/mariadb_virtual_network_rule.html.markdown a/website/docs/r/mariadb_virtual_network_rule.html.markdown
index 7c909a8c31..796cef0b18 100644
--- b/website/docs/r/mariadb_virtual_network_rule.html.markdown
+++ a/website/docs/r/mariadb_virtual_network_rule.html.markdown
@@ -73,7 +73,7 @@ The following arguments are supported:
 
 * `subnet_id` - (Required) The ID of the subnet that the MariaDB server will be connected to.
 
-~> **NOTE:** Due to [a bug in the Azure API](https://github.com/Azure/azure-rest-api-specs/issues/3719) this resource currently doesn't expose the `ignore_missing_vnet_service_endpoint` field and defaults this to `false`. Terraform will check during the provisioning of the Virtual Network Rule that the Subnet contains the Service Rule to verify that the Virtual Network Rule can be created.
+~> **NOTE:** Due to [a bug in the Azure API](https://github.com/Azure/azure-rest-api-specs/issues/3719) this resource currently doesn't expose the `ignore_missing_vnet_service_endpoint` field and defaults this to `false`. This provider will check during the provisioning of the Virtual Network Rule that the Subnet contains the Service Rule to verify that the Virtual Network Rule can be created.
 
 ## Attributes Reference
 
diff --git b/website/docs/r/monitor_activity_log_alert.html.markdown a/website/docs/r/monitor_activity_log_alert.html.markdown
index 539ce7f40a..64cd4223c0 100644
--- b/website/docs/r/monitor_activity_log_alert.html.markdown
+++ a/website/docs/r/monitor_activity_log_alert.html.markdown
@@ -53,7 +53,7 @@ resource "azurerm_monitor_activity_log_alert" "main" {
     action_group_id = azurerm_monitor_action_group.main.id
 
     webhook_properties = {
-      from = "terraform"
+      from = "source"
     }
   }
 }
diff --git b/website/docs/r/monitor_diagnostic_setting.html.markdown a/website/docs/r/monitor_diagnostic_setting.html.markdown
index 493de7b692..476f4a2a2f 100644
--- b/website/docs/r/monitor_diagnostic_setting.html.markdown
+++ a/website/docs/r/monitor_diagnostic_setting.html.markdown
@@ -185,4 +185,4 @@ Diagnostic Settings can be imported using the `resource id`, e.g.
 terraform import azurerm_monitor_diagnostic_setting.example "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.KeyVault/vaults/vault1|logMonitoring1"
 ```
 
--> **NOTE:** This is a Terraform specific Resource ID which uses the format `{resourceId}|{diagnosticSettingName}`
+-> **NOTE:** This is an ID specific to this resource provider which uses the format `{resourceId}|{diagnosticSettingName}`
diff --git b/website/docs/r/mssql_server.html.markdown a/website/docs/r/mssql_server.html.markdown
index 935d4be3f4..dd93318cf6 100644
--- b/website/docs/r/mssql_server.html.markdown
+++ a/website/docs/r/mssql_server.html.markdown
@@ -11,9 +11,6 @@ description: |-
 
 Manages a Microsoft SQL Azure Database Server.
 
-~> **Note:** All arguments including the administrator login and password will be stored in the raw state as plain-text.
-[Read more about sensitive data in state](/docs/state/sensitive-data.html).
-
 ## Example Usage
 
 ```hcl
diff --git b/website/docs/r/mssql_virtual_machine.html.markdown a/website/docs/r/mssql_virtual_machine.html.markdown
index 74b8959701..b64f16c3be 100644
--- b/website/docs/r/mssql_virtual_machine.html.markdown
+++ a/website/docs/r/mssql_virtual_machine.html.markdown
@@ -12,7 +12,7 @@ Manages a Microsoft SQL Virtual Machine
 
 ## Example Usage
 
-This example provisions a brief Managed Microsoft SQL Virtual Machine. The detailed example of the `azurerm_mssql_virtual_machine` resource can be found in [the `./examples/mssql/mssqlvm` directory within the GitHub Repository](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/mssql/mssqlvm)
+This example provisions a brief Managed Microsoft SQL Virtual Machine.
 
 ```hcl
 data "azurerm_virtual_machine" "example" {
diff --git b/website/docs/r/mysql_virtual_network_rule.html.markdown a/website/docs/r/mysql_virtual_network_rule.html.markdown
index 307626a767..00ab7f0475 100644
--- b/website/docs/r/mysql_virtual_network_rule.html.markdown
+++ a/website/docs/r/mysql_virtual_network_rule.html.markdown
@@ -82,7 +82,7 @@ The following arguments are supported:
 
 * `subnet_id` - (Required) The ID of the subnet that the MySQL server will be connected to.
 
-~> **NOTE:** Due to [a bug in the Azure API](https://github.com/Azure/azure-rest-api-specs/issues/3719) this resource currently doesn't expose the `ignore_missing_vnet_service_endpoint` field and defaults this to `false`. Terraform will check during the provisioning of the Virtual Network Rule that the Subnet contains the Service Rule to verify that the Virtual Network Rule can be created.
+~> **NOTE:** Due to [a bug in the Azure API](https://github.com/Azure/azure-rest-api-specs/issues/3719) this resource currently doesn't expose the `ignore_missing_vnet_service_endpoint` field and defaults this to `false`. This provider will check during the provisioning of the Virtual Network Rule that the Subnet contains the Service Rule to verify that the Virtual Network Rule can be created.
 
 ## Attributes Reference
 
diff --git b/website/docs/r/nat_gateway_public_ip_association.html.markdown a/website/docs/r/nat_gateway_public_ip_association.html.markdown
index e717ee3aee..cdef8e4c39 100644
--- b/website/docs/r/nat_gateway_public_ip_association.html.markdown
+++ a/website/docs/r/nat_gateway_public_ip_association.html.markdown
@@ -52,7 +52,7 @@ The following arguments are supported:
 
 In addition to the Arguments listed above - the following Attributes are exported:
 
-* `id` - The (Terraform specific) ID of the Association between the NAT Gateway and the Public IP.
+* `id` - The (provider specific) ID of the Association between the Nat Gateway and the Public IP.
 
 ## Timeouts
 
@@ -70,4 +70,4 @@ Associations between NAT Gateway and Public IP Addresses can be imported using t
 terraform import azurerm_nat_gateway_public_ip_association.example "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/natGateways/gateway1|/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/publicIPAddresses/myPublicIpAddress1"
 ```
 
--> **Note:** This is a Terraform Specific ID in the format `{natGatewayID}|{publicIPAddressID}`
+-> **Note:** This is a provider Specific ID in the format `{natGatewayID}|{publicIPAddressID}`
diff --git b/website/docs/r/network_connection_monitor.html.markdown a/website/docs/r/network_connection_monitor.html.markdown
index 56e2f04656..5122a5d072 100644
--- b/website/docs/r/network_connection_monitor.html.markdown
+++ a/website/docs/r/network_connection_monitor.html.markdown
@@ -10,7 +10,7 @@ description: |-
 
 Manages a Network Connection Monitor.
 
-~> **NOTE:** Any Network Connection Monitor resource created with API versions 2019-06-01 or earlier (v1) are now incompatible with Terraform, which now only supports v2.
+~> **NOTE:** Any Network Connection Monitor resource created with API versions 2019-06-01 or earlier (v1) are now incompatible with this provider, which now only supports v2.
 
 ## Example Usage
 
@@ -121,7 +121,7 @@ resource "azurerm_network_connection_monitor" "example" {
 
   endpoint {
     name    = "destination"
-    address = "terraform.io"
+    address = "mycompany.io"
   }
 
   test_configuration {
diff --git b/website/docs/r/network_interface_application_gateway_backend_address_pool_association.html.markdown a/website/docs/r/network_interface_application_gateway_backend_address_pool_association.html.markdown
index a8e807f18a..bfc598017f 100644
--- b/website/docs/r/network_interface_application_gateway_backend_address_pool_association.html.markdown
+++ a/website/docs/r/network_interface_application_gateway_backend_address_pool_association.html.markdown
@@ -145,7 +145,7 @@ The following arguments are supported:
 
 In addition to the Arguments listed above - the following Attributes are exported:
 
-* `id` - The (Terraform specific) ID of the Association between the Network Interface and the Application Gateway Backend Address Pool.
+* `id` - The ID (specific to this provider) of the Association between the Network Interface and the Application Gateway Backend Address Pool.
 
 ## Timeouts
 
@@ -164,4 +164,4 @@ Associations between Network Interfaces and Application Gateway Backend Address
 terraform import azurerm_network_interface_application_gateway_backend_address_pool_association.association1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/networkInterfaces/nic1/ipConfigurations/example|/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/applicationGateways/gateway1/backendAddressPools/pool1
 ```
 
--> **NOTE:** This ID is specific to Terraform - and is of the format `{networkInterfaceId}/ipConfigurations/{ipConfigurationName}|{backendAddressPoolId}`.
+-> **NOTE:** This ID is specific to this provider - and is of the format `{networkInterfaceId}/ipConfigurations/{ipConfigurationName}|{backendAddressPoolId}`.
diff --git b/website/docs/r/network_interface_application_security_group_association.html.markdown a/website/docs/r/network_interface_application_security_group_association.html.markdown
index fb8dbbbe3c..a4d2d1ffe5 100644
--- b/website/docs/r/network_interface_application_security_group_association.html.markdown
+++ a/website/docs/r/network_interface_application_security_group_association.html.markdown
@@ -69,7 +69,7 @@ The following arguments are supported:
 
 In addition to the Arguments listed above - the following Attributes are exported:
 
-* `id` - The (Terraform specific) ID of the Association between the Network Interface and the Application Security Group.
+* `id` - The ID (specific to this provider) of the Association between the Network Interface and the Application Security Group.
 
 ## Timeouts
 
@@ -88,4 +88,4 @@ Associations between Network Interfaces and Application Security Groups can be i
 terraform import azurerm_network_interface_application_security_group_association.association1 "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/networkInterfaces/nic1|/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/applicationSecurityGroups/securityGroup1"
 ```
 
--> **NOTE:** This ID is specific to Terraform - and is of the format `{networkInterfaceId}|{applicationSecurityGroupId}`.
+-> **NOTE:** This ID is specific to this provider - and is of the format `{networkInterfaceId}|{applicationSecurityGroupId}`.
diff --git b/website/docs/r/network_interface_backend_address_pool_association.html.markdown a/website/docs/r/network_interface_backend_address_pool_association.html.markdown
index 9d080caee6..1a8cfa880e 100644
--- b/website/docs/r/network_interface_backend_address_pool_association.html.markdown
+++ a/website/docs/r/network_interface_backend_address_pool_association.html.markdown
@@ -89,7 +89,7 @@ The following arguments are supported:
 
 In addition to the Arguments listed above - the following Attributes are exported:
 
-* `id` - The (Terraform specific) ID of the Association between the Network Interface and the Load Balancers Backend Address Pool.
+* `id` - The ID (specific to this provider) of the Association between the Network Interface and the Load Balancers Backend Address Pool.
 
 ## Timeouts
 
@@ -108,4 +108,4 @@ Associations between Network Interfaces and Load Balancer Backend Address Pools
 terraform import azurerm_network_interface_backend_address_pool_association.association1 "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/networkInterfaces/nic1/ipConfigurations/example|/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/loadBalancers/lb1/backendAddressPools/pool1"
 ```
 
--> **NOTE:** This ID is specific to Terraform - and is of the format `{networkInterfaceId}/ipConfigurations/{ipConfigurationName}|{backendAddressPoolId}`.
+-> **NOTE:** This ID is specific to this provider - and is of the format `{networkInterfaceId}/ipConfigurations/{ipConfigurationName}|{backendAddressPoolId}`.
diff --git b/website/docs/r/network_interface_nat_rule_association.html.markdown a/website/docs/r/network_interface_nat_rule_association.html.markdown
index c9fa346997..6f43d4a20c 100644
--- b/website/docs/r/network_interface_nat_rule_association.html.markdown
+++ a/website/docs/r/network_interface_nat_rule_association.html.markdown
@@ -94,7 +94,7 @@ The following arguments are supported:
 
 In addition to the Arguments listed above - the following Attributes are exported:
 
-* `id` - The (Terraform specific) ID of the Association between the Network Interface and the Load Balancers NAT Rule.
+* `id` - The ID (specific to this provider) of the Association between the Network Interface and the Load Balancers NAT Rule.
 
 ## Timeouts
 
@@ -113,4 +113,4 @@ Associations between Network Interfaces and Load Balancer NAT Rule can be import
 terraform import azurerm_network_interface_nat_rule_association.association1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/networkInterfaces/nic1/ipConfigurations/example|/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/rule1
 ```
 
--> **NOTE:** This ID is specific to Terraform - and is of the format `{networkInterfaceId}/ipConfigurations/{ipConfigurationName}|{natRuleId}`.
+-> **NOTE:** This ID is specific to this provider - and is of the format `{networkInterfaceId}/ipConfigurations/{ipConfigurationName}|{natRuleId}`.
diff --git b/website/docs/r/network_interface_security_group_association.html.markdown a/website/docs/r/network_interface_security_group_association.html.markdown
index aea63418f8..63057dce4a 100644
--- b/website/docs/r/network_interface_security_group_association.html.markdown
+++ a/website/docs/r/network_interface_security_group_association.html.markdown
@@ -69,7 +69,7 @@ The following arguments are supported:
 
 In addition to the Arguments listed above - the following Attributes are exported:
 
-* `id` - The (Terraform specific) ID of the Association between the Network Interface and the Network Interface.
+* `id` - The ID of the Association between the Network Interface and the Network Interface.
 
 ## Timeouts
 
@@ -88,4 +88,4 @@ Associations between Network Interfaces and Network Security Group can be import
 terraform import azurerm_network_interface_security_group_association.association1 "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/networkInterfaces/example|/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/networkSecurityGroups/group1"
 ```
 
--> **NOTE:** This ID is specific to Terraform - and is of the format `{networkInterfaceId}|{networkSecurityGroupId}`.
+-> **NOTE:** This ID is specific to this provider - and is of the format `{networkInterfaceId}|{networkSecurityGroupId}`.
diff --git b/website/docs/r/network_security_group.html.markdown a/website/docs/r/network_security_group.html.markdown
index 8ca9eb6ed9..2a6127a3e9 100644
--- b/website/docs/r/network_security_group.html.markdown
+++ a/website/docs/r/network_security_group.html.markdown
@@ -11,7 +11,7 @@ description: |-
 
 Manages a network security group that contains a list of network security rules.  Network security groups enable inbound or outbound traffic to be enabled or denied.
 
-~> **NOTE on Network Security Groups and Network Security Rules:** Terraform currently
+~> **NOTE on Network Security Groups and Network Security Rules:** This provider currently
 provides both a standalone [Network Security Rule resource](network_security_rule.html), and allows for Network Security Rules to be defined in-line within the [Network Security Group resource](network_security_group.html).
 At this time you cannot use a Network Security Group with in-line Network Security Rules in conjunction with any Network Security Rule resources. Doing so will cause a conflict of rule settings and will overwrite rules.
 
@@ -56,7 +56,7 @@ The following arguments are supported:
 
 * `location` - (Required) Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
 
-* `security_rule` - (Optional) [List of objects](/docs/configuration/attr-as-blocks.html) representing security rules, as defined below.
+* `security_rule` - (Optional) A list of objects representing security rules, as defined below.
 
 -> **NOTE** Since `security_rule` can be configured both inline and via the separate `azurerm_network_security_rule` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
 
diff --git b/website/docs/r/network_security_rule.html.markdown a/website/docs/r/network_security_rule.html.markdown
index e70d6ea251..e1462c1dfa 100644
--- b/website/docs/r/network_security_rule.html.markdown
+++ a/website/docs/r/network_security_rule.html.markdown
@@ -11,7 +11,7 @@ description: |-
 
 Manages a Network Security Rule.
 
-~> **NOTE on Network Security Groups and Network Security Rules:** Terraform currently
+~> **NOTE on Network Security Groups and Network Security Rules:** This provider currently
 provides both a standalone [Network Security Rule resource](network_security_rule.html), and allows for Network Security Rules to be defined in-line within the [Network Security Group resource](network_security_group.html).
 At this time you cannot use a Network Security Group with in-line Network Security Rules in conjunction with any Network Security Rule resources. Doing so will cause a conflict of rule settings and will overwrite rules.
 
diff --git b/website/docs/r/notification_hub.html.markdown a/website/docs/r/notification_hub.html.markdown
index 06e3f57418..0ac142e857 100644
--- b/website/docs/r/notification_hub.html.markdown
+++ a/website/docs/r/notification_hub.html.markdown
@@ -64,7 +64,7 @@ A `apns_credential` block contains:
 
 * `application_mode` - (Required) The Application Mode which defines which server the APNS Messages should be sent to. Possible values are `Production` and `Sandbox`.
 
-* `bundle_id` - (Required) The Bundle ID of the iOS/macOS application to send push notifications for, such as `com.hashicorp.example`.
+* `bundle_id` - (Required) The Bundle ID of the iOS/macOS application to send push notifications for, such as `com.org.example`.
 
 * `key_id` - (Required) The Apple Push Notifications Service (APNS) Key.
 
diff --git b/website/docs/r/private_endpoint.html.markdown a/website/docs/r/private_endpoint.html.markdown
index 4424e61fc5..5caa021285 100644
--- b/website/docs/r/private_endpoint.html.markdown
+++ a/website/docs/r/private_endpoint.html.markdown
@@ -346,15 +346,6 @@ A `record_sets` block exports:
 
 ---
 
-## Example HCL Configurations
-
-* How to connect a `Private Endpoint` to a [Application Gateway](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/private-endpoint/application-gateway)
-* How to connect a `Private Endpoint` to a [Cosmos MongoDB](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/private-endpoint/cosmos-db)
-* How to connect a `Private Endpoint` to a [PostgreSQL Server](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/private-endpoint/postgresql)
-* How to connect a `Private Endpoint` to a [Private Link Service](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/private-endpoint/private-link-service)
-* How to connect a `Private Endpoint` to a [Private DNS Group](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/private-endpoint/private-dns-group)
-* How to connect a `Private Endpoint` to a [Databricks Workspace](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/private-endpoint/databricks)
-
 ## Timeouts
 
 The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:
diff --git b/website/docs/r/public_ip.html.markdown a/website/docs/r/public_ip.html.markdown
index d598dc9729..8e2076dcb8 100644
--- b/website/docs/r/public_ip.html.markdown
+++ a/website/docs/r/public_ip.html.markdown
@@ -94,7 +94,7 @@ In addition to the Arguments listed above - the following Attributes are exporte
 
 * `ip_address` - The IP address value that was allocated.
 
-~> **Note** `Dynamic` Public IP Addresses aren't allocated until they're attached to a device (e.g. a Virtual Machine/Load Balancer). Instead you can obtain the IP Address once the Public IP has been assigned via the [`azurerm_public_ip` Data Source](../d/public_ip.html).
+~> **Note** `Dynamic` Public IP Addresses aren't allocated until they're attached to a device (e.g. a Virtual Machine/Load Balancer). Instead you can obtain the IP Address once the Public IP has been assigned via the `azurerm_public_ip` Data Source.
 
 * `fqdn` - Fully qualified domain name of the A DNS record associated with the public IP. `domain_name_label` must be specified to get the `fqdn`. This is the concatenation of the `domain_name_label` and the regionalized DNS zone
 
diff --git b/website/docs/r/recovery_services_vault.html.markdown a/website/docs/r/recovery_services_vault.html.markdown
index 6994e14a46..be709fb4e7 100644
--- b/website/docs/r/recovery_services_vault.html.markdown
+++ a/website/docs/r/recovery_services_vault.html.markdown
@@ -49,6 +49,7 @@ The following arguments are supported:
 * `immutability` - (Optional) Immutability Settings of vault, possible values include: `Locked`, `Unlocked` and `Disabled`.
 
 * `storage_mode_type` - (Optional) The storage type of the Recovery Services Vault. Possible values are `GeoRedundant`, `LocallyRedundant` and `ZoneRedundant`. Defaults to `GeoRedundant`.
+* `cross_region_restore_enabled` - (Optional) Is cross region restore enabled for this Vault? Only can be `true`, when `storage_mode_type` is `GeoRedundant`. Defaults to `false`.
 
 * `cross_region_restore_enabled` - (Optional) Is cross region restore enabled for this Vault? Only can be `true`, when `storage_mode_type` is `GeoRedundant`. Defaults to `false`.
 
diff --git b/website/docs/r/redis_cache.html.markdown a/website/docs/r/redis_cache.html.markdown
index 39761e9e1c..a976d5b21e 100644
--- b/website/docs/r/redis_cache.html.markdown
+++ a/website/docs/r/redis_cache.html.markdown
@@ -15,7 +15,7 @@ Manages a Redis Cache.
 
 ## Example Usage
 
-This example provisions a Standard Redis Cache. Other examples of the `azurerm_redis_cache` resource can be found in [the `./examples/redis-cache` directory within the GitHub Repository](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/redis-cache)
+This example provisions a Standard Redis Cache.
 
 ```hcl
 resource "azurerm_resource_group" "example" {
@@ -139,7 +139,7 @@ redis_configuration {
 * `rdb_backup_max_snapshot_count` - (Optional) The maximum number of snapshots to create as a backup. Only supported for Premium SKUs.
 * `rdb_storage_connection_string` - (Optional) The Connection String to the Storage Account. Only supported for Premium SKUs. In the format: `DefaultEndpointsProtocol=https;BlobEndpoint=${azurerm_storage_account.example.primary_blob_endpoint};AccountName=${azurerm_storage_account.example.name};AccountKey=${azurerm_storage_account.example.primary_access_key}`.
 
-~> **NOTE:** There's a bug in the Redis API where the original storage connection string isn't being returned, which [is being tracked in this issue](https://github.com/Azure/azure-rest-api-specs/issues/3037). In the interim you can use [the `ignore_changes` attribute to ignore changes to this field](https://www.terraform.io/language/meta-arguments/lifecycle#ignore_changess) e.g.:
+~> **NOTE:** There's a bug in the Redis API where the original storage connection string isn't being returned, which [is being tracked in this issue](https://github.com/Azure/azure-rest-api-specs/issues/3037). In the interim you can use [the `ignoreChanges` attribute to ignore changes to this field](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) e.g.:
 
 ```hcl
 resource "azurerm_redis_cache" "example" {
diff --git b/website/docs/r/relay_hybrid_connection.html.markdown a/website/docs/r/relay_hybrid_connection.html.markdown
index 0bd2758610..0707ed6ec5 100644
--- b/website/docs/r/relay_hybrid_connection.html.markdown
+++ a/website/docs/r/relay_hybrid_connection.html.markdown
@@ -27,7 +27,7 @@ resource "azurerm_relay_namespace" "example" {
   sku_name = "Standard"
 
   tags = {
-    source = "terraform"
+    source = "managed"
   }
 }
 
diff --git b/website/docs/r/relay_namespace.html.markdown a/website/docs/r/relay_namespace.html.markdown
index 7223e33728..4ffcf19ee1 100644
--- b/website/docs/r/relay_namespace.html.markdown
+++ a/website/docs/r/relay_namespace.html.markdown
@@ -27,7 +27,7 @@ resource "azurerm_relay_namespace" "example" {
   sku_name = "Standard"
 
   tags = {
-    source = "terraform"
+    source = "example"
   }
 }
 ```
diff --git b/website/docs/r/resource_group_template_deployment.html.markdown a/website/docs/r/resource_group_template_deployment.html.markdown
index ec9c9174f5..443e0b5c2f 100644
--- b/website/docs/r/resource_group_template_deployment.html.markdown
+++ a/website/docs/r/resource_group_template_deployment.html.markdown
@@ -111,7 +111,7 @@ The following arguments are supported:
 
 * `parameters_content` - (Optional) The contents of the ARM Template parameters file - containing a JSON list of parameters.
 
--> An example of how to pass Terraform variables into an ARM Template can be seen in the example.
+-> An example of how to pass variables into an ARM Template can be seen in the example.
 
 * `tags` - (Optional) A mapping of tags which should be assigned to the Resource Group Template Deployment.
 
@@ -123,7 +123,7 @@ In addition to the Arguments listed above - the following Attributes are exporte
 
 * `output_content` - The JSON Content of the Outputs of the ARM Template Deployment.
 
--> An example of how to consume ARM Template outputs in Terraform can be seen in the example.
+-> An example of how to consume ARM Template outputs can be seen in the example.
 
 ## Timeouts
 
diff --git b/website/docs/r/resource_provider_registration.html.markdown a/website/docs/r/resource_provider_registration.html.markdown
index e309cf6054..f8e08c7c38 100644
--- b/website/docs/r/resource_provider_registration.html.markdown
+++ a/website/docs/r/resource_provider_registration.html.markdown
@@ -12,7 +12,7 @@ Manages the registration of a Resource Provider - which allows access to the API
 
 -> The Azure Provider will automatically register all of the Resource Providers which it supports on launch (unless opted-out using the `skip_provider_registration` field within the provider block).
 
-!> **Note:** The errors returned from the Azure API when a Resource Provider is unregistered are unclear (example `API version '2019-01-01' was not found for 'Microsoft.Foo'`) - please ensure that all of the necessary Resource Providers you're using are registered - if in doubt **we strongly recommend letting Terraform register these for you**.
+!> **Note:** The errors returned from the Azure API when a Resource Provider is unregistered are unclear (example `API version '2019-01-01' was not found for 'Microsoft.Foo'`) - please ensure that all of the necessary Resource Providers you're using are registered - if in doubt **we strongly recommend letting the provider register these for you**.
 
 -> **Note:** Adding or Removing a Preview Feature will re-register the Resource Provider.
 
diff --git b/website/docs/r/role_definition.html.markdown a/website/docs/r/role_definition.html.markdown
index e379c9583b..9dd297df09 100644
--- b/website/docs/r/role_definition.html.markdown
+++ a/website/docs/r/role_definition.html.markdown
@@ -20,7 +20,7 @@ data "azurerm_subscription" "primary" {
 resource "azurerm_role_definition" "example" {
   name        = "my-custom-role"
   scope       = data.azurerm_subscription.primary.id
-  description = "This is a custom role created via Terraform"
+  description = "This is a custom role created"
 
   permissions {
     actions     = ["*"]
@@ -90,4 +90,4 @@ Role Definitions can be imported using the `resource id`, e.g.
 terraform import azurerm_role_definition.example "/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Authorization/roleDefinitions/00000000-0000-0000-0000-000000000000|/subscriptions/00000000-0000-0000-0000-000000000000"
 ```
 
--> **NOTE:** This ID is specific to Terraform - and is of the format `{roleDefinitionId}|{scope}`.
+-> **NOTE:** This ID is specific to this provider - and is of the format `{roleDefinitionId}|{scope}`.
diff --git b/website/docs/r/route.html.markdown a/website/docs/r/route.html.markdown
index ac4af43300..89c3969ee4 100644
--- b/website/docs/r/route.html.markdown
+++ a/website/docs/r/route.html.markdown
@@ -10,7 +10,7 @@ description: |-
 
 Manages a Route within a Route Table.
 
-~> **NOTE on Route Tables and Routes:** Terraform currently
+~> **NOTE on Route Tables and Routes:** This provider currently
 provides both a standalone [Route resource](route.html), and allows for Routes to be defined in-line within the [Route Table resource](route_table.html).
 At this time you cannot use a Route Table with in-line Routes in conjunction with any Route resources. Doing so will cause a conflict of Route configurations and will overwrite Routes.
 
diff --git b/website/docs/r/route_table.html.markdown a/website/docs/r/route_table.html.markdown
index c49de6a233..dd2916c58c 100644
--- b/website/docs/r/route_table.html.markdown
+++ a/website/docs/r/route_table.html.markdown
@@ -11,8 +11,7 @@ description: |-
 
 Manages a Route Table
 
-~> **NOTE on Route Tables and Routes:** Terraform currently
-provides both a standalone [Route resource](route.html), and allows for Routes to be defined in-line within the [Route Table resource](route_table.html).
+~> **NOTE on Route Tables and Routes:** There is both a standalone `route` resource, and allows for Routes to be defined in-line within the `route_table` resource.
 At this time you cannot use a Route Table with in-line Routes in conjunction with any Route resources. Doing so will cause a conflict of Route configurations and will overwrite Routes.
 
 ## Example Usage
@@ -51,7 +50,7 @@ The following arguments are supported:
 
 * `location` - (Required) Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
 
-* `route` - (Optional) [List of objects](/docs/configuration/attr-as-blocks.html) representing routes. Each object accepts the arguments documented below.
+* `route` - (Optional) A list of objects representing routes. Each object accepts the arguments documented below.
 
 -> **NOTE** Since `route` can be configured both inline and via the separate `azurerm_route` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
 
diff --git b/website/docs/r/servicebus_namespace.html.markdown a/website/docs/r/servicebus_namespace.html.markdown
index 1441ebaf08..ae2a970df5 100644
--- b/website/docs/r/servicebus_namespace.html.markdown
+++ a/website/docs/r/servicebus_namespace.html.markdown
@@ -18,7 +18,7 @@ provider "azurerm" {
 }
 
 resource "azurerm_resource_group" "example" {
-  name     = "terraform-servicebus"
+  name     = "my-servicebus"
   location = "West Europe"
 }
 
@@ -29,7 +29,7 @@ resource "azurerm_servicebus_namespace" "example" {
   sku                 = "Standard"
 
   tags = {
-    source = "terraform"
+    source = "example"
   }
 }
 ```
diff --git b/website/docs/r/servicebus_namespace_authorization_rule.html.markdown a/website/docs/r/servicebus_namespace_authorization_rule.html.markdown
index 1e67c40d11..97e4bc8354 100644
--- b/website/docs/r/servicebus_namespace_authorization_rule.html.markdown
+++ a/website/docs/r/servicebus_namespace_authorization_rule.html.markdown
@@ -14,8 +14,8 @@ Manages a ServiceBus Namespace authorization Rule within a ServiceBus.
 
 ```hcl
 resource "azurerm_resource_group" "example" {
-  name     = "terraform-servicebus"
-  location = "West Europe"
+  name     = "my-servicebus"
+  location = "West US"
 }
 
 resource "azurerm_servicebus_namespace" "example" {
@@ -25,7 +25,7 @@ resource "azurerm_servicebus_namespace" "example" {
   sku                 = "Standard"
 
   tags = {
-    source = "terraform"
+    source = "example"
   }
 }
 
diff --git b/website/docs/r/servicebus_queue.html.markdown a/website/docs/r/servicebus_queue.html.markdown
index 0d40f4a741..2e7ae3040f 100644
--- b/website/docs/r/servicebus_queue.html.markdown
+++ a/website/docs/r/servicebus_queue.html.markdown
@@ -14,7 +14,7 @@ Manages a ServiceBus Queue.
 
 ```hcl
 resource "azurerm_resource_group" "example" {
-  name     = "terraform-servicebus"
+  name     = "my-servicebus"
   location = "West Europe"
 }
 
@@ -25,7 +25,7 @@ resource "azurerm_servicebus_namespace" "example" {
   sku                 = "Standard"
 
   tags = {
-    source = "terraform"
+    source = "example"
   }
 }
 
diff --git b/website/docs/r/servicebus_queue_authorization_rule.html.markdown a/website/docs/r/servicebus_queue_authorization_rule.html.markdown
index 85cdf12b7c..022e669454 100644
--- b/website/docs/r/servicebus_queue_authorization_rule.html.markdown
+++ a/website/docs/r/servicebus_queue_authorization_rule.html.markdown
@@ -14,8 +14,8 @@ Manages an Authorization Rule for a ServiceBus Queue.
 
 ```hcl
 resource "azurerm_resource_group" "example" {
-  name     = "terraform-servicebus"
-  location = "West Europe"
+  name     = "my-servicebus"
+  location = "West US"
 }
 
 resource "azurerm_servicebus_namespace" "example" {
@@ -25,7 +25,7 @@ resource "azurerm_servicebus_namespace" "example" {
   sku                 = "Standard"
 
   tags = {
-    source = "terraform"
+    source = "example"
   }
 }
 
diff --git b/website/docs/r/servicebus_subscription.html.markdown a/website/docs/r/servicebus_subscription.html.markdown
index 5c6feb344d..b29e95a366 100644
--- b/website/docs/r/servicebus_subscription.html.markdown
+++ a/website/docs/r/servicebus_subscription.html.markdown
@@ -25,7 +25,7 @@ resource "azurerm_servicebus_namespace" "example" {
   sku                 = "Standard"
 
   tags = {
-    source = "terraform"
+    source = "example"
   }
 }
 
diff --git b/website/docs/r/servicebus_subscription_rule.html.markdown a/website/docs/r/servicebus_subscription_rule.html.markdown
index 6d9c021a59..194133d93b 100644
--- b/website/docs/r/servicebus_subscription_rule.html.markdown
+++ a/website/docs/r/servicebus_subscription_rule.html.markdown
@@ -25,7 +25,7 @@ resource "azurerm_servicebus_namespace" "example" {
   sku                 = "Standard"
 
   tags = {
-    source = "terraform"
+    source = "example"
   }
 }
 
@@ -65,7 +65,7 @@ resource "azurerm_servicebus_namespace" "example" {
   sku                 = "Standard"
 
   tags = {
-    source = "terraform"
+    source = "example"
   }
 }
 
diff --git b/website/docs/r/servicebus_topic.html.markdown a/website/docs/r/servicebus_topic.html.markdown
index 06d5cd1c76..779c9813da 100644
--- b/website/docs/r/servicebus_topic.html.markdown
+++ a/website/docs/r/servicebus_topic.html.markdown
@@ -27,7 +27,7 @@ resource "azurerm_servicebus_namespace" "example" {
   sku                 = "Standard"
 
   tags = {
-    source = "terraform"
+    source = "example"
   }
 }
 
diff --git b/website/docs/r/servicebus_topic_authorization_rule.html.markdown a/website/docs/r/servicebus_topic_authorization_rule.html.markdown
index bbd64dfc55..70ddcc49c8 100644
--- b/website/docs/r/servicebus_topic_authorization_rule.html.markdown
+++ a/website/docs/r/servicebus_topic_authorization_rule.html.markdown
@@ -25,7 +25,7 @@ resource "azurerm_servicebus_namespace" "example" {
   sku                 = "Standard"
 
   tags = {
-    source = "terraform"
+    source = "example"
   }
 }
 
diff --git b/website/docs/r/shared_image_version.html.markdown a/website/docs/r/shared_image_version.html.markdown
index e357935c61..a0b15a4745 100644
--- b/website/docs/r/shared_image_version.html.markdown
+++ a/website/docs/r/shared_image_version.html.markdown
@@ -69,7 +69,7 @@ The following arguments are supported:
 
 * `managed_image_id` - (Optional) The ID of the Managed Image or Virtual Machine ID which should be used for this Shared Image Version. Changing this forces a new resource to be created.
 
--> **NOTE:** The ID can be sourced from the `azurerm_image` [Data Source](https://www.terraform.io/docs/providers/azurerm/d/image.html) or [Resource](https://www.terraform.io/docs/providers/azurerm/r/image.html).
+-> **NOTE:** The ID can be sourced from the `azurerm_image` data source or resource
 
 -> **NOTE:** You must specify exact one of `blob_uri`, `managed_image_id` and `os_disk_snapshot_id`.
 
diff --git b/website/docs/r/signalr_service.html.markdown a/website/docs/r/signalr_service.html.markdown
index 9dbbdfaa22..73630c6397 100644
--- b/website/docs/r/signalr_service.html.markdown
+++ a/website/docs/r/signalr_service.html.markdown
@@ -14,8 +14,8 @@ Manages an Azure SignalR service.
 
 ```hcl
 resource "azurerm_resource_group" "example" {
-  name     = "terraform-signalr"
-  location = "West Europe"
+  name     = "my-signalr"
+  location = "West US"
 }
 
 resource "azurerm_signalr_service" "example" {
diff --git b/website/docs/r/sql_failover_group.html.markdown a/website/docs/r/sql_failover_group.html.markdown
index bca8cecad9..b5eec331dd 100644
--- b/website/docs/r/sql_failover_group.html.markdown
+++ a/website/docs/r/sql_failover_group.html.markdown
@@ -73,7 +73,7 @@ The following arguments are supported:
 
 * `databases` - (Optional) A list of database ids to add to the failover group
 
--> **NOTE:** The failover group will create a secondary database for each database listed in `databases`. If the secondary databases need to be managed through Terraform, they should be defined as resources and a dependency added to the failover group to ensure the secondary databases are created first. Please refer to the detailed example which can be found in [the `./examples/sql-azure/failover_group` directory within the GitHub Repository](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/sql-azure/failover_group)
+-> **NOTE:** The failover group will create a secondary database for each database listed in `databases`. If the secondary databases need to be managed through this provider, they should be defined as resources and a dependency added to the failover group to ensure the secondary databases are created first.
 
 * `partner_servers` - (Required) A list of secondary servers as documented below
 
diff --git b/website/docs/r/sql_server.html.markdown a/website/docs/r/sql_server.html.markdown
index 75545c2df4..ffbcc13fb5 100644
--- b/website/docs/r/sql_server.html.markdown
+++ a/website/docs/r/sql_server.html.markdown
@@ -11,10 +11,6 @@ description: |-
 
 Manages a Microsoft SQL Azure Database Server.
 
-~> **Note:** The `azurerm_sql_server` resource is deprecated in version 3.0 of the AzureRM provider and will be removed in version 4.0. Please use the [`azurerm_mssql_server`](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mssql_server) resource instead.
-
-~> **Note:** All arguments including the administrator login and password will be stored in the raw state as plain-text. [Read more about sensitive data in state](https://www.terraform.io/language/state/sensitive-data).
-
 ## Example Usage
 
 ```hcl
diff --git b/website/docs/r/storage_blob.html.markdown a/website/docs/r/storage_blob.html.markdown
index a5e627762b..22cc099131 100644
--- b/website/docs/r/storage_blob.html.markdown
+++ a/website/docs/r/storage_blob.html.markdown
@@ -66,8 +66,6 @@ The following arguments are supported:
 
 * `content_md5` - (Optional) The MD5 sum of the blob contents. Cannot be defined if `source_uri` is defined, or if blob type is Append or Page. Changing this forces a new resource to be created.
 
-~> **NOTE:** This property is intended to be used with the Terraform internal [filemd5](https://www.terraform.io/docs/configuration/functions/filemd5.html) and [md5](https://www.terraform.io/docs/configuration/functions/md5.html) functions when `source` or `source_content`, respectively, are defined.
-
 * `source` - (Optional) An absolute path to a file on the local system. This field cannot be specified for Append blobs and cannot be specified if `source_content` or `source_uri` is specified. Changing this forces a new resource to be created.
 
 * `source_content` - (Optional) The content for this blob which should be defined inline. This field can only be specified for Block blobs and cannot be specified if `source` or `source_uri` is specified. Changing this forces a new resource to be created.
diff --git b/website/docs/r/storage_data_lake_gen2_path.html.markdown a/website/docs/r/storage_data_lake_gen2_path.html.markdown
index 6786f8eb01..38823a0fd4 100644
--- b/website/docs/r/storage_data_lake_gen2_path.html.markdown
+++ a/website/docs/r/storage_data_lake_gen2_path.html.markdown
@@ -14,7 +14,7 @@ Manages a Data Lake Gen2 Path in a File System within an Azure Storage Account.
 
 ## Example Usage
 
-```terraform
+```hcl
 resource "azurerm_resource_group" "example" {
   name     = "example-resources"
   location = "West Europe"
diff --git b/website/docs/r/subnet.html.markdown a/website/docs/r/subnet.html.markdown
index 19e387dbad..a6003c17d6 100644
--- b/website/docs/r/subnet.html.markdown
+++ a/website/docs/r/subnet.html.markdown
@@ -11,7 +11,7 @@ description: |-
 
 Manages a subnet. Subnets represent network segments within the IP space defined by the virtual network.
 
-~> **NOTE on Virtual Networks and Subnet's:** Terraform currently
+~> **NOTE on Virtual Networks and Subnet's:** This provider currently
 provides both a standalone [Subnet resource](subnet.html), and allows for Subnets to be defined in-line within the [Virtual Network resource](virtual_network.html).
 At this time you cannot use a Virtual Network with in-line Subnets in conjunction with any Subnet resources. Doing so will cause a conflict of Subnet configurations and will overwrite Subnet's.
 
diff --git b/website/docs/r/subscription.html.markdown a/website/docs/r/subscription.html.markdown
index 4bbafff3c7..74005275d6 100644
--- b/website/docs/r/subscription.html.markdown
+++ a/website/docs/r/subscription.html.markdown
@@ -8,13 +8,13 @@ description: |-
 
 # azurerm_subscription
 
-Manages an Alias for a Subscription - which adds an Alias to an existing Subscription, allowing it to be managed in Terraform - or create a new Subscription with a new Alias.
+Manages an Alias for a Subscription - which adds an Alias to an existing Subscription, allowing it to be managed in the provider - or create a new Subscription with a new Alias.
 
-~> **NOTE:** Destroying a Subscription controlled by this resource will place the Subscription into a cancelled state. It is possible to re-activate a subscription within 90-days of cancellation, after which time the Subscription is irrevocably deleted, and the Subscription ID cannot be re-used. For further information see [here](https://docs.microsoft.com/azure/cost-management-billing/manage/cancel-azure-subscription#what-happens-after-subscription-cancellation). Users can optionally delete a Subscription once 72 hours have passed, however, this functionality is not suitable for Terraform. A `Deleted` subscription cannot be reactivated.
+~> **NOTE:** Destroying a Subscription controlled by this resource will place the Subscription into a cancelled state. It is possible to re-activate a subscription within 90-days of cancellation, after which time the Subscription is irrevocably deleted, and the Subscription ID cannot be re-used. For further information see [here](https://docs.microsoft.com/azure/cost-management-billing/manage/cancel-azure-subscription#what-happens-after-subscription-cancellation). Users can optionally delete a Subscription once 72 hours have passed, however, this functionality is not suitable for this provider. A `Deleted` subscription cannot be reactivated.
 
-~> **NOTE:** It is not possible to destroy (cancel) a subscription if it contains resources. If resources are present that are not managed by Terraform then these will need to be removed before the Subscription can be destroyed.
+~> **NOTE:** It is not possible to destroy (cancel) a subscription if it contains resources. If resources are present that are not managed by the provider then these will need to be removed before the Subscription can be destroyed.
 
-~> **NOTE:** Azure supports Multiple Aliases per Subscription, however, to reliably manage this resource in Terraform only a single Alias is supported.
+~> **NOTE:** Azure supports Multiple Aliases per Subscription, however, to reliably manage this resource in this provider only a single Alias is supported.
 
 ~> **NOTE:** When using this resource across tenants the `client_id` and `tenant_id` of the `provider` config block should be for the home tenant details for the SPN / User or a permissions error will likely be encountered. See [the official documentation](https://learn.microsoft.com/en-us/azure/cost-management-billing/manage/programmatically-create-subscription) for more details. 
 
@@ -79,7 +79,7 @@ The following arguments are supported:
 
 ---
 
-* `alias` - (Optional) The Alias name for the subscription. Terraform will generate a new GUID if this is not supplied. Changing this forces a new Subscription to be created.
+* `alias` - (Optional) The Alias name for the subscription. This provider will generate a new GUID if this is not supplied. Changing this forces a new Subscription to be created.
 
 * `billing_scope_id` - (Optional) The Azure Billing Scope ID. Can be a Microsoft Customer Account Billing Scope ID, a Microsoft Partner Account Billing Scope ID or an Enrollment Billing Scope ID.
 
@@ -118,5 +118,5 @@ Subscriptions can be imported using the `resource id`, e.g.
 terraform import azurerm_subscription.example "/providers/Microsoft.Subscription/aliases/subscription1"
 ```
 
-!> **NOTE:** When importing a Subscription that was not created programmatically, either by this Terraform resource or using the Alias API, it will have no Alias ID to import via `terraform import`.
-In this scenario, the `subscription_id` property can be completed and Terraform will assume control of the existing subscription by creating an Alias. See the `adding an Alias to an existing Subscription` above. Terrafom requires an alias to correctly manage Subscription resources due to Azure Subscription API design.
+!> **NOTE:** When importing a Subscription that was not created programmatically, either by this provider resource or using the Alias API, it will have no Alias ID to import via `pulumi import`.
+In this scenario, the `subscription_id` property can be completed and the provider will assume control of the existing subscription by creating an Alias. See the `adding an Alias to an existing Subscription` above. This provider requires an alias to correctly manage Subscription resources due to Azure Subscription API design.
diff --git b/website/docs/r/synapse_role_assignment.html.markdown a/website/docs/r/synapse_role_assignment.html.markdown
index 4d2bfe0b10..e625bab2d6 100644
--- b/website/docs/r/synapse_role_assignment.html.markdown
+++ a/website/docs/r/synapse_role_assignment.html.markdown
@@ -104,4 +104,4 @@ Synapse Role Assignment can be imported using the `resource id`, e.g.
 terraform import azurerm_synapse_role_assignment.example "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Synapse/workspaces/workspace1|000000000000"
 ```
 
--> **NOTE:** This ID is specific to Terraform - and is of the format `{synapseScope}|{synapseRoleAssignmentId}`.
+-> **NOTE:** This ID is specific to this provider - and is of the format `{synapseScope}|{synapseRoleAssignmentId}`.
diff --git b/website/docs/r/template_deployment.html.markdown a/website/docs/r/template_deployment.html.markdown
index c3ce72277d..2c0cbbeeaf 100644
--- b/website/docs/r/template_deployment.html.markdown
+++ a/website/docs/r/template_deployment.html.markdown
@@ -10,13 +10,13 @@ description: |-
 
 Manages a template deployment of resources
 
-~> **Note:** The `azurerm_template_deployment` resource has been superseded by the [`azurerm_resource_group_template_deployment`](resource_group_template_deployment.html) resource. The existing `azurerm_template_deployment` resource will be deprecated (but still available) in version 3.0 of the AzureRM Terraform Provider - we recommend using the `azurerm_resource_group_template_deployment` resource for new deployments.
-
--> **Note:** This resource will not clean up nested resources deployed by the ARM Template Deployment. We recommend using the [`azurerm_resource_group_template_deployment`](resource_group_template_deployment.html) resource for new deployments, which can do this.
+~> **Note on ARM Template Deployments:** Due to the way the underlying Azure API is designed, this provider can only manage the deployment of the ARM Template - and not any resources which are created by it.
+This means that when deleting the `azurerm_template_deployment` resource, this provider will only remove the reference to the deployment, whilst leaving any resources created by that ARM Template Deployment.
+One workaround for this is to use a unique Resource Group for each ARM Template Deployment, which means deleting the Resource Group would contain any resources created within it - however this isn't ideal. [More information](https://docs.microsoft.com/en-us/rest/api/resources/deployments#Deployments_Delete).
 
 ## Example Usage
 
-~> **Note:** This example uses [Storage Accounts](storage_account.html) and [Public IP's](public_ip.html) which are natively supported by Terraform - we'd highly recommend using the Native Resources where possible instead rather than an ARM Template, for the reasons outlined above.
+~> **Note:** This example uses [Storage Accounts](storage_account.html) and [Public IP's](public_ip.html) which are natively supported by this provider - we'd highly recommend using the Native Resources where possible instead rather than an ARM Template, for the reasons outlined above.
 
 ```hcl
 resource "azurerm_resource_group" "example" {
@@ -52,7 +52,7 @@ resource "azurerm_template_deployment" "example" {
     "publicIPAddressName": "[concat('myPublicIp', uniquestring(resourceGroup().id))]",
     "publicIPAddressType": "Dynamic",
     "apiVersion": "2015-06-15",
-    "dnsLabelPrefix": "terraform-acctest"
+    "dnsLabelPrefix": "example-acctest"
   },
   "resources": [
     {
@@ -108,19 +108,13 @@ The following arguments are supported:
 * `resource_group_name` - (Required) The name of the resource group in which to create the template deployment. Changing this forces a new resource to be created.
 * `deployment_mode` - (Required) Specifies the mode that is used to deploy resources. This value could be either `Incremental` or `Complete`.
     Note that you will almost *always* want this to be set to `Incremental` otherwise the deployment will destroy all infrastructure not
-    specified within the template, and Terraform will not be aware of this.
+    specified within the template, and this provider will not be aware of this.
 * `template_body` - (Optional) Specifies the JSON definition for the template.
 
-~> **Note:** There's a [`file` function available](https://www.terraform.io/docs/configuration/functions/file.html) which allows you to read this from an external file, which helps makes this more resource more readable.
-
 * `parameters` - (Optional) Specifies the name and value pairs that define the deployment parameters for the template.
 
 * `parameters_body` - (Optional) Specifies a valid Azure JSON parameters file that define the deployment parameters. It can contain KeyVault references
 
-~> **Note:** There's a [`file` function available](https://www.terraform.io/docs/configuration/functions/file.html) which allows you to read this from an external file, which helps makes this more resource more readable.
-
-~> **Also Note:** This is NOT an Azure deployment parameters file, as defined in the [`Microsoft schema's`](https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#). It is effectively the object supplied to the "parameters" attribute in that schema. If you are providing, or generating via [`template_file`](https://www.terraform.io/docs/providers/template/d/file.html), this argument, do not provide a full deployment parameters JSON file with "$schema" and "contentVersion" attributes, just provide the object for the "parameters" attribute of that schema.
-
 ## Attributes Reference
 
 In addition to the Arguments listed above - the following Attributes are exported:
@@ -131,7 +125,7 @@ In addition to the Arguments listed above - the following Attributes are exporte
 
 ## Note
 
-Terraform does not know about the individual resources created by Azure using a deployment template and therefore cannot delete these resources during a destroy. Destroying a template deployment removes the associated deployment operations, but will not delete the Azure resources created by the deployment. In order to delete these resources, the containing resource group must also be destroyed. [More information](https://docs.microsoft.com/rest/api/resources/deployments#Deployments_Delete).
+This provider does not know about the individual resources created by Azure using a deployment template and therefore cannot delete these resources during a destroy. Destroying a template deployment removes the associated deployment operations, but will not delete the Azure resources created by the deployment. In order to delete these resources, the containing resource group must also be destroyed. [More information](https://docs.microsoft.com/rest/api/resources/deployments#Deployments_Delete).
 
 ## Timeouts
 
diff --git b/website/docs/r/virtual_desktop_workspace_application_group_association.html.markdown a/website/docs/r/virtual_desktop_workspace_application_group_association.html.markdown
index b5ef30c661..6b8afb87b3 100644
--- b/website/docs/r/virtual_desktop_workspace_application_group_association.html.markdown
+++ a/website/docs/r/virtual_desktop_workspace_application_group_association.html.markdown
@@ -81,4 +81,4 @@ Associations between Virtual Desktop Workspaces and Virtual Desktop Application
 terraform import azurerm_virtual_desktop_workspace_application_group_association.association1 "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup1/providers/Microsoft.DesktopVirtualization/workspaces/myworkspace|/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup1/providers/Microsoft.DesktopVirtualization/applicationGroups/myapplicationgroup"
 ```
 
--> **NOTE:** This ID is specific to Terraform - and is of the format `{virtualDesktopWorkspaceID}|{virtualDesktopApplicationGroupID}`.
+-> **NOTE:** This ID is specific to this provider - and is of the format `{virtualDesktopWorkspaceID}|{virtualDesktopApplicationGroupID}`.
diff --git b/website/docs/r/virtual_machine.html.markdown a/website/docs/r/virtual_machine.html.markdown
index dfb22f3d1d..76a92c5de5 100644
--- b/website/docs/r/virtual_machine.html.markdown
+++ a/website/docs/r/virtual_machine.html.markdown
@@ -12,13 +12,13 @@ Manages a Virtual Machine.
 
 ## Disclaimers
 
--> **Note:** The `azurerm_virtual_machine` resource has been superseded by the [`azurerm_linux_virtual_machine`](linux_virtual_machine.html) and [`azurerm_windows_virtual_machine`](windows_virtual_machine.html) resources. The existing `azurerm_virtual_machine` resource will continue to be available throughout the 3.x releases however is in a feature-frozen state to maintain compatibility - new functionality will instead be added to the `azurerm_linux_virtual_machine` and `azurerm_windows_virtual_machine` resources.
+-> **Note:** The `azurerm_virtual_machine` resource has been superseded by the `azurerm_linux_virtual_machine` and `azurerm_windows_virtual_machine` resources. The existing `azurerm_virtual_machine` resource will continue to be available throughout the 2.x releases however is in a feature-frozen state to maintain compatibility - new functionality will instead be added to the `azurerm_linux_virtual_machine` and `azurerm_windows_virtual_machine` resources.
 
 ~> **Note:** Data Disks can be attached either directly on the `azurerm_virtual_machine` resource, or using the `azurerm_virtual_machine_data_disk_attachment` resource - but the two cannot be used together. If both are used against the same Virtual Machine, spurious changes will occur.
 
 ## Example Usage (from an Azure Platform Image)
 
-This example provisions a Virtual Machine with Managed Disks. Other examples of the `azurerm_virtual_machine` resource can be found in [the `./examples/virtual-machines` directory within the GitHub Repository](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/virtual-machines)
+This example provisions a Virtual Machine with Managed Disks.
 
 ```hcl
 variable "prefix" {
@@ -123,11 +123,11 @@ The following arguments are supported:
 
 * `delete_os_disk_on_termination` - (Optional) Should the OS Disk (either the Managed Disk / VHD Blob) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
 
-~> **Note:** This setting works when instance is deleted via Terraform only and don't forget to delete disks manually if you deleted VM manually. It can increase spending.
+~> **Note:** This setting works when instance is deleted via the provider only and don't forget to delete disks manually if you deleted VM manually. It can increase spending.
 
 * `delete_data_disks_on_termination` - (Optional) Should the Data Disks (either the Managed Disks / VHD Blobs) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
 
--> **Note:** This setting works when instance is deleted via Terraform only and don't forget to delete disks manually if you deleted VM manually. It can increase spending.
+-> **Note:** This setting works when instance is deleted via the provider only and don't forget to delete disks manually if you deleted VM manually. It can increase spending.
 
 * `identity` - (Optional) An `identity` block as defined below.
 
@@ -222,7 +222,7 @@ A `os_profile` block supports the following:
 3. Contains a numeric digit
 4. Contains a special character
 
-* `custom_data` - (Optional) Specifies custom data to supply to the machine. On Linux-based systems, this can be used as a cloud-init script. On other systems, this will be copied as a file on disk. Internally, Terraform will base64 encode this value before sending it to the API. The maximum length of the binary array is 65535 bytes. Changing this forces a new resource to be created.
+* `custom_data` - (Optional) Specifies custom data to supply to the machine. On Linux-based systems, this can be used as a cloud-init script. On other systems, this will be copied as a file on disk. Internally, this provider will base64 encode this value before sending it to the API. The maximum length of the binary array is 65535 bytes. Changing this forces a new resource to be created.
 
 ---
 
@@ -274,8 +274,6 @@ A `ssh_keys` block supports the following:
 
 ~> **Note:** Azure only supports RSA SSH2 key signatures of at least 2048 bits in length
 
--> **NOTE:** Rather than defining this in-line you can source this from a local file using [the `file` function](https://www.terraform.io/docs/configuration/functions/file.html) - for example `key_data = file("~/.ssh/id_rsa.pub")`.
-
 * `path` - (Required) The path of the destination file on the virtual machine
 
 -> **NOTE:** Due to a limitation in the Azure VM Agent the only allowed `path` is `/home/{username}/.ssh/authorized_keys`.
@@ -300,8 +298,6 @@ To provision a Custom Image, the following fields are applicable:
 
 * `id` - (Optional) Specifies the ID of the Custom Image which the Virtual Machine should be created from. Changing this forces a new resource to be created.
 
--> **NOTE:** An example of how to use this is available within [the `./examples/virtual-machines/virtual_machine/managed-disks/from-custom-image` directory within the GitHub Repository](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/virtual-machines/virtual_machine/managed-disks/from-custom-image)
-
 ---
 
 A `storage_data_disk` block supports the following:
diff --git b/website/docs/r/virtual_machine_data_disk_attachment.html.markdown a/website/docs/r/virtual_machine_data_disk_attachment.html.markdown
index 0ba82f7f61..e926fdc98c 100644
--- b/website/docs/r/virtual_machine_data_disk_attachment.html.markdown
+++ a/website/docs/r/virtual_machine_data_disk_attachment.html.markdown
@@ -144,4 +144,4 @@ Virtual Machines Data Disk Attachments can be imported using the `resource id`,
 terraform import azurerm_virtual_machine_data_disk_attachment.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/virtualMachines/machine1/dataDisks/disk1
 ```
 
--> **Please Note:** This is a Terraform Unique ID matching the format: `{virtualMachineID}/dataDisks/{diskName}`
+-> **Please Note:** This is a ID (specific to this provider) matching the format: `{virtualMachineID}/dataDisks/{diskName}`
diff --git b/website/docs/r/virtual_machine_scale_set.html.markdown a/website/docs/r/virtual_machine_scale_set.html.markdown
index 9dad90e505..52bae2e016 100644
--- b/website/docs/r/virtual_machine_scale_set.html.markdown
+++ a/website/docs/r/virtual_machine_scale_set.html.markdown
@@ -10,12 +10,6 @@ description: |-
 
 Manages a virtual machine scale set.
 
-## Disclaimers
-
-!> **Note:** The `azurerm_virtual_machine_scale_set` resource has been deprecated in favour of the [`azurerm_linux_virtual_machine_scale_set`](linux_virtual_machine_scale_set.html) and [`azurerm_windows_virtual_machine_scale_set`](windows_virtual_machine_scale_set.html) resources. Whilst this will continue to be available throughout the 2.x and 3.x releases however is in a feature-frozen state to maintain compatibility - new functionality will instead be added to the `azurerm_linux_virtual_machine_scale_set` and `azurerm_windows_virtual_machine_scale_set` resources and the `azurerm_virtual_machine_scale_set` resource will be removed in the future.
-
-~> **NOTE:** All arguments including the administrator login and password will be stored in the raw state as plain-text. [Read more about sensitive data in state](/docs/state/sensitive-data.html).
-
 ## Example Usage with Managed Disks (Recommended)
 
 ```hcl
@@ -148,7 +142,7 @@ resource "azurerm_virtual_machine_scale_set" "example" {
   }
 
   network_profile {
-    name    = "terraformnetworkprofile"
+    name    = "mynetworkprofile"
     primary = true
 
     ip_configuration {
@@ -388,7 +382,7 @@ The `os_profile` block supports the following:
 * `computer_name_prefix` - (Required) Specifies the computer name prefix for all of the virtual machines in the scale set. Computer name prefixes must be 1 to 9 characters long for windows images and 1 - 58 for Linux. Changing this forces a new resource to be created.
 * `admin_username` - (Required) Specifies the administrator account name to use for all the instances of virtual machines in the scale set.
 * `admin_password` - (Optional) Specifies the administrator password to use for all the instances of virtual machines in a scale set.
-* `custom_data` - (Optional) Specifies custom data to supply to the machine. On Linux-based systems, this can be used as a cloud-init script. On other systems, this will be copied as a file on disk. Internally, Terraform will base64 encode this value before sending it to the API. The maximum length of the binary array is 65535 bytes.
+* `custom_data` - (Optional) Specifies custom data to supply to the machine. On Linux-based systems, this can be used as a cloud-init script. On other systems, this will be copied as a file on disk. Internally, this provider will base64 encode this value before sending it to the API. The maximum length of the binary array is 65535 bytes.
 
 ---
 
diff --git b/website/docs/r/virtual_network.html.markdown a/website/docs/r/virtual_network.html.markdown
index 876cf68385..623813b4e8 100644
--- b/website/docs/r/virtual_network.html.markdown
+++ a/website/docs/r/virtual_network.html.markdown
@@ -11,10 +11,10 @@ description: |-
 Manages a virtual network including any configured subnets. Each subnet can
 optionally be configured with a security group to be associated with the subnet.
 
-~> **NOTE on Virtual Networks and Subnets:** Terraform currently provides both a standalone [Subnet resource](subnet.html), and allows for Subnets to be defined in-line within the [Virtual Network resource](virtual_network.html).
-At this time you cannot use a Virtual Network with in-line Subnets in conjunction with any Subnet resources. Doing so will cause a conflict of Subnet configurations and will overwrite subnets.
-
-~> **NOTE on Virtual Networks and DNS Servers:** Terraform currently provides both a standalone [virtual network DNS Servers resource](virtual_network_dns_servers.html), and allows for DNS servers to be defined in-line within the [Virtual Network resource](virtual_network.html).
+~> **NOTE on Virtual Networks and Subnet's:** This provider currently
+provides both a standalone Subnet resource, and allows for Subnets to be defined in-line within the Virtual Network resource.
+At this time you cannot use a Virtual Network with in-line Subnets in conjunction with any Subnet resources. Doing so will cause a conflict of Subnet configurations and will overwrite Subnet's.
+~> **NOTE on Virtual Networks and DNS Servers:** This provider currently provides both a standalone virtual network DNS Servers resource, and allows for DNS servers to be defined in-line within the Virtual Network resource.
 At this time you cannot use a Virtual Network with in-line DNS servers in conjunction with any Virtual Network DNS Servers resources. Doing so will cause a conflict of Virtual Network DNS Servers configurations and will overwrite virtual networks DNS servers.
 
 ## Example Usage
diff --git b/website/docs/r/windows_virtual_machine.html.markdown a/website/docs/r/windows_virtual_machine.html.markdown
index 87f4b33d63..fb92a5630e 100644
--- b/website/docs/r/windows_virtual_machine.html.markdown
+++ a/website/docs/r/windows_virtual_machine.html.markdown
@@ -12,9 +12,9 @@ Manages a Windows Virtual Machine.
 
 ## Disclaimers
 
--> **Note** Terraform will automatically remove the OS Disk by default - this behaviour can be configured [using the `features` setting within the Provider block](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs#features).
+-> **Note** This provider will automatically remove the OS Disk by default - this behaviour can be configured using the `features` setting within the Provider block.
 
-~> **Note** All arguments including the administrator login and password will be stored in the raw state as plain-text. [Read more about sensitive data in state](/docs/state/sensitive-data.html).
+~> **Note** All arguments including the administrator login and password will be stored in the raw state as plain-text.
 
 ~> **Note** This resource does not support Unmanaged Disks. If you need to use Unmanaged Disks you can continue to use [the `azurerm_virtual_machine` resource](virtual_machine.html) instead.
 
@@ -24,7 +24,7 @@ Manages a Windows Virtual Machine.
 
 ## Example Usage
 
-This example provisions a basic Windows Virtual Machine on an internal network. Additional examples of how to use the `azurerm_windows_virtual_machine` resource can be found [in the `./examples/virtual-machines/windows`](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/virtual-machines/windows) directory within the GitHub Repository.
+This example provisions a basic Windows Virtual Machine on an internal network.
 
 ```hcl
 provider "azurerm" {
diff --git b/website/docs/r/windows_virtual_machine_scale_set.html.markdown a/website/docs/r/windows_virtual_machine_scale_set.html.markdown
index 88bc7ca653..f6f89d9934 100644
--- b/website/docs/r/windows_virtual_machine_scale_set.html.markdown
+++ a/website/docs/r/windows_virtual_machine_scale_set.html.markdown
@@ -12,17 +12,15 @@ Manages a Windows Virtual Machine Scale Set.
 
 ## Disclaimers
 
--> **NOTE:** As of the **v2.86.0** (November 19, 2021) release of the provider this resource will only create Virtual Machine Scale Sets with the **Uniform** Orchestration Mode.
+~> **NOTE:**: All arguments including the administrator login and password will be stored in the raw state as plain-text.
 
--> **NOTE:** All arguments including the administrator login and password will be stored in the raw state as plain-text. [Read more about sensitive data in state](/docs/state/sensitive-data.html).
+-> **NOTE:** This provider will automatically update & reimage the nodes in the Scale Set (if Required) during an Update - this behaviour can be configured using the `features` setting within the Provider block.
 
--> **NOTE:** Terraform will automatically update & reimage the nodes in the Scale Set (if Required) during an Update - this behaviour can be configured [using the `features` setting within the Provider block](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs#features).
-
--> **NOTE:** This resource does not support Unmanaged Disks. If you need to use Unmanaged Disks you can continue to use [the `azurerm_virtual_machine_scale_set` resource](virtual_machine_scale_set.html) instead
+~> **NOTE:** This resource does not support Unmanaged Disks. If you need to use Unmanaged Disks you can continue to use the `azurerm_virtual_machine_scale_set` resource instead
 
 ## Example Usage
 
-This example provisions a basic Windows Virtual Machine Scale Set on an internal network. Additional examples of how to use the `azurerm_windows_virtual_machine_scale_set` resource can be found [in the ./examples/vm-scale-set/windows` directory within the Github Repository](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/vm-scale-set/windows).
+This example provisions a basic Windows Virtual Machine Scale Set on an internal network.
 
 ```hcl
 provider "azurerm" {
@@ -96,7 +94,7 @@ resource "azurerm_windows_virtual_machine_scale_set" "example" {
 
 * `instances` - (Required) The number of Virtual Machines in the Scale Set.
 
--> **NOTE:** If you're using AutoScaling, you may wish to use [Terraform's `ignore_changes` functionality](https://www.terraform.io/language/meta-arguments/lifecycle#ignore_changess) to ignore changes to this field.
+-> **NOTE:** If you're using AutoScaling, you may wish to use [`Ignore Changes` functionality](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) to ignore changes to this field.
 
 * `sku` - (Required) The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
 
@@ -336,20 +334,12 @@ An `extension` block supports the following:
 
 -> **NOTE:** Keys within the `protected_settings` block are notoriously case-sensitive, where the casing required (e.g. TitleCase vs snakeCase) depends on the Extension being used. Please refer to the documentation for the specific Virtual Machine Extension you're looking to use for more information.
 
--> **NOTE:** Rather than defining JSON inline [you can use the `jsonencode` interpolation function](https://www.terraform.io/docs/configuration/functions/jsonencode.html) to define this in a cleaner way.
-
-* `protected_settings_from_key_vault` - (Optional) A `protected_settings_from_key_vault` block as defined below.
-
-~> **Note:** `protected_settings_from_key_vault` cannot be used with `protected_settings`
-
 * `provision_after_extensions` - (Optional) An ordered list of Extension names which this should be provisioned after.
 
 * `settings` - (Optional) A JSON String which specifies Settings for the Extension.
 
 -> **NOTE:** Keys within the `settings` block are notoriously case-sensitive, where the casing required (e.g. TitleCase vs snakeCase) depends on the Extension being used. Please refer to the documentation for the specific Virtual Machine Extension you're looking to use for more information.
 
--> **NOTE:** Rather than defining JSON inline [you can use the `jsonencode` interpolation function](https://www.terraform.io/docs/configuration/functions/jsonencode.html) to define this in a cleaner way.
-
 ---
 
 A `gallery_application` block supports the following:
