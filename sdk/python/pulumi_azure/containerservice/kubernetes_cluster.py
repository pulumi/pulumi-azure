# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class KubernetesCluster(pulumi.CustomResource):
    """
    Manages a managed Kubernetes Cluster (AKS)
    
    ~> **Note:** All arguments including the client secret will be stored in the raw state as plain-text.
    [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
    """
    def __init__(__self__, __name__, __opts__=None, addon_profile=None, agent_pool_profile=None, dns_prefix=None, enable_rbac=None, kubernetes_version=None, linux_profile=None, location=None, name=None, network_profile=None, resource_group_name=None, service_principal=None, tags=None):
        """Create a KubernetesCluster resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['addonProfile'] = addon_profile

        if not agent_pool_profile:
            raise TypeError('Missing required property agent_pool_profile')
        __props__['agentPoolProfile'] = agent_pool_profile

        if not dns_prefix:
            raise TypeError('Missing required property dns_prefix')
        __props__['dnsPrefix'] = dns_prefix

        __props__['enableRbac'] = enable_rbac

        __props__['kubernetesVersion'] = kubernetes_version

        __props__['linuxProfile'] = linux_profile

        if not location:
            raise TypeError('Missing required property location')
        __props__['location'] = location

        __props__['name'] = name

        __props__['networkProfile'] = network_profile

        if not resource_group_name:
            raise TypeError('Missing required property resource_group_name')
        __props__['resourceGroupName'] = resource_group_name

        if not service_principal:
            raise TypeError('Missing required property service_principal')
        __props__['servicePrincipal'] = service_principal

        __props__['tags'] = tags

        __props__['fqdn'] = None
        __props__['kube_config'] = None
        __props__['kube_config_raw'] = None
        __props__['node_resource_group'] = None

        super(KubernetesCluster, __self__).__init__(
            'azure:containerservice/kubernetesCluster:KubernetesCluster',
            __name__,
            __props__,
            __opts__)

