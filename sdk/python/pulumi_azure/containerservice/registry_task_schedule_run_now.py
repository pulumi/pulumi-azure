# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RegistryTaskScheduleRunNowArgs', 'RegistryTaskScheduleRunNow']

@pulumi.input_type
class RegistryTaskScheduleRunNowArgs:
    def __init__(__self__, *,
                 container_registry_task_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a RegistryTaskScheduleRunNow resource.
        :param pulumi.Input[str] container_registry_task_id: The ID of the Container Registry Task that to be scheduled. Changing this forces a new Container Registry Task Schedule to be created.
        """
        RegistryTaskScheduleRunNowArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            container_registry_task_id=container_registry_task_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             container_registry_task_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("container_registry_task_id", container_registry_task_id)

    @property
    @pulumi.getter(name="containerRegistryTaskId")
    def container_registry_task_id(self) -> pulumi.Input[str]:
        """
        The ID of the Container Registry Task that to be scheduled. Changing this forces a new Container Registry Task Schedule to be created.
        """
        return pulumi.get(self, "container_registry_task_id")

    @container_registry_task_id.setter
    def container_registry_task_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_registry_task_id", value)


@pulumi.input_type
class _RegistryTaskScheduleRunNowState:
    def __init__(__self__, *,
                 container_registry_task_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RegistryTaskScheduleRunNow resources.
        :param pulumi.Input[str] container_registry_task_id: The ID of the Container Registry Task that to be scheduled. Changing this forces a new Container Registry Task Schedule to be created.
        """
        _RegistryTaskScheduleRunNowState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            container_registry_task_id=container_registry_task_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             container_registry_task_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if container_registry_task_id is not None:
            _setter("container_registry_task_id", container_registry_task_id)

    @property
    @pulumi.getter(name="containerRegistryTaskId")
    def container_registry_task_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Container Registry Task that to be scheduled. Changing this forces a new Container Registry Task Schedule to be created.
        """
        return pulumi.get(self, "container_registry_task_id")

    @container_registry_task_id.setter
    def container_registry_task_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_registry_task_id", value)


class RegistryTaskScheduleRunNow(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 container_registry_task_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Runs a Container Registry Task Schedule.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_registry = azure.containerservice.Registry("exampleRegistry",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            sku="Basic")
        example_registry_task = azure.containerservice.RegistryTask("exampleRegistryTask",
            container_registry_id=example_registry.id,
            platform=azure.containerservice.RegistryTaskPlatformArgs(
                os="Linux",
            ),
            docker_step=azure.containerservice.RegistryTaskDockerStepArgs(
                dockerfile_path="Dockerfile",
                context_path="https://github.com/<user name>/acr-build-helloworld-node#main",
                context_access_token="<github personal access token>",
                image_names=["helloworld:{{.Run.ID}}"],
            ))
        example_registry_task_schedule_run_now = azure.containerservice.RegistryTaskScheduleRunNow("exampleRegistryTaskScheduleRunNow", container_registry_task_id=example_registry_task.id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] container_registry_task_id: The ID of the Container Registry Task that to be scheduled. Changing this forces a new Container Registry Task Schedule to be created.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RegistryTaskScheduleRunNowArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Runs a Container Registry Task Schedule.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_registry = azure.containerservice.Registry("exampleRegistry",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            sku="Basic")
        example_registry_task = azure.containerservice.RegistryTask("exampleRegistryTask",
            container_registry_id=example_registry.id,
            platform=azure.containerservice.RegistryTaskPlatformArgs(
                os="Linux",
            ),
            docker_step=azure.containerservice.RegistryTaskDockerStepArgs(
                dockerfile_path="Dockerfile",
                context_path="https://github.com/<user name>/acr-build-helloworld-node#main",
                context_access_token="<github personal access token>",
                image_names=["helloworld:{{.Run.ID}}"],
            ))
        example_registry_task_schedule_run_now = azure.containerservice.RegistryTaskScheduleRunNow("exampleRegistryTaskScheduleRunNow", container_registry_task_id=example_registry_task.id)
        ```

        :param str resource_name: The name of the resource.
        :param RegistryTaskScheduleRunNowArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RegistryTaskScheduleRunNowArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            RegistryTaskScheduleRunNowArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 container_registry_task_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RegistryTaskScheduleRunNowArgs.__new__(RegistryTaskScheduleRunNowArgs)

            if container_registry_task_id is None and not opts.urn:
                raise TypeError("Missing required property 'container_registry_task_id'")
            __props__.__dict__["container_registry_task_id"] = container_registry_task_id
        super(RegistryTaskScheduleRunNow, __self__).__init__(
            'azure:containerservice/registryTaskScheduleRunNow:RegistryTaskScheduleRunNow',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            container_registry_task_id: Optional[pulumi.Input[str]] = None) -> 'RegistryTaskScheduleRunNow':
        """
        Get an existing RegistryTaskScheduleRunNow resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] container_registry_task_id: The ID of the Container Registry Task that to be scheduled. Changing this forces a new Container Registry Task Schedule to be created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RegistryTaskScheduleRunNowState.__new__(_RegistryTaskScheduleRunNowState)

        __props__.__dict__["container_registry_task_id"] = container_registry_task_id
        return RegistryTaskScheduleRunNow(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="containerRegistryTaskId")
    def container_registry_task_id(self) -> pulumi.Output[str]:
        """
        The ID of the Container Registry Task that to be scheduled. Changing this forces a new Container Registry Task Schedule to be created.
        """
        return pulumi.get(self, "container_registry_task_id")

