# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RegistryArgs', 'Registry']

@pulumi.input_type
class RegistryArgs:
    def __init__(__self__, *,
                 resource_group_name: pulumi.Input[str],
                 admin_enabled: Optional[pulumi.Input[bool]] = None,
                 anonymous_pull_enabled: Optional[pulumi.Input[bool]] = None,
                 data_endpoint_enabled: Optional[pulumi.Input[bool]] = None,
                 encryption: Optional[pulumi.Input['RegistryEncryptionArgs']] = None,
                 georeplication_locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 georeplications: Optional[pulumi.Input[Sequence[pulumi.Input['RegistryGeoreplicationArgs']]]] = None,
                 identity: Optional[pulumi.Input['RegistryIdentityArgs']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_rule_bypass_option: Optional[pulumi.Input[str]] = None,
                 network_rule_set: Optional[pulumi.Input['RegistryNetworkRuleSetArgs']] = None,
                 public_network_access_enabled: Optional[pulumi.Input[bool]] = None,
                 quarantine_policy_enabled: Optional[pulumi.Input[bool]] = None,
                 retention_policy: Optional[pulumi.Input['RegistryRetentionPolicyArgs']] = None,
                 sku: Optional[pulumi.Input[str]] = None,
                 storage_account_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 trust_policy: Optional[pulumi.Input['RegistryTrustPolicyArgs']] = None,
                 zone_redundancy_enabled: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Registry resource.
        :param pulumi.Input[str] resource_group_name: The name of the resource group in which to create the Container Registry. Changing this forces a new resource to be created.
        :param pulumi.Input[bool] admin_enabled: Specifies whether the admin user is enabled. Defaults to `false`.
        :param pulumi.Input[bool] anonymous_pull_enabled: Whether allows anonymous (unauthenticated) pull access to this Container Registry? Defaults to `false`. This is only supported on resources with the `Standard` or `Premium` SKU.
        :param pulumi.Input[bool] data_endpoint_enabled: Whether to enable dedicated data endpoints for this Container Registry? Defaults to `false`. This is only supported on resources with the `Premium` SKU.
        :param pulumi.Input['RegistryEncryptionArgs'] encryption: An `encryption` block as documented below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] georeplication_locations: A list of Azure locations where the container registry should be geo-replicated.
        :param pulumi.Input[Sequence[pulumi.Input['RegistryGeoreplicationArgs']]] georeplications: A `georeplications` block as documented below.
        :param pulumi.Input['RegistryIdentityArgs'] identity: An `identity` block as defined below.
        :param pulumi.Input[str] location: Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: Specifies the name of the Container Registry. Changing this forces a new resource to be created.
        :param pulumi.Input[str] network_rule_bypass_option: Whether to allow trusted Azure services to access a network restricted Container Registry? Possible values are `None` and `AzureServices`. Defaults to `AzureServices`.
        :param pulumi.Input['RegistryNetworkRuleSetArgs'] network_rule_set: A `network_rule_set` block as documented below.
        :param pulumi.Input[bool] public_network_access_enabled: Whether public network access is allowed for the container registry. Defaults to `true`.
        :param pulumi.Input[bool] quarantine_policy_enabled: Boolean value that indicates whether quarantine policy is enabled. Defaults to `false`.
        :param pulumi.Input['RegistryRetentionPolicyArgs'] retention_policy: A `retention_policy` block as documented below.
        :param pulumi.Input[str] sku: The SKU name of the container registry. Possible values are  `Basic`, `Standard` and `Premium`. `Classic` (which was previously `Basic`) is supported only for existing resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the resource.
        :param pulumi.Input['RegistryTrustPolicyArgs'] trust_policy: A `trust_policy` block as documented below.
        :param pulumi.Input[bool] zone_redundancy_enabled: Whether zone redundancy is enabled for this Container Registry? Changing this forces a new resource to be created. Defaults to `false`.
        """
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if admin_enabled is not None:
            pulumi.set(__self__, "admin_enabled", admin_enabled)
        if anonymous_pull_enabled is not None:
            pulumi.set(__self__, "anonymous_pull_enabled", anonymous_pull_enabled)
        if data_endpoint_enabled is not None:
            pulumi.set(__self__, "data_endpoint_enabled", data_endpoint_enabled)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if georeplication_locations is not None:
            warnings.warn("""Deprecated in favour of `georeplications`""", DeprecationWarning)
            pulumi.log.warn("""georeplication_locations is deprecated: Deprecated in favour of `georeplications`""")
        if georeplication_locations is not None:
            pulumi.set(__self__, "georeplication_locations", georeplication_locations)
        if georeplications is not None:
            pulumi.set(__self__, "georeplications", georeplications)
        if identity is not None:
            pulumi.set(__self__, "identity", identity)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_rule_bypass_option is not None:
            pulumi.set(__self__, "network_rule_bypass_option", network_rule_bypass_option)
        if network_rule_set is not None:
            pulumi.set(__self__, "network_rule_set", network_rule_set)
        if public_network_access_enabled is not None:
            pulumi.set(__self__, "public_network_access_enabled", public_network_access_enabled)
        if quarantine_policy_enabled is not None:
            pulumi.set(__self__, "quarantine_policy_enabled", quarantine_policy_enabled)
        if retention_policy is not None:
            pulumi.set(__self__, "retention_policy", retention_policy)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if storage_account_id is not None:
            warnings.warn("""this attribute is no longer recognized by the API and is not functional anymore, thus this property will be removed in v3.0""", DeprecationWarning)
            pulumi.log.warn("""storage_account_id is deprecated: this attribute is no longer recognized by the API and is not functional anymore, thus this property will be removed in v3.0""")
        if storage_account_id is not None:
            pulumi.set(__self__, "storage_account_id", storage_account_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if trust_policy is not None:
            pulumi.set(__self__, "trust_policy", trust_policy)
        if zone_redundancy_enabled is not None:
            pulumi.set(__self__, "zone_redundancy_enabled", zone_redundancy_enabled)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group in which to create the Container Registry. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="adminEnabled")
    def admin_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the admin user is enabled. Defaults to `false`.
        """
        return pulumi.get(self, "admin_enabled")

    @admin_enabled.setter
    def admin_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "admin_enabled", value)

    @property
    @pulumi.getter(name="anonymousPullEnabled")
    def anonymous_pull_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether allows anonymous (unauthenticated) pull access to this Container Registry? Defaults to `false`. This is only supported on resources with the `Standard` or `Premium` SKU.
        """
        return pulumi.get(self, "anonymous_pull_enabled")

    @anonymous_pull_enabled.setter
    def anonymous_pull_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "anonymous_pull_enabled", value)

    @property
    @pulumi.getter(name="dataEndpointEnabled")
    def data_endpoint_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable dedicated data endpoints for this Container Registry? Defaults to `false`. This is only supported on resources with the `Premium` SKU.
        """
        return pulumi.get(self, "data_endpoint_enabled")

    @data_endpoint_enabled.setter
    def data_endpoint_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "data_endpoint_enabled", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input['RegistryEncryptionArgs']]:
        """
        An `encryption` block as documented below.
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input['RegistryEncryptionArgs']]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter(name="georeplicationLocations")
    def georeplication_locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of Azure locations where the container registry should be geo-replicated.
        """
        return pulumi.get(self, "georeplication_locations")

    @georeplication_locations.setter
    def georeplication_locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "georeplication_locations", value)

    @property
    @pulumi.getter
    def georeplications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RegistryGeoreplicationArgs']]]]:
        """
        A `georeplications` block as documented below.
        """
        return pulumi.get(self, "georeplications")

    @georeplications.setter
    def georeplications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RegistryGeoreplicationArgs']]]]):
        pulumi.set(self, "georeplications", value)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input['RegistryIdentityArgs']]:
        """
        An `identity` block as defined below.
        """
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input['RegistryIdentityArgs']]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of the Container Registry. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkRuleBypassOption")
    def network_rule_bypass_option(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to allow trusted Azure services to access a network restricted Container Registry? Possible values are `None` and `AzureServices`. Defaults to `AzureServices`.
        """
        return pulumi.get(self, "network_rule_bypass_option")

    @network_rule_bypass_option.setter
    def network_rule_bypass_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_rule_bypass_option", value)

    @property
    @pulumi.getter(name="networkRuleSet")
    def network_rule_set(self) -> Optional[pulumi.Input['RegistryNetworkRuleSetArgs']]:
        """
        A `network_rule_set` block as documented below.
        """
        return pulumi.get(self, "network_rule_set")

    @network_rule_set.setter
    def network_rule_set(self, value: Optional[pulumi.Input['RegistryNetworkRuleSetArgs']]):
        pulumi.set(self, "network_rule_set", value)

    @property
    @pulumi.getter(name="publicNetworkAccessEnabled")
    def public_network_access_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether public network access is allowed for the container registry. Defaults to `true`.
        """
        return pulumi.get(self, "public_network_access_enabled")

    @public_network_access_enabled.setter
    def public_network_access_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_network_access_enabled", value)

    @property
    @pulumi.getter(name="quarantinePolicyEnabled")
    def quarantine_policy_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value that indicates whether quarantine policy is enabled. Defaults to `false`.
        """
        return pulumi.get(self, "quarantine_policy_enabled")

    @quarantine_policy_enabled.setter
    def quarantine_policy_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "quarantine_policy_enabled", value)

    @property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> Optional[pulumi.Input['RegistryRetentionPolicyArgs']]:
        """
        A `retention_policy` block as documented below.
        """
        return pulumi.get(self, "retention_policy")

    @retention_policy.setter
    def retention_policy(self, value: Optional[pulumi.Input['RegistryRetentionPolicyArgs']]):
        pulumi.set(self, "retention_policy", value)

    @property
    @pulumi.getter
    def sku(self) -> Optional[pulumi.Input[str]]:
        """
        The SKU name of the container registry. Possible values are  `Basic`, `Standard` and `Premium`. `Classic` (which was previously `Basic`) is supported only for existing resources.
        """
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter(name="storageAccountId")
    def storage_account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_account_id")

    @storage_account_id.setter
    def storage_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A mapping of tags to assign to the resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="trustPolicy")
    def trust_policy(self) -> Optional[pulumi.Input['RegistryTrustPolicyArgs']]:
        """
        A `trust_policy` block as documented below.
        """
        return pulumi.get(self, "trust_policy")

    @trust_policy.setter
    def trust_policy(self, value: Optional[pulumi.Input['RegistryTrustPolicyArgs']]):
        pulumi.set(self, "trust_policy", value)

    @property
    @pulumi.getter(name="zoneRedundancyEnabled")
    def zone_redundancy_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether zone redundancy is enabled for this Container Registry? Changing this forces a new resource to be created. Defaults to `false`.
        """
        return pulumi.get(self, "zone_redundancy_enabled")

    @zone_redundancy_enabled.setter
    def zone_redundancy_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "zone_redundancy_enabled", value)


@pulumi.input_type
class _RegistryState:
    def __init__(__self__, *,
                 admin_enabled: Optional[pulumi.Input[bool]] = None,
                 admin_password: Optional[pulumi.Input[str]] = None,
                 admin_username: Optional[pulumi.Input[str]] = None,
                 anonymous_pull_enabled: Optional[pulumi.Input[bool]] = None,
                 data_endpoint_enabled: Optional[pulumi.Input[bool]] = None,
                 encryption: Optional[pulumi.Input['RegistryEncryptionArgs']] = None,
                 georeplication_locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 georeplications: Optional[pulumi.Input[Sequence[pulumi.Input['RegistryGeoreplicationArgs']]]] = None,
                 identity: Optional[pulumi.Input['RegistryIdentityArgs']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 login_server: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_rule_bypass_option: Optional[pulumi.Input[str]] = None,
                 network_rule_set: Optional[pulumi.Input['RegistryNetworkRuleSetArgs']] = None,
                 public_network_access_enabled: Optional[pulumi.Input[bool]] = None,
                 quarantine_policy_enabled: Optional[pulumi.Input[bool]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 retention_policy: Optional[pulumi.Input['RegistryRetentionPolicyArgs']] = None,
                 sku: Optional[pulumi.Input[str]] = None,
                 storage_account_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 trust_policy: Optional[pulumi.Input['RegistryTrustPolicyArgs']] = None,
                 zone_redundancy_enabled: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Registry resources.
        :param pulumi.Input[bool] admin_enabled: Specifies whether the admin user is enabled. Defaults to `false`.
        :param pulumi.Input[str] admin_password: The Password associated with the Container Registry Admin account - if the admin account is enabled.
        :param pulumi.Input[str] admin_username: The Username associated with the Container Registry Admin account - if the admin account is enabled.
        :param pulumi.Input[bool] anonymous_pull_enabled: Whether allows anonymous (unauthenticated) pull access to this Container Registry? Defaults to `false`. This is only supported on resources with the `Standard` or `Premium` SKU.
        :param pulumi.Input[bool] data_endpoint_enabled: Whether to enable dedicated data endpoints for this Container Registry? Defaults to `false`. This is only supported on resources with the `Premium` SKU.
        :param pulumi.Input['RegistryEncryptionArgs'] encryption: An `encryption` block as documented below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] georeplication_locations: A list of Azure locations where the container registry should be geo-replicated.
        :param pulumi.Input[Sequence[pulumi.Input['RegistryGeoreplicationArgs']]] georeplications: A `georeplications` block as documented below.
        :param pulumi.Input['RegistryIdentityArgs'] identity: An `identity` block as defined below.
        :param pulumi.Input[str] location: Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        :param pulumi.Input[str] login_server: The URL that can be used to log into the container registry.
        :param pulumi.Input[str] name: Specifies the name of the Container Registry. Changing this forces a new resource to be created.
        :param pulumi.Input[str] network_rule_bypass_option: Whether to allow trusted Azure services to access a network restricted Container Registry? Possible values are `None` and `AzureServices`. Defaults to `AzureServices`.
        :param pulumi.Input['RegistryNetworkRuleSetArgs'] network_rule_set: A `network_rule_set` block as documented below.
        :param pulumi.Input[bool] public_network_access_enabled: Whether public network access is allowed for the container registry. Defaults to `true`.
        :param pulumi.Input[bool] quarantine_policy_enabled: Boolean value that indicates whether quarantine policy is enabled. Defaults to `false`.
        :param pulumi.Input[str] resource_group_name: The name of the resource group in which to create the Container Registry. Changing this forces a new resource to be created.
        :param pulumi.Input['RegistryRetentionPolicyArgs'] retention_policy: A `retention_policy` block as documented below.
        :param pulumi.Input[str] sku: The SKU name of the container registry. Possible values are  `Basic`, `Standard` and `Premium`. `Classic` (which was previously `Basic`) is supported only for existing resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the resource.
        :param pulumi.Input['RegistryTrustPolicyArgs'] trust_policy: A `trust_policy` block as documented below.
        :param pulumi.Input[bool] zone_redundancy_enabled: Whether zone redundancy is enabled for this Container Registry? Changing this forces a new resource to be created. Defaults to `false`.
        """
        if admin_enabled is not None:
            pulumi.set(__self__, "admin_enabled", admin_enabled)
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if admin_username is not None:
            pulumi.set(__self__, "admin_username", admin_username)
        if anonymous_pull_enabled is not None:
            pulumi.set(__self__, "anonymous_pull_enabled", anonymous_pull_enabled)
        if data_endpoint_enabled is not None:
            pulumi.set(__self__, "data_endpoint_enabled", data_endpoint_enabled)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if georeplication_locations is not None:
            warnings.warn("""Deprecated in favour of `georeplications`""", DeprecationWarning)
            pulumi.log.warn("""georeplication_locations is deprecated: Deprecated in favour of `georeplications`""")
        if georeplication_locations is not None:
            pulumi.set(__self__, "georeplication_locations", georeplication_locations)
        if georeplications is not None:
            pulumi.set(__self__, "georeplications", georeplications)
        if identity is not None:
            pulumi.set(__self__, "identity", identity)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if login_server is not None:
            pulumi.set(__self__, "login_server", login_server)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_rule_bypass_option is not None:
            pulumi.set(__self__, "network_rule_bypass_option", network_rule_bypass_option)
        if network_rule_set is not None:
            pulumi.set(__self__, "network_rule_set", network_rule_set)
        if public_network_access_enabled is not None:
            pulumi.set(__self__, "public_network_access_enabled", public_network_access_enabled)
        if quarantine_policy_enabled is not None:
            pulumi.set(__self__, "quarantine_policy_enabled", quarantine_policy_enabled)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if retention_policy is not None:
            pulumi.set(__self__, "retention_policy", retention_policy)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if storage_account_id is not None:
            warnings.warn("""this attribute is no longer recognized by the API and is not functional anymore, thus this property will be removed in v3.0""", DeprecationWarning)
            pulumi.log.warn("""storage_account_id is deprecated: this attribute is no longer recognized by the API and is not functional anymore, thus this property will be removed in v3.0""")
        if storage_account_id is not None:
            pulumi.set(__self__, "storage_account_id", storage_account_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if trust_policy is not None:
            pulumi.set(__self__, "trust_policy", trust_policy)
        if zone_redundancy_enabled is not None:
            pulumi.set(__self__, "zone_redundancy_enabled", zone_redundancy_enabled)

    @property
    @pulumi.getter(name="adminEnabled")
    def admin_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the admin user is enabled. Defaults to `false`.
        """
        return pulumi.get(self, "admin_enabled")

    @admin_enabled.setter
    def admin_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "admin_enabled", value)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[pulumi.Input[str]]:
        """
        The Password associated with the Container Registry Admin account - if the admin account is enabled.
        """
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[pulumi.Input[str]]:
        """
        The Username associated with the Container Registry Admin account - if the admin account is enabled.
        """
        return pulumi.get(self, "admin_username")

    @admin_username.setter
    def admin_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_username", value)

    @property
    @pulumi.getter(name="anonymousPullEnabled")
    def anonymous_pull_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether allows anonymous (unauthenticated) pull access to this Container Registry? Defaults to `false`. This is only supported on resources with the `Standard` or `Premium` SKU.
        """
        return pulumi.get(self, "anonymous_pull_enabled")

    @anonymous_pull_enabled.setter
    def anonymous_pull_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "anonymous_pull_enabled", value)

    @property
    @pulumi.getter(name="dataEndpointEnabled")
    def data_endpoint_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable dedicated data endpoints for this Container Registry? Defaults to `false`. This is only supported on resources with the `Premium` SKU.
        """
        return pulumi.get(self, "data_endpoint_enabled")

    @data_endpoint_enabled.setter
    def data_endpoint_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "data_endpoint_enabled", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input['RegistryEncryptionArgs']]:
        """
        An `encryption` block as documented below.
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input['RegistryEncryptionArgs']]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter(name="georeplicationLocations")
    def georeplication_locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of Azure locations where the container registry should be geo-replicated.
        """
        return pulumi.get(self, "georeplication_locations")

    @georeplication_locations.setter
    def georeplication_locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "georeplication_locations", value)

    @property
    @pulumi.getter
    def georeplications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RegistryGeoreplicationArgs']]]]:
        """
        A `georeplications` block as documented below.
        """
        return pulumi.get(self, "georeplications")

    @georeplications.setter
    def georeplications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RegistryGeoreplicationArgs']]]]):
        pulumi.set(self, "georeplications", value)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input['RegistryIdentityArgs']]:
        """
        An `identity` block as defined below.
        """
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input['RegistryIdentityArgs']]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="loginServer")
    def login_server(self) -> Optional[pulumi.Input[str]]:
        """
        The URL that can be used to log into the container registry.
        """
        return pulumi.get(self, "login_server")

    @login_server.setter
    def login_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_server", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of the Container Registry. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkRuleBypassOption")
    def network_rule_bypass_option(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to allow trusted Azure services to access a network restricted Container Registry? Possible values are `None` and `AzureServices`. Defaults to `AzureServices`.
        """
        return pulumi.get(self, "network_rule_bypass_option")

    @network_rule_bypass_option.setter
    def network_rule_bypass_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_rule_bypass_option", value)

    @property
    @pulumi.getter(name="networkRuleSet")
    def network_rule_set(self) -> Optional[pulumi.Input['RegistryNetworkRuleSetArgs']]:
        """
        A `network_rule_set` block as documented below.
        """
        return pulumi.get(self, "network_rule_set")

    @network_rule_set.setter
    def network_rule_set(self, value: Optional[pulumi.Input['RegistryNetworkRuleSetArgs']]):
        pulumi.set(self, "network_rule_set", value)

    @property
    @pulumi.getter(name="publicNetworkAccessEnabled")
    def public_network_access_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether public network access is allowed for the container registry. Defaults to `true`.
        """
        return pulumi.get(self, "public_network_access_enabled")

    @public_network_access_enabled.setter
    def public_network_access_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_network_access_enabled", value)

    @property
    @pulumi.getter(name="quarantinePolicyEnabled")
    def quarantine_policy_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value that indicates whether quarantine policy is enabled. Defaults to `false`.
        """
        return pulumi.get(self, "quarantine_policy_enabled")

    @quarantine_policy_enabled.setter
    def quarantine_policy_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "quarantine_policy_enabled", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the resource group in which to create the Container Registry. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> Optional[pulumi.Input['RegistryRetentionPolicyArgs']]:
        """
        A `retention_policy` block as documented below.
        """
        return pulumi.get(self, "retention_policy")

    @retention_policy.setter
    def retention_policy(self, value: Optional[pulumi.Input['RegistryRetentionPolicyArgs']]):
        pulumi.set(self, "retention_policy", value)

    @property
    @pulumi.getter
    def sku(self) -> Optional[pulumi.Input[str]]:
        """
        The SKU name of the container registry. Possible values are  `Basic`, `Standard` and `Premium`. `Classic` (which was previously `Basic`) is supported only for existing resources.
        """
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter(name="storageAccountId")
    def storage_account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_account_id")

    @storage_account_id.setter
    def storage_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A mapping of tags to assign to the resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="trustPolicy")
    def trust_policy(self) -> Optional[pulumi.Input['RegistryTrustPolicyArgs']]:
        """
        A `trust_policy` block as documented below.
        """
        return pulumi.get(self, "trust_policy")

    @trust_policy.setter
    def trust_policy(self, value: Optional[pulumi.Input['RegistryTrustPolicyArgs']]):
        pulumi.set(self, "trust_policy", value)

    @property
    @pulumi.getter(name="zoneRedundancyEnabled")
    def zone_redundancy_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether zone redundancy is enabled for this Container Registry? Changing this forces a new resource to be created. Defaults to `false`.
        """
        return pulumi.get(self, "zone_redundancy_enabled")

    @zone_redundancy_enabled.setter
    def zone_redundancy_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "zone_redundancy_enabled", value)


class Registry(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_enabled: Optional[pulumi.Input[bool]] = None,
                 anonymous_pull_enabled: Optional[pulumi.Input[bool]] = None,
                 data_endpoint_enabled: Optional[pulumi.Input[bool]] = None,
                 encryption: Optional[pulumi.Input[pulumi.InputType['RegistryEncryptionArgs']]] = None,
                 georeplication_locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 georeplications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RegistryGeoreplicationArgs']]]]] = None,
                 identity: Optional[pulumi.Input[pulumi.InputType['RegistryIdentityArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_rule_bypass_option: Optional[pulumi.Input[str]] = None,
                 network_rule_set: Optional[pulumi.Input[pulumi.InputType['RegistryNetworkRuleSetArgs']]] = None,
                 public_network_access_enabled: Optional[pulumi.Input[bool]] = None,
                 quarantine_policy_enabled: Optional[pulumi.Input[bool]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 retention_policy: Optional[pulumi.Input[pulumi.InputType['RegistryRetentionPolicyArgs']]] = None,
                 sku: Optional[pulumi.Input[str]] = None,
                 storage_account_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 trust_policy: Optional[pulumi.Input[pulumi.InputType['RegistryTrustPolicyArgs']]] = None,
                 zone_redundancy_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Manages an Azure Container Registry.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        rg = azure.core.ResourceGroup("rg", location="West Europe")
        acr = azure.containerservice.Registry("acr",
            resource_group_name=rg.name,
            location=rg.location,
            sku="Premium",
            admin_enabled=False,
            georeplications=[
                azure.containerservice.RegistryGeoreplicationArgs(
                    location="East US",
                    zone_redundancy_enabled=True,
                    tags={},
                ),
                azure.containerservice.RegistryGeoreplicationArgs(
                    location="westeurope",
                    zone_redundancy_enabled=True,
                    tags={},
                ),
            ])
        ```
        ### Encryption)

        ```python
        import pulumi
        import pulumi_azure as azure

        rg = azure.core.ResourceGroup("rg", location="West Europe")
        example_user_assigned_identity = azure.authorization.UserAssignedIdentity("exampleUserAssignedIdentity",
            resource_group_name=azurerm_resource_group["example"]["name"],
            location=azurerm_resource_group["example"]["location"])
        example_key = azure.keyvault.get_key(name="super-secret",
            key_vault_id=data["azurerm_key_vault"]["existing"]["id"])
        acr = azure.containerservice.Registry("acr",
            resource_group_name=rg.name,
            location=rg.location,
            sku="Premium",
            identity=azure.containerservice.RegistryIdentityArgs(
                type="UserAssigned",
                identity_ids=[example_user_assigned_identity.id],
            ),
            encryption=azure.containerservice.RegistryEncryptionArgs(
                enabled=True,
                key_vault_key_id=example_key.id,
                identity_client_id=example_user_assigned_identity.client_id,
            ))
        ```
        ### Attaching A Container Registry To A Kubernetes Cluster)

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_registry = azure.containerservice.Registry("exampleRegistry",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location)
        example_kubernetes_cluster = azure.containerservice.KubernetesCluster("exampleKubernetesCluster",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            dns_prefix="exampleaks1",
            default_node_pool=azure.containerservice.KubernetesClusterDefaultNodePoolArgs(
                name="default",
                node_count=1,
                vm_size="Standard_D2_v2",
            ),
            identity=azure.containerservice.KubernetesClusterIdentityArgs(
                type="SystemAssigned",
            ),
            tags={
                "Environment": "Production",
            })
        example_assignment = azure.authorization.Assignment("exampleAssignment",
            principal_id=example_kubernetes_cluster.kubelet_identities[0].object_id,
            role_definition_name="AcrPull",
            scope=example_registry.id,
            skip_service_principal_aad_check=True)
        ```

        ## Import

        Container Registries can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:containerservice/registry:Registry example /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/mygroup1/providers/Microsoft.ContainerRegistry/registries/myregistry1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] admin_enabled: Specifies whether the admin user is enabled. Defaults to `false`.
        :param pulumi.Input[bool] anonymous_pull_enabled: Whether allows anonymous (unauthenticated) pull access to this Container Registry? Defaults to `false`. This is only supported on resources with the `Standard` or `Premium` SKU.
        :param pulumi.Input[bool] data_endpoint_enabled: Whether to enable dedicated data endpoints for this Container Registry? Defaults to `false`. This is only supported on resources with the `Premium` SKU.
        :param pulumi.Input[pulumi.InputType['RegistryEncryptionArgs']] encryption: An `encryption` block as documented below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] georeplication_locations: A list of Azure locations where the container registry should be geo-replicated.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RegistryGeoreplicationArgs']]]] georeplications: A `georeplications` block as documented below.
        :param pulumi.Input[pulumi.InputType['RegistryIdentityArgs']] identity: An `identity` block as defined below.
        :param pulumi.Input[str] location: Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: Specifies the name of the Container Registry. Changing this forces a new resource to be created.
        :param pulumi.Input[str] network_rule_bypass_option: Whether to allow trusted Azure services to access a network restricted Container Registry? Possible values are `None` and `AzureServices`. Defaults to `AzureServices`.
        :param pulumi.Input[pulumi.InputType['RegistryNetworkRuleSetArgs']] network_rule_set: A `network_rule_set` block as documented below.
        :param pulumi.Input[bool] public_network_access_enabled: Whether public network access is allowed for the container registry. Defaults to `true`.
        :param pulumi.Input[bool] quarantine_policy_enabled: Boolean value that indicates whether quarantine policy is enabled. Defaults to `false`.
        :param pulumi.Input[str] resource_group_name: The name of the resource group in which to create the Container Registry. Changing this forces a new resource to be created.
        :param pulumi.Input[pulumi.InputType['RegistryRetentionPolicyArgs']] retention_policy: A `retention_policy` block as documented below.
        :param pulumi.Input[str] sku: The SKU name of the container registry. Possible values are  `Basic`, `Standard` and `Premium`. `Classic` (which was previously `Basic`) is supported only for existing resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the resource.
        :param pulumi.Input[pulumi.InputType['RegistryTrustPolicyArgs']] trust_policy: A `trust_policy` block as documented below.
        :param pulumi.Input[bool] zone_redundancy_enabled: Whether zone redundancy is enabled for this Container Registry? Changing this forces a new resource to be created. Defaults to `false`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RegistryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an Azure Container Registry.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        rg = azure.core.ResourceGroup("rg", location="West Europe")
        acr = azure.containerservice.Registry("acr",
            resource_group_name=rg.name,
            location=rg.location,
            sku="Premium",
            admin_enabled=False,
            georeplications=[
                azure.containerservice.RegistryGeoreplicationArgs(
                    location="East US",
                    zone_redundancy_enabled=True,
                    tags={},
                ),
                azure.containerservice.RegistryGeoreplicationArgs(
                    location="westeurope",
                    zone_redundancy_enabled=True,
                    tags={},
                ),
            ])
        ```
        ### Encryption)

        ```python
        import pulumi
        import pulumi_azure as azure

        rg = azure.core.ResourceGroup("rg", location="West Europe")
        example_user_assigned_identity = azure.authorization.UserAssignedIdentity("exampleUserAssignedIdentity",
            resource_group_name=azurerm_resource_group["example"]["name"],
            location=azurerm_resource_group["example"]["location"])
        example_key = azure.keyvault.get_key(name="super-secret",
            key_vault_id=data["azurerm_key_vault"]["existing"]["id"])
        acr = azure.containerservice.Registry("acr",
            resource_group_name=rg.name,
            location=rg.location,
            sku="Premium",
            identity=azure.containerservice.RegistryIdentityArgs(
                type="UserAssigned",
                identity_ids=[example_user_assigned_identity.id],
            ),
            encryption=azure.containerservice.RegistryEncryptionArgs(
                enabled=True,
                key_vault_key_id=example_key.id,
                identity_client_id=example_user_assigned_identity.client_id,
            ))
        ```
        ### Attaching A Container Registry To A Kubernetes Cluster)

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_registry = azure.containerservice.Registry("exampleRegistry",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location)
        example_kubernetes_cluster = azure.containerservice.KubernetesCluster("exampleKubernetesCluster",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            dns_prefix="exampleaks1",
            default_node_pool=azure.containerservice.KubernetesClusterDefaultNodePoolArgs(
                name="default",
                node_count=1,
                vm_size="Standard_D2_v2",
            ),
            identity=azure.containerservice.KubernetesClusterIdentityArgs(
                type="SystemAssigned",
            ),
            tags={
                "Environment": "Production",
            })
        example_assignment = azure.authorization.Assignment("exampleAssignment",
            principal_id=example_kubernetes_cluster.kubelet_identities[0].object_id,
            role_definition_name="AcrPull",
            scope=example_registry.id,
            skip_service_principal_aad_check=True)
        ```

        ## Import

        Container Registries can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:containerservice/registry:Registry example /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/mygroup1/providers/Microsoft.ContainerRegistry/registries/myregistry1
        ```

        :param str resource_name: The name of the resource.
        :param RegistryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RegistryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_enabled: Optional[pulumi.Input[bool]] = None,
                 anonymous_pull_enabled: Optional[pulumi.Input[bool]] = None,
                 data_endpoint_enabled: Optional[pulumi.Input[bool]] = None,
                 encryption: Optional[pulumi.Input[pulumi.InputType['RegistryEncryptionArgs']]] = None,
                 georeplication_locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 georeplications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RegistryGeoreplicationArgs']]]]] = None,
                 identity: Optional[pulumi.Input[pulumi.InputType['RegistryIdentityArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_rule_bypass_option: Optional[pulumi.Input[str]] = None,
                 network_rule_set: Optional[pulumi.Input[pulumi.InputType['RegistryNetworkRuleSetArgs']]] = None,
                 public_network_access_enabled: Optional[pulumi.Input[bool]] = None,
                 quarantine_policy_enabled: Optional[pulumi.Input[bool]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 retention_policy: Optional[pulumi.Input[pulumi.InputType['RegistryRetentionPolicyArgs']]] = None,
                 sku: Optional[pulumi.Input[str]] = None,
                 storage_account_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 trust_policy: Optional[pulumi.Input[pulumi.InputType['RegistryTrustPolicyArgs']]] = None,
                 zone_redundancy_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RegistryArgs.__new__(RegistryArgs)

            __props__.__dict__["admin_enabled"] = admin_enabled
            __props__.__dict__["anonymous_pull_enabled"] = anonymous_pull_enabled
            __props__.__dict__["data_endpoint_enabled"] = data_endpoint_enabled
            __props__.__dict__["encryption"] = encryption
            if georeplication_locations is not None and not opts.urn:
                warnings.warn("""Deprecated in favour of `georeplications`""", DeprecationWarning)
                pulumi.log.warn("""georeplication_locations is deprecated: Deprecated in favour of `georeplications`""")
            __props__.__dict__["georeplication_locations"] = georeplication_locations
            __props__.__dict__["georeplications"] = georeplications
            __props__.__dict__["identity"] = identity
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            __props__.__dict__["network_rule_bypass_option"] = network_rule_bypass_option
            __props__.__dict__["network_rule_set"] = network_rule_set
            __props__.__dict__["public_network_access_enabled"] = public_network_access_enabled
            __props__.__dict__["quarantine_policy_enabled"] = quarantine_policy_enabled
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["retention_policy"] = retention_policy
            __props__.__dict__["sku"] = sku
            if storage_account_id is not None and not opts.urn:
                warnings.warn("""this attribute is no longer recognized by the API and is not functional anymore, thus this property will be removed in v3.0""", DeprecationWarning)
                pulumi.log.warn("""storage_account_id is deprecated: this attribute is no longer recognized by the API and is not functional anymore, thus this property will be removed in v3.0""")
            __props__.__dict__["storage_account_id"] = storage_account_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["trust_policy"] = trust_policy
            __props__.__dict__["zone_redundancy_enabled"] = zone_redundancy_enabled
            __props__.__dict__["admin_password"] = None
            __props__.__dict__["admin_username"] = None
            __props__.__dict__["login_server"] = None
        super(Registry, __self__).__init__(
            'azure:containerservice/registry:Registry',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_enabled: Optional[pulumi.Input[bool]] = None,
            admin_password: Optional[pulumi.Input[str]] = None,
            admin_username: Optional[pulumi.Input[str]] = None,
            anonymous_pull_enabled: Optional[pulumi.Input[bool]] = None,
            data_endpoint_enabled: Optional[pulumi.Input[bool]] = None,
            encryption: Optional[pulumi.Input[pulumi.InputType['RegistryEncryptionArgs']]] = None,
            georeplication_locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            georeplications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RegistryGeoreplicationArgs']]]]] = None,
            identity: Optional[pulumi.Input[pulumi.InputType['RegistryIdentityArgs']]] = None,
            location: Optional[pulumi.Input[str]] = None,
            login_server: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_rule_bypass_option: Optional[pulumi.Input[str]] = None,
            network_rule_set: Optional[pulumi.Input[pulumi.InputType['RegistryNetworkRuleSetArgs']]] = None,
            public_network_access_enabled: Optional[pulumi.Input[bool]] = None,
            quarantine_policy_enabled: Optional[pulumi.Input[bool]] = None,
            resource_group_name: Optional[pulumi.Input[str]] = None,
            retention_policy: Optional[pulumi.Input[pulumi.InputType['RegistryRetentionPolicyArgs']]] = None,
            sku: Optional[pulumi.Input[str]] = None,
            storage_account_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            trust_policy: Optional[pulumi.Input[pulumi.InputType['RegistryTrustPolicyArgs']]] = None,
            zone_redundancy_enabled: Optional[pulumi.Input[bool]] = None) -> 'Registry':
        """
        Get an existing Registry resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] admin_enabled: Specifies whether the admin user is enabled. Defaults to `false`.
        :param pulumi.Input[str] admin_password: The Password associated with the Container Registry Admin account - if the admin account is enabled.
        :param pulumi.Input[str] admin_username: The Username associated with the Container Registry Admin account - if the admin account is enabled.
        :param pulumi.Input[bool] anonymous_pull_enabled: Whether allows anonymous (unauthenticated) pull access to this Container Registry? Defaults to `false`. This is only supported on resources with the `Standard` or `Premium` SKU.
        :param pulumi.Input[bool] data_endpoint_enabled: Whether to enable dedicated data endpoints for this Container Registry? Defaults to `false`. This is only supported on resources with the `Premium` SKU.
        :param pulumi.Input[pulumi.InputType['RegistryEncryptionArgs']] encryption: An `encryption` block as documented below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] georeplication_locations: A list of Azure locations where the container registry should be geo-replicated.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RegistryGeoreplicationArgs']]]] georeplications: A `georeplications` block as documented below.
        :param pulumi.Input[pulumi.InputType['RegistryIdentityArgs']] identity: An `identity` block as defined below.
        :param pulumi.Input[str] location: Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        :param pulumi.Input[str] login_server: The URL that can be used to log into the container registry.
        :param pulumi.Input[str] name: Specifies the name of the Container Registry. Changing this forces a new resource to be created.
        :param pulumi.Input[str] network_rule_bypass_option: Whether to allow trusted Azure services to access a network restricted Container Registry? Possible values are `None` and `AzureServices`. Defaults to `AzureServices`.
        :param pulumi.Input[pulumi.InputType['RegistryNetworkRuleSetArgs']] network_rule_set: A `network_rule_set` block as documented below.
        :param pulumi.Input[bool] public_network_access_enabled: Whether public network access is allowed for the container registry. Defaults to `true`.
        :param pulumi.Input[bool] quarantine_policy_enabled: Boolean value that indicates whether quarantine policy is enabled. Defaults to `false`.
        :param pulumi.Input[str] resource_group_name: The name of the resource group in which to create the Container Registry. Changing this forces a new resource to be created.
        :param pulumi.Input[pulumi.InputType['RegistryRetentionPolicyArgs']] retention_policy: A `retention_policy` block as documented below.
        :param pulumi.Input[str] sku: The SKU name of the container registry. Possible values are  `Basic`, `Standard` and `Premium`. `Classic` (which was previously `Basic`) is supported only for existing resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the resource.
        :param pulumi.Input[pulumi.InputType['RegistryTrustPolicyArgs']] trust_policy: A `trust_policy` block as documented below.
        :param pulumi.Input[bool] zone_redundancy_enabled: Whether zone redundancy is enabled for this Container Registry? Changing this forces a new resource to be created. Defaults to `false`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RegistryState.__new__(_RegistryState)

        __props__.__dict__["admin_enabled"] = admin_enabled
        __props__.__dict__["admin_password"] = admin_password
        __props__.__dict__["admin_username"] = admin_username
        __props__.__dict__["anonymous_pull_enabled"] = anonymous_pull_enabled
        __props__.__dict__["data_endpoint_enabled"] = data_endpoint_enabled
        __props__.__dict__["encryption"] = encryption
        __props__.__dict__["georeplication_locations"] = georeplication_locations
        __props__.__dict__["georeplications"] = georeplications
        __props__.__dict__["identity"] = identity
        __props__.__dict__["location"] = location
        __props__.__dict__["login_server"] = login_server
        __props__.__dict__["name"] = name
        __props__.__dict__["network_rule_bypass_option"] = network_rule_bypass_option
        __props__.__dict__["network_rule_set"] = network_rule_set
        __props__.__dict__["public_network_access_enabled"] = public_network_access_enabled
        __props__.__dict__["quarantine_policy_enabled"] = quarantine_policy_enabled
        __props__.__dict__["resource_group_name"] = resource_group_name
        __props__.__dict__["retention_policy"] = retention_policy
        __props__.__dict__["sku"] = sku
        __props__.__dict__["storage_account_id"] = storage_account_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["trust_policy"] = trust_policy
        __props__.__dict__["zone_redundancy_enabled"] = zone_redundancy_enabled
        return Registry(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adminEnabled")
    def admin_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies whether the admin user is enabled. Defaults to `false`.
        """
        return pulumi.get(self, "admin_enabled")

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> pulumi.Output[str]:
        """
        The Password associated with the Container Registry Admin account - if the admin account is enabled.
        """
        return pulumi.get(self, "admin_password")

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> pulumi.Output[str]:
        """
        The Username associated with the Container Registry Admin account - if the admin account is enabled.
        """
        return pulumi.get(self, "admin_username")

    @property
    @pulumi.getter(name="anonymousPullEnabled")
    def anonymous_pull_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether allows anonymous (unauthenticated) pull access to this Container Registry? Defaults to `false`. This is only supported on resources with the `Standard` or `Premium` SKU.
        """
        return pulumi.get(self, "anonymous_pull_enabled")

    @property
    @pulumi.getter(name="dataEndpointEnabled")
    def data_endpoint_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable dedicated data endpoints for this Container Registry? Defaults to `false`. This is only supported on resources with the `Premium` SKU.
        """
        return pulumi.get(self, "data_endpoint_enabled")

    @property
    @pulumi.getter
    def encryption(self) -> pulumi.Output['outputs.RegistryEncryption']:
        """
        An `encryption` block as documented below.
        """
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter(name="georeplicationLocations")
    def georeplication_locations(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of Azure locations where the container registry should be geo-replicated.
        """
        return pulumi.get(self, "georeplication_locations")

    @property
    @pulumi.getter
    def georeplications(self) -> pulumi.Output[Sequence['outputs.RegistryGeoreplication']]:
        """
        A `georeplications` block as documented below.
        """
        return pulumi.get(self, "georeplications")

    @property
    @pulumi.getter
    def identity(self) -> pulumi.Output[Optional['outputs.RegistryIdentity']]:
        """
        An `identity` block as defined below.
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="loginServer")
    def login_server(self) -> pulumi.Output[str]:
        """
        The URL that can be used to log into the container registry.
        """
        return pulumi.get(self, "login_server")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Specifies the name of the Container Registry. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkRuleBypassOption")
    def network_rule_bypass_option(self) -> pulumi.Output[Optional[str]]:
        """
        Whether to allow trusted Azure services to access a network restricted Container Registry? Possible values are `None` and `AzureServices`. Defaults to `AzureServices`.
        """
        return pulumi.get(self, "network_rule_bypass_option")

    @property
    @pulumi.getter(name="networkRuleSet")
    def network_rule_set(self) -> pulumi.Output['outputs.RegistryNetworkRuleSet']:
        """
        A `network_rule_set` block as documented below.
        """
        return pulumi.get(self, "network_rule_set")

    @property
    @pulumi.getter(name="publicNetworkAccessEnabled")
    def public_network_access_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether public network access is allowed for the container registry. Defaults to `true`.
        """
        return pulumi.get(self, "public_network_access_enabled")

    @property
    @pulumi.getter(name="quarantinePolicyEnabled")
    def quarantine_policy_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Boolean value that indicates whether quarantine policy is enabled. Defaults to `false`.
        """
        return pulumi.get(self, "quarantine_policy_enabled")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[str]:
        """
        The name of the resource group in which to create the Container Registry. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> pulumi.Output['outputs.RegistryRetentionPolicy']:
        """
        A `retention_policy` block as documented below.
        """
        return pulumi.get(self, "retention_policy")

    @property
    @pulumi.getter
    def sku(self) -> pulumi.Output[Optional[str]]:
        """
        The SKU name of the container registry. Possible values are  `Basic`, `Standard` and `Premium`. `Classic` (which was previously `Basic`) is supported only for existing resources.
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter(name="storageAccountId")
    def storage_account_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "storage_account_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A mapping of tags to assign to the resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="trustPolicy")
    def trust_policy(self) -> pulumi.Output['outputs.RegistryTrustPolicy']:
        """
        A `trust_policy` block as documented below.
        """
        return pulumi.get(self, "trust_policy")

    @property
    @pulumi.getter(name="zoneRedundancyEnabled")
    def zone_redundancy_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether zone redundancy is enabled for this Container Registry? Changing this forces a new resource to be created. Defaults to `false`.
        """
        return pulumi.get(self, "zone_redundancy_enabled")

