# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class Service(pulumi.CustomResource):
    agent_pool_profile: pulumi.Output[dict]
    """
    A Agent Pool Profile's block as documented below.
    
      * `count` (`float`) - Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
      * `dns_prefix` (`str`) - The DNS Prefix given to Agents in this Agent Pool.
      * `fqdn` (`str`)
      * `name` (`str`) - Unique name of the agent pool profile in the context of the subscription and resource group.
      * `vm_size` (`str`) - The VM Size of each of the Agent Pool VM's (e.g. Standard_F1 / Standard_D2v2).
    """
    diagnostics_profile: pulumi.Output[dict]
    """
    A VM Diagnostics Profile block as documented below.
    
      * `enabled` (`bool`) - Should VM Diagnostics be enabled for the Container Service VM's
      * `storageUri` (`str`)
    """
    linux_profile: pulumi.Output[dict]
    """
    A Linux Profile block as documented below.
    
      * `admin_username` (`str`) - The Admin Username for the Cluster.
      * `sshKey` (`dict`) - An SSH Key block as documented below.
    
        * `keyData` (`str`) - The Public SSH Key used to access the cluster.
    """
    location: pulumi.Output[str]
    """
    The location where the Container Service instance should be created. Changing this forces a new resource to be created.
    """
    master_profile: pulumi.Output[dict]
    """
    A Master Profile block as documented below.
    
      * `count` (`float`) - Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
      * `dns_prefix` (`str`) - The DNS Prefix given to Agents in this Agent Pool.
      * `fqdn` (`str`)
    """
    name: pulumi.Output[str]
    """
    Unique name of the agent pool profile in the context of the subscription and resource group.
    """
    orchestration_platform: pulumi.Output[str]
    """
    Specifies the Container Orchestration Platform to use. Currently can be either `DCOS`, `Kubernetes` or `Swarm`. Changing this forces a new resource to be created.
    """
    resource_group_name: pulumi.Output[str]
    """
    Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
    """
    service_principal: pulumi.Output[dict]
    """
    A Service Principal block as documented below.
    
      * `client_id` (`str`) - The ID for the Service Principal.
      * `client_secret` (`str`) - The secret password associated with the service principal.
    """
    tags: pulumi.Output[dict]
    """
    A mapping of tags to assign to the resource.
    """
    def __init__(__self__, resource_name, opts=None, agent_pool_profile=None, diagnostics_profile=None, linux_profile=None, location=None, master_profile=None, name=None, orchestration_platform=None, resource_group_name=None, service_principal=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Manages an Azure Container Service Instance
        
        > **NOTE:** All arguments including the client secret will be stored in the raw state as plain-text.
        [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
        
        > **DEPRECATED:** [Azure Container Service (ACS) has been deprecated by Azure in favour of Azure (Managed) Kubernetes Service (AKS)](https://azure.microsoft.com/en-us/updates/azure-container-service-will-retire-on-january-31-2020/). Support for ACS will be removed in the next major version of the AzureRM Provider (2.0) - and we **strongly recommend** you consider using Azure Kubernetes Service (AKS) for new deployments.
        
        ##Â Example Usage (DCOS)
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] agent_pool_profile: A Agent Pool Profile's block as documented below.
        :param pulumi.Input[dict] diagnostics_profile: A VM Diagnostics Profile block as documented below.
        :param pulumi.Input[dict] linux_profile: A Linux Profile block as documented below.
        :param pulumi.Input[str] location: The location where the Container Service instance should be created. Changing this forces a new resource to be created.
        :param pulumi.Input[dict] master_profile: A Master Profile block as documented below.
        :param pulumi.Input[str] name: Unique name of the agent pool profile in the context of the subscription and resource group.
        :param pulumi.Input[str] orchestration_platform: Specifies the Container Orchestration Platform to use. Currently can be either `DCOS`, `Kubernetes` or `Swarm`. Changing this forces a new resource to be created.
        :param pulumi.Input[str] resource_group_name: Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
        :param pulumi.Input[dict] service_principal: A Service Principal block as documented below.
        :param pulumi.Input[dict] tags: A mapping of tags to assign to the resource.
        
        The **agent_pool_profile** object supports the following:
        
          * `count` (`pulumi.Input[float]`) - Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
          * `dns_prefix` (`pulumi.Input[str]`) - The DNS Prefix given to Agents in this Agent Pool.
          * `fqdn` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - Unique name of the agent pool profile in the context of the subscription and resource group.
          * `vm_size` (`pulumi.Input[str]`) - The VM Size of each of the Agent Pool VM's (e.g. Standard_F1 / Standard_D2v2).
        
        The **diagnostics_profile** object supports the following:
        
          * `enabled` (`pulumi.Input[bool]`) - Should VM Diagnostics be enabled for the Container Service VM's
          * `storageUri` (`pulumi.Input[str]`)
        
        The **linux_profile** object supports the following:
        
          * `admin_username` (`pulumi.Input[str]`) - The Admin Username for the Cluster.
          * `sshKey` (`pulumi.Input[dict]`) - An SSH Key block as documented below.
        
            * `keyData` (`pulumi.Input[str]`) - The Public SSH Key used to access the cluster.
        
        The **master_profile** object supports the following:
        
          * `count` (`pulumi.Input[float]`) - Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
          * `dns_prefix` (`pulumi.Input[str]`) - The DNS Prefix given to Agents in this Agent Pool.
          * `fqdn` (`pulumi.Input[str]`)
        
        The **service_principal** object supports the following:
        
          * `client_id` (`pulumi.Input[str]`) - The ID for the Service Principal.
          * `client_secret` (`pulumi.Input[str]`) - The secret password associated with the service principal.

        > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/container_service.html.markdown.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if agent_pool_profile is None:
                raise TypeError("Missing required property 'agent_pool_profile'")
            __props__['agent_pool_profile'] = agent_pool_profile
            if diagnostics_profile is None:
                raise TypeError("Missing required property 'diagnostics_profile'")
            __props__['diagnostics_profile'] = diagnostics_profile
            if linux_profile is None:
                raise TypeError("Missing required property 'linux_profile'")
            __props__['linux_profile'] = linux_profile
            __props__['location'] = location
            if master_profile is None:
                raise TypeError("Missing required property 'master_profile'")
            __props__['master_profile'] = master_profile
            __props__['name'] = name
            if orchestration_platform is None:
                raise TypeError("Missing required property 'orchestration_platform'")
            __props__['orchestration_platform'] = orchestration_platform
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['service_principal'] = service_principal
            __props__['tags'] = tags
        super(Service, __self__).__init__(
            'azure:containerservice/service:Service',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, agent_pool_profile=None, diagnostics_profile=None, linux_profile=None, location=None, master_profile=None, name=None, orchestration_platform=None, resource_group_name=None, service_principal=None, tags=None):
        """
        Get an existing Service resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.
        
        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] agent_pool_profile: A Agent Pool Profile's block as documented below.
        :param pulumi.Input[dict] diagnostics_profile: A VM Diagnostics Profile block as documented below.
        :param pulumi.Input[dict] linux_profile: A Linux Profile block as documented below.
        :param pulumi.Input[str] location: The location where the Container Service instance should be created. Changing this forces a new resource to be created.
        :param pulumi.Input[dict] master_profile: A Master Profile block as documented below.
        :param pulumi.Input[str] name: Unique name of the agent pool profile in the context of the subscription and resource group.
        :param pulumi.Input[str] orchestration_platform: Specifies the Container Orchestration Platform to use. Currently can be either `DCOS`, `Kubernetes` or `Swarm`. Changing this forces a new resource to be created.
        :param pulumi.Input[str] resource_group_name: Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
        :param pulumi.Input[dict] service_principal: A Service Principal block as documented below.
        :param pulumi.Input[dict] tags: A mapping of tags to assign to the resource.
        
        The **agent_pool_profile** object supports the following:
        
          * `count` (`pulumi.Input[float]`) - Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
          * `dns_prefix` (`pulumi.Input[str]`) - The DNS Prefix given to Agents in this Agent Pool.
          * `fqdn` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`) - Unique name of the agent pool profile in the context of the subscription and resource group.
          * `vm_size` (`pulumi.Input[str]`) - The VM Size of each of the Agent Pool VM's (e.g. Standard_F1 / Standard_D2v2).
        
        The **diagnostics_profile** object supports the following:
        
          * `enabled` (`pulumi.Input[bool]`) - Should VM Diagnostics be enabled for the Container Service VM's
          * `storageUri` (`pulumi.Input[str]`)
        
        The **linux_profile** object supports the following:
        
          * `admin_username` (`pulumi.Input[str]`) - The Admin Username for the Cluster.
          * `sshKey` (`pulumi.Input[dict]`) - An SSH Key block as documented below.
        
            * `keyData` (`pulumi.Input[str]`) - The Public SSH Key used to access the cluster.
        
        The **master_profile** object supports the following:
        
          * `count` (`pulumi.Input[float]`) - Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
          * `dns_prefix` (`pulumi.Input[str]`) - The DNS Prefix given to Agents in this Agent Pool.
          * `fqdn` (`pulumi.Input[str]`)
        
        The **service_principal** object supports the following:
        
          * `client_id` (`pulumi.Input[str]`) - The ID for the Service Principal.
          * `client_secret` (`pulumi.Input[str]`) - The secret password associated with the service principal.

        > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/container_service.html.markdown.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()
        __props__["agent_pool_profile"] = agent_pool_profile
        __props__["diagnostics_profile"] = diagnostics_profile
        __props__["linux_profile"] = linux_profile
        __props__["location"] = location
        __props__["master_profile"] = master_profile
        __props__["name"] = name
        __props__["orchestration_platform"] = orchestration_platform
        __props__["resource_group_name"] = resource_group_name
        __props__["service_principal"] = service_principal
        __props__["tags"] = tags
        return Service(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

