# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetRegistryScopeMapResult',
    'AwaitableGetRegistryScopeMapResult',
    'get_registry_scope_map',
    'get_registry_scope_map_output',
]

@pulumi.output_type
class GetRegistryScopeMapResult:
    """
    A collection of values returned by getRegistryScopeMap.
    """
    def __init__(__self__, actions=None, container_registry_name=None, description=None, id=None, name=None, resource_group_name=None):
        if actions and not isinstance(actions, list):
            raise TypeError("Expected argument 'actions' to be a list")
        pulumi.set(__self__, "actions", actions)
        if container_registry_name and not isinstance(container_registry_name, str):
            raise TypeError("Expected argument 'container_registry_name' to be a str")
        pulumi.set(__self__, "container_registry_name", container_registry_name)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_group_name and not isinstance(resource_group_name, str):
            raise TypeError("Expected argument 'resource_group_name' to be a str")
        pulumi.set(__self__, "resource_group_name", resource_group_name)

    @property
    @pulumi.getter
    def actions(self) -> Sequence[str]:
        """
        The actions for the Scope Map.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="containerRegistryName")
    def container_registry_name(self) -> str:
        return pulumi.get(self, "container_registry_name")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> str:
        return pulumi.get(self, "resource_group_name")


class AwaitableGetRegistryScopeMapResult(GetRegistryScopeMapResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRegistryScopeMapResult(
            actions=self.actions,
            container_registry_name=self.container_registry_name,
            description=self.description,
            id=self.id,
            name=self.name,
            resource_group_name=self.resource_group_name)


def get_registry_scope_map(container_registry_name: Optional[str] = None,
                           name: Optional[str] = None,
                           resource_group_name: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRegistryScopeMapResult:
    """
    Use this data source to access information about an existing Container Registry scope map.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_azure as azure

    example = azure.containerservice.get_registry_scope_map(name="example-scope-map",
        resource_group_name="example-resource-group",
        container_registry_name="example-registry")
    pulumi.export("actions", example.actions)
    ```


    :param str container_registry_name: The Name of the Container Registry where the token exists.
    :param str name: The name of the Container Registry token.
    :param str resource_group_name: The Name of the Resource Group where this Container Registry token exists.
    """
    __args__ = dict()
    __args__['containerRegistryName'] = container_registry_name
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure:containerservice/getRegistryScopeMap:getRegistryScopeMap', __args__, opts=opts, typ=GetRegistryScopeMapResult).value

    return AwaitableGetRegistryScopeMapResult(
        actions=pulumi.get(__ret__, 'actions'),
        container_registry_name=pulumi.get(__ret__, 'container_registry_name'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        resource_group_name=pulumi.get(__ret__, 'resource_group_name'))


@_utilities.lift_output_func(get_registry_scope_map)
def get_registry_scope_map_output(container_registry_name: Optional[pulumi.Input[str]] = None,
                                  name: Optional[pulumi.Input[str]] = None,
                                  resource_group_name: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRegistryScopeMapResult]:
    """
    Use this data source to access information about an existing Container Registry scope map.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_azure as azure

    example = azure.containerservice.get_registry_scope_map(name="example-scope-map",
        resource_group_name="example-resource-group",
        container_registry_name="example-registry")
    pulumi.export("actions", example.actions)
    ```


    :param str container_registry_name: The Name of the Container Registry where the token exists.
    :param str name: The name of the Container Registry token.
    :param str resource_group_name: The Name of the Resource Group where this Container Registry token exists.
    """
    ...
