# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ServerVulnerabilityAssessmentVirtualMachineArgs', 'ServerVulnerabilityAssessmentVirtualMachine']

@pulumi.input_type
class ServerVulnerabilityAssessmentVirtualMachineArgs:
    def __init__(__self__, *,
                 virtual_machine_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a ServerVulnerabilityAssessmentVirtualMachine resource.
        :param pulumi.Input[str] virtual_machine_id: The ID of the virtual machine to be monitored by vulnerability assessment. Changing this forces a new resource to be created.
        """
        ServerVulnerabilityAssessmentVirtualMachineArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            virtual_machine_id=virtual_machine_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             virtual_machine_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("virtual_machine_id", virtual_machine_id)

    @property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> pulumi.Input[str]:
        """
        The ID of the virtual machine to be monitored by vulnerability assessment. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "virtual_machine_id")

    @virtual_machine_id.setter
    def virtual_machine_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "virtual_machine_id", value)


@pulumi.input_type
class _ServerVulnerabilityAssessmentVirtualMachineState:
    def __init__(__self__, *,
                 virtual_machine_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ServerVulnerabilityAssessmentVirtualMachine resources.
        :param pulumi.Input[str] virtual_machine_id: The ID of the virtual machine to be monitored by vulnerability assessment. Changing this forces a new resource to be created.
        """
        _ServerVulnerabilityAssessmentVirtualMachineState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            virtual_machine_id=virtual_machine_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             virtual_machine_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if virtual_machine_id is not None:
            _setter("virtual_machine_id", virtual_machine_id)

    @property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the virtual machine to be monitored by vulnerability assessment. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "virtual_machine_id")

    @virtual_machine_id.setter
    def virtual_machine_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_machine_id", value)


class ServerVulnerabilityAssessmentVirtualMachine(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 virtual_machine_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages an Azure Server Vulnerability Assessment (Qualys) to a VM.

        > **NOTE** Azure Defender has to be enabled on the subscription in order for this resource to work.
        See this [documentation](https://docs.microsoft.com/azure/security-center/security-center-get-started) to get started.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_virtual_network = azure.network.VirtualNetwork("exampleVirtualNetwork",
            resource_group_name=example_resource_group.name,
            address_spaces=["192.168.1.0/24"],
            location=example_resource_group.location)
        example_subnet = azure.network.Subnet("exampleSubnet",
            resource_group_name=example_resource_group.name,
            virtual_network_name=example_virtual_network.name,
            address_prefixes=["192.168.1.0/24"])
        example_network_interface = azure.network.NetworkInterface("exampleNetworkInterface",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            ip_configurations=[azure.network.NetworkInterfaceIpConfigurationArgs(
                name="vm-example",
                subnet_id=example_subnet.id,
                private_ip_address_allocation="Dynamic",
            )])
        example_linux_virtual_machine = azure.compute.LinuxVirtualMachine("exampleLinuxVirtualMachine",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            size="Standard_B1s",
            admin_username="testadmin",
            admin_password="Password1234!",
            disable_password_authentication=False,
            source_image_reference=azure.compute.LinuxVirtualMachineSourceImageReferenceArgs(
                publisher="OpenLogic",
                offer="CentOS",
                sku="7.5",
                version="latest",
            ),
            os_disk=azure.compute.LinuxVirtualMachineOsDiskArgs(
                caching="ReadWrite",
                storage_account_type="Standard_LRS",
            ),
            network_interface_ids=[example_network_interface.id])
        example_server_vulnerability_assessment_virtual_machine = azure.securitycenter.ServerVulnerabilityAssessmentVirtualMachine("exampleServerVulnerabilityAssessmentVirtualMachine", virtual_machine_id=example_linux_virtual_machine.id)
        ```

        ## Import

        Server Vulnerability Assessments can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:securitycenter/serverVulnerabilityAssessmentVirtualMachine:ServerVulnerabilityAssessmentVirtualMachine example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.Compute/virtualMachines/vm-name/providers/Microsoft.Security/serverVulnerabilityAssessments/Default
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] virtual_machine_id: The ID of the virtual machine to be monitored by vulnerability assessment. Changing this forces a new resource to be created.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServerVulnerabilityAssessmentVirtualMachineArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an Azure Server Vulnerability Assessment (Qualys) to a VM.

        > **NOTE** Azure Defender has to be enabled on the subscription in order for this resource to work.
        See this [documentation](https://docs.microsoft.com/azure/security-center/security-center-get-started) to get started.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_virtual_network = azure.network.VirtualNetwork("exampleVirtualNetwork",
            resource_group_name=example_resource_group.name,
            address_spaces=["192.168.1.0/24"],
            location=example_resource_group.location)
        example_subnet = azure.network.Subnet("exampleSubnet",
            resource_group_name=example_resource_group.name,
            virtual_network_name=example_virtual_network.name,
            address_prefixes=["192.168.1.0/24"])
        example_network_interface = azure.network.NetworkInterface("exampleNetworkInterface",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            ip_configurations=[azure.network.NetworkInterfaceIpConfigurationArgs(
                name="vm-example",
                subnet_id=example_subnet.id,
                private_ip_address_allocation="Dynamic",
            )])
        example_linux_virtual_machine = azure.compute.LinuxVirtualMachine("exampleLinuxVirtualMachine",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            size="Standard_B1s",
            admin_username="testadmin",
            admin_password="Password1234!",
            disable_password_authentication=False,
            source_image_reference=azure.compute.LinuxVirtualMachineSourceImageReferenceArgs(
                publisher="OpenLogic",
                offer="CentOS",
                sku="7.5",
                version="latest",
            ),
            os_disk=azure.compute.LinuxVirtualMachineOsDiskArgs(
                caching="ReadWrite",
                storage_account_type="Standard_LRS",
            ),
            network_interface_ids=[example_network_interface.id])
        example_server_vulnerability_assessment_virtual_machine = azure.securitycenter.ServerVulnerabilityAssessmentVirtualMachine("exampleServerVulnerabilityAssessmentVirtualMachine", virtual_machine_id=example_linux_virtual_machine.id)
        ```

        ## Import

        Server Vulnerability Assessments can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:securitycenter/serverVulnerabilityAssessmentVirtualMachine:ServerVulnerabilityAssessmentVirtualMachine example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.Compute/virtualMachines/vm-name/providers/Microsoft.Security/serverVulnerabilityAssessments/Default
        ```

        :param str resource_name: The name of the resource.
        :param ServerVulnerabilityAssessmentVirtualMachineArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServerVulnerabilityAssessmentVirtualMachineArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            ServerVulnerabilityAssessmentVirtualMachineArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 virtual_machine_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServerVulnerabilityAssessmentVirtualMachineArgs.__new__(ServerVulnerabilityAssessmentVirtualMachineArgs)

            if virtual_machine_id is None and not opts.urn:
                raise TypeError("Missing required property 'virtual_machine_id'")
            __props__.__dict__["virtual_machine_id"] = virtual_machine_id
        super(ServerVulnerabilityAssessmentVirtualMachine, __self__).__init__(
            'azure:securitycenter/serverVulnerabilityAssessmentVirtualMachine:ServerVulnerabilityAssessmentVirtualMachine',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            virtual_machine_id: Optional[pulumi.Input[str]] = None) -> 'ServerVulnerabilityAssessmentVirtualMachine':
        """
        Get an existing ServerVulnerabilityAssessmentVirtualMachine resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] virtual_machine_id: The ID of the virtual machine to be monitored by vulnerability assessment. Changing this forces a new resource to be created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServerVulnerabilityAssessmentVirtualMachineState.__new__(_ServerVulnerabilityAssessmentVirtualMachineState)

        __props__.__dict__["virtual_machine_id"] = virtual_machine_id
        return ServerVulnerabilityAssessmentVirtualMachine(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> pulumi.Output[str]:
        """
        The ID of the virtual machine to be monitored by vulnerability assessment. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "virtual_machine_id")

