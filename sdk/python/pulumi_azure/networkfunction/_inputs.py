# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'CollectorPolicyIpfxEmissionArgs',
    'CollectorPolicyIpfxEmissionArgsDict',
    'CollectorPolicyIpfxIngestionArgs',
    'CollectorPolicyIpfxIngestionArgsDict',
]

MYPY = False

if not MYPY:
    class CollectorPolicyIpfxEmissionArgsDict(TypedDict):
        destination_types: pulumi.Input[_builtins.str]
        """
        A list of emission destination types. The only possible value is `AzureMonitor`. Changing this forces a new Network Function Collector Policy to be created.

        > **Note:** Please use the `monitoring.DiagnosticSetting` resource to forward logs to a Log Analytics Workspace.
        """
elif False:
    CollectorPolicyIpfxEmissionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CollectorPolicyIpfxEmissionArgs:
    def __init__(__self__, *,
                 destination_types: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] destination_types: A list of emission destination types. The only possible value is `AzureMonitor`. Changing this forces a new Network Function Collector Policy to be created.
               
               > **Note:** Please use the `monitoring.DiagnosticSetting` resource to forward logs to a Log Analytics Workspace.
        """
        pulumi.set(__self__, "destination_types", destination_types)

    @_builtins.property
    @pulumi.getter(name="destinationTypes")
    def destination_types(self) -> pulumi.Input[_builtins.str]:
        """
        A list of emission destination types. The only possible value is `AzureMonitor`. Changing this forces a new Network Function Collector Policy to be created.

        > **Note:** Please use the `monitoring.DiagnosticSetting` resource to forward logs to a Log Analytics Workspace.
        """
        return pulumi.get(self, "destination_types")

    @destination_types.setter
    def destination_types(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "destination_types", value)


if not MYPY:
    class CollectorPolicyIpfxIngestionArgsDict(TypedDict):
        source_resource_ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        A list of ingestion source resource IDs. Changing this forces a new Network Function Collector Policy to be created.
        """
elif False:
    CollectorPolicyIpfxIngestionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CollectorPolicyIpfxIngestionArgs:
    def __init__(__self__, *,
                 source_resource_ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] source_resource_ids: A list of ingestion source resource IDs. Changing this forces a new Network Function Collector Policy to be created.
        """
        pulumi.set(__self__, "source_resource_ids", source_resource_ids)

    @_builtins.property
    @pulumi.getter(name="sourceResourceIds")
    def source_resource_ids(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        A list of ingestion source resource IDs. Changing this forces a new Network Function Collector Policy to be created.
        """
        return pulumi.get(self, "source_resource_ids")

    @source_resource_ids.setter
    def source_resource_ids(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "source_resource_ids", value)


