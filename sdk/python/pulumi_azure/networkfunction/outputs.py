# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'CollectorPolicyIpfxEmission',
    'CollectorPolicyIpfxIngestion',
]

@pulumi.output_type
class CollectorPolicyIpfxEmission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationTypes":
            suggest = "destination_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CollectorPolicyIpfxEmission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CollectorPolicyIpfxEmission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CollectorPolicyIpfxEmission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_types: str):
        """
        :param str destination_types: A list of emission destination types. The only possible value is `AzureMonitor`. Changing this forces a new Network Function Collector Policy to be created.
        """
        CollectorPolicyIpfxEmission._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_types=destination_types,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_types: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if destination_types is None and 'destinationTypes' in kwargs:
            destination_types = kwargs['destinationTypes']
        if destination_types is None:
            raise TypeError("Missing 'destination_types' argument")

        _setter("destination_types", destination_types)

    @property
    @pulumi.getter(name="destinationTypes")
    def destination_types(self) -> str:
        """
        A list of emission destination types. The only possible value is `AzureMonitor`. Changing this forces a new Network Function Collector Policy to be created.
        """
        return pulumi.get(self, "destination_types")


@pulumi.output_type
class CollectorPolicyIpfxIngestion(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceResourceIds":
            suggest = "source_resource_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CollectorPolicyIpfxIngestion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CollectorPolicyIpfxIngestion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CollectorPolicyIpfxIngestion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_resource_ids: Sequence[str]):
        """
        :param Sequence[str] source_resource_ids: A list of ingestion source resource IDs. Changing this forces a new Network Function Collector Policy to be created.
        """
        CollectorPolicyIpfxIngestion._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            source_resource_ids=source_resource_ids,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             source_resource_ids: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if source_resource_ids is None and 'sourceResourceIds' in kwargs:
            source_resource_ids = kwargs['sourceResourceIds']
        if source_resource_ids is None:
            raise TypeError("Missing 'source_resource_ids' argument")

        _setter("source_resource_ids", source_resource_ids)

    @property
    @pulumi.getter(name="sourceResourceIds")
    def source_resource_ids(self) -> Sequence[str]:
        """
        A list of ingestion source resource IDs. Changing this forces a new Network Function Collector Policy to be created.
        """
        return pulumi.get(self, "source_resource_ids")


