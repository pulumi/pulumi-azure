# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'CollectorPolicyIpfxEmission',
    'CollectorPolicyIpfxIngestion',
]

@pulumi.output_type
class CollectorPolicyIpfxEmission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationTypes":
            suggest = "destination_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CollectorPolicyIpfxEmission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CollectorPolicyIpfxEmission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CollectorPolicyIpfxEmission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_types: _builtins.str):
        """
        :param _builtins.str destination_types: A list of emission destination types. The only possible value is `AzureMonitor`. Changing this forces a new Network Function Collector Policy to be created.
               
               > **Note:** Please use the `monitoring.DiagnosticSetting` resource to forward logs to a Log Analytics Workspace.
        """
        pulumi.set(__self__, "destination_types", destination_types)

    @_builtins.property
    @pulumi.getter(name="destinationTypes")
    def destination_types(self) -> _builtins.str:
        """
        A list of emission destination types. The only possible value is `AzureMonitor`. Changing this forces a new Network Function Collector Policy to be created.

        > **Note:** Please use the `monitoring.DiagnosticSetting` resource to forward logs to a Log Analytics Workspace.
        """
        return pulumi.get(self, "destination_types")


@pulumi.output_type
class CollectorPolicyIpfxIngestion(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceResourceIds":
            suggest = "source_resource_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CollectorPolicyIpfxIngestion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CollectorPolicyIpfxIngestion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CollectorPolicyIpfxIngestion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_resource_ids: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] source_resource_ids: A list of ingestion source resource IDs. Changing this forces a new Network Function Collector Policy to be created.
        """
        pulumi.set(__self__, "source_resource_ids", source_resource_ids)

    @_builtins.property
    @pulumi.getter(name="sourceResourceIds")
    def source_resource_ids(self) -> Sequence[_builtins.str]:
        """
        A list of ingestion source resource IDs. Changing this forces a new Network Function Collector Policy to be created.
        """
        return pulumi.get(self, "source_resource_ids")


