# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ClusterArgs', 'Cluster']

@pulumi.input_type
class ClusterArgs:
    def __init__(__self__, *,
                 cluster_node_count: pulumi.Input[int],
                 sku_name: pulumi.Input[str],
                 vmware_cloud_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Cluster resource.
        :param pulumi.Input[int] cluster_node_count: The count of the VMware Cluster nodes.
        :param pulumi.Input[str] sku_name: The cluster SKU to use. Possible values are `av20`, `av36`, `av36t`, `av36p` and `av52`. Changing this forces a new VMware Cluster to be created.
        :param pulumi.Input[str] vmware_cloud_id: The ID of the VMware Private Cloud in which to create this VMware Cluster. Changing this forces a new VMware Cluster to be created.
        :param pulumi.Input[str] name: The name which should be used for this VMware Cluster. Changing this forces a new VMware Cluster to be created.
        """
        ClusterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_node_count=cluster_node_count,
            sku_name=sku_name,
            vmware_cloud_id=vmware_cloud_id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_node_count: pulumi.Input[int],
             sku_name: pulumi.Input[str],
             vmware_cloud_id: pulumi.Input[str],
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("cluster_node_count", cluster_node_count)
        _setter("sku_name", sku_name)
        _setter("vmware_cloud_id", vmware_cloud_id)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="clusterNodeCount")
    def cluster_node_count(self) -> pulumi.Input[int]:
        """
        The count of the VMware Cluster nodes.
        """
        return pulumi.get(self, "cluster_node_count")

    @cluster_node_count.setter
    def cluster_node_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "cluster_node_count", value)

    @property
    @pulumi.getter(name="skuName")
    def sku_name(self) -> pulumi.Input[str]:
        """
        The cluster SKU to use. Possible values are `av20`, `av36`, `av36t`, `av36p` and `av52`. Changing this forces a new VMware Cluster to be created.
        """
        return pulumi.get(self, "sku_name")

    @sku_name.setter
    def sku_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "sku_name", value)

    @property
    @pulumi.getter(name="vmwareCloudId")
    def vmware_cloud_id(self) -> pulumi.Input[str]:
        """
        The ID of the VMware Private Cloud in which to create this VMware Cluster. Changing this forces a new VMware Cluster to be created.
        """
        return pulumi.get(self, "vmware_cloud_id")

    @vmware_cloud_id.setter
    def vmware_cloud_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vmware_cloud_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name which should be used for this VMware Cluster. Changing this forces a new VMware Cluster to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _ClusterState:
    def __init__(__self__, *,
                 cluster_node_count: Optional[pulumi.Input[int]] = None,
                 cluster_number: Optional[pulumi.Input[int]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sku_name: Optional[pulumi.Input[str]] = None,
                 vmware_cloud_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Cluster resources.
        :param pulumi.Input[int] cluster_node_count: The count of the VMware Cluster nodes.
        :param pulumi.Input[int] cluster_number: A number that identifies this VMware Cluster in its VMware Private Cloud.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hosts: A list of host of the VMware Cluster.
        :param pulumi.Input[str] name: The name which should be used for this VMware Cluster. Changing this forces a new VMware Cluster to be created.
        :param pulumi.Input[str] sku_name: The cluster SKU to use. Possible values are `av20`, `av36`, `av36t`, `av36p` and `av52`. Changing this forces a new VMware Cluster to be created.
        :param pulumi.Input[str] vmware_cloud_id: The ID of the VMware Private Cloud in which to create this VMware Cluster. Changing this forces a new VMware Cluster to be created.
        """
        _ClusterState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_node_count=cluster_node_count,
            cluster_number=cluster_number,
            hosts=hosts,
            name=name,
            sku_name=sku_name,
            vmware_cloud_id=vmware_cloud_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_node_count: Optional[pulumi.Input[int]] = None,
             cluster_number: Optional[pulumi.Input[int]] = None,
             hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             name: Optional[pulumi.Input[str]] = None,
             sku_name: Optional[pulumi.Input[str]] = None,
             vmware_cloud_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cluster_node_count is not None:
            _setter("cluster_node_count", cluster_node_count)
        if cluster_number is not None:
            _setter("cluster_number", cluster_number)
        if hosts is not None:
            _setter("hosts", hosts)
        if name is not None:
            _setter("name", name)
        if sku_name is not None:
            _setter("sku_name", sku_name)
        if vmware_cloud_id is not None:
            _setter("vmware_cloud_id", vmware_cloud_id)

    @property
    @pulumi.getter(name="clusterNodeCount")
    def cluster_node_count(self) -> Optional[pulumi.Input[int]]:
        """
        The count of the VMware Cluster nodes.
        """
        return pulumi.get(self, "cluster_node_count")

    @cluster_node_count.setter
    def cluster_node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cluster_node_count", value)

    @property
    @pulumi.getter(name="clusterNumber")
    def cluster_number(self) -> Optional[pulumi.Input[int]]:
        """
        A number that identifies this VMware Cluster in its VMware Private Cloud.
        """
        return pulumi.get(self, "cluster_number")

    @cluster_number.setter
    def cluster_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cluster_number", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of host of the VMware Cluster.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name which should be used for this VMware Cluster. Changing this forces a new VMware Cluster to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="skuName")
    def sku_name(self) -> Optional[pulumi.Input[str]]:
        """
        The cluster SKU to use. Possible values are `av20`, `av36`, `av36t`, `av36p` and `av52`. Changing this forces a new VMware Cluster to be created.
        """
        return pulumi.get(self, "sku_name")

    @sku_name.setter
    def sku_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sku_name", value)

    @property
    @pulumi.getter(name="vmwareCloudId")
    def vmware_cloud_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the VMware Private Cloud in which to create this VMware Cluster. Changing this forces a new VMware Cluster to be created.
        """
        return pulumi.get(self, "vmware_cloud_id")

    @vmware_cloud_id.setter
    def vmware_cloud_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vmware_cloud_id", value)


class Cluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_node_count: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sku_name: Optional[pulumi.Input[str]] = None,
                 vmware_cloud_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a VMware Cluster.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_private_cloud = azure.avs.PrivateCloud("examplePrivateCloud",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            sku_name="av36",
            management_cluster=azure.avs.PrivateCloudManagementClusterArgs(
                size=3,
            ),
            network_subnet_cidr="192.168.48.0/22",
            internet_connection_enabled=False,
            nsxt_password="QazWsx13$Edc",
            vcenter_password="WsxEdc23$Rfv")
        example_cluster = azure.avs.Cluster("exampleCluster",
            vmware_cloud_id=example_private_cloud.id,
            cluster_node_count=3,
            sku_name="av36")
        ```

        ## Import

        VMware Clusters can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:avs/cluster:Cluster example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.AVS/privateClouds/privateCloud1/clusters/cluster1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] cluster_node_count: The count of the VMware Cluster nodes.
        :param pulumi.Input[str] name: The name which should be used for this VMware Cluster. Changing this forces a new VMware Cluster to be created.
        :param pulumi.Input[str] sku_name: The cluster SKU to use. Possible values are `av20`, `av36`, `av36t`, `av36p` and `av52`. Changing this forces a new VMware Cluster to be created.
        :param pulumi.Input[str] vmware_cloud_id: The ID of the VMware Private Cloud in which to create this VMware Cluster. Changing this forces a new VMware Cluster to be created.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a VMware Cluster.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_private_cloud = azure.avs.PrivateCloud("examplePrivateCloud",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            sku_name="av36",
            management_cluster=azure.avs.PrivateCloudManagementClusterArgs(
                size=3,
            ),
            network_subnet_cidr="192.168.48.0/22",
            internet_connection_enabled=False,
            nsxt_password="QazWsx13$Edc",
            vcenter_password="WsxEdc23$Rfv")
        example_cluster = azure.avs.Cluster("exampleCluster",
            vmware_cloud_id=example_private_cloud.id,
            cluster_node_count=3,
            sku_name="av36")
        ```

        ## Import

        VMware Clusters can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:avs/cluster:Cluster example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.AVS/privateClouds/privateCloud1/clusters/cluster1
        ```

        :param str resource_name: The name of the resource.
        :param ClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            ClusterArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_node_count: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sku_name: Optional[pulumi.Input[str]] = None,
                 vmware_cloud_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterArgs.__new__(ClusterArgs)

            if cluster_node_count is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_node_count'")
            __props__.__dict__["cluster_node_count"] = cluster_node_count
            __props__.__dict__["name"] = name
            if sku_name is None and not opts.urn:
                raise TypeError("Missing required property 'sku_name'")
            __props__.__dict__["sku_name"] = sku_name
            if vmware_cloud_id is None and not opts.urn:
                raise TypeError("Missing required property 'vmware_cloud_id'")
            __props__.__dict__["vmware_cloud_id"] = vmware_cloud_id
            __props__.__dict__["cluster_number"] = None
            __props__.__dict__["hosts"] = None
        super(Cluster, __self__).__init__(
            'azure:avs/cluster:Cluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_node_count: Optional[pulumi.Input[int]] = None,
            cluster_number: Optional[pulumi.Input[int]] = None,
            hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            sku_name: Optional[pulumi.Input[str]] = None,
            vmware_cloud_id: Optional[pulumi.Input[str]] = None) -> 'Cluster':
        """
        Get an existing Cluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] cluster_node_count: The count of the VMware Cluster nodes.
        :param pulumi.Input[int] cluster_number: A number that identifies this VMware Cluster in its VMware Private Cloud.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hosts: A list of host of the VMware Cluster.
        :param pulumi.Input[str] name: The name which should be used for this VMware Cluster. Changing this forces a new VMware Cluster to be created.
        :param pulumi.Input[str] sku_name: The cluster SKU to use. Possible values are `av20`, `av36`, `av36t`, `av36p` and `av52`. Changing this forces a new VMware Cluster to be created.
        :param pulumi.Input[str] vmware_cloud_id: The ID of the VMware Private Cloud in which to create this VMware Cluster. Changing this forces a new VMware Cluster to be created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterState.__new__(_ClusterState)

        __props__.__dict__["cluster_node_count"] = cluster_node_count
        __props__.__dict__["cluster_number"] = cluster_number
        __props__.__dict__["hosts"] = hosts
        __props__.__dict__["name"] = name
        __props__.__dict__["sku_name"] = sku_name
        __props__.__dict__["vmware_cloud_id"] = vmware_cloud_id
        return Cluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterNodeCount")
    def cluster_node_count(self) -> pulumi.Output[int]:
        """
        The count of the VMware Cluster nodes.
        """
        return pulumi.get(self, "cluster_node_count")

    @property
    @pulumi.getter(name="clusterNumber")
    def cluster_number(self) -> pulumi.Output[int]:
        """
        A number that identifies this VMware Cluster in its VMware Private Cloud.
        """
        return pulumi.get(self, "cluster_number")

    @property
    @pulumi.getter
    def hosts(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of host of the VMware Cluster.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name which should be used for this VMware Cluster. Changing this forces a new VMware Cluster to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="skuName")
    def sku_name(self) -> pulumi.Output[str]:
        """
        The cluster SKU to use. Possible values are `av20`, `av36`, `av36t`, `av36p` and `av52`. Changing this forces a new VMware Cluster to be created.
        """
        return pulumi.get(self, "sku_name")

    @property
    @pulumi.getter(name="vmwareCloudId")
    def vmware_cloud_id(self) -> pulumi.Output[str]:
        """
        The ID of the VMware Private Cloud in which to create this VMware Cluster. Changing this forces a new VMware Cluster to be created.
        """
        return pulumi.get(self, "vmware_cloud_id")

