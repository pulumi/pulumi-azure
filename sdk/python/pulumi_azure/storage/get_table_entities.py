# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetTableEntitiesResult',
    'AwaitableGetTableEntitiesResult',
    'get_table_entities',
    'get_table_entities_output',
]

@pulumi.output_type
class GetTableEntitiesResult:
    """
    A collection of values returned by getTableEntities.
    """
    def __init__(__self__, filter=None, id=None, items=None, selects=None, storage_account_name=None, table_name=None):
        if filter and not isinstance(filter, str):
            raise TypeError("Expected argument 'filter' to be a str")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if items and not isinstance(items, list):
            raise TypeError("Expected argument 'items' to be a list")
        pulumi.set(__self__, "items", items)
        if selects and not isinstance(selects, list):
            raise TypeError("Expected argument 'selects' to be a list")
        pulumi.set(__self__, "selects", selects)
        if storage_account_name and not isinstance(storage_account_name, str):
            raise TypeError("Expected argument 'storage_account_name' to be a str")
        pulumi.set(__self__, "storage_account_name", storage_account_name)
        if table_name and not isinstance(table_name, str):
            raise TypeError("Expected argument 'table_name' to be a str")
        pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetTableEntitiesItemResult']:
        """
        A list of `items` blocks as defined below.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def selects(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "selects")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> str:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        return pulumi.get(self, "table_name")


class AwaitableGetTableEntitiesResult(GetTableEntitiesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTableEntitiesResult(
            filter=self.filter,
            id=self.id,
            items=self.items,
            selects=self.selects,
            storage_account_name=self.storage_account_name,
            table_name=self.table_name)


def get_table_entities(filter: Optional[str] = None,
                       selects: Optional[Sequence[str]] = None,
                       storage_account_name: Optional[str] = None,
                       table_name: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTableEntitiesResult:
    """
    Use this data source to access information about an existing Storage Table Entity.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_azure as azure

    example = azure.storage.get_table_entities(table_name="example-table-name",
        storage_account_name="example-storage-account-name",
        filter="PartitionKey eq 'example'")
    ```
    <!--End PulumiCodeChooser -->


    :param str filter: The filter used to retrieve the entities.
    :param Sequence[str] selects: A list of properties to select from the returned Storage Table Entities.
    :param str storage_account_name: The name of the Storage Account where the Table exists.
    :param str table_name: The name of the Table.
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['selects'] = selects
    __args__['storageAccountName'] = storage_account_name
    __args__['tableName'] = table_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure:storage/getTableEntities:getTableEntities', __args__, opts=opts, typ=GetTableEntitiesResult).value

    return AwaitableGetTableEntitiesResult(
        filter=pulumi.get(__ret__, 'filter'),
        id=pulumi.get(__ret__, 'id'),
        items=pulumi.get(__ret__, 'items'),
        selects=pulumi.get(__ret__, 'selects'),
        storage_account_name=pulumi.get(__ret__, 'storage_account_name'),
        table_name=pulumi.get(__ret__, 'table_name'))


@_utilities.lift_output_func(get_table_entities)
def get_table_entities_output(filter: Optional[pulumi.Input[str]] = None,
                              selects: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                              storage_account_name: Optional[pulumi.Input[str]] = None,
                              table_name: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTableEntitiesResult]:
    """
    Use this data source to access information about an existing Storage Table Entity.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_azure as azure

    example = azure.storage.get_table_entities(table_name="example-table-name",
        storage_account_name="example-storage-account-name",
        filter="PartitionKey eq 'example'")
    ```
    <!--End PulumiCodeChooser -->


    :param str filter: The filter used to retrieve the entities.
    :param Sequence[str] selects: A list of properties to select from the returned Storage Table Entities.
    :param str storage_account_name: The name of the Storage Account where the Table exists.
    :param str table_name: The name of the Table.
    """
    ...
