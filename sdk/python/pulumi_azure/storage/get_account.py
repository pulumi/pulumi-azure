# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class GetAccountResult(object):
    """
    A collection of values returned by getAccount.
    """
    def __init__(__self__, access_tier=None, account_encryption_source=None, account_kind=None, account_replication_type=None, account_tier=None, custom_domain=None, enable_blob_encryption=None, enable_file_encryption=None, enable_https_traffic_only=None, location=None, primary_access_key=None, primary_blob_connection_string=None, primary_blob_endpoint=None, primary_connection_string=None, primary_file_endpoint=None, primary_location=None, primary_queue_endpoint=None, primary_table_endpoint=None, secondary_access_key=None, secondary_blob_connection_string=None, secondary_blob_endpoint=None, secondary_connection_string=None, secondary_location=None, secondary_queue_endpoint=None, secondary_table_endpoint=None, tags=None):
        if not access_tier:
            raise TypeError('Missing required argument access_tier')
        elif not isinstance(access_tier, basestring):
            raise TypeError('Expected argument access_tier to be a basestring')
        __self__.access_tier = access_tier
        """
        Defines the access tier for `BlobStorage` accounts.
        """
        if not account_encryption_source:
            raise TypeError('Missing required argument account_encryption_source')
        elif not isinstance(account_encryption_source, basestring):
            raise TypeError('Expected argument account_encryption_source to be a basestring')
        __self__.account_encryption_source = account_encryption_source
        """
        The Encryption Source for this Storage Account.
        """
        if not account_kind:
            raise TypeError('Missing required argument account_kind')
        elif not isinstance(account_kind, basestring):
            raise TypeError('Expected argument account_kind to be a basestring')
        __self__.account_kind = account_kind
        """
        Defines the Kind of account, either `BlobStorage` or `Storage`.
        """
        if not account_replication_type:
            raise TypeError('Missing required argument account_replication_type')
        elif not isinstance(account_replication_type, basestring):
            raise TypeError('Expected argument account_replication_type to be a basestring')
        __self__.account_replication_type = account_replication_type
        """
        Defines the type of replication used for this storage account.
        """
        if not account_tier:
            raise TypeError('Missing required argument account_tier')
        elif not isinstance(account_tier, basestring):
            raise TypeError('Expected argument account_tier to be a basestring')
        __self__.account_tier = account_tier
        """
        Defines the Tier of this storage account.
        """
        if not custom_domain:
            raise TypeError('Missing required argument custom_domain')
        elif not isinstance(custom_domain, dict):
            raise TypeError('Expected argument custom_domain to be a dict')
        __self__.custom_domain = custom_domain
        """
        A `custom_domain` block as documented below.
        """
        if not enable_blob_encryption:
            raise TypeError('Missing required argument enable_blob_encryption')
        elif not isinstance(enable_blob_encryption, bool):
            raise TypeError('Expected argument enable_blob_encryption to be a bool')
        __self__.enable_blob_encryption = enable_blob_encryption
        """
        Are Encryption Services are enabled for Blob storage? See [here](https://azure.microsoft.com/en-us/documentation/articles/storage-service-encryption/)
        for more information.
        """
        if not enable_file_encryption:
            raise TypeError('Missing required argument enable_file_encryption')
        elif not isinstance(enable_file_encryption, bool):
            raise TypeError('Expected argument enable_file_encryption to be a bool')
        __self__.enable_file_encryption = enable_file_encryption
        """
        Are Encryption Services are enabled for File storage? See [here](https://azure.microsoft.com/en-us/documentation/articles/storage-service-encryption/)
        for more information.
        """
        if not enable_https_traffic_only:
            raise TypeError('Missing required argument enable_https_traffic_only')
        elif not isinstance(enable_https_traffic_only, bool):
            raise TypeError('Expected argument enable_https_traffic_only to be a bool')
        __self__.enable_https_traffic_only = enable_https_traffic_only
        """
        Is traffic only allowed via HTTPS? See [here](https://docs.microsoft.com/en-us/azure/storage/storage-require-secure-transfer/)
        for more information.
        """
        if not location:
            raise TypeError('Missing required argument location')
        elif not isinstance(location, basestring):
            raise TypeError('Expected argument location to be a basestring')
        __self__.location = location
        """
        The Azure location where the Storage Account exists
        """
        if not primary_access_key:
            raise TypeError('Missing required argument primary_access_key')
        elif not isinstance(primary_access_key, basestring):
            raise TypeError('Expected argument primary_access_key to be a basestring')
        __self__.primary_access_key = primary_access_key
        """
        The primary access key for the Storage Account.
        """
        if not primary_blob_connection_string:
            raise TypeError('Missing required argument primary_blob_connection_string')
        elif not isinstance(primary_blob_connection_string, basestring):
            raise TypeError('Expected argument primary_blob_connection_string to be a basestring')
        __self__.primary_blob_connection_string = primary_blob_connection_string
        """
        The connection string associated with the primary blob location
        """
        if not primary_blob_endpoint:
            raise TypeError('Missing required argument primary_blob_endpoint')
        elif not isinstance(primary_blob_endpoint, basestring):
            raise TypeError('Expected argument primary_blob_endpoint to be a basestring')
        __self__.primary_blob_endpoint = primary_blob_endpoint
        """
        The endpoint URL for blob storage in the primary location.
        """
        if not primary_connection_string:
            raise TypeError('Missing required argument primary_connection_string')
        elif not isinstance(primary_connection_string, basestring):
            raise TypeError('Expected argument primary_connection_string to be a basestring')
        __self__.primary_connection_string = primary_connection_string
        """
        The connection string associated with the primary location
        """
        if not primary_file_endpoint:
            raise TypeError('Missing required argument primary_file_endpoint')
        elif not isinstance(primary_file_endpoint, basestring):
            raise TypeError('Expected argument primary_file_endpoint to be a basestring')
        __self__.primary_file_endpoint = primary_file_endpoint
        """
        The endpoint URL for file storage in the primary location.
        """
        if not primary_location:
            raise TypeError('Missing required argument primary_location')
        elif not isinstance(primary_location, basestring):
            raise TypeError('Expected argument primary_location to be a basestring')
        __self__.primary_location = primary_location
        """
        The primary location of the Storage Account.
        """
        if not primary_queue_endpoint:
            raise TypeError('Missing required argument primary_queue_endpoint')
        elif not isinstance(primary_queue_endpoint, basestring):
            raise TypeError('Expected argument primary_queue_endpoint to be a basestring')
        __self__.primary_queue_endpoint = primary_queue_endpoint
        """
        The endpoint URL for queue storage in the primary location.
        """
        if not primary_table_endpoint:
            raise TypeError('Missing required argument primary_table_endpoint')
        elif not isinstance(primary_table_endpoint, basestring):
            raise TypeError('Expected argument primary_table_endpoint to be a basestring')
        __self__.primary_table_endpoint = primary_table_endpoint
        """
        The endpoint URL for table storage in the primary location.
        """
        if not secondary_access_key:
            raise TypeError('Missing required argument secondary_access_key')
        elif not isinstance(secondary_access_key, basestring):
            raise TypeError('Expected argument secondary_access_key to be a basestring')
        __self__.secondary_access_key = secondary_access_key
        """
        The secondary access key for the Storage Account.
        """
        if not secondary_blob_connection_string:
            raise TypeError('Missing required argument secondary_blob_connection_string')
        elif not isinstance(secondary_blob_connection_string, basestring):
            raise TypeError('Expected argument secondary_blob_connection_string to be a basestring')
        __self__.secondary_blob_connection_string = secondary_blob_connection_string
        """
        The connection string associated with the secondary blob location
        """
        if not secondary_blob_endpoint:
            raise TypeError('Missing required argument secondary_blob_endpoint')
        elif not isinstance(secondary_blob_endpoint, basestring):
            raise TypeError('Expected argument secondary_blob_endpoint to be a basestring')
        __self__.secondary_blob_endpoint = secondary_blob_endpoint
        """
        The endpoint URL for blob storage in the secondary location.
        """
        if not secondary_connection_string:
            raise TypeError('Missing required argument secondary_connection_string')
        elif not isinstance(secondary_connection_string, basestring):
            raise TypeError('Expected argument secondary_connection_string to be a basestring')
        __self__.secondary_connection_string = secondary_connection_string
        """
        The connection string associated with the secondary location
        """
        if not secondary_location:
            raise TypeError('Missing required argument secondary_location')
        elif not isinstance(secondary_location, basestring):
            raise TypeError('Expected argument secondary_location to be a basestring')
        __self__.secondary_location = secondary_location
        """
        The secondary location of the Storage Account.
        """
        if not secondary_queue_endpoint:
            raise TypeError('Missing required argument secondary_queue_endpoint')
        elif not isinstance(secondary_queue_endpoint, basestring):
            raise TypeError('Expected argument secondary_queue_endpoint to be a basestring')
        __self__.secondary_queue_endpoint = secondary_queue_endpoint
        """
        The endpoint URL for queue storage in the secondary location.
        """
        if not secondary_table_endpoint:
            raise TypeError('Missing required argument secondary_table_endpoint')
        elif not isinstance(secondary_table_endpoint, basestring):
            raise TypeError('Expected argument secondary_table_endpoint to be a basestring')
        __self__.secondary_table_endpoint = secondary_table_endpoint
        """
        The endpoint URL for table storage in the secondary location.
        """
        if not tags:
            raise TypeError('Missing required argument tags')
        elif not isinstance(tags, dict):
            raise TypeError('Expected argument tags to be a dict')
        __self__.tags = tags
        """
        A mapping of tags to assigned to the resource.
        """

def get_account(name=None, resource_group_name=None):
    """
    Gets information about the specified Storage Account.
    """
    __args__ = dict()

    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __ret__ = pulumi.runtime.invoke('azure:storage/getAccount:getAccount', __args__)

    return GetAccountResult(
        access_tier=__ret__['accessTier'],
        account_encryption_source=__ret__['accountEncryptionSource'],
        account_kind=__ret__['accountKind'],
        account_replication_type=__ret__['accountReplicationType'],
        account_tier=__ret__['accountTier'],
        custom_domain=__ret__['customDomain'],
        enable_blob_encryption=__ret__['enableBlobEncryption'],
        enable_file_encryption=__ret__['enableFileEncryption'],
        enable_https_traffic_only=__ret__['enableHttpsTrafficOnly'],
        location=__ret__['location'],
        primary_access_key=__ret__['primaryAccessKey'],
        primary_blob_connection_string=__ret__['primaryBlobConnectionString'],
        primary_blob_endpoint=__ret__['primaryBlobEndpoint'],
        primary_connection_string=__ret__['primaryConnectionString'],
        primary_file_endpoint=__ret__['primaryFileEndpoint'],
        primary_location=__ret__['primaryLocation'],
        primary_queue_endpoint=__ret__['primaryQueueEndpoint'],
        primary_table_endpoint=__ret__['primaryTableEndpoint'],
        secondary_access_key=__ret__['secondaryAccessKey'],
        secondary_blob_connection_string=__ret__['secondaryBlobConnectionString'],
        secondary_blob_endpoint=__ret__['secondaryBlobEndpoint'],
        secondary_connection_string=__ret__['secondaryConnectionString'],
        secondary_location=__ret__['secondaryLocation'],
        secondary_queue_endpoint=__ret__['secondaryQueueEndpoint'],
        secondary_table_endpoint=__ret__['secondaryTableEndpoint'],
        tags=__ret__['tags'])
