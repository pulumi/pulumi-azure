# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['Account']


class Account(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tier: Optional[pulumi.Input[str]] = None,
                 account_kind: Optional[pulumi.Input[str]] = None,
                 account_replication_type: Optional[pulumi.Input[str]] = None,
                 account_tier: Optional[pulumi.Input[str]] = None,
                 allow_blob_public_access: Optional[pulumi.Input[bool]] = None,
                 blob_properties: Optional[pulumi.Input[pulumi.InputType['AccountBlobPropertiesArgs']]] = None,
                 custom_domain: Optional[pulumi.Input[pulumi.InputType['AccountCustomDomainArgs']]] = None,
                 enable_https_traffic_only: Optional[pulumi.Input[bool]] = None,
                 identity: Optional[pulumi.Input[pulumi.InputType['AccountIdentityArgs']]] = None,
                 is_hns_enabled: Optional[pulumi.Input[bool]] = None,
                 large_file_share_enabled: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 min_tls_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_rules: Optional[pulumi.Input[pulumi.InputType['AccountNetworkRulesArgs']]] = None,
                 queue_properties: Optional[pulumi.Input[pulumi.InputType['AccountQueuePropertiesArgs']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 static_website: Optional[pulumi.Input[pulumi.InputType['AccountStaticWebsiteArgs']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Manages an Azure Storage Account.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_account = azure.storage.Account("exampleAccount",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            account_tier="Standard",
            account_replication_type="GRS",
            tags={
                "environment": "staging",
            })
        ```
        ### With Network Rules

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_virtual_network = azure.network.VirtualNetwork("exampleVirtualNetwork",
            address_spaces=["10.0.0.0/16"],
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name)
        example_subnet = azure.network.Subnet("exampleSubnet",
            resource_group_name=example_resource_group.name,
            virtual_network_name=example_virtual_network.name,
            address_prefixes=["10.0.2.0/24"],
            service_endpoints=[
                "Microsoft.Sql",
                "Microsoft.Storage",
            ])
        example_account = azure.storage.Account("exampleAccount",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            account_tier="Standard",
            account_replication_type="LRS",
            network_rules=azure.storage.AccountNetworkRulesArgs(
                default_action="Deny",
                ip_rules=["100.0.0.1"],
                virtual_network_subnet_ids=[example_subnet.id],
            ),
            tags={
                "environment": "staging",
            })
        ```

        ## Import

        Storage Accounts can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:storage/account:Account storageAcc1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Storage/storageAccounts/myaccount
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_tier: Defines the access tier for `BlobStorage`, `FileStorage` and `StorageV2` accounts. Valid options are `Hot` and `Cool`, defaults to `Hot`.
        :param pulumi.Input[str] account_kind: Defines the Kind of account. Valid options are `BlobStorage`, `BlockBlobStorage`, `FileStorage`, `Storage` and `StorageV2`. Changing this forces a new resource to be created. Defaults to `StorageV2`.
        :param pulumi.Input[str] account_replication_type: Defines the type of replication to use for this storage account. Valid options are `LRS`, `GRS`, `RAGRS`, `ZRS`, `GZRS` and `RAGZRS`.
        :param pulumi.Input[str] account_tier: Defines the Tier to use for this storage account. Valid options are `Standard` and `Premium`. For `BlockBlobStorage` and `FileStorage` accounts only `Premium` is valid. Changing this forces a new resource to be created.
        :param pulumi.Input[bool] allow_blob_public_access: Allow or disallow public access to all blobs or containers in the storage account. Defaults to `false`.
        :param pulumi.Input[pulumi.InputType['AccountBlobPropertiesArgs']] blob_properties: A `blob_properties` block as defined below.
        :param pulumi.Input[pulumi.InputType['AccountCustomDomainArgs']] custom_domain: A `custom_domain` block as documented below.
        :param pulumi.Input[bool] enable_https_traffic_only: Boolean flag which forces HTTPS if enabled, see [here](https://docs.microsoft.com/en-us/azure/storage/storage-require-secure-transfer/)
               for more information. Defaults to `true`.
        :param pulumi.Input[pulumi.InputType['AccountIdentityArgs']] identity: A `identity` block as defined below.
        :param pulumi.Input[bool] is_hns_enabled: Is Hierarchical Namespace enabled? This can be used with Azure Data Lake Storage Gen 2 ([see here for more information](https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-quickstart-create-account/)). Changing this forces a new resource to be created.
        :param pulumi.Input[bool] large_file_share_enabled: Is Large File Share Enabled?
        :param pulumi.Input[str] location: Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        :param pulumi.Input[str] min_tls_version: The minimum supported TLS version for the storage account. Possible values are `TLS1_0`, `TLS1_1`, and `TLS1_2`. Defaults to `TLS1_0` for new storage accounts.
        :param pulumi.Input[str] name: Specifies the name of the storage account. Changing this forces a new resource to be created. This must be unique across the entire Azure service, not just within the resource group.
        :param pulumi.Input[pulumi.InputType['AccountNetworkRulesArgs']] network_rules: A `network_rules` block as documented below.
        :param pulumi.Input[pulumi.InputType['AccountQueuePropertiesArgs']] queue_properties: A `queue_properties` block as defined below.
        :param pulumi.Input[str] resource_group_name: The name of the resource group in which to create the storage account. Changing this forces a new resource to be created.
        :param pulumi.Input[pulumi.InputType['AccountStaticWebsiteArgs']] static_website: A `static_website` block as defined below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['access_tier'] = access_tier
            __props__['account_kind'] = account_kind
            if account_replication_type is None and not opts.urn:
                raise TypeError("Missing required property 'account_replication_type'")
            __props__['account_replication_type'] = account_replication_type
            if account_tier is None and not opts.urn:
                raise TypeError("Missing required property 'account_tier'")
            __props__['account_tier'] = account_tier
            __props__['allow_blob_public_access'] = allow_blob_public_access
            __props__['blob_properties'] = blob_properties
            __props__['custom_domain'] = custom_domain
            __props__['enable_https_traffic_only'] = enable_https_traffic_only
            __props__['identity'] = identity
            __props__['is_hns_enabled'] = is_hns_enabled
            __props__['large_file_share_enabled'] = large_file_share_enabled
            __props__['location'] = location
            __props__['min_tls_version'] = min_tls_version
            __props__['name'] = name
            __props__['network_rules'] = network_rules
            __props__['queue_properties'] = queue_properties
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['static_website'] = static_website
            __props__['tags'] = tags
            __props__['primary_access_key'] = None
            __props__['primary_blob_connection_string'] = None
            __props__['primary_blob_endpoint'] = None
            __props__['primary_blob_host'] = None
            __props__['primary_connection_string'] = None
            __props__['primary_dfs_endpoint'] = None
            __props__['primary_dfs_host'] = None
            __props__['primary_file_endpoint'] = None
            __props__['primary_file_host'] = None
            __props__['primary_location'] = None
            __props__['primary_queue_endpoint'] = None
            __props__['primary_queue_host'] = None
            __props__['primary_table_endpoint'] = None
            __props__['primary_table_host'] = None
            __props__['primary_web_endpoint'] = None
            __props__['primary_web_host'] = None
            __props__['secondary_access_key'] = None
            __props__['secondary_blob_connection_string'] = None
            __props__['secondary_blob_endpoint'] = None
            __props__['secondary_blob_host'] = None
            __props__['secondary_connection_string'] = None
            __props__['secondary_dfs_endpoint'] = None
            __props__['secondary_dfs_host'] = None
            __props__['secondary_file_endpoint'] = None
            __props__['secondary_file_host'] = None
            __props__['secondary_location'] = None
            __props__['secondary_queue_endpoint'] = None
            __props__['secondary_queue_host'] = None
            __props__['secondary_table_endpoint'] = None
            __props__['secondary_table_host'] = None
            __props__['secondary_web_endpoint'] = None
            __props__['secondary_web_host'] = None
        super(Account, __self__).__init__(
            'azure:storage/account:Account',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_tier: Optional[pulumi.Input[str]] = None,
            account_kind: Optional[pulumi.Input[str]] = None,
            account_replication_type: Optional[pulumi.Input[str]] = None,
            account_tier: Optional[pulumi.Input[str]] = None,
            allow_blob_public_access: Optional[pulumi.Input[bool]] = None,
            blob_properties: Optional[pulumi.Input[pulumi.InputType['AccountBlobPropertiesArgs']]] = None,
            custom_domain: Optional[pulumi.Input[pulumi.InputType['AccountCustomDomainArgs']]] = None,
            enable_https_traffic_only: Optional[pulumi.Input[bool]] = None,
            identity: Optional[pulumi.Input[pulumi.InputType['AccountIdentityArgs']]] = None,
            is_hns_enabled: Optional[pulumi.Input[bool]] = None,
            large_file_share_enabled: Optional[pulumi.Input[bool]] = None,
            location: Optional[pulumi.Input[str]] = None,
            min_tls_version: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_rules: Optional[pulumi.Input[pulumi.InputType['AccountNetworkRulesArgs']]] = None,
            primary_access_key: Optional[pulumi.Input[str]] = None,
            primary_blob_connection_string: Optional[pulumi.Input[str]] = None,
            primary_blob_endpoint: Optional[pulumi.Input[str]] = None,
            primary_blob_host: Optional[pulumi.Input[str]] = None,
            primary_connection_string: Optional[pulumi.Input[str]] = None,
            primary_dfs_endpoint: Optional[pulumi.Input[str]] = None,
            primary_dfs_host: Optional[pulumi.Input[str]] = None,
            primary_file_endpoint: Optional[pulumi.Input[str]] = None,
            primary_file_host: Optional[pulumi.Input[str]] = None,
            primary_location: Optional[pulumi.Input[str]] = None,
            primary_queue_endpoint: Optional[pulumi.Input[str]] = None,
            primary_queue_host: Optional[pulumi.Input[str]] = None,
            primary_table_endpoint: Optional[pulumi.Input[str]] = None,
            primary_table_host: Optional[pulumi.Input[str]] = None,
            primary_web_endpoint: Optional[pulumi.Input[str]] = None,
            primary_web_host: Optional[pulumi.Input[str]] = None,
            queue_properties: Optional[pulumi.Input[pulumi.InputType['AccountQueuePropertiesArgs']]] = None,
            resource_group_name: Optional[pulumi.Input[str]] = None,
            secondary_access_key: Optional[pulumi.Input[str]] = None,
            secondary_blob_connection_string: Optional[pulumi.Input[str]] = None,
            secondary_blob_endpoint: Optional[pulumi.Input[str]] = None,
            secondary_blob_host: Optional[pulumi.Input[str]] = None,
            secondary_connection_string: Optional[pulumi.Input[str]] = None,
            secondary_dfs_endpoint: Optional[pulumi.Input[str]] = None,
            secondary_dfs_host: Optional[pulumi.Input[str]] = None,
            secondary_file_endpoint: Optional[pulumi.Input[str]] = None,
            secondary_file_host: Optional[pulumi.Input[str]] = None,
            secondary_location: Optional[pulumi.Input[str]] = None,
            secondary_queue_endpoint: Optional[pulumi.Input[str]] = None,
            secondary_queue_host: Optional[pulumi.Input[str]] = None,
            secondary_table_endpoint: Optional[pulumi.Input[str]] = None,
            secondary_table_host: Optional[pulumi.Input[str]] = None,
            secondary_web_endpoint: Optional[pulumi.Input[str]] = None,
            secondary_web_host: Optional[pulumi.Input[str]] = None,
            static_website: Optional[pulumi.Input[pulumi.InputType['AccountStaticWebsiteArgs']]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None) -> 'Account':
        """
        Get an existing Account resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_tier: Defines the access tier for `BlobStorage`, `FileStorage` and `StorageV2` accounts. Valid options are `Hot` and `Cool`, defaults to `Hot`.
        :param pulumi.Input[str] account_kind: Defines the Kind of account. Valid options are `BlobStorage`, `BlockBlobStorage`, `FileStorage`, `Storage` and `StorageV2`. Changing this forces a new resource to be created. Defaults to `StorageV2`.
        :param pulumi.Input[str] account_replication_type: Defines the type of replication to use for this storage account. Valid options are `LRS`, `GRS`, `RAGRS`, `ZRS`, `GZRS` and `RAGZRS`.
        :param pulumi.Input[str] account_tier: Defines the Tier to use for this storage account. Valid options are `Standard` and `Premium`. For `BlockBlobStorage` and `FileStorage` accounts only `Premium` is valid. Changing this forces a new resource to be created.
        :param pulumi.Input[bool] allow_blob_public_access: Allow or disallow public access to all blobs or containers in the storage account. Defaults to `false`.
        :param pulumi.Input[pulumi.InputType['AccountBlobPropertiesArgs']] blob_properties: A `blob_properties` block as defined below.
        :param pulumi.Input[pulumi.InputType['AccountCustomDomainArgs']] custom_domain: A `custom_domain` block as documented below.
        :param pulumi.Input[bool] enable_https_traffic_only: Boolean flag which forces HTTPS if enabled, see [here](https://docs.microsoft.com/en-us/azure/storage/storage-require-secure-transfer/)
               for more information. Defaults to `true`.
        :param pulumi.Input[pulumi.InputType['AccountIdentityArgs']] identity: A `identity` block as defined below.
        :param pulumi.Input[bool] is_hns_enabled: Is Hierarchical Namespace enabled? This can be used with Azure Data Lake Storage Gen 2 ([see here for more information](https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-quickstart-create-account/)). Changing this forces a new resource to be created.
        :param pulumi.Input[bool] large_file_share_enabled: Is Large File Share Enabled?
        :param pulumi.Input[str] location: Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        :param pulumi.Input[str] min_tls_version: The minimum supported TLS version for the storage account. Possible values are `TLS1_0`, `TLS1_1`, and `TLS1_2`. Defaults to `TLS1_0` for new storage accounts.
        :param pulumi.Input[str] name: Specifies the name of the storage account. Changing this forces a new resource to be created. This must be unique across the entire Azure service, not just within the resource group.
        :param pulumi.Input[pulumi.InputType['AccountNetworkRulesArgs']] network_rules: A `network_rules` block as documented below.
        :param pulumi.Input[str] primary_access_key: The primary access key for the storage account.
        :param pulumi.Input[str] primary_blob_connection_string: The connection string associated with the primary blob location.
        :param pulumi.Input[str] primary_blob_endpoint: The endpoint URL for blob storage in the primary location.
        :param pulumi.Input[str] primary_blob_host: The hostname with port if applicable for blob storage in the primary location.
        :param pulumi.Input[str] primary_connection_string: The connection string associated with the primary location.
        :param pulumi.Input[str] primary_dfs_endpoint: The endpoint URL for DFS storage in the primary location.
        :param pulumi.Input[str] primary_dfs_host: The hostname with port if applicable for DFS storage in the primary location.
        :param pulumi.Input[str] primary_file_endpoint: The endpoint URL for file storage in the primary location.
        :param pulumi.Input[str] primary_file_host: The hostname with port if applicable for file storage in the primary location.
        :param pulumi.Input[str] primary_location: The primary location of the storage account.
        :param pulumi.Input[str] primary_queue_endpoint: The endpoint URL for queue storage in the primary location.
        :param pulumi.Input[str] primary_queue_host: The hostname with port if applicable for queue storage in the primary location.
        :param pulumi.Input[str] primary_table_endpoint: The endpoint URL for table storage in the primary location.
        :param pulumi.Input[str] primary_table_host: The hostname with port if applicable for table storage in the primary location.
        :param pulumi.Input[str] primary_web_endpoint: The endpoint URL for web storage in the primary location.
        :param pulumi.Input[str] primary_web_host: The hostname with port if applicable for web storage in the primary location.
        :param pulumi.Input[pulumi.InputType['AccountQueuePropertiesArgs']] queue_properties: A `queue_properties` block as defined below.
        :param pulumi.Input[str] resource_group_name: The name of the resource group in which to create the storage account. Changing this forces a new resource to be created.
        :param pulumi.Input[str] secondary_access_key: The secondary access key for the storage account.
        :param pulumi.Input[str] secondary_blob_connection_string: The connection string associated with the secondary blob location.
        :param pulumi.Input[str] secondary_blob_endpoint: The endpoint URL for blob storage in the secondary location.
        :param pulumi.Input[str] secondary_blob_host: The hostname with port if applicable for blob storage in the secondary location.
        :param pulumi.Input[str] secondary_connection_string: The connection string associated with the secondary location.
        :param pulumi.Input[str] secondary_dfs_endpoint: The endpoint URL for DFS storage in the secondary location.
        :param pulumi.Input[str] secondary_dfs_host: The hostname with port if applicable for DFS storage in the secondary location.
        :param pulumi.Input[str] secondary_file_endpoint: The endpoint URL for file storage in the secondary location.
        :param pulumi.Input[str] secondary_file_host: The hostname with port if applicable for file storage in the secondary location.
        :param pulumi.Input[str] secondary_location: The secondary location of the storage account.
        :param pulumi.Input[str] secondary_queue_endpoint: The endpoint URL for queue storage in the secondary location.
        :param pulumi.Input[str] secondary_queue_host: The hostname with port if applicable for queue storage in the secondary location.
        :param pulumi.Input[str] secondary_table_endpoint: The endpoint URL for table storage in the secondary location.
        :param pulumi.Input[str] secondary_table_host: The hostname with port if applicable for table storage in the secondary location.
        :param pulumi.Input[str] secondary_web_endpoint: The endpoint URL for web storage in the secondary location.
        :param pulumi.Input[str] secondary_web_host: The hostname with port if applicable for web storage in the secondary location.
        :param pulumi.Input[pulumi.InputType['AccountStaticWebsiteArgs']] static_website: A `static_website` block as defined below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["access_tier"] = access_tier
        __props__["account_kind"] = account_kind
        __props__["account_replication_type"] = account_replication_type
        __props__["account_tier"] = account_tier
        __props__["allow_blob_public_access"] = allow_blob_public_access
        __props__["blob_properties"] = blob_properties
        __props__["custom_domain"] = custom_domain
        __props__["enable_https_traffic_only"] = enable_https_traffic_only
        __props__["identity"] = identity
        __props__["is_hns_enabled"] = is_hns_enabled
        __props__["large_file_share_enabled"] = large_file_share_enabled
        __props__["location"] = location
        __props__["min_tls_version"] = min_tls_version
        __props__["name"] = name
        __props__["network_rules"] = network_rules
        __props__["primary_access_key"] = primary_access_key
        __props__["primary_blob_connection_string"] = primary_blob_connection_string
        __props__["primary_blob_endpoint"] = primary_blob_endpoint
        __props__["primary_blob_host"] = primary_blob_host
        __props__["primary_connection_string"] = primary_connection_string
        __props__["primary_dfs_endpoint"] = primary_dfs_endpoint
        __props__["primary_dfs_host"] = primary_dfs_host
        __props__["primary_file_endpoint"] = primary_file_endpoint
        __props__["primary_file_host"] = primary_file_host
        __props__["primary_location"] = primary_location
        __props__["primary_queue_endpoint"] = primary_queue_endpoint
        __props__["primary_queue_host"] = primary_queue_host
        __props__["primary_table_endpoint"] = primary_table_endpoint
        __props__["primary_table_host"] = primary_table_host
        __props__["primary_web_endpoint"] = primary_web_endpoint
        __props__["primary_web_host"] = primary_web_host
        __props__["queue_properties"] = queue_properties
        __props__["resource_group_name"] = resource_group_name
        __props__["secondary_access_key"] = secondary_access_key
        __props__["secondary_blob_connection_string"] = secondary_blob_connection_string
        __props__["secondary_blob_endpoint"] = secondary_blob_endpoint
        __props__["secondary_blob_host"] = secondary_blob_host
        __props__["secondary_connection_string"] = secondary_connection_string
        __props__["secondary_dfs_endpoint"] = secondary_dfs_endpoint
        __props__["secondary_dfs_host"] = secondary_dfs_host
        __props__["secondary_file_endpoint"] = secondary_file_endpoint
        __props__["secondary_file_host"] = secondary_file_host
        __props__["secondary_location"] = secondary_location
        __props__["secondary_queue_endpoint"] = secondary_queue_endpoint
        __props__["secondary_queue_host"] = secondary_queue_host
        __props__["secondary_table_endpoint"] = secondary_table_endpoint
        __props__["secondary_table_host"] = secondary_table_host
        __props__["secondary_web_endpoint"] = secondary_web_endpoint
        __props__["secondary_web_host"] = secondary_web_host
        __props__["static_website"] = static_website
        __props__["tags"] = tags
        return Account(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessTier")
    def access_tier(self) -> pulumi.Output[str]:
        """
        Defines the access tier for `BlobStorage`, `FileStorage` and `StorageV2` accounts. Valid options are `Hot` and `Cool`, defaults to `Hot`.
        """
        return pulumi.get(self, "access_tier")

    @property
    @pulumi.getter(name="accountKind")
    def account_kind(self) -> pulumi.Output[Optional[str]]:
        """
        Defines the Kind of account. Valid options are `BlobStorage`, `BlockBlobStorage`, `FileStorage`, `Storage` and `StorageV2`. Changing this forces a new resource to be created. Defaults to `StorageV2`.
        """
        return pulumi.get(self, "account_kind")

    @property
    @pulumi.getter(name="accountReplicationType")
    def account_replication_type(self) -> pulumi.Output[str]:
        """
        Defines the type of replication to use for this storage account. Valid options are `LRS`, `GRS`, `RAGRS`, `ZRS`, `GZRS` and `RAGZRS`.
        """
        return pulumi.get(self, "account_replication_type")

    @property
    @pulumi.getter(name="accountTier")
    def account_tier(self) -> pulumi.Output[str]:
        """
        Defines the Tier to use for this storage account. Valid options are `Standard` and `Premium`. For `BlockBlobStorage` and `FileStorage` accounts only `Premium` is valid. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "account_tier")

    @property
    @pulumi.getter(name="allowBlobPublicAccess")
    def allow_blob_public_access(self) -> pulumi.Output[Optional[bool]]:
        """
        Allow or disallow public access to all blobs or containers in the storage account. Defaults to `false`.
        """
        return pulumi.get(self, "allow_blob_public_access")

    @property
    @pulumi.getter(name="blobProperties")
    def blob_properties(self) -> pulumi.Output['outputs.AccountBlobProperties']:
        """
        A `blob_properties` block as defined below.
        """
        return pulumi.get(self, "blob_properties")

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> pulumi.Output[Optional['outputs.AccountCustomDomain']]:
        """
        A `custom_domain` block as documented below.
        """
        return pulumi.get(self, "custom_domain")

    @property
    @pulumi.getter(name="enableHttpsTrafficOnly")
    def enable_https_traffic_only(self) -> pulumi.Output[Optional[bool]]:
        """
        Boolean flag which forces HTTPS if enabled, see [here](https://docs.microsoft.com/en-us/azure/storage/storage-require-secure-transfer/)
        for more information. Defaults to `true`.
        """
        return pulumi.get(self, "enable_https_traffic_only")

    @property
    @pulumi.getter
    def identity(self) -> pulumi.Output['outputs.AccountIdentity']:
        """
        A `identity` block as defined below.
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter(name="isHnsEnabled")
    def is_hns_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Is Hierarchical Namespace enabled? This can be used with Azure Data Lake Storage Gen 2 ([see here for more information](https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-quickstart-create-account/)). Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "is_hns_enabled")

    @property
    @pulumi.getter(name="largeFileShareEnabled")
    def large_file_share_enabled(self) -> pulumi.Output[bool]:
        """
        Is Large File Share Enabled?
        """
        return pulumi.get(self, "large_file_share_enabled")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="minTlsVersion")
    def min_tls_version(self) -> pulumi.Output[Optional[str]]:
        """
        The minimum supported TLS version for the storage account. Possible values are `TLS1_0`, `TLS1_1`, and `TLS1_2`. Defaults to `TLS1_0` for new storage accounts.
        """
        return pulumi.get(self, "min_tls_version")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Specifies the name of the storage account. Changing this forces a new resource to be created. This must be unique across the entire Azure service, not just within the resource group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkRules")
    def network_rules(self) -> pulumi.Output['outputs.AccountNetworkRules']:
        """
        A `network_rules` block as documented below.
        """
        return pulumi.get(self, "network_rules")

    @property
    @pulumi.getter(name="primaryAccessKey")
    def primary_access_key(self) -> pulumi.Output[str]:
        """
        The primary access key for the storage account.
        """
        return pulumi.get(self, "primary_access_key")

    @property
    @pulumi.getter(name="primaryBlobConnectionString")
    def primary_blob_connection_string(self) -> pulumi.Output[str]:
        """
        The connection string associated with the primary blob location.
        """
        return pulumi.get(self, "primary_blob_connection_string")

    @property
    @pulumi.getter(name="primaryBlobEndpoint")
    def primary_blob_endpoint(self) -> pulumi.Output[str]:
        """
        The endpoint URL for blob storage in the primary location.
        """
        return pulumi.get(self, "primary_blob_endpoint")

    @property
    @pulumi.getter(name="primaryBlobHost")
    def primary_blob_host(self) -> pulumi.Output[str]:
        """
        The hostname with port if applicable for blob storage in the primary location.
        """
        return pulumi.get(self, "primary_blob_host")

    @property
    @pulumi.getter(name="primaryConnectionString")
    def primary_connection_string(self) -> pulumi.Output[str]:
        """
        The connection string associated with the primary location.
        """
        return pulumi.get(self, "primary_connection_string")

    @property
    @pulumi.getter(name="primaryDfsEndpoint")
    def primary_dfs_endpoint(self) -> pulumi.Output[str]:
        """
        The endpoint URL for DFS storage in the primary location.
        """
        return pulumi.get(self, "primary_dfs_endpoint")

    @property
    @pulumi.getter(name="primaryDfsHost")
    def primary_dfs_host(self) -> pulumi.Output[str]:
        """
        The hostname with port if applicable for DFS storage in the primary location.
        """
        return pulumi.get(self, "primary_dfs_host")

    @property
    @pulumi.getter(name="primaryFileEndpoint")
    def primary_file_endpoint(self) -> pulumi.Output[str]:
        """
        The endpoint URL for file storage in the primary location.
        """
        return pulumi.get(self, "primary_file_endpoint")

    @property
    @pulumi.getter(name="primaryFileHost")
    def primary_file_host(self) -> pulumi.Output[str]:
        """
        The hostname with port if applicable for file storage in the primary location.
        """
        return pulumi.get(self, "primary_file_host")

    @property
    @pulumi.getter(name="primaryLocation")
    def primary_location(self) -> pulumi.Output[str]:
        """
        The primary location of the storage account.
        """
        return pulumi.get(self, "primary_location")

    @property
    @pulumi.getter(name="primaryQueueEndpoint")
    def primary_queue_endpoint(self) -> pulumi.Output[str]:
        """
        The endpoint URL for queue storage in the primary location.
        """
        return pulumi.get(self, "primary_queue_endpoint")

    @property
    @pulumi.getter(name="primaryQueueHost")
    def primary_queue_host(self) -> pulumi.Output[str]:
        """
        The hostname with port if applicable for queue storage in the primary location.
        """
        return pulumi.get(self, "primary_queue_host")

    @property
    @pulumi.getter(name="primaryTableEndpoint")
    def primary_table_endpoint(self) -> pulumi.Output[str]:
        """
        The endpoint URL for table storage in the primary location.
        """
        return pulumi.get(self, "primary_table_endpoint")

    @property
    @pulumi.getter(name="primaryTableHost")
    def primary_table_host(self) -> pulumi.Output[str]:
        """
        The hostname with port if applicable for table storage in the primary location.
        """
        return pulumi.get(self, "primary_table_host")

    @property
    @pulumi.getter(name="primaryWebEndpoint")
    def primary_web_endpoint(self) -> pulumi.Output[str]:
        """
        The endpoint URL for web storage in the primary location.
        """
        return pulumi.get(self, "primary_web_endpoint")

    @property
    @pulumi.getter(name="primaryWebHost")
    def primary_web_host(self) -> pulumi.Output[str]:
        """
        The hostname with port if applicable for web storage in the primary location.
        """
        return pulumi.get(self, "primary_web_host")

    @property
    @pulumi.getter(name="queueProperties")
    def queue_properties(self) -> pulumi.Output['outputs.AccountQueueProperties']:
        """
        A `queue_properties` block as defined below.
        """
        return pulumi.get(self, "queue_properties")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[str]:
        """
        The name of the resource group in which to create the storage account. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="secondaryAccessKey")
    def secondary_access_key(self) -> pulumi.Output[str]:
        """
        The secondary access key for the storage account.
        """
        return pulumi.get(self, "secondary_access_key")

    @property
    @pulumi.getter(name="secondaryBlobConnectionString")
    def secondary_blob_connection_string(self) -> pulumi.Output[str]:
        """
        The connection string associated with the secondary blob location.
        """
        return pulumi.get(self, "secondary_blob_connection_string")

    @property
    @pulumi.getter(name="secondaryBlobEndpoint")
    def secondary_blob_endpoint(self) -> pulumi.Output[str]:
        """
        The endpoint URL for blob storage in the secondary location.
        """
        return pulumi.get(self, "secondary_blob_endpoint")

    @property
    @pulumi.getter(name="secondaryBlobHost")
    def secondary_blob_host(self) -> pulumi.Output[str]:
        """
        The hostname with port if applicable for blob storage in the secondary location.
        """
        return pulumi.get(self, "secondary_blob_host")

    @property
    @pulumi.getter(name="secondaryConnectionString")
    def secondary_connection_string(self) -> pulumi.Output[str]:
        """
        The connection string associated with the secondary location.
        """
        return pulumi.get(self, "secondary_connection_string")

    @property
    @pulumi.getter(name="secondaryDfsEndpoint")
    def secondary_dfs_endpoint(self) -> pulumi.Output[str]:
        """
        The endpoint URL for DFS storage in the secondary location.
        """
        return pulumi.get(self, "secondary_dfs_endpoint")

    @property
    @pulumi.getter(name="secondaryDfsHost")
    def secondary_dfs_host(self) -> pulumi.Output[str]:
        """
        The hostname with port if applicable for DFS storage in the secondary location.
        """
        return pulumi.get(self, "secondary_dfs_host")

    @property
    @pulumi.getter(name="secondaryFileEndpoint")
    def secondary_file_endpoint(self) -> pulumi.Output[str]:
        """
        The endpoint URL for file storage in the secondary location.
        """
        return pulumi.get(self, "secondary_file_endpoint")

    @property
    @pulumi.getter(name="secondaryFileHost")
    def secondary_file_host(self) -> pulumi.Output[str]:
        """
        The hostname with port if applicable for file storage in the secondary location.
        """
        return pulumi.get(self, "secondary_file_host")

    @property
    @pulumi.getter(name="secondaryLocation")
    def secondary_location(self) -> pulumi.Output[str]:
        """
        The secondary location of the storage account.
        """
        return pulumi.get(self, "secondary_location")

    @property
    @pulumi.getter(name="secondaryQueueEndpoint")
    def secondary_queue_endpoint(self) -> pulumi.Output[str]:
        """
        The endpoint URL for queue storage in the secondary location.
        """
        return pulumi.get(self, "secondary_queue_endpoint")

    @property
    @pulumi.getter(name="secondaryQueueHost")
    def secondary_queue_host(self) -> pulumi.Output[str]:
        """
        The hostname with port if applicable for queue storage in the secondary location.
        """
        return pulumi.get(self, "secondary_queue_host")

    @property
    @pulumi.getter(name="secondaryTableEndpoint")
    def secondary_table_endpoint(self) -> pulumi.Output[str]:
        """
        The endpoint URL for table storage in the secondary location.
        """
        return pulumi.get(self, "secondary_table_endpoint")

    @property
    @pulumi.getter(name="secondaryTableHost")
    def secondary_table_host(self) -> pulumi.Output[str]:
        """
        The hostname with port if applicable for table storage in the secondary location.
        """
        return pulumi.get(self, "secondary_table_host")

    @property
    @pulumi.getter(name="secondaryWebEndpoint")
    def secondary_web_endpoint(self) -> pulumi.Output[str]:
        """
        The endpoint URL for web storage in the secondary location.
        """
        return pulumi.get(self, "secondary_web_endpoint")

    @property
    @pulumi.getter(name="secondaryWebHost")
    def secondary_web_host(self) -> pulumi.Output[str]:
        """
        The hostname with port if applicable for web storage in the secondary location.
        """
        return pulumi.get(self, "secondary_web_host")

    @property
    @pulumi.getter(name="staticWebsite")
    def static_website(self) -> pulumi.Output[Optional['outputs.AccountStaticWebsite']]:
        """
        A `static_website` block as defined below.
        """
        return pulumi.get(self, "static_website")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A mapping of tags to assign to the resource.
        """
        return pulumi.get(self, "tags")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

