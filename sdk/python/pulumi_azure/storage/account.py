# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities, tables

class Account(pulumi.CustomResource):
    """
    Manage an Azure Storage Account.
    """
    def __init__(__self__, __name__, __opts__=None, access_tier=None, account_encryption_source=None, account_kind=None, account_replication_type=None, account_tier=None, account_type=None, custom_domain=None, enable_blob_encryption=None, enable_file_encryption=None, enable_https_traffic_only=None, identity=None, location=None, name=None, network_rules=None, resource_group_name=None, tags=None):
        """Create a Account resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['access_tier'] = access_tier

        __props__['account_encryption_source'] = account_encryption_source

        __props__['account_kind'] = account_kind

        if not account_replication_type:
            raise TypeError('Missing required property account_replication_type')
        __props__['account_replication_type'] = account_replication_type

        if not account_tier:
            raise TypeError('Missing required property account_tier')
        __props__['account_tier'] = account_tier

        __props__['account_type'] = account_type

        __props__['custom_domain'] = custom_domain

        __props__['enable_blob_encryption'] = enable_blob_encryption

        __props__['enable_file_encryption'] = enable_file_encryption

        __props__['enable_https_traffic_only'] = enable_https_traffic_only

        __props__['identity'] = identity

        if not location:
            raise TypeError('Missing required property location')
        __props__['location'] = location

        __props__['name'] = name

        __props__['network_rules'] = network_rules

        if not resource_group_name:
            raise TypeError('Missing required property resource_group_name')
        __props__['resource_group_name'] = resource_group_name

        __props__['tags'] = tags

        __props__['primary_access_key'] = None
        __props__['primary_blob_connection_string'] = None
        __props__['primary_blob_endpoint'] = None
        __props__['primary_connection_string'] = None
        __props__['primary_file_endpoint'] = None
        __props__['primary_location'] = None
        __props__['primary_queue_endpoint'] = None
        __props__['primary_table_endpoint'] = None
        __props__['secondary_access_key'] = None
        __props__['secondary_blob_connection_string'] = None
        __props__['secondary_blob_endpoint'] = None
        __props__['secondary_connection_string'] = None
        __props__['secondary_location'] = None
        __props__['secondary_queue_endpoint'] = None
        __props__['secondary_table_endpoint'] = None

        super(Account, __self__).__init__(
            'azure:storage/account:Account',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

