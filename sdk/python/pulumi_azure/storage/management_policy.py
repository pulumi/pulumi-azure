# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class ManagementPolicy(pulumi.CustomResource):
    rules: pulumi.Output[list]
    """
    A `rule` block as documented below.

      * `actions` (`dict`) - An `actions` block as documented below.
        * `baseBlob` (`dict`) - A `base_blob` block as documented below.
          * `deleteAfterDaysSinceModificationGreaterThan` (`float`) - The age in days after last modification to delete the blob. Must be at least 0.
          * `tierToArchiveAfterDaysSinceModificationGreaterThan` (`float`) - The age in days after last modification to tier blobs to archive storage. Supports blob currently at Hot or Cool tier. Must be at least 0.
          * `tierToCoolAfterDaysSinceModificationGreaterThan` (`float`) - The age in days after last modification to tier blobs to cool storage. Supports blob currently at Hot tier. Must be at least 0.

        * `snapshot` (`dict`) - A `snapshot` block as documented below.
          * `deleteAfterDaysSinceCreationGreaterThan` (`float`) - The age in days after create to delete the snaphot. Must be at least 0.

      * `enabled` (`bool`) - Boolean to specify whether the rule is enabled.
      * `filters` (`dict`) - A `filter` block as documented below.
        * `blobTypes` (`list`) - An array of predefined values. Only `blockBlob` is supported.
        * `prefixMatches` (`list`) - An array of strings for prefixes to be matched.

      * `name` (`str`) - A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy.
    """
    storage_account_id: pulumi.Output[str]
    """
    Specifies the id of the storage account to apply the management policy to.
    """
    def __init__(__self__, resource_name, opts=None, rules=None, storage_account_id=None, __props__=None, __name__=None, __opts__=None):
        """
        Manages an Azure Storage Account Management Policy.

        ## Example Usage



        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="westus")
        example_account = azure.storage.Account("exampleAccount",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            account_tier="Standard",
            account_replication_type="LRS",
            account_kind="BlobStorage")
        example_management_policy = azure.storage.ManagementPolicy("exampleManagementPolicy",
            storage_account_id=example_account.id,
            rule=[
                {
                    "name": "rule1",
                    "enabled": True,
                    "filters": {
                        "prefixMatches": ["container1/prefix1"],
                        "blobTypes": ["blockBlob"],
                    },
                    "actions": {
                        "base_blob": {
                            "tierToCoolAfterDaysSinceModificationGreaterThan": 10,
                            "tierToArchiveAfterDaysSinceModificationGreaterThan": 50,
                            "deleteAfterDaysSinceModificationGreaterThan": 100,
                        },
                        "snapshot": {
                            "deleteAfterDaysSinceCreationGreaterThan": 30,
                        },
                    },
                },
                {
                    "name": "rule2",
                    "enabled": False,
                    "filters": {
                        "prefixMatches": [
                            "container2/prefix1",
                            "container2/prefix2",
                        ],
                        "blobTypes": ["blockBlob"],
                    },
                    "actions": {
                        "base_blob": {
                            "tierToCoolAfterDaysSinceModificationGreaterThan": 11,
                            "tierToArchiveAfterDaysSinceModificationGreaterThan": 51,
                            "deleteAfterDaysSinceModificationGreaterThan": 101,
                        },
                        "snapshot": {
                            "deleteAfterDaysSinceCreationGreaterThan": 31,
                        },
                    },
                },
            ])
        ```


        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] rules: A `rule` block as documented below.
        :param pulumi.Input[str] storage_account_id: Specifies the id of the storage account to apply the management policy to.

        The **rules** object supports the following:

          * `actions` (`pulumi.Input[dict]`) - An `actions` block as documented below.
            * `baseBlob` (`pulumi.Input[dict]`) - A `base_blob` block as documented below.
              * `deleteAfterDaysSinceModificationGreaterThan` (`pulumi.Input[float]`) - The age in days after last modification to delete the blob. Must be at least 0.
              * `tierToArchiveAfterDaysSinceModificationGreaterThan` (`pulumi.Input[float]`) - The age in days after last modification to tier blobs to archive storage. Supports blob currently at Hot or Cool tier. Must be at least 0.
              * `tierToCoolAfterDaysSinceModificationGreaterThan` (`pulumi.Input[float]`) - The age in days after last modification to tier blobs to cool storage. Supports blob currently at Hot tier. Must be at least 0.

            * `snapshot` (`pulumi.Input[dict]`) - A `snapshot` block as documented below.
              * `deleteAfterDaysSinceCreationGreaterThan` (`pulumi.Input[float]`) - The age in days after create to delete the snaphot. Must be at least 0.

          * `enabled` (`pulumi.Input[bool]`) - Boolean to specify whether the rule is enabled.
          * `filters` (`pulumi.Input[dict]`) - A `filter` block as documented below.
            * `blobTypes` (`pulumi.Input[list]`) - An array of predefined values. Only `blockBlob` is supported.
            * `prefixMatches` (`pulumi.Input[list]`) - An array of strings for prefixes to be matched.

          * `name` (`pulumi.Input[str]`) - A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['rules'] = rules
            if storage_account_id is None:
                raise TypeError("Missing required property 'storage_account_id'")
            __props__['storage_account_id'] = storage_account_id
        super(ManagementPolicy, __self__).__init__(
            'azure:storage/managementPolicy:ManagementPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, rules=None, storage_account_id=None):
        """
        Get an existing ManagementPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] rules: A `rule` block as documented below.
        :param pulumi.Input[str] storage_account_id: Specifies the id of the storage account to apply the management policy to.

        The **rules** object supports the following:

          * `actions` (`pulumi.Input[dict]`) - An `actions` block as documented below.
            * `baseBlob` (`pulumi.Input[dict]`) - A `base_blob` block as documented below.
              * `deleteAfterDaysSinceModificationGreaterThan` (`pulumi.Input[float]`) - The age in days after last modification to delete the blob. Must be at least 0.
              * `tierToArchiveAfterDaysSinceModificationGreaterThan` (`pulumi.Input[float]`) - The age in days after last modification to tier blobs to archive storage. Supports blob currently at Hot or Cool tier. Must be at least 0.
              * `tierToCoolAfterDaysSinceModificationGreaterThan` (`pulumi.Input[float]`) - The age in days after last modification to tier blobs to cool storage. Supports blob currently at Hot tier. Must be at least 0.

            * `snapshot` (`pulumi.Input[dict]`) - A `snapshot` block as documented below.
              * `deleteAfterDaysSinceCreationGreaterThan` (`pulumi.Input[float]`) - The age in days after create to delete the snaphot. Must be at least 0.

          * `enabled` (`pulumi.Input[bool]`) - Boolean to specify whether the rule is enabled.
          * `filters` (`pulumi.Input[dict]`) - A `filter` block as documented below.
            * `blobTypes` (`pulumi.Input[list]`) - An array of predefined values. Only `blockBlob` is supported.
            * `prefixMatches` (`pulumi.Input[list]`) - An array of strings for prefixes to be matched.

          * `name` (`pulumi.Input[str]`) - A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["rules"] = rules
        __props__["storage_account_id"] = storage_account_id
        return ManagementPolicy(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

