# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from .account import *
from .account_network_rules import *
from .blob import *
from .container import *
from .customer_managed_key import *
from .data_lake_gen2_filesystem import *
from .data_lake_gen2_path import *
from .encryption_scope import *
from .get_account import *
from .get_account_blob_container_sas import *
from .get_account_sas import *
from .get_encryption_scope import *
from .get_policy import *
from .get_storage_container import *
from .get_sync import *
from .get_sync_group import *
from .management_policy import *
from .queue import *
from .share import *
from .share_directory import *
from .share_file import *
from .sync import *
from .sync_cloud_endpoint import *
from .sync_group import *
from .table import *
from .table_entity import *
from .zip_blob import *
from ._inputs import *
from . import outputs

def _register_module():
    import pulumi
    from .. import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "azure:storage/account:Account":
                return Account(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure:storage/accountNetworkRules:AccountNetworkRules":
                return AccountNetworkRules(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure:storage/blob:Blob":
                return Blob(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure:storage/container:Container":
                return Container(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure:storage/customerManagedKey:CustomerManagedKey":
                return CustomerManagedKey(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure:storage/dataLakeGen2Filesystem:DataLakeGen2Filesystem":
                return DataLakeGen2Filesystem(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure:storage/dataLakeGen2Path:DataLakeGen2Path":
                return DataLakeGen2Path(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure:storage/encryptionScope:EncryptionScope":
                return EncryptionScope(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure:storage/managementPolicy:ManagementPolicy":
                return ManagementPolicy(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure:storage/queue:Queue":
                return Queue(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure:storage/share:Share":
                return Share(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure:storage/shareDirectory:ShareDirectory":
                return ShareDirectory(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure:storage/shareFile:ShareFile":
                return ShareFile(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure:storage/sync:Sync":
                return Sync(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure:storage/syncCloudEndpoint:SyncCloudEndpoint":
                return SyncCloudEndpoint(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure:storage/syncGroup:SyncGroup":
                return SyncGroup(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure:storage/table:Table":
                return Table(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure:storage/tableEntity:TableEntity":
                return TableEntity(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "azure:storage/zipBlob:ZipBlob":
                return ZipBlob(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("azure", "storage/account", _module_instance)
    pulumi.runtime.register_resource_module("azure", "storage/accountNetworkRules", _module_instance)
    pulumi.runtime.register_resource_module("azure", "storage/blob", _module_instance)
    pulumi.runtime.register_resource_module("azure", "storage/container", _module_instance)
    pulumi.runtime.register_resource_module("azure", "storage/customerManagedKey", _module_instance)
    pulumi.runtime.register_resource_module("azure", "storage/dataLakeGen2Filesystem", _module_instance)
    pulumi.runtime.register_resource_module("azure", "storage/dataLakeGen2Path", _module_instance)
    pulumi.runtime.register_resource_module("azure", "storage/encryptionScope", _module_instance)
    pulumi.runtime.register_resource_module("azure", "storage/managementPolicy", _module_instance)
    pulumi.runtime.register_resource_module("azure", "storage/queue", _module_instance)
    pulumi.runtime.register_resource_module("azure", "storage/share", _module_instance)
    pulumi.runtime.register_resource_module("azure", "storage/shareDirectory", _module_instance)
    pulumi.runtime.register_resource_module("azure", "storage/shareFile", _module_instance)
    pulumi.runtime.register_resource_module("azure", "storage/sync", _module_instance)
    pulumi.runtime.register_resource_module("azure", "storage/syncCloudEndpoint", _module_instance)
    pulumi.runtime.register_resource_module("azure", "storage/syncGroup", _module_instance)
    pulumi.runtime.register_resource_module("azure", "storage/table", _module_instance)
    pulumi.runtime.register_resource_module("azure", "storage/tableEntity", _module_instance)
    pulumi.runtime.register_resource_module("azure", "storage/zipBlob", _module_instance)

_register_module()
