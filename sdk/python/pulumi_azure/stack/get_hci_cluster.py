# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetHciClusterResult',
    'AwaitableGetHciClusterResult',
    'get_hci_cluster',
    'get_hci_cluster_output',
]

@pulumi.output_type
class GetHciClusterResult:
    """
    A collection of values returned by getHciCluster.
    """
    def __init__(__self__, automanage_configuration_id=None, client_id=None, id=None, location=None, name=None, resource_group_name=None, tags=None, tenant_id=None):
        if automanage_configuration_id and not isinstance(automanage_configuration_id, str):
            raise TypeError("Expected argument 'automanage_configuration_id' to be a str")
        pulumi.set(__self__, "automanage_configuration_id", automanage_configuration_id)
        if client_id and not isinstance(client_id, str):
            raise TypeError("Expected argument 'client_id' to be a str")
        pulumi.set(__self__, "client_id", client_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_group_name and not isinstance(resource_group_name, str):
            raise TypeError("Expected argument 'resource_group_name' to be a str")
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="automanageConfigurationId")
    def automanage_configuration_id(self) -> str:
        """
        The ID of the Automanage Configuration assigned to the Azure Stack HCI Cluster.
        """
        return pulumi.get(self, "automanage_configuration_id")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The Client ID of the Azure Active Directory used by the Azure Stack HCI Cluster.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The Azure Region where the Azure Stack HCI Cluster exists.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> str:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, str]:
        """
        A mapping of tags assigned to the Azure Stack HCI Cluster.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The Tenant ID of the Azure Active Directory used by the Azure Stack HCI Cluster.
        """
        return pulumi.get(self, "tenant_id")


class AwaitableGetHciClusterResult(GetHciClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHciClusterResult(
            automanage_configuration_id=self.automanage_configuration_id,
            client_id=self.client_id,
            id=self.id,
            location=self.location,
            name=self.name,
            resource_group_name=self.resource_group_name,
            tags=self.tags,
            tenant_id=self.tenant_id)


def get_hci_cluster(name: Optional[str] = None,
                    resource_group_name: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHciClusterResult:
    """
    Use this data source to access information about an existing Azure Stack HCI Cluster instance.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_azure as azure

    example = azure.stack.get_hci_cluster(name="existing",
        resource_group_name="existing")
    pulumi.export("id", example.id)
    pulumi.export("location", example.location)
    pulumi.export("clientId", example.client_id)
    ```


    :param str name: The name of the Azure Stack HCI Cluster.
    :param str resource_group_name: The name of the Resource Group where the Azure Stack HCI Cluster exists.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure:stack/getHciCluster:getHciCluster', __args__, opts=opts, typ=GetHciClusterResult).value

    return AwaitableGetHciClusterResult(
        automanage_configuration_id=pulumi.get(__ret__, 'automanage_configuration_id'),
        client_id=pulumi.get(__ret__, 'client_id'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        resource_group_name=pulumi.get(__ret__, 'resource_group_name'),
        tags=pulumi.get(__ret__, 'tags'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'))


@_utilities.lift_output_func(get_hci_cluster)
def get_hci_cluster_output(name: Optional[pulumi.Input[str]] = None,
                           resource_group_name: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetHciClusterResult]:
    """
    Use this data source to access information about an existing Azure Stack HCI Cluster instance.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_azure as azure

    example = azure.stack.get_hci_cluster(name="existing",
        resource_group_name="existing")
    pulumi.export("id", example.id)
    pulumi.export("location", example.location)
    pulumi.export("clientId", example.client_id)
    ```


    :param str name: The name of the Azure Stack HCI Cluster.
    :param str resource_group_name: The name of the Resource Group where the Azure Stack HCI Cluster exists.
    """
    ...
