# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'BackupPolicyDiskRetentionRuleArgs',
    'BackupPolicyDiskRetentionRuleCriteriaArgs',
    'BackupPolicyPostgresqlRetentionRuleArgs',
    'BackupPolicyPostgresqlRetentionRuleCriteriaArgs',
    'BackupVaultIdentityArgs',
]

@pulumi.input_type
class BackupPolicyDiskRetentionRuleArgs:
    def __init__(__self__, *,
                 criteria: pulumi.Input['BackupPolicyDiskRetentionRuleCriteriaArgs'],
                 duration: pulumi.Input[str],
                 name: pulumi.Input[str],
                 priority: pulumi.Input[int]):
        """
        :param pulumi.Input['BackupPolicyDiskRetentionRuleCriteriaArgs'] criteria: A `criteria` block as defined below. Changing this forces a new Backup Policy Disk to be created.
        :param pulumi.Input[str] duration: Duration of deletion after given timespan. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy Disk to be created.
        :param pulumi.Input[str] name: The name which should be used for this retention rule. Changing this forces a new Backup Policy Disk to be created.
        :param pulumi.Input[int] priority: Retention Tag priority. Changing this forces a new Backup Policy Disk to be created.
        """
        pulumi.set(__self__, "criteria", criteria)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def criteria(self) -> pulumi.Input['BackupPolicyDiskRetentionRuleCriteriaArgs']:
        """
        A `criteria` block as defined below. Changing this forces a new Backup Policy Disk to be created.
        """
        return pulumi.get(self, "criteria")

    @criteria.setter
    def criteria(self, value: pulumi.Input['BackupPolicyDiskRetentionRuleCriteriaArgs']):
        pulumi.set(self, "criteria", value)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[str]:
        """
        Duration of deletion after given timespan. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy Disk to be created.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[str]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name which should be used for this retention rule. Changing this forces a new Backup Policy Disk to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[int]:
        """
        Retention Tag priority. Changing this forces a new Backup Policy Disk to be created.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class BackupPolicyDiskRetentionRuleCriteriaArgs:
    def __init__(__self__, *,
                 absolute_criteria: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] absolute_criteria: Possible values are `FirstOfDay` and `FirstOfWeek`. Changing this forces a new Backup Policy Disk to be created.
        """
        if absolute_criteria is not None:
            pulumi.set(__self__, "absolute_criteria", absolute_criteria)

    @property
    @pulumi.getter(name="absoluteCriteria")
    def absolute_criteria(self) -> Optional[pulumi.Input[str]]:
        """
        Possible values are `FirstOfDay` and `FirstOfWeek`. Changing this forces a new Backup Policy Disk to be created.
        """
        return pulumi.get(self, "absolute_criteria")

    @absolute_criteria.setter
    def absolute_criteria(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "absolute_criteria", value)


@pulumi.input_type
class BackupPolicyPostgresqlRetentionRuleArgs:
    def __init__(__self__, *,
                 criteria: pulumi.Input['BackupPolicyPostgresqlRetentionRuleCriteriaArgs'],
                 duration: pulumi.Input[str],
                 name: pulumi.Input[str],
                 priority: pulumi.Input[int]):
        """
        :param pulumi.Input['BackupPolicyPostgresqlRetentionRuleCriteriaArgs'] criteria: A `criteria` block as defined below. Changing this forces a new Backup Policy PostgreSQL to be created.
        :param pulumi.Input[str] duration: Duration after which the backup is deleted. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy PostgreSQL to be created.
        :param pulumi.Input[str] name: The name which should be used for this retention rule. Changing this forces a new Backup Policy PostgreSQL to be created.
        :param pulumi.Input[int] priority: Specifies the priority of the rule. The priority number must be unique for each rule. The lower the priority number, the higher the priority of the rule. Changing this forces a new Backup Policy PostgreSQL to be created.
        """
        pulumi.set(__self__, "criteria", criteria)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def criteria(self) -> pulumi.Input['BackupPolicyPostgresqlRetentionRuleCriteriaArgs']:
        """
        A `criteria` block as defined below. Changing this forces a new Backup Policy PostgreSQL to be created.
        """
        return pulumi.get(self, "criteria")

    @criteria.setter
    def criteria(self, value: pulumi.Input['BackupPolicyPostgresqlRetentionRuleCriteriaArgs']):
        pulumi.set(self, "criteria", value)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[str]:
        """
        Duration after which the backup is deleted. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy PostgreSQL to be created.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[str]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name which should be used for this retention rule. Changing this forces a new Backup Policy PostgreSQL to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[int]:
        """
        Specifies the priority of the rule. The priority number must be unique for each rule. The lower the priority number, the higher the priority of the rule. Changing this forces a new Backup Policy PostgreSQL to be created.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class BackupPolicyPostgresqlRetentionRuleCriteriaArgs:
    def __init__(__self__, *,
                 absolute_criteria: Optional[pulumi.Input[str]] = None,
                 days_of_weeks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 months_of_years: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 scheduled_backup_times: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 weeks_of_months: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] absolute_criteria: Possible values are `AllBackup`, `FirstOfDay`, `FirstOfWeek`, `FirstOfMonth` and `FirstOfYear`. These values mean the first successful backup of the day/week/month/year. Changing this forces a new Backup Policy PostgreSQL to be created.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] days_of_weeks: Possible values are `Monday`, `Tuesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`. Changing this forces a new Backup Policy PostgreSQL to be created.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] months_of_years: Possible values are `January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`, `October`, `November` and `December`. Changing this forces a new Backup Policy PostgreSQL to be created.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scheduled_backup_times: Specifies a list of backup times for backup in the `RFC3339` format. Changing this forces a new Backup Policy PostgreSQL to be created.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] weeks_of_months: Possible values are `First`, `Second`, `Third`, `Fourth` and `Last`. Changing this forces a new Backup Policy PostgreSQL to be created.
        """
        if absolute_criteria is not None:
            pulumi.set(__self__, "absolute_criteria", absolute_criteria)
        if days_of_weeks is not None:
            pulumi.set(__self__, "days_of_weeks", days_of_weeks)
        if months_of_years is not None:
            pulumi.set(__self__, "months_of_years", months_of_years)
        if scheduled_backup_times is not None:
            pulumi.set(__self__, "scheduled_backup_times", scheduled_backup_times)
        if weeks_of_months is not None:
            pulumi.set(__self__, "weeks_of_months", weeks_of_months)

    @property
    @pulumi.getter(name="absoluteCriteria")
    def absolute_criteria(self) -> Optional[pulumi.Input[str]]:
        """
        Possible values are `AllBackup`, `FirstOfDay`, `FirstOfWeek`, `FirstOfMonth` and `FirstOfYear`. These values mean the first successful backup of the day/week/month/year. Changing this forces a new Backup Policy PostgreSQL to be created.
        """
        return pulumi.get(self, "absolute_criteria")

    @absolute_criteria.setter
    def absolute_criteria(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "absolute_criteria", value)

    @property
    @pulumi.getter(name="daysOfWeeks")
    def days_of_weeks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Possible values are `Monday`, `Tuesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`. Changing this forces a new Backup Policy PostgreSQL to be created.
        """
        return pulumi.get(self, "days_of_weeks")

    @days_of_weeks.setter
    def days_of_weeks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "days_of_weeks", value)

    @property
    @pulumi.getter(name="monthsOfYears")
    def months_of_years(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Possible values are `January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`, `October`, `November` and `December`. Changing this forces a new Backup Policy PostgreSQL to be created.
        """
        return pulumi.get(self, "months_of_years")

    @months_of_years.setter
    def months_of_years(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "months_of_years", value)

    @property
    @pulumi.getter(name="scheduledBackupTimes")
    def scheduled_backup_times(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies a list of backup times for backup in the `RFC3339` format. Changing this forces a new Backup Policy PostgreSQL to be created.
        """
        return pulumi.get(self, "scheduled_backup_times")

    @scheduled_backup_times.setter
    def scheduled_backup_times(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scheduled_backup_times", value)

    @property
    @pulumi.getter(name="weeksOfMonths")
    def weeks_of_months(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Possible values are `First`, `Second`, `Third`, `Fourth` and `Last`. Changing this forces a new Backup Policy PostgreSQL to be created.
        """
        return pulumi.get(self, "weeks_of_months")

    @weeks_of_months.setter
    def weeks_of_months(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "weeks_of_months", value)


@pulumi.input_type
class BackupVaultIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 principal_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: Specifies the type of Managed Service Identity that should be configured on this Backup Vault. The only possible value is `SystemAssigned`.
        :param pulumi.Input[str] principal_id: The Principal ID for the Service Principal associated with the Identity of this Backup Vault.
        :param pulumi.Input[str] tenant_id: The Tenant ID for the Service Principal associated with the Identity of this Backup Vault.
        """
        pulumi.set(__self__, "type", type)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Specifies the type of Managed Service Identity that should be configured on this Backup Vault. The only possible value is `SystemAssigned`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Principal ID for the Service Principal associated with the Identity of this Backup Vault.
        """
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Tenant ID for the Service Principal associated with the Identity of this Backup Vault.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


