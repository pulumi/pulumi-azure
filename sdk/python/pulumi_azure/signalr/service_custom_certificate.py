# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ServiceCustomCertificateArgs', 'ServiceCustomCertificate']

@pulumi.input_type
class ServiceCustomCertificateArgs:
    def __init__(__self__, *,
                 custom_certificate_id: pulumi.Input[str],
                 signalr_service_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ServiceCustomCertificate resource.
        :param pulumi.Input[str] custom_certificate_id: The certificate id of the SignalR Custom Certificate service. Changing this forces a new resource to be created.
               
               > **Note:** Self assigned certificate is not supported and the provisioning status will fail.
        :param pulumi.Input[str] signalr_service_id: The SignalR ID of the SignalR Custom Certificate. Changing this forces a new resource to be created.
               
               > **Note:** Custom Certificate is only available for SignalR Premium tier. Please enable managed identity in the corresponding SignalR Service and give the managed identity access to the key vault, the required permission is Get Certificate and Secret.
        :param pulumi.Input[str] name: The name of the SignalR Custom Certificate. Changing this forces a new resource to be created.
        """
        ServiceCustomCertificateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_certificate_id=custom_certificate_id,
            signalr_service_id=signalr_service_id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_certificate_id: pulumi.Input[str],
             signalr_service_id: pulumi.Input[str],
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("custom_certificate_id", custom_certificate_id)
        _setter("signalr_service_id", signalr_service_id)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="customCertificateId")
    def custom_certificate_id(self) -> pulumi.Input[str]:
        """
        The certificate id of the SignalR Custom Certificate service. Changing this forces a new resource to be created.

        > **Note:** Self assigned certificate is not supported and the provisioning status will fail.
        """
        return pulumi.get(self, "custom_certificate_id")

    @custom_certificate_id.setter
    def custom_certificate_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "custom_certificate_id", value)

    @property
    @pulumi.getter(name="signalrServiceId")
    def signalr_service_id(self) -> pulumi.Input[str]:
        """
        The SignalR ID of the SignalR Custom Certificate. Changing this forces a new resource to be created.

        > **Note:** Custom Certificate is only available for SignalR Premium tier. Please enable managed identity in the corresponding SignalR Service and give the managed identity access to the key vault, the required permission is Get Certificate and Secret.
        """
        return pulumi.get(self, "signalr_service_id")

    @signalr_service_id.setter
    def signalr_service_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "signalr_service_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SignalR Custom Certificate. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _ServiceCustomCertificateState:
    def __init__(__self__, *,
                 certificate_version: Optional[pulumi.Input[str]] = None,
                 custom_certificate_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 signalr_service_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ServiceCustomCertificate resources.
        :param pulumi.Input[str] certificate_version: The certificate version of the SignalR Custom Certificate service.
        :param pulumi.Input[str] custom_certificate_id: The certificate id of the SignalR Custom Certificate service. Changing this forces a new resource to be created.
               
               > **Note:** Self assigned certificate is not supported and the provisioning status will fail.
        :param pulumi.Input[str] name: The name of the SignalR Custom Certificate. Changing this forces a new resource to be created.
        :param pulumi.Input[str] signalr_service_id: The SignalR ID of the SignalR Custom Certificate. Changing this forces a new resource to be created.
               
               > **Note:** Custom Certificate is only available for SignalR Premium tier. Please enable managed identity in the corresponding SignalR Service and give the managed identity access to the key vault, the required permission is Get Certificate and Secret.
        """
        _ServiceCustomCertificateState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            certificate_version=certificate_version,
            custom_certificate_id=custom_certificate_id,
            name=name,
            signalr_service_id=signalr_service_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             certificate_version: Optional[pulumi.Input[str]] = None,
             custom_certificate_id: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             signalr_service_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if certificate_version is not None:
            _setter("certificate_version", certificate_version)
        if custom_certificate_id is not None:
            _setter("custom_certificate_id", custom_certificate_id)
        if name is not None:
            _setter("name", name)
        if signalr_service_id is not None:
            _setter("signalr_service_id", signalr_service_id)

    @property
    @pulumi.getter(name="certificateVersion")
    def certificate_version(self) -> Optional[pulumi.Input[str]]:
        """
        The certificate version of the SignalR Custom Certificate service.
        """
        return pulumi.get(self, "certificate_version")

    @certificate_version.setter
    def certificate_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_version", value)

    @property
    @pulumi.getter(name="customCertificateId")
    def custom_certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        The certificate id of the SignalR Custom Certificate service. Changing this forces a new resource to be created.

        > **Note:** Self assigned certificate is not supported and the provisioning status will fail.
        """
        return pulumi.get(self, "custom_certificate_id")

    @custom_certificate_id.setter
    def custom_certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_certificate_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SignalR Custom Certificate. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="signalrServiceId")
    def signalr_service_id(self) -> Optional[pulumi.Input[str]]:
        """
        The SignalR ID of the SignalR Custom Certificate. Changing this forces a new resource to be created.

        > **Note:** Custom Certificate is only available for SignalR Premium tier. Please enable managed identity in the corresponding SignalR Service and give the managed identity access to the key vault, the required permission is Get Certificate and Secret.
        """
        return pulumi.get(self, "signalr_service_id")

    @signalr_service_id.setter
    def signalr_service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signalr_service_id", value)


class ServiceCustomCertificate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_certificate_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 signalr_service_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages an Azure SignalR Custom Certificate.

        ## Example Usage

        ```python
        import pulumi
        import base64
        import pulumi_azure as azure

        current = azure.core.get_client_config()
        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_service = azure.signalr.Service("exampleService",
            location=azurerm_resource_group["test"]["location"],
            resource_group_name=azurerm_resource_group["test"]["name"],
            sku=azure.signalr.ServiceSkuArgs(
                name="Premium_P1",
                capacity=1,
            ),
            identity=azure.signalr.ServiceIdentityArgs(
                type="SystemAssigned",
            ))
        example_key_vault = azure.keyvault.KeyVault("exampleKeyVault",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            tenant_id=current.tenant_id,
            sku_name="premium",
            access_policies=[
                azure.keyvault.KeyVaultAccessPolicyArgs(
                    tenant_id=current.tenant_id,
                    object_id=current.object_id,
                    certificate_permissions=[
                        "Create",
                        "Get",
                        "List",
                    ],
                    secret_permissions=[
                        "Get",
                        "List",
                    ],
                ),
                azure.keyvault.KeyVaultAccessPolicyArgs(
                    tenant_id=current.tenant_id,
                    object_id=azurerm_signalr_service["test"]["identity"][0]["principal_id"],
                    certificate_permissions=[
                        "Create",
                        "Get",
                        "List",
                    ],
                    secret_permissions=[
                        "Get",
                        "List",
                    ],
                ),
            ])
        example_certificate = azure.keyvault.Certificate("exampleCertificate",
            key_vault_id=example_key_vault.id,
            certificate=azure.keyvault.CertificateCertificateArgs(
                contents=(lambda path: base64.b64encode(open(path).read().encode()).decode())("certificate-to-import.pfx"),
                password="",
            ))
        test = azure.signalr.ServiceCustomCertificate("test",
            signalr_service_id=example_service.id,
            custom_certificate_id=example_certificate.id,
            opts=pulumi.ResourceOptions(depends_on=[azurerm_key_vault_access_policy["example"]]))
        ```

        ## Import

        Custom Certificate for a SignalR service can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:signalr/serviceCustomCertificate:ServiceCustomCertificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.SignalRService/signalR/signalr1/customCertificates/cert1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] custom_certificate_id: The certificate id of the SignalR Custom Certificate service. Changing this forces a new resource to be created.
               
               > **Note:** Self assigned certificate is not supported and the provisioning status will fail.
        :param pulumi.Input[str] name: The name of the SignalR Custom Certificate. Changing this forces a new resource to be created.
        :param pulumi.Input[str] signalr_service_id: The SignalR ID of the SignalR Custom Certificate. Changing this forces a new resource to be created.
               
               > **Note:** Custom Certificate is only available for SignalR Premium tier. Please enable managed identity in the corresponding SignalR Service and give the managed identity access to the key vault, the required permission is Get Certificate and Secret.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceCustomCertificateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an Azure SignalR Custom Certificate.

        ## Example Usage

        ```python
        import pulumi
        import base64
        import pulumi_azure as azure

        current = azure.core.get_client_config()
        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_service = azure.signalr.Service("exampleService",
            location=azurerm_resource_group["test"]["location"],
            resource_group_name=azurerm_resource_group["test"]["name"],
            sku=azure.signalr.ServiceSkuArgs(
                name="Premium_P1",
                capacity=1,
            ),
            identity=azure.signalr.ServiceIdentityArgs(
                type="SystemAssigned",
            ))
        example_key_vault = azure.keyvault.KeyVault("exampleKeyVault",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            tenant_id=current.tenant_id,
            sku_name="premium",
            access_policies=[
                azure.keyvault.KeyVaultAccessPolicyArgs(
                    tenant_id=current.tenant_id,
                    object_id=current.object_id,
                    certificate_permissions=[
                        "Create",
                        "Get",
                        "List",
                    ],
                    secret_permissions=[
                        "Get",
                        "List",
                    ],
                ),
                azure.keyvault.KeyVaultAccessPolicyArgs(
                    tenant_id=current.tenant_id,
                    object_id=azurerm_signalr_service["test"]["identity"][0]["principal_id"],
                    certificate_permissions=[
                        "Create",
                        "Get",
                        "List",
                    ],
                    secret_permissions=[
                        "Get",
                        "List",
                    ],
                ),
            ])
        example_certificate = azure.keyvault.Certificate("exampleCertificate",
            key_vault_id=example_key_vault.id,
            certificate=azure.keyvault.CertificateCertificateArgs(
                contents=(lambda path: base64.b64encode(open(path).read().encode()).decode())("certificate-to-import.pfx"),
                password="",
            ))
        test = azure.signalr.ServiceCustomCertificate("test",
            signalr_service_id=example_service.id,
            custom_certificate_id=example_certificate.id,
            opts=pulumi.ResourceOptions(depends_on=[azurerm_key_vault_access_policy["example"]]))
        ```

        ## Import

        Custom Certificate for a SignalR service can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:signalr/serviceCustomCertificate:ServiceCustomCertificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.SignalRService/signalR/signalr1/customCertificates/cert1
        ```

        :param str resource_name: The name of the resource.
        :param ServiceCustomCertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceCustomCertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            ServiceCustomCertificateArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_certificate_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 signalr_service_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceCustomCertificateArgs.__new__(ServiceCustomCertificateArgs)

            if custom_certificate_id is None and not opts.urn:
                raise TypeError("Missing required property 'custom_certificate_id'")
            __props__.__dict__["custom_certificate_id"] = custom_certificate_id
            __props__.__dict__["name"] = name
            if signalr_service_id is None and not opts.urn:
                raise TypeError("Missing required property 'signalr_service_id'")
            __props__.__dict__["signalr_service_id"] = signalr_service_id
            __props__.__dict__["certificate_version"] = None
        super(ServiceCustomCertificate, __self__).__init__(
            'azure:signalr/serviceCustomCertificate:ServiceCustomCertificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate_version: Optional[pulumi.Input[str]] = None,
            custom_certificate_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            signalr_service_id: Optional[pulumi.Input[str]] = None) -> 'ServiceCustomCertificate':
        """
        Get an existing ServiceCustomCertificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_version: The certificate version of the SignalR Custom Certificate service.
        :param pulumi.Input[str] custom_certificate_id: The certificate id of the SignalR Custom Certificate service. Changing this forces a new resource to be created.
               
               > **Note:** Self assigned certificate is not supported and the provisioning status will fail.
        :param pulumi.Input[str] name: The name of the SignalR Custom Certificate. Changing this forces a new resource to be created.
        :param pulumi.Input[str] signalr_service_id: The SignalR ID of the SignalR Custom Certificate. Changing this forces a new resource to be created.
               
               > **Note:** Custom Certificate is only available for SignalR Premium tier. Please enable managed identity in the corresponding SignalR Service and give the managed identity access to the key vault, the required permission is Get Certificate and Secret.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceCustomCertificateState.__new__(_ServiceCustomCertificateState)

        __props__.__dict__["certificate_version"] = certificate_version
        __props__.__dict__["custom_certificate_id"] = custom_certificate_id
        __props__.__dict__["name"] = name
        __props__.__dict__["signalr_service_id"] = signalr_service_id
        return ServiceCustomCertificate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="certificateVersion")
    def certificate_version(self) -> pulumi.Output[str]:
        """
        The certificate version of the SignalR Custom Certificate service.
        """
        return pulumi.get(self, "certificate_version")

    @property
    @pulumi.getter(name="customCertificateId")
    def custom_certificate_id(self) -> pulumi.Output[str]:
        """
        The certificate id of the SignalR Custom Certificate service. Changing this forces a new resource to be created.

        > **Note:** Self assigned certificate is not supported and the provisioning status will fail.
        """
        return pulumi.get(self, "custom_certificate_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the SignalR Custom Certificate. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="signalrServiceId")
    def signalr_service_id(self) -> pulumi.Output[str]:
        """
        The SignalR ID of the SignalR Custom Certificate. Changing this forces a new resource to be created.

        > **Note:** Custom Certificate is only available for SignalR Premium tier. Please enable managed identity in the corresponding SignalR Service and give the managed identity access to the key vault, the required permission is Get Certificate and Secret.
        """
        return pulumi.get(self, "signalr_service_id")

