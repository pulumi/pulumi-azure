# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities, tables

class MetricAlert(pulumi.CustomResource):
    def __init__(__self__, __name__, __opts__=None, actions=None, auto_mitigate=None, criterias=None, description=None, enabled=None, frequency=None, name=None, resource_group_name=None, scopes=None, severity=None, tags=None, window_size=None):
        """Create a MetricAlert resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['actions'] = actions

        __props__['auto_mitigate'] = auto_mitigate

        if not criterias:
            raise TypeError('Missing required property criterias')
        __props__['criterias'] = criterias

        __props__['description'] = description

        __props__['enabled'] = enabled

        __props__['frequency'] = frequency

        __props__['name'] = name

        if not resource_group_name:
            raise TypeError('Missing required property resource_group_name')
        __props__['resource_group_name'] = resource_group_name

        if not scopes:
            raise TypeError('Missing required property scopes')
        __props__['scopes'] = scopes

        __props__['severity'] = severity

        __props__['tags'] = tags

        __props__['window_size'] = window_size

        super(MetricAlert, __self__).__init__(
            'azure:monitoring/metricAlert:MetricAlert',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

