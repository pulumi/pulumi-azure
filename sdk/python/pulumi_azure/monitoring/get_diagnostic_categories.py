# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetDiagnosticCategoriesResult',
    'AwaitableGetDiagnosticCategoriesResult',
    'get_diagnostic_categories',
    'get_diagnostic_categories_output',
]

@pulumi.output_type
class GetDiagnosticCategoriesResult:
    """
    A collection of values returned by getDiagnosticCategories.
    """
    def __init__(__self__, id=None, log_category_groups=None, log_category_types=None, metrics=None, resource_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if log_category_groups and not isinstance(log_category_groups, list):
            raise TypeError("Expected argument 'log_category_groups' to be a list")
        pulumi.set(__self__, "log_category_groups", log_category_groups)
        if log_category_types and not isinstance(log_category_types, list):
            raise TypeError("Expected argument 'log_category_types' to be a list")
        pulumi.set(__self__, "log_category_types", log_category_types)
        if metrics and not isinstance(metrics, list):
            raise TypeError("Expected argument 'metrics' to be a list")
        pulumi.set(__self__, "metrics", metrics)
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        pulumi.set(__self__, "resource_id", resource_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="logCategoryGroups")
    def log_category_groups(self) -> Sequence[str]:
        """
        A list of the supported log category groups of this resource to send to the destination.
        """
        return pulumi.get(self, "log_category_groups")

    @property
    @pulumi.getter(name="logCategoryTypes")
    def log_category_types(self) -> Sequence[str]:
        """
        A list of the supported log category types of this resource to send to the destination.
        """
        return pulumi.get(self, "log_category_types")

    @property
    @pulumi.getter
    def metrics(self) -> Sequence[str]:
        """
        A list of the Metric Categories supported for this Resource.
        """
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        return pulumi.get(self, "resource_id")


class AwaitableGetDiagnosticCategoriesResult(GetDiagnosticCategoriesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDiagnosticCategoriesResult(
            id=self.id,
            log_category_groups=self.log_category_groups,
            log_category_types=self.log_category_types,
            metrics=self.metrics,
            resource_id=self.resource_id)


def get_diagnostic_categories(resource_id: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDiagnosticCategoriesResult:
    """
    Use this data source to access information about the Monitor Diagnostics Categories supported by an existing Resource.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_azure as azure

    example = azure.keyvault.get_key_vault(name=example_azurerm_key_vault["name"],
        resource_group_name=example_azurerm_key_vault["resourceGroupName"])
    example_get_diagnostic_categories = azure.monitoring.get_diagnostic_categories(resource_id=example.id)
    ```


    :param str resource_id: The ID of an existing Resource which Monitor Diagnostics Categories should be retrieved for.
    """
    __args__ = dict()
    __args__['resourceId'] = resource_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure:monitoring/getDiagnosticCategories:getDiagnosticCategories', __args__, opts=opts, typ=GetDiagnosticCategoriesResult).value

    return AwaitableGetDiagnosticCategoriesResult(
        id=pulumi.get(__ret__, 'id'),
        log_category_groups=pulumi.get(__ret__, 'log_category_groups'),
        log_category_types=pulumi.get(__ret__, 'log_category_types'),
        metrics=pulumi.get(__ret__, 'metrics'),
        resource_id=pulumi.get(__ret__, 'resource_id'))
def get_diagnostic_categories_output(resource_id: Optional[pulumi.Input[str]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDiagnosticCategoriesResult]:
    """
    Use this data source to access information about the Monitor Diagnostics Categories supported by an existing Resource.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_azure as azure

    example = azure.keyvault.get_key_vault(name=example_azurerm_key_vault["name"],
        resource_group_name=example_azurerm_key_vault["resourceGroupName"])
    example_get_diagnostic_categories = azure.monitoring.get_diagnostic_categories(resource_id=example.id)
    ```


    :param str resource_id: The ID of an existing Resource which Monitor Diagnostics Categories should be retrieved for.
    """
    __args__ = dict()
    __args__['resourceId'] = resource_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure:monitoring/getDiagnosticCategories:getDiagnosticCategories', __args__, opts=opts, typ=GetDiagnosticCategoriesResult)
    return __ret__.apply(lambda __response__: GetDiagnosticCategoriesResult(
        id=pulumi.get(__response__, 'id'),
        log_category_groups=pulumi.get(__response__, 'log_category_groups'),
        log_category_types=pulumi.get(__response__, 'log_category_types'),
        metrics=pulumi.get(__response__, 'metrics'),
        resource_id=pulumi.get(__response__, 'resource_id')))
