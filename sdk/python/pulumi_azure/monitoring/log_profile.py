# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class LogProfile(pulumi.CustomResource):
    """
    Manages a [Log Profile](https://docs.microsoft.com/en-us/azure/monitoring-and-diagnostics/monitoring-overview-activity-logs#export-the-activity-log-with-a-log-profile). A Log Profile configures how Activity Logs are exported.
    """
    def __init__(__self__, __name__, __opts__=None, categories=None, locations=None, name=None, retention_policy=None, servicebus_rule_id=None, storage_account_id=None):
        """Create a LogProfile resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not categories:
            raise TypeError('Missing required property categories')
        elif not isinstance(categories, list):
            raise TypeError('Expected property categories to be a list')
        __self__.categories = categories
        """
        List of categories of the logs.
        """
        __props__['categories'] = categories

        if not locations:
            raise TypeError('Missing required property locations')
        elif not isinstance(locations, list):
            raise TypeError('Expected property locations to be a list')
        __self__.locations = locations
        """
        List of regions for which Activity Log events are stored or streamed.
        """
        __props__['locations'] = locations

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The name of the Log Profile. Changing this forces a
        new resource to be created.
        """
        __props__['name'] = name

        if not retention_policy:
            raise TypeError('Missing required property retention_policy')
        elif not isinstance(retention_policy, dict):
            raise TypeError('Expected property retention_policy to be a dict')
        __self__.retention_policy = retention_policy
        """
        A `retention_policy` block as documented below. A retention policy for how long Activity Logs are retained in the storage account.
        """
        __props__['retentionPolicy'] = retention_policy

        if servicebus_rule_id and not isinstance(servicebus_rule_id, basestring):
            raise TypeError('Expected property servicebus_rule_id to be a basestring')
        __self__.servicebus_rule_id = servicebus_rule_id
        """
        The service bus (or event hub) rule ID of the service bus (or event hub) namespace in which the Activity Log is streamed to. At least one of `storage_account_id` or `servicebus_rule_id` must be set.
        """
        __props__['servicebusRuleId'] = servicebus_rule_id

        if storage_account_id and not isinstance(storage_account_id, basestring):
            raise TypeError('Expected property storage_account_id to be a basestring')
        __self__.storage_account_id = storage_account_id
        """
        The resource ID of the storage account in which the Activity Log is stored. At least one of `storage_account_id` or `servicebus_rule_id` must be set.
        """
        __props__['storageAccountId'] = storage_account_id

        super(LogProfile, __self__).__init__(
            'azure:monitoring/logProfile:LogProfile',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'categories' in outs:
            self.categories = outs['categories']
        if 'locations' in outs:
            self.locations = outs['locations']
        if 'name' in outs:
            self.name = outs['name']
        if 'retentionPolicy' in outs:
            self.retention_policy = outs['retentionPolicy']
        if 'servicebusRuleId' in outs:
            self.servicebus_rule_id = outs['servicebusRuleId']
        if 'storageAccountId' in outs:
            self.storage_account_id = outs['storageAccountId']
