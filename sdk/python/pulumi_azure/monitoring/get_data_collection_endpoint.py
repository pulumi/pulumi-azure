# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetDataCollectionEndpointResult',
    'AwaitableGetDataCollectionEndpointResult',
    'get_data_collection_endpoint',
    'get_data_collection_endpoint_output',
]

@pulumi.output_type
class GetDataCollectionEndpointResult:
    """
    A collection of values returned by getDataCollectionEndpoint.
    """
    def __init__(__self__, configuration_access_endpoint=None, description=None, id=None, kind=None, location=None, logs_ingestion_endpoint=None, name=None, public_network_access_enabled=None, resource_group_name=None, tags=None):
        if configuration_access_endpoint and not isinstance(configuration_access_endpoint, str):
            raise TypeError("Expected argument 'configuration_access_endpoint' to be a str")
        pulumi.set(__self__, "configuration_access_endpoint", configuration_access_endpoint)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        pulumi.set(__self__, "kind", kind)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if logs_ingestion_endpoint and not isinstance(logs_ingestion_endpoint, str):
            raise TypeError("Expected argument 'logs_ingestion_endpoint' to be a str")
        pulumi.set(__self__, "logs_ingestion_endpoint", logs_ingestion_endpoint)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if public_network_access_enabled and not isinstance(public_network_access_enabled, bool):
            raise TypeError("Expected argument 'public_network_access_enabled' to be a bool")
        pulumi.set(__self__, "public_network_access_enabled", public_network_access_enabled)
        if resource_group_name and not isinstance(resource_group_name, str):
            raise TypeError("Expected argument 'resource_group_name' to be a str")
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="configurationAccessEndpoint")
    def configuration_access_endpoint(self) -> str:
        """
        The endpoint used for accessing configuration, e.g., `https://mydce-abcd.eastus-1.control.monitor.azure.com`.
        """
        return pulumi.get(self, "configuration_access_endpoint")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Specifies a description for the Data Collection Endpoint.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        The kind of the Data Collection Endpoint. Possible values are `Linux` and `Windows`.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The Azure Region where the Data Collection Endpoint should exist.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="logsIngestionEndpoint")
    def logs_ingestion_endpoint(self) -> str:
        """
        The endpoint used for ingesting logs, e.g., `https://mydce-abcd.eastus-1.ingest.monitor.azure.com`.
        """
        return pulumi.get(self, "logs_ingestion_endpoint")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="publicNetworkAccessEnabled")
    def public_network_access_enabled(self) -> bool:
        """
        Whether network access from public internet to the Data Collection Endpoint are allowed. Possible values are `true` and `false`.
        """
        return pulumi.get(self, "public_network_access_enabled")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> str:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, str]:
        """
        A mapping of tags which should be assigned to the Data Collection Endpoint.
        """
        return pulumi.get(self, "tags")


class AwaitableGetDataCollectionEndpointResult(GetDataCollectionEndpointResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataCollectionEndpointResult(
            configuration_access_endpoint=self.configuration_access_endpoint,
            description=self.description,
            id=self.id,
            kind=self.kind,
            location=self.location,
            logs_ingestion_endpoint=self.logs_ingestion_endpoint,
            name=self.name,
            public_network_access_enabled=self.public_network_access_enabled,
            resource_group_name=self.resource_group_name,
            tags=self.tags)


def get_data_collection_endpoint(name: Optional[str] = None,
                                 resource_group_name: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataCollectionEndpointResult:
    """
    Use this data source to access information about an existing Data Collection Endpoint.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_azure as azure

    example = azure.monitoring.get_data_collection_endpoint(name="example-mdce",
        resource_group_name=azurerm_resource_group["example"]["name"])
    pulumi.export("endpointId", example.id)
    ```


    :param str name: Specifies the name of the Data Collection Endpoint.
    :param str resource_group_name: Specifies the name of the resource group the Data Collection Endpoint is located in.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure:monitoring/getDataCollectionEndpoint:getDataCollectionEndpoint', __args__, opts=opts, typ=GetDataCollectionEndpointResult).value

    return AwaitableGetDataCollectionEndpointResult(
        configuration_access_endpoint=pulumi.get(__ret__, 'configuration_access_endpoint'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        kind=pulumi.get(__ret__, 'kind'),
        location=pulumi.get(__ret__, 'location'),
        logs_ingestion_endpoint=pulumi.get(__ret__, 'logs_ingestion_endpoint'),
        name=pulumi.get(__ret__, 'name'),
        public_network_access_enabled=pulumi.get(__ret__, 'public_network_access_enabled'),
        resource_group_name=pulumi.get(__ret__, 'resource_group_name'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_data_collection_endpoint)
def get_data_collection_endpoint_output(name: Optional[pulumi.Input[str]] = None,
                                        resource_group_name: Optional[pulumi.Input[str]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDataCollectionEndpointResult]:
    """
    Use this data source to access information about an existing Data Collection Endpoint.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_azure as azure

    example = azure.monitoring.get_data_collection_endpoint(name="example-mdce",
        resource_group_name=azurerm_resource_group["example"]["name"])
    pulumi.export("endpointId", example.id)
    ```


    :param str name: Specifies the name of the Data Collection Endpoint.
    :param str resource_group_name: Specifies the name of the resource group the Data Collection Endpoint is located in.
    """
    ...
