# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AadDiagnosticSettingEnabledLog',
    'AadDiagnosticSettingEnabledLogRetentionPolicy',
    'AadDiagnosticSettingLog',
    'AadDiagnosticSettingLogRetentionPolicy',
    'ActionGroupArmRoleReceiver',
    'ActionGroupAutomationRunbookReceiver',
    'ActionGroupAzureAppPushReceiver',
    'ActionGroupAzureFunctionReceiver',
    'ActionGroupEmailReceiver',
    'ActionGroupEventHubReceiver',
    'ActionGroupItsmReceiver',
    'ActionGroupLogicAppReceiver',
    'ActionGroupSmsReceiver',
    'ActionGroupVoiceReceiver',
    'ActionGroupWebhookReceiver',
    'ActionGroupWebhookReceiverAadAuth',
    'ActionRuleActionGroupCondition',
    'ActionRuleActionGroupConditionAlertContext',
    'ActionRuleActionGroupConditionAlertRuleId',
    'ActionRuleActionGroupConditionDescription',
    'ActionRuleActionGroupConditionMonitor',
    'ActionRuleActionGroupConditionMonitorService',
    'ActionRuleActionGroupConditionSeverity',
    'ActionRuleActionGroupConditionTargetResourceType',
    'ActionRuleActionGroupScope',
    'ActionRuleSuppressionCondition',
    'ActionRuleSuppressionConditionAlertContext',
    'ActionRuleSuppressionConditionAlertRuleId',
    'ActionRuleSuppressionConditionDescription',
    'ActionRuleSuppressionConditionMonitor',
    'ActionRuleSuppressionConditionMonitorService',
    'ActionRuleSuppressionConditionSeverity',
    'ActionRuleSuppressionConditionTargetResourceType',
    'ActionRuleSuppressionScope',
    'ActionRuleSuppressionSuppression',
    'ActionRuleSuppressionSuppressionSchedule',
    'ActivityLogAlertAction',
    'ActivityLogAlertCriteria',
    'ActivityLogAlertCriteriaResourceHealth',
    'ActivityLogAlertCriteriaServiceHealth',
    'AlertProcessingRuleActionGroupCondition',
    'AlertProcessingRuleActionGroupConditionAlertContext',
    'AlertProcessingRuleActionGroupConditionAlertRuleId',
    'AlertProcessingRuleActionGroupConditionAlertRuleName',
    'AlertProcessingRuleActionGroupConditionDescription',
    'AlertProcessingRuleActionGroupConditionMonitorCondition',
    'AlertProcessingRuleActionGroupConditionMonitorService',
    'AlertProcessingRuleActionGroupConditionSeverity',
    'AlertProcessingRuleActionGroupConditionSignalType',
    'AlertProcessingRuleActionGroupConditionTargetResource',
    'AlertProcessingRuleActionGroupConditionTargetResourceGroup',
    'AlertProcessingRuleActionGroupConditionTargetResourceType',
    'AlertProcessingRuleActionGroupSchedule',
    'AlertProcessingRuleActionGroupScheduleRecurrence',
    'AlertProcessingRuleActionGroupScheduleRecurrenceDaily',
    'AlertProcessingRuleActionGroupScheduleRecurrenceMonthly',
    'AlertProcessingRuleActionGroupScheduleRecurrenceWeekly',
    'AlertProcessingRuleSuppressionCondition',
    'AlertProcessingRuleSuppressionConditionAlertContext',
    'AlertProcessingRuleSuppressionConditionAlertRuleId',
    'AlertProcessingRuleSuppressionConditionAlertRuleName',
    'AlertProcessingRuleSuppressionConditionDescription',
    'AlertProcessingRuleSuppressionConditionMonitorCondition',
    'AlertProcessingRuleSuppressionConditionMonitorService',
    'AlertProcessingRuleSuppressionConditionSeverity',
    'AlertProcessingRuleSuppressionConditionSignalType',
    'AlertProcessingRuleSuppressionConditionTargetResource',
    'AlertProcessingRuleSuppressionConditionTargetResourceGroup',
    'AlertProcessingRuleSuppressionConditionTargetResourceType',
    'AlertProcessingRuleSuppressionSchedule',
    'AlertProcessingRuleSuppressionScheduleRecurrence',
    'AlertProcessingRuleSuppressionScheduleRecurrenceDaily',
    'AlertProcessingRuleSuppressionScheduleRecurrenceMonthly',
    'AlertProcessingRuleSuppressionScheduleRecurrenceWeekly',
    'AlertPrometheusRuleGroupRule',
    'AlertPrometheusRuleGroupRuleAction',
    'AlertPrometheusRuleGroupRuleAlertResolution',
    'AutoscaleSettingNotification',
    'AutoscaleSettingNotificationEmail',
    'AutoscaleSettingNotificationWebhook',
    'AutoscaleSettingPredictive',
    'AutoscaleSettingProfile',
    'AutoscaleSettingProfileCapacity',
    'AutoscaleSettingProfileFixedDate',
    'AutoscaleSettingProfileRecurrence',
    'AutoscaleSettingProfileRule',
    'AutoscaleSettingProfileRuleMetricTrigger',
    'AutoscaleSettingProfileRuleMetricTriggerDimension',
    'AutoscaleSettingProfileRuleScaleAction',
    'DataCollectionRuleDataFlow',
    'DataCollectionRuleDataSources',
    'DataCollectionRuleDataSourcesDataImport',
    'DataCollectionRuleDataSourcesDataImportEventHubDataSource',
    'DataCollectionRuleDataSourcesExtension',
    'DataCollectionRuleDataSourcesIisLog',
    'DataCollectionRuleDataSourcesLogFile',
    'DataCollectionRuleDataSourcesLogFileSettings',
    'DataCollectionRuleDataSourcesLogFileSettingsText',
    'DataCollectionRuleDataSourcesPerformanceCounter',
    'DataCollectionRuleDataSourcesPlatformTelemetry',
    'DataCollectionRuleDataSourcesPrometheusForwarder',
    'DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilter',
    'DataCollectionRuleDataSourcesSyslog',
    'DataCollectionRuleDataSourcesWindowsEventLog',
    'DataCollectionRuleDataSourcesWindowsFirewallLog',
    'DataCollectionRuleDestinations',
    'DataCollectionRuleDestinationsAzureMonitorMetrics',
    'DataCollectionRuleDestinationsEventHub',
    'DataCollectionRuleDestinationsEventHubDirect',
    'DataCollectionRuleDestinationsLogAnalytic',
    'DataCollectionRuleDestinationsMonitorAccount',
    'DataCollectionRuleDestinationsStorageBlob',
    'DataCollectionRuleDestinationsStorageBlobDirect',
    'DataCollectionRuleDestinationsStorageTableDirect',
    'DataCollectionRuleIdentity',
    'DataCollectionRuleStreamDeclaration',
    'DataCollectionRuleStreamDeclarationColumn',
    'DiagnosticSettingEnabledLog',
    'DiagnosticSettingEnabledLogRetentionPolicy',
    'DiagnosticSettingLog',
    'DiagnosticSettingLogRetentionPolicy',
    'DiagnosticSettingMetric',
    'DiagnosticSettingMetricRetentionPolicy',
    'LogProfileRetentionPolicy',
    'LogzMonitorPlan',
    'LogzMonitorUser',
    'LogzSubAccountTagRuleTagFilter',
    'LogzSubAccountUser',
    'LogzTagRuleTagFilter',
    'MetricAlertAction',
    'MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria',
    'MetricAlertCriteria',
    'MetricAlertCriteriaDimension',
    'MetricAlertDynamicCriteria',
    'MetricAlertDynamicCriteriaDimension',
    'ScheduledQueryRulesAlertAction',
    'ScheduledQueryRulesAlertTrigger',
    'ScheduledQueryRulesAlertTriggerMetricTrigger',
    'ScheduledQueryRulesAlertV2Action',
    'ScheduledQueryRulesAlertV2Criteria',
    'ScheduledQueryRulesAlertV2CriteriaDimension',
    'ScheduledQueryRulesAlertV2CriteriaFailingPeriods',
    'ScheduledQueryRulesLogCriteria',
    'ScheduledQueryRulesLogCriteriaDimension',
    'SmartDetectorAlertRuleActionGroup',
    'GetActionGroupArmRoleReceiverResult',
    'GetActionGroupAutomationRunbookReceiverResult',
    'GetActionGroupAzureAppPushReceiverResult',
    'GetActionGroupAzureFunctionReceiverResult',
    'GetActionGroupEmailReceiverResult',
    'GetActionGroupEventHubReceiverResult',
    'GetActionGroupItsmReceiverResult',
    'GetActionGroupLogicAppReceiverResult',
    'GetActionGroupSmsReceiverResult',
    'GetActionGroupVoiceReceiverResult',
    'GetActionGroupWebhookReceiverResult',
    'GetActionGroupWebhookReceiverAadAuthResult',
    'GetDataCollectionRuleDataFlowResult',
    'GetDataCollectionRuleDataSourceResult',
    'GetDataCollectionRuleDataSourceDataImportResult',
    'GetDataCollectionRuleDataSourceDataImportEventHubDataSourceResult',
    'GetDataCollectionRuleDataSourceExtensionResult',
    'GetDataCollectionRuleDataSourceIisLogResult',
    'GetDataCollectionRuleDataSourceLogFileResult',
    'GetDataCollectionRuleDataSourceLogFileSettingResult',
    'GetDataCollectionRuleDataSourceLogFileSettingTextResult',
    'GetDataCollectionRuleDataSourcePerformanceCounterResult',
    'GetDataCollectionRuleDataSourcePlatformTelemetryResult',
    'GetDataCollectionRuleDataSourcePrometheusForwarderResult',
    'GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterResult',
    'GetDataCollectionRuleDataSourceSyslogResult',
    'GetDataCollectionRuleDataSourceWindowsEventLogResult',
    'GetDataCollectionRuleDataSourceWindowsFirewallLogResult',
    'GetDataCollectionRuleDestinationResult',
    'GetDataCollectionRuleDestinationAzureMonitorMetricResult',
    'GetDataCollectionRuleDestinationEventHubResult',
    'GetDataCollectionRuleDestinationEventHubDirectResult',
    'GetDataCollectionRuleDestinationLogAnalyticResult',
    'GetDataCollectionRuleDestinationMonitorAccountResult',
    'GetDataCollectionRuleDestinationStorageBlobResult',
    'GetDataCollectionRuleDestinationStorageBlobDirectResult',
    'GetDataCollectionRuleDestinationStorageTableDirectResult',
    'GetDataCollectionRuleIdentityResult',
    'GetDataCollectionRuleStreamDeclarationResult',
    'GetDataCollectionRuleStreamDeclarationColumnResult',
    'GetLogProfileRetentionPolicyResult',
    'GetScheduledQueryRulesAlertActionResult',
    'GetScheduledQueryRulesAlertTriggerResult',
    'GetScheduledQueryRulesAlertTriggerMetricTriggerResult',
    'GetScheduledQueryRulesLogCriteriaResult',
    'GetScheduledQueryRulesLogCriteriaDimensionResult',
]

@pulumi.output_type
class AadDiagnosticSettingEnabledLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "retentionPolicy":
            suggest = "retention_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AadDiagnosticSettingEnabledLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AadDiagnosticSettingEnabledLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AadDiagnosticSettingEnabledLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: str,
                 retention_policy: 'outputs.AadDiagnosticSettingEnabledLogRetentionPolicy'):
        """
        :param str category: The log category for the Azure Active Directory Diagnostic.
        :param 'AadDiagnosticSettingEnabledLogRetentionPolicyArgs' retention_policy: A `retention_policy` block as defined below.
        """
        AadDiagnosticSettingEnabledLog._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            retention_policy=retention_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: str,
             retention_policy: 'outputs.AadDiagnosticSettingEnabledLogRetentionPolicy',
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("category", category)
        _setter("retention_policy", retention_policy)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        The log category for the Azure Active Directory Diagnostic.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> 'outputs.AadDiagnosticSettingEnabledLogRetentionPolicy':
        """
        A `retention_policy` block as defined below.
        """
        return pulumi.get(self, "retention_policy")


@pulumi.output_type
class AadDiagnosticSettingEnabledLogRetentionPolicy(dict):
    def __init__(__self__, *,
                 days: Optional[int] = None,
                 enabled: Optional[bool] = None):
        """
        :param int days: The number of days for which this Retention Policy should apply. Defaults to `0`.
        :param bool enabled: Is this Retention Policy enabled? Defaults to `false`.
        """
        AadDiagnosticSettingEnabledLogRetentionPolicy._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            days=days,
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             days: Optional[int] = None,
             enabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if days is not None:
            _setter("days", days)
        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter
    def days(self) -> Optional[int]:
        """
        The number of days for which this Retention Policy should apply. Defaults to `0`.
        """
        return pulumi.get(self, "days")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Is this Retention Policy enabled? Defaults to `false`.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class AadDiagnosticSettingLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "retentionPolicy":
            suggest = "retention_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AadDiagnosticSettingLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AadDiagnosticSettingLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AadDiagnosticSettingLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: str,
                 retention_policy: 'outputs.AadDiagnosticSettingLogRetentionPolicy',
                 enabled: Optional[bool] = None):
        """
        :param str category: The log category for the Azure Active Directory Diagnostic.
        :param 'AadDiagnosticSettingLogRetentionPolicyArgs' retention_policy: A `retention_policy` block as defined below.
        :param bool enabled: Is this Diagnostic Log enabled? Defaults to `true`.
        """
        AadDiagnosticSettingLog._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            retention_policy=retention_policy,
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: str,
             retention_policy: 'outputs.AadDiagnosticSettingLogRetentionPolicy',
             enabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("category", category)
        _setter("retention_policy", retention_policy)
        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        The log category for the Azure Active Directory Diagnostic.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> 'outputs.AadDiagnosticSettingLogRetentionPolicy':
        """
        A `retention_policy` block as defined below.
        """
        return pulumi.get(self, "retention_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Is this Diagnostic Log enabled? Defaults to `true`.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class AadDiagnosticSettingLogRetentionPolicy(dict):
    def __init__(__self__, *,
                 days: Optional[int] = None,
                 enabled: Optional[bool] = None):
        """
        :param int days: The number of days for which this Retention Policy should apply. Defaults to `0`.
        :param bool enabled: Is this Retention Policy enabled? Defaults to `false`.
        """
        AadDiagnosticSettingLogRetentionPolicy._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            days=days,
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             days: Optional[int] = None,
             enabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if days is not None:
            _setter("days", days)
        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter
    def days(self) -> Optional[int]:
        """
        The number of days for which this Retention Policy should apply. Defaults to `0`.
        """
        return pulumi.get(self, "days")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Is this Retention Policy enabled? Defaults to `false`.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ActionGroupArmRoleReceiver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleId":
            suggest = "role_id"
        elif key == "useCommonAlertSchema":
            suggest = "use_common_alert_schema"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionGroupArmRoleReceiver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionGroupArmRoleReceiver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionGroupArmRoleReceiver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 role_id: str,
                 use_common_alert_schema: Optional[bool] = None):
        """
        :param str name: The name of the ARM role receiver.
        :param str role_id: The arm role id.
        :param bool use_common_alert_schema: Enables or disables the common alert schema.
        """
        ActionGroupArmRoleReceiver._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            role_id=role_id,
            use_common_alert_schema=use_common_alert_schema,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             role_id: str,
             use_common_alert_schema: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("role_id", role_id)
        if use_common_alert_schema is not None:
            _setter("use_common_alert_schema", use_common_alert_schema)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the ARM role receiver.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> str:
        """
        The arm role id.
        """
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="useCommonAlertSchema")
    def use_common_alert_schema(self) -> Optional[bool]:
        """
        Enables or disables the common alert schema.
        """
        return pulumi.get(self, "use_common_alert_schema")


@pulumi.output_type
class ActionGroupAutomationRunbookReceiver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "automationAccountId":
            suggest = "automation_account_id"
        elif key == "isGlobalRunbook":
            suggest = "is_global_runbook"
        elif key == "runbookName":
            suggest = "runbook_name"
        elif key == "serviceUri":
            suggest = "service_uri"
        elif key == "webhookResourceId":
            suggest = "webhook_resource_id"
        elif key == "useCommonAlertSchema":
            suggest = "use_common_alert_schema"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionGroupAutomationRunbookReceiver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionGroupAutomationRunbookReceiver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionGroupAutomationRunbookReceiver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automation_account_id: str,
                 is_global_runbook: bool,
                 name: str,
                 runbook_name: str,
                 service_uri: str,
                 webhook_resource_id: str,
                 use_common_alert_schema: Optional[bool] = None):
        """
        :param str automation_account_id: The automation account ID which holds this runbook and authenticates to Azure resources.
        :param bool is_global_runbook: Indicates whether this instance is global runbook.
        :param str name: The name of the automation runbook receiver.
        :param str runbook_name: The name for this runbook.
        :param str service_uri: The URI where webhooks should be sent.
        :param str webhook_resource_id: The resource id for webhook linked to this runbook.
        :param bool use_common_alert_schema: Enables or disables the common alert schema.
        """
        ActionGroupAutomationRunbookReceiver._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            automation_account_id=automation_account_id,
            is_global_runbook=is_global_runbook,
            name=name,
            runbook_name=runbook_name,
            service_uri=service_uri,
            webhook_resource_id=webhook_resource_id,
            use_common_alert_schema=use_common_alert_schema,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             automation_account_id: str,
             is_global_runbook: bool,
             name: str,
             runbook_name: str,
             service_uri: str,
             webhook_resource_id: str,
             use_common_alert_schema: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("automation_account_id", automation_account_id)
        _setter("is_global_runbook", is_global_runbook)
        _setter("name", name)
        _setter("runbook_name", runbook_name)
        _setter("service_uri", service_uri)
        _setter("webhook_resource_id", webhook_resource_id)
        if use_common_alert_schema is not None:
            _setter("use_common_alert_schema", use_common_alert_schema)

    @property
    @pulumi.getter(name="automationAccountId")
    def automation_account_id(self) -> str:
        """
        The automation account ID which holds this runbook and authenticates to Azure resources.
        """
        return pulumi.get(self, "automation_account_id")

    @property
    @pulumi.getter(name="isGlobalRunbook")
    def is_global_runbook(self) -> bool:
        """
        Indicates whether this instance is global runbook.
        """
        return pulumi.get(self, "is_global_runbook")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the automation runbook receiver.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="runbookName")
    def runbook_name(self) -> str:
        """
        The name for this runbook.
        """
        return pulumi.get(self, "runbook_name")

    @property
    @pulumi.getter(name="serviceUri")
    def service_uri(self) -> str:
        """
        The URI where webhooks should be sent.
        """
        return pulumi.get(self, "service_uri")

    @property
    @pulumi.getter(name="webhookResourceId")
    def webhook_resource_id(self) -> str:
        """
        The resource id for webhook linked to this runbook.
        """
        return pulumi.get(self, "webhook_resource_id")

    @property
    @pulumi.getter(name="useCommonAlertSchema")
    def use_common_alert_schema(self) -> Optional[bool]:
        """
        Enables or disables the common alert schema.
        """
        return pulumi.get(self, "use_common_alert_schema")


@pulumi.output_type
class ActionGroupAzureAppPushReceiver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "emailAddress":
            suggest = "email_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionGroupAzureAppPushReceiver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionGroupAzureAppPushReceiver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionGroupAzureAppPushReceiver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email_address: str,
                 name: str):
        """
        :param str email_address: The email address of the user signed into the mobile app who will receive push notifications from this receiver.
        :param str name: The name of the Azure app push receiver.
        """
        ActionGroupAzureAppPushReceiver._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            email_address=email_address,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             email_address: str,
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("email_address", email_address)
        _setter("name", name)

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> str:
        """
        The email address of the user signed into the mobile app who will receive push notifications from this receiver.
        """
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Azure app push receiver.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ActionGroupAzureFunctionReceiver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "functionAppResourceId":
            suggest = "function_app_resource_id"
        elif key == "functionName":
            suggest = "function_name"
        elif key == "httpTriggerUrl":
            suggest = "http_trigger_url"
        elif key == "useCommonAlertSchema":
            suggest = "use_common_alert_schema"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionGroupAzureFunctionReceiver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionGroupAzureFunctionReceiver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionGroupAzureFunctionReceiver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 function_app_resource_id: str,
                 function_name: str,
                 http_trigger_url: str,
                 name: str,
                 use_common_alert_schema: Optional[bool] = None):
        """
        :param str function_app_resource_id: The Azure resource ID of the function app.
        :param str function_name: The function name in the function app.
        :param str http_trigger_url: The HTTP trigger url where HTTP request sent to.
        :param str name: The name of the Azure Function receiver.
        :param bool use_common_alert_schema: Enables or disables the common alert schema.
        """
        ActionGroupAzureFunctionReceiver._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            function_app_resource_id=function_app_resource_id,
            function_name=function_name,
            http_trigger_url=http_trigger_url,
            name=name,
            use_common_alert_schema=use_common_alert_schema,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             function_app_resource_id: str,
             function_name: str,
             http_trigger_url: str,
             name: str,
             use_common_alert_schema: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("function_app_resource_id", function_app_resource_id)
        _setter("function_name", function_name)
        _setter("http_trigger_url", http_trigger_url)
        _setter("name", name)
        if use_common_alert_schema is not None:
            _setter("use_common_alert_schema", use_common_alert_schema)

    @property
    @pulumi.getter(name="functionAppResourceId")
    def function_app_resource_id(self) -> str:
        """
        The Azure resource ID of the function app.
        """
        return pulumi.get(self, "function_app_resource_id")

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> str:
        """
        The function name in the function app.
        """
        return pulumi.get(self, "function_name")

    @property
    @pulumi.getter(name="httpTriggerUrl")
    def http_trigger_url(self) -> str:
        """
        The HTTP trigger url where HTTP request sent to.
        """
        return pulumi.get(self, "http_trigger_url")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Azure Function receiver.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="useCommonAlertSchema")
    def use_common_alert_schema(self) -> Optional[bool]:
        """
        Enables or disables the common alert schema.
        """
        return pulumi.get(self, "use_common_alert_schema")


@pulumi.output_type
class ActionGroupEmailReceiver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "emailAddress":
            suggest = "email_address"
        elif key == "useCommonAlertSchema":
            suggest = "use_common_alert_schema"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionGroupEmailReceiver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionGroupEmailReceiver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionGroupEmailReceiver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email_address: str,
                 name: str,
                 use_common_alert_schema: Optional[bool] = None):
        """
        :param str email_address: The email address of this receiver.
        :param str name: The name of the email receiver. Names must be unique (case-insensitive) across all receivers within an action group.
        :param bool use_common_alert_schema: Enables or disables the common alert schema.
        """
        ActionGroupEmailReceiver._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            email_address=email_address,
            name=name,
            use_common_alert_schema=use_common_alert_schema,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             email_address: str,
             name: str,
             use_common_alert_schema: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("email_address", email_address)
        _setter("name", name)
        if use_common_alert_schema is not None:
            _setter("use_common_alert_schema", use_common_alert_schema)

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> str:
        """
        The email address of this receiver.
        """
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the email receiver. Names must be unique (case-insensitive) across all receivers within an action group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="useCommonAlertSchema")
    def use_common_alert_schema(self) -> Optional[bool]:
        """
        Enables or disables the common alert schema.
        """
        return pulumi.get(self, "use_common_alert_schema")


@pulumi.output_type
class ActionGroupEventHubReceiver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventHubId":
            suggest = "event_hub_id"
        elif key == "eventHubName":
            suggest = "event_hub_name"
        elif key == "eventHubNamespace":
            suggest = "event_hub_namespace"
        elif key == "subscriptionId":
            suggest = "subscription_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "useCommonAlertSchema":
            suggest = "use_common_alert_schema"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionGroupEventHubReceiver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionGroupEventHubReceiver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionGroupEventHubReceiver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 event_hub_id: Optional[str] = None,
                 event_hub_name: Optional[str] = None,
                 event_hub_namespace: Optional[str] = None,
                 subscription_id: Optional[str] = None,
                 tenant_id: Optional[str] = None,
                 use_common_alert_schema: Optional[bool] = None):
        """
        :param str name: The name of the EventHub Receiver, must be unique within action group.
        :param str event_hub_id: The resource ID of the respective Event Hub.
        :param str event_hub_name: The name of the specific Event Hub queue.
        :param str event_hub_namespace: The namespace name of the Event Hub.
        :param str subscription_id: The ID for the subscription containing this Event Hub. Default to the subscription ID of the Action Group.
               
               > **NOTE:** `event_hub_id` is deprecated in version 3.0 and will be removed in version 4.0 of the AzureRM Provider. Please use `event_hub_name`, `event_hub_name`,and `subscription_id` instead. And `event_hub_name`, `event_hub_name` will be required properties in version 4.0.
        :param str tenant_id: The Tenant ID for the subscription containing this Event Hub.
        :param bool use_common_alert_schema: Indicates whether to use common alert schema.
        """
        ActionGroupEventHubReceiver._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            event_hub_id=event_hub_id,
            event_hub_name=event_hub_name,
            event_hub_namespace=event_hub_namespace,
            subscription_id=subscription_id,
            tenant_id=tenant_id,
            use_common_alert_schema=use_common_alert_schema,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             event_hub_id: Optional[str] = None,
             event_hub_name: Optional[str] = None,
             event_hub_namespace: Optional[str] = None,
             subscription_id: Optional[str] = None,
             tenant_id: Optional[str] = None,
             use_common_alert_schema: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if event_hub_id is not None:
            _setter("event_hub_id", event_hub_id)
        if event_hub_name is not None:
            _setter("event_hub_name", event_hub_name)
        if event_hub_namespace is not None:
            _setter("event_hub_namespace", event_hub_namespace)
        if subscription_id is not None:
            _setter("subscription_id", subscription_id)
        if tenant_id is not None:
            _setter("tenant_id", tenant_id)
        if use_common_alert_schema is not None:
            _setter("use_common_alert_schema", use_common_alert_schema)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the EventHub Receiver, must be unique within action group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="eventHubId")
    def event_hub_id(self) -> Optional[str]:
        """
        The resource ID of the respective Event Hub.
        """
        warnings.warn("""This property is deprecated and will be removed in version 4.0 of the provider, please use 'event_hub_name' and 'event_hub_namespace' instead.""", DeprecationWarning)
        pulumi.log.warn("""event_hub_id is deprecated: This property is deprecated and will be removed in version 4.0 of the provider, please use 'event_hub_name' and 'event_hub_namespace' instead.""")

        return pulumi.get(self, "event_hub_id")

    @property
    @pulumi.getter(name="eventHubName")
    def event_hub_name(self) -> Optional[str]:
        """
        The name of the specific Event Hub queue.
        """
        return pulumi.get(self, "event_hub_name")

    @property
    @pulumi.getter(name="eventHubNamespace")
    def event_hub_namespace(self) -> Optional[str]:
        """
        The namespace name of the Event Hub.
        """
        return pulumi.get(self, "event_hub_namespace")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[str]:
        """
        The ID for the subscription containing this Event Hub. Default to the subscription ID of the Action Group.

        > **NOTE:** `event_hub_id` is deprecated in version 3.0 and will be removed in version 4.0 of the AzureRM Provider. Please use `event_hub_name`, `event_hub_name`,and `subscription_id` instead. And `event_hub_name`, `event_hub_name` will be required properties in version 4.0.
        """
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        """
        The Tenant ID for the subscription containing this Event Hub.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="useCommonAlertSchema")
    def use_common_alert_schema(self) -> Optional[bool]:
        """
        Indicates whether to use common alert schema.
        """
        return pulumi.get(self, "use_common_alert_schema")


@pulumi.output_type
class ActionGroupItsmReceiver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionId":
            suggest = "connection_id"
        elif key == "ticketConfiguration":
            suggest = "ticket_configuration"
        elif key == "workspaceId":
            suggest = "workspace_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionGroupItsmReceiver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionGroupItsmReceiver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionGroupItsmReceiver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_id: str,
                 name: str,
                 region: str,
                 ticket_configuration: str,
                 workspace_id: str):
        """
        :param str connection_id: The unique connection identifier of the ITSM connection.
        :param str name: The name of the ITSM receiver.
        :param str region: The region of the workspace.
               
               > **NOTE** `ticket_configuration` should be JSON blob with `PayloadRevision` and `WorkItemType` keys (e.g., `ticket_configuration="{\\"PayloadRevision\\":0,\\"WorkItemType\\":\\"Incident\\"}"`), and `ticket_configuration="{}"` will return an error, see more at this [REST API issue](https://github.com/Azure/azure-rest-api-specs/issues/20488)
        :param str ticket_configuration: A JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
        :param str workspace_id: The Azure Log Analytics workspace ID where this connection is defined. Format is `<subscription id>|<workspace id>`, for example `00000000-0000-0000-0000-000000000000|00000000-0000-0000-0000-000000000000`.
        """
        ActionGroupItsmReceiver._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            connection_id=connection_id,
            name=name,
            region=region,
            ticket_configuration=ticket_configuration,
            workspace_id=workspace_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             connection_id: str,
             name: str,
             region: str,
             ticket_configuration: str,
             workspace_id: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("connection_id", connection_id)
        _setter("name", name)
        _setter("region", region)
        _setter("ticket_configuration", ticket_configuration)
        _setter("workspace_id", workspace_id)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> str:
        """
        The unique connection identifier of the ITSM connection.
        """
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the ITSM receiver.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the workspace.

        > **NOTE** `ticket_configuration` should be JSON blob with `PayloadRevision` and `WorkItemType` keys (e.g., `ticket_configuration="{\\"PayloadRevision\\":0,\\"WorkItemType\\":\\"Incident\\"}"`), and `ticket_configuration="{}"` will return an error, see more at this [REST API issue](https://github.com/Azure/azure-rest-api-specs/issues/20488)
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="ticketConfiguration")
    def ticket_configuration(self) -> str:
        """
        A JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
        """
        return pulumi.get(self, "ticket_configuration")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        The Azure Log Analytics workspace ID where this connection is defined. Format is `<subscription id>|<workspace id>`, for example `00000000-0000-0000-0000-000000000000|00000000-0000-0000-0000-000000000000`.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class ActionGroupLogicAppReceiver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "callbackUrl":
            suggest = "callback_url"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "useCommonAlertSchema":
            suggest = "use_common_alert_schema"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionGroupLogicAppReceiver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionGroupLogicAppReceiver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionGroupLogicAppReceiver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 callback_url: str,
                 name: str,
                 resource_id: str,
                 use_common_alert_schema: Optional[bool] = None):
        """
        :param str callback_url: The callback url where HTTP request sent to.
        :param str name: The name of the logic app receiver.
        :param str resource_id: The Azure resource ID of the logic app.
        :param bool use_common_alert_schema: Enables or disables the common alert schema.
        """
        ActionGroupLogicAppReceiver._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            callback_url=callback_url,
            name=name,
            resource_id=resource_id,
            use_common_alert_schema=use_common_alert_schema,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             callback_url: str,
             name: str,
             resource_id: str,
             use_common_alert_schema: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("callback_url", callback_url)
        _setter("name", name)
        _setter("resource_id", resource_id)
        if use_common_alert_schema is not None:
            _setter("use_common_alert_schema", use_common_alert_schema)

    @property
    @pulumi.getter(name="callbackUrl")
    def callback_url(self) -> str:
        """
        The callback url where HTTP request sent to.
        """
        return pulumi.get(self, "callback_url")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the logic app receiver.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        """
        The Azure resource ID of the logic app.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="useCommonAlertSchema")
    def use_common_alert_schema(self) -> Optional[bool]:
        """
        Enables or disables the common alert schema.
        """
        return pulumi.get(self, "use_common_alert_schema")


@pulumi.output_type
class ActionGroupSmsReceiver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "countryCode":
            suggest = "country_code"
        elif key == "phoneNumber":
            suggest = "phone_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionGroupSmsReceiver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionGroupSmsReceiver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionGroupSmsReceiver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 country_code: str,
                 name: str,
                 phone_number: str):
        """
        :param str country_code: The country code of the SMS receiver.
        :param str name: The name of the SMS receiver. Names must be unique (case-insensitive) across all receivers within an action group.
        :param str phone_number: The phone number of the SMS receiver.
        """
        ActionGroupSmsReceiver._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            country_code=country_code,
            name=name,
            phone_number=phone_number,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             country_code: str,
             name: str,
             phone_number: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("country_code", country_code)
        _setter("name", name)
        _setter("phone_number", phone_number)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        """
        The country code of the SMS receiver.
        """
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the SMS receiver. Names must be unique (case-insensitive) across all receivers within an action group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> str:
        """
        The phone number of the SMS receiver.
        """
        return pulumi.get(self, "phone_number")


@pulumi.output_type
class ActionGroupVoiceReceiver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "countryCode":
            suggest = "country_code"
        elif key == "phoneNumber":
            suggest = "phone_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionGroupVoiceReceiver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionGroupVoiceReceiver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionGroupVoiceReceiver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 country_code: str,
                 name: str,
                 phone_number: str):
        """
        :param str country_code: The country code of the voice receiver.
        :param str name: The name of the voice receiver.
        :param str phone_number: The phone number of the voice receiver.
        """
        ActionGroupVoiceReceiver._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            country_code=country_code,
            name=name,
            phone_number=phone_number,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             country_code: str,
             name: str,
             phone_number: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("country_code", country_code)
        _setter("name", name)
        _setter("phone_number", phone_number)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        """
        The country code of the voice receiver.
        """
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the voice receiver.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> str:
        """
        The phone number of the voice receiver.
        """
        return pulumi.get(self, "phone_number")


@pulumi.output_type
class ActionGroupWebhookReceiver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceUri":
            suggest = "service_uri"
        elif key == "aadAuth":
            suggest = "aad_auth"
        elif key == "useCommonAlertSchema":
            suggest = "use_common_alert_schema"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionGroupWebhookReceiver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionGroupWebhookReceiver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionGroupWebhookReceiver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 service_uri: str,
                 aad_auth: Optional['outputs.ActionGroupWebhookReceiverAadAuth'] = None,
                 use_common_alert_schema: Optional[bool] = None):
        """
        :param str name: The name of the webhook receiver. Names must be unique (case-insensitive) across all receivers within an action group.
        :param str service_uri: The URI where webhooks should be sent.
        :param 'ActionGroupWebhookReceiverAadAuthArgs' aad_auth: The `aad_auth` block as defined below
               
               > **NOTE:** Before adding a secure webhook receiver by setting `aad_auth`, please read [the configuration instruction of the AAD application](https://docs.microsoft.com/azure/azure-monitor/platform/action-groups#secure-webhook).
        :param bool use_common_alert_schema: Enables or disables the common alert schema.
        """
        ActionGroupWebhookReceiver._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            service_uri=service_uri,
            aad_auth=aad_auth,
            use_common_alert_schema=use_common_alert_schema,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             service_uri: str,
             aad_auth: Optional['outputs.ActionGroupWebhookReceiverAadAuth'] = None,
             use_common_alert_schema: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("service_uri", service_uri)
        if aad_auth is not None:
            _setter("aad_auth", aad_auth)
        if use_common_alert_schema is not None:
            _setter("use_common_alert_schema", use_common_alert_schema)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the webhook receiver. Names must be unique (case-insensitive) across all receivers within an action group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serviceUri")
    def service_uri(self) -> str:
        """
        The URI where webhooks should be sent.
        """
        return pulumi.get(self, "service_uri")

    @property
    @pulumi.getter(name="aadAuth")
    def aad_auth(self) -> Optional['outputs.ActionGroupWebhookReceiverAadAuth']:
        """
        The `aad_auth` block as defined below

        > **NOTE:** Before adding a secure webhook receiver by setting `aad_auth`, please read [the configuration instruction of the AAD application](https://docs.microsoft.com/azure/azure-monitor/platform/action-groups#secure-webhook).
        """
        return pulumi.get(self, "aad_auth")

    @property
    @pulumi.getter(name="useCommonAlertSchema")
    def use_common_alert_schema(self) -> Optional[bool]:
        """
        Enables or disables the common alert schema.
        """
        return pulumi.get(self, "use_common_alert_schema")


@pulumi.output_type
class ActionGroupWebhookReceiverAadAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectId":
            suggest = "object_id"
        elif key == "identifierUri":
            suggest = "identifier_uri"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionGroupWebhookReceiverAadAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionGroupWebhookReceiverAadAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionGroupWebhookReceiverAadAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_id: str,
                 identifier_uri: Optional[str] = None,
                 tenant_id: Optional[str] = None):
        """
        :param str object_id: The webhook application object Id for AAD auth.
        :param str identifier_uri: The identifier URI for AAD auth.
        :param str tenant_id: The tenant id for AAD auth.
        """
        ActionGroupWebhookReceiverAadAuth._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            object_id=object_id,
            identifier_uri=identifier_uri,
            tenant_id=tenant_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             object_id: str,
             identifier_uri: Optional[str] = None,
             tenant_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("object_id", object_id)
        if identifier_uri is not None:
            _setter("identifier_uri", identifier_uri)
        if tenant_id is not None:
            _setter("tenant_id", tenant_id)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> str:
        """
        The webhook application object Id for AAD auth.
        """
        return pulumi.get(self, "object_id")

    @property
    @pulumi.getter(name="identifierUri")
    def identifier_uri(self) -> Optional[str]:
        """
        The identifier URI for AAD auth.
        """
        return pulumi.get(self, "identifier_uri")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        """
        The tenant id for AAD auth.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class ActionRuleActionGroupCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertContext":
            suggest = "alert_context"
        elif key == "alertRuleId":
            suggest = "alert_rule_id"
        elif key == "monitorService":
            suggest = "monitor_service"
        elif key == "targetResourceType":
            suggest = "target_resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionRuleActionGroupCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionRuleActionGroupCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionRuleActionGroupCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_context: Optional['outputs.ActionRuleActionGroupConditionAlertContext'] = None,
                 alert_rule_id: Optional['outputs.ActionRuleActionGroupConditionAlertRuleId'] = None,
                 description: Optional['outputs.ActionRuleActionGroupConditionDescription'] = None,
                 monitor: Optional['outputs.ActionRuleActionGroupConditionMonitor'] = None,
                 monitor_service: Optional['outputs.ActionRuleActionGroupConditionMonitorService'] = None,
                 severity: Optional['outputs.ActionRuleActionGroupConditionSeverity'] = None,
                 target_resource_type: Optional['outputs.ActionRuleActionGroupConditionTargetResourceType'] = None):
        """
        :param 'ActionRuleActionGroupConditionAlertContextArgs' alert_context: A `alert_context` block as defined below.
        :param 'ActionRuleActionGroupConditionAlertRuleIdArgs' alert_rule_id: A `alert_rule_id` block as defined below.
        :param 'ActionRuleActionGroupConditionDescriptionArgs' description: A `description` block as defined below.
        :param 'ActionRuleActionGroupConditionMonitorArgs' monitor: A `monitor` block as defined below.
        :param 'ActionRuleActionGroupConditionMonitorServiceArgs' monitor_service: A `monitor_service` as block defined below.
        :param 'ActionRuleActionGroupConditionSeverityArgs' severity: A `severity` block as defined below.
        :param 'ActionRuleActionGroupConditionTargetResourceTypeArgs' target_resource_type: A `target_resource_type` block as defined below.
        """
        ActionRuleActionGroupCondition._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alert_context=alert_context,
            alert_rule_id=alert_rule_id,
            description=description,
            monitor=monitor,
            monitor_service=monitor_service,
            severity=severity,
            target_resource_type=target_resource_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alert_context: Optional['outputs.ActionRuleActionGroupConditionAlertContext'] = None,
             alert_rule_id: Optional['outputs.ActionRuleActionGroupConditionAlertRuleId'] = None,
             description: Optional['outputs.ActionRuleActionGroupConditionDescription'] = None,
             monitor: Optional['outputs.ActionRuleActionGroupConditionMonitor'] = None,
             monitor_service: Optional['outputs.ActionRuleActionGroupConditionMonitorService'] = None,
             severity: Optional['outputs.ActionRuleActionGroupConditionSeverity'] = None,
             target_resource_type: Optional['outputs.ActionRuleActionGroupConditionTargetResourceType'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if alert_context is not None:
            _setter("alert_context", alert_context)
        if alert_rule_id is not None:
            _setter("alert_rule_id", alert_rule_id)
        if description is not None:
            _setter("description", description)
        if monitor is not None:
            _setter("monitor", monitor)
        if monitor_service is not None:
            _setter("monitor_service", monitor_service)
        if severity is not None:
            _setter("severity", severity)
        if target_resource_type is not None:
            _setter("target_resource_type", target_resource_type)

    @property
    @pulumi.getter(name="alertContext")
    def alert_context(self) -> Optional['outputs.ActionRuleActionGroupConditionAlertContext']:
        """
        A `alert_context` block as defined below.
        """
        return pulumi.get(self, "alert_context")

    @property
    @pulumi.getter(name="alertRuleId")
    def alert_rule_id(self) -> Optional['outputs.ActionRuleActionGroupConditionAlertRuleId']:
        """
        A `alert_rule_id` block as defined below.
        """
        return pulumi.get(self, "alert_rule_id")

    @property
    @pulumi.getter
    def description(self) -> Optional['outputs.ActionRuleActionGroupConditionDescription']:
        """
        A `description` block as defined below.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def monitor(self) -> Optional['outputs.ActionRuleActionGroupConditionMonitor']:
        """
        A `monitor` block as defined below.
        """
        return pulumi.get(self, "monitor")

    @property
    @pulumi.getter(name="monitorService")
    def monitor_service(self) -> Optional['outputs.ActionRuleActionGroupConditionMonitorService']:
        """
        A `monitor_service` as block defined below.
        """
        return pulumi.get(self, "monitor_service")

    @property
    @pulumi.getter
    def severity(self) -> Optional['outputs.ActionRuleActionGroupConditionSeverity']:
        """
        A `severity` block as defined below.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter(name="targetResourceType")
    def target_resource_type(self) -> Optional['outputs.ActionRuleActionGroupConditionTargetResourceType']:
        """
        A `target_resource_type` block as defined below.
        """
        return pulumi.get(self, "target_resource_type")


@pulumi.output_type
class ActionRuleActionGroupConditionAlertContext(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        :param Sequence[str] values: A list of values to match for a given condition.
        """
        ActionRuleActionGroupConditionAlertContext._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values to match for a given condition.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ActionRuleActionGroupConditionAlertRuleId(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        :param Sequence[str] values: A list of values to match for a given condition.
        """
        ActionRuleActionGroupConditionAlertRuleId._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values to match for a given condition.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ActionRuleActionGroupConditionDescription(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        :param Sequence[str] values: A list of values to match for a given condition.
        """
        ActionRuleActionGroupConditionDescription._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values to match for a given condition.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ActionRuleActionGroupConditionMonitor(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        :param Sequence[str] values: A list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
        """
        ActionRuleActionGroupConditionMonitor._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ActionRuleActionGroupConditionMonitorService(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        :param Sequence[str] values: A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Azure Stack Edge`, `Azure Stack Hub`, `Custom`, `Data Box Gateway`, `Health Platform`, `Log Alerts V2`, `Log Analytics`, `Platform`, `Resource Health`, `Smart Detector` and `VM Insights - Health`.
        """
        ActionRuleActionGroupConditionMonitorService._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Azure Stack Edge`, `Azure Stack Hub`, `Custom`, `Data Box Gateway`, `Health Platform`, `Log Alerts V2`, `Log Analytics`, `Platform`, `Resource Health`, `Smart Detector` and `VM Insights - Health`.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ActionRuleActionGroupConditionSeverity(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals`and `NotEquals`.
        :param Sequence[str] values: A list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
        """
        ActionRuleActionGroupConditionSeverity._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`and `NotEquals`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ActionRuleActionGroupConditionTargetResourceType(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        :param Sequence[str] values: A list of values to match for a given condition. The values should be valid resource types.
        """
        ActionRuleActionGroupConditionTargetResourceType._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values to match for a given condition. The values should be valid resource types.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ActionRuleActionGroupScope(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceIds":
            suggest = "resource_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionRuleActionGroupScope. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionRuleActionGroupScope.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionRuleActionGroupScope.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_ids: Sequence[str],
                 type: str):
        """
        :param Sequence[str] resource_ids: A list of resource IDs of the given scope type which will be the target of action rule.
        :param str type: Specifies the type of target scope. Possible values are `ResourceGroup` and `Resource`.
        """
        ActionRuleActionGroupScope._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resource_ids=resource_ids,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resource_ids: Sequence[str],
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("resource_ids", resource_ids)
        _setter("type", type)

    @property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Sequence[str]:
        """
        A list of resource IDs of the given scope type which will be the target of action rule.
        """
        return pulumi.get(self, "resource_ids")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the type of target scope. Possible values are `ResourceGroup` and `Resource`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ActionRuleSuppressionCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertContext":
            suggest = "alert_context"
        elif key == "alertRuleId":
            suggest = "alert_rule_id"
        elif key == "monitorService":
            suggest = "monitor_service"
        elif key == "targetResourceType":
            suggest = "target_resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionRuleSuppressionCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionRuleSuppressionCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionRuleSuppressionCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_context: Optional['outputs.ActionRuleSuppressionConditionAlertContext'] = None,
                 alert_rule_id: Optional['outputs.ActionRuleSuppressionConditionAlertRuleId'] = None,
                 description: Optional['outputs.ActionRuleSuppressionConditionDescription'] = None,
                 monitor: Optional['outputs.ActionRuleSuppressionConditionMonitor'] = None,
                 monitor_service: Optional['outputs.ActionRuleSuppressionConditionMonitorService'] = None,
                 severity: Optional['outputs.ActionRuleSuppressionConditionSeverity'] = None,
                 target_resource_type: Optional['outputs.ActionRuleSuppressionConditionTargetResourceType'] = None):
        """
        :param 'ActionRuleSuppressionConditionAlertContextArgs' alert_context: A `alert_context` block as defined below.
        :param 'ActionRuleSuppressionConditionAlertRuleIdArgs' alert_rule_id: A `alert_rule_id` block as defined below.
        :param 'ActionRuleSuppressionConditionDescriptionArgs' description: A `description` block as defined below.
        :param 'ActionRuleSuppressionConditionMonitorArgs' monitor: A `monitor` block as defined below.
        :param 'ActionRuleSuppressionConditionMonitorServiceArgs' monitor_service: A `monitor_service` as block defined below.
        :param 'ActionRuleSuppressionConditionSeverityArgs' severity: A `severity` block as defined below.
        :param 'ActionRuleSuppressionConditionTargetResourceTypeArgs' target_resource_type: A `target_resource_type` block as defined below.
        """
        ActionRuleSuppressionCondition._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alert_context=alert_context,
            alert_rule_id=alert_rule_id,
            description=description,
            monitor=monitor,
            monitor_service=monitor_service,
            severity=severity,
            target_resource_type=target_resource_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alert_context: Optional['outputs.ActionRuleSuppressionConditionAlertContext'] = None,
             alert_rule_id: Optional['outputs.ActionRuleSuppressionConditionAlertRuleId'] = None,
             description: Optional['outputs.ActionRuleSuppressionConditionDescription'] = None,
             monitor: Optional['outputs.ActionRuleSuppressionConditionMonitor'] = None,
             monitor_service: Optional['outputs.ActionRuleSuppressionConditionMonitorService'] = None,
             severity: Optional['outputs.ActionRuleSuppressionConditionSeverity'] = None,
             target_resource_type: Optional['outputs.ActionRuleSuppressionConditionTargetResourceType'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if alert_context is not None:
            _setter("alert_context", alert_context)
        if alert_rule_id is not None:
            _setter("alert_rule_id", alert_rule_id)
        if description is not None:
            _setter("description", description)
        if monitor is not None:
            _setter("monitor", monitor)
        if monitor_service is not None:
            _setter("monitor_service", monitor_service)
        if severity is not None:
            _setter("severity", severity)
        if target_resource_type is not None:
            _setter("target_resource_type", target_resource_type)

    @property
    @pulumi.getter(name="alertContext")
    def alert_context(self) -> Optional['outputs.ActionRuleSuppressionConditionAlertContext']:
        """
        A `alert_context` block as defined below.
        """
        return pulumi.get(self, "alert_context")

    @property
    @pulumi.getter(name="alertRuleId")
    def alert_rule_id(self) -> Optional['outputs.ActionRuleSuppressionConditionAlertRuleId']:
        """
        A `alert_rule_id` block as defined below.
        """
        return pulumi.get(self, "alert_rule_id")

    @property
    @pulumi.getter
    def description(self) -> Optional['outputs.ActionRuleSuppressionConditionDescription']:
        """
        A `description` block as defined below.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def monitor(self) -> Optional['outputs.ActionRuleSuppressionConditionMonitor']:
        """
        A `monitor` block as defined below.
        """
        return pulumi.get(self, "monitor")

    @property
    @pulumi.getter(name="monitorService")
    def monitor_service(self) -> Optional['outputs.ActionRuleSuppressionConditionMonitorService']:
        """
        A `monitor_service` as block defined below.
        """
        return pulumi.get(self, "monitor_service")

    @property
    @pulumi.getter
    def severity(self) -> Optional['outputs.ActionRuleSuppressionConditionSeverity']:
        """
        A `severity` block as defined below.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter(name="targetResourceType")
    def target_resource_type(self) -> Optional['outputs.ActionRuleSuppressionConditionTargetResourceType']:
        """
        A `target_resource_type` block as defined below.
        """
        return pulumi.get(self, "target_resource_type")


@pulumi.output_type
class ActionRuleSuppressionConditionAlertContext(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        :param Sequence[str] values: A list of values to match for a given condition.
        """
        ActionRuleSuppressionConditionAlertContext._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values to match for a given condition.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ActionRuleSuppressionConditionAlertRuleId(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        :param Sequence[str] values: A list of values to match for a given condition.
        """
        ActionRuleSuppressionConditionAlertRuleId._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values to match for a given condition.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ActionRuleSuppressionConditionDescription(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        :param Sequence[str] values: A list of values to match for a given condition.
        """
        ActionRuleSuppressionConditionDescription._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values to match for a given condition.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ActionRuleSuppressionConditionMonitor(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        :param Sequence[str] values: A list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
        """
        ActionRuleSuppressionConditionMonitor._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ActionRuleSuppressionConditionMonitorService(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        :param Sequence[str] values: A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Azure Stack Edge`, `Azure Stack Hub`, `Custom`, `Data Box Gateway`, `Health Platform`, `Log Alerts V2`, `Log Analytics`, `Platform`, `Resource Health`, `Smart Detector` and `VM Insights - Health`.
        """
        ActionRuleSuppressionConditionMonitorService._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Azure Stack Edge`, `Azure Stack Hub`, `Custom`, `Data Box Gateway`, `Health Platform`, `Log Alerts V2`, `Log Analytics`, `Platform`, `Resource Health`, `Smart Detector` and `VM Insights - Health`.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ActionRuleSuppressionConditionSeverity(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals`and `NotEquals`.
        :param Sequence[str] values: A list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
        """
        ActionRuleSuppressionConditionSeverity._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`and `NotEquals`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ActionRuleSuppressionConditionTargetResourceType(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        :param Sequence[str] values: A list of values to match for a given condition. The values should be valid resource types.
        """
        ActionRuleSuppressionConditionTargetResourceType._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values to match for a given condition. The values should be valid resource types.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ActionRuleSuppressionScope(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceIds":
            suggest = "resource_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionRuleSuppressionScope. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionRuleSuppressionScope.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionRuleSuppressionScope.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_ids: Sequence[str],
                 type: str):
        """
        :param Sequence[str] resource_ids: A list of resource IDs of the given scope type which will be the target of action rule.
        :param str type: Specifies the type of target scope. Possible values are `ResourceGroup` and `Resource`.
        """
        ActionRuleSuppressionScope._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resource_ids=resource_ids,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resource_ids: Sequence[str],
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("resource_ids", resource_ids)
        _setter("type", type)

    @property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Sequence[str]:
        """
        A list of resource IDs of the given scope type which will be the target of action rule.
        """
        return pulumi.get(self, "resource_ids")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the type of target scope. Possible values are `ResourceGroup` and `Resource`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ActionRuleSuppressionSuppression(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "recurrenceType":
            suggest = "recurrence_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionRuleSuppressionSuppression. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionRuleSuppressionSuppression.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionRuleSuppressionSuppression.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 recurrence_type: str,
                 schedule: Optional['outputs.ActionRuleSuppressionSuppressionSchedule'] = None):
        """
        :param str recurrence_type: Specifies the type of suppression. Possible values are `Always`, `Daily`, `Monthly`, `Once`, and `Weekly`.
        :param 'ActionRuleSuppressionSuppressionScheduleArgs' schedule: A `schedule` block as defined below. Required if `recurrence_type` is `Daily`, `Monthly`, `Once` or `Weekly`.
        """
        ActionRuleSuppressionSuppression._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            recurrence_type=recurrence_type,
            schedule=schedule,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             recurrence_type: str,
             schedule: Optional['outputs.ActionRuleSuppressionSuppressionSchedule'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("recurrence_type", recurrence_type)
        if schedule is not None:
            _setter("schedule", schedule)

    @property
    @pulumi.getter(name="recurrenceType")
    def recurrence_type(self) -> str:
        """
        Specifies the type of suppression. Possible values are `Always`, `Daily`, `Monthly`, `Once`, and `Weekly`.
        """
        return pulumi.get(self, "recurrence_type")

    @property
    @pulumi.getter
    def schedule(self) -> Optional['outputs.ActionRuleSuppressionSuppressionSchedule']:
        """
        A `schedule` block as defined below. Required if `recurrence_type` is `Daily`, `Monthly`, `Once` or `Weekly`.
        """
        return pulumi.get(self, "schedule")


@pulumi.output_type
class ActionRuleSuppressionSuppressionSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endDateUtc":
            suggest = "end_date_utc"
        elif key == "startDateUtc":
            suggest = "start_date_utc"
        elif key == "recurrenceMonthlies":
            suggest = "recurrence_monthlies"
        elif key == "recurrenceWeeklies":
            suggest = "recurrence_weeklies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionRuleSuppressionSuppressionSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionRuleSuppressionSuppressionSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionRuleSuppressionSuppressionSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_date_utc: str,
                 start_date_utc: str,
                 recurrence_monthlies: Optional[Sequence[int]] = None,
                 recurrence_weeklies: Optional[Sequence[str]] = None):
        """
        :param str end_date_utc: specifies the recurrence UTC end datetime (Y-m-d'T'H:M:S'Z').
        :param str start_date_utc: specifies the recurrence UTC start datetime (Y-m-d'T'H:M:S'Z').
        :param Sequence[int] recurrence_monthlies: specifies the list of dayOfMonth to recurrence. Possible values are between `1` - `31`. Required if `recurrence_type` is `Monthly`.
        :param Sequence[str] recurrence_weeklies: specifies the list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
        """
        ActionRuleSuppressionSuppressionSchedule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end_date_utc=end_date_utc,
            start_date_utc=start_date_utc,
            recurrence_monthlies=recurrence_monthlies,
            recurrence_weeklies=recurrence_weeklies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end_date_utc: str,
             start_date_utc: str,
             recurrence_monthlies: Optional[Sequence[int]] = None,
             recurrence_weeklies: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("end_date_utc", end_date_utc)
        _setter("start_date_utc", start_date_utc)
        if recurrence_monthlies is not None:
            _setter("recurrence_monthlies", recurrence_monthlies)
        if recurrence_weeklies is not None:
            _setter("recurrence_weeklies", recurrence_weeklies)

    @property
    @pulumi.getter(name="endDateUtc")
    def end_date_utc(self) -> str:
        """
        specifies the recurrence UTC end datetime (Y-m-d'T'H:M:S'Z').
        """
        return pulumi.get(self, "end_date_utc")

    @property
    @pulumi.getter(name="startDateUtc")
    def start_date_utc(self) -> str:
        """
        specifies the recurrence UTC start datetime (Y-m-d'T'H:M:S'Z').
        """
        return pulumi.get(self, "start_date_utc")

    @property
    @pulumi.getter(name="recurrenceMonthlies")
    def recurrence_monthlies(self) -> Optional[Sequence[int]]:
        """
        specifies the list of dayOfMonth to recurrence. Possible values are between `1` - `31`. Required if `recurrence_type` is `Monthly`.
        """
        return pulumi.get(self, "recurrence_monthlies")

    @property
    @pulumi.getter(name="recurrenceWeeklies")
    def recurrence_weeklies(self) -> Optional[Sequence[str]]:
        """
        specifies the list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
        """
        return pulumi.get(self, "recurrence_weeklies")


@pulumi.output_type
class ActivityLogAlertAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionGroupId":
            suggest = "action_group_id"
        elif key == "webhookProperties":
            suggest = "webhook_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActivityLogAlertAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActivityLogAlertAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActivityLogAlertAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_group_id: str,
                 webhook_properties: Optional[Mapping[str, str]] = None):
        """
        :param str action_group_id: The ID of the Action Group can be sourced from the `monitoring.ActionGroup` resource.
        :param Mapping[str, str] webhook_properties: The map of custom string properties to include with the post operation. These data are appended to the webhook payload.
        """
        ActivityLogAlertAction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action_group_id=action_group_id,
            webhook_properties=webhook_properties,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action_group_id: str,
             webhook_properties: Optional[Mapping[str, str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action_group_id", action_group_id)
        if webhook_properties is not None:
            _setter("webhook_properties", webhook_properties)

    @property
    @pulumi.getter(name="actionGroupId")
    def action_group_id(self) -> str:
        """
        The ID of the Action Group can be sourced from the `monitoring.ActionGroup` resource.
        """
        return pulumi.get(self, "action_group_id")

    @property
    @pulumi.getter(name="webhookProperties")
    def webhook_properties(self) -> Optional[Mapping[str, str]]:
        """
        The map of custom string properties to include with the post operation. These data are appended to the webhook payload.
        """
        return pulumi.get(self, "webhook_properties")


@pulumi.output_type
class ActivityLogAlertCriteria(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationName":
            suggest = "operation_name"
        elif key == "recommendationCategory":
            suggest = "recommendation_category"
        elif key == "recommendationImpact":
            suggest = "recommendation_impact"
        elif key == "recommendationType":
            suggest = "recommendation_type"
        elif key == "resourceGroup":
            suggest = "resource_group"
        elif key == "resourceGroups":
            suggest = "resource_groups"
        elif key == "resourceHealths":
            suggest = "resource_healths"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceIds":
            suggest = "resource_ids"
        elif key == "resourceProvider":
            suggest = "resource_provider"
        elif key == "resourceProviders":
            suggest = "resource_providers"
        elif key == "resourceType":
            suggest = "resource_type"
        elif key == "resourceTypes":
            suggest = "resource_types"
        elif key == "serviceHealths":
            suggest = "service_healths"
        elif key == "subStatus":
            suggest = "sub_status"
        elif key == "subStatuses":
            suggest = "sub_statuses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActivityLogAlertCriteria. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActivityLogAlertCriteria.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActivityLogAlertCriteria.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: str,
                 caller: Optional[str] = None,
                 level: Optional[str] = None,
                 levels: Optional[Sequence[str]] = None,
                 operation_name: Optional[str] = None,
                 recommendation_category: Optional[str] = None,
                 recommendation_impact: Optional[str] = None,
                 recommendation_type: Optional[str] = None,
                 resource_group: Optional[str] = None,
                 resource_groups: Optional[Sequence[str]] = None,
                 resource_healths: Optional[Sequence['outputs.ActivityLogAlertCriteriaResourceHealth']] = None,
                 resource_id: Optional[str] = None,
                 resource_ids: Optional[Sequence[str]] = None,
                 resource_provider: Optional[str] = None,
                 resource_providers: Optional[Sequence[str]] = None,
                 resource_type: Optional[str] = None,
                 resource_types: Optional[Sequence[str]] = None,
                 service_healths: Optional[Sequence['outputs.ActivityLogAlertCriteriaServiceHealth']] = None,
                 status: Optional[str] = None,
                 statuses: Optional[Sequence[str]] = None,
                 sub_status: Optional[str] = None,
                 sub_statuses: Optional[Sequence[str]] = None):
        """
        :param str category: The category of the operation. Possible values are `Administrative`, `Autoscale`, `Policy`, `Recommendation`, `ResourceHealth`, `Security` and `ServiceHealth`.
        :param str caller: The email address or Azure Active Directory identifier of the user who performed the operation.
        :param str level: The severity level of the event. Possible values are `Verbose`, `Informational`, `Warning`, `Error`, and `Critical`.
        :param Sequence[str] levels: A list of severity level of the event. Possible values are `Verbose`, `Informational`, `Warning`, `Error`, and `Critical`.
               
               > **NOTE:** `level` and `levels` are mutually exclusive.
        :param str operation_name: The Resource Manager Role-Based Access Control operation name. Supported operation should be of the form: `<resourceProvider>/<resourceType>/<operation>`.
        :param str recommendation_category: The recommendation category of the event. Possible values are `Cost`, `Reliability`, `OperationalExcellence` and `Performance`. It is only allowed when `category` is `Recommendation`.
        :param str recommendation_impact: The recommendation impact of the event. Possible values are `High`, `Medium` and `Low`. It is only allowed when `category` is `Recommendation`.
        :param str recommendation_type: The recommendation type of the event. It is only allowed when `category` is `Recommendation`.
        :param str resource_group: The name of resource group monitored by the activity log alert.
        :param Sequence[str] resource_groups: A list of names of resource groups monitored by the activity log alert.
               
               > **NOTE:** `resource_group` and `resource_groups` are mutually exclusive.
        :param Sequence['ActivityLogAlertCriteriaResourceHealthArgs'] resource_healths: A block to define fine grain resource health settings.
        :param str resource_id: The specific resource monitored by the activity log alert. It should be within one of the `scopes`.
        :param Sequence[str] resource_ids: A list of specific resources monitored by the activity log alert. It should be within one of the `scopes`.
               
               > **NOTE:** `resource_id` and `resource_ids` are mutually exclusive.
        :param str resource_provider: The name of the resource provider monitored by the activity log alert.
        :param Sequence[str] resource_providers: A list of names of resource providers monitored by the activity log alert.
               
               > **NOTE:** `resource_provider` and `resource_providers` are mutually exclusive.
        :param str resource_type: The resource type monitored by the activity log alert.
        :param Sequence[str] resource_types: A list of resource types monitored by the activity log alert.
               
               > **NOTE:** `resource_type` and `resource_types` are mutually exclusive.
        :param Sequence['ActivityLogAlertCriteriaServiceHealthArgs'] service_healths: A block to define fine grain service health settings.
        :param str status: The status of the event. For example, `Started`, `Failed`, or `Succeeded`.
        :param Sequence[str] statuses: A list of status of the event. For example, `Started`, `Failed`, or `Succeeded`.
               
               > **NOTE:** `status` and `statuses` are mutually exclusive.
        :param str sub_status: The sub status of the event.
        :param Sequence[str] sub_statuses: A list of sub status of the event.
               
               > **NOTE:** `sub_status` and `sub_statuses` are mutually exclusive.
        """
        ActivityLogAlertCriteria._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            caller=caller,
            level=level,
            levels=levels,
            operation_name=operation_name,
            recommendation_category=recommendation_category,
            recommendation_impact=recommendation_impact,
            recommendation_type=recommendation_type,
            resource_group=resource_group,
            resource_groups=resource_groups,
            resource_healths=resource_healths,
            resource_id=resource_id,
            resource_ids=resource_ids,
            resource_provider=resource_provider,
            resource_providers=resource_providers,
            resource_type=resource_type,
            resource_types=resource_types,
            service_healths=service_healths,
            status=status,
            statuses=statuses,
            sub_status=sub_status,
            sub_statuses=sub_statuses,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: str,
             caller: Optional[str] = None,
             level: Optional[str] = None,
             levels: Optional[Sequence[str]] = None,
             operation_name: Optional[str] = None,
             recommendation_category: Optional[str] = None,
             recommendation_impact: Optional[str] = None,
             recommendation_type: Optional[str] = None,
             resource_group: Optional[str] = None,
             resource_groups: Optional[Sequence[str]] = None,
             resource_healths: Optional[Sequence['outputs.ActivityLogAlertCriteriaResourceHealth']] = None,
             resource_id: Optional[str] = None,
             resource_ids: Optional[Sequence[str]] = None,
             resource_provider: Optional[str] = None,
             resource_providers: Optional[Sequence[str]] = None,
             resource_type: Optional[str] = None,
             resource_types: Optional[Sequence[str]] = None,
             service_healths: Optional[Sequence['outputs.ActivityLogAlertCriteriaServiceHealth']] = None,
             status: Optional[str] = None,
             statuses: Optional[Sequence[str]] = None,
             sub_status: Optional[str] = None,
             sub_statuses: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("category", category)
        if caller is not None:
            _setter("caller", caller)
        if level is not None:
            _setter("level", level)
        if levels is not None:
            _setter("levels", levels)
        if operation_name is not None:
            _setter("operation_name", operation_name)
        if recommendation_category is not None:
            _setter("recommendation_category", recommendation_category)
        if recommendation_impact is not None:
            _setter("recommendation_impact", recommendation_impact)
        if recommendation_type is not None:
            _setter("recommendation_type", recommendation_type)
        if resource_group is not None:
            _setter("resource_group", resource_group)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)
        if resource_healths is not None:
            _setter("resource_healths", resource_healths)
        if resource_id is not None:
            _setter("resource_id", resource_id)
        if resource_ids is not None:
            _setter("resource_ids", resource_ids)
        if resource_provider is not None:
            _setter("resource_provider", resource_provider)
        if resource_providers is not None:
            _setter("resource_providers", resource_providers)
        if resource_type is not None:
            _setter("resource_type", resource_type)
        if resource_types is not None:
            _setter("resource_types", resource_types)
        if service_healths is not None:
            _setter("service_healths", service_healths)
        if status is not None:
            _setter("status", status)
        if statuses is not None:
            _setter("statuses", statuses)
        if sub_status is not None:
            _setter("sub_status", sub_status)
        if sub_statuses is not None:
            _setter("sub_statuses", sub_statuses)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        The category of the operation. Possible values are `Administrative`, `Autoscale`, `Policy`, `Recommendation`, `ResourceHealth`, `Security` and `ServiceHealth`.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def caller(self) -> Optional[str]:
        """
        The email address or Azure Active Directory identifier of the user who performed the operation.
        """
        return pulumi.get(self, "caller")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        """
        The severity level of the event. Possible values are `Verbose`, `Informational`, `Warning`, `Error`, and `Critical`.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def levels(self) -> Optional[Sequence[str]]:
        """
        A list of severity level of the event. Possible values are `Verbose`, `Informational`, `Warning`, `Error`, and `Critical`.

        > **NOTE:** `level` and `levels` are mutually exclusive.
        """
        return pulumi.get(self, "levels")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[str]:
        """
        The Resource Manager Role-Based Access Control operation name. Supported operation should be of the form: `<resourceProvider>/<resourceType>/<operation>`.
        """
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="recommendationCategory")
    def recommendation_category(self) -> Optional[str]:
        """
        The recommendation category of the event. Possible values are `Cost`, `Reliability`, `OperationalExcellence` and `Performance`. It is only allowed when `category` is `Recommendation`.
        """
        return pulumi.get(self, "recommendation_category")

    @property
    @pulumi.getter(name="recommendationImpact")
    def recommendation_impact(self) -> Optional[str]:
        """
        The recommendation impact of the event. Possible values are `High`, `Medium` and `Low`. It is only allowed when `category` is `Recommendation`.
        """
        return pulumi.get(self, "recommendation_impact")

    @property
    @pulumi.getter(name="recommendationType")
    def recommendation_type(self) -> Optional[str]:
        """
        The recommendation type of the event. It is only allowed when `category` is `Recommendation`.
        """
        return pulumi.get(self, "recommendation_type")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[str]:
        """
        The name of resource group monitored by the activity log alert.
        """
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[Sequence[str]]:
        """
        A list of names of resource groups monitored by the activity log alert.

        > **NOTE:** `resource_group` and `resource_groups` are mutually exclusive.
        """
        return pulumi.get(self, "resource_groups")

    @property
    @pulumi.getter(name="resourceHealths")
    def resource_healths(self) -> Optional[Sequence['outputs.ActivityLogAlertCriteriaResourceHealth']]:
        """
        A block to define fine grain resource health settings.
        """
        return pulumi.get(self, "resource_healths")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        """
        The specific resource monitored by the activity log alert. It should be within one of the `scopes`.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Optional[Sequence[str]]:
        """
        A list of specific resources monitored by the activity log alert. It should be within one of the `scopes`.

        > **NOTE:** `resource_id` and `resource_ids` are mutually exclusive.
        """
        return pulumi.get(self, "resource_ids")

    @property
    @pulumi.getter(name="resourceProvider")
    def resource_provider(self) -> Optional[str]:
        """
        The name of the resource provider monitored by the activity log alert.
        """
        return pulumi.get(self, "resource_provider")

    @property
    @pulumi.getter(name="resourceProviders")
    def resource_providers(self) -> Optional[Sequence[str]]:
        """
        A list of names of resource providers monitored by the activity log alert.

        > **NOTE:** `resource_provider` and `resource_providers` are mutually exclusive.
        """
        return pulumi.get(self, "resource_providers")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        The resource type monitored by the activity log alert.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Optional[Sequence[str]]:
        """
        A list of resource types monitored by the activity log alert.

        > **NOTE:** `resource_type` and `resource_types` are mutually exclusive.
        """
        return pulumi.get(self, "resource_types")

    @property
    @pulumi.getter(name="serviceHealths")
    def service_healths(self) -> Optional[Sequence['outputs.ActivityLogAlertCriteriaServiceHealth']]:
        """
        A block to define fine grain service health settings.
        """
        return pulumi.get(self, "service_healths")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the event. For example, `Started`, `Failed`, or `Succeeded`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence[str]]:
        """
        A list of status of the event. For example, `Started`, `Failed`, or `Succeeded`.

        > **NOTE:** `status` and `statuses` are mutually exclusive.
        """
        return pulumi.get(self, "statuses")

    @property
    @pulumi.getter(name="subStatus")
    def sub_status(self) -> Optional[str]:
        """
        The sub status of the event.
        """
        return pulumi.get(self, "sub_status")

    @property
    @pulumi.getter(name="subStatuses")
    def sub_statuses(self) -> Optional[Sequence[str]]:
        """
        A list of sub status of the event.

        > **NOTE:** `sub_status` and `sub_statuses` are mutually exclusive.
        """
        return pulumi.get(self, "sub_statuses")


@pulumi.output_type
class ActivityLogAlertCriteriaResourceHealth(dict):
    def __init__(__self__, *,
                 currents: Optional[Sequence[str]] = None,
                 previouses: Optional[Sequence[str]] = None,
                 reasons: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] currents: The current resource health statuses that will log an alert. Possible values are `Available`, `Degraded`, `Unavailable` and `Unknown`.
        :param Sequence[str] previouses: The previous resource health statuses that will log an alert. Possible values are `Available`, `Degraded`, `Unavailable` and `Unknown`.
        :param Sequence[str] reasons: The reason that will log an alert. Possible values are `PlatformInitiated` (such as a problem with the resource in an affected region of an Azure incident), `UserInitiated` (such as a shutdown request of a VM) and `Unknown`.
        """
        ActivityLogAlertCriteriaResourceHealth._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            currents=currents,
            previouses=previouses,
            reasons=reasons,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             currents: Optional[Sequence[str]] = None,
             previouses: Optional[Sequence[str]] = None,
             reasons: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if currents is not None:
            _setter("currents", currents)
        if previouses is not None:
            _setter("previouses", previouses)
        if reasons is not None:
            _setter("reasons", reasons)

    @property
    @pulumi.getter
    def currents(self) -> Optional[Sequence[str]]:
        """
        The current resource health statuses that will log an alert. Possible values are `Available`, `Degraded`, `Unavailable` and `Unknown`.
        """
        return pulumi.get(self, "currents")

    @property
    @pulumi.getter
    def previouses(self) -> Optional[Sequence[str]]:
        """
        The previous resource health statuses that will log an alert. Possible values are `Available`, `Degraded`, `Unavailable` and `Unknown`.
        """
        return pulumi.get(self, "previouses")

    @property
    @pulumi.getter
    def reasons(self) -> Optional[Sequence[str]]:
        """
        The reason that will log an alert. Possible values are `PlatformInitiated` (such as a problem with the resource in an affected region of an Azure incident), `UserInitiated` (such as a shutdown request of a VM) and `Unknown`.
        """
        return pulumi.get(self, "reasons")


@pulumi.output_type
class ActivityLogAlertCriteriaServiceHealth(dict):
    def __init__(__self__, *,
                 events: Optional[Sequence[str]] = None,
                 locations: Optional[Sequence[str]] = None,
                 services: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] events: Events this alert will monitor Possible values are `Incident`, `Maintenance`, `Informational`, `ActionRequired` and `Security`.
        :param Sequence[str] locations: Locations this alert will monitor. For example, `West Europe`.
        :param Sequence[str] services: Services this alert will monitor. For example, `Activity Logs & Alerts`, `Action Groups`. Defaults to all Services.
        """
        ActivityLogAlertCriteriaServiceHealth._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            events=events,
            locations=locations,
            services=services,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             events: Optional[Sequence[str]] = None,
             locations: Optional[Sequence[str]] = None,
             services: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if events is not None:
            _setter("events", events)
        if locations is not None:
            _setter("locations", locations)
        if services is not None:
            _setter("services", services)

    @property
    @pulumi.getter
    def events(self) -> Optional[Sequence[str]]:
        """
        Events this alert will monitor Possible values are `Incident`, `Maintenance`, `Informational`, `ActionRequired` and `Security`.
        """
        return pulumi.get(self, "events")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence[str]]:
        """
        Locations this alert will monitor. For example, `West Europe`.
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def services(self) -> Optional[Sequence[str]]:
        """
        Services this alert will monitor. For example, `Activity Logs & Alerts`, `Action Groups`. Defaults to all Services.
        """
        return pulumi.get(self, "services")


@pulumi.output_type
class AlertProcessingRuleActionGroupCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertContext":
            suggest = "alert_context"
        elif key == "alertRuleId":
            suggest = "alert_rule_id"
        elif key == "alertRuleName":
            suggest = "alert_rule_name"
        elif key == "monitorCondition":
            suggest = "monitor_condition"
        elif key == "monitorService":
            suggest = "monitor_service"
        elif key == "signalType":
            suggest = "signal_type"
        elif key == "targetResource":
            suggest = "target_resource"
        elif key == "targetResourceGroup":
            suggest = "target_resource_group"
        elif key == "targetResourceType":
            suggest = "target_resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertProcessingRuleActionGroupCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertProcessingRuleActionGroupCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertProcessingRuleActionGroupCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_context: Optional['outputs.AlertProcessingRuleActionGroupConditionAlertContext'] = None,
                 alert_rule_id: Optional['outputs.AlertProcessingRuleActionGroupConditionAlertRuleId'] = None,
                 alert_rule_name: Optional['outputs.AlertProcessingRuleActionGroupConditionAlertRuleName'] = None,
                 description: Optional['outputs.AlertProcessingRuleActionGroupConditionDescription'] = None,
                 monitor_condition: Optional['outputs.AlertProcessingRuleActionGroupConditionMonitorCondition'] = None,
                 monitor_service: Optional['outputs.AlertProcessingRuleActionGroupConditionMonitorService'] = None,
                 severity: Optional['outputs.AlertProcessingRuleActionGroupConditionSeverity'] = None,
                 signal_type: Optional['outputs.AlertProcessingRuleActionGroupConditionSignalType'] = None,
                 target_resource: Optional['outputs.AlertProcessingRuleActionGroupConditionTargetResource'] = None,
                 target_resource_group: Optional['outputs.AlertProcessingRuleActionGroupConditionTargetResourceGroup'] = None,
                 target_resource_type: Optional['outputs.AlertProcessingRuleActionGroupConditionTargetResourceType'] = None):
        """
        :param 'AlertProcessingRuleActionGroupConditionAlertContextArgs' alert_context: A `alert_context` block as defined above.
        :param 'AlertProcessingRuleActionGroupConditionAlertRuleIdArgs' alert_rule_id: A `alert_rule_id` block as defined above.
        :param 'AlertProcessingRuleActionGroupConditionAlertRuleNameArgs' alert_rule_name: A `alert_rule_name` block as defined above.
        :param 'AlertProcessingRuleActionGroupConditionDescriptionArgs' description: A `description` block as defined below.
        :param 'AlertProcessingRuleActionGroupConditionMonitorConditionArgs' monitor_condition: A `monitor_condition` block as defined below.
        :param 'AlertProcessingRuleActionGroupConditionMonitorServiceArgs' monitor_service: A `monitor_service` block as defined below.
        :param 'AlertProcessingRuleActionGroupConditionSeverityArgs' severity: A `severity` block as defined below.
        :param 'AlertProcessingRuleActionGroupConditionSignalTypeArgs' signal_type: A `signal_type` block as defined below.
        :param 'AlertProcessingRuleActionGroupConditionTargetResourceArgs' target_resource: A `target_resource` block as defined below.
        :param 'AlertProcessingRuleActionGroupConditionTargetResourceGroupArgs' target_resource_group: A `target_resource_group` block as defined below.
        :param 'AlertProcessingRuleActionGroupConditionTargetResourceTypeArgs' target_resource_type: A `target_resource_type` block as defined below.
               
               > **Note:** At least one of the `alert_context`, `alert_rule_id`, `alert_rule_name`, `description`, `monitor_condition`, `monitor_service`, `severity`, `signal_type`, `target_resource`, `target_resource_group`, `target_resource_type` must be specified.
        """
        AlertProcessingRuleActionGroupCondition._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alert_context=alert_context,
            alert_rule_id=alert_rule_id,
            alert_rule_name=alert_rule_name,
            description=description,
            monitor_condition=monitor_condition,
            monitor_service=monitor_service,
            severity=severity,
            signal_type=signal_type,
            target_resource=target_resource,
            target_resource_group=target_resource_group,
            target_resource_type=target_resource_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alert_context: Optional['outputs.AlertProcessingRuleActionGroupConditionAlertContext'] = None,
             alert_rule_id: Optional['outputs.AlertProcessingRuleActionGroupConditionAlertRuleId'] = None,
             alert_rule_name: Optional['outputs.AlertProcessingRuleActionGroupConditionAlertRuleName'] = None,
             description: Optional['outputs.AlertProcessingRuleActionGroupConditionDescription'] = None,
             monitor_condition: Optional['outputs.AlertProcessingRuleActionGroupConditionMonitorCondition'] = None,
             monitor_service: Optional['outputs.AlertProcessingRuleActionGroupConditionMonitorService'] = None,
             severity: Optional['outputs.AlertProcessingRuleActionGroupConditionSeverity'] = None,
             signal_type: Optional['outputs.AlertProcessingRuleActionGroupConditionSignalType'] = None,
             target_resource: Optional['outputs.AlertProcessingRuleActionGroupConditionTargetResource'] = None,
             target_resource_group: Optional['outputs.AlertProcessingRuleActionGroupConditionTargetResourceGroup'] = None,
             target_resource_type: Optional['outputs.AlertProcessingRuleActionGroupConditionTargetResourceType'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if alert_context is not None:
            _setter("alert_context", alert_context)
        if alert_rule_id is not None:
            _setter("alert_rule_id", alert_rule_id)
        if alert_rule_name is not None:
            _setter("alert_rule_name", alert_rule_name)
        if description is not None:
            _setter("description", description)
        if monitor_condition is not None:
            _setter("monitor_condition", monitor_condition)
        if monitor_service is not None:
            _setter("monitor_service", monitor_service)
        if severity is not None:
            _setter("severity", severity)
        if signal_type is not None:
            _setter("signal_type", signal_type)
        if target_resource is not None:
            _setter("target_resource", target_resource)
        if target_resource_group is not None:
            _setter("target_resource_group", target_resource_group)
        if target_resource_type is not None:
            _setter("target_resource_type", target_resource_type)

    @property
    @pulumi.getter(name="alertContext")
    def alert_context(self) -> Optional['outputs.AlertProcessingRuleActionGroupConditionAlertContext']:
        """
        A `alert_context` block as defined above.
        """
        return pulumi.get(self, "alert_context")

    @property
    @pulumi.getter(name="alertRuleId")
    def alert_rule_id(self) -> Optional['outputs.AlertProcessingRuleActionGroupConditionAlertRuleId']:
        """
        A `alert_rule_id` block as defined above.
        """
        return pulumi.get(self, "alert_rule_id")

    @property
    @pulumi.getter(name="alertRuleName")
    def alert_rule_name(self) -> Optional['outputs.AlertProcessingRuleActionGroupConditionAlertRuleName']:
        """
        A `alert_rule_name` block as defined above.
        """
        return pulumi.get(self, "alert_rule_name")

    @property
    @pulumi.getter
    def description(self) -> Optional['outputs.AlertProcessingRuleActionGroupConditionDescription']:
        """
        A `description` block as defined below.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="monitorCondition")
    def monitor_condition(self) -> Optional['outputs.AlertProcessingRuleActionGroupConditionMonitorCondition']:
        """
        A `monitor_condition` block as defined below.
        """
        return pulumi.get(self, "monitor_condition")

    @property
    @pulumi.getter(name="monitorService")
    def monitor_service(self) -> Optional['outputs.AlertProcessingRuleActionGroupConditionMonitorService']:
        """
        A `monitor_service` block as defined below.
        """
        return pulumi.get(self, "monitor_service")

    @property
    @pulumi.getter
    def severity(self) -> Optional['outputs.AlertProcessingRuleActionGroupConditionSeverity']:
        """
        A `severity` block as defined below.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter(name="signalType")
    def signal_type(self) -> Optional['outputs.AlertProcessingRuleActionGroupConditionSignalType']:
        """
        A `signal_type` block as defined below.
        """
        return pulumi.get(self, "signal_type")

    @property
    @pulumi.getter(name="targetResource")
    def target_resource(self) -> Optional['outputs.AlertProcessingRuleActionGroupConditionTargetResource']:
        """
        A `target_resource` block as defined below.
        """
        return pulumi.get(self, "target_resource")

    @property
    @pulumi.getter(name="targetResourceGroup")
    def target_resource_group(self) -> Optional['outputs.AlertProcessingRuleActionGroupConditionTargetResourceGroup']:
        """
        A `target_resource_group` block as defined below.
        """
        return pulumi.get(self, "target_resource_group")

    @property
    @pulumi.getter(name="targetResourceType")
    def target_resource_type(self) -> Optional['outputs.AlertProcessingRuleActionGroupConditionTargetResourceType']:
        """
        A `target_resource_type` block as defined below.

        > **Note:** At least one of the `alert_context`, `alert_rule_id`, `alert_rule_name`, `description`, `monitor_condition`, `monitor_service`, `severity`, `signal_type`, `target_resource`, `target_resource_group`, `target_resource_type` must be specified.
        """
        return pulumi.get(self, "target_resource_type")


@pulumi.output_type
class AlertProcessingRuleActionGroupConditionAlertContext(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        :param Sequence[str] values: Specifies a list of values to match for a given condition.
        """
        AlertProcessingRuleActionGroupConditionAlertContext._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Specifies a list of values to match for a given condition.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class AlertProcessingRuleActionGroupConditionAlertRuleId(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        :param Sequence[str] values: Specifies a list of values to match for a given condition.
        """
        AlertProcessingRuleActionGroupConditionAlertRuleId._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Specifies a list of values to match for a given condition.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class AlertProcessingRuleActionGroupConditionAlertRuleName(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        :param Sequence[str] values: Specifies a list of values to match for a given condition.
        """
        AlertProcessingRuleActionGroupConditionAlertRuleName._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Specifies a list of values to match for a given condition.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class AlertProcessingRuleActionGroupConditionDescription(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        :param Sequence[str] values: Specifies a list of values to match for a given condition.
        """
        AlertProcessingRuleActionGroupConditionDescription._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Specifies a list of values to match for a given condition.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class AlertProcessingRuleActionGroupConditionMonitorCondition(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        :param Sequence[str] values: Specifies a list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
        """
        AlertProcessingRuleActionGroupConditionMonitorCondition._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Specifies a list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class AlertProcessingRuleActionGroupConditionMonitorService(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        :param Sequence[str] values: A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Azure Stack Edge`, `Azure Stack Hub`, `Custom`, `Data Box Gateway`, `Health Platform`, `Log Alerts V2`, `Log Analytics`, `Platform`, `Prometheus`, `Resource Health`, `Smart Detector`, and `VM Insights - Health`.
        """
        AlertProcessingRuleActionGroupConditionMonitorService._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Azure Stack Edge`, `Azure Stack Hub`, `Custom`, `Data Box Gateway`, `Health Platform`, `Log Alerts V2`, `Log Analytics`, `Platform`, `Prometheus`, `Resource Health`, `Smart Detector`, and `VM Insights - Health`.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class AlertProcessingRuleActionGroupConditionSeverity(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        :param Sequence[str] values: Specifies list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
        """
        AlertProcessingRuleActionGroupConditionSeverity._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Specifies list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class AlertProcessingRuleActionGroupConditionSignalType(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        :param Sequence[str] values: Specifies a list of values to match for a given condition. Possible values are `Metric`, `Log`, `Unknown`, and `Health`.
        """
        AlertProcessingRuleActionGroupConditionSignalType._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Specifies a list of values to match for a given condition. Possible values are `Metric`, `Log`, `Unknown`, and `Health`.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class AlertProcessingRuleActionGroupConditionTargetResource(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        :param Sequence[str] values: A list of values to match for a given condition. The values should be valid resource IDs.
        """
        AlertProcessingRuleActionGroupConditionTargetResource._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values to match for a given condition. The values should be valid resource IDs.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class AlertProcessingRuleActionGroupConditionTargetResourceGroup(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        :param Sequence[str] values: A list of values to match for a given condition. The values should be valid resource group IDs.
        """
        AlertProcessingRuleActionGroupConditionTargetResourceGroup._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values to match for a given condition. The values should be valid resource group IDs.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class AlertProcessingRuleActionGroupConditionTargetResourceType(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        :param Sequence[str] values: A list of values to match for a given condition. The values should be valid resource types. (e.g. Microsoft.Compute/VirtualMachines)
        """
        AlertProcessingRuleActionGroupConditionTargetResourceType._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values to match for a given condition. The values should be valid resource types. (e.g. Microsoft.Compute/VirtualMachines)
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class AlertProcessingRuleActionGroupSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "effectiveFrom":
            suggest = "effective_from"
        elif key == "effectiveUntil":
            suggest = "effective_until"
        elif key == "timeZone":
            suggest = "time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertProcessingRuleActionGroupSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertProcessingRuleActionGroupSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertProcessingRuleActionGroupSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 effective_from: Optional[str] = None,
                 effective_until: Optional[str] = None,
                 recurrence: Optional['outputs.AlertProcessingRuleActionGroupScheduleRecurrence'] = None,
                 time_zone: Optional[str] = None):
        """
        :param str effective_from: Specifies the Alert Processing Rule effective start time (Y-m-d'T'H:M:S).
        :param str effective_until: Specifies the Alert Processing Rule effective end time (Y-m-d'T'H:M:S).
        :param 'AlertProcessingRuleActionGroupScheduleRecurrenceArgs' recurrence: A `recurrence` block as defined above.
        :param str time_zone: The time zone (e.g. Pacific Standard time, Eastern Standard Time). Defaults to `UTC`. [possible values are defined here](https://docs.microsoft.com/en-us/previous-versions/windows/embedded/ms912391(v=winembedded.11)).
        """
        AlertProcessingRuleActionGroupSchedule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            effective_from=effective_from,
            effective_until=effective_until,
            recurrence=recurrence,
            time_zone=time_zone,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             effective_from: Optional[str] = None,
             effective_until: Optional[str] = None,
             recurrence: Optional['outputs.AlertProcessingRuleActionGroupScheduleRecurrence'] = None,
             time_zone: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if effective_from is not None:
            _setter("effective_from", effective_from)
        if effective_until is not None:
            _setter("effective_until", effective_until)
        if recurrence is not None:
            _setter("recurrence", recurrence)
        if time_zone is not None:
            _setter("time_zone", time_zone)

    @property
    @pulumi.getter(name="effectiveFrom")
    def effective_from(self) -> Optional[str]:
        """
        Specifies the Alert Processing Rule effective start time (Y-m-d'T'H:M:S).
        """
        return pulumi.get(self, "effective_from")

    @property
    @pulumi.getter(name="effectiveUntil")
    def effective_until(self) -> Optional[str]:
        """
        Specifies the Alert Processing Rule effective end time (Y-m-d'T'H:M:S).
        """
        return pulumi.get(self, "effective_until")

    @property
    @pulumi.getter
    def recurrence(self) -> Optional['outputs.AlertProcessingRuleActionGroupScheduleRecurrence']:
        """
        A `recurrence` block as defined above.
        """
        return pulumi.get(self, "recurrence")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[str]:
        """
        The time zone (e.g. Pacific Standard time, Eastern Standard Time). Defaults to `UTC`. [possible values are defined here](https://docs.microsoft.com/en-us/previous-versions/windows/embedded/ms912391(v=winembedded.11)).
        """
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class AlertProcessingRuleActionGroupScheduleRecurrence(dict):
    def __init__(__self__, *,
                 dailies: Optional[Sequence['outputs.AlertProcessingRuleActionGroupScheduleRecurrenceDaily']] = None,
                 monthlies: Optional[Sequence['outputs.AlertProcessingRuleActionGroupScheduleRecurrenceMonthly']] = None,
                 weeklies: Optional[Sequence['outputs.AlertProcessingRuleActionGroupScheduleRecurrenceWeekly']] = None):
        """
        :param Sequence['AlertProcessingRuleActionGroupScheduleRecurrenceDailyArgs'] dailies: One or more `daily` blocks as defined above.
        :param Sequence['AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArgs'] monthlies: One or more `monthly` blocks as defined above.
        :param Sequence['AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArgs'] weeklies: One or more `weekly` blocks as defined below.
        """
        AlertProcessingRuleActionGroupScheduleRecurrence._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dailies=dailies,
            monthlies=monthlies,
            weeklies=weeklies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dailies: Optional[Sequence['outputs.AlertProcessingRuleActionGroupScheduleRecurrenceDaily']] = None,
             monthlies: Optional[Sequence['outputs.AlertProcessingRuleActionGroupScheduleRecurrenceMonthly']] = None,
             weeklies: Optional[Sequence['outputs.AlertProcessingRuleActionGroupScheduleRecurrenceWeekly']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dailies is not None:
            _setter("dailies", dailies)
        if monthlies is not None:
            _setter("monthlies", monthlies)
        if weeklies is not None:
            _setter("weeklies", weeklies)

    @property
    @pulumi.getter
    def dailies(self) -> Optional[Sequence['outputs.AlertProcessingRuleActionGroupScheduleRecurrenceDaily']]:
        """
        One or more `daily` blocks as defined above.
        """
        return pulumi.get(self, "dailies")

    @property
    @pulumi.getter
    def monthlies(self) -> Optional[Sequence['outputs.AlertProcessingRuleActionGroupScheduleRecurrenceMonthly']]:
        """
        One or more `monthly` blocks as defined above.
        """
        return pulumi.get(self, "monthlies")

    @property
    @pulumi.getter
    def weeklies(self) -> Optional[Sequence['outputs.AlertProcessingRuleActionGroupScheduleRecurrenceWeekly']]:
        """
        One or more `weekly` blocks as defined below.
        """
        return pulumi.get(self, "weeklies")


@pulumi.output_type
class AlertProcessingRuleActionGroupScheduleRecurrenceDaily(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertProcessingRuleActionGroupScheduleRecurrenceDaily. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertProcessingRuleActionGroupScheduleRecurrenceDaily.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertProcessingRuleActionGroupScheduleRecurrenceDaily.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_time: str,
                 start_time: str):
        """
        :param str end_time: Specifies the recurrence end time (H:M:S).
        :param str start_time: Specifies the recurrence start time (H:M:S).
        """
        AlertProcessingRuleActionGroupScheduleRecurrenceDaily._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end_time=end_time,
            start_time=start_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end_time: str,
             start_time: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("end_time", end_time)
        _setter("start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        Specifies the recurrence end time (H:M:S).
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Specifies the recurrence start time (H:M:S).
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class AlertProcessingRuleActionGroupScheduleRecurrenceMonthly(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "daysOfMonths":
            suggest = "days_of_months"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertProcessingRuleActionGroupScheduleRecurrenceMonthly. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertProcessingRuleActionGroupScheduleRecurrenceMonthly.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertProcessingRuleActionGroupScheduleRecurrenceMonthly.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 days_of_months: Sequence[int],
                 end_time: Optional[str] = None,
                 start_time: Optional[str] = None):
        """
        :param Sequence[int] days_of_months: Specifies a list of dayOfMonth to recurrence. Possible values are integers between `1` - `31`.
        :param str end_time: Specifies the recurrence end time (H:M:S).
        :param str start_time: Specifies the recurrence start time (H:M:S).
        """
        AlertProcessingRuleActionGroupScheduleRecurrenceMonthly._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            days_of_months=days_of_months,
            end_time=end_time,
            start_time=start_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             days_of_months: Sequence[int],
             end_time: Optional[str] = None,
             start_time: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("days_of_months", days_of_months)
        if end_time is not None:
            _setter("end_time", end_time)
        if start_time is not None:
            _setter("start_time", start_time)

    @property
    @pulumi.getter(name="daysOfMonths")
    def days_of_months(self) -> Sequence[int]:
        """
        Specifies a list of dayOfMonth to recurrence. Possible values are integers between `1` - `31`.
        """
        return pulumi.get(self, "days_of_months")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        """
        Specifies the recurrence end time (H:M:S).
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        """
        Specifies the recurrence start time (H:M:S).
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class AlertProcessingRuleActionGroupScheduleRecurrenceWeekly(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "daysOfWeeks":
            suggest = "days_of_weeks"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertProcessingRuleActionGroupScheduleRecurrenceWeekly. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertProcessingRuleActionGroupScheduleRecurrenceWeekly.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertProcessingRuleActionGroupScheduleRecurrenceWeekly.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 days_of_weeks: Sequence[str],
                 end_time: Optional[str] = None,
                 start_time: Optional[str] = None):
        """
        :param Sequence[str] days_of_weeks: Specifies a list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, and `Saturday`.
        :param str end_time: Specifies the recurrence end time (H:M:S).
        :param str start_time: Specifies the recurrence start time (H:M:S).
        """
        AlertProcessingRuleActionGroupScheduleRecurrenceWeekly._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            days_of_weeks=days_of_weeks,
            end_time=end_time,
            start_time=start_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             days_of_weeks: Sequence[str],
             end_time: Optional[str] = None,
             start_time: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("days_of_weeks", days_of_weeks)
        if end_time is not None:
            _setter("end_time", end_time)
        if start_time is not None:
            _setter("start_time", start_time)

    @property
    @pulumi.getter(name="daysOfWeeks")
    def days_of_weeks(self) -> Sequence[str]:
        """
        Specifies a list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, and `Saturday`.
        """
        return pulumi.get(self, "days_of_weeks")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        """
        Specifies the recurrence end time (H:M:S).
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        """
        Specifies the recurrence start time (H:M:S).
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class AlertProcessingRuleSuppressionCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertContext":
            suggest = "alert_context"
        elif key == "alertRuleId":
            suggest = "alert_rule_id"
        elif key == "alertRuleName":
            suggest = "alert_rule_name"
        elif key == "monitorCondition":
            suggest = "monitor_condition"
        elif key == "monitorService":
            suggest = "monitor_service"
        elif key == "signalType":
            suggest = "signal_type"
        elif key == "targetResource":
            suggest = "target_resource"
        elif key == "targetResourceGroup":
            suggest = "target_resource_group"
        elif key == "targetResourceType":
            suggest = "target_resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertProcessingRuleSuppressionCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertProcessingRuleSuppressionCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertProcessingRuleSuppressionCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_context: Optional['outputs.AlertProcessingRuleSuppressionConditionAlertContext'] = None,
                 alert_rule_id: Optional['outputs.AlertProcessingRuleSuppressionConditionAlertRuleId'] = None,
                 alert_rule_name: Optional['outputs.AlertProcessingRuleSuppressionConditionAlertRuleName'] = None,
                 description: Optional['outputs.AlertProcessingRuleSuppressionConditionDescription'] = None,
                 monitor_condition: Optional['outputs.AlertProcessingRuleSuppressionConditionMonitorCondition'] = None,
                 monitor_service: Optional['outputs.AlertProcessingRuleSuppressionConditionMonitorService'] = None,
                 severity: Optional['outputs.AlertProcessingRuleSuppressionConditionSeverity'] = None,
                 signal_type: Optional['outputs.AlertProcessingRuleSuppressionConditionSignalType'] = None,
                 target_resource: Optional['outputs.AlertProcessingRuleSuppressionConditionTargetResource'] = None,
                 target_resource_group: Optional['outputs.AlertProcessingRuleSuppressionConditionTargetResourceGroup'] = None,
                 target_resource_type: Optional['outputs.AlertProcessingRuleSuppressionConditionTargetResourceType'] = None):
        """
        :param 'AlertProcessingRuleSuppressionConditionAlertContextArgs' alert_context: A `alert_context` block as defined above.
        :param 'AlertProcessingRuleSuppressionConditionAlertRuleIdArgs' alert_rule_id: A `alert_rule_id` block as defined above.
        :param 'AlertProcessingRuleSuppressionConditionAlertRuleNameArgs' alert_rule_name: A `alert_rule_name` block as defined above.
        :param 'AlertProcessingRuleSuppressionConditionDescriptionArgs' description: A `description` block as defined below.
        :param 'AlertProcessingRuleSuppressionConditionMonitorConditionArgs' monitor_condition: A `monitor_condition` block as defined below.
        :param 'AlertProcessingRuleSuppressionConditionMonitorServiceArgs' monitor_service: A `monitor_service` block as defined below.
        :param 'AlertProcessingRuleSuppressionConditionSeverityArgs' severity: A `severity` block as defined below.
        :param 'AlertProcessingRuleSuppressionConditionSignalTypeArgs' signal_type: A `signal_type` block as defined below.
        :param 'AlertProcessingRuleSuppressionConditionTargetResourceArgs' target_resource: A `target_resource` block as defined below.
        :param 'AlertProcessingRuleSuppressionConditionTargetResourceGroupArgs' target_resource_group: A `target_resource_group` block as defined below.
        :param 'AlertProcessingRuleSuppressionConditionTargetResourceTypeArgs' target_resource_type: A `target_resource_type` block as defined below.
        """
        AlertProcessingRuleSuppressionCondition._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alert_context=alert_context,
            alert_rule_id=alert_rule_id,
            alert_rule_name=alert_rule_name,
            description=description,
            monitor_condition=monitor_condition,
            monitor_service=monitor_service,
            severity=severity,
            signal_type=signal_type,
            target_resource=target_resource,
            target_resource_group=target_resource_group,
            target_resource_type=target_resource_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alert_context: Optional['outputs.AlertProcessingRuleSuppressionConditionAlertContext'] = None,
             alert_rule_id: Optional['outputs.AlertProcessingRuleSuppressionConditionAlertRuleId'] = None,
             alert_rule_name: Optional['outputs.AlertProcessingRuleSuppressionConditionAlertRuleName'] = None,
             description: Optional['outputs.AlertProcessingRuleSuppressionConditionDescription'] = None,
             monitor_condition: Optional['outputs.AlertProcessingRuleSuppressionConditionMonitorCondition'] = None,
             monitor_service: Optional['outputs.AlertProcessingRuleSuppressionConditionMonitorService'] = None,
             severity: Optional['outputs.AlertProcessingRuleSuppressionConditionSeverity'] = None,
             signal_type: Optional['outputs.AlertProcessingRuleSuppressionConditionSignalType'] = None,
             target_resource: Optional['outputs.AlertProcessingRuleSuppressionConditionTargetResource'] = None,
             target_resource_group: Optional['outputs.AlertProcessingRuleSuppressionConditionTargetResourceGroup'] = None,
             target_resource_type: Optional['outputs.AlertProcessingRuleSuppressionConditionTargetResourceType'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if alert_context is not None:
            _setter("alert_context", alert_context)
        if alert_rule_id is not None:
            _setter("alert_rule_id", alert_rule_id)
        if alert_rule_name is not None:
            _setter("alert_rule_name", alert_rule_name)
        if description is not None:
            _setter("description", description)
        if monitor_condition is not None:
            _setter("monitor_condition", monitor_condition)
        if monitor_service is not None:
            _setter("monitor_service", monitor_service)
        if severity is not None:
            _setter("severity", severity)
        if signal_type is not None:
            _setter("signal_type", signal_type)
        if target_resource is not None:
            _setter("target_resource", target_resource)
        if target_resource_group is not None:
            _setter("target_resource_group", target_resource_group)
        if target_resource_type is not None:
            _setter("target_resource_type", target_resource_type)

    @property
    @pulumi.getter(name="alertContext")
    def alert_context(self) -> Optional['outputs.AlertProcessingRuleSuppressionConditionAlertContext']:
        """
        A `alert_context` block as defined above.
        """
        return pulumi.get(self, "alert_context")

    @property
    @pulumi.getter(name="alertRuleId")
    def alert_rule_id(self) -> Optional['outputs.AlertProcessingRuleSuppressionConditionAlertRuleId']:
        """
        A `alert_rule_id` block as defined above.
        """
        return pulumi.get(self, "alert_rule_id")

    @property
    @pulumi.getter(name="alertRuleName")
    def alert_rule_name(self) -> Optional['outputs.AlertProcessingRuleSuppressionConditionAlertRuleName']:
        """
        A `alert_rule_name` block as defined above.
        """
        return pulumi.get(self, "alert_rule_name")

    @property
    @pulumi.getter
    def description(self) -> Optional['outputs.AlertProcessingRuleSuppressionConditionDescription']:
        """
        A `description` block as defined below.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="monitorCondition")
    def monitor_condition(self) -> Optional['outputs.AlertProcessingRuleSuppressionConditionMonitorCondition']:
        """
        A `monitor_condition` block as defined below.
        """
        return pulumi.get(self, "monitor_condition")

    @property
    @pulumi.getter(name="monitorService")
    def monitor_service(self) -> Optional['outputs.AlertProcessingRuleSuppressionConditionMonitorService']:
        """
        A `monitor_service` block as defined below.
        """
        return pulumi.get(self, "monitor_service")

    @property
    @pulumi.getter
    def severity(self) -> Optional['outputs.AlertProcessingRuleSuppressionConditionSeverity']:
        """
        A `severity` block as defined below.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter(name="signalType")
    def signal_type(self) -> Optional['outputs.AlertProcessingRuleSuppressionConditionSignalType']:
        """
        A `signal_type` block as defined below.
        """
        return pulumi.get(self, "signal_type")

    @property
    @pulumi.getter(name="targetResource")
    def target_resource(self) -> Optional['outputs.AlertProcessingRuleSuppressionConditionTargetResource']:
        """
        A `target_resource` block as defined below.
        """
        return pulumi.get(self, "target_resource")

    @property
    @pulumi.getter(name="targetResourceGroup")
    def target_resource_group(self) -> Optional['outputs.AlertProcessingRuleSuppressionConditionTargetResourceGroup']:
        """
        A `target_resource_group` block as defined below.
        """
        return pulumi.get(self, "target_resource_group")

    @property
    @pulumi.getter(name="targetResourceType")
    def target_resource_type(self) -> Optional['outputs.AlertProcessingRuleSuppressionConditionTargetResourceType']:
        """
        A `target_resource_type` block as defined below.
        """
        return pulumi.get(self, "target_resource_type")


@pulumi.output_type
class AlertProcessingRuleSuppressionConditionAlertContext(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        :param Sequence[str] values: Specifies a list of values to match for a given condition.
        """
        AlertProcessingRuleSuppressionConditionAlertContext._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Specifies a list of values to match for a given condition.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class AlertProcessingRuleSuppressionConditionAlertRuleId(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        :param Sequence[str] values: Specifies a list of values to match for a given condition.
        """
        AlertProcessingRuleSuppressionConditionAlertRuleId._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Specifies a list of values to match for a given condition.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class AlertProcessingRuleSuppressionConditionAlertRuleName(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        :param Sequence[str] values: Specifies a list of values to match for a given condition.
        """
        AlertProcessingRuleSuppressionConditionAlertRuleName._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Specifies a list of values to match for a given condition.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class AlertProcessingRuleSuppressionConditionDescription(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        :param Sequence[str] values: Specifies a list of values to match for a given condition.
        """
        AlertProcessingRuleSuppressionConditionDescription._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Specifies a list of values to match for a given condition.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class AlertProcessingRuleSuppressionConditionMonitorCondition(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        :param Sequence[str] values: Specifies a list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
        """
        AlertProcessingRuleSuppressionConditionMonitorCondition._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Specifies a list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class AlertProcessingRuleSuppressionConditionMonitorService(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        :param Sequence[str] values: A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Azure Stack Edge`, `Azure Stack Hub`, `Custom`, `Data Box Gateway`, `Health Platform`, `Log Alerts V2`, `Log Analytics`, `Platform`, `Prometheus`, `Resource Health`, `Smart Detector`, and `VM Insights - Health`.
        """
        AlertProcessingRuleSuppressionConditionMonitorService._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Azure Stack Edge`, `Azure Stack Hub`, `Custom`, `Data Box Gateway`, `Health Platform`, `Log Alerts V2`, `Log Analytics`, `Platform`, `Prometheus`, `Resource Health`, `Smart Detector`, and `VM Insights - Health`.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class AlertProcessingRuleSuppressionConditionSeverity(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        :param Sequence[str] values: Specifies list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
        """
        AlertProcessingRuleSuppressionConditionSeverity._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Specifies list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class AlertProcessingRuleSuppressionConditionSignalType(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        :param Sequence[str] values: Specifies a list of values to match for a given condition. Possible values are `Metric`, `Log`, `Unknown`, and `Health`.
        """
        AlertProcessingRuleSuppressionConditionSignalType._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Specifies a list of values to match for a given condition. Possible values are `Metric`, `Log`, `Unknown`, and `Health`.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class AlertProcessingRuleSuppressionConditionTargetResource(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        :param Sequence[str] values: A list of values to match for a given condition. The values should be valid resource IDs.
        """
        AlertProcessingRuleSuppressionConditionTargetResource._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values to match for a given condition. The values should be valid resource IDs.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class AlertProcessingRuleSuppressionConditionTargetResourceGroup(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        :param Sequence[str] values: A list of values to match for a given condition. The values should be valid resource group IDs.
        """
        AlertProcessingRuleSuppressionConditionTargetResourceGroup._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values to match for a given condition. The values should be valid resource group IDs.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class AlertProcessingRuleSuppressionConditionTargetResourceType(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str operator: The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        :param Sequence[str] values: A list of values to match for a given condition. The values should be valid resource types. (e.g. Microsoft.Compute/VirtualMachines)
        """
        AlertProcessingRuleSuppressionConditionTargetResourceType._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values to match for a given condition. The values should be valid resource types. (e.g. Microsoft.Compute/VirtualMachines)
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class AlertProcessingRuleSuppressionSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "effectiveFrom":
            suggest = "effective_from"
        elif key == "effectiveUntil":
            suggest = "effective_until"
        elif key == "timeZone":
            suggest = "time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertProcessingRuleSuppressionSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertProcessingRuleSuppressionSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertProcessingRuleSuppressionSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 effective_from: Optional[str] = None,
                 effective_until: Optional[str] = None,
                 recurrence: Optional['outputs.AlertProcessingRuleSuppressionScheduleRecurrence'] = None,
                 time_zone: Optional[str] = None):
        """
        :param str effective_from: Specifies the Alert Processing Rule effective start time (Y-m-d'T'H:M:S).
        :param str effective_until: Specifies the Alert Processing Rule effective end time (Y-m-d'T'H:M:S).
        :param 'AlertProcessingRuleSuppressionScheduleRecurrenceArgs' recurrence: A `recurrence` block as defined above.
        :param str time_zone: The time zone (e.g. Pacific Standard time, Eastern Standard Time). Defaults to `UTC`. [possible values are defined here](https://docs.microsoft.com/en-us/previous-versions/windows/embedded/ms912391(v=winembedded.11)).
        """
        AlertProcessingRuleSuppressionSchedule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            effective_from=effective_from,
            effective_until=effective_until,
            recurrence=recurrence,
            time_zone=time_zone,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             effective_from: Optional[str] = None,
             effective_until: Optional[str] = None,
             recurrence: Optional['outputs.AlertProcessingRuleSuppressionScheduleRecurrence'] = None,
             time_zone: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if effective_from is not None:
            _setter("effective_from", effective_from)
        if effective_until is not None:
            _setter("effective_until", effective_until)
        if recurrence is not None:
            _setter("recurrence", recurrence)
        if time_zone is not None:
            _setter("time_zone", time_zone)

    @property
    @pulumi.getter(name="effectiveFrom")
    def effective_from(self) -> Optional[str]:
        """
        Specifies the Alert Processing Rule effective start time (Y-m-d'T'H:M:S).
        """
        return pulumi.get(self, "effective_from")

    @property
    @pulumi.getter(name="effectiveUntil")
    def effective_until(self) -> Optional[str]:
        """
        Specifies the Alert Processing Rule effective end time (Y-m-d'T'H:M:S).
        """
        return pulumi.get(self, "effective_until")

    @property
    @pulumi.getter
    def recurrence(self) -> Optional['outputs.AlertProcessingRuleSuppressionScheduleRecurrence']:
        """
        A `recurrence` block as defined above.
        """
        return pulumi.get(self, "recurrence")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[str]:
        """
        The time zone (e.g. Pacific Standard time, Eastern Standard Time). Defaults to `UTC`. [possible values are defined here](https://docs.microsoft.com/en-us/previous-versions/windows/embedded/ms912391(v=winembedded.11)).
        """
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class AlertProcessingRuleSuppressionScheduleRecurrence(dict):
    def __init__(__self__, *,
                 dailies: Optional[Sequence['outputs.AlertProcessingRuleSuppressionScheduleRecurrenceDaily']] = None,
                 monthlies: Optional[Sequence['outputs.AlertProcessingRuleSuppressionScheduleRecurrenceMonthly']] = None,
                 weeklies: Optional[Sequence['outputs.AlertProcessingRuleSuppressionScheduleRecurrenceWeekly']] = None):
        """
        :param Sequence['AlertProcessingRuleSuppressionScheduleRecurrenceDailyArgs'] dailies: One or more `daily` blocks as defined above.
        :param Sequence['AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArgs'] monthlies: One or more `monthly` blocks as defined above.
        :param Sequence['AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArgs'] weeklies: One or more `weekly` blocks as defined below.
        """
        AlertProcessingRuleSuppressionScheduleRecurrence._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dailies=dailies,
            monthlies=monthlies,
            weeklies=weeklies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dailies: Optional[Sequence['outputs.AlertProcessingRuleSuppressionScheduleRecurrenceDaily']] = None,
             monthlies: Optional[Sequence['outputs.AlertProcessingRuleSuppressionScheduleRecurrenceMonthly']] = None,
             weeklies: Optional[Sequence['outputs.AlertProcessingRuleSuppressionScheduleRecurrenceWeekly']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dailies is not None:
            _setter("dailies", dailies)
        if monthlies is not None:
            _setter("monthlies", monthlies)
        if weeklies is not None:
            _setter("weeklies", weeklies)

    @property
    @pulumi.getter
    def dailies(self) -> Optional[Sequence['outputs.AlertProcessingRuleSuppressionScheduleRecurrenceDaily']]:
        """
        One or more `daily` blocks as defined above.
        """
        return pulumi.get(self, "dailies")

    @property
    @pulumi.getter
    def monthlies(self) -> Optional[Sequence['outputs.AlertProcessingRuleSuppressionScheduleRecurrenceMonthly']]:
        """
        One or more `monthly` blocks as defined above.
        """
        return pulumi.get(self, "monthlies")

    @property
    @pulumi.getter
    def weeklies(self) -> Optional[Sequence['outputs.AlertProcessingRuleSuppressionScheduleRecurrenceWeekly']]:
        """
        One or more `weekly` blocks as defined below.
        """
        return pulumi.get(self, "weeklies")


@pulumi.output_type
class AlertProcessingRuleSuppressionScheduleRecurrenceDaily(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertProcessingRuleSuppressionScheduleRecurrenceDaily. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertProcessingRuleSuppressionScheduleRecurrenceDaily.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertProcessingRuleSuppressionScheduleRecurrenceDaily.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_time: str,
                 start_time: str):
        """
        :param str end_time: Specifies the recurrence end time (H:M:S).
        :param str start_time: Specifies the recurrence start time (H:M:S).
        """
        AlertProcessingRuleSuppressionScheduleRecurrenceDaily._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end_time=end_time,
            start_time=start_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end_time: str,
             start_time: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("end_time", end_time)
        _setter("start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        Specifies the recurrence end time (H:M:S).
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Specifies the recurrence start time (H:M:S).
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class AlertProcessingRuleSuppressionScheduleRecurrenceMonthly(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "daysOfMonths":
            suggest = "days_of_months"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertProcessingRuleSuppressionScheduleRecurrenceMonthly. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertProcessingRuleSuppressionScheduleRecurrenceMonthly.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertProcessingRuleSuppressionScheduleRecurrenceMonthly.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 days_of_months: Sequence[int],
                 end_time: Optional[str] = None,
                 start_time: Optional[str] = None):
        """
        :param Sequence[int] days_of_months: Specifies a list of dayOfMonth to recurrence. Possible values are integers between `1` - `31`.
        :param str end_time: Specifies the recurrence end time (H:M:S).
        :param str start_time: Specifies the recurrence start time (H:M:S).
        """
        AlertProcessingRuleSuppressionScheduleRecurrenceMonthly._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            days_of_months=days_of_months,
            end_time=end_time,
            start_time=start_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             days_of_months: Sequence[int],
             end_time: Optional[str] = None,
             start_time: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("days_of_months", days_of_months)
        if end_time is not None:
            _setter("end_time", end_time)
        if start_time is not None:
            _setter("start_time", start_time)

    @property
    @pulumi.getter(name="daysOfMonths")
    def days_of_months(self) -> Sequence[int]:
        """
        Specifies a list of dayOfMonth to recurrence. Possible values are integers between `1` - `31`.
        """
        return pulumi.get(self, "days_of_months")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        """
        Specifies the recurrence end time (H:M:S).
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        """
        Specifies the recurrence start time (H:M:S).
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class AlertProcessingRuleSuppressionScheduleRecurrenceWeekly(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "daysOfWeeks":
            suggest = "days_of_weeks"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertProcessingRuleSuppressionScheduleRecurrenceWeekly. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertProcessingRuleSuppressionScheduleRecurrenceWeekly.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertProcessingRuleSuppressionScheduleRecurrenceWeekly.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 days_of_weeks: Sequence[str],
                 end_time: Optional[str] = None,
                 start_time: Optional[str] = None):
        """
        :param Sequence[str] days_of_weeks: Specifies a list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, and `Saturday`.
        :param str end_time: Specifies the recurrence end time (H:M:S).
        :param str start_time: Specifies the recurrence start time (H:M:S).
        """
        AlertProcessingRuleSuppressionScheduleRecurrenceWeekly._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            days_of_weeks=days_of_weeks,
            end_time=end_time,
            start_time=start_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             days_of_weeks: Sequence[str],
             end_time: Optional[str] = None,
             start_time: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("days_of_weeks", days_of_weeks)
        if end_time is not None:
            _setter("end_time", end_time)
        if start_time is not None:
            _setter("start_time", start_time)

    @property
    @pulumi.getter(name="daysOfWeeks")
    def days_of_weeks(self) -> Sequence[str]:
        """
        Specifies a list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, and `Saturday`.
        """
        return pulumi.get(self, "days_of_weeks")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        """
        Specifies the recurrence end time (H:M:S).
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        """
        Specifies the recurrence start time (H:M:S).
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class AlertPrometheusRuleGroupRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertResolution":
            suggest = "alert_resolution"
        elif key == "for":
            suggest = "for_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertPrometheusRuleGroupRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertPrometheusRuleGroupRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertPrometheusRuleGroupRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression: str,
                 actions: Optional[Sequence['outputs.AlertPrometheusRuleGroupRuleAction']] = None,
                 alert: Optional[str] = None,
                 alert_resolution: Optional['outputs.AlertPrometheusRuleGroupRuleAlertResolution'] = None,
                 annotations: Optional[Mapping[str, str]] = None,
                 enabled: Optional[bool] = None,
                 for_: Optional[str] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 record: Optional[str] = None,
                 severity: Optional[int] = None):
        """
        :param str expression: Specifies the Prometheus Query Language expression to evaluate. For more details see [this doc](https://prometheus.io/docs/prometheus/latest/querying/basics). Evaluate at the period given by `interval` and record the result as a new set of time series with the metric name given by `record`.
        :param Sequence['AlertPrometheusRuleGroupRuleActionArgs'] actions: An `action` block as defined below.
        :param str alert: Specifies the Alert rule name.
        :param 'AlertPrometheusRuleGroupRuleAlertResolutionArgs' alert_resolution: An `alert_resolution` block as defined below.
        :param Mapping[str, str] annotations: Specifies a set of informational labels that can be used to store longer additional information such as alert descriptions or runbook links.
        :param bool enabled: Is this rule enabled? Possible values are `true` and `false`.
        :param str for_: Specifies the amount of time alert must be active before firing, represented in ISO 8601 duration format.
        :param Mapping[str, str] labels: Specifies the labels to add or overwrite before storing the result.
        :param str record: Specifies the recorded metrics name.
        :param int severity: Specifies the severity of the alerts fired by the rule. Possible values are between 0 and 4.
        """
        AlertPrometheusRuleGroupRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            actions=actions,
            alert=alert,
            alert_resolution=alert_resolution,
            annotations=annotations,
            enabled=enabled,
            for_=for_,
            labels=labels,
            record=record,
            severity=severity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: str,
             actions: Optional[Sequence['outputs.AlertPrometheusRuleGroupRuleAction']] = None,
             alert: Optional[str] = None,
             alert_resolution: Optional['outputs.AlertPrometheusRuleGroupRuleAlertResolution'] = None,
             annotations: Optional[Mapping[str, str]] = None,
             enabled: Optional[bool] = None,
             for_: Optional[str] = None,
             labels: Optional[Mapping[str, str]] = None,
             record: Optional[str] = None,
             severity: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        if actions is not None:
            _setter("actions", actions)
        if alert is not None:
            _setter("alert", alert)
        if alert_resolution is not None:
            _setter("alert_resolution", alert_resolution)
        if annotations is not None:
            _setter("annotations", annotations)
        if enabled is not None:
            _setter("enabled", enabled)
        if for_ is not None:
            _setter("for_", for_)
        if labels is not None:
            _setter("labels", labels)
        if record is not None:
            _setter("record", record)
        if severity is not None:
            _setter("severity", severity)

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Specifies the Prometheus Query Language expression to evaluate. For more details see [this doc](https://prometheus.io/docs/prometheus/latest/querying/basics). Evaluate at the period given by `interval` and record the result as a new set of time series with the metric name given by `record`.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.AlertPrometheusRuleGroupRuleAction']]:
        """
        An `action` block as defined below.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def alert(self) -> Optional[str]:
        """
        Specifies the Alert rule name.
        """
        return pulumi.get(self, "alert")

    @property
    @pulumi.getter(name="alertResolution")
    def alert_resolution(self) -> Optional['outputs.AlertPrometheusRuleGroupRuleAlertResolution']:
        """
        An `alert_resolution` block as defined below.
        """
        return pulumi.get(self, "alert_resolution")

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        Specifies a set of informational labels that can be used to store longer additional information such as alert descriptions or runbook links.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Is this rule enabled? Possible values are `true` and `false`.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="for")
    def for_(self) -> Optional[str]:
        """
        Specifies the amount of time alert must be active before firing, represented in ISO 8601 duration format.
        """
        return pulumi.get(self, "for_")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Specifies the labels to add or overwrite before storing the result.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def record(self) -> Optional[str]:
        """
        Specifies the recorded metrics name.
        """
        return pulumi.get(self, "record")

    @property
    @pulumi.getter
    def severity(self) -> Optional[int]:
        """
        Specifies the severity of the alerts fired by the rule. Possible values are between 0 and 4.
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class AlertPrometheusRuleGroupRuleAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionGroupId":
            suggest = "action_group_id"
        elif key == "actionProperties":
            suggest = "action_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertPrometheusRuleGroupRuleAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertPrometheusRuleGroupRuleAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertPrometheusRuleGroupRuleAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_group_id: str,
                 action_properties: Optional[Mapping[str, str]] = None):
        """
        :param str action_group_id: Specifies the resource id of the monitor action group.
        :param Mapping[str, str] action_properties: Specifies the properties of an action group object.
               
               > **Note:** `action_properties` can only be configured for IcM Connector Action Groups for now. Other public features will be supported in the future.
        """
        AlertPrometheusRuleGroupRuleAction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action_group_id=action_group_id,
            action_properties=action_properties,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action_group_id: str,
             action_properties: Optional[Mapping[str, str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action_group_id", action_group_id)
        if action_properties is not None:
            _setter("action_properties", action_properties)

    @property
    @pulumi.getter(name="actionGroupId")
    def action_group_id(self) -> str:
        """
        Specifies the resource id of the monitor action group.
        """
        return pulumi.get(self, "action_group_id")

    @property
    @pulumi.getter(name="actionProperties")
    def action_properties(self) -> Optional[Mapping[str, str]]:
        """
        Specifies the properties of an action group object.

        > **Note:** `action_properties` can only be configured for IcM Connector Action Groups for now. Other public features will be supported in the future.
        """
        return pulumi.get(self, "action_properties")


@pulumi.output_type
class AlertPrometheusRuleGroupRuleAlertResolution(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoResolved":
            suggest = "auto_resolved"
        elif key == "timeToResolve":
            suggest = "time_to_resolve"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertPrometheusRuleGroupRuleAlertResolution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertPrometheusRuleGroupRuleAlertResolution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertPrometheusRuleGroupRuleAlertResolution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_resolved: Optional[bool] = None,
                 time_to_resolve: Optional[str] = None):
        """
        :param bool auto_resolved: Is the alert auto-resolution? Possible values are `true` and `false`.
        :param str time_to_resolve: Specifies the alert auto-resolution interval, represented in ISO 8601 duration format.
        """
        AlertPrometheusRuleGroupRuleAlertResolution._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auto_resolved=auto_resolved,
            time_to_resolve=time_to_resolve,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auto_resolved: Optional[bool] = None,
             time_to_resolve: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if auto_resolved is not None:
            _setter("auto_resolved", auto_resolved)
        if time_to_resolve is not None:
            _setter("time_to_resolve", time_to_resolve)

    @property
    @pulumi.getter(name="autoResolved")
    def auto_resolved(self) -> Optional[bool]:
        """
        Is the alert auto-resolution? Possible values are `true` and `false`.
        """
        return pulumi.get(self, "auto_resolved")

    @property
    @pulumi.getter(name="timeToResolve")
    def time_to_resolve(self) -> Optional[str]:
        """
        Specifies the alert auto-resolution interval, represented in ISO 8601 duration format.
        """
        return pulumi.get(self, "time_to_resolve")


@pulumi.output_type
class AutoscaleSettingNotification(dict):
    def __init__(__self__, *,
                 email: Optional['outputs.AutoscaleSettingNotificationEmail'] = None,
                 webhooks: Optional[Sequence['outputs.AutoscaleSettingNotificationWebhook']] = None):
        """
        :param 'AutoscaleSettingNotificationEmailArgs' email: A `email` block as defined below.
        :param Sequence['AutoscaleSettingNotificationWebhookArgs'] webhooks: One or more `webhook` blocks as defined below.
        """
        AutoscaleSettingNotification._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            email=email,
            webhooks=webhooks,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             email: Optional['outputs.AutoscaleSettingNotificationEmail'] = None,
             webhooks: Optional[Sequence['outputs.AutoscaleSettingNotificationWebhook']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if email is not None:
            _setter("email", email)
        if webhooks is not None:
            _setter("webhooks", webhooks)

    @property
    @pulumi.getter
    def email(self) -> Optional['outputs.AutoscaleSettingNotificationEmail']:
        """
        A `email` block as defined below.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def webhooks(self) -> Optional[Sequence['outputs.AutoscaleSettingNotificationWebhook']]:
        """
        One or more `webhook` blocks as defined below.
        """
        return pulumi.get(self, "webhooks")


@pulumi.output_type
class AutoscaleSettingNotificationEmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customEmails":
            suggest = "custom_emails"
        elif key == "sendToSubscriptionAdministrator":
            suggest = "send_to_subscription_administrator"
        elif key == "sendToSubscriptionCoAdministrator":
            suggest = "send_to_subscription_co_administrator"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoscaleSettingNotificationEmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoscaleSettingNotificationEmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoscaleSettingNotificationEmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_emails: Optional[Sequence[str]] = None,
                 send_to_subscription_administrator: Optional[bool] = None,
                 send_to_subscription_co_administrator: Optional[bool] = None):
        """
        :param Sequence[str] custom_emails: Specifies a list of custom email addresses to which the email notifications will be sent.
        :param bool send_to_subscription_administrator: Should email notifications be sent to the subscription administrator? Defaults to `false`.
        :param bool send_to_subscription_co_administrator: Should email notifications be sent to the subscription co-administrator? Defaults to `false`.
        """
        AutoscaleSettingNotificationEmail._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_emails=custom_emails,
            send_to_subscription_administrator=send_to_subscription_administrator,
            send_to_subscription_co_administrator=send_to_subscription_co_administrator,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_emails: Optional[Sequence[str]] = None,
             send_to_subscription_administrator: Optional[bool] = None,
             send_to_subscription_co_administrator: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_emails is not None:
            _setter("custom_emails", custom_emails)
        if send_to_subscription_administrator is not None:
            _setter("send_to_subscription_administrator", send_to_subscription_administrator)
        if send_to_subscription_co_administrator is not None:
            _setter("send_to_subscription_co_administrator", send_to_subscription_co_administrator)

    @property
    @pulumi.getter(name="customEmails")
    def custom_emails(self) -> Optional[Sequence[str]]:
        """
        Specifies a list of custom email addresses to which the email notifications will be sent.
        """
        return pulumi.get(self, "custom_emails")

    @property
    @pulumi.getter(name="sendToSubscriptionAdministrator")
    def send_to_subscription_administrator(self) -> Optional[bool]:
        """
        Should email notifications be sent to the subscription administrator? Defaults to `false`.
        """
        return pulumi.get(self, "send_to_subscription_administrator")

    @property
    @pulumi.getter(name="sendToSubscriptionCoAdministrator")
    def send_to_subscription_co_administrator(self) -> Optional[bool]:
        """
        Should email notifications be sent to the subscription co-administrator? Defaults to `false`.
        """
        return pulumi.get(self, "send_to_subscription_co_administrator")


@pulumi.output_type
class AutoscaleSettingNotificationWebhook(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceUri":
            suggest = "service_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoscaleSettingNotificationWebhook. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoscaleSettingNotificationWebhook.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoscaleSettingNotificationWebhook.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_uri: str,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str service_uri: The HTTPS URI which should receive scale notifications.
        :param Mapping[str, str] properties: A map of settings.
        """
        AutoscaleSettingNotificationWebhook._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            service_uri=service_uri,
            properties=properties,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             service_uri: str,
             properties: Optional[Mapping[str, str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("service_uri", service_uri)
        if properties is not None:
            _setter("properties", properties)

    @property
    @pulumi.getter(name="serviceUri")
    def service_uri(self) -> str:
        """
        The HTTPS URI which should receive scale notifications.
        """
        return pulumi.get(self, "service_uri")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A map of settings.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class AutoscaleSettingPredictive(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scaleMode":
            suggest = "scale_mode"
        elif key == "lookAheadTime":
            suggest = "look_ahead_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoscaleSettingPredictive. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoscaleSettingPredictive.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoscaleSettingPredictive.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scale_mode: str,
                 look_ahead_time: Optional[str] = None):
        """
        :param str scale_mode: Specifies the predictive scale mode. Possible values are `Enabled` or `ForecastOnly`.
        :param str look_ahead_time: Specifies the amount of time by which instances are launched in advance. It must be between `PT1M` and `PT1H` in ISO 8601 format.
        """
        AutoscaleSettingPredictive._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            scale_mode=scale_mode,
            look_ahead_time=look_ahead_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             scale_mode: str,
             look_ahead_time: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("scale_mode", scale_mode)
        if look_ahead_time is not None:
            _setter("look_ahead_time", look_ahead_time)

    @property
    @pulumi.getter(name="scaleMode")
    def scale_mode(self) -> str:
        """
        Specifies the predictive scale mode. Possible values are `Enabled` or `ForecastOnly`.
        """
        return pulumi.get(self, "scale_mode")

    @property
    @pulumi.getter(name="lookAheadTime")
    def look_ahead_time(self) -> Optional[str]:
        """
        Specifies the amount of time by which instances are launched in advance. It must be between `PT1M` and `PT1H` in ISO 8601 format.
        """
        return pulumi.get(self, "look_ahead_time")


@pulumi.output_type
class AutoscaleSettingProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fixedDate":
            suggest = "fixed_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoscaleSettingProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoscaleSettingProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoscaleSettingProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capacity: 'outputs.AutoscaleSettingProfileCapacity',
                 name: str,
                 fixed_date: Optional['outputs.AutoscaleSettingProfileFixedDate'] = None,
                 recurrence: Optional['outputs.AutoscaleSettingProfileRecurrence'] = None,
                 rules: Optional[Sequence['outputs.AutoscaleSettingProfileRule']] = None):
        """
        :param 'AutoscaleSettingProfileCapacityArgs' capacity: A `capacity` block as defined below.
        :param str name: Specifies the name of the profile.
        :param 'AutoscaleSettingProfileFixedDateArgs' fixed_date: A `fixed_date` block as defined below. This cannot be specified if a `recurrence` block is specified.
        :param 'AutoscaleSettingProfileRecurrenceArgs' recurrence: A `recurrence` block as defined below. This cannot be specified if a `fixed_date` block is specified.
        :param Sequence['AutoscaleSettingProfileRuleArgs'] rules: One or more (up to 10) `rule` blocks as defined below.
        """
        AutoscaleSettingProfile._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            capacity=capacity,
            name=name,
            fixed_date=fixed_date,
            recurrence=recurrence,
            rules=rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             capacity: 'outputs.AutoscaleSettingProfileCapacity',
             name: str,
             fixed_date: Optional['outputs.AutoscaleSettingProfileFixedDate'] = None,
             recurrence: Optional['outputs.AutoscaleSettingProfileRecurrence'] = None,
             rules: Optional[Sequence['outputs.AutoscaleSettingProfileRule']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("capacity", capacity)
        _setter("name", name)
        if fixed_date is not None:
            _setter("fixed_date", fixed_date)
        if recurrence is not None:
            _setter("recurrence", recurrence)
        if rules is not None:
            _setter("rules", rules)

    @property
    @pulumi.getter
    def capacity(self) -> 'outputs.AutoscaleSettingProfileCapacity':
        """
        A `capacity` block as defined below.
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the profile.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="fixedDate")
    def fixed_date(self) -> Optional['outputs.AutoscaleSettingProfileFixedDate']:
        """
        A `fixed_date` block as defined below. This cannot be specified if a `recurrence` block is specified.
        """
        return pulumi.get(self, "fixed_date")

    @property
    @pulumi.getter
    def recurrence(self) -> Optional['outputs.AutoscaleSettingProfileRecurrence']:
        """
        A `recurrence` block as defined below. This cannot be specified if a `fixed_date` block is specified.
        """
        return pulumi.get(self, "recurrence")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.AutoscaleSettingProfileRule']]:
        """
        One or more (up to 10) `rule` blocks as defined below.
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class AutoscaleSettingProfileCapacity(dict):
    def __init__(__self__, *,
                 default: int,
                 maximum: int,
                 minimum: int):
        """
        :param int default: The number of instances that are available for scaling if metrics are not available for evaluation. The default is only used if the current instance count is lower than the default. Valid values are between `0` and `1000`.
        :param int maximum: The maximum number of instances for this resource. Valid values are between `0` and `1000`.
               
               > **NOTE:** The maximum number of instances is also limited by the amount of Cores available in the subscription.
        :param int minimum: The minimum number of instances for this resource. Valid values are between `0` and `1000`.
        """
        AutoscaleSettingProfileCapacity._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default=default,
            maximum=maximum,
            minimum=minimum,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default: int,
             maximum: int,
             minimum: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("default", default)
        _setter("maximum", maximum)
        _setter("minimum", minimum)

    @property
    @pulumi.getter
    def default(self) -> int:
        """
        The number of instances that are available for scaling if metrics are not available for evaluation. The default is only used if the current instance count is lower than the default. Valid values are between `0` and `1000`.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def maximum(self) -> int:
        """
        The maximum number of instances for this resource. Valid values are between `0` and `1000`.

        > **NOTE:** The maximum number of instances is also limited by the amount of Cores available in the subscription.
        """
        return pulumi.get(self, "maximum")

    @property
    @pulumi.getter
    def minimum(self) -> int:
        """
        The minimum number of instances for this resource. Valid values are between `0` and `1000`.
        """
        return pulumi.get(self, "minimum")


@pulumi.output_type
class AutoscaleSettingProfileFixedDate(dict):
    def __init__(__self__, *,
                 end: str,
                 start: str,
                 timezone: Optional[str] = None):
        """
        :param str end: Specifies the end date for the profile, formatted as an RFC3339 date string.
        :param str start: Specifies the start date for the profile, formatted as an RFC3339 date string.
        :param str timezone: The Time Zone of the `start` and `end` times. A list of [possible values can be found here](https://msdn.microsoft.com/en-us/library/azure/dn931928.aspx). Defaults to `UTC`.
        """
        AutoscaleSettingProfileFixedDate._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end=end,
            start=start,
            timezone=timezone,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end: str,
             start: str,
             timezone: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("end", end)
        _setter("start", start)
        if timezone is not None:
            _setter("timezone", timezone)

    @property
    @pulumi.getter
    def end(self) -> str:
        """
        Specifies the end date for the profile, formatted as an RFC3339 date string.
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> str:
        """
        Specifies the start date for the profile, formatted as an RFC3339 date string.
        """
        return pulumi.get(self, "start")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        """
        The Time Zone of the `start` and `end` times. A list of [possible values can be found here](https://msdn.microsoft.com/en-us/library/azure/dn931928.aspx). Defaults to `UTC`.
        """
        return pulumi.get(self, "timezone")


@pulumi.output_type
class AutoscaleSettingProfileRecurrence(dict):
    def __init__(__self__, *,
                 days: Sequence[str],
                 hours: int,
                 minutes: int,
                 timezone: Optional[str] = None):
        """
        :param Sequence[str] days: A list of days that this profile takes effect on. Possible values include `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`.
        :param int hours: A list containing a single item, which specifies the Hour interval at which this recurrence should be triggered (in 24-hour time). Possible values are from `0` to `23`.
        :param int minutes: A list containing a single item which specifies the Minute interval at which this recurrence should be triggered.
        :param str timezone: The Time Zone used for the `hours` field. A list of [possible values can be found here](https://msdn.microsoft.com/en-us/library/azure/dn931928.aspx). Defaults to `UTC`.
        """
        AutoscaleSettingProfileRecurrence._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            days=days,
            hours=hours,
            minutes=minutes,
            timezone=timezone,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             days: Sequence[str],
             hours: int,
             minutes: int,
             timezone: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("days", days)
        _setter("hours", hours)
        _setter("minutes", minutes)
        if timezone is not None:
            _setter("timezone", timezone)

    @property
    @pulumi.getter
    def days(self) -> Sequence[str]:
        """
        A list of days that this profile takes effect on. Possible values include `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`.
        """
        return pulumi.get(self, "days")

    @property
    @pulumi.getter
    def hours(self) -> int:
        """
        A list containing a single item, which specifies the Hour interval at which this recurrence should be triggered (in 24-hour time). Possible values are from `0` to `23`.
        """
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> int:
        """
        A list containing a single item which specifies the Minute interval at which this recurrence should be triggered.
        """
        return pulumi.get(self, "minutes")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        """
        The Time Zone used for the `hours` field. A list of [possible values can be found here](https://msdn.microsoft.com/en-us/library/azure/dn931928.aspx). Defaults to `UTC`.
        """
        return pulumi.get(self, "timezone")


@pulumi.output_type
class AutoscaleSettingProfileRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricTrigger":
            suggest = "metric_trigger"
        elif key == "scaleAction":
            suggest = "scale_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoscaleSettingProfileRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoscaleSettingProfileRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoscaleSettingProfileRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric_trigger: 'outputs.AutoscaleSettingProfileRuleMetricTrigger',
                 scale_action: 'outputs.AutoscaleSettingProfileRuleScaleAction'):
        """
        :param 'AutoscaleSettingProfileRuleMetricTriggerArgs' metric_trigger: A `metric_trigger` block as defined below.
        :param 'AutoscaleSettingProfileRuleScaleActionArgs' scale_action: A `scale_action` block as defined below.
        """
        AutoscaleSettingProfileRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metric_trigger=metric_trigger,
            scale_action=scale_action,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metric_trigger: 'outputs.AutoscaleSettingProfileRuleMetricTrigger',
             scale_action: 'outputs.AutoscaleSettingProfileRuleScaleAction',
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("metric_trigger", metric_trigger)
        _setter("scale_action", scale_action)

    @property
    @pulumi.getter(name="metricTrigger")
    def metric_trigger(self) -> 'outputs.AutoscaleSettingProfileRuleMetricTrigger':
        """
        A `metric_trigger` block as defined below.
        """
        return pulumi.get(self, "metric_trigger")

    @property
    @pulumi.getter(name="scaleAction")
    def scale_action(self) -> 'outputs.AutoscaleSettingProfileRuleScaleAction':
        """
        A `scale_action` block as defined below.
        """
        return pulumi.get(self, "scale_action")


@pulumi.output_type
class AutoscaleSettingProfileRuleMetricTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricName":
            suggest = "metric_name"
        elif key == "metricResourceId":
            suggest = "metric_resource_id"
        elif key == "timeAggregation":
            suggest = "time_aggregation"
        elif key == "timeGrain":
            suggest = "time_grain"
        elif key == "timeWindow":
            suggest = "time_window"
        elif key == "divideByInstanceCount":
            suggest = "divide_by_instance_count"
        elif key == "metricNamespace":
            suggest = "metric_namespace"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoscaleSettingProfileRuleMetricTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoscaleSettingProfileRuleMetricTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoscaleSettingProfileRuleMetricTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric_name: str,
                 metric_resource_id: str,
                 operator: str,
                 statistic: str,
                 threshold: float,
                 time_aggregation: str,
                 time_grain: str,
                 time_window: str,
                 dimensions: Optional[Sequence['outputs.AutoscaleSettingProfileRuleMetricTriggerDimension']] = None,
                 divide_by_instance_count: Optional[bool] = None,
                 metric_namespace: Optional[str] = None):
        """
        :param str metric_name: The name of the metric that defines what the rule monitors, such as `Percentage CPU` for `Virtual Machine Scale Sets` and `CpuPercentage` for `App Service Plan`.
               
               > **NOTE:** The allowed value of `metric_name` highly depends on the targeting resource type, please visit [Supported metrics with Azure Monitor](https://docs.microsoft.com/azure/azure-monitor/platform/metrics-supported) for more details.
        :param str metric_resource_id: The ID of the Resource which the Rule monitors.
        :param str operator: Specifies the operator used to compare the metric data and threshold. Possible values are: `Equals`, `NotEquals`, `GreaterThan`, `GreaterThanOrEqual`, `LessThan`, `LessThanOrEqual`.
        :param str statistic: Specifies how the metrics from multiple instances are combined. Possible values are `Average`, `Max`, `Min` and `Sum`.
        :param float threshold: Specifies the threshold of the metric that triggers the scale action.
        :param str time_aggregation: Specifies how the data that's collected should be combined over time. Possible values include `Average`, `Count`, `Maximum`, `Minimum`, `Last` and `Total`.
        :param str time_grain: Specifies the granularity of metrics that the rule monitors, which must be one of the pre-defined values returned from the metric definitions for the metric. This value must be between 1 minute and 12 hours an be formatted as an ISO 8601 string.
        :param str time_window: Specifies the time range for which data is collected, which must be greater than the delay in metric collection (which varies from resource to resource). This value must be between 5 minutes and 12 hours and be formatted as an ISO 8601 string.
        :param Sequence['AutoscaleSettingProfileRuleMetricTriggerDimensionArgs'] dimensions: One or more `dimensions` block as defined below.
        :param bool divide_by_instance_count: Whether to enable metric divide by instance count.
        :param str metric_namespace: The namespace of the metric that defines what the rule monitors, such as `microsoft.compute/virtualmachinescalesets` for `Virtual Machine Scale Sets`.
        """
        AutoscaleSettingProfileRuleMetricTrigger._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metric_name=metric_name,
            metric_resource_id=metric_resource_id,
            operator=operator,
            statistic=statistic,
            threshold=threshold,
            time_aggregation=time_aggregation,
            time_grain=time_grain,
            time_window=time_window,
            dimensions=dimensions,
            divide_by_instance_count=divide_by_instance_count,
            metric_namespace=metric_namespace,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metric_name: str,
             metric_resource_id: str,
             operator: str,
             statistic: str,
             threshold: float,
             time_aggregation: str,
             time_grain: str,
             time_window: str,
             dimensions: Optional[Sequence['outputs.AutoscaleSettingProfileRuleMetricTriggerDimension']] = None,
             divide_by_instance_count: Optional[bool] = None,
             metric_namespace: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("metric_name", metric_name)
        _setter("metric_resource_id", metric_resource_id)
        _setter("operator", operator)
        _setter("statistic", statistic)
        _setter("threshold", threshold)
        _setter("time_aggregation", time_aggregation)
        _setter("time_grain", time_grain)
        _setter("time_window", time_window)
        if dimensions is not None:
            _setter("dimensions", dimensions)
        if divide_by_instance_count is not None:
            _setter("divide_by_instance_count", divide_by_instance_count)
        if metric_namespace is not None:
            _setter("metric_namespace", metric_namespace)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        The name of the metric that defines what the rule monitors, such as `Percentage CPU` for `Virtual Machine Scale Sets` and `CpuPercentage` for `App Service Plan`.

        > **NOTE:** The allowed value of `metric_name` highly depends on the targeting resource type, please visit [Supported metrics with Azure Monitor](https://docs.microsoft.com/azure/azure-monitor/platform/metrics-supported) for more details.
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="metricResourceId")
    def metric_resource_id(self) -> str:
        """
        The ID of the Resource which the Rule monitors.
        """
        return pulumi.get(self, "metric_resource_id")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Specifies the operator used to compare the metric data and threshold. Possible values are: `Equals`, `NotEquals`, `GreaterThan`, `GreaterThanOrEqual`, `LessThan`, `LessThanOrEqual`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def statistic(self) -> str:
        """
        Specifies how the metrics from multiple instances are combined. Possible values are `Average`, `Max`, `Min` and `Sum`.
        """
        return pulumi.get(self, "statistic")

    @property
    @pulumi.getter
    def threshold(self) -> float:
        """
        Specifies the threshold of the metric that triggers the scale action.
        """
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter(name="timeAggregation")
    def time_aggregation(self) -> str:
        """
        Specifies how the data that's collected should be combined over time. Possible values include `Average`, `Count`, `Maximum`, `Minimum`, `Last` and `Total`.
        """
        return pulumi.get(self, "time_aggregation")

    @property
    @pulumi.getter(name="timeGrain")
    def time_grain(self) -> str:
        """
        Specifies the granularity of metrics that the rule monitors, which must be one of the pre-defined values returned from the metric definitions for the metric. This value must be between 1 minute and 12 hours an be formatted as an ISO 8601 string.
        """
        return pulumi.get(self, "time_grain")

    @property
    @pulumi.getter(name="timeWindow")
    def time_window(self) -> str:
        """
        Specifies the time range for which data is collected, which must be greater than the delay in metric collection (which varies from resource to resource). This value must be between 5 minutes and 12 hours and be formatted as an ISO 8601 string.
        """
        return pulumi.get(self, "time_window")

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.AutoscaleSettingProfileRuleMetricTriggerDimension']]:
        """
        One or more `dimensions` block as defined below.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="divideByInstanceCount")
    def divide_by_instance_count(self) -> Optional[bool]:
        """
        Whether to enable metric divide by instance count.
        """
        return pulumi.get(self, "divide_by_instance_count")

    @property
    @pulumi.getter(name="metricNamespace")
    def metric_namespace(self) -> Optional[str]:
        """
        The namespace of the metric that defines what the rule monitors, such as `microsoft.compute/virtualmachinescalesets` for `Virtual Machine Scale Sets`.
        """
        return pulumi.get(self, "metric_namespace")


@pulumi.output_type
class AutoscaleSettingProfileRuleMetricTriggerDimension(dict):
    def __init__(__self__, *,
                 name: str,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str name: The name of the dimension.
        :param str operator: The dimension operator. Possible values are `Equals` and `NotEquals`. `Equals` means being equal to any of the values. `NotEquals` means being not equal to any of the values.
        :param Sequence[str] values: A list of dimension values.
        """
        AutoscaleSettingProfileRuleMetricTriggerDimension._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the dimension.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The dimension operator. Possible values are `Equals` and `NotEquals`. `Equals` means being equal to any of the values. `NotEquals` means being not equal to any of the values.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of dimension values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class AutoscaleSettingProfileRuleScaleAction(dict):
    def __init__(__self__, *,
                 cooldown: str,
                 direction: str,
                 type: str,
                 value: int):
        """
        :param str cooldown: The amount of time to wait since the last scaling action before this action occurs. Must be between 1 minute and 1 week and formatted as a ISO 8601 string.
        :param str direction: The scale direction. Possible values are `Increase` and `Decrease`.
        :param str type: The type of action that should occur. Possible values are `ChangeCount`, `ExactCount`, `PercentChangeCount` and `ServiceAllowedNextValue`.
        :param int value: The number of instances involved in the scaling action.
        """
        AutoscaleSettingProfileRuleScaleAction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cooldown=cooldown,
            direction=direction,
            type=type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cooldown: str,
             direction: str,
             type: str,
             value: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("cooldown", cooldown)
        _setter("direction", direction)
        _setter("type", type)
        _setter("value", value)

    @property
    @pulumi.getter
    def cooldown(self) -> str:
        """
        The amount of time to wait since the last scaling action before this action occurs. Must be between 1 minute and 1 week and formatted as a ISO 8601 string.
        """
        return pulumi.get(self, "cooldown")

    @property
    @pulumi.getter
    def direction(self) -> str:
        """
        The scale direction. Possible values are `Increase` and `Decrease`.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of action that should occur. Possible values are `ChangeCount`, `ExactCount`, `PercentChangeCount` and `ServiceAllowedNextValue`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> int:
        """
        The number of instances involved in the scaling action.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DataCollectionRuleDataFlow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "builtInTransform":
            suggest = "built_in_transform"
        elif key == "outputStream":
            suggest = "output_stream"
        elif key == "transformKql":
            suggest = "transform_kql"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataCollectionRuleDataFlow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataCollectionRuleDataFlow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataCollectionRuleDataFlow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destinations: Sequence[str],
                 streams: Sequence[str],
                 built_in_transform: Optional[str] = None,
                 output_stream: Optional[str] = None,
                 transform_kql: Optional[str] = None):
        """
        :param Sequence[str] destinations: Specifies a list of destination names. A `azure_monitor_metrics` data source only allows for stream of kind `Microsoft-InsightsMetrics`.
        :param Sequence[str] streams: Specifies a list of streams. Possible values include but not limited to `Microsoft-Event`, `Microsoft-InsightsMetrics`, `Microsoft-Perf`, `Microsoft-Syslog`,and `Microsoft-WindowsEvent`.
        :param str built_in_transform: The built-in transform to transform stream data.
        :param str output_stream: The output stream of the transform. Only required if the data flow changes data to a different stream.
        :param str transform_kql: The KQL query to transform stream data.
        """
        DataCollectionRuleDataFlow._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destinations=destinations,
            streams=streams,
            built_in_transform=built_in_transform,
            output_stream=output_stream,
            transform_kql=transform_kql,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destinations: Sequence[str],
             streams: Sequence[str],
             built_in_transform: Optional[str] = None,
             output_stream: Optional[str] = None,
             transform_kql: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("destinations", destinations)
        _setter("streams", streams)
        if built_in_transform is not None:
            _setter("built_in_transform", built_in_transform)
        if output_stream is not None:
            _setter("output_stream", output_stream)
        if transform_kql is not None:
            _setter("transform_kql", transform_kql)

    @property
    @pulumi.getter
    def destinations(self) -> Sequence[str]:
        """
        Specifies a list of destination names. A `azure_monitor_metrics` data source only allows for stream of kind `Microsoft-InsightsMetrics`.
        """
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def streams(self) -> Sequence[str]:
        """
        Specifies a list of streams. Possible values include but not limited to `Microsoft-Event`, `Microsoft-InsightsMetrics`, `Microsoft-Perf`, `Microsoft-Syslog`,and `Microsoft-WindowsEvent`.
        """
        return pulumi.get(self, "streams")

    @property
    @pulumi.getter(name="builtInTransform")
    def built_in_transform(self) -> Optional[str]:
        """
        The built-in transform to transform stream data.
        """
        return pulumi.get(self, "built_in_transform")

    @property
    @pulumi.getter(name="outputStream")
    def output_stream(self) -> Optional[str]:
        """
        The output stream of the transform. Only required if the data flow changes data to a different stream.
        """
        return pulumi.get(self, "output_stream")

    @property
    @pulumi.getter(name="transformKql")
    def transform_kql(self) -> Optional[str]:
        """
        The KQL query to transform stream data.
        """
        return pulumi.get(self, "transform_kql")


@pulumi.output_type
class DataCollectionRuleDataSources(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataImport":
            suggest = "data_import"
        elif key == "iisLogs":
            suggest = "iis_logs"
        elif key == "logFiles":
            suggest = "log_files"
        elif key == "performanceCounters":
            suggest = "performance_counters"
        elif key == "platformTelemetries":
            suggest = "platform_telemetries"
        elif key == "prometheusForwarders":
            suggest = "prometheus_forwarders"
        elif key == "windowsEventLogs":
            suggest = "windows_event_logs"
        elif key == "windowsFirewallLogs":
            suggest = "windows_firewall_logs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataCollectionRuleDataSources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataCollectionRuleDataSources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataCollectionRuleDataSources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_import: Optional['outputs.DataCollectionRuleDataSourcesDataImport'] = None,
                 extensions: Optional[Sequence['outputs.DataCollectionRuleDataSourcesExtension']] = None,
                 iis_logs: Optional[Sequence['outputs.DataCollectionRuleDataSourcesIisLog']] = None,
                 log_files: Optional[Sequence['outputs.DataCollectionRuleDataSourcesLogFile']] = None,
                 performance_counters: Optional[Sequence['outputs.DataCollectionRuleDataSourcesPerformanceCounter']] = None,
                 platform_telemetries: Optional[Sequence['outputs.DataCollectionRuleDataSourcesPlatformTelemetry']] = None,
                 prometheus_forwarders: Optional[Sequence['outputs.DataCollectionRuleDataSourcesPrometheusForwarder']] = None,
                 syslogs: Optional[Sequence['outputs.DataCollectionRuleDataSourcesSyslog']] = None,
                 windows_event_logs: Optional[Sequence['outputs.DataCollectionRuleDataSourcesWindowsEventLog']] = None,
                 windows_firewall_logs: Optional[Sequence['outputs.DataCollectionRuleDataSourcesWindowsFirewallLog']] = None):
        """
        :param 'DataCollectionRuleDataSourcesDataImportArgs' data_import: A `data_import` block as defined above.
        :param Sequence['DataCollectionRuleDataSourcesExtensionArgs'] extensions: One or more `extension` blocks as defined below.
        :param Sequence['DataCollectionRuleDataSourcesIisLogArgs'] iis_logs: One or more `iis_log` blocks as defined below.
        :param Sequence['DataCollectionRuleDataSourcesLogFileArgs'] log_files: One or more `log_file` blocks as defined below.
        :param Sequence['DataCollectionRuleDataSourcesPerformanceCounterArgs'] performance_counters: One or more `performance_counter` blocks as defined below.
        :param Sequence['DataCollectionRuleDataSourcesPlatformTelemetryArgs'] platform_telemetries: One or more `platform_telemetry` blocks as defined below.
        :param Sequence['DataCollectionRuleDataSourcesPrometheusForwarderArgs'] prometheus_forwarders: One or more `prometheus_forwarder` blocks as defined below.
        :param Sequence['DataCollectionRuleDataSourcesSyslogArgs'] syslogs: One or more `syslog` blocks as defined below.
        :param Sequence['DataCollectionRuleDataSourcesWindowsEventLogArgs'] windows_event_logs: One or more `windows_event_log` blocks as defined below.
        :param Sequence['DataCollectionRuleDataSourcesWindowsFirewallLogArgs'] windows_firewall_logs: One or more `windows_firewall_log` blocks as defined below.
        """
        DataCollectionRuleDataSources._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_import=data_import,
            extensions=extensions,
            iis_logs=iis_logs,
            log_files=log_files,
            performance_counters=performance_counters,
            platform_telemetries=platform_telemetries,
            prometheus_forwarders=prometheus_forwarders,
            syslogs=syslogs,
            windows_event_logs=windows_event_logs,
            windows_firewall_logs=windows_firewall_logs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_import: Optional['outputs.DataCollectionRuleDataSourcesDataImport'] = None,
             extensions: Optional[Sequence['outputs.DataCollectionRuleDataSourcesExtension']] = None,
             iis_logs: Optional[Sequence['outputs.DataCollectionRuleDataSourcesIisLog']] = None,
             log_files: Optional[Sequence['outputs.DataCollectionRuleDataSourcesLogFile']] = None,
             performance_counters: Optional[Sequence['outputs.DataCollectionRuleDataSourcesPerformanceCounter']] = None,
             platform_telemetries: Optional[Sequence['outputs.DataCollectionRuleDataSourcesPlatformTelemetry']] = None,
             prometheus_forwarders: Optional[Sequence['outputs.DataCollectionRuleDataSourcesPrometheusForwarder']] = None,
             syslogs: Optional[Sequence['outputs.DataCollectionRuleDataSourcesSyslog']] = None,
             windows_event_logs: Optional[Sequence['outputs.DataCollectionRuleDataSourcesWindowsEventLog']] = None,
             windows_firewall_logs: Optional[Sequence['outputs.DataCollectionRuleDataSourcesWindowsFirewallLog']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_import is not None:
            _setter("data_import", data_import)
        if extensions is not None:
            _setter("extensions", extensions)
        if iis_logs is not None:
            _setter("iis_logs", iis_logs)
        if log_files is not None:
            _setter("log_files", log_files)
        if performance_counters is not None:
            _setter("performance_counters", performance_counters)
        if platform_telemetries is not None:
            _setter("platform_telemetries", platform_telemetries)
        if prometheus_forwarders is not None:
            _setter("prometheus_forwarders", prometheus_forwarders)
        if syslogs is not None:
            _setter("syslogs", syslogs)
        if windows_event_logs is not None:
            _setter("windows_event_logs", windows_event_logs)
        if windows_firewall_logs is not None:
            _setter("windows_firewall_logs", windows_firewall_logs)

    @property
    @pulumi.getter(name="dataImport")
    def data_import(self) -> Optional['outputs.DataCollectionRuleDataSourcesDataImport']:
        """
        A `data_import` block as defined above.
        """
        return pulumi.get(self, "data_import")

    @property
    @pulumi.getter
    def extensions(self) -> Optional[Sequence['outputs.DataCollectionRuleDataSourcesExtension']]:
        """
        One or more `extension` blocks as defined below.
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter(name="iisLogs")
    def iis_logs(self) -> Optional[Sequence['outputs.DataCollectionRuleDataSourcesIisLog']]:
        """
        One or more `iis_log` blocks as defined below.
        """
        return pulumi.get(self, "iis_logs")

    @property
    @pulumi.getter(name="logFiles")
    def log_files(self) -> Optional[Sequence['outputs.DataCollectionRuleDataSourcesLogFile']]:
        """
        One or more `log_file` blocks as defined below.
        """
        return pulumi.get(self, "log_files")

    @property
    @pulumi.getter(name="performanceCounters")
    def performance_counters(self) -> Optional[Sequence['outputs.DataCollectionRuleDataSourcesPerformanceCounter']]:
        """
        One or more `performance_counter` blocks as defined below.
        """
        return pulumi.get(self, "performance_counters")

    @property
    @pulumi.getter(name="platformTelemetries")
    def platform_telemetries(self) -> Optional[Sequence['outputs.DataCollectionRuleDataSourcesPlatformTelemetry']]:
        """
        One or more `platform_telemetry` blocks as defined below.
        """
        return pulumi.get(self, "platform_telemetries")

    @property
    @pulumi.getter(name="prometheusForwarders")
    def prometheus_forwarders(self) -> Optional[Sequence['outputs.DataCollectionRuleDataSourcesPrometheusForwarder']]:
        """
        One or more `prometheus_forwarder` blocks as defined below.
        """
        return pulumi.get(self, "prometheus_forwarders")

    @property
    @pulumi.getter
    def syslogs(self) -> Optional[Sequence['outputs.DataCollectionRuleDataSourcesSyslog']]:
        """
        One or more `syslog` blocks as defined below.
        """
        return pulumi.get(self, "syslogs")

    @property
    @pulumi.getter(name="windowsEventLogs")
    def windows_event_logs(self) -> Optional[Sequence['outputs.DataCollectionRuleDataSourcesWindowsEventLog']]:
        """
        One or more `windows_event_log` blocks as defined below.
        """
        return pulumi.get(self, "windows_event_logs")

    @property
    @pulumi.getter(name="windowsFirewallLogs")
    def windows_firewall_logs(self) -> Optional[Sequence['outputs.DataCollectionRuleDataSourcesWindowsFirewallLog']]:
        """
        One or more `windows_firewall_log` blocks as defined below.
        """
        return pulumi.get(self, "windows_firewall_logs")


@pulumi.output_type
class DataCollectionRuleDataSourcesDataImport(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventHubDataSources":
            suggest = "event_hub_data_sources"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataCollectionRuleDataSourcesDataImport. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataCollectionRuleDataSourcesDataImport.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataCollectionRuleDataSourcesDataImport.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 event_hub_data_sources: Sequence['outputs.DataCollectionRuleDataSourcesDataImportEventHubDataSource']):
        """
        :param Sequence['DataCollectionRuleDataSourcesDataImportEventHubDataSourceArgs'] event_hub_data_sources: An `event_hub_data_source` block as defined below.
        """
        DataCollectionRuleDataSourcesDataImport._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            event_hub_data_sources=event_hub_data_sources,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             event_hub_data_sources: Sequence['outputs.DataCollectionRuleDataSourcesDataImportEventHubDataSource'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("event_hub_data_sources", event_hub_data_sources)

    @property
    @pulumi.getter(name="eventHubDataSources")
    def event_hub_data_sources(self) -> Sequence['outputs.DataCollectionRuleDataSourcesDataImportEventHubDataSource']:
        """
        An `event_hub_data_source` block as defined below.
        """
        return pulumi.get(self, "event_hub_data_sources")


@pulumi.output_type
class DataCollectionRuleDataSourcesDataImportEventHubDataSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "consumerGroup":
            suggest = "consumer_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataCollectionRuleDataSourcesDataImportEventHubDataSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataCollectionRuleDataSourcesDataImportEventHubDataSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataCollectionRuleDataSourcesDataImportEventHubDataSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 stream: str,
                 consumer_group: Optional[str] = None):
        """
        :param str name: The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
        :param str stream: The stream to collect from Event Hub. Possible value should be a custom stream name.
        :param str consumer_group: The Event Hub consumer group name.
        """
        DataCollectionRuleDataSourcesDataImportEventHubDataSource._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            stream=stream,
            consumer_group=consumer_group,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             stream: str,
             consumer_group: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("stream", stream)
        if consumer_group is not None:
            _setter("consumer_group", consumer_group)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def stream(self) -> str:
        """
        The stream to collect from Event Hub. Possible value should be a custom stream name.
        """
        return pulumi.get(self, "stream")

    @property
    @pulumi.getter(name="consumerGroup")
    def consumer_group(self) -> Optional[str]:
        """
        The Event Hub consumer group name.
        """
        return pulumi.get(self, "consumer_group")


@pulumi.output_type
class DataCollectionRuleDataSourcesExtension(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extensionName":
            suggest = "extension_name"
        elif key == "extensionJson":
            suggest = "extension_json"
        elif key == "inputDataSources":
            suggest = "input_data_sources"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataCollectionRuleDataSourcesExtension. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataCollectionRuleDataSourcesExtension.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataCollectionRuleDataSourcesExtension.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 extension_name: str,
                 name: str,
                 streams: Sequence[str],
                 extension_json: Optional[str] = None,
                 input_data_sources: Optional[Sequence[str]] = None):
        """
        :param str extension_name: The name of the VM extension.
        :param str name: The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
        :param Sequence[str] streams: Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-Event`, `Microsoft-InsightsMetrics`, `Microsoft-Perf`, `Microsoft-Syslog`, `Microsoft-WindowsEvent`.
        :param str extension_json: A JSON String which specifies the extension setting.
        :param Sequence[str] input_data_sources: Specifies a list of data sources this extension needs data from. An item should be a name of a supported data source which produces only one stream. Supported data sources type: `performance_counter`, `windows_event_log`,and `syslog`.
        """
        DataCollectionRuleDataSourcesExtension._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            extension_name=extension_name,
            name=name,
            streams=streams,
            extension_json=extension_json,
            input_data_sources=input_data_sources,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             extension_name: str,
             name: str,
             streams: Sequence[str],
             extension_json: Optional[str] = None,
             input_data_sources: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("extension_name", extension_name)
        _setter("name", name)
        _setter("streams", streams)
        if extension_json is not None:
            _setter("extension_json", extension_json)
        if input_data_sources is not None:
            _setter("input_data_sources", input_data_sources)

    @property
    @pulumi.getter(name="extensionName")
    def extension_name(self) -> str:
        """
        The name of the VM extension.
        """
        return pulumi.get(self, "extension_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def streams(self) -> Sequence[str]:
        """
        Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-Event`, `Microsoft-InsightsMetrics`, `Microsoft-Perf`, `Microsoft-Syslog`, `Microsoft-WindowsEvent`.
        """
        return pulumi.get(self, "streams")

    @property
    @pulumi.getter(name="extensionJson")
    def extension_json(self) -> Optional[str]:
        """
        A JSON String which specifies the extension setting.
        """
        return pulumi.get(self, "extension_json")

    @property
    @pulumi.getter(name="inputDataSources")
    def input_data_sources(self) -> Optional[Sequence[str]]:
        """
        Specifies a list of data sources this extension needs data from. An item should be a name of a supported data source which produces only one stream. Supported data sources type: `performance_counter`, `windows_event_log`,and `syslog`.
        """
        return pulumi.get(self, "input_data_sources")


@pulumi.output_type
class DataCollectionRuleDataSourcesIisLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logDirectories":
            suggest = "log_directories"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataCollectionRuleDataSourcesIisLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataCollectionRuleDataSourcesIisLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataCollectionRuleDataSourcesIisLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 streams: Sequence[str],
                 log_directories: Optional[Sequence[str]] = None):
        """
        :param str name: The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
        :param Sequence[str] streams: Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible value is `Microsoft-W3CIISLog`.
        :param Sequence[str] log_directories: Specifies a list of absolute paths where the log files are located.
        """
        DataCollectionRuleDataSourcesIisLog._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            streams=streams,
            log_directories=log_directories,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             streams: Sequence[str],
             log_directories: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("streams", streams)
        if log_directories is not None:
            _setter("log_directories", log_directories)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def streams(self) -> Sequence[str]:
        """
        Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible value is `Microsoft-W3CIISLog`.
        """
        return pulumi.get(self, "streams")

    @property
    @pulumi.getter(name="logDirectories")
    def log_directories(self) -> Optional[Sequence[str]]:
        """
        Specifies a list of absolute paths where the log files are located.
        """
        return pulumi.get(self, "log_directories")


@pulumi.output_type
class DataCollectionRuleDataSourcesLogFile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filePatterns":
            suggest = "file_patterns"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataCollectionRuleDataSourcesLogFile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataCollectionRuleDataSourcesLogFile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataCollectionRuleDataSourcesLogFile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_patterns: Sequence[str],
                 format: str,
                 name: str,
                 streams: Sequence[str],
                 settings: Optional['outputs.DataCollectionRuleDataSourcesLogFileSettings'] = None):
        """
        :param Sequence[str] file_patterns: Specifies a list of file patterns where the log files are located. For example, `C:\\\\JavaLogs\\\\*.log`.
        :param str format: The data format of the log files. possible value is `text`.
        :param str name: The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
        :param Sequence[str] streams: Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible value should be custom stream names.
        :param 'DataCollectionRuleDataSourcesLogFileSettingsArgs' settings: A `settings` block as defined below.
        """
        DataCollectionRuleDataSourcesLogFile._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            file_patterns=file_patterns,
            format=format,
            name=name,
            streams=streams,
            settings=settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             file_patterns: Sequence[str],
             format: str,
             name: str,
             streams: Sequence[str],
             settings: Optional['outputs.DataCollectionRuleDataSourcesLogFileSettings'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("file_patterns", file_patterns)
        _setter("format", format)
        _setter("name", name)
        _setter("streams", streams)
        if settings is not None:
            _setter("settings", settings)

    @property
    @pulumi.getter(name="filePatterns")
    def file_patterns(self) -> Sequence[str]:
        """
        Specifies a list of file patterns where the log files are located. For example, `C:\\\\JavaLogs\\\\*.log`.
        """
        return pulumi.get(self, "file_patterns")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        The data format of the log files. possible value is `text`.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def streams(self) -> Sequence[str]:
        """
        Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible value should be custom stream names.
        """
        return pulumi.get(self, "streams")

    @property
    @pulumi.getter
    def settings(self) -> Optional['outputs.DataCollectionRuleDataSourcesLogFileSettings']:
        """
        A `settings` block as defined below.
        """
        return pulumi.get(self, "settings")


@pulumi.output_type
class DataCollectionRuleDataSourcesLogFileSettings(dict):
    def __init__(__self__, *,
                 text: 'outputs.DataCollectionRuleDataSourcesLogFileSettingsText'):
        """
        :param 'DataCollectionRuleDataSourcesLogFileSettingsTextArgs' text: A `text` block as defined below.
        """
        DataCollectionRuleDataSourcesLogFileSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            text=text,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             text: 'outputs.DataCollectionRuleDataSourcesLogFileSettingsText',
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("text", text)

    @property
    @pulumi.getter
    def text(self) -> 'outputs.DataCollectionRuleDataSourcesLogFileSettingsText':
        """
        A `text` block as defined below.
        """
        return pulumi.get(self, "text")


@pulumi.output_type
class DataCollectionRuleDataSourcesLogFileSettingsText(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "recordStartTimestampFormat":
            suggest = "record_start_timestamp_format"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataCollectionRuleDataSourcesLogFileSettingsText. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataCollectionRuleDataSourcesLogFileSettingsText.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataCollectionRuleDataSourcesLogFileSettingsText.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 record_start_timestamp_format: str):
        """
        :param str record_start_timestamp_format: The timestamp format of the text log files. Possible values are `ISO 8601`, `YYYY-MM-DD HH:MM:SS`, `M/D/YYYY HH:MM:SS AM/PM`, `Mon DD, YYYY HH:MM:SS`, `yyMMdd HH:mm:ss`, `ddMMyy HH:mm:ss`, `MMM d hh:mm:ss`, `dd/MMM/yyyy:HH:mm:ss zzz`,and `yyyy-MM-ddTHH:mm:ssK`.
        """
        DataCollectionRuleDataSourcesLogFileSettingsText._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            record_start_timestamp_format=record_start_timestamp_format,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             record_start_timestamp_format: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("record_start_timestamp_format", record_start_timestamp_format)

    @property
    @pulumi.getter(name="recordStartTimestampFormat")
    def record_start_timestamp_format(self) -> str:
        """
        The timestamp format of the text log files. Possible values are `ISO 8601`, `YYYY-MM-DD HH:MM:SS`, `M/D/YYYY HH:MM:SS AM/PM`, `Mon DD, YYYY HH:MM:SS`, `yyMMdd HH:mm:ss`, `ddMMyy HH:mm:ss`, `MMM d hh:mm:ss`, `dd/MMM/yyyy:HH:mm:ss zzz`,and `yyyy-MM-ddTHH:mm:ssK`.
        """
        return pulumi.get(self, "record_start_timestamp_format")


@pulumi.output_type
class DataCollectionRuleDataSourcesPerformanceCounter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "counterSpecifiers":
            suggest = "counter_specifiers"
        elif key == "samplingFrequencyInSeconds":
            suggest = "sampling_frequency_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataCollectionRuleDataSourcesPerformanceCounter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataCollectionRuleDataSourcesPerformanceCounter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataCollectionRuleDataSourcesPerformanceCounter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 counter_specifiers: Sequence[str],
                 name: str,
                 sampling_frequency_in_seconds: int,
                 streams: Sequence[str]):
        """
        :param Sequence[str] counter_specifiers: Specifies a list of specifier names of the performance counters you want to collect. To get a list of performance counters on Windows, run the command `typeperf`. Please see [this document](https://learn.microsoft.com/en-us/azure/azure-monitor/agents/data-sources-performance-counters#configure-performance-counters) for more information.
        :param str name: The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
        :param int sampling_frequency_in_seconds: The number of seconds between consecutive counter measurements (samples). The value should be integer between `1` and `300` inclusive. `sampling_frequency_in_seconds` must be equal to `60` seconds for counters collected with `Microsoft-InsightsMetrics` stream.
        :param Sequence[str] streams: Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-InsightsMetrics`,and `Microsoft-Perf`.
        """
        DataCollectionRuleDataSourcesPerformanceCounter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            counter_specifiers=counter_specifiers,
            name=name,
            sampling_frequency_in_seconds=sampling_frequency_in_seconds,
            streams=streams,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             counter_specifiers: Sequence[str],
             name: str,
             sampling_frequency_in_seconds: int,
             streams: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("counter_specifiers", counter_specifiers)
        _setter("name", name)
        _setter("sampling_frequency_in_seconds", sampling_frequency_in_seconds)
        _setter("streams", streams)

    @property
    @pulumi.getter(name="counterSpecifiers")
    def counter_specifiers(self) -> Sequence[str]:
        """
        Specifies a list of specifier names of the performance counters you want to collect. To get a list of performance counters on Windows, run the command `typeperf`. Please see [this document](https://learn.microsoft.com/en-us/azure/azure-monitor/agents/data-sources-performance-counters#configure-performance-counters) for more information.
        """
        return pulumi.get(self, "counter_specifiers")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="samplingFrequencyInSeconds")
    def sampling_frequency_in_seconds(self) -> int:
        """
        The number of seconds between consecutive counter measurements (samples). The value should be integer between `1` and `300` inclusive. `sampling_frequency_in_seconds` must be equal to `60` seconds for counters collected with `Microsoft-InsightsMetrics` stream.
        """
        return pulumi.get(self, "sampling_frequency_in_seconds")

    @property
    @pulumi.getter
    def streams(self) -> Sequence[str]:
        """
        Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-InsightsMetrics`,and `Microsoft-Perf`.
        """
        return pulumi.get(self, "streams")


@pulumi.output_type
class DataCollectionRuleDataSourcesPlatformTelemetry(dict):
    def __init__(__self__, *,
                 name: str,
                 streams: Sequence[str]):
        """
        :param str name: The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
        :param Sequence[str] streams: Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft.Cache/redis:Metrics-Group-All`.
        """
        DataCollectionRuleDataSourcesPlatformTelemetry._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            streams=streams,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             streams: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("streams", streams)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def streams(self) -> Sequence[str]:
        """
        Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft.Cache/redis:Metrics-Group-All`.
        """
        return pulumi.get(self, "streams")


@pulumi.output_type
class DataCollectionRuleDataSourcesPrometheusForwarder(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelIncludeFilters":
            suggest = "label_include_filters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataCollectionRuleDataSourcesPrometheusForwarder. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataCollectionRuleDataSourcesPrometheusForwarder.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataCollectionRuleDataSourcesPrometheusForwarder.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 streams: Sequence[str],
                 label_include_filters: Optional[Sequence['outputs.DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilter']] = None):
        """
        :param str name: The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
        :param Sequence[str] streams: Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible value is `Microsoft-PrometheusMetrics`.
        :param Sequence['DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArgs'] label_include_filters: One or more `label_include_filter` blocks as defined above.
        """
        DataCollectionRuleDataSourcesPrometheusForwarder._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            streams=streams,
            label_include_filters=label_include_filters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             streams: Sequence[str],
             label_include_filters: Optional[Sequence['outputs.DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilter']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("streams", streams)
        if label_include_filters is not None:
            _setter("label_include_filters", label_include_filters)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def streams(self) -> Sequence[str]:
        """
        Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible value is `Microsoft-PrometheusMetrics`.
        """
        return pulumi.get(self, "streams")

    @property
    @pulumi.getter(name="labelIncludeFilters")
    def label_include_filters(self) -> Optional[Sequence['outputs.DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilter']]:
        """
        One or more `label_include_filter` blocks as defined above.
        """
        return pulumi.get(self, "label_include_filters")


@pulumi.output_type
class DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilter(dict):
    def __init__(__self__, *,
                 label: str,
                 value: str):
        """
        :param str label: The label of the filter. This label should be unique across all `label_include_fileter` block. Possible value is `microsoft_metrics_include_label`.
        :param str value: The value of the filter.
        """
        DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            label=label,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             label: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("label", label)
        _setter("value", value)

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label of the filter. This label should be unique across all `label_include_fileter` block. Possible value is `microsoft_metrics_include_label`.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the filter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DataCollectionRuleDataSourcesSyslog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "facilityNames":
            suggest = "facility_names"
        elif key == "logLevels":
            suggest = "log_levels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataCollectionRuleDataSourcesSyslog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataCollectionRuleDataSourcesSyslog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataCollectionRuleDataSourcesSyslog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facility_names: Sequence[str],
                 log_levels: Sequence[str],
                 name: str,
                 streams: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] facility_names: Specifies a list of facility names. Use a wildcard `*` to collect logs for all facility names. Possible values are `auth`, `authpriv`, `cron`, `daemon`, `kern`, `lpr`, `mail`, `mark`, `news`, `syslog`, `user`, `uucp`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`,and `*`.
        :param Sequence[str] log_levels: Specifies a list of log levels. Use a wildcard `*` to collect logs for all log levels. Possible values are `Debug`, `Info`, `Notice`, `Warning`, `Error`, `Critical`, `Alert`, `Emergency`,and `*`.
        :param str name: The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
        :param Sequence[str] streams: Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-Syslog`,and `Microsoft-CiscoAsa`, and `Microsoft-CommonSecurityLog`.
               
               > **Note:** In 4.0 or later version of the provider, `streams` will be required. In 3.x version of provider, if `streams` is not specified in creation, it is default to `["Microsoft-Syslog"]`. if `streams` need to be modified (include change other value to the default value), it must be explicitly specified.
        """
        DataCollectionRuleDataSourcesSyslog._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            facility_names=facility_names,
            log_levels=log_levels,
            name=name,
            streams=streams,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             facility_names: Sequence[str],
             log_levels: Sequence[str],
             name: str,
             streams: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("facility_names", facility_names)
        _setter("log_levels", log_levels)
        _setter("name", name)
        if streams is not None:
            _setter("streams", streams)

    @property
    @pulumi.getter(name="facilityNames")
    def facility_names(self) -> Sequence[str]:
        """
        Specifies a list of facility names. Use a wildcard `*` to collect logs for all facility names. Possible values are `auth`, `authpriv`, `cron`, `daemon`, `kern`, `lpr`, `mail`, `mark`, `news`, `syslog`, `user`, `uucp`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`,and `*`.
        """
        return pulumi.get(self, "facility_names")

    @property
    @pulumi.getter(name="logLevels")
    def log_levels(self) -> Sequence[str]:
        """
        Specifies a list of log levels. Use a wildcard `*` to collect logs for all log levels. Possible values are `Debug`, `Info`, `Notice`, `Warning`, `Error`, `Critical`, `Alert`, `Emergency`,and `*`.
        """
        return pulumi.get(self, "log_levels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def streams(self) -> Optional[Sequence[str]]:
        """
        Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-Syslog`,and `Microsoft-CiscoAsa`, and `Microsoft-CommonSecurityLog`.

        > **Note:** In 4.0 or later version of the provider, `streams` will be required. In 3.x version of provider, if `streams` is not specified in creation, it is default to `["Microsoft-Syslog"]`. if `streams` need to be modified (include change other value to the default value), it must be explicitly specified.
        """
        return pulumi.get(self, "streams")


@pulumi.output_type
class DataCollectionRuleDataSourcesWindowsEventLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "xPathQueries":
            suggest = "x_path_queries"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataCollectionRuleDataSourcesWindowsEventLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataCollectionRuleDataSourcesWindowsEventLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataCollectionRuleDataSourcesWindowsEventLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 streams: Sequence[str],
                 x_path_queries: Sequence[str]):
        """
        :param str name: The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
        :param Sequence[str] streams: Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-Event`,and `Microsoft-WindowsEvent`, `Microsoft-RomeDetectionEvent`, and `Microsoft-SecurityEvent`.
        :param Sequence[str] x_path_queries: Specifies a list of Windows Event Log queries in XPath expression. Please see [this document](https://learn.microsoft.com/en-us/azure/azure-monitor/agents/data-collection-rule-azure-monitor-agent?tabs=cli#filter-events-using-xpath-queries) for more information.
        """
        DataCollectionRuleDataSourcesWindowsEventLog._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            streams=streams,
            x_path_queries=x_path_queries,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             streams: Sequence[str],
             x_path_queries: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("streams", streams)
        _setter("x_path_queries", x_path_queries)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def streams(self) -> Sequence[str]:
        """
        Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-Event`,and `Microsoft-WindowsEvent`, `Microsoft-RomeDetectionEvent`, and `Microsoft-SecurityEvent`.
        """
        return pulumi.get(self, "streams")

    @property
    @pulumi.getter(name="xPathQueries")
    def x_path_queries(self) -> Sequence[str]:
        """
        Specifies a list of Windows Event Log queries in XPath expression. Please see [this document](https://learn.microsoft.com/en-us/azure/azure-monitor/agents/data-collection-rule-azure-monitor-agent?tabs=cli#filter-events-using-xpath-queries) for more information.
        """
        return pulumi.get(self, "x_path_queries")


@pulumi.output_type
class DataCollectionRuleDataSourcesWindowsFirewallLog(dict):
    def __init__(__self__, *,
                 name: str,
                 streams: Sequence[str]):
        """
        :param str name: The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
        :param Sequence[str] streams: Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
        """
        DataCollectionRuleDataSourcesWindowsFirewallLog._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            streams=streams,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             streams: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("streams", streams)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def streams(self) -> Sequence[str]:
        """
        Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
        """
        return pulumi.get(self, "streams")


@pulumi.output_type
class DataCollectionRuleDestinations(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureMonitorMetrics":
            suggest = "azure_monitor_metrics"
        elif key == "eventHub":
            suggest = "event_hub"
        elif key == "eventHubDirect":
            suggest = "event_hub_direct"
        elif key == "logAnalytics":
            suggest = "log_analytics"
        elif key == "monitorAccounts":
            suggest = "monitor_accounts"
        elif key == "storageBlobDirects":
            suggest = "storage_blob_directs"
        elif key == "storageBlobs":
            suggest = "storage_blobs"
        elif key == "storageTableDirects":
            suggest = "storage_table_directs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataCollectionRuleDestinations. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataCollectionRuleDestinations.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataCollectionRuleDestinations.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_monitor_metrics: Optional['outputs.DataCollectionRuleDestinationsAzureMonitorMetrics'] = None,
                 event_hub: Optional['outputs.DataCollectionRuleDestinationsEventHub'] = None,
                 event_hub_direct: Optional['outputs.DataCollectionRuleDestinationsEventHubDirect'] = None,
                 log_analytics: Optional[Sequence['outputs.DataCollectionRuleDestinationsLogAnalytic']] = None,
                 monitor_accounts: Optional[Sequence['outputs.DataCollectionRuleDestinationsMonitorAccount']] = None,
                 storage_blob_directs: Optional[Sequence['outputs.DataCollectionRuleDestinationsStorageBlobDirect']] = None,
                 storage_blobs: Optional[Sequence['outputs.DataCollectionRuleDestinationsStorageBlob']] = None,
                 storage_table_directs: Optional[Sequence['outputs.DataCollectionRuleDestinationsStorageTableDirect']] = None):
        """
        :param 'DataCollectionRuleDestinationsAzureMonitorMetricsArgs' azure_monitor_metrics: A `azure_monitor_metrics` block as defined above.
        :param 'DataCollectionRuleDestinationsEventHubArgs' event_hub: One or more `event_hub` blocks as defined below.
        :param 'DataCollectionRuleDestinationsEventHubDirectArgs' event_hub_direct: One or more `event_hub` blocks as defined below.
        :param Sequence['DataCollectionRuleDestinationsLogAnalyticArgs'] log_analytics: One or more `log_analytics` blocks as defined below.
        :param Sequence['DataCollectionRuleDestinationsMonitorAccountArgs'] monitor_accounts: One or more `monitor_account` blocks as defined below.
        :param Sequence['DataCollectionRuleDestinationsStorageBlobDirectArgs'] storage_blob_directs: One or more `storage_blob_direct` blocks as defined below.
        :param Sequence['DataCollectionRuleDestinationsStorageBlobArgs'] storage_blobs: One or more `storage_blob` blocks as defined below.
        :param Sequence['DataCollectionRuleDestinationsStorageTableDirectArgs'] storage_table_directs: One or more `storage_table_direct` blocks as defined below.
               
               > **NOTE** `event_hub_direct`, `storage_blob_direct`, and `storage_table_direct` are only available for rules of kind `AgentDirectToStore`.
               
               > **NOTE** At least one of `azure_monitor_metrics`, `event_hub`, `event_hub_direct`, `log_analytics`, `monitor_account`, `storage_blob`, `storage_blob_direct`,and `storage_table_direct` blocks must be specified.
        """
        DataCollectionRuleDestinations._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            azure_monitor_metrics=azure_monitor_metrics,
            event_hub=event_hub,
            event_hub_direct=event_hub_direct,
            log_analytics=log_analytics,
            monitor_accounts=monitor_accounts,
            storage_blob_directs=storage_blob_directs,
            storage_blobs=storage_blobs,
            storage_table_directs=storage_table_directs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             azure_monitor_metrics: Optional['outputs.DataCollectionRuleDestinationsAzureMonitorMetrics'] = None,
             event_hub: Optional['outputs.DataCollectionRuleDestinationsEventHub'] = None,
             event_hub_direct: Optional['outputs.DataCollectionRuleDestinationsEventHubDirect'] = None,
             log_analytics: Optional[Sequence['outputs.DataCollectionRuleDestinationsLogAnalytic']] = None,
             monitor_accounts: Optional[Sequence['outputs.DataCollectionRuleDestinationsMonitorAccount']] = None,
             storage_blob_directs: Optional[Sequence['outputs.DataCollectionRuleDestinationsStorageBlobDirect']] = None,
             storage_blobs: Optional[Sequence['outputs.DataCollectionRuleDestinationsStorageBlob']] = None,
             storage_table_directs: Optional[Sequence['outputs.DataCollectionRuleDestinationsStorageTableDirect']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if azure_monitor_metrics is not None:
            _setter("azure_monitor_metrics", azure_monitor_metrics)
        if event_hub is not None:
            _setter("event_hub", event_hub)
        if event_hub_direct is not None:
            _setter("event_hub_direct", event_hub_direct)
        if log_analytics is not None:
            _setter("log_analytics", log_analytics)
        if monitor_accounts is not None:
            _setter("monitor_accounts", monitor_accounts)
        if storage_blob_directs is not None:
            _setter("storage_blob_directs", storage_blob_directs)
        if storage_blobs is not None:
            _setter("storage_blobs", storage_blobs)
        if storage_table_directs is not None:
            _setter("storage_table_directs", storage_table_directs)

    @property
    @pulumi.getter(name="azureMonitorMetrics")
    def azure_monitor_metrics(self) -> Optional['outputs.DataCollectionRuleDestinationsAzureMonitorMetrics']:
        """
        A `azure_monitor_metrics` block as defined above.
        """
        return pulumi.get(self, "azure_monitor_metrics")

    @property
    @pulumi.getter(name="eventHub")
    def event_hub(self) -> Optional['outputs.DataCollectionRuleDestinationsEventHub']:
        """
        One or more `event_hub` blocks as defined below.
        """
        return pulumi.get(self, "event_hub")

    @property
    @pulumi.getter(name="eventHubDirect")
    def event_hub_direct(self) -> Optional['outputs.DataCollectionRuleDestinationsEventHubDirect']:
        """
        One or more `event_hub` blocks as defined below.
        """
        return pulumi.get(self, "event_hub_direct")

    @property
    @pulumi.getter(name="logAnalytics")
    def log_analytics(self) -> Optional[Sequence['outputs.DataCollectionRuleDestinationsLogAnalytic']]:
        """
        One or more `log_analytics` blocks as defined below.
        """
        return pulumi.get(self, "log_analytics")

    @property
    @pulumi.getter(name="monitorAccounts")
    def monitor_accounts(self) -> Optional[Sequence['outputs.DataCollectionRuleDestinationsMonitorAccount']]:
        """
        One or more `monitor_account` blocks as defined below.
        """
        return pulumi.get(self, "monitor_accounts")

    @property
    @pulumi.getter(name="storageBlobDirects")
    def storage_blob_directs(self) -> Optional[Sequence['outputs.DataCollectionRuleDestinationsStorageBlobDirect']]:
        """
        One or more `storage_blob_direct` blocks as defined below.
        """
        return pulumi.get(self, "storage_blob_directs")

    @property
    @pulumi.getter(name="storageBlobs")
    def storage_blobs(self) -> Optional[Sequence['outputs.DataCollectionRuleDestinationsStorageBlob']]:
        """
        One or more `storage_blob` blocks as defined below.
        """
        return pulumi.get(self, "storage_blobs")

    @property
    @pulumi.getter(name="storageTableDirects")
    def storage_table_directs(self) -> Optional[Sequence['outputs.DataCollectionRuleDestinationsStorageTableDirect']]:
        """
        One or more `storage_table_direct` blocks as defined below.

        > **NOTE** `event_hub_direct`, `storage_blob_direct`, and `storage_table_direct` are only available for rules of kind `AgentDirectToStore`.

        > **NOTE** At least one of `azure_monitor_metrics`, `event_hub`, `event_hub_direct`, `log_analytics`, `monitor_account`, `storage_blob`, `storage_blob_direct`,and `storage_table_direct` blocks must be specified.
        """
        return pulumi.get(self, "storage_table_directs")


@pulumi.output_type
class DataCollectionRuleDestinationsAzureMonitorMetrics(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
        """
        DataCollectionRuleDestinationsAzureMonitorMetrics._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DataCollectionRuleDestinationsEventHub(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventHubId":
            suggest = "event_hub_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataCollectionRuleDestinationsEventHub. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataCollectionRuleDestinationsEventHub.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataCollectionRuleDestinationsEventHub.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 event_hub_id: str,
                 name: str):
        """
        :param str event_hub_id: The resource ID of the Event Hub.
        :param str name: The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
        """
        DataCollectionRuleDestinationsEventHub._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            event_hub_id=event_hub_id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             event_hub_id: str,
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("event_hub_id", event_hub_id)
        _setter("name", name)

    @property
    @pulumi.getter(name="eventHubId")
    def event_hub_id(self) -> str:
        """
        The resource ID of the Event Hub.
        """
        return pulumi.get(self, "event_hub_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DataCollectionRuleDestinationsEventHubDirect(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventHubId":
            suggest = "event_hub_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataCollectionRuleDestinationsEventHubDirect. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataCollectionRuleDestinationsEventHubDirect.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataCollectionRuleDestinationsEventHubDirect.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 event_hub_id: str,
                 name: str):
        """
        :param str event_hub_id: The resource ID of the Event Hub.
        :param str name: The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
        """
        DataCollectionRuleDestinationsEventHubDirect._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            event_hub_id=event_hub_id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             event_hub_id: str,
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("event_hub_id", event_hub_id)
        _setter("name", name)

    @property
    @pulumi.getter(name="eventHubId")
    def event_hub_id(self) -> str:
        """
        The resource ID of the Event Hub.
        """
        return pulumi.get(self, "event_hub_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DataCollectionRuleDestinationsLogAnalytic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "workspaceResourceId":
            suggest = "workspace_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataCollectionRuleDestinationsLogAnalytic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataCollectionRuleDestinationsLogAnalytic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataCollectionRuleDestinationsLogAnalytic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 workspace_resource_id: str):
        """
        :param str name: The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
        :param str workspace_resource_id: The ID of a Log Analytic Workspace resource.
        """
        DataCollectionRuleDestinationsLogAnalytic._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            workspace_resource_id=workspace_resource_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             workspace_resource_id: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("workspace_resource_id", workspace_resource_id)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="workspaceResourceId")
    def workspace_resource_id(self) -> str:
        """
        The ID of a Log Analytic Workspace resource.
        """
        return pulumi.get(self, "workspace_resource_id")


@pulumi.output_type
class DataCollectionRuleDestinationsMonitorAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "monitorAccountId":
            suggest = "monitor_account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataCollectionRuleDestinationsMonitorAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataCollectionRuleDestinationsMonitorAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataCollectionRuleDestinationsMonitorAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 monitor_account_id: str,
                 name: str):
        """
        :param str monitor_account_id: The resource ID of the Monitor Account.
        :param str name: The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
        """
        DataCollectionRuleDestinationsMonitorAccount._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            monitor_account_id=monitor_account_id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             monitor_account_id: str,
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("monitor_account_id", monitor_account_id)
        _setter("name", name)

    @property
    @pulumi.getter(name="monitorAccountId")
    def monitor_account_id(self) -> str:
        """
        The resource ID of the Monitor Account.
        """
        return pulumi.get(self, "monitor_account_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DataCollectionRuleDestinationsStorageBlob(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerName":
            suggest = "container_name"
        elif key == "storageAccountId":
            suggest = "storage_account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataCollectionRuleDestinationsStorageBlob. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataCollectionRuleDestinationsStorageBlob.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataCollectionRuleDestinationsStorageBlob.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_name: str,
                 name: str,
                 storage_account_id: str):
        """
        :param str container_name: The Storage Container name.
        :param str name: The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
        :param str storage_account_id: The resource ID of the Storage Account.
        """
        DataCollectionRuleDestinationsStorageBlob._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            container_name=container_name,
            name=name,
            storage_account_id=storage_account_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             container_name: str,
             name: str,
             storage_account_id: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("container_name", container_name)
        _setter("name", name)
        _setter("storage_account_id", storage_account_id)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> str:
        """
        The Storage Container name.
        """
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="storageAccountId")
    def storage_account_id(self) -> str:
        """
        The resource ID of the Storage Account.
        """
        return pulumi.get(self, "storage_account_id")


@pulumi.output_type
class DataCollectionRuleDestinationsStorageBlobDirect(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerName":
            suggest = "container_name"
        elif key == "storageAccountId":
            suggest = "storage_account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataCollectionRuleDestinationsStorageBlobDirect. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataCollectionRuleDestinationsStorageBlobDirect.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataCollectionRuleDestinationsStorageBlobDirect.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_name: str,
                 name: str,
                 storage_account_id: str):
        """
        :param str container_name: The Storage Container name.
        :param str name: The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
        :param str storage_account_id: The resource ID of the Storage Account.
        """
        DataCollectionRuleDestinationsStorageBlobDirect._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            container_name=container_name,
            name=name,
            storage_account_id=storage_account_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             container_name: str,
             name: str,
             storage_account_id: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("container_name", container_name)
        _setter("name", name)
        _setter("storage_account_id", storage_account_id)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> str:
        """
        The Storage Container name.
        """
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="storageAccountId")
    def storage_account_id(self) -> str:
        """
        The resource ID of the Storage Account.
        """
        return pulumi.get(self, "storage_account_id")


@pulumi.output_type
class DataCollectionRuleDestinationsStorageTableDirect(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageAccountId":
            suggest = "storage_account_id"
        elif key == "tableName":
            suggest = "table_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataCollectionRuleDestinationsStorageTableDirect. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataCollectionRuleDestinationsStorageTableDirect.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataCollectionRuleDestinationsStorageTableDirect.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 storage_account_id: str,
                 table_name: str):
        """
        :param str name: The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
        :param str storage_account_id: The resource ID of the Storage Account.
        :param str table_name: The Storage Table name.
        """
        DataCollectionRuleDestinationsStorageTableDirect._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            storage_account_id=storage_account_id,
            table_name=table_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             storage_account_id: str,
             table_name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("storage_account_id", storage_account_id)
        _setter("table_name", table_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="storageAccountId")
    def storage_account_id(self) -> str:
        """
        The resource ID of the Storage Account.
        """
        return pulumi.get(self, "storage_account_id")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        """
        The Storage Table name.
        """
        return pulumi.get(self, "table_name")


@pulumi.output_type
class DataCollectionRuleIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "identityIds":
            suggest = "identity_ids"
        elif key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataCollectionRuleIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataCollectionRuleIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataCollectionRuleIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 identity_ids: Optional[Sequence[str]] = None,
                 principal_id: Optional[str] = None,
                 tenant_id: Optional[str] = None):
        """
        :param str type: Specifies the type of Managed Service Identity that should be configured on this Data Collection Rule. Possible values are `SystemAssigned` and `UserAssigned`.
        :param Sequence[str] identity_ids: A list of User Assigned Managed Identity IDs to be assigned to this Data Collection Rule. Currently, up to 1 identity is supported.
               
               > **NOTE:** This is required when `type` is set to `UserAssigned`.
        :param str principal_id: The Principal ID associated with this Managed Service Identity.
        :param str tenant_id: The Tenant ID associated with this Managed Service Identity.
        """
        DataCollectionRuleIdentity._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            identity_ids=identity_ids,
            principal_id=principal_id,
            tenant_id=tenant_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             identity_ids: Optional[Sequence[str]] = None,
             principal_id: Optional[str] = None,
             tenant_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if identity_ids is not None:
            _setter("identity_ids", identity_ids)
        if principal_id is not None:
            _setter("principal_id", principal_id)
        if tenant_id is not None:
            _setter("tenant_id", tenant_id)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the type of Managed Service Identity that should be configured on this Data Collection Rule. Possible values are `SystemAssigned` and `UserAssigned`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Optional[Sequence[str]]:
        """
        A list of User Assigned Managed Identity IDs to be assigned to this Data Collection Rule. Currently, up to 1 identity is supported.

        > **NOTE:** This is required when `type` is set to `UserAssigned`.
        """
        return pulumi.get(self, "identity_ids")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[str]:
        """
        The Principal ID associated with this Managed Service Identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        """
        The Tenant ID associated with this Managed Service Identity.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class DataCollectionRuleStreamDeclaration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "streamName":
            suggest = "stream_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataCollectionRuleStreamDeclaration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataCollectionRuleStreamDeclaration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataCollectionRuleStreamDeclaration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 columns: Sequence['outputs.DataCollectionRuleStreamDeclarationColumn'],
                 stream_name: str):
        """
        :param Sequence['DataCollectionRuleStreamDeclarationColumnArgs'] columns: One or more `column` blocks as defined above.
        :param str stream_name: The name of the custom stream. This name should be unique across all `stream_declaration` blocks.
        """
        DataCollectionRuleStreamDeclaration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            columns=columns,
            stream_name=stream_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             columns: Sequence['outputs.DataCollectionRuleStreamDeclarationColumn'],
             stream_name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("columns", columns)
        _setter("stream_name", stream_name)

    @property
    @pulumi.getter
    def columns(self) -> Sequence['outputs.DataCollectionRuleStreamDeclarationColumn']:
        """
        One or more `column` blocks as defined above.
        """
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        """
        The name of the custom stream. This name should be unique across all `stream_declaration` blocks.
        """
        return pulumi.get(self, "stream_name")


@pulumi.output_type
class DataCollectionRuleStreamDeclarationColumn(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str):
        """
        :param str name: The name of the column.
        :param str type: The type of the column data. Possible values are `string`, `int`, `long`, `real`, `boolean`, `datetime`,and `dynamic`.
        """
        DataCollectionRuleStreamDeclarationColumn._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the column.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the column data. Possible values are `string`, `int`, `long`, `real`, `boolean`, `datetime`,and `dynamic`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DiagnosticSettingEnabledLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "categoryGroup":
            suggest = "category_group"
        elif key == "retentionPolicy":
            suggest = "retention_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DiagnosticSettingEnabledLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DiagnosticSettingEnabledLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DiagnosticSettingEnabledLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 category_group: Optional[str] = None,
                 retention_policy: Optional['outputs.DiagnosticSettingEnabledLogRetentionPolicy'] = None):
        """
        :param str category: The name of a Diagnostic Log Category for this Resource.
               
               > **NOTE:** The Log Categories available vary depending on the Resource being used. You may wish to use the `monitoring_get_diagnostic_categories` Data Source or [list of service specific schemas](https://docs.microsoft.com/azure/azure-monitor/platform/resource-logs-schema#service-specific-schemas) to identify which categories are available for a given Resource.
        :param str category_group: The name of a Diagnostic Log Category Group for this Resource.
               
               > **NOTE:** Not all resources have category groups available.
               
               > **NOTE:** Exactly one of `category` or `category_group` must be specified.
        :param 'DiagnosticSettingEnabledLogRetentionPolicyArgs' retention_policy: A `retention_policy` block as defined below.
               
               !> **NOTE:** `retention_policy` has been deprecated in favor of `storage.ManagementPolicy` resource - to learn more information on the deprecation [in the Azure documentation](https://aka.ms/diagnostic_settings_log_retention).
        """
        DiagnosticSettingEnabledLog._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            category_group=category_group,
            retention_policy=retention_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[str] = None,
             category_group: Optional[str] = None,
             retention_policy: Optional['outputs.DiagnosticSettingEnabledLogRetentionPolicy'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category is not None:
            _setter("category", category)
        if category_group is not None:
            _setter("category_group", category_group)
        if retention_policy is not None:
            _setter("retention_policy", retention_policy)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        """
        The name of a Diagnostic Log Category for this Resource.

        > **NOTE:** The Log Categories available vary depending on the Resource being used. You may wish to use the `monitoring_get_diagnostic_categories` Data Source or [list of service specific schemas](https://docs.microsoft.com/azure/azure-monitor/platform/resource-logs-schema#service-specific-schemas) to identify which categories are available for a given Resource.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="categoryGroup")
    def category_group(self) -> Optional[str]:
        """
        The name of a Diagnostic Log Category Group for this Resource.

        > **NOTE:** Not all resources have category groups available.

        > **NOTE:** Exactly one of `category` or `category_group` must be specified.
        """
        return pulumi.get(self, "category_group")

    @property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> Optional['outputs.DiagnosticSettingEnabledLogRetentionPolicy']:
        """
        A `retention_policy` block as defined below.

        !> **NOTE:** `retention_policy` has been deprecated in favor of `storage.ManagementPolicy` resource - to learn more information on the deprecation [in the Azure documentation](https://aka.ms/diagnostic_settings_log_retention).
        """
        warnings.warn("""`retention_policy` has been deprecated in favor of `azurerm_storage_management_policy` resource - to learn more https://aka.ms/diagnostic_settings_log_retention""", DeprecationWarning)
        pulumi.log.warn("""retention_policy is deprecated: `retention_policy` has been deprecated in favor of `azurerm_storage_management_policy` resource - to learn more https://aka.ms/diagnostic_settings_log_retention""")

        return pulumi.get(self, "retention_policy")


@pulumi.output_type
class DiagnosticSettingEnabledLogRetentionPolicy(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 days: Optional[int] = None):
        """
        :param bool enabled: Is this Retention Policy enabled?
        :param int days: The number of days for which this Retention Policy should apply.
               
               
               > **NOTE:** Setting this to `0` will retain the events indefinitely.
        """
        DiagnosticSettingEnabledLogRetentionPolicy._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            days=days,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: bool,
             days: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)
        if days is not None:
            _setter("days", days)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Is this Retention Policy enabled?
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def days(self) -> Optional[int]:
        """
        The number of days for which this Retention Policy should apply.


        > **NOTE:** Setting this to `0` will retain the events indefinitely.
        """
        return pulumi.get(self, "days")


@pulumi.output_type
class DiagnosticSettingLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "categoryGroup":
            suggest = "category_group"
        elif key == "retentionPolicy":
            suggest = "retention_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DiagnosticSettingLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DiagnosticSettingLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DiagnosticSettingLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 category_group: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 retention_policy: Optional['outputs.DiagnosticSettingLogRetentionPolicy'] = None):
        """
        :param str category: The name of a Diagnostic Log Category for this Resource.
               
               > **NOTE:** The Log Categories available vary depending on the Resource being used. You may wish to use the `monitoring_get_diagnostic_categories` Data Source or [list of service specific schemas](https://docs.microsoft.com/azure/azure-monitor/platform/resource-logs-schema#service-specific-schemas) to identify which categories are available for a given Resource.
        :param str category_group: The name of a Diagnostic Log Category Group for this Resource.
               
               > **NOTE:** Not all resources have category groups available.
               
               > **NOTE:** Exactly one of `category` or `category_group` must be specified.
        :param bool enabled: Is this Diagnostic Log enabled? Defaults to `true`.
        :param 'DiagnosticSettingLogRetentionPolicyArgs' retention_policy: A `retention_policy` block as defined below.
               
               !> **NOTE:** `retention_policy` has been deprecated in favor of `storage.ManagementPolicy` resource - to learn more information on the deprecation [in the Azure documentation](https://aka.ms/diagnostic_settings_log_retention).
        """
        DiagnosticSettingLog._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            category_group=category_group,
            enabled=enabled,
            retention_policy=retention_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[str] = None,
             category_group: Optional[str] = None,
             enabled: Optional[bool] = None,
             retention_policy: Optional['outputs.DiagnosticSettingLogRetentionPolicy'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category is not None:
            _setter("category", category)
        if category_group is not None:
            _setter("category_group", category_group)
        if enabled is not None:
            _setter("enabled", enabled)
        if retention_policy is not None:
            _setter("retention_policy", retention_policy)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        """
        The name of a Diagnostic Log Category for this Resource.

        > **NOTE:** The Log Categories available vary depending on the Resource being used. You may wish to use the `monitoring_get_diagnostic_categories` Data Source or [list of service specific schemas](https://docs.microsoft.com/azure/azure-monitor/platform/resource-logs-schema#service-specific-schemas) to identify which categories are available for a given Resource.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="categoryGroup")
    def category_group(self) -> Optional[str]:
        """
        The name of a Diagnostic Log Category Group for this Resource.

        > **NOTE:** Not all resources have category groups available.

        > **NOTE:** Exactly one of `category` or `category_group` must be specified.
        """
        return pulumi.get(self, "category_group")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Is this Diagnostic Log enabled? Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> Optional['outputs.DiagnosticSettingLogRetentionPolicy']:
        """
        A `retention_policy` block as defined below.

        !> **NOTE:** `retention_policy` has been deprecated in favor of `storage.ManagementPolicy` resource - to learn more information on the deprecation [in the Azure documentation](https://aka.ms/diagnostic_settings_log_retention).
        """
        warnings.warn("""`retention_policy` has been deprecated in favor of `azurerm_storage_management_policy` resource - to learn more https://aka.ms/diagnostic_settings_log_retention""", DeprecationWarning)
        pulumi.log.warn("""retention_policy is deprecated: `retention_policy` has been deprecated in favor of `azurerm_storage_management_policy` resource - to learn more https://aka.ms/diagnostic_settings_log_retention""")

        return pulumi.get(self, "retention_policy")


@pulumi.output_type
class DiagnosticSettingLogRetentionPolicy(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 days: Optional[int] = None):
        """
        :param bool enabled: Is this Retention Policy enabled?
        :param int days: The number of days for which this Retention Policy should apply.
               
               
               > **NOTE:** Setting this to `0` will retain the events indefinitely.
        """
        DiagnosticSettingLogRetentionPolicy._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            days=days,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: bool,
             days: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)
        if days is not None:
            _setter("days", days)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Is this Retention Policy enabled?
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def days(self) -> Optional[int]:
        """
        The number of days for which this Retention Policy should apply.


        > **NOTE:** Setting this to `0` will retain the events indefinitely.
        """
        return pulumi.get(self, "days")


@pulumi.output_type
class DiagnosticSettingMetric(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "retentionPolicy":
            suggest = "retention_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DiagnosticSettingMetric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DiagnosticSettingMetric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DiagnosticSettingMetric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: str,
                 enabled: Optional[bool] = None,
                 retention_policy: Optional['outputs.DiagnosticSettingMetricRetentionPolicy'] = None):
        """
        :param str category: The name of a Diagnostic Metric Category for this Resource.
               
               > **NOTE:** The Metric Categories available vary depending on the Resource being used. You may wish to use the `monitoring_get_diagnostic_categories` Data Source to identify which categories are available for a given Resource.
        :param bool enabled: Is this Diagnostic Metric enabled? Defaults to `true`.
        :param 'DiagnosticSettingMetricRetentionPolicyArgs' retention_policy: A `retention_policy` block as defined below.
               
               !> **NOTE:** `retention_policy` has been deprecated in favor of `storage.ManagementPolicy` resource - to learn more information on the deprecation [in the Azure documentation](https://aka.ms/diagnostic_settings_log_retention).
        """
        DiagnosticSettingMetric._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            enabled=enabled,
            retention_policy=retention_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: str,
             enabled: Optional[bool] = None,
             retention_policy: Optional['outputs.DiagnosticSettingMetricRetentionPolicy'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("category", category)
        if enabled is not None:
            _setter("enabled", enabled)
        if retention_policy is not None:
            _setter("retention_policy", retention_policy)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        The name of a Diagnostic Metric Category for this Resource.

        > **NOTE:** The Metric Categories available vary depending on the Resource being used. You may wish to use the `monitoring_get_diagnostic_categories` Data Source to identify which categories are available for a given Resource.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Is this Diagnostic Metric enabled? Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> Optional['outputs.DiagnosticSettingMetricRetentionPolicy']:
        """
        A `retention_policy` block as defined below.

        !> **NOTE:** `retention_policy` has been deprecated in favor of `storage.ManagementPolicy` resource - to learn more information on the deprecation [in the Azure documentation](https://aka.ms/diagnostic_settings_log_retention).
        """
        warnings.warn("""`retention_policy` has been deprecated in favor of `azurerm_storage_management_policy` resource - to learn more https://aka.ms/diagnostic_settings_log_retention""", DeprecationWarning)
        pulumi.log.warn("""retention_policy is deprecated: `retention_policy` has been deprecated in favor of `azurerm_storage_management_policy` resource - to learn more https://aka.ms/diagnostic_settings_log_retention""")

        return pulumi.get(self, "retention_policy")


@pulumi.output_type
class DiagnosticSettingMetricRetentionPolicy(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 days: Optional[int] = None):
        """
        :param bool enabled: Is this Retention Policy enabled?
        :param int days: The number of days for which this Retention Policy should apply.
               
               
               > **NOTE:** Setting this to `0` will retain the events indefinitely.
        """
        DiagnosticSettingMetricRetentionPolicy._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            days=days,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: bool,
             days: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)
        if days is not None:
            _setter("days", days)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Is this Retention Policy enabled?
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def days(self) -> Optional[int]:
        """
        The number of days for which this Retention Policy should apply.


        > **NOTE:** Setting this to `0` will retain the events indefinitely.
        """
        return pulumi.get(self, "days")


@pulumi.output_type
class LogProfileRetentionPolicy(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 days: Optional[int] = None):
        """
        :param bool enabled: A boolean value to indicate whether the retention policy is enabled.
        :param int days: The number of days for the retention policy. Defaults to `0`.
        """
        LogProfileRetentionPolicy._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            days=days,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: bool,
             days: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)
        if days is not None:
            _setter("days", days)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        A boolean value to indicate whether the retention policy is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def days(self) -> Optional[int]:
        """
        The number of days for the retention policy. Defaults to `0`.
        """
        return pulumi.get(self, "days")


@pulumi.output_type
class LogzMonitorPlan(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "billingCycle":
            suggest = "billing_cycle"
        elif key == "effectiveDate":
            suggest = "effective_date"
        elif key == "usageType":
            suggest = "usage_type"
        elif key == "planId":
            suggest = "plan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogzMonitorPlan. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogzMonitorPlan.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogzMonitorPlan.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 billing_cycle: str,
                 effective_date: str,
                 usage_type: str,
                 plan_id: Optional[str] = None):
        """
        :param str billing_cycle: Different billing cycles. Possible values are `MONTHLY` or `WEEKLY`. Changing this forces a new logz Monitor to be created.
        :param str effective_date: Date when plan was applied. Changing this forces a new logz Monitor to be created.
        :param str usage_type: Different usage types. Possible values are `PAYG` or `COMMITTED`. Changing this forces a new logz Monitor to be created.
        :param str plan_id: Plan id as published by Logz. The only possible value is `100gb14days`. Defaults to `100gb14days`. Changing this forces a new logz Monitor to be created.
        """
        LogzMonitorPlan._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            billing_cycle=billing_cycle,
            effective_date=effective_date,
            usage_type=usage_type,
            plan_id=plan_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             billing_cycle: str,
             effective_date: str,
             usage_type: str,
             plan_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("billing_cycle", billing_cycle)
        _setter("effective_date", effective_date)
        _setter("usage_type", usage_type)
        if plan_id is not None:
            _setter("plan_id", plan_id)

    @property
    @pulumi.getter(name="billingCycle")
    def billing_cycle(self) -> str:
        """
        Different billing cycles. Possible values are `MONTHLY` or `WEEKLY`. Changing this forces a new logz Monitor to be created.
        """
        return pulumi.get(self, "billing_cycle")

    @property
    @pulumi.getter(name="effectiveDate")
    def effective_date(self) -> str:
        """
        Date when plan was applied. Changing this forces a new logz Monitor to be created.
        """
        return pulumi.get(self, "effective_date")

    @property
    @pulumi.getter(name="usageType")
    def usage_type(self) -> str:
        """
        Different usage types. Possible values are `PAYG` or `COMMITTED`. Changing this forces a new logz Monitor to be created.
        """
        return pulumi.get(self, "usage_type")

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> Optional[str]:
        """
        Plan id as published by Logz. The only possible value is `100gb14days`. Defaults to `100gb14days`. Changing this forces a new logz Monitor to be created.
        """
        return pulumi.get(self, "plan_id")


@pulumi.output_type
class LogzMonitorUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "firstName":
            suggest = "first_name"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "phoneNumber":
            suggest = "phone_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogzMonitorUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogzMonitorUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogzMonitorUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email: str,
                 first_name: str,
                 last_name: str,
                 phone_number: str):
        """
        :param str email: Email of the user used by Logz for contacting them if needed. Changing this forces a new logz Monitor to be created.
               
               > **NOTE** If you use the Azure CLI to authenticate to Azure, the Email of your Azure account needs to be granted the admin permission in your Logz.io account. Otherwise, you may not be able to delete this resource. There is no such limitation for the Service Principal authentication.
        :param str first_name: First Name of the user. Changing this forces a new logz Monitor to be created.
        :param str last_name: Last Name of the user. Changing this forces a new logz Monitor to be created.
        :param str phone_number: Phone number of the user used by Logz for contacting them if needed. Changing this forces a new logz Monitor to be created.
        """
        LogzMonitorUser._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            email=email,
            first_name=first_name,
            last_name=last_name,
            phone_number=phone_number,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             email: str,
             first_name: str,
             last_name: str,
             phone_number: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("email", email)
        _setter("first_name", first_name)
        _setter("last_name", last_name)
        _setter("phone_number", phone_number)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        Email of the user used by Logz for contacting them if needed. Changing this forces a new logz Monitor to be created.

        > **NOTE** If you use the Azure CLI to authenticate to Azure, the Email of your Azure account needs to be granted the admin permission in your Logz.io account. Otherwise, you may not be able to delete this resource. There is no such limitation for the Service Principal authentication.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        """
        First Name of the user. Changing this forces a new logz Monitor to be created.
        """
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        """
        Last Name of the user. Changing this forces a new logz Monitor to be created.
        """
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> str:
        """
        Phone number of the user used by Logz for contacting them if needed. Changing this forces a new logz Monitor to be created.
        """
        return pulumi.get(self, "phone_number")


@pulumi.output_type
class LogzSubAccountTagRuleTagFilter(dict):
    def __init__(__self__, *,
                 action: str,
                 name: str,
                 value: Optional[str] = None):
        """
        :param str action: The action is used to limit logs collection to include or exclude Azure resources with specific tags. Possible values are `Include` and `Exclude`. Note that the `Exclude` takes priority over the `Include`.
        :param str name: The name of the tag to match.
        :param str value: The value of the tag to match.
        """
        LogzSubAccountTagRuleTagFilter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: str,
             name: str,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("name", name)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        The action is used to limit logs collection to include or exclude Azure resources with specific tags. Possible values are `Include` and `Exclude`. Note that the `Exclude` takes priority over the `Include`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the tag to match.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value of the tag to match.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class LogzSubAccountUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "firstName":
            suggest = "first_name"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "phoneNumber":
            suggest = "phone_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogzSubAccountUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogzSubAccountUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogzSubAccountUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email: str,
                 first_name: str,
                 last_name: str,
                 phone_number: str):
        """
        :param str email: Email of the user used by Logz for contacting them if needed. A valid email address consists of an email prefix and an email domain. The prefix and domain may contain only letters, numbers, underscores, periods and dashes. Changing this forces a new logz Sub Account to be created.
               
               > **NOTE** If you use the Azure CLI to authenticate to Azure, the Email of your Azure account needs to be granted the admin permission in your Logz.io account. Otherwise, you may not be able to delete this resource. There is no such limitation for the Service Principal authentication.
        :param str first_name: First Name of the user. Possible values must be between 1 and 50 characters in length. Changing this forces a new logz Sub Account to be created.
        :param str last_name: Last Name of the user. Possible values must be between 1 and 50 characters in length. Changing this forces a new logz Sub Account to be created.
        :param str phone_number: Phone number of the user used by Logz for contacting them if needed. Possible values must be between 1 and 40 characters in length. Changing this forces a new logz Sub Account to be created.
        """
        LogzSubAccountUser._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            email=email,
            first_name=first_name,
            last_name=last_name,
            phone_number=phone_number,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             email: str,
             first_name: str,
             last_name: str,
             phone_number: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("email", email)
        _setter("first_name", first_name)
        _setter("last_name", last_name)
        _setter("phone_number", phone_number)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        Email of the user used by Logz for contacting them if needed. A valid email address consists of an email prefix and an email domain. The prefix and domain may contain only letters, numbers, underscores, periods and dashes. Changing this forces a new logz Sub Account to be created.

        > **NOTE** If you use the Azure CLI to authenticate to Azure, the Email of your Azure account needs to be granted the admin permission in your Logz.io account. Otherwise, you may not be able to delete this resource. There is no such limitation for the Service Principal authentication.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        """
        First Name of the user. Possible values must be between 1 and 50 characters in length. Changing this forces a new logz Sub Account to be created.
        """
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        """
        Last Name of the user. Possible values must be between 1 and 50 characters in length. Changing this forces a new logz Sub Account to be created.
        """
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> str:
        """
        Phone number of the user used by Logz for contacting them if needed. Possible values must be between 1 and 40 characters in length. Changing this forces a new logz Sub Account to be created.
        """
        return pulumi.get(self, "phone_number")


@pulumi.output_type
class LogzTagRuleTagFilter(dict):
    def __init__(__self__, *,
                 action: str,
                 name: str,
                 value: Optional[str] = None):
        """
        :param str action: The action for a filtering tag. Possible values are `Include` and `Exclude` is allowed. Note that the `Exclude` takes priority over the `Include`.
        :param str name: The name of this `tag_filter`.
        :param str value: The value of this `tag_filter`.
        """
        LogzTagRuleTagFilter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: str,
             name: str,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("name", name)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        The action for a filtering tag. Possible values are `Include` and `Exclude` is allowed. Note that the `Exclude` takes priority over the `Include`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this `tag_filter`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value of this `tag_filter`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class MetricAlertAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionGroupId":
            suggest = "action_group_id"
        elif key == "webhookProperties":
            suggest = "webhook_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricAlertAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricAlertAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricAlertAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_group_id: str,
                 webhook_properties: Optional[Mapping[str, str]] = None):
        """
        :param str action_group_id: The ID of the Action Group can be sourced from the `monitoring.ActionGroup` resource
        :param Mapping[str, str] webhook_properties: The map of custom string properties to include with the post operation. These data are appended to the webhook payload.
        """
        MetricAlertAction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action_group_id=action_group_id,
            webhook_properties=webhook_properties,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action_group_id: str,
             webhook_properties: Optional[Mapping[str, str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action_group_id", action_group_id)
        if webhook_properties is not None:
            _setter("webhook_properties", webhook_properties)

    @property
    @pulumi.getter(name="actionGroupId")
    def action_group_id(self) -> str:
        """
        The ID of the Action Group can be sourced from the `monitoring.ActionGroup` resource
        """
        return pulumi.get(self, "action_group_id")

    @property
    @pulumi.getter(name="webhookProperties")
    def webhook_properties(self) -> Optional[Mapping[str, str]]:
        """
        The map of custom string properties to include with the post operation. These data are appended to the webhook payload.
        """
        return pulumi.get(self, "webhook_properties")


@pulumi.output_type
class MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "componentId":
            suggest = "component_id"
        elif key == "failedLocationCount":
            suggest = "failed_location_count"
        elif key == "webTestId":
            suggest = "web_test_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 component_id: str,
                 failed_location_count: int,
                 web_test_id: str):
        """
        :param str component_id: The ID of the Application Insights Resource.
        :param int failed_location_count: The number of failed locations.
        :param str web_test_id: The ID of the Application Insights Web Test.
        """
        MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            component_id=component_id,
            failed_location_count=failed_location_count,
            web_test_id=web_test_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             component_id: str,
             failed_location_count: int,
             web_test_id: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("component_id", component_id)
        _setter("failed_location_count", failed_location_count)
        _setter("web_test_id", web_test_id)

    @property
    @pulumi.getter(name="componentId")
    def component_id(self) -> str:
        """
        The ID of the Application Insights Resource.
        """
        return pulumi.get(self, "component_id")

    @property
    @pulumi.getter(name="failedLocationCount")
    def failed_location_count(self) -> int:
        """
        The number of failed locations.
        """
        return pulumi.get(self, "failed_location_count")

    @property
    @pulumi.getter(name="webTestId")
    def web_test_id(self) -> str:
        """
        The ID of the Application Insights Web Test.
        """
        return pulumi.get(self, "web_test_id")


@pulumi.output_type
class MetricAlertCriteria(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricName":
            suggest = "metric_name"
        elif key == "metricNamespace":
            suggest = "metric_namespace"
        elif key == "skipMetricValidation":
            suggest = "skip_metric_validation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricAlertCriteria. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricAlertCriteria.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricAlertCriteria.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregation: str,
                 metric_name: str,
                 metric_namespace: str,
                 operator: str,
                 threshold: float,
                 dimensions: Optional[Sequence['outputs.MetricAlertCriteriaDimension']] = None,
                 skip_metric_validation: Optional[bool] = None):
        """
        :param str aggregation: The statistic that runs over the metric values. Possible values are `Average`, `Count`, `Minimum`, `Maximum` and `Total`.
        :param str metric_name: One of the metric names to be monitored.
        :param str metric_namespace: One of the metric namespaces to be monitored.
        :param str operator: The criteria operator. Possible values are `Equals`, `GreaterThan`, `GreaterThanOrEqual`, `LessThan` and `LessThanOrEqual`.
        :param float threshold: The criteria threshold value that activates the alert.
        :param Sequence['MetricAlertCriteriaDimensionArgs'] dimensions: One or more `dimension` blocks as defined below.
        :param bool skip_metric_validation: Skip the metric validation to allow creating an alert rule on a custom metric that isn't yet emitted? Defaults to `false`.
        """
        MetricAlertCriteria._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregation=aggregation,
            metric_name=metric_name,
            metric_namespace=metric_namespace,
            operator=operator,
            threshold=threshold,
            dimensions=dimensions,
            skip_metric_validation=skip_metric_validation,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregation: str,
             metric_name: str,
             metric_namespace: str,
             operator: str,
             threshold: float,
             dimensions: Optional[Sequence['outputs.MetricAlertCriteriaDimension']] = None,
             skip_metric_validation: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("aggregation", aggregation)
        _setter("metric_name", metric_name)
        _setter("metric_namespace", metric_namespace)
        _setter("operator", operator)
        _setter("threshold", threshold)
        if dimensions is not None:
            _setter("dimensions", dimensions)
        if skip_metric_validation is not None:
            _setter("skip_metric_validation", skip_metric_validation)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        """
        The statistic that runs over the metric values. Possible values are `Average`, `Count`, `Minimum`, `Maximum` and `Total`.
        """
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        One of the metric names to be monitored.
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="metricNamespace")
    def metric_namespace(self) -> str:
        """
        One of the metric namespaces to be monitored.
        """
        return pulumi.get(self, "metric_namespace")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The criteria operator. Possible values are `Equals`, `GreaterThan`, `GreaterThanOrEqual`, `LessThan` and `LessThanOrEqual`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def threshold(self) -> float:
        """
        The criteria threshold value that activates the alert.
        """
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.MetricAlertCriteriaDimension']]:
        """
        One or more `dimension` blocks as defined below.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="skipMetricValidation")
    def skip_metric_validation(self) -> Optional[bool]:
        """
        Skip the metric validation to allow creating an alert rule on a custom metric that isn't yet emitted? Defaults to `false`.
        """
        return pulumi.get(self, "skip_metric_validation")


@pulumi.output_type
class MetricAlertCriteriaDimension(dict):
    def __init__(__self__, *,
                 name: str,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str name: One of the dimension names.
        :param str operator: The dimension operator. Possible values are `Include`, `Exclude` and `StartsWith`.
        :param Sequence[str] values: The list of dimension values.
        """
        MetricAlertCriteriaDimension._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        One of the dimension names.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The dimension operator. Possible values are `Include`, `Exclude` and `StartsWith`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The list of dimension values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class MetricAlertDynamicCriteria(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertSensitivity":
            suggest = "alert_sensitivity"
        elif key == "metricName":
            suggest = "metric_name"
        elif key == "metricNamespace":
            suggest = "metric_namespace"
        elif key == "evaluationFailureCount":
            suggest = "evaluation_failure_count"
        elif key == "evaluationTotalCount":
            suggest = "evaluation_total_count"
        elif key == "ignoreDataBefore":
            suggest = "ignore_data_before"
        elif key == "skipMetricValidation":
            suggest = "skip_metric_validation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricAlertDynamicCriteria. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricAlertDynamicCriteria.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricAlertDynamicCriteria.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregation: str,
                 alert_sensitivity: str,
                 metric_name: str,
                 metric_namespace: str,
                 operator: str,
                 dimensions: Optional[Sequence['outputs.MetricAlertDynamicCriteriaDimension']] = None,
                 evaluation_failure_count: Optional[int] = None,
                 evaluation_total_count: Optional[int] = None,
                 ignore_data_before: Optional[str] = None,
                 skip_metric_validation: Optional[bool] = None):
        """
        :param str aggregation: The statistic that runs over the metric values. Possible values are `Average`, `Count`, `Minimum`, `Maximum` and `Total`.
        :param str alert_sensitivity: The extent of deviation required to trigger an alert. Possible values are `Low`, `Medium` and `High`.
        :param str metric_name: One of the metric names to be monitored.
        :param str metric_namespace: One of the metric namespaces to be monitored.
        :param str operator: The criteria operator. Possible values are `LessThan`, `GreaterThan` and `GreaterOrLessThan`.
        :param Sequence['MetricAlertDynamicCriteriaDimensionArgs'] dimensions: One or more `dimension` blocks as defined below.
        :param int evaluation_failure_count: The number of violations to trigger an alert. Should be smaller or equal to `evaluation_total_count`. Defaults to `4`.
        :param int evaluation_total_count: The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (`window_size`) and the selected number of aggregated points. Defaults to `4`.
        :param str ignore_data_before: The [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) date from which to start learning the metric historical data and calculate the dynamic thresholds.
        :param bool skip_metric_validation: Skip the metric validation to allow creating an alert rule on a custom metric that isn't yet emitted?
        """
        MetricAlertDynamicCriteria._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregation=aggregation,
            alert_sensitivity=alert_sensitivity,
            metric_name=metric_name,
            metric_namespace=metric_namespace,
            operator=operator,
            dimensions=dimensions,
            evaluation_failure_count=evaluation_failure_count,
            evaluation_total_count=evaluation_total_count,
            ignore_data_before=ignore_data_before,
            skip_metric_validation=skip_metric_validation,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregation: str,
             alert_sensitivity: str,
             metric_name: str,
             metric_namespace: str,
             operator: str,
             dimensions: Optional[Sequence['outputs.MetricAlertDynamicCriteriaDimension']] = None,
             evaluation_failure_count: Optional[int] = None,
             evaluation_total_count: Optional[int] = None,
             ignore_data_before: Optional[str] = None,
             skip_metric_validation: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("aggregation", aggregation)
        _setter("alert_sensitivity", alert_sensitivity)
        _setter("metric_name", metric_name)
        _setter("metric_namespace", metric_namespace)
        _setter("operator", operator)
        if dimensions is not None:
            _setter("dimensions", dimensions)
        if evaluation_failure_count is not None:
            _setter("evaluation_failure_count", evaluation_failure_count)
        if evaluation_total_count is not None:
            _setter("evaluation_total_count", evaluation_total_count)
        if ignore_data_before is not None:
            _setter("ignore_data_before", ignore_data_before)
        if skip_metric_validation is not None:
            _setter("skip_metric_validation", skip_metric_validation)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        """
        The statistic that runs over the metric values. Possible values are `Average`, `Count`, `Minimum`, `Maximum` and `Total`.
        """
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter(name="alertSensitivity")
    def alert_sensitivity(self) -> str:
        """
        The extent of deviation required to trigger an alert. Possible values are `Low`, `Medium` and `High`.
        """
        return pulumi.get(self, "alert_sensitivity")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        One of the metric names to be monitored.
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="metricNamespace")
    def metric_namespace(self) -> str:
        """
        One of the metric namespaces to be monitored.
        """
        return pulumi.get(self, "metric_namespace")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The criteria operator. Possible values are `LessThan`, `GreaterThan` and `GreaterOrLessThan`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.MetricAlertDynamicCriteriaDimension']]:
        """
        One or more `dimension` blocks as defined below.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="evaluationFailureCount")
    def evaluation_failure_count(self) -> Optional[int]:
        """
        The number of violations to trigger an alert. Should be smaller or equal to `evaluation_total_count`. Defaults to `4`.
        """
        return pulumi.get(self, "evaluation_failure_count")

    @property
    @pulumi.getter(name="evaluationTotalCount")
    def evaluation_total_count(self) -> Optional[int]:
        """
        The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (`window_size`) and the selected number of aggregated points. Defaults to `4`.
        """
        return pulumi.get(self, "evaluation_total_count")

    @property
    @pulumi.getter(name="ignoreDataBefore")
    def ignore_data_before(self) -> Optional[str]:
        """
        The [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) date from which to start learning the metric historical data and calculate the dynamic thresholds.
        """
        return pulumi.get(self, "ignore_data_before")

    @property
    @pulumi.getter(name="skipMetricValidation")
    def skip_metric_validation(self) -> Optional[bool]:
        """
        Skip the metric validation to allow creating an alert rule on a custom metric that isn't yet emitted?
        """
        return pulumi.get(self, "skip_metric_validation")


@pulumi.output_type
class MetricAlertDynamicCriteriaDimension(dict):
    def __init__(__self__, *,
                 name: str,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str name: One of the dimension names.
        :param str operator: The dimension operator. Possible values are `Include`, `Exclude` and `StartsWith`.
        :param Sequence[str] values: The list of dimension values.
        """
        MetricAlertDynamicCriteriaDimension._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        One of the dimension names.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The dimension operator. Possible values are `Include`, `Exclude` and `StartsWith`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The list of dimension values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ScheduledQueryRulesAlertAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionGroups":
            suggest = "action_groups"
        elif key == "customWebhookPayload":
            suggest = "custom_webhook_payload"
        elif key == "emailSubject":
            suggest = "email_subject"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledQueryRulesAlertAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledQueryRulesAlertAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledQueryRulesAlertAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_groups: Sequence[str],
                 custom_webhook_payload: Optional[str] = None,
                 email_subject: Optional[str] = None):
        """
        :param Sequence[str] action_groups: List of action group reference resource IDs.
        :param str custom_webhook_payload: Custom payload to be sent for all webhook payloads in alerting action.
        :param str email_subject: Custom subject override for all email ids in Azure action group.
        """
        ScheduledQueryRulesAlertAction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action_groups=action_groups,
            custom_webhook_payload=custom_webhook_payload,
            email_subject=email_subject,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action_groups: Sequence[str],
             custom_webhook_payload: Optional[str] = None,
             email_subject: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action_groups", action_groups)
        if custom_webhook_payload is not None:
            _setter("custom_webhook_payload", custom_webhook_payload)
        if email_subject is not None:
            _setter("email_subject", email_subject)

    @property
    @pulumi.getter(name="actionGroups")
    def action_groups(self) -> Sequence[str]:
        """
        List of action group reference resource IDs.
        """
        return pulumi.get(self, "action_groups")

    @property
    @pulumi.getter(name="customWebhookPayload")
    def custom_webhook_payload(self) -> Optional[str]:
        """
        Custom payload to be sent for all webhook payloads in alerting action.
        """
        return pulumi.get(self, "custom_webhook_payload")

    @property
    @pulumi.getter(name="emailSubject")
    def email_subject(self) -> Optional[str]:
        """
        Custom subject override for all email ids in Azure action group.
        """
        return pulumi.get(self, "email_subject")


@pulumi.output_type
class ScheduledQueryRulesAlertTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricTrigger":
            suggest = "metric_trigger"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledQueryRulesAlertTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledQueryRulesAlertTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledQueryRulesAlertTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operator: str,
                 threshold: float,
                 metric_trigger: Optional['outputs.ScheduledQueryRulesAlertTriggerMetricTrigger'] = None):
        """
        :param str operator: Evaluation operation for rule - 'GreaterThan', GreaterThanOrEqual', 'LessThan', or 'LessThanOrEqual'.
        :param float threshold: Result or count threshold based on which rule should be triggered. Values must be between 0 and 10000 inclusive.
        :param 'ScheduledQueryRulesAlertTriggerMetricTriggerArgs' metric_trigger: A `metric_trigger` block as defined above. Trigger condition for metric query rule.
        """
        ScheduledQueryRulesAlertTrigger._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            threshold=threshold,
            metric_trigger=metric_trigger,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             threshold: float,
             metric_trigger: Optional['outputs.ScheduledQueryRulesAlertTriggerMetricTrigger'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("threshold", threshold)
        if metric_trigger is not None:
            _setter("metric_trigger", metric_trigger)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Evaluation operation for rule - 'GreaterThan', GreaterThanOrEqual', 'LessThan', or 'LessThanOrEqual'.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def threshold(self) -> float:
        """
        Result or count threshold based on which rule should be triggered. Values must be between 0 and 10000 inclusive.
        """
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter(name="metricTrigger")
    def metric_trigger(self) -> Optional['outputs.ScheduledQueryRulesAlertTriggerMetricTrigger']:
        """
        A `metric_trigger` block as defined above. Trigger condition for metric query rule.
        """
        return pulumi.get(self, "metric_trigger")


@pulumi.output_type
class ScheduledQueryRulesAlertTriggerMetricTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricTriggerType":
            suggest = "metric_trigger_type"
        elif key == "metricColumn":
            suggest = "metric_column"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledQueryRulesAlertTriggerMetricTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledQueryRulesAlertTriggerMetricTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledQueryRulesAlertTriggerMetricTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric_trigger_type: str,
                 operator: str,
                 threshold: float,
                 metric_column: Optional[str] = None):
        """
        :param str metric_trigger_type: Metric Trigger Type - 'Consecutive' or 'Total'.
        :param str operator: Evaluation operation for rule - 'Equal', 'GreaterThan', GreaterThanOrEqual', 'LessThan', or 'LessThanOrEqual'.
        :param float threshold: The threshold of the metric trigger. Values must be between 0 and 10000 inclusive.
        :param str metric_column: Evaluation of metric on a particular column.
        """
        ScheduledQueryRulesAlertTriggerMetricTrigger._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metric_trigger_type=metric_trigger_type,
            operator=operator,
            threshold=threshold,
            metric_column=metric_column,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metric_trigger_type: str,
             operator: str,
             threshold: float,
             metric_column: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("metric_trigger_type", metric_trigger_type)
        _setter("operator", operator)
        _setter("threshold", threshold)
        if metric_column is not None:
            _setter("metric_column", metric_column)

    @property
    @pulumi.getter(name="metricTriggerType")
    def metric_trigger_type(self) -> str:
        """
        Metric Trigger Type - 'Consecutive' or 'Total'.
        """
        return pulumi.get(self, "metric_trigger_type")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Evaluation operation for rule - 'Equal', 'GreaterThan', GreaterThanOrEqual', 'LessThan', or 'LessThanOrEqual'.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def threshold(self) -> float:
        """
        The threshold of the metric trigger. Values must be between 0 and 10000 inclusive.
        """
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter(name="metricColumn")
    def metric_column(self) -> Optional[str]:
        """
        Evaluation of metric on a particular column.
        """
        return pulumi.get(self, "metric_column")


@pulumi.output_type
class ScheduledQueryRulesAlertV2Action(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionGroups":
            suggest = "action_groups"
        elif key == "customProperties":
            suggest = "custom_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledQueryRulesAlertV2Action. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledQueryRulesAlertV2Action.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledQueryRulesAlertV2Action.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_groups: Optional[Sequence[str]] = None,
                 custom_properties: Optional[Mapping[str, str]] = None):
        """
        :param Sequence[str] action_groups: List of Action Group resource IDs to invoke when the alert fires.
        :param Mapping[str, str] custom_properties: Specifies the properties of an alert payload.
        """
        ScheduledQueryRulesAlertV2Action._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action_groups=action_groups,
            custom_properties=custom_properties,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action_groups: Optional[Sequence[str]] = None,
             custom_properties: Optional[Mapping[str, str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if action_groups is not None:
            _setter("action_groups", action_groups)
        if custom_properties is not None:
            _setter("custom_properties", custom_properties)

    @property
    @pulumi.getter(name="actionGroups")
    def action_groups(self) -> Optional[Sequence[str]]:
        """
        List of Action Group resource IDs to invoke when the alert fires.
        """
        return pulumi.get(self, "action_groups")

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Optional[Mapping[str, str]]:
        """
        Specifies the properties of an alert payload.
        """
        return pulumi.get(self, "custom_properties")


@pulumi.output_type
class ScheduledQueryRulesAlertV2Criteria(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeAggregationMethod":
            suggest = "time_aggregation_method"
        elif key == "failingPeriods":
            suggest = "failing_periods"
        elif key == "metricMeasureColumn":
            suggest = "metric_measure_column"
        elif key == "resourceIdColumn":
            suggest = "resource_id_column"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledQueryRulesAlertV2Criteria. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledQueryRulesAlertV2Criteria.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledQueryRulesAlertV2Criteria.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operator: str,
                 query: str,
                 threshold: float,
                 time_aggregation_method: str,
                 dimensions: Optional[Sequence['outputs.ScheduledQueryRulesAlertV2CriteriaDimension']] = None,
                 failing_periods: Optional['outputs.ScheduledQueryRulesAlertV2CriteriaFailingPeriods'] = None,
                 metric_measure_column: Optional[str] = None,
                 resource_id_column: Optional[str] = None):
        """
        :param str operator: Specifies the criteria operator. Possible values are `Equal`, `GreaterThan`, `GreaterThanOrEqual`, `LessThan`,and `LessThanOrEqual`.
        :param str query: The query to run on logs. The results returned by this query are used to populate the alert.
        :param float threshold: Specifies the criteria threshold value that activates the alert.
        :param str time_aggregation_method: The type of aggregation to apply to the data points in aggregation granularity. Possible values are `Average`, `Count`, `Maximum`, `Minimum`,and `Total`.
        :param Sequence['ScheduledQueryRulesAlertV2CriteriaDimensionArgs'] dimensions: A `dimension` block as defined below.
        :param 'ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs' failing_periods: A `failing_periods` block as defined below.
        :param str metric_measure_column: Specifies the column containing the metric measure number.
               
               > **Note** `metric_measure_column` is required if `time_aggregation_method` is `Average`, `Maximum`, `Minimum`, or `Total`. And `metric_measure_column` can not be specified if `time_aggregation_method` is `Count`.
        :param str resource_id_column: Specifies the column containing the resource ID. The content of the column must be an uri formatted as resource ID.
        """
        ScheduledQueryRulesAlertV2Criteria._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            query=query,
            threshold=threshold,
            time_aggregation_method=time_aggregation_method,
            dimensions=dimensions,
            failing_periods=failing_periods,
            metric_measure_column=metric_measure_column,
            resource_id_column=resource_id_column,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             query: str,
             threshold: float,
             time_aggregation_method: str,
             dimensions: Optional[Sequence['outputs.ScheduledQueryRulesAlertV2CriteriaDimension']] = None,
             failing_periods: Optional['outputs.ScheduledQueryRulesAlertV2CriteriaFailingPeriods'] = None,
             metric_measure_column: Optional[str] = None,
             resource_id_column: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("query", query)
        _setter("threshold", threshold)
        _setter("time_aggregation_method", time_aggregation_method)
        if dimensions is not None:
            _setter("dimensions", dimensions)
        if failing_periods is not None:
            _setter("failing_periods", failing_periods)
        if metric_measure_column is not None:
            _setter("metric_measure_column", metric_measure_column)
        if resource_id_column is not None:
            _setter("resource_id_column", resource_id_column)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Specifies the criteria operator. Possible values are `Equal`, `GreaterThan`, `GreaterThanOrEqual`, `LessThan`,and `LessThanOrEqual`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def query(self) -> str:
        """
        The query to run on logs. The results returned by this query are used to populate the alert.
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def threshold(self) -> float:
        """
        Specifies the criteria threshold value that activates the alert.
        """
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter(name="timeAggregationMethod")
    def time_aggregation_method(self) -> str:
        """
        The type of aggregation to apply to the data points in aggregation granularity. Possible values are `Average`, `Count`, `Maximum`, `Minimum`,and `Total`.
        """
        return pulumi.get(self, "time_aggregation_method")

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.ScheduledQueryRulesAlertV2CriteriaDimension']]:
        """
        A `dimension` block as defined below.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="failingPeriods")
    def failing_periods(self) -> Optional['outputs.ScheduledQueryRulesAlertV2CriteriaFailingPeriods']:
        """
        A `failing_periods` block as defined below.
        """
        return pulumi.get(self, "failing_periods")

    @property
    @pulumi.getter(name="metricMeasureColumn")
    def metric_measure_column(self) -> Optional[str]:
        """
        Specifies the column containing the metric measure number.

        > **Note** `metric_measure_column` is required if `time_aggregation_method` is `Average`, `Maximum`, `Minimum`, or `Total`. And `metric_measure_column` can not be specified if `time_aggregation_method` is `Count`.
        """
        return pulumi.get(self, "metric_measure_column")

    @property
    @pulumi.getter(name="resourceIdColumn")
    def resource_id_column(self) -> Optional[str]:
        """
        Specifies the column containing the resource ID. The content of the column must be an uri formatted as resource ID.
        """
        return pulumi.get(self, "resource_id_column")


@pulumi.output_type
class ScheduledQueryRulesAlertV2CriteriaDimension(dict):
    def __init__(__self__, *,
                 name: str,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str name: Name of the dimension.
        :param str operator: Operator for dimension values. Possible values are `Exclude`,and `Include`.
        :param Sequence[str] values: List of dimension values. Use a wildcard `*` to collect all.
        """
        ScheduledQueryRulesAlertV2CriteriaDimension._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the dimension.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Operator for dimension values. Possible values are `Exclude`,and `Include`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        List of dimension values. Use a wildcard `*` to collect all.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ScheduledQueryRulesAlertV2CriteriaFailingPeriods(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minimumFailingPeriodsToTriggerAlert":
            suggest = "minimum_failing_periods_to_trigger_alert"
        elif key == "numberOfEvaluationPeriods":
            suggest = "number_of_evaluation_periods"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledQueryRulesAlertV2CriteriaFailingPeriods. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledQueryRulesAlertV2CriteriaFailingPeriods.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledQueryRulesAlertV2CriteriaFailingPeriods.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 minimum_failing_periods_to_trigger_alert: int,
                 number_of_evaluation_periods: int):
        """
        :param int minimum_failing_periods_to_trigger_alert: Specifies the number of violations to trigger an alert. Should be smaller or equal to `number_of_evaluation_periods`. Possible value is integer between 1 and 6.
        :param int number_of_evaluation_periods: Specifies the number of aggregated look-back points. The look-back time window is calculated based on the aggregation granularity `window_duration` and the selected number of aggregated points. Possible value is integer between 1 and 6.
               
               > **Note** The query look back which is `window_duration`*`number_of_evaluation_periods` cannot exceed 48 hours.
               
               > **Note** `number_of_evaluation_periods` must be `1` for queries that do not project timestamp column
        """
        ScheduledQueryRulesAlertV2CriteriaFailingPeriods._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            minimum_failing_periods_to_trigger_alert=minimum_failing_periods_to_trigger_alert,
            number_of_evaluation_periods=number_of_evaluation_periods,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             minimum_failing_periods_to_trigger_alert: int,
             number_of_evaluation_periods: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("minimum_failing_periods_to_trigger_alert", minimum_failing_periods_to_trigger_alert)
        _setter("number_of_evaluation_periods", number_of_evaluation_periods)

    @property
    @pulumi.getter(name="minimumFailingPeriodsToTriggerAlert")
    def minimum_failing_periods_to_trigger_alert(self) -> int:
        """
        Specifies the number of violations to trigger an alert. Should be smaller or equal to `number_of_evaluation_periods`. Possible value is integer between 1 and 6.
        """
        return pulumi.get(self, "minimum_failing_periods_to_trigger_alert")

    @property
    @pulumi.getter(name="numberOfEvaluationPeriods")
    def number_of_evaluation_periods(self) -> int:
        """
        Specifies the number of aggregated look-back points. The look-back time window is calculated based on the aggregation granularity `window_duration` and the selected number of aggregated points. Possible value is integer between 1 and 6.

        > **Note** The query look back which is `window_duration`*`number_of_evaluation_periods` cannot exceed 48 hours.

        > **Note** `number_of_evaluation_periods` must be `1` for queries that do not project timestamp column
        """
        return pulumi.get(self, "number_of_evaluation_periods")


@pulumi.output_type
class ScheduledQueryRulesLogCriteria(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricName":
            suggest = "metric_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledQueryRulesLogCriteria. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledQueryRulesLogCriteria.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledQueryRulesLogCriteria.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dimensions: Sequence['outputs.ScheduledQueryRulesLogCriteriaDimension'],
                 metric_name: str):
        """
        :param Sequence['ScheduledQueryRulesLogCriteriaDimensionArgs'] dimensions: A `dimension` block as defined below.
        :param str metric_name: Name of the metric. Supported metrics are listed in the Azure Monitor [Microsoft.OperationalInsights/workspaces](https://docs.microsoft.com/azure/azure-monitor/platform/metrics-supported#microsoftoperationalinsightsworkspaces) metrics namespace.
        """
        ScheduledQueryRulesLogCriteria._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dimensions=dimensions,
            metric_name=metric_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dimensions: Sequence['outputs.ScheduledQueryRulesLogCriteriaDimension'],
             metric_name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("dimensions", dimensions)
        _setter("metric_name", metric_name)

    @property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.ScheduledQueryRulesLogCriteriaDimension']:
        """
        A `dimension` block as defined below.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        Name of the metric. Supported metrics are listed in the Azure Monitor [Microsoft.OperationalInsights/workspaces](https://docs.microsoft.com/azure/azure-monitor/platform/metrics-supported#microsoftoperationalinsightsworkspaces) metrics namespace.
        """
        return pulumi.get(self, "metric_name")


@pulumi.output_type
class ScheduledQueryRulesLogCriteriaDimension(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 operator: Optional[str] = None):
        """
        :param str name: Name of the dimension.
        :param Sequence[str] values: List of dimension values.
        :param str operator: Operator for dimension values, - 'Include'.
        """
        ScheduledQueryRulesLogCriteriaDimension._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            operator=operator,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             operator: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)
        if operator is not None:
            _setter("operator", operator)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the dimension.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        List of dimension values.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Operator for dimension values, - 'Include'.
        """
        return pulumi.get(self, "operator")


@pulumi.output_type
class SmartDetectorAlertRuleActionGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "emailSubject":
            suggest = "email_subject"
        elif key == "webhookPayload":
            suggest = "webhook_payload"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SmartDetectorAlertRuleActionGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SmartDetectorAlertRuleActionGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SmartDetectorAlertRuleActionGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ids: Sequence[str],
                 email_subject: Optional[str] = None,
                 webhook_payload: Optional[str] = None):
        """
        :param Sequence[str] ids: Specifies the action group ids.
        :param str email_subject: Specifies a custom email subject if Email Receiver is specified in Monitor Action Group resource.
        :param str webhook_payload: A JSON String which Specifies the custom webhook payload if Webhook Receiver is specified in Monitor Action Group resource.
        """
        SmartDetectorAlertRuleActionGroup._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ids=ids,
            email_subject=email_subject,
            webhook_payload=webhook_payload,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ids: Sequence[str],
             email_subject: Optional[str] = None,
             webhook_payload: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("ids", ids)
        if email_subject is not None:
            _setter("email_subject", email_subject)
        if webhook_payload is not None:
            _setter("webhook_payload", webhook_payload)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        """
        Specifies the action group ids.
        """
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="emailSubject")
    def email_subject(self) -> Optional[str]:
        """
        Specifies a custom email subject if Email Receiver is specified in Monitor Action Group resource.
        """
        return pulumi.get(self, "email_subject")

    @property
    @pulumi.getter(name="webhookPayload")
    def webhook_payload(self) -> Optional[str]:
        """
        A JSON String which Specifies the custom webhook payload if Webhook Receiver is specified in Monitor Action Group resource.
        """
        return pulumi.get(self, "webhook_payload")


@pulumi.output_type
class GetActionGroupArmRoleReceiverResult(dict):
    def __init__(__self__, *,
                 name: str,
                 role_id: str,
                 use_common_alert_schema: bool):
        """
        :param str name: Specifies the name of the Action Group.
        :param str role_id: The arm role id.
        :param bool use_common_alert_schema: Indicates whether to use common alert schema.
        """
        GetActionGroupArmRoleReceiverResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            role_id=role_id,
            use_common_alert_schema=use_common_alert_schema,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             role_id: str,
             use_common_alert_schema: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("role_id", role_id)
        _setter("use_common_alert_schema", use_common_alert_schema)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Action Group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> str:
        """
        The arm role id.
        """
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="useCommonAlertSchema")
    def use_common_alert_schema(self) -> bool:
        """
        Indicates whether to use common alert schema.
        """
        return pulumi.get(self, "use_common_alert_schema")


@pulumi.output_type
class GetActionGroupAutomationRunbookReceiverResult(dict):
    def __init__(__self__, *,
                 automation_account_id: str,
                 is_global_runbook: bool,
                 name: str,
                 runbook_name: str,
                 service_uri: str,
                 use_common_alert_schema: bool,
                 webhook_resource_id: str):
        """
        :param str automation_account_id: The automation account ID which holds this runbook and authenticates to Azure resources.
        :param bool is_global_runbook: Indicates whether this instance is global runbook.
        :param str name: Specifies the name of the Action Group.
        :param str runbook_name: The name for this runbook.
        :param str service_uri: The URI where webhooks should be sent.
        :param bool use_common_alert_schema: Indicates whether to use common alert schema.
        :param str webhook_resource_id: The resource id for webhook linked to this runbook.
        """
        GetActionGroupAutomationRunbookReceiverResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            automation_account_id=automation_account_id,
            is_global_runbook=is_global_runbook,
            name=name,
            runbook_name=runbook_name,
            service_uri=service_uri,
            use_common_alert_schema=use_common_alert_schema,
            webhook_resource_id=webhook_resource_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             automation_account_id: str,
             is_global_runbook: bool,
             name: str,
             runbook_name: str,
             service_uri: str,
             use_common_alert_schema: bool,
             webhook_resource_id: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("automation_account_id", automation_account_id)
        _setter("is_global_runbook", is_global_runbook)
        _setter("name", name)
        _setter("runbook_name", runbook_name)
        _setter("service_uri", service_uri)
        _setter("use_common_alert_schema", use_common_alert_schema)
        _setter("webhook_resource_id", webhook_resource_id)

    @property
    @pulumi.getter(name="automationAccountId")
    def automation_account_id(self) -> str:
        """
        The automation account ID which holds this runbook and authenticates to Azure resources.
        """
        return pulumi.get(self, "automation_account_id")

    @property
    @pulumi.getter(name="isGlobalRunbook")
    def is_global_runbook(self) -> bool:
        """
        Indicates whether this instance is global runbook.
        """
        return pulumi.get(self, "is_global_runbook")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Action Group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="runbookName")
    def runbook_name(self) -> str:
        """
        The name for this runbook.
        """
        return pulumi.get(self, "runbook_name")

    @property
    @pulumi.getter(name="serviceUri")
    def service_uri(self) -> str:
        """
        The URI where webhooks should be sent.
        """
        return pulumi.get(self, "service_uri")

    @property
    @pulumi.getter(name="useCommonAlertSchema")
    def use_common_alert_schema(self) -> bool:
        """
        Indicates whether to use common alert schema.
        """
        return pulumi.get(self, "use_common_alert_schema")

    @property
    @pulumi.getter(name="webhookResourceId")
    def webhook_resource_id(self) -> str:
        """
        The resource id for webhook linked to this runbook.
        """
        return pulumi.get(self, "webhook_resource_id")


@pulumi.output_type
class GetActionGroupAzureAppPushReceiverResult(dict):
    def __init__(__self__, *,
                 email_address: str,
                 name: str):
        """
        :param str email_address: The email address of this receiver.
        :param str name: Specifies the name of the Action Group.
        """
        GetActionGroupAzureAppPushReceiverResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            email_address=email_address,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             email_address: str,
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("email_address", email_address)
        _setter("name", name)

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> str:
        """
        The email address of this receiver.
        """
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Action Group.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetActionGroupAzureFunctionReceiverResult(dict):
    def __init__(__self__, *,
                 function_app_resource_id: str,
                 function_name: str,
                 http_trigger_url: str,
                 name: str,
                 use_common_alert_schema: bool):
        """
        :param str function_app_resource_id: The Azure resource ID of the function app.
        :param str function_name: The function name in the function app.
        :param str http_trigger_url: The HTTP trigger url where HTTP request sent to.
        :param str name: Specifies the name of the Action Group.
        :param bool use_common_alert_schema: Indicates whether to use common alert schema.
        """
        GetActionGroupAzureFunctionReceiverResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            function_app_resource_id=function_app_resource_id,
            function_name=function_name,
            http_trigger_url=http_trigger_url,
            name=name,
            use_common_alert_schema=use_common_alert_schema,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             function_app_resource_id: str,
             function_name: str,
             http_trigger_url: str,
             name: str,
             use_common_alert_schema: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("function_app_resource_id", function_app_resource_id)
        _setter("function_name", function_name)
        _setter("http_trigger_url", http_trigger_url)
        _setter("name", name)
        _setter("use_common_alert_schema", use_common_alert_schema)

    @property
    @pulumi.getter(name="functionAppResourceId")
    def function_app_resource_id(self) -> str:
        """
        The Azure resource ID of the function app.
        """
        return pulumi.get(self, "function_app_resource_id")

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> str:
        """
        The function name in the function app.
        """
        return pulumi.get(self, "function_name")

    @property
    @pulumi.getter(name="httpTriggerUrl")
    def http_trigger_url(self) -> str:
        """
        The HTTP trigger url where HTTP request sent to.
        """
        return pulumi.get(self, "http_trigger_url")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Action Group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="useCommonAlertSchema")
    def use_common_alert_schema(self) -> bool:
        """
        Indicates whether to use common alert schema.
        """
        return pulumi.get(self, "use_common_alert_schema")


@pulumi.output_type
class GetActionGroupEmailReceiverResult(dict):
    def __init__(__self__, *,
                 email_address: str,
                 name: str,
                 use_common_alert_schema: bool):
        """
        :param str email_address: The email address of this receiver.
        :param str name: Specifies the name of the Action Group.
        :param bool use_common_alert_schema: Indicates whether to use common alert schema.
        """
        GetActionGroupEmailReceiverResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            email_address=email_address,
            name=name,
            use_common_alert_schema=use_common_alert_schema,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             email_address: str,
             name: str,
             use_common_alert_schema: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("email_address", email_address)
        _setter("name", name)
        _setter("use_common_alert_schema", use_common_alert_schema)

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> str:
        """
        The email address of this receiver.
        """
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Action Group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="useCommonAlertSchema")
    def use_common_alert_schema(self) -> bool:
        """
        Indicates whether to use common alert schema.
        """
        return pulumi.get(self, "use_common_alert_schema")


@pulumi.output_type
class GetActionGroupEventHubReceiverResult(dict):
    def __init__(__self__, *,
                 event_hub_id: str,
                 event_hub_name: str,
                 event_hub_namespace: str,
                 name: str,
                 subscription_id: str,
                 tenant_id: str,
                 use_common_alert_schema: Optional[bool] = None):
        """
        :param str event_hub_id: The resource ID of the respective Event Hub.
        :param str event_hub_name: The name of the specific Event Hub queue.
        :param str event_hub_namespace: The namespace name of the Event Hub.
        :param str name: Specifies the name of the Action Group.
        :param str subscription_id: The ID for the subscription containing this Event Hub. Default to the subscription ID of the Action Group.
        :param str tenant_id: The Tenant ID for the subscription containing this Event Hub.
        :param bool use_common_alert_schema: Indicates whether to use common alert schema.
        """
        GetActionGroupEventHubReceiverResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            event_hub_id=event_hub_id,
            event_hub_name=event_hub_name,
            event_hub_namespace=event_hub_namespace,
            name=name,
            subscription_id=subscription_id,
            tenant_id=tenant_id,
            use_common_alert_schema=use_common_alert_schema,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             event_hub_id: str,
             event_hub_name: str,
             event_hub_namespace: str,
             name: str,
             subscription_id: str,
             tenant_id: str,
             use_common_alert_schema: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("event_hub_id", event_hub_id)
        _setter("event_hub_name", event_hub_name)
        _setter("event_hub_namespace", event_hub_namespace)
        _setter("name", name)
        _setter("subscription_id", subscription_id)
        _setter("tenant_id", tenant_id)
        if use_common_alert_schema is not None:
            _setter("use_common_alert_schema", use_common_alert_schema)

    @property
    @pulumi.getter(name="eventHubId")
    def event_hub_id(self) -> str:
        """
        The resource ID of the respective Event Hub.
        """
        warnings.warn("""This property is deprecated and will be removed in version 4.0 of the provider, please use 'event_hub_name' and 'event_hub_namespace' instead.""", DeprecationWarning)
        pulumi.log.warn("""event_hub_id is deprecated: This property is deprecated and will be removed in version 4.0 of the provider, please use 'event_hub_name' and 'event_hub_namespace' instead.""")

        return pulumi.get(self, "event_hub_id")

    @property
    @pulumi.getter(name="eventHubName")
    def event_hub_name(self) -> str:
        """
        The name of the specific Event Hub queue.
        """
        return pulumi.get(self, "event_hub_name")

    @property
    @pulumi.getter(name="eventHubNamespace")
    def event_hub_namespace(self) -> str:
        """
        The namespace name of the Event Hub.
        """
        return pulumi.get(self, "event_hub_namespace")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Action Group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> str:
        """
        The ID for the subscription containing this Event Hub. Default to the subscription ID of the Action Group.
        """
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The Tenant ID for the subscription containing this Event Hub.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="useCommonAlertSchema")
    def use_common_alert_schema(self) -> Optional[bool]:
        """
        Indicates whether to use common alert schema.
        """
        return pulumi.get(self, "use_common_alert_schema")


@pulumi.output_type
class GetActionGroupItsmReceiverResult(dict):
    def __init__(__self__, *,
                 connection_id: str,
                 name: str,
                 region: str,
                 ticket_configuration: str,
                 workspace_id: str):
        """
        :param str connection_id: The unique connection identifier of the ITSM connection.
        :param str name: Specifies the name of the Action Group.
        :param str region: The region of the workspace.
        :param str ticket_configuration: A JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
        :param str workspace_id: The Azure Log Analytics workspace ID where this connection is defined.
        """
        GetActionGroupItsmReceiverResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            connection_id=connection_id,
            name=name,
            region=region,
            ticket_configuration=ticket_configuration,
            workspace_id=workspace_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             connection_id: str,
             name: str,
             region: str,
             ticket_configuration: str,
             workspace_id: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("connection_id", connection_id)
        _setter("name", name)
        _setter("region", region)
        _setter("ticket_configuration", ticket_configuration)
        _setter("workspace_id", workspace_id)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> str:
        """
        The unique connection identifier of the ITSM connection.
        """
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Action Group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the workspace.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="ticketConfiguration")
    def ticket_configuration(self) -> str:
        """
        A JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
        """
        return pulumi.get(self, "ticket_configuration")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        The Azure Log Analytics workspace ID where this connection is defined.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetActionGroupLogicAppReceiverResult(dict):
    def __init__(__self__, *,
                 callback_url: str,
                 name: str,
                 resource_id: str,
                 use_common_alert_schema: bool):
        """
        :param str callback_url: The callback url where HTTP request sent to.
        :param str name: Specifies the name of the Action Group.
        :param str resource_id: The Azure resource ID of the logic app.
        :param bool use_common_alert_schema: Indicates whether to use common alert schema.
        """
        GetActionGroupLogicAppReceiverResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            callback_url=callback_url,
            name=name,
            resource_id=resource_id,
            use_common_alert_schema=use_common_alert_schema,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             callback_url: str,
             name: str,
             resource_id: str,
             use_common_alert_schema: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("callback_url", callback_url)
        _setter("name", name)
        _setter("resource_id", resource_id)
        _setter("use_common_alert_schema", use_common_alert_schema)

    @property
    @pulumi.getter(name="callbackUrl")
    def callback_url(self) -> str:
        """
        The callback url where HTTP request sent to.
        """
        return pulumi.get(self, "callback_url")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Action Group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        """
        The Azure resource ID of the logic app.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="useCommonAlertSchema")
    def use_common_alert_schema(self) -> bool:
        """
        Indicates whether to use common alert schema.
        """
        return pulumi.get(self, "use_common_alert_schema")


@pulumi.output_type
class GetActionGroupSmsReceiverResult(dict):
    def __init__(__self__, *,
                 country_code: str,
                 name: str,
                 phone_number: str):
        """
        :param str country_code: The country code of the voice receiver.
        :param str name: Specifies the name of the Action Group.
        :param str phone_number: The phone number of the voice receiver.
        """
        GetActionGroupSmsReceiverResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            country_code=country_code,
            name=name,
            phone_number=phone_number,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             country_code: str,
             name: str,
             phone_number: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("country_code", country_code)
        _setter("name", name)
        _setter("phone_number", phone_number)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        """
        The country code of the voice receiver.
        """
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Action Group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> str:
        """
        The phone number of the voice receiver.
        """
        return pulumi.get(self, "phone_number")


@pulumi.output_type
class GetActionGroupVoiceReceiverResult(dict):
    def __init__(__self__, *,
                 country_code: str,
                 name: str,
                 phone_number: str):
        """
        :param str country_code: The country code of the voice receiver.
        :param str name: Specifies the name of the Action Group.
        :param str phone_number: The phone number of the voice receiver.
        """
        GetActionGroupVoiceReceiverResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            country_code=country_code,
            name=name,
            phone_number=phone_number,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             country_code: str,
             name: str,
             phone_number: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("country_code", country_code)
        _setter("name", name)
        _setter("phone_number", phone_number)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        """
        The country code of the voice receiver.
        """
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Action Group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> str:
        """
        The phone number of the voice receiver.
        """
        return pulumi.get(self, "phone_number")


@pulumi.output_type
class GetActionGroupWebhookReceiverResult(dict):
    def __init__(__self__, *,
                 aad_auths: Sequence['outputs.GetActionGroupWebhookReceiverAadAuthResult'],
                 name: str,
                 service_uri: str,
                 use_common_alert_schema: bool):
        """
        :param str name: Specifies the name of the Action Group.
        :param str service_uri: The URI where webhooks should be sent.
        :param bool use_common_alert_schema: Indicates whether to use common alert schema.
        """
        GetActionGroupWebhookReceiverResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aad_auths=aad_auths,
            name=name,
            service_uri=service_uri,
            use_common_alert_schema=use_common_alert_schema,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aad_auths: Sequence['outputs.GetActionGroupWebhookReceiverAadAuthResult'],
             name: str,
             service_uri: str,
             use_common_alert_schema: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("aad_auths", aad_auths)
        _setter("name", name)
        _setter("service_uri", service_uri)
        _setter("use_common_alert_schema", use_common_alert_schema)

    @property
    @pulumi.getter(name="aadAuths")
    def aad_auths(self) -> Sequence['outputs.GetActionGroupWebhookReceiverAadAuthResult']:
        return pulumi.get(self, "aad_auths")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Action Group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serviceUri")
    def service_uri(self) -> str:
        """
        The URI where webhooks should be sent.
        """
        return pulumi.get(self, "service_uri")

    @property
    @pulumi.getter(name="useCommonAlertSchema")
    def use_common_alert_schema(self) -> bool:
        """
        Indicates whether to use common alert schema.
        """
        return pulumi.get(self, "use_common_alert_schema")


@pulumi.output_type
class GetActionGroupWebhookReceiverAadAuthResult(dict):
    def __init__(__self__, *,
                 identifier_uri: str,
                 object_id: str,
                 tenant_id: str):
        """
        :param str tenant_id: The Tenant ID for the subscription containing this Event Hub.
        """
        GetActionGroupWebhookReceiverAadAuthResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            identifier_uri=identifier_uri,
            object_id=object_id,
            tenant_id=tenant_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             identifier_uri: str,
             object_id: str,
             tenant_id: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("identifier_uri", identifier_uri)
        _setter("object_id", object_id)
        _setter("tenant_id", tenant_id)

    @property
    @pulumi.getter(name="identifierUri")
    def identifier_uri(self) -> str:
        return pulumi.get(self, "identifier_uri")

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> str:
        return pulumi.get(self, "object_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The Tenant ID for the subscription containing this Event Hub.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class GetDataCollectionRuleDataFlowResult(dict):
    def __init__(__self__, *,
                 built_in_transform: str,
                 destinations: Sequence[str],
                 output_stream: str,
                 streams: Sequence[str],
                 transform_kql: str):
        """
        :param str built_in_transform: The built-in transform to transform stream data.
        :param Sequence[str] destinations: Specifies a list of destination names. A `azure_monitor_metrics` data source only allows for stream of kind `Microsoft-InsightsMetrics`.
        :param str output_stream: The output stream of the transform. Only required if the data flow changes data to a different stream.
        :param Sequence[str] streams: Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
        :param str transform_kql: The KQL query to transform stream data.
        """
        GetDataCollectionRuleDataFlowResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            built_in_transform=built_in_transform,
            destinations=destinations,
            output_stream=output_stream,
            streams=streams,
            transform_kql=transform_kql,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             built_in_transform: str,
             destinations: Sequence[str],
             output_stream: str,
             streams: Sequence[str],
             transform_kql: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("built_in_transform", built_in_transform)
        _setter("destinations", destinations)
        _setter("output_stream", output_stream)
        _setter("streams", streams)
        _setter("transform_kql", transform_kql)

    @property
    @pulumi.getter(name="builtInTransform")
    def built_in_transform(self) -> str:
        """
        The built-in transform to transform stream data.
        """
        return pulumi.get(self, "built_in_transform")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence[str]:
        """
        Specifies a list of destination names. A `azure_monitor_metrics` data source only allows for stream of kind `Microsoft-InsightsMetrics`.
        """
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="outputStream")
    def output_stream(self) -> str:
        """
        The output stream of the transform. Only required if the data flow changes data to a different stream.
        """
        return pulumi.get(self, "output_stream")

    @property
    @pulumi.getter
    def streams(self) -> Sequence[str]:
        """
        Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
        """
        return pulumi.get(self, "streams")

    @property
    @pulumi.getter(name="transformKql")
    def transform_kql(self) -> str:
        """
        The KQL query to transform stream data.
        """
        return pulumi.get(self, "transform_kql")


@pulumi.output_type
class GetDataCollectionRuleDataSourceResult(dict):
    def __init__(__self__, *,
                 data_imports: Sequence['outputs.GetDataCollectionRuleDataSourceDataImportResult'],
                 extensions: Sequence['outputs.GetDataCollectionRuleDataSourceExtensionResult'],
                 iis_logs: Sequence['outputs.GetDataCollectionRuleDataSourceIisLogResult'],
                 performance_counters: Sequence['outputs.GetDataCollectionRuleDataSourcePerformanceCounterResult'],
                 prometheus_forwarders: Sequence['outputs.GetDataCollectionRuleDataSourcePrometheusForwarderResult'],
                 syslogs: Sequence['outputs.GetDataCollectionRuleDataSourceSyslogResult'],
                 windows_event_logs: Sequence['outputs.GetDataCollectionRuleDataSourceWindowsEventLogResult'],
                 windows_firewall_logs: Sequence['outputs.GetDataCollectionRuleDataSourceWindowsFirewallLogResult'],
                 log_files: Optional[Sequence['outputs.GetDataCollectionRuleDataSourceLogFileResult']] = None,
                 platform_telemetries: Optional[Sequence['outputs.GetDataCollectionRuleDataSourcePlatformTelemetryResult']] = None):
        """
        :param Sequence['GetDataCollectionRuleDataSourceDataImportArgs'] data_imports: A `data_import` block as defined above.
        :param Sequence['GetDataCollectionRuleDataSourceExtensionArgs'] extensions: One or more `extension` blocks as defined below.
        :param Sequence['GetDataCollectionRuleDataSourceIisLogArgs'] iis_logs: One or more `iis_log` blocks as defined below.
        :param Sequence['GetDataCollectionRuleDataSourcePerformanceCounterArgs'] performance_counters: One or more `performance_counter` blocks as defined below.
        :param Sequence['GetDataCollectionRuleDataSourcePrometheusForwarderArgs'] prometheus_forwarders: One or more `prometheus_forwarder` blocks as defined below.
        :param Sequence['GetDataCollectionRuleDataSourceSyslogArgs'] syslogs: One or more `syslog` blocks as defined below.
        :param Sequence['GetDataCollectionRuleDataSourceWindowsEventLogArgs'] windows_event_logs: One or more `windows_event_log` blocks as defined below.
        :param Sequence['GetDataCollectionRuleDataSourceWindowsFirewallLogArgs'] windows_firewall_logs: One or more `windows_firewall_log` blocks as defined below.
        :param Sequence['GetDataCollectionRuleDataSourceLogFileArgs'] log_files: One or more `log_file` blocks as defined below.
        :param Sequence['GetDataCollectionRuleDataSourcePlatformTelemetryArgs'] platform_telemetries: One or more `platform_telemetry` blocks as defined below.
        """
        GetDataCollectionRuleDataSourceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_imports=data_imports,
            extensions=extensions,
            iis_logs=iis_logs,
            performance_counters=performance_counters,
            prometheus_forwarders=prometheus_forwarders,
            syslogs=syslogs,
            windows_event_logs=windows_event_logs,
            windows_firewall_logs=windows_firewall_logs,
            log_files=log_files,
            platform_telemetries=platform_telemetries,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_imports: Sequence['outputs.GetDataCollectionRuleDataSourceDataImportResult'],
             extensions: Sequence['outputs.GetDataCollectionRuleDataSourceExtensionResult'],
             iis_logs: Sequence['outputs.GetDataCollectionRuleDataSourceIisLogResult'],
             performance_counters: Sequence['outputs.GetDataCollectionRuleDataSourcePerformanceCounterResult'],
             prometheus_forwarders: Sequence['outputs.GetDataCollectionRuleDataSourcePrometheusForwarderResult'],
             syslogs: Sequence['outputs.GetDataCollectionRuleDataSourceSyslogResult'],
             windows_event_logs: Sequence['outputs.GetDataCollectionRuleDataSourceWindowsEventLogResult'],
             windows_firewall_logs: Sequence['outputs.GetDataCollectionRuleDataSourceWindowsFirewallLogResult'],
             log_files: Optional[Sequence['outputs.GetDataCollectionRuleDataSourceLogFileResult']] = None,
             platform_telemetries: Optional[Sequence['outputs.GetDataCollectionRuleDataSourcePlatformTelemetryResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_imports", data_imports)
        _setter("extensions", extensions)
        _setter("iis_logs", iis_logs)
        _setter("performance_counters", performance_counters)
        _setter("prometheus_forwarders", prometheus_forwarders)
        _setter("syslogs", syslogs)
        _setter("windows_event_logs", windows_event_logs)
        _setter("windows_firewall_logs", windows_firewall_logs)
        if log_files is not None:
            _setter("log_files", log_files)
        if platform_telemetries is not None:
            _setter("platform_telemetries", platform_telemetries)

    @property
    @pulumi.getter(name="dataImports")
    def data_imports(self) -> Sequence['outputs.GetDataCollectionRuleDataSourceDataImportResult']:
        """
        A `data_import` block as defined above.
        """
        return pulumi.get(self, "data_imports")

    @property
    @pulumi.getter
    def extensions(self) -> Sequence['outputs.GetDataCollectionRuleDataSourceExtensionResult']:
        """
        One or more `extension` blocks as defined below.
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter(name="iisLogs")
    def iis_logs(self) -> Sequence['outputs.GetDataCollectionRuleDataSourceIisLogResult']:
        """
        One or more `iis_log` blocks as defined below.
        """
        return pulumi.get(self, "iis_logs")

    @property
    @pulumi.getter(name="performanceCounters")
    def performance_counters(self) -> Sequence['outputs.GetDataCollectionRuleDataSourcePerformanceCounterResult']:
        """
        One or more `performance_counter` blocks as defined below.
        """
        return pulumi.get(self, "performance_counters")

    @property
    @pulumi.getter(name="prometheusForwarders")
    def prometheus_forwarders(self) -> Sequence['outputs.GetDataCollectionRuleDataSourcePrometheusForwarderResult']:
        """
        One or more `prometheus_forwarder` blocks as defined below.
        """
        return pulumi.get(self, "prometheus_forwarders")

    @property
    @pulumi.getter
    def syslogs(self) -> Sequence['outputs.GetDataCollectionRuleDataSourceSyslogResult']:
        """
        One or more `syslog` blocks as defined below.
        """
        return pulumi.get(self, "syslogs")

    @property
    @pulumi.getter(name="windowsEventLogs")
    def windows_event_logs(self) -> Sequence['outputs.GetDataCollectionRuleDataSourceWindowsEventLogResult']:
        """
        One or more `windows_event_log` blocks as defined below.
        """
        return pulumi.get(self, "windows_event_logs")

    @property
    @pulumi.getter(name="windowsFirewallLogs")
    def windows_firewall_logs(self) -> Sequence['outputs.GetDataCollectionRuleDataSourceWindowsFirewallLogResult']:
        """
        One or more `windows_firewall_log` blocks as defined below.
        """
        return pulumi.get(self, "windows_firewall_logs")

    @property
    @pulumi.getter(name="logFiles")
    def log_files(self) -> Optional[Sequence['outputs.GetDataCollectionRuleDataSourceLogFileResult']]:
        """
        One or more `log_file` blocks as defined below.
        """
        return pulumi.get(self, "log_files")

    @property
    @pulumi.getter(name="platformTelemetries")
    def platform_telemetries(self) -> Optional[Sequence['outputs.GetDataCollectionRuleDataSourcePlatformTelemetryResult']]:
        """
        One or more `platform_telemetry` blocks as defined below.
        """
        return pulumi.get(self, "platform_telemetries")


@pulumi.output_type
class GetDataCollectionRuleDataSourceDataImportResult(dict):
    def __init__(__self__, *,
                 event_hub_data_sources: Sequence['outputs.GetDataCollectionRuleDataSourceDataImportEventHubDataSourceResult']):
        """
        :param Sequence['GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArgs'] event_hub_data_sources: An `event_hub_data_source` block as defined below.
        """
        GetDataCollectionRuleDataSourceDataImportResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            event_hub_data_sources=event_hub_data_sources,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             event_hub_data_sources: Sequence['outputs.GetDataCollectionRuleDataSourceDataImportEventHubDataSourceResult'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("event_hub_data_sources", event_hub_data_sources)

    @property
    @pulumi.getter(name="eventHubDataSources")
    def event_hub_data_sources(self) -> Sequence['outputs.GetDataCollectionRuleDataSourceDataImportEventHubDataSourceResult']:
        """
        An `event_hub_data_source` block as defined below.
        """
        return pulumi.get(self, "event_hub_data_sources")


@pulumi.output_type
class GetDataCollectionRuleDataSourceDataImportEventHubDataSourceResult(dict):
    def __init__(__self__, *,
                 consumer_group: str,
                 name: str,
                 stream: str):
        """
        :param str consumer_group: The Event Hub consumer group name.
        :param str name: Specifies the name of the Data Collection Rule.
        :param str stream: The stream to collect from Event Hub. Possible value should be a custom stream name.
        """
        GetDataCollectionRuleDataSourceDataImportEventHubDataSourceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            consumer_group=consumer_group,
            name=name,
            stream=stream,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             consumer_group: str,
             name: str,
             stream: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("consumer_group", consumer_group)
        _setter("name", name)
        _setter("stream", stream)

    @property
    @pulumi.getter(name="consumerGroup")
    def consumer_group(self) -> str:
        """
        The Event Hub consumer group name.
        """
        return pulumi.get(self, "consumer_group")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def stream(self) -> str:
        """
        The stream to collect from Event Hub. Possible value should be a custom stream name.
        """
        return pulumi.get(self, "stream")


@pulumi.output_type
class GetDataCollectionRuleDataSourceExtensionResult(dict):
    def __init__(__self__, *,
                 extension_json: str,
                 extension_name: str,
                 input_data_sources: Sequence[str],
                 name: str,
                 streams: Sequence[str]):
        """
        :param str extension_json: A JSON String which specifies the extension setting.
        :param str extension_name: The name of the VM extension.
        :param Sequence[str] input_data_sources: Specifies a list of data sources this extension needs data from. An item should be a name of a supported data source which produces only one stream. Supported data sources type: `performance_counter`, `windows_event_log`,and `syslog`.
        :param str name: Specifies the name of the Data Collection Rule.
        :param Sequence[str] streams: Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
        """
        GetDataCollectionRuleDataSourceExtensionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            extension_json=extension_json,
            extension_name=extension_name,
            input_data_sources=input_data_sources,
            name=name,
            streams=streams,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             extension_json: str,
             extension_name: str,
             input_data_sources: Sequence[str],
             name: str,
             streams: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("extension_json", extension_json)
        _setter("extension_name", extension_name)
        _setter("input_data_sources", input_data_sources)
        _setter("name", name)
        _setter("streams", streams)

    @property
    @pulumi.getter(name="extensionJson")
    def extension_json(self) -> str:
        """
        A JSON String which specifies the extension setting.
        """
        return pulumi.get(self, "extension_json")

    @property
    @pulumi.getter(name="extensionName")
    def extension_name(self) -> str:
        """
        The name of the VM extension.
        """
        return pulumi.get(self, "extension_name")

    @property
    @pulumi.getter(name="inputDataSources")
    def input_data_sources(self) -> Sequence[str]:
        """
        Specifies a list of data sources this extension needs data from. An item should be a name of a supported data source which produces only one stream. Supported data sources type: `performance_counter`, `windows_event_log`,and `syslog`.
        """
        return pulumi.get(self, "input_data_sources")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def streams(self) -> Sequence[str]:
        """
        Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
        """
        return pulumi.get(self, "streams")


@pulumi.output_type
class GetDataCollectionRuleDataSourceIisLogResult(dict):
    def __init__(__self__, *,
                 log_directories: Sequence[str],
                 name: str,
                 streams: Sequence[str]):
        """
        :param Sequence[str] log_directories: Specifies a list of absolute paths where the log files are located.
        :param str name: Specifies the name of the Data Collection Rule.
        :param Sequence[str] streams: Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
        """
        GetDataCollectionRuleDataSourceIisLogResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            log_directories=log_directories,
            name=name,
            streams=streams,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             log_directories: Sequence[str],
             name: str,
             streams: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("log_directories", log_directories)
        _setter("name", name)
        _setter("streams", streams)

    @property
    @pulumi.getter(name="logDirectories")
    def log_directories(self) -> Sequence[str]:
        """
        Specifies a list of absolute paths where the log files are located.
        """
        return pulumi.get(self, "log_directories")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def streams(self) -> Sequence[str]:
        """
        Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
        """
        return pulumi.get(self, "streams")


@pulumi.output_type
class GetDataCollectionRuleDataSourceLogFileResult(dict):
    def __init__(__self__, *,
                 file_patterns: Sequence[str],
                 format: str,
                 name: str,
                 settings: Sequence['outputs.GetDataCollectionRuleDataSourceLogFileSettingResult'],
                 streams: Sequence[str]):
        """
        :param Sequence[str] file_patterns: Specifies a list of file patterns where the log files are located. For example, `C:\\\\JavaLogs\\\\*.log`.
        :param str format: The data format of the log files. possible value is `text`.
        :param str name: Specifies the name of the Data Collection Rule.
        :param Sequence['GetDataCollectionRuleDataSourceLogFileSettingArgs'] settings: A `settings` block as defined below.
        :param Sequence[str] streams: Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
        """
        GetDataCollectionRuleDataSourceLogFileResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            file_patterns=file_patterns,
            format=format,
            name=name,
            settings=settings,
            streams=streams,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             file_patterns: Sequence[str],
             format: str,
             name: str,
             settings: Sequence['outputs.GetDataCollectionRuleDataSourceLogFileSettingResult'],
             streams: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("file_patterns", file_patterns)
        _setter("format", format)
        _setter("name", name)
        _setter("settings", settings)
        _setter("streams", streams)

    @property
    @pulumi.getter(name="filePatterns")
    def file_patterns(self) -> Sequence[str]:
        """
        Specifies a list of file patterns where the log files are located. For example, `C:\\\\JavaLogs\\\\*.log`.
        """
        return pulumi.get(self, "file_patterns")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        The data format of the log files. possible value is `text`.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def settings(self) -> Sequence['outputs.GetDataCollectionRuleDataSourceLogFileSettingResult']:
        """
        A `settings` block as defined below.
        """
        return pulumi.get(self, "settings")

    @property
    @pulumi.getter
    def streams(self) -> Sequence[str]:
        """
        Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
        """
        return pulumi.get(self, "streams")


@pulumi.output_type
class GetDataCollectionRuleDataSourceLogFileSettingResult(dict):
    def __init__(__self__, *,
                 texts: Sequence['outputs.GetDataCollectionRuleDataSourceLogFileSettingTextResult']):
        """
        :param Sequence['GetDataCollectionRuleDataSourceLogFileSettingTextArgs'] texts: A `text` block as defined below.
        """
        GetDataCollectionRuleDataSourceLogFileSettingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            texts=texts,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             texts: Sequence['outputs.GetDataCollectionRuleDataSourceLogFileSettingTextResult'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("texts", texts)

    @property
    @pulumi.getter
    def texts(self) -> Sequence['outputs.GetDataCollectionRuleDataSourceLogFileSettingTextResult']:
        """
        A `text` block as defined below.
        """
        return pulumi.get(self, "texts")


@pulumi.output_type
class GetDataCollectionRuleDataSourceLogFileSettingTextResult(dict):
    def __init__(__self__, *,
                 record_start_timestamp_format: str):
        """
        :param str record_start_timestamp_format: The timestamp format of the text log files. Possible values are `ISO 8601`, `YYYY-MM-DD HH:MM:SS`, `M/D/YYYY HH:MM:SS AM/PM`, `Mon DD, YYYY HH:MM:SS`, `yyMMdd HH:mm:ss`, `ddMMyy HH:mm:ss`, `MMM d hh:mm:ss`, `dd/MMM/yyyy:HH:mm:ss zzz`,and `yyyy-MM-ddTHH:mm:ssK`.
        """
        GetDataCollectionRuleDataSourceLogFileSettingTextResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            record_start_timestamp_format=record_start_timestamp_format,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             record_start_timestamp_format: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("record_start_timestamp_format", record_start_timestamp_format)

    @property
    @pulumi.getter(name="recordStartTimestampFormat")
    def record_start_timestamp_format(self) -> str:
        """
        The timestamp format of the text log files. Possible values are `ISO 8601`, `YYYY-MM-DD HH:MM:SS`, `M/D/YYYY HH:MM:SS AM/PM`, `Mon DD, YYYY HH:MM:SS`, `yyMMdd HH:mm:ss`, `ddMMyy HH:mm:ss`, `MMM d hh:mm:ss`, `dd/MMM/yyyy:HH:mm:ss zzz`,and `yyyy-MM-ddTHH:mm:ssK`.
        """
        return pulumi.get(self, "record_start_timestamp_format")


@pulumi.output_type
class GetDataCollectionRuleDataSourcePerformanceCounterResult(dict):
    def __init__(__self__, *,
                 counter_specifiers: Sequence[str],
                 name: str,
                 sampling_frequency_in_seconds: int,
                 streams: Sequence[str]):
        """
        :param Sequence[str] counter_specifiers: Specifies a list of specifier names of the performance counters you want to collect. Use a wildcard `*` to collect counters for all instances. To get a list of performance counters on Windows, run the command `typeperf`.
        :param str name: Specifies the name of the Data Collection Rule.
        :param int sampling_frequency_in_seconds: The number of seconds between consecutive counter measurements (samples). The value should be integer between `1` and `300` inclusive.
        :param Sequence[str] streams: Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
        """
        GetDataCollectionRuleDataSourcePerformanceCounterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            counter_specifiers=counter_specifiers,
            name=name,
            sampling_frequency_in_seconds=sampling_frequency_in_seconds,
            streams=streams,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             counter_specifiers: Sequence[str],
             name: str,
             sampling_frequency_in_seconds: int,
             streams: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("counter_specifiers", counter_specifiers)
        _setter("name", name)
        _setter("sampling_frequency_in_seconds", sampling_frequency_in_seconds)
        _setter("streams", streams)

    @property
    @pulumi.getter(name="counterSpecifiers")
    def counter_specifiers(self) -> Sequence[str]:
        """
        Specifies a list of specifier names of the performance counters you want to collect. Use a wildcard `*` to collect counters for all instances. To get a list of performance counters on Windows, run the command `typeperf`.
        """
        return pulumi.get(self, "counter_specifiers")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="samplingFrequencyInSeconds")
    def sampling_frequency_in_seconds(self) -> int:
        """
        The number of seconds between consecutive counter measurements (samples). The value should be integer between `1` and `300` inclusive.
        """
        return pulumi.get(self, "sampling_frequency_in_seconds")

    @property
    @pulumi.getter
    def streams(self) -> Sequence[str]:
        """
        Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
        """
        return pulumi.get(self, "streams")


@pulumi.output_type
class GetDataCollectionRuleDataSourcePlatformTelemetryResult(dict):
    def __init__(__self__, *,
                 name: str,
                 streams: Sequence[str]):
        """
        :param str name: Specifies the name of the Data Collection Rule.
        :param Sequence[str] streams: Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
        """
        GetDataCollectionRuleDataSourcePlatformTelemetryResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            streams=streams,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             streams: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("streams", streams)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def streams(self) -> Sequence[str]:
        """
        Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
        """
        return pulumi.get(self, "streams")


@pulumi.output_type
class GetDataCollectionRuleDataSourcePrometheusForwarderResult(dict):
    def __init__(__self__, *,
                 label_include_filters: Sequence['outputs.GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterResult'],
                 name: str,
                 streams: Sequence[str]):
        """
        :param Sequence['GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArgs'] label_include_filters: One or more `label_include_filter` blocks as defined above.
        :param str name: Specifies the name of the Data Collection Rule.
        :param Sequence[str] streams: Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
        """
        GetDataCollectionRuleDataSourcePrometheusForwarderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            label_include_filters=label_include_filters,
            name=name,
            streams=streams,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             label_include_filters: Sequence['outputs.GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterResult'],
             name: str,
             streams: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("label_include_filters", label_include_filters)
        _setter("name", name)
        _setter("streams", streams)

    @property
    @pulumi.getter(name="labelIncludeFilters")
    def label_include_filters(self) -> Sequence['outputs.GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterResult']:
        """
        One or more `label_include_filter` blocks as defined above.
        """
        return pulumi.get(self, "label_include_filters")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def streams(self) -> Sequence[str]:
        """
        Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
        """
        return pulumi.get(self, "streams")


@pulumi.output_type
class GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterResult(dict):
    def __init__(__self__, *,
                 label: str,
                 value: str):
        """
        :param str label: The label of the filter. This label should be unique across all `label_include_fileter` block. Possible value is `microsoft_metrics_include_label`.
        :param str value: The value of the filter.
        """
        GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            label=label,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             label: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("label", label)
        _setter("value", value)

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label of the filter. This label should be unique across all `label_include_fileter` block. Possible value is `microsoft_metrics_include_label`.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the filter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDataCollectionRuleDataSourceSyslogResult(dict):
    def __init__(__self__, *,
                 facility_names: Sequence[str],
                 log_levels: Sequence[str],
                 name: str,
                 streams: Sequence[str]):
        """
        :param Sequence[str] facility_names: Specifies a list of facility names. Use a wildcard `*` to collect logs for all facility names. Possible values are `auth`, `authpriv`, `cron`, `daemon`, `kern`, `lpr`, `mail`, `mark`, `news`, `syslog`, `user`, `uucp`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`,and `*`.
        :param Sequence[str] log_levels: Specifies a list of log levels. Use a wildcard `*` to collect logs for all log levels. Possible values are `Debug`,  `Info`, `Notice`, `Warning`, `Error`, `Critical`, `Alert`, `Emergency`,and `*`.
        :param str name: Specifies the name of the Data Collection Rule.
        :param Sequence[str] streams: Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
        """
        GetDataCollectionRuleDataSourceSyslogResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            facility_names=facility_names,
            log_levels=log_levels,
            name=name,
            streams=streams,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             facility_names: Sequence[str],
             log_levels: Sequence[str],
             name: str,
             streams: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("facility_names", facility_names)
        _setter("log_levels", log_levels)
        _setter("name", name)
        _setter("streams", streams)

    @property
    @pulumi.getter(name="facilityNames")
    def facility_names(self) -> Sequence[str]:
        """
        Specifies a list of facility names. Use a wildcard `*` to collect logs for all facility names. Possible values are `auth`, `authpriv`, `cron`, `daemon`, `kern`, `lpr`, `mail`, `mark`, `news`, `syslog`, `user`, `uucp`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`,and `*`.
        """
        return pulumi.get(self, "facility_names")

    @property
    @pulumi.getter(name="logLevels")
    def log_levels(self) -> Sequence[str]:
        """
        Specifies a list of log levels. Use a wildcard `*` to collect logs for all log levels. Possible values are `Debug`,  `Info`, `Notice`, `Warning`, `Error`, `Critical`, `Alert`, `Emergency`,and `*`.
        """
        return pulumi.get(self, "log_levels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def streams(self) -> Sequence[str]:
        """
        Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
        """
        return pulumi.get(self, "streams")


@pulumi.output_type
class GetDataCollectionRuleDataSourceWindowsEventLogResult(dict):
    def __init__(__self__, *,
                 name: str,
                 streams: Sequence[str],
                 x_path_queries: Sequence[str]):
        """
        :param str name: Specifies the name of the Data Collection Rule.
        :param Sequence[str] streams: Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
        :param Sequence[str] x_path_queries: Specifies a list of Windows Event Log queries in XPath expression.
        """
        GetDataCollectionRuleDataSourceWindowsEventLogResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            streams=streams,
            x_path_queries=x_path_queries,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             streams: Sequence[str],
             x_path_queries: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("streams", streams)
        _setter("x_path_queries", x_path_queries)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def streams(self) -> Sequence[str]:
        """
        Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
        """
        return pulumi.get(self, "streams")

    @property
    @pulumi.getter(name="xPathQueries")
    def x_path_queries(self) -> Sequence[str]:
        """
        Specifies a list of Windows Event Log queries in XPath expression.
        """
        return pulumi.get(self, "x_path_queries")


@pulumi.output_type
class GetDataCollectionRuleDataSourceWindowsFirewallLogResult(dict):
    def __init__(__self__, *,
                 name: str,
                 streams: Sequence[str]):
        """
        :param str name: Specifies the name of the Data Collection Rule.
        :param Sequence[str] streams: Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
        """
        GetDataCollectionRuleDataSourceWindowsFirewallLogResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            streams=streams,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             streams: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("streams", streams)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def streams(self) -> Sequence[str]:
        """
        Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
        """
        return pulumi.get(self, "streams")


@pulumi.output_type
class GetDataCollectionRuleDestinationResult(dict):
    def __init__(__self__, *,
                 azure_monitor_metrics: Sequence['outputs.GetDataCollectionRuleDestinationAzureMonitorMetricResult'],
                 log_analytics: Sequence['outputs.GetDataCollectionRuleDestinationLogAnalyticResult'],
                 monitor_accounts: Sequence['outputs.GetDataCollectionRuleDestinationMonitorAccountResult'],
                 storage_blob_directs: Sequence['outputs.GetDataCollectionRuleDestinationStorageBlobDirectResult'],
                 storage_blobs: Sequence['outputs.GetDataCollectionRuleDestinationStorageBlobResult'],
                 storage_table_directs: Sequence['outputs.GetDataCollectionRuleDestinationStorageTableDirectResult'],
                 event_hub: Optional['outputs.GetDataCollectionRuleDestinationEventHubResult'] = None,
                 event_hub_direct: Optional['outputs.GetDataCollectionRuleDestinationEventHubDirectResult'] = None):
        """
        :param Sequence['GetDataCollectionRuleDestinationAzureMonitorMetricArgs'] azure_monitor_metrics: A `azure_monitor_metrics` block as defined above.
        :param Sequence['GetDataCollectionRuleDestinationLogAnalyticArgs'] log_analytics: One or more `log_analytics` blocks as defined below.
        :param Sequence['GetDataCollectionRuleDestinationMonitorAccountArgs'] monitor_accounts: One or more `monitor_account` blocks as defined below.
        :param Sequence['GetDataCollectionRuleDestinationStorageBlobDirectArgs'] storage_blob_directs: One or more `storage_blob_direct` blocks as defined below.
        :param Sequence['GetDataCollectionRuleDestinationStorageBlobArgs'] storage_blobs: One or more `storage_blob` blocks as defined below.
        :param Sequence['GetDataCollectionRuleDestinationStorageTableDirectArgs'] storage_table_directs: One or more `storage_table_direct` blocks as defined below.
        :param 'GetDataCollectionRuleDestinationEventHubArgs' event_hub: One or more `event_hub` blocks as defined below.
        :param 'GetDataCollectionRuleDestinationEventHubDirectArgs' event_hub_direct: One or more `event_hub_direct` blocks as defined below.
        """
        GetDataCollectionRuleDestinationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            azure_monitor_metrics=azure_monitor_metrics,
            log_analytics=log_analytics,
            monitor_accounts=monitor_accounts,
            storage_blob_directs=storage_blob_directs,
            storage_blobs=storage_blobs,
            storage_table_directs=storage_table_directs,
            event_hub=event_hub,
            event_hub_direct=event_hub_direct,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             azure_monitor_metrics: Sequence['outputs.GetDataCollectionRuleDestinationAzureMonitorMetricResult'],
             log_analytics: Sequence['outputs.GetDataCollectionRuleDestinationLogAnalyticResult'],
             monitor_accounts: Sequence['outputs.GetDataCollectionRuleDestinationMonitorAccountResult'],
             storage_blob_directs: Sequence['outputs.GetDataCollectionRuleDestinationStorageBlobDirectResult'],
             storage_blobs: Sequence['outputs.GetDataCollectionRuleDestinationStorageBlobResult'],
             storage_table_directs: Sequence['outputs.GetDataCollectionRuleDestinationStorageTableDirectResult'],
             event_hub: Optional['outputs.GetDataCollectionRuleDestinationEventHubResult'] = None,
             event_hub_direct: Optional['outputs.GetDataCollectionRuleDestinationEventHubDirectResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("azure_monitor_metrics", azure_monitor_metrics)
        _setter("log_analytics", log_analytics)
        _setter("monitor_accounts", monitor_accounts)
        _setter("storage_blob_directs", storage_blob_directs)
        _setter("storage_blobs", storage_blobs)
        _setter("storage_table_directs", storage_table_directs)
        if event_hub is not None:
            _setter("event_hub", event_hub)
        if event_hub_direct is not None:
            _setter("event_hub_direct", event_hub_direct)

    @property
    @pulumi.getter(name="azureMonitorMetrics")
    def azure_monitor_metrics(self) -> Sequence['outputs.GetDataCollectionRuleDestinationAzureMonitorMetricResult']:
        """
        A `azure_monitor_metrics` block as defined above.
        """
        return pulumi.get(self, "azure_monitor_metrics")

    @property
    @pulumi.getter(name="logAnalytics")
    def log_analytics(self) -> Sequence['outputs.GetDataCollectionRuleDestinationLogAnalyticResult']:
        """
        One or more `log_analytics` blocks as defined below.
        """
        return pulumi.get(self, "log_analytics")

    @property
    @pulumi.getter(name="monitorAccounts")
    def monitor_accounts(self) -> Sequence['outputs.GetDataCollectionRuleDestinationMonitorAccountResult']:
        """
        One or more `monitor_account` blocks as defined below.
        """
        return pulumi.get(self, "monitor_accounts")

    @property
    @pulumi.getter(name="storageBlobDirects")
    def storage_blob_directs(self) -> Sequence['outputs.GetDataCollectionRuleDestinationStorageBlobDirectResult']:
        """
        One or more `storage_blob_direct` blocks as defined below.
        """
        return pulumi.get(self, "storage_blob_directs")

    @property
    @pulumi.getter(name="storageBlobs")
    def storage_blobs(self) -> Sequence['outputs.GetDataCollectionRuleDestinationStorageBlobResult']:
        """
        One or more `storage_blob` blocks as defined below.
        """
        return pulumi.get(self, "storage_blobs")

    @property
    @pulumi.getter(name="storageTableDirects")
    def storage_table_directs(self) -> Sequence['outputs.GetDataCollectionRuleDestinationStorageTableDirectResult']:
        """
        One or more `storage_table_direct` blocks as defined below.
        """
        return pulumi.get(self, "storage_table_directs")

    @property
    @pulumi.getter(name="eventHub")
    def event_hub(self) -> Optional['outputs.GetDataCollectionRuleDestinationEventHubResult']:
        """
        One or more `event_hub` blocks as defined below.
        """
        return pulumi.get(self, "event_hub")

    @property
    @pulumi.getter(name="eventHubDirect")
    def event_hub_direct(self) -> Optional['outputs.GetDataCollectionRuleDestinationEventHubDirectResult']:
        """
        One or more `event_hub_direct` blocks as defined below.
        """
        return pulumi.get(self, "event_hub_direct")


@pulumi.output_type
class GetDataCollectionRuleDestinationAzureMonitorMetricResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Specifies the name of the Data Collection Rule.
        """
        GetDataCollectionRuleDestinationAzureMonitorMetricResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Data Collection Rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDataCollectionRuleDestinationEventHubResult(dict):
    def __init__(__self__, *,
                 event_hub_id: str,
                 name: str):
        """
        :param str event_hub_id: The resource ID of the Event Hub.
        :param str name: Specifies the name of the Data Collection Rule.
        """
        GetDataCollectionRuleDestinationEventHubResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            event_hub_id=event_hub_id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             event_hub_id: str,
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("event_hub_id", event_hub_id)
        _setter("name", name)

    @property
    @pulumi.getter(name="eventHubId")
    def event_hub_id(self) -> str:
        """
        The resource ID of the Event Hub.
        """
        return pulumi.get(self, "event_hub_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Data Collection Rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDataCollectionRuleDestinationEventHubDirectResult(dict):
    def __init__(__self__, *,
                 event_hub_id: str,
                 name: str):
        """
        :param str event_hub_id: The resource ID of the Event Hub.
        :param str name: Specifies the name of the Data Collection Rule.
        """
        GetDataCollectionRuleDestinationEventHubDirectResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            event_hub_id=event_hub_id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             event_hub_id: str,
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("event_hub_id", event_hub_id)
        _setter("name", name)

    @property
    @pulumi.getter(name="eventHubId")
    def event_hub_id(self) -> str:
        """
        The resource ID of the Event Hub.
        """
        return pulumi.get(self, "event_hub_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Data Collection Rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDataCollectionRuleDestinationLogAnalyticResult(dict):
    def __init__(__self__, *,
                 name: str,
                 workspace_resource_id: str):
        """
        :param str name: Specifies the name of the Data Collection Rule.
        :param str workspace_resource_id: The ID of a Log Analytic Workspace resource.
        """
        GetDataCollectionRuleDestinationLogAnalyticResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            workspace_resource_id=workspace_resource_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             workspace_resource_id: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("workspace_resource_id", workspace_resource_id)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="workspaceResourceId")
    def workspace_resource_id(self) -> str:
        """
        The ID of a Log Analytic Workspace resource.
        """
        return pulumi.get(self, "workspace_resource_id")


@pulumi.output_type
class GetDataCollectionRuleDestinationMonitorAccountResult(dict):
    def __init__(__self__, *,
                 monitor_account_id: str,
                 name: str):
        """
        :param str monitor_account_id: The resource ID of the Monitor Account.
        :param str name: Specifies the name of the Data Collection Rule.
        """
        GetDataCollectionRuleDestinationMonitorAccountResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            monitor_account_id=monitor_account_id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             monitor_account_id: str,
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("monitor_account_id", monitor_account_id)
        _setter("name", name)

    @property
    @pulumi.getter(name="monitorAccountId")
    def monitor_account_id(self) -> str:
        """
        The resource ID of the Monitor Account.
        """
        return pulumi.get(self, "monitor_account_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Data Collection Rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDataCollectionRuleDestinationStorageBlobResult(dict):
    def __init__(__self__, *,
                 container_name: str,
                 name: str,
                 storage_account_id: str):
        """
        :param str container_name: The Storage Container name.
        :param str name: Specifies the name of the Data Collection Rule.
        :param str storage_account_id: The resource ID of the Storage Account.
        """
        GetDataCollectionRuleDestinationStorageBlobResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            container_name=container_name,
            name=name,
            storage_account_id=storage_account_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             container_name: str,
             name: str,
             storage_account_id: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("container_name", container_name)
        _setter("name", name)
        _setter("storage_account_id", storage_account_id)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> str:
        """
        The Storage Container name.
        """
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="storageAccountId")
    def storage_account_id(self) -> str:
        """
        The resource ID of the Storage Account.
        """
        return pulumi.get(self, "storage_account_id")


@pulumi.output_type
class GetDataCollectionRuleDestinationStorageBlobDirectResult(dict):
    def __init__(__self__, *,
                 container_name: str,
                 name: str,
                 storage_account_id: str):
        """
        :param str container_name: The Storage Container name.
        :param str name: Specifies the name of the Data Collection Rule.
        :param str storage_account_id: The resource ID of the Storage Account.
        """
        GetDataCollectionRuleDestinationStorageBlobDirectResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            container_name=container_name,
            name=name,
            storage_account_id=storage_account_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             container_name: str,
             name: str,
             storage_account_id: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("container_name", container_name)
        _setter("name", name)
        _setter("storage_account_id", storage_account_id)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> str:
        """
        The Storage Container name.
        """
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="storageAccountId")
    def storage_account_id(self) -> str:
        """
        The resource ID of the Storage Account.
        """
        return pulumi.get(self, "storage_account_id")


@pulumi.output_type
class GetDataCollectionRuleDestinationStorageTableDirectResult(dict):
    def __init__(__self__, *,
                 name: str,
                 storage_account_id: str,
                 table_name: str):
        """
        :param str name: Specifies the name of the Data Collection Rule.
        :param str storage_account_id: The resource ID of the Storage Account.
        :param str table_name: The Storage Table name.
        """
        GetDataCollectionRuleDestinationStorageTableDirectResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            storage_account_id=storage_account_id,
            table_name=table_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             storage_account_id: str,
             table_name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("storage_account_id", storage_account_id)
        _setter("table_name", table_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="storageAccountId")
    def storage_account_id(self) -> str:
        """
        The resource ID of the Storage Account.
        """
        return pulumi.get(self, "storage_account_id")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        """
        The Storage Table name.
        """
        return pulumi.get(self, "table_name")


@pulumi.output_type
class GetDataCollectionRuleIdentityResult(dict):
    def __init__(__self__, *,
                 identity_ids: Sequence[str],
                 principal_id: str,
                 tenant_id: str,
                 type: str):
        """
        :param Sequence[str] identity_ids: A list of User Assigned Managed Identity IDs to be assigned to this Data Collection Rule. Currently, up to 1 identity is supported.
        :param str principal_id: The Principal ID associated with this Managed Service Identity.
        :param str tenant_id: The Tenant ID associated with this Managed Service Identity.
        :param str type: cSpecifies the type of Managed Service Identity that should be configured on this Data Collection Rule. Possible values are `SystemAssigned` and `UserAssigned`.
        """
        GetDataCollectionRuleIdentityResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            identity_ids=identity_ids,
            principal_id=principal_id,
            tenant_id=tenant_id,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             identity_ids: Sequence[str],
             principal_id: str,
             tenant_id: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("identity_ids", identity_ids)
        _setter("principal_id", principal_id)
        _setter("tenant_id", tenant_id)
        _setter("type", type)

    @property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Sequence[str]:
        """
        A list of User Assigned Managed Identity IDs to be assigned to this Data Collection Rule. Currently, up to 1 identity is supported.
        """
        return pulumi.get(self, "identity_ids")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The Principal ID associated with this Managed Service Identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The Tenant ID associated with this Managed Service Identity.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        cSpecifies the type of Managed Service Identity that should be configured on this Data Collection Rule. Possible values are `SystemAssigned` and `UserAssigned`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDataCollectionRuleStreamDeclarationResult(dict):
    def __init__(__self__, *,
                 columns: Sequence['outputs.GetDataCollectionRuleStreamDeclarationColumnResult'],
                 stream_name: str):
        """
        :param Sequence['GetDataCollectionRuleStreamDeclarationColumnArgs'] columns: One or more `column` blocks as defined above.
        :param str stream_name: The name of the custom stream. This name should be unique across all `stream_declaration` blocks.
        """
        GetDataCollectionRuleStreamDeclarationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            columns=columns,
            stream_name=stream_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             columns: Sequence['outputs.GetDataCollectionRuleStreamDeclarationColumnResult'],
             stream_name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("columns", columns)
        _setter("stream_name", stream_name)

    @property
    @pulumi.getter
    def columns(self) -> Sequence['outputs.GetDataCollectionRuleStreamDeclarationColumnResult']:
        """
        One or more `column` blocks as defined above.
        """
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        """
        The name of the custom stream. This name should be unique across all `stream_declaration` blocks.
        """
        return pulumi.get(self, "stream_name")


@pulumi.output_type
class GetDataCollectionRuleStreamDeclarationColumnResult(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str):
        """
        :param str name: Specifies the name of the Data Collection Rule.
        :param str type: cSpecifies the type of Managed Service Identity that should be configured on this Data Collection Rule. Possible values are `SystemAssigned` and `UserAssigned`.
        """
        GetDataCollectionRuleStreamDeclarationColumnResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Data Collection Rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        cSpecifies the type of Managed Service Identity that should be configured on this Data Collection Rule. Possible values are `SystemAssigned` and `UserAssigned`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetLogProfileRetentionPolicyResult(dict):
    def __init__(__self__, *,
                 days: int,
                 enabled: bool):
        """
        :param int days: The number of days for the retention policy.
        :param bool enabled: A boolean value indicating whether the retention policy is enabled.
        """
        GetLogProfileRetentionPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            days=days,
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             days: int,
             enabled: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("days", days)
        _setter("enabled", enabled)

    @property
    @pulumi.getter
    def days(self) -> int:
        """
        The number of days for the retention policy.
        """
        return pulumi.get(self, "days")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        A boolean value indicating whether the retention policy is enabled.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetScheduledQueryRulesAlertActionResult(dict):
    def __init__(__self__, *,
                 action_groups: Sequence[str],
                 custom_webhook_payload: str,
                 email_subject: str):
        """
        :param Sequence[str] action_groups: List of action group reference resource IDs.
        :param str custom_webhook_payload: Custom payload to be sent for all webhook URI in Azure action group.
        :param str email_subject: Custom subject override for all email IDs in Azure action group.
        """
        GetScheduledQueryRulesAlertActionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action_groups=action_groups,
            custom_webhook_payload=custom_webhook_payload,
            email_subject=email_subject,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action_groups: Sequence[str],
             custom_webhook_payload: str,
             email_subject: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action_groups", action_groups)
        _setter("custom_webhook_payload", custom_webhook_payload)
        _setter("email_subject", email_subject)

    @property
    @pulumi.getter(name="actionGroups")
    def action_groups(self) -> Sequence[str]:
        """
        List of action group reference resource IDs.
        """
        return pulumi.get(self, "action_groups")

    @property
    @pulumi.getter(name="customWebhookPayload")
    def custom_webhook_payload(self) -> str:
        """
        Custom payload to be sent for all webhook URI in Azure action group.
        """
        return pulumi.get(self, "custom_webhook_payload")

    @property
    @pulumi.getter(name="emailSubject")
    def email_subject(self) -> str:
        """
        Custom subject override for all email IDs in Azure action group.
        """
        return pulumi.get(self, "email_subject")


@pulumi.output_type
class GetScheduledQueryRulesAlertTriggerResult(dict):
    def __init__(__self__, *,
                 metric_triggers: Sequence['outputs.GetScheduledQueryRulesAlertTriggerMetricTriggerResult'],
                 operator: str,
                 threshold: float):
        """
        :param str operator: Evaluation operation for rule.
        :param float threshold: Result or count threshold based on which rule should be triggered.
        """
        GetScheduledQueryRulesAlertTriggerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metric_triggers=metric_triggers,
            operator=operator,
            threshold=threshold,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metric_triggers: Sequence['outputs.GetScheduledQueryRulesAlertTriggerMetricTriggerResult'],
             operator: str,
             threshold: float,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("metric_triggers", metric_triggers)
        _setter("operator", operator)
        _setter("threshold", threshold)

    @property
    @pulumi.getter(name="metricTriggers")
    def metric_triggers(self) -> Sequence['outputs.GetScheduledQueryRulesAlertTriggerMetricTriggerResult']:
        return pulumi.get(self, "metric_triggers")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Evaluation operation for rule.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def threshold(self) -> float:
        """
        Result or count threshold based on which rule should be triggered.
        """
        return pulumi.get(self, "threshold")


@pulumi.output_type
class GetScheduledQueryRulesAlertTriggerMetricTriggerResult(dict):
    def __init__(__self__, *,
                 metric_column: str,
                 metric_trigger_type: str,
                 operator: str,
                 threshold: float):
        """
        :param str operator: Evaluation operation for rule.
        :param float threshold: Result or count threshold based on which rule should be triggered.
        """
        GetScheduledQueryRulesAlertTriggerMetricTriggerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metric_column=metric_column,
            metric_trigger_type=metric_trigger_type,
            operator=operator,
            threshold=threshold,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metric_column: str,
             metric_trigger_type: str,
             operator: str,
             threshold: float,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("metric_column", metric_column)
        _setter("metric_trigger_type", metric_trigger_type)
        _setter("operator", operator)
        _setter("threshold", threshold)

    @property
    @pulumi.getter(name="metricColumn")
    def metric_column(self) -> str:
        return pulumi.get(self, "metric_column")

    @property
    @pulumi.getter(name="metricTriggerType")
    def metric_trigger_type(self) -> str:
        return pulumi.get(self, "metric_trigger_type")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Evaluation operation for rule.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def threshold(self) -> float:
        """
        Result or count threshold based on which rule should be triggered.
        """
        return pulumi.get(self, "threshold")


@pulumi.output_type
class GetScheduledQueryRulesLogCriteriaResult(dict):
    def __init__(__self__, *,
                 dimensions: Sequence['outputs.GetScheduledQueryRulesLogCriteriaDimensionResult'],
                 metric_name: str):
        """
        :param Sequence['GetScheduledQueryRulesLogCriteriaDimensionArgs'] dimensions: A `dimension` block as defined below.
        :param str metric_name: Name of the metric.
        """
        GetScheduledQueryRulesLogCriteriaResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dimensions=dimensions,
            metric_name=metric_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dimensions: Sequence['outputs.GetScheduledQueryRulesLogCriteriaDimensionResult'],
             metric_name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("dimensions", dimensions)
        _setter("metric_name", metric_name)

    @property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetScheduledQueryRulesLogCriteriaDimensionResult']:
        """
        A `dimension` block as defined below.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        Name of the metric.
        """
        return pulumi.get(self, "metric_name")


@pulumi.output_type
class GetScheduledQueryRulesLogCriteriaDimensionResult(dict):
    def __init__(__self__, *,
                 name: str,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str name: Specifies the name of the scheduled query rule.
        :param str operator: Operator for dimension values.
        :param Sequence[str] values: List of dimension values.
        """
        GetScheduledQueryRulesLogCriteriaDimensionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             operator: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("operator", operator)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the scheduled query rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Operator for dimension values.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        List of dimension values.
        """
        return pulumi.get(self, "values")


