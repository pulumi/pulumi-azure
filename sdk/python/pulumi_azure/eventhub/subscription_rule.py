# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class SubscriptionRule(pulumi.CustomResource):
    """
    Create a ServiceBus Subscription Rule.
    """
    def __init__(__self__, __name__, __opts__=None, action=None, correlation_filter=None, filter_type=None, name=None, namespace_name=None, resource_group_name=None, sql_filter=None, subscription_name=None, topic_name=None):
        """Create a SubscriptionRule resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if action and not isinstance(action, basestring):
            raise TypeError('Expected property action to be a basestring')
        __self__.action = action
        """
        Represents set of actions written in SQL language-based syntax that is performed against a BrokeredMessage.
        """
        __props__['action'] = action

        if correlation_filter and not isinstance(correlation_filter, dict):
            raise TypeError('Expected property correlation_filter to be a dict')
        __self__.correlation_filter = correlation_filter
        """
        A `correlation_filter` block as documented below to be evaluated against a BrokeredMessage. Required when `filter_type` is set to `CorrelationFilter`.
        """
        __props__['correlationFilter'] = correlation_filter

        if not filter_type:
            raise TypeError('Missing required property filter_type')
        elif not isinstance(filter_type, basestring):
            raise TypeError('Expected property filter_type to be a basestring')
        __self__.filter_type = filter_type
        """
        Type of filter to be applied to a BrokeredMessage. Possible values are `SqlFilter` and `CorrelationFilter`.
        """
        __props__['filterType'] = filter_type

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        Specifies the name of the ServiceBus Subscription Rule. Changing this forces a new resource to be created.
        """
        __props__['name'] = name

        if not namespace_name:
            raise TypeError('Missing required property namespace_name')
        elif not isinstance(namespace_name, basestring):
            raise TypeError('Expected property namespace_name to be a basestring')
        __self__.namespace_name = namespace_name
        """
        The name of the ServiceBus Namespace in which the ServiceBus Topic exists. Changing this forces a new resource to be created.
        """
        __props__['namespaceName'] = namespace_name

        if not resource_group_name:
            raise TypeError('Missing required property resource_group_name')
        elif not isinstance(resource_group_name, basestring):
            raise TypeError('Expected property resource_group_name to be a basestring')
        __self__.resource_group_name = resource_group_name
        """
        The name of the resource group in the ServiceBus Namespace exists. Changing this forces a new resource to be created.
        """
        __props__['resourceGroupName'] = resource_group_name

        if sql_filter and not isinstance(sql_filter, basestring):
            raise TypeError('Expected property sql_filter to be a basestring')
        __self__.sql_filter = sql_filter
        """
        Represents a filter written in SQL language-based syntax that to be evaluated against a BrokeredMessage. Required when `filter_type` is set to `SqlFilter`.
        """
        __props__['sqlFilter'] = sql_filter

        if not subscription_name:
            raise TypeError('Missing required property subscription_name')
        elif not isinstance(subscription_name, basestring):
            raise TypeError('Expected property subscription_name to be a basestring')
        __self__.subscription_name = subscription_name
        """
        The name of the ServiceBus Subscription in which this Rule should be created. Changing this forces a new resource to be created.
        """
        __props__['subscriptionName'] = subscription_name

        if not topic_name:
            raise TypeError('Missing required property topic_name')
        elif not isinstance(topic_name, basestring):
            raise TypeError('Expected property topic_name to be a basestring')
        __self__.topic_name = topic_name
        """
        The name of the ServiceBus Topic in which the ServiceBus Subscription exists. Changing this forces a new resource to be created.
        """
        __props__['topicName'] = topic_name

        super(SubscriptionRule, __self__).__init__(
            'azure:eventhub/subscriptionRule:SubscriptionRule',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'action' in outs:
            self.action = outs['action']
        if 'correlationFilter' in outs:
            self.correlation_filter = outs['correlationFilter']
        if 'filterType' in outs:
            self.filter_type = outs['filterType']
        if 'name' in outs:
            self.name = outs['name']
        if 'namespaceName' in outs:
            self.namespace_name = outs['namespaceName']
        if 'resourceGroupName' in outs:
            self.resource_group_name = outs['resourceGroupName']
        if 'sqlFilter' in outs:
            self.sql_filter = outs['sqlFilter']
        if 'subscriptionName' in outs:
            self.subscription_name = outs['subscriptionName']
        if 'topicName' in outs:
            self.topic_name = outs['topicName']
