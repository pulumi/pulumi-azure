# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class Namespace(pulumi.CustomResource):
    """
    Create a ServiceBus Namespace.
    """
    def __init__(__self__, __name__, __opts__=None, capacity=None, location=None, name=None, resource_group_name=None, sku=None, tags=None):
        """Create a Namespace resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if capacity and not isinstance(capacity, int):
            raise TypeError('Expected property capacity to be a int')
        __self__.capacity = capacity
        """
        Specifies the capacity of a Premium namespace. Can be 1, 2 or 4.
        """
        __props__['capacity'] = capacity

        if not location:
            raise TypeError('Missing required property location')
        elif not isinstance(location, basestring):
            raise TypeError('Expected property location to be a basestring')
        __self__.location = location
        """
        Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        """
        __props__['location'] = location

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        Specifies the name of the ServiceBus Namespace resource . Changing this forces a
        new resource to be created.
        """
        __props__['name'] = name

        if not resource_group_name:
            raise TypeError('Missing required property resource_group_name')
        elif not isinstance(resource_group_name, basestring):
            raise TypeError('Expected property resource_group_name to be a basestring')
        __self__.resource_group_name = resource_group_name
        """
        The name of the resource group in which to
        create the namespace.
        """
        __props__['resourceGroupName'] = resource_group_name

        if not sku:
            raise TypeError('Missing required property sku')
        elif not isinstance(sku, basestring):
            raise TypeError('Expected property sku to be a basestring')
        __self__.sku = sku
        """
        Defines which tier to use. Options are basic, standard or premium.
        """
        __props__['sku'] = sku

        if tags and not isinstance(tags, dict):
            raise TypeError('Expected property tags to be a dict')
        __self__.tags = tags
        """
        A mapping of tags to assign to the resource.
        """
        __props__['tags'] = tags

        __self__.default_primary_connection_string = pulumi.runtime.UNKNOWN
        """
        The primary connection string for the authorization
        rule `RootManageSharedAccessKey`.
        """
        __self__.default_primary_key = pulumi.runtime.UNKNOWN
        """
        The primary access key for the authorization rule `RootManageSharedAccessKey`.
        """
        __self__.default_secondary_connection_string = pulumi.runtime.UNKNOWN
        """
        The secondary connection string for the
        authorization rule `RootManageSharedAccessKey`.
        """
        __self__.default_secondary_key = pulumi.runtime.UNKNOWN
        """
        The secondary access key for the authorization rule `RootManageSharedAccessKey`.
        """

        super(Namespace, __self__).__init__(
            'azure:eventhub/namespace:Namespace',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'capacity' in outs:
            self.capacity = outs['capacity']
        if 'defaultPrimaryConnectionString' in outs:
            self.default_primary_connection_string = outs['defaultPrimaryConnectionString']
        if 'defaultPrimaryKey' in outs:
            self.default_primary_key = outs['defaultPrimaryKey']
        if 'defaultSecondaryConnectionString' in outs:
            self.default_secondary_connection_string = outs['defaultSecondaryConnectionString']
        if 'defaultSecondaryKey' in outs:
            self.default_secondary_key = outs['defaultSecondaryKey']
        if 'location' in outs:
            self.location = outs['location']
        if 'name' in outs:
            self.name = outs['name']
        if 'resourceGroupName' in outs:
            self.resource_group_name = outs['resourceGroupName']
        if 'sku' in outs:
            self.sku = outs['sku']
        if 'tags' in outs:
            self.tags = outs['tags']
