# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class Topic(pulumi.CustomResource):
    """
    Create a ServiceBus Topic.
    
    **Note** Topics can only be created in Namespaces with an SKU of `standard` or higher.
    """
    def __init__(__self__, __name__, __opts__=None, auto_delete_on_idle=None, default_message_ttl=None, duplicate_detection_history_time_window=None, enable_batched_operations=None, enable_express=None, enable_filtering_messages_before_publishing=None, enable_partitioning=None, location=None, max_size_in_megabytes=None, name=None, namespace_name=None, requires_duplicate_detection=None, resource_group_name=None, status=None, support_ordering=None):
        """Create a Topic resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if auto_delete_on_idle and not isinstance(auto_delete_on_idle, basestring):
            raise TypeError('Expected property auto_delete_on_idle to be a basestring')
        __self__.auto_delete_on_idle = auto_delete_on_idle
        """
        The idle interval after which the
        Topic is automatically deleted, minimum of 5 minutes. Provided in the [TimeSpan](#timespan-format)
        format.
        """
        __props__['autoDeleteOnIdle'] = auto_delete_on_idle

        if default_message_ttl and not isinstance(default_message_ttl, basestring):
            raise TypeError('Expected property default_message_ttl to be a basestring')
        __self__.default_message_ttl = default_message_ttl
        """
        The TTL of messages sent to this topic if no
        TTL value is set on the message itself. Provided in the [TimeSpan](#timespan-format)
        format.
        """
        __props__['defaultMessageTtl'] = default_message_ttl

        if duplicate_detection_history_time_window and not isinstance(duplicate_detection_history_time_window, basestring):
            raise TypeError('Expected property duplicate_detection_history_time_window to be a basestring')
        __self__.duplicate_detection_history_time_window = duplicate_detection_history_time_window
        """
        The duration during which
        duplicates can be detected. Provided in the [TimeSpan](#timespan-format) format. Defaults to 10 minutes (`00:10:00`)
        """
        __props__['duplicateDetectionHistoryTimeWindow'] = duplicate_detection_history_time_window

        if enable_batched_operations and not isinstance(enable_batched_operations, bool):
            raise TypeError('Expected property enable_batched_operations to be a bool')
        __self__.enable_batched_operations = enable_batched_operations
        """
        Boolean flag which controls if server-side
        batched operations are enabled. Defaults to false.
        """
        __props__['enableBatchedOperations'] = enable_batched_operations

        if enable_express and not isinstance(enable_express, bool):
            raise TypeError('Expected property enable_express to be a bool')
        __self__.enable_express = enable_express
        """
        Boolean flag which controls whether Express Entities
        are enabled. An express topic holds a message in memory temporarily before writing
        it to persistent storage. Defaults to false.
        """
        __props__['enableExpress'] = enable_express

        if enable_filtering_messages_before_publishing and not isinstance(enable_filtering_messages_before_publishing, bool):
            raise TypeError('Expected property enable_filtering_messages_before_publishing to be a bool')
        __self__.enable_filtering_messages_before_publishing = enable_filtering_messages_before_publishing
        __props__['enableFilteringMessagesBeforePublishing'] = enable_filtering_messages_before_publishing

        if enable_partitioning and not isinstance(enable_partitioning, bool):
            raise TypeError('Expected property enable_partitioning to be a bool')
        __self__.enable_partitioning = enable_partitioning
        """
        Boolean flag which controls whether to enable
        the topic to be partitioned across multiple message brokers. Defaults to false.
        Changing this forces a new resource to be created.
        """
        __props__['enablePartitioning'] = enable_partitioning

        if location and not isinstance(location, basestring):
            raise TypeError('Expected property location to be a basestring')
        __self__.location = location
        """
        Specifies the supported Azure location where the resource exists.
        Changing this forces a new resource to be created.
        """
        __props__['location'] = location

        if max_size_in_megabytes and not isinstance(max_size_in_megabytes, int):
            raise TypeError('Expected property max_size_in_megabytes to be a int')
        __self__.max_size_in_megabytes = max_size_in_megabytes
        """
        Integer value which controls the size of
        memory allocated for the topic. For supported values see the "Queue/topic size"
        section of [this document](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-quotas).
        """
        __props__['maxSizeInMegabytes'] = max_size_in_megabytes

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        Specifies the name of the ServiceBus Topic resource. Changing this forces a
        new resource to be created.
        """
        __props__['name'] = name

        if not namespace_name:
            raise TypeError('Missing required property namespace_name')
        elif not isinstance(namespace_name, basestring):
            raise TypeError('Expected property namespace_name to be a basestring')
        __self__.namespace_name = namespace_name
        """
        The name of the ServiceBus Namespace to create
        this topic in. Changing this forces a new resource to be created.
        """
        __props__['namespaceName'] = namespace_name

        if requires_duplicate_detection and not isinstance(requires_duplicate_detection, bool):
            raise TypeError('Expected property requires_duplicate_detection to be a bool')
        __self__.requires_duplicate_detection = requires_duplicate_detection
        """
        Boolean flag which controls whether
        the Topic requires duplicate detection. Defaults to false. Changing this forces
        a new resource to be created.
        """
        __props__['requiresDuplicateDetection'] = requires_duplicate_detection

        if not resource_group_name:
            raise TypeError('Missing required property resource_group_name')
        elif not isinstance(resource_group_name, basestring):
            raise TypeError('Expected property resource_group_name to be a basestring')
        __self__.resource_group_name = resource_group_name
        """
        The name of the resource group in which to
        create the namespace. Changing this forces a new resource to be created.
        """
        __props__['resourceGroupName'] = resource_group_name

        if status and not isinstance(status, basestring):
            raise TypeError('Expected property status to be a basestring')
        __self__.status = status
        """
        The Status of the Service Bus Topic. Acceptable values are `Active` or `Disabled`. Defaults to `Active`.
        """
        __props__['status'] = status

        if support_ordering and not isinstance(support_ordering, bool):
            raise TypeError('Expected property support_ordering to be a bool')
        __self__.support_ordering = support_ordering
        """
        Boolean flag which controls whether the Topic
        supports ordering. Defaults to false.
        """
        __props__['supportOrdering'] = support_ordering

        super(Topic, __self__).__init__(
            'azure:eventhub/topic:Topic',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'autoDeleteOnIdle' in outs:
            self.auto_delete_on_idle = outs['autoDeleteOnIdle']
        if 'defaultMessageTtl' in outs:
            self.default_message_ttl = outs['defaultMessageTtl']
        if 'duplicateDetectionHistoryTimeWindow' in outs:
            self.duplicate_detection_history_time_window = outs['duplicateDetectionHistoryTimeWindow']
        if 'enableBatchedOperations' in outs:
            self.enable_batched_operations = outs['enableBatchedOperations']
        if 'enableExpress' in outs:
            self.enable_express = outs['enableExpress']
        if 'enableFilteringMessagesBeforePublishing' in outs:
            self.enable_filtering_messages_before_publishing = outs['enableFilteringMessagesBeforePublishing']
        if 'enablePartitioning' in outs:
            self.enable_partitioning = outs['enablePartitioning']
        if 'location' in outs:
            self.location = outs['location']
        if 'maxSizeInMegabytes' in outs:
            self.max_size_in_megabytes = outs['maxSizeInMegabytes']
        if 'name' in outs:
            self.name = outs['name']
        if 'namespaceName' in outs:
            self.namespace_name = outs['namespaceName']
        if 'requiresDuplicateDetection' in outs:
            self.requires_duplicate_detection = outs['requiresDuplicateDetection']
        if 'resourceGroupName' in outs:
            self.resource_group_name = outs['resourceGroupName']
        if 'status' in outs:
            self.status = outs['status']
        if 'supportOrdering' in outs:
            self.support_ordering = outs['supportOrdering']
