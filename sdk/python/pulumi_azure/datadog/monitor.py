# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MonitorArgs', 'Monitor']

@pulumi.input_type
class MonitorArgs:
    def __init__(__self__, *,
                 datadog_organization: pulumi.Input['MonitorDatadogOrganizationArgs'],
                 resource_group_name: pulumi.Input[str],
                 sku_name: pulumi.Input[str],
                 user: pulumi.Input['MonitorUserArgs'],
                 identity: Optional[pulumi.Input['MonitorIdentityArgs']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 monitoring_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Monitor resource.
        :param pulumi.Input['MonitorDatadogOrganizationArgs'] datadog_organization: A `datadog_organization` block as defined below.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group where the Datadog Monitor should exist. Changing this forces a new Datadog Monitor to be created.
        :param pulumi.Input[str] sku_name: The name which should be used for this sku.
        :param pulumi.Input['MonitorUserArgs'] user: A `user` block as defined below.
        :param pulumi.Input['MonitorIdentityArgs'] identity: A `identity` block as defined below.
        :param pulumi.Input[str] location: The Azure Region where the Datadog Monitor should exist. Changing this forces a new Datadog Monitor to be created.
        :param pulumi.Input[bool] monitoring_enabled: Is monitoring enabled? Defaults to`true`.
        :param pulumi.Input[str] name: The name of the user that will be associated with the Datadog Monitor. Changing this forces a new Datadog Monitor to be created.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags which should be assigned to the Datadog Monitor.
        """
        MonitorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            datadog_organization=datadog_organization,
            resource_group_name=resource_group_name,
            sku_name=sku_name,
            user=user,
            identity=identity,
            location=location,
            monitoring_enabled=monitoring_enabled,
            name=name,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             datadog_organization: pulumi.Input['MonitorDatadogOrganizationArgs'],
             resource_group_name: pulumi.Input[str],
             sku_name: pulumi.Input[str],
             user: pulumi.Input['MonitorUserArgs'],
             identity: Optional[pulumi.Input['MonitorIdentityArgs']] = None,
             location: Optional[pulumi.Input[str]] = None,
             monitoring_enabled: Optional[pulumi.Input[bool]] = None,
             name: Optional[pulumi.Input[str]] = None,
             tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("datadog_organization", datadog_organization)
        _setter("resource_group_name", resource_group_name)
        _setter("sku_name", sku_name)
        _setter("user", user)
        if identity is not None:
            _setter("identity", identity)
        if location is not None:
            _setter("location", location)
        if monitoring_enabled is not None:
            _setter("monitoring_enabled", monitoring_enabled)
        if name is not None:
            _setter("name", name)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter(name="datadogOrganization")
    def datadog_organization(self) -> pulumi.Input['MonitorDatadogOrganizationArgs']:
        """
        A `datadog_organization` block as defined below.
        """
        return pulumi.get(self, "datadog_organization")

    @datadog_organization.setter
    def datadog_organization(self, value: pulumi.Input['MonitorDatadogOrganizationArgs']):
        pulumi.set(self, "datadog_organization", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the Resource Group where the Datadog Monitor should exist. Changing this forces a new Datadog Monitor to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="skuName")
    def sku_name(self) -> pulumi.Input[str]:
        """
        The name which should be used for this sku.
        """
        return pulumi.get(self, "sku_name")

    @sku_name.setter
    def sku_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "sku_name", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input['MonitorUserArgs']:
        """
        A `user` block as defined below.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input['MonitorUserArgs']):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input['MonitorIdentityArgs']]:
        """
        A `identity` block as defined below.
        """
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input['MonitorIdentityArgs']]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The Azure Region where the Datadog Monitor should exist. Changing this forces a new Datadog Monitor to be created.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="monitoringEnabled")
    def monitoring_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is monitoring enabled? Defaults to`true`.
        """
        return pulumi.get(self, "monitoring_enabled")

    @monitoring_enabled.setter
    def monitoring_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitoring_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the user that will be associated with the Datadog Monitor. Changing this forces a new Datadog Monitor to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A mapping of tags which should be assigned to the Datadog Monitor.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _MonitorState:
    def __init__(__self__, *,
                 datadog_organization: Optional[pulumi.Input['MonitorDatadogOrganizationArgs']] = None,
                 identity: Optional[pulumi.Input['MonitorIdentityArgs']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 marketplace_subscription_status: Optional[pulumi.Input[str]] = None,
                 monitoring_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 sku_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 user: Optional[pulumi.Input['MonitorUserArgs']] = None):
        """
        Input properties used for looking up and filtering Monitor resources.
        :param pulumi.Input['MonitorDatadogOrganizationArgs'] datadog_organization: A `datadog_organization` block as defined below.
        :param pulumi.Input['MonitorIdentityArgs'] identity: A `identity` block as defined below.
        :param pulumi.Input[str] location: The Azure Region where the Datadog Monitor should exist. Changing this forces a new Datadog Monitor to be created.
        :param pulumi.Input[str] marketplace_subscription_status: Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state.
        :param pulumi.Input[bool] monitoring_enabled: Is monitoring enabled? Defaults to`true`.
        :param pulumi.Input[str] name: The name of the user that will be associated with the Datadog Monitor. Changing this forces a new Datadog Monitor to be created.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group where the Datadog Monitor should exist. Changing this forces a new Datadog Monitor to be created.
        :param pulumi.Input[str] sku_name: The name which should be used for this sku.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags which should be assigned to the Datadog Monitor.
        :param pulumi.Input['MonitorUserArgs'] user: A `user` block as defined below.
        """
        _MonitorState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            datadog_organization=datadog_organization,
            identity=identity,
            location=location,
            marketplace_subscription_status=marketplace_subscription_status,
            monitoring_enabled=monitoring_enabled,
            name=name,
            resource_group_name=resource_group_name,
            sku_name=sku_name,
            tags=tags,
            user=user,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             datadog_organization: Optional[pulumi.Input['MonitorDatadogOrganizationArgs']] = None,
             identity: Optional[pulumi.Input['MonitorIdentityArgs']] = None,
             location: Optional[pulumi.Input[str]] = None,
             marketplace_subscription_status: Optional[pulumi.Input[str]] = None,
             monitoring_enabled: Optional[pulumi.Input[bool]] = None,
             name: Optional[pulumi.Input[str]] = None,
             resource_group_name: Optional[pulumi.Input[str]] = None,
             sku_name: Optional[pulumi.Input[str]] = None,
             tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             user: Optional[pulumi.Input['MonitorUserArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if datadog_organization is not None:
            _setter("datadog_organization", datadog_organization)
        if identity is not None:
            _setter("identity", identity)
        if location is not None:
            _setter("location", location)
        if marketplace_subscription_status is not None:
            _setter("marketplace_subscription_status", marketplace_subscription_status)
        if monitoring_enabled is not None:
            _setter("monitoring_enabled", monitoring_enabled)
        if name is not None:
            _setter("name", name)
        if resource_group_name is not None:
            _setter("resource_group_name", resource_group_name)
        if sku_name is not None:
            _setter("sku_name", sku_name)
        if tags is not None:
            _setter("tags", tags)
        if user is not None:
            _setter("user", user)

    @property
    @pulumi.getter(name="datadogOrganization")
    def datadog_organization(self) -> Optional[pulumi.Input['MonitorDatadogOrganizationArgs']]:
        """
        A `datadog_organization` block as defined below.
        """
        return pulumi.get(self, "datadog_organization")

    @datadog_organization.setter
    def datadog_organization(self, value: Optional[pulumi.Input['MonitorDatadogOrganizationArgs']]):
        pulumi.set(self, "datadog_organization", value)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input['MonitorIdentityArgs']]:
        """
        A `identity` block as defined below.
        """
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input['MonitorIdentityArgs']]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The Azure Region where the Datadog Monitor should exist. Changing this forces a new Datadog Monitor to be created.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="marketplaceSubscriptionStatus")
    def marketplace_subscription_status(self) -> Optional[pulumi.Input[str]]:
        """
        Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state.
        """
        return pulumi.get(self, "marketplace_subscription_status")

    @marketplace_subscription_status.setter
    def marketplace_subscription_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "marketplace_subscription_status", value)

    @property
    @pulumi.getter(name="monitoringEnabled")
    def monitoring_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is monitoring enabled? Defaults to`true`.
        """
        return pulumi.get(self, "monitoring_enabled")

    @monitoring_enabled.setter
    def monitoring_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitoring_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the user that will be associated with the Datadog Monitor. Changing this forces a new Datadog Monitor to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Resource Group where the Datadog Monitor should exist. Changing this forces a new Datadog Monitor to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="skuName")
    def sku_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name which should be used for this sku.
        """
        return pulumi.get(self, "sku_name")

    @sku_name.setter
    def sku_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sku_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A mapping of tags which should be assigned to the Datadog Monitor.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input['MonitorUserArgs']]:
        """
        A `user` block as defined below.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input['MonitorUserArgs']]):
        pulumi.set(self, "user", value)


class Monitor(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 datadog_organization: Optional[pulumi.Input[pulumi.InputType['MonitorDatadogOrganizationArgs']]] = None,
                 identity: Optional[pulumi.Input[pulumi.InputType['MonitorIdentityArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 monitoring_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 sku_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 user: Optional[pulumi.Input[pulumi.InputType['MonitorUserArgs']]] = None,
                 __props__=None):
        """
        Manages a datadog Monitor.

        ## Example Usage
        ### Monitor creation with linking to Datadog organization

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West US 2")
        example_monitor = azure.datadog.Monitor("exampleMonitor",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            datadog_organization=azure.datadog.MonitorDatadogOrganizationArgs(
                api_key="XXXX",
                application_key="XXXX",
            ),
            user=azure.datadog.MonitorUserArgs(
                name="Example",
                email="abc@xyz.com",
            ),
            sku_name="Linked",
            identity=azure.datadog.MonitorIdentityArgs(
                type="SystemAssigned",
            ))
        ```
        ## Role Assignment

        To enable metrics flow, perform role assignment on the identity created above. `Monitoring reader(43d0d8ad-25c7-4714-9337-8ba259a9fe05)` role is required .

        ### Role assignment on the monitor created

        ```python
        import pulumi
        import pulumi_azure as azure

        primary = azure.core.get_subscription()
        monitoring_reader = azure.authorization.get_role_definition(name="Monitoring Reader")
        example = azure.authorization.Assignment("example",
            scope=primary.id,
            role_definition_id=monitoring_reader.role_definition_id,
            principal_id=azurerm_datadog_monitor["example"]["identity"][0]["principal_id"])
        ```

        ## Import

        Datadog Monitors can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:datadog/monitor:Monitor example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Datadog/monitors/monitor1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['MonitorDatadogOrganizationArgs']] datadog_organization: A `datadog_organization` block as defined below.
        :param pulumi.Input[pulumi.InputType['MonitorIdentityArgs']] identity: A `identity` block as defined below.
        :param pulumi.Input[str] location: The Azure Region where the Datadog Monitor should exist. Changing this forces a new Datadog Monitor to be created.
        :param pulumi.Input[bool] monitoring_enabled: Is monitoring enabled? Defaults to`true`.
        :param pulumi.Input[str] name: The name of the user that will be associated with the Datadog Monitor. Changing this forces a new Datadog Monitor to be created.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group where the Datadog Monitor should exist. Changing this forces a new Datadog Monitor to be created.
        :param pulumi.Input[str] sku_name: The name which should be used for this sku.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags which should be assigned to the Datadog Monitor.
        :param pulumi.Input[pulumi.InputType['MonitorUserArgs']] user: A `user` block as defined below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MonitorArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a datadog Monitor.

        ## Example Usage
        ### Monitor creation with linking to Datadog organization

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West US 2")
        example_monitor = azure.datadog.Monitor("exampleMonitor",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            datadog_organization=azure.datadog.MonitorDatadogOrganizationArgs(
                api_key="XXXX",
                application_key="XXXX",
            ),
            user=azure.datadog.MonitorUserArgs(
                name="Example",
                email="abc@xyz.com",
            ),
            sku_name="Linked",
            identity=azure.datadog.MonitorIdentityArgs(
                type="SystemAssigned",
            ))
        ```
        ## Role Assignment

        To enable metrics flow, perform role assignment on the identity created above. `Monitoring reader(43d0d8ad-25c7-4714-9337-8ba259a9fe05)` role is required .

        ### Role assignment on the monitor created

        ```python
        import pulumi
        import pulumi_azure as azure

        primary = azure.core.get_subscription()
        monitoring_reader = azure.authorization.get_role_definition(name="Monitoring Reader")
        example = azure.authorization.Assignment("example",
            scope=primary.id,
            role_definition_id=monitoring_reader.role_definition_id,
            principal_id=azurerm_datadog_monitor["example"]["identity"][0]["principal_id"])
        ```

        ## Import

        Datadog Monitors can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:datadog/monitor:Monitor example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Datadog/monitors/monitor1
        ```

        :param str resource_name: The name of the resource.
        :param MonitorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MonitorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            MonitorArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 datadog_organization: Optional[pulumi.Input[pulumi.InputType['MonitorDatadogOrganizationArgs']]] = None,
                 identity: Optional[pulumi.Input[pulumi.InputType['MonitorIdentityArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 monitoring_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 sku_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 user: Optional[pulumi.Input[pulumi.InputType['MonitorUserArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MonitorArgs.__new__(MonitorArgs)

            if datadog_organization is not None and not isinstance(datadog_organization, MonitorDatadogOrganizationArgs):
                datadog_organization = datadog_organization or {}
                def _setter(key, value):
                    datadog_organization[key] = value
                MonitorDatadogOrganizationArgs._configure(_setter, **datadog_organization)
            if datadog_organization is None and not opts.urn:
                raise TypeError("Missing required property 'datadog_organization'")
            __props__.__dict__["datadog_organization"] = datadog_organization
            if identity is not None and not isinstance(identity, MonitorIdentityArgs):
                identity = identity or {}
                def _setter(key, value):
                    identity[key] = value
                MonitorIdentityArgs._configure(_setter, **identity)
            __props__.__dict__["identity"] = identity
            __props__.__dict__["location"] = location
            __props__.__dict__["monitoring_enabled"] = monitoring_enabled
            __props__.__dict__["name"] = name
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            if sku_name is None and not opts.urn:
                raise TypeError("Missing required property 'sku_name'")
            __props__.__dict__["sku_name"] = sku_name
            __props__.__dict__["tags"] = tags
            if user is not None and not isinstance(user, MonitorUserArgs):
                user = user or {}
                def _setter(key, value):
                    user[key] = value
                MonitorUserArgs._configure(_setter, **user)
            if user is None and not opts.urn:
                raise TypeError("Missing required property 'user'")
            __props__.__dict__["user"] = user
            __props__.__dict__["marketplace_subscription_status"] = None
        super(Monitor, __self__).__init__(
            'azure:datadog/monitor:Monitor',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            datadog_organization: Optional[pulumi.Input[pulumi.InputType['MonitorDatadogOrganizationArgs']]] = None,
            identity: Optional[pulumi.Input[pulumi.InputType['MonitorIdentityArgs']]] = None,
            location: Optional[pulumi.Input[str]] = None,
            marketplace_subscription_status: Optional[pulumi.Input[str]] = None,
            monitoring_enabled: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            resource_group_name: Optional[pulumi.Input[str]] = None,
            sku_name: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            user: Optional[pulumi.Input[pulumi.InputType['MonitorUserArgs']]] = None) -> 'Monitor':
        """
        Get an existing Monitor resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['MonitorDatadogOrganizationArgs']] datadog_organization: A `datadog_organization` block as defined below.
        :param pulumi.Input[pulumi.InputType['MonitorIdentityArgs']] identity: A `identity` block as defined below.
        :param pulumi.Input[str] location: The Azure Region where the Datadog Monitor should exist. Changing this forces a new Datadog Monitor to be created.
        :param pulumi.Input[str] marketplace_subscription_status: Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state.
        :param pulumi.Input[bool] monitoring_enabled: Is monitoring enabled? Defaults to`true`.
        :param pulumi.Input[str] name: The name of the user that will be associated with the Datadog Monitor. Changing this forces a new Datadog Monitor to be created.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group where the Datadog Monitor should exist. Changing this forces a new Datadog Monitor to be created.
        :param pulumi.Input[str] sku_name: The name which should be used for this sku.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags which should be assigned to the Datadog Monitor.
        :param pulumi.Input[pulumi.InputType['MonitorUserArgs']] user: A `user` block as defined below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MonitorState.__new__(_MonitorState)

        __props__.__dict__["datadog_organization"] = datadog_organization
        __props__.__dict__["identity"] = identity
        __props__.__dict__["location"] = location
        __props__.__dict__["marketplace_subscription_status"] = marketplace_subscription_status
        __props__.__dict__["monitoring_enabled"] = monitoring_enabled
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_group_name"] = resource_group_name
        __props__.__dict__["sku_name"] = sku_name
        __props__.__dict__["tags"] = tags
        __props__.__dict__["user"] = user
        return Monitor(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="datadogOrganization")
    def datadog_organization(self) -> pulumi.Output['outputs.MonitorDatadogOrganization']:
        """
        A `datadog_organization` block as defined below.
        """
        return pulumi.get(self, "datadog_organization")

    @property
    @pulumi.getter
    def identity(self) -> pulumi.Output[Optional['outputs.MonitorIdentity']]:
        """
        A `identity` block as defined below.
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The Azure Region where the Datadog Monitor should exist. Changing this forces a new Datadog Monitor to be created.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="marketplaceSubscriptionStatus")
    def marketplace_subscription_status(self) -> pulumi.Output[str]:
        """
        Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state.
        """
        return pulumi.get(self, "marketplace_subscription_status")

    @property
    @pulumi.getter(name="monitoringEnabled")
    def monitoring_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Is monitoring enabled? Defaults to`true`.
        """
        return pulumi.get(self, "monitoring_enabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the user that will be associated with the Datadog Monitor. Changing this forces a new Datadog Monitor to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[str]:
        """
        The name of the Resource Group where the Datadog Monitor should exist. Changing this forces a new Datadog Monitor to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="skuName")
    def sku_name(self) -> pulumi.Output[str]:
        """
        The name which should be used for this sku.
        """
        return pulumi.get(self, "sku_name")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A mapping of tags which should be assigned to the Datadog Monitor.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def user(self) -> pulumi.Output['outputs.MonitorUser']:
        """
        A `user` block as defined below.
        """
        return pulumi.get(self, "user")

