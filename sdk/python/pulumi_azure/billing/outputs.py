# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AccountCostManagementExportExportDataOptions',
    'AccountCostManagementExportExportDataStorageLocation',
]

@pulumi.output_type
class AccountCostManagementExportExportDataOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeFrame":
            suggest = "time_frame"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccountCostManagementExportExportDataOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccountCostManagementExportExportDataOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccountCostManagementExportExportDataOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 time_frame: str,
                 type: str):
        """
        :param str time_frame: The time frame for pulling data for the query. If custom, then a specific time period must be provided. Possible values include: `WeekToDate`, `MonthToDate`, `BillingMonthToDate`, `TheLast7Days`, `TheLastMonth`, `TheLastBillingMonth`, `Custom`.
        :param str type: The type of the query. Possible values are `ActualCost`, `AmortizedCost` and `Usage`.
        """
        AccountCostManagementExportExportDataOptions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            time_frame=time_frame,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             time_frame: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("time_frame", time_frame)
        _setter("type", type)

    @property
    @pulumi.getter(name="timeFrame")
    def time_frame(self) -> str:
        """
        The time frame for pulling data for the query. If custom, then a specific time period must be provided. Possible values include: `WeekToDate`, `MonthToDate`, `BillingMonthToDate`, `TheLast7Days`, `TheLastMonth`, `TheLastBillingMonth`, `Custom`.
        """
        return pulumi.get(self, "time_frame")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the query. Possible values are `ActualCost`, `AmortizedCost` and `Usage`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class AccountCostManagementExportExportDataStorageLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerId":
            suggest = "container_id"
        elif key == "rootFolderPath":
            suggest = "root_folder_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccountCostManagementExportExportDataStorageLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccountCostManagementExportExportDataStorageLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccountCostManagementExportExportDataStorageLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_id: str,
                 root_folder_path: str):
        """
        :param str container_id: The Resource Manager ID of the container where exports will be uploaded. Changing this forces a new resource to be created.
        :param str root_folder_path: The path of the directory where exports will be uploaded. Changing this forces a new resource to be created.
               
               > **Note:** The Resource Manager ID of a Storage Container is exposed via the `resource_manager_id` attribute of the `storage.Container` resource.
        """
        AccountCostManagementExportExportDataStorageLocation._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            container_id=container_id,
            root_folder_path=root_folder_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             container_id: str,
             root_folder_path: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("container_id", container_id)
        _setter("root_folder_path", root_folder_path)

    @property
    @pulumi.getter(name="containerId")
    def container_id(self) -> str:
        """
        The Resource Manager ID of the container where exports will be uploaded. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "container_id")

    @property
    @pulumi.getter(name="rootFolderPath")
    def root_folder_path(self) -> str:
        """
        The path of the directory where exports will be uploaded. Changing this forces a new resource to be created.

        > **Note:** The Resource Manager ID of a Storage Container is exposed via the `resource_manager_id` attribute of the `storage.Container` resource.
        """
        return pulumi.get(self, "root_folder_path")


