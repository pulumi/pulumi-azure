# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GroupPolicyAssignmentIdentityArgs',
    'GroupPolicyAssignmentIdentityArgsDict',
    'GroupPolicyAssignmentNonComplianceMessageArgs',
    'GroupPolicyAssignmentNonComplianceMessageArgsDict',
    'GroupPolicyAssignmentOverrideArgs',
    'GroupPolicyAssignmentOverrideArgsDict',
    'GroupPolicyAssignmentOverrideSelectorArgs',
    'GroupPolicyAssignmentOverrideSelectorArgsDict',
    'GroupPolicyAssignmentResourceSelectorArgs',
    'GroupPolicyAssignmentResourceSelectorArgsDict',
    'GroupPolicyAssignmentResourceSelectorSelectorArgs',
    'GroupPolicyAssignmentResourceSelectorSelectorArgsDict',
    'GroupPolicySetDefinitionPolicyDefinitionGroupArgs',
    'GroupPolicySetDefinitionPolicyDefinitionGroupArgsDict',
    'GroupPolicySetDefinitionPolicyDefinitionReferenceArgs',
    'GroupPolicySetDefinitionPolicyDefinitionReferenceArgsDict',
]

MYPY = False

if not MYPY:
    class GroupPolicyAssignmentIdentityArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        The Type of Managed Identity which should be added to this Policy Definition. Possible values are `SystemAssigned` and `UserAssigned`.
        """
        identity_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        A list of User Managed Identity IDs which should be assigned to the Policy Definition.

        > **Note:** This is required when `type` is set to `UserAssigned`.
        """
        principal_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Principal ID of the Policy Assignment for this Management Group.
        """
        tenant_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Tenant ID of the Policy Assignment for this Management Group.
        """
elif False:
    GroupPolicyAssignmentIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GroupPolicyAssignmentIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 identity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 principal_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] type: The Type of Managed Identity which should be added to this Policy Definition. Possible values are `SystemAssigned` and `UserAssigned`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] identity_ids: A list of User Managed Identity IDs which should be assigned to the Policy Definition.
               
               > **Note:** This is required when `type` is set to `UserAssigned`.
        :param pulumi.Input[_builtins.str] principal_id: The Principal ID of the Policy Assignment for this Management Group.
        :param pulumi.Input[_builtins.str] tenant_id: The Tenant ID of the Policy Assignment for this Management Group.
        """
        pulumi.set(__self__, "type", type)
        if identity_ids is not None:
            pulumi.set(__self__, "identity_ids", identity_ids)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        The Type of Managed Identity which should be added to this Policy Definition. Possible values are `SystemAssigned` and `UserAssigned`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        A list of User Managed Identity IDs which should be assigned to the Policy Definition.

        > **Note:** This is required when `type` is set to `UserAssigned`.
        """
        return pulumi.get(self, "identity_ids")

    @identity_ids.setter
    def identity_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "identity_ids", value)

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Principal ID of the Policy Assignment for this Management Group.
        """
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "principal_id", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Tenant ID of the Policy Assignment for this Management Group.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)


if not MYPY:
    class GroupPolicyAssignmentNonComplianceMessageArgsDict(TypedDict):
        content: pulumi.Input[_builtins.str]
        """
        The non-compliance message text. When assigning policy sets (initiatives), unless `policy_definition_reference_id` is specified then this message will be the default for all policies.
        """
        policy_definition_reference_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        When assigning policy sets (initiatives), this is the ID of the policy definition that the non-compliance message applies to.
        """
elif False:
    GroupPolicyAssignmentNonComplianceMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GroupPolicyAssignmentNonComplianceMessageArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[_builtins.str],
                 policy_definition_reference_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] content: The non-compliance message text. When assigning policy sets (initiatives), unless `policy_definition_reference_id` is specified then this message will be the default for all policies.
        :param pulumi.Input[_builtins.str] policy_definition_reference_id: When assigning policy sets (initiatives), this is the ID of the policy definition that the non-compliance message applies to.
        """
        pulumi.set(__self__, "content", content)
        if policy_definition_reference_id is not None:
            pulumi.set(__self__, "policy_definition_reference_id", policy_definition_reference_id)

    @_builtins.property
    @pulumi.getter
    def content(self) -> pulumi.Input[_builtins.str]:
        """
        The non-compliance message text. When assigning policy sets (initiatives), unless `policy_definition_reference_id` is specified then this message will be the default for all policies.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter(name="policyDefinitionReferenceId")
    def policy_definition_reference_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        When assigning policy sets (initiatives), this is the ID of the policy definition that the non-compliance message applies to.
        """
        return pulumi.get(self, "policy_definition_reference_id")

    @policy_definition_reference_id.setter
    def policy_definition_reference_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_definition_reference_id", value)


if not MYPY:
    class GroupPolicyAssignmentOverrideArgsDict(TypedDict):
        value: pulumi.Input[_builtins.str]
        """
        Specifies the value to override the policy property. Possible values for `policyEffect` override listed [policy effects](https://learn.microsoft.com/en-us/azure/governance/policy/concepts/effects).
        """
        selectors: NotRequired[pulumi.Input[Sequence[pulumi.Input['GroupPolicyAssignmentOverrideSelectorArgsDict']]]]
        """
        One or more `override_selector` block as defined below.
        """
elif False:
    GroupPolicyAssignmentOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GroupPolicyAssignmentOverrideArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[_builtins.str],
                 selectors: Optional[pulumi.Input[Sequence[pulumi.Input['GroupPolicyAssignmentOverrideSelectorArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] value: Specifies the value to override the policy property. Possible values for `policyEffect` override listed [policy effects](https://learn.microsoft.com/en-us/azure/governance/policy/concepts/effects).
        :param pulumi.Input[Sequence[pulumi.Input['GroupPolicyAssignmentOverrideSelectorArgs']]] selectors: One or more `override_selector` block as defined below.
        """
        pulumi.set(__self__, "value", value)
        if selectors is not None:
            pulumi.set(__self__, "selectors", selectors)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the value to override the policy property. Possible values for `policyEffect` override listed [policy effects](https://learn.microsoft.com/en-us/azure/governance/policy/concepts/effects).
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter
    def selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GroupPolicyAssignmentOverrideSelectorArgs']]]]:
        """
        One or more `override_selector` block as defined below.
        """
        return pulumi.get(self, "selectors")

    @selectors.setter
    def selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GroupPolicyAssignmentOverrideSelectorArgs']]]]):
        pulumi.set(self, "selectors", value)


if not MYPY:
    class GroupPolicyAssignmentOverrideSelectorArgsDict(TypedDict):
        ins: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        kind: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies which characteristic will narrow down the set of evaluated resources. Possible values are `resourceLocation`, `resourceType` and `resourceWithoutLocation`.
        """
        not_ins: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
elif False:
    GroupPolicyAssignmentOverrideSelectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GroupPolicyAssignmentOverrideSelectorArgs:
    def __init__(__self__, *,
                 ins: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 not_ins: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] kind: Specifies which characteristic will narrow down the set of evaluated resources. Possible values are `resourceLocation`, `resourceType` and `resourceWithoutLocation`.
        """
        if ins is not None:
            pulumi.set(__self__, "ins", ins)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if not_ins is not None:
            pulumi.set(__self__, "not_ins", not_ins)

    @_builtins.property
    @pulumi.getter
    def ins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "ins")

    @ins.setter
    def ins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ins", value)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies which characteristic will narrow down the set of evaluated resources. Possible values are `resourceLocation`, `resourceType` and `resourceWithoutLocation`.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kind", value)

    @_builtins.property
    @pulumi.getter(name="notIns")
    def not_ins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "not_ins")

    @not_ins.setter
    def not_ins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "not_ins", value)


if not MYPY:
    class GroupPolicyAssignmentResourceSelectorArgsDict(TypedDict):
        selectors: pulumi.Input[Sequence[pulumi.Input['GroupPolicyAssignmentResourceSelectorSelectorArgsDict']]]
        """
        One or more `resource_selector` block as defined below.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies a name for the resource selector.
        """
elif False:
    GroupPolicyAssignmentResourceSelectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GroupPolicyAssignmentResourceSelectorArgs:
    def __init__(__self__, *,
                 selectors: pulumi.Input[Sequence[pulumi.Input['GroupPolicyAssignmentResourceSelectorSelectorArgs']]],
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['GroupPolicyAssignmentResourceSelectorSelectorArgs']]] selectors: One or more `resource_selector` block as defined below.
        :param pulumi.Input[_builtins.str] name: Specifies a name for the resource selector.
        """
        pulumi.set(__self__, "selectors", selectors)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def selectors(self) -> pulumi.Input[Sequence[pulumi.Input['GroupPolicyAssignmentResourceSelectorSelectorArgs']]]:
        """
        One or more `resource_selector` block as defined below.
        """
        return pulumi.get(self, "selectors")

    @selectors.setter
    def selectors(self, value: pulumi.Input[Sequence[pulumi.Input['GroupPolicyAssignmentResourceSelectorSelectorArgs']]]):
        pulumi.set(self, "selectors", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies a name for the resource selector.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class GroupPolicyAssignmentResourceSelectorSelectorArgsDict(TypedDict):
        kind: pulumi.Input[_builtins.str]
        """
        Specifies which characteristic will narrow down the set of evaluated resources. Possible values are `resourceLocation`, `resourceType` and `resourceWithoutLocation`.
        """
        ins: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        not_ins: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
elif False:
    GroupPolicyAssignmentResourceSelectorSelectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GroupPolicyAssignmentResourceSelectorSelectorArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[_builtins.str],
                 ins: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 not_ins: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] kind: Specifies which characteristic will narrow down the set of evaluated resources. Possible values are `resourceLocation`, `resourceType` and `resourceWithoutLocation`.
        """
        pulumi.set(__self__, "kind", kind)
        if ins is not None:
            pulumi.set(__self__, "ins", ins)
        if not_ins is not None:
            pulumi.set(__self__, "not_ins", not_ins)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies which characteristic will narrow down the set of evaluated resources. Possible values are `resourceLocation`, `resourceType` and `resourceWithoutLocation`.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "kind", value)

    @_builtins.property
    @pulumi.getter
    def ins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "ins")

    @ins.setter
    def ins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ins", value)

    @_builtins.property
    @pulumi.getter(name="notIns")
    def not_ins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "not_ins")

    @not_ins.setter
    def not_ins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "not_ins", value)


if not MYPY:
    class GroupPolicySetDefinitionPolicyDefinitionGroupArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        The name which should be used for this Policy Definition Group.
        """
        additional_metadata_resource_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of a resource that contains additional metadata for this Policy Definition Group.
        """
        category: NotRequired[pulumi.Input[_builtins.str]]
        """
        The category of this Policy Definition Group.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        The description of this Policy Definition Group.
        """
        display_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The display name of this Policy Definition Group.
        """
elif False:
    GroupPolicySetDefinitionPolicyDefinitionGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GroupPolicySetDefinitionPolicyDefinitionGroupArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 additional_metadata_resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 category: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The name which should be used for this Policy Definition Group.
        :param pulumi.Input[_builtins.str] additional_metadata_resource_id: The ID of a resource that contains additional metadata for this Policy Definition Group.
        :param pulumi.Input[_builtins.str] category: The category of this Policy Definition Group.
        :param pulumi.Input[_builtins.str] description: The description of this Policy Definition Group.
        :param pulumi.Input[_builtins.str] display_name: The display name of this Policy Definition Group.
        """
        pulumi.set(__self__, "name", name)
        if additional_metadata_resource_id is not None:
            pulumi.set(__self__, "additional_metadata_resource_id", additional_metadata_resource_id)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The name which should be used for this Policy Definition Group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="additionalMetadataResourceId")
    def additional_metadata_resource_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of a resource that contains additional metadata for this Policy Definition Group.
        """
        return pulumi.get(self, "additional_metadata_resource_id")

    @additional_metadata_resource_id.setter
    def additional_metadata_resource_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "additional_metadata_resource_id", value)

    @_builtins.property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The category of this Policy Definition Group.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "category", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of this Policy Definition Group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The display name of this Policy Definition Group.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "display_name", value)


if not MYPY:
    class GroupPolicySetDefinitionPolicyDefinitionReferenceArgsDict(TypedDict):
        policy_definition_id: pulumi.Input[_builtins.str]
        """
        The ID of the Policy Definition to include in this Policy Set Definition.
        """
        parameter_values: NotRequired[pulumi.Input[_builtins.str]]
        """
        Parameter values for the references Policy Definition in JSON format.
        """
        policy_group_names: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies a list of Policy Definition Groups names that this Policy Definition Reference belongs to.
        """
        reference_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        A unique ID within this Policy Set Definition for this Policy Definition Reference.
        """
        version: NotRequired[pulumi.Input[_builtins.str]]
        """
        The version of the Policy Definition to use.
        """
elif False:
    GroupPolicySetDefinitionPolicyDefinitionReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GroupPolicySetDefinitionPolicyDefinitionReferenceArgs:
    def __init__(__self__, *,
                 policy_definition_id: pulumi.Input[_builtins.str],
                 parameter_values: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_group_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 reference_id: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] policy_definition_id: The ID of the Policy Definition to include in this Policy Set Definition.
        :param pulumi.Input[_builtins.str] parameter_values: Parameter values for the references Policy Definition in JSON format.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] policy_group_names: Specifies a list of Policy Definition Groups names that this Policy Definition Reference belongs to.
        :param pulumi.Input[_builtins.str] reference_id: A unique ID within this Policy Set Definition for this Policy Definition Reference.
        :param pulumi.Input[_builtins.str] version: The version of the Policy Definition to use.
        """
        pulumi.set(__self__, "policy_definition_id", policy_definition_id)
        if parameter_values is not None:
            pulumi.set(__self__, "parameter_values", parameter_values)
        if policy_group_names is not None:
            pulumi.set(__self__, "policy_group_names", policy_group_names)
        if reference_id is not None:
            pulumi.set(__self__, "reference_id", reference_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="policyDefinitionId")
    def policy_definition_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the Policy Definition to include in this Policy Set Definition.
        """
        return pulumi.get(self, "policy_definition_id")

    @policy_definition_id.setter
    def policy_definition_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "policy_definition_id", value)

    @_builtins.property
    @pulumi.getter(name="parameterValues")
    def parameter_values(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Parameter values for the references Policy Definition in JSON format.
        """
        return pulumi.get(self, "parameter_values")

    @parameter_values.setter
    def parameter_values(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parameter_values", value)

    @_builtins.property
    @pulumi.getter(name="policyGroupNames")
    def policy_group_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies a list of Policy Definition Groups names that this Policy Definition Reference belongs to.
        """
        return pulumi.get(self, "policy_group_names")

    @policy_group_names.setter
    def policy_group_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "policy_group_names", value)

    @_builtins.property
    @pulumi.getter(name="referenceId")
    def reference_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A unique ID within this Policy Set Definition for this Policy Definition Reference.
        """
        return pulumi.get(self, "reference_id")

    @reference_id.setter
    def reference_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "reference_id", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The version of the Policy Definition to use.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


