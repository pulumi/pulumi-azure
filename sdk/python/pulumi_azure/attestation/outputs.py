# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ProviderPolicy',
]

@pulumi.output_type
class ProviderPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "environmentType":
            suggest = "environment_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProviderPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProviderPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProviderPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data: Optional[str] = None,
                 environment_type: Optional[str] = None):
        ProviderPolicy._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data=data,
            environment_type=environment_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data: Optional[str] = None,
             environment_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data is not None:
            _setter("data", data)
        if environment_type is not None:
            _setter("environment_type", environment_type)

    @property
    @pulumi.getter
    def data(self) -> Optional[str]:
        return pulumi.get(self, "data")

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> Optional[str]:
        return pulumi.get(self, "environment_type")


