# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GrafanaAzureMonitorWorkspaceIntegrationArgs',
    'GrafanaAzureMonitorWorkspaceIntegrationArgsDict',
    'GrafanaIdentityArgs',
    'GrafanaIdentityArgsDict',
    'GrafanaSmtpArgs',
    'GrafanaSmtpArgsDict',
    'GetGrafanaIdentityArgs',
    'GetGrafanaIdentityArgsDict',
]

MYPY = False

if not MYPY:
    class GrafanaAzureMonitorWorkspaceIntegrationArgsDict(TypedDict):
        resource_id: pulumi.Input[_builtins.str]
        """
        Specifies the resource ID of the connected Azure Monitor Workspace.
        """
elif False:
    GrafanaAzureMonitorWorkspaceIntegrationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GrafanaAzureMonitorWorkspaceIntegrationArgs:
    def __init__(__self__, *,
                 resource_id: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] resource_id: Specifies the resource ID of the connected Azure Monitor Workspace.
        """
        pulumi.set(__self__, "resource_id", resource_id)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the resource ID of the connected Azure Monitor Workspace.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_id", value)


if not MYPY:
    class GrafanaIdentityArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Specifies the type of Managed Service Identity. Possible values are `SystemAssigned`, `UserAssigned`. Changing this forces a new resource to be created.
        """
        identity_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the list of User Assigned Managed Service Identity IDs which should be assigned to this Dashboard Grafana. Changing this forces a new resource to be created.
        """
        principal_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Principal ID associated with this Managed Service Identity.
        """
        tenant_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Tenant ID associated with this Managed Service Identity.
        """
elif False:
    GrafanaIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GrafanaIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 identity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 principal_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Specifies the type of Managed Service Identity. Possible values are `SystemAssigned`, `UserAssigned`. Changing this forces a new resource to be created.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] identity_ids: Specifies the list of User Assigned Managed Service Identity IDs which should be assigned to this Dashboard Grafana. Changing this forces a new resource to be created.
        :param pulumi.Input[_builtins.str] principal_id: The Principal ID associated with this Managed Service Identity.
        :param pulumi.Input[_builtins.str] tenant_id: The Tenant ID associated with this Managed Service Identity.
        """
        pulumi.set(__self__, "type", type)
        if identity_ids is not None:
            pulumi.set(__self__, "identity_ids", identity_ids)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the type of Managed Service Identity. Possible values are `SystemAssigned`, `UserAssigned`. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of User Assigned Managed Service Identity IDs which should be assigned to this Dashboard Grafana. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "identity_ids")

    @identity_ids.setter
    def identity_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "identity_ids", value)

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Principal ID associated with this Managed Service Identity.
        """
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "principal_id", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Tenant ID associated with this Managed Service Identity.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)


if not MYPY:
    class GrafanaSmtpArgsDict(TypedDict):
        from_address: pulumi.Input[_builtins.str]
        """
        Address used when sending emails.
        """
        host: pulumi.Input[_builtins.str]
        """
        SMTP server hostname with port, e.g. test.email.net:587
        """
        password: pulumi.Input[_builtins.str]
        """
        Password of SMTP authentication.
        """
        start_tls_policy: pulumi.Input[_builtins.str]
        """
        Whether to use TLS when connecting to SMTP server. Possible values are `OpportunisticStartTLS`, `NoStartTLS`, `MandatoryStartTLS`.
        """
        user: pulumi.Input[_builtins.str]
        """
        User of SMTP authentication.
        """
        enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether to enable the smtp setting of the Grafana instance. Defaults to `false`.
        """
        from_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name used when sending emails. Defaults to `Azure Managed Grafana Notification`.
        """
        verification_skip_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether verify SSL for SMTP server. Defaults to `false`.
        """
elif False:
    GrafanaSmtpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GrafanaSmtpArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[_builtins.str],
                 host: pulumi.Input[_builtins.str],
                 password: pulumi.Input[_builtins.str],
                 start_tls_policy: pulumi.Input[_builtins.str],
                 user: pulumi.Input[_builtins.str],
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 from_name: Optional[pulumi.Input[_builtins.str]] = None,
                 verification_skip_enabled: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] from_address: Address used when sending emails.
        :param pulumi.Input[_builtins.str] host: SMTP server hostname with port, e.g. test.email.net:587
        :param pulumi.Input[_builtins.str] password: Password of SMTP authentication.
        :param pulumi.Input[_builtins.str] start_tls_policy: Whether to use TLS when connecting to SMTP server. Possible values are `OpportunisticStartTLS`, `NoStartTLS`, `MandatoryStartTLS`.
        :param pulumi.Input[_builtins.str] user: User of SMTP authentication.
        :param pulumi.Input[_builtins.bool] enabled: Whether to enable the smtp setting of the Grafana instance. Defaults to `false`.
        :param pulumi.Input[_builtins.str] from_name: Name used when sending emails. Defaults to `Azure Managed Grafana Notification`.
        :param pulumi.Input[_builtins.bool] verification_skip_enabled: Whether verify SSL for SMTP server. Defaults to `false`.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "start_tls_policy", start_tls_policy)
        pulumi.set(__self__, "user", user)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if from_name is not None:
            pulumi.set(__self__, "from_name", from_name)
        if verification_skip_enabled is not None:
            pulumi.set(__self__, "verification_skip_enabled", verification_skip_enabled)

    @_builtins.property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[_builtins.str]:
        """
        Address used when sending emails.
        """
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "from_address", value)

    @_builtins.property
    @pulumi.getter
    def host(self) -> pulumi.Input[_builtins.str]:
        """
        SMTP server hostname with port, e.g. test.email.net:587
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Input[_builtins.str]:
        """
        Password of SMTP authentication.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter(name="startTlsPolicy")
    def start_tls_policy(self) -> pulumi.Input[_builtins.str]:
        """
        Whether to use TLS when connecting to SMTP server. Possible values are `OpportunisticStartTLS`, `NoStartTLS`, `MandatoryStartTLS`.
        """
        return pulumi.get(self, "start_tls_policy")

    @start_tls_policy.setter
    def start_tls_policy(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "start_tls_policy", value)

    @_builtins.property
    @pulumi.getter
    def user(self) -> pulumi.Input[_builtins.str]:
        """
        User of SMTP authentication.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "user", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to enable the smtp setting of the Grafana instance. Defaults to `false`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="fromName")
    def from_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name used when sending emails. Defaults to `Azure Managed Grafana Notification`.
        """
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "from_name", value)

    @_builtins.property
    @pulumi.getter(name="verificationSkipEnabled")
    def verification_skip_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether verify SSL for SMTP server. Defaults to `false`.
        """
        return pulumi.get(self, "verification_skip_enabled")

    @verification_skip_enabled.setter
    def verification_skip_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "verification_skip_enabled", value)


if not MYPY:
    class GetGrafanaIdentityArgsDict(TypedDict):
        principal_id: _builtins.str
        tenant_id: _builtins.str
        type: _builtins.str
        identity_ids: NotRequired[Sequence[_builtins.str]]
elif False:
    GetGrafanaIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGrafanaIdentityArgs:
    def __init__(__self__, *,
                 principal_id: _builtins.str,
                 tenant_id: _builtins.str,
                 type: _builtins.str,
                 identity_ids: Optional[Sequence[_builtins.str]] = None):
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)
        if identity_ids is not None:
            pulumi.set(__self__, "identity_ids", identity_ids)

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> _builtins.str:
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: _builtins.str):
        pulumi.set(self, "principal_id", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: _builtins.str):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: _builtins.str):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "identity_ids")

    @identity_ids.setter
    def identity_ids(self, value: Optional[Sequence[_builtins.str]]):
        pulumi.set(self, "identity_ids", value)


