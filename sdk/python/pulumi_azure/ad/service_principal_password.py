# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class ServicePrincipalPassword(pulumi.CustomResource):
    """
    Manages a Password associated with a Service Principal within Azure Active Directory.
    
    -> **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write all applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API.
    """
    def __init__(__self__, __name__, __opts__=None, end_date=None, key_id=None, service_principal_id=None, start_date=None, value=None):
        """Create a ServicePrincipalPassword resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not end_date:
            raise TypeError('Missing required property end_date')
        elif not isinstance(end_date, basestring):
            raise TypeError('Expected property end_date to be a basestring')
        __self__.end_date = end_date
        """
        The End Date which the Password is valid until, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Changing this field forces a new resource to be created.
        """
        __props__['endDate'] = end_date

        if key_id and not isinstance(key_id, basestring):
            raise TypeError('Expected property key_id to be a basestring')
        __self__.key_id = key_id
        """
        A GUID used to uniquely identify this Key. If not specified a GUID will be created. Changing this field forces a new resource to be created.
        """
        __props__['keyId'] = key_id

        if not service_principal_id:
            raise TypeError('Missing required property service_principal_id')
        elif not isinstance(service_principal_id, basestring):
            raise TypeError('Expected property service_principal_id to be a basestring')
        __self__.service_principal_id = service_principal_id
        """
        The ID of the Service Principal for which this password should be created. Changing this field forces a new resource to be created.
        """
        __props__['servicePrincipalId'] = service_principal_id

        if start_date and not isinstance(start_date, basestring):
            raise TypeError('Expected property start_date to be a basestring')
        __self__.start_date = start_date
        """
        The Start Date which the Password is valid from, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the current date is used.  Changing this field forces a new resource to be created.
        """
        __props__['startDate'] = start_date

        if not value:
            raise TypeError('Missing required property value')
        elif not isinstance(value, basestring):
            raise TypeError('Expected property value to be a basestring')
        __self__.value = value
        """
        The Password for this Service Principal.
        """
        __props__['value'] = value

        super(ServicePrincipalPassword, __self__).__init__(
            'azure:ad/servicePrincipalPassword:ServicePrincipalPassword',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'endDate' in outs:
            self.end_date = outs['endDate']
        if 'keyId' in outs:
            self.key_id = outs['keyId']
        if 'servicePrincipalId' in outs:
            self.service_principal_id = outs['servicePrincipalId']
        if 'startDate' in outs:
            self.start_date = outs['startDate']
        if 'value' in outs:
            self.value = outs['value']
