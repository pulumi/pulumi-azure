# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class ServicePrincipal(pulumi.CustomResource):
    """
    Manages a Service Principal associated with an Application within Azure Active Directory.
    
    -> **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write all applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API.
    """
    def __init__(__self__, __name__, __opts__=None, application_id=None):
        """Create a ServicePrincipal resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not application_id:
            raise TypeError('Missing required property application_id')
        elif not isinstance(application_id, basestring):
            raise TypeError('Expected property application_id to be a basestring')
        __self__.application_id = application_id
        """
        The ID of the Azure AD Application for which to create a Service Principal.
        """
        __props__['applicationId'] = application_id

        __self__.display_name = pulumi.runtime.UNKNOWN
        """
        The Display Name of the Azure Active Directory Application associated with this Service Principal.
        """

        super(ServicePrincipal, __self__).__init__(
            'azure:ad/servicePrincipal:ServicePrincipal',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'applicationId' in outs:
            self.application_id = outs['applicationId']
        if 'displayName' in outs:
            self.display_name = outs['displayName']
