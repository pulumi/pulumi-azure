# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DeploymentArgs', 'Deployment']

@pulumi.input_type
class DeploymentArgs:
    def __init__(__self__, *,
                 resource_group_name: pulumi.Input[str],
                 sku: pulumi.Input[str],
                 diagnose_support_enabled: Optional[pulumi.Input[bool]] = None,
                 frontend_privates: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentFrontendPrivateArgs']]]] = None,
                 frontend_public: Optional[pulumi.Input['DeploymentFrontendPublicArgs']] = None,
                 identity: Optional[pulumi.Input['DeploymentIdentityArgs']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 logging_storage_accounts: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentLoggingStorageAccountArgs']]]] = None,
                 managed_resource_group: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentNetworkInterfaceArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Deployment resource.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group where the Nginx Deployment should exist. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input[str] sku: Specify the Name of Nginx deployment SKU. The possible value is `publicpreview_Monthly_gmz7xq9ge3py`.
        :param pulumi.Input[bool] diagnose_support_enabled: Should the diagnosis support be enabled?
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentFrontendPrivateArgs']]] frontend_privates: One or more `frontend_private` blocks as defined below. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input['DeploymentFrontendPublicArgs'] frontend_public: A `frontend_public` block as defined below. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input['DeploymentIdentityArgs'] identity: An `identity` block as defined below.
        :param pulumi.Input[str] location: The Azure Region where the Nginx Deployment should exist. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentLoggingStorageAccountArgs']]] logging_storage_accounts: One or more `logging_storage_account` blocks as defined below.
        :param pulumi.Input[str] managed_resource_group: Specify the managed resource group to deploy VNet injection related network resources. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input[str] name: The name which should be used for this Nginx Deployment. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentNetworkInterfaceArgs']]] network_interfaces: One or more `network_interface` blocks as defined below. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags which should be assigned to the Nginx Deployment.
        """
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "sku", sku)
        if diagnose_support_enabled is not None:
            pulumi.set(__self__, "diagnose_support_enabled", diagnose_support_enabled)
        if frontend_privates is not None:
            pulumi.set(__self__, "frontend_privates", frontend_privates)
        if frontend_public is not None:
            pulumi.set(__self__, "frontend_public", frontend_public)
        if identity is not None:
            pulumi.set(__self__, "identity", identity)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if logging_storage_accounts is not None:
            pulumi.set(__self__, "logging_storage_accounts", logging_storage_accounts)
        if managed_resource_group is not None:
            pulumi.set(__self__, "managed_resource_group", managed_resource_group)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the Resource Group where the Nginx Deployment should exist. Changing this forces a new Nginx Deployment to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter
    def sku(self) -> pulumi.Input[str]:
        """
        Specify the Name of Nginx deployment SKU. The possible value is `publicpreview_Monthly_gmz7xq9ge3py`.
        """
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: pulumi.Input[str]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter(name="diagnoseSupportEnabled")
    def diagnose_support_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Should the diagnosis support be enabled?
        """
        return pulumi.get(self, "diagnose_support_enabled")

    @diagnose_support_enabled.setter
    def diagnose_support_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "diagnose_support_enabled", value)

    @property
    @pulumi.getter(name="frontendPrivates")
    def frontend_privates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentFrontendPrivateArgs']]]]:
        """
        One or more `frontend_private` blocks as defined below. Changing this forces a new Nginx Deployment to be created.
        """
        return pulumi.get(self, "frontend_privates")

    @frontend_privates.setter
    def frontend_privates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentFrontendPrivateArgs']]]]):
        pulumi.set(self, "frontend_privates", value)

    @property
    @pulumi.getter(name="frontendPublic")
    def frontend_public(self) -> Optional[pulumi.Input['DeploymentFrontendPublicArgs']]:
        """
        A `frontend_public` block as defined below. Changing this forces a new Nginx Deployment to be created.
        """
        return pulumi.get(self, "frontend_public")

    @frontend_public.setter
    def frontend_public(self, value: Optional[pulumi.Input['DeploymentFrontendPublicArgs']]):
        pulumi.set(self, "frontend_public", value)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input['DeploymentIdentityArgs']]:
        """
        An `identity` block as defined below.
        """
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input['DeploymentIdentityArgs']]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The Azure Region where the Nginx Deployment should exist. Changing this forces a new Nginx Deployment to be created.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="loggingStorageAccounts")
    def logging_storage_accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentLoggingStorageAccountArgs']]]]:
        """
        One or more `logging_storage_account` blocks as defined below.
        """
        return pulumi.get(self, "logging_storage_accounts")

    @logging_storage_accounts.setter
    def logging_storage_accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentLoggingStorageAccountArgs']]]]):
        pulumi.set(self, "logging_storage_accounts", value)

    @property
    @pulumi.getter(name="managedResourceGroup")
    def managed_resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the managed resource group to deploy VNet injection related network resources. Changing this forces a new Nginx Deployment to be created.
        """
        return pulumi.get(self, "managed_resource_group")

    @managed_resource_group.setter
    def managed_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "managed_resource_group", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name which should be used for this Nginx Deployment. Changing this forces a new Nginx Deployment to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentNetworkInterfaceArgs']]]]:
        """
        One or more `network_interface` blocks as defined below. Changing this forces a new Nginx Deployment to be created.
        """
        return pulumi.get(self, "network_interfaces")

    @network_interfaces.setter
    def network_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentNetworkInterfaceArgs']]]]):
        pulumi.set(self, "network_interfaces", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A mapping of tags which should be assigned to the Nginx Deployment.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _DeploymentState:
    def __init__(__self__, *,
                 diagnose_support_enabled: Optional[pulumi.Input[bool]] = None,
                 frontend_privates: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentFrontendPrivateArgs']]]] = None,
                 frontend_public: Optional[pulumi.Input['DeploymentFrontendPublicArgs']] = None,
                 identity: Optional[pulumi.Input['DeploymentIdentityArgs']] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 logging_storage_accounts: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentLoggingStorageAccountArgs']]]] = None,
                 managed_resource_group: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentNetworkInterfaceArgs']]]] = None,
                 nginx_version: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 sku: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering Deployment resources.
        :param pulumi.Input[bool] diagnose_support_enabled: Should the diagnosis support be enabled?
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentFrontendPrivateArgs']]] frontend_privates: One or more `frontend_private` blocks as defined below. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input['DeploymentFrontendPublicArgs'] frontend_public: A `frontend_public` block as defined below. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input['DeploymentIdentityArgs'] identity: An `identity` block as defined below.
        :param pulumi.Input[str] ip_address: Specify the IP Address of this private IP.
        :param pulumi.Input[str] location: The Azure Region where the Nginx Deployment should exist. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentLoggingStorageAccountArgs']]] logging_storage_accounts: One or more `logging_storage_account` blocks as defined below.
        :param pulumi.Input[str] managed_resource_group: Specify the managed resource group to deploy VNet injection related network resources. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input[str] name: The name which should be used for this Nginx Deployment. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentNetworkInterfaceArgs']]] network_interfaces: One or more `network_interface` blocks as defined below. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input[str] nginx_version: The version of deployed nginx.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group where the Nginx Deployment should exist. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input[str] sku: Specify the Name of Nginx deployment SKU. The possible value is `publicpreview_Monthly_gmz7xq9ge3py`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags which should be assigned to the Nginx Deployment.
        """
        if diagnose_support_enabled is not None:
            pulumi.set(__self__, "diagnose_support_enabled", diagnose_support_enabled)
        if frontend_privates is not None:
            pulumi.set(__self__, "frontend_privates", frontend_privates)
        if frontend_public is not None:
            pulumi.set(__self__, "frontend_public", frontend_public)
        if identity is not None:
            pulumi.set(__self__, "identity", identity)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if logging_storage_accounts is not None:
            pulumi.set(__self__, "logging_storage_accounts", logging_storage_accounts)
        if managed_resource_group is not None:
            pulumi.set(__self__, "managed_resource_group", managed_resource_group)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if nginx_version is not None:
            pulumi.set(__self__, "nginx_version", nginx_version)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="diagnoseSupportEnabled")
    def diagnose_support_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Should the diagnosis support be enabled?
        """
        return pulumi.get(self, "diagnose_support_enabled")

    @diagnose_support_enabled.setter
    def diagnose_support_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "diagnose_support_enabled", value)

    @property
    @pulumi.getter(name="frontendPrivates")
    def frontend_privates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentFrontendPrivateArgs']]]]:
        """
        One or more `frontend_private` blocks as defined below. Changing this forces a new Nginx Deployment to be created.
        """
        return pulumi.get(self, "frontend_privates")

    @frontend_privates.setter
    def frontend_privates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentFrontendPrivateArgs']]]]):
        pulumi.set(self, "frontend_privates", value)

    @property
    @pulumi.getter(name="frontendPublic")
    def frontend_public(self) -> Optional[pulumi.Input['DeploymentFrontendPublicArgs']]:
        """
        A `frontend_public` block as defined below. Changing this forces a new Nginx Deployment to be created.
        """
        return pulumi.get(self, "frontend_public")

    @frontend_public.setter
    def frontend_public(self, value: Optional[pulumi.Input['DeploymentFrontendPublicArgs']]):
        pulumi.set(self, "frontend_public", value)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input['DeploymentIdentityArgs']]:
        """
        An `identity` block as defined below.
        """
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input['DeploymentIdentityArgs']]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the IP Address of this private IP.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The Azure Region where the Nginx Deployment should exist. Changing this forces a new Nginx Deployment to be created.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="loggingStorageAccounts")
    def logging_storage_accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentLoggingStorageAccountArgs']]]]:
        """
        One or more `logging_storage_account` blocks as defined below.
        """
        return pulumi.get(self, "logging_storage_accounts")

    @logging_storage_accounts.setter
    def logging_storage_accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentLoggingStorageAccountArgs']]]]):
        pulumi.set(self, "logging_storage_accounts", value)

    @property
    @pulumi.getter(name="managedResourceGroup")
    def managed_resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the managed resource group to deploy VNet injection related network resources. Changing this forces a new Nginx Deployment to be created.
        """
        return pulumi.get(self, "managed_resource_group")

    @managed_resource_group.setter
    def managed_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "managed_resource_group", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name which should be used for this Nginx Deployment. Changing this forces a new Nginx Deployment to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentNetworkInterfaceArgs']]]]:
        """
        One or more `network_interface` blocks as defined below. Changing this forces a new Nginx Deployment to be created.
        """
        return pulumi.get(self, "network_interfaces")

    @network_interfaces.setter
    def network_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentNetworkInterfaceArgs']]]]):
        pulumi.set(self, "network_interfaces", value)

    @property
    @pulumi.getter(name="nginxVersion")
    def nginx_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of deployed nginx.
        """
        return pulumi.get(self, "nginx_version")

    @nginx_version.setter
    def nginx_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nginx_version", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Resource Group where the Nginx Deployment should exist. Changing this forces a new Nginx Deployment to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter
    def sku(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the Name of Nginx deployment SKU. The possible value is `publicpreview_Monthly_gmz7xq9ge3py`.
        """
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A mapping of tags which should be assigned to the Nginx Deployment.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


class Deployment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 diagnose_support_enabled: Optional[pulumi.Input[bool]] = None,
                 frontend_privates: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentFrontendPrivateArgs']]]]] = None,
                 frontend_public: Optional[pulumi.Input[pulumi.InputType['DeploymentFrontendPublicArgs']]] = None,
                 identity: Optional[pulumi.Input[pulumi.InputType['DeploymentIdentityArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 logging_storage_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentLoggingStorageAccountArgs']]]]] = None,
                 managed_resource_group: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentNetworkInterfaceArgs']]]]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 sku: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Manages a Nginx Deployment.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example = azure.nginx.Deployment("example",
            resource_group_name=azurerm_resource_group["test"]["name"],
            sku="publicpreview_Monthly_gmz7xq9ge3py",
            location=azurerm_resource_group["test"]["location"],
            managed_resource_group="example",
            diagnose_support_enabled=True,
            frontend_public=azure.nginx.DeploymentFrontendPublicArgs(
                ip_addresses=[azurerm_public_ip["test"]["id"]],
            ),
            network_interfaces=[azure.nginx.DeploymentNetworkInterfaceArgs(
                subnet_id=azurerm_subnet["test"]["id"],
            )],
            tags={
                "foo": "bar",
            })
        ```

        ## Import

        Nginx Deployments can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:nginx/deployment:Deployment example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Nginx.NginxPlus/nginxDeployments/dep1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] diagnose_support_enabled: Should the diagnosis support be enabled?
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentFrontendPrivateArgs']]]] frontend_privates: One or more `frontend_private` blocks as defined below. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input[pulumi.InputType['DeploymentFrontendPublicArgs']] frontend_public: A `frontend_public` block as defined below. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input[pulumi.InputType['DeploymentIdentityArgs']] identity: An `identity` block as defined below.
        :param pulumi.Input[str] location: The Azure Region where the Nginx Deployment should exist. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentLoggingStorageAccountArgs']]]] logging_storage_accounts: One or more `logging_storage_account` blocks as defined below.
        :param pulumi.Input[str] managed_resource_group: Specify the managed resource group to deploy VNet injection related network resources. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input[str] name: The name which should be used for this Nginx Deployment. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentNetworkInterfaceArgs']]]] network_interfaces: One or more `network_interface` blocks as defined below. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group where the Nginx Deployment should exist. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input[str] sku: Specify the Name of Nginx deployment SKU. The possible value is `publicpreview_Monthly_gmz7xq9ge3py`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags which should be assigned to the Nginx Deployment.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeploymentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Nginx Deployment.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example = azure.nginx.Deployment("example",
            resource_group_name=azurerm_resource_group["test"]["name"],
            sku="publicpreview_Monthly_gmz7xq9ge3py",
            location=azurerm_resource_group["test"]["location"],
            managed_resource_group="example",
            diagnose_support_enabled=True,
            frontend_public=azure.nginx.DeploymentFrontendPublicArgs(
                ip_addresses=[azurerm_public_ip["test"]["id"]],
            ),
            network_interfaces=[azure.nginx.DeploymentNetworkInterfaceArgs(
                subnet_id=azurerm_subnet["test"]["id"],
            )],
            tags={
                "foo": "bar",
            })
        ```

        ## Import

        Nginx Deployments can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:nginx/deployment:Deployment example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Nginx.NginxPlus/nginxDeployments/dep1
        ```

        :param str resource_name: The name of the resource.
        :param DeploymentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeploymentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 diagnose_support_enabled: Optional[pulumi.Input[bool]] = None,
                 frontend_privates: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentFrontendPrivateArgs']]]]] = None,
                 frontend_public: Optional[pulumi.Input[pulumi.InputType['DeploymentFrontendPublicArgs']]] = None,
                 identity: Optional[pulumi.Input[pulumi.InputType['DeploymentIdentityArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 logging_storage_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentLoggingStorageAccountArgs']]]]] = None,
                 managed_resource_group: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentNetworkInterfaceArgs']]]]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 sku: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeploymentArgs.__new__(DeploymentArgs)

            __props__.__dict__["diagnose_support_enabled"] = diagnose_support_enabled
            __props__.__dict__["frontend_privates"] = frontend_privates
            __props__.__dict__["frontend_public"] = frontend_public
            __props__.__dict__["identity"] = identity
            __props__.__dict__["location"] = location
            __props__.__dict__["logging_storage_accounts"] = logging_storage_accounts
            __props__.__dict__["managed_resource_group"] = managed_resource_group
            __props__.__dict__["name"] = name
            __props__.__dict__["network_interfaces"] = network_interfaces
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            if sku is None and not opts.urn:
                raise TypeError("Missing required property 'sku'")
            __props__.__dict__["sku"] = sku
            __props__.__dict__["tags"] = tags
            __props__.__dict__["ip_address"] = None
            __props__.__dict__["nginx_version"] = None
        super(Deployment, __self__).__init__(
            'azure:nginx/deployment:Deployment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            diagnose_support_enabled: Optional[pulumi.Input[bool]] = None,
            frontend_privates: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentFrontendPrivateArgs']]]]] = None,
            frontend_public: Optional[pulumi.Input[pulumi.InputType['DeploymentFrontendPublicArgs']]] = None,
            identity: Optional[pulumi.Input[pulumi.InputType['DeploymentIdentityArgs']]] = None,
            ip_address: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            logging_storage_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentLoggingStorageAccountArgs']]]]] = None,
            managed_resource_group: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentNetworkInterfaceArgs']]]]] = None,
            nginx_version: Optional[pulumi.Input[str]] = None,
            resource_group_name: Optional[pulumi.Input[str]] = None,
            sku: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None) -> 'Deployment':
        """
        Get an existing Deployment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] diagnose_support_enabled: Should the diagnosis support be enabled?
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentFrontendPrivateArgs']]]] frontend_privates: One or more `frontend_private` blocks as defined below. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input[pulumi.InputType['DeploymentFrontendPublicArgs']] frontend_public: A `frontend_public` block as defined below. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input[pulumi.InputType['DeploymentIdentityArgs']] identity: An `identity` block as defined below.
        :param pulumi.Input[str] ip_address: Specify the IP Address of this private IP.
        :param pulumi.Input[str] location: The Azure Region where the Nginx Deployment should exist. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentLoggingStorageAccountArgs']]]] logging_storage_accounts: One or more `logging_storage_account` blocks as defined below.
        :param pulumi.Input[str] managed_resource_group: Specify the managed resource group to deploy VNet injection related network resources. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input[str] name: The name which should be used for this Nginx Deployment. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentNetworkInterfaceArgs']]]] network_interfaces: One or more `network_interface` blocks as defined below. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input[str] nginx_version: The version of deployed nginx.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group where the Nginx Deployment should exist. Changing this forces a new Nginx Deployment to be created.
        :param pulumi.Input[str] sku: Specify the Name of Nginx deployment SKU. The possible value is `publicpreview_Monthly_gmz7xq9ge3py`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags which should be assigned to the Nginx Deployment.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeploymentState.__new__(_DeploymentState)

        __props__.__dict__["diagnose_support_enabled"] = diagnose_support_enabled
        __props__.__dict__["frontend_privates"] = frontend_privates
        __props__.__dict__["frontend_public"] = frontend_public
        __props__.__dict__["identity"] = identity
        __props__.__dict__["ip_address"] = ip_address
        __props__.__dict__["location"] = location
        __props__.__dict__["logging_storage_accounts"] = logging_storage_accounts
        __props__.__dict__["managed_resource_group"] = managed_resource_group
        __props__.__dict__["name"] = name
        __props__.__dict__["network_interfaces"] = network_interfaces
        __props__.__dict__["nginx_version"] = nginx_version
        __props__.__dict__["resource_group_name"] = resource_group_name
        __props__.__dict__["sku"] = sku
        __props__.__dict__["tags"] = tags
        return Deployment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="diagnoseSupportEnabled")
    def diagnose_support_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Should the diagnosis support be enabled?
        """
        return pulumi.get(self, "diagnose_support_enabled")

    @property
    @pulumi.getter(name="frontendPrivates")
    def frontend_privates(self) -> pulumi.Output[Optional[Sequence['outputs.DeploymentFrontendPrivate']]]:
        """
        One or more `frontend_private` blocks as defined below. Changing this forces a new Nginx Deployment to be created.
        """
        return pulumi.get(self, "frontend_privates")

    @property
    @pulumi.getter(name="frontendPublic")
    def frontend_public(self) -> pulumi.Output[Optional['outputs.DeploymentFrontendPublic']]:
        """
        A `frontend_public` block as defined below. Changing this forces a new Nginx Deployment to be created.
        """
        return pulumi.get(self, "frontend_public")

    @property
    @pulumi.getter
    def identity(self) -> pulumi.Output[Optional['outputs.DeploymentIdentity']]:
        """
        An `identity` block as defined below.
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Output[str]:
        """
        Specify the IP Address of this private IP.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The Azure Region where the Nginx Deployment should exist. Changing this forces a new Nginx Deployment to be created.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="loggingStorageAccounts")
    def logging_storage_accounts(self) -> pulumi.Output[Optional[Sequence['outputs.DeploymentLoggingStorageAccount']]]:
        """
        One or more `logging_storage_account` blocks as defined below.
        """
        return pulumi.get(self, "logging_storage_accounts")

    @property
    @pulumi.getter(name="managedResourceGroup")
    def managed_resource_group(self) -> pulumi.Output[str]:
        """
        Specify the managed resource group to deploy VNet injection related network resources. Changing this forces a new Nginx Deployment to be created.
        """
        return pulumi.get(self, "managed_resource_group")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name which should be used for this Nginx Deployment. Changing this forces a new Nginx Deployment to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.DeploymentNetworkInterface']]]:
        """
        One or more `network_interface` blocks as defined below. Changing this forces a new Nginx Deployment to be created.
        """
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter(name="nginxVersion")
    def nginx_version(self) -> pulumi.Output[str]:
        """
        The version of deployed nginx.
        """
        return pulumi.get(self, "nginx_version")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[str]:
        """
        The name of the Resource Group where the Nginx Deployment should exist. Changing this forces a new Nginx Deployment to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter
    def sku(self) -> pulumi.Output[str]:
        """
        Specify the Name of Nginx deployment SKU. The possible value is `publicpreview_Monthly_gmz7xq9ge3py`.
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A mapping of tags which should be assigned to the Nginx Deployment.
        """
        return pulumi.get(self, "tags")

