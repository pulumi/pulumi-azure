# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['CertificateArgs', 'Certificate']

@pulumi.input_type
class CertificateArgs:
    def __init__(__self__, *,
                 certificate_virtual_path: pulumi.Input[str],
                 key_vault_secret_id: pulumi.Input[str],
                 key_virtual_path: pulumi.Input[str],
                 nginx_deployment_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Certificate resource.
        :param pulumi.Input[str] certificate_virtual_path: Specify the path to the cert file of this certificate.
        :param pulumi.Input[str] key_vault_secret_id: Specify the ID of the Key Vault Secret for this certificate.
        :param pulumi.Input[str] key_virtual_path: Specify the path to the key file of this certificate.
        :param pulumi.Input[str] nginx_deployment_id: The ID of the Nginx Deployment that this Certificate should be associated with. Changing this forces a new Nginx Certificate to be created.
        :param pulumi.Input[str] name: The name which should be used for this Nginx Certificate. Changing this forces a new Nginx Certificate to be created.
        """
        pulumi.set(__self__, "certificate_virtual_path", certificate_virtual_path)
        pulumi.set(__self__, "key_vault_secret_id", key_vault_secret_id)
        pulumi.set(__self__, "key_virtual_path", key_virtual_path)
        pulumi.set(__self__, "nginx_deployment_id", nginx_deployment_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="certificateVirtualPath")
    def certificate_virtual_path(self) -> pulumi.Input[str]:
        """
        Specify the path to the cert file of this certificate.
        """
        return pulumi.get(self, "certificate_virtual_path")

    @certificate_virtual_path.setter
    def certificate_virtual_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate_virtual_path", value)

    @property
    @pulumi.getter(name="keyVaultSecretId")
    def key_vault_secret_id(self) -> pulumi.Input[str]:
        """
        Specify the ID of the Key Vault Secret for this certificate.
        """
        return pulumi.get(self, "key_vault_secret_id")

    @key_vault_secret_id.setter
    def key_vault_secret_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_vault_secret_id", value)

    @property
    @pulumi.getter(name="keyVirtualPath")
    def key_virtual_path(self) -> pulumi.Input[str]:
        """
        Specify the path to the key file of this certificate.
        """
        return pulumi.get(self, "key_virtual_path")

    @key_virtual_path.setter
    def key_virtual_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_virtual_path", value)

    @property
    @pulumi.getter(name="nginxDeploymentId")
    def nginx_deployment_id(self) -> pulumi.Input[str]:
        """
        The ID of the Nginx Deployment that this Certificate should be associated with. Changing this forces a new Nginx Certificate to be created.
        """
        return pulumi.get(self, "nginx_deployment_id")

    @nginx_deployment_id.setter
    def nginx_deployment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "nginx_deployment_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name which should be used for this Nginx Certificate. Changing this forces a new Nginx Certificate to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _CertificateState:
    def __init__(__self__, *,
                 certificate_virtual_path: Optional[pulumi.Input[str]] = None,
                 key_vault_secret_id: Optional[pulumi.Input[str]] = None,
                 key_virtual_path: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nginx_deployment_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Certificate resources.
        :param pulumi.Input[str] certificate_virtual_path: Specify the path to the cert file of this certificate.
        :param pulumi.Input[str] key_vault_secret_id: Specify the ID of the Key Vault Secret for this certificate.
        :param pulumi.Input[str] key_virtual_path: Specify the path to the key file of this certificate.
        :param pulumi.Input[str] name: The name which should be used for this Nginx Certificate. Changing this forces a new Nginx Certificate to be created.
        :param pulumi.Input[str] nginx_deployment_id: The ID of the Nginx Deployment that this Certificate should be associated with. Changing this forces a new Nginx Certificate to be created.
        """
        if certificate_virtual_path is not None:
            pulumi.set(__self__, "certificate_virtual_path", certificate_virtual_path)
        if key_vault_secret_id is not None:
            pulumi.set(__self__, "key_vault_secret_id", key_vault_secret_id)
        if key_virtual_path is not None:
            pulumi.set(__self__, "key_virtual_path", key_virtual_path)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nginx_deployment_id is not None:
            pulumi.set(__self__, "nginx_deployment_id", nginx_deployment_id)

    @property
    @pulumi.getter(name="certificateVirtualPath")
    def certificate_virtual_path(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the path to the cert file of this certificate.
        """
        return pulumi.get(self, "certificate_virtual_path")

    @certificate_virtual_path.setter
    def certificate_virtual_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_virtual_path", value)

    @property
    @pulumi.getter(name="keyVaultSecretId")
    def key_vault_secret_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the ID of the Key Vault Secret for this certificate.
        """
        return pulumi.get(self, "key_vault_secret_id")

    @key_vault_secret_id.setter
    def key_vault_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_secret_id", value)

    @property
    @pulumi.getter(name="keyVirtualPath")
    def key_virtual_path(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the path to the key file of this certificate.
        """
        return pulumi.get(self, "key_virtual_path")

    @key_virtual_path.setter
    def key_virtual_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_virtual_path", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name which should be used for this Nginx Certificate. Changing this forces a new Nginx Certificate to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nginxDeploymentId")
    def nginx_deployment_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Nginx Deployment that this Certificate should be associated with. Changing this forces a new Nginx Certificate to be created.
        """
        return pulumi.get(self, "nginx_deployment_id")

    @nginx_deployment_id.setter
    def nginx_deployment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nginx_deployment_id", value)


class Certificate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_virtual_path: Optional[pulumi.Input[str]] = None,
                 key_vault_secret_id: Optional[pulumi.Input[str]] = None,
                 key_virtual_path: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nginx_deployment_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a Certificate for an NGinx Deployment.

        ## Example Usage

        ```python
        import pulumi
        import base64
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_public_ip = azure.network.PublicIp("examplePublicIp",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            allocation_method="Static",
            sku="Standard",
            tags={
                "environment": "Production",
            })
        example_virtual_network = azure.network.VirtualNetwork("exampleVirtualNetwork",
            address_spaces=["10.0.0.0/16"],
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name)
        example_subnet = azure.network.Subnet("exampleSubnet",
            resource_group_name=example_resource_group.name,
            virtual_network_name=example_virtual_network.name,
            address_prefixes=["10.0.2.0/24"],
            delegations=[azure.network.SubnetDelegationArgs(
                name="delegation",
                service_delegation=azure.network.SubnetDelegationServiceDelegationArgs(
                    name="NGINX.NGINXPLUS/nginxDeployments",
                    actions=["Microsoft.Network/virtualNetworks/subnets/join/action"],
                ),
            )])
        example_deployment = azure.nginx.Deployment("exampleDeployment",
            resource_group_name=example_resource_group.name,
            sku="publicpreview_Monthly_gmz7xq9ge3py",
            location=example_resource_group.location,
            managed_resource_group="example",
            diagnose_support_enabled=True,
            frontend_public=azure.nginx.DeploymentFrontendPublicArgs(
                ip_addresses=[example_public_ip.id],
            ),
            network_interfaces=[azure.nginx.DeploymentNetworkInterfaceArgs(
                subnet_id=example_subnet.id,
            )])
        current = azure.core.get_client_config()
        example_key_vault = azure.keyvault.KeyVault("exampleKeyVault",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            tenant_id=current.tenant_id,
            sku_name="premium",
            access_policies=[azure.keyvault.KeyVaultAccessPolicyArgs(
                tenant_id=current.tenant_id,
                object_id=current.object_id,
                certificate_permissions=[
                    "Create",
                    "Delete",
                    "DeleteIssuers",
                    "Get",
                    "GetIssuers",
                    "Import",
                    "List",
                    "ListIssuers",
                    "ManageContacts",
                    "ManageIssuers",
                    "SetIssuers",
                    "Update",
                ],
            )])
        example_certificate = azure.keyvault.Certificate("exampleCertificate",
            key_vault_id=example_key_vault.id,
            certificate=azure.keyvault.CertificateCertificateArgs(
                contents=(lambda path: base64.b64encode(open(path).read().encode()).decode())("certificate-to-import.pfx"),
                password="",
            ))
        example_nginx_certificate_certificate = azure.nginx.Certificate("exampleNginx/certificateCertificate",
            nginx_deployment_id=example_deployment.id,
            key_virtual_path="/src/cert/soservermekey.key",
            certificate_virtual_path="/src/cert/server.cert",
            key_vault_secret_id=example_certificate.secret_id)
        ```

        ## Import

        An Nginx Certificate can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:nginx/certificate:Certificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Nginx.NginxPlus/nginxDeployments/deploy1/certificates/cer1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_virtual_path: Specify the path to the cert file of this certificate.
        :param pulumi.Input[str] key_vault_secret_id: Specify the ID of the Key Vault Secret for this certificate.
        :param pulumi.Input[str] key_virtual_path: Specify the path to the key file of this certificate.
        :param pulumi.Input[str] name: The name which should be used for this Nginx Certificate. Changing this forces a new Nginx Certificate to be created.
        :param pulumi.Input[str] nginx_deployment_id: The ID of the Nginx Deployment that this Certificate should be associated with. Changing this forces a new Nginx Certificate to be created.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CertificateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Certificate for an NGinx Deployment.

        ## Example Usage

        ```python
        import pulumi
        import base64
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_public_ip = azure.network.PublicIp("examplePublicIp",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            allocation_method="Static",
            sku="Standard",
            tags={
                "environment": "Production",
            })
        example_virtual_network = azure.network.VirtualNetwork("exampleVirtualNetwork",
            address_spaces=["10.0.0.0/16"],
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name)
        example_subnet = azure.network.Subnet("exampleSubnet",
            resource_group_name=example_resource_group.name,
            virtual_network_name=example_virtual_network.name,
            address_prefixes=["10.0.2.0/24"],
            delegations=[azure.network.SubnetDelegationArgs(
                name="delegation",
                service_delegation=azure.network.SubnetDelegationServiceDelegationArgs(
                    name="NGINX.NGINXPLUS/nginxDeployments",
                    actions=["Microsoft.Network/virtualNetworks/subnets/join/action"],
                ),
            )])
        example_deployment = azure.nginx.Deployment("exampleDeployment",
            resource_group_name=example_resource_group.name,
            sku="publicpreview_Monthly_gmz7xq9ge3py",
            location=example_resource_group.location,
            managed_resource_group="example",
            diagnose_support_enabled=True,
            frontend_public=azure.nginx.DeploymentFrontendPublicArgs(
                ip_addresses=[example_public_ip.id],
            ),
            network_interfaces=[azure.nginx.DeploymentNetworkInterfaceArgs(
                subnet_id=example_subnet.id,
            )])
        current = azure.core.get_client_config()
        example_key_vault = azure.keyvault.KeyVault("exampleKeyVault",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            tenant_id=current.tenant_id,
            sku_name="premium",
            access_policies=[azure.keyvault.KeyVaultAccessPolicyArgs(
                tenant_id=current.tenant_id,
                object_id=current.object_id,
                certificate_permissions=[
                    "Create",
                    "Delete",
                    "DeleteIssuers",
                    "Get",
                    "GetIssuers",
                    "Import",
                    "List",
                    "ListIssuers",
                    "ManageContacts",
                    "ManageIssuers",
                    "SetIssuers",
                    "Update",
                ],
            )])
        example_certificate = azure.keyvault.Certificate("exampleCertificate",
            key_vault_id=example_key_vault.id,
            certificate=azure.keyvault.CertificateCertificateArgs(
                contents=(lambda path: base64.b64encode(open(path).read().encode()).decode())("certificate-to-import.pfx"),
                password="",
            ))
        example_nginx_certificate_certificate = azure.nginx.Certificate("exampleNginx/certificateCertificate",
            nginx_deployment_id=example_deployment.id,
            key_virtual_path="/src/cert/soservermekey.key",
            certificate_virtual_path="/src/cert/server.cert",
            key_vault_secret_id=example_certificate.secret_id)
        ```

        ## Import

        An Nginx Certificate can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:nginx/certificate:Certificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Nginx.NginxPlus/nginxDeployments/deploy1/certificates/cer1
        ```

        :param str resource_name: The name of the resource.
        :param CertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_virtual_path: Optional[pulumi.Input[str]] = None,
                 key_vault_secret_id: Optional[pulumi.Input[str]] = None,
                 key_virtual_path: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nginx_deployment_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CertificateArgs.__new__(CertificateArgs)

            if certificate_virtual_path is None and not opts.urn:
                raise TypeError("Missing required property 'certificate_virtual_path'")
            __props__.__dict__["certificate_virtual_path"] = certificate_virtual_path
            if key_vault_secret_id is None and not opts.urn:
                raise TypeError("Missing required property 'key_vault_secret_id'")
            __props__.__dict__["key_vault_secret_id"] = key_vault_secret_id
            if key_virtual_path is None and not opts.urn:
                raise TypeError("Missing required property 'key_virtual_path'")
            __props__.__dict__["key_virtual_path"] = key_virtual_path
            __props__.__dict__["name"] = name
            if nginx_deployment_id is None and not opts.urn:
                raise TypeError("Missing required property 'nginx_deployment_id'")
            __props__.__dict__["nginx_deployment_id"] = nginx_deployment_id
        super(Certificate, __self__).__init__(
            'azure:nginx/certificate:Certificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate_virtual_path: Optional[pulumi.Input[str]] = None,
            key_vault_secret_id: Optional[pulumi.Input[str]] = None,
            key_virtual_path: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nginx_deployment_id: Optional[pulumi.Input[str]] = None) -> 'Certificate':
        """
        Get an existing Certificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_virtual_path: Specify the path to the cert file of this certificate.
        :param pulumi.Input[str] key_vault_secret_id: Specify the ID of the Key Vault Secret for this certificate.
        :param pulumi.Input[str] key_virtual_path: Specify the path to the key file of this certificate.
        :param pulumi.Input[str] name: The name which should be used for this Nginx Certificate. Changing this forces a new Nginx Certificate to be created.
        :param pulumi.Input[str] nginx_deployment_id: The ID of the Nginx Deployment that this Certificate should be associated with. Changing this forces a new Nginx Certificate to be created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CertificateState.__new__(_CertificateState)

        __props__.__dict__["certificate_virtual_path"] = certificate_virtual_path
        __props__.__dict__["key_vault_secret_id"] = key_vault_secret_id
        __props__.__dict__["key_virtual_path"] = key_virtual_path
        __props__.__dict__["name"] = name
        __props__.__dict__["nginx_deployment_id"] = nginx_deployment_id
        return Certificate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="certificateVirtualPath")
    def certificate_virtual_path(self) -> pulumi.Output[str]:
        """
        Specify the path to the cert file of this certificate.
        """
        return pulumi.get(self, "certificate_virtual_path")

    @property
    @pulumi.getter(name="keyVaultSecretId")
    def key_vault_secret_id(self) -> pulumi.Output[str]:
        """
        Specify the ID of the Key Vault Secret for this certificate.
        """
        return pulumi.get(self, "key_vault_secret_id")

    @property
    @pulumi.getter(name="keyVirtualPath")
    def key_virtual_path(self) -> pulumi.Output[str]:
        """
        Specify the path to the key file of this certificate.
        """
        return pulumi.get(self, "key_virtual_path")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name which should be used for this Nginx Certificate. Changing this forces a new Nginx Certificate to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nginxDeploymentId")
    def nginx_deployment_id(self) -> pulumi.Output[str]:
        """
        The ID of the Nginx Deployment that this Certificate should be associated with. Changing this forces a new Nginx Certificate to be created.
        """
        return pulumi.get(self, "nginx_deployment_id")

