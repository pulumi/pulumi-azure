# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ConfigurationConfigFile',
    'ConfigurationProtectedFile',
    'DeploymentFrontendPrivate',
    'DeploymentFrontendPublic',
    'DeploymentIdentity',
    'DeploymentLoggingStorageAccount',
    'DeploymentNetworkInterface',
]

@pulumi.output_type
class ConfigurationConfigFile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "virtualPath":
            suggest = "virtual_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationConfigFile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationConfigFile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationConfigFile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: str,
                 virtual_path: str):
        """
        :param str content: Specifies the base-64 encoded contents of this config file.
        :param str virtual_path: Specify the path of this config file.
        """
        ConfigurationConfigFile._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content=content,
            virtual_path=virtual_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content: str,
             virtual_path: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("content", content)
        _setter("virtual_path", virtual_path)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        Specifies the base-64 encoded contents of this config file.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="virtualPath")
    def virtual_path(self) -> str:
        """
        Specify the path of this config file.
        """
        return pulumi.get(self, "virtual_path")


@pulumi.output_type
class ConfigurationProtectedFile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "virtualPath":
            suggest = "virtual_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationProtectedFile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationProtectedFile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationProtectedFile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: str,
                 virtual_path: str):
        """
        :param str content: Specifies the base-64 encoded contents of this config file (Sensitive).
        :param str virtual_path: Specify the path of this config file.
        """
        ConfigurationProtectedFile._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content=content,
            virtual_path=virtual_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content: str,
             virtual_path: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("content", content)
        _setter("virtual_path", virtual_path)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        Specifies the base-64 encoded contents of this config file (Sensitive).
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="virtualPath")
    def virtual_path(self) -> str:
        """
        Specify the path of this config file.
        """
        return pulumi.get(self, "virtual_path")


@pulumi.output_type
class DeploymentFrontendPrivate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allocationMethod":
            suggest = "allocation_method"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentFrontendPrivate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentFrontendPrivate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentFrontendPrivate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allocation_method: str,
                 ip_address: str,
                 subnet_id: str):
        """
        :param str allocation_method: Specify the methos of allocating the private IP. Possible values are `Static` and `Dynamic`.
        :param str ip_address: Specify the IP Address of this private IP.
        :param str subnet_id: Specify the SubNet Resource ID to this Nginx Deployment.
        """
        DeploymentFrontendPrivate._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allocation_method=allocation_method,
            ip_address=ip_address,
            subnet_id=subnet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allocation_method: str,
             ip_address: str,
             subnet_id: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("allocation_method", allocation_method)
        _setter("ip_address", ip_address)
        _setter("subnet_id", subnet_id)

    @property
    @pulumi.getter(name="allocationMethod")
    def allocation_method(self) -> str:
        """
        Specify the methos of allocating the private IP. Possible values are `Static` and `Dynamic`.
        """
        return pulumi.get(self, "allocation_method")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        Specify the IP Address of this private IP.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Specify the SubNet Resource ID to this Nginx Deployment.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class DeploymentFrontendPublic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddresses":
            suggest = "ip_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentFrontendPublic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentFrontendPublic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentFrontendPublic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_addresses: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] ip_addresses: Specifies a list of Public IP Resouce ID to this Nginx Deployment.
        """
        DeploymentFrontendPublic._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ip_addresses=ip_addresses,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ip_addresses: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if ip_addresses is not None:
            _setter("ip_addresses", ip_addresses)

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        """
        Specifies a list of Public IP Resouce ID to this Nginx Deployment.
        """
        return pulumi.get(self, "ip_addresses")


@pulumi.output_type
class DeploymentIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "identityIds":
            suggest = "identity_ids"
        elif key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 identity_ids: Optional[Sequence[str]] = None,
                 principal_id: Optional[str] = None,
                 tenant_id: Optional[str] = None):
        """
        :param str type: Specifies the identity type of the Nginx Deployment. Possible values is `UserAssigned` where you can specify the Service Principal IDs in the `identity_ids` field.
        :param Sequence[str] identity_ids: Specifies a list of user managed identity ids to be assigned. Required if `type` is `UserAssigned`.
        """
        DeploymentIdentity._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            identity_ids=identity_ids,
            principal_id=principal_id,
            tenant_id=tenant_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             identity_ids: Optional[Sequence[str]] = None,
             principal_id: Optional[str] = None,
             tenant_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if identity_ids is not None:
            _setter("identity_ids", identity_ids)
        if principal_id is not None:
            _setter("principal_id", principal_id)
        if tenant_id is not None:
            _setter("tenant_id", tenant_id)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the identity type of the Nginx Deployment. Possible values is `UserAssigned` where you can specify the Service Principal IDs in the `identity_ids` field.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Optional[Sequence[str]]:
        """
        Specifies a list of user managed identity ids to be assigned. Required if `type` is `UserAssigned`.
        """
        return pulumi.get(self, "identity_ids")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[str]:
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class DeploymentLoggingStorageAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerName":
            suggest = "container_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentLoggingStorageAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentLoggingStorageAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentLoggingStorageAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_name: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str container_name: Specify the container name of Stoage Account for logging.
        :param str name: The account name of the StorageAccount for Nginx Logging.
        """
        DeploymentLoggingStorageAccount._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            container_name=container_name,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             container_name: Optional[str] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if container_name is not None:
            _setter("container_name", container_name)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        """
        Specify the container name of Stoage Account for logging.
        """
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The account name of the StorageAccount for Nginx Logging.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DeploymentNetworkInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentNetworkInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentNetworkInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentNetworkInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str):
        """
        :param str subnet_id: Specify The SubNet Resource ID to this Nginx Deployment.
        """
        DeploymentNetworkInterface._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            subnet_id=subnet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             subnet_id: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("subnet_id", subnet_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Specify The SubNet Resource ID to this Nginx Deployment.
        """
        return pulumi.get(self, "subnet_id")


