# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ConfigurationConfigFile',
    'ConfigurationProtectedFile',
    'DeploymentAutoScaleProfile',
    'DeploymentConfiguration',
    'DeploymentConfigurationConfigFile',
    'DeploymentConfigurationProtectedFile',
    'DeploymentFrontendPrivate',
    'DeploymentFrontendPublic',
    'DeploymentIdentity',
    'DeploymentLoggingStorageAccount',
    'DeploymentNetworkInterface',
    'GetConfigurationConfigFileResult',
    'GetConfigurationProtectedFileResult',
    'GetDeploymentAutoScaleProfileResult',
    'GetDeploymentFrontendPrivateResult',
    'GetDeploymentFrontendPublicResult',
    'GetDeploymentIdentityResult',
    'GetDeploymentLoggingStorageAccountResult',
    'GetDeploymentNetworkInterfaceResult',
]

@pulumi.output_type
class ConfigurationConfigFile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "virtualPath":
            suggest = "virtual_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationConfigFile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationConfigFile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationConfigFile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: str,
                 virtual_path: str):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "virtual_path", virtual_path)

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="virtualPath")
    def virtual_path(self) -> str:
        return pulumi.get(self, "virtual_path")


@pulumi.output_type
class ConfigurationProtectedFile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "virtualPath":
            suggest = "virtual_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationProtectedFile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationProtectedFile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationProtectedFile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: str,
                 virtual_path: str):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "virtual_path", virtual_path)

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="virtualPath")
    def virtual_path(self) -> str:
        return pulumi.get(self, "virtual_path")


@pulumi.output_type
class DeploymentAutoScaleProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxCapacity":
            suggest = "max_capacity"
        elif key == "minCapacity":
            suggest = "min_capacity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentAutoScaleProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentAutoScaleProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentAutoScaleProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_capacity: int,
                 min_capacity: int,
                 name: str):
        """
        :param int min_capacity: Specify the minimum number of NGINX capacity units for this NGINX Deployment.
        :param str name: Specify the name of the autoscaling profile.
        """
        pulumi.set(__self__, "max_capacity", max_capacity)
        pulumi.set(__self__, "min_capacity", min_capacity)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="maxCapacity")
    def max_capacity(self) -> int:
        return pulumi.get(self, "max_capacity")

    @property
    @pulumi.getter(name="minCapacity")
    def min_capacity(self) -> int:
        """
        Specify the minimum number of NGINX capacity units for this NGINX Deployment.
        """
        return pulumi.get(self, "min_capacity")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specify the name of the autoscaling profile.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DeploymentConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rootFile":
            suggest = "root_file"
        elif key == "configFiles":
            suggest = "config_files"
        elif key == "packageData":
            suggest = "package_data"
        elif key == "protectedFiles":
            suggest = "protected_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 root_file: str,
                 config_files: Optional[Sequence['outputs.DeploymentConfigurationConfigFile']] = None,
                 package_data: Optional[str] = None,
                 protected_files: Optional[Sequence['outputs.DeploymentConfigurationProtectedFile']] = None):
        """
        :param str root_file: Specify the root file path of this Nginx Configuration.
        :param Sequence['DeploymentConfigurationConfigFileArgs'] config_files: One or more `config_file` blocks as defined below.
        :param str package_data: Specify the package data for this configuration.
        :param Sequence['DeploymentConfigurationProtectedFileArgs'] protected_files: One or more `protected_file` blocks with sensitive information as defined below. If specified `config_file` must also be specified.
        """
        pulumi.set(__self__, "root_file", root_file)
        if config_files is not None:
            pulumi.set(__self__, "config_files", config_files)
        if package_data is not None:
            pulumi.set(__self__, "package_data", package_data)
        if protected_files is not None:
            pulumi.set(__self__, "protected_files", protected_files)

    @property
    @pulumi.getter(name="rootFile")
    def root_file(self) -> str:
        """
        Specify the root file path of this Nginx Configuration.
        """
        return pulumi.get(self, "root_file")

    @property
    @pulumi.getter(name="configFiles")
    def config_files(self) -> Optional[Sequence['outputs.DeploymentConfigurationConfigFile']]:
        """
        One or more `config_file` blocks as defined below.
        """
        return pulumi.get(self, "config_files")

    @property
    @pulumi.getter(name="packageData")
    def package_data(self) -> Optional[str]:
        """
        Specify the package data for this configuration.
        """
        return pulumi.get(self, "package_data")

    @property
    @pulumi.getter(name="protectedFiles")
    def protected_files(self) -> Optional[Sequence['outputs.DeploymentConfigurationProtectedFile']]:
        """
        One or more `protected_file` blocks with sensitive information as defined below. If specified `config_file` must also be specified.
        """
        return pulumi.get(self, "protected_files")


@pulumi.output_type
class DeploymentConfigurationConfigFile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "virtualPath":
            suggest = "virtual_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentConfigurationConfigFile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentConfigurationConfigFile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentConfigurationConfigFile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: str,
                 virtual_path: str):
        """
        :param str content: Specifies the base-64 encoded contents of this config file.
        :param str virtual_path: Specify the path of this config file.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "virtual_path", virtual_path)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        Specifies the base-64 encoded contents of this config file.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="virtualPath")
    def virtual_path(self) -> str:
        """
        Specify the path of this config file.
        """
        return pulumi.get(self, "virtual_path")


@pulumi.output_type
class DeploymentConfigurationProtectedFile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "virtualPath":
            suggest = "virtual_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentConfigurationProtectedFile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentConfigurationProtectedFile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentConfigurationProtectedFile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: str,
                 virtual_path: str):
        """
        :param str content: Specifies the base-64 encoded contents of this config file (Sensitive).
        :param str virtual_path: Specify the path of this config file.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "virtual_path", virtual_path)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        Specifies the base-64 encoded contents of this config file (Sensitive).
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="virtualPath")
    def virtual_path(self) -> str:
        """
        Specify the path of this config file.
        """
        return pulumi.get(self, "virtual_path")


@pulumi.output_type
class DeploymentFrontendPrivate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allocationMethod":
            suggest = "allocation_method"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentFrontendPrivate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentFrontendPrivate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentFrontendPrivate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allocation_method: str,
                 ip_address: str,
                 subnet_id: str):
        """
        :param str allocation_method: Specify the method of allocating the private IP. Possible values are `Static` and `Dynamic`.
        :param str ip_address: Specify the IP Address of this private IP.
        :param str subnet_id: Specify the SubNet Resource ID to this Nginx Deployment.
        """
        pulumi.set(__self__, "allocation_method", allocation_method)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="allocationMethod")
    def allocation_method(self) -> str:
        """
        Specify the method of allocating the private IP. Possible values are `Static` and `Dynamic`.
        """
        return pulumi.get(self, "allocation_method")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        Specify the IP Address of this private IP.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Specify the SubNet Resource ID to this Nginx Deployment.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class DeploymentFrontendPublic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddresses":
            suggest = "ip_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentFrontendPublic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentFrontendPublic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentFrontendPublic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_addresses: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] ip_addresses: Specifies a list of Public IP Resource ID to this Nginx Deployment.
        """
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        """
        Specifies a list of Public IP Resource ID to this Nginx Deployment.
        """
        return pulumi.get(self, "ip_addresses")


@pulumi.output_type
class DeploymentIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "identityIds":
            suggest = "identity_ids"
        elif key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 identity_ids: Optional[Sequence[str]] = None,
                 principal_id: Optional[str] = None,
                 tenant_id: Optional[str] = None):
        """
        :param str type: Specifies the identity type of the Nginx Deployment. Possible values are `UserAssigned`, `SystemAssigned`.
        :param Sequence[str] identity_ids: Specifies a list of user managed identity ids to be assigned.
               
               > **NOTE:** This is required when `type` is set to `UserAssigned`.
        """
        pulumi.set(__self__, "type", type)
        if identity_ids is not None:
            pulumi.set(__self__, "identity_ids", identity_ids)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the identity type of the Nginx Deployment. Possible values are `UserAssigned`, `SystemAssigned`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Optional[Sequence[str]]:
        """
        Specifies a list of user managed identity ids to be assigned.

        > **NOTE:** This is required when `type` is set to `UserAssigned`.
        """
        return pulumi.get(self, "identity_ids")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[str]:
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class DeploymentLoggingStorageAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerName":
            suggest = "container_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentLoggingStorageAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentLoggingStorageAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentLoggingStorageAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_name: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str container_name: Specify the container name of Storage Account for logging.
        :param str name: The account name of the StorageAccount for Nginx Logging.
        """
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        """
        Specify the container name of Storage Account for logging.
        """
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The account name of the StorageAccount for Nginx Logging.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DeploymentNetworkInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentNetworkInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentNetworkInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentNetworkInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str):
        """
        :param str subnet_id: Specify The SubNet Resource ID to this Nginx Deployment.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Specify The SubNet Resource ID to this Nginx Deployment.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetConfigurationConfigFileResult(dict):
    def __init__(__self__, *,
                 content: str,
                 virtual_path: str):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "virtual_path", virtual_path)

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="virtualPath")
    def virtual_path(self) -> str:
        return pulumi.get(self, "virtual_path")


@pulumi.output_type
class GetConfigurationProtectedFileResult(dict):
    def __init__(__self__, *,
                 content: str,
                 virtual_path: str):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "virtual_path", virtual_path)

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="virtualPath")
    def virtual_path(self) -> str:
        return pulumi.get(self, "virtual_path")


@pulumi.output_type
class GetDeploymentAutoScaleProfileResult(dict):
    def __init__(__self__, *,
                 max_capacity: int,
                 min_capacity: int,
                 name: str):
        """
        :param int max_capacity: The maximum number of NGINX capacity units for this NGINX Deployment.
        :param int min_capacity: The minimum number of NGINX capacity units for this NGINX Deployment.
        :param str name: The name of this Nginx Deployment.
        """
        pulumi.set(__self__, "max_capacity", max_capacity)
        pulumi.set(__self__, "min_capacity", min_capacity)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="maxCapacity")
    def max_capacity(self) -> int:
        """
        The maximum number of NGINX capacity units for this NGINX Deployment.
        """
        return pulumi.get(self, "max_capacity")

    @property
    @pulumi.getter(name="minCapacity")
    def min_capacity(self) -> int:
        """
        The minimum number of NGINX capacity units for this NGINX Deployment.
        """
        return pulumi.get(self, "min_capacity")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this Nginx Deployment.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDeploymentFrontendPrivateResult(dict):
    def __init__(__self__, *,
                 allocation_method: str,
                 ip_address: str,
                 subnet_id: str):
        """
        :param str allocation_method: The method of allocating the private IP to the Nginx Deployment.
        :param str ip_address: List of public IPs of the Ngix Deployment.
        :param str subnet_id: The subnet resource ID of the Nginx Deployment.
        """
        pulumi.set(__self__, "allocation_method", allocation_method)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="allocationMethod")
    def allocation_method(self) -> str:
        """
        The method of allocating the private IP to the Nginx Deployment.
        """
        return pulumi.get(self, "allocation_method")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        List of public IPs of the Ngix Deployment.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The subnet resource ID of the Nginx Deployment.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetDeploymentFrontendPublicResult(dict):
    def __init__(__self__, *,
                 ip_addresses: Sequence[str]):
        """
        :param Sequence[str] ip_addresses: List of public IPs of the Ngix Deployment.
        """
        pulumi.set(__self__, "ip_addresses", ip_addresses)

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence[str]:
        """
        List of public IPs of the Ngix Deployment.
        """
        return pulumi.get(self, "ip_addresses")


@pulumi.output_type
class GetDeploymentIdentityResult(dict):
    def __init__(__self__, *,
                 identity_ids: Sequence[str],
                 principal_id: str,
                 tenant_id: str,
                 type: str):
        """
        :param Sequence[str] identity_ids: List of identities attached to the Nginx Deployment.
        :param str type: Type of identity attached to the Nginx Deployment.
        """
        pulumi.set(__self__, "identity_ids", identity_ids)
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Sequence[str]:
        """
        List of identities attached to the Nginx Deployment.
        """
        return pulumi.get(self, "identity_ids")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of identity attached to the Nginx Deployment.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentLoggingStorageAccountResult(dict):
    def __init__(__self__, *,
                 container_name: str,
                 name: str):
        """
        :param str container_name: the container name of Storage Account for logging.
        :param str name: The name of this Nginx Deployment.
        """
        pulumi.set(__self__, "container_name", container_name)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> str:
        """
        the container name of Storage Account for logging.
        """
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this Nginx Deployment.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDeploymentNetworkInterfaceResult(dict):
    def __init__(__self__, *,
                 subnet_id: str):
        """
        :param str subnet_id: The subnet resource ID of the Nginx Deployment.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The subnet resource ID of the Nginx Deployment.
        """
        return pulumi.get(self, "subnet_id")


