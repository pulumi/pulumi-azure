# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ReplicatedVMArgs', 'ReplicatedVM']

@pulumi.input_type
class ReplicatedVMArgs:
    def __init__(__self__, *,
                 recovery_replication_policy_id: pulumi.Input[str],
                 recovery_vault_name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 source_recovery_fabric_name: pulumi.Input[str],
                 source_recovery_protection_container_name: pulumi.Input[str],
                 source_vm_id: pulumi.Input[str],
                 target_recovery_fabric_id: pulumi.Input[str],
                 target_recovery_protection_container_id: pulumi.Input[str],
                 target_resource_group_id: pulumi.Input[str],
                 managed_disks: Optional[pulumi.Input[Sequence[pulumi.Input['ReplicatedVMManagedDiskArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['ReplicatedVMNetworkInterfaceArgs']]]] = None,
                 target_availability_set_id: Optional[pulumi.Input[str]] = None,
                 target_network_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ReplicatedVM resource.
        :param pulumi.Input[str] recovery_vault_name: The name of the vault that should be updated.
        :param pulumi.Input[str] resource_group_name: Name of the resource group where the vault that should be updated is located.
        :param pulumi.Input[str] source_recovery_fabric_name: Name of fabric that should contains this replication.
        :param pulumi.Input[str] source_recovery_protection_container_name: Name of the protection container to use.
        :param pulumi.Input[str] source_vm_id: Id of the VM to replicate
        :param pulumi.Input[str] target_recovery_fabric_id: Id of fabric where the VM replication should be handled when a failover is done.
        :param pulumi.Input[str] target_recovery_protection_container_id: Id of protection container where the VM replication should be created when a failover is done.
        :param pulumi.Input[str] target_resource_group_id: Id of resource group where the VM should be created when a failover is done.
        :param pulumi.Input[Sequence[pulumi.Input['ReplicatedVMManagedDiskArgs']]] managed_disks: One or more `managed_disk` block.
        :param pulumi.Input[str] name: The name of the replication for the replicated VM.
        :param pulumi.Input[Sequence[pulumi.Input['ReplicatedVMNetworkInterfaceArgs']]] network_interfaces: One or more `network_interface` block.
        :param pulumi.Input[str] target_availability_set_id: Id of availability set that the new VM should belong to when a failover is done.
        :param pulumi.Input[str] target_network_id: Network to use when a failover is done (recommended to set if any network_interface is configured for failover).
        """
        pulumi.set(__self__, "recovery_replication_policy_id", recovery_replication_policy_id)
        pulumi.set(__self__, "recovery_vault_name", recovery_vault_name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "source_recovery_fabric_name", source_recovery_fabric_name)
        pulumi.set(__self__, "source_recovery_protection_container_name", source_recovery_protection_container_name)
        pulumi.set(__self__, "source_vm_id", source_vm_id)
        pulumi.set(__self__, "target_recovery_fabric_id", target_recovery_fabric_id)
        pulumi.set(__self__, "target_recovery_protection_container_id", target_recovery_protection_container_id)
        pulumi.set(__self__, "target_resource_group_id", target_resource_group_id)
        if managed_disks is not None:
            pulumi.set(__self__, "managed_disks", managed_disks)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if target_availability_set_id is not None:
            pulumi.set(__self__, "target_availability_set_id", target_availability_set_id)
        if target_network_id is not None:
            pulumi.set(__self__, "target_network_id", target_network_id)

    @property
    @pulumi.getter(name="recoveryReplicationPolicyId")
    def recovery_replication_policy_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "recovery_replication_policy_id")

    @recovery_replication_policy_id.setter
    def recovery_replication_policy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "recovery_replication_policy_id", value)

    @property
    @pulumi.getter(name="recoveryVaultName")
    def recovery_vault_name(self) -> pulumi.Input[str]:
        """
        The name of the vault that should be updated.
        """
        return pulumi.get(self, "recovery_vault_name")

    @recovery_vault_name.setter
    def recovery_vault_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "recovery_vault_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        Name of the resource group where the vault that should be updated is located.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="sourceRecoveryFabricName")
    def source_recovery_fabric_name(self) -> pulumi.Input[str]:
        """
        Name of fabric that should contains this replication.
        """
        return pulumi.get(self, "source_recovery_fabric_name")

    @source_recovery_fabric_name.setter
    def source_recovery_fabric_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_recovery_fabric_name", value)

    @property
    @pulumi.getter(name="sourceRecoveryProtectionContainerName")
    def source_recovery_protection_container_name(self) -> pulumi.Input[str]:
        """
        Name of the protection container to use.
        """
        return pulumi.get(self, "source_recovery_protection_container_name")

    @source_recovery_protection_container_name.setter
    def source_recovery_protection_container_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_recovery_protection_container_name", value)

    @property
    @pulumi.getter(name="sourceVmId")
    def source_vm_id(self) -> pulumi.Input[str]:
        """
        Id of the VM to replicate
        """
        return pulumi.get(self, "source_vm_id")

    @source_vm_id.setter
    def source_vm_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_vm_id", value)

    @property
    @pulumi.getter(name="targetRecoveryFabricId")
    def target_recovery_fabric_id(self) -> pulumi.Input[str]:
        """
        Id of fabric where the VM replication should be handled when a failover is done.
        """
        return pulumi.get(self, "target_recovery_fabric_id")

    @target_recovery_fabric_id.setter
    def target_recovery_fabric_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_recovery_fabric_id", value)

    @property
    @pulumi.getter(name="targetRecoveryProtectionContainerId")
    def target_recovery_protection_container_id(self) -> pulumi.Input[str]:
        """
        Id of protection container where the VM replication should be created when a failover is done.
        """
        return pulumi.get(self, "target_recovery_protection_container_id")

    @target_recovery_protection_container_id.setter
    def target_recovery_protection_container_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_recovery_protection_container_id", value)

    @property
    @pulumi.getter(name="targetResourceGroupId")
    def target_resource_group_id(self) -> pulumi.Input[str]:
        """
        Id of resource group where the VM should be created when a failover is done.
        """
        return pulumi.get(self, "target_resource_group_id")

    @target_resource_group_id.setter
    def target_resource_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_resource_group_id", value)

    @property
    @pulumi.getter(name="managedDisks")
    def managed_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReplicatedVMManagedDiskArgs']]]]:
        """
        One or more `managed_disk` block.
        """
        return pulumi.get(self, "managed_disks")

    @managed_disks.setter
    def managed_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReplicatedVMManagedDiskArgs']]]]):
        pulumi.set(self, "managed_disks", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the replication for the replicated VM.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReplicatedVMNetworkInterfaceArgs']]]]:
        """
        One or more `network_interface` block.
        """
        return pulumi.get(self, "network_interfaces")

    @network_interfaces.setter
    def network_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReplicatedVMNetworkInterfaceArgs']]]]):
        pulumi.set(self, "network_interfaces", value)

    @property
    @pulumi.getter(name="targetAvailabilitySetId")
    def target_availability_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of availability set that the new VM should belong to when a failover is done.
        """
        return pulumi.get(self, "target_availability_set_id")

    @target_availability_set_id.setter
    def target_availability_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_availability_set_id", value)

    @property
    @pulumi.getter(name="targetNetworkId")
    def target_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        Network to use when a failover is done (recommended to set if any network_interface is configured for failover).
        """
        return pulumi.get(self, "target_network_id")

    @target_network_id.setter
    def target_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_network_id", value)


@pulumi.input_type
class _ReplicatedVMState:
    def __init__(__self__, *,
                 managed_disks: Optional[pulumi.Input[Sequence[pulumi.Input['ReplicatedVMManagedDiskArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['ReplicatedVMNetworkInterfaceArgs']]]] = None,
                 recovery_replication_policy_id: Optional[pulumi.Input[str]] = None,
                 recovery_vault_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 source_recovery_fabric_name: Optional[pulumi.Input[str]] = None,
                 source_recovery_protection_container_name: Optional[pulumi.Input[str]] = None,
                 source_vm_id: Optional[pulumi.Input[str]] = None,
                 target_availability_set_id: Optional[pulumi.Input[str]] = None,
                 target_network_id: Optional[pulumi.Input[str]] = None,
                 target_recovery_fabric_id: Optional[pulumi.Input[str]] = None,
                 target_recovery_protection_container_id: Optional[pulumi.Input[str]] = None,
                 target_resource_group_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ReplicatedVM resources.
        :param pulumi.Input[Sequence[pulumi.Input['ReplicatedVMManagedDiskArgs']]] managed_disks: One or more `managed_disk` block.
        :param pulumi.Input[str] name: The name of the replication for the replicated VM.
        :param pulumi.Input[Sequence[pulumi.Input['ReplicatedVMNetworkInterfaceArgs']]] network_interfaces: One or more `network_interface` block.
        :param pulumi.Input[str] recovery_vault_name: The name of the vault that should be updated.
        :param pulumi.Input[str] resource_group_name: Name of the resource group where the vault that should be updated is located.
        :param pulumi.Input[str] source_recovery_fabric_name: Name of fabric that should contains this replication.
        :param pulumi.Input[str] source_recovery_protection_container_name: Name of the protection container to use.
        :param pulumi.Input[str] source_vm_id: Id of the VM to replicate
        :param pulumi.Input[str] target_availability_set_id: Id of availability set that the new VM should belong to when a failover is done.
        :param pulumi.Input[str] target_network_id: Network to use when a failover is done (recommended to set if any network_interface is configured for failover).
        :param pulumi.Input[str] target_recovery_fabric_id: Id of fabric where the VM replication should be handled when a failover is done.
        :param pulumi.Input[str] target_recovery_protection_container_id: Id of protection container where the VM replication should be created when a failover is done.
        :param pulumi.Input[str] target_resource_group_id: Id of resource group where the VM should be created when a failover is done.
        """
        if managed_disks is not None:
            pulumi.set(__self__, "managed_disks", managed_disks)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if recovery_replication_policy_id is not None:
            pulumi.set(__self__, "recovery_replication_policy_id", recovery_replication_policy_id)
        if recovery_vault_name is not None:
            pulumi.set(__self__, "recovery_vault_name", recovery_vault_name)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if source_recovery_fabric_name is not None:
            pulumi.set(__self__, "source_recovery_fabric_name", source_recovery_fabric_name)
        if source_recovery_protection_container_name is not None:
            pulumi.set(__self__, "source_recovery_protection_container_name", source_recovery_protection_container_name)
        if source_vm_id is not None:
            pulumi.set(__self__, "source_vm_id", source_vm_id)
        if target_availability_set_id is not None:
            pulumi.set(__self__, "target_availability_set_id", target_availability_set_id)
        if target_network_id is not None:
            pulumi.set(__self__, "target_network_id", target_network_id)
        if target_recovery_fabric_id is not None:
            pulumi.set(__self__, "target_recovery_fabric_id", target_recovery_fabric_id)
        if target_recovery_protection_container_id is not None:
            pulumi.set(__self__, "target_recovery_protection_container_id", target_recovery_protection_container_id)
        if target_resource_group_id is not None:
            pulumi.set(__self__, "target_resource_group_id", target_resource_group_id)

    @property
    @pulumi.getter(name="managedDisks")
    def managed_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReplicatedVMManagedDiskArgs']]]]:
        """
        One or more `managed_disk` block.
        """
        return pulumi.get(self, "managed_disks")

    @managed_disks.setter
    def managed_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReplicatedVMManagedDiskArgs']]]]):
        pulumi.set(self, "managed_disks", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the replication for the replicated VM.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReplicatedVMNetworkInterfaceArgs']]]]:
        """
        One or more `network_interface` block.
        """
        return pulumi.get(self, "network_interfaces")

    @network_interfaces.setter
    def network_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReplicatedVMNetworkInterfaceArgs']]]]):
        pulumi.set(self, "network_interfaces", value)

    @property
    @pulumi.getter(name="recoveryReplicationPolicyId")
    def recovery_replication_policy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "recovery_replication_policy_id")

    @recovery_replication_policy_id.setter
    def recovery_replication_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_replication_policy_id", value)

    @property
    @pulumi.getter(name="recoveryVaultName")
    def recovery_vault_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the vault that should be updated.
        """
        return pulumi.get(self, "recovery_vault_name")

    @recovery_vault_name.setter
    def recovery_vault_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_vault_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource group where the vault that should be updated is located.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="sourceRecoveryFabricName")
    def source_recovery_fabric_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of fabric that should contains this replication.
        """
        return pulumi.get(self, "source_recovery_fabric_name")

    @source_recovery_fabric_name.setter
    def source_recovery_fabric_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_recovery_fabric_name", value)

    @property
    @pulumi.getter(name="sourceRecoveryProtectionContainerName")
    def source_recovery_protection_container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the protection container to use.
        """
        return pulumi.get(self, "source_recovery_protection_container_name")

    @source_recovery_protection_container_name.setter
    def source_recovery_protection_container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_recovery_protection_container_name", value)

    @property
    @pulumi.getter(name="sourceVmId")
    def source_vm_id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the VM to replicate
        """
        return pulumi.get(self, "source_vm_id")

    @source_vm_id.setter
    def source_vm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_vm_id", value)

    @property
    @pulumi.getter(name="targetAvailabilitySetId")
    def target_availability_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of availability set that the new VM should belong to when a failover is done.
        """
        return pulumi.get(self, "target_availability_set_id")

    @target_availability_set_id.setter
    def target_availability_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_availability_set_id", value)

    @property
    @pulumi.getter(name="targetNetworkId")
    def target_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        Network to use when a failover is done (recommended to set if any network_interface is configured for failover).
        """
        return pulumi.get(self, "target_network_id")

    @target_network_id.setter
    def target_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_network_id", value)

    @property
    @pulumi.getter(name="targetRecoveryFabricId")
    def target_recovery_fabric_id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of fabric where the VM replication should be handled when a failover is done.
        """
        return pulumi.get(self, "target_recovery_fabric_id")

    @target_recovery_fabric_id.setter
    def target_recovery_fabric_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_recovery_fabric_id", value)

    @property
    @pulumi.getter(name="targetRecoveryProtectionContainerId")
    def target_recovery_protection_container_id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of protection container where the VM replication should be created when a failover is done.
        """
        return pulumi.get(self, "target_recovery_protection_container_id")

    @target_recovery_protection_container_id.setter
    def target_recovery_protection_container_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_recovery_protection_container_id", value)

    @property
    @pulumi.getter(name="targetResourceGroupId")
    def target_resource_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of resource group where the VM should be created when a failover is done.
        """
        return pulumi.get(self, "target_resource_group_id")

    @target_resource_group_id.setter
    def target_resource_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_resource_group_id", value)


class ReplicatedVM(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 managed_disks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReplicatedVMManagedDiskArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReplicatedVMNetworkInterfaceArgs']]]]] = None,
                 recovery_replication_policy_id: Optional[pulumi.Input[str]] = None,
                 recovery_vault_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 source_recovery_fabric_name: Optional[pulumi.Input[str]] = None,
                 source_recovery_protection_container_name: Optional[pulumi.Input[str]] = None,
                 source_vm_id: Optional[pulumi.Input[str]] = None,
                 target_availability_set_id: Optional[pulumi.Input[str]] = None,
                 target_network_id: Optional[pulumi.Input[str]] = None,
                 target_recovery_fabric_id: Optional[pulumi.Input[str]] = None,
                 target_recovery_protection_container_id: Optional[pulumi.Input[str]] = None,
                 target_resource_group_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a VM replicated using Azure Site Recovery (Azure to Azure only). A replicated VM keeps a copiously updated image of the VM in another region in order to be able to start the VM in that region in case of a disaster.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        primary_resource_group = azure.core.ResourceGroup("primaryResourceGroup", location="West US")
        secondary_resource_group = azure.core.ResourceGroup("secondaryResourceGroup", location="East US")
        primary_virtual_network = azure.network.VirtualNetwork("primaryVirtualNetwork",
            resource_group_name=primary_resource_group.name,
            address_spaces=["192.168.1.0/24"],
            location=primary_resource_group.location)
        primary_subnet = azure.network.Subnet("primarySubnet",
            resource_group_name=primary_resource_group.name,
            virtual_network_name=primary_virtual_network.name,
            address_prefixes=["192.168.1.0/24"])
        primary_public_ip = azure.network.PublicIp("primaryPublicIp",
            allocation_method="Static",
            location=primary_resource_group.location,
            resource_group_name=primary_resource_group.name,
            sku="Basic")
        vm_network_interface = azure.network.NetworkInterface("vmNetworkInterface",
            location=primary_resource_group.location,
            resource_group_name=primary_resource_group.name,
            ip_configurations=[azure.network.NetworkInterfaceIpConfigurationArgs(
                name="vm",
                subnet_id=primary_subnet.id,
                private_ip_address_allocation="Dynamic",
                public_ip_address_id=primary_public_ip.id,
            )])
        vm_virtual_machine = azure.compute.VirtualMachine("vmVirtualMachine",
            location=primary_resource_group.location,
            resource_group_name=primary_resource_group.name,
            vm_size="Standard_B1s",
            network_interface_ids=[vm_network_interface.id],
            storage_image_reference=azure.compute.VirtualMachineStorageImageReferenceArgs(
                publisher="OpenLogic",
                offer="CentOS",
                sku="7.5",
                version="latest",
            ),
            storage_os_disk=azure.compute.VirtualMachineStorageOsDiskArgs(
                name="vm-os-disk",
                os_type="Linux",
                caching="ReadWrite",
                create_option="FromImage",
                managed_disk_type="Premium_LRS",
            ),
            os_profile=azure.compute.VirtualMachineOsProfileArgs(
                admin_username="test-admin-123",
                admin_password="test-pwd-123",
                computer_name="vm",
            ),
            os_profile_linux_config=azure.compute.VirtualMachineOsProfileLinuxConfigArgs(
                disable_password_authentication=False,
            ))
        vault = azure.recoveryservices.Vault("vault",
            location=secondary_resource_group.location,
            resource_group_name=secondary_resource_group.name,
            sku="Standard")
        primary_fabric = azure.siterecovery.Fabric("primaryFabric",
            resource_group_name=secondary_resource_group.name,
            recovery_vault_name=vault.name,
            location=primary_resource_group.location)
        secondary_fabric = azure.siterecovery.Fabric("secondaryFabric",
            resource_group_name=secondary_resource_group.name,
            recovery_vault_name=vault.name,
            location=secondary_resource_group.location)
        primary_protection_container = azure.siterecovery.ProtectionContainer("primaryProtectionContainer",
            resource_group_name=secondary_resource_group.name,
            recovery_vault_name=vault.name,
            recovery_fabric_name=primary_fabric.name)
        secondary_protection_container = azure.siterecovery.ProtectionContainer("secondaryProtectionContainer",
            resource_group_name=secondary_resource_group.name,
            recovery_vault_name=vault.name,
            recovery_fabric_name=secondary_fabric.name)
        policy = azure.siterecovery.ReplicationPolicy("policy",
            resource_group_name=secondary_resource_group.name,
            recovery_vault_name=vault.name,
            recovery_point_retention_in_minutes=24 * 60,
            application_consistent_snapshot_frequency_in_minutes=4 * 60)
        container_mapping = azure.siterecovery.ProtectionContainerMapping("container-mapping",
            resource_group_name=secondary_resource_group.name,
            recovery_vault_name=vault.name,
            recovery_fabric_name=primary_fabric.name,
            recovery_source_protection_container_name=primary_protection_container.name,
            recovery_target_protection_container_id=secondary_protection_container.id,
            recovery_replication_policy_id=policy.id)
        primary_account = azure.storage.Account("primaryAccount",
            location=primary_resource_group.location,
            resource_group_name=primary_resource_group.name,
            account_tier="Standard",
            account_replication_type="LRS")
        secondary_virtual_network = azure.network.VirtualNetwork("secondaryVirtualNetwork",
            resource_group_name=secondary_resource_group.name,
            address_spaces=["192.168.2.0/24"],
            location=secondary_resource_group.location)
        secondary_subnet = azure.network.Subnet("secondarySubnet",
            resource_group_name=secondary_resource_group.name,
            virtual_network_name=secondary_virtual_network.name,
            address_prefixes=["192.168.2.0/24"])
        secondary_public_ip = azure.network.PublicIp("secondaryPublicIp",
            allocation_method="Static",
            location=secondary_resource_group.location,
            resource_group_name=secondary_resource_group.name,
            sku="Basic")
        vm_replication = azure.siterecovery.ReplicatedVM("vm-replication",
            resource_group_name=secondary_resource_group.name,
            recovery_vault_name=vault.name,
            source_recovery_fabric_name=primary_fabric.name,
            source_vm_id=vm_virtual_machine.id,
            recovery_replication_policy_id=policy.id,
            source_recovery_protection_container_name=primary_protection_container.name,
            target_resource_group_id=secondary_resource_group.id,
            target_recovery_fabric_id=secondary_fabric.id,
            target_recovery_protection_container_id=secondary_protection_container.id,
            managed_disks=[azure.siterecovery.ReplicatedVMManagedDiskArgs(
                disk_id=vm_virtual_machine.storage_os_disk.managed_disk_id,
                staging_storage_account_id=primary_account.id,
                target_resource_group_id=secondary_resource_group.id,
                target_disk_type="Premium_LRS",
                target_replica_disk_type="Premium_LRS",
            )],
            network_interfaces=[azure.siterecovery.ReplicatedVMNetworkInterfaceArgs(
                source_network_interface_id=vm_network_interface.id,
                target_subnet_name="network2-subnet",
                recovery_public_ip_address_id=secondary_public_ip.id,
            )])
        ```

        ## Import

        Site Recovery Replicated VM's can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:siterecovery/replicatedVM:ReplicatedVM vmreplication /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.RecoveryServices/vaults/recovery-vault-name/replicationFabrics/fabric-name/replicationProtectionContainers/protection-container-name/replicationProtectedItems/vm-replication-name
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReplicatedVMManagedDiskArgs']]]] managed_disks: One or more `managed_disk` block.
        :param pulumi.Input[str] name: The name of the replication for the replicated VM.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReplicatedVMNetworkInterfaceArgs']]]] network_interfaces: One or more `network_interface` block.
        :param pulumi.Input[str] recovery_vault_name: The name of the vault that should be updated.
        :param pulumi.Input[str] resource_group_name: Name of the resource group where the vault that should be updated is located.
        :param pulumi.Input[str] source_recovery_fabric_name: Name of fabric that should contains this replication.
        :param pulumi.Input[str] source_recovery_protection_container_name: Name of the protection container to use.
        :param pulumi.Input[str] source_vm_id: Id of the VM to replicate
        :param pulumi.Input[str] target_availability_set_id: Id of availability set that the new VM should belong to when a failover is done.
        :param pulumi.Input[str] target_network_id: Network to use when a failover is done (recommended to set if any network_interface is configured for failover).
        :param pulumi.Input[str] target_recovery_fabric_id: Id of fabric where the VM replication should be handled when a failover is done.
        :param pulumi.Input[str] target_recovery_protection_container_id: Id of protection container where the VM replication should be created when a failover is done.
        :param pulumi.Input[str] target_resource_group_id: Id of resource group where the VM should be created when a failover is done.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ReplicatedVMArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a VM replicated using Azure Site Recovery (Azure to Azure only). A replicated VM keeps a copiously updated image of the VM in another region in order to be able to start the VM in that region in case of a disaster.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        primary_resource_group = azure.core.ResourceGroup("primaryResourceGroup", location="West US")
        secondary_resource_group = azure.core.ResourceGroup("secondaryResourceGroup", location="East US")
        primary_virtual_network = azure.network.VirtualNetwork("primaryVirtualNetwork",
            resource_group_name=primary_resource_group.name,
            address_spaces=["192.168.1.0/24"],
            location=primary_resource_group.location)
        primary_subnet = azure.network.Subnet("primarySubnet",
            resource_group_name=primary_resource_group.name,
            virtual_network_name=primary_virtual_network.name,
            address_prefixes=["192.168.1.0/24"])
        primary_public_ip = azure.network.PublicIp("primaryPublicIp",
            allocation_method="Static",
            location=primary_resource_group.location,
            resource_group_name=primary_resource_group.name,
            sku="Basic")
        vm_network_interface = azure.network.NetworkInterface("vmNetworkInterface",
            location=primary_resource_group.location,
            resource_group_name=primary_resource_group.name,
            ip_configurations=[azure.network.NetworkInterfaceIpConfigurationArgs(
                name="vm",
                subnet_id=primary_subnet.id,
                private_ip_address_allocation="Dynamic",
                public_ip_address_id=primary_public_ip.id,
            )])
        vm_virtual_machine = azure.compute.VirtualMachine("vmVirtualMachine",
            location=primary_resource_group.location,
            resource_group_name=primary_resource_group.name,
            vm_size="Standard_B1s",
            network_interface_ids=[vm_network_interface.id],
            storage_image_reference=azure.compute.VirtualMachineStorageImageReferenceArgs(
                publisher="OpenLogic",
                offer="CentOS",
                sku="7.5",
                version="latest",
            ),
            storage_os_disk=azure.compute.VirtualMachineStorageOsDiskArgs(
                name="vm-os-disk",
                os_type="Linux",
                caching="ReadWrite",
                create_option="FromImage",
                managed_disk_type="Premium_LRS",
            ),
            os_profile=azure.compute.VirtualMachineOsProfileArgs(
                admin_username="test-admin-123",
                admin_password="test-pwd-123",
                computer_name="vm",
            ),
            os_profile_linux_config=azure.compute.VirtualMachineOsProfileLinuxConfigArgs(
                disable_password_authentication=False,
            ))
        vault = azure.recoveryservices.Vault("vault",
            location=secondary_resource_group.location,
            resource_group_name=secondary_resource_group.name,
            sku="Standard")
        primary_fabric = azure.siterecovery.Fabric("primaryFabric",
            resource_group_name=secondary_resource_group.name,
            recovery_vault_name=vault.name,
            location=primary_resource_group.location)
        secondary_fabric = azure.siterecovery.Fabric("secondaryFabric",
            resource_group_name=secondary_resource_group.name,
            recovery_vault_name=vault.name,
            location=secondary_resource_group.location)
        primary_protection_container = azure.siterecovery.ProtectionContainer("primaryProtectionContainer",
            resource_group_name=secondary_resource_group.name,
            recovery_vault_name=vault.name,
            recovery_fabric_name=primary_fabric.name)
        secondary_protection_container = azure.siterecovery.ProtectionContainer("secondaryProtectionContainer",
            resource_group_name=secondary_resource_group.name,
            recovery_vault_name=vault.name,
            recovery_fabric_name=secondary_fabric.name)
        policy = azure.siterecovery.ReplicationPolicy("policy",
            resource_group_name=secondary_resource_group.name,
            recovery_vault_name=vault.name,
            recovery_point_retention_in_minutes=24 * 60,
            application_consistent_snapshot_frequency_in_minutes=4 * 60)
        container_mapping = azure.siterecovery.ProtectionContainerMapping("container-mapping",
            resource_group_name=secondary_resource_group.name,
            recovery_vault_name=vault.name,
            recovery_fabric_name=primary_fabric.name,
            recovery_source_protection_container_name=primary_protection_container.name,
            recovery_target_protection_container_id=secondary_protection_container.id,
            recovery_replication_policy_id=policy.id)
        primary_account = azure.storage.Account("primaryAccount",
            location=primary_resource_group.location,
            resource_group_name=primary_resource_group.name,
            account_tier="Standard",
            account_replication_type="LRS")
        secondary_virtual_network = azure.network.VirtualNetwork("secondaryVirtualNetwork",
            resource_group_name=secondary_resource_group.name,
            address_spaces=["192.168.2.0/24"],
            location=secondary_resource_group.location)
        secondary_subnet = azure.network.Subnet("secondarySubnet",
            resource_group_name=secondary_resource_group.name,
            virtual_network_name=secondary_virtual_network.name,
            address_prefixes=["192.168.2.0/24"])
        secondary_public_ip = azure.network.PublicIp("secondaryPublicIp",
            allocation_method="Static",
            location=secondary_resource_group.location,
            resource_group_name=secondary_resource_group.name,
            sku="Basic")
        vm_replication = azure.siterecovery.ReplicatedVM("vm-replication",
            resource_group_name=secondary_resource_group.name,
            recovery_vault_name=vault.name,
            source_recovery_fabric_name=primary_fabric.name,
            source_vm_id=vm_virtual_machine.id,
            recovery_replication_policy_id=policy.id,
            source_recovery_protection_container_name=primary_protection_container.name,
            target_resource_group_id=secondary_resource_group.id,
            target_recovery_fabric_id=secondary_fabric.id,
            target_recovery_protection_container_id=secondary_protection_container.id,
            managed_disks=[azure.siterecovery.ReplicatedVMManagedDiskArgs(
                disk_id=vm_virtual_machine.storage_os_disk.managed_disk_id,
                staging_storage_account_id=primary_account.id,
                target_resource_group_id=secondary_resource_group.id,
                target_disk_type="Premium_LRS",
                target_replica_disk_type="Premium_LRS",
            )],
            network_interfaces=[azure.siterecovery.ReplicatedVMNetworkInterfaceArgs(
                source_network_interface_id=vm_network_interface.id,
                target_subnet_name="network2-subnet",
                recovery_public_ip_address_id=secondary_public_ip.id,
            )])
        ```

        ## Import

        Site Recovery Replicated VM's can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:siterecovery/replicatedVM:ReplicatedVM vmreplication /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.RecoveryServices/vaults/recovery-vault-name/replicationFabrics/fabric-name/replicationProtectionContainers/protection-container-name/replicationProtectedItems/vm-replication-name
        ```

        :param str resource_name: The name of the resource.
        :param ReplicatedVMArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ReplicatedVMArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 managed_disks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReplicatedVMManagedDiskArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReplicatedVMNetworkInterfaceArgs']]]]] = None,
                 recovery_replication_policy_id: Optional[pulumi.Input[str]] = None,
                 recovery_vault_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 source_recovery_fabric_name: Optional[pulumi.Input[str]] = None,
                 source_recovery_protection_container_name: Optional[pulumi.Input[str]] = None,
                 source_vm_id: Optional[pulumi.Input[str]] = None,
                 target_availability_set_id: Optional[pulumi.Input[str]] = None,
                 target_network_id: Optional[pulumi.Input[str]] = None,
                 target_recovery_fabric_id: Optional[pulumi.Input[str]] = None,
                 target_recovery_protection_container_id: Optional[pulumi.Input[str]] = None,
                 target_resource_group_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ReplicatedVMArgs.__new__(ReplicatedVMArgs)

            __props__.__dict__["managed_disks"] = managed_disks
            __props__.__dict__["name"] = name
            __props__.__dict__["network_interfaces"] = network_interfaces
            if recovery_replication_policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'recovery_replication_policy_id'")
            __props__.__dict__["recovery_replication_policy_id"] = recovery_replication_policy_id
            if recovery_vault_name is None and not opts.urn:
                raise TypeError("Missing required property 'recovery_vault_name'")
            __props__.__dict__["recovery_vault_name"] = recovery_vault_name
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            if source_recovery_fabric_name is None and not opts.urn:
                raise TypeError("Missing required property 'source_recovery_fabric_name'")
            __props__.__dict__["source_recovery_fabric_name"] = source_recovery_fabric_name
            if source_recovery_protection_container_name is None and not opts.urn:
                raise TypeError("Missing required property 'source_recovery_protection_container_name'")
            __props__.__dict__["source_recovery_protection_container_name"] = source_recovery_protection_container_name
            if source_vm_id is None and not opts.urn:
                raise TypeError("Missing required property 'source_vm_id'")
            __props__.__dict__["source_vm_id"] = source_vm_id
            __props__.__dict__["target_availability_set_id"] = target_availability_set_id
            __props__.__dict__["target_network_id"] = target_network_id
            if target_recovery_fabric_id is None and not opts.urn:
                raise TypeError("Missing required property 'target_recovery_fabric_id'")
            __props__.__dict__["target_recovery_fabric_id"] = target_recovery_fabric_id
            if target_recovery_protection_container_id is None and not opts.urn:
                raise TypeError("Missing required property 'target_recovery_protection_container_id'")
            __props__.__dict__["target_recovery_protection_container_id"] = target_recovery_protection_container_id
            if target_resource_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'target_resource_group_id'")
            __props__.__dict__["target_resource_group_id"] = target_resource_group_id
        super(ReplicatedVM, __self__).__init__(
            'azure:siterecovery/replicatedVM:ReplicatedVM',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            managed_disks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReplicatedVMManagedDiskArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReplicatedVMNetworkInterfaceArgs']]]]] = None,
            recovery_replication_policy_id: Optional[pulumi.Input[str]] = None,
            recovery_vault_name: Optional[pulumi.Input[str]] = None,
            resource_group_name: Optional[pulumi.Input[str]] = None,
            source_recovery_fabric_name: Optional[pulumi.Input[str]] = None,
            source_recovery_protection_container_name: Optional[pulumi.Input[str]] = None,
            source_vm_id: Optional[pulumi.Input[str]] = None,
            target_availability_set_id: Optional[pulumi.Input[str]] = None,
            target_network_id: Optional[pulumi.Input[str]] = None,
            target_recovery_fabric_id: Optional[pulumi.Input[str]] = None,
            target_recovery_protection_container_id: Optional[pulumi.Input[str]] = None,
            target_resource_group_id: Optional[pulumi.Input[str]] = None) -> 'ReplicatedVM':
        """
        Get an existing ReplicatedVM resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReplicatedVMManagedDiskArgs']]]] managed_disks: One or more `managed_disk` block.
        :param pulumi.Input[str] name: The name of the replication for the replicated VM.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReplicatedVMNetworkInterfaceArgs']]]] network_interfaces: One or more `network_interface` block.
        :param pulumi.Input[str] recovery_vault_name: The name of the vault that should be updated.
        :param pulumi.Input[str] resource_group_name: Name of the resource group where the vault that should be updated is located.
        :param pulumi.Input[str] source_recovery_fabric_name: Name of fabric that should contains this replication.
        :param pulumi.Input[str] source_recovery_protection_container_name: Name of the protection container to use.
        :param pulumi.Input[str] source_vm_id: Id of the VM to replicate
        :param pulumi.Input[str] target_availability_set_id: Id of availability set that the new VM should belong to when a failover is done.
        :param pulumi.Input[str] target_network_id: Network to use when a failover is done (recommended to set if any network_interface is configured for failover).
        :param pulumi.Input[str] target_recovery_fabric_id: Id of fabric where the VM replication should be handled when a failover is done.
        :param pulumi.Input[str] target_recovery_protection_container_id: Id of protection container where the VM replication should be created when a failover is done.
        :param pulumi.Input[str] target_resource_group_id: Id of resource group where the VM should be created when a failover is done.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ReplicatedVMState.__new__(_ReplicatedVMState)

        __props__.__dict__["managed_disks"] = managed_disks
        __props__.__dict__["name"] = name
        __props__.__dict__["network_interfaces"] = network_interfaces
        __props__.__dict__["recovery_replication_policy_id"] = recovery_replication_policy_id
        __props__.__dict__["recovery_vault_name"] = recovery_vault_name
        __props__.__dict__["resource_group_name"] = resource_group_name
        __props__.__dict__["source_recovery_fabric_name"] = source_recovery_fabric_name
        __props__.__dict__["source_recovery_protection_container_name"] = source_recovery_protection_container_name
        __props__.__dict__["source_vm_id"] = source_vm_id
        __props__.__dict__["target_availability_set_id"] = target_availability_set_id
        __props__.__dict__["target_network_id"] = target_network_id
        __props__.__dict__["target_recovery_fabric_id"] = target_recovery_fabric_id
        __props__.__dict__["target_recovery_protection_container_id"] = target_recovery_protection_container_id
        __props__.__dict__["target_resource_group_id"] = target_resource_group_id
        return ReplicatedVM(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="managedDisks")
    def managed_disks(self) -> pulumi.Output[Optional[Sequence['outputs.ReplicatedVMManagedDisk']]]:
        """
        One or more `managed_disk` block.
        """
        return pulumi.get(self, "managed_disks")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the replication for the replicated VM.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> pulumi.Output[Sequence['outputs.ReplicatedVMNetworkInterface']]:
        """
        One or more `network_interface` block.
        """
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter(name="recoveryReplicationPolicyId")
    def recovery_replication_policy_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "recovery_replication_policy_id")

    @property
    @pulumi.getter(name="recoveryVaultName")
    def recovery_vault_name(self) -> pulumi.Output[str]:
        """
        The name of the vault that should be updated.
        """
        return pulumi.get(self, "recovery_vault_name")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[str]:
        """
        Name of the resource group where the vault that should be updated is located.
        """
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="sourceRecoveryFabricName")
    def source_recovery_fabric_name(self) -> pulumi.Output[str]:
        """
        Name of fabric that should contains this replication.
        """
        return pulumi.get(self, "source_recovery_fabric_name")

    @property
    @pulumi.getter(name="sourceRecoveryProtectionContainerName")
    def source_recovery_protection_container_name(self) -> pulumi.Output[str]:
        """
        Name of the protection container to use.
        """
        return pulumi.get(self, "source_recovery_protection_container_name")

    @property
    @pulumi.getter(name="sourceVmId")
    def source_vm_id(self) -> pulumi.Output[str]:
        """
        Id of the VM to replicate
        """
        return pulumi.get(self, "source_vm_id")

    @property
    @pulumi.getter(name="targetAvailabilitySetId")
    def target_availability_set_id(self) -> pulumi.Output[Optional[str]]:
        """
        Id of availability set that the new VM should belong to when a failover is done.
        """
        return pulumi.get(self, "target_availability_set_id")

    @property
    @pulumi.getter(name="targetNetworkId")
    def target_network_id(self) -> pulumi.Output[str]:
        """
        Network to use when a failover is done (recommended to set if any network_interface is configured for failover).
        """
        return pulumi.get(self, "target_network_id")

    @property
    @pulumi.getter(name="targetRecoveryFabricId")
    def target_recovery_fabric_id(self) -> pulumi.Output[str]:
        """
        Id of fabric where the VM replication should be handled when a failover is done.
        """
        return pulumi.get(self, "target_recovery_fabric_id")

    @property
    @pulumi.getter(name="targetRecoveryProtectionContainerId")
    def target_recovery_protection_container_id(self) -> pulumi.Output[str]:
        """
        Id of protection container where the VM replication should be created when a failover is done.
        """
        return pulumi.get(self, "target_recovery_protection_container_id")

    @property
    @pulumi.getter(name="targetResourceGroupId")
    def target_resource_group_id(self) -> pulumi.Output[str]:
        """
        Id of resource group where the VM should be created when a failover is done.
        """
        return pulumi.get(self, "target_resource_group_id")

