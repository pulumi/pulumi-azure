# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'FunctionJavaScriptUDFInput',
    'FunctionJavaScriptUDFOutput',
    'FunctionJavascriptUdaInput',
    'FunctionJavascriptUdaOutput',
    'JobIdentity',
    'JobJobStorageAccount',
    'OutputBlobSerialization',
    'OutputEventHubSerialization',
    'OutputServiceBusQueueSerialization',
    'OutputServicebusTopicSerialization',
    'ReferenceInputBlobSerialization',
    'StreamInputBlobSerialization',
    'StreamInputEventHubSerialization',
    'StreamInputEventHubV2Serialization',
    'StreamInputIotHubSerialization',
    'GetJobIdentityResult',
]

@pulumi.output_type
class FunctionJavaScriptUDFInput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configurationParameter":
            suggest = "configuration_parameter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionJavaScriptUDFInput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionJavaScriptUDFInput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionJavaScriptUDFInput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 configuration_parameter: Optional[bool] = None):
        """
        :param str type: The Data Type for the Input Argument of this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
        :param bool configuration_parameter: Is this input parameter a configuration parameter? Defaults to `false`.
        """
        FunctionJavaScriptUDFInput._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            configuration_parameter=configuration_parameter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             configuration_parameter: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if configuration_parameter is not None:
            _setter("configuration_parameter", configuration_parameter)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The Data Type for the Input Argument of this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="configurationParameter")
    def configuration_parameter(self) -> Optional[bool]:
        """
        Is this input parameter a configuration parameter? Defaults to `false`.
        """
        return pulumi.get(self, "configuration_parameter")


@pulumi.output_type
class FunctionJavaScriptUDFOutput(dict):
    def __init__(__self__, *,
                 type: str):
        """
        :param str type: The Data Type output from this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
        """
        FunctionJavaScriptUDFOutput._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The Data Type output from this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class FunctionJavascriptUdaInput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configurationParameter":
            suggest = "configuration_parameter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionJavascriptUdaInput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionJavascriptUdaInput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionJavascriptUdaInput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 configuration_parameter: Optional[bool] = None):
        """
        :param str type: The input data type of this JavaScript Function. Possible values include `any`, `array`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
        :param bool configuration_parameter: Is this input parameter a configuration parameter? Defaults to `false`.
        """
        FunctionJavascriptUdaInput._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            configuration_parameter=configuration_parameter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             configuration_parameter: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if configuration_parameter is not None:
            _setter("configuration_parameter", configuration_parameter)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The input data type of this JavaScript Function. Possible values include `any`, `array`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="configurationParameter")
    def configuration_parameter(self) -> Optional[bool]:
        """
        Is this input parameter a configuration parameter? Defaults to `false`.
        """
        return pulumi.get(self, "configuration_parameter")


@pulumi.output_type
class FunctionJavascriptUdaOutput(dict):
    def __init__(__self__, *,
                 type: str):
        """
        :param str type: The output data type from this JavaScript Function. Possible values include `any`, `array`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
        """
        FunctionJavascriptUdaOutput._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The output data type from this JavaScript Function. Possible values include `any`, `array`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class JobIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 principal_id: Optional[str] = None,
                 tenant_id: Optional[str] = None):
        """
        :param str type: Specifies the type of Managed Service Identity that should be configured on this Stream Analytics Job. The only possible value is `SystemAssigned`.
        :param str principal_id: The Principal ID associated with this Managed Service Identity.
        :param str tenant_id: The Tenant ID associated with this Managed Service Identity.
        """
        JobIdentity._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            principal_id=principal_id,
            tenant_id=tenant_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             principal_id: Optional[str] = None,
             tenant_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if principal_id is not None:
            _setter("principal_id", principal_id)
        if tenant_id is not None:
            _setter("tenant_id", tenant_id)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the type of Managed Service Identity that should be configured on this Stream Analytics Job. The only possible value is `SystemAssigned`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[str]:
        """
        The Principal ID associated with this Managed Service Identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        """
        The Tenant ID associated with this Managed Service Identity.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class JobJobStorageAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountKey":
            suggest = "account_key"
        elif key == "accountName":
            suggest = "account_name"
        elif key == "authenticationMode":
            suggest = "authentication_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobStorageAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobStorageAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobStorageAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_key: str,
                 account_name: str,
                 authentication_mode: Optional[str] = None):
        """
        :param str account_key: The account key for the Azure storage account.
        :param str account_name: The name of the Azure storage account.
        :param str authentication_mode: The authentication mode of the storage account. The only supported value is `ConnectionString`. Defaults to `ConnectionString`.
        """
        JobJobStorageAccount._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_key=account_key,
            account_name=account_name,
            authentication_mode=authentication_mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_key: str,
             account_name: str,
             authentication_mode: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("account_key", account_key)
        _setter("account_name", account_name)
        if authentication_mode is not None:
            _setter("authentication_mode", authentication_mode)

    @property
    @pulumi.getter(name="accountKey")
    def account_key(self) -> str:
        """
        The account key for the Azure storage account.
        """
        return pulumi.get(self, "account_key")

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        The name of the Azure storage account.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="authenticationMode")
    def authentication_mode(self) -> Optional[str]:
        """
        The authentication mode of the storage account. The only supported value is `ConnectionString`. Defaults to `ConnectionString`.
        """
        return pulumi.get(self, "authentication_mode")


@pulumi.output_type
class OutputBlobSerialization(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldDelimiter":
            suggest = "field_delimiter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OutputBlobSerialization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OutputBlobSerialization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OutputBlobSerialization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 encoding: Optional[str] = None,
                 field_delimiter: Optional[str] = None,
                 format: Optional[str] = None):
        """
        :param str type: The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv`, `Json` and `Parquet`.
               
               > **NOTE:** `batch_max_wait_time` and `batch_min_rows` are required when `type` is set to `Parquet`
        :param str encoding: The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
               
               > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
        :param str field_delimiter: The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
               
               > **NOTE:** This is required when `type` is set to `Csv`.
        :param str format: Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
               
               > **NOTE:** This is Required and can only be specified when `type` is set to `Json`.
        """
        OutputBlobSerialization._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            encoding=encoding,
            field_delimiter=field_delimiter,
            format=format,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             encoding: Optional[str] = None,
             field_delimiter: Optional[str] = None,
             format: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if encoding is not None:
            _setter("encoding", encoding)
        if field_delimiter is not None:
            _setter("field_delimiter", field_delimiter)
        if format is not None:
            _setter("format", format)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv`, `Json` and `Parquet`.

        > **NOTE:** `batch_max_wait_time` and `batch_min_rows` are required when `type` is set to `Parquet`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def encoding(self) -> Optional[str]:
        """
        The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.

        > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
        """
        return pulumi.get(self, "encoding")

    @property
    @pulumi.getter(name="fieldDelimiter")
    def field_delimiter(self) -> Optional[str]:
        """
        The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.

        > **NOTE:** This is required when `type` is set to `Csv`.
        """
        return pulumi.get(self, "field_delimiter")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.

        > **NOTE:** This is Required and can only be specified when `type` is set to `Json`.
        """
        return pulumi.get(self, "format")


@pulumi.output_type
class OutputEventHubSerialization(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldDelimiter":
            suggest = "field_delimiter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OutputEventHubSerialization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OutputEventHubSerialization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OutputEventHubSerialization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 encoding: Optional[str] = None,
                 field_delimiter: Optional[str] = None,
                 format: Optional[str] = None):
        """
        :param str type: The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv`, `Json` and `Parquet`.
        :param str encoding: The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
               
               > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
        :param str field_delimiter: The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
               
               > **NOTE:** This is required when `type` is set to `Csv`.
        :param str format: Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
               
               > **NOTE:** This is Required and can only be specified when `type` is set to `Json`.
        """
        OutputEventHubSerialization._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            encoding=encoding,
            field_delimiter=field_delimiter,
            format=format,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             encoding: Optional[str] = None,
             field_delimiter: Optional[str] = None,
             format: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if encoding is not None:
            _setter("encoding", encoding)
        if field_delimiter is not None:
            _setter("field_delimiter", field_delimiter)
        if format is not None:
            _setter("format", format)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv`, `Json` and `Parquet`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def encoding(self) -> Optional[str]:
        """
        The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.

        > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
        """
        return pulumi.get(self, "encoding")

    @property
    @pulumi.getter(name="fieldDelimiter")
    def field_delimiter(self) -> Optional[str]:
        """
        The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.

        > **NOTE:** This is required when `type` is set to `Csv`.
        """
        return pulumi.get(self, "field_delimiter")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.

        > **NOTE:** This is Required and can only be specified when `type` is set to `Json`.
        """
        return pulumi.get(self, "format")


@pulumi.output_type
class OutputServiceBusQueueSerialization(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldDelimiter":
            suggest = "field_delimiter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OutputServiceBusQueueSerialization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OutputServiceBusQueueSerialization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OutputServiceBusQueueSerialization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 encoding: Optional[str] = None,
                 field_delimiter: Optional[str] = None,
                 format: Optional[str] = None):
        """
        :param str type: The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv`, `Json` and `Parquet`.
        :param str encoding: The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
               
               > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
        :param str field_delimiter: The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
               
               > **NOTE:** This is required when `type` is set to `Csv`.
        :param str format: Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
               
               > **NOTE:** This is Required and can only be specified when `type` is set to `Json`.
        """
        OutputServiceBusQueueSerialization._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            encoding=encoding,
            field_delimiter=field_delimiter,
            format=format,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             encoding: Optional[str] = None,
             field_delimiter: Optional[str] = None,
             format: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if encoding is not None:
            _setter("encoding", encoding)
        if field_delimiter is not None:
            _setter("field_delimiter", field_delimiter)
        if format is not None:
            _setter("format", format)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv`, `Json` and `Parquet`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def encoding(self) -> Optional[str]:
        """
        The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.

        > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
        """
        return pulumi.get(self, "encoding")

    @property
    @pulumi.getter(name="fieldDelimiter")
    def field_delimiter(self) -> Optional[str]:
        """
        The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.

        > **NOTE:** This is required when `type` is set to `Csv`.
        """
        return pulumi.get(self, "field_delimiter")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.

        > **NOTE:** This is Required and can only be specified when `type` is set to `Json`.
        """
        return pulumi.get(self, "format")


@pulumi.output_type
class OutputServicebusTopicSerialization(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldDelimiter":
            suggest = "field_delimiter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OutputServicebusTopicSerialization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OutputServicebusTopicSerialization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OutputServicebusTopicSerialization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 encoding: Optional[str] = None,
                 field_delimiter: Optional[str] = None,
                 format: Optional[str] = None):
        """
        :param str type: The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv`, `Json` and `Parquet`.
        :param str encoding: The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
               
               > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
        :param str field_delimiter: The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
               
               > **NOTE:** This is required when `type` is set to `Csv`.
        :param str format: Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
               
               > **NOTE:** This is Required and can only be specified when `type` is set to `Json`.
        """
        OutputServicebusTopicSerialization._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            encoding=encoding,
            field_delimiter=field_delimiter,
            format=format,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             encoding: Optional[str] = None,
             field_delimiter: Optional[str] = None,
             format: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if encoding is not None:
            _setter("encoding", encoding)
        if field_delimiter is not None:
            _setter("field_delimiter", field_delimiter)
        if format is not None:
            _setter("format", format)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv`, `Json` and `Parquet`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def encoding(self) -> Optional[str]:
        """
        The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.

        > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
        """
        return pulumi.get(self, "encoding")

    @property
    @pulumi.getter(name="fieldDelimiter")
    def field_delimiter(self) -> Optional[str]:
        """
        The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.

        > **NOTE:** This is required when `type` is set to `Csv`.
        """
        return pulumi.get(self, "field_delimiter")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.

        > **NOTE:** This is Required and can only be specified when `type` is set to `Json`.
        """
        return pulumi.get(self, "format")


@pulumi.output_type
class ReferenceInputBlobSerialization(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldDelimiter":
            suggest = "field_delimiter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReferenceInputBlobSerialization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReferenceInputBlobSerialization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReferenceInputBlobSerialization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 encoding: Optional[str] = None,
                 field_delimiter: Optional[str] = None):
        """
        :param str type: The serialization format used for the reference data. Possible values are `Avro`, `Csv` and `Json`.
        :param str encoding: The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
               
               > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
        :param str field_delimiter: The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
               
               > **NOTE:** This is required when `type` is set to `Csv`.
        """
        ReferenceInputBlobSerialization._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            encoding=encoding,
            field_delimiter=field_delimiter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             encoding: Optional[str] = None,
             field_delimiter: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if encoding is not None:
            _setter("encoding", encoding)
        if field_delimiter is not None:
            _setter("field_delimiter", field_delimiter)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The serialization format used for the reference data. Possible values are `Avro`, `Csv` and `Json`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def encoding(self) -> Optional[str]:
        """
        The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.

        > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
        """
        return pulumi.get(self, "encoding")

    @property
    @pulumi.getter(name="fieldDelimiter")
    def field_delimiter(self) -> Optional[str]:
        """
        The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.

        > **NOTE:** This is required when `type` is set to `Csv`.
        """
        return pulumi.get(self, "field_delimiter")


@pulumi.output_type
class StreamInputBlobSerialization(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldDelimiter":
            suggest = "field_delimiter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StreamInputBlobSerialization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StreamInputBlobSerialization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StreamInputBlobSerialization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 encoding: Optional[str] = None,
                 field_delimiter: Optional[str] = None):
        """
        :param str type: The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
        :param str encoding: The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
               
               > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
        :param str field_delimiter: The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
               
               > **NOTE:** This is required when `type` is set to `Csv`.
        """
        StreamInputBlobSerialization._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            encoding=encoding,
            field_delimiter=field_delimiter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             encoding: Optional[str] = None,
             field_delimiter: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if encoding is not None:
            _setter("encoding", encoding)
        if field_delimiter is not None:
            _setter("field_delimiter", field_delimiter)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def encoding(self) -> Optional[str]:
        """
        The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.

        > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
        """
        return pulumi.get(self, "encoding")

    @property
    @pulumi.getter(name="fieldDelimiter")
    def field_delimiter(self) -> Optional[str]:
        """
        The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.

        > **NOTE:** This is required when `type` is set to `Csv`.
        """
        return pulumi.get(self, "field_delimiter")


@pulumi.output_type
class StreamInputEventHubSerialization(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldDelimiter":
            suggest = "field_delimiter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StreamInputEventHubSerialization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StreamInputEventHubSerialization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StreamInputEventHubSerialization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 encoding: Optional[str] = None,
                 field_delimiter: Optional[str] = None):
        """
        :param str type: The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
        :param str encoding: The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
               
               > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
        :param str field_delimiter: The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
               
               > **NOTE:** This is required when `type` is set to `Csv`.
        """
        StreamInputEventHubSerialization._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            encoding=encoding,
            field_delimiter=field_delimiter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             encoding: Optional[str] = None,
             field_delimiter: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if encoding is not None:
            _setter("encoding", encoding)
        if field_delimiter is not None:
            _setter("field_delimiter", field_delimiter)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def encoding(self) -> Optional[str]:
        """
        The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.

        > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
        """
        return pulumi.get(self, "encoding")

    @property
    @pulumi.getter(name="fieldDelimiter")
    def field_delimiter(self) -> Optional[str]:
        """
        The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.

        > **NOTE:** This is required when `type` is set to `Csv`.
        """
        return pulumi.get(self, "field_delimiter")


@pulumi.output_type
class StreamInputEventHubV2Serialization(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldDelimiter":
            suggest = "field_delimiter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StreamInputEventHubV2Serialization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StreamInputEventHubV2Serialization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StreamInputEventHubV2Serialization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 encoding: Optional[str] = None,
                 field_delimiter: Optional[str] = None):
        """
        :param str type: The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
        :param str encoding: The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
               
               > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
        :param str field_delimiter: The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
               
               > **NOTE:** This is required when `type` is set to `Csv`.
        """
        StreamInputEventHubV2Serialization._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            encoding=encoding,
            field_delimiter=field_delimiter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             encoding: Optional[str] = None,
             field_delimiter: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if encoding is not None:
            _setter("encoding", encoding)
        if field_delimiter is not None:
            _setter("field_delimiter", field_delimiter)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def encoding(self) -> Optional[str]:
        """
        The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.

        > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
        """
        return pulumi.get(self, "encoding")

    @property
    @pulumi.getter(name="fieldDelimiter")
    def field_delimiter(self) -> Optional[str]:
        """
        The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.

        > **NOTE:** This is required when `type` is set to `Csv`.
        """
        return pulumi.get(self, "field_delimiter")


@pulumi.output_type
class StreamInputIotHubSerialization(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldDelimiter":
            suggest = "field_delimiter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StreamInputIotHubSerialization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StreamInputIotHubSerialization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StreamInputIotHubSerialization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 encoding: Optional[str] = None,
                 field_delimiter: Optional[str] = None):
        """
        :param str type: The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
        :param str encoding: The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
               
               > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
        :param str field_delimiter: The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
               
               > **NOTE:** This is required when `type` is set to `Csv`.
        """
        StreamInputIotHubSerialization._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            encoding=encoding,
            field_delimiter=field_delimiter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             encoding: Optional[str] = None,
             field_delimiter: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if encoding is not None:
            _setter("encoding", encoding)
        if field_delimiter is not None:
            _setter("field_delimiter", field_delimiter)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def encoding(self) -> Optional[str]:
        """
        The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.

        > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
        """
        return pulumi.get(self, "encoding")

    @property
    @pulumi.getter(name="fieldDelimiter")
    def field_delimiter(self) -> Optional[str]:
        """
        The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.

        > **NOTE:** This is required when `type` is set to `Csv`.
        """
        return pulumi.get(self, "field_delimiter")


@pulumi.output_type
class GetJobIdentityResult(dict):
    def __init__(__self__, *,
                 principal_id: str,
                 tenant_id: str,
                 type: str):
        """
        :param str principal_id: The Principal ID associated with this Managed Service Identity.
        :param str tenant_id: The Tenant ID associated with this Managed Service Identity.
        :param str type: The identity type of this Managed Service Identity.
        """
        GetJobIdentityResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            principal_id=principal_id,
            tenant_id=tenant_id,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             principal_id: str,
             tenant_id: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("principal_id", principal_id)
        _setter("tenant_id", tenant_id)
        _setter("type", type)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The Principal ID associated with this Managed Service Identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The Tenant ID associated with this Managed Service Identity.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The identity type of this Managed Service Identity.
        """
        return pulumi.get(self, "type")


