# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['CosmosdbDataConnectionArgs', 'CosmosdbDataConnection']

@pulumi.input_type
class CosmosdbDataConnectionArgs:
    def __init__(__self__, *,
                 cosmosdb_container_id: pulumi.Input[str],
                 kusto_database_id: pulumi.Input[str],
                 managed_identity_id: pulumi.Input[str],
                 table_name: pulumi.Input[str],
                 location: Optional[pulumi.Input[str]] = None,
                 mapping_rule_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 retrieval_start_date: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CosmosdbDataConnection resource.
        :param pulumi.Input[str] cosmosdb_container_id: The name of an existing container in the Cosmos DB database. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] kusto_database_id: The name of the database in the Kusto cluster. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] managed_identity_id: The resource ID of a managed system or user-assigned identity. The identity is used to authenticate with Cosmos DB. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] table_name: The case-sensitive name of the existing target table in your cluster. Retrieved data is ingested into this table. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] location: The Azure Region where the Data Explorer should exist. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] mapping_rule_name: The name of an existing mapping rule to use when ingesting the retrieved data. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] name: The name of the data connection. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] retrieval_start_date: If defined, the data connection retrieves Cosmos DB documents created or updated after the specified retrieval start date. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        CosmosdbDataConnectionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cosmosdb_container_id=cosmosdb_container_id,
            kusto_database_id=kusto_database_id,
            managed_identity_id=managed_identity_id,
            table_name=table_name,
            location=location,
            mapping_rule_name=mapping_rule_name,
            name=name,
            retrieval_start_date=retrieval_start_date,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cosmosdb_container_id: Optional[pulumi.Input[str]] = None,
             kusto_database_id: Optional[pulumi.Input[str]] = None,
             managed_identity_id: Optional[pulumi.Input[str]] = None,
             table_name: Optional[pulumi.Input[str]] = None,
             location: Optional[pulumi.Input[str]] = None,
             mapping_rule_name: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             retrieval_start_date: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if cosmosdb_container_id is None and 'cosmosdbContainerId' in kwargs:
            cosmosdb_container_id = kwargs['cosmosdbContainerId']
        if cosmosdb_container_id is None:
            raise TypeError("Missing 'cosmosdb_container_id' argument")
        if kusto_database_id is None and 'kustoDatabaseId' in kwargs:
            kusto_database_id = kwargs['kustoDatabaseId']
        if kusto_database_id is None:
            raise TypeError("Missing 'kusto_database_id' argument")
        if managed_identity_id is None and 'managedIdentityId' in kwargs:
            managed_identity_id = kwargs['managedIdentityId']
        if managed_identity_id is None:
            raise TypeError("Missing 'managed_identity_id' argument")
        if table_name is None and 'tableName' in kwargs:
            table_name = kwargs['tableName']
        if table_name is None:
            raise TypeError("Missing 'table_name' argument")
        if mapping_rule_name is None and 'mappingRuleName' in kwargs:
            mapping_rule_name = kwargs['mappingRuleName']
        if retrieval_start_date is None and 'retrievalStartDate' in kwargs:
            retrieval_start_date = kwargs['retrievalStartDate']

        _setter("cosmosdb_container_id", cosmosdb_container_id)
        _setter("kusto_database_id", kusto_database_id)
        _setter("managed_identity_id", managed_identity_id)
        _setter("table_name", table_name)
        if location is not None:
            _setter("location", location)
        if mapping_rule_name is not None:
            _setter("mapping_rule_name", mapping_rule_name)
        if name is not None:
            _setter("name", name)
        if retrieval_start_date is not None:
            _setter("retrieval_start_date", retrieval_start_date)

    @property
    @pulumi.getter(name="cosmosdbContainerId")
    def cosmosdb_container_id(self) -> pulumi.Input[str]:
        """
        The name of an existing container in the Cosmos DB database. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        return pulumi.get(self, "cosmosdb_container_id")

    @cosmosdb_container_id.setter
    def cosmosdb_container_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cosmosdb_container_id", value)

    @property
    @pulumi.getter(name="kustoDatabaseId")
    def kusto_database_id(self) -> pulumi.Input[str]:
        """
        The name of the database in the Kusto cluster. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        return pulumi.get(self, "kusto_database_id")

    @kusto_database_id.setter
    def kusto_database_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "kusto_database_id", value)

    @property
    @pulumi.getter(name="managedIdentityId")
    def managed_identity_id(self) -> pulumi.Input[str]:
        """
        The resource ID of a managed system or user-assigned identity. The identity is used to authenticate with Cosmos DB. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        return pulumi.get(self, "managed_identity_id")

    @managed_identity_id.setter
    def managed_identity_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "managed_identity_id", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> pulumi.Input[str]:
        """
        The case-sensitive name of the existing target table in your cluster. Retrieved data is ingested into this table. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "table_name", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The Azure Region where the Data Explorer should exist. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="mappingRuleName")
    def mapping_rule_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of an existing mapping rule to use when ingesting the retrieved data. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        return pulumi.get(self, "mapping_rule_name")

    @mapping_rule_name.setter
    def mapping_rule_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mapping_rule_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the data connection. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="retrievalStartDate")
    def retrieval_start_date(self) -> Optional[pulumi.Input[str]]:
        """
        If defined, the data connection retrieves Cosmos DB documents created or updated after the specified retrieval start date. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        return pulumi.get(self, "retrieval_start_date")

    @retrieval_start_date.setter
    def retrieval_start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "retrieval_start_date", value)


@pulumi.input_type
class _CosmosdbDataConnectionState:
    def __init__(__self__, *,
                 cosmosdb_container_id: Optional[pulumi.Input[str]] = None,
                 kusto_database_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 managed_identity_id: Optional[pulumi.Input[str]] = None,
                 mapping_rule_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 retrieval_start_date: Optional[pulumi.Input[str]] = None,
                 table_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CosmosdbDataConnection resources.
        :param pulumi.Input[str] cosmosdb_container_id: The name of an existing container in the Cosmos DB database. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] kusto_database_id: The name of the database in the Kusto cluster. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] location: The Azure Region where the Data Explorer should exist. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] managed_identity_id: The resource ID of a managed system or user-assigned identity. The identity is used to authenticate with Cosmos DB. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] mapping_rule_name: The name of an existing mapping rule to use when ingesting the retrieved data. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] name: The name of the data connection. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] retrieval_start_date: If defined, the data connection retrieves Cosmos DB documents created or updated after the specified retrieval start date. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] table_name: The case-sensitive name of the existing target table in your cluster. Retrieved data is ingested into this table. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        _CosmosdbDataConnectionState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cosmosdb_container_id=cosmosdb_container_id,
            kusto_database_id=kusto_database_id,
            location=location,
            managed_identity_id=managed_identity_id,
            mapping_rule_name=mapping_rule_name,
            name=name,
            retrieval_start_date=retrieval_start_date,
            table_name=table_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cosmosdb_container_id: Optional[pulumi.Input[str]] = None,
             kusto_database_id: Optional[pulumi.Input[str]] = None,
             location: Optional[pulumi.Input[str]] = None,
             managed_identity_id: Optional[pulumi.Input[str]] = None,
             mapping_rule_name: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             retrieval_start_date: Optional[pulumi.Input[str]] = None,
             table_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if cosmosdb_container_id is None and 'cosmosdbContainerId' in kwargs:
            cosmosdb_container_id = kwargs['cosmosdbContainerId']
        if kusto_database_id is None and 'kustoDatabaseId' in kwargs:
            kusto_database_id = kwargs['kustoDatabaseId']
        if managed_identity_id is None and 'managedIdentityId' in kwargs:
            managed_identity_id = kwargs['managedIdentityId']
        if mapping_rule_name is None and 'mappingRuleName' in kwargs:
            mapping_rule_name = kwargs['mappingRuleName']
        if retrieval_start_date is None and 'retrievalStartDate' in kwargs:
            retrieval_start_date = kwargs['retrievalStartDate']
        if table_name is None and 'tableName' in kwargs:
            table_name = kwargs['tableName']

        if cosmosdb_container_id is not None:
            _setter("cosmosdb_container_id", cosmosdb_container_id)
        if kusto_database_id is not None:
            _setter("kusto_database_id", kusto_database_id)
        if location is not None:
            _setter("location", location)
        if managed_identity_id is not None:
            _setter("managed_identity_id", managed_identity_id)
        if mapping_rule_name is not None:
            _setter("mapping_rule_name", mapping_rule_name)
        if name is not None:
            _setter("name", name)
        if retrieval_start_date is not None:
            _setter("retrieval_start_date", retrieval_start_date)
        if table_name is not None:
            _setter("table_name", table_name)

    @property
    @pulumi.getter(name="cosmosdbContainerId")
    def cosmosdb_container_id(self) -> Optional[pulumi.Input[str]]:
        """
        The name of an existing container in the Cosmos DB database. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        return pulumi.get(self, "cosmosdb_container_id")

    @cosmosdb_container_id.setter
    def cosmosdb_container_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cosmosdb_container_id", value)

    @property
    @pulumi.getter(name="kustoDatabaseId")
    def kusto_database_id(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the database in the Kusto cluster. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        return pulumi.get(self, "kusto_database_id")

    @kusto_database_id.setter
    def kusto_database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kusto_database_id", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The Azure Region where the Data Explorer should exist. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="managedIdentityId")
    def managed_identity_id(self) -> Optional[pulumi.Input[str]]:
        """
        The resource ID of a managed system or user-assigned identity. The identity is used to authenticate with Cosmos DB. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        return pulumi.get(self, "managed_identity_id")

    @managed_identity_id.setter
    def managed_identity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "managed_identity_id", value)

    @property
    @pulumi.getter(name="mappingRuleName")
    def mapping_rule_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of an existing mapping rule to use when ingesting the retrieved data. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        return pulumi.get(self, "mapping_rule_name")

    @mapping_rule_name.setter
    def mapping_rule_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mapping_rule_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the data connection. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="retrievalStartDate")
    def retrieval_start_date(self) -> Optional[pulumi.Input[str]]:
        """
        If defined, the data connection retrieves Cosmos DB documents created or updated after the specified retrieval start date. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        return pulumi.get(self, "retrieval_start_date")

    @retrieval_start_date.setter
    def retrieval_start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "retrieval_start_date", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[pulumi.Input[str]]:
        """
        The case-sensitive name of the existing target table in your cluster. Retrieved data is ingested into this table. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_name", value)


class CosmosdbDataConnection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cosmosdb_container_id: Optional[pulumi.Input[str]] = None,
                 kusto_database_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 managed_identity_id: Optional[pulumi.Input[str]] = None,
                 mapping_rule_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 retrieval_start_date: Optional[pulumi.Input[str]] = None,
                 table_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a Kusto / Cosmos Database Data Connection.

        ## Import

        Kusto / Cosmos Database Data Connection can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:kusto/cosmosdbDataConnection:CosmosdbDataConnection example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Kusto/clusters/cluster1/databases/database1/dataConnections/dataConnection1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cosmosdb_container_id: The name of an existing container in the Cosmos DB database. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] kusto_database_id: The name of the database in the Kusto cluster. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] location: The Azure Region where the Data Explorer should exist. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] managed_identity_id: The resource ID of a managed system or user-assigned identity. The identity is used to authenticate with Cosmos DB. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] mapping_rule_name: The name of an existing mapping rule to use when ingesting the retrieved data. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] name: The name of the data connection. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] retrieval_start_date: If defined, the data connection retrieves Cosmos DB documents created or updated after the specified retrieval start date. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] table_name: The case-sensitive name of the existing target table in your cluster. Retrieved data is ingested into this table. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CosmosdbDataConnectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Kusto / Cosmos Database Data Connection.

        ## Import

        Kusto / Cosmos Database Data Connection can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:kusto/cosmosdbDataConnection:CosmosdbDataConnection example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Kusto/clusters/cluster1/databases/database1/dataConnections/dataConnection1
        ```

        :param str resource_name: The name of the resource.
        :param CosmosdbDataConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CosmosdbDataConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            CosmosdbDataConnectionArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cosmosdb_container_id: Optional[pulumi.Input[str]] = None,
                 kusto_database_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 managed_identity_id: Optional[pulumi.Input[str]] = None,
                 mapping_rule_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 retrieval_start_date: Optional[pulumi.Input[str]] = None,
                 table_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CosmosdbDataConnectionArgs.__new__(CosmosdbDataConnectionArgs)

            if cosmosdb_container_id is None and not opts.urn:
                raise TypeError("Missing required property 'cosmosdb_container_id'")
            __props__.__dict__["cosmosdb_container_id"] = cosmosdb_container_id
            if kusto_database_id is None and not opts.urn:
                raise TypeError("Missing required property 'kusto_database_id'")
            __props__.__dict__["kusto_database_id"] = kusto_database_id
            __props__.__dict__["location"] = location
            if managed_identity_id is None and not opts.urn:
                raise TypeError("Missing required property 'managed_identity_id'")
            __props__.__dict__["managed_identity_id"] = managed_identity_id
            __props__.__dict__["mapping_rule_name"] = mapping_rule_name
            __props__.__dict__["name"] = name
            __props__.__dict__["retrieval_start_date"] = retrieval_start_date
            if table_name is None and not opts.urn:
                raise TypeError("Missing required property 'table_name'")
            __props__.__dict__["table_name"] = table_name
        super(CosmosdbDataConnection, __self__).__init__(
            'azure:kusto/cosmosdbDataConnection:CosmosdbDataConnection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cosmosdb_container_id: Optional[pulumi.Input[str]] = None,
            kusto_database_id: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            managed_identity_id: Optional[pulumi.Input[str]] = None,
            mapping_rule_name: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            retrieval_start_date: Optional[pulumi.Input[str]] = None,
            table_name: Optional[pulumi.Input[str]] = None) -> 'CosmosdbDataConnection':
        """
        Get an existing CosmosdbDataConnection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cosmosdb_container_id: The name of an existing container in the Cosmos DB database. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] kusto_database_id: The name of the database in the Kusto cluster. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] location: The Azure Region where the Data Explorer should exist. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] managed_identity_id: The resource ID of a managed system or user-assigned identity. The identity is used to authenticate with Cosmos DB. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] mapping_rule_name: The name of an existing mapping rule to use when ingesting the retrieved data. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] name: The name of the data connection. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] retrieval_start_date: If defined, the data connection retrieves Cosmos DB documents created or updated after the specified retrieval start date. Changing this forces a new Kusto Cosmos DB Connection to be created.
        :param pulumi.Input[str] table_name: The case-sensitive name of the existing target table in your cluster. Retrieved data is ingested into this table. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CosmosdbDataConnectionState.__new__(_CosmosdbDataConnectionState)

        __props__.__dict__["cosmosdb_container_id"] = cosmosdb_container_id
        __props__.__dict__["kusto_database_id"] = kusto_database_id
        __props__.__dict__["location"] = location
        __props__.__dict__["managed_identity_id"] = managed_identity_id
        __props__.__dict__["mapping_rule_name"] = mapping_rule_name
        __props__.__dict__["name"] = name
        __props__.__dict__["retrieval_start_date"] = retrieval_start_date
        __props__.__dict__["table_name"] = table_name
        return CosmosdbDataConnection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cosmosdbContainerId")
    def cosmosdb_container_id(self) -> pulumi.Output[str]:
        """
        The name of an existing container in the Cosmos DB database. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        return pulumi.get(self, "cosmosdb_container_id")

    @property
    @pulumi.getter(name="kustoDatabaseId")
    def kusto_database_id(self) -> pulumi.Output[str]:
        """
        The name of the database in the Kusto cluster. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        return pulumi.get(self, "kusto_database_id")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The Azure Region where the Data Explorer should exist. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="managedIdentityId")
    def managed_identity_id(self) -> pulumi.Output[str]:
        """
        The resource ID of a managed system or user-assigned identity. The identity is used to authenticate with Cosmos DB. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        return pulumi.get(self, "managed_identity_id")

    @property
    @pulumi.getter(name="mappingRuleName")
    def mapping_rule_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of an existing mapping rule to use when ingesting the retrieved data. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        return pulumi.get(self, "mapping_rule_name")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the data connection. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="retrievalStartDate")
    def retrieval_start_date(self) -> pulumi.Output[Optional[str]]:
        """
        If defined, the data connection retrieves Cosmos DB documents created or updated after the specified retrieval start date. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        return pulumi.get(self, "retrieval_start_date")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> pulumi.Output[str]:
        """
        The case-sensitive name of the existing target table in your cluster. Retrieved data is ingested into this table. Changing this forces a new Kusto Cosmos DB Connection to be created.
        """
        return pulumi.get(self, "table_name")

