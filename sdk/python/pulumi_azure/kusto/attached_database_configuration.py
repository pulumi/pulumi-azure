# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AttachedDatabaseConfigurationArgs', 'AttachedDatabaseConfiguration']

@pulumi.input_type
class AttachedDatabaseConfigurationArgs:
    def __init__(__self__, *,
                 cluster_name: pulumi.Input[str],
                 cluster_resource_id: pulumi.Input[str],
                 database_name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 default_principal_modification_kind: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sharing: Optional[pulumi.Input['AttachedDatabaseConfigurationSharingArgs']] = None):
        """
        The set of arguments for constructing a AttachedDatabaseConfiguration resource.
        :param pulumi.Input[str] cluster_name: Specifies the name of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
        :param pulumi.Input[str] cluster_resource_id: The resource id of the cluster where the databases you would like to attach reside. Changing this forces a new resource to be created.
        :param pulumi.Input[str] database_name: The name of the database which you would like to attach, use * if you want to follow all current and future databases. Changing this forces a new resource to be created.
        :param pulumi.Input[str] resource_group_name: Specifies the resource group of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
        :param pulumi.Input[str] default_principal_modification_kind: The default principals modification kind. Valid values are: `None` (default), `Replace` and `Union`.
        :param pulumi.Input[str] location: Specifies the location of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: The name of the Kusto Attached Database Configuration to create. Changing this forces a new resource to be created.
        :param pulumi.Input['AttachedDatabaseConfigurationSharingArgs'] sharing: A `sharing` block as defined below.
        """
        AttachedDatabaseConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_name=cluster_name,
            cluster_resource_id=cluster_resource_id,
            database_name=database_name,
            resource_group_name=resource_group_name,
            default_principal_modification_kind=default_principal_modification_kind,
            location=location,
            name=name,
            sharing=sharing,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_name: pulumi.Input[str],
             cluster_resource_id: pulumi.Input[str],
             database_name: pulumi.Input[str],
             resource_group_name: pulumi.Input[str],
             default_principal_modification_kind: Optional[pulumi.Input[str]] = None,
             location: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             sharing: Optional[pulumi.Input['AttachedDatabaseConfigurationSharingArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("cluster_name", cluster_name)
        _setter("cluster_resource_id", cluster_resource_id)
        _setter("database_name", database_name)
        _setter("resource_group_name", resource_group_name)
        if default_principal_modification_kind is not None:
            _setter("default_principal_modification_kind", default_principal_modification_kind)
        if location is not None:
            _setter("location", location)
        if name is not None:
            _setter("name", name)
        if sharing is not None:
            _setter("sharing", sharing)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        """
        Specifies the name of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceId")
    def cluster_resource_id(self) -> pulumi.Input[str]:
        """
        The resource id of the cluster where the databases you would like to attach reside. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "cluster_resource_id")

    @cluster_resource_id.setter
    def cluster_resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_resource_id", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        """
        The name of the database which you would like to attach, use * if you want to follow all current and future databases. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        Specifies the resource group of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="defaultPrincipalModificationKind")
    def default_principal_modification_kind(self) -> Optional[pulumi.Input[str]]:
        """
        The default principals modification kind. Valid values are: `None` (default), `Replace` and `Union`.
        """
        return pulumi.get(self, "default_principal_modification_kind")

    @default_principal_modification_kind.setter
    def default_principal_modification_kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_principal_modification_kind", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the location of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Kusto Attached Database Configuration to create. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def sharing(self) -> Optional[pulumi.Input['AttachedDatabaseConfigurationSharingArgs']]:
        """
        A `sharing` block as defined below.
        """
        return pulumi.get(self, "sharing")

    @sharing.setter
    def sharing(self, value: Optional[pulumi.Input['AttachedDatabaseConfigurationSharingArgs']]):
        pulumi.set(self, "sharing", value)


@pulumi.input_type
class _AttachedDatabaseConfigurationState:
    def __init__(__self__, *,
                 attached_database_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cluster_resource_id: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 default_principal_modification_kind: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 sharing: Optional[pulumi.Input['AttachedDatabaseConfigurationSharingArgs']] = None):
        """
        Input properties used for looking up and filtering AttachedDatabaseConfiguration resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] attached_database_names: The list of databases from the `cluster_resource_id` which are currently attached to the cluster.
        :param pulumi.Input[str] cluster_name: Specifies the name of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
        :param pulumi.Input[str] cluster_resource_id: The resource id of the cluster where the databases you would like to attach reside. Changing this forces a new resource to be created.
        :param pulumi.Input[str] database_name: The name of the database which you would like to attach, use * if you want to follow all current and future databases. Changing this forces a new resource to be created.
        :param pulumi.Input[str] default_principal_modification_kind: The default principals modification kind. Valid values are: `None` (default), `Replace` and `Union`.
        :param pulumi.Input[str] location: Specifies the location of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: The name of the Kusto Attached Database Configuration to create. Changing this forces a new resource to be created.
        :param pulumi.Input[str] resource_group_name: Specifies the resource group of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
        :param pulumi.Input['AttachedDatabaseConfigurationSharingArgs'] sharing: A `sharing` block as defined below.
        """
        _AttachedDatabaseConfigurationState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attached_database_names=attached_database_names,
            cluster_name=cluster_name,
            cluster_resource_id=cluster_resource_id,
            database_name=database_name,
            default_principal_modification_kind=default_principal_modification_kind,
            location=location,
            name=name,
            resource_group_name=resource_group_name,
            sharing=sharing,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attached_database_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             cluster_name: Optional[pulumi.Input[str]] = None,
             cluster_resource_id: Optional[pulumi.Input[str]] = None,
             database_name: Optional[pulumi.Input[str]] = None,
             default_principal_modification_kind: Optional[pulumi.Input[str]] = None,
             location: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             resource_group_name: Optional[pulumi.Input[str]] = None,
             sharing: Optional[pulumi.Input['AttachedDatabaseConfigurationSharingArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if attached_database_names is not None:
            _setter("attached_database_names", attached_database_names)
        if cluster_name is not None:
            _setter("cluster_name", cluster_name)
        if cluster_resource_id is not None:
            _setter("cluster_resource_id", cluster_resource_id)
        if database_name is not None:
            _setter("database_name", database_name)
        if default_principal_modification_kind is not None:
            _setter("default_principal_modification_kind", default_principal_modification_kind)
        if location is not None:
            _setter("location", location)
        if name is not None:
            _setter("name", name)
        if resource_group_name is not None:
            _setter("resource_group_name", resource_group_name)
        if sharing is not None:
            _setter("sharing", sharing)

    @property
    @pulumi.getter(name="attachedDatabaseNames")
    def attached_database_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of databases from the `cluster_resource_id` which are currently attached to the cluster.
        """
        return pulumi.get(self, "attached_database_names")

    @attached_database_names.setter
    def attached_database_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "attached_database_names", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceId")
    def cluster_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        The resource id of the cluster where the databases you would like to attach reside. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "cluster_resource_id")

    @cluster_resource_id.setter
    def cluster_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_resource_id", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the database which you would like to attach, use * if you want to follow all current and future databases. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="defaultPrincipalModificationKind")
    def default_principal_modification_kind(self) -> Optional[pulumi.Input[str]]:
        """
        The default principals modification kind. Valid values are: `None` (default), `Replace` and `Union`.
        """
        return pulumi.get(self, "default_principal_modification_kind")

    @default_principal_modification_kind.setter
    def default_principal_modification_kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_principal_modification_kind", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the location of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Kusto Attached Database Configuration to create. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the resource group of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter
    def sharing(self) -> Optional[pulumi.Input['AttachedDatabaseConfigurationSharingArgs']]:
        """
        A `sharing` block as defined below.
        """
        return pulumi.get(self, "sharing")

    @sharing.setter
    def sharing(self, value: Optional[pulumi.Input['AttachedDatabaseConfigurationSharingArgs']]):
        pulumi.set(self, "sharing", value)


class AttachedDatabaseConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cluster_resource_id: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 default_principal_modification_kind: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 sharing: Optional[pulumi.Input[pulumi.InputType['AttachedDatabaseConfigurationSharingArgs']]] = None,
                 __props__=None):
        """
        Manages a Kusto (also known as Azure Data Explorer) Attached Database Configuration

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        follower_cluster = azure.kusto.Cluster("followerCluster",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            sku=azure.kusto.ClusterSkuArgs(
                name="Dev(No SLA)_Standard_D11_v2",
                capacity=1,
            ))
        followed_cluster = azure.kusto.Cluster("followedCluster",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            sku=azure.kusto.ClusterSkuArgs(
                name="Dev(No SLA)_Standard_D11_v2",
                capacity=1,
            ))
        followed_database = azure.kusto.Database("followedDatabase",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            cluster_name=follower_cluster.name)
        example_database = azure.kusto.Database("exampleDatabase",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            cluster_name=follower_cluster.name)
        example_attached_database_configuration = azure.kusto.AttachedDatabaseConfiguration("exampleAttachedDatabaseConfiguration",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            cluster_name=follower_cluster.name,
            cluster_resource_id=followed_cluster.id,
            database_name=example_database.name,
            sharing=azure.kusto.AttachedDatabaseConfigurationSharingArgs(
                external_tables_to_excludes=["ExternalTable2"],
                external_tables_to_includes=["ExternalTable1"],
                materialized_views_to_excludes=["MaterializedViewTable2"],
                materialized_views_to_includes=["MaterializedViewTable1"],
                tables_to_excludes=["Table2"],
                tables_to_includes=["Table1"],
            ))
        ```

        ## Import

        Kusto Attached Database Configurations can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:kusto/attachedDatabaseConfiguration:AttachedDatabaseConfiguration example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Kusto/clusters/cluster1/attachedDatabaseConfigurations/configuration1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_name: Specifies the name of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
        :param pulumi.Input[str] cluster_resource_id: The resource id of the cluster where the databases you would like to attach reside. Changing this forces a new resource to be created.
        :param pulumi.Input[str] database_name: The name of the database which you would like to attach, use * if you want to follow all current and future databases. Changing this forces a new resource to be created.
        :param pulumi.Input[str] default_principal_modification_kind: The default principals modification kind. Valid values are: `None` (default), `Replace` and `Union`.
        :param pulumi.Input[str] location: Specifies the location of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: The name of the Kusto Attached Database Configuration to create. Changing this forces a new resource to be created.
        :param pulumi.Input[str] resource_group_name: Specifies the resource group of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
        :param pulumi.Input[pulumi.InputType['AttachedDatabaseConfigurationSharingArgs']] sharing: A `sharing` block as defined below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AttachedDatabaseConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Kusto (also known as Azure Data Explorer) Attached Database Configuration

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        follower_cluster = azure.kusto.Cluster("followerCluster",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            sku=azure.kusto.ClusterSkuArgs(
                name="Dev(No SLA)_Standard_D11_v2",
                capacity=1,
            ))
        followed_cluster = azure.kusto.Cluster("followedCluster",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            sku=azure.kusto.ClusterSkuArgs(
                name="Dev(No SLA)_Standard_D11_v2",
                capacity=1,
            ))
        followed_database = azure.kusto.Database("followedDatabase",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            cluster_name=follower_cluster.name)
        example_database = azure.kusto.Database("exampleDatabase",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            cluster_name=follower_cluster.name)
        example_attached_database_configuration = azure.kusto.AttachedDatabaseConfiguration("exampleAttachedDatabaseConfiguration",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            cluster_name=follower_cluster.name,
            cluster_resource_id=followed_cluster.id,
            database_name=example_database.name,
            sharing=azure.kusto.AttachedDatabaseConfigurationSharingArgs(
                external_tables_to_excludes=["ExternalTable2"],
                external_tables_to_includes=["ExternalTable1"],
                materialized_views_to_excludes=["MaterializedViewTable2"],
                materialized_views_to_includes=["MaterializedViewTable1"],
                tables_to_excludes=["Table2"],
                tables_to_includes=["Table1"],
            ))
        ```

        ## Import

        Kusto Attached Database Configurations can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:kusto/attachedDatabaseConfiguration:AttachedDatabaseConfiguration example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Kusto/clusters/cluster1/attachedDatabaseConfigurations/configuration1
        ```

        :param str resource_name: The name of the resource.
        :param AttachedDatabaseConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AttachedDatabaseConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            AttachedDatabaseConfigurationArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cluster_resource_id: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 default_principal_modification_kind: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 sharing: Optional[pulumi.Input[pulumi.InputType['AttachedDatabaseConfigurationSharingArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AttachedDatabaseConfigurationArgs.__new__(AttachedDatabaseConfigurationArgs)

            if cluster_name is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_name'")
            __props__.__dict__["cluster_name"] = cluster_name
            if cluster_resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_resource_id'")
            __props__.__dict__["cluster_resource_id"] = cluster_resource_id
            if database_name is None and not opts.urn:
                raise TypeError("Missing required property 'database_name'")
            __props__.__dict__["database_name"] = database_name
            __props__.__dict__["default_principal_modification_kind"] = default_principal_modification_kind
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            if sharing is not None and not isinstance(sharing, AttachedDatabaseConfigurationSharingArgs):
                sharing = sharing or {}
                def _setter(key, value):
                    sharing[key] = value
                AttachedDatabaseConfigurationSharingArgs._configure(_setter, **sharing)
            __props__.__dict__["sharing"] = sharing
            __props__.__dict__["attached_database_names"] = None
        super(AttachedDatabaseConfiguration, __self__).__init__(
            'azure:kusto/attachedDatabaseConfiguration:AttachedDatabaseConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            attached_database_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            cluster_name: Optional[pulumi.Input[str]] = None,
            cluster_resource_id: Optional[pulumi.Input[str]] = None,
            database_name: Optional[pulumi.Input[str]] = None,
            default_principal_modification_kind: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            resource_group_name: Optional[pulumi.Input[str]] = None,
            sharing: Optional[pulumi.Input[pulumi.InputType['AttachedDatabaseConfigurationSharingArgs']]] = None) -> 'AttachedDatabaseConfiguration':
        """
        Get an existing AttachedDatabaseConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] attached_database_names: The list of databases from the `cluster_resource_id` which are currently attached to the cluster.
        :param pulumi.Input[str] cluster_name: Specifies the name of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
        :param pulumi.Input[str] cluster_resource_id: The resource id of the cluster where the databases you would like to attach reside. Changing this forces a new resource to be created.
        :param pulumi.Input[str] database_name: The name of the database which you would like to attach, use * if you want to follow all current and future databases. Changing this forces a new resource to be created.
        :param pulumi.Input[str] default_principal_modification_kind: The default principals modification kind. Valid values are: `None` (default), `Replace` and `Union`.
        :param pulumi.Input[str] location: Specifies the location of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: The name of the Kusto Attached Database Configuration to create. Changing this forces a new resource to be created.
        :param pulumi.Input[str] resource_group_name: Specifies the resource group of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
        :param pulumi.Input[pulumi.InputType['AttachedDatabaseConfigurationSharingArgs']] sharing: A `sharing` block as defined below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AttachedDatabaseConfigurationState.__new__(_AttachedDatabaseConfigurationState)

        __props__.__dict__["attached_database_names"] = attached_database_names
        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["cluster_resource_id"] = cluster_resource_id
        __props__.__dict__["database_name"] = database_name
        __props__.__dict__["default_principal_modification_kind"] = default_principal_modification_kind
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_group_name"] = resource_group_name
        __props__.__dict__["sharing"] = sharing
        return AttachedDatabaseConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="attachedDatabaseNames")
    def attached_database_names(self) -> pulumi.Output[Sequence[str]]:
        """
        The list of databases from the `cluster_resource_id` which are currently attached to the cluster.
        """
        return pulumi.get(self, "attached_database_names")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[str]:
        """
        Specifies the name of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceId")
    def cluster_resource_id(self) -> pulumi.Output[str]:
        """
        The resource id of the cluster where the databases you would like to attach reside. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "cluster_resource_id")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Output[str]:
        """
        The name of the database which you would like to attach, use * if you want to follow all current and future databases. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="defaultPrincipalModificationKind")
    def default_principal_modification_kind(self) -> pulumi.Output[Optional[str]]:
        """
        The default principals modification kind. Valid values are: `None` (default), `Replace` and `Union`.
        """
        return pulumi.get(self, "default_principal_modification_kind")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        Specifies the location of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the Kusto Attached Database Configuration to create. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[str]:
        """
        Specifies the resource group of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter
    def sharing(self) -> pulumi.Output[Optional['outputs.AttachedDatabaseConfigurationSharing']]:
        """
        A `sharing` block as defined below.
        """
        return pulumi.get(self, "sharing")

