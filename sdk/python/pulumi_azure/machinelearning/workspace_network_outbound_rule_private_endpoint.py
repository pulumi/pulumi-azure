# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['WorkspaceNetworkOutboundRulePrivateEndpointArgs', 'WorkspaceNetworkOutboundRulePrivateEndpoint']

@pulumi.input_type
class WorkspaceNetworkOutboundRulePrivateEndpointArgs:
    def __init__(__self__, *,
                 service_resource_id: pulumi.Input[str],
                 sub_resource_target: pulumi.Input[str],
                 workspace_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 spark_enabled: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a WorkspaceNetworkOutboundRulePrivateEndpoint resource.
        :param pulumi.Input[str] service_resource_id: Specifies the Service Resource ID to connect. Changing this forces a new resource to be created.
               
               > **Note** Supported service resources: **Key Vault**, **Storage Account**, **Machine Learning Workspace**, **Redis**.
        :param pulumi.Input[str] sub_resource_target: Specifies the Sub Resource of the service resource to connect to. Possible values are `vault`,`amlworkspace`,`blob`,`table`,`queue`,`file`,`web`,`dfs`, `redisCache`. Changing this forces a new resource to be created.
               
               | Service                    | Sub Resource Type                         |
               |----------------------------|-------------------------------------------|
               | Machine Learning Workspace | `amlworkspace`                            |
               | Redis                      | `redisCache`                              |
               | Storage Account            | `blob`,`table`,`queue`,`file`,`web`,`dfs` |
               | Key Vault                  | `vault`                                   |
        :param pulumi.Input[str] workspace_id: Specifies the ID of the Machine Learning Workspace. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: Specifies the name of the Machine Learning Workspace Network Outbound Rule Private Endpoint. Changing this forces a new resource to be created.
        :param pulumi.Input[bool] spark_enabled: Whether to enable an additional private endpoint to be used by jobs running on Spark. Changing this forces a new resource to be created.
        """
        pulumi.set(__self__, "service_resource_id", service_resource_id)
        pulumi.set(__self__, "sub_resource_target", sub_resource_target)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if spark_enabled is not None:
            pulumi.set(__self__, "spark_enabled", spark_enabled)

    @property
    @pulumi.getter(name="serviceResourceId")
    def service_resource_id(self) -> pulumi.Input[str]:
        """
        Specifies the Service Resource ID to connect. Changing this forces a new resource to be created.

        > **Note** Supported service resources: **Key Vault**, **Storage Account**, **Machine Learning Workspace**, **Redis**.
        """
        return pulumi.get(self, "service_resource_id")

    @service_resource_id.setter
    def service_resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_resource_id", value)

    @property
    @pulumi.getter(name="subResourceTarget")
    def sub_resource_target(self) -> pulumi.Input[str]:
        """
        Specifies the Sub Resource of the service resource to connect to. Possible values are `vault`,`amlworkspace`,`blob`,`table`,`queue`,`file`,`web`,`dfs`, `redisCache`. Changing this forces a new resource to be created.

        | Service                    | Sub Resource Type                         |
        |----------------------------|-------------------------------------------|
        | Machine Learning Workspace | `amlworkspace`                            |
        | Redis                      | `redisCache`                              |
        | Storage Account            | `blob`,`table`,`queue`,`file`,`web`,`dfs` |
        | Key Vault                  | `vault`                                   |
        """
        return pulumi.get(self, "sub_resource_target")

    @sub_resource_target.setter
    def sub_resource_target(self, value: pulumi.Input[str]):
        pulumi.set(self, "sub_resource_target", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[str]:
        """
        Specifies the ID of the Machine Learning Workspace. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of the Machine Learning Workspace Network Outbound Rule Private Endpoint. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sparkEnabled")
    def spark_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable an additional private endpoint to be used by jobs running on Spark. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "spark_enabled")

    @spark_enabled.setter
    def spark_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "spark_enabled", value)


@pulumi.input_type
class _WorkspaceNetworkOutboundRulePrivateEndpointState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 service_resource_id: Optional[pulumi.Input[str]] = None,
                 spark_enabled: Optional[pulumi.Input[bool]] = None,
                 sub_resource_target: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WorkspaceNetworkOutboundRulePrivateEndpoint resources.
        :param pulumi.Input[str] name: Specifies the name of the Machine Learning Workspace Network Outbound Rule Private Endpoint. Changing this forces a new resource to be created.
        :param pulumi.Input[str] service_resource_id: Specifies the Service Resource ID to connect. Changing this forces a new resource to be created.
               
               > **Note** Supported service resources: **Key Vault**, **Storage Account**, **Machine Learning Workspace**, **Redis**.
        :param pulumi.Input[bool] spark_enabled: Whether to enable an additional private endpoint to be used by jobs running on Spark. Changing this forces a new resource to be created.
        :param pulumi.Input[str] sub_resource_target: Specifies the Sub Resource of the service resource to connect to. Possible values are `vault`,`amlworkspace`,`blob`,`table`,`queue`,`file`,`web`,`dfs`, `redisCache`. Changing this forces a new resource to be created.
               
               | Service                    | Sub Resource Type                         |
               |----------------------------|-------------------------------------------|
               | Machine Learning Workspace | `amlworkspace`                            |
               | Redis                      | `redisCache`                              |
               | Storage Account            | `blob`,`table`,`queue`,`file`,`web`,`dfs` |
               | Key Vault                  | `vault`                                   |
        :param pulumi.Input[str] workspace_id: Specifies the ID of the Machine Learning Workspace. Changing this forces a new resource to be created.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_resource_id is not None:
            pulumi.set(__self__, "service_resource_id", service_resource_id)
        if spark_enabled is not None:
            pulumi.set(__self__, "spark_enabled", spark_enabled)
        if sub_resource_target is not None:
            pulumi.set(__self__, "sub_resource_target", sub_resource_target)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of the Machine Learning Workspace Network Outbound Rule Private Endpoint. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serviceResourceId")
    def service_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Service Resource ID to connect. Changing this forces a new resource to be created.

        > **Note** Supported service resources: **Key Vault**, **Storage Account**, **Machine Learning Workspace**, **Redis**.
        """
        return pulumi.get(self, "service_resource_id")

    @service_resource_id.setter
    def service_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_resource_id", value)

    @property
    @pulumi.getter(name="sparkEnabled")
    def spark_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable an additional private endpoint to be used by jobs running on Spark. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "spark_enabled")

    @spark_enabled.setter
    def spark_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "spark_enabled", value)

    @property
    @pulumi.getter(name="subResourceTarget")
    def sub_resource_target(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Sub Resource of the service resource to connect to. Possible values are `vault`,`amlworkspace`,`blob`,`table`,`queue`,`file`,`web`,`dfs`, `redisCache`. Changing this forces a new resource to be created.

        | Service                    | Sub Resource Type                         |
        |----------------------------|-------------------------------------------|
        | Machine Learning Workspace | `amlworkspace`                            |
        | Redis                      | `redisCache`                              |
        | Storage Account            | `blob`,`table`,`queue`,`file`,`web`,`dfs` |
        | Key Vault                  | `vault`                                   |
        """
        return pulumi.get(self, "sub_resource_target")

    @sub_resource_target.setter
    def sub_resource_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_resource_target", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the Machine Learning Workspace. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_id", value)


class WorkspaceNetworkOutboundRulePrivateEndpoint(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 service_resource_id: Optional[pulumi.Input[str]] = None,
                 spark_enabled: Optional[pulumi.Input[bool]] = None,
                 sub_resource_target: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages an Azure Machine Learning Workspace Network Outbound Rule Private Endpoint.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        current = azure.core.get_client_config()
        example = azure.core.ResourceGroup("example",
            name="example-resources",
            location="West Europe")
        example_insights = azure.appinsights.Insights("example",
            name="workspace-example-ai",
            location=example.location,
            resource_group_name=example.name,
            application_type="web")
        example_key_vault = azure.keyvault.KeyVault("example",
            name="workspaceexamplekeyvault",
            location=example.location,
            resource_group_name=example.name,
            tenant_id=current.tenant_id,
            sku_name="premium")
        example_account = azure.storage.Account("example",
            name="workspacestorageaccount",
            location=example.location,
            resource_group_name=example.name,
            account_tier="Standard",
            account_replication_type="GRS")
        example_workspace = azure.machinelearning.Workspace("example",
            name="example-workspace",
            location=example.location,
            resource_group_name=example.name,
            application_insights_id=example_insights.id,
            key_vault_id=example_key_vault.id,
            storage_account_id=example_account.id,
            managed_network={
                "isolation_mode": "AllowOnlyApprovedOutbound",
            },
            identity={
                "type": "SystemAssigned",
            })
        example2 = azure.storage.Account("example2",
            name="example-sa",
            location=test["location"],
            resource_group_name=test["name"],
            account_tier="Standard",
            account_replication_type="LRS")
        example_workspace_network_outbound_rule_private_endpoint = azure.machinelearning.WorkspaceNetworkOutboundRulePrivateEndpoint("example",
            name="example-outboundrule",
            workspace_id=example_workspace.id,
            service_resource_id=example2.id,
            sub_resource_target="blob")
        ```

        ## Import

        Machine Learning Workspace Network Outbound Rule Private Endpoint can be imported using the `resource id`, e.g.

        ```sh
        $ pulumi import azure:machinelearning/workspaceNetworkOutboundRulePrivateEndpoint:WorkspaceNetworkOutboundRulePrivateEndpoint example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.MachineLearningServices/workspaces/workspace1/outboundRules/rule1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Specifies the name of the Machine Learning Workspace Network Outbound Rule Private Endpoint. Changing this forces a new resource to be created.
        :param pulumi.Input[str] service_resource_id: Specifies the Service Resource ID to connect. Changing this forces a new resource to be created.
               
               > **Note** Supported service resources: **Key Vault**, **Storage Account**, **Machine Learning Workspace**, **Redis**.
        :param pulumi.Input[bool] spark_enabled: Whether to enable an additional private endpoint to be used by jobs running on Spark. Changing this forces a new resource to be created.
        :param pulumi.Input[str] sub_resource_target: Specifies the Sub Resource of the service resource to connect to. Possible values are `vault`,`amlworkspace`,`blob`,`table`,`queue`,`file`,`web`,`dfs`, `redisCache`. Changing this forces a new resource to be created.
               
               | Service                    | Sub Resource Type                         |
               |----------------------------|-------------------------------------------|
               | Machine Learning Workspace | `amlworkspace`                            |
               | Redis                      | `redisCache`                              |
               | Storage Account            | `blob`,`table`,`queue`,`file`,`web`,`dfs` |
               | Key Vault                  | `vault`                                   |
        :param pulumi.Input[str] workspace_id: Specifies the ID of the Machine Learning Workspace. Changing this forces a new resource to be created.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkspaceNetworkOutboundRulePrivateEndpointArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an Azure Machine Learning Workspace Network Outbound Rule Private Endpoint.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        current = azure.core.get_client_config()
        example = azure.core.ResourceGroup("example",
            name="example-resources",
            location="West Europe")
        example_insights = azure.appinsights.Insights("example",
            name="workspace-example-ai",
            location=example.location,
            resource_group_name=example.name,
            application_type="web")
        example_key_vault = azure.keyvault.KeyVault("example",
            name="workspaceexamplekeyvault",
            location=example.location,
            resource_group_name=example.name,
            tenant_id=current.tenant_id,
            sku_name="premium")
        example_account = azure.storage.Account("example",
            name="workspacestorageaccount",
            location=example.location,
            resource_group_name=example.name,
            account_tier="Standard",
            account_replication_type="GRS")
        example_workspace = azure.machinelearning.Workspace("example",
            name="example-workspace",
            location=example.location,
            resource_group_name=example.name,
            application_insights_id=example_insights.id,
            key_vault_id=example_key_vault.id,
            storage_account_id=example_account.id,
            managed_network={
                "isolation_mode": "AllowOnlyApprovedOutbound",
            },
            identity={
                "type": "SystemAssigned",
            })
        example2 = azure.storage.Account("example2",
            name="example-sa",
            location=test["location"],
            resource_group_name=test["name"],
            account_tier="Standard",
            account_replication_type="LRS")
        example_workspace_network_outbound_rule_private_endpoint = azure.machinelearning.WorkspaceNetworkOutboundRulePrivateEndpoint("example",
            name="example-outboundrule",
            workspace_id=example_workspace.id,
            service_resource_id=example2.id,
            sub_resource_target="blob")
        ```

        ## Import

        Machine Learning Workspace Network Outbound Rule Private Endpoint can be imported using the `resource id`, e.g.

        ```sh
        $ pulumi import azure:machinelearning/workspaceNetworkOutboundRulePrivateEndpoint:WorkspaceNetworkOutboundRulePrivateEndpoint example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.MachineLearningServices/workspaces/workspace1/outboundRules/rule1
        ```

        :param str resource_name: The name of the resource.
        :param WorkspaceNetworkOutboundRulePrivateEndpointArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkspaceNetworkOutboundRulePrivateEndpointArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 service_resource_id: Optional[pulumi.Input[str]] = None,
                 spark_enabled: Optional[pulumi.Input[bool]] = None,
                 sub_resource_target: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkspaceNetworkOutboundRulePrivateEndpointArgs.__new__(WorkspaceNetworkOutboundRulePrivateEndpointArgs)

            __props__.__dict__["name"] = name
            if service_resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'service_resource_id'")
            __props__.__dict__["service_resource_id"] = service_resource_id
            __props__.__dict__["spark_enabled"] = spark_enabled
            if sub_resource_target is None and not opts.urn:
                raise TypeError("Missing required property 'sub_resource_target'")
            __props__.__dict__["sub_resource_target"] = sub_resource_target
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
        super(WorkspaceNetworkOutboundRulePrivateEndpoint, __self__).__init__(
            'azure:machinelearning/workspaceNetworkOutboundRulePrivateEndpoint:WorkspaceNetworkOutboundRulePrivateEndpoint',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[str]] = None,
            service_resource_id: Optional[pulumi.Input[str]] = None,
            spark_enabled: Optional[pulumi.Input[bool]] = None,
            sub_resource_target: Optional[pulumi.Input[str]] = None,
            workspace_id: Optional[pulumi.Input[str]] = None) -> 'WorkspaceNetworkOutboundRulePrivateEndpoint':
        """
        Get an existing WorkspaceNetworkOutboundRulePrivateEndpoint resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Specifies the name of the Machine Learning Workspace Network Outbound Rule Private Endpoint. Changing this forces a new resource to be created.
        :param pulumi.Input[str] service_resource_id: Specifies the Service Resource ID to connect. Changing this forces a new resource to be created.
               
               > **Note** Supported service resources: **Key Vault**, **Storage Account**, **Machine Learning Workspace**, **Redis**.
        :param pulumi.Input[bool] spark_enabled: Whether to enable an additional private endpoint to be used by jobs running on Spark. Changing this forces a new resource to be created.
        :param pulumi.Input[str] sub_resource_target: Specifies the Sub Resource of the service resource to connect to. Possible values are `vault`,`amlworkspace`,`blob`,`table`,`queue`,`file`,`web`,`dfs`, `redisCache`. Changing this forces a new resource to be created.
               
               | Service                    | Sub Resource Type                         |
               |----------------------------|-------------------------------------------|
               | Machine Learning Workspace | `amlworkspace`                            |
               | Redis                      | `redisCache`                              |
               | Storage Account            | `blob`,`table`,`queue`,`file`,`web`,`dfs` |
               | Key Vault                  | `vault`                                   |
        :param pulumi.Input[str] workspace_id: Specifies the ID of the Machine Learning Workspace. Changing this forces a new resource to be created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkspaceNetworkOutboundRulePrivateEndpointState.__new__(_WorkspaceNetworkOutboundRulePrivateEndpointState)

        __props__.__dict__["name"] = name
        __props__.__dict__["service_resource_id"] = service_resource_id
        __props__.__dict__["spark_enabled"] = spark_enabled
        __props__.__dict__["sub_resource_target"] = sub_resource_target
        __props__.__dict__["workspace_id"] = workspace_id
        return WorkspaceNetworkOutboundRulePrivateEndpoint(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Specifies the name of the Machine Learning Workspace Network Outbound Rule Private Endpoint. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serviceResourceId")
    def service_resource_id(self) -> pulumi.Output[str]:
        """
        Specifies the Service Resource ID to connect. Changing this forces a new resource to be created.

        > **Note** Supported service resources: **Key Vault**, **Storage Account**, **Machine Learning Workspace**, **Redis**.
        """
        return pulumi.get(self, "service_resource_id")

    @property
    @pulumi.getter(name="sparkEnabled")
    def spark_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable an additional private endpoint to be used by jobs running on Spark. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "spark_enabled")

    @property
    @pulumi.getter(name="subResourceTarget")
    def sub_resource_target(self) -> pulumi.Output[str]:
        """
        Specifies the Sub Resource of the service resource to connect to. Possible values are `vault`,`amlworkspace`,`blob`,`table`,`queue`,`file`,`web`,`dfs`, `redisCache`. Changing this forces a new resource to be created.

        | Service                    | Sub Resource Type                         |
        |----------------------------|-------------------------------------------|
        | Machine Learning Workspace | `amlworkspace`                            |
        | Redis                      | `redisCache`                              |
        | Storage Account            | `blob`,`table`,`queue`,`file`,`web`,`dfs` |
        | Key Vault                  | `vault`                                   |
        """
        return pulumi.get(self, "sub_resource_target")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[str]:
        """
        Specifies the ID of the Machine Learning Workspace. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "workspace_id")

