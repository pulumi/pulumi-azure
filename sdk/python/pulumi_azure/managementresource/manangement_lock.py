# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class ManangementLock(pulumi.CustomResource):
    """
    Manages a Management Lock which is scoped to a Subscription, Resource Group or Resource.
    """
    def __init__(__self__, __name__, __opts__=None, lock_level=None, name=None, notes=None, scope=None):
        """Create a ManangementLock resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not lock_level:
            raise TypeError('Missing required property lock_level')
        elif not isinstance(lock_level, basestring):
            raise TypeError('Expected property lock_level to be a basestring')
        __self__.lock_level = lock_level
        """
        Specifies the Level to be used for this Lock. Possible values are `CanNotDelete` and `ReadOnly`. Changing this forces a new resource to be created.
        """
        __props__['lockLevel'] = lock_level

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        Specifies the name of the Management Lock. Changing this forces a new resource to be created.
        """
        __props__['name'] = name

        if notes and not isinstance(notes, basestring):
            raise TypeError('Expected property notes to be a basestring')
        __self__.notes = notes
        __props__['notes'] = notes

        if not scope:
            raise TypeError('Missing required property scope')
        elif not isinstance(scope, basestring):
            raise TypeError('Expected property scope to be a basestring')
        __self__.scope = scope
        """
        Specifies the scope at which the Management Lock should be created. Changing this forces a new resource to be created.
        """
        __props__['scope'] = scope

        super(ManangementLock, __self__).__init__(
            'azure:managementresource/manangementLock:ManangementLock',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'lockLevel' in outs:
            self.lock_level = outs['lockLevel']
        if 'name' in outs:
            self.name = outs['name']
        if 'notes' in outs:
            self.notes = outs['notes']
        if 'scope' in outs:
            self.scope = outs['scope']
