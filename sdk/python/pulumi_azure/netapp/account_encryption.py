# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['AccountEncryptionArgs', 'AccountEncryption']

@pulumi.input_type
class AccountEncryptionArgs:
    def __init__(__self__, *,
                 encryption_key: pulumi.Input[str],
                 netapp_account_id: pulumi.Input[str],
                 system_assigned_identity_principal_id: Optional[pulumi.Input[str]] = None,
                 user_assigned_identity_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AccountEncryption resource.
        :param pulumi.Input[str] encryption_key: The versionless encryption key url.
        :param pulumi.Input[str] netapp_account_id: The ID of the NetApp account where volume under it will have customer managed keys-based encryption enabled.
        :param pulumi.Input[str] system_assigned_identity_principal_id: The ID of the System Assigned Manged Identity. Conflicts with `user_assigned_identity_id`.
        :param pulumi.Input[str] user_assigned_identity_id: The ID of the User Assigned Managed Identity. Conflicts with `system_assigned_identity_principal_id`.
        """
        pulumi.set(__self__, "encryption_key", encryption_key)
        pulumi.set(__self__, "netapp_account_id", netapp_account_id)
        if system_assigned_identity_principal_id is not None:
            pulumi.set(__self__, "system_assigned_identity_principal_id", system_assigned_identity_principal_id)
        if user_assigned_identity_id is not None:
            pulumi.set(__self__, "user_assigned_identity_id", user_assigned_identity_id)

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> pulumi.Input[str]:
        """
        The versionless encryption key url.
        """
        return pulumi.get(self, "encryption_key")

    @encryption_key.setter
    def encryption_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "encryption_key", value)

    @property
    @pulumi.getter(name="netappAccountId")
    def netapp_account_id(self) -> pulumi.Input[str]:
        """
        The ID of the NetApp account where volume under it will have customer managed keys-based encryption enabled.
        """
        return pulumi.get(self, "netapp_account_id")

    @netapp_account_id.setter
    def netapp_account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "netapp_account_id", value)

    @property
    @pulumi.getter(name="systemAssignedIdentityPrincipalId")
    def system_assigned_identity_principal_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the System Assigned Manged Identity. Conflicts with `user_assigned_identity_id`.
        """
        return pulumi.get(self, "system_assigned_identity_principal_id")

    @system_assigned_identity_principal_id.setter
    def system_assigned_identity_principal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_assigned_identity_principal_id", value)

    @property
    @pulumi.getter(name="userAssignedIdentityId")
    def user_assigned_identity_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the User Assigned Managed Identity. Conflicts with `system_assigned_identity_principal_id`.
        """
        return pulumi.get(self, "user_assigned_identity_id")

    @user_assigned_identity_id.setter
    def user_assigned_identity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_assigned_identity_id", value)


@pulumi.input_type
class _AccountEncryptionState:
    def __init__(__self__, *,
                 encryption_key: Optional[pulumi.Input[str]] = None,
                 netapp_account_id: Optional[pulumi.Input[str]] = None,
                 system_assigned_identity_principal_id: Optional[pulumi.Input[str]] = None,
                 user_assigned_identity_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AccountEncryption resources.
        :param pulumi.Input[str] encryption_key: The versionless encryption key url.
        :param pulumi.Input[str] netapp_account_id: The ID of the NetApp account where volume under it will have customer managed keys-based encryption enabled.
        :param pulumi.Input[str] system_assigned_identity_principal_id: The ID of the System Assigned Manged Identity. Conflicts with `user_assigned_identity_id`.
        :param pulumi.Input[str] user_assigned_identity_id: The ID of the User Assigned Managed Identity. Conflicts with `system_assigned_identity_principal_id`.
        """
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if netapp_account_id is not None:
            pulumi.set(__self__, "netapp_account_id", netapp_account_id)
        if system_assigned_identity_principal_id is not None:
            pulumi.set(__self__, "system_assigned_identity_principal_id", system_assigned_identity_principal_id)
        if user_assigned_identity_id is not None:
            pulumi.set(__self__, "user_assigned_identity_id", user_assigned_identity_id)

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[pulumi.Input[str]]:
        """
        The versionless encryption key url.
        """
        return pulumi.get(self, "encryption_key")

    @encryption_key.setter
    def encryption_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_key", value)

    @property
    @pulumi.getter(name="netappAccountId")
    def netapp_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the NetApp account where volume under it will have customer managed keys-based encryption enabled.
        """
        return pulumi.get(self, "netapp_account_id")

    @netapp_account_id.setter
    def netapp_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netapp_account_id", value)

    @property
    @pulumi.getter(name="systemAssignedIdentityPrincipalId")
    def system_assigned_identity_principal_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the System Assigned Manged Identity. Conflicts with `user_assigned_identity_id`.
        """
        return pulumi.get(self, "system_assigned_identity_principal_id")

    @system_assigned_identity_principal_id.setter
    def system_assigned_identity_principal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_assigned_identity_principal_id", value)

    @property
    @pulumi.getter(name="userAssignedIdentityId")
    def user_assigned_identity_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the User Assigned Managed Identity. Conflicts with `system_assigned_identity_principal_id`.
        """
        return pulumi.get(self, "user_assigned_identity_id")

    @user_assigned_identity_id.setter
    def user_assigned_identity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_assigned_identity_id", value)


class AccountEncryption(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 encryption_key: Optional[pulumi.Input[str]] = None,
                 netapp_account_id: Optional[pulumi.Input[str]] = None,
                 system_assigned_identity_principal_id: Optional[pulumi.Input[str]] = None,
                 user_assigned_identity_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a NetApp Account Encryption Resource.

        For more information about Azure NetApp Files Customer-Managed Keys feature, please refer to [Configure customer-managed keys for Azure NetApp Files volume encryption](https://learn.microsoft.com/en-us/azure/azure-netapp-files/configure-customer-managed-keys)

        ## Import

        Account Encryption Resources can be imported using the `resource id`, e.g.

        ```sh
        $ pulumi import azure:netapp/accountEncryption:AccountEncryption example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.NetApp/netAppAccounts/account1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] encryption_key: The versionless encryption key url.
        :param pulumi.Input[str] netapp_account_id: The ID of the NetApp account where volume under it will have customer managed keys-based encryption enabled.
        :param pulumi.Input[str] system_assigned_identity_principal_id: The ID of the System Assigned Manged Identity. Conflicts with `user_assigned_identity_id`.
        :param pulumi.Input[str] user_assigned_identity_id: The ID of the User Assigned Managed Identity. Conflicts with `system_assigned_identity_principal_id`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AccountEncryptionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a NetApp Account Encryption Resource.

        For more information about Azure NetApp Files Customer-Managed Keys feature, please refer to [Configure customer-managed keys for Azure NetApp Files volume encryption](https://learn.microsoft.com/en-us/azure/azure-netapp-files/configure-customer-managed-keys)

        ## Import

        Account Encryption Resources can be imported using the `resource id`, e.g.

        ```sh
        $ pulumi import azure:netapp/accountEncryption:AccountEncryption example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.NetApp/netAppAccounts/account1
        ```

        :param str resource_name: The name of the resource.
        :param AccountEncryptionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccountEncryptionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 encryption_key: Optional[pulumi.Input[str]] = None,
                 netapp_account_id: Optional[pulumi.Input[str]] = None,
                 system_assigned_identity_principal_id: Optional[pulumi.Input[str]] = None,
                 user_assigned_identity_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccountEncryptionArgs.__new__(AccountEncryptionArgs)

            if encryption_key is None and not opts.urn:
                raise TypeError("Missing required property 'encryption_key'")
            __props__.__dict__["encryption_key"] = encryption_key
            if netapp_account_id is None and not opts.urn:
                raise TypeError("Missing required property 'netapp_account_id'")
            __props__.__dict__["netapp_account_id"] = netapp_account_id
            __props__.__dict__["system_assigned_identity_principal_id"] = system_assigned_identity_principal_id
            __props__.__dict__["user_assigned_identity_id"] = user_assigned_identity_id
        super(AccountEncryption, __self__).__init__(
            'azure:netapp/accountEncryption:AccountEncryption',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            encryption_key: Optional[pulumi.Input[str]] = None,
            netapp_account_id: Optional[pulumi.Input[str]] = None,
            system_assigned_identity_principal_id: Optional[pulumi.Input[str]] = None,
            user_assigned_identity_id: Optional[pulumi.Input[str]] = None) -> 'AccountEncryption':
        """
        Get an existing AccountEncryption resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] encryption_key: The versionless encryption key url.
        :param pulumi.Input[str] netapp_account_id: The ID of the NetApp account where volume under it will have customer managed keys-based encryption enabled.
        :param pulumi.Input[str] system_assigned_identity_principal_id: The ID of the System Assigned Manged Identity. Conflicts with `user_assigned_identity_id`.
        :param pulumi.Input[str] user_assigned_identity_id: The ID of the User Assigned Managed Identity. Conflicts with `system_assigned_identity_principal_id`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AccountEncryptionState.__new__(_AccountEncryptionState)

        __props__.__dict__["encryption_key"] = encryption_key
        __props__.__dict__["netapp_account_id"] = netapp_account_id
        __props__.__dict__["system_assigned_identity_principal_id"] = system_assigned_identity_principal_id
        __props__.__dict__["user_assigned_identity_id"] = user_assigned_identity_id
        return AccountEncryption(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> pulumi.Output[str]:
        """
        The versionless encryption key url.
        """
        return pulumi.get(self, "encryption_key")

    @property
    @pulumi.getter(name="netappAccountId")
    def netapp_account_id(self) -> pulumi.Output[str]:
        """
        The ID of the NetApp account where volume under it will have customer managed keys-based encryption enabled.
        """
        return pulumi.get(self, "netapp_account_id")

    @property
    @pulumi.getter(name="systemAssignedIdentityPrincipalId")
    def system_assigned_identity_principal_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the System Assigned Manged Identity. Conflicts with `user_assigned_identity_id`.
        """
        return pulumi.get(self, "system_assigned_identity_principal_id")

    @property
    @pulumi.getter(name="userAssignedIdentityId")
    def user_assigned_identity_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the User Assigned Managed Identity. Conflicts with `system_assigned_identity_principal_id`.
        """
        return pulumi.get(self, "user_assigned_identity_id")

