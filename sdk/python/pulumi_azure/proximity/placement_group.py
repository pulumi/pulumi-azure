# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['PlacementGroupArgs', 'PlacementGroup']

@pulumi.input_type
class PlacementGroupArgs:
    def __init__(__self__, *,
                 resource_group_name: pulumi.Input[str],
                 allowed_vm_sizes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a PlacementGroup resource.
        :param pulumi.Input[str] resource_group_name: The name of the resource group in which to create the availability set. Changing this forces a new resource to be created.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_vm_sizes: Specifies the supported sizes of Virtual Machines that can be created in the Proximity Placement Group. Possible values are `Basic_A4`, `Basic_A1`, `Basic_A3`, `Basic_A2`, `Basic_A0`, `Standard_A8`, `Standard_A8_v2`, `Standard_A8m_v2`, `Standard_A5`, `Standard_A4`, `Standard_A4_v2`, `Standard_A4m_v2`, `Standard_A9`, `Standard_A1`, `Standard_A11`, `Standard_A1_v2`, `Standard_A10`, `Standard_A7`, `Standard_A6`, `Standard_A3`, `Standard_A2`, `Standard_A2_v2`, `Standard_A2m_v2`, `Standard_A0`, `Standard_B8ms`, `Standard_B4ms`, `Standard_B1ms`, `Standard_B1s`, `Standard_B2ms`, `Standard_B2s`, `Standard_D8_v3`, `Standard_D8s_v3`, `Standard_D5_v2`, `Standard_D4`, `Standard_D4_v3`, `Standard_D4_v2`, `Standard_D4s_v3`, `Standard_D1`, `Standard_D15_v2`, `Standard_D14`, `Standard_D14_v2`, `Standard_D11`, `Standard_D11_v2`, `Standard_D16_v3`, `Standard_D16s_v3`, `Standard_D13`, `Standard_D13_v2`, `Standard_D12`, `Standard_D12_v2`, `Standard_D1_v2`, `Standard_DS5_v2`, `Standard_DS4`, `Standard_DS4_v2`, `Standard_DS1`, `Standard_DS15_v2`, `Standard_DS14`, `Standard_DS14-8_v2`, `Standard_DS14-4_v2`, `Standard_DS14_v2`, `Standard_DS11`, `Standard_DS11_v2`, `Standard_DS13`, `Standard_DS13-4_v2`, `Standard_DS13-2_v2`, `Standard_DS13_v2`, `Standard_DS12`, `Standard_DS12_v2`, `Standard_DS1_v2`, `Standard_DS3`, `Standard_DS3_v2`, `Standard_DS2`, `Standard_DS2_v2`, `Standard_D64_v3`, `Standard_D64s_v3`, `Standard_D3`, `Standard_D32_v3`, `Standard_D32s_v3`, `Standard_D3_v2`, `Standard_D2`, `Standard_D2_v3`, `Standard_D2_v2`, `Standard_D2s_v3`, `Standard_E8_v3`, `Standard_E8s_v3`, `Standard_E4_v3`, `Standard_E4s_v3`, `Standard_E16_v3`, `Standard_E16s_v3`, `Standard_E64-16s_v3`, `Standard_E64-32s_v3`, `Standard_E64_v3`, `Standard_E64s_v3`, `Standard_E32-8s_v3`, `Standard_E32-16_v3`, `Standard_E32_v3`, `Standard_E32s_v3`, `Standard_E2_v3`, `Standard_E2s_v3`, `Standard_F8`, `Standard_F8s`, `Standard_F8s_v2`, `Standard_F4`, `Standard_F4s`, `Standard_F4s_v2`, `Standard_F1`, `Standard_F16`, `Standard_F16s`, `Standard_F16s_v2`, `Standard_F1s`, `Standard_F72s_v2`, `Standard_F64s_v2`, `Standard_F32s_v2`, `Standard_F2`, `Standard_F2s`, `Standard_F2s_v2`, `Standard_G5`, `Standard_G4`, `Standard_G1`, `Standard_GS5`, `Standard_GS5-8`, `Standard_GS5-16`, `Standard_GS4`, `Standard_GS4-8`, `Standard_GS4-4`, `Standard_GS1`, `Standard_GS3`, `Standard_GS2`, `Standard_G3`, `Standard_G2`, `Standard_H8`, `Standard_H8m`, `Standard_H16`, `Standard_H16m`, `Standard_H16mr`, `Standard_H16r`, `Standard_L8s`, `Standard_L4s`, `Standard_L16s`, `Standard_L32s`, `Standard_M128-64ms`, `Standard_M128-32ms`, `Standard_M128ms`, `Standard_M128s`, `Standard_M64-16ms`, `Standard_M64-32ms`, `Standard_M64ms`, `Standard_M64s`, `Standard_NC12`, `Standard_NC12s_v3`, `Standard_NC12s_v2`, `Standard_NC6`, `Standard_NC6s_v3`, `Standard_NC6s_v2`, `Standard_NC24`, `Standard_NC24r`, `Standard_NC24rs_v3`, `Standard_NC24rs_v2`, `Standard_NC24s_v3`, `Standard_NC24s_v2`, `Standard_ND12s`, `Standard_ND6s`, `Standard_ND24rs`, `Standard_ND24s`, `Standard_NV12`, `Standard_NV6` and `Standard_NV24`.
        :param pulumi.Input[str] location: Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: Specifies the name of the proximity placement group. Changing this forces a new resource to be created.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the resource.
        :param pulumi.Input[str] zone: Specifies the supported zone of the Proximity Placement Group. Changing this forces a new resource to be created.
        """
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if allowed_vm_sizes is not None:
            pulumi.set(__self__, "allowed_vm_sizes", allowed_vm_sizes)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group in which to create the availability set. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="allowedVmSizes")
    def allowed_vm_sizes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the supported sizes of Virtual Machines that can be created in the Proximity Placement Group. Possible values are `Basic_A4`, `Basic_A1`, `Basic_A3`, `Basic_A2`, `Basic_A0`, `Standard_A8`, `Standard_A8_v2`, `Standard_A8m_v2`, `Standard_A5`, `Standard_A4`, `Standard_A4_v2`, `Standard_A4m_v2`, `Standard_A9`, `Standard_A1`, `Standard_A11`, `Standard_A1_v2`, `Standard_A10`, `Standard_A7`, `Standard_A6`, `Standard_A3`, `Standard_A2`, `Standard_A2_v2`, `Standard_A2m_v2`, `Standard_A0`, `Standard_B8ms`, `Standard_B4ms`, `Standard_B1ms`, `Standard_B1s`, `Standard_B2ms`, `Standard_B2s`, `Standard_D8_v3`, `Standard_D8s_v3`, `Standard_D5_v2`, `Standard_D4`, `Standard_D4_v3`, `Standard_D4_v2`, `Standard_D4s_v3`, `Standard_D1`, `Standard_D15_v2`, `Standard_D14`, `Standard_D14_v2`, `Standard_D11`, `Standard_D11_v2`, `Standard_D16_v3`, `Standard_D16s_v3`, `Standard_D13`, `Standard_D13_v2`, `Standard_D12`, `Standard_D12_v2`, `Standard_D1_v2`, `Standard_DS5_v2`, `Standard_DS4`, `Standard_DS4_v2`, `Standard_DS1`, `Standard_DS15_v2`, `Standard_DS14`, `Standard_DS14-8_v2`, `Standard_DS14-4_v2`, `Standard_DS14_v2`, `Standard_DS11`, `Standard_DS11_v2`, `Standard_DS13`, `Standard_DS13-4_v2`, `Standard_DS13-2_v2`, `Standard_DS13_v2`, `Standard_DS12`, `Standard_DS12_v2`, `Standard_DS1_v2`, `Standard_DS3`, `Standard_DS3_v2`, `Standard_DS2`, `Standard_DS2_v2`, `Standard_D64_v3`, `Standard_D64s_v3`, `Standard_D3`, `Standard_D32_v3`, `Standard_D32s_v3`, `Standard_D3_v2`, `Standard_D2`, `Standard_D2_v3`, `Standard_D2_v2`, `Standard_D2s_v3`, `Standard_E8_v3`, `Standard_E8s_v3`, `Standard_E4_v3`, `Standard_E4s_v3`, `Standard_E16_v3`, `Standard_E16s_v3`, `Standard_E64-16s_v3`, `Standard_E64-32s_v3`, `Standard_E64_v3`, `Standard_E64s_v3`, `Standard_E32-8s_v3`, `Standard_E32-16_v3`, `Standard_E32_v3`, `Standard_E32s_v3`, `Standard_E2_v3`, `Standard_E2s_v3`, `Standard_F8`, `Standard_F8s`, `Standard_F8s_v2`, `Standard_F4`, `Standard_F4s`, `Standard_F4s_v2`, `Standard_F1`, `Standard_F16`, `Standard_F16s`, `Standard_F16s_v2`, `Standard_F1s`, `Standard_F72s_v2`, `Standard_F64s_v2`, `Standard_F32s_v2`, `Standard_F2`, `Standard_F2s`, `Standard_F2s_v2`, `Standard_G5`, `Standard_G4`, `Standard_G1`, `Standard_GS5`, `Standard_GS5-8`, `Standard_GS5-16`, `Standard_GS4`, `Standard_GS4-8`, `Standard_GS4-4`, `Standard_GS1`, `Standard_GS3`, `Standard_GS2`, `Standard_G3`, `Standard_G2`, `Standard_H8`, `Standard_H8m`, `Standard_H16`, `Standard_H16m`, `Standard_H16mr`, `Standard_H16r`, `Standard_L8s`, `Standard_L4s`, `Standard_L16s`, `Standard_L32s`, `Standard_M128-64ms`, `Standard_M128-32ms`, `Standard_M128ms`, `Standard_M128s`, `Standard_M64-16ms`, `Standard_M64-32ms`, `Standard_M64ms`, `Standard_M64s`, `Standard_NC12`, `Standard_NC12s_v3`, `Standard_NC12s_v2`, `Standard_NC6`, `Standard_NC6s_v3`, `Standard_NC6s_v2`, `Standard_NC24`, `Standard_NC24r`, `Standard_NC24rs_v3`, `Standard_NC24rs_v2`, `Standard_NC24s_v3`, `Standard_NC24s_v2`, `Standard_ND12s`, `Standard_ND6s`, `Standard_ND24rs`, `Standard_ND24s`, `Standard_NV12`, `Standard_NV6` and `Standard_NV24`.
        """
        return pulumi.get(self, "allowed_vm_sizes")

    @allowed_vm_sizes.setter
    def allowed_vm_sizes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_vm_sizes", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of the proximity placement group. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A mapping of tags to assign to the resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the supported zone of the Proximity Placement Group. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class _PlacementGroupState:
    def __init__(__self__, *,
                 allowed_vm_sizes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PlacementGroup resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_vm_sizes: Specifies the supported sizes of Virtual Machines that can be created in the Proximity Placement Group. Possible values are `Basic_A4`, `Basic_A1`, `Basic_A3`, `Basic_A2`, `Basic_A0`, `Standard_A8`, `Standard_A8_v2`, `Standard_A8m_v2`, `Standard_A5`, `Standard_A4`, `Standard_A4_v2`, `Standard_A4m_v2`, `Standard_A9`, `Standard_A1`, `Standard_A11`, `Standard_A1_v2`, `Standard_A10`, `Standard_A7`, `Standard_A6`, `Standard_A3`, `Standard_A2`, `Standard_A2_v2`, `Standard_A2m_v2`, `Standard_A0`, `Standard_B8ms`, `Standard_B4ms`, `Standard_B1ms`, `Standard_B1s`, `Standard_B2ms`, `Standard_B2s`, `Standard_D8_v3`, `Standard_D8s_v3`, `Standard_D5_v2`, `Standard_D4`, `Standard_D4_v3`, `Standard_D4_v2`, `Standard_D4s_v3`, `Standard_D1`, `Standard_D15_v2`, `Standard_D14`, `Standard_D14_v2`, `Standard_D11`, `Standard_D11_v2`, `Standard_D16_v3`, `Standard_D16s_v3`, `Standard_D13`, `Standard_D13_v2`, `Standard_D12`, `Standard_D12_v2`, `Standard_D1_v2`, `Standard_DS5_v2`, `Standard_DS4`, `Standard_DS4_v2`, `Standard_DS1`, `Standard_DS15_v2`, `Standard_DS14`, `Standard_DS14-8_v2`, `Standard_DS14-4_v2`, `Standard_DS14_v2`, `Standard_DS11`, `Standard_DS11_v2`, `Standard_DS13`, `Standard_DS13-4_v2`, `Standard_DS13-2_v2`, `Standard_DS13_v2`, `Standard_DS12`, `Standard_DS12_v2`, `Standard_DS1_v2`, `Standard_DS3`, `Standard_DS3_v2`, `Standard_DS2`, `Standard_DS2_v2`, `Standard_D64_v3`, `Standard_D64s_v3`, `Standard_D3`, `Standard_D32_v3`, `Standard_D32s_v3`, `Standard_D3_v2`, `Standard_D2`, `Standard_D2_v3`, `Standard_D2_v2`, `Standard_D2s_v3`, `Standard_E8_v3`, `Standard_E8s_v3`, `Standard_E4_v3`, `Standard_E4s_v3`, `Standard_E16_v3`, `Standard_E16s_v3`, `Standard_E64-16s_v3`, `Standard_E64-32s_v3`, `Standard_E64_v3`, `Standard_E64s_v3`, `Standard_E32-8s_v3`, `Standard_E32-16_v3`, `Standard_E32_v3`, `Standard_E32s_v3`, `Standard_E2_v3`, `Standard_E2s_v3`, `Standard_F8`, `Standard_F8s`, `Standard_F8s_v2`, `Standard_F4`, `Standard_F4s`, `Standard_F4s_v2`, `Standard_F1`, `Standard_F16`, `Standard_F16s`, `Standard_F16s_v2`, `Standard_F1s`, `Standard_F72s_v2`, `Standard_F64s_v2`, `Standard_F32s_v2`, `Standard_F2`, `Standard_F2s`, `Standard_F2s_v2`, `Standard_G5`, `Standard_G4`, `Standard_G1`, `Standard_GS5`, `Standard_GS5-8`, `Standard_GS5-16`, `Standard_GS4`, `Standard_GS4-8`, `Standard_GS4-4`, `Standard_GS1`, `Standard_GS3`, `Standard_GS2`, `Standard_G3`, `Standard_G2`, `Standard_H8`, `Standard_H8m`, `Standard_H16`, `Standard_H16m`, `Standard_H16mr`, `Standard_H16r`, `Standard_L8s`, `Standard_L4s`, `Standard_L16s`, `Standard_L32s`, `Standard_M128-64ms`, `Standard_M128-32ms`, `Standard_M128ms`, `Standard_M128s`, `Standard_M64-16ms`, `Standard_M64-32ms`, `Standard_M64ms`, `Standard_M64s`, `Standard_NC12`, `Standard_NC12s_v3`, `Standard_NC12s_v2`, `Standard_NC6`, `Standard_NC6s_v3`, `Standard_NC6s_v2`, `Standard_NC24`, `Standard_NC24r`, `Standard_NC24rs_v3`, `Standard_NC24rs_v2`, `Standard_NC24s_v3`, `Standard_NC24s_v2`, `Standard_ND12s`, `Standard_ND6s`, `Standard_ND24rs`, `Standard_ND24s`, `Standard_NV12`, `Standard_NV6` and `Standard_NV24`.
        :param pulumi.Input[str] location: Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: Specifies the name of the proximity placement group. Changing this forces a new resource to be created.
        :param pulumi.Input[str] resource_group_name: The name of the resource group in which to create the availability set. Changing this forces a new resource to be created.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the resource.
        :param pulumi.Input[str] zone: Specifies the supported zone of the Proximity Placement Group. Changing this forces a new resource to be created.
        """
        if allowed_vm_sizes is not None:
            pulumi.set(__self__, "allowed_vm_sizes", allowed_vm_sizes)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="allowedVmSizes")
    def allowed_vm_sizes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the supported sizes of Virtual Machines that can be created in the Proximity Placement Group. Possible values are `Basic_A4`, `Basic_A1`, `Basic_A3`, `Basic_A2`, `Basic_A0`, `Standard_A8`, `Standard_A8_v2`, `Standard_A8m_v2`, `Standard_A5`, `Standard_A4`, `Standard_A4_v2`, `Standard_A4m_v2`, `Standard_A9`, `Standard_A1`, `Standard_A11`, `Standard_A1_v2`, `Standard_A10`, `Standard_A7`, `Standard_A6`, `Standard_A3`, `Standard_A2`, `Standard_A2_v2`, `Standard_A2m_v2`, `Standard_A0`, `Standard_B8ms`, `Standard_B4ms`, `Standard_B1ms`, `Standard_B1s`, `Standard_B2ms`, `Standard_B2s`, `Standard_D8_v3`, `Standard_D8s_v3`, `Standard_D5_v2`, `Standard_D4`, `Standard_D4_v3`, `Standard_D4_v2`, `Standard_D4s_v3`, `Standard_D1`, `Standard_D15_v2`, `Standard_D14`, `Standard_D14_v2`, `Standard_D11`, `Standard_D11_v2`, `Standard_D16_v3`, `Standard_D16s_v3`, `Standard_D13`, `Standard_D13_v2`, `Standard_D12`, `Standard_D12_v2`, `Standard_D1_v2`, `Standard_DS5_v2`, `Standard_DS4`, `Standard_DS4_v2`, `Standard_DS1`, `Standard_DS15_v2`, `Standard_DS14`, `Standard_DS14-8_v2`, `Standard_DS14-4_v2`, `Standard_DS14_v2`, `Standard_DS11`, `Standard_DS11_v2`, `Standard_DS13`, `Standard_DS13-4_v2`, `Standard_DS13-2_v2`, `Standard_DS13_v2`, `Standard_DS12`, `Standard_DS12_v2`, `Standard_DS1_v2`, `Standard_DS3`, `Standard_DS3_v2`, `Standard_DS2`, `Standard_DS2_v2`, `Standard_D64_v3`, `Standard_D64s_v3`, `Standard_D3`, `Standard_D32_v3`, `Standard_D32s_v3`, `Standard_D3_v2`, `Standard_D2`, `Standard_D2_v3`, `Standard_D2_v2`, `Standard_D2s_v3`, `Standard_E8_v3`, `Standard_E8s_v3`, `Standard_E4_v3`, `Standard_E4s_v3`, `Standard_E16_v3`, `Standard_E16s_v3`, `Standard_E64-16s_v3`, `Standard_E64-32s_v3`, `Standard_E64_v3`, `Standard_E64s_v3`, `Standard_E32-8s_v3`, `Standard_E32-16_v3`, `Standard_E32_v3`, `Standard_E32s_v3`, `Standard_E2_v3`, `Standard_E2s_v3`, `Standard_F8`, `Standard_F8s`, `Standard_F8s_v2`, `Standard_F4`, `Standard_F4s`, `Standard_F4s_v2`, `Standard_F1`, `Standard_F16`, `Standard_F16s`, `Standard_F16s_v2`, `Standard_F1s`, `Standard_F72s_v2`, `Standard_F64s_v2`, `Standard_F32s_v2`, `Standard_F2`, `Standard_F2s`, `Standard_F2s_v2`, `Standard_G5`, `Standard_G4`, `Standard_G1`, `Standard_GS5`, `Standard_GS5-8`, `Standard_GS5-16`, `Standard_GS4`, `Standard_GS4-8`, `Standard_GS4-4`, `Standard_GS1`, `Standard_GS3`, `Standard_GS2`, `Standard_G3`, `Standard_G2`, `Standard_H8`, `Standard_H8m`, `Standard_H16`, `Standard_H16m`, `Standard_H16mr`, `Standard_H16r`, `Standard_L8s`, `Standard_L4s`, `Standard_L16s`, `Standard_L32s`, `Standard_M128-64ms`, `Standard_M128-32ms`, `Standard_M128ms`, `Standard_M128s`, `Standard_M64-16ms`, `Standard_M64-32ms`, `Standard_M64ms`, `Standard_M64s`, `Standard_NC12`, `Standard_NC12s_v3`, `Standard_NC12s_v2`, `Standard_NC6`, `Standard_NC6s_v3`, `Standard_NC6s_v2`, `Standard_NC24`, `Standard_NC24r`, `Standard_NC24rs_v3`, `Standard_NC24rs_v2`, `Standard_NC24s_v3`, `Standard_NC24s_v2`, `Standard_ND12s`, `Standard_ND6s`, `Standard_ND24rs`, `Standard_ND24s`, `Standard_NV12`, `Standard_NV6` and `Standard_NV24`.
        """
        return pulumi.get(self, "allowed_vm_sizes")

    @allowed_vm_sizes.setter
    def allowed_vm_sizes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_vm_sizes", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of the proximity placement group. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the resource group in which to create the availability set. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A mapping of tags to assign to the resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the supported zone of the Proximity Placement Group. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


class PlacementGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_vm_sizes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a proximity placement group for virtual machines, virtual machine scale sets and availability sets.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_placement_group = azure.proximity.PlacementGroup("examplePlacementGroup",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            tags={
                "environment": "Production",
            })
        ```

        ## Import

        Proximity Placement Groups can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:proximity/placementGroup:PlacementGroup example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg/providers/Microsoft.Compute/proximityPlacementGroups/example-ppg
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_vm_sizes: Specifies the supported sizes of Virtual Machines that can be created in the Proximity Placement Group. Possible values are `Basic_A4`, `Basic_A1`, `Basic_A3`, `Basic_A2`, `Basic_A0`, `Standard_A8`, `Standard_A8_v2`, `Standard_A8m_v2`, `Standard_A5`, `Standard_A4`, `Standard_A4_v2`, `Standard_A4m_v2`, `Standard_A9`, `Standard_A1`, `Standard_A11`, `Standard_A1_v2`, `Standard_A10`, `Standard_A7`, `Standard_A6`, `Standard_A3`, `Standard_A2`, `Standard_A2_v2`, `Standard_A2m_v2`, `Standard_A0`, `Standard_B8ms`, `Standard_B4ms`, `Standard_B1ms`, `Standard_B1s`, `Standard_B2ms`, `Standard_B2s`, `Standard_D8_v3`, `Standard_D8s_v3`, `Standard_D5_v2`, `Standard_D4`, `Standard_D4_v3`, `Standard_D4_v2`, `Standard_D4s_v3`, `Standard_D1`, `Standard_D15_v2`, `Standard_D14`, `Standard_D14_v2`, `Standard_D11`, `Standard_D11_v2`, `Standard_D16_v3`, `Standard_D16s_v3`, `Standard_D13`, `Standard_D13_v2`, `Standard_D12`, `Standard_D12_v2`, `Standard_D1_v2`, `Standard_DS5_v2`, `Standard_DS4`, `Standard_DS4_v2`, `Standard_DS1`, `Standard_DS15_v2`, `Standard_DS14`, `Standard_DS14-8_v2`, `Standard_DS14-4_v2`, `Standard_DS14_v2`, `Standard_DS11`, `Standard_DS11_v2`, `Standard_DS13`, `Standard_DS13-4_v2`, `Standard_DS13-2_v2`, `Standard_DS13_v2`, `Standard_DS12`, `Standard_DS12_v2`, `Standard_DS1_v2`, `Standard_DS3`, `Standard_DS3_v2`, `Standard_DS2`, `Standard_DS2_v2`, `Standard_D64_v3`, `Standard_D64s_v3`, `Standard_D3`, `Standard_D32_v3`, `Standard_D32s_v3`, `Standard_D3_v2`, `Standard_D2`, `Standard_D2_v3`, `Standard_D2_v2`, `Standard_D2s_v3`, `Standard_E8_v3`, `Standard_E8s_v3`, `Standard_E4_v3`, `Standard_E4s_v3`, `Standard_E16_v3`, `Standard_E16s_v3`, `Standard_E64-16s_v3`, `Standard_E64-32s_v3`, `Standard_E64_v3`, `Standard_E64s_v3`, `Standard_E32-8s_v3`, `Standard_E32-16_v3`, `Standard_E32_v3`, `Standard_E32s_v3`, `Standard_E2_v3`, `Standard_E2s_v3`, `Standard_F8`, `Standard_F8s`, `Standard_F8s_v2`, `Standard_F4`, `Standard_F4s`, `Standard_F4s_v2`, `Standard_F1`, `Standard_F16`, `Standard_F16s`, `Standard_F16s_v2`, `Standard_F1s`, `Standard_F72s_v2`, `Standard_F64s_v2`, `Standard_F32s_v2`, `Standard_F2`, `Standard_F2s`, `Standard_F2s_v2`, `Standard_G5`, `Standard_G4`, `Standard_G1`, `Standard_GS5`, `Standard_GS5-8`, `Standard_GS5-16`, `Standard_GS4`, `Standard_GS4-8`, `Standard_GS4-4`, `Standard_GS1`, `Standard_GS3`, `Standard_GS2`, `Standard_G3`, `Standard_G2`, `Standard_H8`, `Standard_H8m`, `Standard_H16`, `Standard_H16m`, `Standard_H16mr`, `Standard_H16r`, `Standard_L8s`, `Standard_L4s`, `Standard_L16s`, `Standard_L32s`, `Standard_M128-64ms`, `Standard_M128-32ms`, `Standard_M128ms`, `Standard_M128s`, `Standard_M64-16ms`, `Standard_M64-32ms`, `Standard_M64ms`, `Standard_M64s`, `Standard_NC12`, `Standard_NC12s_v3`, `Standard_NC12s_v2`, `Standard_NC6`, `Standard_NC6s_v3`, `Standard_NC6s_v2`, `Standard_NC24`, `Standard_NC24r`, `Standard_NC24rs_v3`, `Standard_NC24rs_v2`, `Standard_NC24s_v3`, `Standard_NC24s_v2`, `Standard_ND12s`, `Standard_ND6s`, `Standard_ND24rs`, `Standard_ND24s`, `Standard_NV12`, `Standard_NV6` and `Standard_NV24`.
        :param pulumi.Input[str] location: Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: Specifies the name of the proximity placement group. Changing this forces a new resource to be created.
        :param pulumi.Input[str] resource_group_name: The name of the resource group in which to create the availability set. Changing this forces a new resource to be created.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the resource.
        :param pulumi.Input[str] zone: Specifies the supported zone of the Proximity Placement Group. Changing this forces a new resource to be created.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PlacementGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a proximity placement group for virtual machines, virtual machine scale sets and availability sets.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_placement_group = azure.proximity.PlacementGroup("examplePlacementGroup",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            tags={
                "environment": "Production",
            })
        ```

        ## Import

        Proximity Placement Groups can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:proximity/placementGroup:PlacementGroup example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg/providers/Microsoft.Compute/proximityPlacementGroups/example-ppg
        ```

        :param str resource_name: The name of the resource.
        :param PlacementGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PlacementGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_vm_sizes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PlacementGroupArgs.__new__(PlacementGroupArgs)

            __props__.__dict__["allowed_vm_sizes"] = allowed_vm_sizes
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["zone"] = zone
        super(PlacementGroup, __self__).__init__(
            'azure:proximity/placementGroup:PlacementGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allowed_vm_sizes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            location: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            resource_group_name: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            zone: Optional[pulumi.Input[str]] = None) -> 'PlacementGroup':
        """
        Get an existing PlacementGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_vm_sizes: Specifies the supported sizes of Virtual Machines that can be created in the Proximity Placement Group. Possible values are `Basic_A4`, `Basic_A1`, `Basic_A3`, `Basic_A2`, `Basic_A0`, `Standard_A8`, `Standard_A8_v2`, `Standard_A8m_v2`, `Standard_A5`, `Standard_A4`, `Standard_A4_v2`, `Standard_A4m_v2`, `Standard_A9`, `Standard_A1`, `Standard_A11`, `Standard_A1_v2`, `Standard_A10`, `Standard_A7`, `Standard_A6`, `Standard_A3`, `Standard_A2`, `Standard_A2_v2`, `Standard_A2m_v2`, `Standard_A0`, `Standard_B8ms`, `Standard_B4ms`, `Standard_B1ms`, `Standard_B1s`, `Standard_B2ms`, `Standard_B2s`, `Standard_D8_v3`, `Standard_D8s_v3`, `Standard_D5_v2`, `Standard_D4`, `Standard_D4_v3`, `Standard_D4_v2`, `Standard_D4s_v3`, `Standard_D1`, `Standard_D15_v2`, `Standard_D14`, `Standard_D14_v2`, `Standard_D11`, `Standard_D11_v2`, `Standard_D16_v3`, `Standard_D16s_v3`, `Standard_D13`, `Standard_D13_v2`, `Standard_D12`, `Standard_D12_v2`, `Standard_D1_v2`, `Standard_DS5_v2`, `Standard_DS4`, `Standard_DS4_v2`, `Standard_DS1`, `Standard_DS15_v2`, `Standard_DS14`, `Standard_DS14-8_v2`, `Standard_DS14-4_v2`, `Standard_DS14_v2`, `Standard_DS11`, `Standard_DS11_v2`, `Standard_DS13`, `Standard_DS13-4_v2`, `Standard_DS13-2_v2`, `Standard_DS13_v2`, `Standard_DS12`, `Standard_DS12_v2`, `Standard_DS1_v2`, `Standard_DS3`, `Standard_DS3_v2`, `Standard_DS2`, `Standard_DS2_v2`, `Standard_D64_v3`, `Standard_D64s_v3`, `Standard_D3`, `Standard_D32_v3`, `Standard_D32s_v3`, `Standard_D3_v2`, `Standard_D2`, `Standard_D2_v3`, `Standard_D2_v2`, `Standard_D2s_v3`, `Standard_E8_v3`, `Standard_E8s_v3`, `Standard_E4_v3`, `Standard_E4s_v3`, `Standard_E16_v3`, `Standard_E16s_v3`, `Standard_E64-16s_v3`, `Standard_E64-32s_v3`, `Standard_E64_v3`, `Standard_E64s_v3`, `Standard_E32-8s_v3`, `Standard_E32-16_v3`, `Standard_E32_v3`, `Standard_E32s_v3`, `Standard_E2_v3`, `Standard_E2s_v3`, `Standard_F8`, `Standard_F8s`, `Standard_F8s_v2`, `Standard_F4`, `Standard_F4s`, `Standard_F4s_v2`, `Standard_F1`, `Standard_F16`, `Standard_F16s`, `Standard_F16s_v2`, `Standard_F1s`, `Standard_F72s_v2`, `Standard_F64s_v2`, `Standard_F32s_v2`, `Standard_F2`, `Standard_F2s`, `Standard_F2s_v2`, `Standard_G5`, `Standard_G4`, `Standard_G1`, `Standard_GS5`, `Standard_GS5-8`, `Standard_GS5-16`, `Standard_GS4`, `Standard_GS4-8`, `Standard_GS4-4`, `Standard_GS1`, `Standard_GS3`, `Standard_GS2`, `Standard_G3`, `Standard_G2`, `Standard_H8`, `Standard_H8m`, `Standard_H16`, `Standard_H16m`, `Standard_H16mr`, `Standard_H16r`, `Standard_L8s`, `Standard_L4s`, `Standard_L16s`, `Standard_L32s`, `Standard_M128-64ms`, `Standard_M128-32ms`, `Standard_M128ms`, `Standard_M128s`, `Standard_M64-16ms`, `Standard_M64-32ms`, `Standard_M64ms`, `Standard_M64s`, `Standard_NC12`, `Standard_NC12s_v3`, `Standard_NC12s_v2`, `Standard_NC6`, `Standard_NC6s_v3`, `Standard_NC6s_v2`, `Standard_NC24`, `Standard_NC24r`, `Standard_NC24rs_v3`, `Standard_NC24rs_v2`, `Standard_NC24s_v3`, `Standard_NC24s_v2`, `Standard_ND12s`, `Standard_ND6s`, `Standard_ND24rs`, `Standard_ND24s`, `Standard_NV12`, `Standard_NV6` and `Standard_NV24`.
        :param pulumi.Input[str] location: Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: Specifies the name of the proximity placement group. Changing this forces a new resource to be created.
        :param pulumi.Input[str] resource_group_name: The name of the resource group in which to create the availability set. Changing this forces a new resource to be created.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the resource.
        :param pulumi.Input[str] zone: Specifies the supported zone of the Proximity Placement Group. Changing this forces a new resource to be created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PlacementGroupState.__new__(_PlacementGroupState)

        __props__.__dict__["allowed_vm_sizes"] = allowed_vm_sizes
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_group_name"] = resource_group_name
        __props__.__dict__["tags"] = tags
        __props__.__dict__["zone"] = zone
        return PlacementGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowedVmSizes")
    def allowed_vm_sizes(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Specifies the supported sizes of Virtual Machines that can be created in the Proximity Placement Group. Possible values are `Basic_A4`, `Basic_A1`, `Basic_A3`, `Basic_A2`, `Basic_A0`, `Standard_A8`, `Standard_A8_v2`, `Standard_A8m_v2`, `Standard_A5`, `Standard_A4`, `Standard_A4_v2`, `Standard_A4m_v2`, `Standard_A9`, `Standard_A1`, `Standard_A11`, `Standard_A1_v2`, `Standard_A10`, `Standard_A7`, `Standard_A6`, `Standard_A3`, `Standard_A2`, `Standard_A2_v2`, `Standard_A2m_v2`, `Standard_A0`, `Standard_B8ms`, `Standard_B4ms`, `Standard_B1ms`, `Standard_B1s`, `Standard_B2ms`, `Standard_B2s`, `Standard_D8_v3`, `Standard_D8s_v3`, `Standard_D5_v2`, `Standard_D4`, `Standard_D4_v3`, `Standard_D4_v2`, `Standard_D4s_v3`, `Standard_D1`, `Standard_D15_v2`, `Standard_D14`, `Standard_D14_v2`, `Standard_D11`, `Standard_D11_v2`, `Standard_D16_v3`, `Standard_D16s_v3`, `Standard_D13`, `Standard_D13_v2`, `Standard_D12`, `Standard_D12_v2`, `Standard_D1_v2`, `Standard_DS5_v2`, `Standard_DS4`, `Standard_DS4_v2`, `Standard_DS1`, `Standard_DS15_v2`, `Standard_DS14`, `Standard_DS14-8_v2`, `Standard_DS14-4_v2`, `Standard_DS14_v2`, `Standard_DS11`, `Standard_DS11_v2`, `Standard_DS13`, `Standard_DS13-4_v2`, `Standard_DS13-2_v2`, `Standard_DS13_v2`, `Standard_DS12`, `Standard_DS12_v2`, `Standard_DS1_v2`, `Standard_DS3`, `Standard_DS3_v2`, `Standard_DS2`, `Standard_DS2_v2`, `Standard_D64_v3`, `Standard_D64s_v3`, `Standard_D3`, `Standard_D32_v3`, `Standard_D32s_v3`, `Standard_D3_v2`, `Standard_D2`, `Standard_D2_v3`, `Standard_D2_v2`, `Standard_D2s_v3`, `Standard_E8_v3`, `Standard_E8s_v3`, `Standard_E4_v3`, `Standard_E4s_v3`, `Standard_E16_v3`, `Standard_E16s_v3`, `Standard_E64-16s_v3`, `Standard_E64-32s_v3`, `Standard_E64_v3`, `Standard_E64s_v3`, `Standard_E32-8s_v3`, `Standard_E32-16_v3`, `Standard_E32_v3`, `Standard_E32s_v3`, `Standard_E2_v3`, `Standard_E2s_v3`, `Standard_F8`, `Standard_F8s`, `Standard_F8s_v2`, `Standard_F4`, `Standard_F4s`, `Standard_F4s_v2`, `Standard_F1`, `Standard_F16`, `Standard_F16s`, `Standard_F16s_v2`, `Standard_F1s`, `Standard_F72s_v2`, `Standard_F64s_v2`, `Standard_F32s_v2`, `Standard_F2`, `Standard_F2s`, `Standard_F2s_v2`, `Standard_G5`, `Standard_G4`, `Standard_G1`, `Standard_GS5`, `Standard_GS5-8`, `Standard_GS5-16`, `Standard_GS4`, `Standard_GS4-8`, `Standard_GS4-4`, `Standard_GS1`, `Standard_GS3`, `Standard_GS2`, `Standard_G3`, `Standard_G2`, `Standard_H8`, `Standard_H8m`, `Standard_H16`, `Standard_H16m`, `Standard_H16mr`, `Standard_H16r`, `Standard_L8s`, `Standard_L4s`, `Standard_L16s`, `Standard_L32s`, `Standard_M128-64ms`, `Standard_M128-32ms`, `Standard_M128ms`, `Standard_M128s`, `Standard_M64-16ms`, `Standard_M64-32ms`, `Standard_M64ms`, `Standard_M64s`, `Standard_NC12`, `Standard_NC12s_v3`, `Standard_NC12s_v2`, `Standard_NC6`, `Standard_NC6s_v3`, `Standard_NC6s_v2`, `Standard_NC24`, `Standard_NC24r`, `Standard_NC24rs_v3`, `Standard_NC24rs_v2`, `Standard_NC24s_v3`, `Standard_NC24s_v2`, `Standard_ND12s`, `Standard_ND6s`, `Standard_ND24rs`, `Standard_ND24s`, `Standard_NV12`, `Standard_NV6` and `Standard_NV24`.
        """
        return pulumi.get(self, "allowed_vm_sizes")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Specifies the name of the proximity placement group. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[str]:
        """
        The name of the resource group in which to create the availability set. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A mapping of tags to assign to the resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the supported zone of the Proximity Placement Group. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "zone")

