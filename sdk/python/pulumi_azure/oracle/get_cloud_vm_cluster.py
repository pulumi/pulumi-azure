# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetCloudVmClusterResult',
    'AwaitableGetCloudVmClusterResult',
    'get_cloud_vm_cluster',
    'get_cloud_vm_cluster_output',
]

@pulumi.output_type
class GetCloudVmClusterResult:
    """
    A collection of values returned by getCloudVmCluster.
    """
    def __init__(__self__, backup_subnet_cidr=None, cloud_exadata_infrastructure_id=None, cluster_name=None, compartment_id=None, compute_nodes=None, cpu_core_count=None, data_collection_options=None, data_storage_percentage=None, data_storage_size_in_tbs=None, db_node_storage_size_in_gbs=None, db_servers=None, disk_redundancy=None, display_name=None, domain=None, gi_version=None, hostname=None, hostname_actual=None, id=None, iorm_config_caches=None, last_update_history_entry_id=None, license_model=None, lifecycle_details=None, lifecycle_state=None, listener_port=None, local_backup_enabled=None, location=None, memory_size_in_gbs=None, name=None, node_count=None, nsg_url=None, oci_url=None, ocid=None, ocpu_count=None, resource_group_name=None, scan_dns_name=None, scan_dns_record_id=None, scan_ip_ids=None, scan_listener_port_tcp=None, scan_listener_port_tcp_ssl=None, shape=None, sparse_diskgroup_enabled=None, ssh_public_keys=None, storage_size_in_gbs=None, subnet_id=None, subnet_ocid=None, system_version=None, tags=None, time_created=None, time_zone=None, vip_ods=None, virtual_network_id=None, zone_id=None):
        if backup_subnet_cidr and not isinstance(backup_subnet_cidr, str):
            raise TypeError("Expected argument 'backup_subnet_cidr' to be a str")
        pulumi.set(__self__, "backup_subnet_cidr", backup_subnet_cidr)
        if cloud_exadata_infrastructure_id and not isinstance(cloud_exadata_infrastructure_id, str):
            raise TypeError("Expected argument 'cloud_exadata_infrastructure_id' to be a str")
        pulumi.set(__self__, "cloud_exadata_infrastructure_id", cloud_exadata_infrastructure_id)
        if cluster_name and not isinstance(cluster_name, str):
            raise TypeError("Expected argument 'cluster_name' to be a str")
        pulumi.set(__self__, "cluster_name", cluster_name)
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if compute_nodes and not isinstance(compute_nodes, list):
            raise TypeError("Expected argument 'compute_nodes' to be a list")
        pulumi.set(__self__, "compute_nodes", compute_nodes)
        if cpu_core_count and not isinstance(cpu_core_count, int):
            raise TypeError("Expected argument 'cpu_core_count' to be a int")
        pulumi.set(__self__, "cpu_core_count", cpu_core_count)
        if data_collection_options and not isinstance(data_collection_options, list):
            raise TypeError("Expected argument 'data_collection_options' to be a list")
        pulumi.set(__self__, "data_collection_options", data_collection_options)
        if data_storage_percentage and not isinstance(data_storage_percentage, int):
            raise TypeError("Expected argument 'data_storage_percentage' to be a int")
        pulumi.set(__self__, "data_storage_percentage", data_storage_percentage)
        if data_storage_size_in_tbs and not isinstance(data_storage_size_in_tbs, float):
            raise TypeError("Expected argument 'data_storage_size_in_tbs' to be a float")
        pulumi.set(__self__, "data_storage_size_in_tbs", data_storage_size_in_tbs)
        if db_node_storage_size_in_gbs and not isinstance(db_node_storage_size_in_gbs, int):
            raise TypeError("Expected argument 'db_node_storage_size_in_gbs' to be a int")
        pulumi.set(__self__, "db_node_storage_size_in_gbs", db_node_storage_size_in_gbs)
        if db_servers and not isinstance(db_servers, list):
            raise TypeError("Expected argument 'db_servers' to be a list")
        pulumi.set(__self__, "db_servers", db_servers)
        if disk_redundancy and not isinstance(disk_redundancy, str):
            raise TypeError("Expected argument 'disk_redundancy' to be a str")
        pulumi.set(__self__, "disk_redundancy", disk_redundancy)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if gi_version and not isinstance(gi_version, str):
            raise TypeError("Expected argument 'gi_version' to be a str")
        pulumi.set(__self__, "gi_version", gi_version)
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        pulumi.set(__self__, "hostname", hostname)
        if hostname_actual and not isinstance(hostname_actual, str):
            raise TypeError("Expected argument 'hostname_actual' to be a str")
        pulumi.set(__self__, "hostname_actual", hostname_actual)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if iorm_config_caches and not isinstance(iorm_config_caches, list):
            raise TypeError("Expected argument 'iorm_config_caches' to be a list")
        pulumi.set(__self__, "iorm_config_caches", iorm_config_caches)
        if last_update_history_entry_id and not isinstance(last_update_history_entry_id, str):
            raise TypeError("Expected argument 'last_update_history_entry_id' to be a str")
        pulumi.set(__self__, "last_update_history_entry_id", last_update_history_entry_id)
        if license_model and not isinstance(license_model, str):
            raise TypeError("Expected argument 'license_model' to be a str")
        pulumi.set(__self__, "license_model", license_model)
        if lifecycle_details and not isinstance(lifecycle_details, str):
            raise TypeError("Expected argument 'lifecycle_details' to be a str")
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if lifecycle_state and not isinstance(lifecycle_state, str):
            raise TypeError("Expected argument 'lifecycle_state' to be a str")
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if listener_port and not isinstance(listener_port, int):
            raise TypeError("Expected argument 'listener_port' to be a int")
        pulumi.set(__self__, "listener_port", listener_port)
        if local_backup_enabled and not isinstance(local_backup_enabled, bool):
            raise TypeError("Expected argument 'local_backup_enabled' to be a bool")
        pulumi.set(__self__, "local_backup_enabled", local_backup_enabled)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if memory_size_in_gbs and not isinstance(memory_size_in_gbs, int):
            raise TypeError("Expected argument 'memory_size_in_gbs' to be a int")
        pulumi.set(__self__, "memory_size_in_gbs", memory_size_in_gbs)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if node_count and not isinstance(node_count, int):
            raise TypeError("Expected argument 'node_count' to be a int")
        pulumi.set(__self__, "node_count", node_count)
        if nsg_url and not isinstance(nsg_url, str):
            raise TypeError("Expected argument 'nsg_url' to be a str")
        pulumi.set(__self__, "nsg_url", nsg_url)
        if oci_url and not isinstance(oci_url, str):
            raise TypeError("Expected argument 'oci_url' to be a str")
        pulumi.set(__self__, "oci_url", oci_url)
        if ocid and not isinstance(ocid, str):
            raise TypeError("Expected argument 'ocid' to be a str")
        pulumi.set(__self__, "ocid", ocid)
        if ocpu_count and not isinstance(ocpu_count, float):
            raise TypeError("Expected argument 'ocpu_count' to be a float")
        pulumi.set(__self__, "ocpu_count", ocpu_count)
        if resource_group_name and not isinstance(resource_group_name, str):
            raise TypeError("Expected argument 'resource_group_name' to be a str")
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if scan_dns_name and not isinstance(scan_dns_name, str):
            raise TypeError("Expected argument 'scan_dns_name' to be a str")
        pulumi.set(__self__, "scan_dns_name", scan_dns_name)
        if scan_dns_record_id and not isinstance(scan_dns_record_id, str):
            raise TypeError("Expected argument 'scan_dns_record_id' to be a str")
        pulumi.set(__self__, "scan_dns_record_id", scan_dns_record_id)
        if scan_ip_ids and not isinstance(scan_ip_ids, list):
            raise TypeError("Expected argument 'scan_ip_ids' to be a list")
        pulumi.set(__self__, "scan_ip_ids", scan_ip_ids)
        if scan_listener_port_tcp and not isinstance(scan_listener_port_tcp, int):
            raise TypeError("Expected argument 'scan_listener_port_tcp' to be a int")
        pulumi.set(__self__, "scan_listener_port_tcp", scan_listener_port_tcp)
        if scan_listener_port_tcp_ssl and not isinstance(scan_listener_port_tcp_ssl, int):
            raise TypeError("Expected argument 'scan_listener_port_tcp_ssl' to be a int")
        pulumi.set(__self__, "scan_listener_port_tcp_ssl", scan_listener_port_tcp_ssl)
        if shape and not isinstance(shape, str):
            raise TypeError("Expected argument 'shape' to be a str")
        pulumi.set(__self__, "shape", shape)
        if sparse_diskgroup_enabled and not isinstance(sparse_diskgroup_enabled, bool):
            raise TypeError("Expected argument 'sparse_diskgroup_enabled' to be a bool")
        pulumi.set(__self__, "sparse_diskgroup_enabled", sparse_diskgroup_enabled)
        if ssh_public_keys and not isinstance(ssh_public_keys, list):
            raise TypeError("Expected argument 'ssh_public_keys' to be a list")
        pulumi.set(__self__, "ssh_public_keys", ssh_public_keys)
        if storage_size_in_gbs and not isinstance(storage_size_in_gbs, int):
            raise TypeError("Expected argument 'storage_size_in_gbs' to be a int")
        pulumi.set(__self__, "storage_size_in_gbs", storage_size_in_gbs)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if subnet_ocid and not isinstance(subnet_ocid, str):
            raise TypeError("Expected argument 'subnet_ocid' to be a str")
        pulumi.set(__self__, "subnet_ocid", subnet_ocid)
        if system_version and not isinstance(system_version, str):
            raise TypeError("Expected argument 'system_version' to be a str")
        pulumi.set(__self__, "system_version", system_version)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if time_created and not isinstance(time_created, str):
            raise TypeError("Expected argument 'time_created' to be a str")
        pulumi.set(__self__, "time_created", time_created)
        if time_zone and not isinstance(time_zone, str):
            raise TypeError("Expected argument 'time_zone' to be a str")
        pulumi.set(__self__, "time_zone", time_zone)
        if vip_ods and not isinstance(vip_ods, list):
            raise TypeError("Expected argument 'vip_ods' to be a list")
        pulumi.set(__self__, "vip_ods", vip_ods)
        if virtual_network_id and not isinstance(virtual_network_id, str):
            raise TypeError("Expected argument 'virtual_network_id' to be a str")
        pulumi.set(__self__, "virtual_network_id", virtual_network_id)
        if zone_id and not isinstance(zone_id, str):
            raise TypeError("Expected argument 'zone_id' to be a str")
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="backupSubnetCidr")
    def backup_subnet_cidr(self) -> str:
        """
        Client OCI backup subnet CIDR, default is `192.168.252.0/22`.
        """
        return pulumi.get(self, "backup_subnet_cidr")

    @property
    @pulumi.getter(name="cloudExadataInfrastructureId")
    def cloud_exadata_infrastructure_id(self) -> str:
        """
        The Cloud Exadata Infrastructure ID.
        """
        return pulumi.get(self, "cloud_exadata_infrastructure_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        The cluster name for Cloud VM Cluster.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="computeNodes")
    def compute_nodes(self) -> Sequence[str]:
        """
        A `compute_nodes` block as defined below.
        """
        return pulumi.get(self, "compute_nodes")

    @property
    @pulumi.getter(name="cpuCoreCount")
    def cpu_core_count(self) -> int:
        """
        The number of CPU cores enabled on the Cloud VM Cluster.
        """
        return pulumi.get(self, "cpu_core_count")

    @property
    @pulumi.getter(name="dataCollectionOptions")
    def data_collection_options(self) -> Sequence['outputs.GetCloudVmClusterDataCollectionOptionResult']:
        """
        A `data_collection_options` block as defined below.
        """
        return pulumi.get(self, "data_collection_options")

    @property
    @pulumi.getter(name="dataStoragePercentage")
    def data_storage_percentage(self) -> int:
        """
        The percentage assigned to DATA storage (user data and database files). The remaining percentage is assigned to RECO storage (database redo logs, archive logs, and recovery manager backups). Accepted values are `35`, `40`, `60`, and 80. The default is `80` percent assigned to DATA storage. See [Storage Configuration](https://docs.oracle.com/en-us/iaas/exadatacloud/index.html#Exadata) in the Exadata documentation for details on the impact of the configuration settings on storage.
        """
        return pulumi.get(self, "data_storage_percentage")

    @property
    @pulumi.getter(name="dataStorageSizeInTbs")
    def data_storage_size_in_tbs(self) -> float:
        """
        The data disk group size to be allocated in TBs.
        """
        return pulumi.get(self, "data_storage_size_in_tbs")

    @property
    @pulumi.getter(name="dbNodeStorageSizeInGbs")
    def db_node_storage_size_in_gbs(self) -> int:
        """
        The local node storage to be allocated in GBs.
        """
        return pulumi.get(self, "db_node_storage_size_in_gbs")

    @property
    @pulumi.getter(name="dbServers")
    def db_servers(self) -> Sequence[str]:
        """
        A `db_servers` block as defined below.
        """
        return pulumi.get(self, "db_servers")

    @property
    @pulumi.getter(name="diskRedundancy")
    def disk_redundancy(self) -> str:
        """
        The type of redundancy configured for the Cloud Vm Cluster. `NORMAL` is 2-way redundancy. `HIGH` is 3-way redundancy.
        """
        return pulumi.get(self, "disk_redundancy")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The user-friendly name for the Cloud VM Cluster. The name does not need to be unique.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The domain name for the Cloud VM Cluster.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="giVersion")
    def gi_version(self) -> str:
        """
        A valid Oracle Grid Infrastructure (GI) software version.
        """
        return pulumi.get(self, "gi_version")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        The hostname for the Cloud VM Cluster without suffix.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="hostnameActual")
    def hostname_actual(self) -> str:
        """
        The hostname for the Cloud VM Cluster with suffix.
        """
        return pulumi.get(self, "hostname_actual")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="iormConfigCaches")
    def iorm_config_caches(self) -> Sequence['outputs.GetCloudVmClusterIormConfigCachResult']:
        """
        A `iorm_config_cache` block as defined below.
        """
        return pulumi.get(self, "iorm_config_caches")

    @property
    @pulumi.getter(name="lastUpdateHistoryEntryId")
    def last_update_history_entry_id(self) -> str:
        """
        The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the last maintenance update history entry. This value is updated when a maintenance update starts.
        """
        return pulumi.get(self, "last_update_history_entry_id")

    @property
    @pulumi.getter(name="licenseModel")
    def license_model(self) -> str:
        """
        The Oracle license model that applies to the Cloud VM Cluster.
        """
        return pulumi.get(self, "license_model")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        Additional information about the current `lifecycleState`.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> str:
        """
        The current state of IORM configuration for the Exadata DB system.
        """
        return pulumi.get(self, "lifecycle_state")

    @property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> int:
        """
        The port number configured for the listener on the Cloud VM Cluster.
        """
        return pulumi.get(self, "listener_port")

    @property
    @pulumi.getter(name="localBackupEnabled")
    def local_backup_enabled(self) -> bool:
        """
        If true, database backup on local Exadata storage is configured for the Cloud VM Cluster. If false, database backup on local Exadata storage is not available in the Cloud VM Cluster.
        """
        return pulumi.get(self, "local_backup_enabled")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The Azure Region where the Cloud VM Cluster exists.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="memorySizeInGbs")
    def memory_size_in_gbs(self) -> int:
        """
        The memory to be allocated in GBs.
        """
        return pulumi.get(self, "memory_size_in_gbs")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> int:
        """
        The number of nodes in the Cloud VM Cluster.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="nsgUrl")
    def nsg_url(self) -> str:
        """
        The list of [OCIDs](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) for the network security groups (NSGs) to which this resource belongs. Setting this to an empty list removes all resources from all NSGs. For more information about NSGs, see [Security Rules](https://docs.oracle.com/en-us/iaas/Content/Network/Concepts/securityrules.htm). NsgIds restrictions:
        * A network security group (NSG) is optional for Autonomous Databases with private access. The nsgIds list can be empty.
        """
        return pulumi.get(self, "nsg_url")

    @property
    @pulumi.getter(name="ociUrl")
    def oci_url(self) -> str:
        """
        The URL of the resource in the OCI console.
        """
        return pulumi.get(self, "oci_url")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the Cloud VM Cluster.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="ocpuCount")
    def ocpu_count(self) -> float:
        """
        The number of OCPU cores to enable on the Cloud VM Cluster. Only 1 decimal place is allowed for the fractional part.
        """
        return pulumi.get(self, "ocpu_count")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> str:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="scanDnsName")
    def scan_dns_name(self) -> str:
        """
        The FQDN of the DNS record for the SCAN IP addresses that are associated with the Cloud VM Cluster.
        """
        return pulumi.get(self, "scan_dns_name")

    @property
    @pulumi.getter(name="scanDnsRecordId")
    def scan_dns_record_id(self) -> str:
        """
        The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the DNS record for the SCAN IP addresses that are associated with the Cloud VM Cluster.
        """
        return pulumi.get(self, "scan_dns_record_id")

    @property
    @pulumi.getter(name="scanIpIds")
    def scan_ip_ids(self) -> Sequence[str]:
        """
        A `scan_ip_ids` block as defined below.
        """
        return pulumi.get(self, "scan_ip_ids")

    @property
    @pulumi.getter(name="scanListenerPortTcp")
    def scan_listener_port_tcp(self) -> int:
        """
        The TCP Single Client Access Name (SCAN) port. The default port is 1521.
        """
        return pulumi.get(self, "scan_listener_port_tcp")

    @property
    @pulumi.getter(name="scanListenerPortTcpSsl")
    def scan_listener_port_tcp_ssl(self) -> int:
        """
        The TCPS Single Client Access Name (SCAN) port. The default port is 2484.
        """
        return pulumi.get(self, "scan_listener_port_tcp_ssl")

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        The model name of the Exadata hardware running the Cloud VM Cluster.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="sparseDiskgroupEnabled")
    def sparse_diskgroup_enabled(self) -> bool:
        """
        If true, sparse disk group is configured for the Cloud VM Cluster. If false, sparse disk group is not created.
        """
        return pulumi.get(self, "sparse_diskgroup_enabled")

    @property
    @pulumi.getter(name="sshPublicKeys")
    def ssh_public_keys(self) -> Sequence[str]:
        """
        The public key portion of one or more key pairs used for SSH access to the Cloud VM Cluster.
        """
        return pulumi.get(self, "ssh_public_keys")

    @property
    @pulumi.getter(name="storageSizeInGbs")
    def storage_size_in_gbs(self) -> int:
        """
        The storage allocation for the disk group, in gigabytes (GB).
        """
        return pulumi.get(self, "storage_size_in_gbs")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The ID of the Azure Resource Manager subnet resource.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="subnetOcid")
    def subnet_ocid(self) -> str:
        """
        The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the subnet associated with the Cloud VM Cluster.
        """
        return pulumi.get(self, "subnet_ocid")

    @property
    @pulumi.getter(name="systemVersion")
    def system_version(self) -> str:
        """
        Operating system version of the image.
        """
        return pulumi.get(self, "system_version")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, str]:
        """
        A mapping of tags assigned to the Cloud VM Cluster.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the Cloud VM Cluster was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> str:
        """
        The time zone of the Cloud VM Cluster. For details, see [Exadata Infrastructure Time Zones](https://docs.oracle.com/en-us/iaas/base-database/doc/manage-time-zone.html).
        """
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter(name="vipOds")
    def vip_ods(self) -> Sequence[str]:
        """
        The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the virtual IP (VIP) addresses associated with the Cloud VM Cluster. The Cluster Ready Services (CRS) creates and maintains one VIP address for each node in the Exadata Cloud Service instance to enable failover. If one node fails, the VIP is reassigned to another active node in the Cluster.
        """
        return pulumi.get(self, "vip_ods")

    @property
    @pulumi.getter(name="virtualNetworkId")
    def virtual_network_id(self) -> str:
        """
        The ID to an Azure Resource Manager Virtual Network resource.
        """
        return pulumi.get(self, "virtual_network_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the zone the Cloud VM Cluster is associated with.
        """
        return pulumi.get(self, "zone_id")


class AwaitableGetCloudVmClusterResult(GetCloudVmClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudVmClusterResult(
            backup_subnet_cidr=self.backup_subnet_cidr,
            cloud_exadata_infrastructure_id=self.cloud_exadata_infrastructure_id,
            cluster_name=self.cluster_name,
            compartment_id=self.compartment_id,
            compute_nodes=self.compute_nodes,
            cpu_core_count=self.cpu_core_count,
            data_collection_options=self.data_collection_options,
            data_storage_percentage=self.data_storage_percentage,
            data_storage_size_in_tbs=self.data_storage_size_in_tbs,
            db_node_storage_size_in_gbs=self.db_node_storage_size_in_gbs,
            db_servers=self.db_servers,
            disk_redundancy=self.disk_redundancy,
            display_name=self.display_name,
            domain=self.domain,
            gi_version=self.gi_version,
            hostname=self.hostname,
            hostname_actual=self.hostname_actual,
            id=self.id,
            iorm_config_caches=self.iorm_config_caches,
            last_update_history_entry_id=self.last_update_history_entry_id,
            license_model=self.license_model,
            lifecycle_details=self.lifecycle_details,
            lifecycle_state=self.lifecycle_state,
            listener_port=self.listener_port,
            local_backup_enabled=self.local_backup_enabled,
            location=self.location,
            memory_size_in_gbs=self.memory_size_in_gbs,
            name=self.name,
            node_count=self.node_count,
            nsg_url=self.nsg_url,
            oci_url=self.oci_url,
            ocid=self.ocid,
            ocpu_count=self.ocpu_count,
            resource_group_name=self.resource_group_name,
            scan_dns_name=self.scan_dns_name,
            scan_dns_record_id=self.scan_dns_record_id,
            scan_ip_ids=self.scan_ip_ids,
            scan_listener_port_tcp=self.scan_listener_port_tcp,
            scan_listener_port_tcp_ssl=self.scan_listener_port_tcp_ssl,
            shape=self.shape,
            sparse_diskgroup_enabled=self.sparse_diskgroup_enabled,
            ssh_public_keys=self.ssh_public_keys,
            storage_size_in_gbs=self.storage_size_in_gbs,
            subnet_id=self.subnet_id,
            subnet_ocid=self.subnet_ocid,
            system_version=self.system_version,
            tags=self.tags,
            time_created=self.time_created,
            time_zone=self.time_zone,
            vip_ods=self.vip_ods,
            virtual_network_id=self.virtual_network_id,
            zone_id=self.zone_id)


def get_cloud_vm_cluster(name: Optional[str] = None,
                         resource_group_name: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudVmClusterResult:
    """
    Use this data source to access information about an existing Cloud VM Cluster.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_azure as azure

    example = azure.oracle.get_cloud_vm_cluster(name="existing",
        resource_group_name="existing")
    pulumi.export("id", example.id)
    ```


    :param str name: The name of this Cloud VM Cluster.
    :param str resource_group_name: The name of the Resource Group where the Cloud VM Cluster exists.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure:oracle/getCloudVmCluster:getCloudVmCluster', __args__, opts=opts, typ=GetCloudVmClusterResult).value

    return AwaitableGetCloudVmClusterResult(
        backup_subnet_cidr=pulumi.get(__ret__, 'backup_subnet_cidr'),
        cloud_exadata_infrastructure_id=pulumi.get(__ret__, 'cloud_exadata_infrastructure_id'),
        cluster_name=pulumi.get(__ret__, 'cluster_name'),
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        compute_nodes=pulumi.get(__ret__, 'compute_nodes'),
        cpu_core_count=pulumi.get(__ret__, 'cpu_core_count'),
        data_collection_options=pulumi.get(__ret__, 'data_collection_options'),
        data_storage_percentage=pulumi.get(__ret__, 'data_storage_percentage'),
        data_storage_size_in_tbs=pulumi.get(__ret__, 'data_storage_size_in_tbs'),
        db_node_storage_size_in_gbs=pulumi.get(__ret__, 'db_node_storage_size_in_gbs'),
        db_servers=pulumi.get(__ret__, 'db_servers'),
        disk_redundancy=pulumi.get(__ret__, 'disk_redundancy'),
        display_name=pulumi.get(__ret__, 'display_name'),
        domain=pulumi.get(__ret__, 'domain'),
        gi_version=pulumi.get(__ret__, 'gi_version'),
        hostname=pulumi.get(__ret__, 'hostname'),
        hostname_actual=pulumi.get(__ret__, 'hostname_actual'),
        id=pulumi.get(__ret__, 'id'),
        iorm_config_caches=pulumi.get(__ret__, 'iorm_config_caches'),
        last_update_history_entry_id=pulumi.get(__ret__, 'last_update_history_entry_id'),
        license_model=pulumi.get(__ret__, 'license_model'),
        lifecycle_details=pulumi.get(__ret__, 'lifecycle_details'),
        lifecycle_state=pulumi.get(__ret__, 'lifecycle_state'),
        listener_port=pulumi.get(__ret__, 'listener_port'),
        local_backup_enabled=pulumi.get(__ret__, 'local_backup_enabled'),
        location=pulumi.get(__ret__, 'location'),
        memory_size_in_gbs=pulumi.get(__ret__, 'memory_size_in_gbs'),
        name=pulumi.get(__ret__, 'name'),
        node_count=pulumi.get(__ret__, 'node_count'),
        nsg_url=pulumi.get(__ret__, 'nsg_url'),
        oci_url=pulumi.get(__ret__, 'oci_url'),
        ocid=pulumi.get(__ret__, 'ocid'),
        ocpu_count=pulumi.get(__ret__, 'ocpu_count'),
        resource_group_name=pulumi.get(__ret__, 'resource_group_name'),
        scan_dns_name=pulumi.get(__ret__, 'scan_dns_name'),
        scan_dns_record_id=pulumi.get(__ret__, 'scan_dns_record_id'),
        scan_ip_ids=pulumi.get(__ret__, 'scan_ip_ids'),
        scan_listener_port_tcp=pulumi.get(__ret__, 'scan_listener_port_tcp'),
        scan_listener_port_tcp_ssl=pulumi.get(__ret__, 'scan_listener_port_tcp_ssl'),
        shape=pulumi.get(__ret__, 'shape'),
        sparse_diskgroup_enabled=pulumi.get(__ret__, 'sparse_diskgroup_enabled'),
        ssh_public_keys=pulumi.get(__ret__, 'ssh_public_keys'),
        storage_size_in_gbs=pulumi.get(__ret__, 'storage_size_in_gbs'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        subnet_ocid=pulumi.get(__ret__, 'subnet_ocid'),
        system_version=pulumi.get(__ret__, 'system_version'),
        tags=pulumi.get(__ret__, 'tags'),
        time_created=pulumi.get(__ret__, 'time_created'),
        time_zone=pulumi.get(__ret__, 'time_zone'),
        vip_ods=pulumi.get(__ret__, 'vip_ods'),
        virtual_network_id=pulumi.get(__ret__, 'virtual_network_id'),
        zone_id=pulumi.get(__ret__, 'zone_id'))
def get_cloud_vm_cluster_output(name: Optional[pulumi.Input[str]] = None,
                                resource_group_name: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCloudVmClusterResult]:
    """
    Use this data source to access information about an existing Cloud VM Cluster.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_azure as azure

    example = azure.oracle.get_cloud_vm_cluster(name="existing",
        resource_group_name="existing")
    pulumi.export("id", example.id)
    ```


    :param str name: The name of this Cloud VM Cluster.
    :param str resource_group_name: The name of the Resource Group where the Cloud VM Cluster exists.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure:oracle/getCloudVmCluster:getCloudVmCluster', __args__, opts=opts, typ=GetCloudVmClusterResult)
    return __ret__.apply(lambda __response__: GetCloudVmClusterResult(
        backup_subnet_cidr=pulumi.get(__response__, 'backup_subnet_cidr'),
        cloud_exadata_infrastructure_id=pulumi.get(__response__, 'cloud_exadata_infrastructure_id'),
        cluster_name=pulumi.get(__response__, 'cluster_name'),
        compartment_id=pulumi.get(__response__, 'compartment_id'),
        compute_nodes=pulumi.get(__response__, 'compute_nodes'),
        cpu_core_count=pulumi.get(__response__, 'cpu_core_count'),
        data_collection_options=pulumi.get(__response__, 'data_collection_options'),
        data_storage_percentage=pulumi.get(__response__, 'data_storage_percentage'),
        data_storage_size_in_tbs=pulumi.get(__response__, 'data_storage_size_in_tbs'),
        db_node_storage_size_in_gbs=pulumi.get(__response__, 'db_node_storage_size_in_gbs'),
        db_servers=pulumi.get(__response__, 'db_servers'),
        disk_redundancy=pulumi.get(__response__, 'disk_redundancy'),
        display_name=pulumi.get(__response__, 'display_name'),
        domain=pulumi.get(__response__, 'domain'),
        gi_version=pulumi.get(__response__, 'gi_version'),
        hostname=pulumi.get(__response__, 'hostname'),
        hostname_actual=pulumi.get(__response__, 'hostname_actual'),
        id=pulumi.get(__response__, 'id'),
        iorm_config_caches=pulumi.get(__response__, 'iorm_config_caches'),
        last_update_history_entry_id=pulumi.get(__response__, 'last_update_history_entry_id'),
        license_model=pulumi.get(__response__, 'license_model'),
        lifecycle_details=pulumi.get(__response__, 'lifecycle_details'),
        lifecycle_state=pulumi.get(__response__, 'lifecycle_state'),
        listener_port=pulumi.get(__response__, 'listener_port'),
        local_backup_enabled=pulumi.get(__response__, 'local_backup_enabled'),
        location=pulumi.get(__response__, 'location'),
        memory_size_in_gbs=pulumi.get(__response__, 'memory_size_in_gbs'),
        name=pulumi.get(__response__, 'name'),
        node_count=pulumi.get(__response__, 'node_count'),
        nsg_url=pulumi.get(__response__, 'nsg_url'),
        oci_url=pulumi.get(__response__, 'oci_url'),
        ocid=pulumi.get(__response__, 'ocid'),
        ocpu_count=pulumi.get(__response__, 'ocpu_count'),
        resource_group_name=pulumi.get(__response__, 'resource_group_name'),
        scan_dns_name=pulumi.get(__response__, 'scan_dns_name'),
        scan_dns_record_id=pulumi.get(__response__, 'scan_dns_record_id'),
        scan_ip_ids=pulumi.get(__response__, 'scan_ip_ids'),
        scan_listener_port_tcp=pulumi.get(__response__, 'scan_listener_port_tcp'),
        scan_listener_port_tcp_ssl=pulumi.get(__response__, 'scan_listener_port_tcp_ssl'),
        shape=pulumi.get(__response__, 'shape'),
        sparse_diskgroup_enabled=pulumi.get(__response__, 'sparse_diskgroup_enabled'),
        ssh_public_keys=pulumi.get(__response__, 'ssh_public_keys'),
        storage_size_in_gbs=pulumi.get(__response__, 'storage_size_in_gbs'),
        subnet_id=pulumi.get(__response__, 'subnet_id'),
        subnet_ocid=pulumi.get(__response__, 'subnet_ocid'),
        system_version=pulumi.get(__response__, 'system_version'),
        tags=pulumi.get(__response__, 'tags'),
        time_created=pulumi.get(__response__, 'time_created'),
        time_zone=pulumi.get(__response__, 'time_zone'),
        vip_ods=pulumi.get(__response__, 'vip_ods'),
        virtual_network_id=pulumi.get(__response__, 'virtual_network_id'),
        zone_id=pulumi.get(__response__, 'zone_id')))
