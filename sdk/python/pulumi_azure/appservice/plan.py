# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class Plan(pulumi.CustomResource):
    """
    Create an App Service Plan component.
    """
    def __init__(__self__, __name__, __opts__=None, kind=None, location=None, name=None, properties=None, resource_group_name=None, sku=None, tags=None):
        """Create a Plan resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if kind and not isinstance(kind, basestring):
            raise TypeError('Expected property kind to be a basestring')
        __self__.kind = kind
        """
        The kind of the App Service Plan to create. Possible values are `Windows` (also available as `App`), `Linux` and `FunctionApp` (for a Consumption Plan). Defaults to `Windows`. Changing this forces a new resource to be created.
        """
        __props__['kind'] = kind

        if not location:
            raise TypeError('Missing required property location')
        elif not isinstance(location, basestring):
            raise TypeError('Expected property location to be a basestring')
        __self__.location = location
        """
        Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        """
        __props__['location'] = location

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        Specifies the name of the App Service Plan component. Changing this forces a new resource to be created.
        """
        __props__['name'] = name

        if properties and not isinstance(properties, dict):
            raise TypeError('Expected property properties to be a dict')
        __self__.properties = properties
        """
        A `properties` block as documented below.
        """
        __props__['properties'] = properties

        if not resource_group_name:
            raise TypeError('Missing required property resource_group_name')
        elif not isinstance(resource_group_name, basestring):
            raise TypeError('Expected property resource_group_name to be a basestring')
        __self__.resource_group_name = resource_group_name
        """
        The name of the resource group in which to create the App Service Plan component.
        """
        __props__['resourceGroupName'] = resource_group_name

        if not sku:
            raise TypeError('Missing required property sku')
        elif not isinstance(sku, dict):
            raise TypeError('Expected property sku to be a dict')
        __self__.sku = sku
        """
        A `sku` block as documented below.
        """
        __props__['sku'] = sku

        if tags and not isinstance(tags, dict):
            raise TypeError('Expected property tags to be a dict')
        __self__.tags = tags
        """
        A mapping of tags to assign to the resource.
        """
        __props__['tags'] = tags

        __self__.maximum_number_of_workers = pulumi.runtime.UNKNOWN
        """
        Maximum number of instances that can be assigned to this App Service plan.
        """

        super(Plan, __self__).__init__(
            'azure:appservice/plan:Plan',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'kind' in outs:
            self.kind = outs['kind']
        if 'location' in outs:
            self.location = outs['location']
        if 'maximumNumberOfWorkers' in outs:
            self.maximum_number_of_workers = outs['maximumNumberOfWorkers']
        if 'name' in outs:
            self.name = outs['name']
        if 'properties' in outs:
            self.properties = outs['properties']
        if 'resourceGroupName' in outs:
            self.resource_group_name = outs['resourceGroupName']
        if 'sku' in outs:
            self.sku = outs['sku']
        if 'tags' in outs:
            self.tags = outs['tags']
