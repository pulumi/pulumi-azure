# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'MonitorPlanArgs',
    'MonitorUserArgs',
    'TagRuleLogTagFilterArgs',
    'TagRuleMetricTagFilterArgs',
]

@pulumi.input_type
class MonitorPlanArgs:
    def __init__(__self__, *,
                 effective_date: pulumi.Input[str],
                 billing_cycle: Optional[pulumi.Input[str]] = None,
                 plan_id: Optional[pulumi.Input[str]] = None,
                 usage_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] effective_date: Specifies the date when plan was applied. Changing this forces a new Azure Native New Relic Monitor to be created.
        :param pulumi.Input[str] billing_cycle: Specifies the billing cycles. Possible values are `MONTHLY`, `WEEKLY` and `YEARLY`. Defaults to `MONTHLY`. Changing this forces a new Azure Native New Relic Monitor to be created.
        :param pulumi.Input[str] plan_id: Specifies the plan id published by NewRelic. The only possible value is `newrelic-pay-as-you-go-free-live`. Defaults to `newrelic-pay-as-you-go-free-live`. Changing this forces a new Azure Native New Relic Monitor to be created.
        :param pulumi.Input[str] usage_type: Specifies the usage type. Possible values are `COMMITTED` and `PAYG`. Defaults to `PAYG`. Changing this forces a new Azure Native New Relic Monitor to be created.
        """
        MonitorPlanArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            effective_date=effective_date,
            billing_cycle=billing_cycle,
            plan_id=plan_id,
            usage_type=usage_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             effective_date: pulumi.Input[str],
             billing_cycle: Optional[pulumi.Input[str]] = None,
             plan_id: Optional[pulumi.Input[str]] = None,
             usage_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("effective_date", effective_date)
        if billing_cycle is not None:
            _setter("billing_cycle", billing_cycle)
        if plan_id is not None:
            _setter("plan_id", plan_id)
        if usage_type is not None:
            _setter("usage_type", usage_type)

    @property
    @pulumi.getter(name="effectiveDate")
    def effective_date(self) -> pulumi.Input[str]:
        """
        Specifies the date when plan was applied. Changing this forces a new Azure Native New Relic Monitor to be created.
        """
        return pulumi.get(self, "effective_date")

    @effective_date.setter
    def effective_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "effective_date", value)

    @property
    @pulumi.getter(name="billingCycle")
    def billing_cycle(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the billing cycles. Possible values are `MONTHLY`, `WEEKLY` and `YEARLY`. Defaults to `MONTHLY`. Changing this forces a new Azure Native New Relic Monitor to be created.
        """
        return pulumi.get(self, "billing_cycle")

    @billing_cycle.setter
    def billing_cycle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "billing_cycle", value)

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the plan id published by NewRelic. The only possible value is `newrelic-pay-as-you-go-free-live`. Defaults to `newrelic-pay-as-you-go-free-live`. Changing this forces a new Azure Native New Relic Monitor to be created.
        """
        return pulumi.get(self, "plan_id")

    @plan_id.setter
    def plan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plan_id", value)

    @property
    @pulumi.getter(name="usageType")
    def usage_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the usage type. Possible values are `COMMITTED` and `PAYG`. Defaults to `PAYG`. Changing this forces a new Azure Native New Relic Monitor to be created.
        """
        return pulumi.get(self, "usage_type")

    @usage_type.setter
    def usage_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage_type", value)


@pulumi.input_type
class MonitorUserArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str],
                 first_name: pulumi.Input[str],
                 last_name: pulumi.Input[str],
                 phone_number: pulumi.Input[str]):
        """
        :param pulumi.Input[str] email: Specifies the user Email. Changing this forces a new Azure Native New Relic Monitor to be created.
        :param pulumi.Input[str] first_name: Specifies the first name. Changing this forces a new Azure Native New Relic Monitor to be created.
        :param pulumi.Input[str] last_name: Specifies the last name. Changing this forces a new Azure Native New Relic Monitor to be created.
        :param pulumi.Input[str] phone_number: Specifies the contact phone number. Changing this forces a new Azure Native New Relic Monitor to be created.
        """
        MonitorUserArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            email=email,
            first_name=first_name,
            last_name=last_name,
            phone_number=phone_number,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             email: pulumi.Input[str],
             first_name: pulumi.Input[str],
             last_name: pulumi.Input[str],
             phone_number: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("email", email)
        _setter("first_name", first_name)
        _setter("last_name", last_name)
        _setter("phone_number", phone_number)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        """
        Specifies the user Email. Changing this forces a new Azure Native New Relic Monitor to be created.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> pulumi.Input[str]:
        """
        Specifies the first name. Changing this forces a new Azure Native New Relic Monitor to be created.
        """
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> pulumi.Input[str]:
        """
        Specifies the last name. Changing this forces a new Azure Native New Relic Monitor to be created.
        """
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> pulumi.Input[str]:
        """
        Specifies the contact phone number. Changing this forces a new Azure Native New Relic Monitor to be created.
        """
        return pulumi.get(self, "phone_number")

    @phone_number.setter
    def phone_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "phone_number", value)


@pulumi.input_type
class TagRuleLogTagFilterArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] action: Valid actions for a filtering tag. Possible values are `Exclude` and `Include`. Exclusion takes priority over inclusion.
        :param pulumi.Input[str] name: Specifies the name (also known as the key) of the tag.
        :param pulumi.Input[str] value: Specifies the value of the tag.
        """
        TagRuleLogTagFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: pulumi.Input[str],
             name: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        Valid actions for a filtering tag. Possible values are `Exclude` and `Include`. Exclusion takes priority over inclusion.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Specifies the name (also known as the key) of the tag.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Specifies the value of the tag.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TagRuleMetricTagFilterArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] action: Valid actions for a filtering tag. Possible values are `Exclude` and `Include`. Exclusion takes priority over inclusion.
        :param pulumi.Input[str] name: Specifies the name (also known as the key) of the tag.
        :param pulumi.Input[str] value: Specifies the value of the tag.
        """
        TagRuleMetricTagFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: pulumi.Input[str],
             name: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        Valid actions for a filtering tag. Possible values are `Exclude` and `Include`. Exclusion takes priority over inclusion.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Specifies the name (also known as the key) of the tag.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Specifies the value of the tag.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


