# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TagRuleArgs', 'TagRule']

@pulumi.input_type
class TagRuleArgs:
    def __init__(__self__, *,
                 monitor_id: pulumi.Input[str],
                 activity_log_enabled: Optional[pulumi.Input[bool]] = None,
                 azure_active_directory_log_enabled: Optional[pulumi.Input[bool]] = None,
                 log_tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input['TagRuleLogTagFilterArgs']]]] = None,
                 metric_enabled: Optional[pulumi.Input[bool]] = None,
                 metric_tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input['TagRuleMetricTagFilterArgs']]]] = None,
                 subscription_log_enabled: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a TagRule resource.
        :param pulumi.Input[str] monitor_id: Specifies the ID of the New Relic Monitor this Tag Rule should be created within. Changing this forces a new Azure Native New Relic Tag Rule to be created.
        :param pulumi.Input[bool] activity_log_enabled: Whether activity logs from Azure resources should be sent for the Monitor resource. Defaults to `false`.
        :param pulumi.Input[bool] azure_active_directory_log_enabled: Whether Azure Active Directory logs should be sent for the Monitor resource. Defaults to `false`.
        :param pulumi.Input[Sequence[pulumi.Input['TagRuleLogTagFilterArgs']]] log_tag_filters: A `log_tag_filter` block as defined below.
        :param pulumi.Input[bool] metric_enabled: Whether metrics should be sent for the Monitor resource. Defaults to `false`.
        :param pulumi.Input[Sequence[pulumi.Input['TagRuleMetricTagFilterArgs']]] metric_tag_filters: A `metric_tag_filter` block as defined below.
        :param pulumi.Input[bool] subscription_log_enabled: Whether subscription logs should be sent for the Monitor resource. Defaults to `false`.
        """
        TagRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            monitor_id=monitor_id,
            activity_log_enabled=activity_log_enabled,
            azure_active_directory_log_enabled=azure_active_directory_log_enabled,
            log_tag_filters=log_tag_filters,
            metric_enabled=metric_enabled,
            metric_tag_filters=metric_tag_filters,
            subscription_log_enabled=subscription_log_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             monitor_id: pulumi.Input[str],
             activity_log_enabled: Optional[pulumi.Input[bool]] = None,
             azure_active_directory_log_enabled: Optional[pulumi.Input[bool]] = None,
             log_tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input['TagRuleLogTagFilterArgs']]]] = None,
             metric_enabled: Optional[pulumi.Input[bool]] = None,
             metric_tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input['TagRuleMetricTagFilterArgs']]]] = None,
             subscription_log_enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("monitor_id", monitor_id)
        if activity_log_enabled is not None:
            _setter("activity_log_enabled", activity_log_enabled)
        if azure_active_directory_log_enabled is not None:
            _setter("azure_active_directory_log_enabled", azure_active_directory_log_enabled)
        if log_tag_filters is not None:
            _setter("log_tag_filters", log_tag_filters)
        if metric_enabled is not None:
            _setter("metric_enabled", metric_enabled)
        if metric_tag_filters is not None:
            _setter("metric_tag_filters", metric_tag_filters)
        if subscription_log_enabled is not None:
            _setter("subscription_log_enabled", subscription_log_enabled)

    @property
    @pulumi.getter(name="monitorId")
    def monitor_id(self) -> pulumi.Input[str]:
        """
        Specifies the ID of the New Relic Monitor this Tag Rule should be created within. Changing this forces a new Azure Native New Relic Tag Rule to be created.
        """
        return pulumi.get(self, "monitor_id")

    @monitor_id.setter
    def monitor_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "monitor_id", value)

    @property
    @pulumi.getter(name="activityLogEnabled")
    def activity_log_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether activity logs from Azure resources should be sent for the Monitor resource. Defaults to `false`.
        """
        return pulumi.get(self, "activity_log_enabled")

    @activity_log_enabled.setter
    def activity_log_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "activity_log_enabled", value)

    @property
    @pulumi.getter(name="azureActiveDirectoryLogEnabled")
    def azure_active_directory_log_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether Azure Active Directory logs should be sent for the Monitor resource. Defaults to `false`.
        """
        return pulumi.get(self, "azure_active_directory_log_enabled")

    @azure_active_directory_log_enabled.setter
    def azure_active_directory_log_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "azure_active_directory_log_enabled", value)

    @property
    @pulumi.getter(name="logTagFilters")
    def log_tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TagRuleLogTagFilterArgs']]]]:
        """
        A `log_tag_filter` block as defined below.
        """
        return pulumi.get(self, "log_tag_filters")

    @log_tag_filters.setter
    def log_tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TagRuleLogTagFilterArgs']]]]):
        pulumi.set(self, "log_tag_filters", value)

    @property
    @pulumi.getter(name="metricEnabled")
    def metric_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether metrics should be sent for the Monitor resource. Defaults to `false`.
        """
        return pulumi.get(self, "metric_enabled")

    @metric_enabled.setter
    def metric_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "metric_enabled", value)

    @property
    @pulumi.getter(name="metricTagFilters")
    def metric_tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TagRuleMetricTagFilterArgs']]]]:
        """
        A `metric_tag_filter` block as defined below.
        """
        return pulumi.get(self, "metric_tag_filters")

    @metric_tag_filters.setter
    def metric_tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TagRuleMetricTagFilterArgs']]]]):
        pulumi.set(self, "metric_tag_filters", value)

    @property
    @pulumi.getter(name="subscriptionLogEnabled")
    def subscription_log_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether subscription logs should be sent for the Monitor resource. Defaults to `false`.
        """
        return pulumi.get(self, "subscription_log_enabled")

    @subscription_log_enabled.setter
    def subscription_log_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "subscription_log_enabled", value)


@pulumi.input_type
class _TagRuleState:
    def __init__(__self__, *,
                 activity_log_enabled: Optional[pulumi.Input[bool]] = None,
                 azure_active_directory_log_enabled: Optional[pulumi.Input[bool]] = None,
                 log_tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input['TagRuleLogTagFilterArgs']]]] = None,
                 metric_enabled: Optional[pulumi.Input[bool]] = None,
                 metric_tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input['TagRuleMetricTagFilterArgs']]]] = None,
                 monitor_id: Optional[pulumi.Input[str]] = None,
                 subscription_log_enabled: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering TagRule resources.
        :param pulumi.Input[bool] activity_log_enabled: Whether activity logs from Azure resources should be sent for the Monitor resource. Defaults to `false`.
        :param pulumi.Input[bool] azure_active_directory_log_enabled: Whether Azure Active Directory logs should be sent for the Monitor resource. Defaults to `false`.
        :param pulumi.Input[Sequence[pulumi.Input['TagRuleLogTagFilterArgs']]] log_tag_filters: A `log_tag_filter` block as defined below.
        :param pulumi.Input[bool] metric_enabled: Whether metrics should be sent for the Monitor resource. Defaults to `false`.
        :param pulumi.Input[Sequence[pulumi.Input['TagRuleMetricTagFilterArgs']]] metric_tag_filters: A `metric_tag_filter` block as defined below.
        :param pulumi.Input[str] monitor_id: Specifies the ID of the New Relic Monitor this Tag Rule should be created within. Changing this forces a new Azure Native New Relic Tag Rule to be created.
        :param pulumi.Input[bool] subscription_log_enabled: Whether subscription logs should be sent for the Monitor resource. Defaults to `false`.
        """
        _TagRuleState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            activity_log_enabled=activity_log_enabled,
            azure_active_directory_log_enabled=azure_active_directory_log_enabled,
            log_tag_filters=log_tag_filters,
            metric_enabled=metric_enabled,
            metric_tag_filters=metric_tag_filters,
            monitor_id=monitor_id,
            subscription_log_enabled=subscription_log_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             activity_log_enabled: Optional[pulumi.Input[bool]] = None,
             azure_active_directory_log_enabled: Optional[pulumi.Input[bool]] = None,
             log_tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input['TagRuleLogTagFilterArgs']]]] = None,
             metric_enabled: Optional[pulumi.Input[bool]] = None,
             metric_tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input['TagRuleMetricTagFilterArgs']]]] = None,
             monitor_id: Optional[pulumi.Input[str]] = None,
             subscription_log_enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if activity_log_enabled is not None:
            _setter("activity_log_enabled", activity_log_enabled)
        if azure_active_directory_log_enabled is not None:
            _setter("azure_active_directory_log_enabled", azure_active_directory_log_enabled)
        if log_tag_filters is not None:
            _setter("log_tag_filters", log_tag_filters)
        if metric_enabled is not None:
            _setter("metric_enabled", metric_enabled)
        if metric_tag_filters is not None:
            _setter("metric_tag_filters", metric_tag_filters)
        if monitor_id is not None:
            _setter("monitor_id", monitor_id)
        if subscription_log_enabled is not None:
            _setter("subscription_log_enabled", subscription_log_enabled)

    @property
    @pulumi.getter(name="activityLogEnabled")
    def activity_log_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether activity logs from Azure resources should be sent for the Monitor resource. Defaults to `false`.
        """
        return pulumi.get(self, "activity_log_enabled")

    @activity_log_enabled.setter
    def activity_log_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "activity_log_enabled", value)

    @property
    @pulumi.getter(name="azureActiveDirectoryLogEnabled")
    def azure_active_directory_log_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether Azure Active Directory logs should be sent for the Monitor resource. Defaults to `false`.
        """
        return pulumi.get(self, "azure_active_directory_log_enabled")

    @azure_active_directory_log_enabled.setter
    def azure_active_directory_log_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "azure_active_directory_log_enabled", value)

    @property
    @pulumi.getter(name="logTagFilters")
    def log_tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TagRuleLogTagFilterArgs']]]]:
        """
        A `log_tag_filter` block as defined below.
        """
        return pulumi.get(self, "log_tag_filters")

    @log_tag_filters.setter
    def log_tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TagRuleLogTagFilterArgs']]]]):
        pulumi.set(self, "log_tag_filters", value)

    @property
    @pulumi.getter(name="metricEnabled")
    def metric_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether metrics should be sent for the Monitor resource. Defaults to `false`.
        """
        return pulumi.get(self, "metric_enabled")

    @metric_enabled.setter
    def metric_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "metric_enabled", value)

    @property
    @pulumi.getter(name="metricTagFilters")
    def metric_tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TagRuleMetricTagFilterArgs']]]]:
        """
        A `metric_tag_filter` block as defined below.
        """
        return pulumi.get(self, "metric_tag_filters")

    @metric_tag_filters.setter
    def metric_tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TagRuleMetricTagFilterArgs']]]]):
        pulumi.set(self, "metric_tag_filters", value)

    @property
    @pulumi.getter(name="monitorId")
    def monitor_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the New Relic Monitor this Tag Rule should be created within. Changing this forces a new Azure Native New Relic Tag Rule to be created.
        """
        return pulumi.get(self, "monitor_id")

    @monitor_id.setter
    def monitor_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_id", value)

    @property
    @pulumi.getter(name="subscriptionLogEnabled")
    def subscription_log_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether subscription logs should be sent for the Monitor resource. Defaults to `false`.
        """
        return pulumi.get(self, "subscription_log_enabled")

    @subscription_log_enabled.setter
    def subscription_log_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "subscription_log_enabled", value)


class TagRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 activity_log_enabled: Optional[pulumi.Input[bool]] = None,
                 azure_active_directory_log_enabled: Optional[pulumi.Input[bool]] = None,
                 log_tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TagRuleLogTagFilterArgs']]]]] = None,
                 metric_enabled: Optional[pulumi.Input[bool]] = None,
                 metric_tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TagRuleMetricTagFilterArgs']]]]] = None,
                 monitor_id: Optional[pulumi.Input[str]] = None,
                 subscription_log_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Manages an Azure Native New Relic Tag Rule.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="East US")
        example_monitor = azure.newrelic.Monitor("exampleMonitor",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            plan=azure.newrelic.MonitorPlanArgs(
                effective_date="2023-06-06T00:00:00Z",
            ),
            user=azure.newrelic.MonitorUserArgs(
                email="user@example.com",
                first_name="Example",
                last_name="User",
                phone_number="+12313803556",
            ))
        example_tag_rule = azure.newrelic.TagRule("exampleTagRule",
            monitor_id=example_monitor.id,
            azure_active_directory_log_enabled=True,
            activity_log_enabled=True,
            metric_enabled=True,
            subscription_log_enabled=True,
            log_tag_filters=[azure.newrelic.TagRuleLogTagFilterArgs(
                name="key",
                action="Include",
                value="value",
            )],
            metric_tag_filters=[azure.newrelic.TagRuleMetricTagFilterArgs(
                name="key",
                action="Exclude",
                value="value",
            )])
        ```

        ## Import

        Azure Native New Relic Tag Rule can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:newrelic/tagRule:TagRule example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/NewRelic.Observability/monitors/monitor1/tagRules/ruleSet1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] activity_log_enabled: Whether activity logs from Azure resources should be sent for the Monitor resource. Defaults to `false`.
        :param pulumi.Input[bool] azure_active_directory_log_enabled: Whether Azure Active Directory logs should be sent for the Monitor resource. Defaults to `false`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TagRuleLogTagFilterArgs']]]] log_tag_filters: A `log_tag_filter` block as defined below.
        :param pulumi.Input[bool] metric_enabled: Whether metrics should be sent for the Monitor resource. Defaults to `false`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TagRuleMetricTagFilterArgs']]]] metric_tag_filters: A `metric_tag_filter` block as defined below.
        :param pulumi.Input[str] monitor_id: Specifies the ID of the New Relic Monitor this Tag Rule should be created within. Changing this forces a new Azure Native New Relic Tag Rule to be created.
        :param pulumi.Input[bool] subscription_log_enabled: Whether subscription logs should be sent for the Monitor resource. Defaults to `false`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TagRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an Azure Native New Relic Tag Rule.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="East US")
        example_monitor = azure.newrelic.Monitor("exampleMonitor",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            plan=azure.newrelic.MonitorPlanArgs(
                effective_date="2023-06-06T00:00:00Z",
            ),
            user=azure.newrelic.MonitorUserArgs(
                email="user@example.com",
                first_name="Example",
                last_name="User",
                phone_number="+12313803556",
            ))
        example_tag_rule = azure.newrelic.TagRule("exampleTagRule",
            monitor_id=example_monitor.id,
            azure_active_directory_log_enabled=True,
            activity_log_enabled=True,
            metric_enabled=True,
            subscription_log_enabled=True,
            log_tag_filters=[azure.newrelic.TagRuleLogTagFilterArgs(
                name="key",
                action="Include",
                value="value",
            )],
            metric_tag_filters=[azure.newrelic.TagRuleMetricTagFilterArgs(
                name="key",
                action="Exclude",
                value="value",
            )])
        ```

        ## Import

        Azure Native New Relic Tag Rule can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:newrelic/tagRule:TagRule example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/NewRelic.Observability/monitors/monitor1/tagRules/ruleSet1
        ```

        :param str resource_name: The name of the resource.
        :param TagRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TagRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            TagRuleArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 activity_log_enabled: Optional[pulumi.Input[bool]] = None,
                 azure_active_directory_log_enabled: Optional[pulumi.Input[bool]] = None,
                 log_tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TagRuleLogTagFilterArgs']]]]] = None,
                 metric_enabled: Optional[pulumi.Input[bool]] = None,
                 metric_tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TagRuleMetricTagFilterArgs']]]]] = None,
                 monitor_id: Optional[pulumi.Input[str]] = None,
                 subscription_log_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TagRuleArgs.__new__(TagRuleArgs)

            __props__.__dict__["activity_log_enabled"] = activity_log_enabled
            __props__.__dict__["azure_active_directory_log_enabled"] = azure_active_directory_log_enabled
            __props__.__dict__["log_tag_filters"] = log_tag_filters
            __props__.__dict__["metric_enabled"] = metric_enabled
            __props__.__dict__["metric_tag_filters"] = metric_tag_filters
            if monitor_id is None and not opts.urn:
                raise TypeError("Missing required property 'monitor_id'")
            __props__.__dict__["monitor_id"] = monitor_id
            __props__.__dict__["subscription_log_enabled"] = subscription_log_enabled
        super(TagRule, __self__).__init__(
            'azure:newrelic/tagRule:TagRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            activity_log_enabled: Optional[pulumi.Input[bool]] = None,
            azure_active_directory_log_enabled: Optional[pulumi.Input[bool]] = None,
            log_tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TagRuleLogTagFilterArgs']]]]] = None,
            metric_enabled: Optional[pulumi.Input[bool]] = None,
            metric_tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TagRuleMetricTagFilterArgs']]]]] = None,
            monitor_id: Optional[pulumi.Input[str]] = None,
            subscription_log_enabled: Optional[pulumi.Input[bool]] = None) -> 'TagRule':
        """
        Get an existing TagRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] activity_log_enabled: Whether activity logs from Azure resources should be sent for the Monitor resource. Defaults to `false`.
        :param pulumi.Input[bool] azure_active_directory_log_enabled: Whether Azure Active Directory logs should be sent for the Monitor resource. Defaults to `false`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TagRuleLogTagFilterArgs']]]] log_tag_filters: A `log_tag_filter` block as defined below.
        :param pulumi.Input[bool] metric_enabled: Whether metrics should be sent for the Monitor resource. Defaults to `false`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TagRuleMetricTagFilterArgs']]]] metric_tag_filters: A `metric_tag_filter` block as defined below.
        :param pulumi.Input[str] monitor_id: Specifies the ID of the New Relic Monitor this Tag Rule should be created within. Changing this forces a new Azure Native New Relic Tag Rule to be created.
        :param pulumi.Input[bool] subscription_log_enabled: Whether subscription logs should be sent for the Monitor resource. Defaults to `false`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TagRuleState.__new__(_TagRuleState)

        __props__.__dict__["activity_log_enabled"] = activity_log_enabled
        __props__.__dict__["azure_active_directory_log_enabled"] = azure_active_directory_log_enabled
        __props__.__dict__["log_tag_filters"] = log_tag_filters
        __props__.__dict__["metric_enabled"] = metric_enabled
        __props__.__dict__["metric_tag_filters"] = metric_tag_filters
        __props__.__dict__["monitor_id"] = monitor_id
        __props__.__dict__["subscription_log_enabled"] = subscription_log_enabled
        return TagRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="activityLogEnabled")
    def activity_log_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether activity logs from Azure resources should be sent for the Monitor resource. Defaults to `false`.
        """
        return pulumi.get(self, "activity_log_enabled")

    @property
    @pulumi.getter(name="azureActiveDirectoryLogEnabled")
    def azure_active_directory_log_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether Azure Active Directory logs should be sent for the Monitor resource. Defaults to `false`.
        """
        return pulumi.get(self, "azure_active_directory_log_enabled")

    @property
    @pulumi.getter(name="logTagFilters")
    def log_tag_filters(self) -> pulumi.Output[Optional[Sequence['outputs.TagRuleLogTagFilter']]]:
        """
        A `log_tag_filter` block as defined below.
        """
        return pulumi.get(self, "log_tag_filters")

    @property
    @pulumi.getter(name="metricEnabled")
    def metric_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether metrics should be sent for the Monitor resource. Defaults to `false`.
        """
        return pulumi.get(self, "metric_enabled")

    @property
    @pulumi.getter(name="metricTagFilters")
    def metric_tag_filters(self) -> pulumi.Output[Optional[Sequence['outputs.TagRuleMetricTagFilter']]]:
        """
        A `metric_tag_filter` block as defined below.
        """
        return pulumi.get(self, "metric_tag_filters")

    @property
    @pulumi.getter(name="monitorId")
    def monitor_id(self) -> pulumi.Output[str]:
        """
        Specifies the ID of the New Relic Monitor this Tag Rule should be created within. Changing this forces a new Azure Native New Relic Tag Rule to be created.
        """
        return pulumi.get(self, "monitor_id")

    @property
    @pulumi.getter(name="subscriptionLogEnabled")
    def subscription_log_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether subscription logs should be sent for the Monitor resource. Defaults to `false`.
        """
        return pulumi.get(self, "subscription_log_enabled")

