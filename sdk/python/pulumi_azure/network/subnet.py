# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities, tables

class Subnet(pulumi.CustomResource):
    """
    Manages a subnet. Subnets represent network segments within the IP space defined by the virtual network.
    
    ~> **NOTE on Virtual Networks and Subnet's:** Terraform currently
    provides both a standalone Subnet resource, and allows for Subnets to be defined in-line within the Virtual Network resource.
    At this time you cannot use a Virtual Network with in-line Subnets in conjunction with any Subnet resources. Doing so will cause a conflict of Subnet configurations and will overwrite Subnet's.
    """
    def __init__(__self__, __name__, __opts__=None, address_prefix=None, ip_configurations=None, name=None, network_security_group_id=None, resource_group_name=None, route_table_id=None, service_endpoints=None, virtual_network_name=None):
        """Create a Subnet resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not address_prefix:
            raise TypeError('Missing required property address_prefix')
        __props__['address_prefix'] = address_prefix

        __props__['ip_configurations'] = ip_configurations

        __props__['name'] = name

        __props__['network_security_group_id'] = network_security_group_id

        if not resource_group_name:
            raise TypeError('Missing required property resource_group_name')
        __props__['resource_group_name'] = resource_group_name

        __props__['route_table_id'] = route_table_id

        __props__['service_endpoints'] = service_endpoints

        if not virtual_network_name:
            raise TypeError('Missing required property virtual_network_name')
        __props__['virtual_network_name'] = virtual_network_name

        super(Subnet, __self__).__init__(
            'azure:network/subnet:Subnet',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

