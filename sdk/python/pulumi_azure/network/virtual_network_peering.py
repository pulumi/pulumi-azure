# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class VirtualNetworkPeering(pulumi.CustomResource):
    """
    Manages a new virtual network peering which allows resources to access other
    resources in the linked virtual network.
    """
    def __init__(__self__, __name__, __opts__=None, allow_forwarded_traffic=None, allow_gateway_transit=None, allow_virtual_network_access=None, name=None, remote_virtual_network_id=None, resource_group_name=None, use_remote_gateways=None, virtual_network_name=None):
        """Create a VirtualNetworkPeering resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if allow_forwarded_traffic and not isinstance(allow_forwarded_traffic, bool):
            raise TypeError('Expected property allow_forwarded_traffic to be a bool')
        __self__.allow_forwarded_traffic = allow_forwarded_traffic
        """
        Controls if forwarded traffic from  VMs
        in the remote virtual network is allowed. Defaults to false.
        """
        __props__['allowForwardedTraffic'] = allow_forwarded_traffic

        if allow_gateway_transit and not isinstance(allow_gateway_transit, bool):
            raise TypeError('Expected property allow_gateway_transit to be a bool')
        __self__.allow_gateway_transit = allow_gateway_transit
        """
        Controls gatewayLinks can be used in the
        remote virtual networkâ€™s link to the local virtual network.
        """
        __props__['allowGatewayTransit'] = allow_gateway_transit

        if allow_virtual_network_access and not isinstance(allow_virtual_network_access, bool):
            raise TypeError('Expected property allow_virtual_network_access to be a bool')
        __self__.allow_virtual_network_access = allow_virtual_network_access
        """
        Controls if the VMs in the remote
        virtual network can access VMs in the local virtual network. Defaults to
        false.
        """
        __props__['allowVirtualNetworkAccess'] = allow_virtual_network_access

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The name of the virtual network peering. Changing this
        forces a new resource to be created.
        """
        __props__['name'] = name

        if not remote_virtual_network_id:
            raise TypeError('Missing required property remote_virtual_network_id')
        elif not isinstance(remote_virtual_network_id, basestring):
            raise TypeError('Expected property remote_virtual_network_id to be a basestring')
        __self__.remote_virtual_network_id = remote_virtual_network_id
        """
        The full Azure resource ID of the
        remote virtual network.  Changing this forces a new resource to be created.
        """
        __props__['remoteVirtualNetworkId'] = remote_virtual_network_id

        if not resource_group_name:
            raise TypeError('Missing required property resource_group_name')
        elif not isinstance(resource_group_name, basestring):
            raise TypeError('Expected property resource_group_name to be a basestring')
        __self__.resource_group_name = resource_group_name
        """
        The name of the resource group in which to
        create the virtual network. Changing this forces a new resource to be
        created.
        """
        __props__['resourceGroupName'] = resource_group_name

        if use_remote_gateways and not isinstance(use_remote_gateways, bool):
            raise TypeError('Expected property use_remote_gateways to be a bool')
        __self__.use_remote_gateways = use_remote_gateways
        """
        Controls if remote gateways can be used on
        the local virtual network. If the flag is set to true, and
        allowGatewayTransit on the remote peering is also true, virtual network will
        use gateways of remote virtual network for transit. Only one peering can
        have this flag set to true. This flag cannot be set if virtual network
        already has a gateway. Defaults to false.
        """
        __props__['useRemoteGateways'] = use_remote_gateways

        if not virtual_network_name:
            raise TypeError('Missing required property virtual_network_name')
        elif not isinstance(virtual_network_name, basestring):
            raise TypeError('Expected property virtual_network_name to be a basestring')
        __self__.virtual_network_name = virtual_network_name
        """
        The name of the virtual network. Changing
        this forces a new resource to be created.
        """
        __props__['virtualNetworkName'] = virtual_network_name

        super(VirtualNetworkPeering, __self__).__init__(
            'azure:network/virtualNetworkPeering:VirtualNetworkPeering',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'allowForwardedTraffic' in outs:
            self.allow_forwarded_traffic = outs['allowForwardedTraffic']
        if 'allowGatewayTransit' in outs:
            self.allow_gateway_transit = outs['allowGatewayTransit']
        if 'allowVirtualNetworkAccess' in outs:
            self.allow_virtual_network_access = outs['allowVirtualNetworkAccess']
        if 'name' in outs:
            self.name = outs['name']
        if 'remoteVirtualNetworkId' in outs:
            self.remote_virtual_network_id = outs['remoteVirtualNetworkId']
        if 'resourceGroupName' in outs:
            self.resource_group_name = outs['resourceGroupName']
        if 'useRemoteGateways' in outs:
            self.use_remote_gateways = outs['useRemoteGateways']
        if 'virtualNetworkName' in outs:
            self.virtual_network_name = outs['virtualNetworkName']
