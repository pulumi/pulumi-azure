# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NetworkManagerConnectivityConfigurationArgs', 'NetworkManagerConnectivityConfiguration']

@pulumi.input_type
class NetworkManagerConnectivityConfigurationArgs:
    def __init__(__self__, *,
                 applies_to_groups: pulumi.Input[Sequence[pulumi.Input['NetworkManagerConnectivityConfigurationAppliesToGroupArgs']]],
                 connectivity_topology: pulumi.Input[str],
                 network_manager_id: pulumi.Input[str],
                 delete_existing_peering_enabled: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 global_mesh_enabled: Optional[pulumi.Input[bool]] = None,
                 hub: Optional[pulumi.Input['NetworkManagerConnectivityConfigurationHubArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NetworkManagerConnectivityConfiguration resource.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkManagerConnectivityConfigurationAppliesToGroupArgs']]] applies_to_groups: An `applies_to_group` block as defined below.
        :param pulumi.Input[str] connectivity_topology: Specifies the connectivity topology type. Possible values are `HubAndSpoke` and `Mesh`.
        :param pulumi.Input[str] network_manager_id: Specifies the ID of the Network Manager. Changing this forces a new Network Manager Connectivity Configuration to be created.
        :param pulumi.Input[bool] delete_existing_peering_enabled: Indicates whether to remove current existing Virtual Network Peering in the Connectivity Configuration affected scope. Possible values are `true` and `false`.
        :param pulumi.Input[str] description: A description of the Connectivity Configuration.
        :param pulumi.Input[bool] global_mesh_enabled: Indicates whether to global mesh is supported. Possible values are `true` and `false`.
        :param pulumi.Input['NetworkManagerConnectivityConfigurationHubArgs'] hub: A `hub` block as defined below.
        :param pulumi.Input[str] name: Specifies the name which should be used for this Network Manager Connectivity Configuration. Changing this forces a new Network Manager Connectivity Configuration to be created.
        """
        NetworkManagerConnectivityConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            applies_to_groups=applies_to_groups,
            connectivity_topology=connectivity_topology,
            network_manager_id=network_manager_id,
            delete_existing_peering_enabled=delete_existing_peering_enabled,
            description=description,
            global_mesh_enabled=global_mesh_enabled,
            hub=hub,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             applies_to_groups: pulumi.Input[Sequence[pulumi.Input['NetworkManagerConnectivityConfigurationAppliesToGroupArgs']]],
             connectivity_topology: pulumi.Input[str],
             network_manager_id: pulumi.Input[str],
             delete_existing_peering_enabled: Optional[pulumi.Input[bool]] = None,
             description: Optional[pulumi.Input[str]] = None,
             global_mesh_enabled: Optional[pulumi.Input[bool]] = None,
             hub: Optional[pulumi.Input['NetworkManagerConnectivityConfigurationHubArgs']] = None,
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("applies_to_groups", applies_to_groups)
        _setter("connectivity_topology", connectivity_topology)
        _setter("network_manager_id", network_manager_id)
        if delete_existing_peering_enabled is not None:
            _setter("delete_existing_peering_enabled", delete_existing_peering_enabled)
        if description is not None:
            _setter("description", description)
        if global_mesh_enabled is not None:
            _setter("global_mesh_enabled", global_mesh_enabled)
        if hub is not None:
            _setter("hub", hub)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="appliesToGroups")
    def applies_to_groups(self) -> pulumi.Input[Sequence[pulumi.Input['NetworkManagerConnectivityConfigurationAppliesToGroupArgs']]]:
        """
        An `applies_to_group` block as defined below.
        """
        return pulumi.get(self, "applies_to_groups")

    @applies_to_groups.setter
    def applies_to_groups(self, value: pulumi.Input[Sequence[pulumi.Input['NetworkManagerConnectivityConfigurationAppliesToGroupArgs']]]):
        pulumi.set(self, "applies_to_groups", value)

    @property
    @pulumi.getter(name="connectivityTopology")
    def connectivity_topology(self) -> pulumi.Input[str]:
        """
        Specifies the connectivity topology type. Possible values are `HubAndSpoke` and `Mesh`.
        """
        return pulumi.get(self, "connectivity_topology")

    @connectivity_topology.setter
    def connectivity_topology(self, value: pulumi.Input[str]):
        pulumi.set(self, "connectivity_topology", value)

    @property
    @pulumi.getter(name="networkManagerId")
    def network_manager_id(self) -> pulumi.Input[str]:
        """
        Specifies the ID of the Network Manager. Changing this forces a new Network Manager Connectivity Configuration to be created.
        """
        return pulumi.get(self, "network_manager_id")

    @network_manager_id.setter
    def network_manager_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_manager_id", value)

    @property
    @pulumi.getter(name="deleteExistingPeeringEnabled")
    def delete_existing_peering_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to remove current existing Virtual Network Peering in the Connectivity Configuration affected scope. Possible values are `true` and `false`.
        """
        return pulumi.get(self, "delete_existing_peering_enabled")

    @delete_existing_peering_enabled.setter
    def delete_existing_peering_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_existing_peering_enabled", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of the Connectivity Configuration.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="globalMeshEnabled")
    def global_mesh_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to global mesh is supported. Possible values are `true` and `false`.
        """
        return pulumi.get(self, "global_mesh_enabled")

    @global_mesh_enabled.setter
    def global_mesh_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "global_mesh_enabled", value)

    @property
    @pulumi.getter
    def hub(self) -> Optional[pulumi.Input['NetworkManagerConnectivityConfigurationHubArgs']]:
        """
        A `hub` block as defined below.
        """
        return pulumi.get(self, "hub")

    @hub.setter
    def hub(self, value: Optional[pulumi.Input['NetworkManagerConnectivityConfigurationHubArgs']]):
        pulumi.set(self, "hub", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name which should be used for this Network Manager Connectivity Configuration. Changing this forces a new Network Manager Connectivity Configuration to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _NetworkManagerConnectivityConfigurationState:
    def __init__(__self__, *,
                 applies_to_groups: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkManagerConnectivityConfigurationAppliesToGroupArgs']]]] = None,
                 connectivity_topology: Optional[pulumi.Input[str]] = None,
                 delete_existing_peering_enabled: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 global_mesh_enabled: Optional[pulumi.Input[bool]] = None,
                 hub: Optional[pulumi.Input['NetworkManagerConnectivityConfigurationHubArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_manager_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NetworkManagerConnectivityConfiguration resources.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkManagerConnectivityConfigurationAppliesToGroupArgs']]] applies_to_groups: An `applies_to_group` block as defined below.
        :param pulumi.Input[str] connectivity_topology: Specifies the connectivity topology type. Possible values are `HubAndSpoke` and `Mesh`.
        :param pulumi.Input[bool] delete_existing_peering_enabled: Indicates whether to remove current existing Virtual Network Peering in the Connectivity Configuration affected scope. Possible values are `true` and `false`.
        :param pulumi.Input[str] description: A description of the Connectivity Configuration.
        :param pulumi.Input[bool] global_mesh_enabled: Indicates whether to global mesh is supported. Possible values are `true` and `false`.
        :param pulumi.Input['NetworkManagerConnectivityConfigurationHubArgs'] hub: A `hub` block as defined below.
        :param pulumi.Input[str] name: Specifies the name which should be used for this Network Manager Connectivity Configuration. Changing this forces a new Network Manager Connectivity Configuration to be created.
        :param pulumi.Input[str] network_manager_id: Specifies the ID of the Network Manager. Changing this forces a new Network Manager Connectivity Configuration to be created.
        """
        _NetworkManagerConnectivityConfigurationState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            applies_to_groups=applies_to_groups,
            connectivity_topology=connectivity_topology,
            delete_existing_peering_enabled=delete_existing_peering_enabled,
            description=description,
            global_mesh_enabled=global_mesh_enabled,
            hub=hub,
            name=name,
            network_manager_id=network_manager_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             applies_to_groups: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkManagerConnectivityConfigurationAppliesToGroupArgs']]]] = None,
             connectivity_topology: Optional[pulumi.Input[str]] = None,
             delete_existing_peering_enabled: Optional[pulumi.Input[bool]] = None,
             description: Optional[pulumi.Input[str]] = None,
             global_mesh_enabled: Optional[pulumi.Input[bool]] = None,
             hub: Optional[pulumi.Input['NetworkManagerConnectivityConfigurationHubArgs']] = None,
             name: Optional[pulumi.Input[str]] = None,
             network_manager_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if applies_to_groups is not None:
            _setter("applies_to_groups", applies_to_groups)
        if connectivity_topology is not None:
            _setter("connectivity_topology", connectivity_topology)
        if delete_existing_peering_enabled is not None:
            _setter("delete_existing_peering_enabled", delete_existing_peering_enabled)
        if description is not None:
            _setter("description", description)
        if global_mesh_enabled is not None:
            _setter("global_mesh_enabled", global_mesh_enabled)
        if hub is not None:
            _setter("hub", hub)
        if name is not None:
            _setter("name", name)
        if network_manager_id is not None:
            _setter("network_manager_id", network_manager_id)

    @property
    @pulumi.getter(name="appliesToGroups")
    def applies_to_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkManagerConnectivityConfigurationAppliesToGroupArgs']]]]:
        """
        An `applies_to_group` block as defined below.
        """
        return pulumi.get(self, "applies_to_groups")

    @applies_to_groups.setter
    def applies_to_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkManagerConnectivityConfigurationAppliesToGroupArgs']]]]):
        pulumi.set(self, "applies_to_groups", value)

    @property
    @pulumi.getter(name="connectivityTopology")
    def connectivity_topology(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the connectivity topology type. Possible values are `HubAndSpoke` and `Mesh`.
        """
        return pulumi.get(self, "connectivity_topology")

    @connectivity_topology.setter
    def connectivity_topology(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connectivity_topology", value)

    @property
    @pulumi.getter(name="deleteExistingPeeringEnabled")
    def delete_existing_peering_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to remove current existing Virtual Network Peering in the Connectivity Configuration affected scope. Possible values are `true` and `false`.
        """
        return pulumi.get(self, "delete_existing_peering_enabled")

    @delete_existing_peering_enabled.setter
    def delete_existing_peering_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_existing_peering_enabled", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of the Connectivity Configuration.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="globalMeshEnabled")
    def global_mesh_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to global mesh is supported. Possible values are `true` and `false`.
        """
        return pulumi.get(self, "global_mesh_enabled")

    @global_mesh_enabled.setter
    def global_mesh_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "global_mesh_enabled", value)

    @property
    @pulumi.getter
    def hub(self) -> Optional[pulumi.Input['NetworkManagerConnectivityConfigurationHubArgs']]:
        """
        A `hub` block as defined below.
        """
        return pulumi.get(self, "hub")

    @hub.setter
    def hub(self, value: Optional[pulumi.Input['NetworkManagerConnectivityConfigurationHubArgs']]):
        pulumi.set(self, "hub", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name which should be used for this Network Manager Connectivity Configuration. Changing this forces a new Network Manager Connectivity Configuration to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkManagerId")
    def network_manager_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the Network Manager. Changing this forces a new Network Manager Connectivity Configuration to be created.
        """
        return pulumi.get(self, "network_manager_id")

    @network_manager_id.setter
    def network_manager_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_manager_id", value)


class NetworkManagerConnectivityConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 applies_to_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkManagerConnectivityConfigurationAppliesToGroupArgs']]]]] = None,
                 connectivity_topology: Optional[pulumi.Input[str]] = None,
                 delete_existing_peering_enabled: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 global_mesh_enabled: Optional[pulumi.Input[bool]] = None,
                 hub: Optional[pulumi.Input[pulumi.InputType['NetworkManagerConnectivityConfigurationHubArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_manager_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a Network Manager Connectivity Configuration.

        > **Note:** The `network.NetworkManagerConnectivityConfiguration` deployment may modify or delete existing Network Peering resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        current = azure.core.get_subscription()
        example_network_manager = azure.network.NetworkManager("exampleNetworkManager",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            scope=azure.network.NetworkManagerScopeArgs(
                subscription_ids=[current.id],
            ),
            scope_accesses=[
                "Connectivity",
                "SecurityAdmin",
            ],
            description="example network manager")
        example_network_manager_network_group = azure.network.NetworkManagerNetworkGroup("exampleNetworkManagerNetworkGroup", network_manager_id=example_network_manager.id)
        example_virtual_network = azure.network.VirtualNetwork("exampleVirtualNetwork",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            address_spaces=["10.0.0.0/16"],
            flow_timeout_in_minutes=10)
        example_network_manager_connectivity_configuration = azure.network.NetworkManagerConnectivityConfiguration("exampleNetworkManagerConnectivityConfiguration",
            network_manager_id=example_network_manager.id,
            connectivity_topology="HubAndSpoke",
            applies_to_groups=[azure.network.NetworkManagerConnectivityConfigurationAppliesToGroupArgs(
                group_connectivity="DirectlyConnected",
                network_group_id=example_network_manager_network_group.id,
            )],
            hub=azure.network.NetworkManagerConnectivityConfigurationHubArgs(
                resource_id=example_virtual_network.id,
                resource_type="Microsoft.Network/virtualNetworks",
            ))
        ```

        ## Import

        Network Manager Connectivity Configuration can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:network/networkManagerConnectivityConfiguration:NetworkManagerConnectivityConfiguration example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Network/networkManagers/networkManager1/connectivityConfigurations/configuration1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkManagerConnectivityConfigurationAppliesToGroupArgs']]]] applies_to_groups: An `applies_to_group` block as defined below.
        :param pulumi.Input[str] connectivity_topology: Specifies the connectivity topology type. Possible values are `HubAndSpoke` and `Mesh`.
        :param pulumi.Input[bool] delete_existing_peering_enabled: Indicates whether to remove current existing Virtual Network Peering in the Connectivity Configuration affected scope. Possible values are `true` and `false`.
        :param pulumi.Input[str] description: A description of the Connectivity Configuration.
        :param pulumi.Input[bool] global_mesh_enabled: Indicates whether to global mesh is supported. Possible values are `true` and `false`.
        :param pulumi.Input[pulumi.InputType['NetworkManagerConnectivityConfigurationHubArgs']] hub: A `hub` block as defined below.
        :param pulumi.Input[str] name: Specifies the name which should be used for this Network Manager Connectivity Configuration. Changing this forces a new Network Manager Connectivity Configuration to be created.
        :param pulumi.Input[str] network_manager_id: Specifies the ID of the Network Manager. Changing this forces a new Network Manager Connectivity Configuration to be created.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NetworkManagerConnectivityConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Network Manager Connectivity Configuration.

        > **Note:** The `network.NetworkManagerConnectivityConfiguration` deployment may modify or delete existing Network Peering resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        current = azure.core.get_subscription()
        example_network_manager = azure.network.NetworkManager("exampleNetworkManager",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            scope=azure.network.NetworkManagerScopeArgs(
                subscription_ids=[current.id],
            ),
            scope_accesses=[
                "Connectivity",
                "SecurityAdmin",
            ],
            description="example network manager")
        example_network_manager_network_group = azure.network.NetworkManagerNetworkGroup("exampleNetworkManagerNetworkGroup", network_manager_id=example_network_manager.id)
        example_virtual_network = azure.network.VirtualNetwork("exampleVirtualNetwork",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            address_spaces=["10.0.0.0/16"],
            flow_timeout_in_minutes=10)
        example_network_manager_connectivity_configuration = azure.network.NetworkManagerConnectivityConfiguration("exampleNetworkManagerConnectivityConfiguration",
            network_manager_id=example_network_manager.id,
            connectivity_topology="HubAndSpoke",
            applies_to_groups=[azure.network.NetworkManagerConnectivityConfigurationAppliesToGroupArgs(
                group_connectivity="DirectlyConnected",
                network_group_id=example_network_manager_network_group.id,
            )],
            hub=azure.network.NetworkManagerConnectivityConfigurationHubArgs(
                resource_id=example_virtual_network.id,
                resource_type="Microsoft.Network/virtualNetworks",
            ))
        ```

        ## Import

        Network Manager Connectivity Configuration can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:network/networkManagerConnectivityConfiguration:NetworkManagerConnectivityConfiguration example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Network/networkManagers/networkManager1/connectivityConfigurations/configuration1
        ```

        :param str resource_name: The name of the resource.
        :param NetworkManagerConnectivityConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkManagerConnectivityConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            NetworkManagerConnectivityConfigurationArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 applies_to_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkManagerConnectivityConfigurationAppliesToGroupArgs']]]]] = None,
                 connectivity_topology: Optional[pulumi.Input[str]] = None,
                 delete_existing_peering_enabled: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 global_mesh_enabled: Optional[pulumi.Input[bool]] = None,
                 hub: Optional[pulumi.Input[pulumi.InputType['NetworkManagerConnectivityConfigurationHubArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_manager_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkManagerConnectivityConfigurationArgs.__new__(NetworkManagerConnectivityConfigurationArgs)

            if applies_to_groups is None and not opts.urn:
                raise TypeError("Missing required property 'applies_to_groups'")
            __props__.__dict__["applies_to_groups"] = applies_to_groups
            if connectivity_topology is None and not opts.urn:
                raise TypeError("Missing required property 'connectivity_topology'")
            __props__.__dict__["connectivity_topology"] = connectivity_topology
            __props__.__dict__["delete_existing_peering_enabled"] = delete_existing_peering_enabled
            __props__.__dict__["description"] = description
            __props__.__dict__["global_mesh_enabled"] = global_mesh_enabled
            if hub is not None and not isinstance(hub, NetworkManagerConnectivityConfigurationHubArgs):
                hub = hub or {}
                def _setter(key, value):
                    hub[key] = value
                NetworkManagerConnectivityConfigurationHubArgs._configure(_setter, **hub)
            __props__.__dict__["hub"] = hub
            __props__.__dict__["name"] = name
            if network_manager_id is None and not opts.urn:
                raise TypeError("Missing required property 'network_manager_id'")
            __props__.__dict__["network_manager_id"] = network_manager_id
        super(NetworkManagerConnectivityConfiguration, __self__).__init__(
            'azure:network/networkManagerConnectivityConfiguration:NetworkManagerConnectivityConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            applies_to_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkManagerConnectivityConfigurationAppliesToGroupArgs']]]]] = None,
            connectivity_topology: Optional[pulumi.Input[str]] = None,
            delete_existing_peering_enabled: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            global_mesh_enabled: Optional[pulumi.Input[bool]] = None,
            hub: Optional[pulumi.Input[pulumi.InputType['NetworkManagerConnectivityConfigurationHubArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_manager_id: Optional[pulumi.Input[str]] = None) -> 'NetworkManagerConnectivityConfiguration':
        """
        Get an existing NetworkManagerConnectivityConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkManagerConnectivityConfigurationAppliesToGroupArgs']]]] applies_to_groups: An `applies_to_group` block as defined below.
        :param pulumi.Input[str] connectivity_topology: Specifies the connectivity topology type. Possible values are `HubAndSpoke` and `Mesh`.
        :param pulumi.Input[bool] delete_existing_peering_enabled: Indicates whether to remove current existing Virtual Network Peering in the Connectivity Configuration affected scope. Possible values are `true` and `false`.
        :param pulumi.Input[str] description: A description of the Connectivity Configuration.
        :param pulumi.Input[bool] global_mesh_enabled: Indicates whether to global mesh is supported. Possible values are `true` and `false`.
        :param pulumi.Input[pulumi.InputType['NetworkManagerConnectivityConfigurationHubArgs']] hub: A `hub` block as defined below.
        :param pulumi.Input[str] name: Specifies the name which should be used for this Network Manager Connectivity Configuration. Changing this forces a new Network Manager Connectivity Configuration to be created.
        :param pulumi.Input[str] network_manager_id: Specifies the ID of the Network Manager. Changing this forces a new Network Manager Connectivity Configuration to be created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworkManagerConnectivityConfigurationState.__new__(_NetworkManagerConnectivityConfigurationState)

        __props__.__dict__["applies_to_groups"] = applies_to_groups
        __props__.__dict__["connectivity_topology"] = connectivity_topology
        __props__.__dict__["delete_existing_peering_enabled"] = delete_existing_peering_enabled
        __props__.__dict__["description"] = description
        __props__.__dict__["global_mesh_enabled"] = global_mesh_enabled
        __props__.__dict__["hub"] = hub
        __props__.__dict__["name"] = name
        __props__.__dict__["network_manager_id"] = network_manager_id
        return NetworkManagerConnectivityConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appliesToGroups")
    def applies_to_groups(self) -> pulumi.Output[Sequence['outputs.NetworkManagerConnectivityConfigurationAppliesToGroup']]:
        """
        An `applies_to_group` block as defined below.
        """
        return pulumi.get(self, "applies_to_groups")

    @property
    @pulumi.getter(name="connectivityTopology")
    def connectivity_topology(self) -> pulumi.Output[str]:
        """
        Specifies the connectivity topology type. Possible values are `HubAndSpoke` and `Mesh`.
        """
        return pulumi.get(self, "connectivity_topology")

    @property
    @pulumi.getter(name="deleteExistingPeeringEnabled")
    def delete_existing_peering_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether to remove current existing Virtual Network Peering in the Connectivity Configuration affected scope. Possible values are `true` and `false`.
        """
        return pulumi.get(self, "delete_existing_peering_enabled")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        A description of the Connectivity Configuration.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="globalMeshEnabled")
    def global_mesh_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether to global mesh is supported. Possible values are `true` and `false`.
        """
        return pulumi.get(self, "global_mesh_enabled")

    @property
    @pulumi.getter
    def hub(self) -> pulumi.Output[Optional['outputs.NetworkManagerConnectivityConfigurationHub']]:
        """
        A `hub` block as defined below.
        """
        return pulumi.get(self, "hub")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Specifies the name which should be used for this Network Manager Connectivity Configuration. Changing this forces a new Network Manager Connectivity Configuration to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkManagerId")
    def network_manager_id(self) -> pulumi.Output[str]:
        """
        Specifies the ID of the Network Manager. Changing this forces a new Network Manager Connectivity Configuration to be created.
        """
        return pulumi.get(self, "network_manager_id")

