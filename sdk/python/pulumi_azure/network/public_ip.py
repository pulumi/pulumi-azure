# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class PublicIp(pulumi.CustomResource):
    """
    Create a Public IP Address.
    """
    def __init__(__self__, __name__, __opts__=None, domain_name_label=None, idle_timeout_in_minutes=None, location=None, name=None, public_ip_address_allocation=None, resource_group_name=None, reverse_fqdn=None, sku=None, tags=None, zones=None):
        """Create a PublicIp resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if domain_name_label and not isinstance(domain_name_label, basestring):
            raise TypeError('Expected property domain_name_label to be a basestring')
        __self__.domain_name_label = domain_name_label
        """
        Label for the Domain Name. Will be used to make up the FQDN.  If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system.
        """
        __props__['domainNameLabel'] = domain_name_label

        if idle_timeout_in_minutes and not isinstance(idle_timeout_in_minutes, int):
            raise TypeError('Expected property idle_timeout_in_minutes to be a int')
        __self__.idle_timeout_in_minutes = idle_timeout_in_minutes
        """
        Specifies the timeout for the TCP idle connection. The value can be set between 4 and 30 minutes.
        """
        __props__['idleTimeoutInMinutes'] = idle_timeout_in_minutes

        if not location:
            raise TypeError('Missing required property location')
        elif not isinstance(location, basestring):
            raise TypeError('Expected property location to be a basestring')
        __self__.location = location
        """
        Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        """
        __props__['location'] = location

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        Specifies the name of the Public IP resource . Changing this forces a
        new resource to be created.
        """
        __props__['name'] = name

        if not public_ip_address_allocation:
            raise TypeError('Missing required property public_ip_address_allocation')
        elif not isinstance(public_ip_address_allocation, basestring):
            raise TypeError('Expected property public_ip_address_allocation to be a basestring')
        __self__.public_ip_address_allocation = public_ip_address_allocation
        """
        Defines whether the IP address is static or dynamic. Options are Static or Dynamic.
        """
        __props__['publicIpAddressAllocation'] = public_ip_address_allocation

        if not resource_group_name:
            raise TypeError('Missing required property resource_group_name')
        elif not isinstance(resource_group_name, basestring):
            raise TypeError('Expected property resource_group_name to be a basestring')
        __self__.resource_group_name = resource_group_name
        """
        The name of the resource group in which to
        create the public ip.
        """
        __props__['resourceGroupName'] = resource_group_name

        if reverse_fqdn and not isinstance(reverse_fqdn, basestring):
            raise TypeError('Expected property reverse_fqdn to be a basestring')
        __self__.reverse_fqdn = reverse_fqdn
        """
        A fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN.
        """
        __props__['reverseFqdn'] = reverse_fqdn

        if sku and not isinstance(sku, basestring):
            raise TypeError('Expected property sku to be a basestring')
        __self__.sku = sku
        """
        The SKU of the Public IP. Accepted values are `Basic` and `Standard`. Defaults to `Basic`.
        """
        __props__['sku'] = sku

        if tags and not isinstance(tags, dict):
            raise TypeError('Expected property tags to be a dict')
        __self__.tags = tags
        """
        A mapping of tags to assign to the resource.
        """
        __props__['tags'] = tags

        if zones and not isinstance(zones, basestring):
            raise TypeError('Expected property zones to be a basestring')
        __self__.zones = zones
        """
        A collection containing the availability zone to allocate the Public IP in.
        """
        __props__['zones'] = zones

        __self__.fqdn = pulumi.runtime.UNKNOWN
        """
        Fully qualified domain name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone
        """
        __self__.ip_address = pulumi.runtime.UNKNOWN
        """
        The IP address value that was allocated.
        """

        super(PublicIp, __self__).__init__(
            'azure:network/publicIp:PublicIp',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'domainNameLabel' in outs:
            self.domain_name_label = outs['domainNameLabel']
        if 'fqdn' in outs:
            self.fqdn = outs['fqdn']
        if 'idleTimeoutInMinutes' in outs:
            self.idle_timeout_in_minutes = outs['idleTimeoutInMinutes']
        if 'ipAddress' in outs:
            self.ip_address = outs['ipAddress']
        if 'location' in outs:
            self.location = outs['location']
        if 'name' in outs:
            self.name = outs['name']
        if 'publicIpAddressAllocation' in outs:
            self.public_ip_address_allocation = outs['publicIpAddressAllocation']
        if 'resourceGroupName' in outs:
            self.resource_group_name = outs['resourceGroupName']
        if 'reverseFqdn' in outs:
            self.reverse_fqdn = outs['reverseFqdn']
        if 'sku' in outs:
            self.sku = outs['sku']
        if 'tags' in outs:
            self.tags = outs['tags']
        if 'zones' in outs:
            self.zones = outs['zones']
