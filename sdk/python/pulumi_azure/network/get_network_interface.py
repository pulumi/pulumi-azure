# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class GetNetworkInterfaceResult(object):
    """
    A collection of values returned by getNetworkInterface.
    """
    def __init__(__self__, applied_dns_servers=None, dns_servers=None, enable_accelerated_networking=None, enable_ip_forwarding=None, internal_dns_name_label=None, internal_fqdn=None, ip_configurations=None, location=None, mac_address=None, network_security_group_id=None, private_ip_address=None, private_ip_addresses=None, tags=None, virtual_machine_id=None):
        if not applied_dns_servers:
            raise TypeError('Missing required argument applied_dns_servers')
        elif not isinstance(applied_dns_servers, list):
            raise TypeError('Expected argument applied_dns_servers to be a list')
        __self__.applied_dns_servers = applied_dns_servers
        """
        List of DNS servers applied to the specified network interface.
        """
        if not dns_servers:
            raise TypeError('Missing required argument dns_servers')
        elif not isinstance(dns_servers, list):
            raise TypeError('Expected argument dns_servers to be a list')
        __self__.dns_servers = dns_servers
        """
        The list of DNS servers used by the specified network interface.
        """
        if not enable_accelerated_networking:
            raise TypeError('Missing required argument enable_accelerated_networking')
        elif not isinstance(enable_accelerated_networking, bool):
            raise TypeError('Expected argument enable_accelerated_networking to be a bool')
        __self__.enable_accelerated_networking = enable_accelerated_networking
        """
        Indicates if accelerated networking is set on the specified network interface.
        """
        if not enable_ip_forwarding:
            raise TypeError('Missing required argument enable_ip_forwarding')
        elif not isinstance(enable_ip_forwarding, bool):
            raise TypeError('Expected argument enable_ip_forwarding to be a bool')
        __self__.enable_ip_forwarding = enable_ip_forwarding
        """
        Indicate if IP forwarding is set on the specified network interface.
        """
        if not internal_dns_name_label:
            raise TypeError('Missing required argument internal_dns_name_label')
        elif not isinstance(internal_dns_name_label, basestring):
            raise TypeError('Expected argument internal_dns_name_label to be a basestring')
        __self__.internal_dns_name_label = internal_dns_name_label
        """
        The internal dns name label of the specified network interface.
        """
        if not internal_fqdn:
            raise TypeError('Missing required argument internal_fqdn')
        elif not isinstance(internal_fqdn, basestring):
            raise TypeError('Expected argument internal_fqdn to be a basestring')
        __self__.internal_fqdn = internal_fqdn
        """
        The internal FQDN associated to the specified network interface.
        """
        if not ip_configurations:
            raise TypeError('Missing required argument ip_configurations')
        elif not isinstance(ip_configurations, list):
            raise TypeError('Expected argument ip_configurations to be a list')
        __self__.ip_configurations = ip_configurations
        """
        The list of IP configurations associated to the specified network interface.
        """
        if not location:
            raise TypeError('Missing required argument location')
        elif not isinstance(location, basestring):
            raise TypeError('Expected argument location to be a basestring')
        __self__.location = location
        """
        The location of the specified network interface.
        """
        if not mac_address:
            raise TypeError('Missing required argument mac_address')
        elif not isinstance(mac_address, basestring):
            raise TypeError('Expected argument mac_address to be a basestring')
        __self__.mac_address = mac_address
        """
        The MAC address used by the specified network interface.
        """
        if not network_security_group_id:
            raise TypeError('Missing required argument network_security_group_id')
        elif not isinstance(network_security_group_id, basestring):
            raise TypeError('Expected argument network_security_group_id to be a basestring')
        __self__.network_security_group_id = network_security_group_id
        """
        The ID of the network security group associated to the specified network interface.
        """
        if not private_ip_address:
            raise TypeError('Missing required argument private_ip_address')
        elif not isinstance(private_ip_address, basestring):
            raise TypeError('Expected argument private_ip_address to be a basestring')
        __self__.private_ip_address = private_ip_address
        """
        The primary private ip address associated to the specified network interface.
        """
        if not private_ip_addresses:
            raise TypeError('Missing required argument private_ip_addresses')
        elif not isinstance(private_ip_addresses, list):
            raise TypeError('Expected argument private_ip_addresses to be a list')
        __self__.private_ip_addresses = private_ip_addresses
        """
        The list of private ip addresses associates to the specified network interface.
        """
        if not tags:
            raise TypeError('Missing required argument tags')
        elif not isinstance(tags, dict):
            raise TypeError('Expected argument tags to be a dict')
        __self__.tags = tags
        """
        List the tags assocatied to the specified network interface.
        """
        if not virtual_machine_id:
            raise TypeError('Missing required argument virtual_machine_id')
        elif not isinstance(virtual_machine_id, basestring):
            raise TypeError('Expected argument virtual_machine_id to be a basestring')
        __self__.virtual_machine_id = virtual_machine_id
        """
        The ID of the virtual machine that the specified network interface is attached to.
        """

def get_network_interface(name=None, resource_group_name=None):
    """
    Use this data source to access the properties of an Azure Network Interface.
    """
    __args__ = dict()

    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __ret__ = pulumi.runtime.invoke('azure:network/getNetworkInterface:getNetworkInterface', __args__)

    return GetNetworkInterfaceResult(
        applied_dns_servers=__ret__['appliedDnsServers'],
        dns_servers=__ret__['dnsServers'],
        enable_accelerated_networking=__ret__['enableAcceleratedNetworking'],
        enable_ip_forwarding=__ret__['enableIpForwarding'],
        internal_dns_name_label=__ret__['internalDnsNameLabel'],
        internal_fqdn=__ret__['internalFqdn'],
        ip_configurations=__ret__['ipConfigurations'],
        location=__ret__['location'],
        mac_address=__ret__['macAddress'],
        network_security_group_id=__ret__['networkSecurityGroupId'],
        private_ip_address=__ret__['privateIpAddress'],
        private_ip_addresses=__ret__['privateIpAddresses'],
        tags=__ret__['tags'],
        virtual_machine_id=__ret__['virtualMachineId'])
