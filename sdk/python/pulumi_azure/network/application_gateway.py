# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class ApplicationGateway(pulumi.CustomResource):
    def __init__(__self__, __name__, __opts__=None, authentication_certificates=None, backend_address_pools=None, backend_http_settings=None, disabled_ssl_protocols=None, frontend_ip_configurations=None, frontend_ports=None, gateway_ip_configurations=None, http_listeners=None, location=None, name=None, probes=None, request_routing_rules=None, resource_group_name=None, sku=None, ssl_certificates=None, tags=None, url_path_maps=None, waf_configuration=None):
        """Create a ApplicationGateway resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if authentication_certificates and not isinstance(authentication_certificates, list):
            raise TypeError('Expected property authentication_certificates to be a list')
        __self__.authentication_certificates = authentication_certificates
        __props__['authenticationCertificates'] = authentication_certificates

        if not backend_address_pools:
            raise TypeError('Missing required property backend_address_pools')
        elif not isinstance(backend_address_pools, list):
            raise TypeError('Expected property backend_address_pools to be a list')
        __self__.backend_address_pools = backend_address_pools
        __props__['backendAddressPools'] = backend_address_pools

        if not backend_http_settings:
            raise TypeError('Missing required property backend_http_settings')
        elif not isinstance(backend_http_settings, list):
            raise TypeError('Expected property backend_http_settings to be a list')
        __self__.backend_http_settings = backend_http_settings
        __props__['backendHttpSettings'] = backend_http_settings

        if disabled_ssl_protocols and not isinstance(disabled_ssl_protocols, list):
            raise TypeError('Expected property disabled_ssl_protocols to be a list')
        __self__.disabled_ssl_protocols = disabled_ssl_protocols
        __props__['disabledSslProtocols'] = disabled_ssl_protocols

        if not frontend_ip_configurations:
            raise TypeError('Missing required property frontend_ip_configurations')
        elif not isinstance(frontend_ip_configurations, list):
            raise TypeError('Expected property frontend_ip_configurations to be a list')
        __self__.frontend_ip_configurations = frontend_ip_configurations
        __props__['frontendIpConfigurations'] = frontend_ip_configurations

        if not frontend_ports:
            raise TypeError('Missing required property frontend_ports')
        elif not isinstance(frontend_ports, list):
            raise TypeError('Expected property frontend_ports to be a list')
        __self__.frontend_ports = frontend_ports
        __props__['frontendPorts'] = frontend_ports

        if not gateway_ip_configurations:
            raise TypeError('Missing required property gateway_ip_configurations')
        elif not isinstance(gateway_ip_configurations, list):
            raise TypeError('Expected property gateway_ip_configurations to be a list')
        __self__.gateway_ip_configurations = gateway_ip_configurations
        __props__['gatewayIpConfigurations'] = gateway_ip_configurations

        if not http_listeners:
            raise TypeError('Missing required property http_listeners')
        elif not isinstance(http_listeners, list):
            raise TypeError('Expected property http_listeners to be a list')
        __self__.http_listeners = http_listeners
        __props__['httpListeners'] = http_listeners

        if not location:
            raise TypeError('Missing required property location')
        elif not isinstance(location, basestring):
            raise TypeError('Expected property location to be a basestring')
        __self__.location = location
        __props__['location'] = location

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        __props__['name'] = name

        if probes and not isinstance(probes, list):
            raise TypeError('Expected property probes to be a list')
        __self__.probes = probes
        __props__['probes'] = probes

        if not request_routing_rules:
            raise TypeError('Missing required property request_routing_rules')
        elif not isinstance(request_routing_rules, list):
            raise TypeError('Expected property request_routing_rules to be a list')
        __self__.request_routing_rules = request_routing_rules
        __props__['requestRoutingRules'] = request_routing_rules

        if not resource_group_name:
            raise TypeError('Missing required property resource_group_name')
        elif not isinstance(resource_group_name, basestring):
            raise TypeError('Expected property resource_group_name to be a basestring')
        __self__.resource_group_name = resource_group_name
        __props__['resourceGroupName'] = resource_group_name

        if not sku:
            raise TypeError('Missing required property sku')
        elif not isinstance(sku, dict):
            raise TypeError('Expected property sku to be a dict')
        __self__.sku = sku
        __props__['sku'] = sku

        if ssl_certificates and not isinstance(ssl_certificates, list):
            raise TypeError('Expected property ssl_certificates to be a list')
        __self__.ssl_certificates = ssl_certificates
        __props__['sslCertificates'] = ssl_certificates

        if tags and not isinstance(tags, dict):
            raise TypeError('Expected property tags to be a dict')
        __self__.tags = tags
        __props__['tags'] = tags

        if url_path_maps and not isinstance(url_path_maps, list):
            raise TypeError('Expected property url_path_maps to be a list')
        __self__.url_path_maps = url_path_maps
        __props__['urlPathMaps'] = url_path_maps

        if waf_configuration and not isinstance(waf_configuration, dict):
            raise TypeError('Expected property waf_configuration to be a dict')
        __self__.waf_configuration = waf_configuration
        __props__['wafConfiguration'] = waf_configuration

        super(ApplicationGateway, __self__).__init__(
            'azure:network/applicationGateway:ApplicationGateway',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'authenticationCertificates' in outs:
            self.authentication_certificates = outs['authenticationCertificates']
        if 'backendAddressPools' in outs:
            self.backend_address_pools = outs['backendAddressPools']
        if 'backendHttpSettings' in outs:
            self.backend_http_settings = outs['backendHttpSettings']
        if 'disabledSslProtocols' in outs:
            self.disabled_ssl_protocols = outs['disabledSslProtocols']
        if 'frontendIpConfigurations' in outs:
            self.frontend_ip_configurations = outs['frontendIpConfigurations']
        if 'frontendPorts' in outs:
            self.frontend_ports = outs['frontendPorts']
        if 'gatewayIpConfigurations' in outs:
            self.gateway_ip_configurations = outs['gatewayIpConfigurations']
        if 'httpListeners' in outs:
            self.http_listeners = outs['httpListeners']
        if 'location' in outs:
            self.location = outs['location']
        if 'name' in outs:
            self.name = outs['name']
        if 'probes' in outs:
            self.probes = outs['probes']
        if 'requestRoutingRules' in outs:
            self.request_routing_rules = outs['requestRoutingRules']
        if 'resourceGroupName' in outs:
            self.resource_group_name = outs['resourceGroupName']
        if 'sku' in outs:
            self.sku = outs['sku']
        if 'sslCertificates' in outs:
            self.ssl_certificates = outs['sslCertificates']
        if 'tags' in outs:
            self.tags = outs['tags']
        if 'urlPathMaps' in outs:
            self.url_path_maps = outs['urlPathMaps']
        if 'wafConfiguration' in outs:
            self.waf_configuration = outs['wafConfiguration']
