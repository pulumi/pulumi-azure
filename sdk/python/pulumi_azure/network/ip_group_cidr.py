# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['IPGroupCIDRArgs', 'IPGroupCIDR']

@pulumi.input_type
class IPGroupCIDRArgs:
    def __init__(__self__, *,
                 cidr: pulumi.Input[str],
                 ip_group_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a IPGroupCIDR resource.
        :param pulumi.Input[str] ip_group_id: The ID of the destination IP Group.
               Changing this forces a new IP Group CIDR to be created.
        """
        IPGroupCIDRArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cidr=cidr,
            ip_group_id=ip_group_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cidr: pulumi.Input[str],
             ip_group_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("cidr", cidr)
        _setter("ip_group_id", ip_group_id)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter(name="ipGroupId")
    def ip_group_id(self) -> pulumi.Input[str]:
        """
        The ID of the destination IP Group.
        Changing this forces a new IP Group CIDR to be created.
        """
        return pulumi.get(self, "ip_group_id")

    @ip_group_id.setter
    def ip_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_group_id", value)


@pulumi.input_type
class _IPGroupCIDRState:
    def __init__(__self__, *,
                 cidr: Optional[pulumi.Input[str]] = None,
                 ip_group_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering IPGroupCIDR resources.
        :param pulumi.Input[str] ip_group_id: The ID of the destination IP Group.
               Changing this forces a new IP Group CIDR to be created.
        """
        _IPGroupCIDRState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cidr=cidr,
            ip_group_id=ip_group_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cidr: Optional[pulumi.Input[str]] = None,
             ip_group_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cidr is not None:
            _setter("cidr", cidr)
        if ip_group_id is not None:
            _setter("ip_group_id", ip_group_id)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter(name="ipGroupId")
    def ip_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the destination IP Group.
        Changing this forces a new IP Group CIDR to be created.
        """
        return pulumi.get(self, "ip_group_id")

    @ip_group_id.setter
    def ip_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_group_id", value)


class IPGroupCIDR(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr: Optional[pulumi.Input[str]] = None,
                 ip_group_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages IP Group CIDR records.

        > Warning Do not use this resource at the same time as the `cidrs` property of the
        `network.IPGroup` resource for the same IP Group. Doing so will cause a conflict and
        CIDRS will be removed.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_ip_group = azure.network.IPGroup("exampleIPGroup",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name)
        example_ip_group_cidr = azure.network.IPGroupCIDR("exampleIPGroupCIDR",
            ip_group_id=example_ip_group.id,
            cidr="10.10.10.0/24")
        ```

        ## Import

        IP Group CIDRs can be imported using the `resource id` of the IP Group and the CIDR value (`/` characters have to be replaced by `_`), e.g.

        ```sh
         $ pulumi import azure:network/iPGroupCIDR:IPGroupCIDR example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Network/ipGroups/test-ipgroup/cidrs/10.1.0.0_24
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ip_group_id: The ID of the destination IP Group.
               Changing this forces a new IP Group CIDR to be created.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IPGroupCIDRArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages IP Group CIDR records.

        > Warning Do not use this resource at the same time as the `cidrs` property of the
        `network.IPGroup` resource for the same IP Group. Doing so will cause a conflict and
        CIDRS will be removed.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_ip_group = azure.network.IPGroup("exampleIPGroup",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name)
        example_ip_group_cidr = azure.network.IPGroupCIDR("exampleIPGroupCIDR",
            ip_group_id=example_ip_group.id,
            cidr="10.10.10.0/24")
        ```

        ## Import

        IP Group CIDRs can be imported using the `resource id` of the IP Group and the CIDR value (`/` characters have to be replaced by `_`), e.g.

        ```sh
         $ pulumi import azure:network/iPGroupCIDR:IPGroupCIDR example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Network/ipGroups/test-ipgroup/cidrs/10.1.0.0_24
        ```

        :param str resource_name: The name of the resource.
        :param IPGroupCIDRArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IPGroupCIDRArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            IPGroupCIDRArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr: Optional[pulumi.Input[str]] = None,
                 ip_group_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IPGroupCIDRArgs.__new__(IPGroupCIDRArgs)

            if cidr is None and not opts.urn:
                raise TypeError("Missing required property 'cidr'")
            __props__.__dict__["cidr"] = cidr
            if ip_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'ip_group_id'")
            __props__.__dict__["ip_group_id"] = ip_group_id
        super(IPGroupCIDR, __self__).__init__(
            'azure:network/iPGroupCIDR:IPGroupCIDR',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cidr: Optional[pulumi.Input[str]] = None,
            ip_group_id: Optional[pulumi.Input[str]] = None) -> 'IPGroupCIDR':
        """
        Get an existing IPGroupCIDR resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ip_group_id: The ID of the destination IP Group.
               Changing this forces a new IP Group CIDR to be created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IPGroupCIDRState.__new__(_IPGroupCIDRState)

        __props__.__dict__["cidr"] = cidr
        __props__.__dict__["ip_group_id"] = ip_group_id
        return IPGroupCIDR(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="ipGroupId")
    def ip_group_id(self) -> pulumi.Output[str]:
        """
        The ID of the destination IP Group.
        Changing this forces a new IP Group CIDR to be created.
        """
        return pulumi.get(self, "ip_group_id")

