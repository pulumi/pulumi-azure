# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class ExpressRouteCircuit(pulumi.CustomResource):
    """
    Manages an ExpressRoute circuit.
    """
    def __init__(__self__, __name__, __opts__=None, allow_classic_operations=None, bandwidth_in_mbps=None, location=None, name=None, peering_location=None, resource_group_name=None, service_provider_name=None, sku=None, tags=None):
        """Create a ExpressRouteCircuit resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if allow_classic_operations and not isinstance(allow_classic_operations, bool):
            raise TypeError('Expected property allow_classic_operations to be a bool')
        __self__.allow_classic_operations = allow_classic_operations
        """
        Allow the circuit to interact with classic (RDFE) resources. The default value is `false`.
        """
        __props__['allowClassicOperations'] = allow_classic_operations

        if not bandwidth_in_mbps:
            raise TypeError('Missing required property bandwidth_in_mbps')
        elif not isinstance(bandwidth_in_mbps, int):
            raise TypeError('Expected property bandwidth_in_mbps to be a int')
        __self__.bandwidth_in_mbps = bandwidth_in_mbps
        """
        The bandwidth in Mbps of the circuit being created.
        """
        __props__['bandwidthInMbps'] = bandwidth_in_mbps

        if not location:
            raise TypeError('Missing required property location')
        elif not isinstance(location, basestring):
            raise TypeError('Expected property location to be a basestring')
        __self__.location = location
        """
        Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        """
        __props__['location'] = location

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The name of the ExpressRoute circuit. Changing this forces a new resource to be created.
        """
        __props__['name'] = name

        if not peering_location:
            raise TypeError('Missing required property peering_location')
        elif not isinstance(peering_location, basestring):
            raise TypeError('Expected property peering_location to be a basestring')
        __self__.peering_location = peering_location
        """
        The name of the peering location and **not** the Azure resource location.
        """
        __props__['peeringLocation'] = peering_location

        if not resource_group_name:
            raise TypeError('Missing required property resource_group_name')
        elif not isinstance(resource_group_name, basestring):
            raise TypeError('Expected property resource_group_name to be a basestring')
        __self__.resource_group_name = resource_group_name
        """
        The name of the resource group in which to create the ExpressRoute circuit. Changing this forces a new resource to be created.
        """
        __props__['resourceGroupName'] = resource_group_name

        if not service_provider_name:
            raise TypeError('Missing required property service_provider_name')
        elif not isinstance(service_provider_name, basestring):
            raise TypeError('Expected property service_provider_name to be a basestring')
        __self__.service_provider_name = service_provider_name
        """
        The name of the ExpressRoute Service Provider.
        """
        __props__['serviceProviderName'] = service_provider_name

        if not sku:
            raise TypeError('Missing required property sku')
        elif not isinstance(sku, dict):
            raise TypeError('Expected property sku to be a dict')
        __self__.sku = sku
        """
        A `sku` block for the ExpressRoute circuit as documented below.
        """
        __props__['sku'] = sku

        if tags and not isinstance(tags, dict):
            raise TypeError('Expected property tags to be a dict')
        __self__.tags = tags
        """
        A mapping of tags to assign to the resource.
        """
        __props__['tags'] = tags

        __self__.service_key = pulumi.runtime.UNKNOWN
        """
        The string needed by the service provider to provision the ExpressRoute circuit.
        """
        __self__.service_provider_provisioning_state = pulumi.runtime.UNKNOWN
        """
        The ExpressRoute circuit provisioning state from your chosen service provider. Possible values are "NotProvisioned", "Provisioning", "Provisioned", and "Deprovisioning".
        """

        super(ExpressRouteCircuit, __self__).__init__(
            'azure:network/expressRouteCircuit:ExpressRouteCircuit',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'allowClassicOperations' in outs:
            self.allow_classic_operations = outs['allowClassicOperations']
        if 'bandwidthInMbps' in outs:
            self.bandwidth_in_mbps = outs['bandwidthInMbps']
        if 'location' in outs:
            self.location = outs['location']
        if 'name' in outs:
            self.name = outs['name']
        if 'peeringLocation' in outs:
            self.peering_location = outs['peeringLocation']
        if 'resourceGroupName' in outs:
            self.resource_group_name = outs['resourceGroupName']
        if 'serviceKey' in outs:
            self.service_key = outs['serviceKey']
        if 'serviceProviderName' in outs:
            self.service_provider_name = outs['serviceProviderName']
        if 'serviceProviderProvisioningState' in outs:
            self.service_provider_provisioning_state = outs['serviceProviderProvisioningState']
        if 'sku' in outs:
            self.sku = outs['sku']
        if 'tags' in outs:
            self.tags = outs['tags']
