# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['NetworkManagerSubscriptionConnectionArgs', 'NetworkManagerSubscriptionConnection']

@pulumi.input_type
class NetworkManagerSubscriptionConnectionArgs:
    def __init__(__self__, *,
                 network_manager_id: pulumi.Input[str],
                 subscription_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NetworkManagerSubscriptionConnection resource.
        :param pulumi.Input[str] network_manager_id: Specifies the ID of the Network Manager which the Subscription is connected to.
        :param pulumi.Input[str] subscription_id: Specifies the ID of the target Subscription. Changing this forces a new resource to be created.
        :param pulumi.Input[str] description: A description of the Network Manager Subscription Connection.
        :param pulumi.Input[str] name: Specifies the name which should be used for this Network Subscription Network Manager Connection. Changing this forces a new Network Subscription Network Manager Connection to be created.
        """
        NetworkManagerSubscriptionConnectionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            network_manager_id=network_manager_id,
            subscription_id=subscription_id,
            description=description,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             network_manager_id: pulumi.Input[str],
             subscription_id: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("network_manager_id", network_manager_id)
        _setter("subscription_id", subscription_id)
        if description is not None:
            _setter("description", description)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="networkManagerId")
    def network_manager_id(self) -> pulumi.Input[str]:
        """
        Specifies the ID of the Network Manager which the Subscription is connected to.
        """
        return pulumi.get(self, "network_manager_id")

    @network_manager_id.setter
    def network_manager_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_manager_id", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> pulumi.Input[str]:
        """
        Specifies the ID of the target Subscription. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of the Network Manager Subscription Connection.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name which should be used for this Network Subscription Network Manager Connection. Changing this forces a new Network Subscription Network Manager Connection to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _NetworkManagerSubscriptionConnectionState:
    def __init__(__self__, *,
                 connection_state: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_manager_id: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NetworkManagerSubscriptionConnection resources.
        :param pulumi.Input[str] connection_state: The Connection state of the Network Manager Subscription Connection.
        :param pulumi.Input[str] description: A description of the Network Manager Subscription Connection.
        :param pulumi.Input[str] name: Specifies the name which should be used for this Network Subscription Network Manager Connection. Changing this forces a new Network Subscription Network Manager Connection to be created.
        :param pulumi.Input[str] network_manager_id: Specifies the ID of the Network Manager which the Subscription is connected to.
        :param pulumi.Input[str] subscription_id: Specifies the ID of the target Subscription. Changing this forces a new resource to be created.
        """
        _NetworkManagerSubscriptionConnectionState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            connection_state=connection_state,
            description=description,
            name=name,
            network_manager_id=network_manager_id,
            subscription_id=subscription_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             connection_state: Optional[pulumi.Input[str]] = None,
             description: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             network_manager_id: Optional[pulumi.Input[str]] = None,
             subscription_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if connection_state is not None:
            _setter("connection_state", connection_state)
        if description is not None:
            _setter("description", description)
        if name is not None:
            _setter("name", name)
        if network_manager_id is not None:
            _setter("network_manager_id", network_manager_id)
        if subscription_id is not None:
            _setter("subscription_id", subscription_id)

    @property
    @pulumi.getter(name="connectionState")
    def connection_state(self) -> Optional[pulumi.Input[str]]:
        """
        The Connection state of the Network Manager Subscription Connection.
        """
        return pulumi.get(self, "connection_state")

    @connection_state.setter
    def connection_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_state", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of the Network Manager Subscription Connection.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name which should be used for this Network Subscription Network Manager Connection. Changing this forces a new Network Subscription Network Manager Connection to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkManagerId")
    def network_manager_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the Network Manager which the Subscription is connected to.
        """
        return pulumi.get(self, "network_manager_id")

    @network_manager_id.setter
    def network_manager_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_manager_id", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the target Subscription. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)


class NetworkManagerSubscriptionConnection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_manager_id: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a Network Manager Subscription Connection which may cross tenants.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        current = azure.core.get_subscription()
        example_network_manager = azure.network.NetworkManager("exampleNetworkManager",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            scope=azure.network.NetworkManagerScopeArgs(
                subscription_ids=[current.id],
            ),
            scope_accesses=["SecurityAdmin"])
        example_network_manager_subscription_connection = azure.network.NetworkManagerSubscriptionConnection("exampleNetworkManagerSubscriptionConnection",
            subscription_id=current.id,
            network_manager_id=example_network_manager.id,
            description="example")
        ```

        ## Import

        Network Subscription Network Manager Connection can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:network/networkManagerSubscriptionConnection:NetworkManagerSubscriptionConnection example /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/networkManagerConnections/networkManagerConnection1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A description of the Network Manager Subscription Connection.
        :param pulumi.Input[str] name: Specifies the name which should be used for this Network Subscription Network Manager Connection. Changing this forces a new Network Subscription Network Manager Connection to be created.
        :param pulumi.Input[str] network_manager_id: Specifies the ID of the Network Manager which the Subscription is connected to.
        :param pulumi.Input[str] subscription_id: Specifies the ID of the target Subscription. Changing this forces a new resource to be created.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NetworkManagerSubscriptionConnectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Network Manager Subscription Connection which may cross tenants.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        current = azure.core.get_subscription()
        example_network_manager = azure.network.NetworkManager("exampleNetworkManager",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            scope=azure.network.NetworkManagerScopeArgs(
                subscription_ids=[current.id],
            ),
            scope_accesses=["SecurityAdmin"])
        example_network_manager_subscription_connection = azure.network.NetworkManagerSubscriptionConnection("exampleNetworkManagerSubscriptionConnection",
            subscription_id=current.id,
            network_manager_id=example_network_manager.id,
            description="example")
        ```

        ## Import

        Network Subscription Network Manager Connection can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:network/networkManagerSubscriptionConnection:NetworkManagerSubscriptionConnection example /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/networkManagerConnections/networkManagerConnection1
        ```

        :param str resource_name: The name of the resource.
        :param NetworkManagerSubscriptionConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkManagerSubscriptionConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            NetworkManagerSubscriptionConnectionArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_manager_id: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkManagerSubscriptionConnectionArgs.__new__(NetworkManagerSubscriptionConnectionArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if network_manager_id is None and not opts.urn:
                raise TypeError("Missing required property 'network_manager_id'")
            __props__.__dict__["network_manager_id"] = network_manager_id
            if subscription_id is None and not opts.urn:
                raise TypeError("Missing required property 'subscription_id'")
            __props__.__dict__["subscription_id"] = subscription_id
            __props__.__dict__["connection_state"] = None
        super(NetworkManagerSubscriptionConnection, __self__).__init__(
            'azure:network/networkManagerSubscriptionConnection:NetworkManagerSubscriptionConnection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connection_state: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_manager_id: Optional[pulumi.Input[str]] = None,
            subscription_id: Optional[pulumi.Input[str]] = None) -> 'NetworkManagerSubscriptionConnection':
        """
        Get an existing NetworkManagerSubscriptionConnection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] connection_state: The Connection state of the Network Manager Subscription Connection.
        :param pulumi.Input[str] description: A description of the Network Manager Subscription Connection.
        :param pulumi.Input[str] name: Specifies the name which should be used for this Network Subscription Network Manager Connection. Changing this forces a new Network Subscription Network Manager Connection to be created.
        :param pulumi.Input[str] network_manager_id: Specifies the ID of the Network Manager which the Subscription is connected to.
        :param pulumi.Input[str] subscription_id: Specifies the ID of the target Subscription. Changing this forces a new resource to be created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworkManagerSubscriptionConnectionState.__new__(_NetworkManagerSubscriptionConnectionState)

        __props__.__dict__["connection_state"] = connection_state
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["network_manager_id"] = network_manager_id
        __props__.__dict__["subscription_id"] = subscription_id
        return NetworkManagerSubscriptionConnection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="connectionState")
    def connection_state(self) -> pulumi.Output[str]:
        """
        The Connection state of the Network Manager Subscription Connection.
        """
        return pulumi.get(self, "connection_state")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        A description of the Network Manager Subscription Connection.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Specifies the name which should be used for this Network Subscription Network Manager Connection. Changing this forces a new Network Subscription Network Manager Connection to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkManagerId")
    def network_manager_id(self) -> pulumi.Output[str]:
        """
        Specifies the ID of the Network Manager which the Subscription is connected to.
        """
        return pulumi.get(self, "network_manager_id")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> pulumi.Output[str]:
        """
        Specifies the ID of the target Subscription. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "subscription_id")

