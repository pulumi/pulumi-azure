# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDicomServiceResult',
    'AwaitableGetDicomServiceResult',
    'get_dicom_service',
    'get_dicom_service_output',
]

@pulumi.output_type
class GetDicomServiceResult:
    """
    A collection of values returned by getDicomService.
    """
    def __init__(__self__, authentications=None, id=None, identities=None, location=None, name=None, private_endpoints=None, service_url=None, tags=None, workspace_id=None):
        if authentications and not isinstance(authentications, list):
            raise TypeError("Expected argument 'authentications' to be a list")
        pulumi.set(__self__, "authentications", authentications)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identities and not isinstance(identities, list):
            raise TypeError("Expected argument 'identities' to be a list")
        pulumi.set(__self__, "identities", identities)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if private_endpoints and not isinstance(private_endpoints, list):
            raise TypeError("Expected argument 'private_endpoints' to be a list")
        pulumi.set(__self__, "private_endpoints", private_endpoints)
        if service_url and not isinstance(service_url, str):
            raise TypeError("Expected argument 'service_url' to be a str")
        pulumi.set(__self__, "service_url", service_url)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter
    def authentications(self) -> Sequence['outputs.GetDicomServiceAuthenticationResult']:
        """
        The `authentication` block as defined below.
        """
        return pulumi.get(self, "authentications")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identities(self) -> Sequence['outputs.GetDicomServiceIdentityResult']:
        return pulumi.get(self, "identities")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The Azure Region where the Healthcare DICOM Service is located.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateEndpoints")
    def private_endpoints(self) -> Sequence['outputs.GetDicomServicePrivateEndpointResult']:
        return pulumi.get(self, "private_endpoints")

    @property
    @pulumi.getter(name="serviceUrl")
    def service_url(self) -> str:
        """
        The url of the Healthcare DICOM Services.
        """
        return pulumi.get(self, "service_url")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, str]:
        """
        A map of tags assigned to the Healthcare DICOM Service.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetDicomServiceResult(GetDicomServiceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDicomServiceResult(
            authentications=self.authentications,
            id=self.id,
            identities=self.identities,
            location=self.location,
            name=self.name,
            private_endpoints=self.private_endpoints,
            service_url=self.service_url,
            tags=self.tags,
            workspace_id=self.workspace_id)


def get_dicom_service(name: Optional[str] = None,
                      workspace_id: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDicomServiceResult:
    """
    Use this data source to access information about an existing Healthcare DICOM Service

    ## Example Usage

    ```python
    import pulumi
    import pulumi_azure as azure

    example = azure.healthcare.get_dicom_service(name="example-healthcare_dicom_service",
        workspace_id=data["azurerm_healthcare_workspace"]["example"]["id"])
    pulumi.export("azurermHealthcareDicomService", example.id)
    ```


    :param str name: The name of the Healthcare DICOM Service
    :param str workspace_id: The id of the Healthcare Workspace in which the Healthcare DICOM Service exists.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure:healthcare/getDicomService:getDicomService', __args__, opts=opts, typ=GetDicomServiceResult).value

    return AwaitableGetDicomServiceResult(
        authentications=__ret__.authentications,
        id=__ret__.id,
        identities=__ret__.identities,
        location=__ret__.location,
        name=__ret__.name,
        private_endpoints=__ret__.private_endpoints,
        service_url=__ret__.service_url,
        tags=__ret__.tags,
        workspace_id=__ret__.workspace_id)


@_utilities.lift_output_func(get_dicom_service)
def get_dicom_service_output(name: Optional[pulumi.Input[str]] = None,
                             workspace_id: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDicomServiceResult]:
    """
    Use this data source to access information about an existing Healthcare DICOM Service

    ## Example Usage

    ```python
    import pulumi
    import pulumi_azure as azure

    example = azure.healthcare.get_dicom_service(name="example-healthcare_dicom_service",
        workspace_id=data["azurerm_healthcare_workspace"]["example"]["id"])
    pulumi.export("azurermHealthcareDicomService", example.id)
    ```


    :param str name: The name of the Healthcare DICOM Service
    :param str workspace_id: The id of the Healthcare Workspace in which the Healthcare DICOM Service exists.
    """
    ...
