# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'VirtualMachineManagerVirtualMachineInstanceHardwareArgs',
    'VirtualMachineManagerVirtualMachineInstanceHardwareArgsDict',
    'VirtualMachineManagerVirtualMachineInstanceInfrastructureArgs',
    'VirtualMachineManagerVirtualMachineInstanceInfrastructureArgsDict',
    'VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceArgs',
    'VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceArgsDict',
    'VirtualMachineManagerVirtualMachineInstanceOperatingSystemArgs',
    'VirtualMachineManagerVirtualMachineInstanceOperatingSystemArgsDict',
    'VirtualMachineManagerVirtualMachineInstanceStorageDiskArgs',
    'VirtualMachineManagerVirtualMachineInstanceStorageDiskArgsDict',
]

MYPY = False

if not MYPY:
    class VirtualMachineManagerVirtualMachineInstanceHardwareArgsDict(TypedDict):
        cpu_count: NotRequired[pulumi.Input[builtins.int]]
        """
        The number of vCPUs for the Virtual Machine. Possible values are between `1` and `64`.
        """
        dynamic_memory_max_in_mb: NotRequired[pulumi.Input[builtins.int]]
        """
        The max dynamic memory for the Virtual Machine. Possible values are between `32` and `1048576`.
        """
        dynamic_memory_min_in_mb: NotRequired[pulumi.Input[builtins.int]]
        """
        The min dynamic memory for the Virtual Machine. Possible values are between `32` and `1048576`.
        """
        limit_cpu_for_migration_enabled: NotRequired[pulumi.Input[builtins.bool]]
        """
        Whether processor compatibility mode for live migration of Virtual Machines is enabled.
        """
        memory_in_mb: NotRequired[pulumi.Input[builtins.int]]
        """
        The size of a Virtual Machine's memory. Possible values are between `32` and `1048576`.
        """
elif False:
    VirtualMachineManagerVirtualMachineInstanceHardwareArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VirtualMachineManagerVirtualMachineInstanceHardwareArgs:
    def __init__(__self__, *,
                 cpu_count: Optional[pulumi.Input[builtins.int]] = None,
                 dynamic_memory_max_in_mb: Optional[pulumi.Input[builtins.int]] = None,
                 dynamic_memory_min_in_mb: Optional[pulumi.Input[builtins.int]] = None,
                 limit_cpu_for_migration_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 memory_in_mb: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.int] cpu_count: The number of vCPUs for the Virtual Machine. Possible values are between `1` and `64`.
        :param pulumi.Input[builtins.int] dynamic_memory_max_in_mb: The max dynamic memory for the Virtual Machine. Possible values are between `32` and `1048576`.
        :param pulumi.Input[builtins.int] dynamic_memory_min_in_mb: The min dynamic memory for the Virtual Machine. Possible values are between `32` and `1048576`.
        :param pulumi.Input[builtins.bool] limit_cpu_for_migration_enabled: Whether processor compatibility mode for live migration of Virtual Machines is enabled.
        :param pulumi.Input[builtins.int] memory_in_mb: The size of a Virtual Machine's memory. Possible values are between `32` and `1048576`.
        """
        if cpu_count is not None:
            pulumi.set(__self__, "cpu_count", cpu_count)
        if dynamic_memory_max_in_mb is not None:
            pulumi.set(__self__, "dynamic_memory_max_in_mb", dynamic_memory_max_in_mb)
        if dynamic_memory_min_in_mb is not None:
            pulumi.set(__self__, "dynamic_memory_min_in_mb", dynamic_memory_min_in_mb)
        if limit_cpu_for_migration_enabled is not None:
            pulumi.set(__self__, "limit_cpu_for_migration_enabled", limit_cpu_for_migration_enabled)
        if memory_in_mb is not None:
            pulumi.set(__self__, "memory_in_mb", memory_in_mb)

    @property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The number of vCPUs for the Virtual Machine. Possible values are between `1` and `64`.
        """
        return pulumi.get(self, "cpu_count")

    @cpu_count.setter
    def cpu_count(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "cpu_count", value)

    @property
    @pulumi.getter(name="dynamicMemoryMaxInMb")
    def dynamic_memory_max_in_mb(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The max dynamic memory for the Virtual Machine. Possible values are between `32` and `1048576`.
        """
        return pulumi.get(self, "dynamic_memory_max_in_mb")

    @dynamic_memory_max_in_mb.setter
    def dynamic_memory_max_in_mb(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "dynamic_memory_max_in_mb", value)

    @property
    @pulumi.getter(name="dynamicMemoryMinInMb")
    def dynamic_memory_min_in_mb(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The min dynamic memory for the Virtual Machine. Possible values are between `32` and `1048576`.
        """
        return pulumi.get(self, "dynamic_memory_min_in_mb")

    @dynamic_memory_min_in_mb.setter
    def dynamic_memory_min_in_mb(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "dynamic_memory_min_in_mb", value)

    @property
    @pulumi.getter(name="limitCpuForMigrationEnabled")
    def limit_cpu_for_migration_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether processor compatibility mode for live migration of Virtual Machines is enabled.
        """
        return pulumi.get(self, "limit_cpu_for_migration_enabled")

    @limit_cpu_for_migration_enabled.setter
    def limit_cpu_for_migration_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "limit_cpu_for_migration_enabled", value)

    @property
    @pulumi.getter(name="memoryInMb")
    def memory_in_mb(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The size of a Virtual Machine's memory. Possible values are between `32` and `1048576`.
        """
        return pulumi.get(self, "memory_in_mb")

    @memory_in_mb.setter
    def memory_in_mb(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "memory_in_mb", value)


if not MYPY:
    class VirtualMachineManagerVirtualMachineInstanceInfrastructureArgsDict(TypedDict):
        checkpoint_type: NotRequired[pulumi.Input[builtins.str]]
        """
        The type of checkpoint supported for the Virtual Machine. Possible values are `Disabled`, `Production`, `ProductionOnly` and `Standard`.
        """
        system_center_virtual_machine_manager_cloud_id: NotRequired[pulumi.Input[builtins.str]]
        """
        The ID of the System Center Virtual Machine Manager Cloud resource to use for deploying the Virtual Machine. Changing this forces a new resource to be created.
        """
        system_center_virtual_machine_manager_inventory_item_id: NotRequired[pulumi.Input[builtins.str]]
        """
        The ID of the System Center Virtual Machine Manager Inventory Item for System Center Virtual Machine Manager Virtual Machine Instance. Changing this forces a new resource to be created.
        """
        system_center_virtual_machine_manager_template_id: NotRequired[pulumi.Input[builtins.str]]
        """
        The ID of the System Center Virtual Machine Manager Virtual Machine Template to use for deploying the Virtual Machine. Changing this forces a new resource to be created.
        """
        system_center_virtual_machine_manager_virtual_machine_server_id: NotRequired[pulumi.Input[builtins.str]]
        """
        The ID of the System Center Virtual Machine Manager Virtual Machine. Changing this forces a new resource to be created.
        """
elif False:
    VirtualMachineManagerVirtualMachineInstanceInfrastructureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VirtualMachineManagerVirtualMachineInstanceInfrastructureArgs:
    def __init__(__self__, *,
                 checkpoint_type: Optional[pulumi.Input[builtins.str]] = None,
                 system_center_virtual_machine_manager_cloud_id: Optional[pulumi.Input[builtins.str]] = None,
                 system_center_virtual_machine_manager_inventory_item_id: Optional[pulumi.Input[builtins.str]] = None,
                 system_center_virtual_machine_manager_template_id: Optional[pulumi.Input[builtins.str]] = None,
                 system_center_virtual_machine_manager_virtual_machine_server_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] checkpoint_type: The type of checkpoint supported for the Virtual Machine. Possible values are `Disabled`, `Production`, `ProductionOnly` and `Standard`.
        :param pulumi.Input[builtins.str] system_center_virtual_machine_manager_cloud_id: The ID of the System Center Virtual Machine Manager Cloud resource to use for deploying the Virtual Machine. Changing this forces a new resource to be created.
        :param pulumi.Input[builtins.str] system_center_virtual_machine_manager_inventory_item_id: The ID of the System Center Virtual Machine Manager Inventory Item for System Center Virtual Machine Manager Virtual Machine Instance. Changing this forces a new resource to be created.
        :param pulumi.Input[builtins.str] system_center_virtual_machine_manager_template_id: The ID of the System Center Virtual Machine Manager Virtual Machine Template to use for deploying the Virtual Machine. Changing this forces a new resource to be created.
        :param pulumi.Input[builtins.str] system_center_virtual_machine_manager_virtual_machine_server_id: The ID of the System Center Virtual Machine Manager Virtual Machine. Changing this forces a new resource to be created.
        """
        if checkpoint_type is not None:
            pulumi.set(__self__, "checkpoint_type", checkpoint_type)
        if system_center_virtual_machine_manager_cloud_id is not None:
            pulumi.set(__self__, "system_center_virtual_machine_manager_cloud_id", system_center_virtual_machine_manager_cloud_id)
        if system_center_virtual_machine_manager_inventory_item_id is not None:
            pulumi.set(__self__, "system_center_virtual_machine_manager_inventory_item_id", system_center_virtual_machine_manager_inventory_item_id)
        if system_center_virtual_machine_manager_template_id is not None:
            pulumi.set(__self__, "system_center_virtual_machine_manager_template_id", system_center_virtual_machine_manager_template_id)
        if system_center_virtual_machine_manager_virtual_machine_server_id is not None:
            pulumi.set(__self__, "system_center_virtual_machine_manager_virtual_machine_server_id", system_center_virtual_machine_manager_virtual_machine_server_id)

    @property
    @pulumi.getter(name="checkpointType")
    def checkpoint_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The type of checkpoint supported for the Virtual Machine. Possible values are `Disabled`, `Production`, `ProductionOnly` and `Standard`.
        """
        return pulumi.get(self, "checkpoint_type")

    @checkpoint_type.setter
    def checkpoint_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "checkpoint_type", value)

    @property
    @pulumi.getter(name="systemCenterVirtualMachineManagerCloudId")
    def system_center_virtual_machine_manager_cloud_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The ID of the System Center Virtual Machine Manager Cloud resource to use for deploying the Virtual Machine. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "system_center_virtual_machine_manager_cloud_id")

    @system_center_virtual_machine_manager_cloud_id.setter
    def system_center_virtual_machine_manager_cloud_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "system_center_virtual_machine_manager_cloud_id", value)

    @property
    @pulumi.getter(name="systemCenterVirtualMachineManagerInventoryItemId")
    def system_center_virtual_machine_manager_inventory_item_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The ID of the System Center Virtual Machine Manager Inventory Item for System Center Virtual Machine Manager Virtual Machine Instance. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "system_center_virtual_machine_manager_inventory_item_id")

    @system_center_virtual_machine_manager_inventory_item_id.setter
    def system_center_virtual_machine_manager_inventory_item_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "system_center_virtual_machine_manager_inventory_item_id", value)

    @property
    @pulumi.getter(name="systemCenterVirtualMachineManagerTemplateId")
    def system_center_virtual_machine_manager_template_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The ID of the System Center Virtual Machine Manager Virtual Machine Template to use for deploying the Virtual Machine. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "system_center_virtual_machine_manager_template_id")

    @system_center_virtual_machine_manager_template_id.setter
    def system_center_virtual_machine_manager_template_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "system_center_virtual_machine_manager_template_id", value)

    @property
    @pulumi.getter(name="systemCenterVirtualMachineManagerVirtualMachineServerId")
    def system_center_virtual_machine_manager_virtual_machine_server_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The ID of the System Center Virtual Machine Manager Virtual Machine. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "system_center_virtual_machine_manager_virtual_machine_server_id")

    @system_center_virtual_machine_manager_virtual_machine_server_id.setter
    def system_center_virtual_machine_manager_virtual_machine_server_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "system_center_virtual_machine_manager_virtual_machine_server_id", value)


if not MYPY:
    class VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        """
        The name of the Virtual Network in System Center Virtual Machine Manager Server that the Network Interface is connected to.
        """
        ipv4_address_type: NotRequired[pulumi.Input[builtins.str]]
        """
        The IPv4 address type. Possible values are `Dynamic` and `Static`.
        """
        ipv6_address_type: NotRequired[pulumi.Input[builtins.str]]
        """
        The IPv6 address type. Possible values are `Dynamic` and `Static`.
        """
        mac_address_type: NotRequired[pulumi.Input[builtins.str]]
        """
        The MAC address type. Possible values are `Dynamic` and `Static`.
        """
        virtual_network_id: NotRequired[pulumi.Input[builtins.str]]
        """
        The ID of the System Center Virtual Machine Manager Virtual Network to connect the Network Interface.
        """
elif False:
    VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 ipv4_address_type: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_address_type: Optional[pulumi.Input[builtins.str]] = None,
                 mac_address_type: Optional[pulumi.Input[builtins.str]] = None,
                 virtual_network_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] name: The name of the Virtual Network in System Center Virtual Machine Manager Server that the Network Interface is connected to.
        :param pulumi.Input[builtins.str] ipv4_address_type: The IPv4 address type. Possible values are `Dynamic` and `Static`.
        :param pulumi.Input[builtins.str] ipv6_address_type: The IPv6 address type. Possible values are `Dynamic` and `Static`.
        :param pulumi.Input[builtins.str] mac_address_type: The MAC address type. Possible values are `Dynamic` and `Static`.
        :param pulumi.Input[builtins.str] virtual_network_id: The ID of the System Center Virtual Machine Manager Virtual Network to connect the Network Interface.
        """
        pulumi.set(__self__, "name", name)
        if ipv4_address_type is not None:
            pulumi.set(__self__, "ipv4_address_type", ipv4_address_type)
        if ipv6_address_type is not None:
            pulumi.set(__self__, "ipv6_address_type", ipv6_address_type)
        if mac_address_type is not None:
            pulumi.set(__self__, "mac_address_type", mac_address_type)
        if virtual_network_id is not None:
            pulumi.set(__self__, "virtual_network_id", virtual_network_id)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the Virtual Network in System Center Virtual Machine Manager Server that the Network Interface is connected to.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ipv4AddressType")
    def ipv4_address_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The IPv4 address type. Possible values are `Dynamic` and `Static`.
        """
        return pulumi.get(self, "ipv4_address_type")

    @ipv4_address_type.setter
    def ipv4_address_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv4_address_type", value)

    @property
    @pulumi.getter(name="ipv6AddressType")
    def ipv6_address_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The IPv6 address type. Possible values are `Dynamic` and `Static`.
        """
        return pulumi.get(self, "ipv6_address_type")

    @ipv6_address_type.setter
    def ipv6_address_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv6_address_type", value)

    @property
    @pulumi.getter(name="macAddressType")
    def mac_address_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The MAC address type. Possible values are `Dynamic` and `Static`.
        """
        return pulumi.get(self, "mac_address_type")

    @mac_address_type.setter
    def mac_address_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mac_address_type", value)

    @property
    @pulumi.getter(name="virtualNetworkId")
    def virtual_network_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The ID of the System Center Virtual Machine Manager Virtual Network to connect the Network Interface.
        """
        return pulumi.get(self, "virtual_network_id")

    @virtual_network_id.setter
    def virtual_network_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "virtual_network_id", value)


if not MYPY:
    class VirtualMachineManagerVirtualMachineInstanceOperatingSystemArgsDict(TypedDict):
        computer_name: pulumi.Input[builtins.str]
        """
        The computer name of the Virtual Machine. Changing this forces a new resource to be created.
        """
        admin_password: NotRequired[pulumi.Input[builtins.str]]
        """
        The admin password of the Virtual Machine. Changing this forces a new resource to be created.
        """
elif False:
    VirtualMachineManagerVirtualMachineInstanceOperatingSystemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VirtualMachineManagerVirtualMachineInstanceOperatingSystemArgs:
    def __init__(__self__, *,
                 computer_name: pulumi.Input[builtins.str],
                 admin_password: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] computer_name: The computer name of the Virtual Machine. Changing this forces a new resource to be created.
        :param pulumi.Input[builtins.str] admin_password: The admin password of the Virtual Machine. Changing this forces a new resource to be created.
        """
        pulumi.set(__self__, "computer_name", computer_name)
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)

    @property
    @pulumi.getter(name="computerName")
    def computer_name(self) -> pulumi.Input[builtins.str]:
        """
        The computer name of the Virtual Machine. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "computer_name")

    @computer_name.setter
    def computer_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "computer_name", value)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The admin password of the Virtual Machine. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "admin_password", value)


if not MYPY:
    class VirtualMachineManagerVirtualMachineInstanceStorageDiskArgsDict(TypedDict):
        bus: NotRequired[pulumi.Input[builtins.int]]
        """
        The disk bus. Possible values are between `0` and `3`.
        """
        bus_type: NotRequired[pulumi.Input[builtins.str]]
        """
        The disk bus type. Possible values are `IDE` and `SCSI`.
        """
        disk_size_gb: NotRequired[pulumi.Input[builtins.int]]
        """
        The disk total size.
        """
        lun: NotRequired[pulumi.Input[builtins.int]]
        """
        The disk lun. Possible values are between `0` and `63`.
        """
        name: NotRequired[pulumi.Input[builtins.str]]
        """
        The name of the disk.
        """
        storage_qos_policy_name: NotRequired[pulumi.Input[builtins.str]]
        """
        The name of the Storage QoS policy.
        """
        template_disk_id: NotRequired[pulumi.Input[builtins.str]]
        """
        The disk ID in the System Center Virtual Machine Manager Virtual Machine Template. Changing this forces a new resource to be created.
        """
        vhd_type: NotRequired[pulumi.Input[builtins.str]]
        """
        The disk vhd type. Possible values are `Dynamic` and `Fixed`.
        """
elif False:
    VirtualMachineManagerVirtualMachineInstanceStorageDiskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VirtualMachineManagerVirtualMachineInstanceStorageDiskArgs:
    def __init__(__self__, *,
                 bus: Optional[pulumi.Input[builtins.int]] = None,
                 bus_type: Optional[pulumi.Input[builtins.str]] = None,
                 disk_size_gb: Optional[pulumi.Input[builtins.int]] = None,
                 lun: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 storage_qos_policy_name: Optional[pulumi.Input[builtins.str]] = None,
                 template_disk_id: Optional[pulumi.Input[builtins.str]] = None,
                 vhd_type: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.int] bus: The disk bus. Possible values are between `0` and `3`.
        :param pulumi.Input[builtins.str] bus_type: The disk bus type. Possible values are `IDE` and `SCSI`.
        :param pulumi.Input[builtins.int] disk_size_gb: The disk total size.
        :param pulumi.Input[builtins.int] lun: The disk lun. Possible values are between `0` and `63`.
        :param pulumi.Input[builtins.str] name: The name of the disk.
        :param pulumi.Input[builtins.str] storage_qos_policy_name: The name of the Storage QoS policy.
        :param pulumi.Input[builtins.str] template_disk_id: The disk ID in the System Center Virtual Machine Manager Virtual Machine Template. Changing this forces a new resource to be created.
        :param pulumi.Input[builtins.str] vhd_type: The disk vhd type. Possible values are `Dynamic` and `Fixed`.
        """
        if bus is not None:
            pulumi.set(__self__, "bus", bus)
        if bus_type is not None:
            pulumi.set(__self__, "bus_type", bus_type)
        if disk_size_gb is not None:
            pulumi.set(__self__, "disk_size_gb", disk_size_gb)
        if lun is not None:
            pulumi.set(__self__, "lun", lun)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if storage_qos_policy_name is not None:
            pulumi.set(__self__, "storage_qos_policy_name", storage_qos_policy_name)
        if template_disk_id is not None:
            pulumi.set(__self__, "template_disk_id", template_disk_id)
        if vhd_type is not None:
            pulumi.set(__self__, "vhd_type", vhd_type)

    @property
    @pulumi.getter
    def bus(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The disk bus. Possible values are between `0` and `3`.
        """
        return pulumi.get(self, "bus")

    @bus.setter
    def bus(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "bus", value)

    @property
    @pulumi.getter(name="busType")
    def bus_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The disk bus type. Possible values are `IDE` and `SCSI`.
        """
        return pulumi.get(self, "bus_type")

    @bus_type.setter
    def bus_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "bus_type", value)

    @property
    @pulumi.getter(name="diskSizeGb")
    def disk_size_gb(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The disk total size.
        """
        return pulumi.get(self, "disk_size_gb")

    @disk_size_gb.setter
    def disk_size_gb(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "disk_size_gb", value)

    @property
    @pulumi.getter
    def lun(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The disk lun. Possible values are between `0` and `63`.
        """
        return pulumi.get(self, "lun")

    @lun.setter
    def lun(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "lun", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the disk.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="storageQosPolicyName")
    def storage_qos_policy_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the Storage QoS policy.
        """
        return pulumi.get(self, "storage_qos_policy_name")

    @storage_qos_policy_name.setter
    def storage_qos_policy_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "storage_qos_policy_name", value)

    @property
    @pulumi.getter(name="templateDiskId")
    def template_disk_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The disk ID in the System Center Virtual Machine Manager Virtual Machine Template. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "template_disk_id")

    @template_disk_id.setter
    def template_disk_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "template_disk_id", value)

    @property
    @pulumi.getter(name="vhdType")
    def vhd_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The disk vhd type. Possible values are `Dynamic` and `Fixed`.
        """
        return pulumi.get(self, "vhd_type")

    @vhd_type.setter
    def vhd_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vhd_type", value)


