# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SqlPoolVulnerabilityAssessmentArgs', 'SqlPoolVulnerabilityAssessment']

@pulumi.input_type
class SqlPoolVulnerabilityAssessmentArgs:
    def __init__(__self__, *,
                 sql_pool_security_alert_policy_id: pulumi.Input[str],
                 storage_container_path: pulumi.Input[str],
                 recurring_scans: Optional[pulumi.Input['SqlPoolVulnerabilityAssessmentRecurringScansArgs']] = None,
                 storage_account_access_key: Optional[pulumi.Input[str]] = None,
                 storage_container_sas_key: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SqlPoolVulnerabilityAssessment resource.
        :param pulumi.Input[str] sql_pool_security_alert_policy_id: The ID of the security alert policy of the Synapse SQL Pool. Changing this forces a new resource to be created.
        :param pulumi.Input[str] storage_container_path: A blob storage container path to hold the scan results (e.g. <https://example.blob.core.windows.net/VaScans/>).
        :param pulumi.Input['SqlPoolVulnerabilityAssessmentRecurringScansArgs'] recurring_scans: The recurring scans settings. The `recurring_scans` block supports fields documented below.
        :param pulumi.Input[str] storage_account_access_key: Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.
        :param pulumi.Input[str] storage_container_sas_key: A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.
        """
        SqlPoolVulnerabilityAssessmentArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sql_pool_security_alert_policy_id=sql_pool_security_alert_policy_id,
            storage_container_path=storage_container_path,
            recurring_scans=recurring_scans,
            storage_account_access_key=storage_account_access_key,
            storage_container_sas_key=storage_container_sas_key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sql_pool_security_alert_policy_id: pulumi.Input[str],
             storage_container_path: pulumi.Input[str],
             recurring_scans: Optional[pulumi.Input['SqlPoolVulnerabilityAssessmentRecurringScansArgs']] = None,
             storage_account_access_key: Optional[pulumi.Input[str]] = None,
             storage_container_sas_key: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("sql_pool_security_alert_policy_id", sql_pool_security_alert_policy_id)
        _setter("storage_container_path", storage_container_path)
        if recurring_scans is not None:
            _setter("recurring_scans", recurring_scans)
        if storage_account_access_key is not None:
            _setter("storage_account_access_key", storage_account_access_key)
        if storage_container_sas_key is not None:
            _setter("storage_container_sas_key", storage_container_sas_key)

    @property
    @pulumi.getter(name="sqlPoolSecurityAlertPolicyId")
    def sql_pool_security_alert_policy_id(self) -> pulumi.Input[str]:
        """
        The ID of the security alert policy of the Synapse SQL Pool. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "sql_pool_security_alert_policy_id")

    @sql_pool_security_alert_policy_id.setter
    def sql_pool_security_alert_policy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sql_pool_security_alert_policy_id", value)

    @property
    @pulumi.getter(name="storageContainerPath")
    def storage_container_path(self) -> pulumi.Input[str]:
        """
        A blob storage container path to hold the scan results (e.g. <https://example.blob.core.windows.net/VaScans/>).
        """
        return pulumi.get(self, "storage_container_path")

    @storage_container_path.setter
    def storage_container_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_container_path", value)

    @property
    @pulumi.getter(name="recurringScans")
    def recurring_scans(self) -> Optional[pulumi.Input['SqlPoolVulnerabilityAssessmentRecurringScansArgs']]:
        """
        The recurring scans settings. The `recurring_scans` block supports fields documented below.
        """
        return pulumi.get(self, "recurring_scans")

    @recurring_scans.setter
    def recurring_scans(self, value: Optional[pulumi.Input['SqlPoolVulnerabilityAssessmentRecurringScansArgs']]):
        pulumi.set(self, "recurring_scans", value)

    @property
    @pulumi.getter(name="storageAccountAccessKey")
    def storage_account_access_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.
        """
        return pulumi.get(self, "storage_account_access_key")

    @storage_account_access_key.setter
    def storage_account_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_access_key", value)

    @property
    @pulumi.getter(name="storageContainerSasKey")
    def storage_container_sas_key(self) -> Optional[pulumi.Input[str]]:
        """
        A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.
        """
        return pulumi.get(self, "storage_container_sas_key")

    @storage_container_sas_key.setter
    def storage_container_sas_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_container_sas_key", value)


@pulumi.input_type
class _SqlPoolVulnerabilityAssessmentState:
    def __init__(__self__, *,
                 recurring_scans: Optional[pulumi.Input['SqlPoolVulnerabilityAssessmentRecurringScansArgs']] = None,
                 sql_pool_security_alert_policy_id: Optional[pulumi.Input[str]] = None,
                 storage_account_access_key: Optional[pulumi.Input[str]] = None,
                 storage_container_path: Optional[pulumi.Input[str]] = None,
                 storage_container_sas_key: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SqlPoolVulnerabilityAssessment resources.
        :param pulumi.Input['SqlPoolVulnerabilityAssessmentRecurringScansArgs'] recurring_scans: The recurring scans settings. The `recurring_scans` block supports fields documented below.
        :param pulumi.Input[str] sql_pool_security_alert_policy_id: The ID of the security alert policy of the Synapse SQL Pool. Changing this forces a new resource to be created.
        :param pulumi.Input[str] storage_account_access_key: Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.
        :param pulumi.Input[str] storage_container_path: A blob storage container path to hold the scan results (e.g. <https://example.blob.core.windows.net/VaScans/>).
        :param pulumi.Input[str] storage_container_sas_key: A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.
        """
        _SqlPoolVulnerabilityAssessmentState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            recurring_scans=recurring_scans,
            sql_pool_security_alert_policy_id=sql_pool_security_alert_policy_id,
            storage_account_access_key=storage_account_access_key,
            storage_container_path=storage_container_path,
            storage_container_sas_key=storage_container_sas_key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             recurring_scans: Optional[pulumi.Input['SqlPoolVulnerabilityAssessmentRecurringScansArgs']] = None,
             sql_pool_security_alert_policy_id: Optional[pulumi.Input[str]] = None,
             storage_account_access_key: Optional[pulumi.Input[str]] = None,
             storage_container_path: Optional[pulumi.Input[str]] = None,
             storage_container_sas_key: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if recurring_scans is not None:
            _setter("recurring_scans", recurring_scans)
        if sql_pool_security_alert_policy_id is not None:
            _setter("sql_pool_security_alert_policy_id", sql_pool_security_alert_policy_id)
        if storage_account_access_key is not None:
            _setter("storage_account_access_key", storage_account_access_key)
        if storage_container_path is not None:
            _setter("storage_container_path", storage_container_path)
        if storage_container_sas_key is not None:
            _setter("storage_container_sas_key", storage_container_sas_key)

    @property
    @pulumi.getter(name="recurringScans")
    def recurring_scans(self) -> Optional[pulumi.Input['SqlPoolVulnerabilityAssessmentRecurringScansArgs']]:
        """
        The recurring scans settings. The `recurring_scans` block supports fields documented below.
        """
        return pulumi.get(self, "recurring_scans")

    @recurring_scans.setter
    def recurring_scans(self, value: Optional[pulumi.Input['SqlPoolVulnerabilityAssessmentRecurringScansArgs']]):
        pulumi.set(self, "recurring_scans", value)

    @property
    @pulumi.getter(name="sqlPoolSecurityAlertPolicyId")
    def sql_pool_security_alert_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the security alert policy of the Synapse SQL Pool. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "sql_pool_security_alert_policy_id")

    @sql_pool_security_alert_policy_id.setter
    def sql_pool_security_alert_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sql_pool_security_alert_policy_id", value)

    @property
    @pulumi.getter(name="storageAccountAccessKey")
    def storage_account_access_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.
        """
        return pulumi.get(self, "storage_account_access_key")

    @storage_account_access_key.setter
    def storage_account_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_access_key", value)

    @property
    @pulumi.getter(name="storageContainerPath")
    def storage_container_path(self) -> Optional[pulumi.Input[str]]:
        """
        A blob storage container path to hold the scan results (e.g. <https://example.blob.core.windows.net/VaScans/>).
        """
        return pulumi.get(self, "storage_container_path")

    @storage_container_path.setter
    def storage_container_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_container_path", value)

    @property
    @pulumi.getter(name="storageContainerSasKey")
    def storage_container_sas_key(self) -> Optional[pulumi.Input[str]]:
        """
        A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.
        """
        return pulumi.get(self, "storage_container_sas_key")

    @storage_container_sas_key.setter
    def storage_container_sas_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_container_sas_key", value)


class SqlPoolVulnerabilityAssessment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 recurring_scans: Optional[pulumi.Input[pulumi.InputType['SqlPoolVulnerabilityAssessmentRecurringScansArgs']]] = None,
                 sql_pool_security_alert_policy_id: Optional[pulumi.Input[str]] = None,
                 storage_account_access_key: Optional[pulumi.Input[str]] = None,
                 storage_container_path: Optional[pulumi.Input[str]] = None,
                 storage_container_sas_key: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages the Vulnerability Assessment for a Synapse SQL Pool.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_account = azure.storage.Account("exampleAccount",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            account_tier="Standard",
            account_replication_type="LRS",
            account_kind="StorageV2",
            is_hns_enabled=True)
        example_container = azure.storage.Container("exampleContainer", storage_account_name=example_account.name)
        example_data_lake_gen2_filesystem = azure.storage.DataLakeGen2Filesystem("exampleDataLakeGen2Filesystem", storage_account_id=example_account.id)
        example_workspace = azure.synapse.Workspace("exampleWorkspace",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            storage_data_lake_gen2_filesystem_id=example_data_lake_gen2_filesystem.id,
            sql_administrator_login="sqladminuser",
            sql_administrator_login_password="H@Sh1CoR3!",
            aad_admin=azure.synapse.WorkspaceAadAdminArgs(
                login="AzureAD Admin",
                object_id="00000000-0000-0000-0000-000000000000",
                tenant_id="00000000-0000-0000-0000-000000000000",
            ),
            identity=azure.synapse.WorkspaceIdentityArgs(
                type="SystemAssigned",
            ),
            tags={
                "Env": "production",
            })
        example_sql_pool = azure.synapse.SqlPool("exampleSqlPool",
            synapse_workspace_id=example_workspace.id,
            sku_name="DW100c",
            create_mode="Default")
        audit_logs = azure.storage.Account("auditLogs",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            account_tier="Standard",
            account_replication_type="LRS")
        example_sql_pool_security_alert_policy = azure.synapse.SqlPoolSecurityAlertPolicy("exampleSqlPoolSecurityAlertPolicy",
            sql_pool_id=example_sql_pool.id,
            policy_state="Enabled",
            storage_endpoint=audit_logs.primary_blob_endpoint,
            storage_account_access_key=audit_logs.primary_access_key,
            disabled_alerts=[
                "Sql_Injection",
                "Data_Exfiltration",
            ],
            retention_days=20)
        example_sql_pool_vulnerability_assessment = azure.synapse.SqlPoolVulnerabilityAssessment("exampleSqlPoolVulnerabilityAssessment",
            sql_pool_security_alert_policy_id=example_sql_pool_security_alert_policy.id,
            storage_container_path=pulumi.Output.all(example_account.primary_blob_endpoint, example_container.name).apply(lambda primary_blob_endpoint, name: f"{primary_blob_endpoint}{name}/"),
            storage_account_access_key=example_account.primary_access_key,
            recurring_scans=azure.synapse.SqlPoolVulnerabilityAssessmentRecurringScansArgs(
                enabled=True,
                email_subscription_admins_enabled=True,
                emails=[
                    "email@example1.com",
                    "email@example2.com",
                ],
            ))
        ```

        ## Import

        Synapse SQL Pool Vulnerability Assessment can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:synapse/sqlPoolVulnerabilityAssessment:SqlPoolVulnerabilityAssessment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Synapse/workspaces/workspace1/sqlPools/sqlPool1/vulnerabilityAssessments/default
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['SqlPoolVulnerabilityAssessmentRecurringScansArgs']] recurring_scans: The recurring scans settings. The `recurring_scans` block supports fields documented below.
        :param pulumi.Input[str] sql_pool_security_alert_policy_id: The ID of the security alert policy of the Synapse SQL Pool. Changing this forces a new resource to be created.
        :param pulumi.Input[str] storage_account_access_key: Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.
        :param pulumi.Input[str] storage_container_path: A blob storage container path to hold the scan results (e.g. <https://example.blob.core.windows.net/VaScans/>).
        :param pulumi.Input[str] storage_container_sas_key: A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SqlPoolVulnerabilityAssessmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages the Vulnerability Assessment for a Synapse SQL Pool.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_account = azure.storage.Account("exampleAccount",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            account_tier="Standard",
            account_replication_type="LRS",
            account_kind="StorageV2",
            is_hns_enabled=True)
        example_container = azure.storage.Container("exampleContainer", storage_account_name=example_account.name)
        example_data_lake_gen2_filesystem = azure.storage.DataLakeGen2Filesystem("exampleDataLakeGen2Filesystem", storage_account_id=example_account.id)
        example_workspace = azure.synapse.Workspace("exampleWorkspace",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            storage_data_lake_gen2_filesystem_id=example_data_lake_gen2_filesystem.id,
            sql_administrator_login="sqladminuser",
            sql_administrator_login_password="H@Sh1CoR3!",
            aad_admin=azure.synapse.WorkspaceAadAdminArgs(
                login="AzureAD Admin",
                object_id="00000000-0000-0000-0000-000000000000",
                tenant_id="00000000-0000-0000-0000-000000000000",
            ),
            identity=azure.synapse.WorkspaceIdentityArgs(
                type="SystemAssigned",
            ),
            tags={
                "Env": "production",
            })
        example_sql_pool = azure.synapse.SqlPool("exampleSqlPool",
            synapse_workspace_id=example_workspace.id,
            sku_name="DW100c",
            create_mode="Default")
        audit_logs = azure.storage.Account("auditLogs",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            account_tier="Standard",
            account_replication_type="LRS")
        example_sql_pool_security_alert_policy = azure.synapse.SqlPoolSecurityAlertPolicy("exampleSqlPoolSecurityAlertPolicy",
            sql_pool_id=example_sql_pool.id,
            policy_state="Enabled",
            storage_endpoint=audit_logs.primary_blob_endpoint,
            storage_account_access_key=audit_logs.primary_access_key,
            disabled_alerts=[
                "Sql_Injection",
                "Data_Exfiltration",
            ],
            retention_days=20)
        example_sql_pool_vulnerability_assessment = azure.synapse.SqlPoolVulnerabilityAssessment("exampleSqlPoolVulnerabilityAssessment",
            sql_pool_security_alert_policy_id=example_sql_pool_security_alert_policy.id,
            storage_container_path=pulumi.Output.all(example_account.primary_blob_endpoint, example_container.name).apply(lambda primary_blob_endpoint, name: f"{primary_blob_endpoint}{name}/"),
            storage_account_access_key=example_account.primary_access_key,
            recurring_scans=azure.synapse.SqlPoolVulnerabilityAssessmentRecurringScansArgs(
                enabled=True,
                email_subscription_admins_enabled=True,
                emails=[
                    "email@example1.com",
                    "email@example2.com",
                ],
            ))
        ```

        ## Import

        Synapse SQL Pool Vulnerability Assessment can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:synapse/sqlPoolVulnerabilityAssessment:SqlPoolVulnerabilityAssessment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Synapse/workspaces/workspace1/sqlPools/sqlPool1/vulnerabilityAssessments/default
        ```

        :param str resource_name: The name of the resource.
        :param SqlPoolVulnerabilityAssessmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SqlPoolVulnerabilityAssessmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            SqlPoolVulnerabilityAssessmentArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 recurring_scans: Optional[pulumi.Input[pulumi.InputType['SqlPoolVulnerabilityAssessmentRecurringScansArgs']]] = None,
                 sql_pool_security_alert_policy_id: Optional[pulumi.Input[str]] = None,
                 storage_account_access_key: Optional[pulumi.Input[str]] = None,
                 storage_container_path: Optional[pulumi.Input[str]] = None,
                 storage_container_sas_key: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SqlPoolVulnerabilityAssessmentArgs.__new__(SqlPoolVulnerabilityAssessmentArgs)

            if recurring_scans is not None and not isinstance(recurring_scans, SqlPoolVulnerabilityAssessmentRecurringScansArgs):
                recurring_scans = recurring_scans or {}
                def _setter(key, value):
                    recurring_scans[key] = value
                SqlPoolVulnerabilityAssessmentRecurringScansArgs._configure(_setter, **recurring_scans)
            __props__.__dict__["recurring_scans"] = recurring_scans
            if sql_pool_security_alert_policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'sql_pool_security_alert_policy_id'")
            __props__.__dict__["sql_pool_security_alert_policy_id"] = sql_pool_security_alert_policy_id
            __props__.__dict__["storage_account_access_key"] = None if storage_account_access_key is None else pulumi.Output.secret(storage_account_access_key)
            if storage_container_path is None and not opts.urn:
                raise TypeError("Missing required property 'storage_container_path'")
            __props__.__dict__["storage_container_path"] = storage_container_path
            __props__.__dict__["storage_container_sas_key"] = None if storage_container_sas_key is None else pulumi.Output.secret(storage_container_sas_key)
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["storageAccountAccessKey", "storageContainerSasKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SqlPoolVulnerabilityAssessment, __self__).__init__(
            'azure:synapse/sqlPoolVulnerabilityAssessment:SqlPoolVulnerabilityAssessment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            recurring_scans: Optional[pulumi.Input[pulumi.InputType['SqlPoolVulnerabilityAssessmentRecurringScansArgs']]] = None,
            sql_pool_security_alert_policy_id: Optional[pulumi.Input[str]] = None,
            storage_account_access_key: Optional[pulumi.Input[str]] = None,
            storage_container_path: Optional[pulumi.Input[str]] = None,
            storage_container_sas_key: Optional[pulumi.Input[str]] = None) -> 'SqlPoolVulnerabilityAssessment':
        """
        Get an existing SqlPoolVulnerabilityAssessment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['SqlPoolVulnerabilityAssessmentRecurringScansArgs']] recurring_scans: The recurring scans settings. The `recurring_scans` block supports fields documented below.
        :param pulumi.Input[str] sql_pool_security_alert_policy_id: The ID of the security alert policy of the Synapse SQL Pool. Changing this forces a new resource to be created.
        :param pulumi.Input[str] storage_account_access_key: Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.
        :param pulumi.Input[str] storage_container_path: A blob storage container path to hold the scan results (e.g. <https://example.blob.core.windows.net/VaScans/>).
        :param pulumi.Input[str] storage_container_sas_key: A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SqlPoolVulnerabilityAssessmentState.__new__(_SqlPoolVulnerabilityAssessmentState)

        __props__.__dict__["recurring_scans"] = recurring_scans
        __props__.__dict__["sql_pool_security_alert_policy_id"] = sql_pool_security_alert_policy_id
        __props__.__dict__["storage_account_access_key"] = storage_account_access_key
        __props__.__dict__["storage_container_path"] = storage_container_path
        __props__.__dict__["storage_container_sas_key"] = storage_container_sas_key
        return SqlPoolVulnerabilityAssessment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="recurringScans")
    def recurring_scans(self) -> pulumi.Output['outputs.SqlPoolVulnerabilityAssessmentRecurringScans']:
        """
        The recurring scans settings. The `recurring_scans` block supports fields documented below.
        """
        return pulumi.get(self, "recurring_scans")

    @property
    @pulumi.getter(name="sqlPoolSecurityAlertPolicyId")
    def sql_pool_security_alert_policy_id(self) -> pulumi.Output[str]:
        """
        The ID of the security alert policy of the Synapse SQL Pool. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "sql_pool_security_alert_policy_id")

    @property
    @pulumi.getter(name="storageAccountAccessKey")
    def storage_account_access_key(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.
        """
        return pulumi.get(self, "storage_account_access_key")

    @property
    @pulumi.getter(name="storageContainerPath")
    def storage_container_path(self) -> pulumi.Output[str]:
        """
        A blob storage container path to hold the scan results (e.g. <https://example.blob.core.windows.net/VaScans/>).
        """
        return pulumi.get(self, "storage_container_path")

    @property
    @pulumi.getter(name="storageContainerSasKey")
    def storage_container_sas_key(self) -> pulumi.Output[Optional[str]]:
        """
        A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.
        """
        return pulumi.get(self, "storage_container_sas_key")

