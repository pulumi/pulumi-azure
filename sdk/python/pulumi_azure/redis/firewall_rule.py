# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class FirewallRule(pulumi.CustomResource):
    """
    Manages a Firewall Rule associated with a Premium Redis Cache.
    
    ~> **Note:** Redis Firewall Rules can only be assigned to a Redis Cache with a `Premium` SKU.
    """
    def __init__(__self__, __name__, __opts__=None, end_ip=None, name=None, redis_cache_name=None, resource_group_name=None, start_ip=None):
        """Create a FirewallRule resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not end_ip:
            raise TypeError('Missing required property end_ip')
        elif not isinstance(end_ip, basestring):
            raise TypeError('Expected property end_ip to be a basestring')
        __self__.end_ip = end_ip
        """
        The highest IP address included in the range.
        """
        __props__['endIp'] = end_ip

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The name of the Firewall Rule. Changing this forces a new resource to be created.
        """
        __props__['name'] = name

        if not redis_cache_name:
            raise TypeError('Missing required property redis_cache_name')
        elif not isinstance(redis_cache_name, basestring):
            raise TypeError('Expected property redis_cache_name to be a basestring')
        __self__.redis_cache_name = redis_cache_name
        """
        The name of the Redis Cache. Changing this forces a new resource to be created.
        """
        __props__['redisCacheName'] = redis_cache_name

        if not resource_group_name:
            raise TypeError('Missing required property resource_group_name')
        elif not isinstance(resource_group_name, basestring):
            raise TypeError('Expected property resource_group_name to be a basestring')
        __self__.resource_group_name = resource_group_name
        """
        The name of the resource group in which this Redis Cache exists.
        """
        __props__['resourceGroupName'] = resource_group_name

        if not start_ip:
            raise TypeError('Missing required property start_ip')
        elif not isinstance(start_ip, basestring):
            raise TypeError('Expected property start_ip to be a basestring')
        __self__.start_ip = start_ip
        """
        The lowest IP address included in the range
        """
        __props__['startIp'] = start_ip

        super(FirewallRule, __self__).__init__(
            'azure:redis/firewallRule:FirewallRule',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'endIp' in outs:
            self.end_ip = outs['endIp']
        if 'name' in outs:
            self.name = outs['name']
        if 'redisCacheName' in outs:
            self.redis_cache_name = outs['redisCacheName']
        if 'resourceGroupName' in outs:
            self.resource_group_name = outs['resourceGroupName']
        if 'startIp' in outs:
            self.start_ip = outs['startIp']
