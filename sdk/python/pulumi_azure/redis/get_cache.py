# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class GetCacheResult:
    """
    A collection of values returned by getCache.
    """
    def __init__(__self__, capacity=None, enable_non_ssl_port=None, family=None, hostname=None, location=None, minimum_tls_version=None, name=None, patch_schedules=None, port=None, primary_access_key=None, private_static_ip_address=None, redis_configurations=None, resource_group_name=None, secondary_access_key=None, shard_count=None, sku_name=None, ssl_port=None, subnet_id=None, tags=None, zones=None, id=None):
        if capacity and not isinstance(capacity, float):
            raise TypeError("Expected argument 'capacity' to be a float")
        __self__.capacity = capacity
        """
        The size of the Redis Cache deployed.
        """
        if enable_non_ssl_port and not isinstance(enable_non_ssl_port, bool):
            raise TypeError("Expected argument 'enable_non_ssl_port' to be a bool")
        __self__.enable_non_ssl_port = enable_non_ssl_port
        """
        Whether the SSL port is enabled.
        """
        if family and not isinstance(family, str):
            raise TypeError("Expected argument 'family' to be a str")
        __self__.family = family
        """
        The SKU family/pricing group used. Possible values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)
        """
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        __self__.hostname = hostname
        """
        The Hostname of the Redis Instance
        """
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        """
        The location of the Redis Cache.
        """
        if minimum_tls_version and not isinstance(minimum_tls_version, str):
            raise TypeError("Expected argument 'minimum_tls_version' to be a str")
        __self__.minimum_tls_version = minimum_tls_version
        """
        The minimum TLS version.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        if patch_schedules and not isinstance(patch_schedules, list):
            raise TypeError("Expected argument 'patch_schedules' to be a list")
        __self__.patch_schedules = patch_schedules
        """
        A list of `patch_schedule` blocks as defined below - only available for Premium SKU's.
        """
        if port and not isinstance(port, float):
            raise TypeError("Expected argument 'port' to be a float")
        __self__.port = port
        """
        The non-SSL Port of the Redis Instance
        """
        if primary_access_key and not isinstance(primary_access_key, str):
            raise TypeError("Expected argument 'primary_access_key' to be a str")
        __self__.primary_access_key = primary_access_key
        """
        The Primary Access Key for the Redis Instance
        """
        if private_static_ip_address and not isinstance(private_static_ip_address, str):
            raise TypeError("Expected argument 'private_static_ip_address' to be a str")
        __self__.private_static_ip_address = private_static_ip_address
        if redis_configurations and not isinstance(redis_configurations, list):
            raise TypeError("Expected argument 'redis_configurations' to be a list")
        __self__.redis_configurations = redis_configurations
        """
        A `redis_configuration` block as defined below.
        """
        if resource_group_name and not isinstance(resource_group_name, str):
            raise TypeError("Expected argument 'resource_group_name' to be a str")
        __self__.resource_group_name = resource_group_name
        if secondary_access_key and not isinstance(secondary_access_key, str):
            raise TypeError("Expected argument 'secondary_access_key' to be a str")
        __self__.secondary_access_key = secondary_access_key
        """
        The Secondary Access Key for the Redis Instance
        """
        if shard_count and not isinstance(shard_count, float):
            raise TypeError("Expected argument 'shard_count' to be a float")
        __self__.shard_count = shard_count
        if sku_name and not isinstance(sku_name, str):
            raise TypeError("Expected argument 'sku_name' to be a str")
        __self__.sku_name = sku_name
        """
        The SKU of Redis used. Possible values are `Basic`, `Standard` and `Premium`.
        """
        if ssl_port and not isinstance(ssl_port, float):
            raise TypeError("Expected argument 'ssl_port' to be a float")
        __self__.ssl_port = ssl_port
        """
        The SSL Port of the Redis Instance
        """
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        __self__.subnet_id = subnet_id
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        if zones and not isinstance(zones, list):
            raise TypeError("Expected argument 'zones' to be a list")
        __self__.zones = zones
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        id is the provider-assigned unique ID for this managed resource.
        """

async def get_cache(name=None,resource_group_name=None,zones=None,opts=None):
    """
    Use this data source to access information about an existing Redis Cache
    """
    __args__ = dict()

    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __args__['zones'] = zones
    __ret__ = await pulumi.runtime.invoke('azure:redis/getCache:getCache', __args__, opts=opts)

    return GetCacheResult(
        capacity=__ret__.get('capacity'),
        enable_non_ssl_port=__ret__.get('enableNonSslPort'),
        family=__ret__.get('family'),
        hostname=__ret__.get('hostname'),
        location=__ret__.get('location'),
        minimum_tls_version=__ret__.get('minimumTlsVersion'),
        name=__ret__.get('name'),
        patch_schedules=__ret__.get('patchSchedules'),
        port=__ret__.get('port'),
        primary_access_key=__ret__.get('primaryAccessKey'),
        private_static_ip_address=__ret__.get('privateStaticIpAddress'),
        redis_configurations=__ret__.get('redisConfigurations'),
        resource_group_name=__ret__.get('resourceGroupName'),
        secondary_access_key=__ret__.get('secondaryAccessKey'),
        shard_count=__ret__.get('shardCount'),
        sku_name=__ret__.get('skuName'),
        ssl_port=__ret__.get('sslPort'),
        subnet_id=__ret__.get('subnetId'),
        tags=__ret__.get('tags'),
        zones=__ret__.get('zones'),
        id=__ret__.get('id'))
