# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DiagnosticArgs', 'Diagnostic']

@pulumi.input_type
class DiagnosticArgs:
    def __init__(__self__, *,
                 api_management_logger_id: pulumi.Input[str],
                 api_management_name: pulumi.Input[str],
                 identifier: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 always_log_errors: Optional[pulumi.Input[bool]] = None,
                 backend_request: Optional[pulumi.Input['DiagnosticBackendRequestArgs']] = None,
                 backend_response: Optional[pulumi.Input['DiagnosticBackendResponseArgs']] = None,
                 frontend_request: Optional[pulumi.Input['DiagnosticFrontendRequestArgs']] = None,
                 frontend_response: Optional[pulumi.Input['DiagnosticFrontendResponseArgs']] = None,
                 http_correlation_protocol: Optional[pulumi.Input[str]] = None,
                 log_client_ip: Optional[pulumi.Input[bool]] = None,
                 operation_name_format: Optional[pulumi.Input[str]] = None,
                 sampling_percentage: Optional[pulumi.Input[float]] = None,
                 verbosity: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Diagnostic resource.
        :param pulumi.Input[str] api_management_logger_id: The id of the target API Management Logger where the API Management Diagnostic should be saved.
        :param pulumi.Input[str] api_management_name: The Name of the API Management Service where this Diagnostic should be created. Changing this forces a new resource to be created.
        :param pulumi.Input[str] identifier: The diagnostic identifier for the API Management Service. At this time the only supported value is `applicationinsights`. Changing this forces a new resource to be created.
        :param pulumi.Input[str] resource_group_name: The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
        :param pulumi.Input[bool] always_log_errors: Always log errors. Send telemetry if there is an erroneous condition, regardless of sampling settings.
        :param pulumi.Input['DiagnosticBackendRequestArgs'] backend_request: A `backend_request` block as defined below.
        :param pulumi.Input['DiagnosticBackendResponseArgs'] backend_response: A `backend_response` block as defined below.
        :param pulumi.Input['DiagnosticFrontendRequestArgs'] frontend_request: A `frontend_request` block as defined below.
        :param pulumi.Input['DiagnosticFrontendResponseArgs'] frontend_response: A `frontend_response` block as defined below.
        :param pulumi.Input[str] http_correlation_protocol: The HTTP Correlation Protocol to use. Possible values are `None`, `Legacy` or `W3C`.
        :param pulumi.Input[bool] log_client_ip: Log client IP address.
        :param pulumi.Input[str] operation_name_format: The format of the Operation Name for Application Insights telemetries. Possible values are `Name`, and `Url`. Defaults to `Name`.
        :param pulumi.Input[float] sampling_percentage: Sampling (%). For high traffic APIs, please read this [documentation](https://docs.microsoft.com/azure/api-management/api-management-howto-app-insights#performance-implications-and-log-sampling) to understand performance implications and log sampling. Valid values are between `0.0` and `100.0`.
        :param pulumi.Input[str] verbosity: Logging verbosity. Possible values are `verbose`, `information` or `error`.
        """
        pulumi.set(__self__, "api_management_logger_id", api_management_logger_id)
        pulumi.set(__self__, "api_management_name", api_management_name)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if always_log_errors is not None:
            pulumi.set(__self__, "always_log_errors", always_log_errors)
        if backend_request is not None:
            pulumi.set(__self__, "backend_request", backend_request)
        if backend_response is not None:
            pulumi.set(__self__, "backend_response", backend_response)
        if frontend_request is not None:
            pulumi.set(__self__, "frontend_request", frontend_request)
        if frontend_response is not None:
            pulumi.set(__self__, "frontend_response", frontend_response)
        if http_correlation_protocol is not None:
            pulumi.set(__self__, "http_correlation_protocol", http_correlation_protocol)
        if log_client_ip is not None:
            pulumi.set(__self__, "log_client_ip", log_client_ip)
        if operation_name_format is not None:
            pulumi.set(__self__, "operation_name_format", operation_name_format)
        if sampling_percentage is not None:
            pulumi.set(__self__, "sampling_percentage", sampling_percentage)
        if verbosity is not None:
            pulumi.set(__self__, "verbosity", verbosity)

    @property
    @pulumi.getter(name="apiManagementLoggerId")
    def api_management_logger_id(self) -> pulumi.Input[str]:
        """
        The id of the target API Management Logger where the API Management Diagnostic should be saved.
        """
        return pulumi.get(self, "api_management_logger_id")

    @api_management_logger_id.setter
    def api_management_logger_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_management_logger_id", value)

    @property
    @pulumi.getter(name="apiManagementName")
    def api_management_name(self) -> pulumi.Input[str]:
        """
        The Name of the API Management Service where this Diagnostic should be created. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "api_management_name")

    @api_management_name.setter
    def api_management_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_management_name", value)

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Input[str]:
        """
        The diagnostic identifier for the API Management Service. At this time the only supported value is `applicationinsights`. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="alwaysLogErrors")
    def always_log_errors(self) -> Optional[pulumi.Input[bool]]:
        """
        Always log errors. Send telemetry if there is an erroneous condition, regardless of sampling settings.
        """
        return pulumi.get(self, "always_log_errors")

    @always_log_errors.setter
    def always_log_errors(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "always_log_errors", value)

    @property
    @pulumi.getter(name="backendRequest")
    def backend_request(self) -> Optional[pulumi.Input['DiagnosticBackendRequestArgs']]:
        """
        A `backend_request` block as defined below.
        """
        return pulumi.get(self, "backend_request")

    @backend_request.setter
    def backend_request(self, value: Optional[pulumi.Input['DiagnosticBackendRequestArgs']]):
        pulumi.set(self, "backend_request", value)

    @property
    @pulumi.getter(name="backendResponse")
    def backend_response(self) -> Optional[pulumi.Input['DiagnosticBackendResponseArgs']]:
        """
        A `backend_response` block as defined below.
        """
        return pulumi.get(self, "backend_response")

    @backend_response.setter
    def backend_response(self, value: Optional[pulumi.Input['DiagnosticBackendResponseArgs']]):
        pulumi.set(self, "backend_response", value)

    @property
    @pulumi.getter(name="frontendRequest")
    def frontend_request(self) -> Optional[pulumi.Input['DiagnosticFrontendRequestArgs']]:
        """
        A `frontend_request` block as defined below.
        """
        return pulumi.get(self, "frontend_request")

    @frontend_request.setter
    def frontend_request(self, value: Optional[pulumi.Input['DiagnosticFrontendRequestArgs']]):
        pulumi.set(self, "frontend_request", value)

    @property
    @pulumi.getter(name="frontendResponse")
    def frontend_response(self) -> Optional[pulumi.Input['DiagnosticFrontendResponseArgs']]:
        """
        A `frontend_response` block as defined below.
        """
        return pulumi.get(self, "frontend_response")

    @frontend_response.setter
    def frontend_response(self, value: Optional[pulumi.Input['DiagnosticFrontendResponseArgs']]):
        pulumi.set(self, "frontend_response", value)

    @property
    @pulumi.getter(name="httpCorrelationProtocol")
    def http_correlation_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP Correlation Protocol to use. Possible values are `None`, `Legacy` or `W3C`.
        """
        return pulumi.get(self, "http_correlation_protocol")

    @http_correlation_protocol.setter
    def http_correlation_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_correlation_protocol", value)

    @property
    @pulumi.getter(name="logClientIp")
    def log_client_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        Log client IP address.
        """
        return pulumi.get(self, "log_client_ip")

    @log_client_ip.setter
    def log_client_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_client_ip", value)

    @property
    @pulumi.getter(name="operationNameFormat")
    def operation_name_format(self) -> Optional[pulumi.Input[str]]:
        """
        The format of the Operation Name for Application Insights telemetries. Possible values are `Name`, and `Url`. Defaults to `Name`.
        """
        return pulumi.get(self, "operation_name_format")

    @operation_name_format.setter
    def operation_name_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_name_format", value)

    @property
    @pulumi.getter(name="samplingPercentage")
    def sampling_percentage(self) -> Optional[pulumi.Input[float]]:
        """
        Sampling (%). For high traffic APIs, please read this [documentation](https://docs.microsoft.com/azure/api-management/api-management-howto-app-insights#performance-implications-and-log-sampling) to understand performance implications and log sampling. Valid values are between `0.0` and `100.0`.
        """
        return pulumi.get(self, "sampling_percentage")

    @sampling_percentage.setter
    def sampling_percentage(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "sampling_percentage", value)

    @property
    @pulumi.getter
    def verbosity(self) -> Optional[pulumi.Input[str]]:
        """
        Logging verbosity. Possible values are `verbose`, `information` or `error`.
        """
        return pulumi.get(self, "verbosity")

    @verbosity.setter
    def verbosity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verbosity", value)


@pulumi.input_type
class _DiagnosticState:
    def __init__(__self__, *,
                 always_log_errors: Optional[pulumi.Input[bool]] = None,
                 api_management_logger_id: Optional[pulumi.Input[str]] = None,
                 api_management_name: Optional[pulumi.Input[str]] = None,
                 backend_request: Optional[pulumi.Input['DiagnosticBackendRequestArgs']] = None,
                 backend_response: Optional[pulumi.Input['DiagnosticBackendResponseArgs']] = None,
                 frontend_request: Optional[pulumi.Input['DiagnosticFrontendRequestArgs']] = None,
                 frontend_response: Optional[pulumi.Input['DiagnosticFrontendResponseArgs']] = None,
                 http_correlation_protocol: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 log_client_ip: Optional[pulumi.Input[bool]] = None,
                 operation_name_format: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 sampling_percentage: Optional[pulumi.Input[float]] = None,
                 verbosity: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Diagnostic resources.
        :param pulumi.Input[bool] always_log_errors: Always log errors. Send telemetry if there is an erroneous condition, regardless of sampling settings.
        :param pulumi.Input[str] api_management_logger_id: The id of the target API Management Logger where the API Management Diagnostic should be saved.
        :param pulumi.Input[str] api_management_name: The Name of the API Management Service where this Diagnostic should be created. Changing this forces a new resource to be created.
        :param pulumi.Input['DiagnosticBackendRequestArgs'] backend_request: A `backend_request` block as defined below.
        :param pulumi.Input['DiagnosticBackendResponseArgs'] backend_response: A `backend_response` block as defined below.
        :param pulumi.Input['DiagnosticFrontendRequestArgs'] frontend_request: A `frontend_request` block as defined below.
        :param pulumi.Input['DiagnosticFrontendResponseArgs'] frontend_response: A `frontend_response` block as defined below.
        :param pulumi.Input[str] http_correlation_protocol: The HTTP Correlation Protocol to use. Possible values are `None`, `Legacy` or `W3C`.
        :param pulumi.Input[str] identifier: The diagnostic identifier for the API Management Service. At this time the only supported value is `applicationinsights`. Changing this forces a new resource to be created.
        :param pulumi.Input[bool] log_client_ip: Log client IP address.
        :param pulumi.Input[str] operation_name_format: The format of the Operation Name for Application Insights telemetries. Possible values are `Name`, and `Url`. Defaults to `Name`.
        :param pulumi.Input[str] resource_group_name: The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
        :param pulumi.Input[float] sampling_percentage: Sampling (%). For high traffic APIs, please read this [documentation](https://docs.microsoft.com/azure/api-management/api-management-howto-app-insights#performance-implications-and-log-sampling) to understand performance implications and log sampling. Valid values are between `0.0` and `100.0`.
        :param pulumi.Input[str] verbosity: Logging verbosity. Possible values are `verbose`, `information` or `error`.
        """
        if always_log_errors is not None:
            pulumi.set(__self__, "always_log_errors", always_log_errors)
        if api_management_logger_id is not None:
            pulumi.set(__self__, "api_management_logger_id", api_management_logger_id)
        if api_management_name is not None:
            pulumi.set(__self__, "api_management_name", api_management_name)
        if backend_request is not None:
            pulumi.set(__self__, "backend_request", backend_request)
        if backend_response is not None:
            pulumi.set(__self__, "backend_response", backend_response)
        if frontend_request is not None:
            pulumi.set(__self__, "frontend_request", frontend_request)
        if frontend_response is not None:
            pulumi.set(__self__, "frontend_response", frontend_response)
        if http_correlation_protocol is not None:
            pulumi.set(__self__, "http_correlation_protocol", http_correlation_protocol)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if log_client_ip is not None:
            pulumi.set(__self__, "log_client_ip", log_client_ip)
        if operation_name_format is not None:
            pulumi.set(__self__, "operation_name_format", operation_name_format)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if sampling_percentage is not None:
            pulumi.set(__self__, "sampling_percentage", sampling_percentage)
        if verbosity is not None:
            pulumi.set(__self__, "verbosity", verbosity)

    @property
    @pulumi.getter(name="alwaysLogErrors")
    def always_log_errors(self) -> Optional[pulumi.Input[bool]]:
        """
        Always log errors. Send telemetry if there is an erroneous condition, regardless of sampling settings.
        """
        return pulumi.get(self, "always_log_errors")

    @always_log_errors.setter
    def always_log_errors(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "always_log_errors", value)

    @property
    @pulumi.getter(name="apiManagementLoggerId")
    def api_management_logger_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the target API Management Logger where the API Management Diagnostic should be saved.
        """
        return pulumi.get(self, "api_management_logger_id")

    @api_management_logger_id.setter
    def api_management_logger_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_management_logger_id", value)

    @property
    @pulumi.getter(name="apiManagementName")
    def api_management_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Name of the API Management Service where this Diagnostic should be created. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "api_management_name")

    @api_management_name.setter
    def api_management_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_management_name", value)

    @property
    @pulumi.getter(name="backendRequest")
    def backend_request(self) -> Optional[pulumi.Input['DiagnosticBackendRequestArgs']]:
        """
        A `backend_request` block as defined below.
        """
        return pulumi.get(self, "backend_request")

    @backend_request.setter
    def backend_request(self, value: Optional[pulumi.Input['DiagnosticBackendRequestArgs']]):
        pulumi.set(self, "backend_request", value)

    @property
    @pulumi.getter(name="backendResponse")
    def backend_response(self) -> Optional[pulumi.Input['DiagnosticBackendResponseArgs']]:
        """
        A `backend_response` block as defined below.
        """
        return pulumi.get(self, "backend_response")

    @backend_response.setter
    def backend_response(self, value: Optional[pulumi.Input['DiagnosticBackendResponseArgs']]):
        pulumi.set(self, "backend_response", value)

    @property
    @pulumi.getter(name="frontendRequest")
    def frontend_request(self) -> Optional[pulumi.Input['DiagnosticFrontendRequestArgs']]:
        """
        A `frontend_request` block as defined below.
        """
        return pulumi.get(self, "frontend_request")

    @frontend_request.setter
    def frontend_request(self, value: Optional[pulumi.Input['DiagnosticFrontendRequestArgs']]):
        pulumi.set(self, "frontend_request", value)

    @property
    @pulumi.getter(name="frontendResponse")
    def frontend_response(self) -> Optional[pulumi.Input['DiagnosticFrontendResponseArgs']]:
        """
        A `frontend_response` block as defined below.
        """
        return pulumi.get(self, "frontend_response")

    @frontend_response.setter
    def frontend_response(self, value: Optional[pulumi.Input['DiagnosticFrontendResponseArgs']]):
        pulumi.set(self, "frontend_response", value)

    @property
    @pulumi.getter(name="httpCorrelationProtocol")
    def http_correlation_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP Correlation Protocol to use. Possible values are `None`, `Legacy` or `W3C`.
        """
        return pulumi.get(self, "http_correlation_protocol")

    @http_correlation_protocol.setter
    def http_correlation_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_correlation_protocol", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The diagnostic identifier for the API Management Service. At this time the only supported value is `applicationinsights`. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter(name="logClientIp")
    def log_client_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        Log client IP address.
        """
        return pulumi.get(self, "log_client_ip")

    @log_client_ip.setter
    def log_client_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_client_ip", value)

    @property
    @pulumi.getter(name="operationNameFormat")
    def operation_name_format(self) -> Optional[pulumi.Input[str]]:
        """
        The format of the Operation Name for Application Insights telemetries. Possible values are `Name`, and `Url`. Defaults to `Name`.
        """
        return pulumi.get(self, "operation_name_format")

    @operation_name_format.setter
    def operation_name_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_name_format", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="samplingPercentage")
    def sampling_percentage(self) -> Optional[pulumi.Input[float]]:
        """
        Sampling (%). For high traffic APIs, please read this [documentation](https://docs.microsoft.com/azure/api-management/api-management-howto-app-insights#performance-implications-and-log-sampling) to understand performance implications and log sampling. Valid values are between `0.0` and `100.0`.
        """
        return pulumi.get(self, "sampling_percentage")

    @sampling_percentage.setter
    def sampling_percentage(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "sampling_percentage", value)

    @property
    @pulumi.getter
    def verbosity(self) -> Optional[pulumi.Input[str]]:
        """
        Logging verbosity. Possible values are `verbose`, `information` or `error`.
        """
        return pulumi.get(self, "verbosity")

    @verbosity.setter
    def verbosity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verbosity", value)


class Diagnostic(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 always_log_errors: Optional[pulumi.Input[bool]] = None,
                 api_management_logger_id: Optional[pulumi.Input[str]] = None,
                 api_management_name: Optional[pulumi.Input[str]] = None,
                 backend_request: Optional[pulumi.Input[pulumi.InputType['DiagnosticBackendRequestArgs']]] = None,
                 backend_response: Optional[pulumi.Input[pulumi.InputType['DiagnosticBackendResponseArgs']]] = None,
                 frontend_request: Optional[pulumi.Input[pulumi.InputType['DiagnosticFrontendRequestArgs']]] = None,
                 frontend_response: Optional[pulumi.Input[pulumi.InputType['DiagnosticFrontendResponseArgs']]] = None,
                 http_correlation_protocol: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 log_client_ip: Optional[pulumi.Input[bool]] = None,
                 operation_name_format: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 sampling_percentage: Optional[pulumi.Input[float]] = None,
                 verbosity: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages an API Management Service Diagnostic.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_insights = azure.appinsights.Insights("exampleInsights",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            application_type="web")
        example_service = azure.apimanagement.Service("exampleService",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            publisher_name="My Company",
            publisher_email="company@mycompany.io",
            sku_name="Developer_1")
        example_logger = azure.apimanagement.Logger("exampleLogger",
            api_management_name=example_service.name,
            resource_group_name=example_resource_group.name,
            application_insights=azure.apimanagement.LoggerApplicationInsightsArgs(
                instrumentation_key=example_insights.instrumentation_key,
            ))
        example_diagnostic = azure.apimanagement.Diagnostic("exampleDiagnostic",
            identifier="applicationinsights",
            resource_group_name=example_resource_group.name,
            api_management_name=example_service.name,
            api_management_logger_id=example_logger.id,
            sampling_percentage=5,
            always_log_errors=True,
            log_client_ip=True,
            verbosity="verbose",
            http_correlation_protocol="W3C",
            frontend_request=azure.apimanagement.DiagnosticFrontendRequestArgs(
                body_bytes=32,
                headers_to_logs=[
                    "content-type",
                    "accept",
                    "origin",
                ],
            ),
            frontend_response=azure.apimanagement.DiagnosticFrontendResponseArgs(
                body_bytes=32,
                headers_to_logs=[
                    "content-type",
                    "content-length",
                    "origin",
                ],
            ),
            backend_request=azure.apimanagement.DiagnosticBackendRequestArgs(
                body_bytes=32,
                headers_to_logs=[
                    "content-type",
                    "accept",
                    "origin",
                ],
            ),
            backend_response=azure.apimanagement.DiagnosticBackendResponseArgs(
                body_bytes=32,
                headers_to_logs=[
                    "content-type",
                    "content-length",
                    "origin",
                ],
            ))
        ```

        ## Import

        API Management Diagnostics can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:apimanagement/diagnostic:Diagnostic example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ApiManagement/service/instance1/diagnostics/applicationinsights
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] always_log_errors: Always log errors. Send telemetry if there is an erroneous condition, regardless of sampling settings.
        :param pulumi.Input[str] api_management_logger_id: The id of the target API Management Logger where the API Management Diagnostic should be saved.
        :param pulumi.Input[str] api_management_name: The Name of the API Management Service where this Diagnostic should be created. Changing this forces a new resource to be created.
        :param pulumi.Input[pulumi.InputType['DiagnosticBackendRequestArgs']] backend_request: A `backend_request` block as defined below.
        :param pulumi.Input[pulumi.InputType['DiagnosticBackendResponseArgs']] backend_response: A `backend_response` block as defined below.
        :param pulumi.Input[pulumi.InputType['DiagnosticFrontendRequestArgs']] frontend_request: A `frontend_request` block as defined below.
        :param pulumi.Input[pulumi.InputType['DiagnosticFrontendResponseArgs']] frontend_response: A `frontend_response` block as defined below.
        :param pulumi.Input[str] http_correlation_protocol: The HTTP Correlation Protocol to use. Possible values are `None`, `Legacy` or `W3C`.
        :param pulumi.Input[str] identifier: The diagnostic identifier for the API Management Service. At this time the only supported value is `applicationinsights`. Changing this forces a new resource to be created.
        :param pulumi.Input[bool] log_client_ip: Log client IP address.
        :param pulumi.Input[str] operation_name_format: The format of the Operation Name for Application Insights telemetries. Possible values are `Name`, and `Url`. Defaults to `Name`.
        :param pulumi.Input[str] resource_group_name: The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
        :param pulumi.Input[float] sampling_percentage: Sampling (%). For high traffic APIs, please read this [documentation](https://docs.microsoft.com/azure/api-management/api-management-howto-app-insights#performance-implications-and-log-sampling) to understand performance implications and log sampling. Valid values are between `0.0` and `100.0`.
        :param pulumi.Input[str] verbosity: Logging verbosity. Possible values are `verbose`, `information` or `error`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DiagnosticArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an API Management Service Diagnostic.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_insights = azure.appinsights.Insights("exampleInsights",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            application_type="web")
        example_service = azure.apimanagement.Service("exampleService",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            publisher_name="My Company",
            publisher_email="company@mycompany.io",
            sku_name="Developer_1")
        example_logger = azure.apimanagement.Logger("exampleLogger",
            api_management_name=example_service.name,
            resource_group_name=example_resource_group.name,
            application_insights=azure.apimanagement.LoggerApplicationInsightsArgs(
                instrumentation_key=example_insights.instrumentation_key,
            ))
        example_diagnostic = azure.apimanagement.Diagnostic("exampleDiagnostic",
            identifier="applicationinsights",
            resource_group_name=example_resource_group.name,
            api_management_name=example_service.name,
            api_management_logger_id=example_logger.id,
            sampling_percentage=5,
            always_log_errors=True,
            log_client_ip=True,
            verbosity="verbose",
            http_correlation_protocol="W3C",
            frontend_request=azure.apimanagement.DiagnosticFrontendRequestArgs(
                body_bytes=32,
                headers_to_logs=[
                    "content-type",
                    "accept",
                    "origin",
                ],
            ),
            frontend_response=azure.apimanagement.DiagnosticFrontendResponseArgs(
                body_bytes=32,
                headers_to_logs=[
                    "content-type",
                    "content-length",
                    "origin",
                ],
            ),
            backend_request=azure.apimanagement.DiagnosticBackendRequestArgs(
                body_bytes=32,
                headers_to_logs=[
                    "content-type",
                    "accept",
                    "origin",
                ],
            ),
            backend_response=azure.apimanagement.DiagnosticBackendResponseArgs(
                body_bytes=32,
                headers_to_logs=[
                    "content-type",
                    "content-length",
                    "origin",
                ],
            ))
        ```

        ## Import

        API Management Diagnostics can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:apimanagement/diagnostic:Diagnostic example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ApiManagement/service/instance1/diagnostics/applicationinsights
        ```

        :param str resource_name: The name of the resource.
        :param DiagnosticArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DiagnosticArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 always_log_errors: Optional[pulumi.Input[bool]] = None,
                 api_management_logger_id: Optional[pulumi.Input[str]] = None,
                 api_management_name: Optional[pulumi.Input[str]] = None,
                 backend_request: Optional[pulumi.Input[pulumi.InputType['DiagnosticBackendRequestArgs']]] = None,
                 backend_response: Optional[pulumi.Input[pulumi.InputType['DiagnosticBackendResponseArgs']]] = None,
                 frontend_request: Optional[pulumi.Input[pulumi.InputType['DiagnosticFrontendRequestArgs']]] = None,
                 frontend_response: Optional[pulumi.Input[pulumi.InputType['DiagnosticFrontendResponseArgs']]] = None,
                 http_correlation_protocol: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 log_client_ip: Optional[pulumi.Input[bool]] = None,
                 operation_name_format: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 sampling_percentage: Optional[pulumi.Input[float]] = None,
                 verbosity: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DiagnosticArgs.__new__(DiagnosticArgs)

            __props__.__dict__["always_log_errors"] = always_log_errors
            if api_management_logger_id is None and not opts.urn:
                raise TypeError("Missing required property 'api_management_logger_id'")
            __props__.__dict__["api_management_logger_id"] = api_management_logger_id
            if api_management_name is None and not opts.urn:
                raise TypeError("Missing required property 'api_management_name'")
            __props__.__dict__["api_management_name"] = api_management_name
            __props__.__dict__["backend_request"] = backend_request
            __props__.__dict__["backend_response"] = backend_response
            __props__.__dict__["frontend_request"] = frontend_request
            __props__.__dict__["frontend_response"] = frontend_response
            __props__.__dict__["http_correlation_protocol"] = http_correlation_protocol
            if identifier is None and not opts.urn:
                raise TypeError("Missing required property 'identifier'")
            __props__.__dict__["identifier"] = identifier
            __props__.__dict__["log_client_ip"] = log_client_ip
            __props__.__dict__["operation_name_format"] = operation_name_format
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["sampling_percentage"] = sampling_percentage
            __props__.__dict__["verbosity"] = verbosity
        super(Diagnostic, __self__).__init__(
            'azure:apimanagement/diagnostic:Diagnostic',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            always_log_errors: Optional[pulumi.Input[bool]] = None,
            api_management_logger_id: Optional[pulumi.Input[str]] = None,
            api_management_name: Optional[pulumi.Input[str]] = None,
            backend_request: Optional[pulumi.Input[pulumi.InputType['DiagnosticBackendRequestArgs']]] = None,
            backend_response: Optional[pulumi.Input[pulumi.InputType['DiagnosticBackendResponseArgs']]] = None,
            frontend_request: Optional[pulumi.Input[pulumi.InputType['DiagnosticFrontendRequestArgs']]] = None,
            frontend_response: Optional[pulumi.Input[pulumi.InputType['DiagnosticFrontendResponseArgs']]] = None,
            http_correlation_protocol: Optional[pulumi.Input[str]] = None,
            identifier: Optional[pulumi.Input[str]] = None,
            log_client_ip: Optional[pulumi.Input[bool]] = None,
            operation_name_format: Optional[pulumi.Input[str]] = None,
            resource_group_name: Optional[pulumi.Input[str]] = None,
            sampling_percentage: Optional[pulumi.Input[float]] = None,
            verbosity: Optional[pulumi.Input[str]] = None) -> 'Diagnostic':
        """
        Get an existing Diagnostic resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] always_log_errors: Always log errors. Send telemetry if there is an erroneous condition, regardless of sampling settings.
        :param pulumi.Input[str] api_management_logger_id: The id of the target API Management Logger where the API Management Diagnostic should be saved.
        :param pulumi.Input[str] api_management_name: The Name of the API Management Service where this Diagnostic should be created. Changing this forces a new resource to be created.
        :param pulumi.Input[pulumi.InputType['DiagnosticBackendRequestArgs']] backend_request: A `backend_request` block as defined below.
        :param pulumi.Input[pulumi.InputType['DiagnosticBackendResponseArgs']] backend_response: A `backend_response` block as defined below.
        :param pulumi.Input[pulumi.InputType['DiagnosticFrontendRequestArgs']] frontend_request: A `frontend_request` block as defined below.
        :param pulumi.Input[pulumi.InputType['DiagnosticFrontendResponseArgs']] frontend_response: A `frontend_response` block as defined below.
        :param pulumi.Input[str] http_correlation_protocol: The HTTP Correlation Protocol to use. Possible values are `None`, `Legacy` or `W3C`.
        :param pulumi.Input[str] identifier: The diagnostic identifier for the API Management Service. At this time the only supported value is `applicationinsights`. Changing this forces a new resource to be created.
        :param pulumi.Input[bool] log_client_ip: Log client IP address.
        :param pulumi.Input[str] operation_name_format: The format of the Operation Name for Application Insights telemetries. Possible values are `Name`, and `Url`. Defaults to `Name`.
        :param pulumi.Input[str] resource_group_name: The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
        :param pulumi.Input[float] sampling_percentage: Sampling (%). For high traffic APIs, please read this [documentation](https://docs.microsoft.com/azure/api-management/api-management-howto-app-insights#performance-implications-and-log-sampling) to understand performance implications and log sampling. Valid values are between `0.0` and `100.0`.
        :param pulumi.Input[str] verbosity: Logging verbosity. Possible values are `verbose`, `information` or `error`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DiagnosticState.__new__(_DiagnosticState)

        __props__.__dict__["always_log_errors"] = always_log_errors
        __props__.__dict__["api_management_logger_id"] = api_management_logger_id
        __props__.__dict__["api_management_name"] = api_management_name
        __props__.__dict__["backend_request"] = backend_request
        __props__.__dict__["backend_response"] = backend_response
        __props__.__dict__["frontend_request"] = frontend_request
        __props__.__dict__["frontend_response"] = frontend_response
        __props__.__dict__["http_correlation_protocol"] = http_correlation_protocol
        __props__.__dict__["identifier"] = identifier
        __props__.__dict__["log_client_ip"] = log_client_ip
        __props__.__dict__["operation_name_format"] = operation_name_format
        __props__.__dict__["resource_group_name"] = resource_group_name
        __props__.__dict__["sampling_percentage"] = sampling_percentage
        __props__.__dict__["verbosity"] = verbosity
        return Diagnostic(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="alwaysLogErrors")
    def always_log_errors(self) -> pulumi.Output[bool]:
        """
        Always log errors. Send telemetry if there is an erroneous condition, regardless of sampling settings.
        """
        return pulumi.get(self, "always_log_errors")

    @property
    @pulumi.getter(name="apiManagementLoggerId")
    def api_management_logger_id(self) -> pulumi.Output[str]:
        """
        The id of the target API Management Logger where the API Management Diagnostic should be saved.
        """
        return pulumi.get(self, "api_management_logger_id")

    @property
    @pulumi.getter(name="apiManagementName")
    def api_management_name(self) -> pulumi.Output[str]:
        """
        The Name of the API Management Service where this Diagnostic should be created. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "api_management_name")

    @property
    @pulumi.getter(name="backendRequest")
    def backend_request(self) -> pulumi.Output['outputs.DiagnosticBackendRequest']:
        """
        A `backend_request` block as defined below.
        """
        return pulumi.get(self, "backend_request")

    @property
    @pulumi.getter(name="backendResponse")
    def backend_response(self) -> pulumi.Output['outputs.DiagnosticBackendResponse']:
        """
        A `backend_response` block as defined below.
        """
        return pulumi.get(self, "backend_response")

    @property
    @pulumi.getter(name="frontendRequest")
    def frontend_request(self) -> pulumi.Output['outputs.DiagnosticFrontendRequest']:
        """
        A `frontend_request` block as defined below.
        """
        return pulumi.get(self, "frontend_request")

    @property
    @pulumi.getter(name="frontendResponse")
    def frontend_response(self) -> pulumi.Output['outputs.DiagnosticFrontendResponse']:
        """
        A `frontend_response` block as defined below.
        """
        return pulumi.get(self, "frontend_response")

    @property
    @pulumi.getter(name="httpCorrelationProtocol")
    def http_correlation_protocol(self) -> pulumi.Output[str]:
        """
        The HTTP Correlation Protocol to use. Possible values are `None`, `Legacy` or `W3C`.
        """
        return pulumi.get(self, "http_correlation_protocol")

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Output[str]:
        """
        The diagnostic identifier for the API Management Service. At this time the only supported value is `applicationinsights`. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="logClientIp")
    def log_client_ip(self) -> pulumi.Output[bool]:
        """
        Log client IP address.
        """
        return pulumi.get(self, "log_client_ip")

    @property
    @pulumi.getter(name="operationNameFormat")
    def operation_name_format(self) -> pulumi.Output[Optional[str]]:
        """
        The format of the Operation Name for Application Insights telemetries. Possible values are `Name`, and `Url`. Defaults to `Name`.
        """
        return pulumi.get(self, "operation_name_format")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[str]:
        """
        The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="samplingPercentage")
    def sampling_percentage(self) -> pulumi.Output[float]:
        """
        Sampling (%). For high traffic APIs, please read this [documentation](https://docs.microsoft.com/azure/api-management/api-management-howto-app-insights#performance-implications-and-log-sampling) to understand performance implications and log sampling. Valid values are between `0.0` and `100.0`.
        """
        return pulumi.get(self, "sampling_percentage")

    @property
    @pulumi.getter
    def verbosity(self) -> pulumi.Output[str]:
        """
        Logging verbosity. Possible values are `verbose`, `information` or `error`.
        """
        return pulumi.get(self, "verbosity")

