# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class API(pulumi.CustomResource):
    """
    Manages an API Management Service.
    """
    def __init__(__self__, __name__, __opts__=None, additional_location=None, certificates=None, hostname_configuration=None, identity=None, location=None, name=None, notification_sender_email=None, publisher_email=None, publisher_name=None, resource_group_name=None, security=None, sku=None, tags=None):
        """Create a API resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if additional_location and not isinstance(additional_location, dict):
            raise TypeError('Expected property additional_location to be a dict')
        __self__.additional_location = additional_location
        """
        One or more `additional_location` blocks as defined below.
        """
        __props__['additionalLocation'] = additional_location

        if certificates and not isinstance(certificates, list):
            raise TypeError('Expected property certificates to be a list')
        __self__.certificates = certificates
        """
        One or more (up to 10) `certificate` blocks as defined below.
        """
        __props__['certificates'] = certificates

        if hostname_configuration and not isinstance(hostname_configuration, dict):
            raise TypeError('Expected property hostname_configuration to be a dict')
        __self__.hostname_configuration = hostname_configuration
        """
        A `hostname_configuration` block as defined below.
        """
        __props__['hostnameConfiguration'] = hostname_configuration

        if identity and not isinstance(identity, dict):
            raise TypeError('Expected property identity to be a dict')
        __self__.identity = identity
        """
        An `identity` block is documented below.
        """
        __props__['identity'] = identity

        if not location:
            raise TypeError('Missing required property location')
        elif not isinstance(location, basestring):
            raise TypeError('Expected property location to be a basestring')
        __self__.location = location
        """
        The Azure location where the API Management Service exists. Changing this forces a new resource to be created.
        """
        __props__['location'] = location

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The name of the API Management Service. Changing this forces a new resource to be created.
        """
        __props__['name'] = name

        if notification_sender_email and not isinstance(notification_sender_email, basestring):
            raise TypeError('Expected property notification_sender_email to be a basestring')
        __self__.notification_sender_email = notification_sender_email
        """
        Email address from which the notification will be sent.
        """
        __props__['notificationSenderEmail'] = notification_sender_email

        if not publisher_email:
            raise TypeError('Missing required property publisher_email')
        elif not isinstance(publisher_email, basestring):
            raise TypeError('Expected property publisher_email to be a basestring')
        __self__.publisher_email = publisher_email
        """
        The email of publisher/company.
        """
        __props__['publisherEmail'] = publisher_email

        if not publisher_name:
            raise TypeError('Missing required property publisher_name')
        elif not isinstance(publisher_name, basestring):
            raise TypeError('Expected property publisher_name to be a basestring')
        __self__.publisher_name = publisher_name
        """
        The name of publisher/company.
        """
        __props__['publisherName'] = publisher_name

        if not resource_group_name:
            raise TypeError('Missing required property resource_group_name')
        elif not isinstance(resource_group_name, basestring):
            raise TypeError('Expected property resource_group_name to be a basestring')
        __self__.resource_group_name = resource_group_name
        """
        The name of the Resource Group in which the API Management Service should be exist. Changing this forces a new resource to be created.
        """
        __props__['resourceGroupName'] = resource_group_name

        if security and not isinstance(security, dict):
            raise TypeError('Expected property security to be a dict')
        __self__.security = security
        """
        A `security` block as defined below.
        """
        __props__['security'] = security

        if not sku:
            raise TypeError('Missing required property sku')
        elif not isinstance(sku, dict):
            raise TypeError('Expected property sku to be a dict')
        __self__.sku = sku
        """
        A `sku` block as documented below.
        """
        __props__['sku'] = sku

        if tags and not isinstance(tags, dict):
            raise TypeError('Expected property tags to be a dict')
        __self__.tags = tags
        """
        A mapping of tags assigned to the resource.
        """
        __props__['tags'] = tags

        __self__.gateway_regional_url = pulumi.runtime.UNKNOWN
        """
        The URL of the Regional Gateway for the API Management Service in the specified region.
        """
        __self__.gateway_url = pulumi.runtime.UNKNOWN
        """
        The URL of the Gateway for the API Management Service.
        """
        __self__.management_api_url = pulumi.runtime.UNKNOWN
        """
        The URL for the Management API associated with this API Management service.
        """
        __self__.portal_url = pulumi.runtime.UNKNOWN
        """
        The URL for the Publisher Portal associated with this API Management service.
        """
        __self__.scm_url = pulumi.runtime.UNKNOWN
        """
        The URL for the SCM (Source Code Management) Endpoint associated with this API Management service.
        """

        super(API, __self__).__init__(
            'azure:apimanagement/aPI:API',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'additionalLocation' in outs:
            self.additional_location = outs['additionalLocation']
        if 'certificates' in outs:
            self.certificates = outs['certificates']
        if 'gatewayRegionalUrl' in outs:
            self.gateway_regional_url = outs['gatewayRegionalUrl']
        if 'gatewayUrl' in outs:
            self.gateway_url = outs['gatewayUrl']
        if 'hostnameConfiguration' in outs:
            self.hostname_configuration = outs['hostnameConfiguration']
        if 'identity' in outs:
            self.identity = outs['identity']
        if 'location' in outs:
            self.location = outs['location']
        if 'managementApiUrl' in outs:
            self.management_api_url = outs['managementApiUrl']
        if 'name' in outs:
            self.name = outs['name']
        if 'notificationSenderEmail' in outs:
            self.notification_sender_email = outs['notificationSenderEmail']
        if 'portalUrl' in outs:
            self.portal_url = outs['portalUrl']
        if 'publisherEmail' in outs:
            self.publisher_email = outs['publisherEmail']
        if 'publisherName' in outs:
            self.publisher_name = outs['publisherName']
        if 'resourceGroupName' in outs:
            self.resource_group_name = outs['resourceGroupName']
        if 'scmUrl' in outs:
            self.scm_url = outs['scmUrl']
        if 'security' in outs:
            self.security = outs['security']
        if 'sku' in outs:
            self.sku = outs['sku']
        if 'tags' in outs:
            self.tags = outs['tags']
