# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class Backend(pulumi.CustomResource):
    api_management_name: pulumi.Output[str]
    """
    The Name of the API Management Service where this backend should be created. Changing this forces a new resource to be created.
    """
    credentials: pulumi.Output[dict]
    """
    A `credentials` block as documented below.
    """
    description: pulumi.Output[str]
    """
    The description of the backend.
    """
    name: pulumi.Output[str]
    """
    The name of the API Management backend. Changing this forces a new resource to be created.
    """
    protocol: pulumi.Output[str]
    """
    The protocol used by the backend host. Possible values are `http` or `soap`.
    """
    proxy: pulumi.Output[dict]
    """
    A `proxy` block as documented below.
    """
    resource_group_name: pulumi.Output[str]
    """
    The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
    """
    resource_id: pulumi.Output[str]
    """
    The management URI of the backend host in an external system. This URI can be the ARM Resource ID of Logic Apps, Function Apps or API Apps, or the management endpoint of a Service Fabric cluster.
    """
    service_fabric_cluster: pulumi.Output[dict]
    """
    A `service_fabric_cluster` block as documented below.
    """
    title: pulumi.Output[str]
    """
    The title of the backend.
    """
    tls: pulumi.Output[dict]
    """
    A `tls` block as documented below.
    """
    url: pulumi.Output[str]
    """
    The URL of the backend host.
    """
    def __init__(__self__, resource_name, opts=None, api_management_name=None, credentials=None, description=None, name=None, protocol=None, proxy=None, resource_group_name=None, resource_id=None, service_fabric_cluster=None, title=None, tls=None, url=None, __name__=None, __opts__=None):
        """
        Manages a backend within an API Management Service.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_management_name: The Name of the API Management Service where this backend should be created. Changing this forces a new resource to be created.
        :param pulumi.Input[dict] credentials: A `credentials` block as documented below.
        :param pulumi.Input[str] description: The description of the backend.
        :param pulumi.Input[str] name: The name of the API Management backend. Changing this forces a new resource to be created.
        :param pulumi.Input[str] protocol: The protocol used by the backend host. Possible values are `http` or `soap`.
        :param pulumi.Input[dict] proxy: A `proxy` block as documented below.
        :param pulumi.Input[str] resource_group_name: The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
        :param pulumi.Input[str] resource_id: The management URI of the backend host in an external system. This URI can be the ARM Resource ID of Logic Apps, Function Apps or API Apps, or the management endpoint of a Service Fabric cluster.
        :param pulumi.Input[dict] service_fabric_cluster: A `service_fabric_cluster` block as documented below.
        :param pulumi.Input[str] title: The title of the backend.
        :param pulumi.Input[dict] tls: A `tls` block as documented below.
        :param pulumi.Input[str] url: The URL of the backend host.

        > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/api_management_backend.html.markdown.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if api_management_name is None:
            raise TypeError("Missing required property 'api_management_name'")
        __props__['api_management_name'] = api_management_name

        __props__['credentials'] = credentials

        __props__['description'] = description

        __props__['name'] = name

        if protocol is None:
            raise TypeError("Missing required property 'protocol'")
        __props__['protocol'] = protocol

        __props__['proxy'] = proxy

        if resource_group_name is None:
            raise TypeError("Missing required property 'resource_group_name'")
        __props__['resource_group_name'] = resource_group_name

        __props__['resource_id'] = resource_id

        __props__['service_fabric_cluster'] = service_fabric_cluster

        __props__['title'] = title

        __props__['tls'] = tls

        if url is None:
            raise TypeError("Missing required property 'url'")
        __props__['url'] = url

        super(Backend, __self__).__init__(
            'azure:apimanagement/backend:Backend',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

