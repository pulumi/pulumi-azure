# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ApiOperationTagArgs', 'ApiOperationTag']

@pulumi.input_type
class ApiOperationTagArgs:
    def __init__(__self__, *,
                 api_operation_id: pulumi.Input[str],
                 display_name: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ApiOperationTag resource.
        :param pulumi.Input[str] api_operation_id: The ID of the API Management API Operation. Changing this forces a new API Management API Operation Tag to be created.
        :param pulumi.Input[str] display_name: The display name of the API Management API Operation Tag.
        :param pulumi.Input[str] name: The name which should be used for this API Management API Operation Tag. Changing this forces a new API Management API Operation Tag to be created. The name must be unique in the API Management Service.
        """
        ApiOperationTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            api_operation_id=api_operation_id,
            display_name=display_name,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             api_operation_id: pulumi.Input[str],
             display_name: pulumi.Input[str],
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("api_operation_id", api_operation_id)
        _setter("display_name", display_name)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="apiOperationId")
    def api_operation_id(self) -> pulumi.Input[str]:
        """
        The ID of the API Management API Operation. Changing this forces a new API Management API Operation Tag to be created.
        """
        return pulumi.get(self, "api_operation_id")

    @api_operation_id.setter
    def api_operation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_operation_id", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        The display name of the API Management API Operation Tag.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name which should be used for this API Management API Operation Tag. Changing this forces a new API Management API Operation Tag to be created. The name must be unique in the API Management Service.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _ApiOperationTagState:
    def __init__(__self__, *,
                 api_operation_id: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ApiOperationTag resources.
        :param pulumi.Input[str] api_operation_id: The ID of the API Management API Operation. Changing this forces a new API Management API Operation Tag to be created.
        :param pulumi.Input[str] display_name: The display name of the API Management API Operation Tag.
        :param pulumi.Input[str] name: The name which should be used for this API Management API Operation Tag. Changing this forces a new API Management API Operation Tag to be created. The name must be unique in the API Management Service.
        """
        _ApiOperationTagState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            api_operation_id=api_operation_id,
            display_name=display_name,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             api_operation_id: Optional[pulumi.Input[str]] = None,
             display_name: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if api_operation_id is not None:
            _setter("api_operation_id", api_operation_id)
        if display_name is not None:
            _setter("display_name", display_name)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="apiOperationId")
    def api_operation_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the API Management API Operation. Changing this forces a new API Management API Operation Tag to be created.
        """
        return pulumi.get(self, "api_operation_id")

    @api_operation_id.setter
    def api_operation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_operation_id", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the API Management API Operation Tag.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name which should be used for this API Management API Operation Tag. Changing this forces a new API Management API Operation Tag to be created. The name must be unique in the API Management Service.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class ApiOperationTag(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_operation_id: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a API Management API Operation Tag.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_api = azure.apimanagement.get_api(name="search-api",
            api_management_name="search-api-management",
            resource_group_name="search-service",
            revision="2")
        example_api_operation = azure.apimanagement.ApiOperation("exampleApiOperation",
            operation_id="user-delete",
            api_name=example_api.name,
            api_management_name=example_api.api_management_name,
            resource_group_name=example_api.resource_group_name,
            display_name="Delete User Operation",
            method="DELETE",
            url_template="/users/{id}/delete",
            description="This can only be done by the logged in user.",
            responses=[azure.apimanagement.ApiOperationResponseArgs(
                status_code=200,
            )])
        example_api_operation_tag = azure.apimanagement.ApiOperationTag("exampleApiOperationTag",
            api_operation_id=example_api_operation.id,
            display_name="example-Tag")
        ```

        ## Import

        API Management API Operation Tags can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:apimanagement/apiOperationTag:ApiOperationTag example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ApiManagement/service/service1/apis/api1/operations/operation1/tags/tag1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_operation_id: The ID of the API Management API Operation. Changing this forces a new API Management API Operation Tag to be created.
        :param pulumi.Input[str] display_name: The display name of the API Management API Operation Tag.
        :param pulumi.Input[str] name: The name which should be used for this API Management API Operation Tag. Changing this forces a new API Management API Operation Tag to be created. The name must be unique in the API Management Service.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApiOperationTagArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a API Management API Operation Tag.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_api = azure.apimanagement.get_api(name="search-api",
            api_management_name="search-api-management",
            resource_group_name="search-service",
            revision="2")
        example_api_operation = azure.apimanagement.ApiOperation("exampleApiOperation",
            operation_id="user-delete",
            api_name=example_api.name,
            api_management_name=example_api.api_management_name,
            resource_group_name=example_api.resource_group_name,
            display_name="Delete User Operation",
            method="DELETE",
            url_template="/users/{id}/delete",
            description="This can only be done by the logged in user.",
            responses=[azure.apimanagement.ApiOperationResponseArgs(
                status_code=200,
            )])
        example_api_operation_tag = azure.apimanagement.ApiOperationTag("exampleApiOperationTag",
            api_operation_id=example_api_operation.id,
            display_name="example-Tag")
        ```

        ## Import

        API Management API Operation Tags can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:apimanagement/apiOperationTag:ApiOperationTag example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ApiManagement/service/service1/apis/api1/operations/operation1/tags/tag1
        ```

        :param str resource_name: The name of the resource.
        :param ApiOperationTagArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApiOperationTagArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            ApiOperationTagArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_operation_id: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApiOperationTagArgs.__new__(ApiOperationTagArgs)

            if api_operation_id is None and not opts.urn:
                raise TypeError("Missing required property 'api_operation_id'")
            __props__.__dict__["api_operation_id"] = api_operation_id
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["name"] = name
        super(ApiOperationTag, __self__).__init__(
            'azure:apimanagement/apiOperationTag:ApiOperationTag',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_operation_id: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'ApiOperationTag':
        """
        Get an existing ApiOperationTag resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_operation_id: The ID of the API Management API Operation. Changing this forces a new API Management API Operation Tag to be created.
        :param pulumi.Input[str] display_name: The display name of the API Management API Operation Tag.
        :param pulumi.Input[str] name: The name which should be used for this API Management API Operation Tag. Changing this forces a new API Management API Operation Tag to be created. The name must be unique in the API Management Service.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApiOperationTagState.__new__(_ApiOperationTagState)

        __props__.__dict__["api_operation_id"] = api_operation_id
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["name"] = name
        return ApiOperationTag(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="apiOperationId")
    def api_operation_id(self) -> pulumi.Output[str]:
        """
        The ID of the API Management API Operation. Changing this forces a new API Management API Operation Tag to be created.
        """
        return pulumi.get(self, "api_operation_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        The display name of the API Management API Operation Tag.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name which should be used for this API Management API Operation Tag. Changing this forces a new API Management API Operation Tag to be created. The name must be unique in the API Management Service.
        """
        return pulumi.get(self, "name")

