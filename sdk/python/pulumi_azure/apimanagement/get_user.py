# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class GetUserResult:
    """
    A collection of values returned by getUser.
    """
    def __init__(__self__, email=None, first_name=None, last_name=None, note=None, state=None, id=None):
        if email and not isinstance(email, str):
            raise TypeError('Expected argument email to be a str')
        __self__.email = email
        """
        The Email Address used for this User.
        """
        if first_name and not isinstance(first_name, str):
            raise TypeError('Expected argument first_name to be a str')
        __self__.first_name = first_name
        """
        The First Name for the User.
        """
        if last_name and not isinstance(last_name, str):
            raise TypeError('Expected argument last_name to be a str')
        __self__.last_name = last_name
        """
        The Last Name for the User.
        """
        if note and not isinstance(note, str):
            raise TypeError('Expected argument note to be a str')
        __self__.note = note
        """
        Any notes about this User.
        """
        if state and not isinstance(state, str):
            raise TypeError('Expected argument state to be a str')
        __self__.state = state
        """
        The current state of this User, for example `active`, `blocked` or `pending`.
        """
        if id and not isinstance(id, str):
            raise TypeError('Expected argument id to be a str')
        __self__.id = id
        """
        id is the provider-assigned unique ID for this managed resource.
        """

async def get_user(api_management_name=None,resource_group_name=None,user_id=None,opts=None):
    """
    Use this data source to access information about an existing API Management User.
    """
    __args__ = dict()

    __args__['apiManagementName'] = api_management_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['userId'] = user_id
    __ret__ = await pulumi.runtime.invoke('azure:apimanagement/getUser:getUser', __args__, opts=opts)

    return GetUserResult(
        email=__ret__.get('email'),
        first_name=__ret__.get('firstName'),
        last_name=__ret__.get('lastName'),
        note=__ret__.get('note'),
        state=__ret__.get('state'),
        id=__ret__.get('id'))
