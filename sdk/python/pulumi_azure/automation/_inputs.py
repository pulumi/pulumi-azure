# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AccountEncryptionArgs',
    'AccountIdentityArgs',
    'AccountPrivateEndpointConnectionArgs',
    'ConnectionTypeFieldArgs',
    'ModuleModuleLinkArgs',
    'ModuleModuleLinkHashArgs',
    'RunBookDraftArgs',
    'RunBookDraftContentLinkArgs',
    'RunBookDraftContentLinkHashArgs',
    'RunBookDraftParameterArgs',
    'RunBookJobScheduleArgs',
    'RunBookPublishContentLinkArgs',
    'RunBookPublishContentLinkHashArgs',
    'ScheduleMonthlyOccurrenceArgs',
    'SoftwareUpdateConfigurationLinuxArgs',
    'SoftwareUpdateConfigurationPostTaskArgs',
    'SoftwareUpdateConfigurationPreTaskArgs',
    'SoftwareUpdateConfigurationScheduleArgs',
    'SoftwareUpdateConfigurationScheduleMonthlyOccurrenceArgs',
    'SoftwareUpdateConfigurationTargetArgs',
    'SoftwareUpdateConfigurationTargetAzureQueryArgs',
    'SoftwareUpdateConfigurationTargetAzureQueryTagArgs',
    'SoftwareUpdateConfigurationTargetNonAzureQueryArgs',
    'SoftwareUpdateConfigurationWindowsArgs',
    'SourceControlSecurityArgs',
]

@pulumi.input_type
class AccountEncryptionArgs:
    def __init__(__self__, *,
                 key_vault_key_id: pulumi.Input[str],
                 key_source: Optional[pulumi.Input[str]] = None,
                 user_assigned_identity_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key_vault_key_id: The ID of the Key Vault Key which should be used to Encrypt the data in this Automation Account.
        :param pulumi.Input[str] user_assigned_identity_id: The User Assigned Managed Identity ID to be used for accessing the Customer Managed Key for encryption.
        """
        AccountEncryptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_vault_key_id=key_vault_key_id,
            key_source=key_source,
            user_assigned_identity_id=user_assigned_identity_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_vault_key_id: pulumi.Input[str],
             key_source: Optional[pulumi.Input[str]] = None,
             user_assigned_identity_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key_vault_key_id", key_vault_key_id)
        if key_source is not None:
            warnings.warn("""This field is now ignored and will be removed in the next major version of the Azure Provider, the `encryption` block can be omitted to disable encryption""", DeprecationWarning)
            pulumi.log.warn("""key_source is deprecated: This field is now ignored and will be removed in the next major version of the Azure Provider, the `encryption` block can be omitted to disable encryption""")
        if key_source is not None:
            _setter("key_source", key_source)
        if user_assigned_identity_id is not None:
            _setter("user_assigned_identity_id", user_assigned_identity_id)

    @property
    @pulumi.getter(name="keyVaultKeyId")
    def key_vault_key_id(self) -> pulumi.Input[str]:
        """
        The ID of the Key Vault Key which should be used to Encrypt the data in this Automation Account.
        """
        return pulumi.get(self, "key_vault_key_id")

    @key_vault_key_id.setter
    def key_vault_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_vault_key_id", value)

    @property
    @pulumi.getter(name="keySource")
    def key_source(self) -> Optional[pulumi.Input[str]]:
        warnings.warn("""This field is now ignored and will be removed in the next major version of the Azure Provider, the `encryption` block can be omitted to disable encryption""", DeprecationWarning)
        pulumi.log.warn("""key_source is deprecated: This field is now ignored and will be removed in the next major version of the Azure Provider, the `encryption` block can be omitted to disable encryption""")

        return pulumi.get(self, "key_source")

    @key_source.setter
    def key_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_source", value)

    @property
    @pulumi.getter(name="userAssignedIdentityId")
    def user_assigned_identity_id(self) -> Optional[pulumi.Input[str]]:
        """
        The User Assigned Managed Identity ID to be used for accessing the Customer Managed Key for encryption.
        """
        return pulumi.get(self, "user_assigned_identity_id")

    @user_assigned_identity_id.setter
    def user_assigned_identity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_assigned_identity_id", value)


@pulumi.input_type
class AccountIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 identity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 principal_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: The type of identity used for this Automation Account. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] identity_ids: The ID of the User Assigned Identity which should be assigned to this Automation Account.
               
               > **Note:** `identity_ids` is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
        :param pulumi.Input[str] principal_id: The Principal ID associated with this Managed Service Identity.
        :param pulumi.Input[str] tenant_id: The Tenant ID associated with this Managed Service Identity.
        """
        AccountIdentityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            identity_ids=identity_ids,
            principal_id=principal_id,
            tenant_id=tenant_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input[str],
             identity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             principal_id: Optional[pulumi.Input[str]] = None,
             tenant_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if identity_ids is not None:
            _setter("identity_ids", identity_ids)
        if principal_id is not None:
            _setter("principal_id", principal_id)
        if tenant_id is not None:
            _setter("tenant_id", tenant_id)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of identity used for this Automation Account. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The ID of the User Assigned Identity which should be assigned to this Automation Account.

        > **Note:** `identity_ids` is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
        """
        return pulumi.get(self, "identity_ids")

    @identity_ids.setter
    def identity_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "identity_ids", value)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Principal ID associated with this Managed Service Identity.
        """
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Tenant ID associated with this Managed Service Identity.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class AccountPrivateEndpointConnectionArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The ID of the Automation Account.
        :param pulumi.Input[str] name: Specifies the name of the Automation Account. Changing this forces a new resource to be created.
        """
        AccountPrivateEndpointConnectionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Automation Account.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of the Automation Account. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ConnectionTypeFieldArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 is_encrypted: Optional[pulumi.Input[bool]] = None,
                 is_optional: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] name: The name which should be used for this connection field definition.
        :param pulumi.Input[str] type: The type of the connection field definition.
        :param pulumi.Input[bool] is_encrypted: Whether to set the isEncrypted flag of the connection field definition.
        :param pulumi.Input[bool] is_optional: Whether to set the isOptional flag of the connection field definition.
        """
        ConnectionTypeFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            type=type,
            is_encrypted=is_encrypted,
            is_optional=is_optional,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             type: pulumi.Input[str],
             is_encrypted: Optional[pulumi.Input[bool]] = None,
             is_optional: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("type", type)
        if is_encrypted is not None:
            _setter("is_encrypted", is_encrypted)
        if is_optional is not None:
            _setter("is_optional", is_optional)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name which should be used for this connection field definition.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of the connection field definition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="isEncrypted")
    def is_encrypted(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to set the isEncrypted flag of the connection field definition.
        """
        return pulumi.get(self, "is_encrypted")

    @is_encrypted.setter
    def is_encrypted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_encrypted", value)

    @property
    @pulumi.getter(name="isOptional")
    def is_optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to set the isOptional flag of the connection field definition.
        """
        return pulumi.get(self, "is_optional")

    @is_optional.setter
    def is_optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_optional", value)


@pulumi.input_type
class ModuleModuleLinkArgs:
    def __init__(__self__, *,
                 uri: pulumi.Input[str],
                 hash: Optional[pulumi.Input['ModuleModuleLinkHashArgs']] = None):
        """
        :param pulumi.Input[str] uri: The URI of the module content (zip or nupkg).
        :param pulumi.Input['ModuleModuleLinkHashArgs'] hash: A `hash` block as defined below.
        """
        ModuleModuleLinkArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            uri=uri,
            hash=hash,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             uri: pulumi.Input[str],
             hash: Optional[pulumi.Input['ModuleModuleLinkHashArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("uri", uri)
        if hash is not None:
            _setter("hash", hash)

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Input[str]:
        """
        The URI of the module content (zip or nupkg).
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter
    def hash(self) -> Optional[pulumi.Input['ModuleModuleLinkHashArgs']]:
        """
        A `hash` block as defined below.
        """
        return pulumi.get(self, "hash")

    @hash.setter
    def hash(self, value: Optional[pulumi.Input['ModuleModuleLinkHashArgs']]):
        pulumi.set(self, "hash", value)


@pulumi.input_type
class ModuleModuleLinkHashArgs:
    def __init__(__self__, *,
                 algorithm: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] algorithm: Specifies the algorithm used for the hash content.
        :param pulumi.Input[str] value: The hash value of the content.
        """
        ModuleModuleLinkHashArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            algorithm=algorithm,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             algorithm: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("algorithm", algorithm)
        _setter("value", value)

    @property
    @pulumi.getter
    def algorithm(self) -> pulumi.Input[str]:
        """
        Specifies the algorithm used for the hash content.
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: pulumi.Input[str]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The hash value of the content.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RunBookDraftArgs:
    def __init__(__self__, *,
                 content_link: Optional[pulumi.Input['RunBookDraftContentLinkArgs']] = None,
                 creation_time: Optional[pulumi.Input[str]] = None,
                 edit_mode_enabled: Optional[pulumi.Input[bool]] = None,
                 last_modified_time: Optional[pulumi.Input[str]] = None,
                 output_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['RunBookDraftParameterArgs']]]] = None):
        """
        :param pulumi.Input['RunBookDraftContentLinkArgs'] content_link: A `publish_content_link` block as defined above.
        :param pulumi.Input[bool] edit_mode_enabled: Whether the draft in edit mode.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] output_types: Specifies the output types of the runbook.
        :param pulumi.Input[Sequence[pulumi.Input['RunBookDraftParameterArgs']]] parameters: A list of `parameters` block as defined below.
        """
        RunBookDraftArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content_link=content_link,
            creation_time=creation_time,
            edit_mode_enabled=edit_mode_enabled,
            last_modified_time=last_modified_time,
            output_types=output_types,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content_link: Optional[pulumi.Input['RunBookDraftContentLinkArgs']] = None,
             creation_time: Optional[pulumi.Input[str]] = None,
             edit_mode_enabled: Optional[pulumi.Input[bool]] = None,
             last_modified_time: Optional[pulumi.Input[str]] = None,
             output_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             parameters: Optional[pulumi.Input[Sequence[pulumi.Input['RunBookDraftParameterArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if content_link is not None:
            _setter("content_link", content_link)
        if creation_time is not None:
            _setter("creation_time", creation_time)
        if edit_mode_enabled is not None:
            _setter("edit_mode_enabled", edit_mode_enabled)
        if last_modified_time is not None:
            _setter("last_modified_time", last_modified_time)
        if output_types is not None:
            _setter("output_types", output_types)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter(name="contentLink")
    def content_link(self) -> Optional[pulumi.Input['RunBookDraftContentLinkArgs']]:
        """
        A `publish_content_link` block as defined above.
        """
        return pulumi.get(self, "content_link")

    @content_link.setter
    def content_link(self, value: Optional[pulumi.Input['RunBookDraftContentLinkArgs']]):
        pulumi.set(self, "content_link", value)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "creation_time")

    @creation_time.setter
    def creation_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creation_time", value)

    @property
    @pulumi.getter(name="editModeEnabled")
    def edit_mode_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the draft in edit mode.
        """
        return pulumi.get(self, "edit_mode_enabled")

    @edit_mode_enabled.setter
    def edit_mode_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "edit_mode_enabled", value)

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_modified_time")

    @last_modified_time.setter
    def last_modified_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_modified_time", value)

    @property
    @pulumi.getter(name="outputTypes")
    def output_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the output types of the runbook.
        """
        return pulumi.get(self, "output_types")

    @output_types.setter
    def output_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "output_types", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunBookDraftParameterArgs']]]]:
        """
        A list of `parameters` block as defined below.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunBookDraftParameterArgs']]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class RunBookDraftContentLinkArgs:
    def __init__(__self__, *,
                 uri: pulumi.Input[str],
                 hash: Optional[pulumi.Input['RunBookDraftContentLinkHashArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] uri: The URI of the runbook content.
        :param pulumi.Input['RunBookDraftContentLinkHashArgs'] hash: A `hash` block as defined below.
        :param pulumi.Input[str] version: Specifies the version of the content
        """
        RunBookDraftContentLinkArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            uri=uri,
            hash=hash,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             uri: pulumi.Input[str],
             hash: Optional[pulumi.Input['RunBookDraftContentLinkHashArgs']] = None,
             version: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("uri", uri)
        if hash is not None:
            _setter("hash", hash)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Input[str]:
        """
        The URI of the runbook content.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter
    def hash(self) -> Optional[pulumi.Input['RunBookDraftContentLinkHashArgs']]:
        """
        A `hash` block as defined below.
        """
        return pulumi.get(self, "hash")

    @hash.setter
    def hash(self, value: Optional[pulumi.Input['RunBookDraftContentLinkHashArgs']]):
        pulumi.set(self, "hash", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the version of the content
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class RunBookDraftContentLinkHashArgs:
    def __init__(__self__, *,
                 algorithm: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] algorithm: Specifies the hash algorithm used to hash the content.
        :param pulumi.Input[str] value: Specifies the expected hash value of the content.
        """
        RunBookDraftContentLinkHashArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            algorithm=algorithm,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             algorithm: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("algorithm", algorithm)
        _setter("value", value)

    @property
    @pulumi.getter
    def algorithm(self) -> pulumi.Input[str]:
        """
        Specifies the hash algorithm used to hash the content.
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: pulumi.Input[str]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Specifies the expected hash value of the content.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RunBookDraftParameterArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 type: pulumi.Input[str],
                 default_value: Optional[pulumi.Input[str]] = None,
                 mandatory: Optional[pulumi.Input[bool]] = None,
                 position: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] key: The name of the parameter.
        :param pulumi.Input[str] type: Specifies the type of this parameter.
        :param pulumi.Input[str] default_value: Specifies the default value of the parameter.
        :param pulumi.Input[bool] mandatory: Whether this parameter is mandatory.
        :param pulumi.Input[int] position: Specifies the position of the parameter.
        """
        RunBookDraftParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            type=type,
            default_value=default_value,
            mandatory=mandatory,
            position=position,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             type: pulumi.Input[str],
             default_value: Optional[pulumi.Input[str]] = None,
             mandatory: Optional[pulumi.Input[bool]] = None,
             position: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("type", type)
        if default_value is not None:
            _setter("default_value", default_value)
        if mandatory is not None:
            _setter("mandatory", mandatory)
        if position is not None:
            _setter("position", position)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The name of the parameter.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Specifies the type of this parameter.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the default value of the parameter.
        """
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter
    def mandatory(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this parameter is mandatory.
        """
        return pulumi.get(self, "mandatory")

    @mandatory.setter
    def mandatory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mandatory", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the position of the parameter.
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "position", value)


@pulumi.input_type
class RunBookJobScheduleArgs:
    def __init__(__self__, *,
                 schedule_name: pulumi.Input[str],
                 job_schedule_id: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 run_on: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A list of `parameters` block as defined below.
        """
        RunBookJobScheduleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            schedule_name=schedule_name,
            job_schedule_id=job_schedule_id,
            parameters=parameters,
            run_on=run_on,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             schedule_name: pulumi.Input[str],
             job_schedule_id: Optional[pulumi.Input[str]] = None,
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             run_on: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("schedule_name", schedule_name)
        if job_schedule_id is not None:
            _setter("job_schedule_id", job_schedule_id)
        if parameters is not None:
            _setter("parameters", parameters)
        if run_on is not None:
            _setter("run_on", run_on)

    @property
    @pulumi.getter(name="scheduleName")
    def schedule_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "schedule_name")

    @schedule_name.setter
    def schedule_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "schedule_name", value)

    @property
    @pulumi.getter(name="jobScheduleId")
    def job_schedule_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "job_schedule_id")

    @job_schedule_id.setter
    def job_schedule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "job_schedule_id", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of `parameters` block as defined below.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="runOn")
    def run_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "run_on")

    @run_on.setter
    def run_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_on", value)


@pulumi.input_type
class RunBookPublishContentLinkArgs:
    def __init__(__self__, *,
                 uri: pulumi.Input[str],
                 hash: Optional[pulumi.Input['RunBookPublishContentLinkHashArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] uri: The URI of the runbook content.
        :param pulumi.Input['RunBookPublishContentLinkHashArgs'] hash: A `hash` block as defined below.
        :param pulumi.Input[str] version: Specifies the version of the content
        """
        RunBookPublishContentLinkArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            uri=uri,
            hash=hash,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             uri: pulumi.Input[str],
             hash: Optional[pulumi.Input['RunBookPublishContentLinkHashArgs']] = None,
             version: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("uri", uri)
        if hash is not None:
            _setter("hash", hash)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Input[str]:
        """
        The URI of the runbook content.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter
    def hash(self) -> Optional[pulumi.Input['RunBookPublishContentLinkHashArgs']]:
        """
        A `hash` block as defined below.
        """
        return pulumi.get(self, "hash")

    @hash.setter
    def hash(self, value: Optional[pulumi.Input['RunBookPublishContentLinkHashArgs']]):
        pulumi.set(self, "hash", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the version of the content
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class RunBookPublishContentLinkHashArgs:
    def __init__(__self__, *,
                 algorithm: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] algorithm: Specifies the hash algorithm used to hash the content.
        :param pulumi.Input[str] value: Specifies the expected hash value of the content.
        """
        RunBookPublishContentLinkHashArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            algorithm=algorithm,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             algorithm: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("algorithm", algorithm)
        _setter("value", value)

    @property
    @pulumi.getter
    def algorithm(self) -> pulumi.Input[str]:
        """
        Specifies the hash algorithm used to hash the content.
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: pulumi.Input[str]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Specifies the expected hash value of the content.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ScheduleMonthlyOccurrenceArgs:
    def __init__(__self__, *,
                 day: pulumi.Input[str],
                 occurrence: pulumi.Input[int]):
        """
        :param pulumi.Input[str] day: Day of the occurrence. Must be one of `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
        :param pulumi.Input[int] occurrence: Occurrence of the week within the month. Must be between `1` and `5`. `-1` for last week within the month.
        """
        ScheduleMonthlyOccurrenceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            day=day,
            occurrence=occurrence,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             day: pulumi.Input[str],
             occurrence: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("day", day)
        _setter("occurrence", occurrence)

    @property
    @pulumi.getter
    def day(self) -> pulumi.Input[str]:
        """
        Day of the occurrence. Must be one of `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
        """
        return pulumi.get(self, "day")

    @day.setter
    def day(self, value: pulumi.Input[str]):
        pulumi.set(self, "day", value)

    @property
    @pulumi.getter
    def occurrence(self) -> pulumi.Input[int]:
        """
        Occurrence of the week within the month. Must be between `1` and `5`. `-1` for last week within the month.
        """
        return pulumi.get(self, "occurrence")

    @occurrence.setter
    def occurrence(self, value: pulumi.Input[int]):
        pulumi.set(self, "occurrence", value)


@pulumi.input_type
class SoftwareUpdateConfigurationLinuxArgs:
    def __init__(__self__, *,
                 classification_included: Optional[pulumi.Input[str]] = None,
                 classifications_includeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_packages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 included_packages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 reboot: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] classifications_includeds: Specifies the list of update classifications included in the Software Update Configuration. Possible values are `Unclassified`, `Critical`, `Security` and `Other`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_packages: Specifies a list of packages to excluded from the Software Update Configuration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] included_packages: Specifies a list of packages to included from the Software Update Configuration.
        :param pulumi.Input[str] reboot: Specifies the reboot settings after software update, possible values are `IfRequired`, `Never`, `RebootOnly` and `Always`. Defaults to `IfRequired`.
        """
        SoftwareUpdateConfigurationLinuxArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            classification_included=classification_included,
            classifications_includeds=classifications_includeds,
            excluded_packages=excluded_packages,
            included_packages=included_packages,
            reboot=reboot,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             classification_included: Optional[pulumi.Input[str]] = None,
             classifications_includeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             excluded_packages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             included_packages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             reboot: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if classification_included is not None:
            _setter("classification_included", classification_included)
        if classifications_includeds is not None:
            _setter("classifications_includeds", classifications_includeds)
        if excluded_packages is not None:
            _setter("excluded_packages", excluded_packages)
        if included_packages is not None:
            _setter("included_packages", included_packages)
        if reboot is not None:
            _setter("reboot", reboot)

    @property
    @pulumi.getter(name="classificationIncluded")
    def classification_included(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "classification_included")

    @classification_included.setter
    def classification_included(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "classification_included", value)

    @property
    @pulumi.getter(name="classificationsIncludeds")
    def classifications_includeds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the list of update classifications included in the Software Update Configuration. Possible values are `Unclassified`, `Critical`, `Security` and `Other`.
        """
        return pulumi.get(self, "classifications_includeds")

    @classifications_includeds.setter
    def classifications_includeds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "classifications_includeds", value)

    @property
    @pulumi.getter(name="excludedPackages")
    def excluded_packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies a list of packages to excluded from the Software Update Configuration.
        """
        return pulumi.get(self, "excluded_packages")

    @excluded_packages.setter
    def excluded_packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_packages", value)

    @property
    @pulumi.getter(name="includedPackages")
    def included_packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies a list of packages to included from the Software Update Configuration.
        """
        return pulumi.get(self, "included_packages")

    @included_packages.setter
    def included_packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "included_packages", value)

    @property
    @pulumi.getter
    def reboot(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the reboot settings after software update, possible values are `IfRequired`, `Never`, `RebootOnly` and `Always`. Defaults to `IfRequired`.
        """
        return pulumi.get(self, "reboot")

    @reboot.setter
    def reboot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reboot", value)


@pulumi.input_type
class SoftwareUpdateConfigurationPostTaskArgs:
    def __init__(__self__, *,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 source: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: Specifies a map of parameters for the task.
        :param pulumi.Input[str] source: The name of the runbook for the post task.
        """
        SoftwareUpdateConfigurationPostTaskArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameters=parameters,
            source=source,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             source: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if parameters is not None:
            _setter("parameters", parameters)
        if source is not None:
            _setter("source", source)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Specifies a map of parameters for the task.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the runbook for the post task.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)


@pulumi.input_type
class SoftwareUpdateConfigurationPreTaskArgs:
    def __init__(__self__, *,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 source: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: Specifies a map of parameters for the task.
        :param pulumi.Input[str] source: The name of the runbook for the pre task.
        """
        SoftwareUpdateConfigurationPreTaskArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameters=parameters,
            source=source,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             source: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if parameters is not None:
            _setter("parameters", parameters)
        if source is not None:
            _setter("source", source)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Specifies a map of parameters for the task.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the runbook for the pre task.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)


@pulumi.input_type
class SoftwareUpdateConfigurationScheduleArgs:
    def __init__(__self__, *,
                 frequency: pulumi.Input[str],
                 advanced_month_days: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 advanced_week_days: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 creation_time: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 expiry_time: Optional[pulumi.Input[str]] = None,
                 expiry_time_offset_minutes: Optional[pulumi.Input[float]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 last_modified_time: Optional[pulumi.Input[str]] = None,
                 monthly_occurrences: Optional[pulumi.Input[Sequence[pulumi.Input['SoftwareUpdateConfigurationScheduleMonthlyOccurrenceArgs']]]] = None,
                 next_run: Optional[pulumi.Input[str]] = None,
                 next_run_offset_minutes: Optional[pulumi.Input[float]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 start_time_offset_minutes: Optional[pulumi.Input[float]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] frequency: The frequency of the schedule. - can be either `OneTime`, `Day`, `Hour`, `Week`, or `Month`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] advanced_month_days: List of days of the month that the job should execute on. Must be between `1` and `31`. `-1` for last day of the month. Only valid when frequency is `Month`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] advanced_week_days: List of days of the week that the job should execute on. Only valid when frequency is `Week`. Possible values include `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, and `Sunday`.
        :param pulumi.Input[str] description: A description for this Schedule.
        :param pulumi.Input[str] expiry_time: The end time of the schedule.
        :param pulumi.Input[int] interval: The number of `frequency`s between runs. Only valid when frequency is `Day`, `Hour`, `Week`, or `Month`.
        :param pulumi.Input[bool] is_enabled: Whether the schedule is enabled.
        :param pulumi.Input[Sequence[pulumi.Input['SoftwareUpdateConfigurationScheduleMonthlyOccurrenceArgs']]] monthly_occurrences: List of `monthly_occurrence` blocks as defined below to specifies occurrences of days within a month. Only valid when frequency is `Month`. The `monthly_occurrence` block supports fields as defined below.
        :param pulumi.Input[str] start_time: Start time of the schedule. Must be at least five minutes in the future. Defaults to seven minutes in the future from the time the resource is created.
        :param pulumi.Input[str] time_zone: The timezone of the start time. Defaults to `Etc/UTC`. For possible values see: <https://docs.microsoft.com/en-us/rest/api/maps/timezone/gettimezoneenumwindows>
        """
        SoftwareUpdateConfigurationScheduleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            frequency=frequency,
            advanced_month_days=advanced_month_days,
            advanced_week_days=advanced_week_days,
            creation_time=creation_time,
            description=description,
            expiry_time=expiry_time,
            expiry_time_offset_minutes=expiry_time_offset_minutes,
            interval=interval,
            is_enabled=is_enabled,
            last_modified_time=last_modified_time,
            monthly_occurrences=monthly_occurrences,
            next_run=next_run,
            next_run_offset_minutes=next_run_offset_minutes,
            start_time=start_time,
            start_time_offset_minutes=start_time_offset_minutes,
            time_zone=time_zone,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             frequency: pulumi.Input[str],
             advanced_month_days: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             advanced_week_days: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             creation_time: Optional[pulumi.Input[str]] = None,
             description: Optional[pulumi.Input[str]] = None,
             expiry_time: Optional[pulumi.Input[str]] = None,
             expiry_time_offset_minutes: Optional[pulumi.Input[float]] = None,
             interval: Optional[pulumi.Input[int]] = None,
             is_enabled: Optional[pulumi.Input[bool]] = None,
             last_modified_time: Optional[pulumi.Input[str]] = None,
             monthly_occurrences: Optional[pulumi.Input[Sequence[pulumi.Input['SoftwareUpdateConfigurationScheduleMonthlyOccurrenceArgs']]]] = None,
             next_run: Optional[pulumi.Input[str]] = None,
             next_run_offset_minutes: Optional[pulumi.Input[float]] = None,
             start_time: Optional[pulumi.Input[str]] = None,
             start_time_offset_minutes: Optional[pulumi.Input[float]] = None,
             time_zone: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("frequency", frequency)
        if advanced_month_days is not None:
            _setter("advanced_month_days", advanced_month_days)
        if advanced_week_days is not None:
            _setter("advanced_week_days", advanced_week_days)
        if creation_time is not None:
            _setter("creation_time", creation_time)
        if description is not None:
            _setter("description", description)
        if expiry_time is not None:
            _setter("expiry_time", expiry_time)
        if expiry_time_offset_minutes is not None:
            _setter("expiry_time_offset_minutes", expiry_time_offset_minutes)
        if interval is not None:
            _setter("interval", interval)
        if is_enabled is not None:
            _setter("is_enabled", is_enabled)
        if last_modified_time is not None:
            _setter("last_modified_time", last_modified_time)
        if monthly_occurrences is not None:
            _setter("monthly_occurrences", monthly_occurrences)
        if next_run is not None:
            _setter("next_run", next_run)
        if next_run_offset_minutes is not None:
            _setter("next_run_offset_minutes", next_run_offset_minutes)
        if start_time is not None:
            _setter("start_time", start_time)
        if start_time_offset_minutes is not None:
            _setter("start_time_offset_minutes", start_time_offset_minutes)
        if time_zone is not None:
            _setter("time_zone", time_zone)

    @property
    @pulumi.getter
    def frequency(self) -> pulumi.Input[str]:
        """
        The frequency of the schedule. - can be either `OneTime`, `Day`, `Hour`, `Week`, or `Month`.
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: pulumi.Input[str]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter(name="advancedMonthDays")
    def advanced_month_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of days of the month that the job should execute on. Must be between `1` and `31`. `-1` for last day of the month. Only valid when frequency is `Month`.
        """
        return pulumi.get(self, "advanced_month_days")

    @advanced_month_days.setter
    def advanced_month_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "advanced_month_days", value)

    @property
    @pulumi.getter(name="advancedWeekDays")
    def advanced_week_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of days of the week that the job should execute on. Only valid when frequency is `Week`. Possible values include `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, and `Sunday`.
        """
        return pulumi.get(self, "advanced_week_days")

    @advanced_week_days.setter
    def advanced_week_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "advanced_week_days", value)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "creation_time")

    @creation_time.setter
    def creation_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creation_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description for this Schedule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="expiryTime")
    def expiry_time(self) -> Optional[pulumi.Input[str]]:
        """
        The end time of the schedule.
        """
        return pulumi.get(self, "expiry_time")

    @expiry_time.setter
    def expiry_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiry_time", value)

    @property
    @pulumi.getter(name="expiryTimeOffsetMinutes")
    def expiry_time_offset_minutes(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "expiry_time_offset_minutes")

    @expiry_time_offset_minutes.setter
    def expiry_time_offset_minutes(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "expiry_time_offset_minutes", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        The number of `frequency`s between runs. Only valid when frequency is `Day`, `Hour`, `Week`, or `Month`.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the schedule is enabled.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_modified_time")

    @last_modified_time.setter
    def last_modified_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_modified_time", value)

    @property
    @pulumi.getter(name="monthlyOccurrences")
    def monthly_occurrences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SoftwareUpdateConfigurationScheduleMonthlyOccurrenceArgs']]]]:
        """
        List of `monthly_occurrence` blocks as defined below to specifies occurrences of days within a month. Only valid when frequency is `Month`. The `monthly_occurrence` block supports fields as defined below.
        """
        return pulumi.get(self, "monthly_occurrences")

    @monthly_occurrences.setter
    def monthly_occurrences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SoftwareUpdateConfigurationScheduleMonthlyOccurrenceArgs']]]]):
        pulumi.set(self, "monthly_occurrences", value)

    @property
    @pulumi.getter(name="nextRun")
    def next_run(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_run")

    @next_run.setter
    def next_run(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_run", value)

    @property
    @pulumi.getter(name="nextRunOffsetMinutes")
    def next_run_offset_minutes(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "next_run_offset_minutes")

    @next_run_offset_minutes.setter
    def next_run_offset_minutes(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "next_run_offset_minutes", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Start time of the schedule. Must be at least five minutes in the future. Defaults to seven minutes in the future from the time the resource is created.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="startTimeOffsetMinutes")
    def start_time_offset_minutes(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_time_offset_minutes")

    @start_time_offset_minutes.setter
    def start_time_offset_minutes(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_time_offset_minutes", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The timezone of the start time. Defaults to `Etc/UTC`. For possible values see: <https://docs.microsoft.com/en-us/rest/api/maps/timezone/gettimezoneenumwindows>
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class SoftwareUpdateConfigurationScheduleMonthlyOccurrenceArgs:
    def __init__(__self__, *,
                 day: pulumi.Input[str],
                 occurrence: pulumi.Input[int]):
        """
        :param pulumi.Input[str] day: Day of the occurrence. Must be one of `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
        :param pulumi.Input[int] occurrence: Occurrence of the week within the month. Must be between `1` and `5`. `-1` for last week within the month.
        """
        SoftwareUpdateConfigurationScheduleMonthlyOccurrenceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            day=day,
            occurrence=occurrence,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             day: pulumi.Input[str],
             occurrence: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("day", day)
        _setter("occurrence", occurrence)

    @property
    @pulumi.getter
    def day(self) -> pulumi.Input[str]:
        """
        Day of the occurrence. Must be one of `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
        """
        return pulumi.get(self, "day")

    @day.setter
    def day(self, value: pulumi.Input[str]):
        pulumi.set(self, "day", value)

    @property
    @pulumi.getter
    def occurrence(self) -> pulumi.Input[int]:
        """
        Occurrence of the week within the month. Must be between `1` and `5`. `-1` for last week within the month.
        """
        return pulumi.get(self, "occurrence")

    @occurrence.setter
    def occurrence(self, value: pulumi.Input[int]):
        pulumi.set(self, "occurrence", value)


@pulumi.input_type
class SoftwareUpdateConfigurationTargetArgs:
    def __init__(__self__, *,
                 azure_queries: Optional[pulumi.Input[Sequence[pulumi.Input['SoftwareUpdateConfigurationTargetAzureQueryArgs']]]] = None,
                 non_azure_queries: Optional[pulumi.Input[Sequence[pulumi.Input['SoftwareUpdateConfigurationTargetNonAzureQueryArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SoftwareUpdateConfigurationTargetAzureQueryArgs']]] azure_queries: One or more `azure_query` blocks as defined above.
        :param pulumi.Input[Sequence[pulumi.Input['SoftwareUpdateConfigurationTargetNonAzureQueryArgs']]] non_azure_queries: One or more `non_azure_query` blocks as defined above.
        """
        SoftwareUpdateConfigurationTargetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            azure_queries=azure_queries,
            non_azure_queries=non_azure_queries,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             azure_queries: Optional[pulumi.Input[Sequence[pulumi.Input['SoftwareUpdateConfigurationTargetAzureQueryArgs']]]] = None,
             non_azure_queries: Optional[pulumi.Input[Sequence[pulumi.Input['SoftwareUpdateConfigurationTargetNonAzureQueryArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if azure_queries is not None:
            _setter("azure_queries", azure_queries)
        if non_azure_queries is not None:
            _setter("non_azure_queries", non_azure_queries)

    @property
    @pulumi.getter(name="azureQueries")
    def azure_queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SoftwareUpdateConfigurationTargetAzureQueryArgs']]]]:
        """
        One or more `azure_query` blocks as defined above.
        """
        return pulumi.get(self, "azure_queries")

    @azure_queries.setter
    def azure_queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SoftwareUpdateConfigurationTargetAzureQueryArgs']]]]):
        pulumi.set(self, "azure_queries", value)

    @property
    @pulumi.getter(name="nonAzureQueries")
    def non_azure_queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SoftwareUpdateConfigurationTargetNonAzureQueryArgs']]]]:
        """
        One or more `non_azure_query` blocks as defined above.
        """
        return pulumi.get(self, "non_azure_queries")

    @non_azure_queries.setter
    def non_azure_queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SoftwareUpdateConfigurationTargetNonAzureQueryArgs']]]]):
        pulumi.set(self, "non_azure_queries", value)


@pulumi.input_type
class SoftwareUpdateConfigurationTargetAzureQueryArgs:
    def __init__(__self__, *,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tag_filter: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['SoftwareUpdateConfigurationTargetAzureQueryTagArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] locations: Specifies a list of locations to scope the query to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: Specifies a list of Subscription or Resource Group ARM Ids to query.
        :param pulumi.Input[str] tag_filter: Specifies how the specified tags to filter VMs. Possible values are `Any` and `All`.
        :param pulumi.Input[Sequence[pulumi.Input['SoftwareUpdateConfigurationTargetAzureQueryTagArgs']]] tags: A mapping of tags used for query filter as defined below.
        """
        SoftwareUpdateConfigurationTargetAzureQueryArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locations=locations,
            scopes=scopes,
            tag_filter=tag_filter,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             tag_filter: Optional[pulumi.Input[str]] = None,
             tags: Optional[pulumi.Input[Sequence[pulumi.Input['SoftwareUpdateConfigurationTargetAzureQueryTagArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if locations is not None:
            _setter("locations", locations)
        if scopes is not None:
            _setter("scopes", scopes)
        if tag_filter is not None:
            _setter("tag_filter", tag_filter)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies a list of locations to scope the query to.
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies a list of Subscription or Resource Group ARM Ids to query.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="tagFilter")
    def tag_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies how the specified tags to filter VMs. Possible values are `Any` and `All`.
        """
        return pulumi.get(self, "tag_filter")

    @tag_filter.setter
    def tag_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_filter", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SoftwareUpdateConfigurationTargetAzureQueryTagArgs']]]]:
        """
        A mapping of tags used for query filter as defined below.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SoftwareUpdateConfigurationTargetAzureQueryTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class SoftwareUpdateConfigurationTargetAzureQueryTagArgs:
    def __init__(__self__, *,
                 tag: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] tag: Specifies the name of the tag to filter.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Specifies a list of values for this tag key.
        """
        SoftwareUpdateConfigurationTargetAzureQueryTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            tag=tag,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             tag: pulumi.Input[str],
             values: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("tag", tag)
        _setter("values", values)

    @property
    @pulumi.getter
    def tag(self) -> pulumi.Input[str]:
        """
        Specifies the name of the tag to filter.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Specifies a list of values for this tag key.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class SoftwareUpdateConfigurationTargetNonAzureQueryArgs:
    def __init__(__self__, *,
                 function_alias: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] function_alias: Specifies the Log Analytics save search name.
        :param pulumi.Input[str] workspace_id: The workspace id for Log Analytics in which the saved search in.
        """
        SoftwareUpdateConfigurationTargetNonAzureQueryArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            function_alias=function_alias,
            workspace_id=workspace_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             function_alias: Optional[pulumi.Input[str]] = None,
             workspace_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if function_alias is not None:
            _setter("function_alias", function_alias)
        if workspace_id is not None:
            _setter("workspace_id", workspace_id)

    @property
    @pulumi.getter(name="functionAlias")
    def function_alias(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Log Analytics save search name.
        """
        return pulumi.get(self, "function_alias")

    @function_alias.setter
    def function_alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_alias", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[str]]:
        """
        The workspace id for Log Analytics in which the saved search in.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.input_type
class SoftwareUpdateConfigurationWindowsArgs:
    def __init__(__self__, *,
                 classification_included: Optional[pulumi.Input[str]] = None,
                 classifications_includeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_knowledge_base_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 included_knowledge_base_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 reboot: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] classifications_includeds: Specifies the list of update classification. Possible values are `Unclassified`, `Critical`, `Security`, `UpdateRollup`, `FeaturePack`, `ServicePack`, `Definition`, `Tools` and `Updates`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_knowledge_base_numbers: Specifies a list of knowledge base numbers excluded.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] included_knowledge_base_numbers: Specifies a list of knowledge base numbers included.
        :param pulumi.Input[str] reboot: Specifies the reboot settings after software update, possible values are `IfRequired`, `Never`, `RebootOnly` and `Always`. Defaults to `IfRequired`.
        """
        SoftwareUpdateConfigurationWindowsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            classification_included=classification_included,
            classifications_includeds=classifications_includeds,
            excluded_knowledge_base_numbers=excluded_knowledge_base_numbers,
            included_knowledge_base_numbers=included_knowledge_base_numbers,
            reboot=reboot,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             classification_included: Optional[pulumi.Input[str]] = None,
             classifications_includeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             excluded_knowledge_base_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             included_knowledge_base_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             reboot: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if classification_included is not None:
            warnings.warn("""windows classification can be set as a list, use `classifications_included` instead.""", DeprecationWarning)
            pulumi.log.warn("""classification_included is deprecated: windows classification can be set as a list, use `classifications_included` instead.""")
        if classification_included is not None:
            _setter("classification_included", classification_included)
        if classifications_includeds is not None:
            _setter("classifications_includeds", classifications_includeds)
        if excluded_knowledge_base_numbers is not None:
            _setter("excluded_knowledge_base_numbers", excluded_knowledge_base_numbers)
        if included_knowledge_base_numbers is not None:
            _setter("included_knowledge_base_numbers", included_knowledge_base_numbers)
        if reboot is not None:
            _setter("reboot", reboot)

    @property
    @pulumi.getter(name="classificationIncluded")
    def classification_included(self) -> Optional[pulumi.Input[str]]:
        warnings.warn("""windows classification can be set as a list, use `classifications_included` instead.""", DeprecationWarning)
        pulumi.log.warn("""classification_included is deprecated: windows classification can be set as a list, use `classifications_included` instead.""")

        return pulumi.get(self, "classification_included")

    @classification_included.setter
    def classification_included(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "classification_included", value)

    @property
    @pulumi.getter(name="classificationsIncludeds")
    def classifications_includeds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the list of update classification. Possible values are `Unclassified`, `Critical`, `Security`, `UpdateRollup`, `FeaturePack`, `ServicePack`, `Definition`, `Tools` and `Updates`.
        """
        return pulumi.get(self, "classifications_includeds")

    @classifications_includeds.setter
    def classifications_includeds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "classifications_includeds", value)

    @property
    @pulumi.getter(name="excludedKnowledgeBaseNumbers")
    def excluded_knowledge_base_numbers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies a list of knowledge base numbers excluded.
        """
        return pulumi.get(self, "excluded_knowledge_base_numbers")

    @excluded_knowledge_base_numbers.setter
    def excluded_knowledge_base_numbers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_knowledge_base_numbers", value)

    @property
    @pulumi.getter(name="includedKnowledgeBaseNumbers")
    def included_knowledge_base_numbers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies a list of knowledge base numbers included.
        """
        return pulumi.get(self, "included_knowledge_base_numbers")

    @included_knowledge_base_numbers.setter
    def included_knowledge_base_numbers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "included_knowledge_base_numbers", value)

    @property
    @pulumi.getter
    def reboot(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the reboot settings after software update, possible values are `IfRequired`, `Never`, `RebootOnly` and `Always`. Defaults to `IfRequired`.
        """
        return pulumi.get(self, "reboot")

    @reboot.setter
    def reboot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reboot", value)


@pulumi.input_type
class SourceControlSecurityArgs:
    def __init__(__self__, *,
                 token: pulumi.Input[str],
                 token_type: pulumi.Input[str],
                 refresh_token: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] token: The access token of specified repo.
        :param pulumi.Input[str] token_type: Specify the token type, possible values are `PersonalAccessToken` and `Oauth`.
        :param pulumi.Input[str] refresh_token: The refresh token of specified rpeo.
        """
        SourceControlSecurityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            token=token,
            token_type=token_type,
            refresh_token=refresh_token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             token: pulumi.Input[str],
             token_type: pulumi.Input[str],
             refresh_token: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("token", token)
        _setter("token_type", token_type)
        if refresh_token is not None:
            _setter("refresh_token", refresh_token)

    @property
    @pulumi.getter
    def token(self) -> pulumi.Input[str]:
        """
        The access token of specified repo.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: pulumi.Input[str]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter(name="tokenType")
    def token_type(self) -> pulumi.Input[str]:
        """
        Specify the token type, possible values are `PersonalAccessToken` and `Oauth`.
        """
        return pulumi.get(self, "token_type")

    @token_type.setter
    def token_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_type", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[pulumi.Input[str]]:
        """
        The refresh token of specified rpeo.
        """
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_token", value)


