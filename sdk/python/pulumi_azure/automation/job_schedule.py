# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class JobSchedule(pulumi.CustomResource):
    automation_account_name: pulumi.Output[str]
    """
    The name of the Automation Account in which the Job Schedule is created. Changing this forces a new resource to be created.
    """
    job_schedule_id: pulumi.Output[str]
    """
    The UUID identifying the Automation Job Schedule.
    """
    parameters: pulumi.Output[dict]
    """
    A map of key/value pairs corresponding to the arguments that can be passed to the Runbook. Changing this forces a new resource to be created.
    """
    resource_group_name: pulumi.Output[str]
    """
    The name of the resource group in which the Job Schedule is created. Changing this forces a new resource to be created.
    """
    run_on: pulumi.Output[str]
    """
    Name of a Hybrid Worker Group the Runbook will be executed on. Changing this forces a new resource to be created.
    """
    runbook_name: pulumi.Output[str]
    """
    The name of a Runbook to link to a Schedule. It needs to be in the same Automation Account as the Schedule and Job Schedule. Changing this forces a new resource to be created.
    """
    schedule_name: pulumi.Output[str]
    def __init__(__self__, resource_name, opts=None, automation_account_name=None, job_schedule_id=None, parameters=None, resource_group_name=None, run_on=None, runbook_name=None, schedule_name=None, __props__=None, __name__=None, __opts__=None):
        """
        Links an Automation Runbook and Schedule.

        ## Example Usage



        ```python
        import pulumi
        import pulumi_azure as azure

        example = azure.automation.JobSchedule("example",
            automation_account_name="tf-automation-account",
            parameters={
                "resourcegroup": "tf-rgr-vm",
                "vmname": "TF-VM-01",
            },
            resource_group_name="tf-rgr-automation",
            runbook_name="Get-VirtualMachine",
            schedule_name="hour")
        ```


        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] automation_account_name: The name of the Automation Account in which the Job Schedule is created. Changing this forces a new resource to be created.
        :param pulumi.Input[str] job_schedule_id: The UUID identifying the Automation Job Schedule.
        :param pulumi.Input[dict] parameters: A map of key/value pairs corresponding to the arguments that can be passed to the Runbook. Changing this forces a new resource to be created.
        :param pulumi.Input[str] resource_group_name: The name of the resource group in which the Job Schedule is created. Changing this forces a new resource to be created.
        :param pulumi.Input[str] run_on: Name of a Hybrid Worker Group the Runbook will be executed on. Changing this forces a new resource to be created.
        :param pulumi.Input[str] runbook_name: The name of a Runbook to link to a Schedule. It needs to be in the same Automation Account as the Schedule and Job Schedule. Changing this forces a new resource to be created.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if automation_account_name is None:
                raise TypeError("Missing required property 'automation_account_name'")
            __props__['automation_account_name'] = automation_account_name
            __props__['job_schedule_id'] = job_schedule_id
            __props__['parameters'] = parameters
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['run_on'] = run_on
            if runbook_name is None:
                raise TypeError("Missing required property 'runbook_name'")
            __props__['runbook_name'] = runbook_name
            if schedule_name is None:
                raise TypeError("Missing required property 'schedule_name'")
            __props__['schedule_name'] = schedule_name
        super(JobSchedule, __self__).__init__(
            'azure:automation/jobSchedule:JobSchedule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, automation_account_name=None, job_schedule_id=None, parameters=None, resource_group_name=None, run_on=None, runbook_name=None, schedule_name=None):
        """
        Get an existing JobSchedule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] automation_account_name: The name of the Automation Account in which the Job Schedule is created. Changing this forces a new resource to be created.
        :param pulumi.Input[str] job_schedule_id: The UUID identifying the Automation Job Schedule.
        :param pulumi.Input[dict] parameters: A map of key/value pairs corresponding to the arguments that can be passed to the Runbook. Changing this forces a new resource to be created.
        :param pulumi.Input[str] resource_group_name: The name of the resource group in which the Job Schedule is created. Changing this forces a new resource to be created.
        :param pulumi.Input[str] run_on: Name of a Hybrid Worker Group the Runbook will be executed on. Changing this forces a new resource to be created.
        :param pulumi.Input[str] runbook_name: The name of a Runbook to link to a Schedule. It needs to be in the same Automation Account as the Schedule and Job Schedule. Changing this forces a new resource to be created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["automation_account_name"] = automation_account_name
        __props__["job_schedule_id"] = job_schedule_id
        __props__["parameters"] = parameters
        __props__["resource_group_name"] = resource_group_name
        __props__["run_on"] = run_on
        __props__["runbook_name"] = runbook_name
        __props__["schedule_name"] = schedule_name
        return JobSchedule(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

