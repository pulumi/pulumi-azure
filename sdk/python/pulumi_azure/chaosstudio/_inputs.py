# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ExperimentIdentityArgs',
    'ExperimentSelectorArgs',
    'ExperimentStepArgs',
    'ExperimentStepBranchArgs',
    'ExperimentStepBranchActionArgs',
]

@pulumi.input_type
class ExperimentIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 identity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 principal_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: The Type of Managed Identity which should be added to this Policy Definition. Possible values are `SystemAssigned` and `UserAssigned`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] identity_ids: A list of User Managed Identity IDs which should be assigned to the Policy Definition.
               
               > **NOTE:** This is required when `type` is set to `UserAssigned`.
        :param pulumi.Input[str] principal_id: The Principal ID associated with this Managed Service Identity.
        :param pulumi.Input[str] tenant_id: The Tenant ID associated with this Managed Service Identity.
        """
        pulumi.set(__self__, "type", type)
        if identity_ids is not None:
            pulumi.set(__self__, "identity_ids", identity_ids)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The Type of Managed Identity which should be added to this Policy Definition. Possible values are `SystemAssigned` and `UserAssigned`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of User Managed Identity IDs which should be assigned to the Policy Definition.

        > **NOTE:** This is required when `type` is set to `UserAssigned`.
        """
        return pulumi.get(self, "identity_ids")

    @identity_ids.setter
    def identity_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "identity_ids", value)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Principal ID associated with this Managed Service Identity.
        """
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Tenant ID associated with this Managed Service Identity.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class ExperimentSelectorArgs:
    def __init__(__self__, *,
                 chaos_studio_target_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] chaos_studio_target_ids: A list of Chaos Studio Target IDs that should be part of this Selector.
        :param pulumi.Input[str] name: The name of this Selector.
        """
        pulumi.set(__self__, "chaos_studio_target_ids", chaos_studio_target_ids)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="chaosStudioTargetIds")
    def chaos_studio_target_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of Chaos Studio Target IDs that should be part of this Selector.
        """
        return pulumi.get(self, "chaos_studio_target_ids")

    @chaos_studio_target_ids.setter
    def chaos_studio_target_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "chaos_studio_target_ids", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this Selector.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ExperimentStepArgs:
    def __init__(__self__, *,
                 branches: pulumi.Input[Sequence[pulumi.Input['ExperimentStepBranchArgs']]],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ExperimentStepBranchArgs']]] branches: One or more `branch` blocks as defined above.
        :param pulumi.Input[str] name: The name of the Step.
        """
        pulumi.set(__self__, "branches", branches)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def branches(self) -> pulumi.Input[Sequence[pulumi.Input['ExperimentStepBranchArgs']]]:
        """
        One or more `branch` blocks as defined above.
        """
        return pulumi.get(self, "branches")

    @branches.setter
    def branches(self, value: pulumi.Input[Sequence[pulumi.Input['ExperimentStepBranchArgs']]]):
        pulumi.set(self, "branches", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the Step.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ExperimentStepBranchArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input['ExperimentStepBranchActionArgs']]],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ExperimentStepBranchActionArgs']]] actions: One or more `actions` blocks as defined above.
        :param pulumi.Input[str] name: The name of the branch.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input['ExperimentStepBranchActionArgs']]]:
        """
        One or more `actions` blocks as defined above.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input['ExperimentStepBranchActionArgs']]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the branch.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ExperimentStepBranchActionArgs:
    def __init__(__self__, *,
                 action_type: pulumi.Input[str],
                 duration: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 selector_name: Optional[pulumi.Input[str]] = None,
                 urn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action_type: The type of action that should be added to the experiment. Possible values are `continuous`, `delay` and `discrete`.
        :param pulumi.Input[str] duration: An ISO8601 formatted string specifying the duration for a `delay` or `continuous` action.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A key-value map of additional parameters to configure the action. The values that are accepted by this depend on the `urn` i.e. the capability/fault that is applied. Possible parameter values can be found in this [documentation](https://learn.microsoft.com/azure/chaos-studio/chaos-studio-fault-library)
        :param pulumi.Input[str] selector_name: The name of the Selector to which this action should apply to. This must be specified if the `action_type` is `continuous` or `discrete`.
        :param pulumi.Input[str] urn: The Unique Resource Name of the action, this value is provided by the `chaosstudio.Capability` resource e.g. `azurerm_chaos_studio_capability.example.urn`. This must be specified if the `action_type` is `continuous` or `discrete`.
        """
        pulumi.set(__self__, "action_type", action_type)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if selector_name is not None:
            pulumi.set(__self__, "selector_name", selector_name)
        if urn is not None:
            pulumi.set(__self__, "urn", urn)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> pulumi.Input[str]:
        """
        The type of action that should be added to the experiment. Possible values are `continuous`, `delay` and `discrete`.
        """
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        """
        An ISO8601 formatted string specifying the duration for a `delay` or `continuous` action.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A key-value map of additional parameters to configure the action. The values that are accepted by this depend on the `urn` i.e. the capability/fault that is applied. Possible parameter values can be found in this [documentation](https://learn.microsoft.com/azure/chaos-studio/chaos-studio-fault-library)
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="selectorName")
    def selector_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Selector to which this action should apply to. This must be specified if the `action_type` is `continuous` or `discrete`.
        """
        return pulumi.get(self, "selector_name")

    @selector_name.setter
    def selector_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "selector_name", value)

    @property
    @pulumi.getter
    def urn(self) -> Optional[pulumi.Input[str]]:
        """
        The Unique Resource Name of the action, this value is provided by the `chaosstudio.Capability` resource e.g. `azurerm_chaos_studio_capability.example.urn`. This must be specified if the `action_type` is `continuous` or `discrete`.
        """
        return pulumi.get(self, "urn")

    @urn.setter
    def urn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "urn", value)


