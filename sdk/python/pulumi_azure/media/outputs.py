# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'AccountFilterPresentationTimeRange',
    'AccountFilterTrackSelection',
    'AccountFilterTrackSelectionCondition',
]

@pulumi.output_type
class AccountFilterPresentationTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "unitTimescaleInMilliseconds":
            suggest = "unit_timescale_in_milliseconds"
        elif key == "endInUnits":
            suggest = "end_in_units"
        elif key == "forceEnd":
            suggest = "force_end"
        elif key == "liveBackoffInUnits":
            suggest = "live_backoff_in_units"
        elif key == "presentationWindowInUnits":
            suggest = "presentation_window_in_units"
        elif key == "startInUnits":
            suggest = "start_in_units"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccountFilterPresentationTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccountFilterPresentationTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccountFilterPresentationTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 unit_timescale_in_milliseconds: int,
                 end_in_units: Optional[int] = None,
                 force_end: Optional[bool] = None,
                 live_backoff_in_units: Optional[int] = None,
                 presentation_window_in_units: Optional[int] = None,
                 start_in_units: Optional[int] = None):
        pulumi.set(__self__, "unit_timescale_in_milliseconds", unit_timescale_in_milliseconds)
        if end_in_units is not None:
            pulumi.set(__self__, "end_in_units", end_in_units)
        if force_end is not None:
            pulumi.set(__self__, "force_end", force_end)
        if live_backoff_in_units is not None:
            pulumi.set(__self__, "live_backoff_in_units", live_backoff_in_units)
        if presentation_window_in_units is not None:
            pulumi.set(__self__, "presentation_window_in_units", presentation_window_in_units)
        if start_in_units is not None:
            pulumi.set(__self__, "start_in_units", start_in_units)

    @property
    @pulumi.getter(name="unitTimescaleInMilliseconds")
    def unit_timescale_in_milliseconds(self) -> int:
        return pulumi.get(self, "unit_timescale_in_milliseconds")

    @property
    @pulumi.getter(name="endInUnits")
    def end_in_units(self) -> Optional[int]:
        return pulumi.get(self, "end_in_units")

    @property
    @pulumi.getter(name="forceEnd")
    def force_end(self) -> Optional[bool]:
        return pulumi.get(self, "force_end")

    @property
    @pulumi.getter(name="liveBackoffInUnits")
    def live_backoff_in_units(self) -> Optional[int]:
        return pulumi.get(self, "live_backoff_in_units")

    @property
    @pulumi.getter(name="presentationWindowInUnits")
    def presentation_window_in_units(self) -> Optional[int]:
        return pulumi.get(self, "presentation_window_in_units")

    @property
    @pulumi.getter(name="startInUnits")
    def start_in_units(self) -> Optional[int]:
        return pulumi.get(self, "start_in_units")


@pulumi.output_type
class AccountFilterTrackSelection(dict):
    def __init__(__self__, *,
                 conditions: Sequence['outputs.AccountFilterTrackSelectionCondition']):
        pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.AccountFilterTrackSelectionCondition']:
        return pulumi.get(self, "conditions")


@pulumi.output_type
class AccountFilterTrackSelectionCondition(dict):
    def __init__(__self__, *,
                 operation: str,
                 property: str,
                 value: str):
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operation(self) -> str:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def property(self) -> str:
        return pulumi.get(self, "property")


