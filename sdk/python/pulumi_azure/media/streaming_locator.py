# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['StreamingLocator']


class StreamingLocator(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alternative_media_id: Optional[pulumi.Input[str]] = None,
                 asset_name: Optional[pulumi.Input[str]] = None,
                 content_keys: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StreamingLocatorContentKeyArgs']]]]] = None,
                 default_content_key_policy_name: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 media_services_account_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 streaming_locator_id: Optional[pulumi.Input[str]] = None,
                 streaming_policy_name: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Manages a Media Streaming Locator.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_account = azure.storage.Account("exampleAccount",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            account_tier="Standard",
            account_replication_type="GRS")
        example_service_account = azure.media.ServiceAccount("exampleServiceAccount",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            storage_accounts=[azure.media.ServiceAccountStorageAccountArgs(
                id=example_account.id,
                is_primary=True,
            )])
        example_asset = azure.media.Asset("exampleAsset",
            resource_group_name=example_resource_group.name,
            media_services_account_name=example_service_account.name,
            description="Asset description")
        example_streaming_locator = azure.media.StreamingLocator("exampleStreamingLocator",
            resource_group_name=example_resource_group.name,
            media_services_account_name=example_service_account.name,
            asset_name=example_asset.name,
            streaming_policy_name="Predefined_ClearStreamingOnly")
        ```

        ## Import

        Streaming Locators can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:media/streamingLocator:StreamingLocator example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaservices/account1/streaminglocators/locator1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alternative_media_id: Alternative Media ID of this Streaming Locator. Changing this forces a new Streaming Locator to be created.
        :param pulumi.Input[str] asset_name: Asset Name. Changing this forces a new Streaming Locator to be created.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StreamingLocatorContentKeyArgs']]]] content_keys: One or more `content_key` blocks as defined below. Changing this forces a new Streaming Locator to be created.
        :param pulumi.Input[str] default_content_key_policy_name: Name of the default Content Key Policy used by this Streaming Locator.Changing this forces a new Streaming Locator to be created.
        :param pulumi.Input[str] end_time: The end time of the Streaming Locator. Changing this forces a new Streaming Locator to be created.
        :param pulumi.Input[str] media_services_account_name: The Media Services account name. Changing this forces a new Streaming Locator to be created.
        :param pulumi.Input[str] name: The name which should be used for this Streaming Locator. Changing this forces a new Streaming Locator to be created.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group where the Streaming Locator should exist. Changing this forces a new Streaming Locator to be created.
        :param pulumi.Input[str] start_time: The start time of the Streaming Locator. Changing this forces a new Streaming Locator to be created.
        :param pulumi.Input[str] streaming_locator_id: The ID of the Streaming Locator. Changing this forces a new Streaming Locator to be created.
        :param pulumi.Input[str] streaming_policy_name: Name of the Streaming Policy used by this Streaming Locator. Either specify the name of Streaming Policy you created or use one of the predefined Streaming Policies. The predefined Streaming Policies available are: `Predefined_DownloadOnly`, `Predefined_ClearStreamingOnly`, `Predefined_DownloadAndClearStreaming`, `Predefined_ClearKey`, `Predefined_MultiDrmCencStreaming` and `Predefined_MultiDrmStreaming`. Changing this forces a new Streaming Locator to be created.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['alternative_media_id'] = alternative_media_id
            if asset_name is None and not opts.urn:
                raise TypeError("Missing required property 'asset_name'")
            __props__['asset_name'] = asset_name
            __props__['content_keys'] = content_keys
            __props__['default_content_key_policy_name'] = default_content_key_policy_name
            __props__['end_time'] = end_time
            if media_services_account_name is None and not opts.urn:
                raise TypeError("Missing required property 'media_services_account_name'")
            __props__['media_services_account_name'] = media_services_account_name
            __props__['name'] = name
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['start_time'] = start_time
            __props__['streaming_locator_id'] = streaming_locator_id
            if streaming_policy_name is None and not opts.urn:
                raise TypeError("Missing required property 'streaming_policy_name'")
            __props__['streaming_policy_name'] = streaming_policy_name
        super(StreamingLocator, __self__).__init__(
            'azure:media/streamingLocator:StreamingLocator',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alternative_media_id: Optional[pulumi.Input[str]] = None,
            asset_name: Optional[pulumi.Input[str]] = None,
            content_keys: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StreamingLocatorContentKeyArgs']]]]] = None,
            default_content_key_policy_name: Optional[pulumi.Input[str]] = None,
            end_time: Optional[pulumi.Input[str]] = None,
            media_services_account_name: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            resource_group_name: Optional[pulumi.Input[str]] = None,
            start_time: Optional[pulumi.Input[str]] = None,
            streaming_locator_id: Optional[pulumi.Input[str]] = None,
            streaming_policy_name: Optional[pulumi.Input[str]] = None) -> 'StreamingLocator':
        """
        Get an existing StreamingLocator resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alternative_media_id: Alternative Media ID of this Streaming Locator. Changing this forces a new Streaming Locator to be created.
        :param pulumi.Input[str] asset_name: Asset Name. Changing this forces a new Streaming Locator to be created.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StreamingLocatorContentKeyArgs']]]] content_keys: One or more `content_key` blocks as defined below. Changing this forces a new Streaming Locator to be created.
        :param pulumi.Input[str] default_content_key_policy_name: Name of the default Content Key Policy used by this Streaming Locator.Changing this forces a new Streaming Locator to be created.
        :param pulumi.Input[str] end_time: The end time of the Streaming Locator. Changing this forces a new Streaming Locator to be created.
        :param pulumi.Input[str] media_services_account_name: The Media Services account name. Changing this forces a new Streaming Locator to be created.
        :param pulumi.Input[str] name: The name which should be used for this Streaming Locator. Changing this forces a new Streaming Locator to be created.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group where the Streaming Locator should exist. Changing this forces a new Streaming Locator to be created.
        :param pulumi.Input[str] start_time: The start time of the Streaming Locator. Changing this forces a new Streaming Locator to be created.
        :param pulumi.Input[str] streaming_locator_id: The ID of the Streaming Locator. Changing this forces a new Streaming Locator to be created.
        :param pulumi.Input[str] streaming_policy_name: Name of the Streaming Policy used by this Streaming Locator. Either specify the name of Streaming Policy you created or use one of the predefined Streaming Policies. The predefined Streaming Policies available are: `Predefined_DownloadOnly`, `Predefined_ClearStreamingOnly`, `Predefined_DownloadAndClearStreaming`, `Predefined_ClearKey`, `Predefined_MultiDrmCencStreaming` and `Predefined_MultiDrmStreaming`. Changing this forces a new Streaming Locator to be created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["alternative_media_id"] = alternative_media_id
        __props__["asset_name"] = asset_name
        __props__["content_keys"] = content_keys
        __props__["default_content_key_policy_name"] = default_content_key_policy_name
        __props__["end_time"] = end_time
        __props__["media_services_account_name"] = media_services_account_name
        __props__["name"] = name
        __props__["resource_group_name"] = resource_group_name
        __props__["start_time"] = start_time
        __props__["streaming_locator_id"] = streaming_locator_id
        __props__["streaming_policy_name"] = streaming_policy_name
        return StreamingLocator(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="alternativeMediaId")
    def alternative_media_id(self) -> pulumi.Output[Optional[str]]:
        """
        Alternative Media ID of this Streaming Locator. Changing this forces a new Streaming Locator to be created.
        """
        return pulumi.get(self, "alternative_media_id")

    @property
    @pulumi.getter(name="assetName")
    def asset_name(self) -> pulumi.Output[str]:
        """
        Asset Name. Changing this forces a new Streaming Locator to be created.
        """
        return pulumi.get(self, "asset_name")

    @property
    @pulumi.getter(name="contentKeys")
    def content_keys(self) -> pulumi.Output[Optional[Sequence['outputs.StreamingLocatorContentKey']]]:
        """
        One or more `content_key` blocks as defined below. Changing this forces a new Streaming Locator to be created.
        """
        return pulumi.get(self, "content_keys")

    @property
    @pulumi.getter(name="defaultContentKeyPolicyName")
    def default_content_key_policy_name(self) -> pulumi.Output[Optional[str]]:
        """
        Name of the default Content Key Policy used by this Streaming Locator.Changing this forces a new Streaming Locator to be created.
        """
        return pulumi.get(self, "default_content_key_policy_name")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[str]:
        """
        The end time of the Streaming Locator. Changing this forces a new Streaming Locator to be created.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="mediaServicesAccountName")
    def media_services_account_name(self) -> pulumi.Output[str]:
        """
        The Media Services account name. Changing this forces a new Streaming Locator to be created.
        """
        return pulumi.get(self, "media_services_account_name")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name which should be used for this Streaming Locator. Changing this forces a new Streaming Locator to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[str]:
        """
        The name of the Resource Group where the Streaming Locator should exist. Changing this forces a new Streaming Locator to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[Optional[str]]:
        """
        The start time of the Streaming Locator. Changing this forces a new Streaming Locator to be created.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="streamingLocatorId")
    def streaming_locator_id(self) -> pulumi.Output[str]:
        """
        The ID of the Streaming Locator. Changing this forces a new Streaming Locator to be created.
        """
        return pulumi.get(self, "streaming_locator_id")

    @property
    @pulumi.getter(name="streamingPolicyName")
    def streaming_policy_name(self) -> pulumi.Output[str]:
        """
        Name of the Streaming Policy used by this Streaming Locator. Either specify the name of Streaming Policy you created or use one of the predefined Streaming Policies. The predefined Streaming Policies available are: `Predefined_DownloadOnly`, `Predefined_ClearStreamingOnly`, `Predefined_DownloadAndClearStreaming`, `Predefined_ClearKey`, `Predefined_MultiDrmCencStreaming` and `Predefined_MultiDrmStreaming`. Changing this forces a new Streaming Locator to be created.
        """
        return pulumi.get(self, "streaming_policy_name")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

