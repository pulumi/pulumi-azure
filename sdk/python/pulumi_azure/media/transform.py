# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TransformArgs', 'Transform']

@pulumi.input_type
class TransformArgs:
    def __init__(__self__, *,
                 media_services_account_name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 outputs: Optional[pulumi.Input[Sequence[pulumi.Input['TransformOutputArgs']]]] = None):
        """
        The set of arguments for constructing a Transform resource.
        :param pulumi.Input[str] media_services_account_name: The Media Services account name. Changing this forces a new Transform to be created.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
        :param pulumi.Input[str] description: An optional verbose description of the Transform.
        :param pulumi.Input[str] name: The name which should be used for this Transform. Changing this forces a new Transform to be created.
        :param pulumi.Input[Sequence[pulumi.Input['TransformOutputArgs']]] outputs: One or more `output` blocks as defined below. At least one `output` must be defined.
        """
        TransformArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            media_services_account_name=media_services_account_name,
            resource_group_name=resource_group_name,
            description=description,
            name=name,
            outputs=outputs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             media_services_account_name: pulumi.Input[str],
             resource_group_name: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             outputs: Optional[pulumi.Input[Sequence[pulumi.Input['TransformOutputArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("media_services_account_name", media_services_account_name)
        _setter("resource_group_name", resource_group_name)
        if description is not None:
            _setter("description", description)
        if name is not None:
            _setter("name", name)
        if outputs is not None:
            _setter("outputs", outputs)

    @property
    @pulumi.getter(name="mediaServicesAccountName")
    def media_services_account_name(self) -> pulumi.Input[str]:
        """
        The Media Services account name. Changing this forces a new Transform to be created.
        """
        return pulumi.get(self, "media_services_account_name")

    @media_services_account_name.setter
    def media_services_account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "media_services_account_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional verbose description of the Transform.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name which should be used for this Transform. Changing this forces a new Transform to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def outputs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransformOutputArgs']]]]:
        """
        One or more `output` blocks as defined below. At least one `output` must be defined.
        """
        return pulumi.get(self, "outputs")

    @outputs.setter
    def outputs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransformOutputArgs']]]]):
        pulumi.set(self, "outputs", value)


@pulumi.input_type
class _TransformState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 media_services_account_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 outputs: Optional[pulumi.Input[Sequence[pulumi.Input['TransformOutputArgs']]]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Transform resources.
        :param pulumi.Input[str] description: An optional verbose description of the Transform.
        :param pulumi.Input[str] media_services_account_name: The Media Services account name. Changing this forces a new Transform to be created.
        :param pulumi.Input[str] name: The name which should be used for this Transform. Changing this forces a new Transform to be created.
        :param pulumi.Input[Sequence[pulumi.Input['TransformOutputArgs']]] outputs: One or more `output` blocks as defined below. At least one `output` must be defined.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
        """
        _TransformState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            media_services_account_name=media_services_account_name,
            name=name,
            outputs=outputs,
            resource_group_name=resource_group_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[pulumi.Input[str]] = None,
             media_services_account_name: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             outputs: Optional[pulumi.Input[Sequence[pulumi.Input['TransformOutputArgs']]]] = None,
             resource_group_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if description is not None:
            _setter("description", description)
        if media_services_account_name is not None:
            _setter("media_services_account_name", media_services_account_name)
        if name is not None:
            _setter("name", name)
        if outputs is not None:
            _setter("outputs", outputs)
        if resource_group_name is not None:
            _setter("resource_group_name", resource_group_name)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional verbose description of the Transform.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="mediaServicesAccountName")
    def media_services_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Media Services account name. Changing this forces a new Transform to be created.
        """
        return pulumi.get(self, "media_services_account_name")

    @media_services_account_name.setter
    def media_services_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "media_services_account_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name which should be used for this Transform. Changing this forces a new Transform to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def outputs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransformOutputArgs']]]]:
        """
        One or more `output` blocks as defined below. At least one `output` must be defined.
        """
        return pulumi.get(self, "outputs")

    @outputs.setter
    def outputs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransformOutputArgs']]]]):
        pulumi.set(self, "outputs", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)


class Transform(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 media_services_account_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 outputs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TransformOutputArgs']]]]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a Transform.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_account = azure.storage.Account("exampleAccount",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            account_tier="Standard",
            account_replication_type="GRS")
        example_service_account = azure.media.ServiceAccount("exampleServiceAccount",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            storage_accounts=[azure.media.ServiceAccountStorageAccountArgs(
                id=example_account.id,
                is_primary=True,
            )])
        example_transform = azure.media.Transform("exampleTransform",
            resource_group_name=example_resource_group.name,
            media_services_account_name=example_service_account.name,
            description="My transform description",
            outputs=[azure.media.TransformOutputArgs(
                relative_priority="Normal",
                on_error_action="ContinueJob",
                builtin_preset=azure.media.TransformOutputBuiltinPresetArgs(
                    preset_name="AACGoodQualityAudio",
                ),
            )])
        ```
        ### With Multiple Outputs

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_account = azure.storage.Account("exampleAccount",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            account_tier="Standard",
            account_replication_type="GRS")
        example_service_account = azure.media.ServiceAccount("exampleServiceAccount",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            storage_accounts=[azure.media.ServiceAccountStorageAccountArgs(
                id=example_account.id,
                is_primary=True,
            )])
        example_transform = azure.media.Transform("exampleTransform",
            resource_group_name=example_resource_group.name,
            media_services_account_name=example_service_account.name,
            description="My transform description",
            outputs=[
                azure.media.TransformOutputArgs(
                    relative_priority="Normal",
                    on_error_action="ContinueJob",
                    builtin_preset=azure.media.TransformOutputBuiltinPresetArgs(
                        preset_name="AACGoodQualityAudio",
                        preset_configuration=azure.media.TransformOutputBuiltinPresetPresetConfigurationArgs(
                            complexity="Balanced",
                            interleave_output="NonInterleavedOutput",
                            key_frame_interval_in_seconds=123122.5,
                            max_bitrate_bps=300000,
                            max_height=480,
                            max_layers=14,
                            min_bitrate_bps=200000,
                            min_height=360,
                        ),
                    ),
                ),
                azure.media.TransformOutputArgs(
                    relative_priority="Low",
                    on_error_action="ContinueJob",
                    audio_analyzer_preset=azure.media.TransformOutputAudioAnalyzerPresetArgs(
                        audio_language="en-US",
                        audio_analysis_mode="Basic",
                        experimental_options={
                            "env": "test",
                        },
                    ),
                ),
                azure.media.TransformOutputArgs(
                    relative_priority="Low",
                    on_error_action="StopProcessingJob",
                    face_detector_preset=azure.media.TransformOutputFaceDetectorPresetArgs(
                        analysis_resolution="StandardDefinition",
                        blur_type="Med",
                        face_redactor_mode="Combined",
                        experimental_options={
                            "env": "test",
                        },
                    ),
                ),
                azure.media.TransformOutputArgs(
                    relative_priority="Normal",
                    on_error_action="StopProcessingJob",
                    video_analyzer_preset=azure.media.TransformOutputVideoAnalyzerPresetArgs(
                        audio_language="en-US",
                        audio_analysis_mode="Basic",
                        insights_type="AllInsights",
                        experimental_options={
                            "env": "test",
                        },
                    ),
                ),
                azure.media.TransformOutputArgs(
                    relative_priority="Low",
                    on_error_action="ContinueJob",
                    custom_preset=azure.media.TransformOutputCustomPresetArgs(
                        codecs=[
                            azure.media.TransformOutputCustomPresetCodecArgs(
                                aac_audio=azure.media.TransformOutputCustomPresetCodecAacAudioArgs(
                                    bitrate=128000,
                                    channels=2,
                                    sampling_rate=48000,
                                    profile="AacLc",
                                ),
                            ),
                            azure.media.TransformOutputCustomPresetCodecArgs(
                                copy_audio=azure.media.TransformOutputCustomPresetCodecCopyAudioArgs(
                                    label="test",
                                ),
                            ),
                            azure.media.TransformOutputCustomPresetCodecArgs(
                                copy_video=azure.media.TransformOutputCustomPresetCodecCopyVideoArgs(
                                    label="test",
                                ),
                            ),
                            azure.media.TransformOutputCustomPresetCodecArgs(
                                h264_video=azure.media.TransformOutputCustomPresetCodecH264VideoArgs(
                                    key_frame_interval="PT1S",
                                    stretch_mode="AutoSize",
                                    sync_mode="Auto",
                                    scene_change_detection_enabled=False,
                                    rate_control_mode="ABR",
                                    complexity="Quality",
                                    layers=[
                                        azure.media.TransformOutputCustomPresetCodecH264VideoLayerArgs(
                                            width="64",
                                            height="64",
                                            bitrate=1045000,
                                            max_bitrate=1045000,
                                            b_frames=3,
                                            slices=0,
                                            adaptive_b_frame_enabled=True,
                                            profile="Auto",
                                            level="auto",
                                            buffer_window="PT5S",
                                            reference_frames=4,
                                            crf=23,
                                            entropy_mode="Cabac",
                                        ),
                                        azure.media.TransformOutputCustomPresetCodecH264VideoLayerArgs(
                                            width="64",
                                            height="64",
                                            bitrate=1000,
                                            max_bitrate=1000,
                                            b_frames=3,
                                            frame_rate="32",
                                            slices=1,
                                            adaptive_b_frame_enabled=True,
                                            profile="High444",
                                            level="auto",
                                            buffer_window="PT5S",
                                            reference_frames=4,
                                            crf=23,
                                            entropy_mode="Cavlc",
                                        ),
                                    ],
                                ),
                            ),
                            azure.media.TransformOutputCustomPresetCodecArgs(
                                h265_video=azure.media.TransformOutputCustomPresetCodecH265VideoArgs(
                                    key_frame_interval="PT2S",
                                    stretch_mode="AutoSize",
                                    sync_mode="Auto",
                                    scene_change_detection_enabled=False,
                                    complexity="Speed",
                                    layers=[azure.media.TransformOutputCustomPresetCodecH265VideoLayerArgs(
                                        width="64",
                                        height="64",
                                        bitrate=1045000,
                                        max_bitrate=1045000,
                                        b_frames=3,
                                        slices=5,
                                        adaptive_b_frame_enabled=True,
                                        profile="Auto",
                                        label="test",
                                        level="auto",
                                        buffer_window="PT5S",
                                        frame_rate="32",
                                        reference_frames=4,
                                        crf=23,
                                    )],
                                ),
                            ),
                            azure.media.TransformOutputCustomPresetCodecArgs(
                                jpg_image=azure.media.TransformOutputCustomPresetCodecJpgImageArgs(
                                    stretch_mode="AutoSize",
                                    sync_mode="Auto",
                                    start="10",
                                    range="100%%",
                                    sprite_column=1,
                                    step="10",
                                    layers=[azure.media.TransformOutputCustomPresetCodecJpgImageLayerArgs(
                                        quality=70,
                                        height="180",
                                        label="test",
                                        width="120",
                                    )],
                                ),
                            ),
                            azure.media.TransformOutputCustomPresetCodecArgs(
                                png_image=azure.media.TransformOutputCustomPresetCodecPngImageArgs(
                                    stretch_mode="AutoSize",
                                    sync_mode="Auto",
                                    start="{Best}",
                                    range="80",
                                    step="10",
                                    layers=[azure.media.TransformOutputCustomPresetCodecPngImageLayerArgs(
                                        height="180",
                                        label="test",
                                        width="120",
                                    )],
                                ),
                            ),
                        ],
                        formats=[
                            azure.media.TransformOutputCustomPresetFormatArgs(
                                jpg=azure.media.TransformOutputCustomPresetFormatJpgArgs(
                                    filename_pattern="test{Basename}",
                                ),
                            ),
                            azure.media.TransformOutputCustomPresetFormatArgs(
                                mp4=azure.media.TransformOutputCustomPresetFormatMp4Args(
                                    filename_pattern="test{Bitrate}",
                                    output_files=[azure.media.TransformOutputCustomPresetFormatMp4OutputFileArgs(
                                        labels=[
                                            "test",
                                            "ppe",
                                        ],
                                    )],
                                ),
                            ),
                            azure.media.TransformOutputCustomPresetFormatArgs(
                                png=azure.media.TransformOutputCustomPresetFormatPngArgs(
                                    filename_pattern="test{Basename}",
                                ),
                            ),
                            azure.media.TransformOutputCustomPresetFormatArgs(
                                transport_stream=azure.media.TransformOutputCustomPresetFormatTransportStreamArgs(
                                    filename_pattern="test{Bitrate}",
                                    output_files=[azure.media.TransformOutputCustomPresetFormatTransportStreamOutputFileArgs(
                                        labels=["prod"],
                                    )],
                                ),
                            ),
                        ],
                        filter=azure.media.TransformOutputCustomPresetFilterArgs(
                            crop_rectangle=azure.media.TransformOutputCustomPresetFilterCropRectangleArgs(
                                height="240",
                                left="30",
                                top="360",
                                width="70",
                            ),
                            deinterlace=azure.media.TransformOutputCustomPresetFilterDeinterlaceArgs(
                                parity="TopFieldFirst",
                                mode="AutoPixelAdaptive",
                            ),
                            fade_in=azure.media.TransformOutputCustomPresetFilterFadeInArgs(
                                duration="PT5S",
                                fade_color="0xFF0000",
                                start="10",
                            ),
                            fade_out=azure.media.TransformOutputCustomPresetFilterFadeOutArgs(
                                duration="90%%",
                                fade_color="#FF0C7B",
                                start="10%%",
                            ),
                            rotation="Auto",
                            overlays=[
                                azure.media.TransformOutputCustomPresetFilterOverlayArgs(
                                    audio=azure.media.TransformOutputCustomPresetFilterOverlayAudioArgs(
                                        input_label="label.jpg",
                                        start="PT5S",
                                        end="PT30S",
                                        fade_in_duration="PT1S",
                                        fade_out_duration="PT2S",
                                        audio_gain_level=1,
                                    ),
                                ),
                                azure.media.TransformOutputCustomPresetFilterOverlayArgs(
                                    video=azure.media.TransformOutputCustomPresetFilterOverlayVideoArgs(
                                        input_label="label.jpg",
                                        start="PT5S",
                                        end="PT30S",
                                        fade_in_duration="PT1S",
                                        fade_out_duration="PT2S",
                                        audio_gain_level=1,
                                        opacity=1,
                                        position=azure.media.TransformOutputCustomPresetFilterOverlayVideoPositionArgs(
                                            height="180",
                                            left="20",
                                            top="240",
                                            width="140",
                                        ),
                                        crop_rectangle=azure.media.TransformOutputCustomPresetFilterOverlayVideoCropRectangleArgs(
                                            height="240",
                                            left="30",
                                            top="360",
                                            width="70",
                                        ),
                                    ),
                                ),
                            ],
                        ),
                    ),
                ),
            ])
        ```

        ## Import

        Transforms can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:media/transform:Transform example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaServices/media1/transforms/transform1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: An optional verbose description of the Transform.
        :param pulumi.Input[str] media_services_account_name: The Media Services account name. Changing this forces a new Transform to be created.
        :param pulumi.Input[str] name: The name which should be used for this Transform. Changing this forces a new Transform to be created.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TransformOutputArgs']]]] outputs: One or more `output` blocks as defined below. At least one `output` must be defined.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TransformArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Transform.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_account = azure.storage.Account("exampleAccount",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            account_tier="Standard",
            account_replication_type="GRS")
        example_service_account = azure.media.ServiceAccount("exampleServiceAccount",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            storage_accounts=[azure.media.ServiceAccountStorageAccountArgs(
                id=example_account.id,
                is_primary=True,
            )])
        example_transform = azure.media.Transform("exampleTransform",
            resource_group_name=example_resource_group.name,
            media_services_account_name=example_service_account.name,
            description="My transform description",
            outputs=[azure.media.TransformOutputArgs(
                relative_priority="Normal",
                on_error_action="ContinueJob",
                builtin_preset=azure.media.TransformOutputBuiltinPresetArgs(
                    preset_name="AACGoodQualityAudio",
                ),
            )])
        ```
        ### With Multiple Outputs

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_account = azure.storage.Account("exampleAccount",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            account_tier="Standard",
            account_replication_type="GRS")
        example_service_account = azure.media.ServiceAccount("exampleServiceAccount",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            storage_accounts=[azure.media.ServiceAccountStorageAccountArgs(
                id=example_account.id,
                is_primary=True,
            )])
        example_transform = azure.media.Transform("exampleTransform",
            resource_group_name=example_resource_group.name,
            media_services_account_name=example_service_account.name,
            description="My transform description",
            outputs=[
                azure.media.TransformOutputArgs(
                    relative_priority="Normal",
                    on_error_action="ContinueJob",
                    builtin_preset=azure.media.TransformOutputBuiltinPresetArgs(
                        preset_name="AACGoodQualityAudio",
                        preset_configuration=azure.media.TransformOutputBuiltinPresetPresetConfigurationArgs(
                            complexity="Balanced",
                            interleave_output="NonInterleavedOutput",
                            key_frame_interval_in_seconds=123122.5,
                            max_bitrate_bps=300000,
                            max_height=480,
                            max_layers=14,
                            min_bitrate_bps=200000,
                            min_height=360,
                        ),
                    ),
                ),
                azure.media.TransformOutputArgs(
                    relative_priority="Low",
                    on_error_action="ContinueJob",
                    audio_analyzer_preset=azure.media.TransformOutputAudioAnalyzerPresetArgs(
                        audio_language="en-US",
                        audio_analysis_mode="Basic",
                        experimental_options={
                            "env": "test",
                        },
                    ),
                ),
                azure.media.TransformOutputArgs(
                    relative_priority="Low",
                    on_error_action="StopProcessingJob",
                    face_detector_preset=azure.media.TransformOutputFaceDetectorPresetArgs(
                        analysis_resolution="StandardDefinition",
                        blur_type="Med",
                        face_redactor_mode="Combined",
                        experimental_options={
                            "env": "test",
                        },
                    ),
                ),
                azure.media.TransformOutputArgs(
                    relative_priority="Normal",
                    on_error_action="StopProcessingJob",
                    video_analyzer_preset=azure.media.TransformOutputVideoAnalyzerPresetArgs(
                        audio_language="en-US",
                        audio_analysis_mode="Basic",
                        insights_type="AllInsights",
                        experimental_options={
                            "env": "test",
                        },
                    ),
                ),
                azure.media.TransformOutputArgs(
                    relative_priority="Low",
                    on_error_action="ContinueJob",
                    custom_preset=azure.media.TransformOutputCustomPresetArgs(
                        codecs=[
                            azure.media.TransformOutputCustomPresetCodecArgs(
                                aac_audio=azure.media.TransformOutputCustomPresetCodecAacAudioArgs(
                                    bitrate=128000,
                                    channels=2,
                                    sampling_rate=48000,
                                    profile="AacLc",
                                ),
                            ),
                            azure.media.TransformOutputCustomPresetCodecArgs(
                                copy_audio=azure.media.TransformOutputCustomPresetCodecCopyAudioArgs(
                                    label="test",
                                ),
                            ),
                            azure.media.TransformOutputCustomPresetCodecArgs(
                                copy_video=azure.media.TransformOutputCustomPresetCodecCopyVideoArgs(
                                    label="test",
                                ),
                            ),
                            azure.media.TransformOutputCustomPresetCodecArgs(
                                h264_video=azure.media.TransformOutputCustomPresetCodecH264VideoArgs(
                                    key_frame_interval="PT1S",
                                    stretch_mode="AutoSize",
                                    sync_mode="Auto",
                                    scene_change_detection_enabled=False,
                                    rate_control_mode="ABR",
                                    complexity="Quality",
                                    layers=[
                                        azure.media.TransformOutputCustomPresetCodecH264VideoLayerArgs(
                                            width="64",
                                            height="64",
                                            bitrate=1045000,
                                            max_bitrate=1045000,
                                            b_frames=3,
                                            slices=0,
                                            adaptive_b_frame_enabled=True,
                                            profile="Auto",
                                            level="auto",
                                            buffer_window="PT5S",
                                            reference_frames=4,
                                            crf=23,
                                            entropy_mode="Cabac",
                                        ),
                                        azure.media.TransformOutputCustomPresetCodecH264VideoLayerArgs(
                                            width="64",
                                            height="64",
                                            bitrate=1000,
                                            max_bitrate=1000,
                                            b_frames=3,
                                            frame_rate="32",
                                            slices=1,
                                            adaptive_b_frame_enabled=True,
                                            profile="High444",
                                            level="auto",
                                            buffer_window="PT5S",
                                            reference_frames=4,
                                            crf=23,
                                            entropy_mode="Cavlc",
                                        ),
                                    ],
                                ),
                            ),
                            azure.media.TransformOutputCustomPresetCodecArgs(
                                h265_video=azure.media.TransformOutputCustomPresetCodecH265VideoArgs(
                                    key_frame_interval="PT2S",
                                    stretch_mode="AutoSize",
                                    sync_mode="Auto",
                                    scene_change_detection_enabled=False,
                                    complexity="Speed",
                                    layers=[azure.media.TransformOutputCustomPresetCodecH265VideoLayerArgs(
                                        width="64",
                                        height="64",
                                        bitrate=1045000,
                                        max_bitrate=1045000,
                                        b_frames=3,
                                        slices=5,
                                        adaptive_b_frame_enabled=True,
                                        profile="Auto",
                                        label="test",
                                        level="auto",
                                        buffer_window="PT5S",
                                        frame_rate="32",
                                        reference_frames=4,
                                        crf=23,
                                    )],
                                ),
                            ),
                            azure.media.TransformOutputCustomPresetCodecArgs(
                                jpg_image=azure.media.TransformOutputCustomPresetCodecJpgImageArgs(
                                    stretch_mode="AutoSize",
                                    sync_mode="Auto",
                                    start="10",
                                    range="100%%",
                                    sprite_column=1,
                                    step="10",
                                    layers=[azure.media.TransformOutputCustomPresetCodecJpgImageLayerArgs(
                                        quality=70,
                                        height="180",
                                        label="test",
                                        width="120",
                                    )],
                                ),
                            ),
                            azure.media.TransformOutputCustomPresetCodecArgs(
                                png_image=azure.media.TransformOutputCustomPresetCodecPngImageArgs(
                                    stretch_mode="AutoSize",
                                    sync_mode="Auto",
                                    start="{Best}",
                                    range="80",
                                    step="10",
                                    layers=[azure.media.TransformOutputCustomPresetCodecPngImageLayerArgs(
                                        height="180",
                                        label="test",
                                        width="120",
                                    )],
                                ),
                            ),
                        ],
                        formats=[
                            azure.media.TransformOutputCustomPresetFormatArgs(
                                jpg=azure.media.TransformOutputCustomPresetFormatJpgArgs(
                                    filename_pattern="test{Basename}",
                                ),
                            ),
                            azure.media.TransformOutputCustomPresetFormatArgs(
                                mp4=azure.media.TransformOutputCustomPresetFormatMp4Args(
                                    filename_pattern="test{Bitrate}",
                                    output_files=[azure.media.TransformOutputCustomPresetFormatMp4OutputFileArgs(
                                        labels=[
                                            "test",
                                            "ppe",
                                        ],
                                    )],
                                ),
                            ),
                            azure.media.TransformOutputCustomPresetFormatArgs(
                                png=azure.media.TransformOutputCustomPresetFormatPngArgs(
                                    filename_pattern="test{Basename}",
                                ),
                            ),
                            azure.media.TransformOutputCustomPresetFormatArgs(
                                transport_stream=azure.media.TransformOutputCustomPresetFormatTransportStreamArgs(
                                    filename_pattern="test{Bitrate}",
                                    output_files=[azure.media.TransformOutputCustomPresetFormatTransportStreamOutputFileArgs(
                                        labels=["prod"],
                                    )],
                                ),
                            ),
                        ],
                        filter=azure.media.TransformOutputCustomPresetFilterArgs(
                            crop_rectangle=azure.media.TransformOutputCustomPresetFilterCropRectangleArgs(
                                height="240",
                                left="30",
                                top="360",
                                width="70",
                            ),
                            deinterlace=azure.media.TransformOutputCustomPresetFilterDeinterlaceArgs(
                                parity="TopFieldFirst",
                                mode="AutoPixelAdaptive",
                            ),
                            fade_in=azure.media.TransformOutputCustomPresetFilterFadeInArgs(
                                duration="PT5S",
                                fade_color="0xFF0000",
                                start="10",
                            ),
                            fade_out=azure.media.TransformOutputCustomPresetFilterFadeOutArgs(
                                duration="90%%",
                                fade_color="#FF0C7B",
                                start="10%%",
                            ),
                            rotation="Auto",
                            overlays=[
                                azure.media.TransformOutputCustomPresetFilterOverlayArgs(
                                    audio=azure.media.TransformOutputCustomPresetFilterOverlayAudioArgs(
                                        input_label="label.jpg",
                                        start="PT5S",
                                        end="PT30S",
                                        fade_in_duration="PT1S",
                                        fade_out_duration="PT2S",
                                        audio_gain_level=1,
                                    ),
                                ),
                                azure.media.TransformOutputCustomPresetFilterOverlayArgs(
                                    video=azure.media.TransformOutputCustomPresetFilterOverlayVideoArgs(
                                        input_label="label.jpg",
                                        start="PT5S",
                                        end="PT30S",
                                        fade_in_duration="PT1S",
                                        fade_out_duration="PT2S",
                                        audio_gain_level=1,
                                        opacity=1,
                                        position=azure.media.TransformOutputCustomPresetFilterOverlayVideoPositionArgs(
                                            height="180",
                                            left="20",
                                            top="240",
                                            width="140",
                                        ),
                                        crop_rectangle=azure.media.TransformOutputCustomPresetFilterOverlayVideoCropRectangleArgs(
                                            height="240",
                                            left="30",
                                            top="360",
                                            width="70",
                                        ),
                                    ),
                                ),
                            ],
                        ),
                    ),
                ),
            ])
        ```

        ## Import

        Transforms can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:media/transform:Transform example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaServices/media1/transforms/transform1
        ```

        :param str resource_name: The name of the resource.
        :param TransformArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TransformArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            TransformArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 media_services_account_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 outputs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TransformOutputArgs']]]]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TransformArgs.__new__(TransformArgs)

            __props__.__dict__["description"] = description
            if media_services_account_name is None and not opts.urn:
                raise TypeError("Missing required property 'media_services_account_name'")
            __props__.__dict__["media_services_account_name"] = media_services_account_name
            __props__.__dict__["name"] = name
            __props__.__dict__["outputs"] = outputs
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
        super(Transform, __self__).__init__(
            'azure:media/transform:Transform',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            media_services_account_name: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            outputs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TransformOutputArgs']]]]] = None,
            resource_group_name: Optional[pulumi.Input[str]] = None) -> 'Transform':
        """
        Get an existing Transform resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: An optional verbose description of the Transform.
        :param pulumi.Input[str] media_services_account_name: The Media Services account name. Changing this forces a new Transform to be created.
        :param pulumi.Input[str] name: The name which should be used for this Transform. Changing this forces a new Transform to be created.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TransformOutputArgs']]]] outputs: One or more `output` blocks as defined below. At least one `output` must be defined.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TransformState.__new__(_TransformState)

        __props__.__dict__["description"] = description
        __props__.__dict__["media_services_account_name"] = media_services_account_name
        __props__.__dict__["name"] = name
        __props__.__dict__["outputs"] = outputs
        __props__.__dict__["resource_group_name"] = resource_group_name
        return Transform(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        An optional verbose description of the Transform.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="mediaServicesAccountName")
    def media_services_account_name(self) -> pulumi.Output[str]:
        """
        The Media Services account name. Changing this forces a new Transform to be created.
        """
        return pulumi.get(self, "media_services_account_name")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name which should be used for this Transform. Changing this forces a new Transform to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def outputs(self) -> pulumi.Output[Optional[Sequence['outputs.TransformOutput']]]:
        """
        One or more `output` blocks as defined below. At least one `output` must be defined.
        """
        return pulumi.get(self, "outputs")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[str]:
        """
        The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
        """
        return pulumi.get(self, "resource_group_name")

