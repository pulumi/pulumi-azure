# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AccountFilterPresentationTimeRangeArgs',
    'AccountFilterPresentationTimeRangeArgsDict',
    'AccountFilterTrackSelectionArgs',
    'AccountFilterTrackSelectionArgsDict',
    'AccountFilterTrackSelectionConditionArgs',
    'AccountFilterTrackSelectionConditionArgsDict',
]

MYPY = False

if not MYPY:
    class AccountFilterPresentationTimeRangeArgsDict(TypedDict):
        unit_timescale_in_milliseconds: pulumi.Input[int]
        end_in_units: NotRequired[pulumi.Input[int]]
        force_end: NotRequired[pulumi.Input[bool]]
        live_backoff_in_units: NotRequired[pulumi.Input[int]]
        presentation_window_in_units: NotRequired[pulumi.Input[int]]
        start_in_units: NotRequired[pulumi.Input[int]]
elif False:
    AccountFilterPresentationTimeRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccountFilterPresentationTimeRangeArgs:
    def __init__(__self__, *,
                 unit_timescale_in_milliseconds: pulumi.Input[int],
                 end_in_units: Optional[pulumi.Input[int]] = None,
                 force_end: Optional[pulumi.Input[bool]] = None,
                 live_backoff_in_units: Optional[pulumi.Input[int]] = None,
                 presentation_window_in_units: Optional[pulumi.Input[int]] = None,
                 start_in_units: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "unit_timescale_in_milliseconds", unit_timescale_in_milliseconds)
        if end_in_units is not None:
            pulumi.set(__self__, "end_in_units", end_in_units)
        if force_end is not None:
            pulumi.set(__self__, "force_end", force_end)
        if live_backoff_in_units is not None:
            pulumi.set(__self__, "live_backoff_in_units", live_backoff_in_units)
        if presentation_window_in_units is not None:
            pulumi.set(__self__, "presentation_window_in_units", presentation_window_in_units)
        if start_in_units is not None:
            pulumi.set(__self__, "start_in_units", start_in_units)

    @property
    @pulumi.getter(name="unitTimescaleInMilliseconds")
    def unit_timescale_in_milliseconds(self) -> pulumi.Input[int]:
        return pulumi.get(self, "unit_timescale_in_milliseconds")

    @unit_timescale_in_milliseconds.setter
    def unit_timescale_in_milliseconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "unit_timescale_in_milliseconds", value)

    @property
    @pulumi.getter(name="endInUnits")
    def end_in_units(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_in_units")

    @end_in_units.setter
    def end_in_units(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_in_units", value)

    @property
    @pulumi.getter(name="forceEnd")
    def force_end(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "force_end")

    @force_end.setter
    def force_end(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_end", value)

    @property
    @pulumi.getter(name="liveBackoffInUnits")
    def live_backoff_in_units(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "live_backoff_in_units")

    @live_backoff_in_units.setter
    def live_backoff_in_units(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "live_backoff_in_units", value)

    @property
    @pulumi.getter(name="presentationWindowInUnits")
    def presentation_window_in_units(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "presentation_window_in_units")

    @presentation_window_in_units.setter
    def presentation_window_in_units(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "presentation_window_in_units", value)

    @property
    @pulumi.getter(name="startInUnits")
    def start_in_units(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_in_units")

    @start_in_units.setter
    def start_in_units(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_in_units", value)


if not MYPY:
    class AccountFilterTrackSelectionArgsDict(TypedDict):
        conditions: pulumi.Input[Sequence[pulumi.Input['AccountFilterTrackSelectionConditionArgsDict']]]
elif False:
    AccountFilterTrackSelectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccountFilterTrackSelectionArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['AccountFilterTrackSelectionConditionArgs']]]):
        pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['AccountFilterTrackSelectionConditionArgs']]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['AccountFilterTrackSelectionConditionArgs']]]):
        pulumi.set(self, "conditions", value)


if not MYPY:
    class AccountFilterTrackSelectionConditionArgsDict(TypedDict):
        operation: pulumi.Input[str]
        property: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    AccountFilterTrackSelectionConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccountFilterTrackSelectionConditionArgs:
    def __init__(__self__, *,
                 operation: pulumi.Input[str],
                 property: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def property(self) -> pulumi.Input[str]:
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: pulumi.Input[str]):
        pulumi.set(self, "property", value)


