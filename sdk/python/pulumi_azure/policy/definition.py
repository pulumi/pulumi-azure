# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class Definition(pulumi.CustomResource):
    """
    Manages a policy for all of the resource groups under the subscription.
    """
    def __init__(__self__, __name__, __opts__=None, description=None, display_name=None, metadata=None, mode=None, name=None, parameters=None, policy_rule=None, policy_type=None):
        """Create a Definition resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if description and not isinstance(description, basestring):
            raise TypeError('Expected property description to be a basestring')
        __self__.description = description
        """
        The description of the policy definition.
        """
        __props__['description'] = description

        if not display_name:
            raise TypeError('Missing required property display_name')
        elif not isinstance(display_name, basestring):
            raise TypeError('Expected property display_name to be a basestring')
        __self__.display_name = display_name
        """
        The display name of the policy definition.
        """
        __props__['displayName'] = display_name

        if metadata and not isinstance(metadata, basestring):
            raise TypeError('Expected property metadata to be a basestring')
        __self__.metadata = metadata
        """
        The metadata for the policy definition. This
        is a json object representing the rule that contains an if and
        a then block.
        """
        __props__['metadata'] = metadata

        if not mode:
            raise TypeError('Missing required property mode')
        elif not isinstance(mode, basestring):
            raise TypeError('Expected property mode to be a basestring')
        __self__.mode = mode
        """
        The policy mode that allows you to specify which resource
        types will be evaluated.  The value can be "All", "Indexed" or
        "NotSpecified". Changing this resource forces a new resource to be
        created.
        """
        __props__['mode'] = mode

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The name of the policy definition. Changing this forces a
        new resource to be created.
        """
        __props__['name'] = name

        if parameters and not isinstance(parameters, basestring):
            raise TypeError('Expected property parameters to be a basestring')
        __self__.parameters = parameters
        """
        Parameters for the policy definition. This field
        is a json object that allows you to parameterize your policy definition.
        """
        __props__['parameters'] = parameters

        if policy_rule and not isinstance(policy_rule, basestring):
            raise TypeError('Expected property policy_rule to be a basestring')
        __self__.policy_rule = policy_rule
        """
        The policy rule for the policy definition. This
        is a json object representing the rule that contains an if and
        a then block.
        """
        __props__['policyRule'] = policy_rule

        if not policy_type:
            raise TypeError('Missing required property policy_type')
        elif not isinstance(policy_type, basestring):
            raise TypeError('Expected property policy_type to be a basestring')
        __self__.policy_type = policy_type
        """
        The policy type.  The value can be "BuiltIn", "Custom"
        or "NotSpecified". Changing this forces a new resource to be created.
        """
        __props__['policyType'] = policy_type

        super(Definition, __self__).__init__(
            'azure:policy/definition:Definition',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'description' in outs:
            self.description = outs['description']
        if 'displayName' in outs:
            self.display_name = outs['displayName']
        if 'metadata' in outs:
            self.metadata = outs['metadata']
        if 'mode' in outs:
            self.mode = outs['mode']
        if 'name' in outs:
            self.name = outs['name']
        if 'parameters' in outs:
            self.parameters = outs['parameters']
        if 'policyRule' in outs:
            self.policy_rule = outs['policyRule']
        if 'policyType' in outs:
            self.policy_type = outs['policyType']
