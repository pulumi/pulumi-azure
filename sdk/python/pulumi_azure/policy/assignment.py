# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class Assignment(pulumi.CustomResource):
    description: pulumi.Output[str]
    """
    A description to use for this Policy Assignment. Changing this forces a new resource to be created.
    """
    display_name: pulumi.Output[str]
    """
    A friendly display name to use for this Policy Assignment. Changing this forces a new resource to be created.
    """
    identity: pulumi.Output[dict]
    """
    An `identity` block.
    """
    location: pulumi.Output[str]
    """
    The Azure location where this policy assignment should exist. This is required when an Identity is assigned. Changing this forces a new resource to be created.
    """
    name: pulumi.Output[str]
    """
    The name of the Policy Assignment. Changing this forces a new resource to be created.
    """
    not_scopes: pulumi.Output[list]
    """
    A list of the Policy Assignment's excluded scopes. The list must contain Resource IDs (such as Subscriptions e.g. `/subscriptions/00000000-0000-0000-000000000000` or Resource Groups e.g.`/subscriptions/00000000-0000-0000-000000000000/resourceGroups/myResourceGroup`). 
    """
    parameters: pulumi.Output[str]
    """
    Parameters for the policy definition. This field is a JSON object that maps to the Parameters field from the Policy Definition. Changing this forces a new resource to be created.
    """
    policy_definition_id: pulumi.Output[str]
    """
    The ID of the Policy Definition to be applied at the specified Scope.
    """
    scope: pulumi.Output[str]
    def __init__(__self__, resource_name, opts=None, description=None, display_name=None, identity=None, location=None, name=None, not_scopes=None, parameters=None, policy_definition_id=None, scope=None, __name__=None, __opts__=None):
        """
        Configures the specified Policy Definition at the specified Scope. Also, Policy Set Definitions are supported.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A description to use for this Policy Assignment. Changing this forces a new resource to be created.
        :param pulumi.Input[str] display_name: A friendly display name to use for this Policy Assignment. Changing this forces a new resource to be created.
        :param pulumi.Input[dict] identity: An `identity` block.
        :param pulumi.Input[str] location: The Azure location where this policy assignment should exist. This is required when an Identity is assigned. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: The name of the Policy Assignment. Changing this forces a new resource to be created.
        :param pulumi.Input[list] not_scopes: A list of the Policy Assignment's excluded scopes. The list must contain Resource IDs (such as Subscriptions e.g. `/subscriptions/00000000-0000-0000-000000000000` or Resource Groups e.g.`/subscriptions/00000000-0000-0000-000000000000/resourceGroups/myResourceGroup`). 
        :param pulumi.Input[str] parameters: Parameters for the policy definition. This field is a JSON object that maps to the Parameters field from the Policy Definition. Changing this forces a new resource to be created.
        :param pulumi.Input[str] policy_definition_id: The ID of the Policy Definition to be applied at the specified Scope.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['description'] = description

        __props__['display_name'] = display_name

        __props__['identity'] = identity

        __props__['location'] = location

        __props__['name'] = name

        __props__['not_scopes'] = not_scopes

        __props__['parameters'] = parameters

        if policy_definition_id is None:
            raise TypeError('Missing required property policy_definition_id')
        __props__['policy_definition_id'] = policy_definition_id

        if scope is None:
            raise TypeError('Missing required property scope')
        __props__['scope'] = scope

        super(Assignment, __self__).__init__(
            'azure:policy/assignment:Assignment',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

