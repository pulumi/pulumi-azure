# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'PolicyFileShareBackupArgs',
    'PolicyFileShareBackupHourlyArgs',
    'PolicyFileShareRetentionDailyArgs',
    'PolicyFileShareRetentionMonthlyArgs',
    'PolicyFileShareRetentionWeeklyArgs',
    'PolicyFileShareRetentionYearlyArgs',
    'PolicyVMBackupArgs',
    'PolicyVMInstantRestoreResourceGroupArgs',
    'PolicyVMRetentionDailyArgs',
    'PolicyVMRetentionMonthlyArgs',
    'PolicyVMRetentionWeeklyArgs',
    'PolicyVMRetentionYearlyArgs',
    'PolicyVMWorkloadProtectionPolicyArgs',
    'PolicyVMWorkloadProtectionPolicyBackupArgs',
    'PolicyVMWorkloadProtectionPolicyRetentionDailyArgs',
    'PolicyVMWorkloadProtectionPolicyRetentionMonthlyArgs',
    'PolicyVMWorkloadProtectionPolicyRetentionWeeklyArgs',
    'PolicyVMWorkloadProtectionPolicyRetentionYearlyArgs',
    'PolicyVMWorkloadProtectionPolicySimpleRetentionArgs',
    'PolicyVMWorkloadSettingsArgs',
]

@pulumi.input_type
class PolicyFileShareBackupArgs:
    def __init__(__self__, *,
                 frequency: pulumi.Input[str],
                 hourly: Optional[pulumi.Input['PolicyFileShareBackupHourlyArgs']] = None,
                 time: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] frequency: Sets the backup frequency. Possible values are `Daily` and `Hourly`. 
               
               > **NOTE:** This argument is made available for consistency with VM backup policies and to allow for potential future support of weekly backups
        :param pulumi.Input['PolicyFileShareBackupHourlyArgs'] hourly: A `hourly` block defined as below. This is required when `frequency` is set to `Hourly`.
        :param pulumi.Input[str] time: The time of day to perform the backup in 24-hour format. Times must be either on the hour or half hour (e.g. 12:00, 12:30, 13:00, etc.)
               
               > **NOTE:** `time` is required when `frequency` is set to `Daily`.
        """
        PolicyFileShareBackupArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            frequency=frequency,
            hourly=hourly,
            time=time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             frequency: pulumi.Input[str],
             hourly: Optional[pulumi.Input['PolicyFileShareBackupHourlyArgs']] = None,
             time: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("frequency", frequency)
        if hourly is not None:
            _setter("hourly", hourly)
        if time is not None:
            _setter("time", time)

    @property
    @pulumi.getter
    def frequency(self) -> pulumi.Input[str]:
        """
        Sets the backup frequency. Possible values are `Daily` and `Hourly`. 

        > **NOTE:** This argument is made available for consistency with VM backup policies and to allow for potential future support of weekly backups
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: pulumi.Input[str]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter
    def hourly(self) -> Optional[pulumi.Input['PolicyFileShareBackupHourlyArgs']]:
        """
        A `hourly` block defined as below. This is required when `frequency` is set to `Hourly`.
        """
        return pulumi.get(self, "hourly")

    @hourly.setter
    def hourly(self, value: Optional[pulumi.Input['PolicyFileShareBackupHourlyArgs']]):
        pulumi.set(self, "hourly", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        """
        The time of day to perform the backup in 24-hour format. Times must be either on the hour or half hour (e.g. 12:00, 12:30, 13:00, etc.)

        > **NOTE:** `time` is required when `frequency` is set to `Daily`.
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)


@pulumi.input_type
class PolicyFileShareBackupHourlyArgs:
    def __init__(__self__, *,
                 interval: pulumi.Input[int],
                 start_time: pulumi.Input[str],
                 window_duration: pulumi.Input[int]):
        """
        :param pulumi.Input[int] interval: Specifies the interval at which backup needs to be triggered. Possible values are `4`, `6`, `8` and `12`
        :param pulumi.Input[str] start_time: Specifies the start time of the hourly backup. The time format should be in 24-hour format. Times must be either on the hour or half hour (e.g. 12:00, 12:30, 13:00, etc.)
        :param pulumi.Input[int] window_duration: Species the duration of the backup window in hours. Details could be found [here](https://learn.microsoft.com/en-us/azure/backup/backup-azure-files-faq#what-does-the-duration-attribute-in-azure-files-backup-policy-signify-)
        """
        PolicyFileShareBackupHourlyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            interval=interval,
            start_time=start_time,
            window_duration=window_duration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             interval: pulumi.Input[int],
             start_time: pulumi.Input[str],
             window_duration: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("interval", interval)
        _setter("start_time", start_time)
        _setter("window_duration", window_duration)

    @property
    @pulumi.getter
    def interval(self) -> pulumi.Input[int]:
        """
        Specifies the interval at which backup needs to be triggered. Possible values are `4`, `6`, `8` and `12`
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: pulumi.Input[int]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        """
        Specifies the start time of the hourly backup. The time format should be in 24-hour format. Times must be either on the hour or half hour (e.g. 12:00, 12:30, 13:00, etc.)
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="windowDuration")
    def window_duration(self) -> pulumi.Input[int]:
        """
        Species the duration of the backup window in hours. Details could be found [here](https://learn.microsoft.com/en-us/azure/backup/backup-azure-files-faq#what-does-the-duration-attribute-in-azure-files-backup-policy-signify-)
        """
        return pulumi.get(self, "window_duration")

    @window_duration.setter
    def window_duration(self, value: pulumi.Input[int]):
        pulumi.set(self, "window_duration", value)


@pulumi.input_type
class PolicyFileShareRetentionDailyArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[int]):
        """
        :param pulumi.Input[int] count: The number of daily backups to keep. Must be between `1` and `200` (inclusive)
        """
        PolicyFileShareRetentionDailyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            count=count,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             count: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("count", count)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        """
        The number of daily backups to keep. Must be between `1` and `200` (inclusive)
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)


@pulumi.input_type
class PolicyFileShareRetentionMonthlyArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[int],
                 days: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 include_last_days: Optional[pulumi.Input[bool]] = None,
                 weekdays: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 weeks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] count: The number of monthly backups to keep. Must be between `1` and `120`
        :param pulumi.Input[Sequence[pulumi.Input[int]]] days: The days of the month to retain backups of. Must be between `1` and `31`.
        :param pulumi.Input[bool] include_last_days: Including the last day of the month, default to `false`.
               
               > **NOTE:**: Either `weekdays` and `weeks` or `days` and `include_last_days` must be specified.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] weekdays: The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] weeks: The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
        """
        PolicyFileShareRetentionMonthlyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            count=count,
            days=days,
            include_last_days=include_last_days,
            weekdays=weekdays,
            weeks=weeks,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             count: pulumi.Input[int],
             days: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             include_last_days: Optional[pulumi.Input[bool]] = None,
             weekdays: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             weeks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("count", count)
        if days is not None:
            _setter("days", days)
        if include_last_days is not None:
            _setter("include_last_days", include_last_days)
        if weekdays is not None:
            _setter("weekdays", weekdays)
        if weeks is not None:
            _setter("weeks", weeks)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        """
        The number of monthly backups to keep. Must be between `1` and `120`
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        The days of the month to retain backups of. Must be between `1` and `31`.
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "days", value)

    @property
    @pulumi.getter(name="includeLastDays")
    def include_last_days(self) -> Optional[pulumi.Input[bool]]:
        """
        Including the last day of the month, default to `false`.

        > **NOTE:**: Either `weekdays` and `weeks` or `days` and `include_last_days` must be specified.
        """
        return pulumi.get(self, "include_last_days")

    @include_last_days.setter
    def include_last_days(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_last_days", value)

    @property
    @pulumi.getter
    def weekdays(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
        """
        return pulumi.get(self, "weekdays")

    @weekdays.setter
    def weekdays(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "weekdays", value)

    @property
    @pulumi.getter
    def weeks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
        """
        return pulumi.get(self, "weeks")

    @weeks.setter
    def weeks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "weeks", value)


@pulumi.input_type
class PolicyFileShareRetentionWeeklyArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[int],
                 weekdays: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[int] count: The number of daily backups to keep. Must be between `1` and `200` (inclusive)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] weekdays: The weekday backups to retain. Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
        """
        PolicyFileShareRetentionWeeklyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            count=count,
            weekdays=weekdays,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             count: pulumi.Input[int],
             weekdays: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("count", count)
        _setter("weekdays", weekdays)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        """
        The number of daily backups to keep. Must be between `1` and `200` (inclusive)
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def weekdays(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The weekday backups to retain. Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
        """
        return pulumi.get(self, "weekdays")

    @weekdays.setter
    def weekdays(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "weekdays", value)


@pulumi.input_type
class PolicyFileShareRetentionYearlyArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[int],
                 months: pulumi.Input[Sequence[pulumi.Input[str]]],
                 days: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 include_last_days: Optional[pulumi.Input[bool]] = None,
                 weekdays: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 weeks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] count: The number of yearly backups to keep. Must be between `1` and `10`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] months: The months of the year to retain backups of. Must be one of `January`, `February`, `March`, `April`, `May`, `June`, `July`, `Augest`, `September`, `October`, `November` and `December`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] days: The days of the month to retain backups of. Must be between `1` and `31`.
        :param pulumi.Input[bool] include_last_days: Including the last day of the month, default to `false`.
               
               > **NOTE:**: Either `weekdays` and `weeks` or `days` and `include_last_days` must be specified.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] weekdays: The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] weeks: The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
        """
        PolicyFileShareRetentionYearlyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            count=count,
            months=months,
            days=days,
            include_last_days=include_last_days,
            weekdays=weekdays,
            weeks=weeks,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             count: pulumi.Input[int],
             months: pulumi.Input[Sequence[pulumi.Input[str]]],
             days: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             include_last_days: Optional[pulumi.Input[bool]] = None,
             weekdays: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             weeks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("count", count)
        _setter("months", months)
        if days is not None:
            _setter("days", days)
        if include_last_days is not None:
            _setter("include_last_days", include_last_days)
        if weekdays is not None:
            _setter("weekdays", weekdays)
        if weeks is not None:
            _setter("weeks", weeks)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        """
        The number of yearly backups to keep. Must be between `1` and `10`
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def months(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The months of the year to retain backups of. Must be one of `January`, `February`, `March`, `April`, `May`, `June`, `July`, `Augest`, `September`, `October`, `November` and `December`.
        """
        return pulumi.get(self, "months")

    @months.setter
    def months(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "months", value)

    @property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        The days of the month to retain backups of. Must be between `1` and `31`.
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "days", value)

    @property
    @pulumi.getter(name="includeLastDays")
    def include_last_days(self) -> Optional[pulumi.Input[bool]]:
        """
        Including the last day of the month, default to `false`.

        > **NOTE:**: Either `weekdays` and `weeks` or `days` and `include_last_days` must be specified.
        """
        return pulumi.get(self, "include_last_days")

    @include_last_days.setter
    def include_last_days(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_last_days", value)

    @property
    @pulumi.getter
    def weekdays(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
        """
        return pulumi.get(self, "weekdays")

    @weekdays.setter
    def weekdays(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "weekdays", value)

    @property
    @pulumi.getter
    def weeks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
        """
        return pulumi.get(self, "weeks")

    @weeks.setter
    def weeks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "weeks", value)


@pulumi.input_type
class PolicyVMBackupArgs:
    def __init__(__self__, *,
                 frequency: pulumi.Input[str],
                 time: pulumi.Input[str],
                 hour_duration: Optional[pulumi.Input[int]] = None,
                 hour_interval: Optional[pulumi.Input[int]] = None,
                 weekdays: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] frequency: Sets the backup frequency. Possible values are `Hourly`, `Daily` and `Weekly`.
        :param pulumi.Input[str] time: The time of day to perform the backup in 24hour format.
        :param pulumi.Input[int] hour_duration: Duration of the backup window in hours. Possible values are between `4` and `24` This is used when `frequency` is `Hourly`.
               
               > **NOTE:** `hour_duration` must be multiplier of `hour_interval`
        :param pulumi.Input[int] hour_interval: Interval in hour at which backup is triggered. Possible values are `4`, `6`, `8` and `12`. This is used when `frequency` is `Hourly`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] weekdays: The days of the week to perform backups on. Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`. This is used when `frequency` is `Weekly`.
        """
        PolicyVMBackupArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            frequency=frequency,
            time=time,
            hour_duration=hour_duration,
            hour_interval=hour_interval,
            weekdays=weekdays,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             frequency: pulumi.Input[str],
             time: pulumi.Input[str],
             hour_duration: Optional[pulumi.Input[int]] = None,
             hour_interval: Optional[pulumi.Input[int]] = None,
             weekdays: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("frequency", frequency)
        _setter("time", time)
        if hour_duration is not None:
            _setter("hour_duration", hour_duration)
        if hour_interval is not None:
            _setter("hour_interval", hour_interval)
        if weekdays is not None:
            _setter("weekdays", weekdays)

    @property
    @pulumi.getter
    def frequency(self) -> pulumi.Input[str]:
        """
        Sets the backup frequency. Possible values are `Hourly`, `Daily` and `Weekly`.
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: pulumi.Input[str]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter
    def time(self) -> pulumi.Input[str]:
        """
        The time of day to perform the backup in 24hour format.
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: pulumi.Input[str]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter(name="hourDuration")
    def hour_duration(self) -> Optional[pulumi.Input[int]]:
        """
        Duration of the backup window in hours. Possible values are between `4` and `24` This is used when `frequency` is `Hourly`.

        > **NOTE:** `hour_duration` must be multiplier of `hour_interval`
        """
        return pulumi.get(self, "hour_duration")

    @hour_duration.setter
    def hour_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hour_duration", value)

    @property
    @pulumi.getter(name="hourInterval")
    def hour_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval in hour at which backup is triggered. Possible values are `4`, `6`, `8` and `12`. This is used when `frequency` is `Hourly`.
        """
        return pulumi.get(self, "hour_interval")

    @hour_interval.setter
    def hour_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hour_interval", value)

    @property
    @pulumi.getter
    def weekdays(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The days of the week to perform backups on. Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`. This is used when `frequency` is `Weekly`.
        """
        return pulumi.get(self, "weekdays")

    @weekdays.setter
    def weekdays(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "weekdays", value)


@pulumi.input_type
class PolicyVMInstantRestoreResourceGroupArgs:
    def __init__(__self__, *,
                 prefix: pulumi.Input[str],
                 suffix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] prefix: The prefix for the `instant_restore_resource_group` name.
        :param pulumi.Input[str] suffix: The suffix for the `instant_restore_resource_group` name.
        """
        PolicyVMInstantRestoreResourceGroupArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            prefix=prefix,
            suffix=suffix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             prefix: pulumi.Input[str],
             suffix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("prefix", prefix)
        if suffix is not None:
            _setter("suffix", suffix)

    @property
    @pulumi.getter
    def prefix(self) -> pulumi.Input[str]:
        """
        The prefix for the `instant_restore_resource_group` name.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        """
        The suffix for the `instant_restore_resource_group` name.
        """
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)


@pulumi.input_type
class PolicyVMRetentionDailyArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[int]):
        """
        :param pulumi.Input[int] count: The number of daily backups to keep. Must be between `7` and `9999`.
               
               > **Note:** Azure previously allows this field to be set to a minimum of 1 (day) - but for new resources/to update this value on existing Backup Policies - this value must now be at least 7 (days).
        """
        PolicyVMRetentionDailyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            count=count,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             count: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("count", count)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        """
        The number of daily backups to keep. Must be between `7` and `9999`.

        > **Note:** Azure previously allows this field to be set to a minimum of 1 (day) - but for new resources/to update this value on existing Backup Policies - this value must now be at least 7 (days).
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)


@pulumi.input_type
class PolicyVMRetentionMonthlyArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[int],
                 days: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 include_last_days: Optional[pulumi.Input[bool]] = None,
                 weekdays: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 weeks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] count: The number of monthly backups to keep. Must be between `1` and `9999`
        :param pulumi.Input[Sequence[pulumi.Input[int]]] days: The days of the month to retain backups of. Must be between `1` and `31`.
        :param pulumi.Input[bool] include_last_days: Including the last day of the month, default to `false`.
               
               > **NOTE:**: Either `weekdays` and `weeks` or `days` and `include_last_days` must be specified.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] weekdays: The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] weeks: The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
        """
        PolicyVMRetentionMonthlyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            count=count,
            days=days,
            include_last_days=include_last_days,
            weekdays=weekdays,
            weeks=weeks,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             count: pulumi.Input[int],
             days: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             include_last_days: Optional[pulumi.Input[bool]] = None,
             weekdays: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             weeks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("count", count)
        if days is not None:
            _setter("days", days)
        if include_last_days is not None:
            _setter("include_last_days", include_last_days)
        if weekdays is not None:
            _setter("weekdays", weekdays)
        if weeks is not None:
            _setter("weeks", weeks)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        """
        The number of monthly backups to keep. Must be between `1` and `9999`
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        The days of the month to retain backups of. Must be between `1` and `31`.
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "days", value)

    @property
    @pulumi.getter(name="includeLastDays")
    def include_last_days(self) -> Optional[pulumi.Input[bool]]:
        """
        Including the last day of the month, default to `false`.

        > **NOTE:**: Either `weekdays` and `weeks` or `days` and `include_last_days` must be specified.
        """
        return pulumi.get(self, "include_last_days")

    @include_last_days.setter
    def include_last_days(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_last_days", value)

    @property
    @pulumi.getter
    def weekdays(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
        """
        return pulumi.get(self, "weekdays")

    @weekdays.setter
    def weekdays(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "weekdays", value)

    @property
    @pulumi.getter
    def weeks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
        """
        return pulumi.get(self, "weeks")

    @weeks.setter
    def weeks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "weeks", value)


@pulumi.input_type
class PolicyVMRetentionWeeklyArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[int],
                 weekdays: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[int] count: The number of weekly backups to keep. Must be between `1` and `9999`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] weekdays: The weekday backups to retain. Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
        """
        PolicyVMRetentionWeeklyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            count=count,
            weekdays=weekdays,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             count: pulumi.Input[int],
             weekdays: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("count", count)
        _setter("weekdays", weekdays)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        """
        The number of weekly backups to keep. Must be between `1` and `9999`
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def weekdays(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The weekday backups to retain. Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
        """
        return pulumi.get(self, "weekdays")

    @weekdays.setter
    def weekdays(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "weekdays", value)


@pulumi.input_type
class PolicyVMRetentionYearlyArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[int],
                 months: pulumi.Input[Sequence[pulumi.Input[str]]],
                 days: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 include_last_days: Optional[pulumi.Input[bool]] = None,
                 weekdays: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 weeks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] count: The number of yearly backups to keep. Must be between `1` and `9999`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] months: The months of the year to retain backups of. Must be one of `January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`, `October`, `November` and `December`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] days: The days of the month to retain backups of. Must be between `1` and `31`.
        :param pulumi.Input[bool] include_last_days: Including the last day of the month, default to `false`.
               
               > **NOTE:**: Either `weekdays` and `weeks` or `days` and `include_last_days` must be specified.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] weekdays: The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] weeks: The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
        """
        PolicyVMRetentionYearlyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            count=count,
            months=months,
            days=days,
            include_last_days=include_last_days,
            weekdays=weekdays,
            weeks=weeks,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             count: pulumi.Input[int],
             months: pulumi.Input[Sequence[pulumi.Input[str]]],
             days: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             include_last_days: Optional[pulumi.Input[bool]] = None,
             weekdays: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             weeks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("count", count)
        _setter("months", months)
        if days is not None:
            _setter("days", days)
        if include_last_days is not None:
            _setter("include_last_days", include_last_days)
        if weekdays is not None:
            _setter("weekdays", weekdays)
        if weeks is not None:
            _setter("weeks", weeks)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        """
        The number of yearly backups to keep. Must be between `1` and `9999`
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def months(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The months of the year to retain backups of. Must be one of `January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`, `October`, `November` and `December`.
        """
        return pulumi.get(self, "months")

    @months.setter
    def months(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "months", value)

    @property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        The days of the month to retain backups of. Must be between `1` and `31`.
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "days", value)

    @property
    @pulumi.getter(name="includeLastDays")
    def include_last_days(self) -> Optional[pulumi.Input[bool]]:
        """
        Including the last day of the month, default to `false`.

        > **NOTE:**: Either `weekdays` and `weeks` or `days` and `include_last_days` must be specified.
        """
        return pulumi.get(self, "include_last_days")

    @include_last_days.setter
    def include_last_days(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_last_days", value)

    @property
    @pulumi.getter
    def weekdays(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
        """
        return pulumi.get(self, "weekdays")

    @weekdays.setter
    def weekdays(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "weekdays", value)

    @property
    @pulumi.getter
    def weeks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
        """
        return pulumi.get(self, "weeks")

    @weeks.setter
    def weeks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "weeks", value)


@pulumi.input_type
class PolicyVMWorkloadProtectionPolicyArgs:
    def __init__(__self__, *,
                 backup: pulumi.Input['PolicyVMWorkloadProtectionPolicyBackupArgs'],
                 policy_type: pulumi.Input[str],
                 retention_daily: Optional[pulumi.Input['PolicyVMWorkloadProtectionPolicyRetentionDailyArgs']] = None,
                 retention_monthly: Optional[pulumi.Input['PolicyVMWorkloadProtectionPolicyRetentionMonthlyArgs']] = None,
                 retention_weekly: Optional[pulumi.Input['PolicyVMWorkloadProtectionPolicyRetentionWeeklyArgs']] = None,
                 retention_yearly: Optional[pulumi.Input['PolicyVMWorkloadProtectionPolicyRetentionYearlyArgs']] = None,
                 simple_retention: Optional[pulumi.Input['PolicyVMWorkloadProtectionPolicySimpleRetentionArgs']] = None):
        """
        :param pulumi.Input['PolicyVMWorkloadProtectionPolicyBackupArgs'] backup: A `backup` block as defined below.
        :param pulumi.Input[str] policy_type: The type of the VM Workload Backup Policy. Possible values are `Differential`, `Full`, `Incremental` and `Log`.
        :param pulumi.Input['PolicyVMWorkloadProtectionPolicyRetentionDailyArgs'] retention_daily: A `retention_daily` block as defined below.
        :param pulumi.Input['PolicyVMWorkloadProtectionPolicyRetentionMonthlyArgs'] retention_monthly: A `retention_monthly` block as defined below.
        :param pulumi.Input['PolicyVMWorkloadProtectionPolicyRetentionWeeklyArgs'] retention_weekly: A `retention_weekly` block as defined below.
        :param pulumi.Input['PolicyVMWorkloadProtectionPolicyRetentionYearlyArgs'] retention_yearly: A `retention_yearly` block as defined below.
        :param pulumi.Input['PolicyVMWorkloadProtectionPolicySimpleRetentionArgs'] simple_retention: A `simple_retention` block as defined below.
        """
        PolicyVMWorkloadProtectionPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            backup=backup,
            policy_type=policy_type,
            retention_daily=retention_daily,
            retention_monthly=retention_monthly,
            retention_weekly=retention_weekly,
            retention_yearly=retention_yearly,
            simple_retention=simple_retention,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             backup: pulumi.Input['PolicyVMWorkloadProtectionPolicyBackupArgs'],
             policy_type: pulumi.Input[str],
             retention_daily: Optional[pulumi.Input['PolicyVMWorkloadProtectionPolicyRetentionDailyArgs']] = None,
             retention_monthly: Optional[pulumi.Input['PolicyVMWorkloadProtectionPolicyRetentionMonthlyArgs']] = None,
             retention_weekly: Optional[pulumi.Input['PolicyVMWorkloadProtectionPolicyRetentionWeeklyArgs']] = None,
             retention_yearly: Optional[pulumi.Input['PolicyVMWorkloadProtectionPolicyRetentionYearlyArgs']] = None,
             simple_retention: Optional[pulumi.Input['PolicyVMWorkloadProtectionPolicySimpleRetentionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("backup", backup)
        _setter("policy_type", policy_type)
        if retention_daily is not None:
            _setter("retention_daily", retention_daily)
        if retention_monthly is not None:
            _setter("retention_monthly", retention_monthly)
        if retention_weekly is not None:
            _setter("retention_weekly", retention_weekly)
        if retention_yearly is not None:
            _setter("retention_yearly", retention_yearly)
        if simple_retention is not None:
            _setter("simple_retention", simple_retention)

    @property
    @pulumi.getter
    def backup(self) -> pulumi.Input['PolicyVMWorkloadProtectionPolicyBackupArgs']:
        """
        A `backup` block as defined below.
        """
        return pulumi.get(self, "backup")

    @backup.setter
    def backup(self, value: pulumi.Input['PolicyVMWorkloadProtectionPolicyBackupArgs']):
        pulumi.set(self, "backup", value)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> pulumi.Input[str]:
        """
        The type of the VM Workload Backup Policy. Possible values are `Differential`, `Full`, `Incremental` and `Log`.
        """
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_type", value)

    @property
    @pulumi.getter(name="retentionDaily")
    def retention_daily(self) -> Optional[pulumi.Input['PolicyVMWorkloadProtectionPolicyRetentionDailyArgs']]:
        """
        A `retention_daily` block as defined below.
        """
        return pulumi.get(self, "retention_daily")

    @retention_daily.setter
    def retention_daily(self, value: Optional[pulumi.Input['PolicyVMWorkloadProtectionPolicyRetentionDailyArgs']]):
        pulumi.set(self, "retention_daily", value)

    @property
    @pulumi.getter(name="retentionMonthly")
    def retention_monthly(self) -> Optional[pulumi.Input['PolicyVMWorkloadProtectionPolicyRetentionMonthlyArgs']]:
        """
        A `retention_monthly` block as defined below.
        """
        return pulumi.get(self, "retention_monthly")

    @retention_monthly.setter
    def retention_monthly(self, value: Optional[pulumi.Input['PolicyVMWorkloadProtectionPolicyRetentionMonthlyArgs']]):
        pulumi.set(self, "retention_monthly", value)

    @property
    @pulumi.getter(name="retentionWeekly")
    def retention_weekly(self) -> Optional[pulumi.Input['PolicyVMWorkloadProtectionPolicyRetentionWeeklyArgs']]:
        """
        A `retention_weekly` block as defined below.
        """
        return pulumi.get(self, "retention_weekly")

    @retention_weekly.setter
    def retention_weekly(self, value: Optional[pulumi.Input['PolicyVMWorkloadProtectionPolicyRetentionWeeklyArgs']]):
        pulumi.set(self, "retention_weekly", value)

    @property
    @pulumi.getter(name="retentionYearly")
    def retention_yearly(self) -> Optional[pulumi.Input['PolicyVMWorkloadProtectionPolicyRetentionYearlyArgs']]:
        """
        A `retention_yearly` block as defined below.
        """
        return pulumi.get(self, "retention_yearly")

    @retention_yearly.setter
    def retention_yearly(self, value: Optional[pulumi.Input['PolicyVMWorkloadProtectionPolicyRetentionYearlyArgs']]):
        pulumi.set(self, "retention_yearly", value)

    @property
    @pulumi.getter(name="simpleRetention")
    def simple_retention(self) -> Optional[pulumi.Input['PolicyVMWorkloadProtectionPolicySimpleRetentionArgs']]:
        """
        A `simple_retention` block as defined below.
        """
        return pulumi.get(self, "simple_retention")

    @simple_retention.setter
    def simple_retention(self, value: Optional[pulumi.Input['PolicyVMWorkloadProtectionPolicySimpleRetentionArgs']]):
        pulumi.set(self, "simple_retention", value)


@pulumi.input_type
class PolicyVMWorkloadProtectionPolicyBackupArgs:
    def __init__(__self__, *,
                 frequency: Optional[pulumi.Input[str]] = None,
                 frequency_in_minutes: Optional[pulumi.Input[int]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 weekdays: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] frequency: The backup frequency for the VM Workload Backup Policy. Possible values are `Daily` and `Weekly`.
        :param pulumi.Input[int] frequency_in_minutes: The backup frequency in minutes for the VM Workload Backup Policy. Possible values are `15`, `30`, `60`, `120`, `240`, `480`, `720` and `1440`.
        :param pulumi.Input[str] time: The time of day to perform the backup in 24hour format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] weekdays: The days of the week to perform backups on. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`. This is used when `frequency` is `Weekly`.
        """
        PolicyVMWorkloadProtectionPolicyBackupArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            frequency=frequency,
            frequency_in_minutes=frequency_in_minutes,
            time=time,
            weekdays=weekdays,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             frequency: Optional[pulumi.Input[str]] = None,
             frequency_in_minutes: Optional[pulumi.Input[int]] = None,
             time: Optional[pulumi.Input[str]] = None,
             weekdays: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if frequency is not None:
            _setter("frequency", frequency)
        if frequency_in_minutes is not None:
            _setter("frequency_in_minutes", frequency_in_minutes)
        if time is not None:
            _setter("time", time)
        if weekdays is not None:
            _setter("weekdays", weekdays)

    @property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input[str]]:
        """
        The backup frequency for the VM Workload Backup Policy. Possible values are `Daily` and `Weekly`.
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter(name="frequencyInMinutes")
    def frequency_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The backup frequency in minutes for the VM Workload Backup Policy. Possible values are `15`, `30`, `60`, `120`, `240`, `480`, `720` and `1440`.
        """
        return pulumi.get(self, "frequency_in_minutes")

    @frequency_in_minutes.setter
    def frequency_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frequency_in_minutes", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        """
        The time of day to perform the backup in 24hour format.
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def weekdays(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The days of the week to perform backups on. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`. This is used when `frequency` is `Weekly`.
        """
        return pulumi.get(self, "weekdays")

    @weekdays.setter
    def weekdays(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "weekdays", value)


@pulumi.input_type
class PolicyVMWorkloadProtectionPolicyRetentionDailyArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[int]):
        """
        :param pulumi.Input[int] count: The number of daily backups to keep. Possible values are between `7` and `9999`.
        """
        PolicyVMWorkloadProtectionPolicyRetentionDailyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            count=count,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             count: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("count", count)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        """
        The number of daily backups to keep. Possible values are between `7` and `9999`.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)


@pulumi.input_type
class PolicyVMWorkloadProtectionPolicyRetentionMonthlyArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[int],
                 format_type: pulumi.Input[str],
                 monthdays: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 weekdays: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 weeks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] count: The number of monthly backups to keep. Must be between `1` and `1188`.
        :param pulumi.Input[str] format_type: The retention schedule format type for monthly retention policy. Possible values are `Daily` and `Weekly`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] monthdays: The monthday backups to retain. Possible values are between `0` and `28`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] weekdays: The weekday backups to retain. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] weeks: The weeks of the month to retain backups of. Possible values are `First`, `Second`, `Third`, `Fourth` and `Last`.
        """
        PolicyVMWorkloadProtectionPolicyRetentionMonthlyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            count=count,
            format_type=format_type,
            monthdays=monthdays,
            weekdays=weekdays,
            weeks=weeks,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             count: pulumi.Input[int],
             format_type: pulumi.Input[str],
             monthdays: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             weekdays: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             weeks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("count", count)
        _setter("format_type", format_type)
        if monthdays is not None:
            _setter("monthdays", monthdays)
        if weekdays is not None:
            _setter("weekdays", weekdays)
        if weeks is not None:
            _setter("weeks", weeks)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        """
        The number of monthly backups to keep. Must be between `1` and `1188`.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        """
        The retention schedule format type for monthly retention policy. Possible values are `Daily` and `Weekly`.
        """
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)

    @property
    @pulumi.getter
    def monthdays(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        The monthday backups to retain. Possible values are between `0` and `28`.
        """
        return pulumi.get(self, "monthdays")

    @monthdays.setter
    def monthdays(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "monthdays", value)

    @property
    @pulumi.getter
    def weekdays(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The weekday backups to retain. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
        """
        return pulumi.get(self, "weekdays")

    @weekdays.setter
    def weekdays(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "weekdays", value)

    @property
    @pulumi.getter
    def weeks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The weeks of the month to retain backups of. Possible values are `First`, `Second`, `Third`, `Fourth` and `Last`.
        """
        return pulumi.get(self, "weeks")

    @weeks.setter
    def weeks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "weeks", value)


@pulumi.input_type
class PolicyVMWorkloadProtectionPolicyRetentionWeeklyArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[int],
                 weekdays: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[int] count: The number of weekly backups to keep. Possible values are between `1` and `5163`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] weekdays: The weekday backups to retain. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
        """
        PolicyVMWorkloadProtectionPolicyRetentionWeeklyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            count=count,
            weekdays=weekdays,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             count: pulumi.Input[int],
             weekdays: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("count", count)
        _setter("weekdays", weekdays)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        """
        The number of weekly backups to keep. Possible values are between `1` and `5163`.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def weekdays(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The weekday backups to retain. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
        """
        return pulumi.get(self, "weekdays")

    @weekdays.setter
    def weekdays(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "weekdays", value)


@pulumi.input_type
class PolicyVMWorkloadProtectionPolicyRetentionYearlyArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[int],
                 format_type: pulumi.Input[str],
                 months: pulumi.Input[Sequence[pulumi.Input[str]]],
                 monthdays: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 weekdays: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 weeks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] count: The number of yearly backups to keep. Possible values are between `1` and `99`
        :param pulumi.Input[str] format_type: The retention schedule format type for yearly retention policy. Possible values are `Daily` and `Weekly`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] months: The months of the year to retain backups of. Possible values are `January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`, `October`, `November` and `December`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] monthdays: The monthday backups to retain. Possible values are between `0` and `28`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] weekdays: The weekday backups to retain. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] weeks: The weeks of the month to retain backups of. Possible values are `First`, `Second`, `Third`, `Fourth`, `Last`.
        """
        PolicyVMWorkloadProtectionPolicyRetentionYearlyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            count=count,
            format_type=format_type,
            months=months,
            monthdays=monthdays,
            weekdays=weekdays,
            weeks=weeks,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             count: pulumi.Input[int],
             format_type: pulumi.Input[str],
             months: pulumi.Input[Sequence[pulumi.Input[str]]],
             monthdays: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             weekdays: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             weeks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("count", count)
        _setter("format_type", format_type)
        _setter("months", months)
        if monthdays is not None:
            _setter("monthdays", monthdays)
        if weekdays is not None:
            _setter("weekdays", weekdays)
        if weeks is not None:
            _setter("weeks", weeks)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        """
        The number of yearly backups to keep. Possible values are between `1` and `99`
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        """
        The retention schedule format type for yearly retention policy. Possible values are `Daily` and `Weekly`.
        """
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)

    @property
    @pulumi.getter
    def months(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The months of the year to retain backups of. Possible values are `January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`, `October`, `November` and `December`.
        """
        return pulumi.get(self, "months")

    @months.setter
    def months(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "months", value)

    @property
    @pulumi.getter
    def monthdays(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        The monthday backups to retain. Possible values are between `0` and `28`.
        """
        return pulumi.get(self, "monthdays")

    @monthdays.setter
    def monthdays(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "monthdays", value)

    @property
    @pulumi.getter
    def weekdays(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The weekday backups to retain. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
        """
        return pulumi.get(self, "weekdays")

    @weekdays.setter
    def weekdays(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "weekdays", value)

    @property
    @pulumi.getter
    def weeks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The weeks of the month to retain backups of. Possible values are `First`, `Second`, `Third`, `Fourth`, `Last`.
        """
        return pulumi.get(self, "weeks")

    @weeks.setter
    def weeks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "weeks", value)


@pulumi.input_type
class PolicyVMWorkloadProtectionPolicySimpleRetentionArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[int]):
        """
        :param pulumi.Input[int] count: The count that is used to count retention duration with duration type `Days`. Possible values are between `7` and `35`.
        """
        PolicyVMWorkloadProtectionPolicySimpleRetentionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            count=count,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             count: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("count", count)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        """
        The count that is used to count retention duration with duration type `Days`. Possible values are between `7` and `35`.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)


@pulumi.input_type
class PolicyVMWorkloadSettingsArgs:
    def __init__(__self__, *,
                 time_zone: pulumi.Input[str],
                 compression_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] time_zone: The timezone for the VM Workload Backup Policy. [The possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
        :param pulumi.Input[bool] compression_enabled: The compression setting for the VM Workload Backup Policy. Defaults to `false`.
        """
        PolicyVMWorkloadSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            time_zone=time_zone,
            compression_enabled=compression_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             time_zone: pulumi.Input[str],
             compression_enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("time_zone", time_zone)
        if compression_enabled is not None:
            _setter("compression_enabled", compression_enabled)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Input[str]:
        """
        The timezone for the VM Workload Backup Policy. [The possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_zone", value)

    @property
    @pulumi.getter(name="compressionEnabled")
    def compression_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        The compression setting for the VM Workload Backup Policy. Defaults to `false`.
        """
        return pulumi.get(self, "compression_enabled")

    @compression_enabled.setter
    def compression_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "compression_enabled", value)


