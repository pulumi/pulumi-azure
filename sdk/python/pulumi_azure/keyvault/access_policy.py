# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities, tables

class AccessPolicy(pulumi.CustomResource):
    """
    Manages a Key Vault Access Policy.
    
    ~> **NOTE:** It's possible to define Key Vault Access Policies both within the `azurerm_key_vault` resource via the `access_policy` block and by using the `azurerm_key_vault_access_policy` resource. However it's not possible to use both methods to manage Access Policies within a KeyVault, since there'll be conflicts.
    
    -> **NOTE:** Azure permits a maximum of 16 Access Policies per Key Vault - [more information can be found in this document](https://docs.microsoft.com/en-us/azure/key-vault/key-vault-secure-your-key-vault#data-plane-access-control).
    """
    def __init__(__self__, __name__, __opts__=None, application_id=None, certificate_permissions=None, key_permissions=None, object_id=None, resource_group_name=None, secret_permissions=None, tenant_id=None, vault_name=None):
        """Create a AccessPolicy resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['application_id'] = application_id

        __props__['certificate_permissions'] = certificate_permissions

        if not key_permissions:
            raise TypeError('Missing required property key_permissions')
        __props__['key_permissions'] = key_permissions

        if not object_id:
            raise TypeError('Missing required property object_id')
        __props__['object_id'] = object_id

        if not resource_group_name:
            raise TypeError('Missing required property resource_group_name')
        __props__['resource_group_name'] = resource_group_name

        if not secret_permissions:
            raise TypeError('Missing required property secret_permissions')
        __props__['secret_permissions'] = secret_permissions

        if not tenant_id:
            raise TypeError('Missing required property tenant_id')
        __props__['tenant_id'] = tenant_id

        if not vault_name:
            raise TypeError('Missing required property vault_name')
        __props__['vault_name'] = vault_name

        super(AccessPolicy, __self__).__init__(
            'azure:keyvault/accessPolicy:AccessPolicy',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

