# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetMariaDbServerStorageProfileResult',
]

@pulumi.output_type
class GetMariaDbServerStorageProfileResult(dict):
    def __init__(__self__, *,
                 auto_grow: str,
                 backup_retention_days: int,
                 geo_redundant_backup: str,
                 storage_mb: int):
        """
        :param str auto_grow: Whether autogrow is enabled or disabled for the storage.
        :param int backup_retention_days: Backup retention days for the server.
        :param str geo_redundant_backup: Whether Geo-redundant is enabled or not for server backup.
        :param int storage_mb: The max storage allowed for a server.
        """
        GetMariaDbServerStorageProfileResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auto_grow=auto_grow,
            backup_retention_days=backup_retention_days,
            geo_redundant_backup=geo_redundant_backup,
            storage_mb=storage_mb,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auto_grow: Optional[str] = None,
             backup_retention_days: Optional[int] = None,
             geo_redundant_backup: Optional[str] = None,
             storage_mb: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if auto_grow is None and 'autoGrow' in kwargs:
            auto_grow = kwargs['autoGrow']
        if auto_grow is None:
            raise TypeError("Missing 'auto_grow' argument")
        if backup_retention_days is None and 'backupRetentionDays' in kwargs:
            backup_retention_days = kwargs['backupRetentionDays']
        if backup_retention_days is None:
            raise TypeError("Missing 'backup_retention_days' argument")
        if geo_redundant_backup is None and 'geoRedundantBackup' in kwargs:
            geo_redundant_backup = kwargs['geoRedundantBackup']
        if geo_redundant_backup is None:
            raise TypeError("Missing 'geo_redundant_backup' argument")
        if storage_mb is None and 'storageMb' in kwargs:
            storage_mb = kwargs['storageMb']
        if storage_mb is None:
            raise TypeError("Missing 'storage_mb' argument")

        _setter("auto_grow", auto_grow)
        _setter("backup_retention_days", backup_retention_days)
        _setter("geo_redundant_backup", geo_redundant_backup)
        _setter("storage_mb", storage_mb)

    @property
    @pulumi.getter(name="autoGrow")
    def auto_grow(self) -> str:
        """
        Whether autogrow is enabled or disabled for the storage.
        """
        return pulumi.get(self, "auto_grow")

    @property
    @pulumi.getter(name="backupRetentionDays")
    def backup_retention_days(self) -> int:
        """
        Backup retention days for the server.
        """
        return pulumi.get(self, "backup_retention_days")

    @property
    @pulumi.getter(name="geoRedundantBackup")
    def geo_redundant_backup(self) -> str:
        """
        Whether Geo-redundant is enabled or not for server backup.
        """
        return pulumi.get(self, "geo_redundant_backup")

    @property
    @pulumi.getter(name="storageMb")
    def storage_mb(self) -> int:
        """
        The max storage allowed for a server.
        """
        return pulumi.get(self, "storage_mb")


