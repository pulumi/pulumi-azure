# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities, tables

class Profile(pulumi.CustomResource):
    """
    Manages a Traffic Manager Profile to which multiple endpoints can be attached.
    """
    def __init__(__self__, __name__, __opts__=None, dns_configs=None, monitor_configs=None, name=None, profile_status=None, resource_group_name=None, tags=None, traffic_routing_method=None):
        """Create a Profile resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not dns_configs:
            raise TypeError('Missing required property dns_configs')
        __props__['dns_configs'] = dns_configs

        if not monitor_configs:
            raise TypeError('Missing required property monitor_configs')
        __props__['monitor_configs'] = monitor_configs

        __props__['name'] = name

        __props__['profile_status'] = profile_status

        if not resource_group_name:
            raise TypeError('Missing required property resource_group_name')
        __props__['resource_group_name'] = resource_group_name

        __props__['tags'] = tags

        if not traffic_routing_method:
            raise TypeError('Missing required property traffic_routing_method')
        __props__['traffic_routing_method'] = traffic_routing_method

        __props__['fqdn'] = None

        super(Profile, __self__).__init__(
            'azure:trafficmanager/profile:Profile',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

