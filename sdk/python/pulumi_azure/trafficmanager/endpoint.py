# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class Endpoint(pulumi.CustomResource):
    """
    Manages a Traffic Manager Endpoint.
    """
    def __init__(__self__, __name__, __opts__=None, endpoint_location=None, endpoint_status=None, geo_mappings=None, min_child_endpoints=None, name=None, priority=None, profile_name=None, resource_group_name=None, target=None, target_resource_id=None, type=None, weight=None):
        """Create a Endpoint resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if endpoint_location and not isinstance(endpoint_location, basestring):
            raise TypeError('Expected property endpoint_location to be a basestring')
        __self__.endpoint_location = endpoint_location
        """
        Specifies the Azure location of the Endpoint,
        this must be specified for Profiles using the `Performance` routing method
        if the Endpoint is of either type `nestedEndpoints` or `externalEndpoints`.
        For Endpoints of type `azureEndpoints` the value will be taken from the
        location of the Azure target resource.
        """
        __props__['endpointLocation'] = endpoint_location

        if endpoint_status and not isinstance(endpoint_status, basestring):
            raise TypeError('Expected property endpoint_status to be a basestring')
        __self__.endpoint_status = endpoint_status
        """
        The status of the Endpoint, can be set to
        either `Enabled` or `Disabled`. Defaults to `Enabled`.
        """
        __props__['endpointStatus'] = endpoint_status

        if geo_mappings and not isinstance(geo_mappings, list):
            raise TypeError('Expected property geo_mappings to be a list')
        __self__.geo_mappings = geo_mappings
        """
        A list of Geographic Regions used to distribute traffic, such as `WORLD`, `UK` or `DE`. The same location can't be specified in two endpoints. [See the Geographic Hierarchies documentation for more information](https://docs.microsoft.com/en-us/rest/api/trafficmanager/geographichierarchies/getdefault).
        """
        __props__['geoMappings'] = geo_mappings

        if min_child_endpoints and not isinstance(min_child_endpoints, int):
            raise TypeError('Expected property min_child_endpoints to be a int')
        __self__.min_child_endpoints = min_child_endpoints
        """
        This argument specifies the minimum number
        of endpoints that must be ‘online’ in the child profile in order for the
        parent profile to direct traffic to any of the endpoints in that child
        profile. This argument only applies to Endpoints of type `nestedEndpoints`
        and defaults to `1`.
        """
        __props__['minChildEndpoints'] = min_child_endpoints

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The name of the Traffic Manager endpoint. Changing this forces a
        new resource to be created.
        """
        __props__['name'] = name

        if priority and not isinstance(priority, int):
            raise TypeError('Expected property priority to be a int')
        __self__.priority = priority
        """
        Specifies the priority of this Endpoint, this must be
        specified for Profiles using the `Priority` traffic routing method. Supports
        values between 1 and 1000, with no Endpoints sharing the same value. If
        omitted the value will be computed in order of creation.
        """
        __props__['priority'] = priority

        if not profile_name:
            raise TypeError('Missing required property profile_name')
        elif not isinstance(profile_name, basestring):
            raise TypeError('Expected property profile_name to be a basestring')
        __self__.profile_name = profile_name
        """
        The name of the Traffic Manager Profile to attach
        create the Traffic Manager endpoint.
        """
        __props__['profileName'] = profile_name

        if not resource_group_name:
            raise TypeError('Missing required property resource_group_name')
        elif not isinstance(resource_group_name, basestring):
            raise TypeError('Expected property resource_group_name to be a basestring')
        __self__.resource_group_name = resource_group_name
        """
        The name of the resource group in which to
        create the Traffic Manager endpoint.
        """
        __props__['resourceGroupName'] = resource_group_name

        if target and not isinstance(target, basestring):
            raise TypeError('Expected property target to be a basestring')
        __self__.target = target
        """
        The FQDN DNS name of the target. This argument must be
        provided for an endpoint of type `externalEndpoints`, for other types it
        will be computed.
        """
        __props__['target'] = target

        if target_resource_id and not isinstance(target_resource_id, basestring):
            raise TypeError('Expected property target_resource_id to be a basestring')
        __self__.target_resource_id = target_resource_id
        """
        The resource id of an Azure resource to
        target. This argument must be provided for an endpoint of type
        `azureEndpoints` or `nestedEndpoints`.
        """
        __props__['targetResourceId'] = target_resource_id

        if not type:
            raise TypeError('Missing required property type')
        elif not isinstance(type, basestring):
            raise TypeError('Expected property type to be a basestring')
        __self__.type = type
        """
        The Endpoint type, must be one of:
        - `azureEndpoints`
        - `externalEndpoints`
        - `nestedEndpoints`
        """
        __props__['type'] = type

        if weight and not isinstance(weight, int):
            raise TypeError('Expected property weight to be a int')
        __self__.weight = weight
        """
        Specifies how much traffic should be distributed to this
        endpoint, this must be specified for Profiles using the  `Weighted` traffic
        routing method. Supports values between 1 and 1000.
        """
        __props__['weight'] = weight

        __self__.endpoint_monitor_status = pulumi.runtime.UNKNOWN

        super(Endpoint, __self__).__init__(
            'azure:trafficmanager/endpoint:Endpoint',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'endpointLocation' in outs:
            self.endpoint_location = outs['endpointLocation']
        if 'endpointMonitorStatus' in outs:
            self.endpoint_monitor_status = outs['endpointMonitorStatus']
        if 'endpointStatus' in outs:
            self.endpoint_status = outs['endpointStatus']
        if 'geoMappings' in outs:
            self.geo_mappings = outs['geoMappings']
        if 'minChildEndpoints' in outs:
            self.min_child_endpoints = outs['minChildEndpoints']
        if 'name' in outs:
            self.name = outs['name']
        if 'priority' in outs:
            self.priority = outs['priority']
        if 'profileName' in outs:
            self.profile_name = outs['profileName']
        if 'resourceGroupName' in outs:
            self.resource_group_name = outs['resourceGroupName']
        if 'target' in outs:
            self.target = outs['target']
        if 'targetResourceId' in outs:
            self.target_resource_id = outs['targetResourceId']
        if 'type' in outs:
            self.type = outs['type']
        if 'weight' in outs:
            self.weight = outs['weight']
