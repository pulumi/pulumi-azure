# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from .provider import *
from ._inputs import *
from . import outputs

# Make subpackages available:
from . import (
    advisor,
    analysisservices,
    apimanagement,
    appconfiguration,
    appinsights,
    appplatform,
    appservice,
    attestation,
    authorization,
    automation,
    avs,
    backup,
    batch,
    billing,
    blueprint,
    bot,
    cdn,
    cognitive,
    communication,
    compute,
    config,
    consumption,
    containerservice,
    core,
    cosmosdb,
    costmanagement,
    dashboard,
    databasemigration,
    databoxedge,
    databricks,
    datafactory,
    datalake,
    datashare,
    desktopvirtualization,
    devspace,
    devtest,
    digitaltwins,
    dns,
    eventgrid,
    eventhub,
    frontdoor,
    hdinsight,
    healthcare,
    hpc,
    hsm,
    iot,
    iotcentral,
    keyvault,
    kusto,
    lb,
    lighthouse,
    loganalytics,
    logicapps,
    machinelearning,
    maintenance,
    managedapplication,
    management,
    managementgroups,
    managementresource,
    maps,
    mariadb,
    marketplace,
    media,
    mediaservices,
    mixedreality,
    monitoring,
    msi,
    mssql,
    mysql,
    netapp,
    network,
    notificationhub,
    operationalinsights,
    policy,
    postgresql,
    powerbi,
    privatedns,
    privatelink,
    proximity,
    purview,
    recoveryservices,
    redis,
    relay,
    role,
    search,
    securitycenter,
    sentinel,
    servicebus,
    servicefabric,
    signalr,
    siterecovery,
    sql,
    stack,
    storage,
    streamanalytics,
    synapse,
    trafficmanager,
    waf,
)

def _register_module():
    import pulumi
    from . import _utilities


    class Package(pulumi.runtime.ResourcePackage):
        _version = _utilities.get_semver_version()

        def version(self):
            return Package._version

        def construct_provider(self, name: str, typ: str, urn: str) -> pulumi.ProviderResource:
            if typ != "pulumi:providers:azure":
                raise Exception(f"unknown provider type {typ}")
            return Provider(name, pulumi.ResourceOptions(urn=urn))


    pulumi.runtime.register_resource_package("azure", Package())

_register_module()
