# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CacheArgs', 'Cache']

@pulumi.input_type
class CacheArgs:
    def __init__(__self__, *,
                 cache_size_in_gb: pulumi.Input[int],
                 resource_group_name: pulumi.Input[str],
                 sku_name: pulumi.Input[str],
                 subnet_id: pulumi.Input[str],
                 default_access_policy: Optional[pulumi.Input['CacheDefaultAccessPolicyArgs']] = None,
                 directory_active_directory: Optional[pulumi.Input['CacheDirectoryActiveDirectoryArgs']] = None,
                 directory_flat_file: Optional[pulumi.Input['CacheDirectoryFlatFileArgs']] = None,
                 directory_ldap: Optional[pulumi.Input['CacheDirectoryLdapArgs']] = None,
                 dns: Optional[pulumi.Input['CacheDnsArgs']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ntp_server: Optional[pulumi.Input[str]] = None,
                 root_squash_enabled: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Cache resource.
        :param pulumi.Input[int] cache_size_in_gb: The size of the HPC Cache, in GB. Possible values are `3072`, `6144`, `12288`, `24576`, and `49152`. Changing this forces a new resource to be created.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group in which to create the HPC Cache. Changing this forces a new resource to be created.
        :param pulumi.Input[str] sku_name: The SKU of HPC Cache to use. Possible values are `Standard_2G`, `Standard_4G` and `Standard_8G`. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet for the HPC Cache. Changing this forces a new resource to be created.
        :param pulumi.Input['CacheDefaultAccessPolicyArgs'] default_access_policy: A `default_access_policy` block as defined below.
        :param pulumi.Input['CacheDirectoryActiveDirectoryArgs'] directory_active_directory: A `directory_active_directory` block as defined below.
        :param pulumi.Input['CacheDirectoryFlatFileArgs'] directory_flat_file: A `directory_flat_file` block as defined below.
        :param pulumi.Input['CacheDirectoryLdapArgs'] directory_ldap: A `directory_ldap` block as defined below.
        :param pulumi.Input['CacheDnsArgs'] dns: A `dns` block as defined below.
        :param pulumi.Input[str] location: Specifies the supported Azure Region where the HPC Cache should be created. Changing this forces a new resource to be created.
        :param pulumi.Input[int] mtu: The IPv4 maximum transmission unit configured for the subnet of the HPC Cache. Possible values range from 576 - 1500. Defaults to 1500.
        :param pulumi.Input[str] name: The name of the HPC Cache. Changing this forces a new resource to be created.
        :param pulumi.Input[str] ntp_server: The NTP server IP Address or FQDN for the HPC Cache. Defaults to `time.windows.com`.
        :param pulumi.Input[bool] root_squash_enabled: Whether to enable [root squash](https://docs.microsoft.com/en-us/azure/hpc-cache/access-policies#root-squash)? Defaults to `false`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the HPC Cache.
        """
        pulumi.set(__self__, "cache_size_in_gb", cache_size_in_gb)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "sku_name", sku_name)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if default_access_policy is not None:
            pulumi.set(__self__, "default_access_policy", default_access_policy)
        if directory_active_directory is not None:
            pulumi.set(__self__, "directory_active_directory", directory_active_directory)
        if directory_flat_file is not None:
            pulumi.set(__self__, "directory_flat_file", directory_flat_file)
        if directory_ldap is not None:
            pulumi.set(__self__, "directory_ldap", directory_ldap)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ntp_server is not None:
            pulumi.set(__self__, "ntp_server", ntp_server)
        if root_squash_enabled is not None:
            warnings.warn("""This property is not functional and will be deprecated in favor of `default_access_policy.0.access_rule.x.root_squash_enabled`, where the scope of access_rule is `default`.""", DeprecationWarning)
            pulumi.log.warn("""root_squash_enabled is deprecated: This property is not functional and will be deprecated in favor of `default_access_policy.0.access_rule.x.root_squash_enabled`, where the scope of access_rule is `default`.""")
        if root_squash_enabled is not None:
            pulumi.set(__self__, "root_squash_enabled", root_squash_enabled)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="cacheSizeInGb")
    def cache_size_in_gb(self) -> pulumi.Input[int]:
        """
        The size of the HPC Cache, in GB. Possible values are `3072`, `6144`, `12288`, `24576`, and `49152`. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "cache_size_in_gb")

    @cache_size_in_gb.setter
    def cache_size_in_gb(self, value: pulumi.Input[int]):
        pulumi.set(self, "cache_size_in_gb", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the Resource Group in which to create the HPC Cache. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="skuName")
    def sku_name(self) -> pulumi.Input[str]:
        """
        The SKU of HPC Cache to use. Possible values are `Standard_2G`, `Standard_4G` and `Standard_8G`. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "sku_name")

    @sku_name.setter
    def sku_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "sku_name", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        The ID of the Subnet for the HPC Cache. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="defaultAccessPolicy")
    def default_access_policy(self) -> Optional[pulumi.Input['CacheDefaultAccessPolicyArgs']]:
        """
        A `default_access_policy` block as defined below.
        """
        return pulumi.get(self, "default_access_policy")

    @default_access_policy.setter
    def default_access_policy(self, value: Optional[pulumi.Input['CacheDefaultAccessPolicyArgs']]):
        pulumi.set(self, "default_access_policy", value)

    @property
    @pulumi.getter(name="directoryActiveDirectory")
    def directory_active_directory(self) -> Optional[pulumi.Input['CacheDirectoryActiveDirectoryArgs']]:
        """
        A `directory_active_directory` block as defined below.
        """
        return pulumi.get(self, "directory_active_directory")

    @directory_active_directory.setter
    def directory_active_directory(self, value: Optional[pulumi.Input['CacheDirectoryActiveDirectoryArgs']]):
        pulumi.set(self, "directory_active_directory", value)

    @property
    @pulumi.getter(name="directoryFlatFile")
    def directory_flat_file(self) -> Optional[pulumi.Input['CacheDirectoryFlatFileArgs']]:
        """
        A `directory_flat_file` block as defined below.
        """
        return pulumi.get(self, "directory_flat_file")

    @directory_flat_file.setter
    def directory_flat_file(self, value: Optional[pulumi.Input['CacheDirectoryFlatFileArgs']]):
        pulumi.set(self, "directory_flat_file", value)

    @property
    @pulumi.getter(name="directoryLdap")
    def directory_ldap(self) -> Optional[pulumi.Input['CacheDirectoryLdapArgs']]:
        """
        A `directory_ldap` block as defined below.
        """
        return pulumi.get(self, "directory_ldap")

    @directory_ldap.setter
    def directory_ldap(self, value: Optional[pulumi.Input['CacheDirectoryLdapArgs']]):
        pulumi.set(self, "directory_ldap", value)

    @property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input['CacheDnsArgs']]:
        """
        A `dns` block as defined below.
        """
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input['CacheDnsArgs']]):
        pulumi.set(self, "dns", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the supported Azure Region where the HPC Cache should be created. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        The IPv4 maximum transmission unit configured for the subnet of the HPC Cache. Possible values range from 576 - 1500. Defaults to 1500.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the HPC Cache. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ntpServer")
    def ntp_server(self) -> Optional[pulumi.Input[str]]:
        """
        The NTP server IP Address or FQDN for the HPC Cache. Defaults to `time.windows.com`.
        """
        return pulumi.get(self, "ntp_server")

    @ntp_server.setter
    def ntp_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntp_server", value)

    @property
    @pulumi.getter(name="rootSquashEnabled")
    def root_squash_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable [root squash](https://docs.microsoft.com/en-us/azure/hpc-cache/access-policies#root-squash)? Defaults to `false`.
        """
        return pulumi.get(self, "root_squash_enabled")

    @root_squash_enabled.setter
    def root_squash_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "root_squash_enabled", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A mapping of tags to assign to the HPC Cache.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _CacheState:
    def __init__(__self__, *,
                 cache_size_in_gb: Optional[pulumi.Input[int]] = None,
                 default_access_policy: Optional[pulumi.Input['CacheDefaultAccessPolicyArgs']] = None,
                 directory_active_directory: Optional[pulumi.Input['CacheDirectoryActiveDirectoryArgs']] = None,
                 directory_flat_file: Optional[pulumi.Input['CacheDirectoryFlatFileArgs']] = None,
                 directory_ldap: Optional[pulumi.Input['CacheDirectoryLdapArgs']] = None,
                 dns: Optional[pulumi.Input['CacheDnsArgs']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 mount_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ntp_server: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 root_squash_enabled: Optional[pulumi.Input[bool]] = None,
                 sku_name: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering Cache resources.
        :param pulumi.Input[int] cache_size_in_gb: The size of the HPC Cache, in GB. Possible values are `3072`, `6144`, `12288`, `24576`, and `49152`. Changing this forces a new resource to be created.
        :param pulumi.Input['CacheDefaultAccessPolicyArgs'] default_access_policy: A `default_access_policy` block as defined below.
        :param pulumi.Input['CacheDirectoryActiveDirectoryArgs'] directory_active_directory: A `directory_active_directory` block as defined below.
        :param pulumi.Input['CacheDirectoryFlatFileArgs'] directory_flat_file: A `directory_flat_file` block as defined below.
        :param pulumi.Input['CacheDirectoryLdapArgs'] directory_ldap: A `directory_ldap` block as defined below.
        :param pulumi.Input['CacheDnsArgs'] dns: A `dns` block as defined below.
        :param pulumi.Input[str] location: Specifies the supported Azure Region where the HPC Cache should be created. Changing this forces a new resource to be created.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mount_addresses: A list of IP Addresses where the HPC Cache can be mounted.
        :param pulumi.Input[int] mtu: The IPv4 maximum transmission unit configured for the subnet of the HPC Cache. Possible values range from 576 - 1500. Defaults to 1500.
        :param pulumi.Input[str] name: The name of the HPC Cache. Changing this forces a new resource to be created.
        :param pulumi.Input[str] ntp_server: The NTP server IP Address or FQDN for the HPC Cache. Defaults to `time.windows.com`.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group in which to create the HPC Cache. Changing this forces a new resource to be created.
        :param pulumi.Input[bool] root_squash_enabled: Whether to enable [root squash](https://docs.microsoft.com/en-us/azure/hpc-cache/access-policies#root-squash)? Defaults to `false`.
        :param pulumi.Input[str] sku_name: The SKU of HPC Cache to use. Possible values are `Standard_2G`, `Standard_4G` and `Standard_8G`. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet for the HPC Cache. Changing this forces a new resource to be created.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the HPC Cache.
        """
        if cache_size_in_gb is not None:
            pulumi.set(__self__, "cache_size_in_gb", cache_size_in_gb)
        if default_access_policy is not None:
            pulumi.set(__self__, "default_access_policy", default_access_policy)
        if directory_active_directory is not None:
            pulumi.set(__self__, "directory_active_directory", directory_active_directory)
        if directory_flat_file is not None:
            pulumi.set(__self__, "directory_flat_file", directory_flat_file)
        if directory_ldap is not None:
            pulumi.set(__self__, "directory_ldap", directory_ldap)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if mount_addresses is not None:
            pulumi.set(__self__, "mount_addresses", mount_addresses)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ntp_server is not None:
            pulumi.set(__self__, "ntp_server", ntp_server)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if root_squash_enabled is not None:
            warnings.warn("""This property is not functional and will be deprecated in favor of `default_access_policy.0.access_rule.x.root_squash_enabled`, where the scope of access_rule is `default`.""", DeprecationWarning)
            pulumi.log.warn("""root_squash_enabled is deprecated: This property is not functional and will be deprecated in favor of `default_access_policy.0.access_rule.x.root_squash_enabled`, where the scope of access_rule is `default`.""")
        if root_squash_enabled is not None:
            pulumi.set(__self__, "root_squash_enabled", root_squash_enabled)
        if sku_name is not None:
            pulumi.set(__self__, "sku_name", sku_name)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="cacheSizeInGb")
    def cache_size_in_gb(self) -> Optional[pulumi.Input[int]]:
        """
        The size of the HPC Cache, in GB. Possible values are `3072`, `6144`, `12288`, `24576`, and `49152`. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "cache_size_in_gb")

    @cache_size_in_gb.setter
    def cache_size_in_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_size_in_gb", value)

    @property
    @pulumi.getter(name="defaultAccessPolicy")
    def default_access_policy(self) -> Optional[pulumi.Input['CacheDefaultAccessPolicyArgs']]:
        """
        A `default_access_policy` block as defined below.
        """
        return pulumi.get(self, "default_access_policy")

    @default_access_policy.setter
    def default_access_policy(self, value: Optional[pulumi.Input['CacheDefaultAccessPolicyArgs']]):
        pulumi.set(self, "default_access_policy", value)

    @property
    @pulumi.getter(name="directoryActiveDirectory")
    def directory_active_directory(self) -> Optional[pulumi.Input['CacheDirectoryActiveDirectoryArgs']]:
        """
        A `directory_active_directory` block as defined below.
        """
        return pulumi.get(self, "directory_active_directory")

    @directory_active_directory.setter
    def directory_active_directory(self, value: Optional[pulumi.Input['CacheDirectoryActiveDirectoryArgs']]):
        pulumi.set(self, "directory_active_directory", value)

    @property
    @pulumi.getter(name="directoryFlatFile")
    def directory_flat_file(self) -> Optional[pulumi.Input['CacheDirectoryFlatFileArgs']]:
        """
        A `directory_flat_file` block as defined below.
        """
        return pulumi.get(self, "directory_flat_file")

    @directory_flat_file.setter
    def directory_flat_file(self, value: Optional[pulumi.Input['CacheDirectoryFlatFileArgs']]):
        pulumi.set(self, "directory_flat_file", value)

    @property
    @pulumi.getter(name="directoryLdap")
    def directory_ldap(self) -> Optional[pulumi.Input['CacheDirectoryLdapArgs']]:
        """
        A `directory_ldap` block as defined below.
        """
        return pulumi.get(self, "directory_ldap")

    @directory_ldap.setter
    def directory_ldap(self, value: Optional[pulumi.Input['CacheDirectoryLdapArgs']]):
        pulumi.set(self, "directory_ldap", value)

    @property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input['CacheDnsArgs']]:
        """
        A `dns` block as defined below.
        """
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input['CacheDnsArgs']]):
        pulumi.set(self, "dns", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the supported Azure Region where the HPC Cache should be created. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="mountAddresses")
    def mount_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of IP Addresses where the HPC Cache can be mounted.
        """
        return pulumi.get(self, "mount_addresses")

    @mount_addresses.setter
    def mount_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "mount_addresses", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        The IPv4 maximum transmission unit configured for the subnet of the HPC Cache. Possible values range from 576 - 1500. Defaults to 1500.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the HPC Cache. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ntpServer")
    def ntp_server(self) -> Optional[pulumi.Input[str]]:
        """
        The NTP server IP Address or FQDN for the HPC Cache. Defaults to `time.windows.com`.
        """
        return pulumi.get(self, "ntp_server")

    @ntp_server.setter
    def ntp_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntp_server", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Resource Group in which to create the HPC Cache. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="rootSquashEnabled")
    def root_squash_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable [root squash](https://docs.microsoft.com/en-us/azure/hpc-cache/access-policies#root-squash)? Defaults to `false`.
        """
        return pulumi.get(self, "root_squash_enabled")

    @root_squash_enabled.setter
    def root_squash_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "root_squash_enabled", value)

    @property
    @pulumi.getter(name="skuName")
    def sku_name(self) -> Optional[pulumi.Input[str]]:
        """
        The SKU of HPC Cache to use. Possible values are `Standard_2G`, `Standard_4G` and `Standard_8G`. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "sku_name")

    @sku_name.setter
    def sku_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sku_name", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Subnet for the HPC Cache. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A mapping of tags to assign to the HPC Cache.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


class Cache(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cache_size_in_gb: Optional[pulumi.Input[int]] = None,
                 default_access_policy: Optional[pulumi.Input[pulumi.InputType['CacheDefaultAccessPolicyArgs']]] = None,
                 directory_active_directory: Optional[pulumi.Input[pulumi.InputType['CacheDirectoryActiveDirectoryArgs']]] = None,
                 directory_flat_file: Optional[pulumi.Input[pulumi.InputType['CacheDirectoryFlatFileArgs']]] = None,
                 directory_ldap: Optional[pulumi.Input[pulumi.InputType['CacheDirectoryLdapArgs']]] = None,
                 dns: Optional[pulumi.Input[pulumi.InputType['CacheDnsArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ntp_server: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 root_squash_enabled: Optional[pulumi.Input[bool]] = None,
                 sku_name: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Manages a HPC Cache.

        > **Note:** During the first several months of the GA release, a request must be made to the Azure HPC Cache team to add your subscription to the access list before it can be used to create a cache instance. Fill out [this form](https://aka.ms/onboard-hpc-cache) to request access.

        > **Note:** By request of the service team the provider no longer automatically registering the `Microsoft.StorageCache` Resource Provider for this resource. To register it you can run `az provider register --namespace 'Microsoft.StorageCache'`.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_virtual_network = azure.network.VirtualNetwork("exampleVirtualNetwork",
            address_spaces=["10.0.0.0/16"],
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name)
        example_subnet = azure.network.Subnet("exampleSubnet",
            resource_group_name=example_resource_group.name,
            virtual_network_name=example_virtual_network.name,
            address_prefixes=["10.0.1.0/24"])
        example_cache = azure.hpc.Cache("exampleCache",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            cache_size_in_gb=3072,
            subnet_id=example_subnet.id,
            sku_name="Standard_2G")
        ```

        ## Import

        HPC Caches can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:hpc/cache:Cache example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroupName/providers/Microsoft.StorageCache/caches/cacheName
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] cache_size_in_gb: The size of the HPC Cache, in GB. Possible values are `3072`, `6144`, `12288`, `24576`, and `49152`. Changing this forces a new resource to be created.
        :param pulumi.Input[pulumi.InputType['CacheDefaultAccessPolicyArgs']] default_access_policy: A `default_access_policy` block as defined below.
        :param pulumi.Input[pulumi.InputType['CacheDirectoryActiveDirectoryArgs']] directory_active_directory: A `directory_active_directory` block as defined below.
        :param pulumi.Input[pulumi.InputType['CacheDirectoryFlatFileArgs']] directory_flat_file: A `directory_flat_file` block as defined below.
        :param pulumi.Input[pulumi.InputType['CacheDirectoryLdapArgs']] directory_ldap: A `directory_ldap` block as defined below.
        :param pulumi.Input[pulumi.InputType['CacheDnsArgs']] dns: A `dns` block as defined below.
        :param pulumi.Input[str] location: Specifies the supported Azure Region where the HPC Cache should be created. Changing this forces a new resource to be created.
        :param pulumi.Input[int] mtu: The IPv4 maximum transmission unit configured for the subnet of the HPC Cache. Possible values range from 576 - 1500. Defaults to 1500.
        :param pulumi.Input[str] name: The name of the HPC Cache. Changing this forces a new resource to be created.
        :param pulumi.Input[str] ntp_server: The NTP server IP Address or FQDN for the HPC Cache. Defaults to `time.windows.com`.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group in which to create the HPC Cache. Changing this forces a new resource to be created.
        :param pulumi.Input[bool] root_squash_enabled: Whether to enable [root squash](https://docs.microsoft.com/en-us/azure/hpc-cache/access-policies#root-squash)? Defaults to `false`.
        :param pulumi.Input[str] sku_name: The SKU of HPC Cache to use. Possible values are `Standard_2G`, `Standard_4G` and `Standard_8G`. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet for the HPC Cache. Changing this forces a new resource to be created.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the HPC Cache.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CacheArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a HPC Cache.

        > **Note:** During the first several months of the GA release, a request must be made to the Azure HPC Cache team to add your subscription to the access list before it can be used to create a cache instance. Fill out [this form](https://aka.ms/onboard-hpc-cache) to request access.

        > **Note:** By request of the service team the provider no longer automatically registering the `Microsoft.StorageCache` Resource Provider for this resource. To register it you can run `az provider register --namespace 'Microsoft.StorageCache'`.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_virtual_network = azure.network.VirtualNetwork("exampleVirtualNetwork",
            address_spaces=["10.0.0.0/16"],
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name)
        example_subnet = azure.network.Subnet("exampleSubnet",
            resource_group_name=example_resource_group.name,
            virtual_network_name=example_virtual_network.name,
            address_prefixes=["10.0.1.0/24"])
        example_cache = azure.hpc.Cache("exampleCache",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            cache_size_in_gb=3072,
            subnet_id=example_subnet.id,
            sku_name="Standard_2G")
        ```

        ## Import

        HPC Caches can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:hpc/cache:Cache example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroupName/providers/Microsoft.StorageCache/caches/cacheName
        ```

        :param str resource_name: The name of the resource.
        :param CacheArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CacheArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cache_size_in_gb: Optional[pulumi.Input[int]] = None,
                 default_access_policy: Optional[pulumi.Input[pulumi.InputType['CacheDefaultAccessPolicyArgs']]] = None,
                 directory_active_directory: Optional[pulumi.Input[pulumi.InputType['CacheDirectoryActiveDirectoryArgs']]] = None,
                 directory_flat_file: Optional[pulumi.Input[pulumi.InputType['CacheDirectoryFlatFileArgs']]] = None,
                 directory_ldap: Optional[pulumi.Input[pulumi.InputType['CacheDirectoryLdapArgs']]] = None,
                 dns: Optional[pulumi.Input[pulumi.InputType['CacheDnsArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ntp_server: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 root_squash_enabled: Optional[pulumi.Input[bool]] = None,
                 sku_name: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CacheArgs.__new__(CacheArgs)

            if cache_size_in_gb is None and not opts.urn:
                raise TypeError("Missing required property 'cache_size_in_gb'")
            __props__.__dict__["cache_size_in_gb"] = cache_size_in_gb
            __props__.__dict__["default_access_policy"] = default_access_policy
            __props__.__dict__["directory_active_directory"] = directory_active_directory
            __props__.__dict__["directory_flat_file"] = directory_flat_file
            __props__.__dict__["directory_ldap"] = directory_ldap
            __props__.__dict__["dns"] = dns
            __props__.__dict__["location"] = location
            __props__.__dict__["mtu"] = mtu
            __props__.__dict__["name"] = name
            __props__.__dict__["ntp_server"] = ntp_server
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            if root_squash_enabled is not None and not opts.urn:
                warnings.warn("""This property is not functional and will be deprecated in favor of `default_access_policy.0.access_rule.x.root_squash_enabled`, where the scope of access_rule is `default`.""", DeprecationWarning)
                pulumi.log.warn("""root_squash_enabled is deprecated: This property is not functional and will be deprecated in favor of `default_access_policy.0.access_rule.x.root_squash_enabled`, where the scope of access_rule is `default`.""")
            __props__.__dict__["root_squash_enabled"] = root_squash_enabled
            if sku_name is None and not opts.urn:
                raise TypeError("Missing required property 'sku_name'")
            __props__.__dict__["sku_name"] = sku_name
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["mount_addresses"] = None
        super(Cache, __self__).__init__(
            'azure:hpc/cache:Cache',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cache_size_in_gb: Optional[pulumi.Input[int]] = None,
            default_access_policy: Optional[pulumi.Input[pulumi.InputType['CacheDefaultAccessPolicyArgs']]] = None,
            directory_active_directory: Optional[pulumi.Input[pulumi.InputType['CacheDirectoryActiveDirectoryArgs']]] = None,
            directory_flat_file: Optional[pulumi.Input[pulumi.InputType['CacheDirectoryFlatFileArgs']]] = None,
            directory_ldap: Optional[pulumi.Input[pulumi.InputType['CacheDirectoryLdapArgs']]] = None,
            dns: Optional[pulumi.Input[pulumi.InputType['CacheDnsArgs']]] = None,
            location: Optional[pulumi.Input[str]] = None,
            mount_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            mtu: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            ntp_server: Optional[pulumi.Input[str]] = None,
            resource_group_name: Optional[pulumi.Input[str]] = None,
            root_squash_enabled: Optional[pulumi.Input[bool]] = None,
            sku_name: Optional[pulumi.Input[str]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None) -> 'Cache':
        """
        Get an existing Cache resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] cache_size_in_gb: The size of the HPC Cache, in GB. Possible values are `3072`, `6144`, `12288`, `24576`, and `49152`. Changing this forces a new resource to be created.
        :param pulumi.Input[pulumi.InputType['CacheDefaultAccessPolicyArgs']] default_access_policy: A `default_access_policy` block as defined below.
        :param pulumi.Input[pulumi.InputType['CacheDirectoryActiveDirectoryArgs']] directory_active_directory: A `directory_active_directory` block as defined below.
        :param pulumi.Input[pulumi.InputType['CacheDirectoryFlatFileArgs']] directory_flat_file: A `directory_flat_file` block as defined below.
        :param pulumi.Input[pulumi.InputType['CacheDirectoryLdapArgs']] directory_ldap: A `directory_ldap` block as defined below.
        :param pulumi.Input[pulumi.InputType['CacheDnsArgs']] dns: A `dns` block as defined below.
        :param pulumi.Input[str] location: Specifies the supported Azure Region where the HPC Cache should be created. Changing this forces a new resource to be created.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mount_addresses: A list of IP Addresses where the HPC Cache can be mounted.
        :param pulumi.Input[int] mtu: The IPv4 maximum transmission unit configured for the subnet of the HPC Cache. Possible values range from 576 - 1500. Defaults to 1500.
        :param pulumi.Input[str] name: The name of the HPC Cache. Changing this forces a new resource to be created.
        :param pulumi.Input[str] ntp_server: The NTP server IP Address or FQDN for the HPC Cache. Defaults to `time.windows.com`.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group in which to create the HPC Cache. Changing this forces a new resource to be created.
        :param pulumi.Input[bool] root_squash_enabled: Whether to enable [root squash](https://docs.microsoft.com/en-us/azure/hpc-cache/access-policies#root-squash)? Defaults to `false`.
        :param pulumi.Input[str] sku_name: The SKU of HPC Cache to use. Possible values are `Standard_2G`, `Standard_4G` and `Standard_8G`. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet for the HPC Cache. Changing this forces a new resource to be created.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the HPC Cache.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CacheState.__new__(_CacheState)

        __props__.__dict__["cache_size_in_gb"] = cache_size_in_gb
        __props__.__dict__["default_access_policy"] = default_access_policy
        __props__.__dict__["directory_active_directory"] = directory_active_directory
        __props__.__dict__["directory_flat_file"] = directory_flat_file
        __props__.__dict__["directory_ldap"] = directory_ldap
        __props__.__dict__["dns"] = dns
        __props__.__dict__["location"] = location
        __props__.__dict__["mount_addresses"] = mount_addresses
        __props__.__dict__["mtu"] = mtu
        __props__.__dict__["name"] = name
        __props__.__dict__["ntp_server"] = ntp_server
        __props__.__dict__["resource_group_name"] = resource_group_name
        __props__.__dict__["root_squash_enabled"] = root_squash_enabled
        __props__.__dict__["sku_name"] = sku_name
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        return Cache(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cacheSizeInGb")
    def cache_size_in_gb(self) -> pulumi.Output[int]:
        """
        The size of the HPC Cache, in GB. Possible values are `3072`, `6144`, `12288`, `24576`, and `49152`. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "cache_size_in_gb")

    @property
    @pulumi.getter(name="defaultAccessPolicy")
    def default_access_policy(self) -> pulumi.Output['outputs.CacheDefaultAccessPolicy']:
        """
        A `default_access_policy` block as defined below.
        """
        return pulumi.get(self, "default_access_policy")

    @property
    @pulumi.getter(name="directoryActiveDirectory")
    def directory_active_directory(self) -> pulumi.Output[Optional['outputs.CacheDirectoryActiveDirectory']]:
        """
        A `directory_active_directory` block as defined below.
        """
        return pulumi.get(self, "directory_active_directory")

    @property
    @pulumi.getter(name="directoryFlatFile")
    def directory_flat_file(self) -> pulumi.Output[Optional['outputs.CacheDirectoryFlatFile']]:
        """
        A `directory_flat_file` block as defined below.
        """
        return pulumi.get(self, "directory_flat_file")

    @property
    @pulumi.getter(name="directoryLdap")
    def directory_ldap(self) -> pulumi.Output[Optional['outputs.CacheDirectoryLdap']]:
        """
        A `directory_ldap` block as defined below.
        """
        return pulumi.get(self, "directory_ldap")

    @property
    @pulumi.getter
    def dns(self) -> pulumi.Output[Optional['outputs.CacheDns']]:
        """
        A `dns` block as defined below.
        """
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        Specifies the supported Azure Region where the HPC Cache should be created. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="mountAddresses")
    def mount_addresses(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of IP Addresses where the HPC Cache can be mounted.
        """
        return pulumi.get(self, "mount_addresses")

    @property
    @pulumi.getter
    def mtu(self) -> pulumi.Output[Optional[int]]:
        """
        The IPv4 maximum transmission unit configured for the subnet of the HPC Cache. Possible values range from 576 - 1500. Defaults to 1500.
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the HPC Cache. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ntpServer")
    def ntp_server(self) -> pulumi.Output[Optional[str]]:
        """
        The NTP server IP Address or FQDN for the HPC Cache. Defaults to `time.windows.com`.
        """
        return pulumi.get(self, "ntp_server")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[str]:
        """
        The name of the Resource Group in which to create the HPC Cache. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="rootSquashEnabled")
    def root_squash_enabled(self) -> pulumi.Output[bool]:
        """
        Whether to enable [root squash](https://docs.microsoft.com/en-us/azure/hpc-cache/access-policies#root-squash)? Defaults to `false`.
        """
        return pulumi.get(self, "root_squash_enabled")

    @property
    @pulumi.getter(name="skuName")
    def sku_name(self) -> pulumi.Output[str]:
        """
        The SKU of HPC Cache to use. Possible values are `Standard_2G`, `Standard_4G` and `Standard_8G`. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "sku_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        The ID of the Subnet for the HPC Cache. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A mapping of tags to assign to the HPC Cache.
        """
        return pulumi.get(self, "tags")

