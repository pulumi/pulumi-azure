# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AttachedNetworkArgs', 'AttachedNetwork']

@pulumi.input_type
class AttachedNetworkArgs:
    def __init__(__self__, *,
                 dev_center_id: pulumi.Input[str],
                 network_connection_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AttachedNetwork resource.
        :param pulumi.Input[str] dev_center_id: The ID of the associated Dev Center. Changing this forces a new resource to be created.
        :param pulumi.Input[str] network_connection_id: The ID of the Dev Center Network Connection you want to attach. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: Specifies the name of this Dev Center Attached Network. Changing this forces a new resource to be created.
        """
        pulumi.set(__self__, "dev_center_id", dev_center_id)
        pulumi.set(__self__, "network_connection_id", network_connection_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="devCenterId")
    def dev_center_id(self) -> pulumi.Input[str]:
        """
        The ID of the associated Dev Center. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "dev_center_id")

    @dev_center_id.setter
    def dev_center_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "dev_center_id", value)

    @property
    @pulumi.getter(name="networkConnectionId")
    def network_connection_id(self) -> pulumi.Input[str]:
        """
        The ID of the Dev Center Network Connection you want to attach. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "network_connection_id")

    @network_connection_id.setter
    def network_connection_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_connection_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of this Dev Center Attached Network. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _AttachedNetworkState:
    def __init__(__self__, *,
                 dev_center_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_connection_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AttachedNetwork resources.
        :param pulumi.Input[str] dev_center_id: The ID of the associated Dev Center. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: Specifies the name of this Dev Center Attached Network. Changing this forces a new resource to be created.
        :param pulumi.Input[str] network_connection_id: The ID of the Dev Center Network Connection you want to attach. Changing this forces a new resource to be created.
        """
        if dev_center_id is not None:
            pulumi.set(__self__, "dev_center_id", dev_center_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_connection_id is not None:
            pulumi.set(__self__, "network_connection_id", network_connection_id)

    @property
    @pulumi.getter(name="devCenterId")
    def dev_center_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the associated Dev Center. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "dev_center_id")

    @dev_center_id.setter
    def dev_center_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dev_center_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of this Dev Center Attached Network. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkConnectionId")
    def network_connection_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Dev Center Network Connection you want to attach. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "network_connection_id")

    @network_connection_id.setter
    def network_connection_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_connection_id", value)


class AttachedNetwork(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dev_center_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_connection_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a Dev Center Attached Network.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example = azure.core.ResourceGroup("example",
            name="example-dcan",
            location="West Europe")
        example_virtual_network = azure.network.VirtualNetwork("example",
            name="example-vnet",
            address_spaces=["10.0.0.0/16"],
            location=example.location,
            resource_group_name=example.name)
        example_subnet = azure.network.Subnet("example",
            name="internal",
            resource_group_name=example.name,
            virtual_network_name=example_virtual_network.name,
            address_prefixes=["10.0.2.0/24"])
        example_dev_center = azure.devcenter.DevCenter("example",
            name="example-dc",
            resource_group_name=example.name,
            location=example.location,
            identity={
                "type": "SystemAssigned",
            })
        example_network_connection = azure.devcenter.NetworkConnection("example",
            name="example-dcnc",
            resource_group_name=example.name,
            location=example.location,
            domain_join_type="AzureADJoin",
            subnet_id=example_subnet.id)
        example_attached_network = azure.devcenter.AttachedNetwork("example",
            name="example-dcet",
            dev_center_id=example_dev_center.id,
            network_connection_id=example_network_connection.id)
        ```

        ## Import

        An existing Dev Center Attached Network can be imported into Pulumi using the `resource id`, e.g.

        ```sh
        $ pulumi import azure:devcenter/attachedNetwork:AttachedNetwork example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DevCenter/devCenters/dc1/attachedNetworks/et1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dev_center_id: The ID of the associated Dev Center. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: Specifies the name of this Dev Center Attached Network. Changing this forces a new resource to be created.
        :param pulumi.Input[str] network_connection_id: The ID of the Dev Center Network Connection you want to attach. Changing this forces a new resource to be created.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AttachedNetworkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Dev Center Attached Network.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example = azure.core.ResourceGroup("example",
            name="example-dcan",
            location="West Europe")
        example_virtual_network = azure.network.VirtualNetwork("example",
            name="example-vnet",
            address_spaces=["10.0.0.0/16"],
            location=example.location,
            resource_group_name=example.name)
        example_subnet = azure.network.Subnet("example",
            name="internal",
            resource_group_name=example.name,
            virtual_network_name=example_virtual_network.name,
            address_prefixes=["10.0.2.0/24"])
        example_dev_center = azure.devcenter.DevCenter("example",
            name="example-dc",
            resource_group_name=example.name,
            location=example.location,
            identity={
                "type": "SystemAssigned",
            })
        example_network_connection = azure.devcenter.NetworkConnection("example",
            name="example-dcnc",
            resource_group_name=example.name,
            location=example.location,
            domain_join_type="AzureADJoin",
            subnet_id=example_subnet.id)
        example_attached_network = azure.devcenter.AttachedNetwork("example",
            name="example-dcet",
            dev_center_id=example_dev_center.id,
            network_connection_id=example_network_connection.id)
        ```

        ## Import

        An existing Dev Center Attached Network can be imported into Pulumi using the `resource id`, e.g.

        ```sh
        $ pulumi import azure:devcenter/attachedNetwork:AttachedNetwork example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DevCenter/devCenters/dc1/attachedNetworks/et1
        ```

        :param str resource_name: The name of the resource.
        :param AttachedNetworkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AttachedNetworkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dev_center_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_connection_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AttachedNetworkArgs.__new__(AttachedNetworkArgs)

            if dev_center_id is None and not opts.urn:
                raise TypeError("Missing required property 'dev_center_id'")
            __props__.__dict__["dev_center_id"] = dev_center_id
            __props__.__dict__["name"] = name
            if network_connection_id is None and not opts.urn:
                raise TypeError("Missing required property 'network_connection_id'")
            __props__.__dict__["network_connection_id"] = network_connection_id
        super(AttachedNetwork, __self__).__init__(
            'azure:devcenter/attachedNetwork:AttachedNetwork',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dev_center_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_connection_id: Optional[pulumi.Input[str]] = None) -> 'AttachedNetwork':
        """
        Get an existing AttachedNetwork resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dev_center_id: The ID of the associated Dev Center. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: Specifies the name of this Dev Center Attached Network. Changing this forces a new resource to be created.
        :param pulumi.Input[str] network_connection_id: The ID of the Dev Center Network Connection you want to attach. Changing this forces a new resource to be created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AttachedNetworkState.__new__(_AttachedNetworkState)

        __props__.__dict__["dev_center_id"] = dev_center_id
        __props__.__dict__["name"] = name
        __props__.__dict__["network_connection_id"] = network_connection_id
        return AttachedNetwork(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="devCenterId")
    def dev_center_id(self) -> pulumi.Output[str]:
        """
        The ID of the associated Dev Center. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "dev_center_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Specifies the name of this Dev Center Attached Network. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkConnectionId")
    def network_connection_id(self) -> pulumi.Output[str]:
        """
        The ID of the Dev Center Network Connection you want to attach. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "network_connection_id")

