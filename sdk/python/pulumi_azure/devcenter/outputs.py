# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'CatalogCatalogAdogit',
    'CatalogCatalogGithub',
    'DevCenterIdentity',
    'ProjectEnvironmentTypeIdentity',
    'ProjectEnvironmentTypeUserRoleAssignment',
    'ProjectIdentity',
    'GetCatalogCatalogAdogitResult',
    'GetCatalogCatalogGithubResult',
    'GetIdentityResult',
    'GetProjectEnvironmentTypeIdentityResult',
    'GetProjectEnvironmentTypeUserRoleAssignmentResult',
    'GetProjectIdentityResult',
]

@pulumi.output_type
class CatalogCatalogAdogit(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyVaultKeyUrl":
            suggest = "key_vault_key_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CatalogCatalogAdogit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CatalogCatalogAdogit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CatalogCatalogAdogit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 branch: _builtins.str,
                 key_vault_key_url: _builtins.str,
                 path: _builtins.str,
                 uri: _builtins.str):
        """
        :param _builtins.str branch: The Git branch of the Dev Center Catalog.
        :param _builtins.str key_vault_key_url: A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        :param _builtins.str path: The folder where the catalog items can be found inside the repository.
        :param _builtins.str uri: The Git URI of the Dev Center Catalog.
        """
        pulumi.set(__self__, "branch", branch)
        pulumi.set(__self__, "key_vault_key_url", key_vault_key_url)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "uri", uri)

    @_builtins.property
    @pulumi.getter
    def branch(self) -> _builtins.str:
        """
        The Git branch of the Dev Center Catalog.
        """
        return pulumi.get(self, "branch")

    @_builtins.property
    @pulumi.getter(name="keyVaultKeyUrl")
    def key_vault_key_url(self) -> _builtins.str:
        """
        A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        """
        return pulumi.get(self, "key_vault_key_url")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The folder where the catalog items can be found inside the repository.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def uri(self) -> _builtins.str:
        """
        The Git URI of the Dev Center Catalog.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class CatalogCatalogGithub(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyVaultKeyUrl":
            suggest = "key_vault_key_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CatalogCatalogGithub. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CatalogCatalogGithub.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CatalogCatalogGithub.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 branch: _builtins.str,
                 key_vault_key_url: _builtins.str,
                 path: _builtins.str,
                 uri: _builtins.str):
        """
        :param _builtins.str branch: The Git branch of the Dev Center Catalog.
        :param _builtins.str key_vault_key_url: A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        :param _builtins.str path: The folder where the catalog items can be found inside the repository.
        :param _builtins.str uri: The Git URI of the Dev Center Catalog.
        """
        pulumi.set(__self__, "branch", branch)
        pulumi.set(__self__, "key_vault_key_url", key_vault_key_url)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "uri", uri)

    @_builtins.property
    @pulumi.getter
    def branch(self) -> _builtins.str:
        """
        The Git branch of the Dev Center Catalog.
        """
        return pulumi.get(self, "branch")

    @_builtins.property
    @pulumi.getter(name="keyVaultKeyUrl")
    def key_vault_key_url(self) -> _builtins.str:
        """
        A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        """
        return pulumi.get(self, "key_vault_key_url")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The folder where the catalog items can be found inside the repository.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def uri(self) -> _builtins.str:
        """
        The Git URI of the Dev Center Catalog.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class DevCenterIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "identityIds":
            suggest = "identity_ids"
        elif key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DevCenterIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DevCenterIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DevCenterIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 identity_ids: Optional[Sequence[_builtins.str]] = None,
                 principal_id: Optional[_builtins.str] = None,
                 tenant_id: Optional[_builtins.str] = None):
        pulumi.set(__self__, "type", type)
        if identity_ids is not None:
            pulumi.set(__self__, "identity_ids", identity_ids)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "identity_ids")

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "principal_id")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class ProjectEnvironmentTypeIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "identityIds":
            suggest = "identity_ids"
        elif key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectEnvironmentTypeIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectEnvironmentTypeIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectEnvironmentTypeIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 identity_ids: Optional[Sequence[_builtins.str]] = None,
                 principal_id: Optional[_builtins.str] = None,
                 tenant_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: The type of identity used for this Dev Center Project Environment Type. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
        :param Sequence[_builtins.str] identity_ids: The ID of the User Assigned Identity which should be assigned to this Dev Center Project Environment Type.
               
               > **Note:** `identity_ids` is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
        """
        pulumi.set(__self__, "type", type)
        if identity_ids is not None:
            pulumi.set(__self__, "identity_ids", identity_ids)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of identity used for this Dev Center Project Environment Type. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        The ID of the User Assigned Identity which should be assigned to this Dev Center Project Environment Type.

        > **Note:** `identity_ids` is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
        """
        return pulumi.get(self, "identity_ids")

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "principal_id")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class ProjectEnvironmentTypeUserRoleAssignment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userId":
            suggest = "user_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectEnvironmentTypeUserRoleAssignment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectEnvironmentTypeUserRoleAssignment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectEnvironmentTypeUserRoleAssignment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 roles: Sequence[_builtins.str],
                 user_id: _builtins.str):
        """
        :param Sequence[_builtins.str] roles: A list of roles to assign to the `user_id`.
        :param _builtins.str user_id: The user object ID that is assigned roles.
        """
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "user_id", user_id)

    @_builtins.property
    @pulumi.getter
    def roles(self) -> Sequence[_builtins.str]:
        """
        A list of roles to assign to the `user_id`.
        """
        return pulumi.get(self, "roles")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.str:
        """
        The user object ID that is assigned roles.
        """
        return pulumi.get(self, "user_id")


@pulumi.output_type
class ProjectIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "identityIds":
            suggest = "identity_ids"
        elif key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 identity_ids: Optional[Sequence[_builtins.str]] = None,
                 principal_id: Optional[_builtins.str] = None,
                 tenant_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: The type of identity used for this Dev Center Project. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
        :param Sequence[_builtins.str] identity_ids: The ID of the User Assigned Identity which should be assigned to this Dev Center Project.
               
               > **Note:** `identity_ids` is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
        :param _builtins.str principal_id: The Principal ID for the Service Principal associated with the Identity of this Dev Center Project.
        :param _builtins.str tenant_id: The Tenant ID for the Service Principal associated with the Identity of this Dev Center Project.
        """
        pulumi.set(__self__, "type", type)
        if identity_ids is not None:
            pulumi.set(__self__, "identity_ids", identity_ids)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of identity used for this Dev Center Project. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        The ID of the User Assigned Identity which should be assigned to this Dev Center Project.

        > **Note:** `identity_ids` is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
        """
        return pulumi.get(self, "identity_ids")

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[_builtins.str]:
        """
        The Principal ID for the Service Principal associated with the Identity of this Dev Center Project.
        """
        return pulumi.get(self, "principal_id")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[_builtins.str]:
        """
        The Tenant ID for the Service Principal associated with the Identity of this Dev Center Project.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class GetCatalogCatalogAdogitResult(dict):
    def __init__(__self__, *,
                 branch: _builtins.str,
                 key_vault_key_url: _builtins.str,
                 path: _builtins.str,
                 uri: _builtins.str):
        """
        :param _builtins.str branch: The Git branch of the Dev Center Catalog.
        :param _builtins.str key_vault_key_url: A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        :param _builtins.str path: The folder where the catalog items can be found inside the repository.
        :param _builtins.str uri: The Git URI of the Dev Center Catalog.
        """
        pulumi.set(__self__, "branch", branch)
        pulumi.set(__self__, "key_vault_key_url", key_vault_key_url)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "uri", uri)

    @_builtins.property
    @pulumi.getter
    def branch(self) -> _builtins.str:
        """
        The Git branch of the Dev Center Catalog.
        """
        return pulumi.get(self, "branch")

    @_builtins.property
    @pulumi.getter(name="keyVaultKeyUrl")
    def key_vault_key_url(self) -> _builtins.str:
        """
        A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        """
        return pulumi.get(self, "key_vault_key_url")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The folder where the catalog items can be found inside the repository.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def uri(self) -> _builtins.str:
        """
        The Git URI of the Dev Center Catalog.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetCatalogCatalogGithubResult(dict):
    def __init__(__self__, *,
                 branch: _builtins.str,
                 key_vault_key_url: _builtins.str,
                 path: _builtins.str,
                 uri: _builtins.str):
        """
        :param _builtins.str branch: The Git branch of the Dev Center Catalog.
        :param _builtins.str key_vault_key_url: A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        :param _builtins.str path: The folder where the catalog items can be found inside the repository.
        :param _builtins.str uri: The Git URI of the Dev Center Catalog.
        """
        pulumi.set(__self__, "branch", branch)
        pulumi.set(__self__, "key_vault_key_url", key_vault_key_url)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "uri", uri)

    @_builtins.property
    @pulumi.getter
    def branch(self) -> _builtins.str:
        """
        The Git branch of the Dev Center Catalog.
        """
        return pulumi.get(self, "branch")

    @_builtins.property
    @pulumi.getter(name="keyVaultKeyUrl")
    def key_vault_key_url(self) -> _builtins.str:
        """
        A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        """
        return pulumi.get(self, "key_vault_key_url")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The folder where the catalog items can be found inside the repository.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def uri(self) -> _builtins.str:
        """
        The Git URI of the Dev Center Catalog.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetIdentityResult(dict):
    def __init__(__self__, *,
                 identity_ids: Sequence[_builtins.str],
                 principal_id: _builtins.str,
                 tenant_id: _builtins.str,
                 type: _builtins.str):
        """
        :param Sequence[_builtins.str] identity_ids: The list of User Assigned Managed Identity IDs assigned to this Dev Center.
        :param _builtins.str principal_id: The Principal ID of the System Assigned Managed Service Identity that is configured on this Dev Center.
        :param _builtins.str tenant_id: The Tenant ID of the System Assigned Managed Service Identity that is configured on this Dev Center.
        :param _builtins.str type: The type of Managed Service Identity that is configured on this Dev Center.
        """
        pulumi.set(__self__, "identity_ids", identity_ids)
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Sequence[_builtins.str]:
        """
        The list of User Assigned Managed Identity IDs assigned to this Dev Center.
        """
        return pulumi.get(self, "identity_ids")

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> _builtins.str:
        """
        The Principal ID of the System Assigned Managed Service Identity that is configured on this Dev Center.
        """
        return pulumi.get(self, "principal_id")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        """
        The Tenant ID of the System Assigned Managed Service Identity that is configured on this Dev Center.
        """
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of Managed Service Identity that is configured on this Dev Center.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetProjectEnvironmentTypeIdentityResult(dict):
    def __init__(__self__, *,
                 identity_ids: Sequence[_builtins.str],
                 principal_id: _builtins.str,
                 tenant_id: _builtins.str,
                 type: _builtins.str):
        """
        :param Sequence[_builtins.str] identity_ids: The list of User Assigned Managed Identity IDs assigned to this Dev Center Project Environment Type.
        :param _builtins.str principal_id: The Principal ID of the System Assigned Managed Service Identity that is configured on this Dev Center Project Environment Type.
        :param _builtins.str tenant_id: The Tenant ID of the System Assigned Managed Service Identity that is configured on this Dev Center Project Environment Type.
        :param _builtins.str type: The type of Managed Service Identity that is configured on this Dev Center Project Environment Type.
        """
        pulumi.set(__self__, "identity_ids", identity_ids)
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Sequence[_builtins.str]:
        """
        The list of User Assigned Managed Identity IDs assigned to this Dev Center Project Environment Type.
        """
        return pulumi.get(self, "identity_ids")

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> _builtins.str:
        """
        The Principal ID of the System Assigned Managed Service Identity that is configured on this Dev Center Project Environment Type.
        """
        return pulumi.get(self, "principal_id")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        """
        The Tenant ID of the System Assigned Managed Service Identity that is configured on this Dev Center Project Environment Type.
        """
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of Managed Service Identity that is configured on this Dev Center Project Environment Type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetProjectEnvironmentTypeUserRoleAssignmentResult(dict):
    def __init__(__self__, *,
                 roles: Sequence[_builtins.str],
                 user_id: _builtins.str):
        """
        :param Sequence[_builtins.str] roles: A list of roles to assign to the `user_id`.
        :param _builtins.str user_id: The user object ID that is assigned roles.
        """
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "user_id", user_id)

    @_builtins.property
    @pulumi.getter
    def roles(self) -> Sequence[_builtins.str]:
        """
        A list of roles to assign to the `user_id`.
        """
        return pulumi.get(self, "roles")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.str:
        """
        The user object ID that is assigned roles.
        """
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetProjectIdentityResult(dict):
    def __init__(__self__, *,
                 identity_ids: Sequence[_builtins.str],
                 principal_id: _builtins.str,
                 tenant_id: _builtins.str,
                 type: _builtins.str):
        """
        :param Sequence[_builtins.str] identity_ids: The list of User Assigned Managed Identity IDs assigned to this Dev Center Project.
        :param _builtins.str principal_id: The Principal ID of the System Assigned Managed Service Identity that is configured on this Dev Center Project.
        :param _builtins.str tenant_id: The Tenant ID of the System Assigned Managed Service Identity that is configured on this Dev Center Project.
        :param _builtins.str type: The type of Managed Service Identity that is configured on this Dev Center Project.
        """
        pulumi.set(__self__, "identity_ids", identity_ids)
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Sequence[_builtins.str]:
        """
        The list of User Assigned Managed Identity IDs assigned to this Dev Center Project.
        """
        return pulumi.get(self, "identity_ids")

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> _builtins.str:
        """
        The Principal ID of the System Assigned Managed Service Identity that is configured on this Dev Center Project.
        """
        return pulumi.get(self, "principal_id")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        """
        The Tenant ID of the System Assigned Managed Service Identity that is configured on this Dev Center Project.
        """
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of Managed Service Identity that is configured on this Dev Center Project.
        """
        return pulumi.get(self, "type")


