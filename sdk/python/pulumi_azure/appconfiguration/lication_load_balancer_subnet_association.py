# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['LicationLoadBalancerSubnetAssociationArgs', 'LicationLoadBalancerSubnetAssociation']

@pulumi.input_type
class LicationLoadBalancerSubnetAssociationArgs:
    def __init__(__self__, *,
                 application_load_balancer_id: pulumi.Input[str],
                 subnet_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a LicationLoadBalancerSubnetAssociation resource.
        :param pulumi.Input[str] application_load_balancer_id: The ID of the Application Gateway for Containers. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the subnet which the Application Gateway for Containers associated to. Changing this forces a new resource to be created.
               
               **Note:** The subnet to be used must have a delegation for  `Microsoft.ServiceNetworking/trafficControllers` as shown in the example above.
        :param pulumi.Input[str] name: The name which should be used for this Application Gateway for Containers Association. Changing this forces a new resource to be created.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags which should be assigned to the Application Gateway for Containers Association.
        """
        pulumi.set(__self__, "application_load_balancer_id", application_load_balancer_id)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="applicationLoadBalancerId")
    def application_load_balancer_id(self) -> pulumi.Input[str]:
        """
        The ID of the Application Gateway for Containers. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "application_load_balancer_id")

    @application_load_balancer_id.setter
    def application_load_balancer_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_load_balancer_id", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        The ID of the subnet which the Application Gateway for Containers associated to. Changing this forces a new resource to be created.

        **Note:** The subnet to be used must have a delegation for  `Microsoft.ServiceNetworking/trafficControllers` as shown in the example above.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name which should be used for this Application Gateway for Containers Association. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A mapping of tags which should be assigned to the Application Gateway for Containers Association.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _LicationLoadBalancerSubnetAssociationState:
    def __init__(__self__, *,
                 application_load_balancer_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering LicationLoadBalancerSubnetAssociation resources.
        :param pulumi.Input[str] application_load_balancer_id: The ID of the Application Gateway for Containers. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: The name which should be used for this Application Gateway for Containers Association. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the subnet which the Application Gateway for Containers associated to. Changing this forces a new resource to be created.
               
               **Note:** The subnet to be used must have a delegation for  `Microsoft.ServiceNetworking/trafficControllers` as shown in the example above.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags which should be assigned to the Application Gateway for Containers Association.
        """
        if application_load_balancer_id is not None:
            pulumi.set(__self__, "application_load_balancer_id", application_load_balancer_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="applicationLoadBalancerId")
    def application_load_balancer_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Application Gateway for Containers. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "application_load_balancer_id")

    @application_load_balancer_id.setter
    def application_load_balancer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_load_balancer_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name which should be used for this Application Gateway for Containers Association. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the subnet which the Application Gateway for Containers associated to. Changing this forces a new resource to be created.

        **Note:** The subnet to be used must have a delegation for  `Microsoft.ServiceNetworking/trafficControllers` as shown in the example above.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A mapping of tags which should be assigned to the Application Gateway for Containers Association.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


class LicationLoadBalancerSubnetAssociation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_load_balancer_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Manages an association between an Application Gateway for Containers and a Subnet.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="westeurope")
        example_lication_load_balancer = azure.appconfiguration.LicationLoadBalancer("exampleLicationLoadBalancer",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name)
        example_virtual_network = azure.network.VirtualNetwork("exampleVirtualNetwork",
            address_spaces=["10.0.0.0/16"],
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name)
        example_subnet = azure.network.Subnet("exampleSubnet",
            resource_group_name=example_resource_group.name,
            virtual_network_name=example_virtual_network.name,
            address_prefixes=["10.0.1.0/24"],
            delegations=[azure.network.SubnetDelegationArgs(
                name="delegation",
                service_delegation=azure.network.SubnetDelegationServiceDelegationArgs(
                    name="Microsoft.ServiceNetworking/trafficControllers",
                    actions=["Microsoft.Network/virtualNetworks/subnets/join/action"],
                ),
            )])
        example_lication_load_balancer_subnet_association = azure.appconfiguration.LicationLoadBalancerSubnetAssociation("exampleLicationLoadBalancerSubnetAssociation",
            application_load_balancer_id=example_lication_load_balancer.id,
            subnet_id=example_subnet.id)
        ```

        ## Import

        Application Gateway for Containers Associations can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:appconfiguration/licationLoadBalancerSubnetAssociation:LicationLoadBalancerSubnetAssociation example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.ServiceNetworking/trafficControllers/alb1/associations/association1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application_load_balancer_id: The ID of the Application Gateway for Containers. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: The name which should be used for this Application Gateway for Containers Association. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the subnet which the Application Gateway for Containers associated to. Changing this forces a new resource to be created.
               
               **Note:** The subnet to be used must have a delegation for  `Microsoft.ServiceNetworking/trafficControllers` as shown in the example above.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags which should be assigned to the Application Gateway for Containers Association.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LicationLoadBalancerSubnetAssociationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an association between an Application Gateway for Containers and a Subnet.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="westeurope")
        example_lication_load_balancer = azure.appconfiguration.LicationLoadBalancer("exampleLicationLoadBalancer",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name)
        example_virtual_network = azure.network.VirtualNetwork("exampleVirtualNetwork",
            address_spaces=["10.0.0.0/16"],
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name)
        example_subnet = azure.network.Subnet("exampleSubnet",
            resource_group_name=example_resource_group.name,
            virtual_network_name=example_virtual_network.name,
            address_prefixes=["10.0.1.0/24"],
            delegations=[azure.network.SubnetDelegationArgs(
                name="delegation",
                service_delegation=azure.network.SubnetDelegationServiceDelegationArgs(
                    name="Microsoft.ServiceNetworking/trafficControllers",
                    actions=["Microsoft.Network/virtualNetworks/subnets/join/action"],
                ),
            )])
        example_lication_load_balancer_subnet_association = azure.appconfiguration.LicationLoadBalancerSubnetAssociation("exampleLicationLoadBalancerSubnetAssociation",
            application_load_balancer_id=example_lication_load_balancer.id,
            subnet_id=example_subnet.id)
        ```

        ## Import

        Application Gateway for Containers Associations can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:appconfiguration/licationLoadBalancerSubnetAssociation:LicationLoadBalancerSubnetAssociation example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.ServiceNetworking/trafficControllers/alb1/associations/association1
        ```

        :param str resource_name: The name of the resource.
        :param LicationLoadBalancerSubnetAssociationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LicationLoadBalancerSubnetAssociationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_load_balancer_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LicationLoadBalancerSubnetAssociationArgs.__new__(LicationLoadBalancerSubnetAssociationArgs)

            if application_load_balancer_id is None and not opts.urn:
                raise TypeError("Missing required property 'application_load_balancer_id'")
            __props__.__dict__["application_load_balancer_id"] = application_load_balancer_id
            __props__.__dict__["name"] = name
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
        super(LicationLoadBalancerSubnetAssociation, __self__).__init__(
            'azure:appconfiguration/licationLoadBalancerSubnetAssociation:LicationLoadBalancerSubnetAssociation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_load_balancer_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None) -> 'LicationLoadBalancerSubnetAssociation':
        """
        Get an existing LicationLoadBalancerSubnetAssociation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application_load_balancer_id: The ID of the Application Gateway for Containers. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: The name which should be used for this Application Gateway for Containers Association. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the subnet which the Application Gateway for Containers associated to. Changing this forces a new resource to be created.
               
               **Note:** The subnet to be used must have a delegation for  `Microsoft.ServiceNetworking/trafficControllers` as shown in the example above.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags which should be assigned to the Application Gateway for Containers Association.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LicationLoadBalancerSubnetAssociationState.__new__(_LicationLoadBalancerSubnetAssociationState)

        __props__.__dict__["application_load_balancer_id"] = application_load_balancer_id
        __props__.__dict__["name"] = name
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        return LicationLoadBalancerSubnetAssociation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="applicationLoadBalancerId")
    def application_load_balancer_id(self) -> pulumi.Output[str]:
        """
        The ID of the Application Gateway for Containers. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "application_load_balancer_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name which should be used for this Application Gateway for Containers Association. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        The ID of the subnet which the Application Gateway for Containers associated to. Changing this forces a new resource to be created.

        **Note:** The subnet to be used must have a delegation for  `Microsoft.ServiceNetworking/trafficControllers` as shown in the example above.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A mapping of tags which should be assigned to the Application Gateway for Containers Association.
        """
        return pulumi.get(self, "tags")

