# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ConfigurationFeatureTargetingFilter',
    'ConfigurationFeatureTargetingFilterGroup',
    'ConfigurationFeatureTimewindowFilter',
    'ConfigurationStoreEncryption',
    'ConfigurationStoreIdentity',
    'ConfigurationStorePrimaryReadKey',
    'ConfigurationStorePrimaryWriteKey',
    'ConfigurationStoreReplica',
    'ConfigurationStoreSecondaryReadKey',
    'ConfigurationStoreSecondaryWriteKey',
    'GetConfigurationKeysItemResult',
    'GetConfigurationStoreEncryptionResult',
    'GetConfigurationStoreIdentityResult',
    'GetConfigurationStorePrimaryReadKeyResult',
    'GetConfigurationStorePrimaryWriteKeyResult',
    'GetConfigurationStoreReplicaResult',
    'GetConfigurationStoreSecondaryReadKeyResult',
    'GetConfigurationStoreSecondaryWriteKeyResult',
]

@pulumi.output_type
class ConfigurationFeatureTargetingFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultRolloutPercentage":
            suggest = "default_rollout_percentage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationFeatureTargetingFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationFeatureTargetingFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationFeatureTargetingFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_rollout_percentage: int,
                 groups: Optional[Sequence['outputs.ConfigurationFeatureTargetingFilterGroup']] = None,
                 users: Optional[Sequence[str]] = None):
        """
        :param int default_rollout_percentage: A number representing the percentage of the entire user base.
        :param Sequence['ConfigurationFeatureTargetingFilterGroupArgs'] groups: One or more blocks of type `groups` as defined below.
        :param Sequence[str] users: A list of users to target for this feature.
        """
        ConfigurationFeatureTargetingFilter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_rollout_percentage=default_rollout_percentage,
            groups=groups,
            users=users,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_rollout_percentage: int,
             groups: Optional[Sequence['outputs.ConfigurationFeatureTargetingFilterGroup']] = None,
             users: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("default_rollout_percentage", default_rollout_percentage)
        if groups is not None:
            _setter("groups", groups)
        if users is not None:
            _setter("users", users)

    @property
    @pulumi.getter(name="defaultRolloutPercentage")
    def default_rollout_percentage(self) -> int:
        """
        A number representing the percentage of the entire user base.
        """
        return pulumi.get(self, "default_rollout_percentage")

    @property
    @pulumi.getter
    def groups(self) -> Optional[Sequence['outputs.ConfigurationFeatureTargetingFilterGroup']]:
        """
        One or more blocks of type `groups` as defined below.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence[str]]:
        """
        A list of users to target for this feature.
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class ConfigurationFeatureTargetingFilterGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rolloutPercentage":
            suggest = "rollout_percentage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationFeatureTargetingFilterGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationFeatureTargetingFilterGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationFeatureTargetingFilterGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 rollout_percentage: int):
        """
        :param str name: The name of the group.
        :param int rollout_percentage: Rollout percentage of the group.
        """
        ConfigurationFeatureTargetingFilterGroup._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            rollout_percentage=rollout_percentage,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             rollout_percentage: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("rollout_percentage", rollout_percentage)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="rolloutPercentage")
    def rollout_percentage(self) -> int:
        """
        Rollout percentage of the group.
        """
        return pulumi.get(self, "rollout_percentage")


@pulumi.output_type
class ConfigurationFeatureTimewindowFilter(dict):
    def __init__(__self__, *,
                 end: Optional[str] = None,
                 start: Optional[str] = None):
        """
        :param str end: The latest timestamp the feature is enabled. The timestamp must be in RFC3339 format.
        :param str start: The earliest timestamp the feature is enabled. The timestamp must be in RFC3339 format.
        """
        ConfigurationFeatureTimewindowFilter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end=end,
            start=start,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end: Optional[str] = None,
             start: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if end is not None:
            _setter("end", end)
        if start is not None:
            _setter("start", start)

    @property
    @pulumi.getter
    def end(self) -> Optional[str]:
        """
        The latest timestamp the feature is enabled. The timestamp must be in RFC3339 format.
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        """
        The earliest timestamp the feature is enabled. The timestamp must be in RFC3339 format.
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class ConfigurationStoreEncryption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "identityClientId":
            suggest = "identity_client_id"
        elif key == "keyVaultKeyIdentifier":
            suggest = "key_vault_key_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationStoreEncryption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationStoreEncryption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationStoreEncryption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 identity_client_id: Optional[str] = None,
                 key_vault_key_identifier: Optional[str] = None):
        """
        :param str identity_client_id: Specifies the client id of the identity which will be used to access key vault.
        :param str key_vault_key_identifier: Specifies the URI of the key vault key used to encrypt data.
        """
        ConfigurationStoreEncryption._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            identity_client_id=identity_client_id,
            key_vault_key_identifier=key_vault_key_identifier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             identity_client_id: Optional[str] = None,
             key_vault_key_identifier: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if identity_client_id is not None:
            _setter("identity_client_id", identity_client_id)
        if key_vault_key_identifier is not None:
            _setter("key_vault_key_identifier", key_vault_key_identifier)

    @property
    @pulumi.getter(name="identityClientId")
    def identity_client_id(self) -> Optional[str]:
        """
        Specifies the client id of the identity which will be used to access key vault.
        """
        return pulumi.get(self, "identity_client_id")

    @property
    @pulumi.getter(name="keyVaultKeyIdentifier")
    def key_vault_key_identifier(self) -> Optional[str]:
        """
        Specifies the URI of the key vault key used to encrypt data.
        """
        return pulumi.get(self, "key_vault_key_identifier")


@pulumi.output_type
class ConfigurationStoreIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "identityIds":
            suggest = "identity_ids"
        elif key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationStoreIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationStoreIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationStoreIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 identity_ids: Optional[Sequence[str]] = None,
                 principal_id: Optional[str] = None,
                 tenant_id: Optional[str] = None):
        """
        :param str type: Specifies the type of Managed Service Identity that should be configured on this App Configuration. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
        :param Sequence[str] identity_ids: A list of User Assigned Managed Identity IDs to be assigned to this App Configuration.
               
               > **NOTE:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
        :param str principal_id: The Principal ID associated with this Managed Service Identity.
        :param str tenant_id: The Tenant ID associated with this Managed Service Identity.
        """
        ConfigurationStoreIdentity._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            identity_ids=identity_ids,
            principal_id=principal_id,
            tenant_id=tenant_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             identity_ids: Optional[Sequence[str]] = None,
             principal_id: Optional[str] = None,
             tenant_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if identity_ids is not None:
            _setter("identity_ids", identity_ids)
        if principal_id is not None:
            _setter("principal_id", principal_id)
        if tenant_id is not None:
            _setter("tenant_id", tenant_id)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the type of Managed Service Identity that should be configured on this App Configuration. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Optional[Sequence[str]]:
        """
        A list of User Assigned Managed Identity IDs to be assigned to this App Configuration.

        > **NOTE:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
        """
        return pulumi.get(self, "identity_ids")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[str]:
        """
        The Principal ID associated with this Managed Service Identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        """
        The Tenant ID associated with this Managed Service Identity.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class ConfigurationStorePrimaryReadKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionString":
            suggest = "connection_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationStorePrimaryReadKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationStorePrimaryReadKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationStorePrimaryReadKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_string: Optional[str] = None,
                 id: Optional[str] = None,
                 secret: Optional[str] = None):
        """
        :param str connection_string: The Connection String for this Access Key - comprising of the Endpoint, ID and Secret.
        :param str id: The ID of the Access Key.
        :param str secret: The Secret of the Access Key.
        """
        ConfigurationStorePrimaryReadKey._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            connection_string=connection_string,
            id=id,
            secret=secret,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             connection_string: Optional[str] = None,
             id: Optional[str] = None,
             secret: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if connection_string is not None:
            _setter("connection_string", connection_string)
        if id is not None:
            _setter("id", id)
        if secret is not None:
            _setter("secret", secret)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> Optional[str]:
        """
        The Connection String for this Access Key - comprising of the Endpoint, ID and Secret.
        """
        return pulumi.get(self, "connection_string")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Access Key.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        """
        The Secret of the Access Key.
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class ConfigurationStorePrimaryWriteKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionString":
            suggest = "connection_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationStorePrimaryWriteKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationStorePrimaryWriteKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationStorePrimaryWriteKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_string: Optional[str] = None,
                 id: Optional[str] = None,
                 secret: Optional[str] = None):
        """
        :param str connection_string: The Connection String for this Access Key - comprising of the Endpoint, ID and Secret.
        :param str id: The ID of the Access Key.
        :param str secret: The Secret of the Access Key.
        """
        ConfigurationStorePrimaryWriteKey._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            connection_string=connection_string,
            id=id,
            secret=secret,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             connection_string: Optional[str] = None,
             id: Optional[str] = None,
             secret: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if connection_string is not None:
            _setter("connection_string", connection_string)
        if id is not None:
            _setter("id", id)
        if secret is not None:
            _setter("secret", secret)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> Optional[str]:
        """
        The Connection String for this Access Key - comprising of the Endpoint, ID and Secret.
        """
        return pulumi.get(self, "connection_string")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Access Key.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        """
        The Secret of the Access Key.
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class ConfigurationStoreReplica(dict):
    def __init__(__self__, *,
                 location: str,
                 name: str,
                 endpoint: Optional[str] = None,
                 id: Optional[str] = None):
        """
        :param str location: Specifies the supported Azure location where the replica exists. Changing this forces a new replica to be created.
        :param str name: Specifies the name of the replica. Changing this forces a new replica to be created.
        :param str endpoint: The URL of the App Configuration Replica.
        :param str id: The ID of the Access Key.
        """
        ConfigurationStoreReplica._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            location=location,
            name=name,
            endpoint=endpoint,
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             location: str,
             name: str,
             endpoint: Optional[str] = None,
             id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("location", location)
        _setter("name", name)
        if endpoint is not None:
            _setter("endpoint", endpoint)
        if id is not None:
            _setter("id", id)

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Specifies the supported Azure location where the replica exists. Changing this forces a new replica to be created.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the replica. Changing this forces a new replica to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        """
        The URL of the App Configuration Replica.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Access Key.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ConfigurationStoreSecondaryReadKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionString":
            suggest = "connection_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationStoreSecondaryReadKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationStoreSecondaryReadKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationStoreSecondaryReadKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_string: Optional[str] = None,
                 id: Optional[str] = None,
                 secret: Optional[str] = None):
        """
        :param str connection_string: The Connection String for this Access Key - comprising of the Endpoint, ID and Secret.
        :param str id: The ID of the Access Key.
        :param str secret: The Secret of the Access Key.
        """
        ConfigurationStoreSecondaryReadKey._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            connection_string=connection_string,
            id=id,
            secret=secret,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             connection_string: Optional[str] = None,
             id: Optional[str] = None,
             secret: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if connection_string is not None:
            _setter("connection_string", connection_string)
        if id is not None:
            _setter("id", id)
        if secret is not None:
            _setter("secret", secret)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> Optional[str]:
        """
        The Connection String for this Access Key - comprising of the Endpoint, ID and Secret.
        """
        return pulumi.get(self, "connection_string")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Access Key.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        """
        The Secret of the Access Key.
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class ConfigurationStoreSecondaryWriteKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionString":
            suggest = "connection_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationStoreSecondaryWriteKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationStoreSecondaryWriteKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationStoreSecondaryWriteKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_string: Optional[str] = None,
                 id: Optional[str] = None,
                 secret: Optional[str] = None):
        """
        :param str connection_string: The Connection String for this Access Key - comprising of the Endpoint, ID and Secret.
        :param str id: The ID of the Access Key.
        :param str secret: The Secret of the Access Key.
        """
        ConfigurationStoreSecondaryWriteKey._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            connection_string=connection_string,
            id=id,
            secret=secret,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             connection_string: Optional[str] = None,
             id: Optional[str] = None,
             secret: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if connection_string is not None:
            _setter("connection_string", connection_string)
        if id is not None:
            _setter("id", id)
        if secret is not None:
            _setter("secret", secret)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> Optional[str]:
        """
        The Connection String for this Access Key - comprising of the Endpoint, ID and Secret.
        """
        return pulumi.get(self, "connection_string")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Access Key.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        """
        The Secret of the Access Key.
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class GetConfigurationKeysItemResult(dict):
    def __init__(__self__, *,
                 content_type: str,
                 etag: str,
                 key: str,
                 label: str,
                 locked: bool,
                 tags: Mapping[str, str],
                 type: str,
                 value: str,
                 vault_key_reference: str):
        """
        :param str content_type: The content type of the App Configuration Key.
        :param str etag: The ETag of the key.
        :param str key: The name of the App Configuration Keys to look up.
        :param str label: The label of the App Configuration Keys tp look up.
        :param bool locked: Is this App Configuration Key be Locked to prevent changes.
        :param Mapping[str, str] tags: A mapping of tags assigned to the resource.
        :param str type: The type of the App Configuration Key. It can either be `kv` (simple [key/value](https://docs.microsoft.com/azure/azure-app-configuration/concept-key-value)) or `vault` (where the value is a reference to a [Key Vault Secret](https://azure.microsoft.com/en-gb/services/key-vault/).
        :param str value: The value of the App Configuration Key.
        :param str vault_key_reference: The ID of the vault secret this App Configuration Key refers to, when `type` is `vault`.
        """
        GetConfigurationKeysItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content_type=content_type,
            etag=etag,
            key=key,
            label=label,
            locked=locked,
            tags=tags,
            type=type,
            value=value,
            vault_key_reference=vault_key_reference,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content_type: str,
             etag: str,
             key: str,
             label: str,
             locked: bool,
             tags: Mapping[str, str],
             type: str,
             value: str,
             vault_key_reference: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("content_type", content_type)
        _setter("etag", etag)
        _setter("key", key)
        _setter("label", label)
        _setter("locked", locked)
        _setter("tags", tags)
        _setter("type", type)
        _setter("value", value)
        _setter("vault_key_reference", vault_key_reference)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        """
        The content type of the App Configuration Key.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        The ETag of the key.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The name of the App Configuration Keys to look up.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label of the App Configuration Keys tp look up.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def locked(self) -> bool:
        """
        Is this App Configuration Key be Locked to prevent changes.
        """
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, str]:
        """
        A mapping of tags assigned to the resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the App Configuration Key. It can either be `kv` (simple [key/value](https://docs.microsoft.com/azure/azure-app-configuration/concept-key-value)) or `vault` (where the value is a reference to a [Key Vault Secret](https://azure.microsoft.com/en-gb/services/key-vault/).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the App Configuration Key.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="vaultKeyReference")
    def vault_key_reference(self) -> str:
        """
        The ID of the vault secret this App Configuration Key refers to, when `type` is `vault`.
        """
        return pulumi.get(self, "vault_key_reference")


@pulumi.output_type
class GetConfigurationStoreEncryptionResult(dict):
    def __init__(__self__, *,
                 identity_client_id: str,
                 key_vault_key_identifier: str):
        GetConfigurationStoreEncryptionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            identity_client_id=identity_client_id,
            key_vault_key_identifier=key_vault_key_identifier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             identity_client_id: str,
             key_vault_key_identifier: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("identity_client_id", identity_client_id)
        _setter("key_vault_key_identifier", key_vault_key_identifier)

    @property
    @pulumi.getter(name="identityClientId")
    def identity_client_id(self) -> str:
        return pulumi.get(self, "identity_client_id")

    @property
    @pulumi.getter(name="keyVaultKeyIdentifier")
    def key_vault_key_identifier(self) -> str:
        return pulumi.get(self, "key_vault_key_identifier")


@pulumi.output_type
class GetConfigurationStoreIdentityResult(dict):
    def __init__(__self__, *,
                 identity_ids: Sequence[str],
                 principal_id: str,
                 tenant_id: str,
                 type: str):
        GetConfigurationStoreIdentityResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            identity_ids=identity_ids,
            principal_id=principal_id,
            tenant_id=tenant_id,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             identity_ids: Sequence[str],
             principal_id: str,
             tenant_id: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("identity_ids", identity_ids)
        _setter("principal_id", principal_id)
        _setter("tenant_id", tenant_id)
        _setter("type", type)

    @property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Sequence[str]:
        return pulumi.get(self, "identity_ids")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetConfigurationStorePrimaryReadKeyResult(dict):
    def __init__(__self__, *,
                 connection_string: str,
                 id: str,
                 secret: str):
        """
        :param str connection_string: The Connection String for this Access Key - comprising of the Endpoint, ID and Secret.
        :param str id: The ID of the Access Key.
        :param str secret: The Secret of the Access Key.
        """
        GetConfigurationStorePrimaryReadKeyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            connection_string=connection_string,
            id=id,
            secret=secret,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             connection_string: str,
             id: str,
             secret: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("connection_string", connection_string)
        _setter("id", id)
        _setter("secret", secret)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> str:
        """
        The Connection String for this Access Key - comprising of the Endpoint, ID and Secret.
        """
        return pulumi.get(self, "connection_string")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Access Key.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def secret(self) -> str:
        """
        The Secret of the Access Key.
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class GetConfigurationStorePrimaryWriteKeyResult(dict):
    def __init__(__self__, *,
                 connection_string: str,
                 id: str,
                 secret: str):
        """
        :param str connection_string: The Connection String for this Access Key - comprising of the Endpoint, ID and Secret.
        :param str id: The ID of the Access Key.
        :param str secret: The Secret of the Access Key.
        """
        GetConfigurationStorePrimaryWriteKeyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            connection_string=connection_string,
            id=id,
            secret=secret,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             connection_string: str,
             id: str,
             secret: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("connection_string", connection_string)
        _setter("id", id)
        _setter("secret", secret)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> str:
        """
        The Connection String for this Access Key - comprising of the Endpoint, ID and Secret.
        """
        return pulumi.get(self, "connection_string")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Access Key.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def secret(self) -> str:
        """
        The Secret of the Access Key.
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class GetConfigurationStoreReplicaResult(dict):
    def __init__(__self__, *,
                 endpoint: str,
                 id: str,
                 location: str,
                 name: str):
        """
        :param str endpoint: The URL of the App Configuration Replica.
        :param str id: The ID of the Access Key.
        :param str location: The supported Azure location where the App Configuration Replica exists.
        :param str name: The Name of this App Configuration.
        """
        GetConfigurationStoreReplicaResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            endpoint=endpoint,
            id=id,
            location=location,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             endpoint: str,
             id: str,
             location: str,
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("endpoint", endpoint)
        _setter("id", id)
        _setter("location", location)
        _setter("name", name)

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        """
        The URL of the App Configuration Replica.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Access Key.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The supported Azure location where the App Configuration Replica exists.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Name of this App Configuration.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetConfigurationStoreSecondaryReadKeyResult(dict):
    def __init__(__self__, *,
                 connection_string: str,
                 id: str,
                 secret: str):
        """
        :param str connection_string: The Connection String for this Access Key - comprising of the Endpoint, ID and Secret.
        :param str id: The ID of the Access Key.
        :param str secret: The Secret of the Access Key.
        """
        GetConfigurationStoreSecondaryReadKeyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            connection_string=connection_string,
            id=id,
            secret=secret,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             connection_string: str,
             id: str,
             secret: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("connection_string", connection_string)
        _setter("id", id)
        _setter("secret", secret)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> str:
        """
        The Connection String for this Access Key - comprising of the Endpoint, ID and Secret.
        """
        return pulumi.get(self, "connection_string")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Access Key.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def secret(self) -> str:
        """
        The Secret of the Access Key.
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class GetConfigurationStoreSecondaryWriteKeyResult(dict):
    def __init__(__self__, *,
                 connection_string: str,
                 id: str,
                 secret: str):
        """
        :param str connection_string: The Connection String for this Access Key - comprising of the Endpoint, ID and Secret.
        :param str id: The ID of the Access Key.
        :param str secret: The Secret of the Access Key.
        """
        GetConfigurationStoreSecondaryWriteKeyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            connection_string=connection_string,
            id=id,
            secret=secret,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             connection_string: str,
             id: str,
             secret: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("connection_string", connection_string)
        _setter("id", id)
        _setter("secret", secret)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> str:
        """
        The Connection String for this Access Key - comprising of the Endpoint, ID and Secret.
        """
        return pulumi.get(self, "connection_string")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Access Key.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def secret(self) -> str:
        """
        The Secret of the Access Key.
        """
        return pulumi.get(self, "secret")


