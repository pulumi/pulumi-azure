# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RunCommandArgs', 'RunCommand']

@pulumi.input_type
class RunCommandArgs:
    def __init__(__self__, *,
                 source: pulumi.Input['RunCommandSourceArgs'],
                 virtual_machine_id: pulumi.Input[str],
                 error_blob_managed_identity: Optional[pulumi.Input['RunCommandErrorBlobManagedIdentityArgs']] = None,
                 error_blob_uri: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 output_blob_managed_identity: Optional[pulumi.Input['RunCommandOutputBlobManagedIdentityArgs']] = None,
                 output_blob_uri: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['RunCommandParameterArgs']]]] = None,
                 protected_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['RunCommandProtectedParameterArgs']]]] = None,
                 run_as_password: Optional[pulumi.Input[str]] = None,
                 run_as_user: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a RunCommand resource.
        :param pulumi.Input['RunCommandSourceArgs'] source: A `source` block as defined below. The source of the run command script.
        :param pulumi.Input[str] virtual_machine_id: Specifies the Virtual Machine ID within which this Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
        :param pulumi.Input['RunCommandErrorBlobManagedIdentityArgs'] error_blob_managed_identity: An `error_blob_managed_identity` block as defined below. User-assigned managed Identity that has access to errorBlobUri storage blob.
        :param pulumi.Input[str] error_blob_uri: Specifies the Azure storage blob where script error stream will be uploaded.
        :param pulumi.Input[str] location: The Azure Region where the Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
        :param pulumi.Input[str] name: Specifies the name of this Virtual Machine Run Command. Changing this forces a new Virtual Machine Run Command to be created.
        :param pulumi.Input['RunCommandOutputBlobManagedIdentityArgs'] output_blob_managed_identity: An `output_blob_managed_identity` block as defined below. User-assigned managed Identity that has access to outputBlobUri storage blob.
        :param pulumi.Input[str] output_blob_uri: Specifies the Azure storage blob where script output stream will be uploaded. It can be basic blob URI with SAS token.
        :param pulumi.Input[Sequence[pulumi.Input['RunCommandParameterArgs']]] parameters: A list of `parameter` blocks as defined below. The parameters used by the script.
        :param pulumi.Input[Sequence[pulumi.Input['RunCommandProtectedParameterArgs']]] protected_parameters: A list of `protected_parameter` blocks as defined below. The protected parameters used by the script.
        :param pulumi.Input[str] run_as_password: Specifies the user account password on the VM when executing the Virtual Machine Run Command.
        :param pulumi.Input[str] run_as_user: Specifies the user account on the VM when executing the Virtual Machine Run Command.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags which should be assigned to the Virtual Machine Run Command.
        """
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "virtual_machine_id", virtual_machine_id)
        if error_blob_managed_identity is not None:
            pulumi.set(__self__, "error_blob_managed_identity", error_blob_managed_identity)
        if error_blob_uri is not None:
            pulumi.set(__self__, "error_blob_uri", error_blob_uri)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if output_blob_managed_identity is not None:
            pulumi.set(__self__, "output_blob_managed_identity", output_blob_managed_identity)
        if output_blob_uri is not None:
            pulumi.set(__self__, "output_blob_uri", output_blob_uri)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if protected_parameters is not None:
            pulumi.set(__self__, "protected_parameters", protected_parameters)
        if run_as_password is not None:
            pulumi.set(__self__, "run_as_password", run_as_password)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input['RunCommandSourceArgs']:
        """
        A `source` block as defined below. The source of the run command script.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input['RunCommandSourceArgs']):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> pulumi.Input[str]:
        """
        Specifies the Virtual Machine ID within which this Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
        """
        return pulumi.get(self, "virtual_machine_id")

    @virtual_machine_id.setter
    def virtual_machine_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "virtual_machine_id", value)

    @property
    @pulumi.getter(name="errorBlobManagedIdentity")
    def error_blob_managed_identity(self) -> Optional[pulumi.Input['RunCommandErrorBlobManagedIdentityArgs']]:
        """
        An `error_blob_managed_identity` block as defined below. User-assigned managed Identity that has access to errorBlobUri storage blob.
        """
        return pulumi.get(self, "error_blob_managed_identity")

    @error_blob_managed_identity.setter
    def error_blob_managed_identity(self, value: Optional[pulumi.Input['RunCommandErrorBlobManagedIdentityArgs']]):
        pulumi.set(self, "error_blob_managed_identity", value)

    @property
    @pulumi.getter(name="errorBlobUri")
    def error_blob_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Azure storage blob where script error stream will be uploaded.
        """
        return pulumi.get(self, "error_blob_uri")

    @error_blob_uri.setter
    def error_blob_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_blob_uri", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The Azure Region where the Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of this Virtual Machine Run Command. Changing this forces a new Virtual Machine Run Command to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="outputBlobManagedIdentity")
    def output_blob_managed_identity(self) -> Optional[pulumi.Input['RunCommandOutputBlobManagedIdentityArgs']]:
        """
        An `output_blob_managed_identity` block as defined below. User-assigned managed Identity that has access to outputBlobUri storage blob.
        """
        return pulumi.get(self, "output_blob_managed_identity")

    @output_blob_managed_identity.setter
    def output_blob_managed_identity(self, value: Optional[pulumi.Input['RunCommandOutputBlobManagedIdentityArgs']]):
        pulumi.set(self, "output_blob_managed_identity", value)

    @property
    @pulumi.getter(name="outputBlobUri")
    def output_blob_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Azure storage blob where script output stream will be uploaded. It can be basic blob URI with SAS token.
        """
        return pulumi.get(self, "output_blob_uri")

    @output_blob_uri.setter
    def output_blob_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_blob_uri", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunCommandParameterArgs']]]]:
        """
        A list of `parameter` blocks as defined below. The parameters used by the script.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunCommandParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="protectedParameters")
    def protected_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunCommandProtectedParameterArgs']]]]:
        """
        A list of `protected_parameter` blocks as defined below. The protected parameters used by the script.
        """
        return pulumi.get(self, "protected_parameters")

    @protected_parameters.setter
    def protected_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunCommandProtectedParameterArgs']]]]):
        pulumi.set(self, "protected_parameters", value)

    @property
    @pulumi.getter(name="runAsPassword")
    def run_as_password(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the user account password on the VM when executing the Virtual Machine Run Command.
        """
        return pulumi.get(self, "run_as_password")

    @run_as_password.setter
    def run_as_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_password", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the user account on the VM when executing the Virtual Machine Run Command.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A mapping of tags which should be assigned to the Virtual Machine Run Command.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _RunCommandState:
    def __init__(__self__, *,
                 error_blob_managed_identity: Optional[pulumi.Input['RunCommandErrorBlobManagedIdentityArgs']] = None,
                 error_blob_uri: Optional[pulumi.Input[str]] = None,
                 instance_views: Optional[pulumi.Input[Sequence[pulumi.Input['RunCommandInstanceViewArgs']]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 output_blob_managed_identity: Optional[pulumi.Input['RunCommandOutputBlobManagedIdentityArgs']] = None,
                 output_blob_uri: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['RunCommandParameterArgs']]]] = None,
                 protected_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['RunCommandProtectedParameterArgs']]]] = None,
                 run_as_password: Optional[pulumi.Input[str]] = None,
                 run_as_user: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input['RunCommandSourceArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 virtual_machine_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RunCommand resources.
        :param pulumi.Input['RunCommandErrorBlobManagedIdentityArgs'] error_blob_managed_identity: An `error_blob_managed_identity` block as defined below. User-assigned managed Identity that has access to errorBlobUri storage blob.
        :param pulumi.Input[str] error_blob_uri: Specifies the Azure storage blob where script error stream will be uploaded.
        :param pulumi.Input[str] location: The Azure Region where the Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
        :param pulumi.Input[str] name: Specifies the name of this Virtual Machine Run Command. Changing this forces a new Virtual Machine Run Command to be created.
        :param pulumi.Input['RunCommandOutputBlobManagedIdentityArgs'] output_blob_managed_identity: An `output_blob_managed_identity` block as defined below. User-assigned managed Identity that has access to outputBlobUri storage blob.
        :param pulumi.Input[str] output_blob_uri: Specifies the Azure storage blob where script output stream will be uploaded. It can be basic blob URI with SAS token.
        :param pulumi.Input[Sequence[pulumi.Input['RunCommandParameterArgs']]] parameters: A list of `parameter` blocks as defined below. The parameters used by the script.
        :param pulumi.Input[Sequence[pulumi.Input['RunCommandProtectedParameterArgs']]] protected_parameters: A list of `protected_parameter` blocks as defined below. The protected parameters used by the script.
        :param pulumi.Input[str] run_as_password: Specifies the user account password on the VM when executing the Virtual Machine Run Command.
        :param pulumi.Input[str] run_as_user: Specifies the user account on the VM when executing the Virtual Machine Run Command.
        :param pulumi.Input['RunCommandSourceArgs'] source: A `source` block as defined below. The source of the run command script.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags which should be assigned to the Virtual Machine Run Command.
        :param pulumi.Input[str] virtual_machine_id: Specifies the Virtual Machine ID within which this Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
        """
        if error_blob_managed_identity is not None:
            pulumi.set(__self__, "error_blob_managed_identity", error_blob_managed_identity)
        if error_blob_uri is not None:
            pulumi.set(__self__, "error_blob_uri", error_blob_uri)
        if instance_views is not None:
            pulumi.set(__self__, "instance_views", instance_views)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if output_blob_managed_identity is not None:
            pulumi.set(__self__, "output_blob_managed_identity", output_blob_managed_identity)
        if output_blob_uri is not None:
            pulumi.set(__self__, "output_blob_uri", output_blob_uri)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if protected_parameters is not None:
            pulumi.set(__self__, "protected_parameters", protected_parameters)
        if run_as_password is not None:
            pulumi.set(__self__, "run_as_password", run_as_password)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if virtual_machine_id is not None:
            pulumi.set(__self__, "virtual_machine_id", virtual_machine_id)

    @property
    @pulumi.getter(name="errorBlobManagedIdentity")
    def error_blob_managed_identity(self) -> Optional[pulumi.Input['RunCommandErrorBlobManagedIdentityArgs']]:
        """
        An `error_blob_managed_identity` block as defined below. User-assigned managed Identity that has access to errorBlobUri storage blob.
        """
        return pulumi.get(self, "error_blob_managed_identity")

    @error_blob_managed_identity.setter
    def error_blob_managed_identity(self, value: Optional[pulumi.Input['RunCommandErrorBlobManagedIdentityArgs']]):
        pulumi.set(self, "error_blob_managed_identity", value)

    @property
    @pulumi.getter(name="errorBlobUri")
    def error_blob_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Azure storage blob where script error stream will be uploaded.
        """
        return pulumi.get(self, "error_blob_uri")

    @error_blob_uri.setter
    def error_blob_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_blob_uri", value)

    @property
    @pulumi.getter(name="instanceViews")
    def instance_views(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunCommandInstanceViewArgs']]]]:
        return pulumi.get(self, "instance_views")

    @instance_views.setter
    def instance_views(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunCommandInstanceViewArgs']]]]):
        pulumi.set(self, "instance_views", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The Azure Region where the Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of this Virtual Machine Run Command. Changing this forces a new Virtual Machine Run Command to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="outputBlobManagedIdentity")
    def output_blob_managed_identity(self) -> Optional[pulumi.Input['RunCommandOutputBlobManagedIdentityArgs']]:
        """
        An `output_blob_managed_identity` block as defined below. User-assigned managed Identity that has access to outputBlobUri storage blob.
        """
        return pulumi.get(self, "output_blob_managed_identity")

    @output_blob_managed_identity.setter
    def output_blob_managed_identity(self, value: Optional[pulumi.Input['RunCommandOutputBlobManagedIdentityArgs']]):
        pulumi.set(self, "output_blob_managed_identity", value)

    @property
    @pulumi.getter(name="outputBlobUri")
    def output_blob_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Azure storage blob where script output stream will be uploaded. It can be basic blob URI with SAS token.
        """
        return pulumi.get(self, "output_blob_uri")

    @output_blob_uri.setter
    def output_blob_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_blob_uri", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunCommandParameterArgs']]]]:
        """
        A list of `parameter` blocks as defined below. The parameters used by the script.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunCommandParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="protectedParameters")
    def protected_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunCommandProtectedParameterArgs']]]]:
        """
        A list of `protected_parameter` blocks as defined below. The protected parameters used by the script.
        """
        return pulumi.get(self, "protected_parameters")

    @protected_parameters.setter
    def protected_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunCommandProtectedParameterArgs']]]]):
        pulumi.set(self, "protected_parameters", value)

    @property
    @pulumi.getter(name="runAsPassword")
    def run_as_password(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the user account password on the VM when executing the Virtual Machine Run Command.
        """
        return pulumi.get(self, "run_as_password")

    @run_as_password.setter
    def run_as_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_password", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the user account on the VM when executing the Virtual Machine Run Command.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['RunCommandSourceArgs']]:
        """
        A `source` block as defined below. The source of the run command script.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['RunCommandSourceArgs']]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A mapping of tags which should be assigned to the Virtual Machine Run Command.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Virtual Machine ID within which this Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
        """
        return pulumi.get(self, "virtual_machine_id")

    @virtual_machine_id.setter
    def virtual_machine_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_machine_id", value)


class RunCommand(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 error_blob_managed_identity: Optional[pulumi.Input[pulumi.InputType['RunCommandErrorBlobManagedIdentityArgs']]] = None,
                 error_blob_uri: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 output_blob_managed_identity: Optional[pulumi.Input[pulumi.InputType['RunCommandOutputBlobManagedIdentityArgs']]] = None,
                 output_blob_uri: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RunCommandParameterArgs']]]]] = None,
                 protected_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RunCommandProtectedParameterArgs']]]]] = None,
                 run_as_password: Optional[pulumi.Input[str]] = None,
                 run_as_user: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[pulumi.InputType['RunCommandSourceArgs']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 virtual_machine_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a Virtual Machine Run Command.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_virtual_network = azure.network.VirtualNetwork("exampleVirtualNetwork",
            address_spaces=["10.0.0.0/16"],
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name)
        example_subnet = azure.network.Subnet("exampleSubnet",
            resource_group_name=example_resource_group.name,
            virtual_network_name=example_virtual_network.name,
            address_prefixes=["10.0.2.0/24"])
        example_network_interface = azure.network.NetworkInterface("exampleNetworkInterface",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            ip_configurations=[azure.network.NetworkInterfaceIpConfigurationArgs(
                name="internal",
                subnet_id=example_subnet.id,
                private_ip_address_allocation="Dynamic",
            )])
        example_user_assigned_identity = azure.authorization.UserAssignedIdentity("exampleUserAssignedIdentity",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location)
        example_linux_virtual_machine = azure.compute.LinuxVirtualMachine("exampleLinuxVirtualMachine",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            size="Standard_B2s",
            admin_username="adminuser",
            admin_password="P@$$w0rd1234!",
            disable_password_authentication=False,
            network_interface_ids=[example_network_interface.id],
            os_disk=azure.compute.LinuxVirtualMachineOsDiskArgs(
                caching="ReadWrite",
                storage_account_type="Premium_LRS",
            ),
            source_image_reference=azure.compute.LinuxVirtualMachineSourceImageReferenceArgs(
                publisher="Canonical",
                offer="0001-com-ubuntu-server-jammy",
                sku="22_04-lts",
                version="latest",
            ),
            identity=azure.compute.LinuxVirtualMachineIdentityArgs(
                type="SystemAssigned, UserAssigned",
                identity_ids=[example_user_assigned_identity.id],
            ))
        example_account = azure.storage.Account("exampleAccount",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            account_tier="Standard",
            account_replication_type="LRS")
        example_assignment = azure.authorization.Assignment("exampleAssignment",
            scope=example_account.id,
            role_definition_name="Storage Blob Data Contributor",
            principal_id=example_user_assigned_identity.principal_id)
        example_container = azure.storage.Container("exampleContainer",
            storage_account_name=example_account.name,
            container_access_type="blob")
        example1 = azure.storage.Blob("example1",
            storage_account_name=example_account.name,
            storage_container_name=example_container.name,
            type="Block",
            source_content="echo 'hello world'")
        example2_blob = azure.storage.Blob("example2Blob",
            storage_account_name=example_account.name,
            storage_container_name=example_container.name,
            type="Append")
        example3_blob = azure.storage.Blob("example3Blob",
            storage_account_name=example_account.name,
            storage_container_name=example_container.name,
            type="Append")
        example_account_sas = azure.storage.get_account_sas_output(connection_string=example_account.primary_connection_string,
            https_only=True,
            signed_version="2019-10-10",
            start="2023-04-01T00:00:00Z",
            expiry="2024-04-01T00:00:00Z",
            resource_types=azure.storage.GetAccountSASResourceTypesArgs(
                service=False,
                container=False,
                object=True,
            ),
            services=azure.storage.GetAccountSASServicesArgs(
                blob=True,
                queue=False,
                table=False,
                file=False,
            ),
            permissions=azure.storage.GetAccountSASPermissionsArgs(
                read=True,
                write=True,
                delete=False,
                list=False,
                add=True,
                create=True,
                update=False,
                process=False,
                tag=False,
                filter=False,
            ))
        # basic example
        example_run_command = azure.compute.RunCommand("exampleRunCommand",
            location=example_resource_group.location,
            virtual_machine_id=example_linux_virtual_machine.id,
            source=azure.compute.RunCommandSourceArgs(
                script="echo 'hello world'",
            ))
        # authorize to storage blob using user assigned identity
        example2_run_command = azure.compute.RunCommand("example2RunCommand",
            location=example_resource_group.location,
            virtual_machine_id=example_linux_virtual_machine.id,
            output_blob_uri=example2_blob.id,
            error_blob_uri=example3_blob.id,
            run_as_password="P@$$w0rd1234!",
            run_as_user="adminuser",
            source=azure.compute.RunCommandSourceArgs(
                script_uri=example1.id,
                script_uri_managed_identity=azure.compute.RunCommandSourceScriptUriManagedIdentityArgs(
                    client_id=example_user_assigned_identity.client_id,
                ),
            ),
            error_blob_managed_identity=azure.compute.RunCommandErrorBlobManagedIdentityArgs(
                client_id=example_user_assigned_identity.client_id,
            ),
            output_blob_managed_identity=azure.compute.RunCommandOutputBlobManagedIdentityArgs(
                client_id=example_user_assigned_identity.client_id,
            ),
            parameters=[azure.compute.RunCommandParameterArgs(
                name="examplev1",
                value="val1",
            )],
            protected_parameters=[azure.compute.RunCommandProtectedParameterArgs(
                name="examplev2",
                value="val2",
            )],
            tags={
                "environment": "terraform-examples",
                "some_key": "some-value",
            },
            opts=pulumi.ResourceOptions(depends_on=[example_assignment]))
        # authorize to storage blob using SAS token
        example3_run_command = azure.compute.RunCommand("example3RunCommand",
            location=example_resource_group.location,
            virtual_machine_id=example_linux_virtual_machine.id,
            run_as_password="P@$$w0rd1234!",
            run_as_user="adminuser",
            error_blob_uri=pulumi.Output.all(example3_blob.id, example_account_sas).apply(lambda id, example_account_sas: f"{id}{example_account_sas.sas}"),
            output_blob_uri=pulumi.Output.all(example2_blob.id, example_account_sas).apply(lambda id, example_account_sas: f"{id}{example_account_sas.sas}"),
            source=azure.compute.RunCommandSourceArgs(
                script_uri=pulumi.Output.all(example1.id, example_account_sas).apply(lambda id, example_account_sas: f"{id}{example_account_sas.sas}"),
            ),
            parameters=[azure.compute.RunCommandParameterArgs(
                name="example-vm1",
                value="val1",
            )],
            tags={
                "environment": "terraform-example-s",
                "some_key": "some-value",
            })
        ```

        ## Import

        An existing Virtual Machine Run Command can be imported into Terraform using the `resource id`, e.g.

        ```sh
        $ pulumi import azure:compute/runCommand:RunCommand example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/virtualMachines/vm1/runCommands/rc1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['RunCommandErrorBlobManagedIdentityArgs']] error_blob_managed_identity: An `error_blob_managed_identity` block as defined below. User-assigned managed Identity that has access to errorBlobUri storage blob.
        :param pulumi.Input[str] error_blob_uri: Specifies the Azure storage blob where script error stream will be uploaded.
        :param pulumi.Input[str] location: The Azure Region where the Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
        :param pulumi.Input[str] name: Specifies the name of this Virtual Machine Run Command. Changing this forces a new Virtual Machine Run Command to be created.
        :param pulumi.Input[pulumi.InputType['RunCommandOutputBlobManagedIdentityArgs']] output_blob_managed_identity: An `output_blob_managed_identity` block as defined below. User-assigned managed Identity that has access to outputBlobUri storage blob.
        :param pulumi.Input[str] output_blob_uri: Specifies the Azure storage blob where script output stream will be uploaded. It can be basic blob URI with SAS token.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RunCommandParameterArgs']]]] parameters: A list of `parameter` blocks as defined below. The parameters used by the script.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RunCommandProtectedParameterArgs']]]] protected_parameters: A list of `protected_parameter` blocks as defined below. The protected parameters used by the script.
        :param pulumi.Input[str] run_as_password: Specifies the user account password on the VM when executing the Virtual Machine Run Command.
        :param pulumi.Input[str] run_as_user: Specifies the user account on the VM when executing the Virtual Machine Run Command.
        :param pulumi.Input[pulumi.InputType['RunCommandSourceArgs']] source: A `source` block as defined below. The source of the run command script.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags which should be assigned to the Virtual Machine Run Command.
        :param pulumi.Input[str] virtual_machine_id: Specifies the Virtual Machine ID within which this Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RunCommandArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Virtual Machine Run Command.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_virtual_network = azure.network.VirtualNetwork("exampleVirtualNetwork",
            address_spaces=["10.0.0.0/16"],
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name)
        example_subnet = azure.network.Subnet("exampleSubnet",
            resource_group_name=example_resource_group.name,
            virtual_network_name=example_virtual_network.name,
            address_prefixes=["10.0.2.0/24"])
        example_network_interface = azure.network.NetworkInterface("exampleNetworkInterface",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            ip_configurations=[azure.network.NetworkInterfaceIpConfigurationArgs(
                name="internal",
                subnet_id=example_subnet.id,
                private_ip_address_allocation="Dynamic",
            )])
        example_user_assigned_identity = azure.authorization.UserAssignedIdentity("exampleUserAssignedIdentity",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location)
        example_linux_virtual_machine = azure.compute.LinuxVirtualMachine("exampleLinuxVirtualMachine",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            size="Standard_B2s",
            admin_username="adminuser",
            admin_password="P@$$w0rd1234!",
            disable_password_authentication=False,
            network_interface_ids=[example_network_interface.id],
            os_disk=azure.compute.LinuxVirtualMachineOsDiskArgs(
                caching="ReadWrite",
                storage_account_type="Premium_LRS",
            ),
            source_image_reference=azure.compute.LinuxVirtualMachineSourceImageReferenceArgs(
                publisher="Canonical",
                offer="0001-com-ubuntu-server-jammy",
                sku="22_04-lts",
                version="latest",
            ),
            identity=azure.compute.LinuxVirtualMachineIdentityArgs(
                type="SystemAssigned, UserAssigned",
                identity_ids=[example_user_assigned_identity.id],
            ))
        example_account = azure.storage.Account("exampleAccount",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            account_tier="Standard",
            account_replication_type="LRS")
        example_assignment = azure.authorization.Assignment("exampleAssignment",
            scope=example_account.id,
            role_definition_name="Storage Blob Data Contributor",
            principal_id=example_user_assigned_identity.principal_id)
        example_container = azure.storage.Container("exampleContainer",
            storage_account_name=example_account.name,
            container_access_type="blob")
        example1 = azure.storage.Blob("example1",
            storage_account_name=example_account.name,
            storage_container_name=example_container.name,
            type="Block",
            source_content="echo 'hello world'")
        example2_blob = azure.storage.Blob("example2Blob",
            storage_account_name=example_account.name,
            storage_container_name=example_container.name,
            type="Append")
        example3_blob = azure.storage.Blob("example3Blob",
            storage_account_name=example_account.name,
            storage_container_name=example_container.name,
            type="Append")
        example_account_sas = azure.storage.get_account_sas_output(connection_string=example_account.primary_connection_string,
            https_only=True,
            signed_version="2019-10-10",
            start="2023-04-01T00:00:00Z",
            expiry="2024-04-01T00:00:00Z",
            resource_types=azure.storage.GetAccountSASResourceTypesArgs(
                service=False,
                container=False,
                object=True,
            ),
            services=azure.storage.GetAccountSASServicesArgs(
                blob=True,
                queue=False,
                table=False,
                file=False,
            ),
            permissions=azure.storage.GetAccountSASPermissionsArgs(
                read=True,
                write=True,
                delete=False,
                list=False,
                add=True,
                create=True,
                update=False,
                process=False,
                tag=False,
                filter=False,
            ))
        # basic example
        example_run_command = azure.compute.RunCommand("exampleRunCommand",
            location=example_resource_group.location,
            virtual_machine_id=example_linux_virtual_machine.id,
            source=azure.compute.RunCommandSourceArgs(
                script="echo 'hello world'",
            ))
        # authorize to storage blob using user assigned identity
        example2_run_command = azure.compute.RunCommand("example2RunCommand",
            location=example_resource_group.location,
            virtual_machine_id=example_linux_virtual_machine.id,
            output_blob_uri=example2_blob.id,
            error_blob_uri=example3_blob.id,
            run_as_password="P@$$w0rd1234!",
            run_as_user="adminuser",
            source=azure.compute.RunCommandSourceArgs(
                script_uri=example1.id,
                script_uri_managed_identity=azure.compute.RunCommandSourceScriptUriManagedIdentityArgs(
                    client_id=example_user_assigned_identity.client_id,
                ),
            ),
            error_blob_managed_identity=azure.compute.RunCommandErrorBlobManagedIdentityArgs(
                client_id=example_user_assigned_identity.client_id,
            ),
            output_blob_managed_identity=azure.compute.RunCommandOutputBlobManagedIdentityArgs(
                client_id=example_user_assigned_identity.client_id,
            ),
            parameters=[azure.compute.RunCommandParameterArgs(
                name="examplev1",
                value="val1",
            )],
            protected_parameters=[azure.compute.RunCommandProtectedParameterArgs(
                name="examplev2",
                value="val2",
            )],
            tags={
                "environment": "terraform-examples",
                "some_key": "some-value",
            },
            opts=pulumi.ResourceOptions(depends_on=[example_assignment]))
        # authorize to storage blob using SAS token
        example3_run_command = azure.compute.RunCommand("example3RunCommand",
            location=example_resource_group.location,
            virtual_machine_id=example_linux_virtual_machine.id,
            run_as_password="P@$$w0rd1234!",
            run_as_user="adminuser",
            error_blob_uri=pulumi.Output.all(example3_blob.id, example_account_sas).apply(lambda id, example_account_sas: f"{id}{example_account_sas.sas}"),
            output_blob_uri=pulumi.Output.all(example2_blob.id, example_account_sas).apply(lambda id, example_account_sas: f"{id}{example_account_sas.sas}"),
            source=azure.compute.RunCommandSourceArgs(
                script_uri=pulumi.Output.all(example1.id, example_account_sas).apply(lambda id, example_account_sas: f"{id}{example_account_sas.sas}"),
            ),
            parameters=[azure.compute.RunCommandParameterArgs(
                name="example-vm1",
                value="val1",
            )],
            tags={
                "environment": "terraform-example-s",
                "some_key": "some-value",
            })
        ```

        ## Import

        An existing Virtual Machine Run Command can be imported into Terraform using the `resource id`, e.g.

        ```sh
        $ pulumi import azure:compute/runCommand:RunCommand example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/virtualMachines/vm1/runCommands/rc1
        ```

        :param str resource_name: The name of the resource.
        :param RunCommandArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RunCommandArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 error_blob_managed_identity: Optional[pulumi.Input[pulumi.InputType['RunCommandErrorBlobManagedIdentityArgs']]] = None,
                 error_blob_uri: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 output_blob_managed_identity: Optional[pulumi.Input[pulumi.InputType['RunCommandOutputBlobManagedIdentityArgs']]] = None,
                 output_blob_uri: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RunCommandParameterArgs']]]]] = None,
                 protected_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RunCommandProtectedParameterArgs']]]]] = None,
                 run_as_password: Optional[pulumi.Input[str]] = None,
                 run_as_user: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[pulumi.InputType['RunCommandSourceArgs']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 virtual_machine_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RunCommandArgs.__new__(RunCommandArgs)

            __props__.__dict__["error_blob_managed_identity"] = None if error_blob_managed_identity is None else pulumi.Output.secret(error_blob_managed_identity)
            __props__.__dict__["error_blob_uri"] = error_blob_uri
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            __props__.__dict__["output_blob_managed_identity"] = None if output_blob_managed_identity is None else pulumi.Output.secret(output_blob_managed_identity)
            __props__.__dict__["output_blob_uri"] = output_blob_uri
            __props__.__dict__["parameters"] = parameters
            __props__.__dict__["protected_parameters"] = None if protected_parameters is None else pulumi.Output.secret(protected_parameters)
            __props__.__dict__["run_as_password"] = None if run_as_password is None else pulumi.Output.secret(run_as_password)
            __props__.__dict__["run_as_user"] = run_as_user
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
            __props__.__dict__["tags"] = tags
            if virtual_machine_id is None and not opts.urn:
                raise TypeError("Missing required property 'virtual_machine_id'")
            __props__.__dict__["virtual_machine_id"] = virtual_machine_id
            __props__.__dict__["instance_views"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["errorBlobManagedIdentity", "outputBlobManagedIdentity", "protectedParameters", "runAsPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(RunCommand, __self__).__init__(
            'azure:compute/runCommand:RunCommand',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            error_blob_managed_identity: Optional[pulumi.Input[pulumi.InputType['RunCommandErrorBlobManagedIdentityArgs']]] = None,
            error_blob_uri: Optional[pulumi.Input[str]] = None,
            instance_views: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RunCommandInstanceViewArgs']]]]] = None,
            location: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            output_blob_managed_identity: Optional[pulumi.Input[pulumi.InputType['RunCommandOutputBlobManagedIdentityArgs']]] = None,
            output_blob_uri: Optional[pulumi.Input[str]] = None,
            parameters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RunCommandParameterArgs']]]]] = None,
            protected_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RunCommandProtectedParameterArgs']]]]] = None,
            run_as_password: Optional[pulumi.Input[str]] = None,
            run_as_user: Optional[pulumi.Input[str]] = None,
            source: Optional[pulumi.Input[pulumi.InputType['RunCommandSourceArgs']]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            virtual_machine_id: Optional[pulumi.Input[str]] = None) -> 'RunCommand':
        """
        Get an existing RunCommand resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['RunCommandErrorBlobManagedIdentityArgs']] error_blob_managed_identity: An `error_blob_managed_identity` block as defined below. User-assigned managed Identity that has access to errorBlobUri storage blob.
        :param pulumi.Input[str] error_blob_uri: Specifies the Azure storage blob where script error stream will be uploaded.
        :param pulumi.Input[str] location: The Azure Region where the Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
        :param pulumi.Input[str] name: Specifies the name of this Virtual Machine Run Command. Changing this forces a new Virtual Machine Run Command to be created.
        :param pulumi.Input[pulumi.InputType['RunCommandOutputBlobManagedIdentityArgs']] output_blob_managed_identity: An `output_blob_managed_identity` block as defined below. User-assigned managed Identity that has access to outputBlobUri storage blob.
        :param pulumi.Input[str] output_blob_uri: Specifies the Azure storage blob where script output stream will be uploaded. It can be basic blob URI with SAS token.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RunCommandParameterArgs']]]] parameters: A list of `parameter` blocks as defined below. The parameters used by the script.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RunCommandProtectedParameterArgs']]]] protected_parameters: A list of `protected_parameter` blocks as defined below. The protected parameters used by the script.
        :param pulumi.Input[str] run_as_password: Specifies the user account password on the VM when executing the Virtual Machine Run Command.
        :param pulumi.Input[str] run_as_user: Specifies the user account on the VM when executing the Virtual Machine Run Command.
        :param pulumi.Input[pulumi.InputType['RunCommandSourceArgs']] source: A `source` block as defined below. The source of the run command script.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags which should be assigned to the Virtual Machine Run Command.
        :param pulumi.Input[str] virtual_machine_id: Specifies the Virtual Machine ID within which this Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RunCommandState.__new__(_RunCommandState)

        __props__.__dict__["error_blob_managed_identity"] = error_blob_managed_identity
        __props__.__dict__["error_blob_uri"] = error_blob_uri
        __props__.__dict__["instance_views"] = instance_views
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["output_blob_managed_identity"] = output_blob_managed_identity
        __props__.__dict__["output_blob_uri"] = output_blob_uri
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["protected_parameters"] = protected_parameters
        __props__.__dict__["run_as_password"] = run_as_password
        __props__.__dict__["run_as_user"] = run_as_user
        __props__.__dict__["source"] = source
        __props__.__dict__["tags"] = tags
        __props__.__dict__["virtual_machine_id"] = virtual_machine_id
        return RunCommand(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="errorBlobManagedIdentity")
    def error_blob_managed_identity(self) -> pulumi.Output[Optional['outputs.RunCommandErrorBlobManagedIdentity']]:
        """
        An `error_blob_managed_identity` block as defined below. User-assigned managed Identity that has access to errorBlobUri storage blob.
        """
        return pulumi.get(self, "error_blob_managed_identity")

    @property
    @pulumi.getter(name="errorBlobUri")
    def error_blob_uri(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the Azure storage blob where script error stream will be uploaded.
        """
        return pulumi.get(self, "error_blob_uri")

    @property
    @pulumi.getter(name="instanceViews")
    def instance_views(self) -> pulumi.Output[Sequence['outputs.RunCommandInstanceView']]:
        return pulumi.get(self, "instance_views")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The Azure Region where the Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Specifies the name of this Virtual Machine Run Command. Changing this forces a new Virtual Machine Run Command to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outputBlobManagedIdentity")
    def output_blob_managed_identity(self) -> pulumi.Output[Optional['outputs.RunCommandOutputBlobManagedIdentity']]:
        """
        An `output_blob_managed_identity` block as defined below. User-assigned managed Identity that has access to outputBlobUri storage blob.
        """
        return pulumi.get(self, "output_blob_managed_identity")

    @property
    @pulumi.getter(name="outputBlobUri")
    def output_blob_uri(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the Azure storage blob where script output stream will be uploaded. It can be basic blob URI with SAS token.
        """
        return pulumi.get(self, "output_blob_uri")

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Optional[Sequence['outputs.RunCommandParameter']]]:
        """
        A list of `parameter` blocks as defined below. The parameters used by the script.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="protectedParameters")
    def protected_parameters(self) -> pulumi.Output[Optional[Sequence['outputs.RunCommandProtectedParameter']]]:
        """
        A list of `protected_parameter` blocks as defined below. The protected parameters used by the script.
        """
        return pulumi.get(self, "protected_parameters")

    @property
    @pulumi.getter(name="runAsPassword")
    def run_as_password(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the user account password on the VM when executing the Virtual Machine Run Command.
        """
        return pulumi.get(self, "run_as_password")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the user account on the VM when executing the Virtual Machine Run Command.
        """
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output['outputs.RunCommandSource']:
        """
        A `source` block as defined below. The source of the run command script.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A mapping of tags which should be assigned to the Virtual Machine Run Command.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> pulumi.Output[str]:
        """
        Specifies the Virtual Machine ID within which this Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
        """
        return pulumi.get(self, "virtual_machine_id")

