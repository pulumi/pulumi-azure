# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class Extension(pulumi.CustomResource):
    """
    Manages a new Virtual Machine Extension to provide post deployment configuration
    and run automated tasks.
    
    ~> **Please Note:** The CustomScript extensions for Linux & Windows require that the `commandToExecute` returns a `0` exit code to be classified as successfully deployed. You can achieve this by appending `exit 0` to the end of your `commandToExecute`.
    """
    def __init__(__self__, __name__, __opts__=None, auto_upgrade_minor_version=None, location=None, name=None, protected_settings=None, publisher=None, resource_group_name=None, settings=None, tags=None, type=None, type_handler_version=None, virtual_machine_name=None):
        """Create a Extension resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if auto_upgrade_minor_version and not isinstance(auto_upgrade_minor_version, bool):
            raise TypeError('Expected property auto_upgrade_minor_version to be a bool')
        __self__.auto_upgrade_minor_version = auto_upgrade_minor_version
        """
        Specifies if the platform deploys
        the latest minor version update to the `type_handler_version` specified.
        """
        __props__['autoUpgradeMinorVersion'] = auto_upgrade_minor_version

        if not location:
            raise TypeError('Missing required property location')
        elif not isinstance(location, basestring):
            raise TypeError('Expected property location to be a basestring')
        __self__.location = location
        """
        The location where the extension is created. Changing
        this forces a new resource to be created.
        """
        __props__['location'] = location

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The name of the virtual machine extension peering. Changing
        this forces a new resource to be created.
        """
        __props__['name'] = name

        if protected_settings and not isinstance(protected_settings, basestring):
            raise TypeError('Expected property protected_settings to be a basestring')
        __self__.protected_settings = protected_settings
        """
        The protected_settings passed to the
        extension, like settings, these are specified as a JSON object in a string.
        """
        __props__['protectedSettings'] = protected_settings

        if not publisher:
            raise TypeError('Missing required property publisher')
        elif not isinstance(publisher, basestring):
            raise TypeError('Expected property publisher to be a basestring')
        __self__.publisher = publisher
        """
        The publisher of the extension, available publishers
        can be found by using the Azure CLI.
        """
        __props__['publisher'] = publisher

        if not resource_group_name:
            raise TypeError('Missing required property resource_group_name')
        elif not isinstance(resource_group_name, basestring):
            raise TypeError('Expected property resource_group_name to be a basestring')
        __self__.resource_group_name = resource_group_name
        """
        The name of the resource group in which to
        create the virtual network. Changing this forces a new resource to be
        created.
        """
        __props__['resourceGroupName'] = resource_group_name

        if settings and not isinstance(settings, basestring):
            raise TypeError('Expected property settings to be a basestring')
        __self__.settings = settings
        """
        The settings passed to the extension, these are
        specified as a JSON object in a string.
        """
        __props__['settings'] = settings

        if tags and not isinstance(tags, dict):
            raise TypeError('Expected property tags to be a dict')
        __self__.tags = tags
        __props__['tags'] = tags

        if not type:
            raise TypeError('Missing required property type')
        elif not isinstance(type, basestring):
            raise TypeError('Expected property type to be a basestring')
        __self__.type = type
        """
        The type of extension, available types for a publisher can
        be found using the Azure CLI.
        """
        __props__['type'] = type

        if not type_handler_version:
            raise TypeError('Missing required property type_handler_version')
        elif not isinstance(type_handler_version, basestring):
            raise TypeError('Expected property type_handler_version to be a basestring')
        __self__.type_handler_version = type_handler_version
        """
        Specifies the version of the extension to
        use, available versions can be found using the Azure CLI.
        """
        __props__['typeHandlerVersion'] = type_handler_version

        if not virtual_machine_name:
            raise TypeError('Missing required property virtual_machine_name')
        elif not isinstance(virtual_machine_name, basestring):
            raise TypeError('Expected property virtual_machine_name to be a basestring')
        __self__.virtual_machine_name = virtual_machine_name
        """
        The name of the virtual machine. Changing
        this forces a new resource to be created.
        """
        __props__['virtualMachineName'] = virtual_machine_name

        super(Extension, __self__).__init__(
            'azure:compute/extension:Extension',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'autoUpgradeMinorVersion' in outs:
            self.auto_upgrade_minor_version = outs['autoUpgradeMinorVersion']
        if 'location' in outs:
            self.location = outs['location']
        if 'name' in outs:
            self.name = outs['name']
        if 'protectedSettings' in outs:
            self.protected_settings = outs['protectedSettings']
        if 'publisher' in outs:
            self.publisher = outs['publisher']
        if 'resourceGroupName' in outs:
            self.resource_group_name = outs['resourceGroupName']
        if 'settings' in outs:
            self.settings = outs['settings']
        if 'tags' in outs:
            self.tags = outs['tags']
        if 'type' in outs:
            self.type = outs['type']
        if 'typeHandlerVersion' in outs:
            self.type_handler_version = outs['typeHandlerVersion']
        if 'virtualMachineName' in outs:
            self.virtual_machine_name = outs['virtualMachineName']
