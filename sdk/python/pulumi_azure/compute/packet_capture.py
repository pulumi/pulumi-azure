# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PacketCaptureArgs', 'PacketCapture']

@pulumi.input_type
class PacketCaptureArgs:
    def __init__(__self__, *,
                 network_watcher_id: pulumi.Input[str],
                 storage_location: pulumi.Input['PacketCaptureStorageLocationArgs'],
                 virtual_machine_id: pulumi.Input[str],
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['PacketCaptureFilterArgs']]]] = None,
                 maximum_bytes_per_packet: Optional[pulumi.Input[int]] = None,
                 maximum_bytes_per_session: Optional[pulumi.Input[int]] = None,
                 maximum_capture_duration_in_seconds: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a PacketCapture resource.
        :param pulumi.Input[str] network_watcher_id: The resource ID of the Network Watcher. Changing this forces a new resource to be created.
        :param pulumi.Input['PacketCaptureStorageLocationArgs'] storage_location: A `storage_location` block as defined below. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_machine_id: The resource ID of the target Virtual Machine to capture packets from. Changing this forces a new resource to be created.
        :param pulumi.Input[Sequence[pulumi.Input['PacketCaptureFilterArgs']]] filters: One or more `filter` blocks as defined below. Changing this forces a new resource to be created.
        :param pulumi.Input[int] maximum_bytes_per_packet: The number of bytes captured per packet. The remaining bytes are truncated. Defaults to `0` (Entire Packet Captured). Changing this forces a new resource to be created.
        :param pulumi.Input[int] maximum_bytes_per_session: Maximum size of the capture in Bytes. Defaults to `1073741824` (1GB). Changing this forces a new resource to be created.
        :param pulumi.Input[int] maximum_capture_duration_in_seconds: The maximum duration of the capture session in seconds. Defaults to `18000` (5 hours). Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: The name to use for this Network Packet Capture. Changing this forces a new resource to be created.
        """
        PacketCaptureArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            network_watcher_id=network_watcher_id,
            storage_location=storage_location,
            virtual_machine_id=virtual_machine_id,
            filters=filters,
            maximum_bytes_per_packet=maximum_bytes_per_packet,
            maximum_bytes_per_session=maximum_bytes_per_session,
            maximum_capture_duration_in_seconds=maximum_capture_duration_in_seconds,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             network_watcher_id: Optional[pulumi.Input[str]] = None,
             storage_location: Optional[pulumi.Input['PacketCaptureStorageLocationArgs']] = None,
             virtual_machine_id: Optional[pulumi.Input[str]] = None,
             filters: Optional[pulumi.Input[Sequence[pulumi.Input['PacketCaptureFilterArgs']]]] = None,
             maximum_bytes_per_packet: Optional[pulumi.Input[int]] = None,
             maximum_bytes_per_session: Optional[pulumi.Input[int]] = None,
             maximum_capture_duration_in_seconds: Optional[pulumi.Input[int]] = None,
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if network_watcher_id is None and 'networkWatcherId' in kwargs:
            network_watcher_id = kwargs['networkWatcherId']
        if network_watcher_id is None:
            raise TypeError("Missing 'network_watcher_id' argument")
        if storage_location is None and 'storageLocation' in kwargs:
            storage_location = kwargs['storageLocation']
        if storage_location is None:
            raise TypeError("Missing 'storage_location' argument")
        if virtual_machine_id is None and 'virtualMachineId' in kwargs:
            virtual_machine_id = kwargs['virtualMachineId']
        if virtual_machine_id is None:
            raise TypeError("Missing 'virtual_machine_id' argument")
        if maximum_bytes_per_packet is None and 'maximumBytesPerPacket' in kwargs:
            maximum_bytes_per_packet = kwargs['maximumBytesPerPacket']
        if maximum_bytes_per_session is None and 'maximumBytesPerSession' in kwargs:
            maximum_bytes_per_session = kwargs['maximumBytesPerSession']
        if maximum_capture_duration_in_seconds is None and 'maximumCaptureDurationInSeconds' in kwargs:
            maximum_capture_duration_in_seconds = kwargs['maximumCaptureDurationInSeconds']

        _setter("network_watcher_id", network_watcher_id)
        _setter("storage_location", storage_location)
        _setter("virtual_machine_id", virtual_machine_id)
        if filters is not None:
            _setter("filters", filters)
        if maximum_bytes_per_packet is not None:
            _setter("maximum_bytes_per_packet", maximum_bytes_per_packet)
        if maximum_bytes_per_session is not None:
            _setter("maximum_bytes_per_session", maximum_bytes_per_session)
        if maximum_capture_duration_in_seconds is not None:
            _setter("maximum_capture_duration_in_seconds", maximum_capture_duration_in_seconds)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="networkWatcherId")
    def network_watcher_id(self) -> pulumi.Input[str]:
        """
        The resource ID of the Network Watcher. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "network_watcher_id")

    @network_watcher_id.setter
    def network_watcher_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_watcher_id", value)

    @property
    @pulumi.getter(name="storageLocation")
    def storage_location(self) -> pulumi.Input['PacketCaptureStorageLocationArgs']:
        """
        A `storage_location` block as defined below. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "storage_location")

    @storage_location.setter
    def storage_location(self, value: pulumi.Input['PacketCaptureStorageLocationArgs']):
        pulumi.set(self, "storage_location", value)

    @property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> pulumi.Input[str]:
        """
        The resource ID of the target Virtual Machine to capture packets from. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "virtual_machine_id")

    @virtual_machine_id.setter
    def virtual_machine_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "virtual_machine_id", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PacketCaptureFilterArgs']]]]:
        """
        One or more `filter` blocks as defined below. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PacketCaptureFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="maximumBytesPerPacket")
    def maximum_bytes_per_packet(self) -> Optional[pulumi.Input[int]]:
        """
        The number of bytes captured per packet. The remaining bytes are truncated. Defaults to `0` (Entire Packet Captured). Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "maximum_bytes_per_packet")

    @maximum_bytes_per_packet.setter
    def maximum_bytes_per_packet(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_bytes_per_packet", value)

    @property
    @pulumi.getter(name="maximumBytesPerSession")
    def maximum_bytes_per_session(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum size of the capture in Bytes. Defaults to `1073741824` (1GB). Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "maximum_bytes_per_session")

    @maximum_bytes_per_session.setter
    def maximum_bytes_per_session(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_bytes_per_session", value)

    @property
    @pulumi.getter(name="maximumCaptureDurationInSeconds")
    def maximum_capture_duration_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum duration of the capture session in seconds. Defaults to `18000` (5 hours). Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "maximum_capture_duration_in_seconds")

    @maximum_capture_duration_in_seconds.setter
    def maximum_capture_duration_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_capture_duration_in_seconds", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name to use for this Network Packet Capture. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _PacketCaptureState:
    def __init__(__self__, *,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['PacketCaptureFilterArgs']]]] = None,
                 maximum_bytes_per_packet: Optional[pulumi.Input[int]] = None,
                 maximum_bytes_per_session: Optional[pulumi.Input[int]] = None,
                 maximum_capture_duration_in_seconds: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_watcher_id: Optional[pulumi.Input[str]] = None,
                 storage_location: Optional[pulumi.Input['PacketCaptureStorageLocationArgs']] = None,
                 virtual_machine_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PacketCapture resources.
        :param pulumi.Input[Sequence[pulumi.Input['PacketCaptureFilterArgs']]] filters: One or more `filter` blocks as defined below. Changing this forces a new resource to be created.
        :param pulumi.Input[int] maximum_bytes_per_packet: The number of bytes captured per packet. The remaining bytes are truncated. Defaults to `0` (Entire Packet Captured). Changing this forces a new resource to be created.
        :param pulumi.Input[int] maximum_bytes_per_session: Maximum size of the capture in Bytes. Defaults to `1073741824` (1GB). Changing this forces a new resource to be created.
        :param pulumi.Input[int] maximum_capture_duration_in_seconds: The maximum duration of the capture session in seconds. Defaults to `18000` (5 hours). Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: The name to use for this Network Packet Capture. Changing this forces a new resource to be created.
        :param pulumi.Input[str] network_watcher_id: The resource ID of the Network Watcher. Changing this forces a new resource to be created.
        :param pulumi.Input['PacketCaptureStorageLocationArgs'] storage_location: A `storage_location` block as defined below. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_machine_id: The resource ID of the target Virtual Machine to capture packets from. Changing this forces a new resource to be created.
        """
        _PacketCaptureState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filters=filters,
            maximum_bytes_per_packet=maximum_bytes_per_packet,
            maximum_bytes_per_session=maximum_bytes_per_session,
            maximum_capture_duration_in_seconds=maximum_capture_duration_in_seconds,
            name=name,
            network_watcher_id=network_watcher_id,
            storage_location=storage_location,
            virtual_machine_id=virtual_machine_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filters: Optional[pulumi.Input[Sequence[pulumi.Input['PacketCaptureFilterArgs']]]] = None,
             maximum_bytes_per_packet: Optional[pulumi.Input[int]] = None,
             maximum_bytes_per_session: Optional[pulumi.Input[int]] = None,
             maximum_capture_duration_in_seconds: Optional[pulumi.Input[int]] = None,
             name: Optional[pulumi.Input[str]] = None,
             network_watcher_id: Optional[pulumi.Input[str]] = None,
             storage_location: Optional[pulumi.Input['PacketCaptureStorageLocationArgs']] = None,
             virtual_machine_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if maximum_bytes_per_packet is None and 'maximumBytesPerPacket' in kwargs:
            maximum_bytes_per_packet = kwargs['maximumBytesPerPacket']
        if maximum_bytes_per_session is None and 'maximumBytesPerSession' in kwargs:
            maximum_bytes_per_session = kwargs['maximumBytesPerSession']
        if maximum_capture_duration_in_seconds is None and 'maximumCaptureDurationInSeconds' in kwargs:
            maximum_capture_duration_in_seconds = kwargs['maximumCaptureDurationInSeconds']
        if network_watcher_id is None and 'networkWatcherId' in kwargs:
            network_watcher_id = kwargs['networkWatcherId']
        if storage_location is None and 'storageLocation' in kwargs:
            storage_location = kwargs['storageLocation']
        if virtual_machine_id is None and 'virtualMachineId' in kwargs:
            virtual_machine_id = kwargs['virtualMachineId']

        if filters is not None:
            _setter("filters", filters)
        if maximum_bytes_per_packet is not None:
            _setter("maximum_bytes_per_packet", maximum_bytes_per_packet)
        if maximum_bytes_per_session is not None:
            _setter("maximum_bytes_per_session", maximum_bytes_per_session)
        if maximum_capture_duration_in_seconds is not None:
            _setter("maximum_capture_duration_in_seconds", maximum_capture_duration_in_seconds)
        if name is not None:
            _setter("name", name)
        if network_watcher_id is not None:
            _setter("network_watcher_id", network_watcher_id)
        if storage_location is not None:
            _setter("storage_location", storage_location)
        if virtual_machine_id is not None:
            _setter("virtual_machine_id", virtual_machine_id)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PacketCaptureFilterArgs']]]]:
        """
        One or more `filter` blocks as defined below. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PacketCaptureFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="maximumBytesPerPacket")
    def maximum_bytes_per_packet(self) -> Optional[pulumi.Input[int]]:
        """
        The number of bytes captured per packet. The remaining bytes are truncated. Defaults to `0` (Entire Packet Captured). Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "maximum_bytes_per_packet")

    @maximum_bytes_per_packet.setter
    def maximum_bytes_per_packet(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_bytes_per_packet", value)

    @property
    @pulumi.getter(name="maximumBytesPerSession")
    def maximum_bytes_per_session(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum size of the capture in Bytes. Defaults to `1073741824` (1GB). Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "maximum_bytes_per_session")

    @maximum_bytes_per_session.setter
    def maximum_bytes_per_session(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_bytes_per_session", value)

    @property
    @pulumi.getter(name="maximumCaptureDurationInSeconds")
    def maximum_capture_duration_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum duration of the capture session in seconds. Defaults to `18000` (5 hours). Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "maximum_capture_duration_in_seconds")

    @maximum_capture_duration_in_seconds.setter
    def maximum_capture_duration_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_capture_duration_in_seconds", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name to use for this Network Packet Capture. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkWatcherId")
    def network_watcher_id(self) -> Optional[pulumi.Input[str]]:
        """
        The resource ID of the Network Watcher. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "network_watcher_id")

    @network_watcher_id.setter
    def network_watcher_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_watcher_id", value)

    @property
    @pulumi.getter(name="storageLocation")
    def storage_location(self) -> Optional[pulumi.Input['PacketCaptureStorageLocationArgs']]:
        """
        A `storage_location` block as defined below. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "storage_location")

    @storage_location.setter
    def storage_location(self, value: Optional[pulumi.Input['PacketCaptureStorageLocationArgs']]):
        pulumi.set(self, "storage_location", value)

    @property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> Optional[pulumi.Input[str]]:
        """
        The resource ID of the target Virtual Machine to capture packets from. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "virtual_machine_id")

    @virtual_machine_id.setter
    def virtual_machine_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_machine_id", value)


class PacketCapture(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PacketCaptureFilterArgs']]]]] = None,
                 maximum_bytes_per_packet: Optional[pulumi.Input[int]] = None,
                 maximum_bytes_per_session: Optional[pulumi.Input[int]] = None,
                 maximum_capture_duration_in_seconds: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_watcher_id: Optional[pulumi.Input[str]] = None,
                 storage_location: Optional[pulumi.Input[pulumi.InputType['PacketCaptureStorageLocationArgs']]] = None,
                 virtual_machine_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configures Network Packet Capturing against a Virtual Machine using a Network Watcher.

        ## Import

        Virtual Machine Packet Captures can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:compute/packetCapture:PacketCapture capture1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/networkWatchers/watcher1/packetCaptures/capture1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PacketCaptureFilterArgs']]]] filters: One or more `filter` blocks as defined below. Changing this forces a new resource to be created.
        :param pulumi.Input[int] maximum_bytes_per_packet: The number of bytes captured per packet. The remaining bytes are truncated. Defaults to `0` (Entire Packet Captured). Changing this forces a new resource to be created.
        :param pulumi.Input[int] maximum_bytes_per_session: Maximum size of the capture in Bytes. Defaults to `1073741824` (1GB). Changing this forces a new resource to be created.
        :param pulumi.Input[int] maximum_capture_duration_in_seconds: The maximum duration of the capture session in seconds. Defaults to `18000` (5 hours). Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: The name to use for this Network Packet Capture. Changing this forces a new resource to be created.
        :param pulumi.Input[str] network_watcher_id: The resource ID of the Network Watcher. Changing this forces a new resource to be created.
        :param pulumi.Input[pulumi.InputType['PacketCaptureStorageLocationArgs']] storage_location: A `storage_location` block as defined below. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_machine_id: The resource ID of the target Virtual Machine to capture packets from. Changing this forces a new resource to be created.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PacketCaptureArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configures Network Packet Capturing against a Virtual Machine using a Network Watcher.

        ## Import

        Virtual Machine Packet Captures can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:compute/packetCapture:PacketCapture capture1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/networkWatchers/watcher1/packetCaptures/capture1
        ```

        :param str resource_name: The name of the resource.
        :param PacketCaptureArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PacketCaptureArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            PacketCaptureArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PacketCaptureFilterArgs']]]]] = None,
                 maximum_bytes_per_packet: Optional[pulumi.Input[int]] = None,
                 maximum_bytes_per_session: Optional[pulumi.Input[int]] = None,
                 maximum_capture_duration_in_seconds: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_watcher_id: Optional[pulumi.Input[str]] = None,
                 storage_location: Optional[pulumi.Input[pulumi.InputType['PacketCaptureStorageLocationArgs']]] = None,
                 virtual_machine_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PacketCaptureArgs.__new__(PacketCaptureArgs)

            __props__.__dict__["filters"] = filters
            __props__.__dict__["maximum_bytes_per_packet"] = maximum_bytes_per_packet
            __props__.__dict__["maximum_bytes_per_session"] = maximum_bytes_per_session
            __props__.__dict__["maximum_capture_duration_in_seconds"] = maximum_capture_duration_in_seconds
            __props__.__dict__["name"] = name
            if network_watcher_id is None and not opts.urn:
                raise TypeError("Missing required property 'network_watcher_id'")
            __props__.__dict__["network_watcher_id"] = network_watcher_id
            storage_location = _utilities.configure(storage_location, PacketCaptureStorageLocationArgs, True)
            if storage_location is None and not opts.urn:
                raise TypeError("Missing required property 'storage_location'")
            __props__.__dict__["storage_location"] = storage_location
            if virtual_machine_id is None and not opts.urn:
                raise TypeError("Missing required property 'virtual_machine_id'")
            __props__.__dict__["virtual_machine_id"] = virtual_machine_id
        super(PacketCapture, __self__).__init__(
            'azure:compute/packetCapture:PacketCapture',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PacketCaptureFilterArgs']]]]] = None,
            maximum_bytes_per_packet: Optional[pulumi.Input[int]] = None,
            maximum_bytes_per_session: Optional[pulumi.Input[int]] = None,
            maximum_capture_duration_in_seconds: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_watcher_id: Optional[pulumi.Input[str]] = None,
            storage_location: Optional[pulumi.Input[pulumi.InputType['PacketCaptureStorageLocationArgs']]] = None,
            virtual_machine_id: Optional[pulumi.Input[str]] = None) -> 'PacketCapture':
        """
        Get an existing PacketCapture resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PacketCaptureFilterArgs']]]] filters: One or more `filter` blocks as defined below. Changing this forces a new resource to be created.
        :param pulumi.Input[int] maximum_bytes_per_packet: The number of bytes captured per packet. The remaining bytes are truncated. Defaults to `0` (Entire Packet Captured). Changing this forces a new resource to be created.
        :param pulumi.Input[int] maximum_bytes_per_session: Maximum size of the capture in Bytes. Defaults to `1073741824` (1GB). Changing this forces a new resource to be created.
        :param pulumi.Input[int] maximum_capture_duration_in_seconds: The maximum duration of the capture session in seconds. Defaults to `18000` (5 hours). Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: The name to use for this Network Packet Capture. Changing this forces a new resource to be created.
        :param pulumi.Input[str] network_watcher_id: The resource ID of the Network Watcher. Changing this forces a new resource to be created.
        :param pulumi.Input[pulumi.InputType['PacketCaptureStorageLocationArgs']] storage_location: A `storage_location` block as defined below. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_machine_id: The resource ID of the target Virtual Machine to capture packets from. Changing this forces a new resource to be created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PacketCaptureState.__new__(_PacketCaptureState)

        __props__.__dict__["filters"] = filters
        __props__.__dict__["maximum_bytes_per_packet"] = maximum_bytes_per_packet
        __props__.__dict__["maximum_bytes_per_session"] = maximum_bytes_per_session
        __props__.__dict__["maximum_capture_duration_in_seconds"] = maximum_capture_duration_in_seconds
        __props__.__dict__["name"] = name
        __props__.__dict__["network_watcher_id"] = network_watcher_id
        __props__.__dict__["storage_location"] = storage_location
        __props__.__dict__["virtual_machine_id"] = virtual_machine_id
        return PacketCapture(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Output[Optional[Sequence['outputs.PacketCaptureFilter']]]:
        """
        One or more `filter` blocks as defined below. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="maximumBytesPerPacket")
    def maximum_bytes_per_packet(self) -> pulumi.Output[Optional[int]]:
        """
        The number of bytes captured per packet. The remaining bytes are truncated. Defaults to `0` (Entire Packet Captured). Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "maximum_bytes_per_packet")

    @property
    @pulumi.getter(name="maximumBytesPerSession")
    def maximum_bytes_per_session(self) -> pulumi.Output[Optional[int]]:
        """
        Maximum size of the capture in Bytes. Defaults to `1073741824` (1GB). Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "maximum_bytes_per_session")

    @property
    @pulumi.getter(name="maximumCaptureDurationInSeconds")
    def maximum_capture_duration_in_seconds(self) -> pulumi.Output[Optional[int]]:
        """
        The maximum duration of the capture session in seconds. Defaults to `18000` (5 hours). Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "maximum_capture_duration_in_seconds")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name to use for this Network Packet Capture. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkWatcherId")
    def network_watcher_id(self) -> pulumi.Output[str]:
        """
        The resource ID of the Network Watcher. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "network_watcher_id")

    @property
    @pulumi.getter(name="storageLocation")
    def storage_location(self) -> pulumi.Output['outputs.PacketCaptureStorageLocation']:
        """
        A `storage_location` block as defined below. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "storage_location")

    @property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> pulumi.Output[str]:
        """
        The resource ID of the target Virtual Machine to capture packets from. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "virtual_machine_id")

