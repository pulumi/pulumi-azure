# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class VirtualMachine(pulumi.CustomResource):
    """
    Manages a Virtual Machine.
    
    ~> **NOTE:** Data Disks can be attached either directly on the `azurerm_virtual_machine` resource, or using the `azurerm_virtual_machine_data_disk_attachment` resource - but the two cannot be used together. If both are used against the same Virtual Machine, spurious changes will occur.
    """
    def __init__(__self__, __name__, __opts__=None, availability_set_id=None, boot_diagnostics=None, delete_data_disks_on_termination=None, delete_os_disk_on_termination=None, identity=None, license_type=None, location=None, name=None, network_interface_ids=None, os_profile=None, os_profile_linux_config=None, os_profile_secrets=None, os_profile_windows_config=None, plan=None, primary_network_interface_id=None, resource_group_name=None, storage_data_disks=None, storage_image_reference=None, storage_os_disk=None, tags=None, vm_size=None, zones=None):
        """Create a VirtualMachine resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['availabilitySetId'] = availability_set_id

        __props__['bootDiagnostics'] = boot_diagnostics

        __props__['deleteDataDisksOnTermination'] = delete_data_disks_on_termination

        __props__['deleteOsDiskOnTermination'] = delete_os_disk_on_termination

        __props__['identity'] = identity

        __props__['licenseType'] = license_type

        if not location:
            raise TypeError('Missing required property location')
        __props__['location'] = location

        __props__['name'] = name

        if not network_interface_ids:
            raise TypeError('Missing required property network_interface_ids')
        __props__['networkInterfaceIds'] = network_interface_ids

        __props__['osProfile'] = os_profile

        __props__['osProfileLinuxConfig'] = os_profile_linux_config

        __props__['osProfileSecrets'] = os_profile_secrets

        __props__['osProfileWindowsConfig'] = os_profile_windows_config

        __props__['plan'] = plan

        __props__['primaryNetworkInterfaceId'] = primary_network_interface_id

        if not resource_group_name:
            raise TypeError('Missing required property resource_group_name')
        __props__['resourceGroupName'] = resource_group_name

        __props__['storageDataDisks'] = storage_data_disks

        __props__['storageImageReference'] = storage_image_reference

        if not storage_os_disk:
            raise TypeError('Missing required property storage_os_disk')
        __props__['storageOsDisk'] = storage_os_disk

        __props__['tags'] = tags

        if not vm_size:
            raise TypeError('Missing required property vm_size')
        __props__['vmSize'] = vm_size

        __props__['zones'] = zones

        super(VirtualMachine, __self__).__init__(
            'azure:compute/virtualMachine:VirtualMachine',
            __name__,
            __props__,
            __opts__)

