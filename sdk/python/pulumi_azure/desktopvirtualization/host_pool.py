# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['HostPool']


class HostPool(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 load_balancer_type: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maximum_sessions_allowed: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 personal_desktop_assignment_type: Optional[pulumi.Input[str]] = None,
                 preferred_app_group_type: Optional[pulumi.Input[str]] = None,
                 registration_info: Optional[pulumi.Input[pulumi.InputType['HostPoolRegistrationInfoArgs']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 validate_environment: Optional[pulumi.Input[bool]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Manages a Virtual Desktop Host Pool.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_host_pool = azure.desktopvirtualization.HostPool("exampleHostPool",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            friendly_name="pooleddepthfirst",
            validate_environment=True,
            description="Acceptance Test: A pooled host pool - pooleddepthfirst",
            type="Pooled",
            maximum_sessions_allowed=50,
            load_balancer_type="DepthFirst")
        ```

        ## Import

        Virtual Desktop Host Pools can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:desktopvirtualization/hostPool:HostPool example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup1/providers/Microsoft.DesktopVirtualization/hostpools/myhostpool
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A description for the Virtual Desktop Host Pool.
        :param pulumi.Input[str] friendly_name: A friendly name for the Virtual Desktop Host Pool.
        :param pulumi.Input[str] load_balancer_type: `BreadthFirst` load balancing distributes new user sessions across all available session hosts in the host pool.
               `DepthFirst` load balancing distributes new user sessions to an available session host with the highest number of connections but has not reached its maximum session limit threshold.
               `Persistent` should be used if the host pool type is `Personal`
        :param pulumi.Input[str] location: The location/region where the Virtual Desktop Host Pool is
               located. Changing the location/region forces a new resource to be created.
        :param pulumi.Input[int] maximum_sessions_allowed: A valid integer value from 0 to 999999 for the maximum number of users that have concurrent sessions on a session host.
               Should only be set if the `type` of your Virtual Desktop Host Pool is `Pooled`.
        :param pulumi.Input[str] name: The name of the Virtual Desktop Host Pool. Changing the name
               forces a new resource to be created.
        :param pulumi.Input[str] personal_desktop_assignment_type: `Automatic` assignment – The service will select an available host and assign it to an user.
               `Direct` Assignment – Admin selects a specific host to assign to an user.
        :param pulumi.Input[str] preferred_app_group_type: Option to specify the preferred Application Group type for the Virtual Desktop Host Pool.
               Valid options are `None`, `Desktop` or `RailApplications`. Default is `None`.
        :param pulumi.Input[pulumi.InputType['HostPoolRegistrationInfoArgs']] registration_info: A `registration_info` block which is documented below. Specifies configuration on the registration information of the Virtual Desktop Host Pool.
        :param pulumi.Input[str] resource_group_name: The name of the resource group in which to
               create the Virtual Desktop Host Pool. Changing the resource group name forces
               a new resource to be created.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the resource.
        :param pulumi.Input[str] type: The type of the Virtual Desktop Host Pool. Valid options are
               `Personal` or `Pooled`. Changing the type forces a new resource to be created.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['description'] = description
            __props__['friendly_name'] = friendly_name
            if load_balancer_type is None and not opts.urn:
                raise TypeError("Missing required property 'load_balancer_type'")
            __props__['load_balancer_type'] = load_balancer_type
            __props__['location'] = location
            __props__['maximum_sessions_allowed'] = maximum_sessions_allowed
            __props__['name'] = name
            __props__['personal_desktop_assignment_type'] = personal_desktop_assignment_type
            __props__['preferred_app_group_type'] = preferred_app_group_type
            __props__['registration_info'] = registration_info
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['tags'] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__['type'] = type
            __props__['validate_environment'] = validate_environment
        super(HostPool, __self__).__init__(
            'azure:desktopvirtualization/hostPool:HostPool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            friendly_name: Optional[pulumi.Input[str]] = None,
            load_balancer_type: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            maximum_sessions_allowed: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            personal_desktop_assignment_type: Optional[pulumi.Input[str]] = None,
            preferred_app_group_type: Optional[pulumi.Input[str]] = None,
            registration_info: Optional[pulumi.Input[pulumi.InputType['HostPoolRegistrationInfoArgs']]] = None,
            resource_group_name: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            type: Optional[pulumi.Input[str]] = None,
            validate_environment: Optional[pulumi.Input[bool]] = None) -> 'HostPool':
        """
        Get an existing HostPool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A description for the Virtual Desktop Host Pool.
        :param pulumi.Input[str] friendly_name: A friendly name for the Virtual Desktop Host Pool.
        :param pulumi.Input[str] load_balancer_type: `BreadthFirst` load balancing distributes new user sessions across all available session hosts in the host pool.
               `DepthFirst` load balancing distributes new user sessions to an available session host with the highest number of connections but has not reached its maximum session limit threshold.
               `Persistent` should be used if the host pool type is `Personal`
        :param pulumi.Input[str] location: The location/region where the Virtual Desktop Host Pool is
               located. Changing the location/region forces a new resource to be created.
        :param pulumi.Input[int] maximum_sessions_allowed: A valid integer value from 0 to 999999 for the maximum number of users that have concurrent sessions on a session host.
               Should only be set if the `type` of your Virtual Desktop Host Pool is `Pooled`.
        :param pulumi.Input[str] name: The name of the Virtual Desktop Host Pool. Changing the name
               forces a new resource to be created.
        :param pulumi.Input[str] personal_desktop_assignment_type: `Automatic` assignment – The service will select an available host and assign it to an user.
               `Direct` Assignment – Admin selects a specific host to assign to an user.
        :param pulumi.Input[str] preferred_app_group_type: Option to specify the preferred Application Group type for the Virtual Desktop Host Pool.
               Valid options are `None`, `Desktop` or `RailApplications`. Default is `None`.
        :param pulumi.Input[pulumi.InputType['HostPoolRegistrationInfoArgs']] registration_info: A `registration_info` block which is documented below. Specifies configuration on the registration information of the Virtual Desktop Host Pool.
        :param pulumi.Input[str] resource_group_name: The name of the resource group in which to
               create the Virtual Desktop Host Pool. Changing the resource group name forces
               a new resource to be created.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the resource.
        :param pulumi.Input[str] type: The type of the Virtual Desktop Host Pool. Valid options are
               `Personal` or `Pooled`. Changing the type forces a new resource to be created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["description"] = description
        __props__["friendly_name"] = friendly_name
        __props__["load_balancer_type"] = load_balancer_type
        __props__["location"] = location
        __props__["maximum_sessions_allowed"] = maximum_sessions_allowed
        __props__["name"] = name
        __props__["personal_desktop_assignment_type"] = personal_desktop_assignment_type
        __props__["preferred_app_group_type"] = preferred_app_group_type
        __props__["registration_info"] = registration_info
        __props__["resource_group_name"] = resource_group_name
        __props__["tags"] = tags
        __props__["type"] = type
        __props__["validate_environment"] = validate_environment
        return HostPool(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        A description for the Virtual Desktop Host Pool.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> pulumi.Output[Optional[str]]:
        """
        A friendly name for the Virtual Desktop Host Pool.
        """
        return pulumi.get(self, "friendly_name")

    @property
    @pulumi.getter(name="loadBalancerType")
    def load_balancer_type(self) -> pulumi.Output[str]:
        """
        `BreadthFirst` load balancing distributes new user sessions across all available session hosts in the host pool.
        `DepthFirst` load balancing distributes new user sessions to an available session host with the highest number of connections but has not reached its maximum session limit threshold.
        `Persistent` should be used if the host pool type is `Personal`
        """
        return pulumi.get(self, "load_balancer_type")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The location/region where the Virtual Desktop Host Pool is
        located. Changing the location/region forces a new resource to be created.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="maximumSessionsAllowed")
    def maximum_sessions_allowed(self) -> pulumi.Output[Optional[int]]:
        """
        A valid integer value from 0 to 999999 for the maximum number of users that have concurrent sessions on a session host.
        Should only be set if the `type` of your Virtual Desktop Host Pool is `Pooled`.
        """
        return pulumi.get(self, "maximum_sessions_allowed")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the Virtual Desktop Host Pool. Changing the name
        forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="personalDesktopAssignmentType")
    def personal_desktop_assignment_type(self) -> pulumi.Output[Optional[str]]:
        """
        `Automatic` assignment – The service will select an available host and assign it to an user.
        `Direct` Assignment – Admin selects a specific host to assign to an user.
        """
        return pulumi.get(self, "personal_desktop_assignment_type")

    @property
    @pulumi.getter(name="preferredAppGroupType")
    def preferred_app_group_type(self) -> pulumi.Output[Optional[str]]:
        """
        Option to specify the preferred Application Group type for the Virtual Desktop Host Pool.
        Valid options are `None`, `Desktop` or `RailApplications`. Default is `None`.
        """
        return pulumi.get(self, "preferred_app_group_type")

    @property
    @pulumi.getter(name="registrationInfo")
    def registration_info(self) -> pulumi.Output[Optional['outputs.HostPoolRegistrationInfo']]:
        """
        A `registration_info` block which is documented below. Specifies configuration on the registration information of the Virtual Desktop Host Pool.
        """
        return pulumi.get(self, "registration_info")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[str]:
        """
        The name of the resource group in which to
        create the Virtual Desktop Host Pool. Changing the resource group name forces
        a new resource to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A mapping of tags to assign to the resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the Virtual Desktop Host Pool. Valid options are
        `Personal` or `Pooled`. Changing the type forces a new resource to be created.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="validateEnvironment")
    def validate_environment(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "validate_environment")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

