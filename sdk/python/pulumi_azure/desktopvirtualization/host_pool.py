# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['HostPoolArgs', 'HostPool']

@pulumi.input_type
class HostPoolArgs:
    def __init__(__self__, *,
                 load_balancer_type: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 custom_rdp_properties: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maximum_sessions_allowed: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 personal_desktop_assignment_type: Optional[pulumi.Input[str]] = None,
                 preferred_app_group_type: Optional[pulumi.Input[str]] = None,
                 scheduled_agent_updates: Optional[pulumi.Input['HostPoolScheduledAgentUpdatesArgs']] = None,
                 start_vm_on_connect: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 validate_environment: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a HostPool resource.
        :param pulumi.Input[str] load_balancer_type: `BreadthFirst` load balancing distributes new user sessions across all available session hosts in the host pool. Possible values are `BreadthFirst`, `DepthFirst` and `Persistent`.
               `DepthFirst` load balancing distributes new user sessions to an available session host with the highest number of connections but has not reached its maximum session limit threshold.
               `Persistent` should be used if the host pool type is `Personal`
        :param pulumi.Input[str] resource_group_name: The name of the resource group in which to
               create the Virtual Desktop Host Pool. Changing the resource group name forces
               a new resource to be created.
        :param pulumi.Input[str] type: The type of the Virtual Desktop Host Pool. Valid options are `Personal` or `Pooled`. Changing the type forces a new resource to be created.
        :param pulumi.Input[str] custom_rdp_properties: A valid custom RDP properties string for the Virtual Desktop Host Pool, available properties can be [found in this article](https://docs.microsoft.com/windows-server/remote/remote-desktop-services/clients/rdp-files).
        :param pulumi.Input[str] description: A description for the Virtual Desktop Host Pool.
        :param pulumi.Input[str] friendly_name: A friendly name for the Virtual Desktop Host Pool.
        :param pulumi.Input[str] location: The location/region where the Virtual Desktop Host Pool is
               located. Changing the location/region forces a new resource to be created.
        :param pulumi.Input[int] maximum_sessions_allowed: A valid integer value from 0 to 999999 for the maximum number of users that have concurrent sessions on a session host.
               Should only be set if the `type` of your Virtual Desktop Host Pool is `Pooled`.
        :param pulumi.Input[str] name: The name of the Virtual Desktop Host Pool. Changing the name
               forces a new resource to be created.
        :param pulumi.Input[str] personal_desktop_assignment_type: `Automatic` assignment – The service will select an available host and assign it to an user. Possible values are `Automatic` and `Direct`.
               `Direct` Assignment – Admin selects a specific host to assign to an user.
        :param pulumi.Input[str] preferred_app_group_type: Option to specify the preferred Application Group type for the Virtual Desktop Host Pool. Valid options are `None`, `Desktop` or `RailApplications`. Default is `None`.
        :param pulumi.Input['HostPoolScheduledAgentUpdatesArgs'] scheduled_agent_updates: A `scheduled_agent_updates` block as defined below. This enables control of when Agent Updates will be applied to Session Hosts.
        :param pulumi.Input[bool] start_vm_on_connect: Enables or disables the Start VM on Connection Feature. Defaults to `false`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the resource.
        :param pulumi.Input[bool] validate_environment: Allows you to test service changes before they are deployed to production. Defaults to `false`.
        """
        pulumi.set(__self__, "load_balancer_type", load_balancer_type)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "type", type)
        if custom_rdp_properties is not None:
            pulumi.set(__self__, "custom_rdp_properties", custom_rdp_properties)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maximum_sessions_allowed is not None:
            pulumi.set(__self__, "maximum_sessions_allowed", maximum_sessions_allowed)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if personal_desktop_assignment_type is not None:
            pulumi.set(__self__, "personal_desktop_assignment_type", personal_desktop_assignment_type)
        if preferred_app_group_type is not None:
            pulumi.set(__self__, "preferred_app_group_type", preferred_app_group_type)
        if scheduled_agent_updates is not None:
            pulumi.set(__self__, "scheduled_agent_updates", scheduled_agent_updates)
        if start_vm_on_connect is not None:
            pulumi.set(__self__, "start_vm_on_connect", start_vm_on_connect)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if validate_environment is not None:
            pulumi.set(__self__, "validate_environment", validate_environment)

    @property
    @pulumi.getter(name="loadBalancerType")
    def load_balancer_type(self) -> pulumi.Input[str]:
        """
        `BreadthFirst` load balancing distributes new user sessions across all available session hosts in the host pool. Possible values are `BreadthFirst`, `DepthFirst` and `Persistent`.
        `DepthFirst` load balancing distributes new user sessions to an available session host with the highest number of connections but has not reached its maximum session limit threshold.
        `Persistent` should be used if the host pool type is `Personal`
        """
        return pulumi.get(self, "load_balancer_type")

    @load_balancer_type.setter
    def load_balancer_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "load_balancer_type", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group in which to
        create the Virtual Desktop Host Pool. Changing the resource group name forces
        a new resource to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of the Virtual Desktop Host Pool. Valid options are `Personal` or `Pooled`. Changing the type forces a new resource to be created.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="customRdpProperties")
    def custom_rdp_properties(self) -> Optional[pulumi.Input[str]]:
        """
        A valid custom RDP properties string for the Virtual Desktop Host Pool, available properties can be [found in this article](https://docs.microsoft.com/windows-server/remote/remote-desktop-services/clients/rdp-files).
        """
        return pulumi.get(self, "custom_rdp_properties")

    @custom_rdp_properties.setter
    def custom_rdp_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_rdp_properties", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description for the Virtual Desktop Host Pool.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        A friendly name for the Virtual Desktop Host Pool.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The location/region where the Virtual Desktop Host Pool is
        located. Changing the location/region forces a new resource to be created.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maximumSessionsAllowed")
    def maximum_sessions_allowed(self) -> Optional[pulumi.Input[int]]:
        """
        A valid integer value from 0 to 999999 for the maximum number of users that have concurrent sessions on a session host.
        Should only be set if the `type` of your Virtual Desktop Host Pool is `Pooled`.
        """
        return pulumi.get(self, "maximum_sessions_allowed")

    @maximum_sessions_allowed.setter
    def maximum_sessions_allowed(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_sessions_allowed", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Virtual Desktop Host Pool. Changing the name
        forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="personalDesktopAssignmentType")
    def personal_desktop_assignment_type(self) -> Optional[pulumi.Input[str]]:
        """
        `Automatic` assignment – The service will select an available host and assign it to an user. Possible values are `Automatic` and `Direct`.
        `Direct` Assignment – Admin selects a specific host to assign to an user.
        """
        return pulumi.get(self, "personal_desktop_assignment_type")

    @personal_desktop_assignment_type.setter
    def personal_desktop_assignment_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "personal_desktop_assignment_type", value)

    @property
    @pulumi.getter(name="preferredAppGroupType")
    def preferred_app_group_type(self) -> Optional[pulumi.Input[str]]:
        """
        Option to specify the preferred Application Group type for the Virtual Desktop Host Pool. Valid options are `None`, `Desktop` or `RailApplications`. Default is `None`.
        """
        return pulumi.get(self, "preferred_app_group_type")

    @preferred_app_group_type.setter
    def preferred_app_group_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_app_group_type", value)

    @property
    @pulumi.getter(name="scheduledAgentUpdates")
    def scheduled_agent_updates(self) -> Optional[pulumi.Input['HostPoolScheduledAgentUpdatesArgs']]:
        """
        A `scheduled_agent_updates` block as defined below. This enables control of when Agent Updates will be applied to Session Hosts.
        """
        return pulumi.get(self, "scheduled_agent_updates")

    @scheduled_agent_updates.setter
    def scheduled_agent_updates(self, value: Optional[pulumi.Input['HostPoolScheduledAgentUpdatesArgs']]):
        pulumi.set(self, "scheduled_agent_updates", value)

    @property
    @pulumi.getter(name="startVmOnConnect")
    def start_vm_on_connect(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables or disables the Start VM on Connection Feature. Defaults to `false`.
        """
        return pulumi.get(self, "start_vm_on_connect")

    @start_vm_on_connect.setter
    def start_vm_on_connect(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "start_vm_on_connect", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A mapping of tags to assign to the resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="validateEnvironment")
    def validate_environment(self) -> Optional[pulumi.Input[bool]]:
        """
        Allows you to test service changes before they are deployed to production. Defaults to `false`.
        """
        return pulumi.get(self, "validate_environment")

    @validate_environment.setter
    def validate_environment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "validate_environment", value)


@pulumi.input_type
class _HostPoolState:
    def __init__(__self__, *,
                 custom_rdp_properties: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 load_balancer_type: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maximum_sessions_allowed: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 personal_desktop_assignment_type: Optional[pulumi.Input[str]] = None,
                 preferred_app_group_type: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 scheduled_agent_updates: Optional[pulumi.Input['HostPoolScheduledAgentUpdatesArgs']] = None,
                 start_vm_on_connect: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 validate_environment: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering HostPool resources.
        :param pulumi.Input[str] custom_rdp_properties: A valid custom RDP properties string for the Virtual Desktop Host Pool, available properties can be [found in this article](https://docs.microsoft.com/windows-server/remote/remote-desktop-services/clients/rdp-files).
        :param pulumi.Input[str] description: A description for the Virtual Desktop Host Pool.
        :param pulumi.Input[str] friendly_name: A friendly name for the Virtual Desktop Host Pool.
        :param pulumi.Input[str] load_balancer_type: `BreadthFirst` load balancing distributes new user sessions across all available session hosts in the host pool. Possible values are `BreadthFirst`, `DepthFirst` and `Persistent`.
               `DepthFirst` load balancing distributes new user sessions to an available session host with the highest number of connections but has not reached its maximum session limit threshold.
               `Persistent` should be used if the host pool type is `Personal`
        :param pulumi.Input[str] location: The location/region where the Virtual Desktop Host Pool is
               located. Changing the location/region forces a new resource to be created.
        :param pulumi.Input[int] maximum_sessions_allowed: A valid integer value from 0 to 999999 for the maximum number of users that have concurrent sessions on a session host.
               Should only be set if the `type` of your Virtual Desktop Host Pool is `Pooled`.
        :param pulumi.Input[str] name: The name of the Virtual Desktop Host Pool. Changing the name
               forces a new resource to be created.
        :param pulumi.Input[str] personal_desktop_assignment_type: `Automatic` assignment – The service will select an available host and assign it to an user. Possible values are `Automatic` and `Direct`.
               `Direct` Assignment – Admin selects a specific host to assign to an user.
        :param pulumi.Input[str] preferred_app_group_type: Option to specify the preferred Application Group type for the Virtual Desktop Host Pool. Valid options are `None`, `Desktop` or `RailApplications`. Default is `None`.
        :param pulumi.Input[str] resource_group_name: The name of the resource group in which to
               create the Virtual Desktop Host Pool. Changing the resource group name forces
               a new resource to be created.
        :param pulumi.Input['HostPoolScheduledAgentUpdatesArgs'] scheduled_agent_updates: A `scheduled_agent_updates` block as defined below. This enables control of when Agent Updates will be applied to Session Hosts.
        :param pulumi.Input[bool] start_vm_on_connect: Enables or disables the Start VM on Connection Feature. Defaults to `false`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the resource.
        :param pulumi.Input[str] type: The type of the Virtual Desktop Host Pool. Valid options are `Personal` or `Pooled`. Changing the type forces a new resource to be created.
        :param pulumi.Input[bool] validate_environment: Allows you to test service changes before they are deployed to production. Defaults to `false`.
        """
        if custom_rdp_properties is not None:
            pulumi.set(__self__, "custom_rdp_properties", custom_rdp_properties)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if load_balancer_type is not None:
            pulumi.set(__self__, "load_balancer_type", load_balancer_type)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maximum_sessions_allowed is not None:
            pulumi.set(__self__, "maximum_sessions_allowed", maximum_sessions_allowed)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if personal_desktop_assignment_type is not None:
            pulumi.set(__self__, "personal_desktop_assignment_type", personal_desktop_assignment_type)
        if preferred_app_group_type is not None:
            pulumi.set(__self__, "preferred_app_group_type", preferred_app_group_type)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if scheduled_agent_updates is not None:
            pulumi.set(__self__, "scheduled_agent_updates", scheduled_agent_updates)
        if start_vm_on_connect is not None:
            pulumi.set(__self__, "start_vm_on_connect", start_vm_on_connect)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if validate_environment is not None:
            pulumi.set(__self__, "validate_environment", validate_environment)

    @property
    @pulumi.getter(name="customRdpProperties")
    def custom_rdp_properties(self) -> Optional[pulumi.Input[str]]:
        """
        A valid custom RDP properties string for the Virtual Desktop Host Pool, available properties can be [found in this article](https://docs.microsoft.com/windows-server/remote/remote-desktop-services/clients/rdp-files).
        """
        return pulumi.get(self, "custom_rdp_properties")

    @custom_rdp_properties.setter
    def custom_rdp_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_rdp_properties", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description for the Virtual Desktop Host Pool.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        A friendly name for the Virtual Desktop Host Pool.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="loadBalancerType")
    def load_balancer_type(self) -> Optional[pulumi.Input[str]]:
        """
        `BreadthFirst` load balancing distributes new user sessions across all available session hosts in the host pool. Possible values are `BreadthFirst`, `DepthFirst` and `Persistent`.
        `DepthFirst` load balancing distributes new user sessions to an available session host with the highest number of connections but has not reached its maximum session limit threshold.
        `Persistent` should be used if the host pool type is `Personal`
        """
        return pulumi.get(self, "load_balancer_type")

    @load_balancer_type.setter
    def load_balancer_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_type", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The location/region where the Virtual Desktop Host Pool is
        located. Changing the location/region forces a new resource to be created.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maximumSessionsAllowed")
    def maximum_sessions_allowed(self) -> Optional[pulumi.Input[int]]:
        """
        A valid integer value from 0 to 999999 for the maximum number of users that have concurrent sessions on a session host.
        Should only be set if the `type` of your Virtual Desktop Host Pool is `Pooled`.
        """
        return pulumi.get(self, "maximum_sessions_allowed")

    @maximum_sessions_allowed.setter
    def maximum_sessions_allowed(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_sessions_allowed", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Virtual Desktop Host Pool. Changing the name
        forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="personalDesktopAssignmentType")
    def personal_desktop_assignment_type(self) -> Optional[pulumi.Input[str]]:
        """
        `Automatic` assignment – The service will select an available host and assign it to an user. Possible values are `Automatic` and `Direct`.
        `Direct` Assignment – Admin selects a specific host to assign to an user.
        """
        return pulumi.get(self, "personal_desktop_assignment_type")

    @personal_desktop_assignment_type.setter
    def personal_desktop_assignment_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "personal_desktop_assignment_type", value)

    @property
    @pulumi.getter(name="preferredAppGroupType")
    def preferred_app_group_type(self) -> Optional[pulumi.Input[str]]:
        """
        Option to specify the preferred Application Group type for the Virtual Desktop Host Pool. Valid options are `None`, `Desktop` or `RailApplications`. Default is `None`.
        """
        return pulumi.get(self, "preferred_app_group_type")

    @preferred_app_group_type.setter
    def preferred_app_group_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_app_group_type", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the resource group in which to
        create the Virtual Desktop Host Pool. Changing the resource group name forces
        a new resource to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="scheduledAgentUpdates")
    def scheduled_agent_updates(self) -> Optional[pulumi.Input['HostPoolScheduledAgentUpdatesArgs']]:
        """
        A `scheduled_agent_updates` block as defined below. This enables control of when Agent Updates will be applied to Session Hosts.
        """
        return pulumi.get(self, "scheduled_agent_updates")

    @scheduled_agent_updates.setter
    def scheduled_agent_updates(self, value: Optional[pulumi.Input['HostPoolScheduledAgentUpdatesArgs']]):
        pulumi.set(self, "scheduled_agent_updates", value)

    @property
    @pulumi.getter(name="startVmOnConnect")
    def start_vm_on_connect(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables or disables the Start VM on Connection Feature. Defaults to `false`.
        """
        return pulumi.get(self, "start_vm_on_connect")

    @start_vm_on_connect.setter
    def start_vm_on_connect(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "start_vm_on_connect", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A mapping of tags to assign to the resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the Virtual Desktop Host Pool. Valid options are `Personal` or `Pooled`. Changing the type forces a new resource to be created.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="validateEnvironment")
    def validate_environment(self) -> Optional[pulumi.Input[bool]]:
        """
        Allows you to test service changes before they are deployed to production. Defaults to `false`.
        """
        return pulumi.get(self, "validate_environment")

    @validate_environment.setter
    def validate_environment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "validate_environment", value)


class HostPool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_rdp_properties: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 load_balancer_type: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maximum_sessions_allowed: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 personal_desktop_assignment_type: Optional[pulumi.Input[str]] = None,
                 preferred_app_group_type: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 scheduled_agent_updates: Optional[pulumi.Input[pulumi.InputType['HostPoolScheduledAgentUpdatesArgs']]] = None,
                 start_vm_on_connect: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 validate_environment: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Manages a Virtual Desktop Host Pool.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_host_pool = azure.desktopvirtualization.HostPool("exampleHostPool",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            friendly_name="pooleddepthfirst",
            validate_environment=True,
            start_vm_on_connect=True,
            custom_rdp_properties="audiocapturemode:i:1;audiomode:i:0;",
            description="Acceptance Test: A pooled host pool - pooleddepthfirst",
            type="Pooled",
            maximum_sessions_allowed=50,
            load_balancer_type="DepthFirst",
            scheduled_agent_updates=azure.desktopvirtualization.HostPoolScheduledAgentUpdatesArgs(
                enabled=True,
                schedules=[azure.desktopvirtualization.HostPoolScheduledAgentUpdatesScheduleArgs(
                    day_of_week="Saturday",
                    hour_of_day=2,
                )],
            ))
        ```

        ## Import

        Virtual Desktop Host Pools can be imported using the `resource id`, e.g. text

        ```sh
         $ pulumi import azure:desktopvirtualization/hostPool:HostPool example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup1/providers/Microsoft.DesktopVirtualization/hostpools/myhostpool
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] custom_rdp_properties: A valid custom RDP properties string for the Virtual Desktop Host Pool, available properties can be [found in this article](https://docs.microsoft.com/windows-server/remote/remote-desktop-services/clients/rdp-files).
        :param pulumi.Input[str] description: A description for the Virtual Desktop Host Pool.
        :param pulumi.Input[str] friendly_name: A friendly name for the Virtual Desktop Host Pool.
        :param pulumi.Input[str] load_balancer_type: `BreadthFirst` load balancing distributes new user sessions across all available session hosts in the host pool. Possible values are `BreadthFirst`, `DepthFirst` and `Persistent`.
               `DepthFirst` load balancing distributes new user sessions to an available session host with the highest number of connections but has not reached its maximum session limit threshold.
               `Persistent` should be used if the host pool type is `Personal`
        :param pulumi.Input[str] location: The location/region where the Virtual Desktop Host Pool is
               located. Changing the location/region forces a new resource to be created.
        :param pulumi.Input[int] maximum_sessions_allowed: A valid integer value from 0 to 999999 for the maximum number of users that have concurrent sessions on a session host.
               Should only be set if the `type` of your Virtual Desktop Host Pool is `Pooled`.
        :param pulumi.Input[str] name: The name of the Virtual Desktop Host Pool. Changing the name
               forces a new resource to be created.
        :param pulumi.Input[str] personal_desktop_assignment_type: `Automatic` assignment – The service will select an available host and assign it to an user. Possible values are `Automatic` and `Direct`.
               `Direct` Assignment – Admin selects a specific host to assign to an user.
        :param pulumi.Input[str] preferred_app_group_type: Option to specify the preferred Application Group type for the Virtual Desktop Host Pool. Valid options are `None`, `Desktop` or `RailApplications`. Default is `None`.
        :param pulumi.Input[str] resource_group_name: The name of the resource group in which to
               create the Virtual Desktop Host Pool. Changing the resource group name forces
               a new resource to be created.
        :param pulumi.Input[pulumi.InputType['HostPoolScheduledAgentUpdatesArgs']] scheduled_agent_updates: A `scheduled_agent_updates` block as defined below. This enables control of when Agent Updates will be applied to Session Hosts.
        :param pulumi.Input[bool] start_vm_on_connect: Enables or disables the Start VM on Connection Feature. Defaults to `false`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the resource.
        :param pulumi.Input[str] type: The type of the Virtual Desktop Host Pool. Valid options are `Personal` or `Pooled`. Changing the type forces a new resource to be created.
        :param pulumi.Input[bool] validate_environment: Allows you to test service changes before they are deployed to production. Defaults to `false`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HostPoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Virtual Desktop Host Pool.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_host_pool = azure.desktopvirtualization.HostPool("exampleHostPool",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            friendly_name="pooleddepthfirst",
            validate_environment=True,
            start_vm_on_connect=True,
            custom_rdp_properties="audiocapturemode:i:1;audiomode:i:0;",
            description="Acceptance Test: A pooled host pool - pooleddepthfirst",
            type="Pooled",
            maximum_sessions_allowed=50,
            load_balancer_type="DepthFirst",
            scheduled_agent_updates=azure.desktopvirtualization.HostPoolScheduledAgentUpdatesArgs(
                enabled=True,
                schedules=[azure.desktopvirtualization.HostPoolScheduledAgentUpdatesScheduleArgs(
                    day_of_week="Saturday",
                    hour_of_day=2,
                )],
            ))
        ```

        ## Import

        Virtual Desktop Host Pools can be imported using the `resource id`, e.g. text

        ```sh
         $ pulumi import azure:desktopvirtualization/hostPool:HostPool example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup1/providers/Microsoft.DesktopVirtualization/hostpools/myhostpool
        ```

        :param str resource_name: The name of the resource.
        :param HostPoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HostPoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_rdp_properties: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 load_balancer_type: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maximum_sessions_allowed: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 personal_desktop_assignment_type: Optional[pulumi.Input[str]] = None,
                 preferred_app_group_type: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 scheduled_agent_updates: Optional[pulumi.Input[pulumi.InputType['HostPoolScheduledAgentUpdatesArgs']]] = None,
                 start_vm_on_connect: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 validate_environment: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HostPoolArgs.__new__(HostPoolArgs)

            __props__.__dict__["custom_rdp_properties"] = custom_rdp_properties
            __props__.__dict__["description"] = description
            __props__.__dict__["friendly_name"] = friendly_name
            if load_balancer_type is None and not opts.urn:
                raise TypeError("Missing required property 'load_balancer_type'")
            __props__.__dict__["load_balancer_type"] = load_balancer_type
            __props__.__dict__["location"] = location
            __props__.__dict__["maximum_sessions_allowed"] = maximum_sessions_allowed
            __props__.__dict__["name"] = name
            __props__.__dict__["personal_desktop_assignment_type"] = personal_desktop_assignment_type
            __props__.__dict__["preferred_app_group_type"] = preferred_app_group_type
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["scheduled_agent_updates"] = scheduled_agent_updates
            __props__.__dict__["start_vm_on_connect"] = start_vm_on_connect
            __props__.__dict__["tags"] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["validate_environment"] = validate_environment
        super(HostPool, __self__).__init__(
            'azure:desktopvirtualization/hostPool:HostPool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            custom_rdp_properties: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            friendly_name: Optional[pulumi.Input[str]] = None,
            load_balancer_type: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            maximum_sessions_allowed: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            personal_desktop_assignment_type: Optional[pulumi.Input[str]] = None,
            preferred_app_group_type: Optional[pulumi.Input[str]] = None,
            resource_group_name: Optional[pulumi.Input[str]] = None,
            scheduled_agent_updates: Optional[pulumi.Input[pulumi.InputType['HostPoolScheduledAgentUpdatesArgs']]] = None,
            start_vm_on_connect: Optional[pulumi.Input[bool]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            type: Optional[pulumi.Input[str]] = None,
            validate_environment: Optional[pulumi.Input[bool]] = None) -> 'HostPool':
        """
        Get an existing HostPool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] custom_rdp_properties: A valid custom RDP properties string for the Virtual Desktop Host Pool, available properties can be [found in this article](https://docs.microsoft.com/windows-server/remote/remote-desktop-services/clients/rdp-files).
        :param pulumi.Input[str] description: A description for the Virtual Desktop Host Pool.
        :param pulumi.Input[str] friendly_name: A friendly name for the Virtual Desktop Host Pool.
        :param pulumi.Input[str] load_balancer_type: `BreadthFirst` load balancing distributes new user sessions across all available session hosts in the host pool. Possible values are `BreadthFirst`, `DepthFirst` and `Persistent`.
               `DepthFirst` load balancing distributes new user sessions to an available session host with the highest number of connections but has not reached its maximum session limit threshold.
               `Persistent` should be used if the host pool type is `Personal`
        :param pulumi.Input[str] location: The location/region where the Virtual Desktop Host Pool is
               located. Changing the location/region forces a new resource to be created.
        :param pulumi.Input[int] maximum_sessions_allowed: A valid integer value from 0 to 999999 for the maximum number of users that have concurrent sessions on a session host.
               Should only be set if the `type` of your Virtual Desktop Host Pool is `Pooled`.
        :param pulumi.Input[str] name: The name of the Virtual Desktop Host Pool. Changing the name
               forces a new resource to be created.
        :param pulumi.Input[str] personal_desktop_assignment_type: `Automatic` assignment – The service will select an available host and assign it to an user. Possible values are `Automatic` and `Direct`.
               `Direct` Assignment – Admin selects a specific host to assign to an user.
        :param pulumi.Input[str] preferred_app_group_type: Option to specify the preferred Application Group type for the Virtual Desktop Host Pool. Valid options are `None`, `Desktop` or `RailApplications`. Default is `None`.
        :param pulumi.Input[str] resource_group_name: The name of the resource group in which to
               create the Virtual Desktop Host Pool. Changing the resource group name forces
               a new resource to be created.
        :param pulumi.Input[pulumi.InputType['HostPoolScheduledAgentUpdatesArgs']] scheduled_agent_updates: A `scheduled_agent_updates` block as defined below. This enables control of when Agent Updates will be applied to Session Hosts.
        :param pulumi.Input[bool] start_vm_on_connect: Enables or disables the Start VM on Connection Feature. Defaults to `false`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the resource.
        :param pulumi.Input[str] type: The type of the Virtual Desktop Host Pool. Valid options are `Personal` or `Pooled`. Changing the type forces a new resource to be created.
        :param pulumi.Input[bool] validate_environment: Allows you to test service changes before they are deployed to production. Defaults to `false`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HostPoolState.__new__(_HostPoolState)

        __props__.__dict__["custom_rdp_properties"] = custom_rdp_properties
        __props__.__dict__["description"] = description
        __props__.__dict__["friendly_name"] = friendly_name
        __props__.__dict__["load_balancer_type"] = load_balancer_type
        __props__.__dict__["location"] = location
        __props__.__dict__["maximum_sessions_allowed"] = maximum_sessions_allowed
        __props__.__dict__["name"] = name
        __props__.__dict__["personal_desktop_assignment_type"] = personal_desktop_assignment_type
        __props__.__dict__["preferred_app_group_type"] = preferred_app_group_type
        __props__.__dict__["resource_group_name"] = resource_group_name
        __props__.__dict__["scheduled_agent_updates"] = scheduled_agent_updates
        __props__.__dict__["start_vm_on_connect"] = start_vm_on_connect
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        __props__.__dict__["validate_environment"] = validate_environment
        return HostPool(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="customRdpProperties")
    def custom_rdp_properties(self) -> pulumi.Output[Optional[str]]:
        """
        A valid custom RDP properties string for the Virtual Desktop Host Pool, available properties can be [found in this article](https://docs.microsoft.com/windows-server/remote/remote-desktop-services/clients/rdp-files).
        """
        return pulumi.get(self, "custom_rdp_properties")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        A description for the Virtual Desktop Host Pool.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> pulumi.Output[Optional[str]]:
        """
        A friendly name for the Virtual Desktop Host Pool.
        """
        return pulumi.get(self, "friendly_name")

    @property
    @pulumi.getter(name="loadBalancerType")
    def load_balancer_type(self) -> pulumi.Output[str]:
        """
        `BreadthFirst` load balancing distributes new user sessions across all available session hosts in the host pool. Possible values are `BreadthFirst`, `DepthFirst` and `Persistent`.
        `DepthFirst` load balancing distributes new user sessions to an available session host with the highest number of connections but has not reached its maximum session limit threshold.
        `Persistent` should be used if the host pool type is `Personal`
        """
        return pulumi.get(self, "load_balancer_type")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The location/region where the Virtual Desktop Host Pool is
        located. Changing the location/region forces a new resource to be created.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="maximumSessionsAllowed")
    def maximum_sessions_allowed(self) -> pulumi.Output[Optional[int]]:
        """
        A valid integer value from 0 to 999999 for the maximum number of users that have concurrent sessions on a session host.
        Should only be set if the `type` of your Virtual Desktop Host Pool is `Pooled`.
        """
        return pulumi.get(self, "maximum_sessions_allowed")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the Virtual Desktop Host Pool. Changing the name
        forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="personalDesktopAssignmentType")
    def personal_desktop_assignment_type(self) -> pulumi.Output[Optional[str]]:
        """
        `Automatic` assignment – The service will select an available host and assign it to an user. Possible values are `Automatic` and `Direct`.
        `Direct` Assignment – Admin selects a specific host to assign to an user.
        """
        return pulumi.get(self, "personal_desktop_assignment_type")

    @property
    @pulumi.getter(name="preferredAppGroupType")
    def preferred_app_group_type(self) -> pulumi.Output[Optional[str]]:
        """
        Option to specify the preferred Application Group type for the Virtual Desktop Host Pool. Valid options are `None`, `Desktop` or `RailApplications`. Default is `None`.
        """
        return pulumi.get(self, "preferred_app_group_type")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[str]:
        """
        The name of the resource group in which to
        create the Virtual Desktop Host Pool. Changing the resource group name forces
        a new resource to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="scheduledAgentUpdates")
    def scheduled_agent_updates(self) -> pulumi.Output[Optional['outputs.HostPoolScheduledAgentUpdates']]:
        """
        A `scheduled_agent_updates` block as defined below. This enables control of when Agent Updates will be applied to Session Hosts.
        """
        return pulumi.get(self, "scheduled_agent_updates")

    @property
    @pulumi.getter(name="startVmOnConnect")
    def start_vm_on_connect(self) -> pulumi.Output[Optional[bool]]:
        """
        Enables or disables the Start VM on Connection Feature. Defaults to `false`.
        """
        return pulumi.get(self, "start_vm_on_connect")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A mapping of tags to assign to the resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the Virtual Desktop Host Pool. Valid options are `Personal` or `Pooled`. Changing the type forces a new resource to be created.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="validateEnvironment")
    def validate_environment(self) -> pulumi.Output[Optional[bool]]:
        """
        Allows you to test service changes before they are deployed to production. Defaults to `false`.
        """
        return pulumi.get(self, "validate_environment")

