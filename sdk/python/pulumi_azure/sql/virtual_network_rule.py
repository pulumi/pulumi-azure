# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class VirtualNetworkRule(pulumi.CustomResource):
    """
    Allows you to add, update, or remove an Azure SQL server to a subnet of a virtual network.
    """
    def __init__(__self__, __name__, __opts__=None, ignore_missing_vnet_service_endpoint=None, name=None, resource_group_name=None, server_name=None, subnet_id=None):
        """Create a VirtualNetworkRule resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if ignore_missing_vnet_service_endpoint and not isinstance(ignore_missing_vnet_service_endpoint, bool):
            raise TypeError('Expected property ignore_missing_vnet_service_endpoint to be a bool')
        __self__.ignore_missing_vnet_service_endpoint = ignore_missing_vnet_service_endpoint
        """
        Create the virtual network rule before the subnet has the virtual network service endpoint enabled. The default value is false.
        """
        __props__['ignoreMissingVnetServiceEndpoint'] = ignore_missing_vnet_service_endpoint

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The name of the SQL virtual network rule. Changing this forces a new resource to be created. Cannot be empty and must only contain alphanumeric characters and hyphens. Cannot start with a number, and cannot start or end with a hyphen.
        """
        __props__['name'] = name

        if not resource_group_name:
            raise TypeError('Missing required property resource_group_name')
        elif not isinstance(resource_group_name, basestring):
            raise TypeError('Expected property resource_group_name to be a basestring')
        __self__.resource_group_name = resource_group_name
        """
        The name of the resource group where the SQL server resides. Changing this forces a new resource to be created.
        """
        __props__['resourceGroupName'] = resource_group_name

        if not server_name:
            raise TypeError('Missing required property server_name')
        elif not isinstance(server_name, basestring):
            raise TypeError('Expected property server_name to be a basestring')
        __self__.server_name = server_name
        """
        The name of the SQL Server to which this SQL virtual network rule will be applied to. Changing this forces a new resource to be created.
        """
        __props__['serverName'] = server_name

        if not subnet_id:
            raise TypeError('Missing required property subnet_id')
        elif not isinstance(subnet_id, basestring):
            raise TypeError('Expected property subnet_id to be a basestring')
        __self__.subnet_id = subnet_id
        """
        The ID of the subnet that the SQL server will be connected to.
        """
        __props__['subnetId'] = subnet_id

        super(VirtualNetworkRule, __self__).__init__(
            'azure:sql/virtualNetworkRule:VirtualNetworkRule',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'ignoreMissingVnetServiceEndpoint' in outs:
            self.ignore_missing_vnet_service_endpoint = outs['ignoreMissingVnetServiceEndpoint']
        if 'name' in outs:
            self.name = outs['name']
        if 'resourceGroupName' in outs:
            self.resource_group_name = outs['resourceGroupName']
        if 'serverName' in outs:
            self.server_name = outs['serverName']
        if 'subnetId' in outs:
            self.subnet_id = outs['subnetId']
