# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'CaaRecordRecordArgs',
    'CaaRecordRecordArgsDict',
    'MxRecordRecordArgs',
    'MxRecordRecordArgsDict',
    'SrvRecordRecordArgs',
    'SrvRecordRecordArgsDict',
    'TxtRecordRecordArgs',
    'TxtRecordRecordArgsDict',
    'ZoneSoaRecordArgs',
    'ZoneSoaRecordArgsDict',
]

MYPY = False

if not MYPY:
    class CaaRecordRecordArgsDict(TypedDict):
        flags: pulumi.Input[_builtins.int]
        """
        Extensible CAA flags, currently only 1 is implemented to set the issuer critical flag.
        """
        tag: pulumi.Input[_builtins.str]
        """
        A property tag, options are `issue`, `issuewild`, `iodef`, and `contactemail`.
        """
        value: pulumi.Input[_builtins.str]
        """
        A property value such as a registrar domain.
        """
elif False:
    CaaRecordRecordArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CaaRecordRecordArgs:
    def __init__(__self__, *,
                 flags: pulumi.Input[_builtins.int],
                 tag: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.int] flags: Extensible CAA flags, currently only 1 is implemented to set the issuer critical flag.
        :param pulumi.Input[_builtins.str] tag: A property tag, options are `issue`, `issuewild`, `iodef`, and `contactemail`.
        :param pulumi.Input[_builtins.str] value: A property value such as a registrar domain.
        """
        pulumi.set(__self__, "flags", flags)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def flags(self) -> pulumi.Input[_builtins.int]:
        """
        Extensible CAA flags, currently only 1 is implemented to set the issuer critical flag.
        """
        return pulumi.get(self, "flags")

    @flags.setter
    def flags(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "flags", value)

    @_builtins.property
    @pulumi.getter
    def tag(self) -> pulumi.Input[_builtins.str]:
        """
        A property tag, options are `issue`, `issuewild`, `iodef`, and `contactemail`.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "tag", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        A property value such as a registrar domain.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class MxRecordRecordArgsDict(TypedDict):
        exchange: pulumi.Input[_builtins.str]
        """
        The mail server responsible for the domain covered by the MX record.
        """
        preference: pulumi.Input[_builtins.str]
        """
        String representing the "preference” value of the MX records. Records with lower preference value take priority.
        """
elif False:
    MxRecordRecordArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MxRecordRecordArgs:
    def __init__(__self__, *,
                 exchange: pulumi.Input[_builtins.str],
                 preference: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] exchange: The mail server responsible for the domain covered by the MX record.
        :param pulumi.Input[_builtins.str] preference: String representing the "preference” value of the MX records. Records with lower preference value take priority.
        """
        pulumi.set(__self__, "exchange", exchange)
        pulumi.set(__self__, "preference", preference)

    @_builtins.property
    @pulumi.getter
    def exchange(self) -> pulumi.Input[_builtins.str]:
        """
        The mail server responsible for the domain covered by the MX record.
        """
        return pulumi.get(self, "exchange")

    @exchange.setter
    def exchange(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "exchange", value)

    @_builtins.property
    @pulumi.getter
    def preference(self) -> pulumi.Input[_builtins.str]:
        """
        String representing the "preference” value of the MX records. Records with lower preference value take priority.
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "preference", value)


if not MYPY:
    class SrvRecordRecordArgsDict(TypedDict):
        port: pulumi.Input[_builtins.int]
        """
        Port the service is listening on.
        """
        priority: pulumi.Input[_builtins.int]
        """
        Priority of the SRV record.
        """
        target: pulumi.Input[_builtins.str]
        """
        FQDN of the service.
        """
        weight: pulumi.Input[_builtins.int]
        """
        Weight of the SRV record.
        """
elif False:
    SrvRecordRecordArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SrvRecordRecordArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[_builtins.int],
                 priority: pulumi.Input[_builtins.int],
                 target: pulumi.Input[_builtins.str],
                 weight: pulumi.Input[_builtins.int]):
        """
        :param pulumi.Input[_builtins.int] port: Port the service is listening on.
        :param pulumi.Input[_builtins.int] priority: Priority of the SRV record.
        :param pulumi.Input[_builtins.str] target: FQDN of the service.
        :param pulumi.Input[_builtins.int] weight: Weight of the SRV record.
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Input[_builtins.int]:
        """
        Port the service is listening on.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> pulumi.Input[_builtins.int]:
        """
        Priority of the SRV record.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter
    def target(self) -> pulumi.Input[_builtins.str]:
        """
        FQDN of the service.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "target", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> pulumi.Input[_builtins.int]:
        """
        Weight of the SRV record.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "weight", value)


if not MYPY:
    class TxtRecordRecordArgsDict(TypedDict):
        value: pulumi.Input[_builtins.str]
        """
        The value of the record. Max length: 4096 characters
        """
elif False:
    TxtRecordRecordArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TxtRecordRecordArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] value: The value of the record. Max length: 4096 characters
        """
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        The value of the record. Max length: 4096 characters
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ZoneSoaRecordArgsDict(TypedDict):
        email: pulumi.Input[_builtins.str]
        """
        The email contact for the SOA record.
        """
        expire_time: NotRequired[pulumi.Input[_builtins.int]]
        """
        The expire time for the SOA record. Defaults to `2419200`.
        """
        fqdn: NotRequired[pulumi.Input[_builtins.str]]
        host_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The domain name of the authoritative name server for the SOA record. If not set, computed value from Azure will be used.
        """
        minimum_ttl: NotRequired[pulumi.Input[_builtins.int]]
        """
        The minimum Time To Live for the SOA record. By convention, it is used to determine the negative caching duration. Defaults to `300`.
        """
        refresh_time: NotRequired[pulumi.Input[_builtins.int]]
        """
        The refresh time for the SOA record. Defaults to `3600`.
        """
        retry_time: NotRequired[pulumi.Input[_builtins.int]]
        """
        The retry time for the SOA record. Defaults to `300`.
        """
        serial_number: NotRequired[pulumi.Input[_builtins.int]]
        """
        The serial number for the SOA record. Defaults to `1`.
        """
        tags: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
        """
        A mapping of tags to assign to the Record Set.
        """
        ttl: NotRequired[pulumi.Input[_builtins.int]]
        """
        The Time To Live of the SOA Record in seconds. Defaults to `3600`.
        """
elif False:
    ZoneSoaRecordArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ZoneSoaRecordArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[_builtins.str],
                 expire_time: Optional[pulumi.Input[_builtins.int]] = None,
                 fqdn: Optional[pulumi.Input[_builtins.str]] = None,
                 host_name: Optional[pulumi.Input[_builtins.str]] = None,
                 minimum_ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 refresh_time: Optional[pulumi.Input[_builtins.int]] = None,
                 retry_time: Optional[pulumi.Input[_builtins.int]] = None,
                 serial_number: Optional[pulumi.Input[_builtins.int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 ttl: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] email: The email contact for the SOA record.
        :param pulumi.Input[_builtins.int] expire_time: The expire time for the SOA record. Defaults to `2419200`.
        :param pulumi.Input[_builtins.str] host_name: The domain name of the authoritative name server for the SOA record. If not set, computed value from Azure will be used.
        :param pulumi.Input[_builtins.int] minimum_ttl: The minimum Time To Live for the SOA record. By convention, it is used to determine the negative caching duration. Defaults to `300`.
        :param pulumi.Input[_builtins.int] refresh_time: The refresh time for the SOA record. Defaults to `3600`.
        :param pulumi.Input[_builtins.int] retry_time: The retry time for the SOA record. Defaults to `300`.
        :param pulumi.Input[_builtins.int] serial_number: The serial number for the SOA record. Defaults to `1`.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: A mapping of tags to assign to the Record Set.
        :param pulumi.Input[_builtins.int] ttl: The Time To Live of the SOA Record in seconds. Defaults to `3600`.
        """
        pulumi.set(__self__, "email", email)
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if minimum_ttl is not None:
            pulumi.set(__self__, "minimum_ttl", minimum_ttl)
        if refresh_time is not None:
            pulumi.set(__self__, "refresh_time", refresh_time)
        if retry_time is not None:
            pulumi.set(__self__, "retry_time", retry_time)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @_builtins.property
    @pulumi.getter
    def email(self) -> pulumi.Input[_builtins.str]:
        """
        The email contact for the SOA record.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "email", value)

    @_builtins.property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The expire time for the SOA record. Defaults to `2419200`.
        """
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "expire_time", value)

    @_builtins.property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fqdn", value)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The domain name of the authoritative name server for the SOA record. If not set, computed value from Azure will be used.
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_name", value)

    @_builtins.property
    @pulumi.getter(name="minimumTtl")
    def minimum_ttl(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The minimum Time To Live for the SOA record. By convention, it is used to determine the negative caching duration. Defaults to `300`.
        """
        return pulumi.get(self, "minimum_ttl")

    @minimum_ttl.setter
    def minimum_ttl(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "minimum_ttl", value)

    @_builtins.property
    @pulumi.getter(name="refreshTime")
    def refresh_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The refresh time for the SOA record. Defaults to `3600`.
        """
        return pulumi.get(self, "refresh_time")

    @refresh_time.setter
    def refresh_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "refresh_time", value)

    @_builtins.property
    @pulumi.getter(name="retryTime")
    def retry_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The retry time for the SOA record. Defaults to `300`.
        """
        return pulumi.get(self, "retry_time")

    @retry_time.setter
    def retry_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "retry_time", value)

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The serial number for the SOA record. Defaults to `1`.
        """
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "serial_number", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        A mapping of tags to assign to the Record Set.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The Time To Live of the SOA Record in seconds. Defaults to `3600`.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ttl", value)


