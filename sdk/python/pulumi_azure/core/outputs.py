# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'CustomProviderAction',
    'CustomProviderResourceType',
    'CustomProviderValidation',
    'ResourceDeploymentScriptAzureCliContainer',
    'ResourceDeploymentScriptAzureCliEnvironmentVariable',
    'ResourceDeploymentScriptAzureCliIdentity',
    'ResourceDeploymentScriptAzureCliStorageAccount',
    'ResourceDeploymentScriptPowerShellContainer',
    'ResourceDeploymentScriptPowerShellEnvironmentVariable',
    'ResourceDeploymentScriptPowerShellIdentity',
    'ResourceDeploymentScriptPowerShellStorageAccount',
    'ResourceGroupCostManagementExportExportDataOptions',
    'ResourceGroupCostManagementExportExportDataStorageLocation',
    'ResourceGroupCostManagementViewDataset',
    'ResourceGroupCostManagementViewDatasetAggregation',
    'ResourceGroupCostManagementViewDatasetGrouping',
    'ResourceGroupCostManagementViewDatasetSorting',
    'ResourceGroupCostManagementViewKpi',
    'ResourceGroupCostManagementViewPivot',
    'ResourceGroupPolicyAssignmentIdentity',
    'ResourceGroupPolicyAssignmentNonComplianceMessage',
    'ResourceGroupPolicyAssignmentOverride',
    'ResourceGroupPolicyAssignmentOverrideSelector',
    'ResourceGroupPolicyAssignmentResourceSelector',
    'ResourceGroupPolicyAssignmentResourceSelectorSelector',
    'ResourcePolicyAssignmentIdentity',
    'ResourcePolicyAssignmentNonComplianceMessage',
    'ResourcePolicyAssignmentOverride',
    'ResourcePolicyAssignmentOverrideSelector',
    'ResourcePolicyAssignmentResourceSelector',
    'ResourcePolicyAssignmentResourceSelectorSelector',
    'ResourceProviderRegistrationFeature',
    'SubscriptionCostManagementExportExportDataOptions',
    'SubscriptionCostManagementExportExportDataStorageLocation',
    'SubscriptionCostManagementViewDataset',
    'SubscriptionCostManagementViewDatasetAggregation',
    'SubscriptionCostManagementViewDatasetGrouping',
    'SubscriptionCostManagementViewDatasetSorting',
    'SubscriptionCostManagementViewKpi',
    'SubscriptionCostManagementViewPivot',
    'SubscriptionPolicyAssignmentIdentity',
    'SubscriptionPolicyAssignmentNonComplianceMessage',
    'SubscriptionPolicyAssignmentOverride',
    'SubscriptionPolicyAssignmentOverrideSelector',
    'SubscriptionPolicyAssignmentResourceSelector',
    'SubscriptionPolicyAssignmentResourceSelectorSelector',
    'GetResourcesResourceResult',
    'GetSubscriptionsSubscriptionResult',
]

@pulumi.output_type
class CustomProviderAction(dict):
    def __init__(__self__, *,
                 endpoint: str,
                 name: str):
        """
        :param str endpoint: Specifies the endpoint of the action.
        :param str name: Specifies the name of the action.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        """
        Specifies the endpoint of the action.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the action.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class CustomProviderResourceType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routingType":
            suggest = "routing_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomProviderResourceType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomProviderResourceType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomProviderResourceType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint: str,
                 name: str,
                 routing_type: Optional[str] = None):
        """
        :param str endpoint: Specifies the endpoint of the route definition.
        :param str name: Specifies the name of the route definition.
        :param str routing_type: The routing type that is supported for the resource request. Valid values are `Proxy` and `Proxy,Cache`. This value defaults to `ResourceTypeRoutingProxy`.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "name", name)
        if routing_type is not None:
            pulumi.set(__self__, "routing_type", routing_type)

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        """
        Specifies the endpoint of the route definition.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the route definition.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="routingType")
    def routing_type(self) -> Optional[str]:
        """
        The routing type that is supported for the resource request. Valid values are `Proxy` and `Proxy,Cache`. This value defaults to `ResourceTypeRoutingProxy`.
        """
        return pulumi.get(self, "routing_type")


@pulumi.output_type
class CustomProviderValidation(dict):
    def __init__(__self__, *,
                 specification: str):
        """
        :param str specification: The endpoint where the validation specification is located.
        """
        pulumi.set(__self__, "specification", specification)

    @property
    @pulumi.getter
    def specification(self) -> str:
        """
        The endpoint where the validation specification is located.
        """
        return pulumi.get(self, "specification")


@pulumi.output_type
class ResourceDeploymentScriptAzureCliContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerGroupName":
            suggest = "container_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceDeploymentScriptAzureCliContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceDeploymentScriptAzureCliContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceDeploymentScriptAzureCliContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_group_name: Optional[str] = None):
        """
        :param str container_group_name: Container group name, if not specified then the name will get auto-generated. For more information, please refer to the [Container Configuration](https://learn.microsoft.com/en-us/rest/api/resources/deployment-scripts/create?tabs=HTTP#containerconfiguration) documentation.
        """
        if container_group_name is not None:
            pulumi.set(__self__, "container_group_name", container_group_name)

    @property
    @pulumi.getter(name="containerGroupName")
    def container_group_name(self) -> Optional[str]:
        """
        Container group name, if not specified then the name will get auto-generated. For more information, please refer to the [Container Configuration](https://learn.microsoft.com/en-us/rest/api/resources/deployment-scripts/create?tabs=HTTP#containerconfiguration) documentation.
        """
        return pulumi.get(self, "container_group_name")


@pulumi.output_type
class ResourceDeploymentScriptAzureCliEnvironmentVariable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secureValue":
            suggest = "secure_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceDeploymentScriptAzureCliEnvironmentVariable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceDeploymentScriptAzureCliEnvironmentVariable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceDeploymentScriptAzureCliEnvironmentVariable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 secure_value: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Specifies the name of the environment variable.
        :param str secure_value: Specifies the value of the secure environment variable.
        :param str value: Specifies the value of the environment variable.
        """
        pulumi.set(__self__, "name", name)
        if secure_value is not None:
            pulumi.set(__self__, "secure_value", secure_value)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the environment variable.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="secureValue")
    def secure_value(self) -> Optional[str]:
        """
        Specifies the value of the secure environment variable.
        """
        return pulumi.get(self, "secure_value")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Specifies the value of the environment variable.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ResourceDeploymentScriptAzureCliIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "identityIds":
            suggest = "identity_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceDeploymentScriptAzureCliIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceDeploymentScriptAzureCliIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceDeploymentScriptAzureCliIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 identity_ids: Sequence[str],
                 type: str):
        """
        :param Sequence[str] identity_ids: Specifies the list of user-assigned managed identity IDs associated with the resource. Changing this forces a new resource to be created.
        :param str type: Type of the managed identity. The only possible value is `UserAssigned`. Changing this forces a new resource to be created.
        """
        pulumi.set(__self__, "identity_ids", identity_ids)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Sequence[str]:
        """
        Specifies the list of user-assigned managed identity IDs associated with the resource. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "identity_ids")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the managed identity. The only possible value is `UserAssigned`. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ResourceDeploymentScriptAzureCliStorageAccount(dict):
    def __init__(__self__, *,
                 key: str,
                 name: str):
        """
        :param str key: Specifies the storage account access key.
        :param str name: Specifies the storage account name.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Specifies the storage account access key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the storage account name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ResourceDeploymentScriptPowerShellContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerGroupName":
            suggest = "container_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceDeploymentScriptPowerShellContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceDeploymentScriptPowerShellContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceDeploymentScriptPowerShellContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_group_name: Optional[str] = None):
        """
        :param str container_group_name: Container group name, if not specified then the name will get auto-generated. For more information, please refer to the [Container Configuration](https://learn.microsoft.com/en-us/rest/api/resources/deployment-scripts/create?tabs=HTTP#containerconfiguration) documentation.
        """
        if container_group_name is not None:
            pulumi.set(__self__, "container_group_name", container_group_name)

    @property
    @pulumi.getter(name="containerGroupName")
    def container_group_name(self) -> Optional[str]:
        """
        Container group name, if not specified then the name will get auto-generated. For more information, please refer to the [Container Configuration](https://learn.microsoft.com/en-us/rest/api/resources/deployment-scripts/create?tabs=HTTP#containerconfiguration) documentation.
        """
        return pulumi.get(self, "container_group_name")


@pulumi.output_type
class ResourceDeploymentScriptPowerShellEnvironmentVariable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secureValue":
            suggest = "secure_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceDeploymentScriptPowerShellEnvironmentVariable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceDeploymentScriptPowerShellEnvironmentVariable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceDeploymentScriptPowerShellEnvironmentVariable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 secure_value: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Specifies the name of the environment variable.
        :param str secure_value: Specifies the value of the secure environment variable.
        :param str value: Specifies the value of the environment variable.
        """
        pulumi.set(__self__, "name", name)
        if secure_value is not None:
            pulumi.set(__self__, "secure_value", secure_value)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the environment variable.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="secureValue")
    def secure_value(self) -> Optional[str]:
        """
        Specifies the value of the secure environment variable.
        """
        return pulumi.get(self, "secure_value")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Specifies the value of the environment variable.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ResourceDeploymentScriptPowerShellIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "identityIds":
            suggest = "identity_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceDeploymentScriptPowerShellIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceDeploymentScriptPowerShellIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceDeploymentScriptPowerShellIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 identity_ids: Sequence[str],
                 type: str):
        """
        :param Sequence[str] identity_ids: Specifies the list of user-assigned managed identity IDs associated with the resource. Changing this forces a new resource to be created.
        :param str type: Type of the managed identity. The only possible value is `UserAssigned`. Changing this forces a new resource to be created.
        """
        pulumi.set(__self__, "identity_ids", identity_ids)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Sequence[str]:
        """
        Specifies the list of user-assigned managed identity IDs associated with the resource. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "identity_ids")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the managed identity. The only possible value is `UserAssigned`. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ResourceDeploymentScriptPowerShellStorageAccount(dict):
    def __init__(__self__, *,
                 key: str,
                 name: str):
        """
        :param str key: Specifies the storage account access key.
        :param str name: Specifies the storage account name.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Specifies the storage account access key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the storage account name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ResourceGroupCostManagementExportExportDataOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeFrame":
            suggest = "time_frame"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceGroupCostManagementExportExportDataOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceGroupCostManagementExportExportDataOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceGroupCostManagementExportExportDataOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 time_frame: str,
                 type: str):
        """
        :param str time_frame: The time frame for pulling data for the query. If custom, then a specific time period must be provided. Possible values include: `WeekToDate`, `MonthToDate`, `BillingMonthToDate`, `TheLast7Days`, `TheLastMonth`, `TheLastBillingMonth`, `Custom`.
        :param str type: The type of the query. Possible values are `ActualCost`, `AmortizedCost` and `Usage`.
        """
        pulumi.set(__self__, "time_frame", time_frame)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="timeFrame")
    def time_frame(self) -> str:
        """
        The time frame for pulling data for the query. If custom, then a specific time period must be provided. Possible values include: `WeekToDate`, `MonthToDate`, `BillingMonthToDate`, `TheLast7Days`, `TheLastMonth`, `TheLastBillingMonth`, `Custom`.
        """
        return pulumi.get(self, "time_frame")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the query. Possible values are `ActualCost`, `AmortizedCost` and `Usage`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ResourceGroupCostManagementExportExportDataStorageLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerId":
            suggest = "container_id"
        elif key == "rootFolderPath":
            suggest = "root_folder_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceGroupCostManagementExportExportDataStorageLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceGroupCostManagementExportExportDataStorageLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceGroupCostManagementExportExportDataStorageLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_id: str,
                 root_folder_path: str):
        """
        :param str container_id: The Resource Manager ID of the container where exports will be uploaded. Changing this forces a new resource to be created.
        :param str root_folder_path: The path of the directory where exports will be uploaded. Changing this forces a new resource to be created.
               
               > **Note:** The Resource Manager ID of a Storage Container is exposed via the `resource_manager_id` attribute of the `storage.Container` resource.
        """
        pulumi.set(__self__, "container_id", container_id)
        pulumi.set(__self__, "root_folder_path", root_folder_path)

    @property
    @pulumi.getter(name="containerId")
    def container_id(self) -> str:
        """
        The Resource Manager ID of the container where exports will be uploaded. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "container_id")

    @property
    @pulumi.getter(name="rootFolderPath")
    def root_folder_path(self) -> str:
        """
        The path of the directory where exports will be uploaded. Changing this forces a new resource to be created.

        > **Note:** The Resource Manager ID of a Storage Container is exposed via the `resource_manager_id` attribute of the `storage.Container` resource.
        """
        return pulumi.get(self, "root_folder_path")


@pulumi.output_type
class ResourceGroupCostManagementViewDataset(dict):
    def __init__(__self__, *,
                 aggregations: Sequence['outputs.ResourceGroupCostManagementViewDatasetAggregation'],
                 granularity: str,
                 groupings: Optional[Sequence['outputs.ResourceGroupCostManagementViewDatasetGrouping']] = None,
                 sortings: Optional[Sequence['outputs.ResourceGroupCostManagementViewDatasetSorting']] = None):
        """
        :param Sequence['ResourceGroupCostManagementViewDatasetAggregationArgs'] aggregations: One or more `aggregation` blocks as defined above.
        :param str granularity: The granularity of rows in the report. Possible values are `Daily` and `Monthly`.
        :param Sequence['ResourceGroupCostManagementViewDatasetGroupingArgs'] groupings: One or more `grouping` blocks as defined below.
        :param Sequence['ResourceGroupCostManagementViewDatasetSortingArgs'] sortings: One or more `sorting` blocks as defined below, containing the order by expression to be used in the report
        """
        pulumi.set(__self__, "aggregations", aggregations)
        pulumi.set(__self__, "granularity", granularity)
        if groupings is not None:
            pulumi.set(__self__, "groupings", groupings)
        if sortings is not None:
            pulumi.set(__self__, "sortings", sortings)

    @property
    @pulumi.getter
    def aggregations(self) -> Sequence['outputs.ResourceGroupCostManagementViewDatasetAggregation']:
        """
        One or more `aggregation` blocks as defined above.
        """
        return pulumi.get(self, "aggregations")

    @property
    @pulumi.getter
    def granularity(self) -> str:
        """
        The granularity of rows in the report. Possible values are `Daily` and `Monthly`.
        """
        return pulumi.get(self, "granularity")

    @property
    @pulumi.getter
    def groupings(self) -> Optional[Sequence['outputs.ResourceGroupCostManagementViewDatasetGrouping']]:
        """
        One or more `grouping` blocks as defined below.
        """
        return pulumi.get(self, "groupings")

    @property
    @pulumi.getter
    def sortings(self) -> Optional[Sequence['outputs.ResourceGroupCostManagementViewDatasetSorting']]:
        """
        One or more `sorting` blocks as defined below, containing the order by expression to be used in the report
        """
        return pulumi.get(self, "sortings")


@pulumi.output_type
class ResourceGroupCostManagementViewDatasetAggregation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnName":
            suggest = "column_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceGroupCostManagementViewDatasetAggregation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceGroupCostManagementViewDatasetAggregation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceGroupCostManagementViewDatasetAggregation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_name: str,
                 name: str):
        """
        :param str column_name: The name of the column to aggregate. Changing this forces a new Cost Management View for a Resource Group to be created.
        :param str name: The name which should be used for this aggregation. Changing this forces a new Cost Management View for a Resource Group to be created.
        """
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        """
        The name of the column to aggregate. Changing this forces a new Cost Management View for a Resource Group to be created.
        """
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name which should be used for this aggregation. Changing this forces a new Cost Management View for a Resource Group to be created.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ResourceGroupCostManagementViewDatasetGrouping(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str):
        """
        :param str name: The name of the column to group.
        :param str type: The type of the column. Possible values are `Dimension` and `TagKey`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the column to group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the column. Possible values are `Dimension` and `TagKey`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ResourceGroupCostManagementViewDatasetSorting(dict):
    def __init__(__self__, *,
                 direction: str,
                 name: str):
        """
        :param str direction: Direction of sort. Possible values are `Ascending` and `Descending`.
        :param str name: The name of the column to sort.
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def direction(self) -> str:
        """
        Direction of sort. Possible values are `Ascending` and `Descending`.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the column to sort.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ResourceGroupCostManagementViewKpi(dict):
    def __init__(__self__, *,
                 type: str):
        """
        :param str type: KPI type. Possible values are `Budget` and `Forecast`.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        KPI type. Possible values are `Budget` and `Forecast`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ResourceGroupCostManagementViewPivot(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str):
        """
        :param str name: The name of the column which should be used for this sub-view in the Cost Analysis UI.
        :param str type: The data type to show in this sub-view. Possible values are `Dimension` and `TagKey`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the column which should be used for this sub-view in the Cost Analysis UI.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The data type to show in this sub-view. Possible values are `Dimension` and `TagKey`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ResourceGroupPolicyAssignmentIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "identityIds":
            suggest = "identity_ids"
        elif key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceGroupPolicyAssignmentIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceGroupPolicyAssignmentIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceGroupPolicyAssignmentIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 identity_ids: Optional[Sequence[str]] = None,
                 principal_id: Optional[str] = None,
                 tenant_id: Optional[str] = None):
        """
        :param str type: The Type of Managed Identity which should be added to this Policy Definition. Possible values are `SystemAssigned` and `UserAssigned`.
        :param Sequence[str] identity_ids: A list of User Managed Identity IDs which should be assigned to the Policy Definition.
               
               > **NOTE:** This is required when `type` is set to `UserAssigned`.
        :param str principal_id: The Principal ID of the Policy Assignment for this Resource Group.
        :param str tenant_id: The Tenant ID of the Policy Assignment for this Resource Group.
        """
        pulumi.set(__self__, "type", type)
        if identity_ids is not None:
            pulumi.set(__self__, "identity_ids", identity_ids)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The Type of Managed Identity which should be added to this Policy Definition. Possible values are `SystemAssigned` and `UserAssigned`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Optional[Sequence[str]]:
        """
        A list of User Managed Identity IDs which should be assigned to the Policy Definition.

        > **NOTE:** This is required when `type` is set to `UserAssigned`.
        """
        return pulumi.get(self, "identity_ids")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[str]:
        """
        The Principal ID of the Policy Assignment for this Resource Group.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        """
        The Tenant ID of the Policy Assignment for this Resource Group.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class ResourceGroupPolicyAssignmentNonComplianceMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyDefinitionReferenceId":
            suggest = "policy_definition_reference_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceGroupPolicyAssignmentNonComplianceMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceGroupPolicyAssignmentNonComplianceMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceGroupPolicyAssignmentNonComplianceMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: str,
                 policy_definition_reference_id: Optional[str] = None):
        """
        :param str content: The non-compliance message text. When assigning policy sets (initiatives), unless `policy_definition_reference_id` is specified then this message will be the default for all policies.
        :param str policy_definition_reference_id: When assigning policy sets (initiatives), this is the ID of the policy definition that the non-compliance message applies to.
        """
        pulumi.set(__self__, "content", content)
        if policy_definition_reference_id is not None:
            pulumi.set(__self__, "policy_definition_reference_id", policy_definition_reference_id)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The non-compliance message text. When assigning policy sets (initiatives), unless `policy_definition_reference_id` is specified then this message will be the default for all policies.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="policyDefinitionReferenceId")
    def policy_definition_reference_id(self) -> Optional[str]:
        """
        When assigning policy sets (initiatives), this is the ID of the policy definition that the non-compliance message applies to.
        """
        return pulumi.get(self, "policy_definition_reference_id")


@pulumi.output_type
class ResourceGroupPolicyAssignmentOverride(dict):
    def __init__(__self__, *,
                 value: str,
                 selectors: Optional[Sequence['outputs.ResourceGroupPolicyAssignmentOverrideSelector']] = None):
        """
        :param str value: Specifies the value to override the policy property. Possible values for `policyEffect` override listed [policy effects](https://learn.microsoft.com/en-us/azure/governance/policy/concepts/effects).
        :param Sequence['ResourceGroupPolicyAssignmentOverrideSelectorArgs'] selectors: One or more `override_selector` as defined below.
        """
        pulumi.set(__self__, "value", value)
        if selectors is not None:
            pulumi.set(__self__, "selectors", selectors)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Specifies the value to override the policy property. Possible values for `policyEffect` override listed [policy effects](https://learn.microsoft.com/en-us/azure/governance/policy/concepts/effects).
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def selectors(self) -> Optional[Sequence['outputs.ResourceGroupPolicyAssignmentOverrideSelector']]:
        """
        One or more `override_selector` as defined below.
        """
        return pulumi.get(self, "selectors")


@pulumi.output_type
class ResourceGroupPolicyAssignmentOverrideSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notIns":
            suggest = "not_ins"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceGroupPolicyAssignmentOverrideSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceGroupPolicyAssignmentOverrideSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceGroupPolicyAssignmentOverrideSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ins: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 not_ins: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] ins: Specify the list of policy reference id values to filter in. Cannot be used with `not_in`.
        :param str kind: Specifies which characteristic will narrow down the set of evaluated resources. Possible values are `resourceLocation`,  `resourceType` and `resourceWithoutLocation`.
        :param Sequence[str] not_ins: Specify the list of policy reference id values to filter out. Cannot be used with `in`.
        """
        if ins is not None:
            pulumi.set(__self__, "ins", ins)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if not_ins is not None:
            pulumi.set(__self__, "not_ins", not_ins)

    @property
    @pulumi.getter
    def ins(self) -> Optional[Sequence[str]]:
        """
        Specify the list of policy reference id values to filter in. Cannot be used with `not_in`.
        """
        return pulumi.get(self, "ins")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Specifies which characteristic will narrow down the set of evaluated resources. Possible values are `resourceLocation`,  `resourceType` and `resourceWithoutLocation`.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="notIns")
    def not_ins(self) -> Optional[Sequence[str]]:
        """
        Specify the list of policy reference id values to filter out. Cannot be used with `in`.
        """
        return pulumi.get(self, "not_ins")


@pulumi.output_type
class ResourceGroupPolicyAssignmentResourceSelector(dict):
    def __init__(__self__, *,
                 selectors: Sequence['outputs.ResourceGroupPolicyAssignmentResourceSelectorSelector'],
                 name: Optional[str] = None):
        """
        :param Sequence['ResourceGroupPolicyAssignmentResourceSelectorSelectorArgs'] selectors: One or more `resource_selector` block as defined below.
        :param str name: Specifies a name for the resource selector.
        """
        pulumi.set(__self__, "selectors", selectors)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def selectors(self) -> Sequence['outputs.ResourceGroupPolicyAssignmentResourceSelectorSelector']:
        """
        One or more `resource_selector` block as defined below.
        """
        return pulumi.get(self, "selectors")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Specifies a name for the resource selector.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ResourceGroupPolicyAssignmentResourceSelectorSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notIns":
            suggest = "not_ins"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceGroupPolicyAssignmentResourceSelectorSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceGroupPolicyAssignmentResourceSelectorSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceGroupPolicyAssignmentResourceSelectorSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: str,
                 ins: Optional[Sequence[str]] = None,
                 not_ins: Optional[Sequence[str]] = None):
        """
        :param str kind: Specifies which characteristic will narrow down the set of evaluated resources. Possible values are `resourceLocation`,  `resourceType` and `resourceWithoutLocation`.
        :param Sequence[str] ins: Specify the list of policy reference id values to filter in. Cannot be used with `not_in`.
        :param Sequence[str] not_ins: Specify the list of policy reference id values to filter out. Cannot be used with `in`.
        """
        pulumi.set(__self__, "kind", kind)
        if ins is not None:
            pulumi.set(__self__, "ins", ins)
        if not_ins is not None:
            pulumi.set(__self__, "not_ins", not_ins)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Specifies which characteristic will narrow down the set of evaluated resources. Possible values are `resourceLocation`,  `resourceType` and `resourceWithoutLocation`.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def ins(self) -> Optional[Sequence[str]]:
        """
        Specify the list of policy reference id values to filter in. Cannot be used with `not_in`.
        """
        return pulumi.get(self, "ins")

    @property
    @pulumi.getter(name="notIns")
    def not_ins(self) -> Optional[Sequence[str]]:
        """
        Specify the list of policy reference id values to filter out. Cannot be used with `in`.
        """
        return pulumi.get(self, "not_ins")


@pulumi.output_type
class ResourcePolicyAssignmentIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "identityIds":
            suggest = "identity_ids"
        elif key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourcePolicyAssignmentIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourcePolicyAssignmentIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourcePolicyAssignmentIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 identity_ids: Optional[Sequence[str]] = None,
                 principal_id: Optional[str] = None,
                 tenant_id: Optional[str] = None):
        """
        :param str type: The Type of Managed Identity which should be added to this Policy Definition. Possible values are `SystemAssigned` and `UserAssigned`.
        :param Sequence[str] identity_ids: A list of User Managed Identity IDs which should be assigned to the Policy Definition.
               
               > **NOTE:** This is required when `type` is set to `UserAssigned`.
        :param str principal_id: The Principal ID of the Policy Assignment for this Resource.
        :param str tenant_id: The Tenant ID of the Policy Assignment for this Resource.
        """
        pulumi.set(__self__, "type", type)
        if identity_ids is not None:
            pulumi.set(__self__, "identity_ids", identity_ids)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The Type of Managed Identity which should be added to this Policy Definition. Possible values are `SystemAssigned` and `UserAssigned`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Optional[Sequence[str]]:
        """
        A list of User Managed Identity IDs which should be assigned to the Policy Definition.

        > **NOTE:** This is required when `type` is set to `UserAssigned`.
        """
        return pulumi.get(self, "identity_ids")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[str]:
        """
        The Principal ID of the Policy Assignment for this Resource.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        """
        The Tenant ID of the Policy Assignment for this Resource.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class ResourcePolicyAssignmentNonComplianceMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyDefinitionReferenceId":
            suggest = "policy_definition_reference_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourcePolicyAssignmentNonComplianceMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourcePolicyAssignmentNonComplianceMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourcePolicyAssignmentNonComplianceMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: str,
                 policy_definition_reference_id: Optional[str] = None):
        """
        :param str content: The non-compliance message text. When assigning policy sets (initiatives), unless `policy_definition_reference_id` is specified then this message will be the default for all policies.
        :param str policy_definition_reference_id: When assigning policy sets (initiatives), this is the ID of the policy definition that the non-compliance message applies to.
        """
        pulumi.set(__self__, "content", content)
        if policy_definition_reference_id is not None:
            pulumi.set(__self__, "policy_definition_reference_id", policy_definition_reference_id)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The non-compliance message text. When assigning policy sets (initiatives), unless `policy_definition_reference_id` is specified then this message will be the default for all policies.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="policyDefinitionReferenceId")
    def policy_definition_reference_id(self) -> Optional[str]:
        """
        When assigning policy sets (initiatives), this is the ID of the policy definition that the non-compliance message applies to.
        """
        return pulumi.get(self, "policy_definition_reference_id")


@pulumi.output_type
class ResourcePolicyAssignmentOverride(dict):
    def __init__(__self__, *,
                 value: str,
                 selectors: Optional[Sequence['outputs.ResourcePolicyAssignmentOverrideSelector']] = None):
        """
        :param str value: Specifies the value to override the policy property. Possible values for `policyEffect` override listed [policy effects](https://learn.microsoft.com/en-us/azure/governance/policy/concepts/effects).
        :param Sequence['ResourcePolicyAssignmentOverrideSelectorArgs'] selectors: One or more `override_selector` as defined below.
        """
        pulumi.set(__self__, "value", value)
        if selectors is not None:
            pulumi.set(__self__, "selectors", selectors)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Specifies the value to override the policy property. Possible values for `policyEffect` override listed [policy effects](https://learn.microsoft.com/en-us/azure/governance/policy/concepts/effects).
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def selectors(self) -> Optional[Sequence['outputs.ResourcePolicyAssignmentOverrideSelector']]:
        """
        One or more `override_selector` as defined below.
        """
        return pulumi.get(self, "selectors")


@pulumi.output_type
class ResourcePolicyAssignmentOverrideSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notIns":
            suggest = "not_ins"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourcePolicyAssignmentOverrideSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourcePolicyAssignmentOverrideSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourcePolicyAssignmentOverrideSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ins: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 not_ins: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] ins: Specify the list of policy reference id values to filter in. Cannot be used with `not_in`.
        :param str kind: Specifies which characteristic will narrow down the set of evaluated resources. Possible values are `resourceLocation`,  `resourceType` and `resourceWithoutLocation`.
        :param Sequence[str] not_ins: Specify the list of policy reference id values to filter out. Cannot be used with `in`.
        """
        if ins is not None:
            pulumi.set(__self__, "ins", ins)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if not_ins is not None:
            pulumi.set(__self__, "not_ins", not_ins)

    @property
    @pulumi.getter
    def ins(self) -> Optional[Sequence[str]]:
        """
        Specify the list of policy reference id values to filter in. Cannot be used with `not_in`.
        """
        return pulumi.get(self, "ins")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Specifies which characteristic will narrow down the set of evaluated resources. Possible values are `resourceLocation`,  `resourceType` and `resourceWithoutLocation`.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="notIns")
    def not_ins(self) -> Optional[Sequence[str]]:
        """
        Specify the list of policy reference id values to filter out. Cannot be used with `in`.
        """
        return pulumi.get(self, "not_ins")


@pulumi.output_type
class ResourcePolicyAssignmentResourceSelector(dict):
    def __init__(__self__, *,
                 selectors: Sequence['outputs.ResourcePolicyAssignmentResourceSelectorSelector'],
                 name: Optional[str] = None):
        """
        :param Sequence['ResourcePolicyAssignmentResourceSelectorSelectorArgs'] selectors: One or more `resource_selector` block as defined below.
        :param str name: Specifies a name for the resource selector.
        """
        pulumi.set(__self__, "selectors", selectors)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def selectors(self) -> Sequence['outputs.ResourcePolicyAssignmentResourceSelectorSelector']:
        """
        One or more `resource_selector` block as defined below.
        """
        return pulumi.get(self, "selectors")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Specifies a name for the resource selector.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ResourcePolicyAssignmentResourceSelectorSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notIns":
            suggest = "not_ins"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourcePolicyAssignmentResourceSelectorSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourcePolicyAssignmentResourceSelectorSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourcePolicyAssignmentResourceSelectorSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: str,
                 ins: Optional[Sequence[str]] = None,
                 not_ins: Optional[Sequence[str]] = None):
        """
        :param str kind: Specifies which characteristic will narrow down the set of evaluated resources. Possible values are `resourceLocation`,  `resourceType` and `resourceWithoutLocation`.
        :param Sequence[str] ins: Specify the list of policy reference id values to filter in. Cannot be used with `not_in`.
        :param Sequence[str] not_ins: Specify the list of policy reference id values to filter out. Cannot be used with `in`.
        """
        pulumi.set(__self__, "kind", kind)
        if ins is not None:
            pulumi.set(__self__, "ins", ins)
        if not_ins is not None:
            pulumi.set(__self__, "not_ins", not_ins)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Specifies which characteristic will narrow down the set of evaluated resources. Possible values are `resourceLocation`,  `resourceType` and `resourceWithoutLocation`.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def ins(self) -> Optional[Sequence[str]]:
        """
        Specify the list of policy reference id values to filter in. Cannot be used with `not_in`.
        """
        return pulumi.get(self, "ins")

    @property
    @pulumi.getter(name="notIns")
    def not_ins(self) -> Optional[Sequence[str]]:
        """
        Specify the list of policy reference id values to filter out. Cannot be used with `in`.
        """
        return pulumi.get(self, "not_ins")


@pulumi.output_type
class ResourceProviderRegistrationFeature(dict):
    def __init__(__self__, *,
                 name: str,
                 registered: bool):
        """
        :param bool registered: Should this feature be Registered or Unregistered?
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "registered", registered)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def registered(self) -> bool:
        """
        Should this feature be Registered or Unregistered?
        """
        return pulumi.get(self, "registered")


@pulumi.output_type
class SubscriptionCostManagementExportExportDataOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeFrame":
            suggest = "time_frame"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubscriptionCostManagementExportExportDataOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubscriptionCostManagementExportExportDataOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubscriptionCostManagementExportExportDataOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 time_frame: str,
                 type: str):
        """
        :param str time_frame: The time frame for pulling data for the query. If custom, then a specific time period must be provided. Possible values include: `WeekToDate`, `MonthToDate`, `BillingMonthToDate`, `TheLast7Days`, `TheLastMonth`, `TheLastBillingMonth`, `Custom`.
        :param str type: The type of the query. Possible values are `ActualCost`, `AmortizedCost` and `Usage`.
        """
        pulumi.set(__self__, "time_frame", time_frame)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="timeFrame")
    def time_frame(self) -> str:
        """
        The time frame for pulling data for the query. If custom, then a specific time period must be provided. Possible values include: `WeekToDate`, `MonthToDate`, `BillingMonthToDate`, `TheLast7Days`, `TheLastMonth`, `TheLastBillingMonth`, `Custom`.
        """
        return pulumi.get(self, "time_frame")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the query. Possible values are `ActualCost`, `AmortizedCost` and `Usage`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class SubscriptionCostManagementExportExportDataStorageLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerId":
            suggest = "container_id"
        elif key == "rootFolderPath":
            suggest = "root_folder_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubscriptionCostManagementExportExportDataStorageLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubscriptionCostManagementExportExportDataStorageLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubscriptionCostManagementExportExportDataStorageLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_id: str,
                 root_folder_path: str):
        """
        :param str container_id: The Resource Manager ID of the container where exports will be uploaded. Changing this forces a new resource to be created.
        :param str root_folder_path: The path of the directory where exports will be uploaded. Changing this forces a new resource to be created.
               
               > **Note:** The Resource Manager ID of a Storage Container is exposed via the `resource_manager_id` attribute of the `storage.Container` resource.
        """
        pulumi.set(__self__, "container_id", container_id)
        pulumi.set(__self__, "root_folder_path", root_folder_path)

    @property
    @pulumi.getter(name="containerId")
    def container_id(self) -> str:
        """
        The Resource Manager ID of the container where exports will be uploaded. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "container_id")

    @property
    @pulumi.getter(name="rootFolderPath")
    def root_folder_path(self) -> str:
        """
        The path of the directory where exports will be uploaded. Changing this forces a new resource to be created.

        > **Note:** The Resource Manager ID of a Storage Container is exposed via the `resource_manager_id` attribute of the `storage.Container` resource.
        """
        return pulumi.get(self, "root_folder_path")


@pulumi.output_type
class SubscriptionCostManagementViewDataset(dict):
    def __init__(__self__, *,
                 aggregations: Sequence['outputs.SubscriptionCostManagementViewDatasetAggregation'],
                 granularity: str,
                 groupings: Optional[Sequence['outputs.SubscriptionCostManagementViewDatasetGrouping']] = None,
                 sortings: Optional[Sequence['outputs.SubscriptionCostManagementViewDatasetSorting']] = None):
        """
        :param Sequence['SubscriptionCostManagementViewDatasetAggregationArgs'] aggregations: One or more `aggregation` blocks as defined above.
        :param str granularity: The granularity of rows in the report. Possible values are `Daily` and `Monthly`.
        :param Sequence['SubscriptionCostManagementViewDatasetGroupingArgs'] groupings: One or more `grouping` blocks as defined below.
        :param Sequence['SubscriptionCostManagementViewDatasetSortingArgs'] sortings: One or more `sorting` blocks as defined below, containing the order by expression to be used in the report
        """
        pulumi.set(__self__, "aggregations", aggregations)
        pulumi.set(__self__, "granularity", granularity)
        if groupings is not None:
            pulumi.set(__self__, "groupings", groupings)
        if sortings is not None:
            pulumi.set(__self__, "sortings", sortings)

    @property
    @pulumi.getter
    def aggregations(self) -> Sequence['outputs.SubscriptionCostManagementViewDatasetAggregation']:
        """
        One or more `aggregation` blocks as defined above.
        """
        return pulumi.get(self, "aggregations")

    @property
    @pulumi.getter
    def granularity(self) -> str:
        """
        The granularity of rows in the report. Possible values are `Daily` and `Monthly`.
        """
        return pulumi.get(self, "granularity")

    @property
    @pulumi.getter
    def groupings(self) -> Optional[Sequence['outputs.SubscriptionCostManagementViewDatasetGrouping']]:
        """
        One or more `grouping` blocks as defined below.
        """
        return pulumi.get(self, "groupings")

    @property
    @pulumi.getter
    def sortings(self) -> Optional[Sequence['outputs.SubscriptionCostManagementViewDatasetSorting']]:
        """
        One or more `sorting` blocks as defined below, containing the order by expression to be used in the report
        """
        return pulumi.get(self, "sortings")


@pulumi.output_type
class SubscriptionCostManagementViewDatasetAggregation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnName":
            suggest = "column_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubscriptionCostManagementViewDatasetAggregation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubscriptionCostManagementViewDatasetAggregation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubscriptionCostManagementViewDatasetAggregation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_name: str,
                 name: str):
        """
        :param str column_name: The name of the column to aggregate. Changing this forces a new Cost Management View for a Subscription to be created.
        :param str name: The name which should be used for this aggregation. Changing this forces a new Cost Management View for a Subscription to be created.
        """
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        """
        The name of the column to aggregate. Changing this forces a new Cost Management View for a Subscription to be created.
        """
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name which should be used for this aggregation. Changing this forces a new Cost Management View for a Subscription to be created.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SubscriptionCostManagementViewDatasetGrouping(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str):
        """
        :param str name: The name of the column to group.
        :param str type: The type of the column. Possible values are `Dimension` and `TagKey`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the column to group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the column. Possible values are `Dimension` and `TagKey`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class SubscriptionCostManagementViewDatasetSorting(dict):
    def __init__(__self__, *,
                 direction: str,
                 name: str):
        """
        :param str direction: Direction of sort. Possible values are `Ascending` and `Descending`.
        :param str name: The name of the column to sort.
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def direction(self) -> str:
        """
        Direction of sort. Possible values are `Ascending` and `Descending`.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the column to sort.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SubscriptionCostManagementViewKpi(dict):
    def __init__(__self__, *,
                 type: str):
        """
        :param str type: KPI type. Possible values are `Budget` and `Forecast`.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        KPI type. Possible values are `Budget` and `Forecast`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class SubscriptionCostManagementViewPivot(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str):
        """
        :param str name: The name of the column which should be used for this sub-view in the Cost Analysis UI.
        :param str type: The data type to show in this sub-view. Possible values are `Dimension` and `TagKey`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the column which should be used for this sub-view in the Cost Analysis UI.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The data type to show in this sub-view. Possible values are `Dimension` and `TagKey`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class SubscriptionPolicyAssignmentIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "identityIds":
            suggest = "identity_ids"
        elif key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubscriptionPolicyAssignmentIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubscriptionPolicyAssignmentIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubscriptionPolicyAssignmentIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 identity_ids: Optional[Sequence[str]] = None,
                 principal_id: Optional[str] = None,
                 tenant_id: Optional[str] = None):
        """
        :param str type: The Type of Managed Identity which should be added to this Policy Definition. Possible values are `SystemAssigned` or `UserAssigned`.
        :param Sequence[str] identity_ids: A list of User Managed Identity IDs which should be assigned to the Policy Definition.
               
               > **NOTE:** This is required when `type` is set to `UserAssigned`.
        :param str principal_id: The Principal ID of the Policy Assignment for this Subscription.
        :param str tenant_id: The Tenant ID of the Policy Assignment for this Subscription.
        """
        pulumi.set(__self__, "type", type)
        if identity_ids is not None:
            pulumi.set(__self__, "identity_ids", identity_ids)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The Type of Managed Identity which should be added to this Policy Definition. Possible values are `SystemAssigned` or `UserAssigned`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Optional[Sequence[str]]:
        """
        A list of User Managed Identity IDs which should be assigned to the Policy Definition.

        > **NOTE:** This is required when `type` is set to `UserAssigned`.
        """
        return pulumi.get(self, "identity_ids")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[str]:
        """
        The Principal ID of the Policy Assignment for this Subscription.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        """
        The Tenant ID of the Policy Assignment for this Subscription.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class SubscriptionPolicyAssignmentNonComplianceMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyDefinitionReferenceId":
            suggest = "policy_definition_reference_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubscriptionPolicyAssignmentNonComplianceMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubscriptionPolicyAssignmentNonComplianceMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubscriptionPolicyAssignmentNonComplianceMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: str,
                 policy_definition_reference_id: Optional[str] = None):
        """
        :param str content: The non-compliance message text. When assigning policy sets (initiatives), unless `policy_definition_reference_id` is specified then this message will be the default for all policies.
        :param str policy_definition_reference_id: When assigning policy sets (initiatives), this is the ID of the policy definition that the non-compliance message applies to.
        """
        pulumi.set(__self__, "content", content)
        if policy_definition_reference_id is not None:
            pulumi.set(__self__, "policy_definition_reference_id", policy_definition_reference_id)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The non-compliance message text. When assigning policy sets (initiatives), unless `policy_definition_reference_id` is specified then this message will be the default for all policies.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="policyDefinitionReferenceId")
    def policy_definition_reference_id(self) -> Optional[str]:
        """
        When assigning policy sets (initiatives), this is the ID of the policy definition that the non-compliance message applies to.
        """
        return pulumi.get(self, "policy_definition_reference_id")


@pulumi.output_type
class SubscriptionPolicyAssignmentOverride(dict):
    def __init__(__self__, *,
                 value: str,
                 selectors: Optional[Sequence['outputs.SubscriptionPolicyAssignmentOverrideSelector']] = None):
        """
        :param str value: Specifies the value to override the policy property. Possible values for `policyEffect` override listed [policy effects](https://learn.microsoft.com/en-us/azure/governance/policy/concepts/effects).
        :param Sequence['SubscriptionPolicyAssignmentOverrideSelectorArgs'] selectors: One or more `override_selector` as defined below.
        """
        pulumi.set(__self__, "value", value)
        if selectors is not None:
            pulumi.set(__self__, "selectors", selectors)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Specifies the value to override the policy property. Possible values for `policyEffect` override listed [policy effects](https://learn.microsoft.com/en-us/azure/governance/policy/concepts/effects).
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def selectors(self) -> Optional[Sequence['outputs.SubscriptionPolicyAssignmentOverrideSelector']]:
        """
        One or more `override_selector` as defined below.
        """
        return pulumi.get(self, "selectors")


@pulumi.output_type
class SubscriptionPolicyAssignmentOverrideSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notIns":
            suggest = "not_ins"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubscriptionPolicyAssignmentOverrideSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubscriptionPolicyAssignmentOverrideSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubscriptionPolicyAssignmentOverrideSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ins: Optional[Sequence[str]] = None,
                 kind: Optional[str] = None,
                 not_ins: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] ins: Specify the list of policy reference id values to filter in. Cannot be used with `not_in`.
        :param str kind: Specifies which characteristic will narrow down the set of evaluated resources. Possible values are `resourceLocation`,  `resourceType` and `resourceWithoutLocation`.
        :param Sequence[str] not_ins: Specify the list of policy reference id values to filter out. Cannot be used with `in`.
        """
        if ins is not None:
            pulumi.set(__self__, "ins", ins)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if not_ins is not None:
            pulumi.set(__self__, "not_ins", not_ins)

    @property
    @pulumi.getter
    def ins(self) -> Optional[Sequence[str]]:
        """
        Specify the list of policy reference id values to filter in. Cannot be used with `not_in`.
        """
        return pulumi.get(self, "ins")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Specifies which characteristic will narrow down the set of evaluated resources. Possible values are `resourceLocation`,  `resourceType` and `resourceWithoutLocation`.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="notIns")
    def not_ins(self) -> Optional[Sequence[str]]:
        """
        Specify the list of policy reference id values to filter out. Cannot be used with `in`.
        """
        return pulumi.get(self, "not_ins")


@pulumi.output_type
class SubscriptionPolicyAssignmentResourceSelector(dict):
    def __init__(__self__, *,
                 selectors: Sequence['outputs.SubscriptionPolicyAssignmentResourceSelectorSelector'],
                 name: Optional[str] = None):
        """
        :param Sequence['SubscriptionPolicyAssignmentResourceSelectorSelectorArgs'] selectors: One or more `resource_selector` block as defined below.
        :param str name: Specifies a name for the resource selector.
        """
        pulumi.set(__self__, "selectors", selectors)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def selectors(self) -> Sequence['outputs.SubscriptionPolicyAssignmentResourceSelectorSelector']:
        """
        One or more `resource_selector` block as defined below.
        """
        return pulumi.get(self, "selectors")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Specifies a name for the resource selector.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SubscriptionPolicyAssignmentResourceSelectorSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notIns":
            suggest = "not_ins"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubscriptionPolicyAssignmentResourceSelectorSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubscriptionPolicyAssignmentResourceSelectorSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubscriptionPolicyAssignmentResourceSelectorSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: str,
                 ins: Optional[Sequence[str]] = None,
                 not_ins: Optional[Sequence[str]] = None):
        """
        :param str kind: Specifies which characteristic will narrow down the set of evaluated resources. Possible values are `resourceLocation`,  `resourceType` and `resourceWithoutLocation`.
        :param Sequence[str] ins: Specify the list of policy reference id values to filter in. Cannot be used with `not_in`.
        :param Sequence[str] not_ins: Specify the list of policy reference id values to filter out. Cannot be used with `in`.
        """
        pulumi.set(__self__, "kind", kind)
        if ins is not None:
            pulumi.set(__self__, "ins", ins)
        if not_ins is not None:
            pulumi.set(__self__, "not_ins", not_ins)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Specifies which characteristic will narrow down the set of evaluated resources. Possible values are `resourceLocation`,  `resourceType` and `resourceWithoutLocation`.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def ins(self) -> Optional[Sequence[str]]:
        """
        Specify the list of policy reference id values to filter in. Cannot be used with `not_in`.
        """
        return pulumi.get(self, "ins")

    @property
    @pulumi.getter(name="notIns")
    def not_ins(self) -> Optional[Sequence[str]]:
        """
        Specify the list of policy reference id values to filter out. Cannot be used with `in`.
        """
        return pulumi.get(self, "not_ins")


@pulumi.output_type
class GetResourcesResourceResult(dict):
    def __init__(__self__, *,
                 id: str,
                 location: str,
                 name: str,
                 resource_group_name: str,
                 tags: Mapping[str, str],
                 type: str):
        """
        :param str id: The ID of this Resource.
        :param str location: The Azure Region in which this Resource exists.
        :param str name: The name of the Resource.
        :param str resource_group_name: The name of the Resource group where the Resources are located.
        :param Mapping[str, str] tags: A map of tags assigned to this Resource.
        :param str type: The Resource Type of the Resources you want to list (e.g. `Microsoft.Network/virtualNetworks`). A full list of available Resource Types can be found [here](https://docs.microsoft.com/azure/azure-resource-manager/azure-services-resource-providers).
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this Resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The Azure Region in which this Resource exists.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> str:
        """
        The name of the Resource group where the Resources are located.
        """
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, str]:
        """
        A map of tags assigned to this Resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The Resource Type of the Resources you want to list (e.g. `Microsoft.Network/virtualNetworks`). A full list of available Resource Types can be found [here](https://docs.microsoft.com/azure/azure-resource-manager/azure-services-resource-providers).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSubscriptionsSubscriptionResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str,
                 location_placement_id: str,
                 quota_id: str,
                 spending_limit: str,
                 state: str,
                 subscription_id: str,
                 tags: Mapping[str, str],
                 tenant_id: str):
        """
        :param str display_name: The subscription display name.
        :param str id: The ID of this subscription.
        :param str location_placement_id: The subscription location placement ID.
        :param str quota_id: The subscription quota ID.
        :param str spending_limit: The subscription spending limit.
        :param str state: The subscription state. Possible values are Enabled, Warned, PastDue, Disabled, and Deleted.
        :param str subscription_id: The subscription GUID.
        :param Mapping[str, str] tags: A mapping of tags assigned to the resource.
        :param str tenant_id: The subscription tenant ID.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location_placement_id", location_placement_id)
        pulumi.set(__self__, "quota_id", quota_id)
        pulumi.set(__self__, "spending_limit", spending_limit)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subscription_id", subscription_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The subscription display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this subscription.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="locationPlacementId")
    def location_placement_id(self) -> str:
        """
        The subscription location placement ID.
        """
        return pulumi.get(self, "location_placement_id")

    @property
    @pulumi.getter(name="quotaId")
    def quota_id(self) -> str:
        """
        The subscription quota ID.
        """
        return pulumi.get(self, "quota_id")

    @property
    @pulumi.getter(name="spendingLimit")
    def spending_limit(self) -> str:
        """
        The subscription spending limit.
        """
        return pulumi.get(self, "spending_limit")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The subscription state. Possible values are Enabled, Warned, PastDue, Disabled, and Deleted.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> str:
        """
        The subscription GUID.
        """
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, str]:
        """
        A mapping of tags assigned to the resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The subscription tenant ID.
        """
        return pulumi.get(self, "tenant_id")


