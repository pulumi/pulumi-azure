# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetExtendedLocationsResult',
    'AwaitableGetExtendedLocationsResult',
    'get_extended_locations',
    'get_extended_locations_output',
]

@pulumi.output_type
class GetExtendedLocationsResult:
    """
    A collection of values returned by getExtendedLocations.
    """
    def __init__(__self__, extended_locations=None, id=None, location=None):
        if extended_locations and not isinstance(extended_locations, list):
            raise TypeError("Expected argument 'extended_locations' to be a list")
        pulumi.set(__self__, "extended_locations", extended_locations)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)

    @property
    @pulumi.getter(name="extendedLocations")
    def extended_locations(self) -> Sequence[str]:
        """
        The available extended locations for the Azure Location.
        """
        return pulumi.get(self, "extended_locations")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        return pulumi.get(self, "location")


class AwaitableGetExtendedLocationsResult(GetExtendedLocationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetExtendedLocationsResult(
            extended_locations=self.extended_locations,
            id=self.id,
            location=self.location)


def get_extended_locations(location: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetExtendedLocationsResult:
    """
    This data source return the available Extended Locations for a specific Azure Region.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_azure as azure

    example = azure.core.get_extended_locations(location="West Europe")
    ```


    :param str location: The Azure location to retrieve the Extended Locations for.
    """
    __args__ = dict()
    __args__['location'] = location
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azure:core/getExtendedLocations:getExtendedLocations', __args__, opts=opts, typ=GetExtendedLocationsResult).value

    return AwaitableGetExtendedLocationsResult(
        extended_locations=__ret__.extended_locations,
        id=__ret__.id,
        location=__ret__.location)


@_utilities.lift_output_func(get_extended_locations)
def get_extended_locations_output(location: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetExtendedLocationsResult]:
    """
    This data source return the available Extended Locations for a specific Azure Region.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_azure as azure

    example = azure.core.get_extended_locations(location="West Europe")
    ```


    :param str location: The Azure location to retrieve the Extended Locations for.
    """
    ...
