# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AlertRuleAnomalyBuiltInArgs', 'AlertRuleAnomalyBuiltIn']

@pulumi.input_type
class AlertRuleAnomalyBuiltInArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 log_analytics_workspace_id: pulumi.Input[str],
                 mode: pulumi.Input[str],
                 display_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AlertRuleAnomalyBuiltIn resource.
        :param pulumi.Input[bool] enabled: Should the Built-in Anomaly Alert Rule be enabled?
        :param pulumi.Input[str] log_analytics_workspace_id: The ID of the Log Analytics Workspace. Changing this forces a new Built-in Anomaly Alert Rule to be created.
        :param pulumi.Input[str] mode: mode of the Built-in Anomaly Alert Rule. Possible Values are `Production` and `Flighting`.
        :param pulumi.Input[str] display_name: The Display Name of the built-in Anomaly Alert Rule. Changing this forces a new Built-in Anomaly Alert Rule to be created.
               
               > **Note:** One of `name` or `display_name` block must be specified.
        :param pulumi.Input[str] name: The Name of the built-in Anomaly Alert Rule. Changing this forces a new Built-in Anomaly Alert Rule to be created.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "log_analytics_workspace_id", log_analytics_workspace_id)
        pulumi.set(__self__, "mode", mode)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Should the Built-in Anomaly Alert Rule be enabled?
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="logAnalyticsWorkspaceId")
    def log_analytics_workspace_id(self) -> pulumi.Input[str]:
        """
        The ID of the Log Analytics Workspace. Changing this forces a new Built-in Anomaly Alert Rule to be created.
        """
        return pulumi.get(self, "log_analytics_workspace_id")

    @log_analytics_workspace_id.setter
    def log_analytics_workspace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_analytics_workspace_id", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        """
        mode of the Built-in Anomaly Alert Rule. Possible Values are `Production` and `Flighting`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Display Name of the built-in Anomaly Alert Rule. Changing this forces a new Built-in Anomaly Alert Rule to be created.

        > **Note:** One of `name` or `display_name` block must be specified.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The Name of the built-in Anomaly Alert Rule. Changing this forces a new Built-in Anomaly Alert Rule to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _AlertRuleAnomalyBuiltInState:
    def __init__(__self__, *,
                 anomaly_settings_version: Optional[pulumi.Input[int]] = None,
                 anomaly_version: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 frequency: Optional[pulumi.Input[str]] = None,
                 log_analytics_workspace_id: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 multi_select_observations: Optional[pulumi.Input[Sequence[pulumi.Input['AlertRuleAnomalyBuiltInMultiSelectObservationArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 prioritized_exclude_observations: Optional[pulumi.Input[Sequence[pulumi.Input['AlertRuleAnomalyBuiltInPrioritizedExcludeObservationArgs']]]] = None,
                 required_data_connectors: Optional[pulumi.Input[Sequence[pulumi.Input['AlertRuleAnomalyBuiltInRequiredDataConnectorArgs']]]] = None,
                 settings_definition_id: Optional[pulumi.Input[str]] = None,
                 single_select_observations: Optional[pulumi.Input[Sequence[pulumi.Input['AlertRuleAnomalyBuiltInSingleSelectObservationArgs']]]] = None,
                 tactics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 techniques: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 threshold_observations: Optional[pulumi.Input[Sequence[pulumi.Input['AlertRuleAnomalyBuiltInThresholdObservationArgs']]]] = None):
        """
        Input properties used for looking up and filtering AlertRuleAnomalyBuiltIn resources.
        :param pulumi.Input[int] anomaly_settings_version: The version of the Anomaly Security ML Analytics Settings.
        :param pulumi.Input[str] anomaly_version: The anomaly version of the Anomaly Alert Rule.
        :param pulumi.Input[str] description: The description of the threshold observation.
        :param pulumi.Input[str] display_name: The Display Name of the built-in Anomaly Alert Rule. Changing this forces a new Built-in Anomaly Alert Rule to be created.
               
               > **Note:** One of `name` or `display_name` block must be specified.
        :param pulumi.Input[bool] enabled: Should the Built-in Anomaly Alert Rule be enabled?
        :param pulumi.Input[str] frequency: The frequency the Anomaly Alert Rule will be run.
        :param pulumi.Input[str] log_analytics_workspace_id: The ID of the Log Analytics Workspace. Changing this forces a new Built-in Anomaly Alert Rule to be created.
        :param pulumi.Input[str] mode: mode of the Built-in Anomaly Alert Rule. Possible Values are `Production` and `Flighting`.
        :param pulumi.Input[Sequence[pulumi.Input['AlertRuleAnomalyBuiltInMultiSelectObservationArgs']]] multi_select_observations: A list of `multi_select_observation` blocks as defined below.
        :param pulumi.Input[str] name: The Name of the built-in Anomaly Alert Rule. Changing this forces a new Built-in Anomaly Alert Rule to be created.
        :param pulumi.Input[Sequence[pulumi.Input['AlertRuleAnomalyBuiltInPrioritizedExcludeObservationArgs']]] prioritized_exclude_observations: A list of `prioritized_exclude_observation` blocks as defined below.
        :param pulumi.Input[Sequence[pulumi.Input['AlertRuleAnomalyBuiltInRequiredDataConnectorArgs']]] required_data_connectors: A `required_data_connector` block as defined below.
        :param pulumi.Input[str] settings_definition_id: The ID of the anomaly settings definition Id.
        :param pulumi.Input[Sequence[pulumi.Input['AlertRuleAnomalyBuiltInSingleSelectObservationArgs']]] single_select_observations: A list of `single_select_observation` blocks as defined below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tactics: A list of categories of attacks by which to classify the rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] techniques: A list of techniques of attacks by which to classify the rule.
        :param pulumi.Input[Sequence[pulumi.Input['AlertRuleAnomalyBuiltInThresholdObservationArgs']]] threshold_observations: A list of `threshold_observation` blocks as defined below.
        """
        if anomaly_settings_version is not None:
            pulumi.set(__self__, "anomaly_settings_version", anomaly_settings_version)
        if anomaly_version is not None:
            pulumi.set(__self__, "anomaly_version", anomaly_version)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if log_analytics_workspace_id is not None:
            pulumi.set(__self__, "log_analytics_workspace_id", log_analytics_workspace_id)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if multi_select_observations is not None:
            pulumi.set(__self__, "multi_select_observations", multi_select_observations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if prioritized_exclude_observations is not None:
            pulumi.set(__self__, "prioritized_exclude_observations", prioritized_exclude_observations)
        if required_data_connectors is not None:
            pulumi.set(__self__, "required_data_connectors", required_data_connectors)
        if settings_definition_id is not None:
            pulumi.set(__self__, "settings_definition_id", settings_definition_id)
        if single_select_observations is not None:
            pulumi.set(__self__, "single_select_observations", single_select_observations)
        if tactics is not None:
            pulumi.set(__self__, "tactics", tactics)
        if techniques is not None:
            pulumi.set(__self__, "techniques", techniques)
        if threshold_observations is not None:
            pulumi.set(__self__, "threshold_observations", threshold_observations)

    @property
    @pulumi.getter(name="anomalySettingsVersion")
    def anomaly_settings_version(self) -> Optional[pulumi.Input[int]]:
        """
        The version of the Anomaly Security ML Analytics Settings.
        """
        return pulumi.get(self, "anomaly_settings_version")

    @anomaly_settings_version.setter
    def anomaly_settings_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "anomaly_settings_version", value)

    @property
    @pulumi.getter(name="anomalyVersion")
    def anomaly_version(self) -> Optional[pulumi.Input[str]]:
        """
        The anomaly version of the Anomaly Alert Rule.
        """
        return pulumi.get(self, "anomaly_version")

    @anomaly_version.setter
    def anomaly_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anomaly_version", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the threshold observation.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Display Name of the built-in Anomaly Alert Rule. Changing this forces a new Built-in Anomaly Alert Rule to be created.

        > **Note:** One of `name` or `display_name` block must be specified.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Should the Built-in Anomaly Alert Rule be enabled?
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input[str]]:
        """
        The frequency the Anomaly Alert Rule will be run.
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter(name="logAnalyticsWorkspaceId")
    def log_analytics_workspace_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Log Analytics Workspace. Changing this forces a new Built-in Anomaly Alert Rule to be created.
        """
        return pulumi.get(self, "log_analytics_workspace_id")

    @log_analytics_workspace_id.setter
    def log_analytics_workspace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_analytics_workspace_id", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        mode of the Built-in Anomaly Alert Rule. Possible Values are `Production` and `Flighting`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="multiSelectObservations")
    def multi_select_observations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlertRuleAnomalyBuiltInMultiSelectObservationArgs']]]]:
        """
        A list of `multi_select_observation` blocks as defined below.
        """
        return pulumi.get(self, "multi_select_observations")

    @multi_select_observations.setter
    def multi_select_observations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlertRuleAnomalyBuiltInMultiSelectObservationArgs']]]]):
        pulumi.set(self, "multi_select_observations", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The Name of the built-in Anomaly Alert Rule. Changing this forces a new Built-in Anomaly Alert Rule to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="prioritizedExcludeObservations")
    def prioritized_exclude_observations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlertRuleAnomalyBuiltInPrioritizedExcludeObservationArgs']]]]:
        """
        A list of `prioritized_exclude_observation` blocks as defined below.
        """
        return pulumi.get(self, "prioritized_exclude_observations")

    @prioritized_exclude_observations.setter
    def prioritized_exclude_observations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlertRuleAnomalyBuiltInPrioritizedExcludeObservationArgs']]]]):
        pulumi.set(self, "prioritized_exclude_observations", value)

    @property
    @pulumi.getter(name="requiredDataConnectors")
    def required_data_connectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlertRuleAnomalyBuiltInRequiredDataConnectorArgs']]]]:
        """
        A `required_data_connector` block as defined below.
        """
        return pulumi.get(self, "required_data_connectors")

    @required_data_connectors.setter
    def required_data_connectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlertRuleAnomalyBuiltInRequiredDataConnectorArgs']]]]):
        pulumi.set(self, "required_data_connectors", value)

    @property
    @pulumi.getter(name="settingsDefinitionId")
    def settings_definition_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the anomaly settings definition Id.
        """
        return pulumi.get(self, "settings_definition_id")

    @settings_definition_id.setter
    def settings_definition_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "settings_definition_id", value)

    @property
    @pulumi.getter(name="singleSelectObservations")
    def single_select_observations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlertRuleAnomalyBuiltInSingleSelectObservationArgs']]]]:
        """
        A list of `single_select_observation` blocks as defined below.
        """
        return pulumi.get(self, "single_select_observations")

    @single_select_observations.setter
    def single_select_observations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlertRuleAnomalyBuiltInSingleSelectObservationArgs']]]]):
        pulumi.set(self, "single_select_observations", value)

    @property
    @pulumi.getter
    def tactics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of categories of attacks by which to classify the rule.
        """
        return pulumi.get(self, "tactics")

    @tactics.setter
    def tactics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tactics", value)

    @property
    @pulumi.getter
    def techniques(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of techniques of attacks by which to classify the rule.
        """
        return pulumi.get(self, "techniques")

    @techniques.setter
    def techniques(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "techniques", value)

    @property
    @pulumi.getter(name="thresholdObservations")
    def threshold_observations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlertRuleAnomalyBuiltInThresholdObservationArgs']]]]:
        """
        A list of `threshold_observation` blocks as defined below.
        """
        return pulumi.get(self, "threshold_observations")

    @threshold_observations.setter
    def threshold_observations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlertRuleAnomalyBuiltInThresholdObservationArgs']]]]):
        pulumi.set(self, "threshold_observations", value)


class AlertRuleAnomalyBuiltIn(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 log_analytics_workspace_id: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_analytics_workspace = azure.operationalinsights.AnalyticsWorkspace("exampleAnalyticsWorkspace",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            sku="PerGB2018")
        example_log_analytics_workspace_onboarding = azure.sentinel.LogAnalyticsWorkspaceOnboarding("exampleLogAnalyticsWorkspaceOnboarding",
            workspace_id=example_analytics_workspace.id,
            customer_managed_key_enabled=False)
        example_alert_rule_anomaly = azure.sentinel.get_alert_rule_anomaly_output(log_analytics_workspace_id=example_log_analytics_workspace_onboarding.workspace_id,
            display_name="Potential data staging")
        example_alert_rule_anomaly_built_in = azure.sentinel.AlertRuleAnomalyBuiltIn("exampleAlertRuleAnomalyBuiltIn",
            display_name="Potential data staging",
            log_analytics_workspace_id=example_analytics_workspace.id,
            mode="Production",
            enabled=False)
        ```

        ## Import

        Built In Anomaly Alert Rules can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:sentinel/alertRuleAnomalyBuiltIn:AlertRuleAnomalyBuiltIn example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.OperationalInsights/workspaces/workspace1/providers/Microsoft.SecurityInsights/securityMLAnalyticsSettings/setting1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] display_name: The Display Name of the built-in Anomaly Alert Rule. Changing this forces a new Built-in Anomaly Alert Rule to be created.
               
               > **Note:** One of `name` or `display_name` block must be specified.
        :param pulumi.Input[bool] enabled: Should the Built-in Anomaly Alert Rule be enabled?
        :param pulumi.Input[str] log_analytics_workspace_id: The ID of the Log Analytics Workspace. Changing this forces a new Built-in Anomaly Alert Rule to be created.
        :param pulumi.Input[str] mode: mode of the Built-in Anomaly Alert Rule. Possible Values are `Production` and `Flighting`.
        :param pulumi.Input[str] name: The Name of the built-in Anomaly Alert Rule. Changing this forces a new Built-in Anomaly Alert Rule to be created.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AlertRuleAnomalyBuiltInArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_analytics_workspace = azure.operationalinsights.AnalyticsWorkspace("exampleAnalyticsWorkspace",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            sku="PerGB2018")
        example_log_analytics_workspace_onboarding = azure.sentinel.LogAnalyticsWorkspaceOnboarding("exampleLogAnalyticsWorkspaceOnboarding",
            workspace_id=example_analytics_workspace.id,
            customer_managed_key_enabled=False)
        example_alert_rule_anomaly = azure.sentinel.get_alert_rule_anomaly_output(log_analytics_workspace_id=example_log_analytics_workspace_onboarding.workspace_id,
            display_name="Potential data staging")
        example_alert_rule_anomaly_built_in = azure.sentinel.AlertRuleAnomalyBuiltIn("exampleAlertRuleAnomalyBuiltIn",
            display_name="Potential data staging",
            log_analytics_workspace_id=example_analytics_workspace.id,
            mode="Production",
            enabled=False)
        ```

        ## Import

        Built In Anomaly Alert Rules can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:sentinel/alertRuleAnomalyBuiltIn:AlertRuleAnomalyBuiltIn example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.OperationalInsights/workspaces/workspace1/providers/Microsoft.SecurityInsights/securityMLAnalyticsSettings/setting1
        ```

        :param str resource_name: The name of the resource.
        :param AlertRuleAnomalyBuiltInArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AlertRuleAnomalyBuiltInArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 log_analytics_workspace_id: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AlertRuleAnomalyBuiltInArgs.__new__(AlertRuleAnomalyBuiltInArgs)

            __props__.__dict__["display_name"] = display_name
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            if log_analytics_workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'log_analytics_workspace_id'")
            __props__.__dict__["log_analytics_workspace_id"] = log_analytics_workspace_id
            if mode is None and not opts.urn:
                raise TypeError("Missing required property 'mode'")
            __props__.__dict__["mode"] = mode
            __props__.__dict__["name"] = name
            __props__.__dict__["anomaly_settings_version"] = None
            __props__.__dict__["anomaly_version"] = None
            __props__.__dict__["description"] = None
            __props__.__dict__["frequency"] = None
            __props__.__dict__["multi_select_observations"] = None
            __props__.__dict__["prioritized_exclude_observations"] = None
            __props__.__dict__["required_data_connectors"] = None
            __props__.__dict__["settings_definition_id"] = None
            __props__.__dict__["single_select_observations"] = None
            __props__.__dict__["tactics"] = None
            __props__.__dict__["techniques"] = None
            __props__.__dict__["threshold_observations"] = None
        super(AlertRuleAnomalyBuiltIn, __self__).__init__(
            'azure:sentinel/alertRuleAnomalyBuiltIn:AlertRuleAnomalyBuiltIn',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            anomaly_settings_version: Optional[pulumi.Input[int]] = None,
            anomaly_version: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            frequency: Optional[pulumi.Input[str]] = None,
            log_analytics_workspace_id: Optional[pulumi.Input[str]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            multi_select_observations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertRuleAnomalyBuiltInMultiSelectObservationArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            prioritized_exclude_observations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertRuleAnomalyBuiltInPrioritizedExcludeObservationArgs']]]]] = None,
            required_data_connectors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertRuleAnomalyBuiltInRequiredDataConnectorArgs']]]]] = None,
            settings_definition_id: Optional[pulumi.Input[str]] = None,
            single_select_observations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertRuleAnomalyBuiltInSingleSelectObservationArgs']]]]] = None,
            tactics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            techniques: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            threshold_observations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertRuleAnomalyBuiltInThresholdObservationArgs']]]]] = None) -> 'AlertRuleAnomalyBuiltIn':
        """
        Get an existing AlertRuleAnomalyBuiltIn resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] anomaly_settings_version: The version of the Anomaly Security ML Analytics Settings.
        :param pulumi.Input[str] anomaly_version: The anomaly version of the Anomaly Alert Rule.
        :param pulumi.Input[str] description: The description of the threshold observation.
        :param pulumi.Input[str] display_name: The Display Name of the built-in Anomaly Alert Rule. Changing this forces a new Built-in Anomaly Alert Rule to be created.
               
               > **Note:** One of `name` or `display_name` block must be specified.
        :param pulumi.Input[bool] enabled: Should the Built-in Anomaly Alert Rule be enabled?
        :param pulumi.Input[str] frequency: The frequency the Anomaly Alert Rule will be run.
        :param pulumi.Input[str] log_analytics_workspace_id: The ID of the Log Analytics Workspace. Changing this forces a new Built-in Anomaly Alert Rule to be created.
        :param pulumi.Input[str] mode: mode of the Built-in Anomaly Alert Rule. Possible Values are `Production` and `Flighting`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertRuleAnomalyBuiltInMultiSelectObservationArgs']]]] multi_select_observations: A list of `multi_select_observation` blocks as defined below.
        :param pulumi.Input[str] name: The Name of the built-in Anomaly Alert Rule. Changing this forces a new Built-in Anomaly Alert Rule to be created.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertRuleAnomalyBuiltInPrioritizedExcludeObservationArgs']]]] prioritized_exclude_observations: A list of `prioritized_exclude_observation` blocks as defined below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertRuleAnomalyBuiltInRequiredDataConnectorArgs']]]] required_data_connectors: A `required_data_connector` block as defined below.
        :param pulumi.Input[str] settings_definition_id: The ID of the anomaly settings definition Id.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertRuleAnomalyBuiltInSingleSelectObservationArgs']]]] single_select_observations: A list of `single_select_observation` blocks as defined below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tactics: A list of categories of attacks by which to classify the rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] techniques: A list of techniques of attacks by which to classify the rule.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertRuleAnomalyBuiltInThresholdObservationArgs']]]] threshold_observations: A list of `threshold_observation` blocks as defined below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AlertRuleAnomalyBuiltInState.__new__(_AlertRuleAnomalyBuiltInState)

        __props__.__dict__["anomaly_settings_version"] = anomaly_settings_version
        __props__.__dict__["anomaly_version"] = anomaly_version
        __props__.__dict__["description"] = description
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["frequency"] = frequency
        __props__.__dict__["log_analytics_workspace_id"] = log_analytics_workspace_id
        __props__.__dict__["mode"] = mode
        __props__.__dict__["multi_select_observations"] = multi_select_observations
        __props__.__dict__["name"] = name
        __props__.__dict__["prioritized_exclude_observations"] = prioritized_exclude_observations
        __props__.__dict__["required_data_connectors"] = required_data_connectors
        __props__.__dict__["settings_definition_id"] = settings_definition_id
        __props__.__dict__["single_select_observations"] = single_select_observations
        __props__.__dict__["tactics"] = tactics
        __props__.__dict__["techniques"] = techniques
        __props__.__dict__["threshold_observations"] = threshold_observations
        return AlertRuleAnomalyBuiltIn(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="anomalySettingsVersion")
    def anomaly_settings_version(self) -> pulumi.Output[int]:
        """
        The version of the Anomaly Security ML Analytics Settings.
        """
        return pulumi.get(self, "anomaly_settings_version")

    @property
    @pulumi.getter(name="anomalyVersion")
    def anomaly_version(self) -> pulumi.Output[str]:
        """
        The anomaly version of the Anomaly Alert Rule.
        """
        return pulumi.get(self, "anomaly_version")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the threshold observation.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        The Display Name of the built-in Anomaly Alert Rule. Changing this forces a new Built-in Anomaly Alert Rule to be created.

        > **Note:** One of `name` or `display_name` block must be specified.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        Should the Built-in Anomaly Alert Rule be enabled?
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def frequency(self) -> pulumi.Output[str]:
        """
        The frequency the Anomaly Alert Rule will be run.
        """
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="logAnalyticsWorkspaceId")
    def log_analytics_workspace_id(self) -> pulumi.Output[str]:
        """
        The ID of the Log Analytics Workspace. Changing this forces a new Built-in Anomaly Alert Rule to be created.
        """
        return pulumi.get(self, "log_analytics_workspace_id")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[str]:
        """
        mode of the Built-in Anomaly Alert Rule. Possible Values are `Production` and `Flighting`.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="multiSelectObservations")
    def multi_select_observations(self) -> pulumi.Output[Sequence['outputs.AlertRuleAnomalyBuiltInMultiSelectObservation']]:
        """
        A list of `multi_select_observation` blocks as defined below.
        """
        return pulumi.get(self, "multi_select_observations")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The Name of the built-in Anomaly Alert Rule. Changing this forces a new Built-in Anomaly Alert Rule to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="prioritizedExcludeObservations")
    def prioritized_exclude_observations(self) -> pulumi.Output[Sequence['outputs.AlertRuleAnomalyBuiltInPrioritizedExcludeObservation']]:
        """
        A list of `prioritized_exclude_observation` blocks as defined below.
        """
        return pulumi.get(self, "prioritized_exclude_observations")

    @property
    @pulumi.getter(name="requiredDataConnectors")
    def required_data_connectors(self) -> pulumi.Output[Sequence['outputs.AlertRuleAnomalyBuiltInRequiredDataConnector']]:
        """
        A `required_data_connector` block as defined below.
        """
        return pulumi.get(self, "required_data_connectors")

    @property
    @pulumi.getter(name="settingsDefinitionId")
    def settings_definition_id(self) -> pulumi.Output[str]:
        """
        The ID of the anomaly settings definition Id.
        """
        return pulumi.get(self, "settings_definition_id")

    @property
    @pulumi.getter(name="singleSelectObservations")
    def single_select_observations(self) -> pulumi.Output[Sequence['outputs.AlertRuleAnomalyBuiltInSingleSelectObservation']]:
        """
        A list of `single_select_observation` blocks as defined below.
        """
        return pulumi.get(self, "single_select_observations")

    @property
    @pulumi.getter
    def tactics(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of categories of attacks by which to classify the rule.
        """
        return pulumi.get(self, "tactics")

    @property
    @pulumi.getter
    def techniques(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of techniques of attacks by which to classify the rule.
        """
        return pulumi.get(self, "techniques")

    @property
    @pulumi.getter(name="thresholdObservations")
    def threshold_observations(self) -> pulumi.Output[Sequence['outputs.AlertRuleAnomalyBuiltInThresholdObservation']]:
        """
        A list of `threshold_observation` blocks as defined below.
        """
        return pulumi.get(self, "threshold_observations")

