# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['SecurityDeviceGroup']


class SecurityDeviceGroup(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_rule: Optional[pulumi.Input[pulumi.InputType['SecurityDeviceGroupAllowRuleArgs']]] = None,
                 iothub_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 range_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SecurityDeviceGroupRangeRuleArgs']]]]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Manages a Iot Security Device Group.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_io_t_hub = azure.iot.IoTHub("exampleIoTHub",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            sku=azure.iot.IoTHubSkuArgs(
                name="S1",
                capacity=1,
            ))
        example_security_solution = azure.iot.SecuritySolution("exampleSecuritySolution",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            display_name="Iot Security Solution",
            iothub_ids=[example_io_t_hub.id])
        example_security_device_group = azure.iot.SecurityDeviceGroup("exampleSecurityDeviceGroup",
            iothub_id=example_io_t_hub.id,
            allow_rule=azure.iot.SecurityDeviceGroupAllowRuleArgs(
                connection_to_ip_not_alloweds=["10.0.0.0/24"],
            ),
            range_rules=[azure.iot.SecurityDeviceGroupRangeRuleArgs(
                type="ActiveConnectionsNotInAllowedRange",
                min=0,
                max=30,
                duration="PT5M",
            )],
            opts=pulumi.ResourceOptions(depends_on=[example_security_solution]))
        ```

        ## Import

        Iot Security Device Group can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:iot/securityDeviceGroup:SecurityDeviceGroup example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.Devices/iotHubs/hub1/providers/Microsoft.Security/deviceSecurityGroups/group1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['SecurityDeviceGroupAllowRuleArgs']] allow_rule: an `allow_rule` blocks as defined below.
        :param pulumi.Input[str] iothub_id: The ID of the IoT Hub which to link the Security Device Group to. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: Specifies the name of the Device Security Group. Changing this forces a new resource to be created.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SecurityDeviceGroupRangeRuleArgs']]]] range_rules: One or more `range_rule` blocks as defined below.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['allow_rule'] = allow_rule
            if iothub_id is None and not opts.urn:
                raise TypeError("Missing required property 'iothub_id'")
            __props__['iothub_id'] = iothub_id
            __props__['name'] = name
            __props__['range_rules'] = range_rules
        super(SecurityDeviceGroup, __self__).__init__(
            'azure:iot/securityDeviceGroup:SecurityDeviceGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_rule: Optional[pulumi.Input[pulumi.InputType['SecurityDeviceGroupAllowRuleArgs']]] = None,
            iothub_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            range_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SecurityDeviceGroupRangeRuleArgs']]]]] = None) -> 'SecurityDeviceGroup':
        """
        Get an existing SecurityDeviceGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['SecurityDeviceGroupAllowRuleArgs']] allow_rule: an `allow_rule` blocks as defined below.
        :param pulumi.Input[str] iothub_id: The ID of the IoT Hub which to link the Security Device Group to. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: Specifies the name of the Device Security Group. Changing this forces a new resource to be created.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SecurityDeviceGroupRangeRuleArgs']]]] range_rules: One or more `range_rule` blocks as defined below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["allow_rule"] = allow_rule
        __props__["iothub_id"] = iothub_id
        __props__["name"] = name
        __props__["range_rules"] = range_rules
        return SecurityDeviceGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowRule")
    def allow_rule(self) -> pulumi.Output[Optional['outputs.SecurityDeviceGroupAllowRule']]:
        """
        an `allow_rule` blocks as defined below.
        """
        return pulumi.get(self, "allow_rule")

    @property
    @pulumi.getter(name="iothubId")
    def iothub_id(self) -> pulumi.Output[str]:
        """
        The ID of the IoT Hub which to link the Security Device Group to. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "iothub_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Specifies the name of the Device Security Group. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="rangeRules")
    def range_rules(self) -> pulumi.Output[Optional[Sequence['outputs.SecurityDeviceGroupRangeRule']]]:
        """
        One or more `range_rule` blocks as defined below.
        """
        return pulumi.get(self, "range_rules")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

