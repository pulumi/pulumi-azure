# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetVolumeSnapshotResult',
    'AwaitableGetVolumeSnapshotResult',
    'get_volume_snapshot',
    'get_volume_snapshot_output',
]

@pulumi.output_type
class GetVolumeSnapshotResult:
    """
    A collection of values returned by getVolumeSnapshot.
    """
    def __init__(__self__, id=None, name=None, source_id=None, source_volume_size_in_gib=None, volume_group_id=None, volume_name=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if source_id and not isinstance(source_id, str):
            raise TypeError("Expected argument 'source_id' to be a str")
        pulumi.set(__self__, "source_id", source_id)
        if source_volume_size_in_gib and not isinstance(source_volume_size_in_gib, int):
            raise TypeError("Expected argument 'source_volume_size_in_gib' to be a int")
        pulumi.set(__self__, "source_volume_size_in_gib", source_volume_size_in_gib)
        if volume_group_id and not isinstance(volume_group_id, str):
            raise TypeError("Expected argument 'volume_group_id' to be a str")
        pulumi.set(__self__, "volume_group_id", volume_group_id)
        if volume_name and not isinstance(volume_name, str):
            raise TypeError("Expected argument 'volume_name' to be a str")
        pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> str:
        """
        The resource ID from which the Snapshot is created.
        """
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="sourceVolumeSizeInGib")
    def source_volume_size_in_gib(self) -> int:
        """
        The size of source volume.
        """
        return pulumi.get(self, "source_volume_size_in_gib")

    @property
    @pulumi.getter(name="volumeGroupId")
    def volume_group_id(self) -> str:
        return pulumi.get(self, "volume_group_id")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> str:
        """
        The source volume name of the Snapshot.
        """
        return pulumi.get(self, "volume_name")


class AwaitableGetVolumeSnapshotResult(GetVolumeSnapshotResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVolumeSnapshotResult(
            id=self.id,
            name=self.name,
            source_id=self.source_id,
            source_volume_size_in_gib=self.source_volume_size_in_gib,
            volume_group_id=self.volume_group_id,
            volume_name=self.volume_name)


def get_volume_snapshot(name: Optional[str] = None,
                        volume_group_id: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVolumeSnapshotResult:
    """
    Use this data source to access information about an existing Elastic SAN Volume Snapshot.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_azure as azure

    example = azure.elasticsan.get(name="existing",
        resource_group_name="existing")
    example_get_volume_group = azure.elasticsan.get_volume_group(name="existing",
        elastic_san_id=example.id)
    example_get_volume_snapshot = azure.elasticsan.get_volume_snapshot(name="existing",
        volume_group_id=example_get_volume_group.id)
    pulumi.export("id", example_get_volume_snapshot.id)
    ```


    :param str name: The name of the Elastic SAN Volume Snapshot.
    :param str volume_group_id: The Elastic SAN Volume Group ID within which the Elastic SAN Volume Snapshot exists.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['volumeGroupId'] = volume_group_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure:elasticsan/getVolumeSnapshot:getVolumeSnapshot', __args__, opts=opts, typ=GetVolumeSnapshotResult).value

    return AwaitableGetVolumeSnapshotResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        source_id=pulumi.get(__ret__, 'source_id'),
        source_volume_size_in_gib=pulumi.get(__ret__, 'source_volume_size_in_gib'),
        volume_group_id=pulumi.get(__ret__, 'volume_group_id'),
        volume_name=pulumi.get(__ret__, 'volume_name'))
def get_volume_snapshot_output(name: Optional[pulumi.Input[str]] = None,
                               volume_group_id: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVolumeSnapshotResult]:
    """
    Use this data source to access information about an existing Elastic SAN Volume Snapshot.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_azure as azure

    example = azure.elasticsan.get(name="existing",
        resource_group_name="existing")
    example_get_volume_group = azure.elasticsan.get_volume_group(name="existing",
        elastic_san_id=example.id)
    example_get_volume_snapshot = azure.elasticsan.get_volume_snapshot(name="existing",
        volume_group_id=example_get_volume_group.id)
    pulumi.export("id", example_get_volume_snapshot.id)
    ```


    :param str name: The name of the Elastic SAN Volume Snapshot.
    :param str volume_group_id: The Elastic SAN Volume Group ID within which the Elastic SAN Volume Snapshot exists.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['volumeGroupId'] = volume_group_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure:elasticsan/getVolumeSnapshot:getVolumeSnapshot', __args__, opts=opts, typ=GetVolumeSnapshotResult)
    return __ret__.apply(lambda __response__: GetVolumeSnapshotResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        source_id=pulumi.get(__response__, 'source_id'),
        source_volume_size_in_gib=pulumi.get(__response__, 'source_volume_size_in_gib'),
        volume_group_id=pulumi.get(__response__, 'volume_group_id'),
        volume_name=pulumi.get(__response__, 'volume_name')))
