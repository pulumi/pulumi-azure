# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'MonitorIdentity',
    'MonitorPlan',
    'MonitorUser',
]

@pulumi.output_type
class MonitorIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 principal_id: Optional[str] = None,
                 tenant_id: Optional[str] = None):
        """
        :param str type: The type of identity used for the resource. Only possible value is `SystemAssigned`.
        """
        pulumi.set(__self__, "type", type)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of identity used for the resource. Only possible value is `SystemAssigned`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[str]:
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class MonitorPlan(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "billingCycle":
            suggest = "billing_cycle"
        elif key == "effectiveDate":
            suggest = "effective_date"
        elif key == "usageType":
            suggest = "usage_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorPlan. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorPlan.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorPlan.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 plan: str,
                 billing_cycle: Optional[str] = None,
                 effective_date: Optional[str] = None,
                 usage_type: Optional[str] = None):
        """
        :param str plan: Plan id as published by Dynatrace.
        :param str billing_cycle: Different billing cycles. Possible values are `MONTHLY` and `WEEKLY`.
        :param str effective_date: Date when plan was applied.
        :param str usage_type: Different usage type. Possible values are `PAYG` and `COMMITTED`.
        """
        pulumi.set(__self__, "plan", plan)
        if billing_cycle is not None:
            pulumi.set(__self__, "billing_cycle", billing_cycle)
        if effective_date is not None:
            pulumi.set(__self__, "effective_date", effective_date)
        if usage_type is not None:
            pulumi.set(__self__, "usage_type", usage_type)

    @property
    @pulumi.getter
    def plan(self) -> str:
        """
        Plan id as published by Dynatrace.
        """
        return pulumi.get(self, "plan")

    @property
    @pulumi.getter(name="billingCycle")
    def billing_cycle(self) -> Optional[str]:
        """
        Different billing cycles. Possible values are `MONTHLY` and `WEEKLY`.
        """
        return pulumi.get(self, "billing_cycle")

    @property
    @pulumi.getter(name="effectiveDate")
    def effective_date(self) -> Optional[str]:
        """
        Date when plan was applied.
        """
        return pulumi.get(self, "effective_date")

    @property
    @pulumi.getter(name="usageType")
    def usage_type(self) -> Optional[str]:
        """
        Different usage type. Possible values are `PAYG` and `COMMITTED`.
        """
        return pulumi.get(self, "usage_type")


@pulumi.output_type
class MonitorUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "firstName":
            suggest = "first_name"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "phoneNumber":
            suggest = "phone_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 country: str,
                 email: str,
                 first_name: str,
                 last_name: str,
                 phone_number: str):
        """
        :param str country: Country of the user.
        :param str email: Email of the user used by Dynatrace for contacting them if needed.
        :param str first_name: First name of the user.
        :param str last_name: Last name of the user.
        :param str phone_number: phone number of the user by Dynatrace for contacting them if needed.
        """
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "phone_number", phone_number)

    @property
    @pulumi.getter
    def country(self) -> str:
        """
        Country of the user.
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        Email of the user used by Dynatrace for contacting them if needed.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        """
        First name of the user.
        """
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        """
        Last name of the user.
        """
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> str:
        """
        phone number of the user by Dynatrace for contacting them if needed.
        """
        return pulumi.get(self, "phone_number")


