# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'MonitorEnvironmentProperty',
    'MonitorEnvironmentPropertyEnvironmentInfo',
    'MonitorIdentity',
    'MonitorPlan',
    'MonitorUser',
    'TagRulesLogRule',
    'TagRulesLogRuleFilteringTag',
    'TagRulesMetricRule',
    'TagRulesMetricRuleFilteringTag',
    'GetMonitorEnvironmentPropertyResult',
    'GetMonitorEnvironmentPropertyEnvironmentInfoResult',
    'GetMonitorIdentityResult',
    'GetMonitorPlanResult',
    'GetMonitorUserResult',
]

@pulumi.output_type
class MonitorEnvironmentProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "environmentInfos":
            suggest = "environment_infos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorEnvironmentProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorEnvironmentProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorEnvironmentProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 environment_infos: Sequence['outputs.MonitorEnvironmentPropertyEnvironmentInfo']):
        """
        :param Sequence['MonitorEnvironmentPropertyEnvironmentInfoArgs'] environment_infos: Information about the Dynatrace environment. An `environment_info` block as defined below.
        """
        pulumi.set(__self__, "environment_infos", environment_infos)

    @_builtins.property
    @pulumi.getter(name="environmentInfos")
    def environment_infos(self) -> Sequence['outputs.MonitorEnvironmentPropertyEnvironmentInfo']:
        """
        Information about the Dynatrace environment. An `environment_info` block as defined below.
        """
        return pulumi.get(self, "environment_infos")


@pulumi.output_type
class MonitorEnvironmentPropertyEnvironmentInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "environmentId":
            suggest = "environment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorEnvironmentPropertyEnvironmentInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorEnvironmentPropertyEnvironmentInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorEnvironmentPropertyEnvironmentInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 environment_id: _builtins.str):
        """
        :param _builtins.str environment_id: The ID of the Dynatrace environment to be created.
        """
        pulumi.set(__self__, "environment_id", environment_id)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> _builtins.str:
        """
        The ID of the Dynatrace environment to be created.
        """
        return pulumi.get(self, "environment_id")


@pulumi.output_type
class MonitorIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 principal_id: Optional[_builtins.str] = None,
                 tenant_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: The type of identity used for the resource. Only possible value is `SystemAssigned`.
        """
        pulumi.set(__self__, "type", type)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of identity used for the resource. Only possible value is `SystemAssigned`.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "principal_id")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class MonitorPlan(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "billingCycle":
            suggest = "billing_cycle"
        elif key == "effectiveDate":
            suggest = "effective_date"
        elif key == "usageType":
            suggest = "usage_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorPlan. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorPlan.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorPlan.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 plan: _builtins.str,
                 billing_cycle: Optional[_builtins.str] = None,
                 effective_date: Optional[_builtins.str] = None,
                 usage_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str plan: Plan id as published by Dynatrace.
        :param _builtins.str billing_cycle: Different billing cycles. Possible values are `MONTHLY` and `WEEKLY`.
        :param _builtins.str effective_date: Date when plan was applied.
        :param _builtins.str usage_type: Different usage type. Possible values are `PAYG` and `COMMITTED`.
        """
        pulumi.set(__self__, "plan", plan)
        if billing_cycle is not None:
            pulumi.set(__self__, "billing_cycle", billing_cycle)
        if effective_date is not None:
            pulumi.set(__self__, "effective_date", effective_date)
        if usage_type is not None:
            pulumi.set(__self__, "usage_type", usage_type)

    @_builtins.property
    @pulumi.getter
    def plan(self) -> _builtins.str:
        """
        Plan id as published by Dynatrace.
        """
        return pulumi.get(self, "plan")

    @_builtins.property
    @pulumi.getter(name="billingCycle")
    def billing_cycle(self) -> Optional[_builtins.str]:
        """
        Different billing cycles. Possible values are `MONTHLY` and `WEEKLY`.
        """
        return pulumi.get(self, "billing_cycle")

    @_builtins.property
    @pulumi.getter(name="effectiveDate")
    def effective_date(self) -> Optional[_builtins.str]:
        """
        Date when plan was applied.
        """
        return pulumi.get(self, "effective_date")

    @_builtins.property
    @pulumi.getter(name="usageType")
    def usage_type(self) -> Optional[_builtins.str]:
        """
        Different usage type. Possible values are `PAYG` and `COMMITTED`.
        """
        return pulumi.get(self, "usage_type")


@pulumi.output_type
class MonitorUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "firstName":
            suggest = "first_name"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "phoneNumber":
            suggest = "phone_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 country: _builtins.str,
                 email: _builtins.str,
                 first_name: _builtins.str,
                 last_name: _builtins.str,
                 phone_number: _builtins.str):
        """
        :param _builtins.str country: Country of the user.
        :param _builtins.str email: Email of the user used by Dynatrace for contacting them if needed.
        :param _builtins.str first_name: First name of the user.
        :param _builtins.str last_name: Last name of the user.
        :param _builtins.str phone_number: phone number of the user by Dynatrace for contacting them if needed.
        """
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "phone_number", phone_number)

    @_builtins.property
    @pulumi.getter
    def country(self) -> _builtins.str:
        """
        Country of the user.
        """
        return pulumi.get(self, "country")

    @_builtins.property
    @pulumi.getter
    def email(self) -> _builtins.str:
        """
        Email of the user used by Dynatrace for contacting them if needed.
        """
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter(name="firstName")
    def first_name(self) -> _builtins.str:
        """
        First name of the user.
        """
        return pulumi.get(self, "first_name")

    @_builtins.property
    @pulumi.getter(name="lastName")
    def last_name(self) -> _builtins.str:
        """
        Last name of the user.
        """
        return pulumi.get(self, "last_name")

    @_builtins.property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> _builtins.str:
        """
        phone number of the user by Dynatrace for contacting them if needed.
        """
        return pulumi.get(self, "phone_number")


@pulumi.output_type
class TagRulesLogRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filteringTags":
            suggest = "filtering_tags"
        elif key == "sendActivityLogsEnabled":
            suggest = "send_activity_logs_enabled"
        elif key == "sendAzureActiveDirectoryLogsEnabled":
            suggest = "send_azure_active_directory_logs_enabled"
        elif key == "sendSubscriptionLogsEnabled":
            suggest = "send_subscription_logs_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TagRulesLogRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TagRulesLogRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TagRulesLogRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filtering_tags: Sequence['outputs.TagRulesLogRuleFilteringTag'],
                 send_activity_logs_enabled: Optional[_builtins.bool] = None,
                 send_azure_active_directory_logs_enabled: Optional[_builtins.bool] = None,
                 send_subscription_logs_enabled: Optional[_builtins.bool] = None):
        """
        :param Sequence['TagRulesLogRuleFilteringTagArgs'] filtering_tags: Filtering tag for the log rule. A `filtering_tag` block as defined below.
        :param _builtins.bool send_activity_logs_enabled: Send Activity logs. The default value is `false`.
        :param _builtins.bool send_azure_active_directory_logs_enabled: Send Azure Active Directory logs. The default value is `false`.
        :param _builtins.bool send_subscription_logs_enabled: Send Subscription logs. The default value is `false`.
        """
        pulumi.set(__self__, "filtering_tags", filtering_tags)
        if send_activity_logs_enabled is not None:
            pulumi.set(__self__, "send_activity_logs_enabled", send_activity_logs_enabled)
        if send_azure_active_directory_logs_enabled is not None:
            pulumi.set(__self__, "send_azure_active_directory_logs_enabled", send_azure_active_directory_logs_enabled)
        if send_subscription_logs_enabled is not None:
            pulumi.set(__self__, "send_subscription_logs_enabled", send_subscription_logs_enabled)

    @_builtins.property
    @pulumi.getter(name="filteringTags")
    def filtering_tags(self) -> Sequence['outputs.TagRulesLogRuleFilteringTag']:
        """
        Filtering tag for the log rule. A `filtering_tag` block as defined below.
        """
        return pulumi.get(self, "filtering_tags")

    @_builtins.property
    @pulumi.getter(name="sendActivityLogsEnabled")
    def send_activity_logs_enabled(self) -> Optional[_builtins.bool]:
        """
        Send Activity logs. The default value is `false`.
        """
        return pulumi.get(self, "send_activity_logs_enabled")

    @_builtins.property
    @pulumi.getter(name="sendAzureActiveDirectoryLogsEnabled")
    def send_azure_active_directory_logs_enabled(self) -> Optional[_builtins.bool]:
        """
        Send Azure Active Directory logs. The default value is `false`.
        """
        return pulumi.get(self, "send_azure_active_directory_logs_enabled")

    @_builtins.property
    @pulumi.getter(name="sendSubscriptionLogsEnabled")
    def send_subscription_logs_enabled(self) -> Optional[_builtins.bool]:
        """
        Send Subscription logs. The default value is `false`.
        """
        return pulumi.get(self, "send_subscription_logs_enabled")


@pulumi.output_type
class TagRulesLogRuleFilteringTag(dict):
    def __init__(__self__, *,
                 action: _builtins.str,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str action: Action of the filtering tag. Possible values are `Include` and `Exclude`.
        :param _builtins.str name: Name of the filtering tag.
        :param _builtins.str value: Value of the filtering tag.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        """
        Action of the filtering tag. Possible values are `Include` and `Exclude`.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the filtering tag.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Value of the filtering tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class TagRulesMetricRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filteringTags":
            suggest = "filtering_tags"
        elif key == "sendingMetricsEnabled":
            suggest = "sending_metrics_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TagRulesMetricRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TagRulesMetricRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TagRulesMetricRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filtering_tags: Sequence['outputs.TagRulesMetricRuleFilteringTag'],
                 sending_metrics_enabled: Optional[_builtins.bool] = None):
        """
        :param Sequence['TagRulesMetricRuleFilteringTagArgs'] filtering_tags: Filtering tag for the metric rule. A `filtering_tag` block as defined below.
        :param _builtins.bool sending_metrics_enabled: If sending metrics is enabled. The default value is `false`.
        """
        pulumi.set(__self__, "filtering_tags", filtering_tags)
        if sending_metrics_enabled is not None:
            pulumi.set(__self__, "sending_metrics_enabled", sending_metrics_enabled)

    @_builtins.property
    @pulumi.getter(name="filteringTags")
    def filtering_tags(self) -> Sequence['outputs.TagRulesMetricRuleFilteringTag']:
        """
        Filtering tag for the metric rule. A `filtering_tag` block as defined below.
        """
        return pulumi.get(self, "filtering_tags")

    @_builtins.property
    @pulumi.getter(name="sendingMetricsEnabled")
    def sending_metrics_enabled(self) -> Optional[_builtins.bool]:
        """
        If sending metrics is enabled. The default value is `false`.
        """
        return pulumi.get(self, "sending_metrics_enabled")


@pulumi.output_type
class TagRulesMetricRuleFilteringTag(dict):
    def __init__(__self__, *,
                 action: _builtins.str,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str action: Action of the filtering tag. Possible values are `Include` and `Exclude`.
        :param _builtins.str name: Name of the filtering tag.
        :param _builtins.str value: Value of the filtering tag.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        """
        Action of the filtering tag. Possible values are `Include` and `Exclude`.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the filtering tag.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Value of the filtering tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetMonitorEnvironmentPropertyResult(dict):
    def __init__(__self__, *,
                 environment_infos: Sequence['outputs.GetMonitorEnvironmentPropertyEnvironmentInfoResult']):
        pulumi.set(__self__, "environment_infos", environment_infos)

    @_builtins.property
    @pulumi.getter(name="environmentInfos")
    def environment_infos(self) -> Sequence['outputs.GetMonitorEnvironmentPropertyEnvironmentInfoResult']:
        return pulumi.get(self, "environment_infos")


@pulumi.output_type
class GetMonitorEnvironmentPropertyEnvironmentInfoResult(dict):
    def __init__(__self__, *,
                 environment_id: _builtins.str):
        pulumi.set(__self__, "environment_id", environment_id)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> _builtins.str:
        return pulumi.get(self, "environment_id")


@pulumi.output_type
class GetMonitorIdentityResult(dict):
    def __init__(__self__, *,
                 principal_id: _builtins.str,
                 tenant_id: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str type: The type of identity used for the resource.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> _builtins.str:
        return pulumi.get(self, "principal_id")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of identity used for the resource.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMonitorPlanResult(dict):
    def __init__(__self__, *,
                 billing_cycle: _builtins.str,
                 effective_date: _builtins.str,
                 plan: _builtins.str,
                 usage_type: _builtins.str):
        """
        :param _builtins.str billing_cycle: Different billing cycles.
        :param _builtins.str effective_date: Date when plan was applied.
        :param _builtins.str plan: Plan id as published by Dynatrace.
        :param _builtins.str usage_type: Different usage type.
        """
        pulumi.set(__self__, "billing_cycle", billing_cycle)
        pulumi.set(__self__, "effective_date", effective_date)
        pulumi.set(__self__, "plan", plan)
        pulumi.set(__self__, "usage_type", usage_type)

    @_builtins.property
    @pulumi.getter(name="billingCycle")
    def billing_cycle(self) -> _builtins.str:
        """
        Different billing cycles.
        """
        return pulumi.get(self, "billing_cycle")

    @_builtins.property
    @pulumi.getter(name="effectiveDate")
    def effective_date(self) -> _builtins.str:
        """
        Date when plan was applied.
        """
        return pulumi.get(self, "effective_date")

    @_builtins.property
    @pulumi.getter
    def plan(self) -> _builtins.str:
        """
        Plan id as published by Dynatrace.
        """
        return pulumi.get(self, "plan")

    @_builtins.property
    @pulumi.getter(name="usageType")
    def usage_type(self) -> _builtins.str:
        """
        Different usage type.
        """
        return pulumi.get(self, "usage_type")


@pulumi.output_type
class GetMonitorUserResult(dict):
    def __init__(__self__, *,
                 country: _builtins.str,
                 email: _builtins.str,
                 first_name: _builtins.str,
                 last_name: _builtins.str,
                 phone_number: _builtins.str):
        """
        :param _builtins.str country: Country of the user.
        :param _builtins.str email: Email of the user used by Dynatrace for contacting them if needed.
        :param _builtins.str first_name: First name of the user.
        :param _builtins.str last_name: Last name of the user.
        :param _builtins.str phone_number: phone number of the user by Dynatrace for contacting them if needed.
        """
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "phone_number", phone_number)

    @_builtins.property
    @pulumi.getter
    def country(self) -> _builtins.str:
        """
        Country of the user.
        """
        return pulumi.get(self, "country")

    @_builtins.property
    @pulumi.getter
    def email(self) -> _builtins.str:
        """
        Email of the user used by Dynatrace for contacting them if needed.
        """
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter(name="firstName")
    def first_name(self) -> _builtins.str:
        """
        First name of the user.
        """
        return pulumi.get(self, "first_name")

    @_builtins.property
    @pulumi.getter(name="lastName")
    def last_name(self) -> _builtins.str:
        """
        Last name of the user.
        """
        return pulumi.get(self, "last_name")

    @_builtins.property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> _builtins.str:
        """
        phone number of the user by Dynatrace for contacting them if needed.
        """
        return pulumi.get(self, "phone_number")


