# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['ServerVulnerabilityAssessment']


class ServerVulnerabilityAssessment(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 recurring_scans: Optional[pulumi.Input[pulumi.InputType['ServerVulnerabilityAssessmentRecurringScansArgs']]] = None,
                 server_security_alert_policy_id: Optional[pulumi.Input[str]] = None,
                 storage_account_access_key: Optional[pulumi.Input[str]] = None,
                 storage_container_path: Optional[pulumi.Input[str]] = None,
                 storage_container_sas_key: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Manages the Vulnerability Assessment for a MS SQL Server.

        > **NOTE** Vulnerability Assessment is currently only available for MS SQL databases.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West US")
        example_sql_server = azure.sql.SqlServer("exampleSqlServer",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            version="12.0",
            administrator_login="4dm1n157r470r",
            administrator_login_password="4-v3ry-53cr37-p455w0rd")
        example_account = azure.storage.Account("exampleAccount",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            account_tier="Standard",
            account_replication_type="GRS")
        example_container = azure.storage.Container("exampleContainer",
            storage_account_name=example_account.name,
            container_access_type="private")
        example_server_security_alert_policy = azure.mssql.ServerSecurityAlertPolicy("exampleServerSecurityAlertPolicy",
            resource_group_name=example_resource_group.name,
            server_name=example_sql_server.name,
            state="Enabled")
        example_server_vulnerability_assessment = azure.mssql.ServerVulnerabilityAssessment("exampleServerVulnerabilityAssessment",
            server_security_alert_policy_id=example_server_security_alert_policy.id,
            storage_container_path=pulumi.Output.all(example_account.primary_blob_endpoint, example_container.name).apply(lambda primary_blob_endpoint, name: f"{primary_blob_endpoint}{name}/"),
            storage_account_access_key=example_account.primary_access_key,
            recurring_scans=azure.mssql.ServerVulnerabilityAssessmentRecurringScansArgs(
                enabled=True,
                email_subscription_admins=True,
                emails=[
                    "email@example1.com",
                    "email@example2.com",
                ],
            ))
        ```

        ## Import

        MS SQL Server Vulnerability Assessment can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:mssql/serverVulnerabilityAssessment:ServerVulnerabilityAssessment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/acceptanceTestResourceGroup1/providers/Microsoft.Sql/servers/mssqlserver/vulnerabilityAssessments/Default
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ServerVulnerabilityAssessmentRecurringScansArgs']] recurring_scans: The recurring scans settings. The `recurring_scans` block supports fields documented below.
        :param pulumi.Input[str] server_security_alert_policy_id: The id of the security alert policy of the MS SQL Server. Changing this forces a new resource to be created.
        :param pulumi.Input[str] storage_account_access_key: Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.
        :param pulumi.Input[str] storage_container_path: A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
        :param pulumi.Input[str] storage_container_sas_key: A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['recurring_scans'] = recurring_scans
            if server_security_alert_policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'server_security_alert_policy_id'")
            __props__['server_security_alert_policy_id'] = server_security_alert_policy_id
            __props__['storage_account_access_key'] = storage_account_access_key
            if storage_container_path is None and not opts.urn:
                raise TypeError("Missing required property 'storage_container_path'")
            __props__['storage_container_path'] = storage_container_path
            __props__['storage_container_sas_key'] = storage_container_sas_key
        super(ServerVulnerabilityAssessment, __self__).__init__(
            'azure:mssql/serverVulnerabilityAssessment:ServerVulnerabilityAssessment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            recurring_scans: Optional[pulumi.Input[pulumi.InputType['ServerVulnerabilityAssessmentRecurringScansArgs']]] = None,
            server_security_alert_policy_id: Optional[pulumi.Input[str]] = None,
            storage_account_access_key: Optional[pulumi.Input[str]] = None,
            storage_container_path: Optional[pulumi.Input[str]] = None,
            storage_container_sas_key: Optional[pulumi.Input[str]] = None) -> 'ServerVulnerabilityAssessment':
        """
        Get an existing ServerVulnerabilityAssessment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ServerVulnerabilityAssessmentRecurringScansArgs']] recurring_scans: The recurring scans settings. The `recurring_scans` block supports fields documented below.
        :param pulumi.Input[str] server_security_alert_policy_id: The id of the security alert policy of the MS SQL Server. Changing this forces a new resource to be created.
        :param pulumi.Input[str] storage_account_access_key: Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.
        :param pulumi.Input[str] storage_container_path: A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
        :param pulumi.Input[str] storage_container_sas_key: A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["recurring_scans"] = recurring_scans
        __props__["server_security_alert_policy_id"] = server_security_alert_policy_id
        __props__["storage_account_access_key"] = storage_account_access_key
        __props__["storage_container_path"] = storage_container_path
        __props__["storage_container_sas_key"] = storage_container_sas_key
        return ServerVulnerabilityAssessment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="recurringScans")
    def recurring_scans(self) -> pulumi.Output['outputs.ServerVulnerabilityAssessmentRecurringScans']:
        """
        The recurring scans settings. The `recurring_scans` block supports fields documented below.
        """
        return pulumi.get(self, "recurring_scans")

    @property
    @pulumi.getter(name="serverSecurityAlertPolicyId")
    def server_security_alert_policy_id(self) -> pulumi.Output[str]:
        """
        The id of the security alert policy of the MS SQL Server. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "server_security_alert_policy_id")

    @property
    @pulumi.getter(name="storageAccountAccessKey")
    def storage_account_access_key(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.
        """
        return pulumi.get(self, "storage_account_access_key")

    @property
    @pulumi.getter(name="storageContainerPath")
    def storage_container_path(self) -> pulumi.Output[str]:
        """
        A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
        """
        return pulumi.get(self, "storage_container_path")

    @property
    @pulumi.getter(name="storageContainerSasKey")
    def storage_container_sas_key(self) -> pulumi.Output[Optional[str]]:
        """
        A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.
        """
        return pulumi.get(self, "storage_container_sas_key")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

