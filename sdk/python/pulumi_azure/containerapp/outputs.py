# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AppDapr',
    'AppIdentity',
    'AppIngress',
    'AppIngressCustomDomain',
    'AppIngressTrafficWeight',
    'AppRegistry',
    'AppSecret',
    'AppTemplate',
    'AppTemplateAzureQueueScaleRule',
    'AppTemplateAzureQueueScaleRuleAuthentication',
    'AppTemplateContainer',
    'AppTemplateContainerEnv',
    'AppTemplateContainerLivenessProbe',
    'AppTemplateContainerLivenessProbeHeader',
    'AppTemplateContainerReadinessProbe',
    'AppTemplateContainerReadinessProbeHeader',
    'AppTemplateContainerStartupProbe',
    'AppTemplateContainerStartupProbeHeader',
    'AppTemplateContainerVolumeMount',
    'AppTemplateCustomScaleRule',
    'AppTemplateCustomScaleRuleAuthentication',
    'AppTemplateHttpScaleRule',
    'AppTemplateHttpScaleRuleAuthentication',
    'AppTemplateTcpScaleRule',
    'AppTemplateTcpScaleRuleAuthentication',
    'AppTemplateVolume',
    'EnvironmentDaprComponentMetadata',
    'EnvironmentDaprComponentSecret',
    'GetAppDaprResult',
    'GetAppIdentityResult',
    'GetAppIngressResult',
    'GetAppIngressCustomDomainResult',
    'GetAppIngressTrafficWeightResult',
    'GetAppRegistryResult',
    'GetAppSecretResult',
    'GetAppTemplateResult',
    'GetAppTemplateAzureQueueScaleRuleResult',
    'GetAppTemplateAzureQueueScaleRuleAuthenticationResult',
    'GetAppTemplateContainerResult',
    'GetAppTemplateContainerEnvResult',
    'GetAppTemplateContainerLivenessProbeResult',
    'GetAppTemplateContainerLivenessProbeHeaderResult',
    'GetAppTemplateContainerReadinessProbeResult',
    'GetAppTemplateContainerReadinessProbeHeaderResult',
    'GetAppTemplateContainerStartupProbeResult',
    'GetAppTemplateContainerStartupProbeHeaderResult',
    'GetAppTemplateContainerVolumeMountResult',
    'GetAppTemplateCustomScaleRuleResult',
    'GetAppTemplateCustomScaleRuleAuthenticationResult',
    'GetAppTemplateHttpScaleRuleResult',
    'GetAppTemplateHttpScaleRuleAuthenticationResult',
    'GetAppTemplateTcpScaleRuleResult',
    'GetAppTemplateTcpScaleRuleAuthenticationResult',
    'GetAppTemplateVolumeResult',
]

@pulumi.output_type
class AppDapr(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appId":
            suggest = "app_id"
        elif key == "appPort":
            suggest = "app_port"
        elif key == "appProtocol":
            suggest = "app_protocol"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppDapr. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppDapr.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppDapr.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_id: str,
                 app_port: Optional[int] = None,
                 app_protocol: Optional[str] = None):
        """
        :param str app_id: The Dapr Application Identifier.
        :param int app_port: The port which the application is listening on. This is the same as the `ingress` port.
        :param str app_protocol: The protocol for the app. Possible values include `http` and `grpc`. Defaults to `http`.
        """
        AppDapr._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            app_id=app_id,
            app_port=app_port,
            app_protocol=app_protocol,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             app_id: str,
             app_port: Optional[int] = None,
             app_protocol: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("app_id", app_id)
        if app_port is not None:
            _setter("app_port", app_port)
        if app_protocol is not None:
            _setter("app_protocol", app_protocol)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        The Dapr Application Identifier.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appPort")
    def app_port(self) -> Optional[int]:
        """
        The port which the application is listening on. This is the same as the `ingress` port.
        """
        return pulumi.get(self, "app_port")

    @property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> Optional[str]:
        """
        The protocol for the app. Possible values include `http` and `grpc`. Defaults to `http`.
        """
        return pulumi.get(self, "app_protocol")


@pulumi.output_type
class AppIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "identityIds":
            suggest = "identity_ids"
        elif key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 identity_ids: Optional[Sequence[str]] = None,
                 principal_id: Optional[str] = None,
                 tenant_id: Optional[str] = None):
        """
        :param str type: The type of managed identity to assign. Possible values are `SystemAssigned`, `UserAssigned`, and `SystemAssigned, UserAssigned` (to enable both).
        :param Sequence[str] identity_ids: A list of one or more Resource IDs for User Assigned Managed identities to assign. Required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
        """
        AppIdentity._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            identity_ids=identity_ids,
            principal_id=principal_id,
            tenant_id=tenant_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             identity_ids: Optional[Sequence[str]] = None,
             principal_id: Optional[str] = None,
             tenant_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if identity_ids is not None:
            _setter("identity_ids", identity_ids)
        if principal_id is not None:
            _setter("principal_id", principal_id)
        if tenant_id is not None:
            _setter("tenant_id", tenant_id)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of managed identity to assign. Possible values are `SystemAssigned`, `UserAssigned`, and `SystemAssigned, UserAssigned` (to enable both).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Optional[Sequence[str]]:
        """
        A list of one or more Resource IDs for User Assigned Managed identities to assign. Required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
        """
        return pulumi.get(self, "identity_ids")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[str]:
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class AppIngress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetPort":
            suggest = "target_port"
        elif key == "trafficWeights":
            suggest = "traffic_weights"
        elif key == "allowInsecureConnections":
            suggest = "allow_insecure_connections"
        elif key == "customDomain":
            suggest = "custom_domain"
        elif key == "externalEnabled":
            suggest = "external_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppIngress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppIngress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppIngress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target_port: int,
                 traffic_weights: Sequence['outputs.AppIngressTrafficWeight'],
                 allow_insecure_connections: Optional[bool] = None,
                 custom_domain: Optional['outputs.AppIngressCustomDomain'] = None,
                 external_enabled: Optional[bool] = None,
                 fqdn: Optional[str] = None,
                 transport: Optional[str] = None):
        """
        :param int target_port: The target port on the container for the Ingress traffic.
        :param Sequence['AppIngressTrafficWeightArgs'] traffic_weights: A `traffic_weight` block as detailed below.
               
               > **Note:** `traffic_weight` can only be specified when `revision_mode` is set to `Multiple`.
        :param bool allow_insecure_connections: Should this ingress allow insecure connections?
        :param 'AppIngressCustomDomainArgs' custom_domain: One or more `custom_domain` block as detailed below.
        :param bool external_enabled: Are connections to this Ingress from outside the Container App Environment enabled? Defaults to `false`.
        :param str fqdn: The FQDN of the ingress.
        :param str transport: The transport method for the Ingress. Possible values include `auto`, `http`, and `http2`. Defaults to `auto`
        """
        AppIngress._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target_port=target_port,
            traffic_weights=traffic_weights,
            allow_insecure_connections=allow_insecure_connections,
            custom_domain=custom_domain,
            external_enabled=external_enabled,
            fqdn=fqdn,
            transport=transport,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target_port: int,
             traffic_weights: Sequence['outputs.AppIngressTrafficWeight'],
             allow_insecure_connections: Optional[bool] = None,
             custom_domain: Optional['outputs.AppIngressCustomDomain'] = None,
             external_enabled: Optional[bool] = None,
             fqdn: Optional[str] = None,
             transport: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("target_port", target_port)
        _setter("traffic_weights", traffic_weights)
        if allow_insecure_connections is not None:
            _setter("allow_insecure_connections", allow_insecure_connections)
        if custom_domain is not None:
            _setter("custom_domain", custom_domain)
        if external_enabled is not None:
            _setter("external_enabled", external_enabled)
        if fqdn is not None:
            _setter("fqdn", fqdn)
        if transport is not None:
            _setter("transport", transport)

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> int:
        """
        The target port on the container for the Ingress traffic.
        """
        return pulumi.get(self, "target_port")

    @property
    @pulumi.getter(name="trafficWeights")
    def traffic_weights(self) -> Sequence['outputs.AppIngressTrafficWeight']:
        """
        A `traffic_weight` block as detailed below.

        > **Note:** `traffic_weight` can only be specified when `revision_mode` is set to `Multiple`.
        """
        return pulumi.get(self, "traffic_weights")

    @property
    @pulumi.getter(name="allowInsecureConnections")
    def allow_insecure_connections(self) -> Optional[bool]:
        """
        Should this ingress allow insecure connections?
        """
        return pulumi.get(self, "allow_insecure_connections")

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional['outputs.AppIngressCustomDomain']:
        """
        One or more `custom_domain` block as detailed below.
        """
        return pulumi.get(self, "custom_domain")

    @property
    @pulumi.getter(name="externalEnabled")
    def external_enabled(self) -> Optional[bool]:
        """
        Are connections to this Ingress from outside the Container App Environment enabled? Defaults to `false`.
        """
        return pulumi.get(self, "external_enabled")

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[str]:
        """
        The FQDN of the ingress.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def transport(self) -> Optional[str]:
        """
        The transport method for the Ingress. Possible values include `auto`, `http`, and `http2`. Defaults to `auto`
        """
        return pulumi.get(self, "transport")


@pulumi.output_type
class AppIngressCustomDomain(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateId":
            suggest = "certificate_id"
        elif key == "certificateBindingType":
            suggest = "certificate_binding_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppIngressCustomDomain. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppIngressCustomDomain.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppIngressCustomDomain.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_id: str,
                 name: str,
                 certificate_binding_type: Optional[str] = None):
        """
        :param str certificate_id: The ID of the Container App Environment Certificate.
        :param str name: The hostname of the Certificate. Must be the CN or a named SAN in the certificate.
        :param str certificate_binding_type: The Binding type. Possible values include `Disabled` and `SniEnabled`. Defaults to `Disabled`.
        """
        AppIngressCustomDomain._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            certificate_id=certificate_id,
            name=name,
            certificate_binding_type=certificate_binding_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             certificate_id: str,
             name: str,
             certificate_binding_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("certificate_id", certificate_id)
        _setter("name", name)
        if certificate_binding_type is not None:
            _setter("certificate_binding_type", certificate_binding_type)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        """
        The ID of the Container App Environment Certificate.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The hostname of the Certificate. Must be the CN or a named SAN in the certificate.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="certificateBindingType")
    def certificate_binding_type(self) -> Optional[str]:
        """
        The Binding type. Possible values include `Disabled` and `SniEnabled`. Defaults to `Disabled`.
        """
        return pulumi.get(self, "certificate_binding_type")


@pulumi.output_type
class AppIngressTrafficWeight(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "latestRevision":
            suggest = "latest_revision"
        elif key == "revisionSuffix":
            suggest = "revision_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppIngressTrafficWeight. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppIngressTrafficWeight.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppIngressTrafficWeight.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 percentage: int,
                 label: Optional[str] = None,
                 latest_revision: Optional[bool] = None,
                 revision_suffix: Optional[str] = None):
        """
        :param int percentage: The percentage of traffic which should be sent this revision.
               
               > **Note:** The cumulative values for `weight` must equal 100 exactly and explicitly, no default weights are assumed.
        :param str label: The label to apply to the revision as a name prefix for routing traffic.
        :param bool latest_revision: This traffic Weight relates to the latest stable Container Revision.
        :param str revision_suffix: The suffix string to which this `traffic_weight` applies.
        """
        AppIngressTrafficWeight._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            percentage=percentage,
            label=label,
            latest_revision=latest_revision,
            revision_suffix=revision_suffix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             percentage: int,
             label: Optional[str] = None,
             latest_revision: Optional[bool] = None,
             revision_suffix: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("percentage", percentage)
        if label is not None:
            _setter("label", label)
        if latest_revision is not None:
            _setter("latest_revision", latest_revision)
        if revision_suffix is not None:
            _setter("revision_suffix", revision_suffix)

    @property
    @pulumi.getter
    def percentage(self) -> int:
        """
        The percentage of traffic which should be sent this revision.

        > **Note:** The cumulative values for `weight` must equal 100 exactly and explicitly, no default weights are assumed.
        """
        return pulumi.get(self, "percentage")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        """
        The label to apply to the revision as a name prefix for routing traffic.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="latestRevision")
    def latest_revision(self) -> Optional[bool]:
        """
        This traffic Weight relates to the latest stable Container Revision.
        """
        return pulumi.get(self, "latest_revision")

    @property
    @pulumi.getter(name="revisionSuffix")
    def revision_suffix(self) -> Optional[str]:
        """
        The suffix string to which this `traffic_weight` applies.
        """
        return pulumi.get(self, "revision_suffix")


@pulumi.output_type
class AppRegistry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordSecretName":
            suggest = "password_secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppRegistry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppRegistry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppRegistry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 server: str,
                 identity: Optional[str] = None,
                 password_secret_name: Optional[str] = None,
                 username: Optional[str] = None):
        """
        :param str server: The hostname for the Container Registry.
               
               The authentication details must also be supplied, `identity` and `username`/`password_secret_name` are mutually exclusive.
        :param str identity: Resource ID for the User Assigned Managed identity to use when pulling from the Container Registry.
        :param str password_secret_name: The name of the Secret Reference containing the password value for this user on the Container Registry, `username` must also be supplied.
        :param str username: The username to use for this Container Registry, `password_secret_name` must also be supplied..
        """
        AppRegistry._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            server=server,
            identity=identity,
            password_secret_name=password_secret_name,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             server: str,
             identity: Optional[str] = None,
             password_secret_name: Optional[str] = None,
             username: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("server", server)
        if identity is not None:
            _setter("identity", identity)
        if password_secret_name is not None:
            _setter("password_secret_name", password_secret_name)
        if username is not None:
            _setter("username", username)

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        The hostname for the Container Registry.

        The authentication details must also be supplied, `identity` and `username`/`password_secret_name` are mutually exclusive.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter
    def identity(self) -> Optional[str]:
        """
        Resource ID for the User Assigned Managed identity to use when pulling from the Container Registry.
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter(name="passwordSecretName")
    def password_secret_name(self) -> Optional[str]:
        """
        The name of the Secret Reference containing the password value for this user on the Container Registry, `username` must also be supplied.
        """
        return pulumi.get(self, "password_secret_name")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        The username to use for this Container Registry, `password_secret_name` must also be supplied..
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class AppSecret(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: The Secret name.
        :param str value: The value for this secret.
               
               !> **Note:** Secrets cannot be removed from the service once added, attempting to do so will result in an error. Their values may be zeroed, i.e. set to `""`, but the named secret must persist. This is due to a technical limitation on the service which causes the service to become unmanageable. See [this issue](https://github.com/microsoft/azure-container-apps/issues/395) for more details.
        """
        AppSecret._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Secret name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for this secret.

        !> **Note:** Secrets cannot be removed from the service once added, attempting to do so will result in an error. Their values may be zeroed, i.e. set to `""`, but the named secret must persist. This is due to a technical limitation on the service which causes the service to become unmanageable. See [this issue](https://github.com/microsoft/azure-container-apps/issues/395) for more details.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AppTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureQueueScaleRules":
            suggest = "azure_queue_scale_rules"
        elif key == "customScaleRules":
            suggest = "custom_scale_rules"
        elif key == "httpScaleRules":
            suggest = "http_scale_rules"
        elif key == "maxReplicas":
            suggest = "max_replicas"
        elif key == "minReplicas":
            suggest = "min_replicas"
        elif key == "revisionSuffix":
            suggest = "revision_suffix"
        elif key == "tcpScaleRules":
            suggest = "tcp_scale_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 containers: Sequence['outputs.AppTemplateContainer'],
                 azure_queue_scale_rules: Optional[Sequence['outputs.AppTemplateAzureQueueScaleRule']] = None,
                 custom_scale_rules: Optional[Sequence['outputs.AppTemplateCustomScaleRule']] = None,
                 http_scale_rules: Optional[Sequence['outputs.AppTemplateHttpScaleRule']] = None,
                 max_replicas: Optional[int] = None,
                 min_replicas: Optional[int] = None,
                 revision_suffix: Optional[str] = None,
                 tcp_scale_rules: Optional[Sequence['outputs.AppTemplateTcpScaleRule']] = None,
                 volumes: Optional[Sequence['outputs.AppTemplateVolume']] = None):
        """
        :param Sequence['AppTemplateContainerArgs'] containers: One or more `container` blocks as detailed below.
        :param Sequence['AppTemplateAzureQueueScaleRuleArgs'] azure_queue_scale_rules: One or more `azure_queue_scale_rule` blocks as defined below.
        :param Sequence['AppTemplateCustomScaleRuleArgs'] custom_scale_rules: One or more `custom_scale_rule` blocks as defined below.
        :param Sequence['AppTemplateHttpScaleRuleArgs'] http_scale_rules: One or more `http_scale_rule` blocks as defined below.
        :param int max_replicas: The maximum number of replicas for this container.
        :param int min_replicas: The minimum number of replicas for this container.
        :param str revision_suffix: The suffix for the revision. This value must be unique for the lifetime of the Resource. If omitted the service will use a hash function to create one.
        :param Sequence['AppTemplateTcpScaleRuleArgs'] tcp_scale_rules: One or more `tcp_scale_rule` blocks as defined below.
        :param Sequence['AppTemplateVolumeArgs'] volumes: A `volume` block as detailed below.
        """
        AppTemplate._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            containers=containers,
            azure_queue_scale_rules=azure_queue_scale_rules,
            custom_scale_rules=custom_scale_rules,
            http_scale_rules=http_scale_rules,
            max_replicas=max_replicas,
            min_replicas=min_replicas,
            revision_suffix=revision_suffix,
            tcp_scale_rules=tcp_scale_rules,
            volumes=volumes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             containers: Sequence['outputs.AppTemplateContainer'],
             azure_queue_scale_rules: Optional[Sequence['outputs.AppTemplateAzureQueueScaleRule']] = None,
             custom_scale_rules: Optional[Sequence['outputs.AppTemplateCustomScaleRule']] = None,
             http_scale_rules: Optional[Sequence['outputs.AppTemplateHttpScaleRule']] = None,
             max_replicas: Optional[int] = None,
             min_replicas: Optional[int] = None,
             revision_suffix: Optional[str] = None,
             tcp_scale_rules: Optional[Sequence['outputs.AppTemplateTcpScaleRule']] = None,
             volumes: Optional[Sequence['outputs.AppTemplateVolume']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("containers", containers)
        if azure_queue_scale_rules is not None:
            _setter("azure_queue_scale_rules", azure_queue_scale_rules)
        if custom_scale_rules is not None:
            _setter("custom_scale_rules", custom_scale_rules)
        if http_scale_rules is not None:
            _setter("http_scale_rules", http_scale_rules)
        if max_replicas is not None:
            _setter("max_replicas", max_replicas)
        if min_replicas is not None:
            _setter("min_replicas", min_replicas)
        if revision_suffix is not None:
            _setter("revision_suffix", revision_suffix)
        if tcp_scale_rules is not None:
            _setter("tcp_scale_rules", tcp_scale_rules)
        if volumes is not None:
            _setter("volumes", volumes)

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.AppTemplateContainer']:
        """
        One or more `container` blocks as detailed below.
        """
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="azureQueueScaleRules")
    def azure_queue_scale_rules(self) -> Optional[Sequence['outputs.AppTemplateAzureQueueScaleRule']]:
        """
        One or more `azure_queue_scale_rule` blocks as defined below.
        """
        return pulumi.get(self, "azure_queue_scale_rules")

    @property
    @pulumi.getter(name="customScaleRules")
    def custom_scale_rules(self) -> Optional[Sequence['outputs.AppTemplateCustomScaleRule']]:
        """
        One or more `custom_scale_rule` blocks as defined below.
        """
        return pulumi.get(self, "custom_scale_rules")

    @property
    @pulumi.getter(name="httpScaleRules")
    def http_scale_rules(self) -> Optional[Sequence['outputs.AppTemplateHttpScaleRule']]:
        """
        One or more `http_scale_rule` blocks as defined below.
        """
        return pulumi.get(self, "http_scale_rules")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[int]:
        """
        The maximum number of replicas for this container.
        """
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[int]:
        """
        The minimum number of replicas for this container.
        """
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter(name="revisionSuffix")
    def revision_suffix(self) -> Optional[str]:
        """
        The suffix for the revision. This value must be unique for the lifetime of the Resource. If omitted the service will use a hash function to create one.
        """
        return pulumi.get(self, "revision_suffix")

    @property
    @pulumi.getter(name="tcpScaleRules")
    def tcp_scale_rules(self) -> Optional[Sequence['outputs.AppTemplateTcpScaleRule']]:
        """
        One or more `tcp_scale_rule` blocks as defined below.
        """
        return pulumi.get(self, "tcp_scale_rules")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.AppTemplateVolume']]:
        """
        A `volume` block as detailed below.
        """
        return pulumi.get(self, "volumes")


@pulumi.output_type
class AppTemplateAzureQueueScaleRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queueLength":
            suggest = "queue_length"
        elif key == "queueName":
            suggest = "queue_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppTemplateAzureQueueScaleRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppTemplateAzureQueueScaleRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppTemplateAzureQueueScaleRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentications: Sequence['outputs.AppTemplateAzureQueueScaleRuleAuthentication'],
                 name: str,
                 queue_length: int,
                 queue_name: str):
        """
        :param Sequence['AppTemplateAzureQueueScaleRuleAuthenticationArgs'] authentications: One or more `authentication` blocks as defined below.
        :param str name: The name of the Scaling Rule
        :param int queue_length: The value of the length of the queue to trigger scaling actions.
        :param str queue_name: The name of the Azure Queue
        """
        AppTemplateAzureQueueScaleRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            authentications=authentications,
            name=name,
            queue_length=queue_length,
            queue_name=queue_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             authentications: Sequence['outputs.AppTemplateAzureQueueScaleRuleAuthentication'],
             name: str,
             queue_length: int,
             queue_name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("authentications", authentications)
        _setter("name", name)
        _setter("queue_length", queue_length)
        _setter("queue_name", queue_name)

    @property
    @pulumi.getter
    def authentications(self) -> Sequence['outputs.AppTemplateAzureQueueScaleRuleAuthentication']:
        """
        One or more `authentication` blocks as defined below.
        """
        return pulumi.get(self, "authentications")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Scaling Rule
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="queueLength")
    def queue_length(self) -> int:
        """
        The value of the length of the queue to trigger scaling actions.
        """
        return pulumi.get(self, "queue_length")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> str:
        """
        The name of the Azure Queue
        """
        return pulumi.get(self, "queue_name")


@pulumi.output_type
class AppTemplateAzureQueueScaleRuleAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"
        elif key == "triggerParameter":
            suggest = "trigger_parameter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppTemplateAzureQueueScaleRuleAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppTemplateAzureQueueScaleRuleAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppTemplateAzureQueueScaleRuleAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secret_name: str,
                 trigger_parameter: str):
        """
        :param str secret_name: The name of the Container App Secret to use for this Scale Rule Authentication.
        :param str trigger_parameter: The Trigger Parameter name to use the supply the value retrieved from the `secret_name`.
        """
        AppTemplateAzureQueueScaleRuleAuthentication._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            secret_name=secret_name,
            trigger_parameter=trigger_parameter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             secret_name: str,
             trigger_parameter: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("secret_name", secret_name)
        _setter("trigger_parameter", trigger_parameter)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        The name of the Container App Secret to use for this Scale Rule Authentication.
        """
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="triggerParameter")
    def trigger_parameter(self) -> str:
        """
        The Trigger Parameter name to use the supply the value retrieved from the `secret_name`.
        """
        return pulumi.get(self, "trigger_parameter")


@pulumi.output_type
class AppTemplateContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ephemeralStorage":
            suggest = "ephemeral_storage"
        elif key == "livenessProbes":
            suggest = "liveness_probes"
        elif key == "readinessProbes":
            suggest = "readiness_probes"
        elif key == "startupProbes":
            suggest = "startup_probes"
        elif key == "volumeMounts":
            suggest = "volume_mounts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppTemplateContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppTemplateContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppTemplateContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu: float,
                 image: str,
                 memory: str,
                 name: str,
                 args: Optional[Sequence[str]] = None,
                 commands: Optional[Sequence[str]] = None,
                 envs: Optional[Sequence['outputs.AppTemplateContainerEnv']] = None,
                 ephemeral_storage: Optional[str] = None,
                 liveness_probes: Optional[Sequence['outputs.AppTemplateContainerLivenessProbe']] = None,
                 readiness_probes: Optional[Sequence['outputs.AppTemplateContainerReadinessProbe']] = None,
                 startup_probes: Optional[Sequence['outputs.AppTemplateContainerStartupProbe']] = None,
                 volume_mounts: Optional[Sequence['outputs.AppTemplateContainerVolumeMount']] = None):
        """
        :param float cpu: The amount of vCPU to allocate to the container. Possible values include `0.25`, `0.5`, `0.75`, `1.0`, `1.25`, `1.5`, `1.75`, and `2.0`. 
               
               > **NOTE:** `cpu` and `memory` must be specified in `0.25'/'0.5Gi` combination increments. e.g. `1.0` / `2.0` or `0.5` / `1.0`
        :param str image: The image to use to create the container.
        :param str memory: The amount of memory to allocate to the container. Possible values include `0.5Gi`, `1.0Gi`, `1.5Gi`, `2.0Gi`, `2.5Gi`, `3.0Gi`, `3.5Gi`, and `4.0Gi`. 
               
               > **NOTE:** `cpu` and `memory` must be specified in `0.25'/'0.5Gi` combination increments. e.g. `1.25` / `2.5Gi` or `0.75` / `1.5Gi`
        :param str name: The name of the container
        :param Sequence[str] args: A list of extra arguments to pass to the container.
        :param Sequence[str] commands: A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
        :param Sequence['AppTemplateContainerEnvArgs'] envs: One or more `env` blocks as detailed below.
        :param str ephemeral_storage: The amount of ephemeral storage available to the Container App. 
               
               > **NOTE:** `ephemeral_storage` is currently in preview and not configurable at this time.
        :param Sequence['AppTemplateContainerLivenessProbeArgs'] liveness_probes: A `liveness_probe` block as detailed below.
        :param Sequence['AppTemplateContainerReadinessProbeArgs'] readiness_probes: A `readiness_probe` block as detailed below.
        :param Sequence['AppTemplateContainerStartupProbeArgs'] startup_probes: A `startup_probe` block as detailed below.
        :param Sequence['AppTemplateContainerVolumeMountArgs'] volume_mounts: A `volume_mounts` block as detailed below.
        """
        AppTemplateContainer._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cpu=cpu,
            image=image,
            memory=memory,
            name=name,
            args=args,
            commands=commands,
            envs=envs,
            ephemeral_storage=ephemeral_storage,
            liveness_probes=liveness_probes,
            readiness_probes=readiness_probes,
            startup_probes=startup_probes,
            volume_mounts=volume_mounts,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cpu: float,
             image: str,
             memory: str,
             name: str,
             args: Optional[Sequence[str]] = None,
             commands: Optional[Sequence[str]] = None,
             envs: Optional[Sequence['outputs.AppTemplateContainerEnv']] = None,
             ephemeral_storage: Optional[str] = None,
             liveness_probes: Optional[Sequence['outputs.AppTemplateContainerLivenessProbe']] = None,
             readiness_probes: Optional[Sequence['outputs.AppTemplateContainerReadinessProbe']] = None,
             startup_probes: Optional[Sequence['outputs.AppTemplateContainerStartupProbe']] = None,
             volume_mounts: Optional[Sequence['outputs.AppTemplateContainerVolumeMount']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("cpu", cpu)
        _setter("image", image)
        _setter("memory", memory)
        _setter("name", name)
        if args is not None:
            _setter("args", args)
        if commands is not None:
            _setter("commands", commands)
        if envs is not None:
            _setter("envs", envs)
        if ephemeral_storage is not None:
            _setter("ephemeral_storage", ephemeral_storage)
        if liveness_probes is not None:
            _setter("liveness_probes", liveness_probes)
        if readiness_probes is not None:
            _setter("readiness_probes", readiness_probes)
        if startup_probes is not None:
            _setter("startup_probes", startup_probes)
        if volume_mounts is not None:
            _setter("volume_mounts", volume_mounts)

    @property
    @pulumi.getter
    def cpu(self) -> float:
        """
        The amount of vCPU to allocate to the container. Possible values include `0.25`, `0.5`, `0.75`, `1.0`, `1.25`, `1.5`, `1.75`, and `2.0`. 

        > **NOTE:** `cpu` and `memory` must be specified in `0.25'/'0.5Gi` combination increments. e.g. `1.0` / `2.0` or `0.5` / `1.0`
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def image(self) -> str:
        """
        The image to use to create the container.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def memory(self) -> str:
        """
        The amount of memory to allocate to the container. Possible values include `0.5Gi`, `1.0Gi`, `1.5Gi`, `2.0Gi`, `2.5Gi`, `3.0Gi`, `3.5Gi`, and `4.0Gi`. 

        > **NOTE:** `cpu` and `memory` must be specified in `0.25'/'0.5Gi` combination increments. e.g. `1.25` / `2.5Gi` or `0.75` / `1.5Gi`
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the container
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        """
        A list of extra arguments to pass to the container.
        """
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[str]]:
        """
        A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.AppTemplateContainerEnv']]:
        """
        One or more `env` blocks as detailed below.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter(name="ephemeralStorage")
    def ephemeral_storage(self) -> Optional[str]:
        """
        The amount of ephemeral storage available to the Container App. 

        > **NOTE:** `ephemeral_storage` is currently in preview and not configurable at this time.
        """
        return pulumi.get(self, "ephemeral_storage")

    @property
    @pulumi.getter(name="livenessProbes")
    def liveness_probes(self) -> Optional[Sequence['outputs.AppTemplateContainerLivenessProbe']]:
        """
        A `liveness_probe` block as detailed below.
        """
        return pulumi.get(self, "liveness_probes")

    @property
    @pulumi.getter(name="readinessProbes")
    def readiness_probes(self) -> Optional[Sequence['outputs.AppTemplateContainerReadinessProbe']]:
        """
        A `readiness_probe` block as detailed below.
        """
        return pulumi.get(self, "readiness_probes")

    @property
    @pulumi.getter(name="startupProbes")
    def startup_probes(self) -> Optional[Sequence['outputs.AppTemplateContainerStartupProbe']]:
        """
        A `startup_probe` block as detailed below.
        """
        return pulumi.get(self, "startup_probes")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.AppTemplateContainerVolumeMount']]:
        """
        A `volume_mounts` block as detailed below.
        """
        return pulumi.get(self, "volume_mounts")


@pulumi.output_type
class AppTemplateContainerEnv(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppTemplateContainerEnv. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppTemplateContainerEnv.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppTemplateContainerEnv.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 secret_name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: The name of the environment variable for the container.
        :param str secret_name: The name of the secret that contains the value for this environment variable.
        :param str value: The value for this environment variable.
               
               > **NOTE:** This value is ignored if `secret_name` is used
        """
        AppTemplateContainerEnv._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            secret_name=secret_name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             secret_name: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if secret_name is not None:
            _setter("secret_name", secret_name)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the environment variable for the container.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        """
        The name of the secret that contains the value for this environment variable.
        """
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value for this environment variable.

        > **NOTE:** This value is ignored if `secret_name` is used
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AppTemplateContainerLivenessProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureCountThreshold":
            suggest = "failure_count_threshold"
        elif key == "initialDelay":
            suggest = "initial_delay"
        elif key == "intervalSeconds":
            suggest = "interval_seconds"
        elif key == "terminationGracePeriodSeconds":
            suggest = "termination_grace_period_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppTemplateContainerLivenessProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppTemplateContainerLivenessProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppTemplateContainerLivenessProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: int,
                 transport: str,
                 failure_count_threshold: Optional[int] = None,
                 headers: Optional[Sequence['outputs.AppTemplateContainerLivenessProbeHeader']] = None,
                 host: Optional[str] = None,
                 initial_delay: Optional[int] = None,
                 interval_seconds: Optional[int] = None,
                 path: Optional[str] = None,
                 termination_grace_period_seconds: Optional[int] = None,
                 timeout: Optional[int] = None):
        """
        :param int port: The port number on which to connect. Possible values are between `1` and `65535`.
        :param str transport: Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
        :param int failure_count_threshold: The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.
        :param Sequence['AppTemplateContainerLivenessProbeHeaderArgs'] headers: A `header` block as detailed below.
        :param str host: The probe hostname. Defaults to the pod IP address. Setting a value for `Host` in `headers` can be used to override this for `HTTP` and `HTTPS` type probes.
        :param int initial_delay: The time in seconds to wait after the container has started before the probe is started.
        :param int interval_seconds: How often, in seconds, the probe should run. Possible values are in the range `1` - `240`. Defaults to `10`.
        :param str path: The URI to use with the `host` for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
        :param int termination_grace_period_seconds: The time in seconds after the container is sent the termination signal before the process if forcibly killed.
        :param int timeout: Time in seconds after which the probe times out. Possible values are in the range `1` - `240`. Defaults to `1`.
        """
        AppTemplateContainerLivenessProbe._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            port=port,
            transport=transport,
            failure_count_threshold=failure_count_threshold,
            headers=headers,
            host=host,
            initial_delay=initial_delay,
            interval_seconds=interval_seconds,
            path=path,
            termination_grace_period_seconds=termination_grace_period_seconds,
            timeout=timeout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             port: int,
             transport: str,
             failure_count_threshold: Optional[int] = None,
             headers: Optional[Sequence['outputs.AppTemplateContainerLivenessProbeHeader']] = None,
             host: Optional[str] = None,
             initial_delay: Optional[int] = None,
             interval_seconds: Optional[int] = None,
             path: Optional[str] = None,
             termination_grace_period_seconds: Optional[int] = None,
             timeout: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("port", port)
        _setter("transport", transport)
        if failure_count_threshold is not None:
            _setter("failure_count_threshold", failure_count_threshold)
        if headers is not None:
            _setter("headers", headers)
        if host is not None:
            _setter("host", host)
        if initial_delay is not None:
            _setter("initial_delay", initial_delay)
        if interval_seconds is not None:
            _setter("interval_seconds", interval_seconds)
        if path is not None:
            _setter("path", path)
        if termination_grace_period_seconds is not None:
            _setter("termination_grace_period_seconds", termination_grace_period_seconds)
        if timeout is not None:
            _setter("timeout", timeout)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port number on which to connect. Possible values are between `1` and `65535`.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def transport(self) -> str:
        """
        Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
        """
        return pulumi.get(self, "transport")

    @property
    @pulumi.getter(name="failureCountThreshold")
    def failure_count_threshold(self) -> Optional[int]:
        """
        The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.
        """
        return pulumi.get(self, "failure_count_threshold")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.AppTemplateContainerLivenessProbeHeader']]:
        """
        A `header` block as detailed below.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        The probe hostname. Defaults to the pod IP address. Setting a value for `Host` in `headers` can be used to override this for `HTTP` and `HTTPS` type probes.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="initialDelay")
    def initial_delay(self) -> Optional[int]:
        """
        The time in seconds to wait after the container has started before the probe is started.
        """
        return pulumi.get(self, "initial_delay")

    @property
    @pulumi.getter(name="intervalSeconds")
    def interval_seconds(self) -> Optional[int]:
        """
        How often, in seconds, the probe should run. Possible values are in the range `1` - `240`. Defaults to `10`.
        """
        return pulumi.get(self, "interval_seconds")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        The URI to use with the `host` for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[int]:
        """
        The time in seconds after the container is sent the termination signal before the process if forcibly killed.
        """
        return pulumi.get(self, "termination_grace_period_seconds")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        Time in seconds after which the probe times out. Possible values are in the range `1` - `240`. Defaults to `1`.
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class AppTemplateContainerLivenessProbeHeader(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: The HTTP Header Name.
        :param str value: The HTTP Header value.
        """
        AppTemplateContainerLivenessProbeHeader._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The HTTP Header Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The HTTP Header value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AppTemplateContainerReadinessProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureCountThreshold":
            suggest = "failure_count_threshold"
        elif key == "intervalSeconds":
            suggest = "interval_seconds"
        elif key == "successCountThreshold":
            suggest = "success_count_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppTemplateContainerReadinessProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppTemplateContainerReadinessProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppTemplateContainerReadinessProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: int,
                 transport: str,
                 failure_count_threshold: Optional[int] = None,
                 headers: Optional[Sequence['outputs.AppTemplateContainerReadinessProbeHeader']] = None,
                 host: Optional[str] = None,
                 interval_seconds: Optional[int] = None,
                 path: Optional[str] = None,
                 success_count_threshold: Optional[int] = None,
                 timeout: Optional[int] = None):
        """
        :param int port: The port number on which to connect. Possible values are between `1` and `65535`.
        :param str transport: Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
        :param int failure_count_threshold: The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.
        :param Sequence['AppTemplateContainerReadinessProbeHeaderArgs'] headers: A `header` block as detailed below.
        :param str host: The probe hostname. Defaults to the pod IP address. Setting a value for `Host` in `headers` can be used to override this for `HTTP` and `HTTPS` type probes.
        :param int interval_seconds: How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
        :param str path: The URI to use for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
        :param int success_count_threshold: The number of consecutive successful responses required to consider this probe as successful. Possible values are between `1` and `10`. Defaults to `3`.
        :param int timeout: Time in seconds after which the probe times out. Possible values are in the range `1` - `240`. Defaults to `1`.
        """
        AppTemplateContainerReadinessProbe._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            port=port,
            transport=transport,
            failure_count_threshold=failure_count_threshold,
            headers=headers,
            host=host,
            interval_seconds=interval_seconds,
            path=path,
            success_count_threshold=success_count_threshold,
            timeout=timeout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             port: int,
             transport: str,
             failure_count_threshold: Optional[int] = None,
             headers: Optional[Sequence['outputs.AppTemplateContainerReadinessProbeHeader']] = None,
             host: Optional[str] = None,
             interval_seconds: Optional[int] = None,
             path: Optional[str] = None,
             success_count_threshold: Optional[int] = None,
             timeout: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("port", port)
        _setter("transport", transport)
        if failure_count_threshold is not None:
            _setter("failure_count_threshold", failure_count_threshold)
        if headers is not None:
            _setter("headers", headers)
        if host is not None:
            _setter("host", host)
        if interval_seconds is not None:
            _setter("interval_seconds", interval_seconds)
        if path is not None:
            _setter("path", path)
        if success_count_threshold is not None:
            _setter("success_count_threshold", success_count_threshold)
        if timeout is not None:
            _setter("timeout", timeout)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port number on which to connect. Possible values are between `1` and `65535`.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def transport(self) -> str:
        """
        Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
        """
        return pulumi.get(self, "transport")

    @property
    @pulumi.getter(name="failureCountThreshold")
    def failure_count_threshold(self) -> Optional[int]:
        """
        The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.
        """
        return pulumi.get(self, "failure_count_threshold")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.AppTemplateContainerReadinessProbeHeader']]:
        """
        A `header` block as detailed below.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        The probe hostname. Defaults to the pod IP address. Setting a value for `Host` in `headers` can be used to override this for `HTTP` and `HTTPS` type probes.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="intervalSeconds")
    def interval_seconds(self) -> Optional[int]:
        """
        How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
        """
        return pulumi.get(self, "interval_seconds")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        The URI to use for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="successCountThreshold")
    def success_count_threshold(self) -> Optional[int]:
        """
        The number of consecutive successful responses required to consider this probe as successful. Possible values are between `1` and `10`. Defaults to `3`.
        """
        return pulumi.get(self, "success_count_threshold")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        Time in seconds after which the probe times out. Possible values are in the range `1` - `240`. Defaults to `1`.
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class AppTemplateContainerReadinessProbeHeader(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: The HTTP Header Name.
        :param str value: The HTTP Header value.
        """
        AppTemplateContainerReadinessProbeHeader._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The HTTP Header Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The HTTP Header value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AppTemplateContainerStartupProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureCountThreshold":
            suggest = "failure_count_threshold"
        elif key == "intervalSeconds":
            suggest = "interval_seconds"
        elif key == "terminationGracePeriodSeconds":
            suggest = "termination_grace_period_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppTemplateContainerStartupProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppTemplateContainerStartupProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppTemplateContainerStartupProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: int,
                 transport: str,
                 failure_count_threshold: Optional[int] = None,
                 headers: Optional[Sequence['outputs.AppTemplateContainerStartupProbeHeader']] = None,
                 host: Optional[str] = None,
                 interval_seconds: Optional[int] = None,
                 path: Optional[str] = None,
                 termination_grace_period_seconds: Optional[int] = None,
                 timeout: Optional[int] = None):
        """
        :param int port: The port number on which to connect. Possible values are between `1` and `65535`.
        :param str transport: Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
        :param int failure_count_threshold: The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.
        :param Sequence['AppTemplateContainerStartupProbeHeaderArgs'] headers: A `header` block as detailed below.
        :param str host: The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for `Host` in `headers` can be used to override this for `HTTP` and `HTTPS` type probes.
        :param int interval_seconds: How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
        :param str path: The URI to use with the `host` for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
        :param int termination_grace_period_seconds: The time in seconds after the container is sent the termination signal before the process if forcibly killed.
        :param int timeout: Time in seconds after which the probe times out. Possible values are in the range `1` - `240`. Defaults to `1`.
        """
        AppTemplateContainerStartupProbe._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            port=port,
            transport=transport,
            failure_count_threshold=failure_count_threshold,
            headers=headers,
            host=host,
            interval_seconds=interval_seconds,
            path=path,
            termination_grace_period_seconds=termination_grace_period_seconds,
            timeout=timeout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             port: int,
             transport: str,
             failure_count_threshold: Optional[int] = None,
             headers: Optional[Sequence['outputs.AppTemplateContainerStartupProbeHeader']] = None,
             host: Optional[str] = None,
             interval_seconds: Optional[int] = None,
             path: Optional[str] = None,
             termination_grace_period_seconds: Optional[int] = None,
             timeout: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("port", port)
        _setter("transport", transport)
        if failure_count_threshold is not None:
            _setter("failure_count_threshold", failure_count_threshold)
        if headers is not None:
            _setter("headers", headers)
        if host is not None:
            _setter("host", host)
        if interval_seconds is not None:
            _setter("interval_seconds", interval_seconds)
        if path is not None:
            _setter("path", path)
        if termination_grace_period_seconds is not None:
            _setter("termination_grace_period_seconds", termination_grace_period_seconds)
        if timeout is not None:
            _setter("timeout", timeout)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port number on which to connect. Possible values are between `1` and `65535`.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def transport(self) -> str:
        """
        Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
        """
        return pulumi.get(self, "transport")

    @property
    @pulumi.getter(name="failureCountThreshold")
    def failure_count_threshold(self) -> Optional[int]:
        """
        The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.
        """
        return pulumi.get(self, "failure_count_threshold")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.AppTemplateContainerStartupProbeHeader']]:
        """
        A `header` block as detailed below.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for `Host` in `headers` can be used to override this for `HTTP` and `HTTPS` type probes.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="intervalSeconds")
    def interval_seconds(self) -> Optional[int]:
        """
        How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
        """
        return pulumi.get(self, "interval_seconds")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        The URI to use with the `host` for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[int]:
        """
        The time in seconds after the container is sent the termination signal before the process if forcibly killed.
        """
        return pulumi.get(self, "termination_grace_period_seconds")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        Time in seconds after which the probe times out. Possible values are in the range `1` - `240`. Defaults to `1`.
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class AppTemplateContainerStartupProbeHeader(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: The HTTP Header Name.
        :param str value: The HTTP Header value.
        """
        AppTemplateContainerStartupProbeHeader._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The HTTP Header Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The HTTP Header value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AppTemplateContainerVolumeMount(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: The name of the Volume to be mounted in the container.
        :param str path: The path in the container at which to mount this volume.
        """
        AppTemplateContainerVolumeMount._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            path=path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             path: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Volume to be mounted in the container.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The path in the container at which to mount this volume.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class AppTemplateCustomScaleRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customRuleType":
            suggest = "custom_rule_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppTemplateCustomScaleRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppTemplateCustomScaleRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppTemplateCustomScaleRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_rule_type: str,
                 metadata: Mapping[str, str],
                 name: str,
                 authentications: Optional[Sequence['outputs.AppTemplateCustomScaleRuleAuthentication']] = None):
        """
        :param str custom_rule_type: The Custom rule type. Possible values include: `activemq`, `artemis-queue`, `kafka`, `pulsar`, `aws-cloudwatch`, `aws-dynamodb`, `aws-dynamodb-streams`, `aws-kinesis-stream`, `aws-sqs-queue`, `azure-app-insights`, `azure-blob`, `azure-data-explorer`, `azure-eventhub`, `azure-log-analytics`, `azure-monitor`, `azure-pipelines`, `azure-servicebus`, `azure-queue`, `cassandra`, `cpu`, `cron`, `datadog`, `elasticsearch`, `external`, `external-push`, `gcp-stackdriver`, `gcp-storage`, `gcp-pubsub`, `graphite`, `http`, `huawei-cloudeye`, `ibmmq`, `influxdb`, `kubernetes-workload`, `liiklus`, `memory`, `metrics-api`, `mongodb`, `mssql`, `mysql`, `nats-jetstream`, `stan`, `tcp`, `new-relic`, `openstack-metric`, `openstack-swift`, `postgresql`, `predictkube`, `prometheus`, `rabbitmq`, `redis`, `redis-cluster`, `redis-sentinel`, `redis-streams`, `redis-cluster-streams`, `redis-sentinel-streams`, `selenium-grid`,`solace-event-queue`, and `github-runner`.
        :param Mapping[str, str] metadata: A map of string key-value pairs to configure the Custom Scale Rule.
        :param str name: The name of the Scaling Rule
        :param Sequence['AppTemplateCustomScaleRuleAuthenticationArgs'] authentications: Zero or more `authentication` blocks as defined below.
        """
        AppTemplateCustomScaleRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_rule_type=custom_rule_type,
            metadata=metadata,
            name=name,
            authentications=authentications,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_rule_type: str,
             metadata: Mapping[str, str],
             name: str,
             authentications: Optional[Sequence['outputs.AppTemplateCustomScaleRuleAuthentication']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("custom_rule_type", custom_rule_type)
        _setter("metadata", metadata)
        _setter("name", name)
        if authentications is not None:
            _setter("authentications", authentications)

    @property
    @pulumi.getter(name="customRuleType")
    def custom_rule_type(self) -> str:
        """
        The Custom rule type. Possible values include: `activemq`, `artemis-queue`, `kafka`, `pulsar`, `aws-cloudwatch`, `aws-dynamodb`, `aws-dynamodb-streams`, `aws-kinesis-stream`, `aws-sqs-queue`, `azure-app-insights`, `azure-blob`, `azure-data-explorer`, `azure-eventhub`, `azure-log-analytics`, `azure-monitor`, `azure-pipelines`, `azure-servicebus`, `azure-queue`, `cassandra`, `cpu`, `cron`, `datadog`, `elasticsearch`, `external`, `external-push`, `gcp-stackdriver`, `gcp-storage`, `gcp-pubsub`, `graphite`, `http`, `huawei-cloudeye`, `ibmmq`, `influxdb`, `kubernetes-workload`, `liiklus`, `memory`, `metrics-api`, `mongodb`, `mssql`, `mysql`, `nats-jetstream`, `stan`, `tcp`, `new-relic`, `openstack-metric`, `openstack-swift`, `postgresql`, `predictkube`, `prometheus`, `rabbitmq`, `redis`, `redis-cluster`, `redis-sentinel`, `redis-streams`, `redis-cluster-streams`, `redis-sentinel-streams`, `selenium-grid`,`solace-event-queue`, and `github-runner`.
        """
        return pulumi.get(self, "custom_rule_type")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        A map of string key-value pairs to configure the Custom Scale Rule.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Scaling Rule
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def authentications(self) -> Optional[Sequence['outputs.AppTemplateCustomScaleRuleAuthentication']]:
        """
        Zero or more `authentication` blocks as defined below.
        """
        return pulumi.get(self, "authentications")


@pulumi.output_type
class AppTemplateCustomScaleRuleAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"
        elif key == "triggerParameter":
            suggest = "trigger_parameter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppTemplateCustomScaleRuleAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppTemplateCustomScaleRuleAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppTemplateCustomScaleRuleAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secret_name: str,
                 trigger_parameter: str):
        """
        :param str secret_name: The name of the Container App Secret to use for this Scale Rule Authentication.
        :param str trigger_parameter: The Trigger Parameter name to use the supply the value retrieved from the `secret_name`.
        """
        AppTemplateCustomScaleRuleAuthentication._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            secret_name=secret_name,
            trigger_parameter=trigger_parameter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             secret_name: str,
             trigger_parameter: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("secret_name", secret_name)
        _setter("trigger_parameter", trigger_parameter)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        The name of the Container App Secret to use for this Scale Rule Authentication.
        """
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="triggerParameter")
    def trigger_parameter(self) -> str:
        """
        The Trigger Parameter name to use the supply the value retrieved from the `secret_name`.
        """
        return pulumi.get(self, "trigger_parameter")


@pulumi.output_type
class AppTemplateHttpScaleRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "concurrentRequests":
            suggest = "concurrent_requests"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppTemplateHttpScaleRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppTemplateHttpScaleRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppTemplateHttpScaleRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 concurrent_requests: str,
                 name: str,
                 authentications: Optional[Sequence['outputs.AppTemplateHttpScaleRuleAuthentication']] = None):
        """
        :param str concurrent_requests: The number of concurrent requests to trigger scaling.
        :param str name: The name of the Scaling Rule
        :param Sequence['AppTemplateHttpScaleRuleAuthenticationArgs'] authentications: Zero or more `authentication` blocks as defined below.
        """
        AppTemplateHttpScaleRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            concurrent_requests=concurrent_requests,
            name=name,
            authentications=authentications,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             concurrent_requests: str,
             name: str,
             authentications: Optional[Sequence['outputs.AppTemplateHttpScaleRuleAuthentication']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("concurrent_requests", concurrent_requests)
        _setter("name", name)
        if authentications is not None:
            _setter("authentications", authentications)

    @property
    @pulumi.getter(name="concurrentRequests")
    def concurrent_requests(self) -> str:
        """
        The number of concurrent requests to trigger scaling.
        """
        return pulumi.get(self, "concurrent_requests")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Scaling Rule
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def authentications(self) -> Optional[Sequence['outputs.AppTemplateHttpScaleRuleAuthentication']]:
        """
        Zero or more `authentication` blocks as defined below.
        """
        return pulumi.get(self, "authentications")


@pulumi.output_type
class AppTemplateHttpScaleRuleAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"
        elif key == "triggerParameter":
            suggest = "trigger_parameter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppTemplateHttpScaleRuleAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppTemplateHttpScaleRuleAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppTemplateHttpScaleRuleAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secret_name: str,
                 trigger_parameter: Optional[str] = None):
        """
        :param str secret_name: The name of the Container App Secret to use for this Scale Rule Authentication.
        :param str trigger_parameter: The Trigger Parameter name to use the supply the value retrieved from the `secret_name`.
        """
        AppTemplateHttpScaleRuleAuthentication._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            secret_name=secret_name,
            trigger_parameter=trigger_parameter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             secret_name: str,
             trigger_parameter: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("secret_name", secret_name)
        if trigger_parameter is not None:
            _setter("trigger_parameter", trigger_parameter)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        The name of the Container App Secret to use for this Scale Rule Authentication.
        """
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="triggerParameter")
    def trigger_parameter(self) -> Optional[str]:
        """
        The Trigger Parameter name to use the supply the value retrieved from the `secret_name`.
        """
        return pulumi.get(self, "trigger_parameter")


@pulumi.output_type
class AppTemplateTcpScaleRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "concurrentRequests":
            suggest = "concurrent_requests"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppTemplateTcpScaleRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppTemplateTcpScaleRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppTemplateTcpScaleRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 concurrent_requests: str,
                 name: str,
                 authentications: Optional[Sequence['outputs.AppTemplateTcpScaleRuleAuthentication']] = None):
        """
        :param str concurrent_requests: The number of concurrent requests to trigger scaling.
        :param str name: The name of the Scaling Rule
        :param Sequence['AppTemplateTcpScaleRuleAuthenticationArgs'] authentications: Zero or more `authentication` blocks as defined below.
        """
        AppTemplateTcpScaleRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            concurrent_requests=concurrent_requests,
            name=name,
            authentications=authentications,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             concurrent_requests: str,
             name: str,
             authentications: Optional[Sequence['outputs.AppTemplateTcpScaleRuleAuthentication']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("concurrent_requests", concurrent_requests)
        _setter("name", name)
        if authentications is not None:
            _setter("authentications", authentications)

    @property
    @pulumi.getter(name="concurrentRequests")
    def concurrent_requests(self) -> str:
        """
        The number of concurrent requests to trigger scaling.
        """
        return pulumi.get(self, "concurrent_requests")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Scaling Rule
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def authentications(self) -> Optional[Sequence['outputs.AppTemplateTcpScaleRuleAuthentication']]:
        """
        Zero or more `authentication` blocks as defined below.
        """
        return pulumi.get(self, "authentications")


@pulumi.output_type
class AppTemplateTcpScaleRuleAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"
        elif key == "triggerParameter":
            suggest = "trigger_parameter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppTemplateTcpScaleRuleAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppTemplateTcpScaleRuleAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppTemplateTcpScaleRuleAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secret_name: str,
                 trigger_parameter: Optional[str] = None):
        """
        :param str secret_name: The name of the Container App Secret to use for this Scale Rule Authentication.
        :param str trigger_parameter: The Trigger Parameter name to use the supply the value retrieved from the `secret_name`.
        """
        AppTemplateTcpScaleRuleAuthentication._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            secret_name=secret_name,
            trigger_parameter=trigger_parameter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             secret_name: str,
             trigger_parameter: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("secret_name", secret_name)
        if trigger_parameter is not None:
            _setter("trigger_parameter", trigger_parameter)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        The name of the Container App Secret to use for this Scale Rule Authentication.
        """
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="triggerParameter")
    def trigger_parameter(self) -> Optional[str]:
        """
        The Trigger Parameter name to use the supply the value retrieved from the `secret_name`.
        """
        return pulumi.get(self, "trigger_parameter")


@pulumi.output_type
class AppTemplateVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageName":
            suggest = "storage_name"
        elif key == "storageType":
            suggest = "storage_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppTemplateVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppTemplateVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppTemplateVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 storage_name: Optional[str] = None,
                 storage_type: Optional[str] = None):
        """
        :param str name: The name of the volume.
        :param str storage_name: The name of the `AzureFile` storage.
        :param str storage_type: The type of storage volume. Possible values include `AzureFile` and `EmptyDir`. Defaults to `EmptyDir`.
        """
        AppTemplateVolume._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            storage_name=storage_name,
            storage_type=storage_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             storage_name: Optional[str] = None,
             storage_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if storage_name is not None:
            _setter("storage_name", storage_name)
        if storage_type is not None:
            _setter("storage_type", storage_type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the volume.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="storageName")
    def storage_name(self) -> Optional[str]:
        """
        The name of the `AzureFile` storage.
        """
        return pulumi.get(self, "storage_name")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[str]:
        """
        The type of storage volume. Possible values include `AzureFile` and `EmptyDir`. Defaults to `EmptyDir`.
        """
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class EnvironmentDaprComponentMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnvironmentDaprComponentMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnvironmentDaprComponentMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnvironmentDaprComponentMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 secret_name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: The name of the Metadata configuration item.
        :param str secret_name: The name of a secret specified in the `secrets` block that contains the value for this metadata configuration item.
        :param str value: The value for this metadata configuration item.
        """
        EnvironmentDaprComponentMetadata._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            secret_name=secret_name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             secret_name: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if secret_name is not None:
            _setter("secret_name", secret_name)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Metadata configuration item.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        """
        The name of a secret specified in the `secrets` block that contains the value for this metadata configuration item.
        """
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value for this metadata configuration item.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EnvironmentDaprComponentSecret(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: The Secret name.
        :param str value: The value for this secret.
        """
        EnvironmentDaprComponentSecret._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Secret name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for this secret.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAppDaprResult(dict):
    def __init__(__self__, *,
                 app_id: str,
                 app_port: int,
                 app_protocol: str):
        """
        :param str app_id: The Dapr Application Identifier.
        :param int app_port: The port which the application is listening on. This is the same as the `ingress` port.
        :param str app_protocol: The protocol for the app. Possible values include `http` and `grpc`. Defaults to `http`.
        """
        GetAppDaprResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            app_id=app_id,
            app_port=app_port,
            app_protocol=app_protocol,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             app_id: str,
             app_port: int,
             app_protocol: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("app_id", app_id)
        _setter("app_port", app_port)
        _setter("app_protocol", app_protocol)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        The Dapr Application Identifier.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appPort")
    def app_port(self) -> int:
        """
        The port which the application is listening on. This is the same as the `ingress` port.
        """
        return pulumi.get(self, "app_port")

    @property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> str:
        """
        The protocol for the app. Possible values include `http` and `grpc`. Defaults to `http`.
        """
        return pulumi.get(self, "app_protocol")


@pulumi.output_type
class GetAppIdentityResult(dict):
    def __init__(__self__, *,
                 identity_ids: Sequence[str],
                 principal_id: str,
                 tenant_id: str,
                 type: str):
        """
        :param Sequence[str] identity_ids: A list of one or more Resource IDs for User Assigned Managed identities to assign. Required when `type` is set to `UserAssigned`.
        :param str type: The type of managed identity to assign. Possible values are `UserAssigned` and `SystemAssigned`
        """
        GetAppIdentityResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            identity_ids=identity_ids,
            principal_id=principal_id,
            tenant_id=tenant_id,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             identity_ids: Sequence[str],
             principal_id: str,
             tenant_id: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("identity_ids", identity_ids)
        _setter("principal_id", principal_id)
        _setter("tenant_id", tenant_id)
        _setter("type", type)

    @property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Sequence[str]:
        """
        A list of one or more Resource IDs for User Assigned Managed identities to assign. Required when `type` is set to `UserAssigned`.
        """
        return pulumi.get(self, "identity_ids")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of managed identity to assign. Possible values are `UserAssigned` and `SystemAssigned`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAppIngressResult(dict):
    def __init__(__self__, *,
                 allow_insecure_connections: bool,
                 custom_domains: Sequence['outputs.GetAppIngressCustomDomainResult'],
                 external_enabled: bool,
                 fqdn: str,
                 target_port: int,
                 traffic_weights: Sequence['outputs.GetAppIngressTrafficWeightResult'],
                 transport: str):
        """
        :param bool allow_insecure_connections: Should this ingress allow insecure connections?
        :param Sequence['GetAppIngressCustomDomainArgs'] custom_domains: One or more `custom_domain` block as detailed below.
        :param bool external_enabled: Is this an external Ingress.
        :param str fqdn: The FQDN of the ingress.
        :param int target_port: The target port on the container for the Ingress traffic.
        :param Sequence['GetAppIngressTrafficWeightArgs'] traffic_weights: A `traffic_weight` block as detailed below.
        :param str transport: The transport method for the Ingress. Possible values include `auto`, `http`, and `http2`. Defaults to `auto`
        """
        GetAppIngressResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_insecure_connections=allow_insecure_connections,
            custom_domains=custom_domains,
            external_enabled=external_enabled,
            fqdn=fqdn,
            target_port=target_port,
            traffic_weights=traffic_weights,
            transport=transport,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_insecure_connections: bool,
             custom_domains: Sequence['outputs.GetAppIngressCustomDomainResult'],
             external_enabled: bool,
             fqdn: str,
             target_port: int,
             traffic_weights: Sequence['outputs.GetAppIngressTrafficWeightResult'],
             transport: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("allow_insecure_connections", allow_insecure_connections)
        _setter("custom_domains", custom_domains)
        _setter("external_enabled", external_enabled)
        _setter("fqdn", fqdn)
        _setter("target_port", target_port)
        _setter("traffic_weights", traffic_weights)
        _setter("transport", transport)

    @property
    @pulumi.getter(name="allowInsecureConnections")
    def allow_insecure_connections(self) -> bool:
        """
        Should this ingress allow insecure connections?
        """
        return pulumi.get(self, "allow_insecure_connections")

    @property
    @pulumi.getter(name="customDomains")
    def custom_domains(self) -> Sequence['outputs.GetAppIngressCustomDomainResult']:
        """
        One or more `custom_domain` block as detailed below.
        """
        return pulumi.get(self, "custom_domains")

    @property
    @pulumi.getter(name="externalEnabled")
    def external_enabled(self) -> bool:
        """
        Is this an external Ingress.
        """
        return pulumi.get(self, "external_enabled")

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        """
        The FQDN of the ingress.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> int:
        """
        The target port on the container for the Ingress traffic.
        """
        return pulumi.get(self, "target_port")

    @property
    @pulumi.getter(name="trafficWeights")
    def traffic_weights(self) -> Sequence['outputs.GetAppIngressTrafficWeightResult']:
        """
        A `traffic_weight` block as detailed below.
        """
        return pulumi.get(self, "traffic_weights")

    @property
    @pulumi.getter
    def transport(self) -> str:
        """
        The transport method for the Ingress. Possible values include `auto`, `http`, and `http2`. Defaults to `auto`
        """
        return pulumi.get(self, "transport")


@pulumi.output_type
class GetAppIngressCustomDomainResult(dict):
    def __init__(__self__, *,
                 certificate_binding_type: str,
                 certificate_id: str,
                 name: str):
        """
        :param str certificate_binding_type: The Binding type. Possible values include `Disabled` and `SniEnabled`. Defaults to `Disabled`.
        :param str certificate_id: The ID of the Container App Environment Certificate.
        :param str name: The name of the Container App.
        """
        GetAppIngressCustomDomainResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            certificate_binding_type=certificate_binding_type,
            certificate_id=certificate_id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             certificate_binding_type: str,
             certificate_id: str,
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("certificate_binding_type", certificate_binding_type)
        _setter("certificate_id", certificate_id)
        _setter("name", name)

    @property
    @pulumi.getter(name="certificateBindingType")
    def certificate_binding_type(self) -> str:
        """
        The Binding type. Possible values include `Disabled` and `SniEnabled`. Defaults to `Disabled`.
        """
        return pulumi.get(self, "certificate_binding_type")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        """
        The ID of the Container App Environment Certificate.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Container App.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAppIngressTrafficWeightResult(dict):
    def __init__(__self__, *,
                 label: str,
                 latest_revision: bool,
                 percentage: int,
                 revision_suffix: str):
        """
        :param str label: The label to apply to the revision as a name prefix for routing traffic.
        :param bool latest_revision: This traffic Weight relates to the latest stable Container Revision.
        :param int percentage: The percentage of traffic which should be sent this revision.
        :param str revision_suffix: The suffix string to which this `traffic_weight` applies.
        """
        GetAppIngressTrafficWeightResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            label=label,
            latest_revision=latest_revision,
            percentage=percentage,
            revision_suffix=revision_suffix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             label: str,
             latest_revision: bool,
             percentage: int,
             revision_suffix: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("label", label)
        _setter("latest_revision", latest_revision)
        _setter("percentage", percentage)
        _setter("revision_suffix", revision_suffix)

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label to apply to the revision as a name prefix for routing traffic.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="latestRevision")
    def latest_revision(self) -> bool:
        """
        This traffic Weight relates to the latest stable Container Revision.
        """
        return pulumi.get(self, "latest_revision")

    @property
    @pulumi.getter
    def percentage(self) -> int:
        """
        The percentage of traffic which should be sent this revision.
        """
        return pulumi.get(self, "percentage")

    @property
    @pulumi.getter(name="revisionSuffix")
    def revision_suffix(self) -> str:
        """
        The suffix string to which this `traffic_weight` applies.
        """
        return pulumi.get(self, "revision_suffix")


@pulumi.output_type
class GetAppRegistryResult(dict):
    def __init__(__self__, *,
                 identity: str,
                 password_secret_name: str,
                 server: str,
                 username: str):
        """
        :param str identity: Resource ID for the User Assigned Managed identity to use when pulling from the Container Registry.
        :param str password_secret_name: The name of the Secret Reference containing the password value for this user on the Container Registry, `username` must also be supplied.
        :param str server: The hostname for the Container Registry.
        :param str username: The username to use for this Container Registry, `password_secret_name` must also be supplied..
        """
        GetAppRegistryResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            identity=identity,
            password_secret_name=password_secret_name,
            server=server,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             identity: str,
             password_secret_name: str,
             server: str,
             username: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("identity", identity)
        _setter("password_secret_name", password_secret_name)
        _setter("server", server)
        _setter("username", username)

    @property
    @pulumi.getter
    def identity(self) -> str:
        """
        Resource ID for the User Assigned Managed identity to use when pulling from the Container Registry.
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter(name="passwordSecretName")
    def password_secret_name(self) -> str:
        """
        The name of the Secret Reference containing the password value for this user on the Container Registry, `username` must also be supplied.
        """
        return pulumi.get(self, "password_secret_name")

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        The hostname for the Container Registry.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username to use for this Container Registry, `password_secret_name` must also be supplied..
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetAppSecretResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: The name of the Container App.
        :param str value: The HTTP Header value.
        """
        GetAppSecretResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Container App.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The HTTP Header value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAppTemplateResult(dict):
    def __init__(__self__, *,
                 azure_queue_scale_rules: Sequence['outputs.GetAppTemplateAzureQueueScaleRuleResult'],
                 containers: Sequence['outputs.GetAppTemplateContainerResult'],
                 http_scale_rules: Sequence['outputs.GetAppTemplateHttpScaleRuleResult'],
                 max_replicas: int,
                 min_replicas: int,
                 revision_suffix: str,
                 tcp_scale_rules: Sequence['outputs.GetAppTemplateTcpScaleRuleResult'],
                 volumes: Sequence['outputs.GetAppTemplateVolumeResult'],
                 custom_scale_rules: Optional[Sequence['outputs.GetAppTemplateCustomScaleRuleResult']] = None):
        """
        :param Sequence['GetAppTemplateContainerArgs'] containers: One or more `container` blocks as detailed below.
        :param int max_replicas: The maximum number of replicas for this container.
        :param int min_replicas: The minimum number of replicas for this container.
        :param str revision_suffix: The suffix string to which this `traffic_weight` applies.
        :param Sequence['GetAppTemplateVolumeArgs'] volumes: A `volume` block as detailed below.
        """
        GetAppTemplateResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            azure_queue_scale_rules=azure_queue_scale_rules,
            containers=containers,
            http_scale_rules=http_scale_rules,
            max_replicas=max_replicas,
            min_replicas=min_replicas,
            revision_suffix=revision_suffix,
            tcp_scale_rules=tcp_scale_rules,
            volumes=volumes,
            custom_scale_rules=custom_scale_rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             azure_queue_scale_rules: Sequence['outputs.GetAppTemplateAzureQueueScaleRuleResult'],
             containers: Sequence['outputs.GetAppTemplateContainerResult'],
             http_scale_rules: Sequence['outputs.GetAppTemplateHttpScaleRuleResult'],
             max_replicas: int,
             min_replicas: int,
             revision_suffix: str,
             tcp_scale_rules: Sequence['outputs.GetAppTemplateTcpScaleRuleResult'],
             volumes: Sequence['outputs.GetAppTemplateVolumeResult'],
             custom_scale_rules: Optional[Sequence['outputs.GetAppTemplateCustomScaleRuleResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("azure_queue_scale_rules", azure_queue_scale_rules)
        _setter("containers", containers)
        _setter("http_scale_rules", http_scale_rules)
        _setter("max_replicas", max_replicas)
        _setter("min_replicas", min_replicas)
        _setter("revision_suffix", revision_suffix)
        _setter("tcp_scale_rules", tcp_scale_rules)
        _setter("volumes", volumes)
        if custom_scale_rules is not None:
            _setter("custom_scale_rules", custom_scale_rules)

    @property
    @pulumi.getter(name="azureQueueScaleRules")
    def azure_queue_scale_rules(self) -> Sequence['outputs.GetAppTemplateAzureQueueScaleRuleResult']:
        return pulumi.get(self, "azure_queue_scale_rules")

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.GetAppTemplateContainerResult']:
        """
        One or more `container` blocks as detailed below.
        """
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="httpScaleRules")
    def http_scale_rules(self) -> Sequence['outputs.GetAppTemplateHttpScaleRuleResult']:
        return pulumi.get(self, "http_scale_rules")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> int:
        """
        The maximum number of replicas for this container.
        """
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> int:
        """
        The minimum number of replicas for this container.
        """
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter(name="revisionSuffix")
    def revision_suffix(self) -> str:
        """
        The suffix string to which this `traffic_weight` applies.
        """
        return pulumi.get(self, "revision_suffix")

    @property
    @pulumi.getter(name="tcpScaleRules")
    def tcp_scale_rules(self) -> Sequence['outputs.GetAppTemplateTcpScaleRuleResult']:
        return pulumi.get(self, "tcp_scale_rules")

    @property
    @pulumi.getter
    def volumes(self) -> Sequence['outputs.GetAppTemplateVolumeResult']:
        """
        A `volume` block as detailed below.
        """
        return pulumi.get(self, "volumes")

    @property
    @pulumi.getter(name="customScaleRules")
    def custom_scale_rules(self) -> Optional[Sequence['outputs.GetAppTemplateCustomScaleRuleResult']]:
        return pulumi.get(self, "custom_scale_rules")


@pulumi.output_type
class GetAppTemplateAzureQueueScaleRuleResult(dict):
    def __init__(__self__, *,
                 authentications: Sequence['outputs.GetAppTemplateAzureQueueScaleRuleAuthenticationResult'],
                 name: str,
                 queue_length: int,
                 queue_name: str):
        """
        :param str name: The name of the Container App.
        """
        GetAppTemplateAzureQueueScaleRuleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            authentications=authentications,
            name=name,
            queue_length=queue_length,
            queue_name=queue_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             authentications: Sequence['outputs.GetAppTemplateAzureQueueScaleRuleAuthenticationResult'],
             name: str,
             queue_length: int,
             queue_name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("authentications", authentications)
        _setter("name", name)
        _setter("queue_length", queue_length)
        _setter("queue_name", queue_name)

    @property
    @pulumi.getter
    def authentications(self) -> Sequence['outputs.GetAppTemplateAzureQueueScaleRuleAuthenticationResult']:
        return pulumi.get(self, "authentications")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Container App.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="queueLength")
    def queue_length(self) -> int:
        return pulumi.get(self, "queue_length")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> str:
        return pulumi.get(self, "queue_name")


@pulumi.output_type
class GetAppTemplateAzureQueueScaleRuleAuthenticationResult(dict):
    def __init__(__self__, *,
                 secret_name: str,
                 trigger_parameter: str):
        """
        :param str secret_name: The name of the secret that contains the value for this environment variable.
        """
        GetAppTemplateAzureQueueScaleRuleAuthenticationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            secret_name=secret_name,
            trigger_parameter=trigger_parameter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             secret_name: str,
             trigger_parameter: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("secret_name", secret_name)
        _setter("trigger_parameter", trigger_parameter)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        The name of the secret that contains the value for this environment variable.
        """
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="triggerParameter")
    def trigger_parameter(self) -> str:
        return pulumi.get(self, "trigger_parameter")


@pulumi.output_type
class GetAppTemplateContainerResult(dict):
    def __init__(__self__, *,
                 args: Sequence[str],
                 commands: Sequence[str],
                 cpu: float,
                 envs: Sequence['outputs.GetAppTemplateContainerEnvResult'],
                 ephemeral_storage: str,
                 image: str,
                 liveness_probes: Sequence['outputs.GetAppTemplateContainerLivenessProbeResult'],
                 memory: str,
                 name: str,
                 readiness_probes: Sequence['outputs.GetAppTemplateContainerReadinessProbeResult'],
                 startup_probes: Sequence['outputs.GetAppTemplateContainerStartupProbeResult'],
                 volume_mounts: Sequence['outputs.GetAppTemplateContainerVolumeMountResult']):
        """
        :param Sequence[str] args: A list of extra arguments to pass to the container.
        :param Sequence[str] commands: A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
        :param float cpu: The amount of vCPU to allocate to the container. Possible values include `0.25`, `0.5`, `0.75`, `1.0`, `1.25`, `1.5`, `1.75`, and `2.0`.
        :param Sequence['GetAppTemplateContainerEnvArgs'] envs: One or more `env` blocks as detailed below.
        :param str ephemeral_storage: The amount of ephemeral storage available to the Container App.
        :param str image: The image to use to create the container.
        :param Sequence['GetAppTemplateContainerLivenessProbeArgs'] liveness_probes: A `liveness_probe` block as detailed below.
        :param str memory: The amount of memory to allocate to the container. Possible values include `0.5Gi`, `1Gi`, `1.5Gi`, `2Gi`, `2.5Gi`, `3Gi`, `3.5Gi`, and `4Gi`.
        :param str name: The name of the Container App.
        :param Sequence['GetAppTemplateContainerReadinessProbeArgs'] readiness_probes: A `readiness_probe` block as detailed below.
        :param Sequence['GetAppTemplateContainerStartupProbeArgs'] startup_probes: A `startup_probe` block as detailed below.
        :param Sequence['GetAppTemplateContainerVolumeMountArgs'] volume_mounts: A `volume_mounts` block as detailed below.
        """
        GetAppTemplateContainerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            args=args,
            commands=commands,
            cpu=cpu,
            envs=envs,
            ephemeral_storage=ephemeral_storage,
            image=image,
            liveness_probes=liveness_probes,
            memory=memory,
            name=name,
            readiness_probes=readiness_probes,
            startup_probes=startup_probes,
            volume_mounts=volume_mounts,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             args: Sequence[str],
             commands: Sequence[str],
             cpu: float,
             envs: Sequence['outputs.GetAppTemplateContainerEnvResult'],
             ephemeral_storage: str,
             image: str,
             liveness_probes: Sequence['outputs.GetAppTemplateContainerLivenessProbeResult'],
             memory: str,
             name: str,
             readiness_probes: Sequence['outputs.GetAppTemplateContainerReadinessProbeResult'],
             startup_probes: Sequence['outputs.GetAppTemplateContainerStartupProbeResult'],
             volume_mounts: Sequence['outputs.GetAppTemplateContainerVolumeMountResult'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("args", args)
        _setter("commands", commands)
        _setter("cpu", cpu)
        _setter("envs", envs)
        _setter("ephemeral_storage", ephemeral_storage)
        _setter("image", image)
        _setter("liveness_probes", liveness_probes)
        _setter("memory", memory)
        _setter("name", name)
        _setter("readiness_probes", readiness_probes)
        _setter("startup_probes", startup_probes)
        _setter("volume_mounts", volume_mounts)

    @property
    @pulumi.getter
    def args(self) -> Sequence[str]:
        """
        A list of extra arguments to pass to the container.
        """
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def commands(self) -> Sequence[str]:
        """
        A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def cpu(self) -> float:
        """
        The amount of vCPU to allocate to the container. Possible values include `0.25`, `0.5`, `0.75`, `1.0`, `1.25`, `1.5`, `1.75`, and `2.0`.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def envs(self) -> Sequence['outputs.GetAppTemplateContainerEnvResult']:
        """
        One or more `env` blocks as detailed below.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter(name="ephemeralStorage")
    def ephemeral_storage(self) -> str:
        """
        The amount of ephemeral storage available to the Container App.
        """
        return pulumi.get(self, "ephemeral_storage")

    @property
    @pulumi.getter
    def image(self) -> str:
        """
        The image to use to create the container.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="livenessProbes")
    def liveness_probes(self) -> Sequence['outputs.GetAppTemplateContainerLivenessProbeResult']:
        """
        A `liveness_probe` block as detailed below.
        """
        return pulumi.get(self, "liveness_probes")

    @property
    @pulumi.getter
    def memory(self) -> str:
        """
        The amount of memory to allocate to the container. Possible values include `0.5Gi`, `1Gi`, `1.5Gi`, `2Gi`, `2.5Gi`, `3Gi`, `3.5Gi`, and `4Gi`.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Container App.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="readinessProbes")
    def readiness_probes(self) -> Sequence['outputs.GetAppTemplateContainerReadinessProbeResult']:
        """
        A `readiness_probe` block as detailed below.
        """
        return pulumi.get(self, "readiness_probes")

    @property
    @pulumi.getter(name="startupProbes")
    def startup_probes(self) -> Sequence['outputs.GetAppTemplateContainerStartupProbeResult']:
        """
        A `startup_probe` block as detailed below.
        """
        return pulumi.get(self, "startup_probes")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Sequence['outputs.GetAppTemplateContainerVolumeMountResult']:
        """
        A `volume_mounts` block as detailed below.
        """
        return pulumi.get(self, "volume_mounts")


@pulumi.output_type
class GetAppTemplateContainerEnvResult(dict):
    def __init__(__self__, *,
                 name: str,
                 secret_name: str,
                 value: str):
        """
        :param str name: The name of the Container App.
        :param str secret_name: The name of the secret that contains the value for this environment variable.
        :param str value: The HTTP Header value.
        """
        GetAppTemplateContainerEnvResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            secret_name=secret_name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             secret_name: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("secret_name", secret_name)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Container App.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        The name of the secret that contains the value for this environment variable.
        """
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The HTTP Header value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAppTemplateContainerLivenessProbeResult(dict):
    def __init__(__self__, *,
                 failure_count_threshold: int,
                 headers: Sequence['outputs.GetAppTemplateContainerLivenessProbeHeaderResult'],
                 host: str,
                 initial_delay: int,
                 interval_seconds: int,
                 path: str,
                 port: int,
                 termination_grace_period_seconds: int,
                 timeout: int,
                 transport: str):
        """
        :param int failure_count_threshold: The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.
        :param Sequence['GetAppTemplateContainerLivenessProbeHeaderArgs'] headers: A `header` block as detailed below.
        :param str host: The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for `Host` in `headers` can be used to override this for `HTTP` and `HTTPS` type probes.
        :param int initial_delay: The time in seconds to wait after the container has started before the probe is started.
        :param int interval_seconds: How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
        :param str path: The path in the container at which to mount this volume.
        :param int port: The port number on which to connect. Possible values are between `1` and `65535`.
        :param int termination_grace_period_seconds: The time in seconds after the container is sent the termination signal before the process if forcibly killed.
        :param int timeout: Time in seconds after which the probe times out. Possible values are in the range `1` - `240`. Defaults to `1`.
        :param str transport: The transport method for the Ingress. Possible values include `auto`, `http`, and `http2`. Defaults to `auto`
        """
        GetAppTemplateContainerLivenessProbeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            failure_count_threshold=failure_count_threshold,
            headers=headers,
            host=host,
            initial_delay=initial_delay,
            interval_seconds=interval_seconds,
            path=path,
            port=port,
            termination_grace_period_seconds=termination_grace_period_seconds,
            timeout=timeout,
            transport=transport,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             failure_count_threshold: int,
             headers: Sequence['outputs.GetAppTemplateContainerLivenessProbeHeaderResult'],
             host: str,
             initial_delay: int,
             interval_seconds: int,
             path: str,
             port: int,
             termination_grace_period_seconds: int,
             timeout: int,
             transport: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("failure_count_threshold", failure_count_threshold)
        _setter("headers", headers)
        _setter("host", host)
        _setter("initial_delay", initial_delay)
        _setter("interval_seconds", interval_seconds)
        _setter("path", path)
        _setter("port", port)
        _setter("termination_grace_period_seconds", termination_grace_period_seconds)
        _setter("timeout", timeout)
        _setter("transport", transport)

    @property
    @pulumi.getter(name="failureCountThreshold")
    def failure_count_threshold(self) -> int:
        """
        The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.
        """
        return pulumi.get(self, "failure_count_threshold")

    @property
    @pulumi.getter
    def headers(self) -> Sequence['outputs.GetAppTemplateContainerLivenessProbeHeaderResult']:
        """
        A `header` block as detailed below.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for `Host` in `headers` can be used to override this for `HTTP` and `HTTPS` type probes.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="initialDelay")
    def initial_delay(self) -> int:
        """
        The time in seconds to wait after the container has started before the probe is started.
        """
        return pulumi.get(self, "initial_delay")

    @property
    @pulumi.getter(name="intervalSeconds")
    def interval_seconds(self) -> int:
        """
        How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
        """
        return pulumi.get(self, "interval_seconds")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The path in the container at which to mount this volume.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port number on which to connect. Possible values are between `1` and `65535`.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> int:
        """
        The time in seconds after the container is sent the termination signal before the process if forcibly killed.
        """
        return pulumi.get(self, "termination_grace_period_seconds")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        """
        Time in seconds after which the probe times out. Possible values are in the range `1` - `240`. Defaults to `1`.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def transport(self) -> str:
        """
        The transport method for the Ingress. Possible values include `auto`, `http`, and `http2`. Defaults to `auto`
        """
        return pulumi.get(self, "transport")


@pulumi.output_type
class GetAppTemplateContainerLivenessProbeHeaderResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: The name of the Container App.
        :param str value: The HTTP Header value.
        """
        GetAppTemplateContainerLivenessProbeHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Container App.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The HTTP Header value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAppTemplateContainerReadinessProbeResult(dict):
    def __init__(__self__, *,
                 failure_count_threshold: int,
                 headers: Sequence['outputs.GetAppTemplateContainerReadinessProbeHeaderResult'],
                 host: str,
                 interval_seconds: int,
                 path: str,
                 port: int,
                 success_count_threshold: int,
                 timeout: int,
                 transport: str):
        """
        :param int failure_count_threshold: The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.
        :param Sequence['GetAppTemplateContainerReadinessProbeHeaderArgs'] headers: A `header` block as detailed below.
        :param str host: The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for `Host` in `headers` can be used to override this for `HTTP` and `HTTPS` type probes.
        :param int interval_seconds: How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
        :param str path: The path in the container at which to mount this volume.
        :param int port: The port number on which to connect. Possible values are between `1` and `65535`.
        :param int success_count_threshold: The number of consecutive successful responses required to consider this probe as successful. Possible values are between `1` and `10`. Defaults to `3`.
        :param int timeout: Time in seconds after which the probe times out. Possible values are in the range `1` - `240`. Defaults to `1`.
        :param str transport: The transport method for the Ingress. Possible values include `auto`, `http`, and `http2`. Defaults to `auto`
        """
        GetAppTemplateContainerReadinessProbeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            failure_count_threshold=failure_count_threshold,
            headers=headers,
            host=host,
            interval_seconds=interval_seconds,
            path=path,
            port=port,
            success_count_threshold=success_count_threshold,
            timeout=timeout,
            transport=transport,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             failure_count_threshold: int,
             headers: Sequence['outputs.GetAppTemplateContainerReadinessProbeHeaderResult'],
             host: str,
             interval_seconds: int,
             path: str,
             port: int,
             success_count_threshold: int,
             timeout: int,
             transport: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("failure_count_threshold", failure_count_threshold)
        _setter("headers", headers)
        _setter("host", host)
        _setter("interval_seconds", interval_seconds)
        _setter("path", path)
        _setter("port", port)
        _setter("success_count_threshold", success_count_threshold)
        _setter("timeout", timeout)
        _setter("transport", transport)

    @property
    @pulumi.getter(name="failureCountThreshold")
    def failure_count_threshold(self) -> int:
        """
        The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.
        """
        return pulumi.get(self, "failure_count_threshold")

    @property
    @pulumi.getter
    def headers(self) -> Sequence['outputs.GetAppTemplateContainerReadinessProbeHeaderResult']:
        """
        A `header` block as detailed below.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for `Host` in `headers` can be used to override this for `HTTP` and `HTTPS` type probes.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="intervalSeconds")
    def interval_seconds(self) -> int:
        """
        How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
        """
        return pulumi.get(self, "interval_seconds")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The path in the container at which to mount this volume.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port number on which to connect. Possible values are between `1` and `65535`.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="successCountThreshold")
    def success_count_threshold(self) -> int:
        """
        The number of consecutive successful responses required to consider this probe as successful. Possible values are between `1` and `10`. Defaults to `3`.
        """
        return pulumi.get(self, "success_count_threshold")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        """
        Time in seconds after which the probe times out. Possible values are in the range `1` - `240`. Defaults to `1`.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def transport(self) -> str:
        """
        The transport method for the Ingress. Possible values include `auto`, `http`, and `http2`. Defaults to `auto`
        """
        return pulumi.get(self, "transport")


@pulumi.output_type
class GetAppTemplateContainerReadinessProbeHeaderResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: The name of the Container App.
        :param str value: The HTTP Header value.
        """
        GetAppTemplateContainerReadinessProbeHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Container App.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The HTTP Header value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAppTemplateContainerStartupProbeResult(dict):
    def __init__(__self__, *,
                 failure_count_threshold: int,
                 headers: Sequence['outputs.GetAppTemplateContainerStartupProbeHeaderResult'],
                 host: str,
                 interval_seconds: int,
                 path: str,
                 port: int,
                 termination_grace_period_seconds: int,
                 timeout: int,
                 transport: str):
        """
        :param int failure_count_threshold: The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.
        :param Sequence['GetAppTemplateContainerStartupProbeHeaderArgs'] headers: A `header` block as detailed below.
        :param str host: The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for `Host` in `headers` can be used to override this for `HTTP` and `HTTPS` type probes.
        :param int interval_seconds: How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
        :param str path: The path in the container at which to mount this volume.
        :param int port: The port number on which to connect. Possible values are between `1` and `65535`.
        :param int termination_grace_period_seconds: The time in seconds after the container is sent the termination signal before the process if forcibly killed.
        :param int timeout: Time in seconds after which the probe times out. Possible values are in the range `1` - `240`. Defaults to `1`.
        :param str transport: The transport method for the Ingress. Possible values include `auto`, `http`, and `http2`. Defaults to `auto`
        """
        GetAppTemplateContainerStartupProbeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            failure_count_threshold=failure_count_threshold,
            headers=headers,
            host=host,
            interval_seconds=interval_seconds,
            path=path,
            port=port,
            termination_grace_period_seconds=termination_grace_period_seconds,
            timeout=timeout,
            transport=transport,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             failure_count_threshold: int,
             headers: Sequence['outputs.GetAppTemplateContainerStartupProbeHeaderResult'],
             host: str,
             interval_seconds: int,
             path: str,
             port: int,
             termination_grace_period_seconds: int,
             timeout: int,
             transport: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("failure_count_threshold", failure_count_threshold)
        _setter("headers", headers)
        _setter("host", host)
        _setter("interval_seconds", interval_seconds)
        _setter("path", path)
        _setter("port", port)
        _setter("termination_grace_period_seconds", termination_grace_period_seconds)
        _setter("timeout", timeout)
        _setter("transport", transport)

    @property
    @pulumi.getter(name="failureCountThreshold")
    def failure_count_threshold(self) -> int:
        """
        The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.
        """
        return pulumi.get(self, "failure_count_threshold")

    @property
    @pulumi.getter
    def headers(self) -> Sequence['outputs.GetAppTemplateContainerStartupProbeHeaderResult']:
        """
        A `header` block as detailed below.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for `Host` in `headers` can be used to override this for `HTTP` and `HTTPS` type probes.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="intervalSeconds")
    def interval_seconds(self) -> int:
        """
        How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
        """
        return pulumi.get(self, "interval_seconds")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The path in the container at which to mount this volume.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port number on which to connect. Possible values are between `1` and `65535`.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> int:
        """
        The time in seconds after the container is sent the termination signal before the process if forcibly killed.
        """
        return pulumi.get(self, "termination_grace_period_seconds")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        """
        Time in seconds after which the probe times out. Possible values are in the range `1` - `240`. Defaults to `1`.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def transport(self) -> str:
        """
        The transport method for the Ingress. Possible values include `auto`, `http`, and `http2`. Defaults to `auto`
        """
        return pulumi.get(self, "transport")


@pulumi.output_type
class GetAppTemplateContainerStartupProbeHeaderResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: The name of the Container App.
        :param str value: The HTTP Header value.
        """
        GetAppTemplateContainerStartupProbeHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Container App.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The HTTP Header value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAppTemplateContainerVolumeMountResult(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: The name of the Container App.
        :param str path: The path in the container at which to mount this volume.
        """
        GetAppTemplateContainerVolumeMountResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            path=path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             path: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Container App.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The path in the container at which to mount this volume.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class GetAppTemplateCustomScaleRuleResult(dict):
    def __init__(__self__, *,
                 authentications: Sequence['outputs.GetAppTemplateCustomScaleRuleAuthenticationResult'],
                 custom_rule_type: str,
                 metadata: Mapping[str, str],
                 name: str):
        """
        :param str name: The name of the Container App.
        """
        GetAppTemplateCustomScaleRuleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            authentications=authentications,
            custom_rule_type=custom_rule_type,
            metadata=metadata,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             authentications: Sequence['outputs.GetAppTemplateCustomScaleRuleAuthenticationResult'],
             custom_rule_type: str,
             metadata: Mapping[str, str],
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("authentications", authentications)
        _setter("custom_rule_type", custom_rule_type)
        _setter("metadata", metadata)
        _setter("name", name)

    @property
    @pulumi.getter
    def authentications(self) -> Sequence['outputs.GetAppTemplateCustomScaleRuleAuthenticationResult']:
        return pulumi.get(self, "authentications")

    @property
    @pulumi.getter(name="customRuleType")
    def custom_rule_type(self) -> str:
        return pulumi.get(self, "custom_rule_type")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Container App.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAppTemplateCustomScaleRuleAuthenticationResult(dict):
    def __init__(__self__, *,
                 secret_name: str,
                 trigger_parameter: str):
        """
        :param str secret_name: The name of the secret that contains the value for this environment variable.
        """
        GetAppTemplateCustomScaleRuleAuthenticationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            secret_name=secret_name,
            trigger_parameter=trigger_parameter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             secret_name: str,
             trigger_parameter: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("secret_name", secret_name)
        _setter("trigger_parameter", trigger_parameter)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        The name of the secret that contains the value for this environment variable.
        """
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="triggerParameter")
    def trigger_parameter(self) -> str:
        return pulumi.get(self, "trigger_parameter")


@pulumi.output_type
class GetAppTemplateHttpScaleRuleResult(dict):
    def __init__(__self__, *,
                 authentications: Sequence['outputs.GetAppTemplateHttpScaleRuleAuthenticationResult'],
                 concurrent_requests: str,
                 name: str):
        """
        :param str name: The name of the Container App.
        """
        GetAppTemplateHttpScaleRuleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            authentications=authentications,
            concurrent_requests=concurrent_requests,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             authentications: Sequence['outputs.GetAppTemplateHttpScaleRuleAuthenticationResult'],
             concurrent_requests: str,
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("authentications", authentications)
        _setter("concurrent_requests", concurrent_requests)
        _setter("name", name)

    @property
    @pulumi.getter
    def authentications(self) -> Sequence['outputs.GetAppTemplateHttpScaleRuleAuthenticationResult']:
        return pulumi.get(self, "authentications")

    @property
    @pulumi.getter(name="concurrentRequests")
    def concurrent_requests(self) -> str:
        return pulumi.get(self, "concurrent_requests")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Container App.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAppTemplateHttpScaleRuleAuthenticationResult(dict):
    def __init__(__self__, *,
                 secret_name: str,
                 trigger_parameter: str):
        """
        :param str secret_name: The name of the secret that contains the value for this environment variable.
        """
        GetAppTemplateHttpScaleRuleAuthenticationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            secret_name=secret_name,
            trigger_parameter=trigger_parameter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             secret_name: str,
             trigger_parameter: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("secret_name", secret_name)
        _setter("trigger_parameter", trigger_parameter)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        The name of the secret that contains the value for this environment variable.
        """
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="triggerParameter")
    def trigger_parameter(self) -> str:
        return pulumi.get(self, "trigger_parameter")


@pulumi.output_type
class GetAppTemplateTcpScaleRuleResult(dict):
    def __init__(__self__, *,
                 authentications: Sequence['outputs.GetAppTemplateTcpScaleRuleAuthenticationResult'],
                 concurrent_requests: str,
                 name: str):
        """
        :param str name: The name of the Container App.
        """
        GetAppTemplateTcpScaleRuleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            authentications=authentications,
            concurrent_requests=concurrent_requests,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             authentications: Sequence['outputs.GetAppTemplateTcpScaleRuleAuthenticationResult'],
             concurrent_requests: str,
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("authentications", authentications)
        _setter("concurrent_requests", concurrent_requests)
        _setter("name", name)

    @property
    @pulumi.getter
    def authentications(self) -> Sequence['outputs.GetAppTemplateTcpScaleRuleAuthenticationResult']:
        return pulumi.get(self, "authentications")

    @property
    @pulumi.getter(name="concurrentRequests")
    def concurrent_requests(self) -> str:
        return pulumi.get(self, "concurrent_requests")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Container App.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAppTemplateTcpScaleRuleAuthenticationResult(dict):
    def __init__(__self__, *,
                 secret_name: str,
                 trigger_parameter: str):
        """
        :param str secret_name: The name of the secret that contains the value for this environment variable.
        """
        GetAppTemplateTcpScaleRuleAuthenticationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            secret_name=secret_name,
            trigger_parameter=trigger_parameter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             secret_name: str,
             trigger_parameter: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("secret_name", secret_name)
        _setter("trigger_parameter", trigger_parameter)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        The name of the secret that contains the value for this environment variable.
        """
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="triggerParameter")
    def trigger_parameter(self) -> str:
        return pulumi.get(self, "trigger_parameter")


@pulumi.output_type
class GetAppTemplateVolumeResult(dict):
    def __init__(__self__, *,
                 name: str,
                 storage_name: str,
                 storage_type: str):
        """
        :param str name: The name of the Container App.
        :param str storage_name: The name of the `AzureFile` storage.
        :param str storage_type: The type of storage volume. Possible values include `AzureFile` and `EmptyDir`. Defaults to `EmptyDir`.
        """
        GetAppTemplateVolumeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            storage_name=storage_name,
            storage_type=storage_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             storage_name: str,
             storage_type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("storage_name", storage_name)
        _setter("storage_type", storage_type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Container App.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="storageName")
    def storage_name(self) -> str:
        """
        The name of the `AzureFile` storage.
        """
        return pulumi.get(self, "storage_name")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        """
        The type of storage volume. Possible values include `AzureFile` and `EmptyDir`. Defaults to `EmptyDir`.
        """
        return pulumi.get(self, "storage_type")


