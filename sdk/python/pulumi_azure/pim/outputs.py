# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ActiveRoleAssignmentSchedule',
    'ActiveRoleAssignmentScheduleExpiration',
    'ActiveRoleAssignmentTicket',
    'EligibleRoleAssignmentSchedule',
    'EligibleRoleAssignmentScheduleExpiration',
    'EligibleRoleAssignmentTicket',
]

@pulumi.output_type
class ActiveRoleAssignmentSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startDateTime":
            suggest = "start_date_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActiveRoleAssignmentSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActiveRoleAssignmentSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActiveRoleAssignmentSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expiration: Optional['outputs.ActiveRoleAssignmentScheduleExpiration'] = None,
                 start_date_time: Optional[str] = None):
        """
        :param 'ActiveRoleAssignmentScheduleExpirationArgs' expiration: A `expiration` block as defined above.
        :param str start_date_time: The start date time of the role assignment. Changing this forces a new Pim Active Role Assignment to be created.
        """
        ActiveRoleAssignmentSchedule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expiration=expiration,
            start_date_time=start_date_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expiration: Optional['outputs.ActiveRoleAssignmentScheduleExpiration'] = None,
             start_date_time: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if expiration is not None:
            _setter("expiration", expiration)
        if start_date_time is not None:
            _setter("start_date_time", start_date_time)

    @property
    @pulumi.getter
    def expiration(self) -> Optional['outputs.ActiveRoleAssignmentScheduleExpiration']:
        """
        A `expiration` block as defined above.
        """
        return pulumi.get(self, "expiration")

    @property
    @pulumi.getter(name="startDateTime")
    def start_date_time(self) -> Optional[str]:
        """
        The start date time of the role assignment. Changing this forces a new Pim Active Role Assignment to be created.
        """
        return pulumi.get(self, "start_date_time")


@pulumi.output_type
class ActiveRoleAssignmentScheduleExpiration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationDays":
            suggest = "duration_days"
        elif key == "durationHours":
            suggest = "duration_hours"
        elif key == "endDateTime":
            suggest = "end_date_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActiveRoleAssignmentScheduleExpiration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActiveRoleAssignmentScheduleExpiration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActiveRoleAssignmentScheduleExpiration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration_days: Optional[int] = None,
                 duration_hours: Optional[int] = None,
                 end_date_time: Optional[str] = None):
        """
        :param int duration_days: The duration of the role assignment in days. Conflicts with `schedule.0.expiration.0.duration_hours`,`schedule.0.expiration.0.end_date_time` Changing this forces a new Pim Active Role Assignment to be created.
        :param int duration_hours: The duration of the role assignment in hours. Conflicts with `schedule.0.expiration.0.duration_days`,`schedule.0.expiration.0.end_date_time` Changing this forces a new Pim Active Role Assignment to be created.
        :param str end_date_time: The end date time of the role assignment. Conflicts with `schedule.0.expiration.0.duration_days`,`schedule.0.expiration.0.duration_hours` Changing this forces a new Pim Active Role Assignment to be created.
        """
        ActiveRoleAssignmentScheduleExpiration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            duration_days=duration_days,
            duration_hours=duration_hours,
            end_date_time=end_date_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             duration_days: Optional[int] = None,
             duration_hours: Optional[int] = None,
             end_date_time: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if duration_days is not None:
            _setter("duration_days", duration_days)
        if duration_hours is not None:
            _setter("duration_hours", duration_hours)
        if end_date_time is not None:
            _setter("end_date_time", end_date_time)

    @property
    @pulumi.getter(name="durationDays")
    def duration_days(self) -> Optional[int]:
        """
        The duration of the role assignment in days. Conflicts with `schedule.0.expiration.0.duration_hours`,`schedule.0.expiration.0.end_date_time` Changing this forces a new Pim Active Role Assignment to be created.
        """
        return pulumi.get(self, "duration_days")

    @property
    @pulumi.getter(name="durationHours")
    def duration_hours(self) -> Optional[int]:
        """
        The duration of the role assignment in hours. Conflicts with `schedule.0.expiration.0.duration_days`,`schedule.0.expiration.0.end_date_time` Changing this forces a new Pim Active Role Assignment to be created.
        """
        return pulumi.get(self, "duration_hours")

    @property
    @pulumi.getter(name="endDateTime")
    def end_date_time(self) -> Optional[str]:
        """
        The end date time of the role assignment. Conflicts with `schedule.0.expiration.0.duration_days`,`schedule.0.expiration.0.duration_hours` Changing this forces a new Pim Active Role Assignment to be created.
        """
        return pulumi.get(self, "end_date_time")


@pulumi.output_type
class ActiveRoleAssignmentTicket(dict):
    def __init__(__self__, *,
                 number: Optional[str] = None,
                 system: Optional[str] = None):
        """
        :param str number: The ticket number.
        :param str system: The ticket system.
        """
        ActiveRoleAssignmentTicket._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            number=number,
            system=system,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             number: Optional[str] = None,
             system: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if number is not None:
            _setter("number", number)
        if system is not None:
            _setter("system", system)

    @property
    @pulumi.getter
    def number(self) -> Optional[str]:
        """
        The ticket number.
        """
        return pulumi.get(self, "number")

    @property
    @pulumi.getter
    def system(self) -> Optional[str]:
        """
        The ticket system.
        """
        return pulumi.get(self, "system")


@pulumi.output_type
class EligibleRoleAssignmentSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startDateTime":
            suggest = "start_date_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EligibleRoleAssignmentSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EligibleRoleAssignmentSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EligibleRoleAssignmentSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expiration: Optional['outputs.EligibleRoleAssignmentScheduleExpiration'] = None,
                 start_date_time: Optional[str] = None):
        """
        :param 'EligibleRoleAssignmentScheduleExpirationArgs' expiration: A `expiration` block as defined above.
        :param str start_date_time: The start date time of the role assignment. Changing this forces a new Pim Eligible Role Assignment to be created.
        """
        EligibleRoleAssignmentSchedule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expiration=expiration,
            start_date_time=start_date_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expiration: Optional['outputs.EligibleRoleAssignmentScheduleExpiration'] = None,
             start_date_time: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if expiration is not None:
            _setter("expiration", expiration)
        if start_date_time is not None:
            _setter("start_date_time", start_date_time)

    @property
    @pulumi.getter
    def expiration(self) -> Optional['outputs.EligibleRoleAssignmentScheduleExpiration']:
        """
        A `expiration` block as defined above.
        """
        return pulumi.get(self, "expiration")

    @property
    @pulumi.getter(name="startDateTime")
    def start_date_time(self) -> Optional[str]:
        """
        The start date time of the role assignment. Changing this forces a new Pim Eligible Role Assignment to be created.
        """
        return pulumi.get(self, "start_date_time")


@pulumi.output_type
class EligibleRoleAssignmentScheduleExpiration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationDays":
            suggest = "duration_days"
        elif key == "durationHours":
            suggest = "duration_hours"
        elif key == "endDateTime":
            suggest = "end_date_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EligibleRoleAssignmentScheduleExpiration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EligibleRoleAssignmentScheduleExpiration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EligibleRoleAssignmentScheduleExpiration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration_days: Optional[int] = None,
                 duration_hours: Optional[int] = None,
                 end_date_time: Optional[str] = None):
        """
        :param int duration_days: The duration of the role assignment in days. Conflicts with `schedule.0.expiration.0.duration_hours`,`schedule.0.expiration.0.end_date_time` Changing this forces a new Pim Eligible Role Assignment to be created.
        :param int duration_hours: The duration of the role assignment in hours. Conflicts with `schedule.0.expiration.0.duration_days`,`schedule.0.expiration.0.end_date_time` Changing this forces a new Pim Eligible Role Assignment to be created.
        :param str end_date_time: The end date time of the role assignment. Conflicts with `schedule.0.expiration.0.duration_days`,`schedule.0.expiration.0.duration_hours` Changing this forces a new Pim Eligible Role Assignment to be created.
        """
        EligibleRoleAssignmentScheduleExpiration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            duration_days=duration_days,
            duration_hours=duration_hours,
            end_date_time=end_date_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             duration_days: Optional[int] = None,
             duration_hours: Optional[int] = None,
             end_date_time: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if duration_days is not None:
            _setter("duration_days", duration_days)
        if duration_hours is not None:
            _setter("duration_hours", duration_hours)
        if end_date_time is not None:
            _setter("end_date_time", end_date_time)

    @property
    @pulumi.getter(name="durationDays")
    def duration_days(self) -> Optional[int]:
        """
        The duration of the role assignment in days. Conflicts with `schedule.0.expiration.0.duration_hours`,`schedule.0.expiration.0.end_date_time` Changing this forces a new Pim Eligible Role Assignment to be created.
        """
        return pulumi.get(self, "duration_days")

    @property
    @pulumi.getter(name="durationHours")
    def duration_hours(self) -> Optional[int]:
        """
        The duration of the role assignment in hours. Conflicts with `schedule.0.expiration.0.duration_days`,`schedule.0.expiration.0.end_date_time` Changing this forces a new Pim Eligible Role Assignment to be created.
        """
        return pulumi.get(self, "duration_hours")

    @property
    @pulumi.getter(name="endDateTime")
    def end_date_time(self) -> Optional[str]:
        """
        The end date time of the role assignment. Conflicts with `schedule.0.expiration.0.duration_days`,`schedule.0.expiration.0.duration_hours` Changing this forces a new Pim Eligible Role Assignment to be created.
        """
        return pulumi.get(self, "end_date_time")


@pulumi.output_type
class EligibleRoleAssignmentTicket(dict):
    def __init__(__self__, *,
                 number: Optional[str] = None,
                 system: Optional[str] = None):
        """
        :param str number: The ticket number.
        :param str system: The ticket system.
        """
        EligibleRoleAssignmentTicket._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            number=number,
            system=system,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             number: Optional[str] = None,
             system: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if number is not None:
            _setter("number", number)
        if system is not None:
            _setter("system", system)

    @property
    @pulumi.getter
    def number(self) -> Optional[str]:
        """
        The ticket number.
        """
        return pulumi.get(self, "number")

    @property
    @pulumi.getter
    def system(self) -> Optional[str]:
        """
        The ticket system.
        """
        return pulumi.get(self, "system")


