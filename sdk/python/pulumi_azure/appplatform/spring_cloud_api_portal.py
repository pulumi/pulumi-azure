# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SpringCloudApiPortalArgs', 'SpringCloudApiPortal']

@pulumi.input_type
class SpringCloudApiPortalArgs:
    def __init__(__self__, *,
                 spring_cloud_service_id: pulumi.Input[str],
                 gateway_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 https_only_enabled: Optional[pulumi.Input[bool]] = None,
                 instance_count: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 public_network_access_enabled: Optional[pulumi.Input[bool]] = None,
                 sso: Optional[pulumi.Input['SpringCloudApiPortalSsoArgs']] = None):
        """
        The set of arguments for constructing a SpringCloudApiPortal resource.
        :param pulumi.Input[str] spring_cloud_service_id: The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud API Portal to be created.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] gateway_ids: Specifies a list of Spring Cloud Gateway.
        :param pulumi.Input[bool] https_only_enabled: is only https is allowed?
        :param pulumi.Input[int] instance_count: Specifies the required instance count of the Spring Cloud API Portal. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
        :param pulumi.Input[str] name: The name which should be used for this Spring Cloud API Portal. Changing this forces a new Spring Cloud API Portal to be created.
        :param pulumi.Input[bool] public_network_access_enabled: Is the public network access enabled?
        :param pulumi.Input['SpringCloudApiPortalSsoArgs'] sso: A `sso` block as defined below.
        """
        pulumi.set(__self__, "spring_cloud_service_id", spring_cloud_service_id)
        if gateway_ids is not None:
            pulumi.set(__self__, "gateway_ids", gateway_ids)
        if https_only_enabled is not None:
            pulumi.set(__self__, "https_only_enabled", https_only_enabled)
        if instance_count is not None:
            pulumi.set(__self__, "instance_count", instance_count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if public_network_access_enabled is not None:
            pulumi.set(__self__, "public_network_access_enabled", public_network_access_enabled)
        if sso is not None:
            pulumi.set(__self__, "sso", sso)

    @property
    @pulumi.getter(name="springCloudServiceId")
    def spring_cloud_service_id(self) -> pulumi.Input[str]:
        """
        The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud API Portal to be created.
        """
        return pulumi.get(self, "spring_cloud_service_id")

    @spring_cloud_service_id.setter
    def spring_cloud_service_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "spring_cloud_service_id", value)

    @property
    @pulumi.getter(name="gatewayIds")
    def gateway_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies a list of Spring Cloud Gateway.
        """
        return pulumi.get(self, "gateway_ids")

    @gateway_ids.setter
    def gateway_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "gateway_ids", value)

    @property
    @pulumi.getter(name="httpsOnlyEnabled")
    def https_only_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        is only https is allowed?
        """
        return pulumi.get(self, "https_only_enabled")

    @https_only_enabled.setter
    def https_only_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "https_only_enabled", value)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the required instance count of the Spring Cloud API Portal. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
        """
        return pulumi.get(self, "instance_count")

    @instance_count.setter
    def instance_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_count", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name which should be used for this Spring Cloud API Portal. Changing this forces a new Spring Cloud API Portal to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="publicNetworkAccessEnabled")
    def public_network_access_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the public network access enabled?
        """
        return pulumi.get(self, "public_network_access_enabled")

    @public_network_access_enabled.setter
    def public_network_access_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_network_access_enabled", value)

    @property
    @pulumi.getter
    def sso(self) -> Optional[pulumi.Input['SpringCloudApiPortalSsoArgs']]:
        """
        A `sso` block as defined below.
        """
        return pulumi.get(self, "sso")

    @sso.setter
    def sso(self, value: Optional[pulumi.Input['SpringCloudApiPortalSsoArgs']]):
        pulumi.set(self, "sso", value)


@pulumi.input_type
class _SpringCloudApiPortalState:
    def __init__(__self__, *,
                 gateway_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 https_only_enabled: Optional[pulumi.Input[bool]] = None,
                 instance_count: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 public_network_access_enabled: Optional[pulumi.Input[bool]] = None,
                 spring_cloud_service_id: Optional[pulumi.Input[str]] = None,
                 sso: Optional[pulumi.Input['SpringCloudApiPortalSsoArgs']] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SpringCloudApiPortal resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] gateway_ids: Specifies a list of Spring Cloud Gateway.
        :param pulumi.Input[bool] https_only_enabled: is only https is allowed?
        :param pulumi.Input[int] instance_count: Specifies the required instance count of the Spring Cloud API Portal. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
        :param pulumi.Input[str] name: The name which should be used for this Spring Cloud API Portal. Changing this forces a new Spring Cloud API Portal to be created.
        :param pulumi.Input[bool] public_network_access_enabled: Is the public network access enabled?
        :param pulumi.Input[str] spring_cloud_service_id: The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud API Portal to be created.
        :param pulumi.Input['SpringCloudApiPortalSsoArgs'] sso: A `sso` block as defined below.
        :param pulumi.Input[str] url: TODO.
        """
        if gateway_ids is not None:
            pulumi.set(__self__, "gateway_ids", gateway_ids)
        if https_only_enabled is not None:
            pulumi.set(__self__, "https_only_enabled", https_only_enabled)
        if instance_count is not None:
            pulumi.set(__self__, "instance_count", instance_count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if public_network_access_enabled is not None:
            pulumi.set(__self__, "public_network_access_enabled", public_network_access_enabled)
        if spring_cloud_service_id is not None:
            pulumi.set(__self__, "spring_cloud_service_id", spring_cloud_service_id)
        if sso is not None:
            pulumi.set(__self__, "sso", sso)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="gatewayIds")
    def gateway_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies a list of Spring Cloud Gateway.
        """
        return pulumi.get(self, "gateway_ids")

    @gateway_ids.setter
    def gateway_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "gateway_ids", value)

    @property
    @pulumi.getter(name="httpsOnlyEnabled")
    def https_only_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        is only https is allowed?
        """
        return pulumi.get(self, "https_only_enabled")

    @https_only_enabled.setter
    def https_only_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "https_only_enabled", value)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the required instance count of the Spring Cloud API Portal. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
        """
        return pulumi.get(self, "instance_count")

    @instance_count.setter
    def instance_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_count", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name which should be used for this Spring Cloud API Portal. Changing this forces a new Spring Cloud API Portal to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="publicNetworkAccessEnabled")
    def public_network_access_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the public network access enabled?
        """
        return pulumi.get(self, "public_network_access_enabled")

    @public_network_access_enabled.setter
    def public_network_access_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_network_access_enabled", value)

    @property
    @pulumi.getter(name="springCloudServiceId")
    def spring_cloud_service_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud API Portal to be created.
        """
        return pulumi.get(self, "spring_cloud_service_id")

    @spring_cloud_service_id.setter
    def spring_cloud_service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spring_cloud_service_id", value)

    @property
    @pulumi.getter
    def sso(self) -> Optional[pulumi.Input['SpringCloudApiPortalSsoArgs']]:
        """
        A `sso` block as defined below.
        """
        return pulumi.get(self, "sso")

    @sso.setter
    def sso(self, value: Optional[pulumi.Input['SpringCloudApiPortalSsoArgs']]):
        pulumi.set(self, "sso", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        TODO.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


class SpringCloudApiPortal(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 gateway_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 https_only_enabled: Optional[pulumi.Input[bool]] = None,
                 instance_count: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 public_network_access_enabled: Optional[pulumi.Input[bool]] = None,
                 spring_cloud_service_id: Optional[pulumi.Input[str]] = None,
                 sso: Optional[pulumi.Input[pulumi.InputType['SpringCloudApiPortalSsoArgs']]] = None,
                 __props__=None):
        """
        Manages a Spring Cloud API Portal.

        > **NOTE:** This resource is applicable only for Spring Cloud Service with enterprise tier.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_spring_cloud_service = azure.appplatform.SpringCloudService("exampleSpringCloudService",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            sku_name="E0")
        example_spring_cloud_gateway = azure.appplatform.SpringCloudGateway("exampleSpringCloudGateway", spring_cloud_service_id=example_spring_cloud_service.id)
        example_spring_cloud_api_portal = azure.appplatform.SpringCloudApiPortal("exampleSpringCloudApiPortal",
            spring_cloud_service_id=example_spring_cloud_service.id,
            gateway_ids=[example_spring_cloud_gateway.id],
            https_only_enabled=False,
            public_network_access_enabled=True,
            instance_count=1,
            sso=azure.appplatform.SpringCloudApiPortalSsoArgs(
                client_id="test",
                client_secret="secret",
                issuer_uri="https://www.example.com/issueToken",
                scopes=["read"],
            ))
        ```

        ## Import

        Spring Cloud API Portals can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:appplatform/springCloudApiPortal:SpringCloudApiPortal example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.AppPlatform/Spring/service1/apiPortals/apiPortal1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] gateway_ids: Specifies a list of Spring Cloud Gateway.
        :param pulumi.Input[bool] https_only_enabled: is only https is allowed?
        :param pulumi.Input[int] instance_count: Specifies the required instance count of the Spring Cloud API Portal. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
        :param pulumi.Input[str] name: The name which should be used for this Spring Cloud API Portal. Changing this forces a new Spring Cloud API Portal to be created.
        :param pulumi.Input[bool] public_network_access_enabled: Is the public network access enabled?
        :param pulumi.Input[str] spring_cloud_service_id: The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud API Portal to be created.
        :param pulumi.Input[pulumi.InputType['SpringCloudApiPortalSsoArgs']] sso: A `sso` block as defined below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SpringCloudApiPortalArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Spring Cloud API Portal.

        > **NOTE:** This resource is applicable only for Spring Cloud Service with enterprise tier.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_spring_cloud_service = azure.appplatform.SpringCloudService("exampleSpringCloudService",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            sku_name="E0")
        example_spring_cloud_gateway = azure.appplatform.SpringCloudGateway("exampleSpringCloudGateway", spring_cloud_service_id=example_spring_cloud_service.id)
        example_spring_cloud_api_portal = azure.appplatform.SpringCloudApiPortal("exampleSpringCloudApiPortal",
            spring_cloud_service_id=example_spring_cloud_service.id,
            gateway_ids=[example_spring_cloud_gateway.id],
            https_only_enabled=False,
            public_network_access_enabled=True,
            instance_count=1,
            sso=azure.appplatform.SpringCloudApiPortalSsoArgs(
                client_id="test",
                client_secret="secret",
                issuer_uri="https://www.example.com/issueToken",
                scopes=["read"],
            ))
        ```

        ## Import

        Spring Cloud API Portals can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:appplatform/springCloudApiPortal:SpringCloudApiPortal example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.AppPlatform/Spring/service1/apiPortals/apiPortal1
        ```

        :param str resource_name: The name of the resource.
        :param SpringCloudApiPortalArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SpringCloudApiPortalArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 gateway_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 https_only_enabled: Optional[pulumi.Input[bool]] = None,
                 instance_count: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 public_network_access_enabled: Optional[pulumi.Input[bool]] = None,
                 spring_cloud_service_id: Optional[pulumi.Input[str]] = None,
                 sso: Optional[pulumi.Input[pulumi.InputType['SpringCloudApiPortalSsoArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SpringCloudApiPortalArgs.__new__(SpringCloudApiPortalArgs)

            __props__.__dict__["gateway_ids"] = gateway_ids
            __props__.__dict__["https_only_enabled"] = https_only_enabled
            __props__.__dict__["instance_count"] = instance_count
            __props__.__dict__["name"] = name
            __props__.__dict__["public_network_access_enabled"] = public_network_access_enabled
            if spring_cloud_service_id is None and not opts.urn:
                raise TypeError("Missing required property 'spring_cloud_service_id'")
            __props__.__dict__["spring_cloud_service_id"] = spring_cloud_service_id
            __props__.__dict__["sso"] = sso
            __props__.__dict__["url"] = None
        super(SpringCloudApiPortal, __self__).__init__(
            'azure:appplatform/springCloudApiPortal:SpringCloudApiPortal',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            gateway_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            https_only_enabled: Optional[pulumi.Input[bool]] = None,
            instance_count: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            public_network_access_enabled: Optional[pulumi.Input[bool]] = None,
            spring_cloud_service_id: Optional[pulumi.Input[str]] = None,
            sso: Optional[pulumi.Input[pulumi.InputType['SpringCloudApiPortalSsoArgs']]] = None,
            url: Optional[pulumi.Input[str]] = None) -> 'SpringCloudApiPortal':
        """
        Get an existing SpringCloudApiPortal resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] gateway_ids: Specifies a list of Spring Cloud Gateway.
        :param pulumi.Input[bool] https_only_enabled: is only https is allowed?
        :param pulumi.Input[int] instance_count: Specifies the required instance count of the Spring Cloud API Portal. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
        :param pulumi.Input[str] name: The name which should be used for this Spring Cloud API Portal. Changing this forces a new Spring Cloud API Portal to be created.
        :param pulumi.Input[bool] public_network_access_enabled: Is the public network access enabled?
        :param pulumi.Input[str] spring_cloud_service_id: The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud API Portal to be created.
        :param pulumi.Input[pulumi.InputType['SpringCloudApiPortalSsoArgs']] sso: A `sso` block as defined below.
        :param pulumi.Input[str] url: TODO.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SpringCloudApiPortalState.__new__(_SpringCloudApiPortalState)

        __props__.__dict__["gateway_ids"] = gateway_ids
        __props__.__dict__["https_only_enabled"] = https_only_enabled
        __props__.__dict__["instance_count"] = instance_count
        __props__.__dict__["name"] = name
        __props__.__dict__["public_network_access_enabled"] = public_network_access_enabled
        __props__.__dict__["spring_cloud_service_id"] = spring_cloud_service_id
        __props__.__dict__["sso"] = sso
        __props__.__dict__["url"] = url
        return SpringCloudApiPortal(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="gatewayIds")
    def gateway_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Specifies a list of Spring Cloud Gateway.
        """
        return pulumi.get(self, "gateway_ids")

    @property
    @pulumi.getter(name="httpsOnlyEnabled")
    def https_only_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        is only https is allowed?
        """
        return pulumi.get(self, "https_only_enabled")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> pulumi.Output[Optional[int]]:
        """
        Specifies the required instance count of the Spring Cloud API Portal. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name which should be used for this Spring Cloud API Portal. Changing this forces a new Spring Cloud API Portal to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="publicNetworkAccessEnabled")
    def public_network_access_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Is the public network access enabled?
        """
        return pulumi.get(self, "public_network_access_enabled")

    @property
    @pulumi.getter(name="springCloudServiceId")
    def spring_cloud_service_id(self) -> pulumi.Output[str]:
        """
        The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud API Portal to be created.
        """
        return pulumi.get(self, "spring_cloud_service_id")

    @property
    @pulumi.getter
    def sso(self) -> pulumi.Output[Optional['outputs.SpringCloudApiPortalSso']]:
        """
        A `sso` block as defined below.
        """
        return pulumi.get(self, "sso")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        TODO.
        """
        return pulumi.get(self, "url")

