# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SpringCloudContainerDeploymentArgs', 'SpringCloudContainerDeployment']

@pulumi.input_type
class SpringCloudContainerDeploymentArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 server: pulumi.Input[str],
                 spring_cloud_app_id: pulumi.Input[str],
                 addon_json: Optional[pulumi.Input[str]] = None,
                 arguments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 environment_variables: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 instance_count: Optional[pulumi.Input[int]] = None,
                 language_framework: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 quota: Optional[pulumi.Input['SpringCloudContainerDeploymentQuotaArgs']] = None):
        """
        The set of arguments for constructing a SpringCloudContainerDeployment resource.
        :param pulumi.Input[str] image: Container image of the custom container. This should be in the form of `<repository>:<tag>` without the server name of the registry.
        :param pulumi.Input[str] server: The name of the registry that contains the container image.
        :param pulumi.Input[str] spring_cloud_app_id: The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Container Deployment to be created.
        :param pulumi.Input[str] addon_json: A JSON object that contains the addon configurations of the Spring Cloud Container Deployment.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] arguments: Specifies the arguments to the entrypoint. The docker image's `CMD` is used if not specified.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Specifies the entrypoint array. It will not be executed within a shell. The docker image's `ENTRYPOINT` is used if not specified.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] environment_variables: Specifies the environment variables of the Spring Cloud Deployment as a map of key-value pairs.
        :param pulumi.Input[int] instance_count: Specifies the required instance count of the Spring Cloud Deployment. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
        :param pulumi.Input[str] language_framework: Specifies the language framework of the container image. The only possible value is `springboot`.
        :param pulumi.Input[str] name: The name which should be used for this Spring Cloud Container Deployment. Changing this forces a new Spring Cloud Container Deployment to be created.
        :param pulumi.Input['SpringCloudContainerDeploymentQuotaArgs'] quota: A `quota` block as defined below.
        """
        SpringCloudContainerDeploymentArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            image=image,
            server=server,
            spring_cloud_app_id=spring_cloud_app_id,
            addon_json=addon_json,
            arguments=arguments,
            commands=commands,
            environment_variables=environment_variables,
            instance_count=instance_count,
            language_framework=language_framework,
            name=name,
            quota=quota,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             image: pulumi.Input[str],
             server: pulumi.Input[str],
             spring_cloud_app_id: pulumi.Input[str],
             addon_json: Optional[pulumi.Input[str]] = None,
             arguments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             environment_variables: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             instance_count: Optional[pulumi.Input[int]] = None,
             language_framework: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             quota: Optional[pulumi.Input['SpringCloudContainerDeploymentQuotaArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("image", image)
        _setter("server", server)
        _setter("spring_cloud_app_id", spring_cloud_app_id)
        if addon_json is not None:
            _setter("addon_json", addon_json)
        if arguments is not None:
            _setter("arguments", arguments)
        if commands is not None:
            _setter("commands", commands)
        if environment_variables is not None:
            _setter("environment_variables", environment_variables)
        if instance_count is not None:
            _setter("instance_count", instance_count)
        if language_framework is not None:
            _setter("language_framework", language_framework)
        if name is not None:
            _setter("name", name)
        if quota is not None:
            _setter("quota", quota)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        """
        Container image of the custom container. This should be in the form of `<repository>:<tag>` without the server name of the registry.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        """
        The name of the registry that contains the container image.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="springCloudAppId")
    def spring_cloud_app_id(self) -> pulumi.Input[str]:
        """
        The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Container Deployment to be created.
        """
        return pulumi.get(self, "spring_cloud_app_id")

    @spring_cloud_app_id.setter
    def spring_cloud_app_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "spring_cloud_app_id", value)

    @property
    @pulumi.getter(name="addonJson")
    def addon_json(self) -> Optional[pulumi.Input[str]]:
        """
        A JSON object that contains the addon configurations of the Spring Cloud Container Deployment.
        """
        return pulumi.get(self, "addon_json")

    @addon_json.setter
    def addon_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addon_json", value)

    @property
    @pulumi.getter
    def arguments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the arguments to the entrypoint. The docker image's `CMD` is used if not specified.
        """
        return pulumi.get(self, "arguments")

    @arguments.setter
    def arguments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "arguments", value)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the entrypoint array. It will not be executed within a shell. The docker image's `ENTRYPOINT` is used if not specified.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Specifies the environment variables of the Spring Cloud Deployment as a map of key-value pairs.
        """
        return pulumi.get(self, "environment_variables")

    @environment_variables.setter
    def environment_variables(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "environment_variables", value)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the required instance count of the Spring Cloud Deployment. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
        """
        return pulumi.get(self, "instance_count")

    @instance_count.setter
    def instance_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_count", value)

    @property
    @pulumi.getter(name="languageFramework")
    def language_framework(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the language framework of the container image. The only possible value is `springboot`.
        """
        return pulumi.get(self, "language_framework")

    @language_framework.setter
    def language_framework(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language_framework", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name which should be used for this Spring Cloud Container Deployment. Changing this forces a new Spring Cloud Container Deployment to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def quota(self) -> Optional[pulumi.Input['SpringCloudContainerDeploymentQuotaArgs']]:
        """
        A `quota` block as defined below.
        """
        return pulumi.get(self, "quota")

    @quota.setter
    def quota(self, value: Optional[pulumi.Input['SpringCloudContainerDeploymentQuotaArgs']]):
        pulumi.set(self, "quota", value)


@pulumi.input_type
class _SpringCloudContainerDeploymentState:
    def __init__(__self__, *,
                 addon_json: Optional[pulumi.Input[str]] = None,
                 arguments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 environment_variables: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 instance_count: Optional[pulumi.Input[int]] = None,
                 language_framework: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 quota: Optional[pulumi.Input['SpringCloudContainerDeploymentQuotaArgs']] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 spring_cloud_app_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SpringCloudContainerDeployment resources.
        :param pulumi.Input[str] addon_json: A JSON object that contains the addon configurations of the Spring Cloud Container Deployment.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] arguments: Specifies the arguments to the entrypoint. The docker image's `CMD` is used if not specified.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Specifies the entrypoint array. It will not be executed within a shell. The docker image's `ENTRYPOINT` is used if not specified.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] environment_variables: Specifies the environment variables of the Spring Cloud Deployment as a map of key-value pairs.
        :param pulumi.Input[str] image: Container image of the custom container. This should be in the form of `<repository>:<tag>` without the server name of the registry.
        :param pulumi.Input[int] instance_count: Specifies the required instance count of the Spring Cloud Deployment. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
        :param pulumi.Input[str] language_framework: Specifies the language framework of the container image. The only possible value is `springboot`.
        :param pulumi.Input[str] name: The name which should be used for this Spring Cloud Container Deployment. Changing this forces a new Spring Cloud Container Deployment to be created.
        :param pulumi.Input['SpringCloudContainerDeploymentQuotaArgs'] quota: A `quota` block as defined below.
        :param pulumi.Input[str] server: The name of the registry that contains the container image.
        :param pulumi.Input[str] spring_cloud_app_id: The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Container Deployment to be created.
        """
        _SpringCloudContainerDeploymentState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            addon_json=addon_json,
            arguments=arguments,
            commands=commands,
            environment_variables=environment_variables,
            image=image,
            instance_count=instance_count,
            language_framework=language_framework,
            name=name,
            quota=quota,
            server=server,
            spring_cloud_app_id=spring_cloud_app_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             addon_json: Optional[pulumi.Input[str]] = None,
             arguments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             environment_variables: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             image: Optional[pulumi.Input[str]] = None,
             instance_count: Optional[pulumi.Input[int]] = None,
             language_framework: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             quota: Optional[pulumi.Input['SpringCloudContainerDeploymentQuotaArgs']] = None,
             server: Optional[pulumi.Input[str]] = None,
             spring_cloud_app_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if addon_json is not None:
            _setter("addon_json", addon_json)
        if arguments is not None:
            _setter("arguments", arguments)
        if commands is not None:
            _setter("commands", commands)
        if environment_variables is not None:
            _setter("environment_variables", environment_variables)
        if image is not None:
            _setter("image", image)
        if instance_count is not None:
            _setter("instance_count", instance_count)
        if language_framework is not None:
            _setter("language_framework", language_framework)
        if name is not None:
            _setter("name", name)
        if quota is not None:
            _setter("quota", quota)
        if server is not None:
            _setter("server", server)
        if spring_cloud_app_id is not None:
            _setter("spring_cloud_app_id", spring_cloud_app_id)

    @property
    @pulumi.getter(name="addonJson")
    def addon_json(self) -> Optional[pulumi.Input[str]]:
        """
        A JSON object that contains the addon configurations of the Spring Cloud Container Deployment.
        """
        return pulumi.get(self, "addon_json")

    @addon_json.setter
    def addon_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addon_json", value)

    @property
    @pulumi.getter
    def arguments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the arguments to the entrypoint. The docker image's `CMD` is used if not specified.
        """
        return pulumi.get(self, "arguments")

    @arguments.setter
    def arguments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "arguments", value)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the entrypoint array. It will not be executed within a shell. The docker image's `ENTRYPOINT` is used if not specified.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Specifies the environment variables of the Spring Cloud Deployment as a map of key-value pairs.
        """
        return pulumi.get(self, "environment_variables")

    @environment_variables.setter
    def environment_variables(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "environment_variables", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Container image of the custom container. This should be in the form of `<repository>:<tag>` without the server name of the registry.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the required instance count of the Spring Cloud Deployment. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
        """
        return pulumi.get(self, "instance_count")

    @instance_count.setter
    def instance_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_count", value)

    @property
    @pulumi.getter(name="languageFramework")
    def language_framework(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the language framework of the container image. The only possible value is `springboot`.
        """
        return pulumi.get(self, "language_framework")

    @language_framework.setter
    def language_framework(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language_framework", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name which should be used for this Spring Cloud Container Deployment. Changing this forces a new Spring Cloud Container Deployment to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def quota(self) -> Optional[pulumi.Input['SpringCloudContainerDeploymentQuotaArgs']]:
        """
        A `quota` block as defined below.
        """
        return pulumi.get(self, "quota")

    @quota.setter
    def quota(self, value: Optional[pulumi.Input['SpringCloudContainerDeploymentQuotaArgs']]):
        pulumi.set(self, "quota", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the registry that contains the container image.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="springCloudAppId")
    def spring_cloud_app_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Container Deployment to be created.
        """
        return pulumi.get(self, "spring_cloud_app_id")

    @spring_cloud_app_id.setter
    def spring_cloud_app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spring_cloud_app_id", value)


class SpringCloudContainerDeployment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addon_json: Optional[pulumi.Input[str]] = None,
                 arguments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 environment_variables: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 instance_count: Optional[pulumi.Input[int]] = None,
                 language_framework: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 quota: Optional[pulumi.Input[pulumi.InputType['SpringCloudContainerDeploymentQuotaArgs']]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 spring_cloud_app_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a Spring Cloud Container Deployment.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_spring_cloud_service = azure.appplatform.SpringCloudService("exampleSpringCloudService",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            sku_name="E0")
        example_spring_cloud_app = azure.appplatform.SpringCloudApp("exampleSpringCloudApp",
            resource_group_name=example_spring_cloud_service.resource_group_name,
            service_name=example_spring_cloud_service.name)
        example_spring_cloud_container_deployment = azure.appplatform.SpringCloudContainerDeployment("exampleSpringCloudContainerDeployment",
            spring_cloud_app_id=example_spring_cloud_app.id,
            instance_count=2,
            arguments=[
                "-cp",
                "/app/resources:/app/classes:/app/libs/*",
                "hello.Application",
            ],
            commands=["java"],
            environment_variables={
                "Foo": "Bar",
                "Env": "Staging",
            },
            server="docker.io",
            image="springio/gs-spring-boot-docker",
            language_framework="springboot")
        ```

        ## Import

        Spring Cloud Container Deployments can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:appplatform/springCloudContainerDeployment:SpringCloudContainerDeployment example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.AppPlatform/spring/spring1/apps/app1/deployments/deploy1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] addon_json: A JSON object that contains the addon configurations of the Spring Cloud Container Deployment.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] arguments: Specifies the arguments to the entrypoint. The docker image's `CMD` is used if not specified.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Specifies the entrypoint array. It will not be executed within a shell. The docker image's `ENTRYPOINT` is used if not specified.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] environment_variables: Specifies the environment variables of the Spring Cloud Deployment as a map of key-value pairs.
        :param pulumi.Input[str] image: Container image of the custom container. This should be in the form of `<repository>:<tag>` without the server name of the registry.
        :param pulumi.Input[int] instance_count: Specifies the required instance count of the Spring Cloud Deployment. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
        :param pulumi.Input[str] language_framework: Specifies the language framework of the container image. The only possible value is `springboot`.
        :param pulumi.Input[str] name: The name which should be used for this Spring Cloud Container Deployment. Changing this forces a new Spring Cloud Container Deployment to be created.
        :param pulumi.Input[pulumi.InputType['SpringCloudContainerDeploymentQuotaArgs']] quota: A `quota` block as defined below.
        :param pulumi.Input[str] server: The name of the registry that contains the container image.
        :param pulumi.Input[str] spring_cloud_app_id: The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Container Deployment to be created.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SpringCloudContainerDeploymentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Spring Cloud Container Deployment.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_spring_cloud_service = azure.appplatform.SpringCloudService("exampleSpringCloudService",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            sku_name="E0")
        example_spring_cloud_app = azure.appplatform.SpringCloudApp("exampleSpringCloudApp",
            resource_group_name=example_spring_cloud_service.resource_group_name,
            service_name=example_spring_cloud_service.name)
        example_spring_cloud_container_deployment = azure.appplatform.SpringCloudContainerDeployment("exampleSpringCloudContainerDeployment",
            spring_cloud_app_id=example_spring_cloud_app.id,
            instance_count=2,
            arguments=[
                "-cp",
                "/app/resources:/app/classes:/app/libs/*",
                "hello.Application",
            ],
            commands=["java"],
            environment_variables={
                "Foo": "Bar",
                "Env": "Staging",
            },
            server="docker.io",
            image="springio/gs-spring-boot-docker",
            language_framework="springboot")
        ```

        ## Import

        Spring Cloud Container Deployments can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:appplatform/springCloudContainerDeployment:SpringCloudContainerDeployment example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.AppPlatform/spring/spring1/apps/app1/deployments/deploy1
        ```

        :param str resource_name: The name of the resource.
        :param SpringCloudContainerDeploymentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SpringCloudContainerDeploymentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            SpringCloudContainerDeploymentArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addon_json: Optional[pulumi.Input[str]] = None,
                 arguments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 environment_variables: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 instance_count: Optional[pulumi.Input[int]] = None,
                 language_framework: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 quota: Optional[pulumi.Input[pulumi.InputType['SpringCloudContainerDeploymentQuotaArgs']]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 spring_cloud_app_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SpringCloudContainerDeploymentArgs.__new__(SpringCloudContainerDeploymentArgs)

            __props__.__dict__["addon_json"] = addon_json
            __props__.__dict__["arguments"] = arguments
            __props__.__dict__["commands"] = commands
            __props__.__dict__["environment_variables"] = environment_variables
            if image is None and not opts.urn:
                raise TypeError("Missing required property 'image'")
            __props__.__dict__["image"] = image
            __props__.__dict__["instance_count"] = instance_count
            __props__.__dict__["language_framework"] = language_framework
            __props__.__dict__["name"] = name
            if quota is not None and not isinstance(quota, SpringCloudContainerDeploymentQuotaArgs):
                quota = quota or {}
                def _setter(key, value):
                    quota[key] = value
                SpringCloudContainerDeploymentQuotaArgs._configure(_setter, **quota)
            __props__.__dict__["quota"] = quota
            if server is None and not opts.urn:
                raise TypeError("Missing required property 'server'")
            __props__.__dict__["server"] = server
            if spring_cloud_app_id is None and not opts.urn:
                raise TypeError("Missing required property 'spring_cloud_app_id'")
            __props__.__dict__["spring_cloud_app_id"] = spring_cloud_app_id
        super(SpringCloudContainerDeployment, __self__).__init__(
            'azure:appplatform/springCloudContainerDeployment:SpringCloudContainerDeployment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            addon_json: Optional[pulumi.Input[str]] = None,
            arguments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            environment_variables: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            image: Optional[pulumi.Input[str]] = None,
            instance_count: Optional[pulumi.Input[int]] = None,
            language_framework: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            quota: Optional[pulumi.Input[pulumi.InputType['SpringCloudContainerDeploymentQuotaArgs']]] = None,
            server: Optional[pulumi.Input[str]] = None,
            spring_cloud_app_id: Optional[pulumi.Input[str]] = None) -> 'SpringCloudContainerDeployment':
        """
        Get an existing SpringCloudContainerDeployment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] addon_json: A JSON object that contains the addon configurations of the Spring Cloud Container Deployment.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] arguments: Specifies the arguments to the entrypoint. The docker image's `CMD` is used if not specified.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Specifies the entrypoint array. It will not be executed within a shell. The docker image's `ENTRYPOINT` is used if not specified.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] environment_variables: Specifies the environment variables of the Spring Cloud Deployment as a map of key-value pairs.
        :param pulumi.Input[str] image: Container image of the custom container. This should be in the form of `<repository>:<tag>` without the server name of the registry.
        :param pulumi.Input[int] instance_count: Specifies the required instance count of the Spring Cloud Deployment. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
        :param pulumi.Input[str] language_framework: Specifies the language framework of the container image. The only possible value is `springboot`.
        :param pulumi.Input[str] name: The name which should be used for this Spring Cloud Container Deployment. Changing this forces a new Spring Cloud Container Deployment to be created.
        :param pulumi.Input[pulumi.InputType['SpringCloudContainerDeploymentQuotaArgs']] quota: A `quota` block as defined below.
        :param pulumi.Input[str] server: The name of the registry that contains the container image.
        :param pulumi.Input[str] spring_cloud_app_id: The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Container Deployment to be created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SpringCloudContainerDeploymentState.__new__(_SpringCloudContainerDeploymentState)

        __props__.__dict__["addon_json"] = addon_json
        __props__.__dict__["arguments"] = arguments
        __props__.__dict__["commands"] = commands
        __props__.__dict__["environment_variables"] = environment_variables
        __props__.__dict__["image"] = image
        __props__.__dict__["instance_count"] = instance_count
        __props__.__dict__["language_framework"] = language_framework
        __props__.__dict__["name"] = name
        __props__.__dict__["quota"] = quota
        __props__.__dict__["server"] = server
        __props__.__dict__["spring_cloud_app_id"] = spring_cloud_app_id
        return SpringCloudContainerDeployment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addonJson")
    def addon_json(self) -> pulumi.Output[str]:
        """
        A JSON object that contains the addon configurations of the Spring Cloud Container Deployment.
        """
        return pulumi.get(self, "addon_json")

    @property
    @pulumi.getter
    def arguments(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Specifies the arguments to the entrypoint. The docker image's `CMD` is used if not specified.
        """
        return pulumi.get(self, "arguments")

    @property
    @pulumi.getter
    def commands(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Specifies the entrypoint array. It will not be executed within a shell. The docker image's `ENTRYPOINT` is used if not specified.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Specifies the environment variables of the Spring Cloud Deployment as a map of key-value pairs.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter
    def image(self) -> pulumi.Output[str]:
        """
        Container image of the custom container. This should be in the form of `<repository>:<tag>` without the server name of the registry.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> pulumi.Output[Optional[int]]:
        """
        Specifies the required instance count of the Spring Cloud Deployment. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="languageFramework")
    def language_framework(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the language framework of the container image. The only possible value is `springboot`.
        """
        return pulumi.get(self, "language_framework")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name which should be used for this Spring Cloud Container Deployment. Changing this forces a new Spring Cloud Container Deployment to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def quota(self) -> pulumi.Output['outputs.SpringCloudContainerDeploymentQuota']:
        """
        A `quota` block as defined below.
        """
        return pulumi.get(self, "quota")

    @property
    @pulumi.getter
    def server(self) -> pulumi.Output[str]:
        """
        The name of the registry that contains the container image.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="springCloudAppId")
    def spring_cloud_app_id(self) -> pulumi.Output[str]:
        """
        The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Container Deployment to be created.
        """
        return pulumi.get(self, "spring_cloud_app_id")

