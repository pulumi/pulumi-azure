# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SpringCloudDynatraceApplicationPerformanceMonitoringArgs', 'SpringCloudDynatraceApplicationPerformanceMonitoring']

@pulumi.input_type
class SpringCloudDynatraceApplicationPerformanceMonitoringArgs:
    def __init__(__self__, *,
                 connection_point: pulumi.Input[str],
                 spring_cloud_service_id: pulumi.Input[str],
                 tenant: pulumi.Input[str],
                 tenant_token: pulumi.Input[str],
                 api_token: Optional[pulumi.Input[str]] = None,
                 api_url: Optional[pulumi.Input[str]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 globally_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SpringCloudDynatraceApplicationPerformanceMonitoring resource.
        :param pulumi.Input[str] connection_point: Specifies the endpoint to connect to the Dynatrace environment.
        :param pulumi.Input[str] spring_cloud_service_id: The ID of the Spring Cloud Service. Changing this forces a new resource to be created.
        :param pulumi.Input[str] tenant: Specifies the Dynatrace tenant.
        :param pulumi.Input[str] tenant_token: Specifies the internal token that is used for authentication when OneAgent connects to the Dynatrace cluster to send data.
        :param pulumi.Input[str] api_token: Specifies the API token of the Dynatrace environment.
        :param pulumi.Input[str] api_url: Specifies the API Url of the Dynatrace environment.
        :param pulumi.Input[str] environment_id: Specifies the Dynatrace environment ID.
        :param pulumi.Input[bool] globally_enabled: Specifies whether the Spring Cloud Application Performance Monitoring resource for Application Insights is enabled globally. Defaults to `false`.
        :param pulumi.Input[str] name: The name which should be used for this Spring Cloud Application Performance Monitoring resource for Dynatrace. Changing this forces a new resource to be created.
        """
        pulumi.set(__self__, "connection_point", connection_point)
        pulumi.set(__self__, "spring_cloud_service_id", spring_cloud_service_id)
        pulumi.set(__self__, "tenant", tenant)
        pulumi.set(__self__, "tenant_token", tenant_token)
        if api_token is not None:
            pulumi.set(__self__, "api_token", api_token)
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if globally_enabled is not None:
            pulumi.set(__self__, "globally_enabled", globally_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="connectionPoint")
    def connection_point(self) -> pulumi.Input[str]:
        """
        Specifies the endpoint to connect to the Dynatrace environment.
        """
        return pulumi.get(self, "connection_point")

    @connection_point.setter
    def connection_point(self, value: pulumi.Input[str]):
        pulumi.set(self, "connection_point", value)

    @property
    @pulumi.getter(name="springCloudServiceId")
    def spring_cloud_service_id(self) -> pulumi.Input[str]:
        """
        The ID of the Spring Cloud Service. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "spring_cloud_service_id")

    @spring_cloud_service_id.setter
    def spring_cloud_service_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "spring_cloud_service_id", value)

    @property
    @pulumi.getter
    def tenant(self) -> pulumi.Input[str]:
        """
        Specifies the Dynatrace tenant.
        """
        return pulumi.get(self, "tenant")

    @tenant.setter
    def tenant(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant", value)

    @property
    @pulumi.getter(name="tenantToken")
    def tenant_token(self) -> pulumi.Input[str]:
        """
        Specifies the internal token that is used for authentication when OneAgent connects to the Dynatrace cluster to send data.
        """
        return pulumi.get(self, "tenant_token")

    @tenant_token.setter
    def tenant_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_token", value)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the API token of the Dynatrace environment.
        """
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the API Url of the Dynatrace environment.
        """
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_url", value)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Dynatrace environment ID.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment_id", value)

    @property
    @pulumi.getter(name="globallyEnabled")
    def globally_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the Spring Cloud Application Performance Monitoring resource for Application Insights is enabled globally. Defaults to `false`.
        """
        return pulumi.get(self, "globally_enabled")

    @globally_enabled.setter
    def globally_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "globally_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name which should be used for this Spring Cloud Application Performance Monitoring resource for Dynatrace. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _SpringCloudDynatraceApplicationPerformanceMonitoringState:
    def __init__(__self__, *,
                 api_token: Optional[pulumi.Input[str]] = None,
                 api_url: Optional[pulumi.Input[str]] = None,
                 connection_point: Optional[pulumi.Input[str]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 globally_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 spring_cloud_service_id: Optional[pulumi.Input[str]] = None,
                 tenant: Optional[pulumi.Input[str]] = None,
                 tenant_token: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SpringCloudDynatraceApplicationPerformanceMonitoring resources.
        :param pulumi.Input[str] api_token: Specifies the API token of the Dynatrace environment.
        :param pulumi.Input[str] api_url: Specifies the API Url of the Dynatrace environment.
        :param pulumi.Input[str] connection_point: Specifies the endpoint to connect to the Dynatrace environment.
        :param pulumi.Input[str] environment_id: Specifies the Dynatrace environment ID.
        :param pulumi.Input[bool] globally_enabled: Specifies whether the Spring Cloud Application Performance Monitoring resource for Application Insights is enabled globally. Defaults to `false`.
        :param pulumi.Input[str] name: The name which should be used for this Spring Cloud Application Performance Monitoring resource for Dynatrace. Changing this forces a new resource to be created.
        :param pulumi.Input[str] spring_cloud_service_id: The ID of the Spring Cloud Service. Changing this forces a new resource to be created.
        :param pulumi.Input[str] tenant: Specifies the Dynatrace tenant.
        :param pulumi.Input[str] tenant_token: Specifies the internal token that is used for authentication when OneAgent connects to the Dynatrace cluster to send data.
        """
        if api_token is not None:
            pulumi.set(__self__, "api_token", api_token)
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)
        if connection_point is not None:
            pulumi.set(__self__, "connection_point", connection_point)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if globally_enabled is not None:
            pulumi.set(__self__, "globally_enabled", globally_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if spring_cloud_service_id is not None:
            pulumi.set(__self__, "spring_cloud_service_id", spring_cloud_service_id)
        if tenant is not None:
            pulumi.set(__self__, "tenant", tenant)
        if tenant_token is not None:
            pulumi.set(__self__, "tenant_token", tenant_token)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the API token of the Dynatrace environment.
        """
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the API Url of the Dynatrace environment.
        """
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_url", value)

    @property
    @pulumi.getter(name="connectionPoint")
    def connection_point(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the endpoint to connect to the Dynatrace environment.
        """
        return pulumi.get(self, "connection_point")

    @connection_point.setter
    def connection_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_point", value)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Dynatrace environment ID.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment_id", value)

    @property
    @pulumi.getter(name="globallyEnabled")
    def globally_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the Spring Cloud Application Performance Monitoring resource for Application Insights is enabled globally. Defaults to `false`.
        """
        return pulumi.get(self, "globally_enabled")

    @globally_enabled.setter
    def globally_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "globally_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name which should be used for this Spring Cloud Application Performance Monitoring resource for Dynatrace. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="springCloudServiceId")
    def spring_cloud_service_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Spring Cloud Service. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "spring_cloud_service_id")

    @spring_cloud_service_id.setter
    def spring_cloud_service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spring_cloud_service_id", value)

    @property
    @pulumi.getter
    def tenant(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Dynatrace tenant.
        """
        return pulumi.get(self, "tenant")

    @tenant.setter
    def tenant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant", value)

    @property
    @pulumi.getter(name="tenantToken")
    def tenant_token(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the internal token that is used for authentication when OneAgent connects to the Dynatrace cluster to send data.
        """
        return pulumi.get(self, "tenant_token")

    @tenant_token.setter
    def tenant_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_token", value)


class SpringCloudDynatraceApplicationPerformanceMonitoring(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_token: Optional[pulumi.Input[str]] = None,
                 api_url: Optional[pulumi.Input[str]] = None,
                 connection_point: Optional[pulumi.Input[str]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 globally_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 spring_cloud_service_id: Optional[pulumi.Input[str]] = None,
                 tenant: Optional[pulumi.Input[str]] = None,
                 tenant_token: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        > **NOTE:** This resource is only applicable for Spring Cloud Service enterprise tier

        Manages a Spring Cloud Application Performance Monitoring resource for Dynatrace.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_spring_cloud_service = azure.appplatform.SpringCloudService("exampleSpringCloudService",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            sku_name="E0")
        example_spring_cloud_dynatrace_application_performance_monitoring = azure.appplatform.SpringCloudDynatraceApplicationPerformanceMonitoring("exampleSpringCloudDynatraceApplicationPerformanceMonitoring",
            spring_cloud_service_id=example_spring_cloud_service.id,
            globally_enabled=True,
            api_url="https://example-api-url.com",
            api_token="dt0s01.AAAAAAAAAAAAAAAAAAAAAAAA.BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
            environment_id="example-environment-id",
            tenant="example-tenant",
            tenant_token="dt0s01.AAAAAAAAAAAAAAAAAAAAAAAA.BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
            connection_point="https://example.live.dynatrace.com:443")
        ```

        ## Import

        Spring Cloud Application Performance Monitoring resource for Dynatrace can be imported using the `resource id`, e.g.

        ```sh
        $ pulumi import azure:appplatform/springCloudDynatraceApplicationPerformanceMonitoring:SpringCloudDynatraceApplicationPerformanceMonitoring example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.AppPlatform/spring/service1/apms/apm1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_token: Specifies the API token of the Dynatrace environment.
        :param pulumi.Input[str] api_url: Specifies the API Url of the Dynatrace environment.
        :param pulumi.Input[str] connection_point: Specifies the endpoint to connect to the Dynatrace environment.
        :param pulumi.Input[str] environment_id: Specifies the Dynatrace environment ID.
        :param pulumi.Input[bool] globally_enabled: Specifies whether the Spring Cloud Application Performance Monitoring resource for Application Insights is enabled globally. Defaults to `false`.
        :param pulumi.Input[str] name: The name which should be used for this Spring Cloud Application Performance Monitoring resource for Dynatrace. Changing this forces a new resource to be created.
        :param pulumi.Input[str] spring_cloud_service_id: The ID of the Spring Cloud Service. Changing this forces a new resource to be created.
        :param pulumi.Input[str] tenant: Specifies the Dynatrace tenant.
        :param pulumi.Input[str] tenant_token: Specifies the internal token that is used for authentication when OneAgent connects to the Dynatrace cluster to send data.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SpringCloudDynatraceApplicationPerformanceMonitoringArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        > **NOTE:** This resource is only applicable for Spring Cloud Service enterprise tier

        Manages a Spring Cloud Application Performance Monitoring resource for Dynatrace.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_spring_cloud_service = azure.appplatform.SpringCloudService("exampleSpringCloudService",
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name,
            sku_name="E0")
        example_spring_cloud_dynatrace_application_performance_monitoring = azure.appplatform.SpringCloudDynatraceApplicationPerformanceMonitoring("exampleSpringCloudDynatraceApplicationPerformanceMonitoring",
            spring_cloud_service_id=example_spring_cloud_service.id,
            globally_enabled=True,
            api_url="https://example-api-url.com",
            api_token="dt0s01.AAAAAAAAAAAAAAAAAAAAAAAA.BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
            environment_id="example-environment-id",
            tenant="example-tenant",
            tenant_token="dt0s01.AAAAAAAAAAAAAAAAAAAAAAAA.BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
            connection_point="https://example.live.dynatrace.com:443")
        ```

        ## Import

        Spring Cloud Application Performance Monitoring resource for Dynatrace can be imported using the `resource id`, e.g.

        ```sh
        $ pulumi import azure:appplatform/springCloudDynatraceApplicationPerformanceMonitoring:SpringCloudDynatraceApplicationPerformanceMonitoring example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.AppPlatform/spring/service1/apms/apm1
        ```

        :param str resource_name: The name of the resource.
        :param SpringCloudDynatraceApplicationPerformanceMonitoringArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SpringCloudDynatraceApplicationPerformanceMonitoringArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_token: Optional[pulumi.Input[str]] = None,
                 api_url: Optional[pulumi.Input[str]] = None,
                 connection_point: Optional[pulumi.Input[str]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 globally_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 spring_cloud_service_id: Optional[pulumi.Input[str]] = None,
                 tenant: Optional[pulumi.Input[str]] = None,
                 tenant_token: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SpringCloudDynatraceApplicationPerformanceMonitoringArgs.__new__(SpringCloudDynatraceApplicationPerformanceMonitoringArgs)

            __props__.__dict__["api_token"] = None if api_token is None else pulumi.Output.secret(api_token)
            __props__.__dict__["api_url"] = api_url
            if connection_point is None and not opts.urn:
                raise TypeError("Missing required property 'connection_point'")
            __props__.__dict__["connection_point"] = connection_point
            __props__.__dict__["environment_id"] = environment_id
            __props__.__dict__["globally_enabled"] = globally_enabled
            __props__.__dict__["name"] = name
            if spring_cloud_service_id is None and not opts.urn:
                raise TypeError("Missing required property 'spring_cloud_service_id'")
            __props__.__dict__["spring_cloud_service_id"] = spring_cloud_service_id
            if tenant is None and not opts.urn:
                raise TypeError("Missing required property 'tenant'")
            __props__.__dict__["tenant"] = None if tenant is None else pulumi.Output.secret(tenant)
            if tenant_token is None and not opts.urn:
                raise TypeError("Missing required property 'tenant_token'")
            __props__.__dict__["tenant_token"] = None if tenant_token is None else pulumi.Output.secret(tenant_token)
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["apiToken", "tenant", "tenantToken"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SpringCloudDynatraceApplicationPerformanceMonitoring, __self__).__init__(
            'azure:appplatform/springCloudDynatraceApplicationPerformanceMonitoring:SpringCloudDynatraceApplicationPerformanceMonitoring',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_token: Optional[pulumi.Input[str]] = None,
            api_url: Optional[pulumi.Input[str]] = None,
            connection_point: Optional[pulumi.Input[str]] = None,
            environment_id: Optional[pulumi.Input[str]] = None,
            globally_enabled: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            spring_cloud_service_id: Optional[pulumi.Input[str]] = None,
            tenant: Optional[pulumi.Input[str]] = None,
            tenant_token: Optional[pulumi.Input[str]] = None) -> 'SpringCloudDynatraceApplicationPerformanceMonitoring':
        """
        Get an existing SpringCloudDynatraceApplicationPerformanceMonitoring resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_token: Specifies the API token of the Dynatrace environment.
        :param pulumi.Input[str] api_url: Specifies the API Url of the Dynatrace environment.
        :param pulumi.Input[str] connection_point: Specifies the endpoint to connect to the Dynatrace environment.
        :param pulumi.Input[str] environment_id: Specifies the Dynatrace environment ID.
        :param pulumi.Input[bool] globally_enabled: Specifies whether the Spring Cloud Application Performance Monitoring resource for Application Insights is enabled globally. Defaults to `false`.
        :param pulumi.Input[str] name: The name which should be used for this Spring Cloud Application Performance Monitoring resource for Dynatrace. Changing this forces a new resource to be created.
        :param pulumi.Input[str] spring_cloud_service_id: The ID of the Spring Cloud Service. Changing this forces a new resource to be created.
        :param pulumi.Input[str] tenant: Specifies the Dynatrace tenant.
        :param pulumi.Input[str] tenant_token: Specifies the internal token that is used for authentication when OneAgent connects to the Dynatrace cluster to send data.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SpringCloudDynatraceApplicationPerformanceMonitoringState.__new__(_SpringCloudDynatraceApplicationPerformanceMonitoringState)

        __props__.__dict__["api_token"] = api_token
        __props__.__dict__["api_url"] = api_url
        __props__.__dict__["connection_point"] = connection_point
        __props__.__dict__["environment_id"] = environment_id
        __props__.__dict__["globally_enabled"] = globally_enabled
        __props__.__dict__["name"] = name
        __props__.__dict__["spring_cloud_service_id"] = spring_cloud_service_id
        __props__.__dict__["tenant"] = tenant
        __props__.__dict__["tenant_token"] = tenant_token
        return SpringCloudDynatraceApplicationPerformanceMonitoring(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the API token of the Dynatrace environment.
        """
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the API Url of the Dynatrace environment.
        """
        return pulumi.get(self, "api_url")

    @property
    @pulumi.getter(name="connectionPoint")
    def connection_point(self) -> pulumi.Output[str]:
        """
        Specifies the endpoint to connect to the Dynatrace environment.
        """
        return pulumi.get(self, "connection_point")

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the Dynatrace environment ID.
        """
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter(name="globallyEnabled")
    def globally_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies whether the Spring Cloud Application Performance Monitoring resource for Application Insights is enabled globally. Defaults to `false`.
        """
        return pulumi.get(self, "globally_enabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name which should be used for this Spring Cloud Application Performance Monitoring resource for Dynatrace. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="springCloudServiceId")
    def spring_cloud_service_id(self) -> pulumi.Output[str]:
        """
        The ID of the Spring Cloud Service. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "spring_cloud_service_id")

    @property
    @pulumi.getter
    def tenant(self) -> pulumi.Output[str]:
        """
        Specifies the Dynatrace tenant.
        """
        return pulumi.get(self, "tenant")

    @property
    @pulumi.getter(name="tenantToken")
    def tenant_token(self) -> pulumi.Output[str]:
        """
        Specifies the internal token that is used for authentication when OneAgent connects to the Dynatrace cluster to send data.
        """
        return pulumi.get(self, "tenant_token")

