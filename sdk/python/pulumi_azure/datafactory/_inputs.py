# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'CustomDatasetLinkedServiceArgs',
    'DataFlowSinkArgs',
    'DataFlowSinkDatasetArgs',
    'DataFlowSinkFlowletArgs',
    'DataFlowSinkLinkedServiceArgs',
    'DataFlowSinkRejectedLinkedServiceArgs',
    'DataFlowSinkSchemaLinkedServiceArgs',
    'DataFlowSourceArgs',
    'DataFlowSourceDatasetArgs',
    'DataFlowSourceFlowletArgs',
    'DataFlowSourceLinkedServiceArgs',
    'DataFlowSourceRejectedLinkedServiceArgs',
    'DataFlowSourceSchemaLinkedServiceArgs',
    'DataFlowTransformationArgs',
    'DataFlowTransformationDatasetArgs',
    'DataFlowTransformationFlowletArgs',
    'DataFlowTransformationLinkedServiceArgs',
    'DatasetAzureBlobSchemaColumnArgs',
    'DatasetAzureSqlTableSchemaColumnArgs',
    'DatasetBinaryAzureBlobStorageLocationArgs',
    'DatasetBinaryCompressionArgs',
    'DatasetBinaryHttpServerLocationArgs',
    'DatasetBinarySftpServerLocationArgs',
    'DatasetCosmosDBApiSchemaColumnArgs',
    'DatasetDelimitedTextAzureBlobFsLocationArgs',
    'DatasetDelimitedTextAzureBlobStorageLocationArgs',
    'DatasetDelimitedTextHttpServerLocationArgs',
    'DatasetDelimitedTextSchemaColumnArgs',
    'DatasetHttpSchemaColumnArgs',
    'DatasetJsonAzureBlobStorageLocationArgs',
    'DatasetJsonHttpServerLocationArgs',
    'DatasetJsonSchemaColumnArgs',
    'DatasetMysqlSchemaColumnArgs',
    'DatasetParquetAzureBlobFsLocationArgs',
    'DatasetParquetAzureBlobStorageLocationArgs',
    'DatasetParquetHttpServerLocationArgs',
    'DatasetParquetSchemaColumnArgs',
    'DatasetPostgresqlSchemaColumnArgs',
    'DatasetSnowflakeSchemaColumnArgs',
    'DatasetSqlServerTableSchemaColumnArgs',
    'FactoryGithubConfigurationArgs',
    'FactoryGlobalParameterArgs',
    'FactoryIdentityArgs',
    'FactoryVstsConfigurationArgs',
    'FlowletDataFlowSinkArgs',
    'FlowletDataFlowSinkDatasetArgs',
    'FlowletDataFlowSinkFlowletArgs',
    'FlowletDataFlowSinkLinkedServiceArgs',
    'FlowletDataFlowSinkRejectedLinkedServiceArgs',
    'FlowletDataFlowSinkSchemaLinkedServiceArgs',
    'FlowletDataFlowSourceArgs',
    'FlowletDataFlowSourceDatasetArgs',
    'FlowletDataFlowSourceFlowletArgs',
    'FlowletDataFlowSourceLinkedServiceArgs',
    'FlowletDataFlowSourceRejectedLinkedServiceArgs',
    'FlowletDataFlowSourceSchemaLinkedServiceArgs',
    'FlowletDataFlowTransformationArgs',
    'FlowletDataFlowTransformationDatasetArgs',
    'FlowletDataFlowTransformationFlowletArgs',
    'FlowletDataFlowTransformationLinkedServiceArgs',
    'IntegrationRuntimeManagedCatalogInfoArgs',
    'IntegrationRuntimeManagedCustomSetupScriptArgs',
    'IntegrationRuntimeManagedVnetIntegrationArgs',
    'IntegrationRuntimeSelfHostedRbacAuthorizationArgs',
    'IntegrationRuntimeSsisCatalogInfoArgs',
    'IntegrationRuntimeSsisCustomSetupScriptArgs',
    'IntegrationRuntimeSsisExpressCustomSetupArgs',
    'IntegrationRuntimeSsisExpressCustomSetupCommandKeyArgs',
    'IntegrationRuntimeSsisExpressCustomSetupCommandKeyKeyVaultPasswordArgs',
    'IntegrationRuntimeSsisExpressCustomSetupComponentArgs',
    'IntegrationRuntimeSsisExpressCustomSetupComponentKeyVaultLicenseArgs',
    'IntegrationRuntimeSsisExpressVnetIntegrationArgs',
    'IntegrationRuntimeSsisPackageStoreArgs',
    'IntegrationRuntimeSsisProxyArgs',
    'IntegrationRuntimeSsisVnetIntegrationArgs',
    'LinkedCustomServiceIntegrationRuntimeArgs',
    'LinkedServiceAzureBlobStorageKeyVaultSasTokenArgs',
    'LinkedServiceAzureBlobStorageServicePrincipalLinkedKeyVaultKeyArgs',
    'LinkedServiceAzureDatabricksInstancePoolArgs',
    'LinkedServiceAzureDatabricksKeyVaultPasswordArgs',
    'LinkedServiceAzureDatabricksNewClusterConfigArgs',
    'LinkedServiceAzureFileStorageKeyVaultPasswordArgs',
    'LinkedServiceAzureFunctionKeyVaultKeyArgs',
    'LinkedServiceAzureSqlDatabaseKeyVaultConnectionStringArgs',
    'LinkedServiceAzureSqlDatabaseKeyVaultPasswordArgs',
    'LinkedServiceOdataBasicAuthenticationArgs',
    'LinkedServiceOdbcBasicAuthenticationArgs',
    'LinkedServiceSnowflakeKeyVaultPasswordArgs',
    'LinkedServiceSqlServerKeyVaultConnectionStringArgs',
    'LinkedServiceSqlServerKeyVaultPasswordArgs',
    'LinkedServiceSynapseKeyVaultPasswordArgs',
    'TriggerBlobEventPipelineArgs',
    'TriggerCustomEventPipelineArgs',
    'TriggerSchedulePipelineArgs',
    'TriggerScheduleScheduleArgs',
    'TriggerScheduleScheduleMonthlyArgs',
    'TriggerTumblingWindowPipelineArgs',
    'TriggerTumblingWindowRetryArgs',
    'TriggerTumblingWindowTriggerDependencyArgs',
]

@pulumi.input_type
class CustomDatasetLinkedServiceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name of the Data Factory Linked Service.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory Linked Service.
        """
        CustomDatasetLinkedServiceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the Data Factory Linked Service.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Data Factory Linked Service.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class DataFlowSinkArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 dataset: Optional[pulumi.Input['DataFlowSinkDatasetArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 flowlet: Optional[pulumi.Input['DataFlowSinkFlowletArgs']] = None,
                 linked_service: Optional[pulumi.Input['DataFlowSinkLinkedServiceArgs']] = None,
                 rejected_linked_service: Optional[pulumi.Input['DataFlowSinkRejectedLinkedServiceArgs']] = None,
                 schema_linked_service: Optional[pulumi.Input['DataFlowSinkSchemaLinkedServiceArgs']] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Flow Source.
        :param pulumi.Input['DataFlowSinkDatasetArgs'] dataset: A `dataset` block as defined below.
        :param pulumi.Input[str] description: The description for the Data Flow Source.
        :param pulumi.Input['DataFlowSinkFlowletArgs'] flowlet: A `flowlet` block as defined below.
        :param pulumi.Input['DataFlowSinkLinkedServiceArgs'] linked_service: A `linked_service` block as defined below.
        :param pulumi.Input['DataFlowSinkRejectedLinkedServiceArgs'] rejected_linked_service: A `rejected_linked_service` block as defined below.
        :param pulumi.Input['DataFlowSinkSchemaLinkedServiceArgs'] schema_linked_service: A `schema_linked_service` block as defined below.
        """
        DataFlowSinkArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            dataset=dataset,
            description=description,
            flowlet=flowlet,
            linked_service=linked_service,
            rejected_linked_service=rejected_linked_service,
            schema_linked_service=schema_linked_service,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             dataset: Optional[pulumi.Input['DataFlowSinkDatasetArgs']] = None,
             description: Optional[pulumi.Input[str]] = None,
             flowlet: Optional[pulumi.Input['DataFlowSinkFlowletArgs']] = None,
             linked_service: Optional[pulumi.Input['DataFlowSinkLinkedServiceArgs']] = None,
             rejected_linked_service: Optional[pulumi.Input['DataFlowSinkRejectedLinkedServiceArgs']] = None,
             schema_linked_service: Optional[pulumi.Input['DataFlowSinkSchemaLinkedServiceArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if dataset is not None:
            _setter("dataset", dataset)
        if description is not None:
            _setter("description", description)
        if flowlet is not None:
            _setter("flowlet", flowlet)
        if linked_service is not None:
            _setter("linked_service", linked_service)
        if rejected_linked_service is not None:
            _setter("rejected_linked_service", rejected_linked_service)
        if schema_linked_service is not None:
            _setter("schema_linked_service", schema_linked_service)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Flow Source.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def dataset(self) -> Optional[pulumi.Input['DataFlowSinkDatasetArgs']]:
        """
        A `dataset` block as defined below.
        """
        return pulumi.get(self, "dataset")

    @dataset.setter
    def dataset(self, value: Optional[pulumi.Input['DataFlowSinkDatasetArgs']]):
        pulumi.set(self, "dataset", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description for the Data Flow Source.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def flowlet(self) -> Optional[pulumi.Input['DataFlowSinkFlowletArgs']]:
        """
        A `flowlet` block as defined below.
        """
        return pulumi.get(self, "flowlet")

    @flowlet.setter
    def flowlet(self, value: Optional[pulumi.Input['DataFlowSinkFlowletArgs']]):
        pulumi.set(self, "flowlet", value)

    @property
    @pulumi.getter(name="linkedService")
    def linked_service(self) -> Optional[pulumi.Input['DataFlowSinkLinkedServiceArgs']]:
        """
        A `linked_service` block as defined below.
        """
        return pulumi.get(self, "linked_service")

    @linked_service.setter
    def linked_service(self, value: Optional[pulumi.Input['DataFlowSinkLinkedServiceArgs']]):
        pulumi.set(self, "linked_service", value)

    @property
    @pulumi.getter(name="rejectedLinkedService")
    def rejected_linked_service(self) -> Optional[pulumi.Input['DataFlowSinkRejectedLinkedServiceArgs']]:
        """
        A `rejected_linked_service` block as defined below.
        """
        return pulumi.get(self, "rejected_linked_service")

    @rejected_linked_service.setter
    def rejected_linked_service(self, value: Optional[pulumi.Input['DataFlowSinkRejectedLinkedServiceArgs']]):
        pulumi.set(self, "rejected_linked_service", value)

    @property
    @pulumi.getter(name="schemaLinkedService")
    def schema_linked_service(self) -> Optional[pulumi.Input['DataFlowSinkSchemaLinkedServiceArgs']]:
        """
        A `schema_linked_service` block as defined below.
        """
        return pulumi.get(self, "schema_linked_service")

    @schema_linked_service.setter
    def schema_linked_service(self, value: Optional[pulumi.Input['DataFlowSinkSchemaLinkedServiceArgs']]):
        pulumi.set(self, "schema_linked_service", value)


@pulumi.input_type
class DataFlowSinkDatasetArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Factory Dataset.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory dataset.
        """
        DataFlowSinkDatasetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Factory Dataset.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Data Factory dataset.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class DataFlowSinkFlowletArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 dataset_parameters: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Factory Flowlet.
        :param pulumi.Input[str] dataset_parameters: Specifies the reference data flow parameters from dataset.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory Flowlet.
        """
        DataFlowSinkFlowletArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            dataset_parameters=dataset_parameters,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             dataset_parameters: Optional[pulumi.Input[str]] = None,
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if dataset_parameters is not None:
            _setter("dataset_parameters", dataset_parameters)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Factory Flowlet.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="datasetParameters")
    def dataset_parameters(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the reference data flow parameters from dataset.
        """
        return pulumi.get(self, "dataset_parameters")

    @dataset_parameters.setter
    def dataset_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_parameters", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Data Factory Flowlet.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class DataFlowSinkLinkedServiceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Factory Linked Service.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory Linked Service.
        """
        DataFlowSinkLinkedServiceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Factory Linked Service.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Data Factory Linked Service.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class DataFlowSinkRejectedLinkedServiceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Factory Linked Service with schema.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory Linked Service.
        """
        DataFlowSinkRejectedLinkedServiceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Factory Linked Service with schema.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Data Factory Linked Service.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class DataFlowSinkSchemaLinkedServiceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Factory Linked Service with schema.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory Linked Service.
        """
        DataFlowSinkSchemaLinkedServiceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Factory Linked Service with schema.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Data Factory Linked Service.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class DataFlowSourceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 dataset: Optional[pulumi.Input['DataFlowSourceDatasetArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 flowlet: Optional[pulumi.Input['DataFlowSourceFlowletArgs']] = None,
                 linked_service: Optional[pulumi.Input['DataFlowSourceLinkedServiceArgs']] = None,
                 rejected_linked_service: Optional[pulumi.Input['DataFlowSourceRejectedLinkedServiceArgs']] = None,
                 schema_linked_service: Optional[pulumi.Input['DataFlowSourceSchemaLinkedServiceArgs']] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Flow Source.
        :param pulumi.Input['DataFlowSourceDatasetArgs'] dataset: A `dataset` block as defined below.
        :param pulumi.Input[str] description: The description for the Data Flow Source.
        :param pulumi.Input['DataFlowSourceFlowletArgs'] flowlet: A `flowlet` block as defined below.
        :param pulumi.Input['DataFlowSourceLinkedServiceArgs'] linked_service: A `linked_service` block as defined below.
        :param pulumi.Input['DataFlowSourceRejectedLinkedServiceArgs'] rejected_linked_service: A `rejected_linked_service` block as defined below.
        :param pulumi.Input['DataFlowSourceSchemaLinkedServiceArgs'] schema_linked_service: A `schema_linked_service` block as defined below.
        """
        DataFlowSourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            dataset=dataset,
            description=description,
            flowlet=flowlet,
            linked_service=linked_service,
            rejected_linked_service=rejected_linked_service,
            schema_linked_service=schema_linked_service,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             dataset: Optional[pulumi.Input['DataFlowSourceDatasetArgs']] = None,
             description: Optional[pulumi.Input[str]] = None,
             flowlet: Optional[pulumi.Input['DataFlowSourceFlowletArgs']] = None,
             linked_service: Optional[pulumi.Input['DataFlowSourceLinkedServiceArgs']] = None,
             rejected_linked_service: Optional[pulumi.Input['DataFlowSourceRejectedLinkedServiceArgs']] = None,
             schema_linked_service: Optional[pulumi.Input['DataFlowSourceSchemaLinkedServiceArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if dataset is not None:
            _setter("dataset", dataset)
        if description is not None:
            _setter("description", description)
        if flowlet is not None:
            _setter("flowlet", flowlet)
        if linked_service is not None:
            _setter("linked_service", linked_service)
        if rejected_linked_service is not None:
            _setter("rejected_linked_service", rejected_linked_service)
        if schema_linked_service is not None:
            _setter("schema_linked_service", schema_linked_service)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Flow Source.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def dataset(self) -> Optional[pulumi.Input['DataFlowSourceDatasetArgs']]:
        """
        A `dataset` block as defined below.
        """
        return pulumi.get(self, "dataset")

    @dataset.setter
    def dataset(self, value: Optional[pulumi.Input['DataFlowSourceDatasetArgs']]):
        pulumi.set(self, "dataset", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description for the Data Flow Source.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def flowlet(self) -> Optional[pulumi.Input['DataFlowSourceFlowletArgs']]:
        """
        A `flowlet` block as defined below.
        """
        return pulumi.get(self, "flowlet")

    @flowlet.setter
    def flowlet(self, value: Optional[pulumi.Input['DataFlowSourceFlowletArgs']]):
        pulumi.set(self, "flowlet", value)

    @property
    @pulumi.getter(name="linkedService")
    def linked_service(self) -> Optional[pulumi.Input['DataFlowSourceLinkedServiceArgs']]:
        """
        A `linked_service` block as defined below.
        """
        return pulumi.get(self, "linked_service")

    @linked_service.setter
    def linked_service(self, value: Optional[pulumi.Input['DataFlowSourceLinkedServiceArgs']]):
        pulumi.set(self, "linked_service", value)

    @property
    @pulumi.getter(name="rejectedLinkedService")
    def rejected_linked_service(self) -> Optional[pulumi.Input['DataFlowSourceRejectedLinkedServiceArgs']]:
        """
        A `rejected_linked_service` block as defined below.
        """
        return pulumi.get(self, "rejected_linked_service")

    @rejected_linked_service.setter
    def rejected_linked_service(self, value: Optional[pulumi.Input['DataFlowSourceRejectedLinkedServiceArgs']]):
        pulumi.set(self, "rejected_linked_service", value)

    @property
    @pulumi.getter(name="schemaLinkedService")
    def schema_linked_service(self) -> Optional[pulumi.Input['DataFlowSourceSchemaLinkedServiceArgs']]:
        """
        A `schema_linked_service` block as defined below.
        """
        return pulumi.get(self, "schema_linked_service")

    @schema_linked_service.setter
    def schema_linked_service(self, value: Optional[pulumi.Input['DataFlowSourceSchemaLinkedServiceArgs']]):
        pulumi.set(self, "schema_linked_service", value)


@pulumi.input_type
class DataFlowSourceDatasetArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Factory Dataset.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory dataset.
        """
        DataFlowSourceDatasetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Factory Dataset.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Data Factory dataset.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class DataFlowSourceFlowletArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 dataset_parameters: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Factory Flowlet.
        :param pulumi.Input[str] dataset_parameters: Specifies the reference data flow parameters from dataset.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory Flowlet.
        """
        DataFlowSourceFlowletArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            dataset_parameters=dataset_parameters,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             dataset_parameters: Optional[pulumi.Input[str]] = None,
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if dataset_parameters is not None:
            _setter("dataset_parameters", dataset_parameters)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Factory Flowlet.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="datasetParameters")
    def dataset_parameters(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the reference data flow parameters from dataset.
        """
        return pulumi.get(self, "dataset_parameters")

    @dataset_parameters.setter
    def dataset_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_parameters", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Data Factory Flowlet.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class DataFlowSourceLinkedServiceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Factory Linked Service.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory Linked Service.
        """
        DataFlowSourceLinkedServiceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Factory Linked Service.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Data Factory Linked Service.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class DataFlowSourceRejectedLinkedServiceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Factory Linked Service with schema.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory Linked Service.
        """
        DataFlowSourceRejectedLinkedServiceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Factory Linked Service with schema.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Data Factory Linked Service.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class DataFlowSourceSchemaLinkedServiceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Factory Linked Service with schema.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory Linked Service.
        """
        DataFlowSourceSchemaLinkedServiceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Factory Linked Service with schema.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Data Factory Linked Service.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class DataFlowTransformationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 dataset: Optional[pulumi.Input['DataFlowTransformationDatasetArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 flowlet: Optional[pulumi.Input['DataFlowTransformationFlowletArgs']] = None,
                 linked_service: Optional[pulumi.Input['DataFlowTransformationLinkedServiceArgs']] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Flow transformation.
        :param pulumi.Input['DataFlowTransformationDatasetArgs'] dataset: A `dataset` block as defined below.
        :param pulumi.Input[str] description: The description for the Data Flow transformation.
        :param pulumi.Input['DataFlowTransformationFlowletArgs'] flowlet: A `flowlet` block as defined below.
        :param pulumi.Input['DataFlowTransformationLinkedServiceArgs'] linked_service: A `linked_service` block as defined below.
        """
        DataFlowTransformationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            dataset=dataset,
            description=description,
            flowlet=flowlet,
            linked_service=linked_service,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             dataset: Optional[pulumi.Input['DataFlowTransformationDatasetArgs']] = None,
             description: Optional[pulumi.Input[str]] = None,
             flowlet: Optional[pulumi.Input['DataFlowTransformationFlowletArgs']] = None,
             linked_service: Optional[pulumi.Input['DataFlowTransformationLinkedServiceArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if dataset is not None:
            _setter("dataset", dataset)
        if description is not None:
            _setter("description", description)
        if flowlet is not None:
            _setter("flowlet", flowlet)
        if linked_service is not None:
            _setter("linked_service", linked_service)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Flow transformation.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def dataset(self) -> Optional[pulumi.Input['DataFlowTransformationDatasetArgs']]:
        """
        A `dataset` block as defined below.
        """
        return pulumi.get(self, "dataset")

    @dataset.setter
    def dataset(self, value: Optional[pulumi.Input['DataFlowTransformationDatasetArgs']]):
        pulumi.set(self, "dataset", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description for the Data Flow transformation.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def flowlet(self) -> Optional[pulumi.Input['DataFlowTransformationFlowletArgs']]:
        """
        A `flowlet` block as defined below.
        """
        return pulumi.get(self, "flowlet")

    @flowlet.setter
    def flowlet(self, value: Optional[pulumi.Input['DataFlowTransformationFlowletArgs']]):
        pulumi.set(self, "flowlet", value)

    @property
    @pulumi.getter(name="linkedService")
    def linked_service(self) -> Optional[pulumi.Input['DataFlowTransformationLinkedServiceArgs']]:
        """
        A `linked_service` block as defined below.
        """
        return pulumi.get(self, "linked_service")

    @linked_service.setter
    def linked_service(self, value: Optional[pulumi.Input['DataFlowTransformationLinkedServiceArgs']]):
        pulumi.set(self, "linked_service", value)


@pulumi.input_type
class DataFlowTransformationDatasetArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Factory Dataset.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory dataset.
        """
        DataFlowTransformationDatasetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Factory Dataset.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Data Factory dataset.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class DataFlowTransformationFlowletArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 dataset_parameters: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Factory Flowlet.
        :param pulumi.Input[str] dataset_parameters: Specifies the reference data flow parameters from dataset.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory Flowlet.
        """
        DataFlowTransformationFlowletArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            dataset_parameters=dataset_parameters,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             dataset_parameters: Optional[pulumi.Input[str]] = None,
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if dataset_parameters is not None:
            _setter("dataset_parameters", dataset_parameters)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Factory Flowlet.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="datasetParameters")
    def dataset_parameters(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the reference data flow parameters from dataset.
        """
        return pulumi.get(self, "dataset_parameters")

    @dataset_parameters.setter
    def dataset_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_parameters", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Data Factory Flowlet.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class DataFlowTransformationLinkedServiceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Factory Linked Service.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory Linked Service.
        """
        DataFlowTransformationLinkedServiceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Factory Linked Service.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Data Factory Linked Service.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class DatasetAzureBlobSchemaColumnArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the column.
        :param pulumi.Input[str] description: The description of the column.
        :param pulumi.Input[str] type: Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
        """
        DatasetAzureBlobSchemaColumnArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            description=description,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if description is not None:
            _setter("description", description)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the column.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the column.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DatasetAzureSqlTableSchemaColumnArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the column.
        :param pulumi.Input[str] description: The description of the column.
        :param pulumi.Input[str] type: Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
        """
        DatasetAzureSqlTableSchemaColumnArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            description=description,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if description is not None:
            _setter("description", description)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the column.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the column.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DatasetBinaryAzureBlobStorageLocationArgs:
    def __init__(__self__, *,
                 container: pulumi.Input[str],
                 dynamic_container_enabled: Optional[pulumi.Input[bool]] = None,
                 dynamic_filename_enabled: Optional[pulumi.Input[bool]] = None,
                 dynamic_path_enabled: Optional[pulumi.Input[bool]] = None,
                 filename: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] container: The container on the Azure Blob Storage Account hosting the file.
        :param pulumi.Input[bool] dynamic_container_enabled: Is the `container` using dynamic expression, function or system variables? Defaults to `false`.
        :param pulumi.Input[bool] dynamic_filename_enabled: Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
        :param pulumi.Input[bool] dynamic_path_enabled: Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
        :param pulumi.Input[str] filename: The filename of the file in the blob container.
        :param pulumi.Input[str] path: The folder path to the file in the blob container.
        """
        DatasetBinaryAzureBlobStorageLocationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            container=container,
            dynamic_container_enabled=dynamic_container_enabled,
            dynamic_filename_enabled=dynamic_filename_enabled,
            dynamic_path_enabled=dynamic_path_enabled,
            filename=filename,
            path=path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             container: pulumi.Input[str],
             dynamic_container_enabled: Optional[pulumi.Input[bool]] = None,
             dynamic_filename_enabled: Optional[pulumi.Input[bool]] = None,
             dynamic_path_enabled: Optional[pulumi.Input[bool]] = None,
             filename: Optional[pulumi.Input[str]] = None,
             path: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("container", container)
        if dynamic_container_enabled is not None:
            _setter("dynamic_container_enabled", dynamic_container_enabled)
        if dynamic_filename_enabled is not None:
            _setter("dynamic_filename_enabled", dynamic_filename_enabled)
        if dynamic_path_enabled is not None:
            _setter("dynamic_path_enabled", dynamic_path_enabled)
        if filename is not None:
            _setter("filename", filename)
        if path is not None:
            _setter("path", path)

    @property
    @pulumi.getter
    def container(self) -> pulumi.Input[str]:
        """
        The container on the Azure Blob Storage Account hosting the file.
        """
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: pulumi.Input[str]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter(name="dynamicContainerEnabled")
    def dynamic_container_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `container` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_container_enabled")

    @dynamic_container_enabled.setter
    def dynamic_container_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_container_enabled", value)

    @property
    @pulumi.getter(name="dynamicFilenameEnabled")
    def dynamic_filename_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_filename_enabled")

    @dynamic_filename_enabled.setter
    def dynamic_filename_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_filename_enabled", value)

    @property
    @pulumi.getter(name="dynamicPathEnabled")
    def dynamic_path_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_path_enabled")

    @dynamic_path_enabled.setter
    def dynamic_path_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_path_enabled", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[str]]:
        """
        The filename of the file in the blob container.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filename", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The folder path to the file in the blob container.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class DatasetBinaryCompressionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 level: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: The type of compression used during transport. Possible values are `BZip2`, `Deflate`, `GZip`, `Tar`, `TarGZip` and `ZipDeflate`.
        :param pulumi.Input[str] level: The level of compression. Possible values are `Fastest` and `Optimal`.
        """
        DatasetBinaryCompressionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            level=level,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input[str],
             level: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if level is not None:
            _setter("level", level)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of compression used during transport. Possible values are `BZip2`, `Deflate`, `GZip`, `Tar`, `TarGZip` and `ZipDeflate`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        The level of compression. Possible values are `Fastest` and `Optimal`.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)


@pulumi.input_type
class DatasetBinaryHttpServerLocationArgs:
    def __init__(__self__, *,
                 filename: pulumi.Input[str],
                 path: pulumi.Input[str],
                 relative_url: pulumi.Input[str],
                 dynamic_filename_enabled: Optional[pulumi.Input[bool]] = None,
                 dynamic_path_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] filename: The filename of the file on the web server.
        :param pulumi.Input[str] path: The folder path to the file on the web server.
        :param pulumi.Input[str] relative_url: The base URL to the web server hosting the file.
        :param pulumi.Input[bool] dynamic_filename_enabled: Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
        :param pulumi.Input[bool] dynamic_path_enabled: Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
        """
        DatasetBinaryHttpServerLocationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filename=filename,
            path=path,
            relative_url=relative_url,
            dynamic_filename_enabled=dynamic_filename_enabled,
            dynamic_path_enabled=dynamic_path_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filename: pulumi.Input[str],
             path: pulumi.Input[str],
             relative_url: pulumi.Input[str],
             dynamic_filename_enabled: Optional[pulumi.Input[bool]] = None,
             dynamic_path_enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filename", filename)
        _setter("path", path)
        _setter("relative_url", relative_url)
        if dynamic_filename_enabled is not None:
            _setter("dynamic_filename_enabled", dynamic_filename_enabled)
        if dynamic_path_enabled is not None:
            _setter("dynamic_path_enabled", dynamic_path_enabled)

    @property
    @pulumi.getter
    def filename(self) -> pulumi.Input[str]:
        """
        The filename of the file on the web server.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: pulumi.Input[str]):
        pulumi.set(self, "filename", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The folder path to the file on the web server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="relativeUrl")
    def relative_url(self) -> pulumi.Input[str]:
        """
        The base URL to the web server hosting the file.
        """
        return pulumi.get(self, "relative_url")

    @relative_url.setter
    def relative_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "relative_url", value)

    @property
    @pulumi.getter(name="dynamicFilenameEnabled")
    def dynamic_filename_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_filename_enabled")

    @dynamic_filename_enabled.setter
    def dynamic_filename_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_filename_enabled", value)

    @property
    @pulumi.getter(name="dynamicPathEnabled")
    def dynamic_path_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_path_enabled")

    @dynamic_path_enabled.setter
    def dynamic_path_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_path_enabled", value)


@pulumi.input_type
class DatasetBinarySftpServerLocationArgs:
    def __init__(__self__, *,
                 filename: pulumi.Input[str],
                 path: pulumi.Input[str],
                 dynamic_filename_enabled: Optional[pulumi.Input[bool]] = None,
                 dynamic_path_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] filename: The filename of the file on the SFTP server.
        :param pulumi.Input[str] path: The folder path to the file on the SFTP server.
        :param pulumi.Input[bool] dynamic_filename_enabled: Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
        :param pulumi.Input[bool] dynamic_path_enabled: Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
        """
        DatasetBinarySftpServerLocationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filename=filename,
            path=path,
            dynamic_filename_enabled=dynamic_filename_enabled,
            dynamic_path_enabled=dynamic_path_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filename: pulumi.Input[str],
             path: pulumi.Input[str],
             dynamic_filename_enabled: Optional[pulumi.Input[bool]] = None,
             dynamic_path_enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filename", filename)
        _setter("path", path)
        if dynamic_filename_enabled is not None:
            _setter("dynamic_filename_enabled", dynamic_filename_enabled)
        if dynamic_path_enabled is not None:
            _setter("dynamic_path_enabled", dynamic_path_enabled)

    @property
    @pulumi.getter
    def filename(self) -> pulumi.Input[str]:
        """
        The filename of the file on the SFTP server.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: pulumi.Input[str]):
        pulumi.set(self, "filename", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The folder path to the file on the SFTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="dynamicFilenameEnabled")
    def dynamic_filename_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_filename_enabled")

    @dynamic_filename_enabled.setter
    def dynamic_filename_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_filename_enabled", value)

    @property
    @pulumi.getter(name="dynamicPathEnabled")
    def dynamic_path_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_path_enabled")

    @dynamic_path_enabled.setter
    def dynamic_path_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_path_enabled", value)


@pulumi.input_type
class DatasetCosmosDBApiSchemaColumnArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the column.
        :param pulumi.Input[str] description: The description of the column.
        :param pulumi.Input[str] type: Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
        """
        DatasetCosmosDBApiSchemaColumnArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            description=description,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if description is not None:
            _setter("description", description)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the column.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the column.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DatasetDelimitedTextAzureBlobFsLocationArgs:
    def __init__(__self__, *,
                 dynamic_file_system_enabled: Optional[pulumi.Input[bool]] = None,
                 dynamic_filename_enabled: Optional[pulumi.Input[bool]] = None,
                 dynamic_path_enabled: Optional[pulumi.Input[bool]] = None,
                 file_system: Optional[pulumi.Input[str]] = None,
                 filename: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] dynamic_file_system_enabled: Is the `file_system` using dynamic expression, function or system variables? Defaults to `false`.
        :param pulumi.Input[bool] dynamic_filename_enabled: Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
        :param pulumi.Input[bool] dynamic_path_enabled: Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
        :param pulumi.Input[str] file_system: The storage data lake gen2 file system on the Azure Blob Storage Account hosting the file.
        :param pulumi.Input[str] filename: The filename of the file.
        :param pulumi.Input[str] path: The folder path to the file.
        """
        DatasetDelimitedTextAzureBlobFsLocationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dynamic_file_system_enabled=dynamic_file_system_enabled,
            dynamic_filename_enabled=dynamic_filename_enabled,
            dynamic_path_enabled=dynamic_path_enabled,
            file_system=file_system,
            filename=filename,
            path=path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dynamic_file_system_enabled: Optional[pulumi.Input[bool]] = None,
             dynamic_filename_enabled: Optional[pulumi.Input[bool]] = None,
             dynamic_path_enabled: Optional[pulumi.Input[bool]] = None,
             file_system: Optional[pulumi.Input[str]] = None,
             filename: Optional[pulumi.Input[str]] = None,
             path: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dynamic_file_system_enabled is not None:
            _setter("dynamic_file_system_enabled", dynamic_file_system_enabled)
        if dynamic_filename_enabled is not None:
            _setter("dynamic_filename_enabled", dynamic_filename_enabled)
        if dynamic_path_enabled is not None:
            _setter("dynamic_path_enabled", dynamic_path_enabled)
        if file_system is not None:
            _setter("file_system", file_system)
        if filename is not None:
            _setter("filename", filename)
        if path is not None:
            _setter("path", path)

    @property
    @pulumi.getter(name="dynamicFileSystemEnabled")
    def dynamic_file_system_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `file_system` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_file_system_enabled")

    @dynamic_file_system_enabled.setter
    def dynamic_file_system_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_file_system_enabled", value)

    @property
    @pulumi.getter(name="dynamicFilenameEnabled")
    def dynamic_filename_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_filename_enabled")

    @dynamic_filename_enabled.setter
    def dynamic_filename_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_filename_enabled", value)

    @property
    @pulumi.getter(name="dynamicPathEnabled")
    def dynamic_path_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_path_enabled")

    @dynamic_path_enabled.setter
    def dynamic_path_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_path_enabled", value)

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[pulumi.Input[str]]:
        """
        The storage data lake gen2 file system on the Azure Blob Storage Account hosting the file.
        """
        return pulumi.get(self, "file_system")

    @file_system.setter
    def file_system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[str]]:
        """
        The filename of the file.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filename", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The folder path to the file.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class DatasetDelimitedTextAzureBlobStorageLocationArgs:
    def __init__(__self__, *,
                 container: pulumi.Input[str],
                 dynamic_container_enabled: Optional[pulumi.Input[bool]] = None,
                 dynamic_filename_enabled: Optional[pulumi.Input[bool]] = None,
                 dynamic_path_enabled: Optional[pulumi.Input[bool]] = None,
                 filename: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] container: The container on the Azure Blob Storage Account hosting the file.
        :param pulumi.Input[bool] dynamic_container_enabled: Is the `container` using dynamic expression, function or system variables? Defaults to `false`.
        :param pulumi.Input[bool] dynamic_filename_enabled: Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
        :param pulumi.Input[bool] dynamic_path_enabled: Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
        :param pulumi.Input[str] filename: The filename of the file.
        :param pulumi.Input[str] path: The folder path to the file. This can be an empty string.
        """
        DatasetDelimitedTextAzureBlobStorageLocationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            container=container,
            dynamic_container_enabled=dynamic_container_enabled,
            dynamic_filename_enabled=dynamic_filename_enabled,
            dynamic_path_enabled=dynamic_path_enabled,
            filename=filename,
            path=path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             container: pulumi.Input[str],
             dynamic_container_enabled: Optional[pulumi.Input[bool]] = None,
             dynamic_filename_enabled: Optional[pulumi.Input[bool]] = None,
             dynamic_path_enabled: Optional[pulumi.Input[bool]] = None,
             filename: Optional[pulumi.Input[str]] = None,
             path: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("container", container)
        if dynamic_container_enabled is not None:
            _setter("dynamic_container_enabled", dynamic_container_enabled)
        if dynamic_filename_enabled is not None:
            _setter("dynamic_filename_enabled", dynamic_filename_enabled)
        if dynamic_path_enabled is not None:
            _setter("dynamic_path_enabled", dynamic_path_enabled)
        if filename is not None:
            _setter("filename", filename)
        if path is not None:
            _setter("path", path)

    @property
    @pulumi.getter
    def container(self) -> pulumi.Input[str]:
        """
        The container on the Azure Blob Storage Account hosting the file.
        """
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: pulumi.Input[str]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter(name="dynamicContainerEnabled")
    def dynamic_container_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `container` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_container_enabled")

    @dynamic_container_enabled.setter
    def dynamic_container_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_container_enabled", value)

    @property
    @pulumi.getter(name="dynamicFilenameEnabled")
    def dynamic_filename_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_filename_enabled")

    @dynamic_filename_enabled.setter
    def dynamic_filename_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_filename_enabled", value)

    @property
    @pulumi.getter(name="dynamicPathEnabled")
    def dynamic_path_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_path_enabled")

    @dynamic_path_enabled.setter
    def dynamic_path_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_path_enabled", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[str]]:
        """
        The filename of the file.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filename", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The folder path to the file. This can be an empty string.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class DatasetDelimitedTextHttpServerLocationArgs:
    def __init__(__self__, *,
                 filename: pulumi.Input[str],
                 path: pulumi.Input[str],
                 relative_url: pulumi.Input[str],
                 dynamic_filename_enabled: Optional[pulumi.Input[bool]] = None,
                 dynamic_path_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] filename: The filename of the file on the web server.
        :param pulumi.Input[str] path: The folder path to the file on the web server.
        :param pulumi.Input[str] relative_url: The base URL to the web server hosting the file.
        :param pulumi.Input[bool] dynamic_filename_enabled: Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
        :param pulumi.Input[bool] dynamic_path_enabled: Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
        """
        DatasetDelimitedTextHttpServerLocationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filename=filename,
            path=path,
            relative_url=relative_url,
            dynamic_filename_enabled=dynamic_filename_enabled,
            dynamic_path_enabled=dynamic_path_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filename: pulumi.Input[str],
             path: pulumi.Input[str],
             relative_url: pulumi.Input[str],
             dynamic_filename_enabled: Optional[pulumi.Input[bool]] = None,
             dynamic_path_enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filename", filename)
        _setter("path", path)
        _setter("relative_url", relative_url)
        if dynamic_filename_enabled is not None:
            _setter("dynamic_filename_enabled", dynamic_filename_enabled)
        if dynamic_path_enabled is not None:
            _setter("dynamic_path_enabled", dynamic_path_enabled)

    @property
    @pulumi.getter
    def filename(self) -> pulumi.Input[str]:
        """
        The filename of the file on the web server.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: pulumi.Input[str]):
        pulumi.set(self, "filename", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The folder path to the file on the web server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="relativeUrl")
    def relative_url(self) -> pulumi.Input[str]:
        """
        The base URL to the web server hosting the file.
        """
        return pulumi.get(self, "relative_url")

    @relative_url.setter
    def relative_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "relative_url", value)

    @property
    @pulumi.getter(name="dynamicFilenameEnabled")
    def dynamic_filename_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_filename_enabled")

    @dynamic_filename_enabled.setter
    def dynamic_filename_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_filename_enabled", value)

    @property
    @pulumi.getter(name="dynamicPathEnabled")
    def dynamic_path_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_path_enabled")

    @dynamic_path_enabled.setter
    def dynamic_path_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_path_enabled", value)


@pulumi.input_type
class DatasetDelimitedTextSchemaColumnArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the column.
        :param pulumi.Input[str] description: The description of the column.
        :param pulumi.Input[str] type: Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
        """
        DatasetDelimitedTextSchemaColumnArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            description=description,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if description is not None:
            _setter("description", description)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the column.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the column.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DatasetHttpSchemaColumnArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the column.
        :param pulumi.Input[str] description: The description of the column.
        :param pulumi.Input[str] type: Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
        """
        DatasetHttpSchemaColumnArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            description=description,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if description is not None:
            _setter("description", description)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the column.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the column.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DatasetJsonAzureBlobStorageLocationArgs:
    def __init__(__self__, *,
                 container: pulumi.Input[str],
                 filename: pulumi.Input[str],
                 path: pulumi.Input[str],
                 dynamic_container_enabled: Optional[pulumi.Input[bool]] = None,
                 dynamic_filename_enabled: Optional[pulumi.Input[bool]] = None,
                 dynamic_path_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] container: The container on the Azure Blob Storage Account hosting the file.
        :param pulumi.Input[str] filename: The filename of the file on the web server.
        :param pulumi.Input[str] path: The folder path to the file on the web server.
        :param pulumi.Input[bool] dynamic_container_enabled: Is the `container` using dynamic expression, function or system variables? Defaults to `false`.
        :param pulumi.Input[bool] dynamic_filename_enabled: Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
        :param pulumi.Input[bool] dynamic_path_enabled: Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
        """
        DatasetJsonAzureBlobStorageLocationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            container=container,
            filename=filename,
            path=path,
            dynamic_container_enabled=dynamic_container_enabled,
            dynamic_filename_enabled=dynamic_filename_enabled,
            dynamic_path_enabled=dynamic_path_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             container: pulumi.Input[str],
             filename: pulumi.Input[str],
             path: pulumi.Input[str],
             dynamic_container_enabled: Optional[pulumi.Input[bool]] = None,
             dynamic_filename_enabled: Optional[pulumi.Input[bool]] = None,
             dynamic_path_enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("container", container)
        _setter("filename", filename)
        _setter("path", path)
        if dynamic_container_enabled is not None:
            _setter("dynamic_container_enabled", dynamic_container_enabled)
        if dynamic_filename_enabled is not None:
            _setter("dynamic_filename_enabled", dynamic_filename_enabled)
        if dynamic_path_enabled is not None:
            _setter("dynamic_path_enabled", dynamic_path_enabled)

    @property
    @pulumi.getter
    def container(self) -> pulumi.Input[str]:
        """
        The container on the Azure Blob Storage Account hosting the file.
        """
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: pulumi.Input[str]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def filename(self) -> pulumi.Input[str]:
        """
        The filename of the file on the web server.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: pulumi.Input[str]):
        pulumi.set(self, "filename", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The folder path to the file on the web server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="dynamicContainerEnabled")
    def dynamic_container_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `container` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_container_enabled")

    @dynamic_container_enabled.setter
    def dynamic_container_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_container_enabled", value)

    @property
    @pulumi.getter(name="dynamicFilenameEnabled")
    def dynamic_filename_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_filename_enabled")

    @dynamic_filename_enabled.setter
    def dynamic_filename_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_filename_enabled", value)

    @property
    @pulumi.getter(name="dynamicPathEnabled")
    def dynamic_path_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_path_enabled")

    @dynamic_path_enabled.setter
    def dynamic_path_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_path_enabled", value)


@pulumi.input_type
class DatasetJsonHttpServerLocationArgs:
    def __init__(__self__, *,
                 filename: pulumi.Input[str],
                 path: pulumi.Input[str],
                 relative_url: pulumi.Input[str],
                 dynamic_filename_enabled: Optional[pulumi.Input[bool]] = None,
                 dynamic_path_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] filename: The filename of the file on the web server.
        :param pulumi.Input[str] path: The folder path to the file on the web server.
        :param pulumi.Input[str] relative_url: The base URL to the web server hosting the file.
        :param pulumi.Input[bool] dynamic_filename_enabled: Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
        :param pulumi.Input[bool] dynamic_path_enabled: Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
        """
        DatasetJsonHttpServerLocationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filename=filename,
            path=path,
            relative_url=relative_url,
            dynamic_filename_enabled=dynamic_filename_enabled,
            dynamic_path_enabled=dynamic_path_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filename: pulumi.Input[str],
             path: pulumi.Input[str],
             relative_url: pulumi.Input[str],
             dynamic_filename_enabled: Optional[pulumi.Input[bool]] = None,
             dynamic_path_enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filename", filename)
        _setter("path", path)
        _setter("relative_url", relative_url)
        if dynamic_filename_enabled is not None:
            _setter("dynamic_filename_enabled", dynamic_filename_enabled)
        if dynamic_path_enabled is not None:
            _setter("dynamic_path_enabled", dynamic_path_enabled)

    @property
    @pulumi.getter
    def filename(self) -> pulumi.Input[str]:
        """
        The filename of the file on the web server.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: pulumi.Input[str]):
        pulumi.set(self, "filename", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The folder path to the file on the web server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="relativeUrl")
    def relative_url(self) -> pulumi.Input[str]:
        """
        The base URL to the web server hosting the file.
        """
        return pulumi.get(self, "relative_url")

    @relative_url.setter
    def relative_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "relative_url", value)

    @property
    @pulumi.getter(name="dynamicFilenameEnabled")
    def dynamic_filename_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_filename_enabled")

    @dynamic_filename_enabled.setter
    def dynamic_filename_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_filename_enabled", value)

    @property
    @pulumi.getter(name="dynamicPathEnabled")
    def dynamic_path_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_path_enabled")

    @dynamic_path_enabled.setter
    def dynamic_path_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_path_enabled", value)


@pulumi.input_type
class DatasetJsonSchemaColumnArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the column.
        :param pulumi.Input[str] description: The description of the column.
        :param pulumi.Input[str] type: Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
        """
        DatasetJsonSchemaColumnArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            description=description,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if description is not None:
            _setter("description", description)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the column.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the column.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DatasetMysqlSchemaColumnArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the column.
        :param pulumi.Input[str] description: The description of the column.
        :param pulumi.Input[str] type: Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
        """
        DatasetMysqlSchemaColumnArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            description=description,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if description is not None:
            _setter("description", description)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the column.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the column.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DatasetParquetAzureBlobFsLocationArgs:
    def __init__(__self__, *,
                 dynamic_file_system_enabled: Optional[pulumi.Input[bool]] = None,
                 dynamic_filename_enabled: Optional[pulumi.Input[bool]] = None,
                 dynamic_path_enabled: Optional[pulumi.Input[bool]] = None,
                 file_system: Optional[pulumi.Input[str]] = None,
                 filename: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] dynamic_file_system_enabled: Is the `file_system` using dynamic expression, function or system variables? Defaults to `false`.
        :param pulumi.Input[bool] dynamic_filename_enabled: Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
        :param pulumi.Input[bool] dynamic_path_enabled: Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
        :param pulumi.Input[str] file_system: The container on the Azure Data Lake Storage Account hosting the file.
        :param pulumi.Input[str] filename: The filename of the file on the Azure Data Lake Storage Account.
        :param pulumi.Input[str] path: The folder path to the file on the Azure Data Lake Storage Account.
        """
        DatasetParquetAzureBlobFsLocationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dynamic_file_system_enabled=dynamic_file_system_enabled,
            dynamic_filename_enabled=dynamic_filename_enabled,
            dynamic_path_enabled=dynamic_path_enabled,
            file_system=file_system,
            filename=filename,
            path=path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dynamic_file_system_enabled: Optional[pulumi.Input[bool]] = None,
             dynamic_filename_enabled: Optional[pulumi.Input[bool]] = None,
             dynamic_path_enabled: Optional[pulumi.Input[bool]] = None,
             file_system: Optional[pulumi.Input[str]] = None,
             filename: Optional[pulumi.Input[str]] = None,
             path: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dynamic_file_system_enabled is not None:
            _setter("dynamic_file_system_enabled", dynamic_file_system_enabled)
        if dynamic_filename_enabled is not None:
            _setter("dynamic_filename_enabled", dynamic_filename_enabled)
        if dynamic_path_enabled is not None:
            _setter("dynamic_path_enabled", dynamic_path_enabled)
        if file_system is not None:
            _setter("file_system", file_system)
        if filename is not None:
            _setter("filename", filename)
        if path is not None:
            _setter("path", path)

    @property
    @pulumi.getter(name="dynamicFileSystemEnabled")
    def dynamic_file_system_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `file_system` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_file_system_enabled")

    @dynamic_file_system_enabled.setter
    def dynamic_file_system_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_file_system_enabled", value)

    @property
    @pulumi.getter(name="dynamicFilenameEnabled")
    def dynamic_filename_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_filename_enabled")

    @dynamic_filename_enabled.setter
    def dynamic_filename_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_filename_enabled", value)

    @property
    @pulumi.getter(name="dynamicPathEnabled")
    def dynamic_path_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_path_enabled")

    @dynamic_path_enabled.setter
    def dynamic_path_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_path_enabled", value)

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[pulumi.Input[str]]:
        """
        The container on the Azure Data Lake Storage Account hosting the file.
        """
        return pulumi.get(self, "file_system")

    @file_system.setter
    def file_system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[str]]:
        """
        The filename of the file on the Azure Data Lake Storage Account.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filename", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The folder path to the file on the Azure Data Lake Storage Account.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class DatasetParquetAzureBlobStorageLocationArgs:
    def __init__(__self__, *,
                 container: pulumi.Input[str],
                 dynamic_container_enabled: Optional[pulumi.Input[bool]] = None,
                 dynamic_filename_enabled: Optional[pulumi.Input[bool]] = None,
                 dynamic_path_enabled: Optional[pulumi.Input[bool]] = None,
                 filename: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] container: The container on the Azure Blob Storage Account hosting the file.
        :param pulumi.Input[bool] dynamic_container_enabled: Is the `container` using dynamic expression, function or system variables? Defaults to `false`.
        :param pulumi.Input[bool] dynamic_filename_enabled: Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
        :param pulumi.Input[bool] dynamic_path_enabled: Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
        :param pulumi.Input[str] filename: The filename of the file on the Azure Blob Storage Account.
        :param pulumi.Input[str] path: The folder path to the file on the Azure Blob Storage Account.
        """
        DatasetParquetAzureBlobStorageLocationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            container=container,
            dynamic_container_enabled=dynamic_container_enabled,
            dynamic_filename_enabled=dynamic_filename_enabled,
            dynamic_path_enabled=dynamic_path_enabled,
            filename=filename,
            path=path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             container: pulumi.Input[str],
             dynamic_container_enabled: Optional[pulumi.Input[bool]] = None,
             dynamic_filename_enabled: Optional[pulumi.Input[bool]] = None,
             dynamic_path_enabled: Optional[pulumi.Input[bool]] = None,
             filename: Optional[pulumi.Input[str]] = None,
             path: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("container", container)
        if dynamic_container_enabled is not None:
            _setter("dynamic_container_enabled", dynamic_container_enabled)
        if dynamic_filename_enabled is not None:
            _setter("dynamic_filename_enabled", dynamic_filename_enabled)
        if dynamic_path_enabled is not None:
            _setter("dynamic_path_enabled", dynamic_path_enabled)
        if filename is not None:
            _setter("filename", filename)
        if path is not None:
            _setter("path", path)

    @property
    @pulumi.getter
    def container(self) -> pulumi.Input[str]:
        """
        The container on the Azure Blob Storage Account hosting the file.
        """
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: pulumi.Input[str]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter(name="dynamicContainerEnabled")
    def dynamic_container_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `container` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_container_enabled")

    @dynamic_container_enabled.setter
    def dynamic_container_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_container_enabled", value)

    @property
    @pulumi.getter(name="dynamicFilenameEnabled")
    def dynamic_filename_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_filename_enabled")

    @dynamic_filename_enabled.setter
    def dynamic_filename_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_filename_enabled", value)

    @property
    @pulumi.getter(name="dynamicPathEnabled")
    def dynamic_path_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_path_enabled")

    @dynamic_path_enabled.setter
    def dynamic_path_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_path_enabled", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[str]]:
        """
        The filename of the file on the Azure Blob Storage Account.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filename", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The folder path to the file on the Azure Blob Storage Account.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class DatasetParquetHttpServerLocationArgs:
    def __init__(__self__, *,
                 filename: pulumi.Input[str],
                 relative_url: pulumi.Input[str],
                 dynamic_filename_enabled: Optional[pulumi.Input[bool]] = None,
                 dynamic_path_enabled: Optional[pulumi.Input[bool]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] filename: The filename of the file on the web server.
        :param pulumi.Input[str] relative_url: The base URL to the web server hosting the file.
        :param pulumi.Input[bool] dynamic_filename_enabled: Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
        :param pulumi.Input[bool] dynamic_path_enabled: Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
        :param pulumi.Input[str] path: The folder path to the file on the web server.
        """
        DatasetParquetHttpServerLocationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filename=filename,
            relative_url=relative_url,
            dynamic_filename_enabled=dynamic_filename_enabled,
            dynamic_path_enabled=dynamic_path_enabled,
            path=path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filename: pulumi.Input[str],
             relative_url: pulumi.Input[str],
             dynamic_filename_enabled: Optional[pulumi.Input[bool]] = None,
             dynamic_path_enabled: Optional[pulumi.Input[bool]] = None,
             path: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filename", filename)
        _setter("relative_url", relative_url)
        if dynamic_filename_enabled is not None:
            _setter("dynamic_filename_enabled", dynamic_filename_enabled)
        if dynamic_path_enabled is not None:
            _setter("dynamic_path_enabled", dynamic_path_enabled)
        if path is not None:
            _setter("path", path)

    @property
    @pulumi.getter
    def filename(self) -> pulumi.Input[str]:
        """
        The filename of the file on the web server.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: pulumi.Input[str]):
        pulumi.set(self, "filename", value)

    @property
    @pulumi.getter(name="relativeUrl")
    def relative_url(self) -> pulumi.Input[str]:
        """
        The base URL to the web server hosting the file.
        """
        return pulumi.get(self, "relative_url")

    @relative_url.setter
    def relative_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "relative_url", value)

    @property
    @pulumi.getter(name="dynamicFilenameEnabled")
    def dynamic_filename_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_filename_enabled")

    @dynamic_filename_enabled.setter
    def dynamic_filename_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_filename_enabled", value)

    @property
    @pulumi.getter(name="dynamicPathEnabled")
    def dynamic_path_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
        """
        return pulumi.get(self, "dynamic_path_enabled")

    @dynamic_path_enabled.setter
    def dynamic_path_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_path_enabled", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The folder path to the file on the web server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class DatasetParquetSchemaColumnArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the column.
        :param pulumi.Input[str] description: The description of the column.
        :param pulumi.Input[str] type: Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
        """
        DatasetParquetSchemaColumnArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            description=description,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if description is not None:
            _setter("description", description)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the column.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the column.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DatasetPostgresqlSchemaColumnArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the column.
        :param pulumi.Input[str] description: The description of the column.
        :param pulumi.Input[str] type: Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
        """
        DatasetPostgresqlSchemaColumnArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            description=description,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if description is not None:
            _setter("description", description)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the column.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the column.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DatasetSnowflakeSchemaColumnArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 precision: Optional[pulumi.Input[int]] = None,
                 scale: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the column.
        :param pulumi.Input[int] precision: The total number of digits allowed.
        :param pulumi.Input[int] scale: The number of digits allowed to the right of the decimal point.
        :param pulumi.Input[str] type: Type of the column. Valid values are `NUMBER`, `DECIMAL`, `NUMERIC`, `INT`, `INTEGER`, `BIGINT`, `SMALLINT`, `FLOAT``FLOAT4`, `FLOAT8`, `DOUBLE`, `DOUBLE PRECISION`, `REAL`, `VARCHAR`, `CHAR`, `CHARACTER`, `STRING`, `TEXT`, `BINARY`, `VARBINARY`, `BOOLEAN`, `DATE`, `DATETIME`, `TIME`, `TIMESTAMP`, `TIMESTAMP_LTZ`, `TIMESTAMP_NTZ`, `TIMESTAMP_TZ`, `VARIANT`, `OBJECT`, `ARRAY`, `GEOGRAPHY`. Please note these values are case sensitive.
        """
        DatasetSnowflakeSchemaColumnArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            precision=precision,
            scale=scale,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             precision: Optional[pulumi.Input[int]] = None,
             scale: Optional[pulumi.Input[int]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if precision is not None:
            _setter("precision", precision)
        if scale is not None:
            _setter("scale", scale)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the column.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def precision(self) -> Optional[pulumi.Input[int]]:
        """
        The total number of digits allowed.
        """
        return pulumi.get(self, "precision")

    @precision.setter
    def precision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "precision", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input[int]]:
        """
        The number of digits allowed to the right of the decimal point.
        """
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scale", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the column. Valid values are `NUMBER`, `DECIMAL`, `NUMERIC`, `INT`, `INTEGER`, `BIGINT`, `SMALLINT`, `FLOAT``FLOAT4`, `FLOAT8`, `DOUBLE`, `DOUBLE PRECISION`, `REAL`, `VARCHAR`, `CHAR`, `CHARACTER`, `STRING`, `TEXT`, `BINARY`, `VARBINARY`, `BOOLEAN`, `DATE`, `DATETIME`, `TIME`, `TIMESTAMP`, `TIMESTAMP_LTZ`, `TIMESTAMP_NTZ`, `TIMESTAMP_TZ`, `VARIANT`, `OBJECT`, `ARRAY`, `GEOGRAPHY`. Please note these values are case sensitive.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DatasetSqlServerTableSchemaColumnArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the column.
        :param pulumi.Input[str] description: The description of the column.
        :param pulumi.Input[str] type: Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
        """
        DatasetSqlServerTableSchemaColumnArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            description=description,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if description is not None:
            _setter("description", description)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the column.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the column.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class FactoryGithubConfigurationArgs:
    def __init__(__self__, *,
                 account_name: pulumi.Input[str],
                 branch_name: pulumi.Input[str],
                 git_url: pulumi.Input[str],
                 repository_name: pulumi.Input[str],
                 root_folder: pulumi.Input[str],
                 publishing_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] account_name: Specifies the GitHub account name.
        :param pulumi.Input[str] branch_name: Specifies the branch of the repository to get code from.
        :param pulumi.Input[str] git_url: Specifies the GitHub Enterprise host name. For example: <https://github.mydomain.com>. Use <https://github.com> for open source repositories.
        :param pulumi.Input[str] repository_name: Specifies the name of the git repository.
        :param pulumi.Input[str] root_folder: Specifies the root folder within the repository. Set to `/` for the top level.
        :param pulumi.Input[bool] publishing_enabled: Is automated publishing enabled? Defaults to `false`.
               
               > **Note:** You must log in to the Data Factory management UI to complete the authentication to the GitHub repository.
        """
        FactoryGithubConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_name=account_name,
            branch_name=branch_name,
            git_url=git_url,
            repository_name=repository_name,
            root_folder=root_folder,
            publishing_enabled=publishing_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_name: pulumi.Input[str],
             branch_name: pulumi.Input[str],
             git_url: pulumi.Input[str],
             repository_name: pulumi.Input[str],
             root_folder: pulumi.Input[str],
             publishing_enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("account_name", account_name)
        _setter("branch_name", branch_name)
        _setter("git_url", git_url)
        _setter("repository_name", repository_name)
        _setter("root_folder", root_folder)
        if publishing_enabled is not None:
            _setter("publishing_enabled", publishing_enabled)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Input[str]:
        """
        Specifies the GitHub account name.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> pulumi.Input[str]:
        """
        Specifies the branch of the repository to get code from.
        """
        return pulumi.get(self, "branch_name")

    @branch_name.setter
    def branch_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "branch_name", value)

    @property
    @pulumi.getter(name="gitUrl")
    def git_url(self) -> pulumi.Input[str]:
        """
        Specifies the GitHub Enterprise host name. For example: <https://github.mydomain.com>. Use <https://github.com> for open source repositories.
        """
        return pulumi.get(self, "git_url")

    @git_url.setter
    def git_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "git_url", value)

    @property
    @pulumi.getter(name="repositoryName")
    def repository_name(self) -> pulumi.Input[str]:
        """
        Specifies the name of the git repository.
        """
        return pulumi.get(self, "repository_name")

    @repository_name.setter
    def repository_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_name", value)

    @property
    @pulumi.getter(name="rootFolder")
    def root_folder(self) -> pulumi.Input[str]:
        """
        Specifies the root folder within the repository. Set to `/` for the top level.
        """
        return pulumi.get(self, "root_folder")

    @root_folder.setter
    def root_folder(self, value: pulumi.Input[str]):
        pulumi.set(self, "root_folder", value)

    @property
    @pulumi.getter(name="publishingEnabled")
    def publishing_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is automated publishing enabled? Defaults to `false`.

        > **Note:** You must log in to the Data Factory management UI to complete the authentication to the GitHub repository.
        """
        return pulumi.get(self, "publishing_enabled")

    @publishing_enabled.setter
    def publishing_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "publishing_enabled", value)


@pulumi.input_type
class FactoryGlobalParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Specifies the global parameter name.
        :param pulumi.Input[str] type: Specifies the global parameter type. Possible Values are `Array`, `Bool`, `Float`, `Int`, `Object` or `String`.
        :param pulumi.Input[str] value: Specifies the global parameter value.
               
               > **Note:** For type `Array` and `Object` it is recommended to use `jsonencode()` for the value
        """
        FactoryGlobalParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            type=type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             type: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("type", type)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Specifies the global parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Specifies the global parameter type. Possible Values are `Array`, `Bool`, `Float`, `Int`, `Object` or `String`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Specifies the global parameter value.

        > **Note:** For type `Array` and `Object` it is recommended to use `jsonencode()` for the value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FactoryIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 identity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 principal_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: Specifies the type of Managed Service Identity that should be configured on this Data Factory. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] identity_ids: Specifies a list of User Assigned Managed Identity IDs to be assigned to this Data Factory.
               
               > **NOTE:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
        :param pulumi.Input[str] principal_id: The Principal ID associated with this Managed Service Identity.
        :param pulumi.Input[str] tenant_id: Specifies the Tenant ID associated with the VSTS account.
        """
        FactoryIdentityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            identity_ids=identity_ids,
            principal_id=principal_id,
            tenant_id=tenant_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input[str],
             identity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             principal_id: Optional[pulumi.Input[str]] = None,
             tenant_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if identity_ids is not None:
            _setter("identity_ids", identity_ids)
        if principal_id is not None:
            _setter("principal_id", principal_id)
        if tenant_id is not None:
            _setter("tenant_id", tenant_id)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Specifies the type of Managed Service Identity that should be configured on this Data Factory. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies a list of User Assigned Managed Identity IDs to be assigned to this Data Factory.

        > **NOTE:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
        """
        return pulumi.get(self, "identity_ids")

    @identity_ids.setter
    def identity_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "identity_ids", value)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Principal ID associated with this Managed Service Identity.
        """
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Tenant ID associated with the VSTS account.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class FactoryVstsConfigurationArgs:
    def __init__(__self__, *,
                 account_name: pulumi.Input[str],
                 branch_name: pulumi.Input[str],
                 project_name: pulumi.Input[str],
                 repository_name: pulumi.Input[str],
                 root_folder: pulumi.Input[str],
                 tenant_id: pulumi.Input[str],
                 publishing_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] account_name: Specifies the VSTS account name.
        :param pulumi.Input[str] branch_name: Specifies the branch of the repository to get code from.
        :param pulumi.Input[str] project_name: Specifies the name of the VSTS project.
        :param pulumi.Input[str] repository_name: Specifies the name of the git repository.
        :param pulumi.Input[str] root_folder: Specifies the root folder within the repository. Set to `/` for the top level.
        :param pulumi.Input[str] tenant_id: Specifies the Tenant ID associated with the VSTS account.
        :param pulumi.Input[bool] publishing_enabled: Is automated publishing enabled? Defaults to `false`.
        """
        FactoryVstsConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_name=account_name,
            branch_name=branch_name,
            project_name=project_name,
            repository_name=repository_name,
            root_folder=root_folder,
            tenant_id=tenant_id,
            publishing_enabled=publishing_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_name: pulumi.Input[str],
             branch_name: pulumi.Input[str],
             project_name: pulumi.Input[str],
             repository_name: pulumi.Input[str],
             root_folder: pulumi.Input[str],
             tenant_id: pulumi.Input[str],
             publishing_enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("account_name", account_name)
        _setter("branch_name", branch_name)
        _setter("project_name", project_name)
        _setter("repository_name", repository_name)
        _setter("root_folder", root_folder)
        _setter("tenant_id", tenant_id)
        if publishing_enabled is not None:
            _setter("publishing_enabled", publishing_enabled)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Input[str]:
        """
        Specifies the VSTS account name.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> pulumi.Input[str]:
        """
        Specifies the branch of the repository to get code from.
        """
        return pulumi.get(self, "branch_name")

    @branch_name.setter
    def branch_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "branch_name", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Input[str]:
        """
        Specifies the name of the VSTS project.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="repositoryName")
    def repository_name(self) -> pulumi.Input[str]:
        """
        Specifies the name of the git repository.
        """
        return pulumi.get(self, "repository_name")

    @repository_name.setter
    def repository_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_name", value)

    @property
    @pulumi.getter(name="rootFolder")
    def root_folder(self) -> pulumi.Input[str]:
        """
        Specifies the root folder within the repository. Set to `/` for the top level.
        """
        return pulumi.get(self, "root_folder")

    @root_folder.setter
    def root_folder(self, value: pulumi.Input[str]):
        pulumi.set(self, "root_folder", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[str]:
        """
        Specifies the Tenant ID associated with the VSTS account.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="publishingEnabled")
    def publishing_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is automated publishing enabled? Defaults to `false`.
        """
        return pulumi.get(self, "publishing_enabled")

    @publishing_enabled.setter
    def publishing_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "publishing_enabled", value)


@pulumi.input_type
class FlowletDataFlowSinkArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 dataset: Optional[pulumi.Input['FlowletDataFlowSinkDatasetArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 flowlet: Optional[pulumi.Input['FlowletDataFlowSinkFlowletArgs']] = None,
                 linked_service: Optional[pulumi.Input['FlowletDataFlowSinkLinkedServiceArgs']] = None,
                 rejected_linked_service: Optional[pulumi.Input['FlowletDataFlowSinkRejectedLinkedServiceArgs']] = None,
                 schema_linked_service: Optional[pulumi.Input['FlowletDataFlowSinkSchemaLinkedServiceArgs']] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Flow Source.
        :param pulumi.Input['FlowletDataFlowSinkDatasetArgs'] dataset: A `dataset` block as defined below.
        :param pulumi.Input[str] description: The description for the Data Flow Source.
        :param pulumi.Input['FlowletDataFlowSinkFlowletArgs'] flowlet: A `flowlet` block as defined below.
        :param pulumi.Input['FlowletDataFlowSinkLinkedServiceArgs'] linked_service: A `linked_service` block as defined below.
        :param pulumi.Input['FlowletDataFlowSinkRejectedLinkedServiceArgs'] rejected_linked_service: A `rejected_linked_service` block as defined below.
        :param pulumi.Input['FlowletDataFlowSinkSchemaLinkedServiceArgs'] schema_linked_service: A `schema_linked_service` block as defined below.
        """
        FlowletDataFlowSinkArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            dataset=dataset,
            description=description,
            flowlet=flowlet,
            linked_service=linked_service,
            rejected_linked_service=rejected_linked_service,
            schema_linked_service=schema_linked_service,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             dataset: Optional[pulumi.Input['FlowletDataFlowSinkDatasetArgs']] = None,
             description: Optional[pulumi.Input[str]] = None,
             flowlet: Optional[pulumi.Input['FlowletDataFlowSinkFlowletArgs']] = None,
             linked_service: Optional[pulumi.Input['FlowletDataFlowSinkLinkedServiceArgs']] = None,
             rejected_linked_service: Optional[pulumi.Input['FlowletDataFlowSinkRejectedLinkedServiceArgs']] = None,
             schema_linked_service: Optional[pulumi.Input['FlowletDataFlowSinkSchemaLinkedServiceArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if dataset is not None:
            _setter("dataset", dataset)
        if description is not None:
            _setter("description", description)
        if flowlet is not None:
            _setter("flowlet", flowlet)
        if linked_service is not None:
            _setter("linked_service", linked_service)
        if rejected_linked_service is not None:
            _setter("rejected_linked_service", rejected_linked_service)
        if schema_linked_service is not None:
            _setter("schema_linked_service", schema_linked_service)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Flow Source.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def dataset(self) -> Optional[pulumi.Input['FlowletDataFlowSinkDatasetArgs']]:
        """
        A `dataset` block as defined below.
        """
        return pulumi.get(self, "dataset")

    @dataset.setter
    def dataset(self, value: Optional[pulumi.Input['FlowletDataFlowSinkDatasetArgs']]):
        pulumi.set(self, "dataset", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description for the Data Flow Source.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def flowlet(self) -> Optional[pulumi.Input['FlowletDataFlowSinkFlowletArgs']]:
        """
        A `flowlet` block as defined below.
        """
        return pulumi.get(self, "flowlet")

    @flowlet.setter
    def flowlet(self, value: Optional[pulumi.Input['FlowletDataFlowSinkFlowletArgs']]):
        pulumi.set(self, "flowlet", value)

    @property
    @pulumi.getter(name="linkedService")
    def linked_service(self) -> Optional[pulumi.Input['FlowletDataFlowSinkLinkedServiceArgs']]:
        """
        A `linked_service` block as defined below.
        """
        return pulumi.get(self, "linked_service")

    @linked_service.setter
    def linked_service(self, value: Optional[pulumi.Input['FlowletDataFlowSinkLinkedServiceArgs']]):
        pulumi.set(self, "linked_service", value)

    @property
    @pulumi.getter(name="rejectedLinkedService")
    def rejected_linked_service(self) -> Optional[pulumi.Input['FlowletDataFlowSinkRejectedLinkedServiceArgs']]:
        """
        A `rejected_linked_service` block as defined below.
        """
        return pulumi.get(self, "rejected_linked_service")

    @rejected_linked_service.setter
    def rejected_linked_service(self, value: Optional[pulumi.Input['FlowletDataFlowSinkRejectedLinkedServiceArgs']]):
        pulumi.set(self, "rejected_linked_service", value)

    @property
    @pulumi.getter(name="schemaLinkedService")
    def schema_linked_service(self) -> Optional[pulumi.Input['FlowletDataFlowSinkSchemaLinkedServiceArgs']]:
        """
        A `schema_linked_service` block as defined below.
        """
        return pulumi.get(self, "schema_linked_service")

    @schema_linked_service.setter
    def schema_linked_service(self, value: Optional[pulumi.Input['FlowletDataFlowSinkSchemaLinkedServiceArgs']]):
        pulumi.set(self, "schema_linked_service", value)


@pulumi.input_type
class FlowletDataFlowSinkDatasetArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Factory Dataset.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory dataset.
        """
        FlowletDataFlowSinkDatasetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Factory Dataset.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Data Factory dataset.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class FlowletDataFlowSinkFlowletArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 dataset_parameters: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Factory Flowlet.
        :param pulumi.Input[str] dataset_parameters: Specifies the reference data flow parameters from dataset.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory Flowlet.
        """
        FlowletDataFlowSinkFlowletArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            dataset_parameters=dataset_parameters,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             dataset_parameters: Optional[pulumi.Input[str]] = None,
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if dataset_parameters is not None:
            _setter("dataset_parameters", dataset_parameters)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Factory Flowlet.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="datasetParameters")
    def dataset_parameters(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the reference data flow parameters from dataset.
        """
        return pulumi.get(self, "dataset_parameters")

    @dataset_parameters.setter
    def dataset_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_parameters", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Data Factory Flowlet.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class FlowletDataFlowSinkLinkedServiceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Factory Linked Service.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory Linked Service.
        """
        FlowletDataFlowSinkLinkedServiceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Factory Linked Service.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Data Factory Linked Service.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class FlowletDataFlowSinkRejectedLinkedServiceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Factory Linked Service with schema.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory Linked Service.
        """
        FlowletDataFlowSinkRejectedLinkedServiceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Factory Linked Service with schema.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Data Factory Linked Service.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class FlowletDataFlowSinkSchemaLinkedServiceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Factory Linked Service with schema.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory Linked Service.
        """
        FlowletDataFlowSinkSchemaLinkedServiceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Factory Linked Service with schema.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Data Factory Linked Service.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class FlowletDataFlowSourceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 dataset: Optional[pulumi.Input['FlowletDataFlowSourceDatasetArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 flowlet: Optional[pulumi.Input['FlowletDataFlowSourceFlowletArgs']] = None,
                 linked_service: Optional[pulumi.Input['FlowletDataFlowSourceLinkedServiceArgs']] = None,
                 rejected_linked_service: Optional[pulumi.Input['FlowletDataFlowSourceRejectedLinkedServiceArgs']] = None,
                 schema_linked_service: Optional[pulumi.Input['FlowletDataFlowSourceSchemaLinkedServiceArgs']] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Flow Source.
        :param pulumi.Input['FlowletDataFlowSourceDatasetArgs'] dataset: A `dataset` block as defined below.
        :param pulumi.Input[str] description: The description for the Data Flow Source.
        :param pulumi.Input['FlowletDataFlowSourceFlowletArgs'] flowlet: A `flowlet` block as defined below.
        :param pulumi.Input['FlowletDataFlowSourceLinkedServiceArgs'] linked_service: A `linked_service` block as defined below.
        :param pulumi.Input['FlowletDataFlowSourceRejectedLinkedServiceArgs'] rejected_linked_service: A `rejected_linked_service` block as defined below.
        :param pulumi.Input['FlowletDataFlowSourceSchemaLinkedServiceArgs'] schema_linked_service: A `schema_linked_service` block as defined below.
        """
        FlowletDataFlowSourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            dataset=dataset,
            description=description,
            flowlet=flowlet,
            linked_service=linked_service,
            rejected_linked_service=rejected_linked_service,
            schema_linked_service=schema_linked_service,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             dataset: Optional[pulumi.Input['FlowletDataFlowSourceDatasetArgs']] = None,
             description: Optional[pulumi.Input[str]] = None,
             flowlet: Optional[pulumi.Input['FlowletDataFlowSourceFlowletArgs']] = None,
             linked_service: Optional[pulumi.Input['FlowletDataFlowSourceLinkedServiceArgs']] = None,
             rejected_linked_service: Optional[pulumi.Input['FlowletDataFlowSourceRejectedLinkedServiceArgs']] = None,
             schema_linked_service: Optional[pulumi.Input['FlowletDataFlowSourceSchemaLinkedServiceArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if dataset is not None:
            _setter("dataset", dataset)
        if description is not None:
            _setter("description", description)
        if flowlet is not None:
            _setter("flowlet", flowlet)
        if linked_service is not None:
            _setter("linked_service", linked_service)
        if rejected_linked_service is not None:
            _setter("rejected_linked_service", rejected_linked_service)
        if schema_linked_service is not None:
            _setter("schema_linked_service", schema_linked_service)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Flow Source.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def dataset(self) -> Optional[pulumi.Input['FlowletDataFlowSourceDatasetArgs']]:
        """
        A `dataset` block as defined below.
        """
        return pulumi.get(self, "dataset")

    @dataset.setter
    def dataset(self, value: Optional[pulumi.Input['FlowletDataFlowSourceDatasetArgs']]):
        pulumi.set(self, "dataset", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description for the Data Flow Source.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def flowlet(self) -> Optional[pulumi.Input['FlowletDataFlowSourceFlowletArgs']]:
        """
        A `flowlet` block as defined below.
        """
        return pulumi.get(self, "flowlet")

    @flowlet.setter
    def flowlet(self, value: Optional[pulumi.Input['FlowletDataFlowSourceFlowletArgs']]):
        pulumi.set(self, "flowlet", value)

    @property
    @pulumi.getter(name="linkedService")
    def linked_service(self) -> Optional[pulumi.Input['FlowletDataFlowSourceLinkedServiceArgs']]:
        """
        A `linked_service` block as defined below.
        """
        return pulumi.get(self, "linked_service")

    @linked_service.setter
    def linked_service(self, value: Optional[pulumi.Input['FlowletDataFlowSourceLinkedServiceArgs']]):
        pulumi.set(self, "linked_service", value)

    @property
    @pulumi.getter(name="rejectedLinkedService")
    def rejected_linked_service(self) -> Optional[pulumi.Input['FlowletDataFlowSourceRejectedLinkedServiceArgs']]:
        """
        A `rejected_linked_service` block as defined below.
        """
        return pulumi.get(self, "rejected_linked_service")

    @rejected_linked_service.setter
    def rejected_linked_service(self, value: Optional[pulumi.Input['FlowletDataFlowSourceRejectedLinkedServiceArgs']]):
        pulumi.set(self, "rejected_linked_service", value)

    @property
    @pulumi.getter(name="schemaLinkedService")
    def schema_linked_service(self) -> Optional[pulumi.Input['FlowletDataFlowSourceSchemaLinkedServiceArgs']]:
        """
        A `schema_linked_service` block as defined below.
        """
        return pulumi.get(self, "schema_linked_service")

    @schema_linked_service.setter
    def schema_linked_service(self, value: Optional[pulumi.Input['FlowletDataFlowSourceSchemaLinkedServiceArgs']]):
        pulumi.set(self, "schema_linked_service", value)


@pulumi.input_type
class FlowletDataFlowSourceDatasetArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Factory Dataset.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory dataset.
        """
        FlowletDataFlowSourceDatasetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Factory Dataset.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Data Factory dataset.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class FlowletDataFlowSourceFlowletArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 dataset_parameters: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Factory Flowlet.
        :param pulumi.Input[str] dataset_parameters: Specifies the reference data flow parameters from dataset.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory Flowlet.
        """
        FlowletDataFlowSourceFlowletArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            dataset_parameters=dataset_parameters,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             dataset_parameters: Optional[pulumi.Input[str]] = None,
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if dataset_parameters is not None:
            _setter("dataset_parameters", dataset_parameters)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Factory Flowlet.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="datasetParameters")
    def dataset_parameters(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the reference data flow parameters from dataset.
        """
        return pulumi.get(self, "dataset_parameters")

    @dataset_parameters.setter
    def dataset_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_parameters", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Data Factory Flowlet.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class FlowletDataFlowSourceLinkedServiceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Factory Linked Service.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory Linked Service.
        """
        FlowletDataFlowSourceLinkedServiceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Factory Linked Service.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Data Factory Linked Service.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class FlowletDataFlowSourceRejectedLinkedServiceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Factory Linked Service with schema.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory Linked Service.
        """
        FlowletDataFlowSourceRejectedLinkedServiceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Factory Linked Service with schema.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Data Factory Linked Service.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class FlowletDataFlowSourceSchemaLinkedServiceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Factory Linked Service with schema.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory Linked Service.
        """
        FlowletDataFlowSourceSchemaLinkedServiceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Factory Linked Service with schema.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Data Factory Linked Service.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class FlowletDataFlowTransformationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 dataset: Optional[pulumi.Input['FlowletDataFlowTransformationDatasetArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 flowlet: Optional[pulumi.Input['FlowletDataFlowTransformationFlowletArgs']] = None,
                 linked_service: Optional[pulumi.Input['FlowletDataFlowTransformationLinkedServiceArgs']] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Flow transformation.
        :param pulumi.Input['FlowletDataFlowTransformationDatasetArgs'] dataset: A `dataset` block as defined below.
        :param pulumi.Input[str] description: The description for the Data Flow transformation.
        :param pulumi.Input['FlowletDataFlowTransformationFlowletArgs'] flowlet: A `flowlet` block as defined below.
        :param pulumi.Input['FlowletDataFlowTransformationLinkedServiceArgs'] linked_service: A `linked_service` block as defined below.
        """
        FlowletDataFlowTransformationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            dataset=dataset,
            description=description,
            flowlet=flowlet,
            linked_service=linked_service,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             dataset: Optional[pulumi.Input['FlowletDataFlowTransformationDatasetArgs']] = None,
             description: Optional[pulumi.Input[str]] = None,
             flowlet: Optional[pulumi.Input['FlowletDataFlowTransformationFlowletArgs']] = None,
             linked_service: Optional[pulumi.Input['FlowletDataFlowTransformationLinkedServiceArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if dataset is not None:
            _setter("dataset", dataset)
        if description is not None:
            _setter("description", description)
        if flowlet is not None:
            _setter("flowlet", flowlet)
        if linked_service is not None:
            _setter("linked_service", linked_service)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Flow transformation.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def dataset(self) -> Optional[pulumi.Input['FlowletDataFlowTransformationDatasetArgs']]:
        """
        A `dataset` block as defined below.
        """
        return pulumi.get(self, "dataset")

    @dataset.setter
    def dataset(self, value: Optional[pulumi.Input['FlowletDataFlowTransformationDatasetArgs']]):
        pulumi.set(self, "dataset", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description for the Data Flow transformation.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def flowlet(self) -> Optional[pulumi.Input['FlowletDataFlowTransformationFlowletArgs']]:
        """
        A `flowlet` block as defined below.
        """
        return pulumi.get(self, "flowlet")

    @flowlet.setter
    def flowlet(self, value: Optional[pulumi.Input['FlowletDataFlowTransformationFlowletArgs']]):
        pulumi.set(self, "flowlet", value)

    @property
    @pulumi.getter(name="linkedService")
    def linked_service(self) -> Optional[pulumi.Input['FlowletDataFlowTransformationLinkedServiceArgs']]:
        """
        A `linked_service` block as defined below.
        """
        return pulumi.get(self, "linked_service")

    @linked_service.setter
    def linked_service(self, value: Optional[pulumi.Input['FlowletDataFlowTransformationLinkedServiceArgs']]):
        pulumi.set(self, "linked_service", value)


@pulumi.input_type
class FlowletDataFlowTransformationDatasetArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Factory Dataset.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory dataset.
        """
        FlowletDataFlowTransformationDatasetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Factory Dataset.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Data Factory dataset.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class FlowletDataFlowTransformationFlowletArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 dataset_parameters: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Factory Flowlet.
        :param pulumi.Input[str] dataset_parameters: Specifies the reference data flow parameters from dataset.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory Flowlet.
        """
        FlowletDataFlowTransformationFlowletArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            dataset_parameters=dataset_parameters,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             dataset_parameters: Optional[pulumi.Input[str]] = None,
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if dataset_parameters is not None:
            _setter("dataset_parameters", dataset_parameters)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Factory Flowlet.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="datasetParameters")
    def dataset_parameters(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the reference data flow parameters from dataset.
        """
        return pulumi.get(self, "dataset_parameters")

    @dataset_parameters.setter
    def dataset_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_parameters", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Data Factory Flowlet.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class FlowletDataFlowTransformationLinkedServiceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name for the Data Factory Linked Service.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory Linked Service.
        """
        FlowletDataFlowTransformationLinkedServiceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the Data Factory Linked Service.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Data Factory Linked Service.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class IntegrationRuntimeManagedCatalogInfoArgs:
    def __init__(__self__, *,
                 server_endpoint: pulumi.Input[str],
                 administrator_login: Optional[pulumi.Input[str]] = None,
                 administrator_password: Optional[pulumi.Input[str]] = None,
                 pricing_tier: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] server_endpoint: The endpoint of an Azure SQL Server that will be used to host the SSIS catalog.
        :param pulumi.Input[str] administrator_login: Administrator login name for the SQL Server.
        :param pulumi.Input[str] administrator_password: Administrator login password for the SQL Server.
        :param pulumi.Input[str] pricing_tier: Pricing tier for the database that will be created for the SSIS catalog. Valid values are: `Basic`, `Standard`, `Premium` and `PremiumRS`.
        """
        IntegrationRuntimeManagedCatalogInfoArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            server_endpoint=server_endpoint,
            administrator_login=administrator_login,
            administrator_password=administrator_password,
            pricing_tier=pricing_tier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             server_endpoint: pulumi.Input[str],
             administrator_login: Optional[pulumi.Input[str]] = None,
             administrator_password: Optional[pulumi.Input[str]] = None,
             pricing_tier: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("server_endpoint", server_endpoint)
        if administrator_login is not None:
            _setter("administrator_login", administrator_login)
        if administrator_password is not None:
            _setter("administrator_password", administrator_password)
        if pricing_tier is not None:
            _setter("pricing_tier", pricing_tier)

    @property
    @pulumi.getter(name="serverEndpoint")
    def server_endpoint(self) -> pulumi.Input[str]:
        """
        The endpoint of an Azure SQL Server that will be used to host the SSIS catalog.
        """
        return pulumi.get(self, "server_endpoint")

    @server_endpoint.setter
    def server_endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_endpoint", value)

    @property
    @pulumi.getter(name="administratorLogin")
    def administrator_login(self) -> Optional[pulumi.Input[str]]:
        """
        Administrator login name for the SQL Server.
        """
        return pulumi.get(self, "administrator_login")

    @administrator_login.setter
    def administrator_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "administrator_login", value)

    @property
    @pulumi.getter(name="administratorPassword")
    def administrator_password(self) -> Optional[pulumi.Input[str]]:
        """
        Administrator login password for the SQL Server.
        """
        return pulumi.get(self, "administrator_password")

    @administrator_password.setter
    def administrator_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "administrator_password", value)

    @property
    @pulumi.getter(name="pricingTier")
    def pricing_tier(self) -> Optional[pulumi.Input[str]]:
        """
        Pricing tier for the database that will be created for the SSIS catalog. Valid values are: `Basic`, `Standard`, `Premium` and `PremiumRS`.
        """
        return pulumi.get(self, "pricing_tier")

    @pricing_tier.setter
    def pricing_tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pricing_tier", value)


@pulumi.input_type
class IntegrationRuntimeManagedCustomSetupScriptArgs:
    def __init__(__self__, *,
                 blob_container_uri: pulumi.Input[str],
                 sas_token: pulumi.Input[str]):
        """
        :param pulumi.Input[str] blob_container_uri: The blob endpoint for the container which contains a custom setup script that will be run on every node on startup. See [https://docs.microsoft.com/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
        :param pulumi.Input[str] sas_token: A container SAS token that gives access to the files. See [https://docs.microsoft.com/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
        """
        IntegrationRuntimeManagedCustomSetupScriptArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            blob_container_uri=blob_container_uri,
            sas_token=sas_token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             blob_container_uri: pulumi.Input[str],
             sas_token: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("blob_container_uri", blob_container_uri)
        _setter("sas_token", sas_token)

    @property
    @pulumi.getter(name="blobContainerUri")
    def blob_container_uri(self) -> pulumi.Input[str]:
        """
        The blob endpoint for the container which contains a custom setup script that will be run on every node on startup. See [https://docs.microsoft.com/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
        """
        return pulumi.get(self, "blob_container_uri")

    @blob_container_uri.setter
    def blob_container_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "blob_container_uri", value)

    @property
    @pulumi.getter(name="sasToken")
    def sas_token(self) -> pulumi.Input[str]:
        """
        A container SAS token that gives access to the files. See [https://docs.microsoft.com/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
        """
        return pulumi.get(self, "sas_token")

    @sas_token.setter
    def sas_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "sas_token", value)


@pulumi.input_type
class IntegrationRuntimeManagedVnetIntegrationArgs:
    def __init__(__self__, *,
                 subnet_name: pulumi.Input[str],
                 vnet_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] subnet_name: Name of the subnet to which the nodes of the Managed Integration Runtime will be added.
        :param pulumi.Input[str] vnet_id: ID of the virtual network to which the nodes of the Managed Integration Runtime will be added.
        """
        IntegrationRuntimeManagedVnetIntegrationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            subnet_name=subnet_name,
            vnet_id=vnet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             subnet_name: pulumi.Input[str],
             vnet_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("subnet_name", subnet_name)
        _setter("vnet_id", vnet_id)

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> pulumi.Input[str]:
        """
        Name of the subnet to which the nodes of the Managed Integration Runtime will be added.
        """
        return pulumi.get(self, "subnet_name")

    @subnet_name.setter
    def subnet_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_name", value)

    @property
    @pulumi.getter(name="vnetId")
    def vnet_id(self) -> pulumi.Input[str]:
        """
        ID of the virtual network to which the nodes of the Managed Integration Runtime will be added.
        """
        return pulumi.get(self, "vnet_id")

    @vnet_id.setter
    def vnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vnet_id", value)


@pulumi.input_type
class IntegrationRuntimeSelfHostedRbacAuthorizationArgs:
    def __init__(__self__, *,
                 resource_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] resource_id: The resource identifier of the integration runtime to be shared.
               
               > **Please Note**: RBAC Authorization creates a [linked Self-hosted Integration Runtime targeting the Shared Self-hosted Integration Runtime in resource_id](https://docs.microsoft.com/azure/data-factory/create-shared-self-hosted-integration-runtime-powershell#share-the-self-hosted-integration-runtime-with-another-data-factory). The linked Self-hosted Integration Runtime needs Contributor access granted to the Shared Self-hosted Data Factory.
               
               For more information on the configuration, please check out the [Azure documentation](https://docs.microsoft.com/rest/api/datafactory/integrationruntimes/createorupdate#linkedintegrationruntimerbacauthorization)
        """
        IntegrationRuntimeSelfHostedRbacAuthorizationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resource_id=resource_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resource_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("resource_id", resource_id)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[str]:
        """
        The resource identifier of the integration runtime to be shared.

        > **Please Note**: RBAC Authorization creates a [linked Self-hosted Integration Runtime targeting the Shared Self-hosted Integration Runtime in resource_id](https://docs.microsoft.com/azure/data-factory/create-shared-self-hosted-integration-runtime-powershell#share-the-self-hosted-integration-runtime-with-another-data-factory). The linked Self-hosted Integration Runtime needs Contributor access granted to the Shared Self-hosted Data Factory.

        For more information on the configuration, please check out the [Azure documentation](https://docs.microsoft.com/rest/api/datafactory/integrationruntimes/createorupdate#linkedintegrationruntimerbacauthorization)
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_id", value)


@pulumi.input_type
class IntegrationRuntimeSsisCatalogInfoArgs:
    def __init__(__self__, *,
                 server_endpoint: pulumi.Input[str],
                 administrator_login: Optional[pulumi.Input[str]] = None,
                 administrator_password: Optional[pulumi.Input[str]] = None,
                 dual_standby_pair_name: Optional[pulumi.Input[str]] = None,
                 elastic_pool_name: Optional[pulumi.Input[str]] = None,
                 pricing_tier: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] server_endpoint: The endpoint of an Azure SQL Server that will be used to host the SSIS catalog.
        :param pulumi.Input[str] administrator_login: Administrator login name for the SQL Server.
        :param pulumi.Input[str] administrator_password: Administrator login password for the SQL Server.
        :param pulumi.Input[str] dual_standby_pair_name: The dual standby Azure-SSIS Integration Runtime pair with SSISDB failover.
        :param pulumi.Input[str] elastic_pool_name: The name of SQL elastic pool where the database will be created for the SSIS catalog. Mutually exclusive with `pricing_tier`.
        :param pulumi.Input[str] pricing_tier: Pricing tier for the database that will be created for the SSIS catalog. Valid values are: `Basic`, `S0`, `S1`, `S2`, `S3`, `S4`, `S6`, `S7`, `S9`, `S12`, `P1`, `P2`, `P4`, `P6`, `P11`, `P15`, `GP_S_Gen5_1`, `GP_S_Gen5_2`, `GP_S_Gen5_4`, `GP_S_Gen5_6`, `GP_S_Gen5_8`, `GP_S_Gen5_10`, `GP_S_Gen5_12`, `GP_S_Gen5_14`, `GP_S_Gen5_16`, `GP_S_Gen5_18`, `GP_S_Gen5_20`, `GP_S_Gen5_24`, `GP_S_Gen5_32`, `GP_S_Gen5_40`, `GP_Gen5_2`, `GP_Gen5_4`, `GP_Gen5_6`, `GP_Gen5_8`, `GP_Gen5_10`, `GP_Gen5_12`, `GP_Gen5_14`, `GP_Gen5_16`, `GP_Gen5_18`, `GP_Gen5_20`, `GP_Gen5_24`, `GP_Gen5_32`, `GP_Gen5_40`, `GP_Gen5_80`, `BC_Gen5_2`, `BC_Gen5_4`, `BC_Gen5_6`, `BC_Gen5_8`, `BC_Gen5_10`, `BC_Gen5_12`, `BC_Gen5_14`, `BC_Gen5_16`, `BC_Gen5_18`, `BC_Gen5_20`, `BC_Gen5_24`, `BC_Gen5_32`, `BC_Gen5_40`, `BC_Gen5_80`, `HS_Gen5_2`, `HS_Gen5_4`, `HS_Gen5_6`, `HS_Gen5_8`, `HS_Gen5_10`, `HS_Gen5_12`, `HS_Gen5_14`, `HS_Gen5_16`, `HS_Gen5_18`, `HS_Gen5_20`, `HS_Gen5_24`, `HS_Gen5_32`, `HS_Gen5_40` and `HS_Gen5_80`. Mutually exclusive with `elastic_pool_name`.
        """
        IntegrationRuntimeSsisCatalogInfoArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            server_endpoint=server_endpoint,
            administrator_login=administrator_login,
            administrator_password=administrator_password,
            dual_standby_pair_name=dual_standby_pair_name,
            elastic_pool_name=elastic_pool_name,
            pricing_tier=pricing_tier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             server_endpoint: pulumi.Input[str],
             administrator_login: Optional[pulumi.Input[str]] = None,
             administrator_password: Optional[pulumi.Input[str]] = None,
             dual_standby_pair_name: Optional[pulumi.Input[str]] = None,
             elastic_pool_name: Optional[pulumi.Input[str]] = None,
             pricing_tier: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("server_endpoint", server_endpoint)
        if administrator_login is not None:
            _setter("administrator_login", administrator_login)
        if administrator_password is not None:
            _setter("administrator_password", administrator_password)
        if dual_standby_pair_name is not None:
            _setter("dual_standby_pair_name", dual_standby_pair_name)
        if elastic_pool_name is not None:
            _setter("elastic_pool_name", elastic_pool_name)
        if pricing_tier is not None:
            _setter("pricing_tier", pricing_tier)

    @property
    @pulumi.getter(name="serverEndpoint")
    def server_endpoint(self) -> pulumi.Input[str]:
        """
        The endpoint of an Azure SQL Server that will be used to host the SSIS catalog.
        """
        return pulumi.get(self, "server_endpoint")

    @server_endpoint.setter
    def server_endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_endpoint", value)

    @property
    @pulumi.getter(name="administratorLogin")
    def administrator_login(self) -> Optional[pulumi.Input[str]]:
        """
        Administrator login name for the SQL Server.
        """
        return pulumi.get(self, "administrator_login")

    @administrator_login.setter
    def administrator_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "administrator_login", value)

    @property
    @pulumi.getter(name="administratorPassword")
    def administrator_password(self) -> Optional[pulumi.Input[str]]:
        """
        Administrator login password for the SQL Server.
        """
        return pulumi.get(self, "administrator_password")

    @administrator_password.setter
    def administrator_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "administrator_password", value)

    @property
    @pulumi.getter(name="dualStandbyPairName")
    def dual_standby_pair_name(self) -> Optional[pulumi.Input[str]]:
        """
        The dual standby Azure-SSIS Integration Runtime pair with SSISDB failover.
        """
        return pulumi.get(self, "dual_standby_pair_name")

    @dual_standby_pair_name.setter
    def dual_standby_pair_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dual_standby_pair_name", value)

    @property
    @pulumi.getter(name="elasticPoolName")
    def elastic_pool_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of SQL elastic pool where the database will be created for the SSIS catalog. Mutually exclusive with `pricing_tier`.
        """
        return pulumi.get(self, "elastic_pool_name")

    @elastic_pool_name.setter
    def elastic_pool_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elastic_pool_name", value)

    @property
    @pulumi.getter(name="pricingTier")
    def pricing_tier(self) -> Optional[pulumi.Input[str]]:
        """
        Pricing tier for the database that will be created for the SSIS catalog. Valid values are: `Basic`, `S0`, `S1`, `S2`, `S3`, `S4`, `S6`, `S7`, `S9`, `S12`, `P1`, `P2`, `P4`, `P6`, `P11`, `P15`, `GP_S_Gen5_1`, `GP_S_Gen5_2`, `GP_S_Gen5_4`, `GP_S_Gen5_6`, `GP_S_Gen5_8`, `GP_S_Gen5_10`, `GP_S_Gen5_12`, `GP_S_Gen5_14`, `GP_S_Gen5_16`, `GP_S_Gen5_18`, `GP_S_Gen5_20`, `GP_S_Gen5_24`, `GP_S_Gen5_32`, `GP_S_Gen5_40`, `GP_Gen5_2`, `GP_Gen5_4`, `GP_Gen5_6`, `GP_Gen5_8`, `GP_Gen5_10`, `GP_Gen5_12`, `GP_Gen5_14`, `GP_Gen5_16`, `GP_Gen5_18`, `GP_Gen5_20`, `GP_Gen5_24`, `GP_Gen5_32`, `GP_Gen5_40`, `GP_Gen5_80`, `BC_Gen5_2`, `BC_Gen5_4`, `BC_Gen5_6`, `BC_Gen5_8`, `BC_Gen5_10`, `BC_Gen5_12`, `BC_Gen5_14`, `BC_Gen5_16`, `BC_Gen5_18`, `BC_Gen5_20`, `BC_Gen5_24`, `BC_Gen5_32`, `BC_Gen5_40`, `BC_Gen5_80`, `HS_Gen5_2`, `HS_Gen5_4`, `HS_Gen5_6`, `HS_Gen5_8`, `HS_Gen5_10`, `HS_Gen5_12`, `HS_Gen5_14`, `HS_Gen5_16`, `HS_Gen5_18`, `HS_Gen5_20`, `HS_Gen5_24`, `HS_Gen5_32`, `HS_Gen5_40` and `HS_Gen5_80`. Mutually exclusive with `elastic_pool_name`.
        """
        return pulumi.get(self, "pricing_tier")

    @pricing_tier.setter
    def pricing_tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pricing_tier", value)


@pulumi.input_type
class IntegrationRuntimeSsisCustomSetupScriptArgs:
    def __init__(__self__, *,
                 blob_container_uri: pulumi.Input[str],
                 sas_token: pulumi.Input[str]):
        """
        :param pulumi.Input[str] blob_container_uri: The blob endpoint for the container which contains a custom setup script that will be run on every node on startup. See [https://docs.microsoft.com/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
        :param pulumi.Input[str] sas_token: A container SAS token that gives access to the files. See [https://docs.microsoft.com/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
        """
        IntegrationRuntimeSsisCustomSetupScriptArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            blob_container_uri=blob_container_uri,
            sas_token=sas_token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             blob_container_uri: pulumi.Input[str],
             sas_token: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("blob_container_uri", blob_container_uri)
        _setter("sas_token", sas_token)

    @property
    @pulumi.getter(name="blobContainerUri")
    def blob_container_uri(self) -> pulumi.Input[str]:
        """
        The blob endpoint for the container which contains a custom setup script that will be run on every node on startup. See [https://docs.microsoft.com/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
        """
        return pulumi.get(self, "blob_container_uri")

    @blob_container_uri.setter
    def blob_container_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "blob_container_uri", value)

    @property
    @pulumi.getter(name="sasToken")
    def sas_token(self) -> pulumi.Input[str]:
        """
        A container SAS token that gives access to the files. See [https://docs.microsoft.com/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
        """
        return pulumi.get(self, "sas_token")

    @sas_token.setter
    def sas_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "sas_token", value)


@pulumi.input_type
class IntegrationRuntimeSsisExpressCustomSetupArgs:
    def __init__(__self__, *,
                 command_keys: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRuntimeSsisExpressCustomSetupCommandKeyArgs']]]] = None,
                 components: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRuntimeSsisExpressCustomSetupComponentArgs']]]] = None,
                 environment: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 powershell_version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationRuntimeSsisExpressCustomSetupCommandKeyArgs']]] command_keys: One or more `command_key` blocks as defined below.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationRuntimeSsisExpressCustomSetupComponentArgs']]] components: One or more `component` blocks as defined below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] environment: The Environment Variables for the Azure-SSIS Integration Runtime.
        :param pulumi.Input[str] powershell_version: The version of Azure Powershell installed for the Azure-SSIS Integration Runtime.
               
               > **NOTE** At least one of `env`, `powershell_version`, `component` and `command_key` should be specified.
        """
        IntegrationRuntimeSsisExpressCustomSetupArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            command_keys=command_keys,
            components=components,
            environment=environment,
            powershell_version=powershell_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             command_keys: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRuntimeSsisExpressCustomSetupCommandKeyArgs']]]] = None,
             components: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRuntimeSsisExpressCustomSetupComponentArgs']]]] = None,
             environment: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             powershell_version: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if command_keys is not None:
            _setter("command_keys", command_keys)
        if components is not None:
            _setter("components", components)
        if environment is not None:
            _setter("environment", environment)
        if powershell_version is not None:
            _setter("powershell_version", powershell_version)

    @property
    @pulumi.getter(name="commandKeys")
    def command_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRuntimeSsisExpressCustomSetupCommandKeyArgs']]]]:
        """
        One or more `command_key` blocks as defined below.
        """
        return pulumi.get(self, "command_keys")

    @command_keys.setter
    def command_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRuntimeSsisExpressCustomSetupCommandKeyArgs']]]]):
        pulumi.set(self, "command_keys", value)

    @property
    @pulumi.getter
    def components(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRuntimeSsisExpressCustomSetupComponentArgs']]]]:
        """
        One or more `component` blocks as defined below.
        """
        return pulumi.get(self, "components")

    @components.setter
    def components(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRuntimeSsisExpressCustomSetupComponentArgs']]]]):
        pulumi.set(self, "components", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The Environment Variables for the Azure-SSIS Integration Runtime.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="powershellVersion")
    def powershell_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of Azure Powershell installed for the Azure-SSIS Integration Runtime.

        > **NOTE** At least one of `env`, `powershell_version`, `component` and `command_key` should be specified.
        """
        return pulumi.get(self, "powershell_version")

    @powershell_version.setter
    def powershell_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "powershell_version", value)


@pulumi.input_type
class IntegrationRuntimeSsisExpressCustomSetupCommandKeyArgs:
    def __init__(__self__, *,
                 target_name: pulumi.Input[str],
                 user_name: pulumi.Input[str],
                 key_vault_password: Optional[pulumi.Input['IntegrationRuntimeSsisExpressCustomSetupCommandKeyKeyVaultPasswordArgs']] = None,
                 password: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] target_name: The target computer or domain name.
        :param pulumi.Input[str] user_name: The username for the target device.
        :param pulumi.Input['IntegrationRuntimeSsisExpressCustomSetupCommandKeyKeyVaultPasswordArgs'] key_vault_password: A `key_vault_secret_reference` block as defined below.
        :param pulumi.Input[str] password: The password for the target device.
        """
        IntegrationRuntimeSsisExpressCustomSetupCommandKeyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target_name=target_name,
            user_name=user_name,
            key_vault_password=key_vault_password,
            password=password,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target_name: pulumi.Input[str],
             user_name: pulumi.Input[str],
             key_vault_password: Optional[pulumi.Input['IntegrationRuntimeSsisExpressCustomSetupCommandKeyKeyVaultPasswordArgs']] = None,
             password: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("target_name", target_name)
        _setter("user_name", user_name)
        if key_vault_password is not None:
            _setter("key_vault_password", key_vault_password)
        if password is not None:
            _setter("password", password)

    @property
    @pulumi.getter(name="targetName")
    def target_name(self) -> pulumi.Input[str]:
        """
        The target computer or domain name.
        """
        return pulumi.get(self, "target_name")

    @target_name.setter
    def target_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_name", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        """
        The username for the target device.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="keyVaultPassword")
    def key_vault_password(self) -> Optional[pulumi.Input['IntegrationRuntimeSsisExpressCustomSetupCommandKeyKeyVaultPasswordArgs']]:
        """
        A `key_vault_secret_reference` block as defined below.
        """
        return pulumi.get(self, "key_vault_password")

    @key_vault_password.setter
    def key_vault_password(self, value: Optional[pulumi.Input['IntegrationRuntimeSsisExpressCustomSetupCommandKeyKeyVaultPasswordArgs']]):
        pulumi.set(self, "key_vault_password", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password for the target device.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)


@pulumi.input_type
class IntegrationRuntimeSsisExpressCustomSetupCommandKeyKeyVaultPasswordArgs:
    def __init__(__self__, *,
                 linked_service_name: pulumi.Input[str],
                 secret_name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 secret_version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] linked_service_name: Specifies the name of an existing Key Vault Data Factory Linked Service.
        :param pulumi.Input[str] secret_name: Specifies the secret name in Azure Key Vault.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Key Vault Data Factory Linked Service.
        :param pulumi.Input[str] secret_version: Specifies the secret version in Azure Key Vault.
        """
        IntegrationRuntimeSsisExpressCustomSetupCommandKeyKeyVaultPasswordArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            linked_service_name=linked_service_name,
            secret_name=secret_name,
            parameters=parameters,
            secret_version=secret_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             linked_service_name: pulumi.Input[str],
             secret_name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             secret_version: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("linked_service_name", linked_service_name)
        _setter("secret_name", secret_name)
        if parameters is not None:
            _setter("parameters", parameters)
        if secret_version is not None:
            _setter("secret_version", secret_version)

    @property
    @pulumi.getter(name="linkedServiceName")
    def linked_service_name(self) -> pulumi.Input[str]:
        """
        Specifies the name of an existing Key Vault Data Factory Linked Service.
        """
        return pulumi.get(self, "linked_service_name")

    @linked_service_name.setter
    def linked_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "linked_service_name", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        Specifies the secret name in Azure Key Vault.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Key Vault Data Factory Linked Service.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the secret version in Azure Key Vault.
        """
        return pulumi.get(self, "secret_version")

    @secret_version.setter
    def secret_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_version", value)


@pulumi.input_type
class IntegrationRuntimeSsisExpressCustomSetupComponentArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 key_vault_license: Optional[pulumi.Input['IntegrationRuntimeSsisExpressCustomSetupComponentKeyVaultLicenseArgs']] = None,
                 license: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The Component Name installed for the Azure-SSIS Integration Runtime.
        :param pulumi.Input['IntegrationRuntimeSsisExpressCustomSetupComponentKeyVaultLicenseArgs'] key_vault_license: A `key_vault_secret_reference` block as defined below.
        :param pulumi.Input[str] license: The license used for the Component.
        """
        IntegrationRuntimeSsisExpressCustomSetupComponentArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            key_vault_license=key_vault_license,
            license=license,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             key_vault_license: Optional[pulumi.Input['IntegrationRuntimeSsisExpressCustomSetupComponentKeyVaultLicenseArgs']] = None,
             license: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if key_vault_license is not None:
            _setter("key_vault_license", key_vault_license)
        if license is not None:
            _setter("license", license)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The Component Name installed for the Azure-SSIS Integration Runtime.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="keyVaultLicense")
    def key_vault_license(self) -> Optional[pulumi.Input['IntegrationRuntimeSsisExpressCustomSetupComponentKeyVaultLicenseArgs']]:
        """
        A `key_vault_secret_reference` block as defined below.
        """
        return pulumi.get(self, "key_vault_license")

    @key_vault_license.setter
    def key_vault_license(self, value: Optional[pulumi.Input['IntegrationRuntimeSsisExpressCustomSetupComponentKeyVaultLicenseArgs']]):
        pulumi.set(self, "key_vault_license", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input[str]]:
        """
        The license used for the Component.
        """
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license", value)


@pulumi.input_type
class IntegrationRuntimeSsisExpressCustomSetupComponentKeyVaultLicenseArgs:
    def __init__(__self__, *,
                 linked_service_name: pulumi.Input[str],
                 secret_name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 secret_version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] linked_service_name: Specifies the name of an existing Key Vault Data Factory Linked Service.
        :param pulumi.Input[str] secret_name: Specifies the secret name in Azure Key Vault.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Key Vault Data Factory Linked Service.
        :param pulumi.Input[str] secret_version: Specifies the secret version in Azure Key Vault.
        """
        IntegrationRuntimeSsisExpressCustomSetupComponentKeyVaultLicenseArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            linked_service_name=linked_service_name,
            secret_name=secret_name,
            parameters=parameters,
            secret_version=secret_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             linked_service_name: pulumi.Input[str],
             secret_name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             secret_version: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("linked_service_name", linked_service_name)
        _setter("secret_name", secret_name)
        if parameters is not None:
            _setter("parameters", parameters)
        if secret_version is not None:
            _setter("secret_version", secret_version)

    @property
    @pulumi.getter(name="linkedServiceName")
    def linked_service_name(self) -> pulumi.Input[str]:
        """
        Specifies the name of an existing Key Vault Data Factory Linked Service.
        """
        return pulumi.get(self, "linked_service_name")

    @linked_service_name.setter
    def linked_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "linked_service_name", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        Specifies the secret name in Azure Key Vault.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the Key Vault Data Factory Linked Service.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the secret version in Azure Key Vault.
        """
        return pulumi.get(self, "secret_version")

    @secret_version.setter
    def secret_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_version", value)


@pulumi.input_type
class IntegrationRuntimeSsisExpressVnetIntegrationArgs:
    def __init__(__self__, *,
                 subnet_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] subnet_id: id of the subnet to which the nodes of the Azure-SSIS Integration Runtime will be added.
        """
        IntegrationRuntimeSsisExpressVnetIntegrationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            subnet_id=subnet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             subnet_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("subnet_id", subnet_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        id of the subnet to which the nodes of the Azure-SSIS Integration Runtime will be added.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)


@pulumi.input_type
class IntegrationRuntimeSsisPackageStoreArgs:
    def __init__(__self__, *,
                 linked_service_name: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] linked_service_name: Name of the Linked Service to associate with the packages.
        :param pulumi.Input[str] name: Name of the package store.
        """
        IntegrationRuntimeSsisPackageStoreArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            linked_service_name=linked_service_name,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             linked_service_name: pulumi.Input[str],
             name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("linked_service_name", linked_service_name)
        _setter("name", name)

    @property
    @pulumi.getter(name="linkedServiceName")
    def linked_service_name(self) -> pulumi.Input[str]:
        """
        Name of the Linked Service to associate with the packages.
        """
        return pulumi.get(self, "linked_service_name")

    @linked_service_name.setter
    def linked_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "linked_service_name", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the package store.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class IntegrationRuntimeSsisProxyArgs:
    def __init__(__self__, *,
                 self_hosted_integration_runtime_name: pulumi.Input[str],
                 staging_storage_linked_service_name: pulumi.Input[str],
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] self_hosted_integration_runtime_name: Name of Self Hosted Integration Runtime as a proxy.
        :param pulumi.Input[str] staging_storage_linked_service_name: Name of Azure Blob Storage linked service to reference the staging data store to be used when moving data between self-hosted and Azure-SSIS integration runtimes.
        :param pulumi.Input[str] path: The path in the data store to be used when moving data between Self-Hosted and Azure-SSIS Integration Runtimes.
        """
        IntegrationRuntimeSsisProxyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            self_hosted_integration_runtime_name=self_hosted_integration_runtime_name,
            staging_storage_linked_service_name=staging_storage_linked_service_name,
            path=path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             self_hosted_integration_runtime_name: pulumi.Input[str],
             staging_storage_linked_service_name: pulumi.Input[str],
             path: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("self_hosted_integration_runtime_name", self_hosted_integration_runtime_name)
        _setter("staging_storage_linked_service_name", staging_storage_linked_service_name)
        if path is not None:
            _setter("path", path)

    @property
    @pulumi.getter(name="selfHostedIntegrationRuntimeName")
    def self_hosted_integration_runtime_name(self) -> pulumi.Input[str]:
        """
        Name of Self Hosted Integration Runtime as a proxy.
        """
        return pulumi.get(self, "self_hosted_integration_runtime_name")

    @self_hosted_integration_runtime_name.setter
    def self_hosted_integration_runtime_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "self_hosted_integration_runtime_name", value)

    @property
    @pulumi.getter(name="stagingStorageLinkedServiceName")
    def staging_storage_linked_service_name(self) -> pulumi.Input[str]:
        """
        Name of Azure Blob Storage linked service to reference the staging data store to be used when moving data between self-hosted and Azure-SSIS integration runtimes.
        """
        return pulumi.get(self, "staging_storage_linked_service_name")

    @staging_storage_linked_service_name.setter
    def staging_storage_linked_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "staging_storage_linked_service_name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The path in the data store to be used when moving data between Self-Hosted and Azure-SSIS Integration Runtimes.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class IntegrationRuntimeSsisVnetIntegrationArgs:
    def __init__(__self__, *,
                 public_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 subnet_name: Optional[pulumi.Input[str]] = None,
                 vnet_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] public_ips: Static public IP addresses for the Azure-SSIS Integration Runtime. The size must be 2.
        :param pulumi.Input[str] subnet_id: id of the subnet to which the nodes of the Azure-SSIS Integration Runtime will be added.
               
               > **NOTE** Only one of `subnet_id` and `subnet_name` can be specified. If `subnet_name` is specified, `vnet_id` must be provided.
        :param pulumi.Input[str] subnet_name: Name of the subnet to which the nodes of the Azure-SSIS Integration Runtime will be added.
        :param pulumi.Input[str] vnet_id: ID of the virtual network to which the nodes of the Azure-SSIS Integration Runtime will be added.
        """
        IntegrationRuntimeSsisVnetIntegrationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            public_ips=public_ips,
            subnet_id=subnet_id,
            subnet_name=subnet_name,
            vnet_id=vnet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             public_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             subnet_id: Optional[pulumi.Input[str]] = None,
             subnet_name: Optional[pulumi.Input[str]] = None,
             vnet_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if public_ips is not None:
            _setter("public_ips", public_ips)
        if subnet_id is not None:
            _setter("subnet_id", subnet_id)
        if subnet_name is not None:
            _setter("subnet_name", subnet_name)
        if vnet_id is not None:
            _setter("vnet_id", vnet_id)

    @property
    @pulumi.getter(name="publicIps")
    def public_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Static public IP addresses for the Azure-SSIS Integration Runtime. The size must be 2.
        """
        return pulumi.get(self, "public_ips")

    @public_ips.setter
    def public_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "public_ips", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the subnet to which the nodes of the Azure-SSIS Integration Runtime will be added.

        > **NOTE** Only one of `subnet_id` and `subnet_name` can be specified. If `subnet_name` is specified, `vnet_id` must be provided.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the subnet to which the nodes of the Azure-SSIS Integration Runtime will be added.
        """
        return pulumi.get(self, "subnet_name")

    @subnet_name.setter
    def subnet_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_name", value)

    @property
    @pulumi.getter(name="vnetId")
    def vnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the virtual network to which the nodes of the Azure-SSIS Integration Runtime will be added.
        """
        return pulumi.get(self, "vnet_id")

    @vnet_id.setter
    def vnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vnet_id", value)


@pulumi.input_type
class LinkedCustomServiceIntegrationRuntimeArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The integration runtime reference to associate with the Data Factory Linked Service.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the integration runtime.
        """
        LinkedCustomServiceIntegrationRuntimeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The integration runtime reference to associate with the Data Factory Linked Service.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters to associate with the integration runtime.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class LinkedServiceAzureBlobStorageKeyVaultSasTokenArgs:
    def __init__(__self__, *,
                 linked_service_name: pulumi.Input[str],
                 secret_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] linked_service_name: Specifies the name of an existing Key Vault Data Factory Linked Service.
        :param pulumi.Input[str] secret_name: Specifies the secret name in Azure Key Vault that stores the SAS token.
        """
        LinkedServiceAzureBlobStorageKeyVaultSasTokenArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            linked_service_name=linked_service_name,
            secret_name=secret_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             linked_service_name: pulumi.Input[str],
             secret_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("linked_service_name", linked_service_name)
        _setter("secret_name", secret_name)

    @property
    @pulumi.getter(name="linkedServiceName")
    def linked_service_name(self) -> pulumi.Input[str]:
        """
        Specifies the name of an existing Key Vault Data Factory Linked Service.
        """
        return pulumi.get(self, "linked_service_name")

    @linked_service_name.setter
    def linked_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "linked_service_name", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        Specifies the secret name in Azure Key Vault that stores the SAS token.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class LinkedServiceAzureBlobStorageServicePrincipalLinkedKeyVaultKeyArgs:
    def __init__(__self__, *,
                 linked_service_name: pulumi.Input[str],
                 secret_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] linked_service_name: Specifies the name of an existing Key Vault Data Factory Linked Service.
        :param pulumi.Input[str] secret_name: Specifies the secret name in Azure Key Vault that stores the Service Principal key.
        """
        LinkedServiceAzureBlobStorageServicePrincipalLinkedKeyVaultKeyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            linked_service_name=linked_service_name,
            secret_name=secret_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             linked_service_name: pulumi.Input[str],
             secret_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("linked_service_name", linked_service_name)
        _setter("secret_name", secret_name)

    @property
    @pulumi.getter(name="linkedServiceName")
    def linked_service_name(self) -> pulumi.Input[str]:
        """
        Specifies the name of an existing Key Vault Data Factory Linked Service.
        """
        return pulumi.get(self, "linked_service_name")

    @linked_service_name.setter
    def linked_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "linked_service_name", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        Specifies the secret name in Azure Key Vault that stores the Service Principal key.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class LinkedServiceAzureDatabricksInstancePoolArgs:
    def __init__(__self__, *,
                 cluster_version: pulumi.Input[str],
                 instance_pool_id: pulumi.Input[str],
                 max_number_of_workers: Optional[pulumi.Input[int]] = None,
                 min_number_of_workers: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] cluster_version: Spark version of a the cluster.
        :param pulumi.Input[str] instance_pool_id: Identifier of the instance pool within the linked ADB instance.
        :param pulumi.Input[int] max_number_of_workers: The max number of worker nodes. Set this value if you want to enable autoscaling between the `min_number_of_workers` and this value. Omit this value to use a fixed number of workers defined in the `min_number_of_workers` property.
        :param pulumi.Input[int] min_number_of_workers: The minimum number of worker nodes. Defaults to `1`.
        """
        LinkedServiceAzureDatabricksInstancePoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_version=cluster_version,
            instance_pool_id=instance_pool_id,
            max_number_of_workers=max_number_of_workers,
            min_number_of_workers=min_number_of_workers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_version: pulumi.Input[str],
             instance_pool_id: pulumi.Input[str],
             max_number_of_workers: Optional[pulumi.Input[int]] = None,
             min_number_of_workers: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("cluster_version", cluster_version)
        _setter("instance_pool_id", instance_pool_id)
        if max_number_of_workers is not None:
            _setter("max_number_of_workers", max_number_of_workers)
        if min_number_of_workers is not None:
            _setter("min_number_of_workers", min_number_of_workers)

    @property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> pulumi.Input[str]:
        """
        Spark version of a the cluster.
        """
        return pulumi.get(self, "cluster_version")

    @cluster_version.setter
    def cluster_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_version", value)

    @property
    @pulumi.getter(name="instancePoolId")
    def instance_pool_id(self) -> pulumi.Input[str]:
        """
        Identifier of the instance pool within the linked ADB instance.
        """
        return pulumi.get(self, "instance_pool_id")

    @instance_pool_id.setter
    def instance_pool_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_pool_id", value)

    @property
    @pulumi.getter(name="maxNumberOfWorkers")
    def max_number_of_workers(self) -> Optional[pulumi.Input[int]]:
        """
        The max number of worker nodes. Set this value if you want to enable autoscaling between the `min_number_of_workers` and this value. Omit this value to use a fixed number of workers defined in the `min_number_of_workers` property.
        """
        return pulumi.get(self, "max_number_of_workers")

    @max_number_of_workers.setter
    def max_number_of_workers(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_number_of_workers", value)

    @property
    @pulumi.getter(name="minNumberOfWorkers")
    def min_number_of_workers(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum number of worker nodes. Defaults to `1`.
        """
        return pulumi.get(self, "min_number_of_workers")

    @min_number_of_workers.setter
    def min_number_of_workers(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_number_of_workers", value)


@pulumi.input_type
class LinkedServiceAzureDatabricksKeyVaultPasswordArgs:
    def __init__(__self__, *,
                 linked_service_name: pulumi.Input[str],
                 secret_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] linked_service_name: Specifies the name of an existing Key Vault Data Factory Linked Service.
        :param pulumi.Input[str] secret_name: Specifies the secret name in Azure Key Vault that stores ADB access token.
        """
        LinkedServiceAzureDatabricksKeyVaultPasswordArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            linked_service_name=linked_service_name,
            secret_name=secret_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             linked_service_name: pulumi.Input[str],
             secret_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("linked_service_name", linked_service_name)
        _setter("secret_name", secret_name)

    @property
    @pulumi.getter(name="linkedServiceName")
    def linked_service_name(self) -> pulumi.Input[str]:
        """
        Specifies the name of an existing Key Vault Data Factory Linked Service.
        """
        return pulumi.get(self, "linked_service_name")

    @linked_service_name.setter
    def linked_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "linked_service_name", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        Specifies the secret name in Azure Key Vault that stores ADB access token.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class LinkedServiceAzureDatabricksNewClusterConfigArgs:
    def __init__(__self__, *,
                 cluster_version: pulumi.Input[str],
                 node_type: pulumi.Input[str],
                 custom_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 driver_node_type: Optional[pulumi.Input[str]] = None,
                 init_scripts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 log_destination: Optional[pulumi.Input[str]] = None,
                 max_number_of_workers: Optional[pulumi.Input[int]] = None,
                 min_number_of_workers: Optional[pulumi.Input[int]] = None,
                 spark_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 spark_environment_variables: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] cluster_version: Spark version of a the cluster.
        :param pulumi.Input[str] node_type: Node type for the new cluster.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] custom_tags: Tags for the cluster resource.
        :param pulumi.Input[str] driver_node_type: Driver node type for the cluster.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] init_scripts: User defined initialization scripts for the cluster.
        :param pulumi.Input[str] log_destination: Location to deliver Spark driver, worker, and event logs.
        :param pulumi.Input[int] max_number_of_workers: Specifies the maximum number of worker nodes. It should be between 1 and 25000.
        :param pulumi.Input[int] min_number_of_workers: Specifies the minimum number of worker nodes. It should be between 1 and 25000. It defaults to `1`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] spark_config: User-specified Spark configuration variables key-value pairs.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] spark_environment_variables: User-specified Spark environment variables key-value pairs.
        """
        LinkedServiceAzureDatabricksNewClusterConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_version=cluster_version,
            node_type=node_type,
            custom_tags=custom_tags,
            driver_node_type=driver_node_type,
            init_scripts=init_scripts,
            log_destination=log_destination,
            max_number_of_workers=max_number_of_workers,
            min_number_of_workers=min_number_of_workers,
            spark_config=spark_config,
            spark_environment_variables=spark_environment_variables,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_version: pulumi.Input[str],
             node_type: pulumi.Input[str],
             custom_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             driver_node_type: Optional[pulumi.Input[str]] = None,
             init_scripts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             log_destination: Optional[pulumi.Input[str]] = None,
             max_number_of_workers: Optional[pulumi.Input[int]] = None,
             min_number_of_workers: Optional[pulumi.Input[int]] = None,
             spark_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             spark_environment_variables: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("cluster_version", cluster_version)
        _setter("node_type", node_type)
        if custom_tags is not None:
            _setter("custom_tags", custom_tags)
        if driver_node_type is not None:
            _setter("driver_node_type", driver_node_type)
        if init_scripts is not None:
            _setter("init_scripts", init_scripts)
        if log_destination is not None:
            _setter("log_destination", log_destination)
        if max_number_of_workers is not None:
            _setter("max_number_of_workers", max_number_of_workers)
        if min_number_of_workers is not None:
            _setter("min_number_of_workers", min_number_of_workers)
        if spark_config is not None:
            _setter("spark_config", spark_config)
        if spark_environment_variables is not None:
            _setter("spark_environment_variables", spark_environment_variables)

    @property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> pulumi.Input[str]:
        """
        Spark version of a the cluster.
        """
        return pulumi.get(self, "cluster_version")

    @cluster_version.setter
    def cluster_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_version", value)

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> pulumi.Input[str]:
        """
        Node type for the new cluster.
        """
        return pulumi.get(self, "node_type")

    @node_type.setter
    def node_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "node_type", value)

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags for the cluster resource.
        """
        return pulumi.get(self, "custom_tags")

    @custom_tags.setter
    def custom_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "custom_tags", value)

    @property
    @pulumi.getter(name="driverNodeType")
    def driver_node_type(self) -> Optional[pulumi.Input[str]]:
        """
        Driver node type for the cluster.
        """
        return pulumi.get(self, "driver_node_type")

    @driver_node_type.setter
    def driver_node_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "driver_node_type", value)

    @property
    @pulumi.getter(name="initScripts")
    def init_scripts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        User defined initialization scripts for the cluster.
        """
        return pulumi.get(self, "init_scripts")

    @init_scripts.setter
    def init_scripts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "init_scripts", value)

    @property
    @pulumi.getter(name="logDestination")
    def log_destination(self) -> Optional[pulumi.Input[str]]:
        """
        Location to deliver Spark driver, worker, and event logs.
        """
        return pulumi.get(self, "log_destination")

    @log_destination.setter
    def log_destination(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_destination", value)

    @property
    @pulumi.getter(name="maxNumberOfWorkers")
    def max_number_of_workers(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the maximum number of worker nodes. It should be between 1 and 25000.
        """
        return pulumi.get(self, "max_number_of_workers")

    @max_number_of_workers.setter
    def max_number_of_workers(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_number_of_workers", value)

    @property
    @pulumi.getter(name="minNumberOfWorkers")
    def min_number_of_workers(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the minimum number of worker nodes. It should be between 1 and 25000. It defaults to `1`.
        """
        return pulumi.get(self, "min_number_of_workers")

    @min_number_of_workers.setter
    def min_number_of_workers(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_number_of_workers", value)

    @property
    @pulumi.getter(name="sparkConfig")
    def spark_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        User-specified Spark configuration variables key-value pairs.
        """
        return pulumi.get(self, "spark_config")

    @spark_config.setter
    def spark_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "spark_config", value)

    @property
    @pulumi.getter(name="sparkEnvironmentVariables")
    def spark_environment_variables(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        User-specified Spark environment variables key-value pairs.
        """
        return pulumi.get(self, "spark_environment_variables")

    @spark_environment_variables.setter
    def spark_environment_variables(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "spark_environment_variables", value)


@pulumi.input_type
class LinkedServiceAzureFileStorageKeyVaultPasswordArgs:
    def __init__(__self__, *,
                 linked_service_name: pulumi.Input[str],
                 secret_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] linked_service_name: Specifies the name of an existing Key Vault Data Factory Linked Service.
        :param pulumi.Input[str] secret_name: Specifies the secret name in Azure Key Vault that stores Azure File Storage password.
        """
        LinkedServiceAzureFileStorageKeyVaultPasswordArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            linked_service_name=linked_service_name,
            secret_name=secret_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             linked_service_name: pulumi.Input[str],
             secret_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("linked_service_name", linked_service_name)
        _setter("secret_name", secret_name)

    @property
    @pulumi.getter(name="linkedServiceName")
    def linked_service_name(self) -> pulumi.Input[str]:
        """
        Specifies the name of an existing Key Vault Data Factory Linked Service.
        """
        return pulumi.get(self, "linked_service_name")

    @linked_service_name.setter
    def linked_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "linked_service_name", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        Specifies the secret name in Azure Key Vault that stores Azure File Storage password.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class LinkedServiceAzureFunctionKeyVaultKeyArgs:
    def __init__(__self__, *,
                 linked_service_name: pulumi.Input[str],
                 secret_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] linked_service_name: Specifies the name of an existing Key Vault Data Factory Linked Service.
        :param pulumi.Input[str] secret_name: Specifies the secret name in Azure Key Vault that stores the system key of the Azure Function.
        """
        LinkedServiceAzureFunctionKeyVaultKeyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            linked_service_name=linked_service_name,
            secret_name=secret_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             linked_service_name: pulumi.Input[str],
             secret_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("linked_service_name", linked_service_name)
        _setter("secret_name", secret_name)

    @property
    @pulumi.getter(name="linkedServiceName")
    def linked_service_name(self) -> pulumi.Input[str]:
        """
        Specifies the name of an existing Key Vault Data Factory Linked Service.
        """
        return pulumi.get(self, "linked_service_name")

    @linked_service_name.setter
    def linked_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "linked_service_name", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        Specifies the secret name in Azure Key Vault that stores the system key of the Azure Function.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class LinkedServiceAzureSqlDatabaseKeyVaultConnectionStringArgs:
    def __init__(__self__, *,
                 linked_service_name: pulumi.Input[str],
                 secret_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] linked_service_name: Specifies the name of an existing Key Vault Data Factory Linked Service.
        :param pulumi.Input[str] secret_name: Specifies the secret name in Azure Key Vault that stores SQL Server connection string.
        """
        LinkedServiceAzureSqlDatabaseKeyVaultConnectionStringArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            linked_service_name=linked_service_name,
            secret_name=secret_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             linked_service_name: pulumi.Input[str],
             secret_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("linked_service_name", linked_service_name)
        _setter("secret_name", secret_name)

    @property
    @pulumi.getter(name="linkedServiceName")
    def linked_service_name(self) -> pulumi.Input[str]:
        """
        Specifies the name of an existing Key Vault Data Factory Linked Service.
        """
        return pulumi.get(self, "linked_service_name")

    @linked_service_name.setter
    def linked_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "linked_service_name", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        Specifies the secret name in Azure Key Vault that stores SQL Server connection string.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class LinkedServiceAzureSqlDatabaseKeyVaultPasswordArgs:
    def __init__(__self__, *,
                 linked_service_name: pulumi.Input[str],
                 secret_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] linked_service_name: Specifies the name of an existing Key Vault Data Factory Linked Service.
        :param pulumi.Input[str] secret_name: Specifies the secret name in Azure Key Vault that stores SQL Server password.
        """
        LinkedServiceAzureSqlDatabaseKeyVaultPasswordArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            linked_service_name=linked_service_name,
            secret_name=secret_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             linked_service_name: pulumi.Input[str],
             secret_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("linked_service_name", linked_service_name)
        _setter("secret_name", secret_name)

    @property
    @pulumi.getter(name="linkedServiceName")
    def linked_service_name(self) -> pulumi.Input[str]:
        """
        Specifies the name of an existing Key Vault Data Factory Linked Service.
        """
        return pulumi.get(self, "linked_service_name")

    @linked_service_name.setter
    def linked_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "linked_service_name", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        Specifies the secret name in Azure Key Vault that stores SQL Server password.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class LinkedServiceOdataBasicAuthenticationArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: The password associated with the username, which can be used to authenticate to the OData endpoint.
        :param pulumi.Input[str] username: The username which can be used to authenticate to the OData endpoint.
        """
        LinkedServiceOdataBasicAuthenticationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password=password,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password: pulumi.Input[str],
             username: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("password", password)
        _setter("username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The password associated with the username, which can be used to authenticate to the OData endpoint.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username which can be used to authenticate to the OData endpoint.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class LinkedServiceOdbcBasicAuthenticationArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: The password associated with the username, which can be used to authenticate to the ODBC endpoint.
        :param pulumi.Input[str] username: The username which can be used to authenticate to the ODBC endpoint.
        """
        LinkedServiceOdbcBasicAuthenticationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password=password,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password: pulumi.Input[str],
             username: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("password", password)
        _setter("username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The password associated with the username, which can be used to authenticate to the ODBC endpoint.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username which can be used to authenticate to the ODBC endpoint.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class LinkedServiceSnowflakeKeyVaultPasswordArgs:
    def __init__(__self__, *,
                 linked_service_name: pulumi.Input[str],
                 secret_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] linked_service_name: Specifies the name of an existing Key Vault Data Factory Linked Service.
        :param pulumi.Input[str] secret_name: Specifies the secret name in Azure Key Vault that stores Snowflake password.
        """
        LinkedServiceSnowflakeKeyVaultPasswordArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            linked_service_name=linked_service_name,
            secret_name=secret_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             linked_service_name: pulumi.Input[str],
             secret_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("linked_service_name", linked_service_name)
        _setter("secret_name", secret_name)

    @property
    @pulumi.getter(name="linkedServiceName")
    def linked_service_name(self) -> pulumi.Input[str]:
        """
        Specifies the name of an existing Key Vault Data Factory Linked Service.
        """
        return pulumi.get(self, "linked_service_name")

    @linked_service_name.setter
    def linked_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "linked_service_name", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        Specifies the secret name in Azure Key Vault that stores Snowflake password.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class LinkedServiceSqlServerKeyVaultConnectionStringArgs:
    def __init__(__self__, *,
                 linked_service_name: pulumi.Input[str],
                 secret_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] linked_service_name: Specifies the name of an existing Key Vault Data Factory Linked Service.
        :param pulumi.Input[str] secret_name: Specifies the secret name in Azure Key Vault that stores SQL Server connection string.
        """
        LinkedServiceSqlServerKeyVaultConnectionStringArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            linked_service_name=linked_service_name,
            secret_name=secret_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             linked_service_name: pulumi.Input[str],
             secret_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("linked_service_name", linked_service_name)
        _setter("secret_name", secret_name)

    @property
    @pulumi.getter(name="linkedServiceName")
    def linked_service_name(self) -> pulumi.Input[str]:
        """
        Specifies the name of an existing Key Vault Data Factory Linked Service.
        """
        return pulumi.get(self, "linked_service_name")

    @linked_service_name.setter
    def linked_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "linked_service_name", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        Specifies the secret name in Azure Key Vault that stores SQL Server connection string.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class LinkedServiceSqlServerKeyVaultPasswordArgs:
    def __init__(__self__, *,
                 linked_service_name: pulumi.Input[str],
                 secret_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] linked_service_name: Specifies the name of an existing Key Vault Data Factory Linked Service.
        :param pulumi.Input[str] secret_name: Specifies the secret name in Azure Key Vault that stores SQL Server password.
        """
        LinkedServiceSqlServerKeyVaultPasswordArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            linked_service_name=linked_service_name,
            secret_name=secret_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             linked_service_name: pulumi.Input[str],
             secret_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("linked_service_name", linked_service_name)
        _setter("secret_name", secret_name)

    @property
    @pulumi.getter(name="linkedServiceName")
    def linked_service_name(self) -> pulumi.Input[str]:
        """
        Specifies the name of an existing Key Vault Data Factory Linked Service.
        """
        return pulumi.get(self, "linked_service_name")

    @linked_service_name.setter
    def linked_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "linked_service_name", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        Specifies the secret name in Azure Key Vault that stores SQL Server password.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class LinkedServiceSynapseKeyVaultPasswordArgs:
    def __init__(__self__, *,
                 linked_service_name: pulumi.Input[str],
                 secret_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] linked_service_name: Specifies the name of an existing Key Vault Data Factory Linked Service.
        :param pulumi.Input[str] secret_name: Specifies the secret name in Azure Key Vault that stores Synapse password.
        """
        LinkedServiceSynapseKeyVaultPasswordArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            linked_service_name=linked_service_name,
            secret_name=secret_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             linked_service_name: pulumi.Input[str],
             secret_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("linked_service_name", linked_service_name)
        _setter("secret_name", secret_name)

    @property
    @pulumi.getter(name="linkedServiceName")
    def linked_service_name(self) -> pulumi.Input[str]:
        """
        Specifies the name of an existing Key Vault Data Factory Linked Service.
        """
        return pulumi.get(self, "linked_service_name")

    @linked_service_name.setter
    def linked_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "linked_service_name", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        Specifies the secret name in Azure Key Vault that stores Synapse password.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class TriggerBlobEventPipelineArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The Data Factory Pipeline name that the trigger will act on.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: The Data Factory Pipeline parameters that the trigger will act on.
        """
        TriggerBlobEventPipelineArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The Data Factory Pipeline name that the trigger will act on.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The Data Factory Pipeline parameters that the trigger will act on.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class TriggerCustomEventPipelineArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The Data Factory Pipeline name that the trigger will act on.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: The Data Factory Pipeline parameters that the trigger will act on.
        """
        TriggerCustomEventPipelineArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The Data Factory Pipeline name that the trigger will act on.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The Data Factory Pipeline parameters that the trigger will act on.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class TriggerSchedulePipelineArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Reference pipeline name.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: The pipeline parameters that the trigger will act upon.
        """
        TriggerSchedulePipelineArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Reference pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The pipeline parameters that the trigger will act upon.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class TriggerScheduleScheduleArgs:
    def __init__(__self__, *,
                 days_of_months: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 days_of_weeks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 hours: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 minutes: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 monthlies: Optional[pulumi.Input[Sequence[pulumi.Input['TriggerScheduleScheduleMonthlyArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] days_of_months: Day(s) of the month on which the trigger is scheduled. This value can be specified with a monthly frequency only.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] days_of_weeks: Days of the week on which the trigger is scheduled. This value can be specified only with a weekly frequency.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] hours: Hours of the day on which the trigger is scheduled.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] minutes: Minutes of the hour on which the trigger is scheduled.
        :param pulumi.Input[Sequence[pulumi.Input['TriggerScheduleScheduleMonthlyArgs']]] monthlies: A `monthly` block as documented below, which specifies the days of the month on which the trigger is scheduled. The value can be specified only with a monthly frequency.
        """
        TriggerScheduleScheduleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            days_of_months=days_of_months,
            days_of_weeks=days_of_weeks,
            hours=hours,
            minutes=minutes,
            monthlies=monthlies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             days_of_months: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             days_of_weeks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             hours: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             minutes: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             monthlies: Optional[pulumi.Input[Sequence[pulumi.Input['TriggerScheduleScheduleMonthlyArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if days_of_months is not None:
            _setter("days_of_months", days_of_months)
        if days_of_weeks is not None:
            _setter("days_of_weeks", days_of_weeks)
        if hours is not None:
            _setter("hours", hours)
        if minutes is not None:
            _setter("minutes", minutes)
        if monthlies is not None:
            _setter("monthlies", monthlies)

    @property
    @pulumi.getter(name="daysOfMonths")
    def days_of_months(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Day(s) of the month on which the trigger is scheduled. This value can be specified with a monthly frequency only.
        """
        return pulumi.get(self, "days_of_months")

    @days_of_months.setter
    def days_of_months(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "days_of_months", value)

    @property
    @pulumi.getter(name="daysOfWeeks")
    def days_of_weeks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Days of the week on which the trigger is scheduled. This value can be specified only with a weekly frequency.
        """
        return pulumi.get(self, "days_of_weeks")

    @days_of_weeks.setter
    def days_of_weeks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "days_of_weeks", value)

    @property
    @pulumi.getter
    def hours(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Hours of the day on which the trigger is scheduled.
        """
        return pulumi.get(self, "hours")

    @hours.setter
    def hours(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "hours", value)

    @property
    @pulumi.getter
    def minutes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Minutes of the hour on which the trigger is scheduled.
        """
        return pulumi.get(self, "minutes")

    @minutes.setter
    def minutes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "minutes", value)

    @property
    @pulumi.getter
    def monthlies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TriggerScheduleScheduleMonthlyArgs']]]]:
        """
        A `monthly` block as documented below, which specifies the days of the month on which the trigger is scheduled. The value can be specified only with a monthly frequency.
        """
        return pulumi.get(self, "monthlies")

    @monthlies.setter
    def monthlies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TriggerScheduleScheduleMonthlyArgs']]]]):
        pulumi.set(self, "monthlies", value)


@pulumi.input_type
class TriggerScheduleScheduleMonthlyArgs:
    def __init__(__self__, *,
                 weekday: pulumi.Input[str],
                 week: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] weekday: The day of the week on which the trigger runs. For example, a `monthly` property with a `weekday` value of `Sunday` means every Sunday of the month.
        :param pulumi.Input[int] week: The occurrence of the specified day during the month. For example, a `monthly` property with `weekday` and `week` values of `Sunday, -1` means the last Sunday of the month.
        """
        TriggerScheduleScheduleMonthlyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            weekday=weekday,
            week=week,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             weekday: pulumi.Input[str],
             week: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("weekday", weekday)
        if week is not None:
            _setter("week", week)

    @property
    @pulumi.getter
    def weekday(self) -> pulumi.Input[str]:
        """
        The day of the week on which the trigger runs. For example, a `monthly` property with a `weekday` value of `Sunday` means every Sunday of the month.
        """
        return pulumi.get(self, "weekday")

    @weekday.setter
    def weekday(self, value: pulumi.Input[str]):
        pulumi.set(self, "weekday", value)

    @property
    @pulumi.getter
    def week(self) -> Optional[pulumi.Input[int]]:
        """
        The occurrence of the specified day during the month. For example, a `monthly` property with `weekday` and `week` values of `Sunday, -1` means the last Sunday of the month.
        """
        return pulumi.get(self, "week")

    @week.setter
    def week(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "week", value)


@pulumi.input_type
class TriggerTumblingWindowPipelineArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The Data Factory Pipeline name that the trigger will act on.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: The Data Factory Pipeline parameters that the trigger will act on.
        """
        TriggerTumblingWindowPipelineArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The Data Factory Pipeline name that the trigger will act on.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The Data Factory Pipeline parameters that the trigger will act on.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class TriggerTumblingWindowRetryArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[int],
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] count: The maximum retry attempts if the pipeline run failed.
        :param pulumi.Input[int] interval: The Interval in seconds between each retry if the pipeline run failed. Defaults to `30`.
        """
        TriggerTumblingWindowRetryArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            count=count,
            interval=interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             count: pulumi.Input[int],
             interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("count", count)
        if interval is not None:
            _setter("interval", interval)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        """
        The maximum retry attempts if the pipeline run failed.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        The Interval in seconds between each retry if the pipeline run failed. Defaults to `30`.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class TriggerTumblingWindowTriggerDependencyArgs:
    def __init__(__self__, *,
                 offset: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 trigger_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] offset: The offset of the dependency trigger. Must be in Timespan format (±hh:mm:ss) and must be a negative offset for a self dependency.
        :param pulumi.Input[str] size: The size of the dependency tumbling window. Must be in Timespan format (hh:mm:ss).
        :param pulumi.Input[str] trigger_name: The dependency trigger name. If not specified, it will use self dependency.
        """
        TriggerTumblingWindowTriggerDependencyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            offset=offset,
            size=size,
            trigger_name=trigger_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             offset: Optional[pulumi.Input[str]] = None,
             size: Optional[pulumi.Input[str]] = None,
             trigger_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if offset is not None:
            _setter("offset", offset)
        if size is not None:
            _setter("size", size)
        if trigger_name is not None:
            _setter("trigger_name", trigger_name)

    @property
    @pulumi.getter
    def offset(self) -> Optional[pulumi.Input[str]]:
        """
        The offset of the dependency trigger. Must be in Timespan format (±hh:mm:ss) and must be a negative offset for a self dependency.
        """
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the dependency tumbling window. Must be in Timespan format (hh:mm:ss).
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="triggerName")
    def trigger_name(self) -> Optional[pulumi.Input[str]]:
        """
        The dependency trigger name. If not specified, it will use self dependency.
        """
        return pulumi.get(self, "trigger_name")

    @trigger_name.setter
    def trigger_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_name", value)


