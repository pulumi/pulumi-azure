# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IntegrationAccountCertificateArgs', 'IntegrationAccountCertificate']

@pulumi.input_type
class IntegrationAccountCertificateArgs:
    def __init__(__self__, *,
                 integration_account_name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 key_vault_key: Optional[pulumi.Input['IntegrationAccountCertificateKeyVaultKeyArgs']] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 public_certificate: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a IntegrationAccountCertificate resource.
        :param pulumi.Input[str] integration_account_name: The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Certificate to be created.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group where the Logic App Integration Account Certificate should exist. Changing this forces a new Logic App Integration Account Certificate to be created.
        :param pulumi.Input['IntegrationAccountCertificateKeyVaultKeyArgs'] key_vault_key: A `key_vault_key` block as documented below.
        :param pulumi.Input[str] metadata: A JSON mapping of any Metadata for this Logic App Integration Account Certificate.
        :param pulumi.Input[str] name: The name which should be used for this Logic App Integration Account Certificate. Changing this forces a new Logic App Integration Account Certificate to be created.
        :param pulumi.Input[str] public_certificate: The public certificate for the Logic App Integration Account Certificate.
        """
        IntegrationAccountCertificateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            integration_account_name=integration_account_name,
            resource_group_name=resource_group_name,
            key_vault_key=key_vault_key,
            metadata=metadata,
            name=name,
            public_certificate=public_certificate,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             integration_account_name: Optional[pulumi.Input[str]] = None,
             resource_group_name: Optional[pulumi.Input[str]] = None,
             key_vault_key: Optional[pulumi.Input['IntegrationAccountCertificateKeyVaultKeyArgs']] = None,
             metadata: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             public_certificate: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if integration_account_name is None and 'integrationAccountName' in kwargs:
            integration_account_name = kwargs['integrationAccountName']
        if integration_account_name is None:
            raise TypeError("Missing 'integration_account_name' argument")
        if resource_group_name is None and 'resourceGroupName' in kwargs:
            resource_group_name = kwargs['resourceGroupName']
        if resource_group_name is None:
            raise TypeError("Missing 'resource_group_name' argument")
        if key_vault_key is None and 'keyVaultKey' in kwargs:
            key_vault_key = kwargs['keyVaultKey']
        if public_certificate is None and 'publicCertificate' in kwargs:
            public_certificate = kwargs['publicCertificate']

        _setter("integration_account_name", integration_account_name)
        _setter("resource_group_name", resource_group_name)
        if key_vault_key is not None:
            _setter("key_vault_key", key_vault_key)
        if metadata is not None:
            _setter("metadata", metadata)
        if name is not None:
            _setter("name", name)
        if public_certificate is not None:
            _setter("public_certificate", public_certificate)

    @property
    @pulumi.getter(name="integrationAccountName")
    def integration_account_name(self) -> pulumi.Input[str]:
        """
        The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Certificate to be created.
        """
        return pulumi.get(self, "integration_account_name")

    @integration_account_name.setter
    def integration_account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_account_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the Resource Group where the Logic App Integration Account Certificate should exist. Changing this forces a new Logic App Integration Account Certificate to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="keyVaultKey")
    def key_vault_key(self) -> Optional[pulumi.Input['IntegrationAccountCertificateKeyVaultKeyArgs']]:
        """
        A `key_vault_key` block as documented below.
        """
        return pulumi.get(self, "key_vault_key")

    @key_vault_key.setter
    def key_vault_key(self, value: Optional[pulumi.Input['IntegrationAccountCertificateKeyVaultKeyArgs']]):
        pulumi.set(self, "key_vault_key", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[str]]:
        """
        A JSON mapping of any Metadata for this Logic App Integration Account Certificate.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name which should be used for this Logic App Integration Account Certificate. Changing this forces a new Logic App Integration Account Certificate to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="publicCertificate")
    def public_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        The public certificate for the Logic App Integration Account Certificate.
        """
        return pulumi.get(self, "public_certificate")

    @public_certificate.setter
    def public_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_certificate", value)


@pulumi.input_type
class _IntegrationAccountCertificateState:
    def __init__(__self__, *,
                 integration_account_name: Optional[pulumi.Input[str]] = None,
                 key_vault_key: Optional[pulumi.Input['IntegrationAccountCertificateKeyVaultKeyArgs']] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 public_certificate: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering IntegrationAccountCertificate resources.
        :param pulumi.Input[str] integration_account_name: The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Certificate to be created.
        :param pulumi.Input['IntegrationAccountCertificateKeyVaultKeyArgs'] key_vault_key: A `key_vault_key` block as documented below.
        :param pulumi.Input[str] metadata: A JSON mapping of any Metadata for this Logic App Integration Account Certificate.
        :param pulumi.Input[str] name: The name which should be used for this Logic App Integration Account Certificate. Changing this forces a new Logic App Integration Account Certificate to be created.
        :param pulumi.Input[str] public_certificate: The public certificate for the Logic App Integration Account Certificate.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group where the Logic App Integration Account Certificate should exist. Changing this forces a new Logic App Integration Account Certificate to be created.
        """
        _IntegrationAccountCertificateState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            integration_account_name=integration_account_name,
            key_vault_key=key_vault_key,
            metadata=metadata,
            name=name,
            public_certificate=public_certificate,
            resource_group_name=resource_group_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             integration_account_name: Optional[pulumi.Input[str]] = None,
             key_vault_key: Optional[pulumi.Input['IntegrationAccountCertificateKeyVaultKeyArgs']] = None,
             metadata: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             public_certificate: Optional[pulumi.Input[str]] = None,
             resource_group_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if integration_account_name is None and 'integrationAccountName' in kwargs:
            integration_account_name = kwargs['integrationAccountName']
        if key_vault_key is None and 'keyVaultKey' in kwargs:
            key_vault_key = kwargs['keyVaultKey']
        if public_certificate is None and 'publicCertificate' in kwargs:
            public_certificate = kwargs['publicCertificate']
        if resource_group_name is None and 'resourceGroupName' in kwargs:
            resource_group_name = kwargs['resourceGroupName']

        if integration_account_name is not None:
            _setter("integration_account_name", integration_account_name)
        if key_vault_key is not None:
            _setter("key_vault_key", key_vault_key)
        if metadata is not None:
            _setter("metadata", metadata)
        if name is not None:
            _setter("name", name)
        if public_certificate is not None:
            _setter("public_certificate", public_certificate)
        if resource_group_name is not None:
            _setter("resource_group_name", resource_group_name)

    @property
    @pulumi.getter(name="integrationAccountName")
    def integration_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Certificate to be created.
        """
        return pulumi.get(self, "integration_account_name")

    @integration_account_name.setter
    def integration_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integration_account_name", value)

    @property
    @pulumi.getter(name="keyVaultKey")
    def key_vault_key(self) -> Optional[pulumi.Input['IntegrationAccountCertificateKeyVaultKeyArgs']]:
        """
        A `key_vault_key` block as documented below.
        """
        return pulumi.get(self, "key_vault_key")

    @key_vault_key.setter
    def key_vault_key(self, value: Optional[pulumi.Input['IntegrationAccountCertificateKeyVaultKeyArgs']]):
        pulumi.set(self, "key_vault_key", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[str]]:
        """
        A JSON mapping of any Metadata for this Logic App Integration Account Certificate.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name which should be used for this Logic App Integration Account Certificate. Changing this forces a new Logic App Integration Account Certificate to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="publicCertificate")
    def public_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        The public certificate for the Logic App Integration Account Certificate.
        """
        return pulumi.get(self, "public_certificate")

    @public_certificate.setter
    def public_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_certificate", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Resource Group where the Logic App Integration Account Certificate should exist. Changing this forces a new Logic App Integration Account Certificate to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)


class IntegrationAccountCertificate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 integration_account_name: Optional[pulumi.Input[str]] = None,
                 key_vault_key: Optional[pulumi.Input[pulumi.InputType['IntegrationAccountCertificateKeyVaultKeyArgs']]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 public_certificate: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a Logic App Integration Account Certificate.

        ## Import

        Logic App Integration Account Certificates can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:logicapps/integrationAccountCertificate:IntegrationAccountCertificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Logic/integrationAccounts/account1/certificates/certificate1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] integration_account_name: The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Certificate to be created.
        :param pulumi.Input[pulumi.InputType['IntegrationAccountCertificateKeyVaultKeyArgs']] key_vault_key: A `key_vault_key` block as documented below.
        :param pulumi.Input[str] metadata: A JSON mapping of any Metadata for this Logic App Integration Account Certificate.
        :param pulumi.Input[str] name: The name which should be used for this Logic App Integration Account Certificate. Changing this forces a new Logic App Integration Account Certificate to be created.
        :param pulumi.Input[str] public_certificate: The public certificate for the Logic App Integration Account Certificate.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group where the Logic App Integration Account Certificate should exist. Changing this forces a new Logic App Integration Account Certificate to be created.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IntegrationAccountCertificateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Logic App Integration Account Certificate.

        ## Import

        Logic App Integration Account Certificates can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:logicapps/integrationAccountCertificate:IntegrationAccountCertificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Logic/integrationAccounts/account1/certificates/certificate1
        ```

        :param str resource_name: The name of the resource.
        :param IntegrationAccountCertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IntegrationAccountCertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            IntegrationAccountCertificateArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 integration_account_name: Optional[pulumi.Input[str]] = None,
                 key_vault_key: Optional[pulumi.Input[pulumi.InputType['IntegrationAccountCertificateKeyVaultKeyArgs']]] = None,
                 metadata: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 public_certificate: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IntegrationAccountCertificateArgs.__new__(IntegrationAccountCertificateArgs)

            if integration_account_name is None and not opts.urn:
                raise TypeError("Missing required property 'integration_account_name'")
            __props__.__dict__["integration_account_name"] = integration_account_name
            key_vault_key = _utilities.configure(key_vault_key, IntegrationAccountCertificateKeyVaultKeyArgs, True)
            __props__.__dict__["key_vault_key"] = key_vault_key
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["name"] = name
            __props__.__dict__["public_certificate"] = public_certificate
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
        super(IntegrationAccountCertificate, __self__).__init__(
            'azure:logicapps/integrationAccountCertificate:IntegrationAccountCertificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            integration_account_name: Optional[pulumi.Input[str]] = None,
            key_vault_key: Optional[pulumi.Input[pulumi.InputType['IntegrationAccountCertificateKeyVaultKeyArgs']]] = None,
            metadata: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            public_certificate: Optional[pulumi.Input[str]] = None,
            resource_group_name: Optional[pulumi.Input[str]] = None) -> 'IntegrationAccountCertificate':
        """
        Get an existing IntegrationAccountCertificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] integration_account_name: The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Certificate to be created.
        :param pulumi.Input[pulumi.InputType['IntegrationAccountCertificateKeyVaultKeyArgs']] key_vault_key: A `key_vault_key` block as documented below.
        :param pulumi.Input[str] metadata: A JSON mapping of any Metadata for this Logic App Integration Account Certificate.
        :param pulumi.Input[str] name: The name which should be used for this Logic App Integration Account Certificate. Changing this forces a new Logic App Integration Account Certificate to be created.
        :param pulumi.Input[str] public_certificate: The public certificate for the Logic App Integration Account Certificate.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group where the Logic App Integration Account Certificate should exist. Changing this forces a new Logic App Integration Account Certificate to be created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IntegrationAccountCertificateState.__new__(_IntegrationAccountCertificateState)

        __props__.__dict__["integration_account_name"] = integration_account_name
        __props__.__dict__["key_vault_key"] = key_vault_key
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["name"] = name
        __props__.__dict__["public_certificate"] = public_certificate
        __props__.__dict__["resource_group_name"] = resource_group_name
        return IntegrationAccountCertificate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="integrationAccountName")
    def integration_account_name(self) -> pulumi.Output[str]:
        """
        The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Certificate to be created.
        """
        return pulumi.get(self, "integration_account_name")

    @property
    @pulumi.getter(name="keyVaultKey")
    def key_vault_key(self) -> pulumi.Output[Optional['outputs.IntegrationAccountCertificateKeyVaultKey']]:
        """
        A `key_vault_key` block as documented below.
        """
        return pulumi.get(self, "key_vault_key")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional[str]]:
        """
        A JSON mapping of any Metadata for this Logic App Integration Account Certificate.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name which should be used for this Logic App Integration Account Certificate. Changing this forces a new Logic App Integration Account Certificate to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="publicCertificate")
    def public_certificate(self) -> pulumi.Output[Optional[str]]:
        """
        The public certificate for the Logic App Integration Account Certificate.
        """
        return pulumi.get(self, "public_certificate")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[str]:
        """
        The name of the Resource Group where the Logic App Integration Account Certificate should exist. Changing this forces a new Logic App Integration Account Certificate to be created.
        """
        return pulumi.get(self, "resource_group_name")

