# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ActionHttpRunAfterArgs',
    'IntegrationAccountAgreementGuestIdentityArgs',
    'IntegrationAccountAgreementHostIdentityArgs',
    'IntegrationAccountBatchConfigurationReleaseCriteriaArgs',
    'IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceArgs',
    'IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleArgs',
    'IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleMonthlyArgs',
    'IntegrationAccountCertificateKeyVaultKeyArgs',
    'IntegrationAccountPartnerBusinessIdentityArgs',
    'StandardConnectionStringArgs',
    'StandardIdentityArgs',
    'StandardSiteConfigArgs',
    'StandardSiteConfigCorsArgs',
    'StandardSiteConfigIpRestrictionArgs',
    'StandardSiteConfigIpRestrictionHeadersArgs',
    'StandardSiteConfigScmIpRestrictionArgs',
    'StandardSiteConfigScmIpRestrictionHeadersArgs',
    'StandardSiteCredentialArgs',
    'TriggerRecurrenceScheduleArgs',
    'WorkflowAccessControlArgs',
    'WorkflowAccessControlActionArgs',
    'WorkflowAccessControlContentArgs',
    'WorkflowAccessControlTriggerArgs',
    'WorkflowAccessControlTriggerOpenAuthenticationPolicyArgs',
    'WorkflowAccessControlTriggerOpenAuthenticationPolicyClaimArgs',
    'WorkflowAccessControlWorkflowManagementArgs',
    'WorkflowIdentityArgs',
    'GetStandardSiteConfigArgs',
    'GetStandardSiteConfigCorsArgs',
    'GetStandardSiteConfigIpRestrictionArgs',
    'GetStandardSiteConfigIpRestrictionHeadersArgs',
    'GetStandardSiteConfigScmIpRestrictionArgs',
    'GetStandardSiteConfigScmIpRestrictionHeadersArgs',
]

@pulumi.input_type
class ActionHttpRunAfterArgs:
    def __init__(__self__, *,
                 action_name: pulumi.Input[str],
                 action_result: pulumi.Input[str]):
        """
        :param pulumi.Input[str] action_name: Specifies the name of the precedent HTTP Action.
        :param pulumi.Input[str] action_result: Specifies the expected result of the precedent HTTP Action, only after which the current HTTP Action will be triggered. Possible values include `Succeeded`, `Failed`, `Skipped` and `TimedOut`.
        """
        ActionHttpRunAfterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action_name=action_name,
            action_result=action_result,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action_name: pulumi.Input[str],
             action_result: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action_name", action_name)
        _setter("action_result", action_result)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> pulumi.Input[str]:
        """
        Specifies the name of the precedent HTTP Action.
        """
        return pulumi.get(self, "action_name")

    @action_name.setter
    def action_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_name", value)

    @property
    @pulumi.getter(name="actionResult")
    def action_result(self) -> pulumi.Input[str]:
        """
        Specifies the expected result of the precedent HTTP Action, only after which the current HTTP Action will be triggered. Possible values include `Succeeded`, `Failed`, `Skipped` and `TimedOut`.
        """
        return pulumi.get(self, "action_result")

    @action_result.setter
    def action_result(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_result", value)


@pulumi.input_type
class IntegrationAccountAgreementGuestIdentityArgs:
    def __init__(__self__, *,
                 qualifier: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] qualifier: The authenticating body that provides unique guest identities to organizations.
        :param pulumi.Input[str] value: The value that identifies the documents that your logic apps receive.
        """
        IntegrationAccountAgreementGuestIdentityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            qualifier=qualifier,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             qualifier: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("qualifier", qualifier)
        _setter("value", value)

    @property
    @pulumi.getter
    def qualifier(self) -> pulumi.Input[str]:
        """
        The authenticating body that provides unique guest identities to organizations.
        """
        return pulumi.get(self, "qualifier")

    @qualifier.setter
    def qualifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "qualifier", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value that identifies the documents that your logic apps receive.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationAccountAgreementHostIdentityArgs:
    def __init__(__self__, *,
                 qualifier: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] qualifier: The authenticating body that provides unique host identities to organizations.
        :param pulumi.Input[str] value: The value that identifies the documents that your logic apps receive.
        """
        IntegrationAccountAgreementHostIdentityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            qualifier=qualifier,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             qualifier: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("qualifier", qualifier)
        _setter("value", value)

    @property
    @pulumi.getter
    def qualifier(self) -> pulumi.Input[str]:
        """
        The authenticating body that provides unique host identities to organizations.
        """
        return pulumi.get(self, "qualifier")

    @qualifier.setter
    def qualifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "qualifier", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value that identifies the documents that your logic apps receive.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationAccountBatchConfigurationReleaseCriteriaArgs:
    def __init__(__self__, *,
                 batch_size: Optional[pulumi.Input[int]] = None,
                 message_count: Optional[pulumi.Input[int]] = None,
                 recurrence: Optional[pulumi.Input['IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceArgs']] = None):
        """
        :param pulumi.Input[int] batch_size: The batch size in bytes for the Logic App Integration Batch Configuration.
        :param pulumi.Input[int] message_count: The message count for the Logic App Integration Batch Configuration.
        :param pulumi.Input['IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceArgs'] recurrence: A `recurrence` block as documented below.
        """
        IntegrationAccountBatchConfigurationReleaseCriteriaArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            batch_size=batch_size,
            message_count=message_count,
            recurrence=recurrence,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             batch_size: Optional[pulumi.Input[int]] = None,
             message_count: Optional[pulumi.Input[int]] = None,
             recurrence: Optional[pulumi.Input['IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if batch_size is not None:
            _setter("batch_size", batch_size)
        if message_count is not None:
            _setter("message_count", message_count)
        if recurrence is not None:
            _setter("recurrence", recurrence)

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[pulumi.Input[int]]:
        """
        The batch size in bytes for the Logic App Integration Batch Configuration.
        """
        return pulumi.get(self, "batch_size")

    @batch_size.setter
    def batch_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batch_size", value)

    @property
    @pulumi.getter(name="messageCount")
    def message_count(self) -> Optional[pulumi.Input[int]]:
        """
        The message count for the Logic App Integration Batch Configuration.
        """
        return pulumi.get(self, "message_count")

    @message_count.setter
    def message_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "message_count", value)

    @property
    @pulumi.getter
    def recurrence(self) -> Optional[pulumi.Input['IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceArgs']]:
        """
        A `recurrence` block as documented below.
        """
        return pulumi.get(self, "recurrence")

    @recurrence.setter
    def recurrence(self, value: Optional[pulumi.Input['IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceArgs']]):
        pulumi.set(self, "recurrence", value)


@pulumi.input_type
class IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceArgs:
    def __init__(__self__, *,
                 frequency: pulumi.Input[str],
                 interval: pulumi.Input[int],
                 end_time: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input['IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleArgs']] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] frequency: The frequency of the schedule. Possible values are `Day`, `Hour`, `Minute`, `Month`, `NotSpecified`, `Second`, `Week` and `Year`.
        :param pulumi.Input[int] interval: The number of `frequency`s between runs.
        :param pulumi.Input[str] end_time: The end time of the schedule, formatted as an RFC3339 string.
        :param pulumi.Input['IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleArgs'] schedule: A `schedule` block as documented below.
        :param pulumi.Input[str] start_time: The start time of the schedule, formatted as an RFC3339 string.
        :param pulumi.Input[str] time_zone: The timezone of the start/end time.
        """
        IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            frequency=frequency,
            interval=interval,
            end_time=end_time,
            schedule=schedule,
            start_time=start_time,
            time_zone=time_zone,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             frequency: pulumi.Input[str],
             interval: pulumi.Input[int],
             end_time: Optional[pulumi.Input[str]] = None,
             schedule: Optional[pulumi.Input['IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleArgs']] = None,
             start_time: Optional[pulumi.Input[str]] = None,
             time_zone: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("frequency", frequency)
        _setter("interval", interval)
        if end_time is not None:
            _setter("end_time", end_time)
        if schedule is not None:
            _setter("schedule", schedule)
        if start_time is not None:
            _setter("start_time", start_time)
        if time_zone is not None:
            _setter("time_zone", time_zone)

    @property
    @pulumi.getter
    def frequency(self) -> pulumi.Input[str]:
        """
        The frequency of the schedule. Possible values are `Day`, `Hour`, `Minute`, `Month`, `NotSpecified`, `Second`, `Week` and `Year`.
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: pulumi.Input[str]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter
    def interval(self) -> pulumi.Input[int]:
        """
        The number of `frequency`s between runs.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: pulumi.Input[int]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        """
        The end time of the schedule, formatted as an RFC3339 string.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input['IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleArgs']]:
        """
        A `schedule` block as documented below.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input['IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleArgs']]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        The start time of the schedule, formatted as an RFC3339 string.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The timezone of the start/end time.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleArgs:
    def __init__(__self__, *,
                 hours: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 minutes: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 month_days: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 monthlies: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleMonthlyArgs']]]] = None,
                 week_days: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] hours: A list containing a single item, which specifies the Hour interval at which this recurrence should be triggered.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] minutes: A list containing a single item which specifies the Minute interval at which this recurrence should be triggered.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] month_days: A list of days of the month that the job should execute on.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleMonthlyArgs']]] monthlies: A `monthly` block as documented below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] week_days: A list of days of the week that the job should execute on. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
        """
        IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hours=hours,
            minutes=minutes,
            month_days=month_days,
            monthlies=monthlies,
            week_days=week_days,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hours: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             minutes: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             month_days: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             monthlies: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleMonthlyArgs']]]] = None,
             week_days: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if hours is not None:
            _setter("hours", hours)
        if minutes is not None:
            _setter("minutes", minutes)
        if month_days is not None:
            _setter("month_days", month_days)
        if monthlies is not None:
            _setter("monthlies", monthlies)
        if week_days is not None:
            _setter("week_days", week_days)

    @property
    @pulumi.getter
    def hours(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list containing a single item, which specifies the Hour interval at which this recurrence should be triggered.
        """
        return pulumi.get(self, "hours")

    @hours.setter
    def hours(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "hours", value)

    @property
    @pulumi.getter
    def minutes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list containing a single item which specifies the Minute interval at which this recurrence should be triggered.
        """
        return pulumi.get(self, "minutes")

    @minutes.setter
    def minutes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "minutes", value)

    @property
    @pulumi.getter(name="monthDays")
    def month_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of days of the month that the job should execute on.
        """
        return pulumi.get(self, "month_days")

    @month_days.setter
    def month_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "month_days", value)

    @property
    @pulumi.getter
    def monthlies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleMonthlyArgs']]]]:
        """
        A `monthly` block as documented below.
        """
        return pulumi.get(self, "monthlies")

    @monthlies.setter
    def monthlies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleMonthlyArgs']]]]):
        pulumi.set(self, "monthlies", value)

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of days of the week that the job should execute on. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
        """
        return pulumi.get(self, "week_days")

    @week_days.setter
    def week_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "week_days", value)


@pulumi.input_type
class IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleMonthlyArgs:
    def __init__(__self__, *,
                 week: pulumi.Input[int],
                 weekday: pulumi.Input[str]):
        """
        :param pulumi.Input[int] week: The occurrence of the week within the month.
        :param pulumi.Input[str] weekday: The day of the occurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
        """
        IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleMonthlyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            week=week,
            weekday=weekday,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             week: pulumi.Input[int],
             weekday: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("week", week)
        _setter("weekday", weekday)

    @property
    @pulumi.getter
    def week(self) -> pulumi.Input[int]:
        """
        The occurrence of the week within the month.
        """
        return pulumi.get(self, "week")

    @week.setter
    def week(self, value: pulumi.Input[int]):
        pulumi.set(self, "week", value)

    @property
    @pulumi.getter
    def weekday(self) -> pulumi.Input[str]:
        """
        The day of the occurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
        """
        return pulumi.get(self, "weekday")

    @weekday.setter
    def weekday(self, value: pulumi.Input[str]):
        pulumi.set(self, "weekday", value)


@pulumi.input_type
class IntegrationAccountCertificateKeyVaultKeyArgs:
    def __init__(__self__, *,
                 key_name: pulumi.Input[str],
                 key_vault_id: pulumi.Input[str],
                 key_version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key_name: The name of Key Vault Key.
        :param pulumi.Input[str] key_vault_id: The ID of the Key Vault.
        :param pulumi.Input[str] key_version: The version of Key Vault Key.
        """
        IntegrationAccountCertificateKeyVaultKeyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_name=key_name,
            key_vault_id=key_vault_id,
            key_version=key_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_name: pulumi.Input[str],
             key_vault_id: pulumi.Input[str],
             key_version: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key_name", key_name)
        _setter("key_vault_id", key_vault_id)
        if key_version is not None:
            _setter("key_version", key_version)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> pulumi.Input[str]:
        """
        The name of Key Vault Key.
        """
        return pulumi.get(self, "key_name")

    @key_name.setter
    def key_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_name", value)

    @property
    @pulumi.getter(name="keyVaultId")
    def key_vault_id(self) -> pulumi.Input[str]:
        """
        The ID of the Key Vault.
        """
        return pulumi.get(self, "key_vault_id")

    @key_vault_id.setter
    def key_vault_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_vault_id", value)

    @property
    @pulumi.getter(name="keyVersion")
    def key_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of Key Vault Key.
        """
        return pulumi.get(self, "key_version")

    @key_version.setter
    def key_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_version", value)


@pulumi.input_type
class IntegrationAccountPartnerBusinessIdentityArgs:
    def __init__(__self__, *,
                 qualifier: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] qualifier: The authenticating body that provides unique business identities to organizations.
        :param pulumi.Input[str] value: The value that identifies the documents that your logic apps receive.
        """
        IntegrationAccountPartnerBusinessIdentityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            qualifier=qualifier,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             qualifier: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("qualifier", qualifier)
        _setter("value", value)

    @property
    @pulumi.getter
    def qualifier(self) -> pulumi.Input[str]:
        """
        The authenticating body that provides unique business identities to organizations.
        """
        return pulumi.get(self, "qualifier")

    @qualifier.setter
    def qualifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "qualifier", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value that identifies the documents that your logic apps receive.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class StandardConnectionStringArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the Connection String.
        :param pulumi.Input[str] type: The type of the Connection String. Possible values are `APIHub`, `Custom`, `DocDb`, `EventHub`, `MySQL`, `NotificationHub`, `PostgreSQL`, `RedisCache`, `ServiceBus`, `SQLAzure` and `SQLServer`.
        :param pulumi.Input[str] value: The value for the Connection String.
        """
        StandardConnectionStringArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            type=type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             type: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("type", type)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the Connection String.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of the Connection String. Possible values are `APIHub`, `Custom`, `DocDb`, `EventHub`, `MySQL`, `NotificationHub`, `PostgreSQL`, `RedisCache`, `ServiceBus`, `SQLAzure` and `SQLServer`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the Connection String.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class StandardIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 identity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 principal_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: Specifies the type of Managed Service Identity that should be configured on this Logic App Standard. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned` (to enable both).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] identity_ids: Specifies a list of User Assigned Managed Identity IDs to be assigned to this Logic App Standard.
               
               > **NOTE:** When `type` is set to `SystemAssigned`, The assigned `principal_id` and `tenant_id` can be retrieved after the Logic App has been created. More details are available below.
               
               > **NOTE:** The `identity_ids` is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
        :param pulumi.Input[str] principal_id: The Principal ID for the Service Principal associated with the Managed Service Identity of this App Service.
        :param pulumi.Input[str] tenant_id: The Tenant ID for the Service Principal associated with the Managed Service Identity of this App Service.
        """
        StandardIdentityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            identity_ids=identity_ids,
            principal_id=principal_id,
            tenant_id=tenant_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input[str],
             identity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             principal_id: Optional[pulumi.Input[str]] = None,
             tenant_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if identity_ids is not None:
            _setter("identity_ids", identity_ids)
        if principal_id is not None:
            _setter("principal_id", principal_id)
        if tenant_id is not None:
            _setter("tenant_id", tenant_id)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Specifies the type of Managed Service Identity that should be configured on this Logic App Standard. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned` (to enable both).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies a list of User Assigned Managed Identity IDs to be assigned to this Logic App Standard.

        > **NOTE:** When `type` is set to `SystemAssigned`, The assigned `principal_id` and `tenant_id` can be retrieved after the Logic App has been created. More details are available below.

        > **NOTE:** The `identity_ids` is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
        """
        return pulumi.get(self, "identity_ids")

    @identity_ids.setter
    def identity_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "identity_ids", value)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Principal ID for the Service Principal associated with the Managed Service Identity of this App Service.
        """
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Tenant ID for the Service Principal associated with the Managed Service Identity of this App Service.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class StandardSiteConfigArgs:
    def __init__(__self__, *,
                 always_on: Optional[pulumi.Input[bool]] = None,
                 app_scale_limit: Optional[pulumi.Input[int]] = None,
                 auto_swap_slot_name: Optional[pulumi.Input[str]] = None,
                 cors: Optional[pulumi.Input['StandardSiteConfigCorsArgs']] = None,
                 dotnet_framework_version: Optional[pulumi.Input[str]] = None,
                 elastic_instance_minimum: Optional[pulumi.Input[int]] = None,
                 ftps_state: Optional[pulumi.Input[str]] = None,
                 health_check_path: Optional[pulumi.Input[str]] = None,
                 http2_enabled: Optional[pulumi.Input[bool]] = None,
                 ip_restrictions: Optional[pulumi.Input[Sequence[pulumi.Input['StandardSiteConfigIpRestrictionArgs']]]] = None,
                 linux_fx_version: Optional[pulumi.Input[str]] = None,
                 min_tls_version: Optional[pulumi.Input[str]] = None,
                 pre_warmed_instance_count: Optional[pulumi.Input[int]] = None,
                 runtime_scale_monitoring_enabled: Optional[pulumi.Input[bool]] = None,
                 scm_ip_restrictions: Optional[pulumi.Input[Sequence[pulumi.Input['StandardSiteConfigScmIpRestrictionArgs']]]] = None,
                 scm_min_tls_version: Optional[pulumi.Input[str]] = None,
                 scm_type: Optional[pulumi.Input[str]] = None,
                 scm_use_main_ip_restriction: Optional[pulumi.Input[bool]] = None,
                 use32_bit_worker_process: Optional[pulumi.Input[bool]] = None,
                 vnet_route_all_enabled: Optional[pulumi.Input[bool]] = None,
                 websockets_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] always_on: Should the Logic App be loaded at all times? Defaults to `false`.
        :param pulumi.Input[int] app_scale_limit: The number of workers this Logic App can scale out to. Only applicable to apps on the Consumption and Premium plan.
        :param pulumi.Input[str] auto_swap_slot_name: The Auto-swap slot name.
        :param pulumi.Input['StandardSiteConfigCorsArgs'] cors: A `cors` block as defined below.
        :param pulumi.Input[str] dotnet_framework_version: The version of the .NET framework's CLR used in this Logic App Possible values are `v4.0` (including .NET Core 2.1 and 3.1), `v5.0` and `v6.0`. [For more information on which .NET Framework version to use based on the runtime version you're targeting - please see this table](https://docs.microsoft.com/azure/azure-functions/functions-dotnet-class-library#supported-versions). Defaults to `v4.0`.
        :param pulumi.Input[int] elastic_instance_minimum: The number of minimum instances for this Logic App Only affects apps on the Premium plan.
        :param pulumi.Input[str] ftps_state: State of FTP / FTPS service for this Logic App Possible values include: `AllAllowed`, `FtpsOnly` and `Disabled`. Defaults to `AllAllowed`.
        :param pulumi.Input[str] health_check_path: Path which will be checked for this Logic App health.
        :param pulumi.Input[bool] http2_enabled: Specifies whether or not the HTTP2 protocol should be enabled. Defaults to `false`.
        :param pulumi.Input[Sequence[pulumi.Input['StandardSiteConfigIpRestrictionArgs']]] ip_restrictions: A [List of objects](https://www.terraform.io/docs/configuration/attr-as-blocks.html) representing IP restrictions as defined below.
               
               > **NOTE** User has to explicitly set `ip_restriction` to empty slice (`[]`) to remove it.
        :param pulumi.Input[str] linux_fx_version: Linux App Framework and version for the AppService, e.g. `DOCKER|(golang:latest)`. Setting this value will also set the `kind` of application deployed to `functionapp,linux,container,workflowapp`
        :param pulumi.Input[str] min_tls_version: The minimum supported TLS version for the Logic App Possible values are `1.0`, `1.1`, and `1.2`. Defaults to `1.2` for new Logic Apps.
        :param pulumi.Input[int] pre_warmed_instance_count: The number of pre-warmed instances for this Logic App Only affects apps on the Premium plan.
        :param pulumi.Input[bool] runtime_scale_monitoring_enabled: Should Runtime Scale Monitoring be enabled?. Only applicable to apps on the Premium plan. Defaults to `false`.
        :param pulumi.Input[Sequence[pulumi.Input['StandardSiteConfigScmIpRestrictionArgs']]] scm_ip_restrictions: A [List of objects](https://www.terraform.io/docs/configuration/attr-as-blocks.html) representing SCM IP restrictions as defined below.
               
               > **NOTE** User has to explicitly set `scm_ip_restriction` to empty slice (`[]`) to remove it.
        :param pulumi.Input[str] scm_min_tls_version: Configures the minimum version of TLS required for SSL requests to the SCM site. Possible values are `1.0`, `1.1` and `1.2`.
        :param pulumi.Input[str] scm_type: The type of Source Control used by the Logic App in use by the Windows Function App. Defaults to `None`. Possible values are: `BitbucketGit`, `BitbucketHg`, `CodePlexGit`, `CodePlexHg`, `Dropbox`, `ExternalGit`, `ExternalHg`, `GitHub`, `LocalGit`, `None`, `OneDrive`, `Tfs`, `VSO`, and `VSTSRM`
        :param pulumi.Input[bool] scm_use_main_ip_restriction: Should the Logic App `ip_restriction` configuration be used for the SCM too. Defaults to `false`.
        :param pulumi.Input[bool] use32_bit_worker_process: Should the Logic App run in 32 bit mode, rather than 64 bit mode? Defaults to `true`.
               
               > **Note:** when using an App Service Plan in the `Free` or `Shared` Tiers `use_32_bit_worker_process` must be set to `true`.
        :param pulumi.Input[bool] vnet_route_all_enabled: Should all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied.
        :param pulumi.Input[bool] websockets_enabled: Should WebSockets be enabled?
        """
        StandardSiteConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            always_on=always_on,
            app_scale_limit=app_scale_limit,
            auto_swap_slot_name=auto_swap_slot_name,
            cors=cors,
            dotnet_framework_version=dotnet_framework_version,
            elastic_instance_minimum=elastic_instance_minimum,
            ftps_state=ftps_state,
            health_check_path=health_check_path,
            http2_enabled=http2_enabled,
            ip_restrictions=ip_restrictions,
            linux_fx_version=linux_fx_version,
            min_tls_version=min_tls_version,
            pre_warmed_instance_count=pre_warmed_instance_count,
            runtime_scale_monitoring_enabled=runtime_scale_monitoring_enabled,
            scm_ip_restrictions=scm_ip_restrictions,
            scm_min_tls_version=scm_min_tls_version,
            scm_type=scm_type,
            scm_use_main_ip_restriction=scm_use_main_ip_restriction,
            use32_bit_worker_process=use32_bit_worker_process,
            vnet_route_all_enabled=vnet_route_all_enabled,
            websockets_enabled=websockets_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             always_on: Optional[pulumi.Input[bool]] = None,
             app_scale_limit: Optional[pulumi.Input[int]] = None,
             auto_swap_slot_name: Optional[pulumi.Input[str]] = None,
             cors: Optional[pulumi.Input['StandardSiteConfigCorsArgs']] = None,
             dotnet_framework_version: Optional[pulumi.Input[str]] = None,
             elastic_instance_minimum: Optional[pulumi.Input[int]] = None,
             ftps_state: Optional[pulumi.Input[str]] = None,
             health_check_path: Optional[pulumi.Input[str]] = None,
             http2_enabled: Optional[pulumi.Input[bool]] = None,
             ip_restrictions: Optional[pulumi.Input[Sequence[pulumi.Input['StandardSiteConfigIpRestrictionArgs']]]] = None,
             linux_fx_version: Optional[pulumi.Input[str]] = None,
             min_tls_version: Optional[pulumi.Input[str]] = None,
             pre_warmed_instance_count: Optional[pulumi.Input[int]] = None,
             runtime_scale_monitoring_enabled: Optional[pulumi.Input[bool]] = None,
             scm_ip_restrictions: Optional[pulumi.Input[Sequence[pulumi.Input['StandardSiteConfigScmIpRestrictionArgs']]]] = None,
             scm_min_tls_version: Optional[pulumi.Input[str]] = None,
             scm_type: Optional[pulumi.Input[str]] = None,
             scm_use_main_ip_restriction: Optional[pulumi.Input[bool]] = None,
             use32_bit_worker_process: Optional[pulumi.Input[bool]] = None,
             vnet_route_all_enabled: Optional[pulumi.Input[bool]] = None,
             websockets_enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if always_on is not None:
            _setter("always_on", always_on)
        if app_scale_limit is not None:
            _setter("app_scale_limit", app_scale_limit)
        if auto_swap_slot_name is not None:
            _setter("auto_swap_slot_name", auto_swap_slot_name)
        if cors is not None:
            _setter("cors", cors)
        if dotnet_framework_version is not None:
            _setter("dotnet_framework_version", dotnet_framework_version)
        if elastic_instance_minimum is not None:
            _setter("elastic_instance_minimum", elastic_instance_minimum)
        if ftps_state is not None:
            _setter("ftps_state", ftps_state)
        if health_check_path is not None:
            _setter("health_check_path", health_check_path)
        if http2_enabled is not None:
            _setter("http2_enabled", http2_enabled)
        if ip_restrictions is not None:
            _setter("ip_restrictions", ip_restrictions)
        if linux_fx_version is not None:
            _setter("linux_fx_version", linux_fx_version)
        if min_tls_version is not None:
            _setter("min_tls_version", min_tls_version)
        if pre_warmed_instance_count is not None:
            _setter("pre_warmed_instance_count", pre_warmed_instance_count)
        if runtime_scale_monitoring_enabled is not None:
            _setter("runtime_scale_monitoring_enabled", runtime_scale_monitoring_enabled)
        if scm_ip_restrictions is not None:
            _setter("scm_ip_restrictions", scm_ip_restrictions)
        if scm_min_tls_version is not None:
            _setter("scm_min_tls_version", scm_min_tls_version)
        if scm_type is not None:
            _setter("scm_type", scm_type)
        if scm_use_main_ip_restriction is not None:
            _setter("scm_use_main_ip_restriction", scm_use_main_ip_restriction)
        if use32_bit_worker_process is not None:
            _setter("use32_bit_worker_process", use32_bit_worker_process)
        if vnet_route_all_enabled is not None:
            _setter("vnet_route_all_enabled", vnet_route_all_enabled)
        if websockets_enabled is not None:
            _setter("websockets_enabled", websockets_enabled)

    @property
    @pulumi.getter(name="alwaysOn")
    def always_on(self) -> Optional[pulumi.Input[bool]]:
        """
        Should the Logic App be loaded at all times? Defaults to `false`.
        """
        return pulumi.get(self, "always_on")

    @always_on.setter
    def always_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "always_on", value)

    @property
    @pulumi.getter(name="appScaleLimit")
    def app_scale_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The number of workers this Logic App can scale out to. Only applicable to apps on the Consumption and Premium plan.
        """
        return pulumi.get(self, "app_scale_limit")

    @app_scale_limit.setter
    def app_scale_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "app_scale_limit", value)

    @property
    @pulumi.getter(name="autoSwapSlotName")
    def auto_swap_slot_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Auto-swap slot name.
        """
        return pulumi.get(self, "auto_swap_slot_name")

    @auto_swap_slot_name.setter
    def auto_swap_slot_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_swap_slot_name", value)

    @property
    @pulumi.getter
    def cors(self) -> Optional[pulumi.Input['StandardSiteConfigCorsArgs']]:
        """
        A `cors` block as defined below.
        """
        return pulumi.get(self, "cors")

    @cors.setter
    def cors(self, value: Optional[pulumi.Input['StandardSiteConfigCorsArgs']]):
        pulumi.set(self, "cors", value)

    @property
    @pulumi.getter(name="dotnetFrameworkVersion")
    def dotnet_framework_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the .NET framework's CLR used in this Logic App Possible values are `v4.0` (including .NET Core 2.1 and 3.1), `v5.0` and `v6.0`. [For more information on which .NET Framework version to use based on the runtime version you're targeting - please see this table](https://docs.microsoft.com/azure/azure-functions/functions-dotnet-class-library#supported-versions). Defaults to `v4.0`.
        """
        return pulumi.get(self, "dotnet_framework_version")

    @dotnet_framework_version.setter
    def dotnet_framework_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dotnet_framework_version", value)

    @property
    @pulumi.getter(name="elasticInstanceMinimum")
    def elastic_instance_minimum(self) -> Optional[pulumi.Input[int]]:
        """
        The number of minimum instances for this Logic App Only affects apps on the Premium plan.
        """
        return pulumi.get(self, "elastic_instance_minimum")

    @elastic_instance_minimum.setter
    def elastic_instance_minimum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "elastic_instance_minimum", value)

    @property
    @pulumi.getter(name="ftpsState")
    def ftps_state(self) -> Optional[pulumi.Input[str]]:
        """
        State of FTP / FTPS service for this Logic App Possible values include: `AllAllowed`, `FtpsOnly` and `Disabled`. Defaults to `AllAllowed`.
        """
        return pulumi.get(self, "ftps_state")

    @ftps_state.setter
    def ftps_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftps_state", value)

    @property
    @pulumi.getter(name="healthCheckPath")
    def health_check_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path which will be checked for this Logic App health.
        """
        return pulumi.get(self, "health_check_path")

    @health_check_path.setter
    def health_check_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_path", value)

    @property
    @pulumi.getter(name="http2Enabled")
    def http2_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether or not the HTTP2 protocol should be enabled. Defaults to `false`.
        """
        return pulumi.get(self, "http2_enabled")

    @http2_enabled.setter
    def http2_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "http2_enabled", value)

    @property
    @pulumi.getter(name="ipRestrictions")
    def ip_restrictions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StandardSiteConfigIpRestrictionArgs']]]]:
        """
        A [List of objects](https://www.terraform.io/docs/configuration/attr-as-blocks.html) representing IP restrictions as defined below.

        > **NOTE** User has to explicitly set `ip_restriction` to empty slice (`[]`) to remove it.
        """
        return pulumi.get(self, "ip_restrictions")

    @ip_restrictions.setter
    def ip_restrictions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StandardSiteConfigIpRestrictionArgs']]]]):
        pulumi.set(self, "ip_restrictions", value)

    @property
    @pulumi.getter(name="linuxFxVersion")
    def linux_fx_version(self) -> Optional[pulumi.Input[str]]:
        """
        Linux App Framework and version for the AppService, e.g. `DOCKER|(golang:latest)`. Setting this value will also set the `kind` of application deployed to `functionapp,linux,container,workflowapp`
        """
        return pulumi.get(self, "linux_fx_version")

    @linux_fx_version.setter
    def linux_fx_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "linux_fx_version", value)

    @property
    @pulumi.getter(name="minTlsVersion")
    def min_tls_version(self) -> Optional[pulumi.Input[str]]:
        """
        The minimum supported TLS version for the Logic App Possible values are `1.0`, `1.1`, and `1.2`. Defaults to `1.2` for new Logic Apps.
        """
        return pulumi.get(self, "min_tls_version")

    @min_tls_version.setter
    def min_tls_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_tls_version", value)

    @property
    @pulumi.getter(name="preWarmedInstanceCount")
    def pre_warmed_instance_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of pre-warmed instances for this Logic App Only affects apps on the Premium plan.
        """
        return pulumi.get(self, "pre_warmed_instance_count")

    @pre_warmed_instance_count.setter
    def pre_warmed_instance_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pre_warmed_instance_count", value)

    @property
    @pulumi.getter(name="runtimeScaleMonitoringEnabled")
    def runtime_scale_monitoring_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Should Runtime Scale Monitoring be enabled?. Only applicable to apps on the Premium plan. Defaults to `false`.
        """
        return pulumi.get(self, "runtime_scale_monitoring_enabled")

    @runtime_scale_monitoring_enabled.setter
    def runtime_scale_monitoring_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "runtime_scale_monitoring_enabled", value)

    @property
    @pulumi.getter(name="scmIpRestrictions")
    def scm_ip_restrictions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StandardSiteConfigScmIpRestrictionArgs']]]]:
        """
        A [List of objects](https://www.terraform.io/docs/configuration/attr-as-blocks.html) representing SCM IP restrictions as defined below.

        > **NOTE** User has to explicitly set `scm_ip_restriction` to empty slice (`[]`) to remove it.
        """
        return pulumi.get(self, "scm_ip_restrictions")

    @scm_ip_restrictions.setter
    def scm_ip_restrictions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StandardSiteConfigScmIpRestrictionArgs']]]]):
        pulumi.set(self, "scm_ip_restrictions", value)

    @property
    @pulumi.getter(name="scmMinTlsVersion")
    def scm_min_tls_version(self) -> Optional[pulumi.Input[str]]:
        """
        Configures the minimum version of TLS required for SSL requests to the SCM site. Possible values are `1.0`, `1.1` and `1.2`.
        """
        return pulumi.get(self, "scm_min_tls_version")

    @scm_min_tls_version.setter
    def scm_min_tls_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scm_min_tls_version", value)

    @property
    @pulumi.getter(name="scmType")
    def scm_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of Source Control used by the Logic App in use by the Windows Function App. Defaults to `None`. Possible values are: `BitbucketGit`, `BitbucketHg`, `CodePlexGit`, `CodePlexHg`, `Dropbox`, `ExternalGit`, `ExternalHg`, `GitHub`, `LocalGit`, `None`, `OneDrive`, `Tfs`, `VSO`, and `VSTSRM`
        """
        return pulumi.get(self, "scm_type")

    @scm_type.setter
    def scm_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scm_type", value)

    @property
    @pulumi.getter(name="scmUseMainIpRestriction")
    def scm_use_main_ip_restriction(self) -> Optional[pulumi.Input[bool]]:
        """
        Should the Logic App `ip_restriction` configuration be used for the SCM too. Defaults to `false`.
        """
        return pulumi.get(self, "scm_use_main_ip_restriction")

    @scm_use_main_ip_restriction.setter
    def scm_use_main_ip_restriction(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "scm_use_main_ip_restriction", value)

    @property
    @pulumi.getter(name="use32BitWorkerProcess")
    def use32_bit_worker_process(self) -> Optional[pulumi.Input[bool]]:
        """
        Should the Logic App run in 32 bit mode, rather than 64 bit mode? Defaults to `true`.

        > **Note:** when using an App Service Plan in the `Free` or `Shared` Tiers `use_32_bit_worker_process` must be set to `true`.
        """
        return pulumi.get(self, "use32_bit_worker_process")

    @use32_bit_worker_process.setter
    def use32_bit_worker_process(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use32_bit_worker_process", value)

    @property
    @pulumi.getter(name="vnetRouteAllEnabled")
    def vnet_route_all_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Should all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied.
        """
        return pulumi.get(self, "vnet_route_all_enabled")

    @vnet_route_all_enabled.setter
    def vnet_route_all_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vnet_route_all_enabled", value)

    @property
    @pulumi.getter(name="websocketsEnabled")
    def websockets_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Should WebSockets be enabled?
        """
        return pulumi.get(self, "websockets_enabled")

    @websockets_enabled.setter
    def websockets_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "websockets_enabled", value)


@pulumi.input_type
class StandardSiteConfigCorsArgs:
    def __init__(__self__, *,
                 allowed_origins: pulumi.Input[Sequence[pulumi.Input[str]]],
                 support_credentials: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_origins: A list of origins which should be able to make cross-origin calls. `*` can be used to allow all calls.
        :param pulumi.Input[bool] support_credentials: Are credentials supported?
        """
        StandardSiteConfigCorsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowed_origins=allowed_origins,
            support_credentials=support_credentials,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowed_origins: pulumi.Input[Sequence[pulumi.Input[str]]],
             support_credentials: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("allowed_origins", allowed_origins)
        if support_credentials is not None:
            _setter("support_credentials", support_credentials)

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of origins which should be able to make cross-origin calls. `*` can be used to allow all calls.
        """
        return pulumi.get(self, "allowed_origins")

    @allowed_origins.setter
    def allowed_origins(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_origins", value)

    @property
    @pulumi.getter(name="supportCredentials")
    def support_credentials(self) -> Optional[pulumi.Input[bool]]:
        """
        Are credentials supported?
        """
        return pulumi.get(self, "support_credentials")

    @support_credentials.setter
    def support_credentials(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "support_credentials", value)


@pulumi.input_type
class StandardSiteConfigIpRestrictionArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input['StandardSiteConfigIpRestrictionHeadersArgs']] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 service_tag: Optional[pulumi.Input[str]] = None,
                 virtual_network_subnet_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Does this restriction `Allow` or `Deny` access for this IP range. Defaults to `Allow`.
        :param pulumi.Input['StandardSiteConfigIpRestrictionHeadersArgs'] headers: The headers for this specific `ip_restriction` as defined below.
        :param pulumi.Input[str] ip_address: The IP Address used for this IP Restriction in CIDR notation.
        :param pulumi.Input[str] name: The name for this IP Restriction.
        :param pulumi.Input[int] priority: The priority for this IP Restriction. Restrictions are enforced in priority order. By default, the priority is set to 65000 if not specified.
        :param pulumi.Input[str] service_tag: The Service Tag used for this IP Restriction.
        :param pulumi.Input[str] virtual_network_subnet_id: The Virtual Network Subnet ID used for this IP Restriction.
               
               > **NOTE:** One of either `ip_address`, `service_tag` or `virtual_network_subnet_id` must be specified
        """
        StandardSiteConfigIpRestrictionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            headers=headers,
            ip_address=ip_address,
            name=name,
            priority=priority,
            service_tag=service_tag,
            virtual_network_subnet_id=virtual_network_subnet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[pulumi.Input[str]] = None,
             headers: Optional[pulumi.Input['StandardSiteConfigIpRestrictionHeadersArgs']] = None,
             ip_address: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             priority: Optional[pulumi.Input[int]] = None,
             service_tag: Optional[pulumi.Input[str]] = None,
             virtual_network_subnet_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if action is not None:
            _setter("action", action)
        if headers is not None:
            _setter("headers", headers)
        if ip_address is not None:
            _setter("ip_address", ip_address)
        if name is not None:
            _setter("name", name)
        if priority is not None:
            _setter("priority", priority)
        if service_tag is not None:
            _setter("service_tag", service_tag)
        if virtual_network_subnet_id is not None:
            _setter("virtual_network_subnet_id", virtual_network_subnet_id)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Does this restriction `Allow` or `Deny` access for this IP range. Defaults to `Allow`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input['StandardSiteConfigIpRestrictionHeadersArgs']]:
        """
        The headers for this specific `ip_restriction` as defined below.
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input['StandardSiteConfigIpRestrictionHeadersArgs']]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        The IP Address used for this IP Restriction in CIDR notation.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for this IP Restriction.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        The priority for this IP Restriction. Restrictions are enforced in priority order. By default, the priority is set to 65000 if not specified.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="serviceTag")
    def service_tag(self) -> Optional[pulumi.Input[str]]:
        """
        The Service Tag used for this IP Restriction.
        """
        return pulumi.get(self, "service_tag")

    @service_tag.setter
    def service_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_tag", value)

    @property
    @pulumi.getter(name="virtualNetworkSubnetId")
    def virtual_network_subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Virtual Network Subnet ID used for this IP Restriction.

        > **NOTE:** One of either `ip_address`, `service_tag` or `virtual_network_subnet_id` must be specified
        """
        return pulumi.get(self, "virtual_network_subnet_id")

    @virtual_network_subnet_id.setter
    def virtual_network_subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_network_subnet_id", value)


@pulumi.input_type
class StandardSiteConfigIpRestrictionHeadersArgs:
    def __init__(__self__, *,
                 x_azure_fdids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 x_fd_health_probe: Optional[pulumi.Input[str]] = None,
                 x_forwarded_fors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 x_forwarded_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] x_azure_fdids: A list of allowed Azure FrontDoor IDs in UUID notation with a maximum of 8.
        :param pulumi.Input[str] x_fd_health_probe: A list to allow the Azure FrontDoor health probe header. Only allowed value is "1".
        :param pulumi.Input[Sequence[pulumi.Input[str]]] x_forwarded_fors: A list of allowed 'X-Forwarded-For' IPs in CIDR notation with a maximum of 8
        :param pulumi.Input[Sequence[pulumi.Input[str]]] x_forwarded_hosts: A list of allowed 'X-Forwarded-Host' domains with a maximum of 8.
        """
        StandardSiteConfigIpRestrictionHeadersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            x_azure_fdids=x_azure_fdids,
            x_fd_health_probe=x_fd_health_probe,
            x_forwarded_fors=x_forwarded_fors,
            x_forwarded_hosts=x_forwarded_hosts,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             x_azure_fdids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             x_fd_health_probe: Optional[pulumi.Input[str]] = None,
             x_forwarded_fors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             x_forwarded_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if x_azure_fdids is not None:
            _setter("x_azure_fdids", x_azure_fdids)
        if x_fd_health_probe is not None:
            _setter("x_fd_health_probe", x_fd_health_probe)
        if x_forwarded_fors is not None:
            _setter("x_forwarded_fors", x_forwarded_fors)
        if x_forwarded_hosts is not None:
            _setter("x_forwarded_hosts", x_forwarded_hosts)

    @property
    @pulumi.getter(name="xAzureFdids")
    def x_azure_fdids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of allowed Azure FrontDoor IDs in UUID notation with a maximum of 8.
        """
        return pulumi.get(self, "x_azure_fdids")

    @x_azure_fdids.setter
    def x_azure_fdids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "x_azure_fdids", value)

    @property
    @pulumi.getter(name="xFdHealthProbe")
    def x_fd_health_probe(self) -> Optional[pulumi.Input[str]]:
        """
        A list to allow the Azure FrontDoor health probe header. Only allowed value is "1".
        """
        return pulumi.get(self, "x_fd_health_probe")

    @x_fd_health_probe.setter
    def x_fd_health_probe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_fd_health_probe", value)

    @property
    @pulumi.getter(name="xForwardedFors")
    def x_forwarded_fors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of allowed 'X-Forwarded-For' IPs in CIDR notation with a maximum of 8
        """
        return pulumi.get(self, "x_forwarded_fors")

    @x_forwarded_fors.setter
    def x_forwarded_fors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "x_forwarded_fors", value)

    @property
    @pulumi.getter(name="xForwardedHosts")
    def x_forwarded_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of allowed 'X-Forwarded-Host' domains with a maximum of 8.
        """
        return pulumi.get(self, "x_forwarded_hosts")

    @x_forwarded_hosts.setter
    def x_forwarded_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "x_forwarded_hosts", value)


@pulumi.input_type
class StandardSiteConfigScmIpRestrictionArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input['StandardSiteConfigScmIpRestrictionHeadersArgs']] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 service_tag: Optional[pulumi.Input[str]] = None,
                 virtual_network_subnet_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Does this restriction `Allow` or `Deny` access for this IP range. Defaults to `Allow`.
        :param pulumi.Input['StandardSiteConfigScmIpRestrictionHeadersArgs'] headers: The headers for this specific `ip_restriction` as defined below.
        :param pulumi.Input[str] ip_address: The IP Address used for this IP Restriction in CIDR notation.
        :param pulumi.Input[str] name: The name for this IP Restriction.
        :param pulumi.Input[int] priority: The priority for this IP Restriction. Restrictions are enforced in priority order. By default, the priority is set to 65000 if not specified.
        :param pulumi.Input[str] service_tag: The Service Tag used for this IP Restriction.
        :param pulumi.Input[str] virtual_network_subnet_id: The Virtual Network Subnet ID used for this IP Restriction.
               
               > **NOTE:** One of either `ip_address`, `service_tag` or `virtual_network_subnet_id` must be specified
        """
        StandardSiteConfigScmIpRestrictionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            headers=headers,
            ip_address=ip_address,
            name=name,
            priority=priority,
            service_tag=service_tag,
            virtual_network_subnet_id=virtual_network_subnet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[pulumi.Input[str]] = None,
             headers: Optional[pulumi.Input['StandardSiteConfigScmIpRestrictionHeadersArgs']] = None,
             ip_address: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             priority: Optional[pulumi.Input[int]] = None,
             service_tag: Optional[pulumi.Input[str]] = None,
             virtual_network_subnet_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if action is not None:
            _setter("action", action)
        if headers is not None:
            _setter("headers", headers)
        if ip_address is not None:
            _setter("ip_address", ip_address)
        if name is not None:
            _setter("name", name)
        if priority is not None:
            _setter("priority", priority)
        if service_tag is not None:
            _setter("service_tag", service_tag)
        if virtual_network_subnet_id is not None:
            _setter("virtual_network_subnet_id", virtual_network_subnet_id)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Does this restriction `Allow` or `Deny` access for this IP range. Defaults to `Allow`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input['StandardSiteConfigScmIpRestrictionHeadersArgs']]:
        """
        The headers for this specific `ip_restriction` as defined below.
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input['StandardSiteConfigScmIpRestrictionHeadersArgs']]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        The IP Address used for this IP Restriction in CIDR notation.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for this IP Restriction.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        The priority for this IP Restriction. Restrictions are enforced in priority order. By default, the priority is set to 65000 if not specified.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="serviceTag")
    def service_tag(self) -> Optional[pulumi.Input[str]]:
        """
        The Service Tag used for this IP Restriction.
        """
        return pulumi.get(self, "service_tag")

    @service_tag.setter
    def service_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_tag", value)

    @property
    @pulumi.getter(name="virtualNetworkSubnetId")
    def virtual_network_subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Virtual Network Subnet ID used for this IP Restriction.

        > **NOTE:** One of either `ip_address`, `service_tag` or `virtual_network_subnet_id` must be specified
        """
        return pulumi.get(self, "virtual_network_subnet_id")

    @virtual_network_subnet_id.setter
    def virtual_network_subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_network_subnet_id", value)


@pulumi.input_type
class StandardSiteConfigScmIpRestrictionHeadersArgs:
    def __init__(__self__, *,
                 x_azure_fdids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 x_fd_health_probe: Optional[pulumi.Input[str]] = None,
                 x_forwarded_fors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 x_forwarded_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] x_azure_fdids: A list of allowed Azure FrontDoor IDs in UUID notation with a maximum of 8.
        :param pulumi.Input[str] x_fd_health_probe: A list to allow the Azure FrontDoor health probe header. Only allowed value is "1".
        :param pulumi.Input[Sequence[pulumi.Input[str]]] x_forwarded_fors: A list of allowed 'X-Forwarded-For' IPs in CIDR notation with a maximum of 8
        :param pulumi.Input[Sequence[pulumi.Input[str]]] x_forwarded_hosts: A list of allowed 'X-Forwarded-Host' domains with a maximum of 8.
        """
        StandardSiteConfigScmIpRestrictionHeadersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            x_azure_fdids=x_azure_fdids,
            x_fd_health_probe=x_fd_health_probe,
            x_forwarded_fors=x_forwarded_fors,
            x_forwarded_hosts=x_forwarded_hosts,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             x_azure_fdids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             x_fd_health_probe: Optional[pulumi.Input[str]] = None,
             x_forwarded_fors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             x_forwarded_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if x_azure_fdids is not None:
            _setter("x_azure_fdids", x_azure_fdids)
        if x_fd_health_probe is not None:
            _setter("x_fd_health_probe", x_fd_health_probe)
        if x_forwarded_fors is not None:
            _setter("x_forwarded_fors", x_forwarded_fors)
        if x_forwarded_hosts is not None:
            _setter("x_forwarded_hosts", x_forwarded_hosts)

    @property
    @pulumi.getter(name="xAzureFdids")
    def x_azure_fdids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of allowed Azure FrontDoor IDs in UUID notation with a maximum of 8.
        """
        return pulumi.get(self, "x_azure_fdids")

    @x_azure_fdids.setter
    def x_azure_fdids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "x_azure_fdids", value)

    @property
    @pulumi.getter(name="xFdHealthProbe")
    def x_fd_health_probe(self) -> Optional[pulumi.Input[str]]:
        """
        A list to allow the Azure FrontDoor health probe header. Only allowed value is "1".
        """
        return pulumi.get(self, "x_fd_health_probe")

    @x_fd_health_probe.setter
    def x_fd_health_probe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_fd_health_probe", value)

    @property
    @pulumi.getter(name="xForwardedFors")
    def x_forwarded_fors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of allowed 'X-Forwarded-For' IPs in CIDR notation with a maximum of 8
        """
        return pulumi.get(self, "x_forwarded_fors")

    @x_forwarded_fors.setter
    def x_forwarded_fors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "x_forwarded_fors", value)

    @property
    @pulumi.getter(name="xForwardedHosts")
    def x_forwarded_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of allowed 'X-Forwarded-Host' domains with a maximum of 8.
        """
        return pulumi.get(self, "x_forwarded_hosts")

    @x_forwarded_hosts.setter
    def x_forwarded_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "x_forwarded_hosts", value)


@pulumi.input_type
class StandardSiteCredentialArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password: The password associated with the username, which can be used to publish to this App Service.
        :param pulumi.Input[str] username: The username which can be used to publish to this App Service
        """
        StandardSiteCredentialArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password=password,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password: Optional[pulumi.Input[str]] = None,
             username: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if password is not None:
            _setter("password", password)
        if username is not None:
            _setter("username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password associated with the username, which can be used to publish to this App Service.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The username which can be used to publish to this App Service
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class TriggerRecurrenceScheduleArgs:
    def __init__(__self__, *,
                 at_these_hours: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 at_these_minutes: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 on_these_days: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] at_these_hours: Specifies a list of hours when the trigger should run. Valid values are between 0 and 23.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] at_these_minutes: Specifies a list of minutes when the trigger should run. Valid values are between 0 and 59.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] on_these_days: Specifies a list of days when the trigger should run. Valid values include `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, and `Sunday`.
        """
        TriggerRecurrenceScheduleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            at_these_hours=at_these_hours,
            at_these_minutes=at_these_minutes,
            on_these_days=on_these_days,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             at_these_hours: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             at_these_minutes: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             on_these_days: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if at_these_hours is not None:
            _setter("at_these_hours", at_these_hours)
        if at_these_minutes is not None:
            _setter("at_these_minutes", at_these_minutes)
        if on_these_days is not None:
            _setter("on_these_days", on_these_days)

    @property
    @pulumi.getter(name="atTheseHours")
    def at_these_hours(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Specifies a list of hours when the trigger should run. Valid values are between 0 and 23.
        """
        return pulumi.get(self, "at_these_hours")

    @at_these_hours.setter
    def at_these_hours(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "at_these_hours", value)

    @property
    @pulumi.getter(name="atTheseMinutes")
    def at_these_minutes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Specifies a list of minutes when the trigger should run. Valid values are between 0 and 59.
        """
        return pulumi.get(self, "at_these_minutes")

    @at_these_minutes.setter
    def at_these_minutes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "at_these_minutes", value)

    @property
    @pulumi.getter(name="onTheseDays")
    def on_these_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies a list of days when the trigger should run. Valid values include `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, and `Sunday`.
        """
        return pulumi.get(self, "on_these_days")

    @on_these_days.setter
    def on_these_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "on_these_days", value)


@pulumi.input_type
class WorkflowAccessControlArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input['WorkflowAccessControlActionArgs']] = None,
                 content: Optional[pulumi.Input['WorkflowAccessControlContentArgs']] = None,
                 trigger: Optional[pulumi.Input['WorkflowAccessControlTriggerArgs']] = None,
                 workflow_management: Optional[pulumi.Input['WorkflowAccessControlWorkflowManagementArgs']] = None):
        """
        :param pulumi.Input['WorkflowAccessControlActionArgs'] action: A `action` block as defined below.
        :param pulumi.Input['WorkflowAccessControlContentArgs'] content: A `content` block as defined below.
        :param pulumi.Input['WorkflowAccessControlTriggerArgs'] trigger: A `trigger` block as defined below.
        :param pulumi.Input['WorkflowAccessControlWorkflowManagementArgs'] workflow_management: A `workflow_management` block as defined below.
        """
        WorkflowAccessControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            content=content,
            trigger=trigger,
            workflow_management=workflow_management,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[pulumi.Input['WorkflowAccessControlActionArgs']] = None,
             content: Optional[pulumi.Input['WorkflowAccessControlContentArgs']] = None,
             trigger: Optional[pulumi.Input['WorkflowAccessControlTriggerArgs']] = None,
             workflow_management: Optional[pulumi.Input['WorkflowAccessControlWorkflowManagementArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if action is not None:
            _setter("action", action)
        if content is not None:
            _setter("content", content)
        if trigger is not None:
            _setter("trigger", trigger)
        if workflow_management is not None:
            _setter("workflow_management", workflow_management)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input['WorkflowAccessControlActionArgs']]:
        """
        A `action` block as defined below.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input['WorkflowAccessControlActionArgs']]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input['WorkflowAccessControlContentArgs']]:
        """
        A `content` block as defined below.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input['WorkflowAccessControlContentArgs']]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def trigger(self) -> Optional[pulumi.Input['WorkflowAccessControlTriggerArgs']]:
        """
        A `trigger` block as defined below.
        """
        return pulumi.get(self, "trigger")

    @trigger.setter
    def trigger(self, value: Optional[pulumi.Input['WorkflowAccessControlTriggerArgs']]):
        pulumi.set(self, "trigger", value)

    @property
    @pulumi.getter(name="workflowManagement")
    def workflow_management(self) -> Optional[pulumi.Input['WorkflowAccessControlWorkflowManagementArgs']]:
        """
        A `workflow_management` block as defined below.
        """
        return pulumi.get(self, "workflow_management")

    @workflow_management.setter
    def workflow_management(self, value: Optional[pulumi.Input['WorkflowAccessControlWorkflowManagementArgs']]):
        pulumi.set(self, "workflow_management", value)


@pulumi.input_type
class WorkflowAccessControlActionArgs:
    def __init__(__self__, *,
                 allowed_caller_ip_address_ranges: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_caller_ip_address_ranges: A list of the allowed caller IP address ranges.
        """
        WorkflowAccessControlActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowed_caller_ip_address_ranges=allowed_caller_ip_address_ranges,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowed_caller_ip_address_ranges: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("allowed_caller_ip_address_ranges", allowed_caller_ip_address_ranges)

    @property
    @pulumi.getter(name="allowedCallerIpAddressRanges")
    def allowed_caller_ip_address_ranges(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of the allowed caller IP address ranges.
        """
        return pulumi.get(self, "allowed_caller_ip_address_ranges")

    @allowed_caller_ip_address_ranges.setter
    def allowed_caller_ip_address_ranges(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_caller_ip_address_ranges", value)


@pulumi.input_type
class WorkflowAccessControlContentArgs:
    def __init__(__self__, *,
                 allowed_caller_ip_address_ranges: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_caller_ip_address_ranges: A list of the allowed caller IP address ranges.
        """
        WorkflowAccessControlContentArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowed_caller_ip_address_ranges=allowed_caller_ip_address_ranges,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowed_caller_ip_address_ranges: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("allowed_caller_ip_address_ranges", allowed_caller_ip_address_ranges)

    @property
    @pulumi.getter(name="allowedCallerIpAddressRanges")
    def allowed_caller_ip_address_ranges(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of the allowed caller IP address ranges.
        """
        return pulumi.get(self, "allowed_caller_ip_address_ranges")

    @allowed_caller_ip_address_ranges.setter
    def allowed_caller_ip_address_ranges(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_caller_ip_address_ranges", value)


@pulumi.input_type
class WorkflowAccessControlTriggerArgs:
    def __init__(__self__, *,
                 allowed_caller_ip_address_ranges: pulumi.Input[Sequence[pulumi.Input[str]]],
                 open_authentication_policies: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowAccessControlTriggerOpenAuthenticationPolicyArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_caller_ip_address_ranges: A list of the allowed caller IP address ranges.
        :param pulumi.Input[Sequence[pulumi.Input['WorkflowAccessControlTriggerOpenAuthenticationPolicyArgs']]] open_authentication_policies: A `open_authentication_policy` block as defined below.
        """
        WorkflowAccessControlTriggerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowed_caller_ip_address_ranges=allowed_caller_ip_address_ranges,
            open_authentication_policies=open_authentication_policies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowed_caller_ip_address_ranges: pulumi.Input[Sequence[pulumi.Input[str]]],
             open_authentication_policies: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowAccessControlTriggerOpenAuthenticationPolicyArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("allowed_caller_ip_address_ranges", allowed_caller_ip_address_ranges)
        if open_authentication_policies is not None:
            _setter("open_authentication_policies", open_authentication_policies)

    @property
    @pulumi.getter(name="allowedCallerIpAddressRanges")
    def allowed_caller_ip_address_ranges(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of the allowed caller IP address ranges.
        """
        return pulumi.get(self, "allowed_caller_ip_address_ranges")

    @allowed_caller_ip_address_ranges.setter
    def allowed_caller_ip_address_ranges(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_caller_ip_address_ranges", value)

    @property
    @pulumi.getter(name="openAuthenticationPolicies")
    def open_authentication_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowAccessControlTriggerOpenAuthenticationPolicyArgs']]]]:
        """
        A `open_authentication_policy` block as defined below.
        """
        return pulumi.get(self, "open_authentication_policies")

    @open_authentication_policies.setter
    def open_authentication_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowAccessControlTriggerOpenAuthenticationPolicyArgs']]]]):
        pulumi.set(self, "open_authentication_policies", value)


@pulumi.input_type
class WorkflowAccessControlTriggerOpenAuthenticationPolicyArgs:
    def __init__(__self__, *,
                 claims: pulumi.Input[Sequence[pulumi.Input['WorkflowAccessControlTriggerOpenAuthenticationPolicyClaimArgs']]],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WorkflowAccessControlTriggerOpenAuthenticationPolicyClaimArgs']]] claims: A `claim` block as defined below.
        :param pulumi.Input[str] name: The OAuth policy name for the Logic App Workflow.
        """
        WorkflowAccessControlTriggerOpenAuthenticationPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            claims=claims,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             claims: pulumi.Input[Sequence[pulumi.Input['WorkflowAccessControlTriggerOpenAuthenticationPolicyClaimArgs']]],
             name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("claims", claims)
        _setter("name", name)

    @property
    @pulumi.getter
    def claims(self) -> pulumi.Input[Sequence[pulumi.Input['WorkflowAccessControlTriggerOpenAuthenticationPolicyClaimArgs']]]:
        """
        A `claim` block as defined below.
        """
        return pulumi.get(self, "claims")

    @claims.setter
    def claims(self, value: pulumi.Input[Sequence[pulumi.Input['WorkflowAccessControlTriggerOpenAuthenticationPolicyClaimArgs']]]):
        pulumi.set(self, "claims", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The OAuth policy name for the Logic App Workflow.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowAccessControlTriggerOpenAuthenticationPolicyClaimArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the OAuth policy claim for the Logic App Workflow.
        :param pulumi.Input[str] value: The value of the OAuth policy claim for the Logic App Workflow.
        """
        WorkflowAccessControlTriggerOpenAuthenticationPolicyClaimArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the OAuth policy claim for the Logic App Workflow.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value of the OAuth policy claim for the Logic App Workflow.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class WorkflowAccessControlWorkflowManagementArgs:
    def __init__(__self__, *,
                 allowed_caller_ip_address_ranges: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_caller_ip_address_ranges: A list of the allowed caller IP address ranges.
        """
        WorkflowAccessControlWorkflowManagementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowed_caller_ip_address_ranges=allowed_caller_ip_address_ranges,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowed_caller_ip_address_ranges: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("allowed_caller_ip_address_ranges", allowed_caller_ip_address_ranges)

    @property
    @pulumi.getter(name="allowedCallerIpAddressRanges")
    def allowed_caller_ip_address_ranges(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of the allowed caller IP address ranges.
        """
        return pulumi.get(self, "allowed_caller_ip_address_ranges")

    @allowed_caller_ip_address_ranges.setter
    def allowed_caller_ip_address_ranges(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_caller_ip_address_ranges", value)


@pulumi.input_type
class WorkflowIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 identity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 principal_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: Specifies the type of Managed Service Identity that should be configured on this Logic App Workflow. Possible values are `SystemAssigned`, `UserAssigned`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] identity_ids: Specifies a list of User Assigned Managed Identity IDs to be assigned to this Logic App Workflow.
               
               > **NOTE:** This is required when `type` is set to `UserAssigned`
        :param pulumi.Input[str] principal_id: The Principal ID for the Service Principal associated with the Managed Service Identity of this Logic App Workflow.
        :param pulumi.Input[str] tenant_id: The Tenant ID for the Service Principal associated with the Managed Service Identity of this Logic App Workflow.
        """
        WorkflowIdentityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            identity_ids=identity_ids,
            principal_id=principal_id,
            tenant_id=tenant_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input[str],
             identity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             principal_id: Optional[pulumi.Input[str]] = None,
             tenant_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if identity_ids is not None:
            _setter("identity_ids", identity_ids)
        if principal_id is not None:
            _setter("principal_id", principal_id)
        if tenant_id is not None:
            _setter("tenant_id", tenant_id)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Specifies the type of Managed Service Identity that should be configured on this Logic App Workflow. Possible values are `SystemAssigned`, `UserAssigned`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies a list of User Assigned Managed Identity IDs to be assigned to this Logic App Workflow.

        > **NOTE:** This is required when `type` is set to `UserAssigned`
        """
        return pulumi.get(self, "identity_ids")

    @identity_ids.setter
    def identity_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "identity_ids", value)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Principal ID for the Service Principal associated with the Managed Service Identity of this Logic App Workflow.
        """
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Tenant ID for the Service Principal associated with the Managed Service Identity of this Logic App Workflow.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class GetStandardSiteConfigArgs:
    def __init__(__self__, *,
                 app_scale_limit: int,
                 auto_swap_slot_name: str,
                 cors: 'GetStandardSiteConfigCorsArgs',
                 elastic_instance_minimum: int,
                 ftps_state: str,
                 ip_restrictions: Sequence['GetStandardSiteConfigIpRestrictionArgs'],
                 linux_fx_version: str,
                 min_tls_version: str,
                 pre_warmed_instance_count: int,
                 scm_ip_restrictions: Sequence['GetStandardSiteConfigScmIpRestrictionArgs'],
                 scm_min_tls_version: str,
                 scm_type: str,
                 vnet_route_all_enabled: bool,
                 always_on: Optional[bool] = None,
                 dotnet_framework_version: Optional[str] = None,
                 health_check_path: Optional[str] = None,
                 http2_enabled: Optional[bool] = None,
                 runtime_scale_monitoring_enabled: Optional[bool] = None,
                 scm_use_main_ip_restriction: Optional[bool] = None,
                 use32_bit_worker_process: Optional[bool] = None,
                 websockets_enabled: Optional[bool] = None):
        GetStandardSiteConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            app_scale_limit=app_scale_limit,
            auto_swap_slot_name=auto_swap_slot_name,
            cors=cors,
            elastic_instance_minimum=elastic_instance_minimum,
            ftps_state=ftps_state,
            ip_restrictions=ip_restrictions,
            linux_fx_version=linux_fx_version,
            min_tls_version=min_tls_version,
            pre_warmed_instance_count=pre_warmed_instance_count,
            scm_ip_restrictions=scm_ip_restrictions,
            scm_min_tls_version=scm_min_tls_version,
            scm_type=scm_type,
            vnet_route_all_enabled=vnet_route_all_enabled,
            always_on=always_on,
            dotnet_framework_version=dotnet_framework_version,
            health_check_path=health_check_path,
            http2_enabled=http2_enabled,
            runtime_scale_monitoring_enabled=runtime_scale_monitoring_enabled,
            scm_use_main_ip_restriction=scm_use_main_ip_restriction,
            use32_bit_worker_process=use32_bit_worker_process,
            websockets_enabled=websockets_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             app_scale_limit: int,
             auto_swap_slot_name: str,
             cors: 'GetStandardSiteConfigCorsArgs',
             elastic_instance_minimum: int,
             ftps_state: str,
             ip_restrictions: Sequence['GetStandardSiteConfigIpRestrictionArgs'],
             linux_fx_version: str,
             min_tls_version: str,
             pre_warmed_instance_count: int,
             scm_ip_restrictions: Sequence['GetStandardSiteConfigScmIpRestrictionArgs'],
             scm_min_tls_version: str,
             scm_type: str,
             vnet_route_all_enabled: bool,
             always_on: Optional[bool] = None,
             dotnet_framework_version: Optional[str] = None,
             health_check_path: Optional[str] = None,
             http2_enabled: Optional[bool] = None,
             runtime_scale_monitoring_enabled: Optional[bool] = None,
             scm_use_main_ip_restriction: Optional[bool] = None,
             use32_bit_worker_process: Optional[bool] = None,
             websockets_enabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("app_scale_limit", app_scale_limit)
        _setter("auto_swap_slot_name", auto_swap_slot_name)
        _setter("cors", cors)
        _setter("elastic_instance_minimum", elastic_instance_minimum)
        _setter("ftps_state", ftps_state)
        _setter("ip_restrictions", ip_restrictions)
        _setter("linux_fx_version", linux_fx_version)
        _setter("min_tls_version", min_tls_version)
        _setter("pre_warmed_instance_count", pre_warmed_instance_count)
        _setter("scm_ip_restrictions", scm_ip_restrictions)
        _setter("scm_min_tls_version", scm_min_tls_version)
        _setter("scm_type", scm_type)
        _setter("vnet_route_all_enabled", vnet_route_all_enabled)
        if always_on is not None:
            _setter("always_on", always_on)
        if dotnet_framework_version is not None:
            _setter("dotnet_framework_version", dotnet_framework_version)
        if health_check_path is not None:
            _setter("health_check_path", health_check_path)
        if http2_enabled is not None:
            _setter("http2_enabled", http2_enabled)
        if runtime_scale_monitoring_enabled is not None:
            _setter("runtime_scale_monitoring_enabled", runtime_scale_monitoring_enabled)
        if scm_use_main_ip_restriction is not None:
            _setter("scm_use_main_ip_restriction", scm_use_main_ip_restriction)
        if use32_bit_worker_process is not None:
            _setter("use32_bit_worker_process", use32_bit_worker_process)
        if websockets_enabled is not None:
            _setter("websockets_enabled", websockets_enabled)

    @property
    @pulumi.getter(name="appScaleLimit")
    def app_scale_limit(self) -> int:
        return pulumi.get(self, "app_scale_limit")

    @app_scale_limit.setter
    def app_scale_limit(self, value: int):
        pulumi.set(self, "app_scale_limit", value)

    @property
    @pulumi.getter(name="autoSwapSlotName")
    def auto_swap_slot_name(self) -> str:
        return pulumi.get(self, "auto_swap_slot_name")

    @auto_swap_slot_name.setter
    def auto_swap_slot_name(self, value: str):
        pulumi.set(self, "auto_swap_slot_name", value)

    @property
    @pulumi.getter
    def cors(self) -> 'GetStandardSiteConfigCorsArgs':
        return pulumi.get(self, "cors")

    @cors.setter
    def cors(self, value: 'GetStandardSiteConfigCorsArgs'):
        pulumi.set(self, "cors", value)

    @property
    @pulumi.getter(name="elasticInstanceMinimum")
    def elastic_instance_minimum(self) -> int:
        return pulumi.get(self, "elastic_instance_minimum")

    @elastic_instance_minimum.setter
    def elastic_instance_minimum(self, value: int):
        pulumi.set(self, "elastic_instance_minimum", value)

    @property
    @pulumi.getter(name="ftpsState")
    def ftps_state(self) -> str:
        return pulumi.get(self, "ftps_state")

    @ftps_state.setter
    def ftps_state(self, value: str):
        pulumi.set(self, "ftps_state", value)

    @property
    @pulumi.getter(name="ipRestrictions")
    def ip_restrictions(self) -> Sequence['GetStandardSiteConfigIpRestrictionArgs']:
        return pulumi.get(self, "ip_restrictions")

    @ip_restrictions.setter
    def ip_restrictions(self, value: Sequence['GetStandardSiteConfigIpRestrictionArgs']):
        pulumi.set(self, "ip_restrictions", value)

    @property
    @pulumi.getter(name="linuxFxVersion")
    def linux_fx_version(self) -> str:
        return pulumi.get(self, "linux_fx_version")

    @linux_fx_version.setter
    def linux_fx_version(self, value: str):
        pulumi.set(self, "linux_fx_version", value)

    @property
    @pulumi.getter(name="minTlsVersion")
    def min_tls_version(self) -> str:
        return pulumi.get(self, "min_tls_version")

    @min_tls_version.setter
    def min_tls_version(self, value: str):
        pulumi.set(self, "min_tls_version", value)

    @property
    @pulumi.getter(name="preWarmedInstanceCount")
    def pre_warmed_instance_count(self) -> int:
        return pulumi.get(self, "pre_warmed_instance_count")

    @pre_warmed_instance_count.setter
    def pre_warmed_instance_count(self, value: int):
        pulumi.set(self, "pre_warmed_instance_count", value)

    @property
    @pulumi.getter(name="scmIpRestrictions")
    def scm_ip_restrictions(self) -> Sequence['GetStandardSiteConfigScmIpRestrictionArgs']:
        return pulumi.get(self, "scm_ip_restrictions")

    @scm_ip_restrictions.setter
    def scm_ip_restrictions(self, value: Sequence['GetStandardSiteConfigScmIpRestrictionArgs']):
        pulumi.set(self, "scm_ip_restrictions", value)

    @property
    @pulumi.getter(name="scmMinTlsVersion")
    def scm_min_tls_version(self) -> str:
        return pulumi.get(self, "scm_min_tls_version")

    @scm_min_tls_version.setter
    def scm_min_tls_version(self, value: str):
        pulumi.set(self, "scm_min_tls_version", value)

    @property
    @pulumi.getter(name="scmType")
    def scm_type(self) -> str:
        return pulumi.get(self, "scm_type")

    @scm_type.setter
    def scm_type(self, value: str):
        pulumi.set(self, "scm_type", value)

    @property
    @pulumi.getter(name="vnetRouteAllEnabled")
    def vnet_route_all_enabled(self) -> bool:
        return pulumi.get(self, "vnet_route_all_enabled")

    @vnet_route_all_enabled.setter
    def vnet_route_all_enabled(self, value: bool):
        pulumi.set(self, "vnet_route_all_enabled", value)

    @property
    @pulumi.getter(name="alwaysOn")
    def always_on(self) -> Optional[bool]:
        return pulumi.get(self, "always_on")

    @always_on.setter
    def always_on(self, value: Optional[bool]):
        pulumi.set(self, "always_on", value)

    @property
    @pulumi.getter(name="dotnetFrameworkVersion")
    def dotnet_framework_version(self) -> Optional[str]:
        return pulumi.get(self, "dotnet_framework_version")

    @dotnet_framework_version.setter
    def dotnet_framework_version(self, value: Optional[str]):
        pulumi.set(self, "dotnet_framework_version", value)

    @property
    @pulumi.getter(name="healthCheckPath")
    def health_check_path(self) -> Optional[str]:
        return pulumi.get(self, "health_check_path")

    @health_check_path.setter
    def health_check_path(self, value: Optional[str]):
        pulumi.set(self, "health_check_path", value)

    @property
    @pulumi.getter(name="http2Enabled")
    def http2_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "http2_enabled")

    @http2_enabled.setter
    def http2_enabled(self, value: Optional[bool]):
        pulumi.set(self, "http2_enabled", value)

    @property
    @pulumi.getter(name="runtimeScaleMonitoringEnabled")
    def runtime_scale_monitoring_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "runtime_scale_monitoring_enabled")

    @runtime_scale_monitoring_enabled.setter
    def runtime_scale_monitoring_enabled(self, value: Optional[bool]):
        pulumi.set(self, "runtime_scale_monitoring_enabled", value)

    @property
    @pulumi.getter(name="scmUseMainIpRestriction")
    def scm_use_main_ip_restriction(self) -> Optional[bool]:
        return pulumi.get(self, "scm_use_main_ip_restriction")

    @scm_use_main_ip_restriction.setter
    def scm_use_main_ip_restriction(self, value: Optional[bool]):
        pulumi.set(self, "scm_use_main_ip_restriction", value)

    @property
    @pulumi.getter(name="use32BitWorkerProcess")
    def use32_bit_worker_process(self) -> Optional[bool]:
        return pulumi.get(self, "use32_bit_worker_process")

    @use32_bit_worker_process.setter
    def use32_bit_worker_process(self, value: Optional[bool]):
        pulumi.set(self, "use32_bit_worker_process", value)

    @property
    @pulumi.getter(name="websocketsEnabled")
    def websockets_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "websockets_enabled")

    @websockets_enabled.setter
    def websockets_enabled(self, value: Optional[bool]):
        pulumi.set(self, "websockets_enabled", value)


@pulumi.input_type
class GetStandardSiteConfigCorsArgs:
    def __init__(__self__, *,
                 allowed_origins: Sequence[str],
                 support_credentials: Optional[bool] = None):
        GetStandardSiteConfigCorsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowed_origins=allowed_origins,
            support_credentials=support_credentials,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowed_origins: Sequence[str],
             support_credentials: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("allowed_origins", allowed_origins)
        if support_credentials is not None:
            _setter("support_credentials", support_credentials)

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Sequence[str]:
        return pulumi.get(self, "allowed_origins")

    @allowed_origins.setter
    def allowed_origins(self, value: Sequence[str]):
        pulumi.set(self, "allowed_origins", value)

    @property
    @pulumi.getter(name="supportCredentials")
    def support_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "support_credentials")

    @support_credentials.setter
    def support_credentials(self, value: Optional[bool]):
        pulumi.set(self, "support_credentials", value)


@pulumi.input_type
class GetStandardSiteConfigIpRestrictionArgs:
    def __init__(__self__, *,
                 headers: 'GetStandardSiteConfigIpRestrictionHeadersArgs',
                 name: str,
                 action: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 priority: Optional[int] = None,
                 service_tag: Optional[str] = None,
                 virtual_network_subnet_id: Optional[str] = None):
        """
        :param str name: The name of this Logic App.
        """
        GetStandardSiteConfigIpRestrictionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            headers=headers,
            name=name,
            action=action,
            ip_address=ip_address,
            priority=priority,
            service_tag=service_tag,
            virtual_network_subnet_id=virtual_network_subnet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             headers: 'GetStandardSiteConfigIpRestrictionHeadersArgs',
             name: str,
             action: Optional[str] = None,
             ip_address: Optional[str] = None,
             priority: Optional[int] = None,
             service_tag: Optional[str] = None,
             virtual_network_subnet_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("headers", headers)
        _setter("name", name)
        if action is not None:
            _setter("action", action)
        if ip_address is not None:
            _setter("ip_address", ip_address)
        if priority is not None:
            _setter("priority", priority)
        if service_tag is not None:
            _setter("service_tag", service_tag)
        if virtual_network_subnet_id is not None:
            _setter("virtual_network_subnet_id", virtual_network_subnet_id)

    @property
    @pulumi.getter
    def headers(self) -> 'GetStandardSiteConfigIpRestrictionHeadersArgs':
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: 'GetStandardSiteConfigIpRestrictionHeadersArgs'):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this Logic App.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[str]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[int]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="serviceTag")
    def service_tag(self) -> Optional[str]:
        return pulumi.get(self, "service_tag")

    @service_tag.setter
    def service_tag(self, value: Optional[str]):
        pulumi.set(self, "service_tag", value)

    @property
    @pulumi.getter(name="virtualNetworkSubnetId")
    def virtual_network_subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "virtual_network_subnet_id")

    @virtual_network_subnet_id.setter
    def virtual_network_subnet_id(self, value: Optional[str]):
        pulumi.set(self, "virtual_network_subnet_id", value)


@pulumi.input_type
class GetStandardSiteConfigIpRestrictionHeadersArgs:
    def __init__(__self__, *,
                 x_azure_fdids: Optional[Sequence[str]] = None,
                 x_fd_health_probe: Optional[str] = None,
                 x_forwarded_fors: Optional[Sequence[str]] = None,
                 x_forwarded_hosts: Optional[Sequence[str]] = None):
        GetStandardSiteConfigIpRestrictionHeadersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            x_azure_fdids=x_azure_fdids,
            x_fd_health_probe=x_fd_health_probe,
            x_forwarded_fors=x_forwarded_fors,
            x_forwarded_hosts=x_forwarded_hosts,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             x_azure_fdids: Optional[Sequence[str]] = None,
             x_fd_health_probe: Optional[str] = None,
             x_forwarded_fors: Optional[Sequence[str]] = None,
             x_forwarded_hosts: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if x_azure_fdids is not None:
            _setter("x_azure_fdids", x_azure_fdids)
        if x_fd_health_probe is not None:
            _setter("x_fd_health_probe", x_fd_health_probe)
        if x_forwarded_fors is not None:
            _setter("x_forwarded_fors", x_forwarded_fors)
        if x_forwarded_hosts is not None:
            _setter("x_forwarded_hosts", x_forwarded_hosts)

    @property
    @pulumi.getter(name="xAzureFdids")
    def x_azure_fdids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "x_azure_fdids")

    @x_azure_fdids.setter
    def x_azure_fdids(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "x_azure_fdids", value)

    @property
    @pulumi.getter(name="xFdHealthProbe")
    def x_fd_health_probe(self) -> Optional[str]:
        return pulumi.get(self, "x_fd_health_probe")

    @x_fd_health_probe.setter
    def x_fd_health_probe(self, value: Optional[str]):
        pulumi.set(self, "x_fd_health_probe", value)

    @property
    @pulumi.getter(name="xForwardedFors")
    def x_forwarded_fors(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "x_forwarded_fors")

    @x_forwarded_fors.setter
    def x_forwarded_fors(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "x_forwarded_fors", value)

    @property
    @pulumi.getter(name="xForwardedHosts")
    def x_forwarded_hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "x_forwarded_hosts")

    @x_forwarded_hosts.setter
    def x_forwarded_hosts(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "x_forwarded_hosts", value)


@pulumi.input_type
class GetStandardSiteConfigScmIpRestrictionArgs:
    def __init__(__self__, *,
                 headers: 'GetStandardSiteConfigScmIpRestrictionHeadersArgs',
                 name: str,
                 action: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 priority: Optional[int] = None,
                 service_tag: Optional[str] = None,
                 virtual_network_subnet_id: Optional[str] = None):
        """
        :param str name: The name of this Logic App.
        """
        GetStandardSiteConfigScmIpRestrictionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            headers=headers,
            name=name,
            action=action,
            ip_address=ip_address,
            priority=priority,
            service_tag=service_tag,
            virtual_network_subnet_id=virtual_network_subnet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             headers: 'GetStandardSiteConfigScmIpRestrictionHeadersArgs',
             name: str,
             action: Optional[str] = None,
             ip_address: Optional[str] = None,
             priority: Optional[int] = None,
             service_tag: Optional[str] = None,
             virtual_network_subnet_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("headers", headers)
        _setter("name", name)
        if action is not None:
            _setter("action", action)
        if ip_address is not None:
            _setter("ip_address", ip_address)
        if priority is not None:
            _setter("priority", priority)
        if service_tag is not None:
            _setter("service_tag", service_tag)
        if virtual_network_subnet_id is not None:
            _setter("virtual_network_subnet_id", virtual_network_subnet_id)

    @property
    @pulumi.getter
    def headers(self) -> 'GetStandardSiteConfigScmIpRestrictionHeadersArgs':
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: 'GetStandardSiteConfigScmIpRestrictionHeadersArgs'):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this Logic App.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[str]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[int]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="serviceTag")
    def service_tag(self) -> Optional[str]:
        return pulumi.get(self, "service_tag")

    @service_tag.setter
    def service_tag(self, value: Optional[str]):
        pulumi.set(self, "service_tag", value)

    @property
    @pulumi.getter(name="virtualNetworkSubnetId")
    def virtual_network_subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "virtual_network_subnet_id")

    @virtual_network_subnet_id.setter
    def virtual_network_subnet_id(self, value: Optional[str]):
        pulumi.set(self, "virtual_network_subnet_id", value)


@pulumi.input_type
class GetStandardSiteConfigScmIpRestrictionHeadersArgs:
    def __init__(__self__, *,
                 x_azure_fdids: Optional[Sequence[str]] = None,
                 x_fd_health_probe: Optional[str] = None,
                 x_forwarded_fors: Optional[Sequence[str]] = None,
                 x_forwarded_hosts: Optional[Sequence[str]] = None):
        GetStandardSiteConfigScmIpRestrictionHeadersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            x_azure_fdids=x_azure_fdids,
            x_fd_health_probe=x_fd_health_probe,
            x_forwarded_fors=x_forwarded_fors,
            x_forwarded_hosts=x_forwarded_hosts,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             x_azure_fdids: Optional[Sequence[str]] = None,
             x_fd_health_probe: Optional[str] = None,
             x_forwarded_fors: Optional[Sequence[str]] = None,
             x_forwarded_hosts: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if x_azure_fdids is not None:
            _setter("x_azure_fdids", x_azure_fdids)
        if x_fd_health_probe is not None:
            _setter("x_fd_health_probe", x_fd_health_probe)
        if x_forwarded_fors is not None:
            _setter("x_forwarded_fors", x_forwarded_fors)
        if x_forwarded_hosts is not None:
            _setter("x_forwarded_hosts", x_forwarded_hosts)

    @property
    @pulumi.getter(name="xAzureFdids")
    def x_azure_fdids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "x_azure_fdids")

    @x_azure_fdids.setter
    def x_azure_fdids(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "x_azure_fdids", value)

    @property
    @pulumi.getter(name="xFdHealthProbe")
    def x_fd_health_probe(self) -> Optional[str]:
        return pulumi.get(self, "x_fd_health_probe")

    @x_fd_health_probe.setter
    def x_fd_health_probe(self, value: Optional[str]):
        pulumi.set(self, "x_fd_health_probe", value)

    @property
    @pulumi.getter(name="xForwardedFors")
    def x_forwarded_fors(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "x_forwarded_fors")

    @x_forwarded_fors.setter
    def x_forwarded_fors(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "x_forwarded_fors", value)

    @property
    @pulumi.getter(name="xForwardedHosts")
    def x_forwarded_hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "x_forwarded_hosts")

    @x_forwarded_hosts.setter
    def x_forwarded_hosts(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "x_forwarded_hosts", value)


