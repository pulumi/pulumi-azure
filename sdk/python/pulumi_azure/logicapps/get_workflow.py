# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetWorkflowResult',
    'AwaitableGetWorkflowResult',
    'get_workflow',
    'get_workflow_output',
]

@pulumi.output_type
class GetWorkflowResult:
    """
    A collection of values returned by getWorkflow.
    """
    def __init__(__self__, access_endpoint=None, connector_endpoint_ip_addresses=None, connector_outbound_ip_addresses=None, id=None, identities=None, location=None, logic_app_integration_account_id=None, name=None, parameters=None, resource_group_name=None, tags=None, workflow_endpoint_ip_addresses=None, workflow_outbound_ip_addresses=None, workflow_schema=None, workflow_version=None):
        if access_endpoint and not isinstance(access_endpoint, str):
            raise TypeError("Expected argument 'access_endpoint' to be a str")
        pulumi.set(__self__, "access_endpoint", access_endpoint)
        if connector_endpoint_ip_addresses and not isinstance(connector_endpoint_ip_addresses, list):
            raise TypeError("Expected argument 'connector_endpoint_ip_addresses' to be a list")
        pulumi.set(__self__, "connector_endpoint_ip_addresses", connector_endpoint_ip_addresses)
        if connector_outbound_ip_addresses and not isinstance(connector_outbound_ip_addresses, list):
            raise TypeError("Expected argument 'connector_outbound_ip_addresses' to be a list")
        pulumi.set(__self__, "connector_outbound_ip_addresses", connector_outbound_ip_addresses)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identities and not isinstance(identities, list):
            raise TypeError("Expected argument 'identities' to be a list")
        pulumi.set(__self__, "identities", identities)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if logic_app_integration_account_id and not isinstance(logic_app_integration_account_id, str):
            raise TypeError("Expected argument 'logic_app_integration_account_id' to be a str")
        pulumi.set(__self__, "logic_app_integration_account_id", logic_app_integration_account_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if parameters and not isinstance(parameters, dict):
            raise TypeError("Expected argument 'parameters' to be a dict")
        pulumi.set(__self__, "parameters", parameters)
        if resource_group_name and not isinstance(resource_group_name, str):
            raise TypeError("Expected argument 'resource_group_name' to be a str")
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if workflow_endpoint_ip_addresses and not isinstance(workflow_endpoint_ip_addresses, list):
            raise TypeError("Expected argument 'workflow_endpoint_ip_addresses' to be a list")
        pulumi.set(__self__, "workflow_endpoint_ip_addresses", workflow_endpoint_ip_addresses)
        if workflow_outbound_ip_addresses and not isinstance(workflow_outbound_ip_addresses, list):
            raise TypeError("Expected argument 'workflow_outbound_ip_addresses' to be a list")
        pulumi.set(__self__, "workflow_outbound_ip_addresses", workflow_outbound_ip_addresses)
        if workflow_schema and not isinstance(workflow_schema, str):
            raise TypeError("Expected argument 'workflow_schema' to be a str")
        pulumi.set(__self__, "workflow_schema", workflow_schema)
        if workflow_version and not isinstance(workflow_version, str):
            raise TypeError("Expected argument 'workflow_version' to be a str")
        pulumi.set(__self__, "workflow_version", workflow_version)

    @property
    @pulumi.getter(name="accessEndpoint")
    def access_endpoint(self) -> str:
        """
        The Access Endpoint for the Logic App Workflow
        """
        return pulumi.get(self, "access_endpoint")

    @property
    @pulumi.getter(name="connectorEndpointIpAddresses")
    def connector_endpoint_ip_addresses(self) -> Sequence[str]:
        """
        The list of access endpoint IP addresses of connector.
        """
        return pulumi.get(self, "connector_endpoint_ip_addresses")

    @property
    @pulumi.getter(name="connectorOutboundIpAddresses")
    def connector_outbound_ip_addresses(self) -> Sequence[str]:
        """
        The list of outgoing IP addresses of connector.
        """
        return pulumi.get(self, "connector_outbound_ip_addresses")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identities(self) -> Sequence['outputs.GetWorkflowIdentityResult']:
        """
        An `identity` block as defined below.
        """
        return pulumi.get(self, "identities")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The Azure location where the Logic App Workflow exists.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="logicAppIntegrationAccountId")
    def logic_app_integration_account_id(self) -> str:
        """
        The ID of the integration account linked by this Logic App Workflow.
        """
        return pulumi.get(self, "logic_app_integration_account_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parameters(self) -> Mapping[str, str]:
        """
        A map of Key-Value pairs.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> str:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, str]:
        """
        A mapping of tags assigned to the resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="workflowEndpointIpAddresses")
    def workflow_endpoint_ip_addresses(self) -> Sequence[str]:
        """
        The list of access endpoint IP addresses of workflow.
        """
        return pulumi.get(self, "workflow_endpoint_ip_addresses")

    @property
    @pulumi.getter(name="workflowOutboundIpAddresses")
    def workflow_outbound_ip_addresses(self) -> Sequence[str]:
        """
        The list of outgoing IP addresses of workflow.
        """
        return pulumi.get(self, "workflow_outbound_ip_addresses")

    @property
    @pulumi.getter(name="workflowSchema")
    def workflow_schema(self) -> str:
        """
        The Schema used for this Logic App Workflow.
        """
        return pulumi.get(self, "workflow_schema")

    @property
    @pulumi.getter(name="workflowVersion")
    def workflow_version(self) -> str:
        """
        The version of the Schema used for this Logic App Workflow. Defaults to `1.0.0.0`.
        """
        return pulumi.get(self, "workflow_version")


class AwaitableGetWorkflowResult(GetWorkflowResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkflowResult(
            access_endpoint=self.access_endpoint,
            connector_endpoint_ip_addresses=self.connector_endpoint_ip_addresses,
            connector_outbound_ip_addresses=self.connector_outbound_ip_addresses,
            id=self.id,
            identities=self.identities,
            location=self.location,
            logic_app_integration_account_id=self.logic_app_integration_account_id,
            name=self.name,
            parameters=self.parameters,
            resource_group_name=self.resource_group_name,
            tags=self.tags,
            workflow_endpoint_ip_addresses=self.workflow_endpoint_ip_addresses,
            workflow_outbound_ip_addresses=self.workflow_outbound_ip_addresses,
            workflow_schema=self.workflow_schema,
            workflow_version=self.workflow_version)


def get_workflow(name: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkflowResult:
    """
    Use this data source to access information about an existing Logic App Workflow.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_azure as azure

    example = azure.logicapps.get_workflow(name="workflow1",
        resource_group_name="my-resource-group")
    pulumi.export("accessEndpoint", example.access_endpoint)
    ```


    :param str name: The name of the Logic App Workflow.
    :param str resource_group_name: The name of the Resource Group in which the Logic App Workflow exists.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azure:logicapps/getWorkflow:getWorkflow', __args__, opts=opts, typ=GetWorkflowResult).value

    return AwaitableGetWorkflowResult(
        access_endpoint=__ret__.access_endpoint,
        connector_endpoint_ip_addresses=__ret__.connector_endpoint_ip_addresses,
        connector_outbound_ip_addresses=__ret__.connector_outbound_ip_addresses,
        id=__ret__.id,
        identities=__ret__.identities,
        location=__ret__.location,
        logic_app_integration_account_id=__ret__.logic_app_integration_account_id,
        name=__ret__.name,
        parameters=__ret__.parameters,
        resource_group_name=__ret__.resource_group_name,
        tags=__ret__.tags,
        workflow_endpoint_ip_addresses=__ret__.workflow_endpoint_ip_addresses,
        workflow_outbound_ip_addresses=__ret__.workflow_outbound_ip_addresses,
        workflow_schema=__ret__.workflow_schema,
        workflow_version=__ret__.workflow_version)


@_utilities.lift_output_func(get_workflow)
def get_workflow_output(name: Optional[pulumi.Input[str]] = None,
                        resource_group_name: Optional[pulumi.Input[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetWorkflowResult]:
    """
    Use this data source to access information about an existing Logic App Workflow.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_azure as azure

    example = azure.logicapps.get_workflow(name="workflow1",
        resource_group_name="my-resource-group")
    pulumi.export("accessEndpoint", example.access_endpoint)
    ```


    :param str name: The name of the Logic App Workflow.
    :param str resource_group_name: The name of the Resource Group in which the Logic App Workflow exists.
    """
    ...
