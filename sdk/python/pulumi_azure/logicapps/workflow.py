# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Workflow(pulumi.CustomResource):
    """
    Manages a Logic App Workflow.
    """
    def __init__(__self__, __name__, __opts__=None, location=None, name=None, parameters=None, resource_group_name=None, tags=None, workflow_schema=None, workflow_version=None):
        """Create a Workflow resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not location:
            raise TypeError('Missing required property location')
        elif not isinstance(location, basestring):
            raise TypeError('Expected property location to be a basestring')
        __self__.location = location
        """
        Specifies the supported Azure location where the Logic App Workflow exists. Changing this forces a new resource to be created.
        """
        __props__['location'] = location

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        Specifies the name of the Logic App Workflow. Changing this forces a new resource to be created.
        """
        __props__['name'] = name

        if parameters and not isinstance(parameters, dict):
            raise TypeError('Expected property parameters to be a dict')
        __self__.parameters = parameters
        """
        A map of Key-Value pairs.
        """
        __props__['parameters'] = parameters

        if not resource_group_name:
            raise TypeError('Missing required property resource_group_name')
        elif not isinstance(resource_group_name, basestring):
            raise TypeError('Expected property resource_group_name to be a basestring')
        __self__.resource_group_name = resource_group_name
        """
        The name of the Resource Group in which the Logic App Workflow should be created. Changing this forces a new resource to be created.
        """
        __props__['resourceGroupName'] = resource_group_name

        if tags and not isinstance(tags, dict):
            raise TypeError('Expected property tags to be a dict')
        __self__.tags = tags
        """
        A mapping of tags to assign to the resource.
        """
        __props__['tags'] = tags

        if workflow_schema and not isinstance(workflow_schema, basestring):
            raise TypeError('Expected property workflow_schema to be a basestring')
        __self__.workflow_schema = workflow_schema
        """
        Specifies the Schema to use for this Logic App Workflow. Defaults to `https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#`. Changing this forces a new resource to be created.
        """
        __props__['workflowSchema'] = workflow_schema

        if workflow_version and not isinstance(workflow_version, basestring):
            raise TypeError('Expected property workflow_version to be a basestring')
        __self__.workflow_version = workflow_version
        """
        Specifies the version of the Schema used for this Logic App Workflow. Defaults to `1.0.0.0`. Changing this forces a new resource to be create.d
        """
        __props__['workflowVersion'] = workflow_version

        __self__.access_endpoint = pulumi.runtime.UNKNOWN
        """
        The Access Endpoint for the Logic App Workflow
        """

        super(Workflow, __self__).__init__(
            'azure:logicapps/workflow:Workflow',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'accessEndpoint' in outs:
            self.access_endpoint = outs['accessEndpoint']
        if 'location' in outs:
            self.location = outs['location']
        if 'name' in outs:
            self.name = outs['name']
        if 'parameters' in outs:
            self.parameters = outs['parameters']
        if 'resourceGroupName' in outs:
            self.resource_group_name = outs['resourceGroupName']
        if 'tags' in outs:
            self.tags = outs['tags']
        if 'workflowSchema' in outs:
            self.workflow_schema = outs['workflowSchema']
        if 'workflowVersion' in outs:
            self.workflow_version = outs['workflowVersion']
