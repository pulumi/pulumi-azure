# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ResourceGroupExportDeliveryInfo',
    'ResourceGroupExportQuery',
]

@pulumi.output_type
class ResourceGroupExportDeliveryInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerName":
            suggest = "container_name"
        elif key == "rootFolderPath":
            suggest = "root_folder_path"
        elif key == "storageAccountId":
            suggest = "storage_account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceGroupExportDeliveryInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceGroupExportDeliveryInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceGroupExportDeliveryInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_name: str,
                 root_folder_path: str,
                 storage_account_id: str):
        """
        :param str container_name: The name of the container where exports will be uploaded.
        :param str root_folder_path: The path of the directory where exports will be uploaded.
        :param str storage_account_id: The storage account id where exports will be delivered.
        """
        pulumi.set(__self__, "container_name", container_name)
        pulumi.set(__self__, "root_folder_path", root_folder_path)
        pulumi.set(__self__, "storage_account_id", storage_account_id)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> str:
        """
        The name of the container where exports will be uploaded.
        """
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter(name="rootFolderPath")
    def root_folder_path(self) -> str:
        """
        The path of the directory where exports will be uploaded.
        """
        return pulumi.get(self, "root_folder_path")

    @property
    @pulumi.getter(name="storageAccountId")
    def storage_account_id(self) -> str:
        """
        The storage account id where exports will be delivered.
        """
        return pulumi.get(self, "storage_account_id")


@pulumi.output_type
class ResourceGroupExportQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeFrame":
            suggest = "time_frame"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceGroupExportQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceGroupExportQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceGroupExportQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 time_frame: str,
                 type: str):
        """
        :param str time_frame: The time frame for pulling data for the query. If custom, then a specific time period must be provided. Possible values include: `WeekToDate`, `MonthToDate`, `BillingMonthToDate`, `TheLastWeek`, `TheLastMonth`, `TheLastBillingMonth`, `Custom`.
        :param str type: The type of the query.
        """
        pulumi.set(__self__, "time_frame", time_frame)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="timeFrame")
    def time_frame(self) -> str:
        """
        The time frame for pulling data for the query. If custom, then a specific time period must be provided. Possible values include: `WeekToDate`, `MonthToDate`, `BillingMonthToDate`, `TheLastWeek`, `TheLastMonth`, `TheLastBillingMonth`, `Custom`.
        """
        return pulumi.get(self, "time_frame")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the query.
        """
        return pulumi.get(self, "type")


