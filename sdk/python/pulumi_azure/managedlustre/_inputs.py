# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'FileSystemEncryptionKeyArgs',
    'FileSystemHsmSettingArgs',
    'FileSystemIdentityArgs',
    'FileSystemMaintenanceWindowArgs',
]

@pulumi.input_type
class FileSystemEncryptionKeyArgs:
    def __init__(__self__, *,
                 key_url: pulumi.Input[str],
                 source_vault_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key_url: The URL to the Key Vault Key used as the Encryption Key. This can be found as `id` on the `keyvault.Key` resource.
        :param pulumi.Input[str] source_vault_id: The ID of the source Key Vault. This can be found as `id` on the `keyvault.KeyVault` resource.
        """
        FileSystemEncryptionKeyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_url=key_url,
            source_vault_id=source_vault_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_url: pulumi.Input[str],
             source_vault_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key_url", key_url)
        _setter("source_vault_id", source_vault_id)

    @property
    @pulumi.getter(name="keyUrl")
    def key_url(self) -> pulumi.Input[str]:
        """
        The URL to the Key Vault Key used as the Encryption Key. This can be found as `id` on the `keyvault.Key` resource.
        """
        return pulumi.get(self, "key_url")

    @key_url.setter
    def key_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_url", value)

    @property
    @pulumi.getter(name="sourceVaultId")
    def source_vault_id(self) -> pulumi.Input[str]:
        """
        The ID of the source Key Vault. This can be found as `id` on the `keyvault.KeyVault` resource.
        """
        return pulumi.get(self, "source_vault_id")

    @source_vault_id.setter
    def source_vault_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_vault_id", value)


@pulumi.input_type
class FileSystemHsmSettingArgs:
    def __init__(__self__, *,
                 container_id: pulumi.Input[str],
                 logging_container_id: pulumi.Input[str],
                 import_prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] container_id: The resource ID of the storage container that is used for hydrating the namespace and archiving from the namespace. Changing this forces a new resource to be created.
        :param pulumi.Input[str] logging_container_id: The resource ID of the storage container that is used for logging events and errors. Changing this forces a new resource to be created.
        :param pulumi.Input[str] import_prefix: The import prefix for the Azure Managed Lustre File System. Only blobs in the non-logging container that start with this path/prefix get hydrated into the cluster namespace. Changing this forces a new resource to be created.
               
               > **NOTE:** The roles `Contributor` and `Storage Blob Data Contributor` must be added to the Service Principal `HPC Cache Resource Provider` for the Storage Account. See official docs for more information.
        """
        FileSystemHsmSettingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            container_id=container_id,
            logging_container_id=logging_container_id,
            import_prefix=import_prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             container_id: pulumi.Input[str],
             logging_container_id: pulumi.Input[str],
             import_prefix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("container_id", container_id)
        _setter("logging_container_id", logging_container_id)
        if import_prefix is not None:
            _setter("import_prefix", import_prefix)

    @property
    @pulumi.getter(name="containerId")
    def container_id(self) -> pulumi.Input[str]:
        """
        The resource ID of the storage container that is used for hydrating the namespace and archiving from the namespace. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "container_id")

    @container_id.setter
    def container_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_id", value)

    @property
    @pulumi.getter(name="loggingContainerId")
    def logging_container_id(self) -> pulumi.Input[str]:
        """
        The resource ID of the storage container that is used for logging events and errors. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "logging_container_id")

    @logging_container_id.setter
    def logging_container_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "logging_container_id", value)

    @property
    @pulumi.getter(name="importPrefix")
    def import_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The import prefix for the Azure Managed Lustre File System. Only blobs in the non-logging container that start with this path/prefix get hydrated into the cluster namespace. Changing this forces a new resource to be created.

        > **NOTE:** The roles `Contributor` and `Storage Blob Data Contributor` must be added to the Service Principal `HPC Cache Resource Provider` for the Storage Account. See official docs for more information.
        """
        return pulumi.get(self, "import_prefix")

    @import_prefix.setter
    def import_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "import_prefix", value)


@pulumi.input_type
class FileSystemIdentityArgs:
    def __init__(__self__, *,
                 identity_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] identity_ids: A list of User Assigned Managed Identity IDs to be assigned to this Azure Managed Lustre File System. Changing this forces a new resource to be created.
        :param pulumi.Input[str] type: The type of Managed Service Identity that should be configured on this Azure Managed Lustre File System. Only possible value is `UserAssigned`. Changing this forces a new resource to be created.
        """
        FileSystemIdentityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            identity_ids=identity_ids,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             identity_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
             type: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("identity_ids", identity_ids)
        _setter("type", type)

    @property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of User Assigned Managed Identity IDs to be assigned to this Azure Managed Lustre File System. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "identity_ids")

    @identity_ids.setter
    def identity_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "identity_ids", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of Managed Service Identity that should be configured on this Azure Managed Lustre File System. Only possible value is `UserAssigned`. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class FileSystemMaintenanceWindowArgs:
    def __init__(__self__, *,
                 day_of_week: pulumi.Input[str],
                 time_of_day_in_utc: pulumi.Input[str]):
        """
        :param pulumi.Input[str] day_of_week: The day of the week on which the maintenance window will occur. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
        """
        FileSystemMaintenanceWindowArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            day_of_week=day_of_week,
            time_of_day_in_utc=time_of_day_in_utc,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             day_of_week: pulumi.Input[str],
             time_of_day_in_utc: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("day_of_week", day_of_week)
        _setter("time_of_day_in_utc", time_of_day_in_utc)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> pulumi.Input[str]:
        """
        The day of the week on which the maintenance window will occur. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
        """
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: pulumi.Input[str]):
        pulumi.set(self, "day_of_week", value)

    @property
    @pulumi.getter(name="timeOfDayInUtc")
    def time_of_day_in_utc(self) -> pulumi.Input[str]:
        return pulumi.get(self, "time_of_day_in_utc")

    @time_of_day_in_utc.setter
    def time_of_day_in_utc(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_of_day_in_utc", value)


