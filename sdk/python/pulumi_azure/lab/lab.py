# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LabArgs', 'Lab']

@pulumi.input_type
class LabArgs:
    def __init__(__self__, *,
                 resource_group_name: pulumi.Input[str],
                 security: pulumi.Input['LabSecurityArgs'],
                 title: pulumi.Input[str],
                 virtual_machine: pulumi.Input['LabVirtualMachineArgs'],
                 auto_shutdown: Optional[pulumi.Input['LabAutoShutdownArgs']] = None,
                 connection_setting: Optional[pulumi.Input['LabConnectionSettingArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 lab_plan_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input['LabNetworkArgs']] = None,
                 roster: Optional[pulumi.Input['LabRosterArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Lab resource.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group where the Lab Service Lab should exist. Changing this forces a new resource to be created.
        :param pulumi.Input['LabSecurityArgs'] security: A `security` block as defined below.
        :param pulumi.Input[str] title: The title of the Lab Service Lab.
        :param pulumi.Input['LabVirtualMachineArgs'] virtual_machine: A `virtual_machine` block as defined below.
        :param pulumi.Input['LabAutoShutdownArgs'] auto_shutdown: An `auto_shutdown` block as defined below.
        :param pulumi.Input['LabConnectionSettingArgs'] connection_setting: A `connection_setting` block as defined below.
        :param pulumi.Input[str] description: The description of the Lab Service Lab.
        :param pulumi.Input[str] lab_plan_id: The resource ID of the Lab Plan that is used during resource creation to provide defaults and acts as a permission container when creating a Lab Service Lab via `labs.azure.com`.
        :param pulumi.Input[str] location: The Azure Region where the Lab Service Lab should exist. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: The name which should be used for this Lab Service Lab. Changing this forces a new resource to be created.
        :param pulumi.Input['LabNetworkArgs'] network: A `network` block as defined below.
        :param pulumi.Input['LabRosterArgs'] roster: A `roster` block as defined below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags which should be assigned to the Lab Service Lab.
        """
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "security", security)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "virtual_machine", virtual_machine)
        if auto_shutdown is not None:
            pulumi.set(__self__, "auto_shutdown", auto_shutdown)
        if connection_setting is not None:
            pulumi.set(__self__, "connection_setting", connection_setting)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if lab_plan_id is not None:
            pulumi.set(__self__, "lab_plan_id", lab_plan_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if roster is not None:
            pulumi.set(__self__, "roster", roster)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the Resource Group where the Lab Service Lab should exist. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter
    def security(self) -> pulumi.Input['LabSecurityArgs']:
        """
        A `security` block as defined below.
        """
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: pulumi.Input['LabSecurityArgs']):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The title of the Lab Service Lab.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="virtualMachine")
    def virtual_machine(self) -> pulumi.Input['LabVirtualMachineArgs']:
        """
        A `virtual_machine` block as defined below.
        """
        return pulumi.get(self, "virtual_machine")

    @virtual_machine.setter
    def virtual_machine(self, value: pulumi.Input['LabVirtualMachineArgs']):
        pulumi.set(self, "virtual_machine", value)

    @property
    @pulumi.getter(name="autoShutdown")
    def auto_shutdown(self) -> Optional[pulumi.Input['LabAutoShutdownArgs']]:
        """
        An `auto_shutdown` block as defined below.
        """
        return pulumi.get(self, "auto_shutdown")

    @auto_shutdown.setter
    def auto_shutdown(self, value: Optional[pulumi.Input['LabAutoShutdownArgs']]):
        pulumi.set(self, "auto_shutdown", value)

    @property
    @pulumi.getter(name="connectionSetting")
    def connection_setting(self) -> Optional[pulumi.Input['LabConnectionSettingArgs']]:
        """
        A `connection_setting` block as defined below.
        """
        return pulumi.get(self, "connection_setting")

    @connection_setting.setter
    def connection_setting(self, value: Optional[pulumi.Input['LabConnectionSettingArgs']]):
        pulumi.set(self, "connection_setting", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the Lab Service Lab.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="labPlanId")
    def lab_plan_id(self) -> Optional[pulumi.Input[str]]:
        """
        The resource ID of the Lab Plan that is used during resource creation to provide defaults and acts as a permission container when creating a Lab Service Lab via `labs.azure.com`.
        """
        return pulumi.get(self, "lab_plan_id")

    @lab_plan_id.setter
    def lab_plan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lab_plan_id", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The Azure Region where the Lab Service Lab should exist. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name which should be used for this Lab Service Lab. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input['LabNetworkArgs']]:
        """
        A `network` block as defined below.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input['LabNetworkArgs']]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def roster(self) -> Optional[pulumi.Input['LabRosterArgs']]:
        """
        A `roster` block as defined below.
        """
        return pulumi.get(self, "roster")

    @roster.setter
    def roster(self, value: Optional[pulumi.Input['LabRosterArgs']]):
        pulumi.set(self, "roster", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A mapping of tags which should be assigned to the Lab Service Lab.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _LabState:
    def __init__(__self__, *,
                 auto_shutdown: Optional[pulumi.Input['LabAutoShutdownArgs']] = None,
                 connection_setting: Optional[pulumi.Input['LabConnectionSettingArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 lab_plan_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input['LabNetworkArgs']] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 roster: Optional[pulumi.Input['LabRosterArgs']] = None,
                 security: Optional[pulumi.Input['LabSecurityArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 virtual_machine: Optional[pulumi.Input['LabVirtualMachineArgs']] = None):
        """
        Input properties used for looking up and filtering Lab resources.
        :param pulumi.Input['LabAutoShutdownArgs'] auto_shutdown: An `auto_shutdown` block as defined below.
        :param pulumi.Input['LabConnectionSettingArgs'] connection_setting: A `connection_setting` block as defined below.
        :param pulumi.Input[str] description: The description of the Lab Service Lab.
        :param pulumi.Input[str] lab_plan_id: The resource ID of the Lab Plan that is used during resource creation to provide defaults and acts as a permission container when creating a Lab Service Lab via `labs.azure.com`.
        :param pulumi.Input[str] location: The Azure Region where the Lab Service Lab should exist. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: The name which should be used for this Lab Service Lab. Changing this forces a new resource to be created.
        :param pulumi.Input['LabNetworkArgs'] network: A `network` block as defined below.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group where the Lab Service Lab should exist. Changing this forces a new resource to be created.
        :param pulumi.Input['LabRosterArgs'] roster: A `roster` block as defined below.
        :param pulumi.Input['LabSecurityArgs'] security: A `security` block as defined below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags which should be assigned to the Lab Service Lab.
        :param pulumi.Input[str] title: The title of the Lab Service Lab.
        :param pulumi.Input['LabVirtualMachineArgs'] virtual_machine: A `virtual_machine` block as defined below.
        """
        if auto_shutdown is not None:
            pulumi.set(__self__, "auto_shutdown", auto_shutdown)
        if connection_setting is not None:
            pulumi.set(__self__, "connection_setting", connection_setting)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if lab_plan_id is not None:
            pulumi.set(__self__, "lab_plan_id", lab_plan_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if roster is not None:
            pulumi.set(__self__, "roster", roster)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if virtual_machine is not None:
            pulumi.set(__self__, "virtual_machine", virtual_machine)

    @property
    @pulumi.getter(name="autoShutdown")
    def auto_shutdown(self) -> Optional[pulumi.Input['LabAutoShutdownArgs']]:
        """
        An `auto_shutdown` block as defined below.
        """
        return pulumi.get(self, "auto_shutdown")

    @auto_shutdown.setter
    def auto_shutdown(self, value: Optional[pulumi.Input['LabAutoShutdownArgs']]):
        pulumi.set(self, "auto_shutdown", value)

    @property
    @pulumi.getter(name="connectionSetting")
    def connection_setting(self) -> Optional[pulumi.Input['LabConnectionSettingArgs']]:
        """
        A `connection_setting` block as defined below.
        """
        return pulumi.get(self, "connection_setting")

    @connection_setting.setter
    def connection_setting(self, value: Optional[pulumi.Input['LabConnectionSettingArgs']]):
        pulumi.set(self, "connection_setting", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the Lab Service Lab.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="labPlanId")
    def lab_plan_id(self) -> Optional[pulumi.Input[str]]:
        """
        The resource ID of the Lab Plan that is used during resource creation to provide defaults and acts as a permission container when creating a Lab Service Lab via `labs.azure.com`.
        """
        return pulumi.get(self, "lab_plan_id")

    @lab_plan_id.setter
    def lab_plan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lab_plan_id", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The Azure Region where the Lab Service Lab should exist. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name which should be used for this Lab Service Lab. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input['LabNetworkArgs']]:
        """
        A `network` block as defined below.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input['LabNetworkArgs']]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Resource Group where the Lab Service Lab should exist. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter
    def roster(self) -> Optional[pulumi.Input['LabRosterArgs']]:
        """
        A `roster` block as defined below.
        """
        return pulumi.get(self, "roster")

    @roster.setter
    def roster(self, value: Optional[pulumi.Input['LabRosterArgs']]):
        pulumi.set(self, "roster", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input['LabSecurityArgs']]:
        """
        A `security` block as defined below.
        """
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input['LabSecurityArgs']]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A mapping of tags which should be assigned to the Lab Service Lab.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the Lab Service Lab.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="virtualMachine")
    def virtual_machine(self) -> Optional[pulumi.Input['LabVirtualMachineArgs']]:
        """
        A `virtual_machine` block as defined below.
        """
        return pulumi.get(self, "virtual_machine")

    @virtual_machine.setter
    def virtual_machine(self, value: Optional[pulumi.Input['LabVirtualMachineArgs']]):
        pulumi.set(self, "virtual_machine", value)


class Lab(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_shutdown: Optional[pulumi.Input[pulumi.InputType['LabAutoShutdownArgs']]] = None,
                 connection_setting: Optional[pulumi.Input[pulumi.InputType['LabConnectionSettingArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 lab_plan_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[pulumi.InputType['LabNetworkArgs']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 roster: Optional[pulumi.Input[pulumi.InputType['LabRosterArgs']]] = None,
                 security: Optional[pulumi.Input[pulumi.InputType['LabSecurityArgs']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 virtual_machine: Optional[pulumi.Input[pulumi.InputType['LabVirtualMachineArgs']]] = None,
                 __props__=None):
        """
        Manages a Lab Service Lab.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_lab = azure.lab.Lab("exampleLab",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            title="Test Title",
            security=azure.lab.LabSecurityArgs(
                open_access_enabled=False,
            ),
            virtual_machine=azure.lab.LabVirtualMachineArgs(
                admin_user=azure.lab.LabVirtualMachineAdminUserArgs(
                    username="testadmin",
                    password="Password1234!",
                ),
                image_reference=azure.lab.LabVirtualMachineImageReferenceArgs(
                    offer="0001-com-ubuntu-server-focal",
                    publisher="canonical",
                    sku="20_04-lts",
                    version="latest",
                ),
                sku=azure.lab.LabVirtualMachineSkuArgs(
                    name="Classic_Fsv2_2_4GB_128_S_SSD",
                    capacity=0,
                ),
            ))
        ```

        ## Import

        Lab Service Labs can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:lab/lab:Lab example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.LabServices/labs/lab1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['LabAutoShutdownArgs']] auto_shutdown: An `auto_shutdown` block as defined below.
        :param pulumi.Input[pulumi.InputType['LabConnectionSettingArgs']] connection_setting: A `connection_setting` block as defined below.
        :param pulumi.Input[str] description: The description of the Lab Service Lab.
        :param pulumi.Input[str] lab_plan_id: The resource ID of the Lab Plan that is used during resource creation to provide defaults and acts as a permission container when creating a Lab Service Lab via `labs.azure.com`.
        :param pulumi.Input[str] location: The Azure Region where the Lab Service Lab should exist. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: The name which should be used for this Lab Service Lab. Changing this forces a new resource to be created.
        :param pulumi.Input[pulumi.InputType['LabNetworkArgs']] network: A `network` block as defined below.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group where the Lab Service Lab should exist. Changing this forces a new resource to be created.
        :param pulumi.Input[pulumi.InputType['LabRosterArgs']] roster: A `roster` block as defined below.
        :param pulumi.Input[pulumi.InputType['LabSecurityArgs']] security: A `security` block as defined below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags which should be assigned to the Lab Service Lab.
        :param pulumi.Input[str] title: The title of the Lab Service Lab.
        :param pulumi.Input[pulumi.InputType['LabVirtualMachineArgs']] virtual_machine: A `virtual_machine` block as defined below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LabArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Lab Service Lab.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_lab = azure.lab.Lab("exampleLab",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            title="Test Title",
            security=azure.lab.LabSecurityArgs(
                open_access_enabled=False,
            ),
            virtual_machine=azure.lab.LabVirtualMachineArgs(
                admin_user=azure.lab.LabVirtualMachineAdminUserArgs(
                    username="testadmin",
                    password="Password1234!",
                ),
                image_reference=azure.lab.LabVirtualMachineImageReferenceArgs(
                    offer="0001-com-ubuntu-server-focal",
                    publisher="canonical",
                    sku="20_04-lts",
                    version="latest",
                ),
                sku=azure.lab.LabVirtualMachineSkuArgs(
                    name="Classic_Fsv2_2_4GB_128_S_SSD",
                    capacity=0,
                ),
            ))
        ```

        ## Import

        Lab Service Labs can be imported using the `resource id`, e.g.

        ```sh
         $ pulumi import azure:lab/lab:Lab example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.LabServices/labs/lab1
        ```

        :param str resource_name: The name of the resource.
        :param LabArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LabArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_shutdown: Optional[pulumi.Input[pulumi.InputType['LabAutoShutdownArgs']]] = None,
                 connection_setting: Optional[pulumi.Input[pulumi.InputType['LabConnectionSettingArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 lab_plan_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[pulumi.InputType['LabNetworkArgs']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 roster: Optional[pulumi.Input[pulumi.InputType['LabRosterArgs']]] = None,
                 security: Optional[pulumi.Input[pulumi.InputType['LabSecurityArgs']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 virtual_machine: Optional[pulumi.Input[pulumi.InputType['LabVirtualMachineArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LabArgs.__new__(LabArgs)

            __props__.__dict__["auto_shutdown"] = auto_shutdown
            __props__.__dict__["connection_setting"] = connection_setting
            __props__.__dict__["description"] = description
            __props__.__dict__["lab_plan_id"] = lab_plan_id
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            __props__.__dict__["network"] = network
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["roster"] = roster
            if security is None and not opts.urn:
                raise TypeError("Missing required property 'security'")
            __props__.__dict__["security"] = security
            __props__.__dict__["tags"] = tags
            if title is None and not opts.urn:
                raise TypeError("Missing required property 'title'")
            __props__.__dict__["title"] = title
            if virtual_machine is None and not opts.urn:
                raise TypeError("Missing required property 'virtual_machine'")
            __props__.__dict__["virtual_machine"] = virtual_machine
        super(Lab, __self__).__init__(
            'azure:lab/lab:Lab',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_shutdown: Optional[pulumi.Input[pulumi.InputType['LabAutoShutdownArgs']]] = None,
            connection_setting: Optional[pulumi.Input[pulumi.InputType['LabConnectionSettingArgs']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            lab_plan_id: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network: Optional[pulumi.Input[pulumi.InputType['LabNetworkArgs']]] = None,
            resource_group_name: Optional[pulumi.Input[str]] = None,
            roster: Optional[pulumi.Input[pulumi.InputType['LabRosterArgs']]] = None,
            security: Optional[pulumi.Input[pulumi.InputType['LabSecurityArgs']]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            title: Optional[pulumi.Input[str]] = None,
            virtual_machine: Optional[pulumi.Input[pulumi.InputType['LabVirtualMachineArgs']]] = None) -> 'Lab':
        """
        Get an existing Lab resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['LabAutoShutdownArgs']] auto_shutdown: An `auto_shutdown` block as defined below.
        :param pulumi.Input[pulumi.InputType['LabConnectionSettingArgs']] connection_setting: A `connection_setting` block as defined below.
        :param pulumi.Input[str] description: The description of the Lab Service Lab.
        :param pulumi.Input[str] lab_plan_id: The resource ID of the Lab Plan that is used during resource creation to provide defaults and acts as a permission container when creating a Lab Service Lab via `labs.azure.com`.
        :param pulumi.Input[str] location: The Azure Region where the Lab Service Lab should exist. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: The name which should be used for this Lab Service Lab. Changing this forces a new resource to be created.
        :param pulumi.Input[pulumi.InputType['LabNetworkArgs']] network: A `network` block as defined below.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group where the Lab Service Lab should exist. Changing this forces a new resource to be created.
        :param pulumi.Input[pulumi.InputType['LabRosterArgs']] roster: A `roster` block as defined below.
        :param pulumi.Input[pulumi.InputType['LabSecurityArgs']] security: A `security` block as defined below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags which should be assigned to the Lab Service Lab.
        :param pulumi.Input[str] title: The title of the Lab Service Lab.
        :param pulumi.Input[pulumi.InputType['LabVirtualMachineArgs']] virtual_machine: A `virtual_machine` block as defined below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LabState.__new__(_LabState)

        __props__.__dict__["auto_shutdown"] = auto_shutdown
        __props__.__dict__["connection_setting"] = connection_setting
        __props__.__dict__["description"] = description
        __props__.__dict__["lab_plan_id"] = lab_plan_id
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["network"] = network
        __props__.__dict__["resource_group_name"] = resource_group_name
        __props__.__dict__["roster"] = roster
        __props__.__dict__["security"] = security
        __props__.__dict__["tags"] = tags
        __props__.__dict__["title"] = title
        __props__.__dict__["virtual_machine"] = virtual_machine
        return Lab(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoShutdown")
    def auto_shutdown(self) -> pulumi.Output[Optional['outputs.LabAutoShutdown']]:
        """
        An `auto_shutdown` block as defined below.
        """
        return pulumi.get(self, "auto_shutdown")

    @property
    @pulumi.getter(name="connectionSetting")
    def connection_setting(self) -> pulumi.Output[Optional['outputs.LabConnectionSetting']]:
        """
        A `connection_setting` block as defined below.
        """
        return pulumi.get(self, "connection_setting")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the Lab Service Lab.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="labPlanId")
    def lab_plan_id(self) -> pulumi.Output[Optional[str]]:
        """
        The resource ID of the Lab Plan that is used during resource creation to provide defaults and acts as a permission container when creating a Lab Service Lab via `labs.azure.com`.
        """
        return pulumi.get(self, "lab_plan_id")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The Azure Region where the Lab Service Lab should exist. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name which should be used for this Lab Service Lab. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> pulumi.Output[Optional['outputs.LabNetwork']]:
        """
        A `network` block as defined below.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[str]:
        """
        The name of the Resource Group where the Lab Service Lab should exist. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter
    def roster(self) -> pulumi.Output[Optional['outputs.LabRoster']]:
        """
        A `roster` block as defined below.
        """
        return pulumi.get(self, "roster")

    @property
    @pulumi.getter
    def security(self) -> pulumi.Output['outputs.LabSecurity']:
        """
        A `security` block as defined below.
        """
        return pulumi.get(self, "security")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A mapping of tags which should be assigned to the Lab Service Lab.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[str]:
        """
        The title of the Lab Service Lab.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="virtualMachine")
    def virtual_machine(self) -> pulumi.Output['outputs.LabVirtualMachine']:
        """
        A `virtual_machine` block as defined below.
        """
        return pulumi.get(self, "virtual_machine")

