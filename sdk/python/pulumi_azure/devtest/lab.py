# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Lab(pulumi.CustomResource):
    """
    Manages a Dev Test Lab.
    """
    def __init__(__self__, __name__, __opts__=None, location=None, name=None, resource_group_name=None, storage_type=None, tags=None):
        """Create a Lab resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not location:
            raise TypeError('Missing required property location')
        elif not isinstance(location, basestring):
            raise TypeError('Expected property location to be a basestring')
        __self__.location = location
        """
        Specifies the supported Azure location where the Dev Test Lab should exist. Changing this forces a new resource to be created.
        """
        __props__['location'] = location

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        Specifies the name of the Dev Test Lab. Changing this forces a new resource to be created.
        """
        __props__['name'] = name

        if not resource_group_name:
            raise TypeError('Missing required property resource_group_name')
        elif not isinstance(resource_group_name, basestring):
            raise TypeError('Expected property resource_group_name to be a basestring')
        __self__.resource_group_name = resource_group_name
        """
        The name of the resource group under which the Dev Test Lab resource has to be created. Changing this forces a new resource to be created.
        """
        __props__['resourceGroupName'] = resource_group_name

        if storage_type and not isinstance(storage_type, basestring):
            raise TypeError('Expected property storage_type to be a basestring')
        __self__.storage_type = storage_type
        """
        The type of storage used by the Dev Test Lab. Possible values are `Standard` and `Premium`. Defaults to `Premium`. Changing this forces a new resource to be created.
        """
        __props__['storageType'] = storage_type

        if tags and not isinstance(tags, dict):
            raise TypeError('Expected property tags to be a dict')
        __self__.tags = tags
        """
        A mapping of tags to assign to the resource.
        """
        __props__['tags'] = tags

        __self__.artifacts_storage_account_id = pulumi.runtime.UNKNOWN
        """
        The ID of the Storage Account used for Artifact Storage.
        """
        __self__.default_premium_storage_account_id = pulumi.runtime.UNKNOWN
        """
        The ID of the Default Premium Storage Account for this Dev Test Lab.
        """
        __self__.default_storage_account_id = pulumi.runtime.UNKNOWN
        """
        The ID of the Default Storage Account for this Dev Test Lab.
        """
        __self__.key_vault_id = pulumi.runtime.UNKNOWN
        """
        The ID of the Key used for this Dev Test Lab.
        """
        __self__.premium_data_disk_storage_account_id = pulumi.runtime.UNKNOWN
        """
        The ID of the Storage Account used for Storage of Premium Data Disk.
        """
        __self__.unique_identifier = pulumi.runtime.UNKNOWN
        """
        The unique immutable identifier of the Dev Test Lab.
        """

        super(Lab, __self__).__init__(
            'azure:devtest/lab:Lab',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'artifactsStorageAccountId' in outs:
            self.artifacts_storage_account_id = outs['artifactsStorageAccountId']
        if 'defaultPremiumStorageAccountId' in outs:
            self.default_premium_storage_account_id = outs['defaultPremiumStorageAccountId']
        if 'defaultStorageAccountId' in outs:
            self.default_storage_account_id = outs['defaultStorageAccountId']
        if 'keyVaultId' in outs:
            self.key_vault_id = outs['keyVaultId']
        if 'location' in outs:
            self.location = outs['location']
        if 'name' in outs:
            self.name = outs['name']
        if 'premiumDataDiskStorageAccountId' in outs:
            self.premium_data_disk_storage_account_id = outs['premiumDataDiskStorageAccountId']
        if 'resourceGroupName' in outs:
            self.resource_group_name = outs['resourceGroupName']
        if 'storageType' in outs:
            self.storage_type = outs['storageType']
        if 'tags' in outs:
            self.tags = outs['tags']
        if 'uniqueIdentifier' in outs:
            self.unique_identifier = outs['uniqueIdentifier']
