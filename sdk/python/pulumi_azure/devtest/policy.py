# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities, tables

class Policy(pulumi.CustomResource):
    """
    Manages a Policy within a Dev Test Policy Set.
    """
    def __init__(__self__, __name__, __opts__=None, description=None, evaluator_type=None, fact_data=None, lab_name=None, name=None, policy_set_name=None, resource_group_name=None, tags=None, threshold=None):
        """Create a Policy resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['description'] = description

        if not evaluator_type:
            raise TypeError('Missing required property evaluator_type')
        __props__['evaluator_type'] = evaluator_type

        __props__['fact_data'] = fact_data

        if not lab_name:
            raise TypeError('Missing required property lab_name')
        __props__['lab_name'] = lab_name

        __props__['name'] = name

        if not policy_set_name:
            raise TypeError('Missing required property policy_set_name')
        __props__['policy_set_name'] = policy_set_name

        if not resource_group_name:
            raise TypeError('Missing required property resource_group_name')
        __props__['resource_group_name'] = resource_group_name

        __props__['tags'] = tags

        if not threshold:
            raise TypeError('Missing required property threshold')
        __props__['threshold'] = threshold

        super(Policy, __self__).__init__(
            'azure:devtest/policy:Policy',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

