// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AaaaRecordArgs, AaaaRecordState } from "./aaaaRecord";
export type AaaaRecord = import("./aaaaRecord").AaaaRecord;
export const AaaaRecord: typeof import("./aaaaRecord").AaaaRecord = null as any;
utilities.lazyLoad(exports, ["AaaaRecord"], () => require("./aaaaRecord"));

export { ARecordArgs, ARecordState } from "./arecord";
export type ARecord = import("./arecord").ARecord;
export const ARecord: typeof import("./arecord").ARecord = null as any;
utilities.lazyLoad(exports, ["ARecord"], () => require("./arecord"));

export { CaaRecordArgs, CaaRecordState } from "./caaRecord";
export type CaaRecord = import("./caaRecord").CaaRecord;
export const CaaRecord: typeof import("./caaRecord").CaaRecord = null as any;
utilities.lazyLoad(exports, ["CaaRecord"], () => require("./caaRecord"));

export { CNameRecordArgs, CNameRecordState } from "./cnameRecord";
export type CNameRecord = import("./cnameRecord").CNameRecord;
export const CNameRecord: typeof import("./cnameRecord").CNameRecord = null as any;
utilities.lazyLoad(exports, ["CNameRecord"], () => require("./cnameRecord"));

export { GetAAAARecordArgs, GetAAAARecordResult, GetAAAARecordOutputArgs } from "./getAAAARecord";
export const getAAAARecord: typeof import("./getAAAARecord").getAAAARecord = null as any;
export const getAAAARecordOutput: typeof import("./getAAAARecord").getAAAARecordOutput = null as any;
utilities.lazyLoad(exports, ["getAAAARecord","getAAAARecordOutput"], () => require("./getAAAARecord"));

export { GetARecordArgs, GetARecordResult, GetARecordOutputArgs } from "./getARecord";
export const getARecord: typeof import("./getARecord").getARecord = null as any;
export const getARecordOutput: typeof import("./getARecord").getARecordOutput = null as any;
utilities.lazyLoad(exports, ["getARecord","getARecordOutput"], () => require("./getARecord"));

export { GetCAARecordArgs, GetCAARecordResult, GetCAARecordOutputArgs } from "./getCAARecord";
export const getCAARecord: typeof import("./getCAARecord").getCAARecord = null as any;
export const getCAARecordOutput: typeof import("./getCAARecord").getCAARecordOutput = null as any;
utilities.lazyLoad(exports, ["getCAARecord","getCAARecordOutput"], () => require("./getCAARecord"));

export { GetCnameRecordArgs, GetCnameRecordResult, GetCnameRecordOutputArgs } from "./getCnameRecord";
export const getCnameRecord: typeof import("./getCnameRecord").getCnameRecord = null as any;
export const getCnameRecordOutput: typeof import("./getCnameRecord").getCnameRecordOutput = null as any;
utilities.lazyLoad(exports, ["getCnameRecord","getCnameRecordOutput"], () => require("./getCnameRecord"));

export { GetMxRecordArgs, GetMxRecordResult, GetMxRecordOutputArgs } from "./getMxRecord";
export const getMxRecord: typeof import("./getMxRecord").getMxRecord = null as any;
export const getMxRecordOutput: typeof import("./getMxRecord").getMxRecordOutput = null as any;
utilities.lazyLoad(exports, ["getMxRecord","getMxRecordOutput"], () => require("./getMxRecord"));

export { GetNsRecordArgs, GetNsRecordResult, GetNsRecordOutputArgs } from "./getNsRecord";
export const getNsRecord: typeof import("./getNsRecord").getNsRecord = null as any;
export const getNsRecordOutput: typeof import("./getNsRecord").getNsRecordOutput = null as any;
utilities.lazyLoad(exports, ["getNsRecord","getNsRecordOutput"], () => require("./getNsRecord"));

export { GetPtrRecordArgs, GetPtrRecordResult, GetPtrRecordOutputArgs } from "./getPtrRecord";
export const getPtrRecord: typeof import("./getPtrRecord").getPtrRecord = null as any;
export const getPtrRecordOutput: typeof import("./getPtrRecord").getPtrRecordOutput = null as any;
utilities.lazyLoad(exports, ["getPtrRecord","getPtrRecordOutput"], () => require("./getPtrRecord"));

export { GetSoaRecordArgs, GetSoaRecordResult, GetSoaRecordOutputArgs } from "./getSoaRecord";
export const getSoaRecord: typeof import("./getSoaRecord").getSoaRecord = null as any;
export const getSoaRecordOutput: typeof import("./getSoaRecord").getSoaRecordOutput = null as any;
utilities.lazyLoad(exports, ["getSoaRecord","getSoaRecordOutput"], () => require("./getSoaRecord"));

export { GetSrvRecordArgs, GetSrvRecordResult, GetSrvRecordOutputArgs } from "./getSrvRecord";
export const getSrvRecord: typeof import("./getSrvRecord").getSrvRecord = null as any;
export const getSrvRecordOutput: typeof import("./getSrvRecord").getSrvRecordOutput = null as any;
utilities.lazyLoad(exports, ["getSrvRecord","getSrvRecordOutput"], () => require("./getSrvRecord"));

export { GetTxtRecordArgs, GetTxtRecordResult, GetTxtRecordOutputArgs } from "./getTxtRecord";
export const getTxtRecord: typeof import("./getTxtRecord").getTxtRecord = null as any;
export const getTxtRecordOutput: typeof import("./getTxtRecord").getTxtRecordOutput = null as any;
utilities.lazyLoad(exports, ["getTxtRecord","getTxtRecordOutput"], () => require("./getTxtRecord"));

export { GetZoneArgs, GetZoneResult, GetZoneOutputArgs } from "./getZone";
export const getZone: typeof import("./getZone").getZone = null as any;
export const getZoneOutput: typeof import("./getZone").getZoneOutput = null as any;
utilities.lazyLoad(exports, ["getZone","getZoneOutput"], () => require("./getZone"));

export { MxRecordArgs, MxRecordState } from "./mxRecord";
export type MxRecord = import("./mxRecord").MxRecord;
export const MxRecord: typeof import("./mxRecord").MxRecord = null as any;
utilities.lazyLoad(exports, ["MxRecord"], () => require("./mxRecord"));

export { NsRecordArgs, NsRecordState } from "./nsRecord";
export type NsRecord = import("./nsRecord").NsRecord;
export const NsRecord: typeof import("./nsRecord").NsRecord = null as any;
utilities.lazyLoad(exports, ["NsRecord"], () => require("./nsRecord"));

export { PtrRecordArgs, PtrRecordState } from "./ptrRecord";
export type PtrRecord = import("./ptrRecord").PtrRecord;
export const PtrRecord: typeof import("./ptrRecord").PtrRecord = null as any;
utilities.lazyLoad(exports, ["PtrRecord"], () => require("./ptrRecord"));

export { SrvRecordArgs, SrvRecordState } from "./srvRecord";
export type SrvRecord = import("./srvRecord").SrvRecord;
export const SrvRecord: typeof import("./srvRecord").SrvRecord = null as any;
utilities.lazyLoad(exports, ["SrvRecord"], () => require("./srvRecord"));

export { TxtRecordArgs, TxtRecordState } from "./txtRecord";
export type TxtRecord = import("./txtRecord").TxtRecord;
export const TxtRecord: typeof import("./txtRecord").TxtRecord = null as any;
utilities.lazyLoad(exports, ["TxtRecord"], () => require("./txtRecord"));

export { ZoneArgs, ZoneState } from "./zone";
export type Zone = import("./zone").Zone;
export const Zone: typeof import("./zone").Zone = null as any;
utilities.lazyLoad(exports, ["Zone"], () => require("./zone"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:dns/aRecord:ARecord":
                return new ARecord(name, <any>undefined, { urn })
            case "azure:dns/aaaaRecord:AaaaRecord":
                return new AaaaRecord(name, <any>undefined, { urn })
            case "azure:dns/cNameRecord:CNameRecord":
                return new CNameRecord(name, <any>undefined, { urn })
            case "azure:dns/caaRecord:CaaRecord":
                return new CaaRecord(name, <any>undefined, { urn })
            case "azure:dns/mxRecord:MxRecord":
                return new MxRecord(name, <any>undefined, { urn })
            case "azure:dns/nsRecord:NsRecord":
                return new NsRecord(name, <any>undefined, { urn })
            case "azure:dns/ptrRecord:PtrRecord":
                return new PtrRecord(name, <any>undefined, { urn })
            case "azure:dns/srvRecord:SrvRecord":
                return new SrvRecord(name, <any>undefined, { urn })
            case "azure:dns/txtRecord:TxtRecord":
                return new TxtRecord(name, <any>undefined, { urn })
            case "azure:dns/zone:Zone":
                return new Zone(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "dns/aRecord", _module)
pulumi.runtime.registerResourceModule("azure", "dns/aaaaRecord", _module)
pulumi.runtime.registerResourceModule("azure", "dns/cNameRecord", _module)
pulumi.runtime.registerResourceModule("azure", "dns/caaRecord", _module)
pulumi.runtime.registerResourceModule("azure", "dns/mxRecord", _module)
pulumi.runtime.registerResourceModule("azure", "dns/nsRecord", _module)
pulumi.runtime.registerResourceModule("azure", "dns/ptrRecord", _module)
pulumi.runtime.registerResourceModule("azure", "dns/srvRecord", _module)
pulumi.runtime.registerResourceModule("azure", "dns/txtRecord", _module)
pulumi.runtime.registerResourceModule("azure", "dns/zone", _module)
