// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Data Share.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleAccount = new azure.datashare.Account("example", {
 *     name: "example-dsa",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 * const exampleShare = new azure.datashare.Share("example", {
 *     name: "example_dss",
 *     accountId: exampleAccount.id,
 *     kind: "CopyBased",
 *     description: "example desc",
 *     terms: "example terms",
 *     snapshotSchedule: {
 *         name: "example-ss",
 *         recurrence: "Day",
 *         startTime: "2020-04-17T04:47:52.9614956Z",
 *     },
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.DataShare` - 2019-11-01
 *
 * ## Import
 *
 * Data Shares can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:datashare/share:Share example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataShare/accounts/account1/shares/share1
 * ```
 */
export class Share extends pulumi.CustomResource {
    /**
     * Get an existing Share resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ShareState, opts?: pulumi.CustomResourceOptions): Share {
        return new Share(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:datashare/share:Share';

    /**
     * Returns true if the given object is an instance of Share.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Share {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Share.__pulumiType;
    }

    /**
     * The ID of the Data Share account in which the Data Share is created. Changing this forces a new Data Share to be created.
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * The Data Share's description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The kind of the Data Share. Possible values are `CopyBased` and `InPlace`. Changing this forces a new Data Share to be created.
     */
    declare public readonly kind: pulumi.Output<string>;
    /**
     * The name which should be used for this Data Share. Changing this forces a new Data Share to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * A `snapshotSchedule` block as defined below.
     */
    declare public readonly snapshotSchedule: pulumi.Output<outputs.datashare.ShareSnapshotSchedule | undefined>;
    /**
     * The terms of the Data Share.
     */
    declare public readonly terms: pulumi.Output<string | undefined>;

    /**
     * Create a Share resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ShareArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ShareArgs | ShareState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ShareState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["description"] = state?.description;
            resourceInputs["kind"] = state?.kind;
            resourceInputs["name"] = state?.name;
            resourceInputs["snapshotSchedule"] = state?.snapshotSchedule;
            resourceInputs["terms"] = state?.terms;
        } else {
            const args = argsOrState as ShareArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.kind === undefined && !opts.urn) {
                throw new Error("Missing required property 'kind'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["description"] = args?.description;
            resourceInputs["kind"] = args?.kind;
            resourceInputs["name"] = args?.name;
            resourceInputs["snapshotSchedule"] = args?.snapshotSchedule;
            resourceInputs["terms"] = args?.terms;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Share.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Share resources.
 */
export interface ShareState {
    /**
     * The ID of the Data Share account in which the Data Share is created. Changing this forces a new Data Share to be created.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The Data Share's description.
     */
    description?: pulumi.Input<string>;
    /**
     * The kind of the Data Share. Possible values are `CopyBased` and `InPlace`. Changing this forces a new Data Share to be created.
     */
    kind?: pulumi.Input<string>;
    /**
     * The name which should be used for this Data Share. Changing this forces a new Data Share to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A `snapshotSchedule` block as defined below.
     */
    snapshotSchedule?: pulumi.Input<inputs.datashare.ShareSnapshotSchedule>;
    /**
     * The terms of the Data Share.
     */
    terms?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Share resource.
 */
export interface ShareArgs {
    /**
     * The ID of the Data Share account in which the Data Share is created. Changing this forces a new Data Share to be created.
     */
    accountId: pulumi.Input<string>;
    /**
     * The Data Share's description.
     */
    description?: pulumi.Input<string>;
    /**
     * The kind of the Data Share. Possible values are `CopyBased` and `InPlace`. Changing this forces a new Data Share to be created.
     */
    kind: pulumi.Input<string>;
    /**
     * The name which should be used for this Data Share. Changing this forces a new Data Share to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A `snapshotSchedule` block as defined below.
     */
    snapshotSchedule?: pulumi.Input<inputs.datashare.ShareSnapshotSchedule>;
    /**
     * The terms of the Data Share.
     */
    terms?: pulumi.Input<string>;
}
