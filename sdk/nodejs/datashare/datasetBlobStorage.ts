// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Data Share Blob Storage Dataset.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as azuread from "@pulumi/azuread";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleAccount = new azure.datashare.Account("example", {
 *     name: "example-dsa",
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * const exampleShare = new azure.datashare.Share("example", {
 *     name: "example_ds",
 *     accountId: exampleAccount.id,
 *     kind: "CopyBased",
 * });
 * const exampleAccount2 = new azure.storage.Account("example", {
 *     name: "examplestr",
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "RAGRS",
 * });
 * const exampleContainer = new azure.storage.Container("example", {
 *     name: "example-sc",
 *     storageAccountName: exampleAccount2.name,
 *     containerAccessType: "container",
 * });
 * const example = azuread.getServicePrincipalOutput({
 *     displayName: exampleAccount.name,
 * });
 * const exampleAssignment = new azure.authorization.Assignment("example", {
 *     scope: exampleAccount2.id,
 *     roleDefinitionName: "Storage Blob Data Reader",
 *     principalId: example.apply(example => example.objectId),
 * });
 * const exampleDatasetBlobStorage = new azure.datashare.DatasetBlobStorage("example", {
 *     name: "example-dsbsds-file",
 *     dataShareId: exampleShare.id,
 *     containerName: exampleContainer.name,
 *     storageAccount: {
 *         name: exampleAccount2.name,
 *         resourceGroupName: exampleAccount2.resourceGroupName,
 *         subscriptionId: "00000000-0000-0000-0000-000000000000",
 *     },
 *     filePath: "myfile.txt",
 * }, {
 *     dependsOn: [exampleAssignment],
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.DataShare` - 2019-11-01
 *
 * ## Import
 *
 * Data Share Blob Storage Datasets can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:datashare/datasetBlobStorage:DatasetBlobStorage example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataShare/accounts/account1/shares/share1/dataSets/dataSet1
 * ```
 */
export class DatasetBlobStorage extends pulumi.CustomResource {
    /**
     * Get an existing DatasetBlobStorage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatasetBlobStorageState, opts?: pulumi.CustomResourceOptions): DatasetBlobStorage {
        return new DatasetBlobStorage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:datashare/datasetBlobStorage:DatasetBlobStorage';

    /**
     * Returns true if the given object is an instance of DatasetBlobStorage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatasetBlobStorage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatasetBlobStorage.__pulumiType;
    }

    /**
     * The name of the storage account container to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    declare public readonly containerName: pulumi.Output<string>;
    /**
     * The ID of the Data Share in which this Data Share Blob Storage Dataset should be created. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    declare public readonly dataShareId: pulumi.Output<string>;
    /**
     * The name of the Data Share Dataset.
     */
    declare public /*out*/ readonly displayName: pulumi.Output<string>;
    /**
     * The path of the file in the storage container to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    declare public readonly filePath: pulumi.Output<string | undefined>;
    /**
     * The path of the folder in the storage container to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    declare public readonly folderPath: pulumi.Output<string | undefined>;
    /**
     * The name which should be used for this Data Share Blob Storage Dataset. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * A `storageAccount` block as defined below. Changing this forces a new resource to be created.
     */
    declare public readonly storageAccount: pulumi.Output<outputs.datashare.DatasetBlobStorageStorageAccount>;

    /**
     * Create a DatasetBlobStorage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatasetBlobStorageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatasetBlobStorageArgs | DatasetBlobStorageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatasetBlobStorageState | undefined;
            resourceInputs["containerName"] = state?.containerName;
            resourceInputs["dataShareId"] = state?.dataShareId;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["filePath"] = state?.filePath;
            resourceInputs["folderPath"] = state?.folderPath;
            resourceInputs["name"] = state?.name;
            resourceInputs["storageAccount"] = state?.storageAccount;
        } else {
            const args = argsOrState as DatasetBlobStorageArgs | undefined;
            if (args?.containerName === undefined && !opts.urn) {
                throw new Error("Missing required property 'containerName'");
            }
            if (args?.dataShareId === undefined && !opts.urn) {
                throw new Error("Missing required property 'dataShareId'");
            }
            if (args?.storageAccount === undefined && !opts.urn) {
                throw new Error("Missing required property 'storageAccount'");
            }
            resourceInputs["containerName"] = args?.containerName;
            resourceInputs["dataShareId"] = args?.dataShareId;
            resourceInputs["filePath"] = args?.filePath;
            resourceInputs["folderPath"] = args?.folderPath;
            resourceInputs["name"] = args?.name;
            resourceInputs["storageAccount"] = args?.storageAccount;
            resourceInputs["displayName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatasetBlobStorage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DatasetBlobStorage resources.
 */
export interface DatasetBlobStorageState {
    /**
     * The name of the storage account container to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    containerName?: pulumi.Input<string>;
    /**
     * The ID of the Data Share in which this Data Share Blob Storage Dataset should be created. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    dataShareId?: pulumi.Input<string>;
    /**
     * The name of the Data Share Dataset.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The path of the file in the storage container to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    filePath?: pulumi.Input<string>;
    /**
     * The path of the folder in the storage container to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    folderPath?: pulumi.Input<string>;
    /**
     * The name which should be used for this Data Share Blob Storage Dataset. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A `storageAccount` block as defined below. Changing this forces a new resource to be created.
     */
    storageAccount?: pulumi.Input<inputs.datashare.DatasetBlobStorageStorageAccount>;
}

/**
 * The set of arguments for constructing a DatasetBlobStorage resource.
 */
export interface DatasetBlobStorageArgs {
    /**
     * The name of the storage account container to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    containerName: pulumi.Input<string>;
    /**
     * The ID of the Data Share in which this Data Share Blob Storage Dataset should be created. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    dataShareId: pulumi.Input<string>;
    /**
     * The path of the file in the storage container to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    filePath?: pulumi.Input<string>;
    /**
     * The path of the folder in the storage container to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    folderPath?: pulumi.Input<string>;
    /**
     * The name which should be used for this Data Share Blob Storage Dataset. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A `storageAccount` block as defined below. Changing this forces a new resource to be created.
     */
    storageAccount: pulumi.Input<inputs.datashare.DatasetBlobStorageStorageAccount>;
}
