// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Manages a Data Share Blob Storage Dataset.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as azuread from "@pulumi/azuread";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.datashare.Account("exampleAccount", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * const exampleShare = new azure.datashare.Share("exampleShare", {
 *     accountId: exampleAccount.id,
 *     kind: "CopyBased",
 * });
 * const exampleStorage_accountAccount = new azure.storage.Account("exampleStorage/accountAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "RAGRS",
 * });
 * const exampleContainer = new azure.storage.Container("exampleContainer", {
 *     storageAccountName: exampleStorage / accountAccount.name,
 *     containerAccessType: "container",
 * });
 * const exampleServicePrincipal = exampleAccount.name.apply(name => azuread.getServicePrincipal({
 *     displayName: name,
 * }));
 * const exampleAssignment = new azure.authorization.Assignment("exampleAssignment", {
 *     scope: exampleStorage / accountAccount.id,
 *     roleDefinitionName: "Storage Blob Data Reader",
 *     principalId: exampleServicePrincipal.objectId,
 * });
 * const exampleDatasetBlobStorage = new azure.datashare.DatasetBlobStorage("exampleDatasetBlobStorage", {
 *     dataShareId: exampleShare.id,
 *     containerName: exampleContainer.name,
 *     storageAccount: {
 *         name: exampleStorage / accountAccount.name,
 *         resourceGroupName: exampleStorage / accountAccount.resourceGroupName,
 *         subscriptionId: "00000000-0000-0000-0000-000000000000",
 *     },
 *     filePath: "myfile.txt",
 * }, {
 *     dependsOn: [exampleAssignment],
 * });
 * ```
 *
 * ## Import
 *
 * Data Share Blob Storage Datasets can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:datashare/datasetBlobStorage:DatasetBlobStorage example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataShare/accounts/account1/shares/share1/dataSets/dataSet1
 * ```
 */
export class DatasetBlobStorage extends pulumi.CustomResource {
    /**
     * Get an existing DatasetBlobStorage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatasetBlobStorageState, opts?: pulumi.CustomResourceOptions): DatasetBlobStorage {
        return new DatasetBlobStorage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:datashare/datasetBlobStorage:DatasetBlobStorage';

    /**
     * Returns true if the given object is an instance of DatasetBlobStorage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatasetBlobStorage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatasetBlobStorage.__pulumiType;
    }

    /**
     * The name of the storage account container to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    public readonly containerName!: pulumi.Output<string>;
    /**
     * The ID of the Data Share in which this Data Share Blob Storage Dataset should be created. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    public readonly dataShareId!: pulumi.Output<string>;
    /**
     * The name of the Data Share Dataset.
     */
    public /*out*/ readonly displayName!: pulumi.Output<string>;
    /**
     * The path of the file in the storage container to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    public readonly filePath!: pulumi.Output<string | undefined>;
    /**
     * The path of the folder in the storage container to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    public readonly folderPath!: pulumi.Output<string | undefined>;
    /**
     * The name which should be used for this Data Share Blob Storage Dataset. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A `storageAccount` block as defined below.
     */
    public readonly storageAccount!: pulumi.Output<outputs.datashare.DatasetBlobStorageStorageAccount>;

    /**
     * Create a DatasetBlobStorage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatasetBlobStorageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatasetBlobStorageArgs | DatasetBlobStorageState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatasetBlobStorageState | undefined;
            inputs["containerName"] = state ? state.containerName : undefined;
            inputs["dataShareId"] = state ? state.dataShareId : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["filePath"] = state ? state.filePath : undefined;
            inputs["folderPath"] = state ? state.folderPath : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["storageAccount"] = state ? state.storageAccount : undefined;
        } else {
            const args = argsOrState as DatasetBlobStorageArgs | undefined;
            if ((!args || args.containerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerName'");
            }
            if ((!args || args.dataShareId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataShareId'");
            }
            if ((!args || args.storageAccount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageAccount'");
            }
            inputs["containerName"] = args ? args.containerName : undefined;
            inputs["dataShareId"] = args ? args.dataShareId : undefined;
            inputs["filePath"] = args ? args.filePath : undefined;
            inputs["folderPath"] = args ? args.folderPath : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["storageAccount"] = args ? args.storageAccount : undefined;
            inputs["displayName"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(DatasetBlobStorage.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DatasetBlobStorage resources.
 */
export interface DatasetBlobStorageState {
    /**
     * The name of the storage account container to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    readonly containerName?: pulumi.Input<string>;
    /**
     * The ID of the Data Share in which this Data Share Blob Storage Dataset should be created. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    readonly dataShareId?: pulumi.Input<string>;
    /**
     * The name of the Data Share Dataset.
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * The path of the file in the storage container to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    readonly filePath?: pulumi.Input<string>;
    /**
     * The path of the folder in the storage container to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    readonly folderPath?: pulumi.Input<string>;
    /**
     * The name which should be used for this Data Share Blob Storage Dataset. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * A `storageAccount` block as defined below.
     */
    readonly storageAccount?: pulumi.Input<inputs.datashare.DatasetBlobStorageStorageAccount>;
}

/**
 * The set of arguments for constructing a DatasetBlobStorage resource.
 */
export interface DatasetBlobStorageArgs {
    /**
     * The name of the storage account container to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    readonly containerName: pulumi.Input<string>;
    /**
     * The ID of the Data Share in which this Data Share Blob Storage Dataset should be created. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    readonly dataShareId: pulumi.Input<string>;
    /**
     * The path of the file in the storage container to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    readonly filePath?: pulumi.Input<string>;
    /**
     * The path of the folder in the storage container to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    readonly folderPath?: pulumi.Input<string>;
    /**
     * The name which should be used for this Data Share Blob Storage Dataset. Changing this forces a new Data Share Blob Storage Dataset to be created.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * A `storageAccount` block as defined below.
     */
    readonly storageAccount: pulumi.Input<inputs.datashare.DatasetBlobStorageStorageAccount>;
}
