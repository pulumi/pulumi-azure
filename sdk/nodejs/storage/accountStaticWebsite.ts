// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages the Static Website of an Azure Storage Account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "storageaccountname",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "GRS",
 *     tags: {
 *         environment: "staging",
 *     },
 * });
 * const exampleAccountStaticWebsite = new azure.storage.AccountStaticWebsite("example", {
 *     storageAccountId: exampleAccount.id,
 *     error404Document: "custom_not_found.html",
 *     indexDocument: "custom_index.html",
 * });
 * ```
 *
 * ## Import
 *
 * Storage Account Static Websites can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:storage/accountStaticWebsite:AccountStaticWebsite mysite /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Storage/storageAccounts/myaccount
 * ```
 */
export class AccountStaticWebsite extends pulumi.CustomResource {
    /**
     * Get an existing AccountStaticWebsite resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountStaticWebsiteState, opts?: pulumi.CustomResourceOptions): AccountStaticWebsite {
        return new AccountStaticWebsite(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:storage/accountStaticWebsite:AccountStaticWebsite';

    /**
     * Returns true if the given object is an instance of AccountStaticWebsite.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccountStaticWebsite {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccountStaticWebsite.__pulumiType;
    }

    /**
     * The absolute path to a custom webpage that should be used when a request is made which does not correspond to an existing file.
     */
    declare public readonly error404Document: pulumi.Output<string | undefined>;
    /**
     * The webpage that Azure Storage serves for requests to the root of a website or any subfolder. For example, index.html.
     */
    declare public readonly indexDocument: pulumi.Output<string | undefined>;
    /**
     * The ID of the Storage Account to set Static Website on. Changing this forces a new resource to be created.
     */
    declare public readonly storageAccountId: pulumi.Output<string>;

    /**
     * Create a AccountStaticWebsite resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccountStaticWebsiteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccountStaticWebsiteArgs | AccountStaticWebsiteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccountStaticWebsiteState | undefined;
            resourceInputs["error404Document"] = state?.error404Document;
            resourceInputs["indexDocument"] = state?.indexDocument;
            resourceInputs["storageAccountId"] = state?.storageAccountId;
        } else {
            const args = argsOrState as AccountStaticWebsiteArgs | undefined;
            if (args?.storageAccountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'storageAccountId'");
            }
            resourceInputs["error404Document"] = args?.error404Document;
            resourceInputs["indexDocument"] = args?.indexDocument;
            resourceInputs["storageAccountId"] = args?.storageAccountId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccountStaticWebsite.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccountStaticWebsite resources.
 */
export interface AccountStaticWebsiteState {
    /**
     * The absolute path to a custom webpage that should be used when a request is made which does not correspond to an existing file.
     */
    error404Document?: pulumi.Input<string>;
    /**
     * The webpage that Azure Storage serves for requests to the root of a website or any subfolder. For example, index.html.
     */
    indexDocument?: pulumi.Input<string>;
    /**
     * The ID of the Storage Account to set Static Website on. Changing this forces a new resource to be created.
     */
    storageAccountId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccountStaticWebsite resource.
 */
export interface AccountStaticWebsiteArgs {
    /**
     * The absolute path to a custom webpage that should be used when a request is made which does not correspond to an existing file.
     */
    error404Document?: pulumi.Input<string>;
    /**
     * The webpage that Azure Storage serves for requests to the root of a website or any subfolder. For example, index.html.
     */
    indexDocument?: pulumi.Input<string>;
    /**
     * The ID of the Storage Account to set Static Website on. Changing this forces a new resource to be created.
     */
    storageAccountId: pulumi.Input<string>;
}
