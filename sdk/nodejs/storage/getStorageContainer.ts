// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this data source to access information about an existing Storage Container.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.storage.getAccount({
 *     name: "exampleaccount",
 *     resourceGroupName: "examples",
 * });
 * const exampleGetStorageContainer = example.then(example => azure.storage.getStorageContainer({
 *     name: "example-container-name",
 *     storageAccountId: example.id,
 * }));
 * ```
 */
export function getStorageContainer(args: GetStorageContainerArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageContainerResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure:storage/getStorageContainer:getStorageContainer", {
        "metadata": args.metadata,
        "name": args.name,
        "storageAccountId": args.storageAccountId,
        "storageAccountName": args.storageAccountName,
    }, opts);
}

/**
 * A collection of arguments for invoking getStorageContainer.
 */
export interface GetStorageContainerArgs {
    /**
     * A mapping of MetaData for this Container.
     */
    metadata?: {[key: string]: string};
    /**
     * The name of the Container.
     */
    name: string;
    /**
     * The id of the Storage Account where the Container exists. This property will become Required in version 5.0 of the Provider.
     *
     * > **NOTE:** One of `storageAccountName` or `storageAccountId` must be specified. When specifying `storageAccountId` the resource will use the Resource Manager API, rather than the Data Plane API.
     */
    storageAccountId?: string;
    /**
     * The name of the Storage Account where the Container exists. This property is deprecated in favour of `storageAccountId`.
     */
    storageAccountName?: string;
}

/**
 * A collection of values returned by getStorageContainer.
 */
export interface GetStorageContainerResult {
    /**
     * The Access Level configured for this Container.
     */
    readonly containerAccessType: string;
    /**
     * The default encryption scope in use for blobs uploaded to this container.
     */
    readonly defaultEncryptionScope: string;
    /**
     * Whether blobs are allowed to override the default encryption scope for this container.
     */
    readonly encryptionScopeOverrideEnabled: boolean;
    /**
     * Is there an Immutability Policy configured on this Storage Container?
     */
    readonly hasImmutabilityPolicy: boolean;
    /**
     * Is there a Legal Hold configured on this Storage Container?
     */
    readonly hasLegalHold: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A mapping of MetaData for this Container.
     */
    readonly metadata: {[key: string]: string};
    readonly name: string;
    /**
     * @deprecated this property has been deprecated in favour of `id` and will be removed in version 5.0 of the Provider.
     */
    readonly resourceManagerId: string;
    readonly storageAccountId?: string;
    readonly storageAccountName?: string;
}
/**
 * Use this data source to access information about an existing Storage Container.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.storage.getAccount({
 *     name: "exampleaccount",
 *     resourceGroupName: "examples",
 * });
 * const exampleGetStorageContainer = example.then(example => azure.storage.getStorageContainer({
 *     name: "example-container-name",
 *     storageAccountId: example.id,
 * }));
 * ```
 */
export function getStorageContainerOutput(args: GetStorageContainerOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetStorageContainerResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("azure:storage/getStorageContainer:getStorageContainer", {
        "metadata": args.metadata,
        "name": args.name,
        "storageAccountId": args.storageAccountId,
        "storageAccountName": args.storageAccountName,
    }, opts);
}

/**
 * A collection of arguments for invoking getStorageContainer.
 */
export interface GetStorageContainerOutputArgs {
    /**
     * A mapping of MetaData for this Container.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the Container.
     */
    name: pulumi.Input<string>;
    /**
     * The id of the Storage Account where the Container exists. This property will become Required in version 5.0 of the Provider.
     *
     * > **NOTE:** One of `storageAccountName` or `storageAccountId` must be specified. When specifying `storageAccountId` the resource will use the Resource Manager API, rather than the Data Plane API.
     */
    storageAccountId?: pulumi.Input<string>;
    /**
     * The name of the Storage Account where the Container exists. This property is deprecated in favour of `storageAccountId`.
     */
    storageAccountName?: pulumi.Input<string>;
}
