// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { AccountNetworkRulesArgs, AccountNetworkRulesState } from "./accountNetworkRules";
export type AccountNetworkRules = import("./accountNetworkRules").AccountNetworkRules;
export const AccountNetworkRules: typeof import("./accountNetworkRules").AccountNetworkRules = null as any;
utilities.lazyLoad(exports, ["AccountNetworkRules"], () => require("./accountNetworkRules"));

export { BlobArgs, BlobState } from "./blob";
export type Blob = import("./blob").Blob;
export const Blob: typeof import("./blob").Blob = null as any;
utilities.lazyLoad(exports, ["Blob"], () => require("./blob"));

export { BlobInventoryPolicyArgs, BlobInventoryPolicyState } from "./blobInventoryPolicy";
export type BlobInventoryPolicy = import("./blobInventoryPolicy").BlobInventoryPolicy;
export const BlobInventoryPolicy: typeof import("./blobInventoryPolicy").BlobInventoryPolicy = null as any;
utilities.lazyLoad(exports, ["BlobInventoryPolicy"], () => require("./blobInventoryPolicy"));

export { ContainerArgs, ContainerState } from "./container";
export type Container = import("./container").Container;
export const Container: typeof import("./container").Container = null as any;
utilities.lazyLoad(exports, ["Container"], () => require("./container"));

export { CustomerManagedKeyArgs, CustomerManagedKeyState } from "./customerManagedKey";
export type CustomerManagedKey = import("./customerManagedKey").CustomerManagedKey;
export const CustomerManagedKey: typeof import("./customerManagedKey").CustomerManagedKey = null as any;
utilities.lazyLoad(exports, ["CustomerManagedKey"], () => require("./customerManagedKey"));

export { DataLakeGen2FilesystemArgs, DataLakeGen2FilesystemState } from "./dataLakeGen2Filesystem";
export type DataLakeGen2Filesystem = import("./dataLakeGen2Filesystem").DataLakeGen2Filesystem;
export const DataLakeGen2Filesystem: typeof import("./dataLakeGen2Filesystem").DataLakeGen2Filesystem = null as any;
utilities.lazyLoad(exports, ["DataLakeGen2Filesystem"], () => require("./dataLakeGen2Filesystem"));

export { DataLakeGen2PathArgs, DataLakeGen2PathState } from "./dataLakeGen2Path";
export type DataLakeGen2Path = import("./dataLakeGen2Path").DataLakeGen2Path;
export const DataLakeGen2Path: typeof import("./dataLakeGen2Path").DataLakeGen2Path = null as any;
utilities.lazyLoad(exports, ["DataLakeGen2Path"], () => require("./dataLakeGen2Path"));

export { EncryptionScopeArgs, EncryptionScopeState } from "./encryptionScope";
export type EncryptionScope = import("./encryptionScope").EncryptionScope;
export const EncryptionScope: typeof import("./encryptionScope").EncryptionScope = null as any;
utilities.lazyLoad(exports, ["EncryptionScope"], () => require("./encryptionScope"));

export { GetAccountArgs, GetAccountResult, GetAccountOutputArgs } from "./getAccount";
export const getAccount: typeof import("./getAccount").getAccount = null as any;
export const getAccountOutput: typeof import("./getAccount").getAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAccount","getAccountOutput"], () => require("./getAccount"));

export { GetAccountBlobContainerSASArgs, GetAccountBlobContainerSASResult, GetAccountBlobContainerSASOutputArgs } from "./getAccountBlobContainerSAS";
export const getAccountBlobContainerSAS: typeof import("./getAccountBlobContainerSAS").getAccountBlobContainerSAS = null as any;
export const getAccountBlobContainerSASOutput: typeof import("./getAccountBlobContainerSAS").getAccountBlobContainerSASOutput = null as any;
utilities.lazyLoad(exports, ["getAccountBlobContainerSAS","getAccountBlobContainerSASOutput"], () => require("./getAccountBlobContainerSAS"));

export { GetAccountSASArgs, GetAccountSASResult, GetAccountSASOutputArgs } from "./getAccountSAS";
export const getAccountSAS: typeof import("./getAccountSAS").getAccountSAS = null as any;
export const getAccountSASOutput: typeof import("./getAccountSAS").getAccountSASOutput = null as any;
utilities.lazyLoad(exports, ["getAccountSAS","getAccountSASOutput"], () => require("./getAccountSAS"));

export { GetBlobArgs, GetBlobResult, GetBlobOutputArgs } from "./getBlob";
export const getBlob: typeof import("./getBlob").getBlob = null as any;
export const getBlobOutput: typeof import("./getBlob").getBlobOutput = null as any;
utilities.lazyLoad(exports, ["getBlob","getBlobOutput"], () => require("./getBlob"));

export { GetContainersArgs, GetContainersResult, GetContainersOutputArgs } from "./getContainers";
export const getContainers: typeof import("./getContainers").getContainers = null as any;
export const getContainersOutput: typeof import("./getContainers").getContainersOutput = null as any;
utilities.lazyLoad(exports, ["getContainers","getContainersOutput"], () => require("./getContainers"));

export { GetEncryptionScopeArgs, GetEncryptionScopeResult, GetEncryptionScopeOutputArgs } from "./getEncryptionScope";
export const getEncryptionScope: typeof import("./getEncryptionScope").getEncryptionScope = null as any;
export const getEncryptionScopeOutput: typeof import("./getEncryptionScope").getEncryptionScopeOutput = null as any;
utilities.lazyLoad(exports, ["getEncryptionScope","getEncryptionScopeOutput"], () => require("./getEncryptionScope"));

export { GetPolicyArgs, GetPolicyResult, GetPolicyOutputArgs } from "./getPolicy";
export const getPolicy: typeof import("./getPolicy").getPolicy = null as any;
export const getPolicyOutput: typeof import("./getPolicy").getPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPolicy","getPolicyOutput"], () => require("./getPolicy"));

export { GetShareArgs, GetShareResult, GetShareOutputArgs } from "./getShare";
export const getShare: typeof import("./getShare").getShare = null as any;
export const getShareOutput: typeof import("./getShare").getShareOutput = null as any;
utilities.lazyLoad(exports, ["getShare","getShareOutput"], () => require("./getShare"));

export { GetStorageContainerArgs, GetStorageContainerResult, GetStorageContainerOutputArgs } from "./getStorageContainer";
export const getStorageContainer: typeof import("./getStorageContainer").getStorageContainer = null as any;
export const getStorageContainerOutput: typeof import("./getStorageContainer").getStorageContainerOutput = null as any;
utilities.lazyLoad(exports, ["getStorageContainer","getStorageContainerOutput"], () => require("./getStorageContainer"));

export { GetSyncArgs, GetSyncResult, GetSyncOutputArgs } from "./getSync";
export const getSync: typeof import("./getSync").getSync = null as any;
export const getSyncOutput: typeof import("./getSync").getSyncOutput = null as any;
utilities.lazyLoad(exports, ["getSync","getSyncOutput"], () => require("./getSync"));

export { GetSyncGroupArgs, GetSyncGroupResult, GetSyncGroupOutputArgs } from "./getSyncGroup";
export const getSyncGroup: typeof import("./getSyncGroup").getSyncGroup = null as any;
export const getSyncGroupOutput: typeof import("./getSyncGroup").getSyncGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSyncGroup","getSyncGroupOutput"], () => require("./getSyncGroup"));

export { GetTableEntityArgs, GetTableEntityResult, GetTableEntityOutputArgs } from "./getTableEntity";
export const getTableEntity: typeof import("./getTableEntity").getTableEntity = null as any;
export const getTableEntityOutput: typeof import("./getTableEntity").getTableEntityOutput = null as any;
utilities.lazyLoad(exports, ["getTableEntity","getTableEntityOutput"], () => require("./getTableEntity"));

export { LocalUserArgs, LocalUserState } from "./localUser";
export type LocalUser = import("./localUser").LocalUser;
export const LocalUser: typeof import("./localUser").LocalUser = null as any;
utilities.lazyLoad(exports, ["LocalUser"], () => require("./localUser"));

export { ManagementPolicyArgs, ManagementPolicyState } from "./managementPolicy";
export type ManagementPolicy = import("./managementPolicy").ManagementPolicy;
export const ManagementPolicy: typeof import("./managementPolicy").ManagementPolicy = null as any;
utilities.lazyLoad(exports, ["ManagementPolicy"], () => require("./managementPolicy"));

export { MoverArgs, MoverState } from "./mover";
export type Mover = import("./mover").Mover;
export const Mover: typeof import("./mover").Mover = null as any;
utilities.lazyLoad(exports, ["Mover"], () => require("./mover"));

export { MoverAgentArgs, MoverAgentState } from "./moverAgent";
export type MoverAgent = import("./moverAgent").MoverAgent;
export const MoverAgent: typeof import("./moverAgent").MoverAgent = null as any;
utilities.lazyLoad(exports, ["MoverAgent"], () => require("./moverAgent"));

export { MoverJobDefinitionArgs, MoverJobDefinitionState } from "./moverJobDefinition";
export type MoverJobDefinition = import("./moverJobDefinition").MoverJobDefinition;
export const MoverJobDefinition: typeof import("./moverJobDefinition").MoverJobDefinition = null as any;
utilities.lazyLoad(exports, ["MoverJobDefinition"], () => require("./moverJobDefinition"));

export { MoverProjectArgs, MoverProjectState } from "./moverProject";
export type MoverProject = import("./moverProject").MoverProject;
export const MoverProject: typeof import("./moverProject").MoverProject = null as any;
utilities.lazyLoad(exports, ["MoverProject"], () => require("./moverProject"));

export { MoverSourceEndpointArgs, MoverSourceEndpointState } from "./moverSourceEndpoint";
export type MoverSourceEndpoint = import("./moverSourceEndpoint").MoverSourceEndpoint;
export const MoverSourceEndpoint: typeof import("./moverSourceEndpoint").MoverSourceEndpoint = null as any;
utilities.lazyLoad(exports, ["MoverSourceEndpoint"], () => require("./moverSourceEndpoint"));

export { MoverTargetEndpointArgs, MoverTargetEndpointState } from "./moverTargetEndpoint";
export type MoverTargetEndpoint = import("./moverTargetEndpoint").MoverTargetEndpoint;
export const MoverTargetEndpoint: typeof import("./moverTargetEndpoint").MoverTargetEndpoint = null as any;
utilities.lazyLoad(exports, ["MoverTargetEndpoint"], () => require("./moverTargetEndpoint"));

export { ObjectReplicationArgs, ObjectReplicationState } from "./objectReplication";
export type ObjectReplication = import("./objectReplication").ObjectReplication;
export const ObjectReplication: typeof import("./objectReplication").ObjectReplication = null as any;
utilities.lazyLoad(exports, ["ObjectReplication"], () => require("./objectReplication"));

export { QueueArgs, QueueState } from "./queue";
export type Queue = import("./queue").Queue;
export const Queue: typeof import("./queue").Queue = null as any;
utilities.lazyLoad(exports, ["Queue"], () => require("./queue"));

export { ShareArgs, ShareState } from "./share";
export type Share = import("./share").Share;
export const Share: typeof import("./share").Share = null as any;
utilities.lazyLoad(exports, ["Share"], () => require("./share"));

export { ShareDirectoryArgs, ShareDirectoryState } from "./shareDirectory";
export type ShareDirectory = import("./shareDirectory").ShareDirectory;
export const ShareDirectory: typeof import("./shareDirectory").ShareDirectory = null as any;
utilities.lazyLoad(exports, ["ShareDirectory"], () => require("./shareDirectory"));

export { ShareFileArgs, ShareFileState } from "./shareFile";
export type ShareFile = import("./shareFile").ShareFile;
export const ShareFile: typeof import("./shareFile").ShareFile = null as any;
utilities.lazyLoad(exports, ["ShareFile"], () => require("./shareFile"));

export { SyncArgs, SyncState } from "./sync";
export type Sync = import("./sync").Sync;
export const Sync: typeof import("./sync").Sync = null as any;
utilities.lazyLoad(exports, ["Sync"], () => require("./sync"));

export { SyncCloudEndpointArgs, SyncCloudEndpointState } from "./syncCloudEndpoint";
export type SyncCloudEndpoint = import("./syncCloudEndpoint").SyncCloudEndpoint;
export const SyncCloudEndpoint: typeof import("./syncCloudEndpoint").SyncCloudEndpoint = null as any;
utilities.lazyLoad(exports, ["SyncCloudEndpoint"], () => require("./syncCloudEndpoint"));

export { SyncGroupArgs, SyncGroupState } from "./syncGroup";
export type SyncGroup = import("./syncGroup").SyncGroup;
export const SyncGroup: typeof import("./syncGroup").SyncGroup = null as any;
utilities.lazyLoad(exports, ["SyncGroup"], () => require("./syncGroup"));

export { TableArgs, TableState } from "./table";
export type Table = import("./table").Table;
export const Table: typeof import("./table").Table = null as any;
utilities.lazyLoad(exports, ["Table"], () => require("./table"));

export { TableEntityArgs, TableEntityState } from "./tableEntity";
export type TableEntity = import("./tableEntity").TableEntity;
export const TableEntity: typeof import("./tableEntity").TableEntity = null as any;
utilities.lazyLoad(exports, ["TableEntity"], () => require("./tableEntity"));

export * from "./zMixins";
export { ZipBlobArgs, ZipBlobState } from "./zipBlob";
export type ZipBlob = import("./zipBlob").ZipBlob;
export const ZipBlob: typeof import("./zipBlob").ZipBlob = null as any;
utilities.lazyLoad(exports, ["ZipBlob"], () => require("./zipBlob"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:storage/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "azure:storage/accountNetworkRules:AccountNetworkRules":
                return new AccountNetworkRules(name, <any>undefined, { urn })
            case "azure:storage/blob:Blob":
                return new Blob(name, <any>undefined, { urn })
            case "azure:storage/blobInventoryPolicy:BlobInventoryPolicy":
                return new BlobInventoryPolicy(name, <any>undefined, { urn })
            case "azure:storage/container:Container":
                return new Container(name, <any>undefined, { urn })
            case "azure:storage/customerManagedKey:CustomerManagedKey":
                return new CustomerManagedKey(name, <any>undefined, { urn })
            case "azure:storage/dataLakeGen2Filesystem:DataLakeGen2Filesystem":
                return new DataLakeGen2Filesystem(name, <any>undefined, { urn })
            case "azure:storage/dataLakeGen2Path:DataLakeGen2Path":
                return new DataLakeGen2Path(name, <any>undefined, { urn })
            case "azure:storage/encryptionScope:EncryptionScope":
                return new EncryptionScope(name, <any>undefined, { urn })
            case "azure:storage/localUser:LocalUser":
                return new LocalUser(name, <any>undefined, { urn })
            case "azure:storage/managementPolicy:ManagementPolicy":
                return new ManagementPolicy(name, <any>undefined, { urn })
            case "azure:storage/mover:Mover":
                return new Mover(name, <any>undefined, { urn })
            case "azure:storage/moverAgent:MoverAgent":
                return new MoverAgent(name, <any>undefined, { urn })
            case "azure:storage/moverJobDefinition:MoverJobDefinition":
                return new MoverJobDefinition(name, <any>undefined, { urn })
            case "azure:storage/moverProject:MoverProject":
                return new MoverProject(name, <any>undefined, { urn })
            case "azure:storage/moverSourceEndpoint:MoverSourceEndpoint":
                return new MoverSourceEndpoint(name, <any>undefined, { urn })
            case "azure:storage/moverTargetEndpoint:MoverTargetEndpoint":
                return new MoverTargetEndpoint(name, <any>undefined, { urn })
            case "azure:storage/objectReplication:ObjectReplication":
                return new ObjectReplication(name, <any>undefined, { urn })
            case "azure:storage/queue:Queue":
                return new Queue(name, <any>undefined, { urn })
            case "azure:storage/share:Share":
                return new Share(name, <any>undefined, { urn })
            case "azure:storage/shareDirectory:ShareDirectory":
                return new ShareDirectory(name, <any>undefined, { urn })
            case "azure:storage/shareFile:ShareFile":
                return new ShareFile(name, <any>undefined, { urn })
            case "azure:storage/sync:Sync":
                return new Sync(name, <any>undefined, { urn })
            case "azure:storage/syncCloudEndpoint:SyncCloudEndpoint":
                return new SyncCloudEndpoint(name, <any>undefined, { urn })
            case "azure:storage/syncGroup:SyncGroup":
                return new SyncGroup(name, <any>undefined, { urn })
            case "azure:storage/table:Table":
                return new Table(name, <any>undefined, { urn })
            case "azure:storage/tableEntity:TableEntity":
                return new TableEntity(name, <any>undefined, { urn })
            case "azure:storage/zipBlob:ZipBlob":
                return new ZipBlob(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "storage/account", _module)
pulumi.runtime.registerResourceModule("azure", "storage/accountNetworkRules", _module)
pulumi.runtime.registerResourceModule("azure", "storage/blob", _module)
pulumi.runtime.registerResourceModule("azure", "storage/blobInventoryPolicy", _module)
pulumi.runtime.registerResourceModule("azure", "storage/container", _module)
pulumi.runtime.registerResourceModule("azure", "storage/customerManagedKey", _module)
pulumi.runtime.registerResourceModule("azure", "storage/dataLakeGen2Filesystem", _module)
pulumi.runtime.registerResourceModule("azure", "storage/dataLakeGen2Path", _module)
pulumi.runtime.registerResourceModule("azure", "storage/encryptionScope", _module)
pulumi.runtime.registerResourceModule("azure", "storage/localUser", _module)
pulumi.runtime.registerResourceModule("azure", "storage/managementPolicy", _module)
pulumi.runtime.registerResourceModule("azure", "storage/mover", _module)
pulumi.runtime.registerResourceModule("azure", "storage/moverAgent", _module)
pulumi.runtime.registerResourceModule("azure", "storage/moverJobDefinition", _module)
pulumi.runtime.registerResourceModule("azure", "storage/moverProject", _module)
pulumi.runtime.registerResourceModule("azure", "storage/moverSourceEndpoint", _module)
pulumi.runtime.registerResourceModule("azure", "storage/moverTargetEndpoint", _module)
pulumi.runtime.registerResourceModule("azure", "storage/objectReplication", _module)
pulumi.runtime.registerResourceModule("azure", "storage/queue", _module)
pulumi.runtime.registerResourceModule("azure", "storage/share", _module)
pulumi.runtime.registerResourceModule("azure", "storage/shareDirectory", _module)
pulumi.runtime.registerResourceModule("azure", "storage/shareFile", _module)
pulumi.runtime.registerResourceModule("azure", "storage/sync", _module)
pulumi.runtime.registerResourceModule("azure", "storage/syncCloudEndpoint", _module)
pulumi.runtime.registerResourceModule("azure", "storage/syncGroup", _module)
pulumi.runtime.registerResourceModule("azure", "storage/table", _module)
pulumi.runtime.registerResourceModule("azure", "storage/tableEntity", _module)
pulumi.runtime.registerResourceModule("azure", "storage/zipBlob", _module)
