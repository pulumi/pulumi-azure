// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "azureteststorage",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleShare = new azure.storage.Share("example", {
 *     name: "sharename",
 *     storageAccountName: exampleAccount.name,
 *     quota: 50,
 * });
 * const exampleShareFile = new azure.storage.ShareFile("example", {
 *     name: "my-awesome-content.zip",
 *     storageShareId: exampleShare.id,
 *     source: "some-local-file.zip",
 * });
 * ```
 *
 * ## Import
 *
 * Directories within an Azure Storage File Share can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:storage/shareFile:ShareFile example https://account1.file.core.windows.net/share1/file1
 * ```
 */
export class ShareFile extends pulumi.CustomResource {
    /**
     * Get an existing ShareFile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ShareFileState, opts?: pulumi.CustomResourceOptions): ShareFile {
        return new ShareFile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:storage/shareFile:ShareFile';

    /**
     * Returns true if the given object is an instance of ShareFile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ShareFile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ShareFile.__pulumiType;
    }

    /**
     * Sets the file’s Content-Disposition header.
     */
    declare public readonly contentDisposition: pulumi.Output<string | undefined>;
    /**
     * Specifies which content encodings have been applied to the file.
     */
    declare public readonly contentEncoding: pulumi.Output<string | undefined>;
    /**
     * The length in bytes of the file content
     */
    declare public /*out*/ readonly contentLength: pulumi.Output<number>;
    declare public readonly contentMd5: pulumi.Output<string | undefined>;
    /**
     * The content type of the share file. Defaults to `application/octet-stream`.
     */
    declare public readonly contentType: pulumi.Output<string | undefined>;
    /**
     * A mapping of metadata to assign to this file.
     */
    declare public readonly metadata: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name (or path) of the File that should be created within this File Share. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The storage share directory that you would like the file placed into. Changing this forces a new resource to be created. Defaults to `""`.
     */
    declare public readonly path: pulumi.Output<string | undefined>;
    /**
     * An absolute path to a file on the local system. Changing this forces a new resource to be created.
     *
     * > **Note:** The file specified with `source` can not be empty.
     */
    declare public readonly source: pulumi.Output<string | undefined>;
    /**
     * The Storage Share ID in which this file will be placed into. Changing this forces a new resource to be created.
     */
    declare public readonly storageShareId: pulumi.Output<string>;

    /**
     * Create a ShareFile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ShareFileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ShareFileArgs | ShareFileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ShareFileState | undefined;
            resourceInputs["contentDisposition"] = state?.contentDisposition;
            resourceInputs["contentEncoding"] = state?.contentEncoding;
            resourceInputs["contentLength"] = state?.contentLength;
            resourceInputs["contentMd5"] = state?.contentMd5;
            resourceInputs["contentType"] = state?.contentType;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["name"] = state?.name;
            resourceInputs["path"] = state?.path;
            resourceInputs["source"] = state?.source;
            resourceInputs["storageShareId"] = state?.storageShareId;
        } else {
            const args = argsOrState as ShareFileArgs | undefined;
            if (args?.storageShareId === undefined && !opts.urn) {
                throw new Error("Missing required property 'storageShareId'");
            }
            resourceInputs["contentDisposition"] = args?.contentDisposition;
            resourceInputs["contentEncoding"] = args?.contentEncoding;
            resourceInputs["contentMd5"] = args?.contentMd5;
            resourceInputs["contentType"] = args?.contentType;
            resourceInputs["metadata"] = args?.metadata;
            resourceInputs["name"] = args?.name;
            resourceInputs["path"] = args?.path;
            resourceInputs["source"] = args?.source;
            resourceInputs["storageShareId"] = args?.storageShareId;
            resourceInputs["contentLength"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ShareFile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ShareFile resources.
 */
export interface ShareFileState {
    /**
     * Sets the file’s Content-Disposition header.
     */
    contentDisposition?: pulumi.Input<string>;
    /**
     * Specifies which content encodings have been applied to the file.
     */
    contentEncoding?: pulumi.Input<string>;
    /**
     * The length in bytes of the file content
     */
    contentLength?: pulumi.Input<number>;
    contentMd5?: pulumi.Input<string>;
    /**
     * The content type of the share file. Defaults to `application/octet-stream`.
     */
    contentType?: pulumi.Input<string>;
    /**
     * A mapping of metadata to assign to this file.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name (or path) of the File that should be created within this File Share. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The storage share directory that you would like the file placed into. Changing this forces a new resource to be created. Defaults to `""`.
     */
    path?: pulumi.Input<string>;
    /**
     * An absolute path to a file on the local system. Changing this forces a new resource to be created.
     *
     * > **Note:** The file specified with `source` can not be empty.
     */
    source?: pulumi.Input<string>;
    /**
     * The Storage Share ID in which this file will be placed into. Changing this forces a new resource to be created.
     */
    storageShareId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ShareFile resource.
 */
export interface ShareFileArgs {
    /**
     * Sets the file’s Content-Disposition header.
     */
    contentDisposition?: pulumi.Input<string>;
    /**
     * Specifies which content encodings have been applied to the file.
     */
    contentEncoding?: pulumi.Input<string>;
    contentMd5?: pulumi.Input<string>;
    /**
     * The content type of the share file. Defaults to `application/octet-stream`.
     */
    contentType?: pulumi.Input<string>;
    /**
     * A mapping of metadata to assign to this file.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name (or path) of the File that should be created within this File Share. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The storage share directory that you would like the file placed into. Changing this forces a new resource to be created. Defaults to `""`.
     */
    path?: pulumi.Input<string>;
    /**
     * An absolute path to a file on the local system. Changing this forces a new resource to be created.
     *
     * > **Note:** The file specified with `source` can not be empty.
     */
    source?: pulumi.Input<string>;
    /**
     * The Storage Share ID in which this file will be placed into. Changing this forces a new resource to be created.
     */
    storageShareId: pulumi.Input<string>;
}
