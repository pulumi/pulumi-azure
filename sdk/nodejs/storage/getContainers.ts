// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to access information about the existing Storage Containers within a Storage Account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.storage.getContainers({
 *     storageAccountId: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Storage/storageAccounts/sa1",
 * });
 * export const containerId = example.then(example => example.containers?.[0]?.resourceManagerId);
 * ```
 */
export function getContainers(args: GetContainersArgs, opts?: pulumi.InvokeOptions): Promise<GetContainersResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure:storage/getContainers:getContainers", {
        "namePrefix": args.namePrefix,
        "storageAccountId": args.storageAccountId,
    }, opts);
}

/**
 * A collection of arguments for invoking getContainers.
 */
export interface GetContainersArgs {
    /**
     * A prefix match used for the Storage Container `name` field.
     */
    namePrefix?: string;
    /**
     * The ID of the Storage Account that the Storage Containers reside in.
     */
    storageAccountId: string;
}

/**
 * A collection of values returned by getContainers.
 */
export interface GetContainersResult {
    /**
     * A `containers` block as defined below.
     */
    readonly containers: outputs.storage.GetContainersContainer[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly namePrefix?: string;
    readonly storageAccountId: string;
}
/**
 * Use this data source to access information about the existing Storage Containers within a Storage Account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.storage.getContainers({
 *     storageAccountId: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Storage/storageAccounts/sa1",
 * });
 * export const containerId = example.then(example => example.containers?.[0]?.resourceManagerId);
 * ```
 */
export function getContainersOutput(args: GetContainersOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetContainersResult> {
    return pulumi.output(args).apply((a: any) => getContainers(a, opts))
}

/**
 * A collection of arguments for invoking getContainers.
 */
export interface GetContainersOutputArgs {
    /**
     * A prefix match used for the Storage Container `name` field.
     */
    namePrefix?: pulumi.Input<string>;
    /**
     * The ID of the Storage Account that the Storage Containers reside in.
     */
    storageAccountId: pulumi.Input<string>;
}
