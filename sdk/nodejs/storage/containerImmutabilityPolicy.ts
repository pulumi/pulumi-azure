// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an Immutability Policy for a Container within an Azure Storage Account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "examplestoraccount",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 *     tags: {
 *         environment: "staging",
 *     },
 * });
 * const exampleContainer = new azure.storage.Container("example", {
 *     name: "example",
 *     storageAccountName: exampleAccount.name,
 *     containerAccessType: "private",
 * });
 * const exampleContainerImmutabilityPolicy = new azure.storage.ContainerImmutabilityPolicy("example", {
 *     storageContainerResourceManagerId: exampleContainer.id,
 *     immutabilityPeriodInDays: 14,
 *     protectedAppendWritesAllEnabled: false,
 *     protectedAppendWritesEnabled: true,
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Storage` - 2023-05-01
 *
 * ## Import
 *
 * Storage Container Immutability Policies can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:storage/containerImmutabilityPolicy:ContainerImmutabilityPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Storage/storageAccounts/myaccount/blobServices/default/containers/mycontainer/immutabilityPolicies/default
 * ```
 */
export class ContainerImmutabilityPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ContainerImmutabilityPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerImmutabilityPolicyState, opts?: pulumi.CustomResourceOptions): ContainerImmutabilityPolicy {
        return new ContainerImmutabilityPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:storage/containerImmutabilityPolicy:ContainerImmutabilityPolicy';

    /**
     * Returns true if the given object is an instance of ContainerImmutabilityPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerImmutabilityPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerImmutabilityPolicy.__pulumiType;
    }

    /**
     * The time interval in days that the data needs to be kept in a non-erasable and non-modifiable state.
     */
    declare public readonly immutabilityPeriodInDays: pulumi.Output<number>;
    /**
     * Whether to lock this immutability policy. Cannot be set to `false` once the policy has been locked.
     *
     * !> **Note:** Once an Immutability Policy has been locked, it cannot be unlocked. After locking, it will only be possible to increase the value for `retentionPeriodInDays` up to 5 times for the lifetime of the policy. No other properties will be updateable. Furthermore, the Storage Container and the Storage Account in which it resides will become protected by the policy. It will no longer be possible to delete the Storage Container or the Storage Account. Please refer to [official documentation](https://learn.microsoft.com/en-us/azure/storage/blobs/immutable-policy-configure-container-scope?tabs=azure-portal#lock-a-time-based-retention-policy) for more information.
     */
    declare public readonly locked: pulumi.Output<boolean | undefined>;
    /**
     * Whether to allow protected append writes to block and append blobs to the container. Defaults to `false`. Cannot be set with `protectedAppendWritesEnabled`.
     */
    declare public readonly protectedAppendWritesAllEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Whether to allow protected append writes to append blobs to the container. Defaults to `false`. Cannot be set with `protectedAppendWritesAllEnabled`.
     */
    declare public readonly protectedAppendWritesEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The Resource Manager ID of the Storage Container where this Immutability Policy should be applied. Changing this forces a new resource to be created.
     */
    declare public readonly storageContainerResourceManagerId: pulumi.Output<string>;

    /**
     * Create a ContainerImmutabilityPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerImmutabilityPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerImmutabilityPolicyArgs | ContainerImmutabilityPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerImmutabilityPolicyState | undefined;
            resourceInputs["immutabilityPeriodInDays"] = state?.immutabilityPeriodInDays;
            resourceInputs["locked"] = state?.locked;
            resourceInputs["protectedAppendWritesAllEnabled"] = state?.protectedAppendWritesAllEnabled;
            resourceInputs["protectedAppendWritesEnabled"] = state?.protectedAppendWritesEnabled;
            resourceInputs["storageContainerResourceManagerId"] = state?.storageContainerResourceManagerId;
        } else {
            const args = argsOrState as ContainerImmutabilityPolicyArgs | undefined;
            if (args?.immutabilityPeriodInDays === undefined && !opts.urn) {
                throw new Error("Missing required property 'immutabilityPeriodInDays'");
            }
            if (args?.storageContainerResourceManagerId === undefined && !opts.urn) {
                throw new Error("Missing required property 'storageContainerResourceManagerId'");
            }
            resourceInputs["immutabilityPeriodInDays"] = args?.immutabilityPeriodInDays;
            resourceInputs["locked"] = args?.locked;
            resourceInputs["protectedAppendWritesAllEnabled"] = args?.protectedAppendWritesAllEnabled;
            resourceInputs["protectedAppendWritesEnabled"] = args?.protectedAppendWritesEnabled;
            resourceInputs["storageContainerResourceManagerId"] = args?.storageContainerResourceManagerId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerImmutabilityPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ContainerImmutabilityPolicy resources.
 */
export interface ContainerImmutabilityPolicyState {
    /**
     * The time interval in days that the data needs to be kept in a non-erasable and non-modifiable state.
     */
    immutabilityPeriodInDays?: pulumi.Input<number>;
    /**
     * Whether to lock this immutability policy. Cannot be set to `false` once the policy has been locked.
     *
     * !> **Note:** Once an Immutability Policy has been locked, it cannot be unlocked. After locking, it will only be possible to increase the value for `retentionPeriodInDays` up to 5 times for the lifetime of the policy. No other properties will be updateable. Furthermore, the Storage Container and the Storage Account in which it resides will become protected by the policy. It will no longer be possible to delete the Storage Container or the Storage Account. Please refer to [official documentation](https://learn.microsoft.com/en-us/azure/storage/blobs/immutable-policy-configure-container-scope?tabs=azure-portal#lock-a-time-based-retention-policy) for more information.
     */
    locked?: pulumi.Input<boolean>;
    /**
     * Whether to allow protected append writes to block and append blobs to the container. Defaults to `false`. Cannot be set with `protectedAppendWritesEnabled`.
     */
    protectedAppendWritesAllEnabled?: pulumi.Input<boolean>;
    /**
     * Whether to allow protected append writes to append blobs to the container. Defaults to `false`. Cannot be set with `protectedAppendWritesAllEnabled`.
     */
    protectedAppendWritesEnabled?: pulumi.Input<boolean>;
    /**
     * The Resource Manager ID of the Storage Container where this Immutability Policy should be applied. Changing this forces a new resource to be created.
     */
    storageContainerResourceManagerId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContainerImmutabilityPolicy resource.
 */
export interface ContainerImmutabilityPolicyArgs {
    /**
     * The time interval in days that the data needs to be kept in a non-erasable and non-modifiable state.
     */
    immutabilityPeriodInDays: pulumi.Input<number>;
    /**
     * Whether to lock this immutability policy. Cannot be set to `false` once the policy has been locked.
     *
     * !> **Note:** Once an Immutability Policy has been locked, it cannot be unlocked. After locking, it will only be possible to increase the value for `retentionPeriodInDays` up to 5 times for the lifetime of the policy. No other properties will be updateable. Furthermore, the Storage Container and the Storage Account in which it resides will become protected by the policy. It will no longer be possible to delete the Storage Container or the Storage Account. Please refer to [official documentation](https://learn.microsoft.com/en-us/azure/storage/blobs/immutable-policy-configure-container-scope?tabs=azure-portal#lock-a-time-based-retention-policy) for more information.
     */
    locked?: pulumi.Input<boolean>;
    /**
     * Whether to allow protected append writes to block and append blobs to the container. Defaults to `false`. Cannot be set with `protectedAppendWritesEnabled`.
     */
    protectedAppendWritesAllEnabled?: pulumi.Input<boolean>;
    /**
     * Whether to allow protected append writes to append blobs to the container. Defaults to `false`. Cannot be set with `protectedAppendWritesAllEnabled`.
     */
    protectedAppendWritesEnabled?: pulumi.Input<boolean>;
    /**
     * The Resource Manager ID of the Storage Container where this Immutability Policy should be applied. Changing this forces a new resource to be created.
     */
    storageContainerResourceManagerId: pulumi.Input<string>;
}
