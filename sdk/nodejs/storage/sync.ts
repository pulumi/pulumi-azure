// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Storage Sync.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {location: "West Europe"});
 * const test = new azure.storage.Sync("test", {
 *     resourceGroupName: azurerm_resource_group.test.name,
 *     location: azurerm_resource_group.test.location,
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Storage Syncs can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:storage/sync:Sync example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StorageSync/storageSyncServices/sync1
 * ```
 */
export class Sync extends pulumi.CustomResource {
    /**
     * Get an existing Sync resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SyncState, opts?: pulumi.CustomResourceOptions): Sync {
        return new Sync(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:storage/sync:Sync';

    /**
     * Returns true if the given object is an instance of Sync.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Sync {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Sync.__pulumiType;
    }

    /**
     * Incoming traffic policy. Possible values are `AllowAllTraffic` and `AllowVirtualNetworksOnly`.
     */
    public readonly incomingTrafficPolicy!: pulumi.Output<string | undefined>;
    /**
     * The Azure Region where the Storage Sync should exist. Changing this forces a new Storage Sync to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name which should be used for this Storage Sync. Changing this forces a new Storage Sync to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the Resource Group where the Storage Sync should exist. Changing this forces a new Storage Sync to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * A mapping of tags which should be assigned to the Storage Sync.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Sync resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SyncArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SyncArgs | SyncState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SyncState | undefined;
            inputs["incomingTrafficPolicy"] = state ? state.incomingTrafficPolicy : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as SyncArgs | undefined;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["incomingTrafficPolicy"] = args ? args.incomingTrafficPolicy : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Sync.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Sync resources.
 */
export interface SyncState {
    /**
     * Incoming traffic policy. Possible values are `AllowAllTraffic` and `AllowVirtualNetworksOnly`.
     */
    readonly incomingTrafficPolicy?: pulumi.Input<string>;
    /**
     * The Azure Region where the Storage Sync should exist. Changing this forces a new Storage Sync to be created.
     */
    readonly location?: pulumi.Input<string>;
    /**
     * The name which should be used for this Storage Sync. Changing this forces a new Storage Sync to be created.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Storage Sync should exist. Changing this forces a new Storage Sync to be created.
     */
    readonly resourceGroupName?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Storage Sync.
     */
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Sync resource.
 */
export interface SyncArgs {
    /**
     * Incoming traffic policy. Possible values are `AllowAllTraffic` and `AllowVirtualNetworksOnly`.
     */
    readonly incomingTrafficPolicy?: pulumi.Input<string>;
    /**
     * The Azure Region where the Storage Sync should exist. Changing this forces a new Storage Sync to be created.
     */
    readonly location?: pulumi.Input<string>;
    /**
     * The name which should be used for this Storage Sync. Changing this forces a new Storage Sync to be created.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Storage Sync should exist. Changing this forces a new Storage Sync to be created.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Storage Sync.
     */
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
