// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * @deprecated ZipBlob resource is deprecated in the 2.0 version of the provider. Use Blob resource instead.
 */
export class ZipBlob extends pulumi.CustomResource {
    /**
     * Get an existing ZipBlob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZipBlobState, opts?: pulumi.CustomResourceOptions): ZipBlob {
        pulumi.log.warn("ZipBlob is deprecated: ZipBlob resource is deprecated in the 2.0 version of the provider. Use Blob resource instead.")
        return new ZipBlob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:storage/zipBlob:ZipBlob';

    /**
     * Returns true if the given object is an instance of ZipBlob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ZipBlob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZipBlob.__pulumiType;
    }

    declare public readonly accessTier: pulumi.Output<string>;
    declare public readonly cacheControl: pulumi.Output<string | undefined>;
    declare public readonly content: pulumi.Output<pulumi.asset.Archive | undefined>;
    declare public readonly contentMd5: pulumi.Output<string | undefined>;
    declare public readonly contentType: pulumi.Output<string | undefined>;
    declare public readonly encryptionScope: pulumi.Output<string | undefined>;
    declare public readonly metadata: pulumi.Output<{[key: string]: string}>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly parallelism: pulumi.Output<number | undefined>;
    declare public readonly size: pulumi.Output<number | undefined>;
    declare public readonly sourceContent: pulumi.Output<string | undefined>;
    declare public readonly sourceUri: pulumi.Output<string | undefined>;
    declare public readonly storageAccountName: pulumi.Output<string>;
    declare public readonly storageContainerName: pulumi.Output<string>;
    declare public readonly type: pulumi.Output<string>;
    declare public /*out*/ readonly url: pulumi.Output<string>;

    /**
     * Create a ZipBlob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated ZipBlob resource is deprecated in the 2.0 version of the provider. Use Blob resource instead. */
    constructor(name: string, args: ZipBlobArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated ZipBlob resource is deprecated in the 2.0 version of the provider. Use Blob resource instead. */
    constructor(name: string, argsOrState?: ZipBlobArgs | ZipBlobState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("ZipBlob is deprecated: ZipBlob resource is deprecated in the 2.0 version of the provider. Use Blob resource instead.")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZipBlobState | undefined;
            resourceInputs["accessTier"] = state?.accessTier;
            resourceInputs["cacheControl"] = state?.cacheControl;
            resourceInputs["content"] = state?.content;
            resourceInputs["contentMd5"] = state?.contentMd5;
            resourceInputs["contentType"] = state?.contentType;
            resourceInputs["encryptionScope"] = state?.encryptionScope;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["name"] = state?.name;
            resourceInputs["parallelism"] = state?.parallelism;
            resourceInputs["size"] = state?.size;
            resourceInputs["sourceContent"] = state?.sourceContent;
            resourceInputs["sourceUri"] = state?.sourceUri;
            resourceInputs["storageAccountName"] = state?.storageAccountName;
            resourceInputs["storageContainerName"] = state?.storageContainerName;
            resourceInputs["type"] = state?.type;
            resourceInputs["url"] = state?.url;
        } else {
            const args = argsOrState as ZipBlobArgs | undefined;
            if (args?.storageAccountName === undefined && !opts.urn) {
                throw new Error("Missing required property 'storageAccountName'");
            }
            if (args?.storageContainerName === undefined && !opts.urn) {
                throw new Error("Missing required property 'storageContainerName'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["accessTier"] = args?.accessTier;
            resourceInputs["cacheControl"] = args?.cacheControl;
            resourceInputs["content"] = args?.content;
            resourceInputs["contentMd5"] = args?.contentMd5;
            resourceInputs["contentType"] = args?.contentType;
            resourceInputs["encryptionScope"] = args?.encryptionScope;
            resourceInputs["metadata"] = args?.metadata;
            resourceInputs["name"] = args?.name;
            resourceInputs["parallelism"] = args?.parallelism;
            resourceInputs["size"] = args?.size;
            resourceInputs["sourceContent"] = args?.sourceContent;
            resourceInputs["sourceUri"] = args?.sourceUri;
            resourceInputs["storageAccountName"] = args?.storageAccountName;
            resourceInputs["storageContainerName"] = args?.storageContainerName;
            resourceInputs["type"] = args?.type;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ZipBlob.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ZipBlob resources.
 */
export interface ZipBlobState {
    accessTier?: pulumi.Input<string>;
    cacheControl?: pulumi.Input<string>;
    content?: pulumi.Input<pulumi.asset.Archive>;
    contentMd5?: pulumi.Input<string>;
    contentType?: pulumi.Input<string>;
    encryptionScope?: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    parallelism?: pulumi.Input<number>;
    size?: pulumi.Input<number>;
    sourceContent?: pulumi.Input<string>;
    sourceUri?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    storageContainerName?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ZipBlob resource.
 */
export interface ZipBlobArgs {
    accessTier?: pulumi.Input<string>;
    cacheControl?: pulumi.Input<string>;
    content?: pulumi.Input<pulumi.asset.Archive>;
    contentMd5?: pulumi.Input<string>;
    contentType?: pulumi.Input<string>;
    encryptionScope?: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    parallelism?: pulumi.Input<number>;
    size?: pulumi.Input<number>;
    sourceContent?: pulumi.Input<string>;
    sourceUri?: pulumi.Input<string>;
    storageAccountName: pulumi.Input<string>;
    storageContainerName: pulumi.Input<string>;
    type: pulumi.Input<string>;
}
