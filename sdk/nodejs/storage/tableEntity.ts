// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an Entity within a Table in an Azure Storage Account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "azureexample",
 *     location: "West Europe",
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "azureexamplestorage1",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleTable = new azure.storage.Table("example", {
 *     name: "myexampletable",
 *     storageAccountName: exampleAccount.name,
 * });
 * const exampleTableEntity = new azure.storage.TableEntity("example", {
 *     storageTableId: exampleTable.id,
 *     partitionKey: "examplepartition",
 *     rowKey: "examplerow",
 *     entity: {
 *         example: "example",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Entities within a Table in an Azure Storage Account can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:storage/tableEntity:TableEntity entity1 https://example.table.core.windows.net/table1(PartitionKey='samplepartition',RowKey='samplerow')
 * ```
 */
export class TableEntity extends pulumi.CustomResource {
    /**
     * Get an existing TableEntity resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TableEntityState, opts?: pulumi.CustomResourceOptions): TableEntity {
        return new TableEntity(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:storage/tableEntity:TableEntity';

    /**
     * Returns true if the given object is an instance of TableEntity.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TableEntity {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TableEntity.__pulumiType;
    }

    /**
     * A map of key/value pairs that describe the entity to be inserted/merged in to the storage table.
     */
    declare public readonly entity: pulumi.Output<{[key: string]: string}>;
    /**
     * The key for the partition where the entity will be inserted/merged. Changing this forces a new resource to be created.
     */
    declare public readonly partitionKey: pulumi.Output<string>;
    /**
     * The key for the row where the entity will be inserted/merged. Changing this forces a new resource to be created.
     */
    declare public readonly rowKey: pulumi.Output<string>;
    /**
     * The Storage Share ID in which this file will be placed into. Changing this forces a new resource to be created.
     */
    declare public readonly storageTableId: pulumi.Output<string>;

    /**
     * Create a TableEntity resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TableEntityArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TableEntityArgs | TableEntityState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TableEntityState | undefined;
            resourceInputs["entity"] = state?.entity;
            resourceInputs["partitionKey"] = state?.partitionKey;
            resourceInputs["rowKey"] = state?.rowKey;
            resourceInputs["storageTableId"] = state?.storageTableId;
        } else {
            const args = argsOrState as TableEntityArgs | undefined;
            if (args?.entity === undefined && !opts.urn) {
                throw new Error("Missing required property 'entity'");
            }
            if (args?.partitionKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'partitionKey'");
            }
            if (args?.rowKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'rowKey'");
            }
            if (args?.storageTableId === undefined && !opts.urn) {
                throw new Error("Missing required property 'storageTableId'");
            }
            resourceInputs["entity"] = args?.entity;
            resourceInputs["partitionKey"] = args?.partitionKey;
            resourceInputs["rowKey"] = args?.rowKey;
            resourceInputs["storageTableId"] = args?.storageTableId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TableEntity.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TableEntity resources.
 */
export interface TableEntityState {
    /**
     * A map of key/value pairs that describe the entity to be inserted/merged in to the storage table.
     */
    entity?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The key for the partition where the entity will be inserted/merged. Changing this forces a new resource to be created.
     */
    partitionKey?: pulumi.Input<string>;
    /**
     * The key for the row where the entity will be inserted/merged. Changing this forces a new resource to be created.
     */
    rowKey?: pulumi.Input<string>;
    /**
     * The Storage Share ID in which this file will be placed into. Changing this forces a new resource to be created.
     */
    storageTableId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TableEntity resource.
 */
export interface TableEntityArgs {
    /**
     * A map of key/value pairs that describe the entity to be inserted/merged in to the storage table.
     */
    entity: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The key for the partition where the entity will be inserted/merged. Changing this forces a new resource to be created.
     */
    partitionKey: pulumi.Input<string>;
    /**
     * The key for the row where the entity will be inserted/merged. Changing this forces a new resource to be created.
     */
    rowKey: pulumi.Input<string>;
    /**
     * The Storage Share ID in which this file will be placed into. Changing this forces a new resource to be created.
     */
    storageTableId: pulumi.Input<string>;
}
