// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this data source to access information about an existing Storage Table Entity.
 */
export function getTableEntity(args: GetTableEntityArgs, opts?: pulumi.InvokeOptions): Promise<GetTableEntityResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure:storage/getTableEntity:getTableEntity", {
        "partitionKey": args.partitionKey,
        "rowKey": args.rowKey,
        "storageAccountName": args.storageAccountName,
        "tableName": args.tableName,
    }, opts);
}

/**
 * A collection of arguments for invoking getTableEntity.
 */
export interface GetTableEntityArgs {
    /**
     * The key for the partition where the entity will be retrieved.
     */
    partitionKey: string;
    /**
     * The key for the row where the entity will be retrieved.
     */
    rowKey: string;
    /**
     * The name of the Storage Account where the Table exists.
     */
    storageAccountName: string;
    /**
     * The name of the Table.
     */
    tableName: string;
}

/**
 * A collection of values returned by getTableEntity.
 */
export interface GetTableEntityResult {
    /**
     * A map of key/value pairs that describe the entity to be stored in the storage table.
     */
    readonly entity: {[key: string]: string};
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly partitionKey: string;
    readonly rowKey: string;
    readonly storageAccountName: string;
    readonly tableName: string;
}
/**
 * Use this data source to access information about an existing Storage Table Entity.
 */
export function getTableEntityOutput(args: GetTableEntityOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTableEntityResult> {
    return pulumi.output(args).apply((a: any) => getTableEntity(a, opts))
}

/**
 * A collection of arguments for invoking getTableEntity.
 */
export interface GetTableEntityOutputArgs {
    /**
     * The key for the partition where the entity will be retrieved.
     */
    partitionKey: pulumi.Input<string>;
    /**
     * The key for the row where the entity will be retrieved.
     */
    rowKey: pulumi.Input<string>;
    /**
     * The name of the Storage Account where the Table exists.
     */
    storageAccountName: pulumi.Input<string>;
    /**
     * The name of the Table.
     */
    tableName: pulumi.Input<string>;
}
