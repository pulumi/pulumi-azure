// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Storage Account Local User.
 *
 * ## Import
 *
 * Storage Account Local Users can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:storage/localUser:LocalUser example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Storage/storageAccounts/storageAccount1/localUsers/user1
 * ```
 */
export class LocalUser extends pulumi.CustomResource {
    /**
     * Get an existing LocalUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LocalUserState, opts?: pulumi.CustomResourceOptions): LocalUser {
        return new LocalUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:storage/localUser:LocalUser';

    /**
     * Returns true if the given object is an instance of LocalUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LocalUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LocalUser.__pulumiType;
    }

    /**
     * The home directory of the Storage Account Local User.
     */
    public readonly homeDirectory!: pulumi.Output<string | undefined>;
    /**
     * The name which should be used for this Storage Account Local User. Changing this forces a new Storage Account Local User to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The value of the password, which is only available when `sshPasswordEnabled` is set to `true`.
     */
    public /*out*/ readonly password!: pulumi.Output<string>;
    /**
     * One or more `permissionScope` blocks as defined below.
     */
    public readonly permissionScopes!: pulumi.Output<outputs.storage.LocalUserPermissionScope[] | undefined>;
    /**
     * The unique Security Identifier of this Storage Account Local User.
     */
    public /*out*/ readonly sid!: pulumi.Output<string>;
    /**
     * One or more `sshAuthorizedKey` blocks as defined below.
     */
    public readonly sshAuthorizedKeys!: pulumi.Output<outputs.storage.LocalUserSshAuthorizedKey[] | undefined>;
    /**
     * Specifies whether SSH Key Authentication is enabled. Defaults to `false`.
     */
    public readonly sshKeyEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies whether SSH Password Authentication is enabled. Defaults to `false`.
     */
    public readonly sshPasswordEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the Storage Account that this Storage Account Local User resides in. Changing this forces a new Storage Account Local User to be created.
     */
    public readonly storageAccountId!: pulumi.Output<string>;

    /**
     * Create a LocalUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LocalUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LocalUserArgs | LocalUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LocalUserState | undefined;
            resourceInputs["homeDirectory"] = state ? state.homeDirectory : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["permissionScopes"] = state ? state.permissionScopes : undefined;
            resourceInputs["sid"] = state ? state.sid : undefined;
            resourceInputs["sshAuthorizedKeys"] = state ? state.sshAuthorizedKeys : undefined;
            resourceInputs["sshKeyEnabled"] = state ? state.sshKeyEnabled : undefined;
            resourceInputs["sshPasswordEnabled"] = state ? state.sshPasswordEnabled : undefined;
            resourceInputs["storageAccountId"] = state ? state.storageAccountId : undefined;
        } else {
            const args = argsOrState as LocalUserArgs | undefined;
            if ((!args || args.storageAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageAccountId'");
            }
            resourceInputs["homeDirectory"] = args ? args.homeDirectory : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permissionScopes"] = args ? args.permissionScopes : undefined;
            resourceInputs["sshAuthorizedKeys"] = args ? args.sshAuthorizedKeys : undefined;
            resourceInputs["sshKeyEnabled"] = args ? args.sshKeyEnabled : undefined;
            resourceInputs["sshPasswordEnabled"] = args ? args.sshPasswordEnabled : undefined;
            resourceInputs["storageAccountId"] = args ? args.storageAccountId : undefined;
            resourceInputs["password"] = undefined /*out*/;
            resourceInputs["sid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "sid"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LocalUser.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LocalUser resources.
 */
export interface LocalUserState {
    /**
     * The home directory of the Storage Account Local User.
     */
    homeDirectory?: pulumi.Input<string>;
    /**
     * The name which should be used for this Storage Account Local User. Changing this forces a new Storage Account Local User to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The value of the password, which is only available when `sshPasswordEnabled` is set to `true`.
     */
    password?: pulumi.Input<string>;
    /**
     * One or more `permissionScope` blocks as defined below.
     */
    permissionScopes?: pulumi.Input<pulumi.Input<inputs.storage.LocalUserPermissionScope>[]>;
    /**
     * The unique Security Identifier of this Storage Account Local User.
     */
    sid?: pulumi.Input<string>;
    /**
     * One or more `sshAuthorizedKey` blocks as defined below.
     */
    sshAuthorizedKeys?: pulumi.Input<pulumi.Input<inputs.storage.LocalUserSshAuthorizedKey>[]>;
    /**
     * Specifies whether SSH Key Authentication is enabled. Defaults to `false`.
     */
    sshKeyEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies whether SSH Password Authentication is enabled. Defaults to `false`.
     */
    sshPasswordEnabled?: pulumi.Input<boolean>;
    /**
     * The ID of the Storage Account that this Storage Account Local User resides in. Changing this forces a new Storage Account Local User to be created.
     */
    storageAccountId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LocalUser resource.
 */
export interface LocalUserArgs {
    /**
     * The home directory of the Storage Account Local User.
     */
    homeDirectory?: pulumi.Input<string>;
    /**
     * The name which should be used for this Storage Account Local User. Changing this forces a new Storage Account Local User to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * One or more `permissionScope` blocks as defined below.
     */
    permissionScopes?: pulumi.Input<pulumi.Input<inputs.storage.LocalUserPermissionScope>[]>;
    /**
     * One or more `sshAuthorizedKey` blocks as defined below.
     */
    sshAuthorizedKeys?: pulumi.Input<pulumi.Input<inputs.storage.LocalUserSshAuthorizedKey>[]>;
    /**
     * Specifies whether SSH Key Authentication is enabled. Defaults to `false`.
     */
    sshKeyEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies whether SSH Password Authentication is enabled. Defaults to `false`.
     */
    sshPasswordEnabled?: pulumi.Input<boolean>;
    /**
     * The ID of the Storage Account that this Storage Account Local User resides in. Changing this forces a new Storage Account Local User to be created.
     */
    storageAccountId: pulumi.Input<string>;
}
