// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Customer Managed Key for a Storage Account.
 *
 * > **Note:** It's possible to define a Customer Managed Key both within the `azure.storage.Account` resource via the `customerManagedKey` block and by using the `azure.storage.CustomerManagedKey` resource. However it's not possible to use both methods to manage a Customer Managed Key for a Storage Account, since there'll be conflicts.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleKeyVault = new azure.keyvault.KeyVault("example", {
 *     name: "examplekv",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "standard",
 *     purgeProtectionEnabled: true,
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "examplestor",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "GRS",
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * const storage = new azure.keyvault.AccessPolicy("storage", {
 *     keyVaultId: exampleKeyVault.id,
 *     tenantId: current.then(current => current.tenantId),
 *     objectId: exampleAccount.identity.apply(identity => identity?.principalId),
 *     secretPermissions: ["Get"],
 *     keyPermissions: [
 *         "Get",
 *         "UnwrapKey",
 *         "WrapKey",
 *     ],
 * });
 * const client = new azure.keyvault.AccessPolicy("client", {
 *     keyVaultId: exampleKeyVault.id,
 *     tenantId: current.then(current => current.tenantId),
 *     objectId: current.then(current => current.objectId),
 *     secretPermissions: ["Get"],
 *     keyPermissions: [
 *         "Get",
 *         "Create",
 *         "Delete",
 *         "List",
 *         "Restore",
 *         "Recover",
 *         "UnwrapKey",
 *         "WrapKey",
 *         "Purge",
 *         "Encrypt",
 *         "Decrypt",
 *         "Sign",
 *         "Verify",
 *         "GetRotationPolicy",
 *         "SetRotationPolicy",
 *     ],
 * });
 * const exampleKey = new azure.keyvault.Key("example", {
 *     name: "tfex-key",
 *     keyVaultId: exampleKeyVault.id,
 *     keyType: "RSA",
 *     keySize: 2048,
 *     keyOpts: [
 *         "decrypt",
 *         "encrypt",
 *         "sign",
 *         "unwrapKey",
 *         "verify",
 *         "wrapKey",
 *     ],
 * }, {
 *     dependsOn: [
 *         client,
 *         storage,
 *     ],
 * });
 * const exampleCustomerManagedKey = new azure.storage.CustomerManagedKey("example", {
 *     storageAccountId: exampleAccount.id,
 *     keyVaultId: exampleKeyVault.id,
 *     keyName: exampleKey.name,
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Storage` - 2023-05-01
 *
 * ## Import
 *
 * Customer Managed Keys for a Storage Account can be imported using the `resource id` of the Storage Account, e.g.
 *
 * ```sh
 * $ pulumi import azure:storage/customerManagedKey:CustomerManagedKey example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Storage/storageAccounts/myaccount
 * ```
 */
export class CustomerManagedKey extends pulumi.CustomResource {
    /**
     * Get an existing CustomerManagedKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomerManagedKeyState, opts?: pulumi.CustomResourceOptions): CustomerManagedKey {
        return new CustomerManagedKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:storage/customerManagedKey:CustomerManagedKey';

    /**
     * Returns true if the given object is an instance of CustomerManagedKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomerManagedKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomerManagedKey.__pulumiType;
    }

    /**
     * The Client ID of the multi-tenant application to be used in conjunction with the user-assigned identity for cross-tenant customer-managed-keys server-side encryption on the storage account.
     */
    declare public readonly federatedIdentityClientId: pulumi.Output<string | undefined>;
    /**
     * The name of Key Vault Key.
     */
    declare public readonly keyName: pulumi.Output<string>;
    declare public readonly keyVaultId: pulumi.Output<string | undefined>;
    /**
     * URI pointing at the Key Vault. Required when using `federatedIdentityClientId`. Exactly one of `managedHsmKeyId`, `keyVaultId`, or `keyVaultUri` must be specified.
     */
    declare public readonly keyVaultUri: pulumi.Output<string>;
    /**
     * The version of Key Vault Key. Remove or omit this argument to enable Automatic Key Rotation.
     */
    declare public readonly keyVersion: pulumi.Output<string | undefined>;
    /**
     * Key ID of a key in a managed HSM.  Exactly one of `managedHsmKeyId`, `keyVaultId`, or `keyVaultUri` must be specified.
     */
    declare public readonly managedHsmKeyId: pulumi.Output<string | undefined>;
    /**
     * The ID of the Storage Account. Changing this forces a new resource to be created.
     */
    declare public readonly storageAccountId: pulumi.Output<string>;
    /**
     * The ID of a user assigned identity.
     */
    declare public readonly userAssignedIdentityId: pulumi.Output<string | undefined>;

    /**
     * Create a CustomerManagedKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomerManagedKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomerManagedKeyArgs | CustomerManagedKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomerManagedKeyState | undefined;
            resourceInputs["federatedIdentityClientId"] = state?.federatedIdentityClientId;
            resourceInputs["keyName"] = state?.keyName;
            resourceInputs["keyVaultId"] = state?.keyVaultId;
            resourceInputs["keyVaultUri"] = state?.keyVaultUri;
            resourceInputs["keyVersion"] = state?.keyVersion;
            resourceInputs["managedHsmKeyId"] = state?.managedHsmKeyId;
            resourceInputs["storageAccountId"] = state?.storageAccountId;
            resourceInputs["userAssignedIdentityId"] = state?.userAssignedIdentityId;
        } else {
            const args = argsOrState as CustomerManagedKeyArgs | undefined;
            if (args?.keyName === undefined && !opts.urn) {
                throw new Error("Missing required property 'keyName'");
            }
            if (args?.storageAccountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'storageAccountId'");
            }
            resourceInputs["federatedIdentityClientId"] = args?.federatedIdentityClientId;
            resourceInputs["keyName"] = args?.keyName;
            resourceInputs["keyVaultId"] = args?.keyVaultId;
            resourceInputs["keyVaultUri"] = args?.keyVaultUri;
            resourceInputs["keyVersion"] = args?.keyVersion;
            resourceInputs["managedHsmKeyId"] = args?.managedHsmKeyId;
            resourceInputs["storageAccountId"] = args?.storageAccountId;
            resourceInputs["userAssignedIdentityId"] = args?.userAssignedIdentityId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomerManagedKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomerManagedKey resources.
 */
export interface CustomerManagedKeyState {
    /**
     * The Client ID of the multi-tenant application to be used in conjunction with the user-assigned identity for cross-tenant customer-managed-keys server-side encryption on the storage account.
     */
    federatedIdentityClientId?: pulumi.Input<string>;
    /**
     * The name of Key Vault Key.
     */
    keyName?: pulumi.Input<string>;
    keyVaultId?: pulumi.Input<string>;
    /**
     * URI pointing at the Key Vault. Required when using `federatedIdentityClientId`. Exactly one of `managedHsmKeyId`, `keyVaultId`, or `keyVaultUri` must be specified.
     */
    keyVaultUri?: pulumi.Input<string>;
    /**
     * The version of Key Vault Key. Remove or omit this argument to enable Automatic Key Rotation.
     */
    keyVersion?: pulumi.Input<string>;
    /**
     * Key ID of a key in a managed HSM.  Exactly one of `managedHsmKeyId`, `keyVaultId`, or `keyVaultUri` must be specified.
     */
    managedHsmKeyId?: pulumi.Input<string>;
    /**
     * The ID of the Storage Account. Changing this forces a new resource to be created.
     */
    storageAccountId?: pulumi.Input<string>;
    /**
     * The ID of a user assigned identity.
     */
    userAssignedIdentityId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CustomerManagedKey resource.
 */
export interface CustomerManagedKeyArgs {
    /**
     * The Client ID of the multi-tenant application to be used in conjunction with the user-assigned identity for cross-tenant customer-managed-keys server-side encryption on the storage account.
     */
    federatedIdentityClientId?: pulumi.Input<string>;
    /**
     * The name of Key Vault Key.
     */
    keyName: pulumi.Input<string>;
    keyVaultId?: pulumi.Input<string>;
    /**
     * URI pointing at the Key Vault. Required when using `federatedIdentityClientId`. Exactly one of `managedHsmKeyId`, `keyVaultId`, or `keyVaultUri` must be specified.
     */
    keyVaultUri?: pulumi.Input<string>;
    /**
     * The version of Key Vault Key. Remove or omit this argument to enable Automatic Key Rotation.
     */
    keyVersion?: pulumi.Input<string>;
    /**
     * Key ID of a key in a managed HSM.  Exactly one of `managedHsmKeyId`, `keyVaultId`, or `keyVaultUri` must be specified.
     */
    managedHsmKeyId?: pulumi.Input<string>;
    /**
     * The ID of the Storage Account. Changing this forces a new resource to be created.
     */
    storageAccountId: pulumi.Input<string>;
    /**
     * The ID of a user assigned identity.
     */
    userAssignedIdentityId?: pulumi.Input<string>;
}
