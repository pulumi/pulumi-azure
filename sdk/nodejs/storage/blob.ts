// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Blob within a Storage Container.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "examplestoracc",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleContainer = new azure.storage.Container("example", {
 *     name: "content",
 *     storageAccountId: exampleAccount.id,
 *     containerAccessType: "private",
 * });
 * const exampleBlob = new azure.storage.Blob("example", {
 *     name: "my-awesome-content.zip",
 *     storageAccountName: exampleAccount.name,
 *     storageContainerName: exampleContainer.name,
 *     type: "Block",
 *     source: new pulumi.asset.FileAsset("some-local-file.zip"),
 * });
 * ```
 *
 * ## Import
 *
 * Storage Blob's can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:storage/blob:Blob blob1 https://example.blob.core.windows.net/container/blob.vhd
 * ```
 */
export class Blob extends pulumi.CustomResource {
    /**
     * Get an existing Blob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlobState, opts?: pulumi.CustomResourceOptions): Blob {
        return new Blob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:storage/blob:Blob';

    /**
     * Returns true if the given object is an instance of Blob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Blob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Blob.__pulumiType;
    }

    /**
     * The access tier of the storage blob. Possible values are `Archive`, `Cool` and `Hot`.
     */
    declare public readonly accessTier: pulumi.Output<string>;
    /**
     * Controls the [cache control header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control) content of the response when blob is requested .
     */
    declare public readonly cacheControl: pulumi.Output<string | undefined>;
    /**
     * The MD5 sum of the blob contents. Cannot be defined if `sourceUri` is defined, or if blob type is Append or Page. Changing this forces a new resource to be created.
     */
    declare public readonly contentMd5: pulumi.Output<string | undefined>;
    /**
     * The content type of the storage blob. Cannot be defined if `sourceUri` is defined. Defaults to `application/octet-stream`.
     */
    declare public readonly contentType: pulumi.Output<string | undefined>;
    /**
     * The encryption scope to use for this blob.
     */
    declare public readonly encryptionScope: pulumi.Output<string | undefined>;
    /**
     * A map of custom blob metadata.
     */
    declare public readonly metadata: pulumi.Output<{[key: string]: string}>;
    /**
     * The name of the storage blob. Must be unique within the storage container the blob is located. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The number of workers per CPU core to run for concurrent uploads. Defaults to `8`. Changing this forces a new resource to be created.
     *
     * > **NOTE:** `parallelism` is only applicable for Page blobs - support for [Block Blobs is blocked on the upstream issue](https://github.com/jackofallops/giovanni/issues/15).
     */
    declare public readonly parallelism: pulumi.Output<number | undefined>;
    /**
     * Used only for `page` blobs to specify the size in bytes of the blob to be created. Must be a multiple of 512. Defaults to `0`. Changing this forces a new resource to be created.
     *
     * > **Note:** `size` is required if `sourceUri` is not set.
     */
    declare public readonly size: pulumi.Output<number | undefined>;
    /**
     * An absolute path to a file on the local system. This field cannot be specified for Append blobs and cannot be specified if `sourceContent` or `sourceUri` is specified. Changing this forces a new resource to be created.
     */
    declare public readonly source: pulumi.Output<pulumi.asset.Asset | pulumi.asset.Archive | undefined>;
    /**
     * The content for this blob which should be defined inline. This field can only be specified for Block blobs and cannot be specified if `source` or `sourceUri` is specified. Changing this forces a new resource to be created.
     */
    declare public readonly sourceContent: pulumi.Output<string | undefined>;
    /**
     * The URI of an existing blob, or a file in the Azure File service, to use as the source contents for the blob to be created. Changing this forces a new resource to be created. This field cannot be specified for Append blobs and cannot be specified if `source` or `sourceContent` is specified.
     */
    declare public readonly sourceUri: pulumi.Output<string | undefined>;
    /**
     * Specifies the storage account in which to create the storage container. Changing this forces a new resource to be created.
     */
    declare public readonly storageAccountName: pulumi.Output<string>;
    /**
     * The name of the storage container in which this blob should be created. Changing this forces a new resource to be created.
     */
    declare public readonly storageContainerName: pulumi.Output<string>;
    /**
     * The type of the storage blob to be created. Possible values are `Append`, `Block` or `Page`. Changing this forces a new resource to be created.
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * The URL of the blob
     */
    declare public /*out*/ readonly url: pulumi.Output<string>;

    /**
     * Create a Blob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BlobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BlobArgs | BlobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BlobState | undefined;
            resourceInputs["accessTier"] = state?.accessTier;
            resourceInputs["cacheControl"] = state?.cacheControl;
            resourceInputs["contentMd5"] = state?.contentMd5;
            resourceInputs["contentType"] = state?.contentType;
            resourceInputs["encryptionScope"] = state?.encryptionScope;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["name"] = state?.name;
            resourceInputs["parallelism"] = state?.parallelism;
            resourceInputs["size"] = state?.size;
            resourceInputs["source"] = state?.source;
            resourceInputs["sourceContent"] = state?.sourceContent;
            resourceInputs["sourceUri"] = state?.sourceUri;
            resourceInputs["storageAccountName"] = state?.storageAccountName;
            resourceInputs["storageContainerName"] = state?.storageContainerName;
            resourceInputs["type"] = state?.type;
            resourceInputs["url"] = state?.url;
        } else {
            const args = argsOrState as BlobArgs | undefined;
            if (args?.storageAccountName === undefined && !opts.urn) {
                throw new Error("Missing required property 'storageAccountName'");
            }
            if (args?.storageContainerName === undefined && !opts.urn) {
                throw new Error("Missing required property 'storageContainerName'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["accessTier"] = args?.accessTier;
            resourceInputs["cacheControl"] = args?.cacheControl;
            resourceInputs["contentMd5"] = args?.contentMd5;
            resourceInputs["contentType"] = args?.contentType;
            resourceInputs["encryptionScope"] = args?.encryptionScope;
            resourceInputs["metadata"] = args?.metadata;
            resourceInputs["name"] = args?.name;
            resourceInputs["parallelism"] = args?.parallelism;
            resourceInputs["size"] = args?.size;
            resourceInputs["source"] = args?.source;
            resourceInputs["sourceContent"] = args?.sourceContent;
            resourceInputs["sourceUri"] = args?.sourceUri;
            resourceInputs["storageAccountName"] = args?.storageAccountName;
            resourceInputs["storageContainerName"] = args?.storageContainerName;
            resourceInputs["type"] = args?.type;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Blob.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Blob resources.
 */
export interface BlobState {
    /**
     * The access tier of the storage blob. Possible values are `Archive`, `Cool` and `Hot`.
     */
    accessTier?: pulumi.Input<string>;
    /**
     * Controls the [cache control header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control) content of the response when blob is requested .
     */
    cacheControl?: pulumi.Input<string>;
    /**
     * The MD5 sum of the blob contents. Cannot be defined if `sourceUri` is defined, or if blob type is Append or Page. Changing this forces a new resource to be created.
     */
    contentMd5?: pulumi.Input<string>;
    /**
     * The content type of the storage blob. Cannot be defined if `sourceUri` is defined. Defaults to `application/octet-stream`.
     */
    contentType?: pulumi.Input<string>;
    /**
     * The encryption scope to use for this blob.
     */
    encryptionScope?: pulumi.Input<string>;
    /**
     * A map of custom blob metadata.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the storage blob. Must be unique within the storage container the blob is located. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of workers per CPU core to run for concurrent uploads. Defaults to `8`. Changing this forces a new resource to be created.
     *
     * > **NOTE:** `parallelism` is only applicable for Page blobs - support for [Block Blobs is blocked on the upstream issue](https://github.com/jackofallops/giovanni/issues/15).
     */
    parallelism?: pulumi.Input<number>;
    /**
     * Used only for `page` blobs to specify the size in bytes of the blob to be created. Must be a multiple of 512. Defaults to `0`. Changing this forces a new resource to be created.
     *
     * > **Note:** `size` is required if `sourceUri` is not set.
     */
    size?: pulumi.Input<number>;
    /**
     * An absolute path to a file on the local system. This field cannot be specified for Append blobs and cannot be specified if `sourceContent` or `sourceUri` is specified. Changing this forces a new resource to be created.
     */
    source?: pulumi.Input<pulumi.asset.Asset | pulumi.asset.Archive>;
    /**
     * The content for this blob which should be defined inline. This field can only be specified for Block blobs and cannot be specified if `source` or `sourceUri` is specified. Changing this forces a new resource to be created.
     */
    sourceContent?: pulumi.Input<string>;
    /**
     * The URI of an existing blob, or a file in the Azure File service, to use as the source contents for the blob to be created. Changing this forces a new resource to be created. This field cannot be specified for Append blobs and cannot be specified if `source` or `sourceContent` is specified.
     */
    sourceUri?: pulumi.Input<string>;
    /**
     * Specifies the storage account in which to create the storage container. Changing this forces a new resource to be created.
     */
    storageAccountName?: pulumi.Input<string>;
    /**
     * The name of the storage container in which this blob should be created. Changing this forces a new resource to be created.
     */
    storageContainerName?: pulumi.Input<string>;
    /**
     * The type of the storage blob to be created. Possible values are `Append`, `Block` or `Page`. Changing this forces a new resource to be created.
     */
    type?: pulumi.Input<string>;
    /**
     * The URL of the blob
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Blob resource.
 */
export interface BlobArgs {
    /**
     * The access tier of the storage blob. Possible values are `Archive`, `Cool` and `Hot`.
     */
    accessTier?: pulumi.Input<string>;
    /**
     * Controls the [cache control header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control) content of the response when blob is requested .
     */
    cacheControl?: pulumi.Input<string>;
    /**
     * The MD5 sum of the blob contents. Cannot be defined if `sourceUri` is defined, or if blob type is Append or Page. Changing this forces a new resource to be created.
     */
    contentMd5?: pulumi.Input<string>;
    /**
     * The content type of the storage blob. Cannot be defined if `sourceUri` is defined. Defaults to `application/octet-stream`.
     */
    contentType?: pulumi.Input<string>;
    /**
     * The encryption scope to use for this blob.
     */
    encryptionScope?: pulumi.Input<string>;
    /**
     * A map of custom blob metadata.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the storage blob. Must be unique within the storage container the blob is located. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of workers per CPU core to run for concurrent uploads. Defaults to `8`. Changing this forces a new resource to be created.
     *
     * > **NOTE:** `parallelism` is only applicable for Page blobs - support for [Block Blobs is blocked on the upstream issue](https://github.com/jackofallops/giovanni/issues/15).
     */
    parallelism?: pulumi.Input<number>;
    /**
     * Used only for `page` blobs to specify the size in bytes of the blob to be created. Must be a multiple of 512. Defaults to `0`. Changing this forces a new resource to be created.
     *
     * > **Note:** `size` is required if `sourceUri` is not set.
     */
    size?: pulumi.Input<number>;
    /**
     * An absolute path to a file on the local system. This field cannot be specified for Append blobs and cannot be specified if `sourceContent` or `sourceUri` is specified. Changing this forces a new resource to be created.
     */
    source?: pulumi.Input<pulumi.asset.Asset | pulumi.asset.Archive>;
    /**
     * The content for this blob which should be defined inline. This field can only be specified for Block blobs and cannot be specified if `source` or `sourceUri` is specified. Changing this forces a new resource to be created.
     */
    sourceContent?: pulumi.Input<string>;
    /**
     * The URI of an existing blob, or a file in the Azure File service, to use as the source contents for the blob to be created. Changing this forces a new resource to be created. This field cannot be specified for Append blobs and cannot be specified if `source` or `sourceContent` is specified.
     */
    sourceUri?: pulumi.Input<string>;
    /**
     * Specifies the storage account in which to create the storage container. Changing this forces a new resource to be created.
     */
    storageAccountName: pulumi.Input<string>;
    /**
     * The name of the storage container in which this blob should be created. Changing this forces a new resource to be created.
     */
    storageContainerName: pulumi.Input<string>;
    /**
     * The type of the storage blob to be created. Possible values are `Append`, `Block` or `Page`. Changing this forces a new resource to be created.
     */
    type: pulumi.Input<string>;
}
