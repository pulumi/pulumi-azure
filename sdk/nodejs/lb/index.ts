// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BackendAddressPoolArgs, BackendAddressPoolState } from "./backendAddressPool";
export type BackendAddressPool = import("./backendAddressPool").BackendAddressPool;
export const BackendAddressPool: typeof import("./backendAddressPool").BackendAddressPool = null as any;
utilities.lazyLoad(exports, ["BackendAddressPool"], () => require("./backendAddressPool"));

export { BackendAddressPoolAddressArgs, BackendAddressPoolAddressState } from "./backendAddressPoolAddress";
export type BackendAddressPoolAddress = import("./backendAddressPoolAddress").BackendAddressPoolAddress;
export const BackendAddressPoolAddress: typeof import("./backendAddressPoolAddress").BackendAddressPoolAddress = null as any;
utilities.lazyLoad(exports, ["BackendAddressPoolAddress"], () => require("./backendAddressPoolAddress"));

export { GetBackendAddressPoolArgs, GetBackendAddressPoolResult, GetBackendAddressPoolOutputArgs } from "./getBackendAddressPool";
export const getBackendAddressPool: typeof import("./getBackendAddressPool").getBackendAddressPool = null as any;
export const getBackendAddressPoolOutput: typeof import("./getBackendAddressPool").getBackendAddressPoolOutput = null as any;
utilities.lazyLoad(exports, ["getBackendAddressPool","getBackendAddressPoolOutput"], () => require("./getBackendAddressPool"));

export { GetLBArgs, GetLBResult, GetLBOutputArgs } from "./getLB";
export const getLB: typeof import("./getLB").getLB = null as any;
export const getLBOutput: typeof import("./getLB").getLBOutput = null as any;
utilities.lazyLoad(exports, ["getLB","getLBOutput"], () => require("./getLB"));

export { GetLBOutboundRuleArgs, GetLBOutboundRuleResult, GetLBOutboundRuleOutputArgs } from "./getLBOutboundRule";
export const getLBOutboundRule: typeof import("./getLBOutboundRule").getLBOutboundRule = null as any;
export const getLBOutboundRuleOutput: typeof import("./getLBOutboundRule").getLBOutboundRuleOutput = null as any;
utilities.lazyLoad(exports, ["getLBOutboundRule","getLBOutboundRuleOutput"], () => require("./getLBOutboundRule"));

export { GetLBRuleArgs, GetLBRuleResult, GetLBRuleOutputArgs } from "./getLBRule";
export const getLBRule: typeof import("./getLBRule").getLBRule = null as any;
export const getLBRuleOutput: typeof import("./getLBRule").getLBRuleOutput = null as any;
utilities.lazyLoad(exports, ["getLBRule","getLBRuleOutput"], () => require("./getLBRule"));

export { LoadBalancerArgs, LoadBalancerState } from "./loadBalancer";
export type LoadBalancer = import("./loadBalancer").LoadBalancer;
export const LoadBalancer: typeof import("./loadBalancer").LoadBalancer = null as any;
utilities.lazyLoad(exports, ["LoadBalancer"], () => require("./loadBalancer"));

export { NatPoolArgs, NatPoolState } from "./natPool";
export type NatPool = import("./natPool").NatPool;
export const NatPool: typeof import("./natPool").NatPool = null as any;
utilities.lazyLoad(exports, ["NatPool"], () => require("./natPool"));

export { NatRuleArgs, NatRuleState } from "./natRule";
export type NatRule = import("./natRule").NatRule;
export const NatRule: typeof import("./natRule").NatRule = null as any;
utilities.lazyLoad(exports, ["NatRule"], () => require("./natRule"));

export { OutboundRuleArgs, OutboundRuleState } from "./outboundRule";
export type OutboundRule = import("./outboundRule").OutboundRule;
export const OutboundRule: typeof import("./outboundRule").OutboundRule = null as any;
utilities.lazyLoad(exports, ["OutboundRule"], () => require("./outboundRule"));

export { ProbeArgs, ProbeState } from "./probe";
export type Probe = import("./probe").Probe;
export const Probe: typeof import("./probe").Probe = null as any;
utilities.lazyLoad(exports, ["Probe"], () => require("./probe"));

export { RuleArgs, RuleState } from "./rule";
export type Rule = import("./rule").Rule;
export const Rule: typeof import("./rule").Rule = null as any;
utilities.lazyLoad(exports, ["Rule"], () => require("./rule"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:lb/backendAddressPool:BackendAddressPool":
                return new BackendAddressPool(name, <any>undefined, { urn })
            case "azure:lb/backendAddressPoolAddress:BackendAddressPoolAddress":
                return new BackendAddressPoolAddress(name, <any>undefined, { urn })
            case "azure:lb/loadBalancer:LoadBalancer":
                return new LoadBalancer(name, <any>undefined, { urn })
            case "azure:lb/natPool:NatPool":
                return new NatPool(name, <any>undefined, { urn })
            case "azure:lb/natRule:NatRule":
                return new NatRule(name, <any>undefined, { urn })
            case "azure:lb/outboundRule:OutboundRule":
                return new OutboundRule(name, <any>undefined, { urn })
            case "azure:lb/probe:Probe":
                return new Probe(name, <any>undefined, { urn })
            case "azure:lb/rule:Rule":
                return new Rule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "lb/backendAddressPool", _module)
pulumi.runtime.registerResourceModule("azure", "lb/backendAddressPoolAddress", _module)
pulumi.runtime.registerResourceModule("azure", "lb/loadBalancer", _module)
pulumi.runtime.registerResourceModule("azure", "lb/natPool", _module)
pulumi.runtime.registerResourceModule("azure", "lb/natRule", _module)
pulumi.runtime.registerResourceModule("azure", "lb/outboundRule", _module)
pulumi.runtime.registerResourceModule("azure", "lb/probe", _module)
pulumi.runtime.registerResourceModule("azure", "lb/rule", _module)
