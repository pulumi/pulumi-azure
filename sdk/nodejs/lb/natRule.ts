// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Load Balancer NAT Rule.
 *
 * > **Note:** This resource cannot be used with with virtual machine scale sets, instead use the `azure.lb.NatPool` resource.
 *
 * > **Note:** When using this resource, the Load Balancer needs to have a FrontEnd IP Configuration Attached
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "LoadBalancerRG",
 *     location: "West Europe",
 * });
 * const examplePublicIp = new azure.network.PublicIp("example", {
 *     name: "PublicIPForLB",
 *     location: "West US",
 *     resourceGroupName: example.name,
 *     allocationMethod: "Static",
 * });
 * const exampleLoadBalancer = new azure.lb.LoadBalancer("example", {
 *     name: "TestLoadBalancer",
 *     location: "West US",
 *     resourceGroupName: example.name,
 *     frontendIpConfigurations: [{
 *         name: "PublicIPAddress",
 *         publicIpAddressId: examplePublicIp.id,
 *     }],
 * });
 * const exampleBackendAddressPool = new azure.lb.BackendAddressPool("example", {
 *     loadbalancerId: exampleLoadBalancer.id,
 *     name: "be",
 * });
 * const exampleNatRule = new azure.lb.NatRule("example", {
 *     resourceGroupName: example.name,
 *     loadbalancerId: exampleLoadBalancer.id,
 *     name: "RDPAccess",
 *     protocol: "Tcp",
 *     frontendPort: 3389,
 *     backendPort: 3389,
 *     frontendIpConfigurationName: "PublicIPAddress",
 * });
 * const example1 = new azure.lb.NatRule("example1", {
 *     resourceGroupName: example.name,
 *     loadbalancerId: exampleLoadBalancer.id,
 *     name: "RDPAccess",
 *     protocol: "Tcp",
 *     frontendPortStart: 3000,
 *     frontendPortEnd: 3389,
 *     backendPort: 3389,
 *     backendAddressPoolId: exampleBackendAddressPool.id,
 *     frontendIpConfigurationName: "PublicIPAddress",
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Network` - 2023-09-01
 *
 * ## Import
 *
 * Load Balancer NAT Rules can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:lb/natRule:NatRule example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/rule1
 * ```
 */
export class NatRule extends pulumi.CustomResource {
    /**
     * Get an existing NatRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NatRuleState, opts?: pulumi.CustomResourceOptions): NatRule {
        return new NatRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:lb/natRule:NatRule';

    /**
     * Returns true if the given object is an instance of NatRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NatRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NatRule.__pulumiType;
    }

    /**
     * Specifies a reference to backendAddressPool resource.
     */
    declare public readonly backendAddressPoolId: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly backendIpConfigurationId: pulumi.Output<string>;
    /**
     * The port used for internal connections on the endpoint. Possible values range between 1 and 65535, inclusive.
     */
    declare public readonly backendPort: pulumi.Output<number>;
    /**
     * @deprecated This field is deprecated in favour of `floatingIpEnabled` and will be removed in version 5.0 of the provider.
     */
    declare public readonly enableFloatingIp: pulumi.Output<boolean>;
    /**
     * @deprecated This field is deprecated in favour of `tcpResetEnabled` and will be removed in version 5.0 of the provider.
     */
    declare public readonly enableTcpReset: pulumi.Output<boolean>;
    /**
     * Are the Floating IPs enabled for this Load Balancer Rule? A "floating" IP is reassigned to a secondary server in case the primary server fails. Required to configure a SQL AlwaysOn Availability Group. Defaults to `false`.
     */
    declare public readonly floatingIpEnabled: pulumi.Output<boolean>;
    declare public /*out*/ readonly frontendIpConfigurationId: pulumi.Output<string>;
    /**
     * The name of the frontend IP configuration exposing this rule.
     */
    declare public readonly frontendIpConfigurationName: pulumi.Output<string>;
    /**
     * The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 1 and 65534, inclusive.
     */
    declare public readonly frontendPort: pulumi.Output<number | undefined>;
    /**
     * The port range end for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeStart. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
     */
    declare public readonly frontendPortEnd: pulumi.Output<number | undefined>;
    /**
     * The port range start for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeEnd. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
     */
    declare public readonly frontendPortStart: pulumi.Output<number | undefined>;
    /**
     * Specifies the idle timeout in minutes for TCP connections. Valid values are between `4` and `30` minutes. Defaults to `4` minutes.
     */
    declare public readonly idleTimeoutInMinutes: pulumi.Output<number | undefined>;
    /**
     * The ID of the Load Balancer in which to create the NAT Rule. Changing this forces a new resource to be created.
     */
    declare public readonly loadbalancerId: pulumi.Output<string>;
    /**
     * Specifies the name of the NAT Rule. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The transport protocol for the external endpoint. Possible values are `Udp`, `Tcp` or `All`.
     */
    declare public readonly protocol: pulumi.Output<string>;
    /**
     * The name of the resource group in which to create the resource. Changing this forces a new resource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * Is TCP Reset enabled for this Load Balancer Rule?
     */
    declare public readonly tcpResetEnabled: pulumi.Output<boolean>;

    /**
     * Create a NatRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NatRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NatRuleArgs | NatRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NatRuleState | undefined;
            resourceInputs["backendAddressPoolId"] = state?.backendAddressPoolId;
            resourceInputs["backendIpConfigurationId"] = state?.backendIpConfigurationId;
            resourceInputs["backendPort"] = state?.backendPort;
            resourceInputs["enableFloatingIp"] = state?.enableFloatingIp;
            resourceInputs["enableTcpReset"] = state?.enableTcpReset;
            resourceInputs["floatingIpEnabled"] = state?.floatingIpEnabled;
            resourceInputs["frontendIpConfigurationId"] = state?.frontendIpConfigurationId;
            resourceInputs["frontendIpConfigurationName"] = state?.frontendIpConfigurationName;
            resourceInputs["frontendPort"] = state?.frontendPort;
            resourceInputs["frontendPortEnd"] = state?.frontendPortEnd;
            resourceInputs["frontendPortStart"] = state?.frontendPortStart;
            resourceInputs["idleTimeoutInMinutes"] = state?.idleTimeoutInMinutes;
            resourceInputs["loadbalancerId"] = state?.loadbalancerId;
            resourceInputs["name"] = state?.name;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["tcpResetEnabled"] = state?.tcpResetEnabled;
        } else {
            const args = argsOrState as NatRuleArgs | undefined;
            if (args?.backendPort === undefined && !opts.urn) {
                throw new Error("Missing required property 'backendPort'");
            }
            if (args?.frontendIpConfigurationName === undefined && !opts.urn) {
                throw new Error("Missing required property 'frontendIpConfigurationName'");
            }
            if (args?.loadbalancerId === undefined && !opts.urn) {
                throw new Error("Missing required property 'loadbalancerId'");
            }
            if (args?.protocol === undefined && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["backendAddressPoolId"] = args?.backendAddressPoolId;
            resourceInputs["backendPort"] = args?.backendPort;
            resourceInputs["enableFloatingIp"] = args?.enableFloatingIp;
            resourceInputs["enableTcpReset"] = args?.enableTcpReset;
            resourceInputs["floatingIpEnabled"] = args?.floatingIpEnabled;
            resourceInputs["frontendIpConfigurationName"] = args?.frontendIpConfigurationName;
            resourceInputs["frontendPort"] = args?.frontendPort;
            resourceInputs["frontendPortEnd"] = args?.frontendPortEnd;
            resourceInputs["frontendPortStart"] = args?.frontendPortStart;
            resourceInputs["idleTimeoutInMinutes"] = args?.idleTimeoutInMinutes;
            resourceInputs["loadbalancerId"] = args?.loadbalancerId;
            resourceInputs["name"] = args?.name;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["tcpResetEnabled"] = args?.tcpResetEnabled;
            resourceInputs["backendIpConfigurationId"] = undefined /*out*/;
            resourceInputs["frontendIpConfigurationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NatRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NatRule resources.
 */
export interface NatRuleState {
    /**
     * Specifies a reference to backendAddressPool resource.
     */
    backendAddressPoolId?: pulumi.Input<string>;
    backendIpConfigurationId?: pulumi.Input<string>;
    /**
     * The port used for internal connections on the endpoint. Possible values range between 1 and 65535, inclusive.
     */
    backendPort?: pulumi.Input<number>;
    /**
     * @deprecated This field is deprecated in favour of `floatingIpEnabled` and will be removed in version 5.0 of the provider.
     */
    enableFloatingIp?: pulumi.Input<boolean>;
    /**
     * @deprecated This field is deprecated in favour of `tcpResetEnabled` and will be removed in version 5.0 of the provider.
     */
    enableTcpReset?: pulumi.Input<boolean>;
    /**
     * Are the Floating IPs enabled for this Load Balancer Rule? A "floating" IP is reassigned to a secondary server in case the primary server fails. Required to configure a SQL AlwaysOn Availability Group. Defaults to `false`.
     */
    floatingIpEnabled?: pulumi.Input<boolean>;
    frontendIpConfigurationId?: pulumi.Input<string>;
    /**
     * The name of the frontend IP configuration exposing this rule.
     */
    frontendIpConfigurationName?: pulumi.Input<string>;
    /**
     * The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 1 and 65534, inclusive.
     */
    frontendPort?: pulumi.Input<number>;
    /**
     * The port range end for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeStart. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
     */
    frontendPortEnd?: pulumi.Input<number>;
    /**
     * The port range start for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeEnd. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
     */
    frontendPortStart?: pulumi.Input<number>;
    /**
     * Specifies the idle timeout in minutes for TCP connections. Valid values are between `4` and `30` minutes. Defaults to `4` minutes.
     */
    idleTimeoutInMinutes?: pulumi.Input<number>;
    /**
     * The ID of the Load Balancer in which to create the NAT Rule. Changing this forces a new resource to be created.
     */
    loadbalancerId?: pulumi.Input<string>;
    /**
     * Specifies the name of the NAT Rule. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The transport protocol for the external endpoint. Possible values are `Udp`, `Tcp` or `All`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the resource. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * Is TCP Reset enabled for this Load Balancer Rule?
     */
    tcpResetEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a NatRule resource.
 */
export interface NatRuleArgs {
    /**
     * Specifies a reference to backendAddressPool resource.
     */
    backendAddressPoolId?: pulumi.Input<string>;
    /**
     * The port used for internal connections on the endpoint. Possible values range between 1 and 65535, inclusive.
     */
    backendPort: pulumi.Input<number>;
    /**
     * @deprecated This field is deprecated in favour of `floatingIpEnabled` and will be removed in version 5.0 of the provider.
     */
    enableFloatingIp?: pulumi.Input<boolean>;
    /**
     * @deprecated This field is deprecated in favour of `tcpResetEnabled` and will be removed in version 5.0 of the provider.
     */
    enableTcpReset?: pulumi.Input<boolean>;
    /**
     * Are the Floating IPs enabled for this Load Balancer Rule? A "floating" IP is reassigned to a secondary server in case the primary server fails. Required to configure a SQL AlwaysOn Availability Group. Defaults to `false`.
     */
    floatingIpEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the frontend IP configuration exposing this rule.
     */
    frontendIpConfigurationName: pulumi.Input<string>;
    /**
     * The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 1 and 65534, inclusive.
     */
    frontendPort?: pulumi.Input<number>;
    /**
     * The port range end for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeStart. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
     */
    frontendPortEnd?: pulumi.Input<number>;
    /**
     * The port range start for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeEnd. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
     */
    frontendPortStart?: pulumi.Input<number>;
    /**
     * Specifies the idle timeout in minutes for TCP connections. Valid values are between `4` and `30` minutes. Defaults to `4` minutes.
     */
    idleTimeoutInMinutes?: pulumi.Input<number>;
    /**
     * The ID of the Load Balancer in which to create the NAT Rule. Changing this forces a new resource to be created.
     */
    loadbalancerId: pulumi.Input<string>;
    /**
     * Specifies the name of the NAT Rule. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The transport protocol for the external endpoint. Possible values are `Udp`, `Tcp` or `All`.
     */
    protocol: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the resource. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Is TCP Reset enabled for this Load Balancer Rule?
     */
    tcpResetEnabled?: pulumi.Input<boolean>;
}
