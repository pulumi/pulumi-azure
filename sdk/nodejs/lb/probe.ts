// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a LoadBalancer Probe Resource.
 *
 * > **NOTE** When using this resource, the Load Balancer needs to have a FrontEnd IP Configuration Attached
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const examplePublicIp = new azure.network.PublicIp("examplePublicIp", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     allocationMethod: "Static",
 * });
 * const exampleLoadBalancer = new azure.lb.LoadBalancer("exampleLoadBalancer", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     frontendIpConfigurations: [{
 *         name: "PublicIPAddress",
 *         publicIpAddressId: examplePublicIp.id,
 *     }],
 * });
 * const exampleProbe = new azure.lb.Probe("exampleProbe", {
 *     loadbalancerId: exampleLoadBalancer.id,
 *     port: 22,
 * });
 * ```
 *
 * ## Import
 *
 * Load Balancer Probes can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:lb/probe:Probe example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/loadBalancers/lb1/probes/probe1
 * ```
 */
export class Probe extends pulumi.CustomResource {
    /**
     * Get an existing Probe resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProbeState, opts?: pulumi.CustomResourceOptions): Probe {
        return new Probe(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:lb/probe:Probe';

    /**
     * Returns true if the given object is an instance of Probe.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Probe {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Probe.__pulumiType;
    }

    /**
     * The interval, in seconds between probes to the backend endpoint for health status. The default value is 15, the minimum value is 5.
     */
    public readonly intervalInSeconds!: pulumi.Output<number | undefined>;
    public /*out*/ readonly loadBalancerRules!: pulumi.Output<string[]>;
    /**
     * The ID of the LoadBalancer in which to create the NAT Rule. Changing this forces a new resource to be created.
     */
    public readonly loadbalancerId!: pulumi.Output<string>;
    /**
     * Specifies the name of the Probe. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The number of failed probe attempts after which the backend endpoint is removed from rotation. Default to `2`. NumberOfProbes multiplied by intervalInSeconds value must be greater or equal to 10.Endpoints are returned to rotation when at least one probe is successful.
     */
    public readonly numberOfProbes!: pulumi.Output<number | undefined>;
    /**
     * Port on which the Probe queries the backend endpoint. Possible values range from 1 to 65535, inclusive.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * The number of consecutive successful or failed probes that allow or deny traffic to this endpoint. Possible values range from `1` to `100`. The default value is `1`.
     */
    public readonly probeThreshold!: pulumi.Output<number | undefined>;
    /**
     * Specifies the protocol of the end point. Possible values are `Http`, `Https` or `Tcp`. If TCP is specified, a received ACK is required for the probe to be successful. If HTTP is specified, a 200 OK response from the specified URI is required for the probe to be successful.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * The URI used for requesting health status from the backend endpoint. Required if protocol is set to `Http` or `Https`. Otherwise, it is not allowed.
     */
    public readonly requestPath!: pulumi.Output<string | undefined>;

    /**
     * Create a Probe resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProbeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProbeArgs | ProbeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProbeState | undefined;
            resourceInputs["intervalInSeconds"] = state ? state.intervalInSeconds : undefined;
            resourceInputs["loadBalancerRules"] = state ? state.loadBalancerRules : undefined;
            resourceInputs["loadbalancerId"] = state ? state.loadbalancerId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numberOfProbes"] = state ? state.numberOfProbes : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["probeThreshold"] = state ? state.probeThreshold : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["requestPath"] = state ? state.requestPath : undefined;
        } else {
            const args = argsOrState as ProbeArgs | undefined;
            if ((!args || args.loadbalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadbalancerId'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            resourceInputs["intervalInSeconds"] = args ? args.intervalInSeconds : undefined;
            resourceInputs["loadbalancerId"] = args ? args.loadbalancerId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numberOfProbes"] = args ? args.numberOfProbes : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["probeThreshold"] = args ? args.probeThreshold : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["requestPath"] = args ? args.requestPath : undefined;
            resourceInputs["loadBalancerRules"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Probe.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Probe resources.
 */
export interface ProbeState {
    /**
     * The interval, in seconds between probes to the backend endpoint for health status. The default value is 15, the minimum value is 5.
     */
    intervalInSeconds?: pulumi.Input<number>;
    loadBalancerRules?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the LoadBalancer in which to create the NAT Rule. Changing this forces a new resource to be created.
     */
    loadbalancerId?: pulumi.Input<string>;
    /**
     * Specifies the name of the Probe. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of failed probe attempts after which the backend endpoint is removed from rotation. Default to `2`. NumberOfProbes multiplied by intervalInSeconds value must be greater or equal to 10.Endpoints are returned to rotation when at least one probe is successful.
     */
    numberOfProbes?: pulumi.Input<number>;
    /**
     * Port on which the Probe queries the backend endpoint. Possible values range from 1 to 65535, inclusive.
     */
    port?: pulumi.Input<number>;
    /**
     * The number of consecutive successful or failed probes that allow or deny traffic to this endpoint. Possible values range from `1` to `100`. The default value is `1`.
     */
    probeThreshold?: pulumi.Input<number>;
    /**
     * Specifies the protocol of the end point. Possible values are `Http`, `Https` or `Tcp`. If TCP is specified, a received ACK is required for the probe to be successful. If HTTP is specified, a 200 OK response from the specified URI is required for the probe to be successful.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The URI used for requesting health status from the backend endpoint. Required if protocol is set to `Http` or `Https`. Otherwise, it is not allowed.
     */
    requestPath?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Probe resource.
 */
export interface ProbeArgs {
    /**
     * The interval, in seconds between probes to the backend endpoint for health status. The default value is 15, the minimum value is 5.
     */
    intervalInSeconds?: pulumi.Input<number>;
    /**
     * The ID of the LoadBalancer in which to create the NAT Rule. Changing this forces a new resource to be created.
     */
    loadbalancerId: pulumi.Input<string>;
    /**
     * Specifies the name of the Probe. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of failed probe attempts after which the backend endpoint is removed from rotation. Default to `2`. NumberOfProbes multiplied by intervalInSeconds value must be greater or equal to 10.Endpoints are returned to rotation when at least one probe is successful.
     */
    numberOfProbes?: pulumi.Input<number>;
    /**
     * Port on which the Probe queries the backend endpoint. Possible values range from 1 to 65535, inclusive.
     */
    port: pulumi.Input<number>;
    /**
     * The number of consecutive successful or failed probes that allow or deny traffic to this endpoint. Possible values range from `1` to `100`. The default value is `1`.
     */
    probeThreshold?: pulumi.Input<number>;
    /**
     * Specifies the protocol of the end point. Possible values are `Http`, `Https` or `Tcp`. If TCP is specified, a received ACK is required for the probe to be successful. If HTTP is specified, a 200 OK response from the specified URI is required for the probe to be successful.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The URI used for requesting health status from the backend endpoint. Required if protocol is set to `Http` or `Https`. Otherwise, it is not allowed.
     */
    requestPath?: pulumi.Input<string>;
}
