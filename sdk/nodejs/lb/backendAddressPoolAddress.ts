// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Backend Address within a Backend Address Pool.
 *
 * > **Note:** Backend Addresses can only be added to a `Standard` SKU Load Balancer.
 *
 * ## Import
 *
 * Backend Address Pool Addresses can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:lb/backendAddressPoolAddress:BackendAddressPoolAddress example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/loadBalancers/loadBalancer1/backendAddressPools/backendAddressPool1/addresses/address1
 * ```
 */
export class BackendAddressPoolAddress extends pulumi.CustomResource {
    /**
     * Get an existing BackendAddressPoolAddress resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackendAddressPoolAddressState, opts?: pulumi.CustomResourceOptions): BackendAddressPoolAddress {
        return new BackendAddressPoolAddress(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:lb/backendAddressPoolAddress:BackendAddressPoolAddress';

    /**
     * Returns true if the given object is an instance of BackendAddressPoolAddress.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BackendAddressPoolAddress {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BackendAddressPoolAddress.__pulumiType;
    }

    /**
     * The ip config ID of the regional load balancer that's added to the global load balancer's backend address pool.
     *
     * > **Note:** For cross-region load balancer, please append the name of the load balancers, virtual machines, and other resources in each region with a -R1 and -R2.
     */
    public readonly backendAddressIpConfigurationId!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Backend Address Pool. Changing this forces a new Backend Address Pool Address to be created.
     */
    public readonly backendAddressPoolId!: pulumi.Output<string>;
    /**
     * A list of `inboundNatRulePortMapping` block as defined below.
     */
    public /*out*/ readonly inboundNatRulePortMappings!: pulumi.Output<outputs.lb.BackendAddressPoolAddressInboundNatRulePortMapping[]>;
    /**
     * The Static IP Address which should be allocated to this Backend Address Pool.
     */
    public readonly ipAddress!: pulumi.Output<string | undefined>;
    /**
     * The name which should be used for this Backend Address Pool Address. Changing this forces a new Backend Address Pool Address to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the Virtual Network within which the Backend Address Pool should exist.
     */
    public readonly virtualNetworkId!: pulumi.Output<string | undefined>;

    /**
     * Create a BackendAddressPoolAddress resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackendAddressPoolAddressArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackendAddressPoolAddressArgs | BackendAddressPoolAddressState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackendAddressPoolAddressState | undefined;
            resourceInputs["backendAddressIpConfigurationId"] = state ? state.backendAddressIpConfigurationId : undefined;
            resourceInputs["backendAddressPoolId"] = state ? state.backendAddressPoolId : undefined;
            resourceInputs["inboundNatRulePortMappings"] = state ? state.inboundNatRulePortMappings : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["virtualNetworkId"] = state ? state.virtualNetworkId : undefined;
        } else {
            const args = argsOrState as BackendAddressPoolAddressArgs | undefined;
            if ((!args || args.backendAddressPoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backendAddressPoolId'");
            }
            resourceInputs["backendAddressIpConfigurationId"] = args ? args.backendAddressIpConfigurationId : undefined;
            resourceInputs["backendAddressPoolId"] = args ? args.backendAddressPoolId : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["virtualNetworkId"] = args ? args.virtualNetworkId : undefined;
            resourceInputs["inboundNatRulePortMappings"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BackendAddressPoolAddress.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BackendAddressPoolAddress resources.
 */
export interface BackendAddressPoolAddressState {
    /**
     * The ip config ID of the regional load balancer that's added to the global load balancer's backend address pool.
     *
     * > **Note:** For cross-region load balancer, please append the name of the load balancers, virtual machines, and other resources in each region with a -R1 and -R2.
     */
    backendAddressIpConfigurationId?: pulumi.Input<string>;
    /**
     * The ID of the Backend Address Pool. Changing this forces a new Backend Address Pool Address to be created.
     */
    backendAddressPoolId?: pulumi.Input<string>;
    /**
     * A list of `inboundNatRulePortMapping` block as defined below.
     */
    inboundNatRulePortMappings?: pulumi.Input<pulumi.Input<inputs.lb.BackendAddressPoolAddressInboundNatRulePortMapping>[]>;
    /**
     * The Static IP Address which should be allocated to this Backend Address Pool.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * The name which should be used for this Backend Address Pool Address. Changing this forces a new Backend Address Pool Address to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Virtual Network within which the Backend Address Pool should exist.
     */
    virtualNetworkId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BackendAddressPoolAddress resource.
 */
export interface BackendAddressPoolAddressArgs {
    /**
     * The ip config ID of the regional load balancer that's added to the global load balancer's backend address pool.
     *
     * > **Note:** For cross-region load balancer, please append the name of the load balancers, virtual machines, and other resources in each region with a -R1 and -R2.
     */
    backendAddressIpConfigurationId?: pulumi.Input<string>;
    /**
     * The ID of the Backend Address Pool. Changing this forces a new Backend Address Pool Address to be created.
     */
    backendAddressPoolId: pulumi.Input<string>;
    /**
     * The Static IP Address which should be allocated to this Backend Address Pool.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * The name which should be used for this Backend Address Pool Address. Changing this forces a new Backend Address Pool Address to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Virtual Network within which the Backend Address Pool should exist.
     */
    virtualNetworkId?: pulumi.Input<string>;
}
