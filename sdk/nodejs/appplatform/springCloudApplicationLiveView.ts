// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * > **NOTE:** This resource is applicable only for Spring Cloud Service with enterprise tier.
 *
 * Manages a Spring Cloud Application Live View.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleSpringCloudService = new azure.appplatform.SpringCloudService("exampleSpringCloudService", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     skuName: "E0",
 * });
 * const exampleSpringCloudApplicationLiveView = new azure.appplatform.SpringCloudApplicationLiveView("exampleSpringCloudApplicationLiveView", {springCloudServiceId: exampleSpringCloudService.id});
 * ```
 *
 * ## Import
 *
 * Spring Cloud Application Live Views can be imported using the `resource id`, e.g. g
 *
 * ```sh
 *  $ pulumi import azure:appplatform/springCloudApplicationLiveView:SpringCloudApplicationLiveView example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resourceGroup1/providers/Microsoft.AppPlatform/spring/service1/applicationLiveViews/default
 * ```
 */
export class SpringCloudApplicationLiveView extends pulumi.CustomResource {
    /**
     * Get an existing SpringCloudApplicationLiveView resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SpringCloudApplicationLiveViewState, opts?: pulumi.CustomResourceOptions): SpringCloudApplicationLiveView {
        return new SpringCloudApplicationLiveView(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:appplatform/springCloudApplicationLiveView:SpringCloudApplicationLiveView';

    /**
     * Returns true if the given object is an instance of SpringCloudApplicationLiveView.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SpringCloudApplicationLiveView {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SpringCloudApplicationLiveView.__pulumiType;
    }

    /**
     * The name which should be used for this Spring Cloud Application Live View. Changing this forces a new Spring Cloud Application Live View to be created. The only possible value is `default`.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Application Live View to be created.
     */
    public readonly springCloudServiceId!: pulumi.Output<string>;

    /**
     * Create a SpringCloudApplicationLiveView resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SpringCloudApplicationLiveViewArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SpringCloudApplicationLiveViewArgs | SpringCloudApplicationLiveViewState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SpringCloudApplicationLiveViewState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["springCloudServiceId"] = state ? state.springCloudServiceId : undefined;
        } else {
            const args = argsOrState as SpringCloudApplicationLiveViewArgs | undefined;
            if ((!args || args.springCloudServiceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'springCloudServiceId'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["springCloudServiceId"] = args ? args.springCloudServiceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SpringCloudApplicationLiveView.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SpringCloudApplicationLiveView resources.
 */
export interface SpringCloudApplicationLiveViewState {
    /**
     * The name which should be used for this Spring Cloud Application Live View. Changing this forces a new Spring Cloud Application Live View to be created. The only possible value is `default`.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Application Live View to be created.
     */
    springCloudServiceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SpringCloudApplicationLiveView resource.
 */
export interface SpringCloudApplicationLiveViewArgs {
    /**
     * The name which should be used for this Spring Cloud Application Live View. Changing this forces a new Spring Cloud Application Live View to be created. The only possible value is `default`.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Application Live View to be created.
     */
    springCloudServiceId: pulumi.Input<string>;
}
