// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Spring Cloud Storage.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "GRS",
 * });
 * const exampleSpringCloudService = new azure.appplatform.SpringCloudService("exampleSpringCloudService", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * const exampleSpringCloudStorage = new azure.appplatform.SpringCloudStorage("exampleSpringCloudStorage", {
 *     springCloudServiceId: exampleSpringCloudService.id,
 *     storageAccountName: exampleAccount.name,
 *     storageAccountKey: exampleAccount.primaryAccessKey,
 * });
 * ```
 *
 * ## Import
 *
 * Spring Cloud Storages can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:appplatform/springCloudStorage:SpringCloudStorage example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resourceGroup1/providers/Microsoft.AppPlatform/spring/service1/storages/storage1
 * ```
 */
export class SpringCloudStorage extends pulumi.CustomResource {
    /**
     * Get an existing SpringCloudStorage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SpringCloudStorageState, opts?: pulumi.CustomResourceOptions): SpringCloudStorage {
        return new SpringCloudStorage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:appplatform/springCloudStorage:SpringCloudStorage';

    /**
     * Returns true if the given object is an instance of SpringCloudStorage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SpringCloudStorage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SpringCloudStorage.__pulumiType;
    }

    /**
     * The name which should be used for this Spring Cloud Storage. Changing this forces a new Spring Cloud Storage to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the Spring Cloud Service where the Spring Cloud Storage should exist. Changing this forces a new Spring Cloud Storage to be created.
     */
    public readonly springCloudServiceId!: pulumi.Output<string>;
    /**
     * The access key of the Azure Storage Account.
     */
    public readonly storageAccountKey!: pulumi.Output<string>;
    /**
     * The account name of the Azure Storage Account.
     */
    public readonly storageAccountName!: pulumi.Output<string>;

    /**
     * Create a SpringCloudStorage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SpringCloudStorageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SpringCloudStorageArgs | SpringCloudStorageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SpringCloudStorageState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["springCloudServiceId"] = state ? state.springCloudServiceId : undefined;
            resourceInputs["storageAccountKey"] = state ? state.storageAccountKey : undefined;
            resourceInputs["storageAccountName"] = state ? state.storageAccountName : undefined;
        } else {
            const args = argsOrState as SpringCloudStorageArgs | undefined;
            if ((!args || args.springCloudServiceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'springCloudServiceId'");
            }
            if ((!args || args.storageAccountKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageAccountKey'");
            }
            if ((!args || args.storageAccountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageAccountName'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["springCloudServiceId"] = args ? args.springCloudServiceId : undefined;
            resourceInputs["storageAccountKey"] = args ? args.storageAccountKey : undefined;
            resourceInputs["storageAccountName"] = args ? args.storageAccountName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SpringCloudStorage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SpringCloudStorage resources.
 */
export interface SpringCloudStorageState {
    /**
     * The name which should be used for this Spring Cloud Storage. Changing this forces a new Spring Cloud Storage to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Spring Cloud Service where the Spring Cloud Storage should exist. Changing this forces a new Spring Cloud Storage to be created.
     */
    springCloudServiceId?: pulumi.Input<string>;
    /**
     * The access key of the Azure Storage Account.
     */
    storageAccountKey?: pulumi.Input<string>;
    /**
     * The account name of the Azure Storage Account.
     */
    storageAccountName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SpringCloudStorage resource.
 */
export interface SpringCloudStorageArgs {
    /**
     * The name which should be used for this Spring Cloud Storage. Changing this forces a new Spring Cloud Storage to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Spring Cloud Service where the Spring Cloud Storage should exist. Changing this forces a new Spring Cloud Storage to be created.
     */
    springCloudServiceId: pulumi.Input<string>;
    /**
     * The access key of the Azure Storage Account.
     */
    storageAccountKey: pulumi.Input<string>;
    /**
     * The account name of the Azure Storage Account.
     */
    storageAccountName: pulumi.Input<string>;
}
