// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Associates a Spring Cloud Application with a Redis Cache.
 *
 * !> **Note:** Azure Spring Apps is now deprecated and will be retired on 2028-05-31 - as such the `azure.appplatform.SpringCloudAppRedisAssociation` resource is deprecated and will be removed in a future major version of the AzureRM Provider. See https://aka.ms/asaretirement for more information.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Spring Cloud Application Redis Association can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:appplatform/springCloudAppRedisAssociation:SpringCloudAppRedisAssociation example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.AppPlatform/spring/myservice/apps/myapp/bindings/bind1
 * ```
 */
export class SpringCloudAppRedisAssociation extends pulumi.CustomResource {
    /**
     * Get an existing SpringCloudAppRedisAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SpringCloudAppRedisAssociationState, opts?: pulumi.CustomResourceOptions): SpringCloudAppRedisAssociation {
        return new SpringCloudAppRedisAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:appplatform/springCloudAppRedisAssociation:SpringCloudAppRedisAssociation';

    /**
     * Returns true if the given object is an instance of SpringCloudAppRedisAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SpringCloudAppRedisAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SpringCloudAppRedisAssociation.__pulumiType;
    }

    /**
     * Specifies the name of the Spring Cloud Application Association. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Specifies the Redis Cache access key.
     */
    declare public readonly redisAccessKey: pulumi.Output<string>;
    /**
     * Specifies the Redis Cache resource ID. Changing this forces a new resource to be created.
     */
    declare public readonly redisCacheId: pulumi.Output<string>;
    /**
     * Specifies the Spring Cloud Application resource ID in which the Association is created. Changing this forces a new resource to be created.
     */
    declare public readonly springCloudAppId: pulumi.Output<string>;
    /**
     * Should SSL be used when connecting to Redis? Defaults to `true`.
     */
    declare public readonly sslEnabled: pulumi.Output<boolean | undefined>;

    /**
     * Create a SpringCloudAppRedisAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SpringCloudAppRedisAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SpringCloudAppRedisAssociationArgs | SpringCloudAppRedisAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SpringCloudAppRedisAssociationState | undefined;
            resourceInputs["name"] = state?.name;
            resourceInputs["redisAccessKey"] = state?.redisAccessKey;
            resourceInputs["redisCacheId"] = state?.redisCacheId;
            resourceInputs["springCloudAppId"] = state?.springCloudAppId;
            resourceInputs["sslEnabled"] = state?.sslEnabled;
        } else {
            const args = argsOrState as SpringCloudAppRedisAssociationArgs | undefined;
            if (args?.redisAccessKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'redisAccessKey'");
            }
            if (args?.redisCacheId === undefined && !opts.urn) {
                throw new Error("Missing required property 'redisCacheId'");
            }
            if (args?.springCloudAppId === undefined && !opts.urn) {
                throw new Error("Missing required property 'springCloudAppId'");
            }
            resourceInputs["name"] = args?.name;
            resourceInputs["redisAccessKey"] = args?.redisAccessKey;
            resourceInputs["redisCacheId"] = args?.redisCacheId;
            resourceInputs["springCloudAppId"] = args?.springCloudAppId;
            resourceInputs["sslEnabled"] = args?.sslEnabled;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SpringCloudAppRedisAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SpringCloudAppRedisAssociation resources.
 */
export interface SpringCloudAppRedisAssociationState {
    /**
     * Specifies the name of the Spring Cloud Application Association. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the Redis Cache access key.
     */
    redisAccessKey?: pulumi.Input<string>;
    /**
     * Specifies the Redis Cache resource ID. Changing this forces a new resource to be created.
     */
    redisCacheId?: pulumi.Input<string>;
    /**
     * Specifies the Spring Cloud Application resource ID in which the Association is created. Changing this forces a new resource to be created.
     */
    springCloudAppId?: pulumi.Input<string>;
    /**
     * Should SSL be used when connecting to Redis? Defaults to `true`.
     */
    sslEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SpringCloudAppRedisAssociation resource.
 */
export interface SpringCloudAppRedisAssociationArgs {
    /**
     * Specifies the name of the Spring Cloud Application Association. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the Redis Cache access key.
     */
    redisAccessKey: pulumi.Input<string>;
    /**
     * Specifies the Redis Cache resource ID. Changing this forces a new resource to be created.
     */
    redisCacheId: pulumi.Input<string>;
    /**
     * Specifies the Spring Cloud Application resource ID in which the Association is created. Changing this forces a new resource to be created.
     */
    springCloudAppId: pulumi.Input<string>;
    /**
     * Should SSL be used when connecting to Redis? Defaults to `true`.
     */
    sslEnabled?: pulumi.Input<boolean>;
}
