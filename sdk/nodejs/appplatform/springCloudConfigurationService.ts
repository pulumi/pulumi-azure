// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Manages a Spring Cloud Configuration Service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleSpringCloudService = new azure.appplatform.SpringCloudService("exampleSpringCloudService", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     skuName: "E0",
 * });
 * const exampleSpringCloudConfigurationService = new azure.appplatform.SpringCloudConfigurationService("exampleSpringCloudConfigurationService", {
 *     springCloudServiceId: exampleSpringCloudService.id,
 *     repositories: [{
 *         name: "fake",
 *         label: "master",
 *         patterns: ["app/dev"],
 *         uri: "https://github.com/Azure-Samples/piggymetrics",
 *         searchPaths: [
 *             "dir1",
 *             "dir2",
 *         ],
 *         strictHostKeyChecking: false,
 *         username: "adminuser",
 *         password: "H@Sh1CoR3!",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Spring Cloud Configuration Services can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:appplatform/springCloudConfigurationService:SpringCloudConfigurationService example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resourceGroup1/providers/Microsoft.AppPlatform/Spring/service1/configurationServices/configurationService1
 * ```
 */
export class SpringCloudConfigurationService extends pulumi.CustomResource {
    /**
     * Get an existing SpringCloudConfigurationService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SpringCloudConfigurationServiceState, opts?: pulumi.CustomResourceOptions): SpringCloudConfigurationService {
        return new SpringCloudConfigurationService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:appplatform/springCloudConfigurationService:SpringCloudConfigurationService';

    /**
     * Returns true if the given object is an instance of SpringCloudConfigurationService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SpringCloudConfigurationService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SpringCloudConfigurationService.__pulumiType;
    }

    /**
     * The name which should be used for this Spring Cloud Configuration Service. Changing this forces a new Spring Cloud Configuration Service to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * One or more `repository` blocks as defined below.
     */
    public readonly repositories!: pulumi.Output<outputs.appplatform.SpringCloudConfigurationServiceRepository[] | undefined>;
    /**
     * The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Configuration Service to be created.
     */
    public readonly springCloudServiceId!: pulumi.Output<string>;

    /**
     * Create a SpringCloudConfigurationService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SpringCloudConfigurationServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SpringCloudConfigurationServiceArgs | SpringCloudConfigurationServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SpringCloudConfigurationServiceState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["repositories"] = state ? state.repositories : undefined;
            resourceInputs["springCloudServiceId"] = state ? state.springCloudServiceId : undefined;
        } else {
            const args = argsOrState as SpringCloudConfigurationServiceArgs | undefined;
            if ((!args || args.springCloudServiceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'springCloudServiceId'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["repositories"] = args ? args.repositories : undefined;
            resourceInputs["springCloudServiceId"] = args ? args.springCloudServiceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SpringCloudConfigurationService.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SpringCloudConfigurationService resources.
 */
export interface SpringCloudConfigurationServiceState {
    /**
     * The name which should be used for this Spring Cloud Configuration Service. Changing this forces a new Spring Cloud Configuration Service to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * One or more `repository` blocks as defined below.
     */
    repositories?: pulumi.Input<pulumi.Input<inputs.appplatform.SpringCloudConfigurationServiceRepository>[]>;
    /**
     * The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Configuration Service to be created.
     */
    springCloudServiceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SpringCloudConfigurationService resource.
 */
export interface SpringCloudConfigurationServiceArgs {
    /**
     * The name which should be used for this Spring Cloud Configuration Service. Changing this forces a new Spring Cloud Configuration Service to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * One or more `repository` blocks as defined below.
     */
    repositories?: pulumi.Input<pulumi.Input<inputs.appplatform.SpringCloudConfigurationServiceRepository>[]>;
    /**
     * The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Configuration Service to be created.
     */
    springCloudServiceId: pulumi.Input<string>;
}
