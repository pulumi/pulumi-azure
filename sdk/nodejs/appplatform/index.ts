// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetSpringCloudAppArgs, GetSpringCloudAppResult, GetSpringCloudAppOutputArgs } from "./getSpringCloudApp";
export const getSpringCloudApp: typeof import("./getSpringCloudApp").getSpringCloudApp = null as any;
export const getSpringCloudAppOutput: typeof import("./getSpringCloudApp").getSpringCloudAppOutput = null as any;
utilities.lazyLoad(exports, ["getSpringCloudApp","getSpringCloudAppOutput"], () => require("./getSpringCloudApp"));

export { GetSpringCloudServiceArgs, GetSpringCloudServiceResult, GetSpringCloudServiceOutputArgs } from "./getSpringCloudService";
export const getSpringCloudService: typeof import("./getSpringCloudService").getSpringCloudService = null as any;
export const getSpringCloudServiceOutput: typeof import("./getSpringCloudService").getSpringCloudServiceOutput = null as any;
utilities.lazyLoad(exports, ["getSpringCloudService","getSpringCloudServiceOutput"], () => require("./getSpringCloudService"));

export { SpringCloudAcceleratorArgs, SpringCloudAcceleratorState } from "./springCloudAccelerator";
export type SpringCloudAccelerator = import("./springCloudAccelerator").SpringCloudAccelerator;
export const SpringCloudAccelerator: typeof import("./springCloudAccelerator").SpringCloudAccelerator = null as any;
utilities.lazyLoad(exports, ["SpringCloudAccelerator"], () => require("./springCloudAccelerator"));

export { SpringCloudActiveDeploymentArgs, SpringCloudActiveDeploymentState } from "./springCloudActiveDeployment";
export type SpringCloudActiveDeployment = import("./springCloudActiveDeployment").SpringCloudActiveDeployment;
export const SpringCloudActiveDeployment: typeof import("./springCloudActiveDeployment").SpringCloudActiveDeployment = null as any;
utilities.lazyLoad(exports, ["SpringCloudActiveDeployment"], () => require("./springCloudActiveDeployment"));

export { SpringCloudApiPortalArgs, SpringCloudApiPortalState } from "./springCloudApiPortal";
export type SpringCloudApiPortal = import("./springCloudApiPortal").SpringCloudApiPortal;
export const SpringCloudApiPortal: typeof import("./springCloudApiPortal").SpringCloudApiPortal = null as any;
utilities.lazyLoad(exports, ["SpringCloudApiPortal"], () => require("./springCloudApiPortal"));

export { SpringCloudApiPortalCustomDomainArgs, SpringCloudApiPortalCustomDomainState } from "./springCloudApiPortalCustomDomain";
export type SpringCloudApiPortalCustomDomain = import("./springCloudApiPortalCustomDomain").SpringCloudApiPortalCustomDomain;
export const SpringCloudApiPortalCustomDomain: typeof import("./springCloudApiPortalCustomDomain").SpringCloudApiPortalCustomDomain = null as any;
utilities.lazyLoad(exports, ["SpringCloudApiPortalCustomDomain"], () => require("./springCloudApiPortalCustomDomain"));

export { SpringCloudAppArgs, SpringCloudAppState } from "./springCloudApp";
export type SpringCloudApp = import("./springCloudApp").SpringCloudApp;
export const SpringCloudApp: typeof import("./springCloudApp").SpringCloudApp = null as any;
utilities.lazyLoad(exports, ["SpringCloudApp"], () => require("./springCloudApp"));

export { SpringCloudAppCosmosDBAssociationArgs, SpringCloudAppCosmosDBAssociationState } from "./springCloudAppCosmosDBAssociation";
export type SpringCloudAppCosmosDBAssociation = import("./springCloudAppCosmosDBAssociation").SpringCloudAppCosmosDBAssociation;
export const SpringCloudAppCosmosDBAssociation: typeof import("./springCloudAppCosmosDBAssociation").SpringCloudAppCosmosDBAssociation = null as any;
utilities.lazyLoad(exports, ["SpringCloudAppCosmosDBAssociation"], () => require("./springCloudAppCosmosDBAssociation"));

export { SpringCloudAppMysqlAssociationArgs, SpringCloudAppMysqlAssociationState } from "./springCloudAppMysqlAssociation";
export type SpringCloudAppMysqlAssociation = import("./springCloudAppMysqlAssociation").SpringCloudAppMysqlAssociation;
export const SpringCloudAppMysqlAssociation: typeof import("./springCloudAppMysqlAssociation").SpringCloudAppMysqlAssociation = null as any;
utilities.lazyLoad(exports, ["SpringCloudAppMysqlAssociation"], () => require("./springCloudAppMysqlAssociation"));

export { SpringCloudAppRedisAssociationArgs, SpringCloudAppRedisAssociationState } from "./springCloudAppRedisAssociation";
export type SpringCloudAppRedisAssociation = import("./springCloudAppRedisAssociation").SpringCloudAppRedisAssociation;
export const SpringCloudAppRedisAssociation: typeof import("./springCloudAppRedisAssociation").SpringCloudAppRedisAssociation = null as any;
utilities.lazyLoad(exports, ["SpringCloudAppRedisAssociation"], () => require("./springCloudAppRedisAssociation"));

export { SpringCloudApplicationInsightsApplicationPerformanceMonitoringArgs, SpringCloudApplicationInsightsApplicationPerformanceMonitoringState } from "./springCloudApplicationInsightsApplicationPerformanceMonitoring";
export type SpringCloudApplicationInsightsApplicationPerformanceMonitoring = import("./springCloudApplicationInsightsApplicationPerformanceMonitoring").SpringCloudApplicationInsightsApplicationPerformanceMonitoring;
export const SpringCloudApplicationInsightsApplicationPerformanceMonitoring: typeof import("./springCloudApplicationInsightsApplicationPerformanceMonitoring").SpringCloudApplicationInsightsApplicationPerformanceMonitoring = null as any;
utilities.lazyLoad(exports, ["SpringCloudApplicationInsightsApplicationPerformanceMonitoring"], () => require("./springCloudApplicationInsightsApplicationPerformanceMonitoring"));

export { SpringCloudApplicationLiveViewArgs, SpringCloudApplicationLiveViewState } from "./springCloudApplicationLiveView";
export type SpringCloudApplicationLiveView = import("./springCloudApplicationLiveView").SpringCloudApplicationLiveView;
export const SpringCloudApplicationLiveView: typeof import("./springCloudApplicationLiveView").SpringCloudApplicationLiveView = null as any;
utilities.lazyLoad(exports, ["SpringCloudApplicationLiveView"], () => require("./springCloudApplicationLiveView"));

export { SpringCloudBuildDeploymentArgs, SpringCloudBuildDeploymentState } from "./springCloudBuildDeployment";
export type SpringCloudBuildDeployment = import("./springCloudBuildDeployment").SpringCloudBuildDeployment;
export const SpringCloudBuildDeployment: typeof import("./springCloudBuildDeployment").SpringCloudBuildDeployment = null as any;
utilities.lazyLoad(exports, ["SpringCloudBuildDeployment"], () => require("./springCloudBuildDeployment"));

export { SpringCloudBuildPackBindingArgs, SpringCloudBuildPackBindingState } from "./springCloudBuildPackBinding";
export type SpringCloudBuildPackBinding = import("./springCloudBuildPackBinding").SpringCloudBuildPackBinding;
export const SpringCloudBuildPackBinding: typeof import("./springCloudBuildPackBinding").SpringCloudBuildPackBinding = null as any;
utilities.lazyLoad(exports, ["SpringCloudBuildPackBinding"], () => require("./springCloudBuildPackBinding"));

export { SpringCloudBuilderArgs, SpringCloudBuilderState } from "./springCloudBuilder";
export type SpringCloudBuilder = import("./springCloudBuilder").SpringCloudBuilder;
export const SpringCloudBuilder: typeof import("./springCloudBuilder").SpringCloudBuilder = null as any;
utilities.lazyLoad(exports, ["SpringCloudBuilder"], () => require("./springCloudBuilder"));

export { SpringCloudCertificateArgs, SpringCloudCertificateState } from "./springCloudCertificate";
export type SpringCloudCertificate = import("./springCloudCertificate").SpringCloudCertificate;
export const SpringCloudCertificate: typeof import("./springCloudCertificate").SpringCloudCertificate = null as any;
utilities.lazyLoad(exports, ["SpringCloudCertificate"], () => require("./springCloudCertificate"));

export { SpringCloudConfigurationServiceArgs, SpringCloudConfigurationServiceState } from "./springCloudConfigurationService";
export type SpringCloudConfigurationService = import("./springCloudConfigurationService").SpringCloudConfigurationService;
export const SpringCloudConfigurationService: typeof import("./springCloudConfigurationService").SpringCloudConfigurationService = null as any;
utilities.lazyLoad(exports, ["SpringCloudConfigurationService"], () => require("./springCloudConfigurationService"));

export { SpringCloudConnectionArgs, SpringCloudConnectionState } from "./springCloudConnection";
export type SpringCloudConnection = import("./springCloudConnection").SpringCloudConnection;
export const SpringCloudConnection: typeof import("./springCloudConnection").SpringCloudConnection = null as any;
utilities.lazyLoad(exports, ["SpringCloudConnection"], () => require("./springCloudConnection"));

export { SpringCloudContainerDeploymentArgs, SpringCloudContainerDeploymentState } from "./springCloudContainerDeployment";
export type SpringCloudContainerDeployment = import("./springCloudContainerDeployment").SpringCloudContainerDeployment;
export const SpringCloudContainerDeployment: typeof import("./springCloudContainerDeployment").SpringCloudContainerDeployment = null as any;
utilities.lazyLoad(exports, ["SpringCloudContainerDeployment"], () => require("./springCloudContainerDeployment"));

export { SpringCloudCustomDomainArgs, SpringCloudCustomDomainState } from "./springCloudCustomDomain";
export type SpringCloudCustomDomain = import("./springCloudCustomDomain").SpringCloudCustomDomain;
export const SpringCloudCustomDomain: typeof import("./springCloudCustomDomain").SpringCloudCustomDomain = null as any;
utilities.lazyLoad(exports, ["SpringCloudCustomDomain"], () => require("./springCloudCustomDomain"));

export { SpringCloudCustomizedAcceleratorArgs, SpringCloudCustomizedAcceleratorState } from "./springCloudCustomizedAccelerator";
export type SpringCloudCustomizedAccelerator = import("./springCloudCustomizedAccelerator").SpringCloudCustomizedAccelerator;
export const SpringCloudCustomizedAccelerator: typeof import("./springCloudCustomizedAccelerator").SpringCloudCustomizedAccelerator = null as any;
utilities.lazyLoad(exports, ["SpringCloudCustomizedAccelerator"], () => require("./springCloudCustomizedAccelerator"));

export { SpringCloudDevToolPortalArgs, SpringCloudDevToolPortalState } from "./springCloudDevToolPortal";
export type SpringCloudDevToolPortal = import("./springCloudDevToolPortal").SpringCloudDevToolPortal;
export const SpringCloudDevToolPortal: typeof import("./springCloudDevToolPortal").SpringCloudDevToolPortal = null as any;
utilities.lazyLoad(exports, ["SpringCloudDevToolPortal"], () => require("./springCloudDevToolPortal"));

export { SpringCloudDynatraceApplicationPerformanceMonitoringArgs, SpringCloudDynatraceApplicationPerformanceMonitoringState } from "./springCloudDynatraceApplicationPerformanceMonitoring";
export type SpringCloudDynatraceApplicationPerformanceMonitoring = import("./springCloudDynatraceApplicationPerformanceMonitoring").SpringCloudDynatraceApplicationPerformanceMonitoring;
export const SpringCloudDynatraceApplicationPerformanceMonitoring: typeof import("./springCloudDynatraceApplicationPerformanceMonitoring").SpringCloudDynatraceApplicationPerformanceMonitoring = null as any;
utilities.lazyLoad(exports, ["SpringCloudDynatraceApplicationPerformanceMonitoring"], () => require("./springCloudDynatraceApplicationPerformanceMonitoring"));

export { SpringCloudGatewayArgs, SpringCloudGatewayState } from "./springCloudGateway";
export type SpringCloudGateway = import("./springCloudGateway").SpringCloudGateway;
export const SpringCloudGateway: typeof import("./springCloudGateway").SpringCloudGateway = null as any;
utilities.lazyLoad(exports, ["SpringCloudGateway"], () => require("./springCloudGateway"));

export { SpringCloudGatewayCustomDomainArgs, SpringCloudGatewayCustomDomainState } from "./springCloudGatewayCustomDomain";
export type SpringCloudGatewayCustomDomain = import("./springCloudGatewayCustomDomain").SpringCloudGatewayCustomDomain;
export const SpringCloudGatewayCustomDomain: typeof import("./springCloudGatewayCustomDomain").SpringCloudGatewayCustomDomain = null as any;
utilities.lazyLoad(exports, ["SpringCloudGatewayCustomDomain"], () => require("./springCloudGatewayCustomDomain"));

export { SpringCloudGatewayRouteConfigArgs, SpringCloudGatewayRouteConfigState } from "./springCloudGatewayRouteConfig";
export type SpringCloudGatewayRouteConfig = import("./springCloudGatewayRouteConfig").SpringCloudGatewayRouteConfig;
export const SpringCloudGatewayRouteConfig: typeof import("./springCloudGatewayRouteConfig").SpringCloudGatewayRouteConfig = null as any;
utilities.lazyLoad(exports, ["SpringCloudGatewayRouteConfig"], () => require("./springCloudGatewayRouteConfig"));

export { SpringCloudJavaDeploymentArgs, SpringCloudJavaDeploymentState } from "./springCloudJavaDeployment";
export type SpringCloudJavaDeployment = import("./springCloudJavaDeployment").SpringCloudJavaDeployment;
export const SpringCloudJavaDeployment: typeof import("./springCloudJavaDeployment").SpringCloudJavaDeployment = null as any;
utilities.lazyLoad(exports, ["SpringCloudJavaDeployment"], () => require("./springCloudJavaDeployment"));

export { SpringCloudServiceArgs, SpringCloudServiceState } from "./springCloudService";
export type SpringCloudService = import("./springCloudService").SpringCloudService;
export const SpringCloudService: typeof import("./springCloudService").SpringCloudService = null as any;
utilities.lazyLoad(exports, ["SpringCloudService"], () => require("./springCloudService"));

export { SpringCloudStorageArgs, SpringCloudStorageState } from "./springCloudStorage";
export type SpringCloudStorage = import("./springCloudStorage").SpringCloudStorage;
export const SpringCloudStorage: typeof import("./springCloudStorage").SpringCloudStorage = null as any;
utilities.lazyLoad(exports, ["SpringCloudStorage"], () => require("./springCloudStorage"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:appplatform/springCloudAccelerator:SpringCloudAccelerator":
                return new SpringCloudAccelerator(name, <any>undefined, { urn })
            case "azure:appplatform/springCloudActiveDeployment:SpringCloudActiveDeployment":
                return new SpringCloudActiveDeployment(name, <any>undefined, { urn })
            case "azure:appplatform/springCloudApiPortal:SpringCloudApiPortal":
                return new SpringCloudApiPortal(name, <any>undefined, { urn })
            case "azure:appplatform/springCloudApiPortalCustomDomain:SpringCloudApiPortalCustomDomain":
                return new SpringCloudApiPortalCustomDomain(name, <any>undefined, { urn })
            case "azure:appplatform/springCloudApp:SpringCloudApp":
                return new SpringCloudApp(name, <any>undefined, { urn })
            case "azure:appplatform/springCloudAppCosmosDBAssociation:SpringCloudAppCosmosDBAssociation":
                return new SpringCloudAppCosmosDBAssociation(name, <any>undefined, { urn })
            case "azure:appplatform/springCloudAppMysqlAssociation:SpringCloudAppMysqlAssociation":
                return new SpringCloudAppMysqlAssociation(name, <any>undefined, { urn })
            case "azure:appplatform/springCloudAppRedisAssociation:SpringCloudAppRedisAssociation":
                return new SpringCloudAppRedisAssociation(name, <any>undefined, { urn })
            case "azure:appplatform/springCloudApplicationInsightsApplicationPerformanceMonitoring:SpringCloudApplicationInsightsApplicationPerformanceMonitoring":
                return new SpringCloudApplicationInsightsApplicationPerformanceMonitoring(name, <any>undefined, { urn })
            case "azure:appplatform/springCloudApplicationLiveView:SpringCloudApplicationLiveView":
                return new SpringCloudApplicationLiveView(name, <any>undefined, { urn })
            case "azure:appplatform/springCloudBuildDeployment:SpringCloudBuildDeployment":
                return new SpringCloudBuildDeployment(name, <any>undefined, { urn })
            case "azure:appplatform/springCloudBuildPackBinding:SpringCloudBuildPackBinding":
                return new SpringCloudBuildPackBinding(name, <any>undefined, { urn })
            case "azure:appplatform/springCloudBuilder:SpringCloudBuilder":
                return new SpringCloudBuilder(name, <any>undefined, { urn })
            case "azure:appplatform/springCloudCertificate:SpringCloudCertificate":
                return new SpringCloudCertificate(name, <any>undefined, { urn })
            case "azure:appplatform/springCloudConfigurationService:SpringCloudConfigurationService":
                return new SpringCloudConfigurationService(name, <any>undefined, { urn })
            case "azure:appplatform/springCloudConnection:SpringCloudConnection":
                return new SpringCloudConnection(name, <any>undefined, { urn })
            case "azure:appplatform/springCloudContainerDeployment:SpringCloudContainerDeployment":
                return new SpringCloudContainerDeployment(name, <any>undefined, { urn })
            case "azure:appplatform/springCloudCustomDomain:SpringCloudCustomDomain":
                return new SpringCloudCustomDomain(name, <any>undefined, { urn })
            case "azure:appplatform/springCloudCustomizedAccelerator:SpringCloudCustomizedAccelerator":
                return new SpringCloudCustomizedAccelerator(name, <any>undefined, { urn })
            case "azure:appplatform/springCloudDevToolPortal:SpringCloudDevToolPortal":
                return new SpringCloudDevToolPortal(name, <any>undefined, { urn })
            case "azure:appplatform/springCloudDynatraceApplicationPerformanceMonitoring:SpringCloudDynatraceApplicationPerformanceMonitoring":
                return new SpringCloudDynatraceApplicationPerformanceMonitoring(name, <any>undefined, { urn })
            case "azure:appplatform/springCloudGateway:SpringCloudGateway":
                return new SpringCloudGateway(name, <any>undefined, { urn })
            case "azure:appplatform/springCloudGatewayCustomDomain:SpringCloudGatewayCustomDomain":
                return new SpringCloudGatewayCustomDomain(name, <any>undefined, { urn })
            case "azure:appplatform/springCloudGatewayRouteConfig:SpringCloudGatewayRouteConfig":
                return new SpringCloudGatewayRouteConfig(name, <any>undefined, { urn })
            case "azure:appplatform/springCloudJavaDeployment:SpringCloudJavaDeployment":
                return new SpringCloudJavaDeployment(name, <any>undefined, { urn })
            case "azure:appplatform/springCloudService:SpringCloudService":
                return new SpringCloudService(name, <any>undefined, { urn })
            case "azure:appplatform/springCloudStorage:SpringCloudStorage":
                return new SpringCloudStorage(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "appplatform/springCloudAccelerator", _module)
pulumi.runtime.registerResourceModule("azure", "appplatform/springCloudActiveDeployment", _module)
pulumi.runtime.registerResourceModule("azure", "appplatform/springCloudApiPortal", _module)
pulumi.runtime.registerResourceModule("azure", "appplatform/springCloudApiPortalCustomDomain", _module)
pulumi.runtime.registerResourceModule("azure", "appplatform/springCloudApp", _module)
pulumi.runtime.registerResourceModule("azure", "appplatform/springCloudAppCosmosDBAssociation", _module)
pulumi.runtime.registerResourceModule("azure", "appplatform/springCloudAppMysqlAssociation", _module)
pulumi.runtime.registerResourceModule("azure", "appplatform/springCloudAppRedisAssociation", _module)
pulumi.runtime.registerResourceModule("azure", "appplatform/springCloudApplicationInsightsApplicationPerformanceMonitoring", _module)
pulumi.runtime.registerResourceModule("azure", "appplatform/springCloudApplicationLiveView", _module)
pulumi.runtime.registerResourceModule("azure", "appplatform/springCloudBuildDeployment", _module)
pulumi.runtime.registerResourceModule("azure", "appplatform/springCloudBuildPackBinding", _module)
pulumi.runtime.registerResourceModule("azure", "appplatform/springCloudBuilder", _module)
pulumi.runtime.registerResourceModule("azure", "appplatform/springCloudCertificate", _module)
pulumi.runtime.registerResourceModule("azure", "appplatform/springCloudConfigurationService", _module)
pulumi.runtime.registerResourceModule("azure", "appplatform/springCloudConnection", _module)
pulumi.runtime.registerResourceModule("azure", "appplatform/springCloudContainerDeployment", _module)
pulumi.runtime.registerResourceModule("azure", "appplatform/springCloudCustomDomain", _module)
pulumi.runtime.registerResourceModule("azure", "appplatform/springCloudCustomizedAccelerator", _module)
pulumi.runtime.registerResourceModule("azure", "appplatform/springCloudDevToolPortal", _module)
pulumi.runtime.registerResourceModule("azure", "appplatform/springCloudDynatraceApplicationPerformanceMonitoring", _module)
pulumi.runtime.registerResourceModule("azure", "appplatform/springCloudGateway", _module)
pulumi.runtime.registerResourceModule("azure", "appplatform/springCloudGatewayCustomDomain", _module)
pulumi.runtime.registerResourceModule("azure", "appplatform/springCloudGatewayRouteConfig", _module)
pulumi.runtime.registerResourceModule("azure", "appplatform/springCloudJavaDeployment", _module)
pulumi.runtime.registerResourceModule("azure", "appplatform/springCloudService", _module)
pulumi.runtime.registerResourceModule("azure", "appplatform/springCloudStorage", _module)
