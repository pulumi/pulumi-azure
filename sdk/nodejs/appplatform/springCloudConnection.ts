// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a service connector for spring cloud app.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.cosmosdb.Account("exampleAccount", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     offerType: "Standard",
 *     kind: "GlobalDocumentDB",
 *     consistencyPolicy: {
 *         consistencyLevel: "BoundedStaleness",
 *         maxIntervalInSeconds: 10,
 *         maxStalenessPrefix: 200,
 *     },
 *     geoLocations: [{
 *         location: exampleResourceGroup.location,
 *         failoverPriority: 0,
 *     }],
 * });
 * const exampleSqlDatabase = new azure.cosmosdb.SqlDatabase("exampleSqlDatabase", {
 *     resourceGroupName: exampleAccount.resourceGroupName,
 *     accountName: exampleAccount.name,
 *     throughput: 400,
 * });
 * const exampleSqlContainer = new azure.cosmosdb.SqlContainer("exampleSqlContainer", {
 *     resourceGroupName: exampleAccount.resourceGroupName,
 *     accountName: exampleAccount.name,
 *     databaseName: exampleSqlDatabase.name,
 *     partitionKeyPath: "/definition",
 * });
 * const exampleSpringCloudService = new azure.appplatform.SpringCloudService("exampleSpringCloudService", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 * });
 * const exampleSpringCloudApp = new azure.appplatform.SpringCloudApp("exampleSpringCloudApp", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     serviceName: exampleSpringCloudService.name,
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * const exampleSpringCloudJavaDeployment = new azure.appplatform.SpringCloudJavaDeployment("exampleSpringCloudJavaDeployment", {springCloudAppId: exampleSpringCloudApp.id});
 * const exampleSpringCloudConnection = new azure.appplatform.SpringCloudConnection("exampleSpringCloudConnection", {
 *     springCloudId: exampleSpringCloudJavaDeployment.id,
 *     targetResourceId: exampleSqlDatabase.id,
 *     authentication: {
 *         type: "systemAssignedIdentity",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Service Connector for spring cloud can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:appplatform/springCloudConnection:SpringCloudConnection example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.AppPlatform/Spring/springcloud/apps/springcloudapp/deployments/deployment/providers/Microsoft.ServiceLinker/linkers/serviceconnector1
 * ```
 */
export class SpringCloudConnection extends pulumi.CustomResource {
    /**
     * Get an existing SpringCloudConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SpringCloudConnectionState, opts?: pulumi.CustomResourceOptions): SpringCloudConnection {
        return new SpringCloudConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:appplatform/springCloudConnection:SpringCloudConnection';

    /**
     * Returns true if the given object is an instance of SpringCloudConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SpringCloudConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SpringCloudConnection.__pulumiType;
    }

    /**
     * The authentication info. An `authentication` block as defined below.
     */
    public readonly authentication!: pulumi.Output<outputs.appplatform.SpringCloudConnectionAuthentication>;
    /**
     * The application client type. Possible values are `none`, `dotnet`, `java`, `python`, `go`, `php`, `ruby`, `django`, `nodejs` and `springBoot`. Defaults to `none`.
     */
    public readonly clientType!: pulumi.Output<string | undefined>;
    /**
     * The name of the service connection. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * An option to store secret value in secure place. An `secretStore` block as defined below.
     */
    public readonly secretStore!: pulumi.Output<outputs.appplatform.SpringCloudConnectionSecretStore | undefined>;
    /**
     * The ID of the data source spring cloud. Changing this forces a new resource to be created.
     */
    public readonly springCloudId!: pulumi.Output<string>;
    /**
     * The ID of the target resource. Changing this forces a new resource to be created. Possible target resources are `Postgres`, `PostgresFlexible`, `Mysql`, `Sql`, `Redis`, `RedisEnterprise`, `CosmosCassandra`, `CosmosGremlin`, `CosmosMongo`, `CosmosSql`, `CosmosTable`, `StorageBlob`, `StorageQueue`, `StorageFile`, `StorageTable`, `AppConfig`, `EventHub`, `ServiceBus`, `SignalR`, `WebPubSub`, `ConfluentKafka`. The integration guide can be found [here](https://learn.microsoft.com/en-us/azure/service-connector/how-to-integrate-postgres).
     */
    public readonly targetResourceId!: pulumi.Output<string>;
    /**
     * The type of the VNet solution. Possible values are `serviceEndpoint`, `privateLink`.
     */
    public readonly vnetSolution!: pulumi.Output<string | undefined>;

    /**
     * Create a SpringCloudConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SpringCloudConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SpringCloudConnectionArgs | SpringCloudConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SpringCloudConnectionState | undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["clientType"] = state ? state.clientType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["secretStore"] = state ? state.secretStore : undefined;
            resourceInputs["springCloudId"] = state ? state.springCloudId : undefined;
            resourceInputs["targetResourceId"] = state ? state.targetResourceId : undefined;
            resourceInputs["vnetSolution"] = state ? state.vnetSolution : undefined;
        } else {
            const args = argsOrState as SpringCloudConnectionArgs | undefined;
            if ((!args || args.authentication === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authentication'");
            }
            if ((!args || args.springCloudId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'springCloudId'");
            }
            if ((!args || args.targetResourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetResourceId'");
            }
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["clientType"] = args ? args.clientType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["secretStore"] = args ? args.secretStore : undefined;
            resourceInputs["springCloudId"] = args ? args.springCloudId : undefined;
            resourceInputs["targetResourceId"] = args ? args.targetResourceId : undefined;
            resourceInputs["vnetSolution"] = args ? args.vnetSolution : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SpringCloudConnection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SpringCloudConnection resources.
 */
export interface SpringCloudConnectionState {
    /**
     * The authentication info. An `authentication` block as defined below.
     */
    authentication?: pulumi.Input<inputs.appplatform.SpringCloudConnectionAuthentication>;
    /**
     * The application client type. Possible values are `none`, `dotnet`, `java`, `python`, `go`, `php`, `ruby`, `django`, `nodejs` and `springBoot`. Defaults to `none`.
     */
    clientType?: pulumi.Input<string>;
    /**
     * The name of the service connection. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * An option to store secret value in secure place. An `secretStore` block as defined below.
     */
    secretStore?: pulumi.Input<inputs.appplatform.SpringCloudConnectionSecretStore>;
    /**
     * The ID of the data source spring cloud. Changing this forces a new resource to be created.
     */
    springCloudId?: pulumi.Input<string>;
    /**
     * The ID of the target resource. Changing this forces a new resource to be created. Possible target resources are `Postgres`, `PostgresFlexible`, `Mysql`, `Sql`, `Redis`, `RedisEnterprise`, `CosmosCassandra`, `CosmosGremlin`, `CosmosMongo`, `CosmosSql`, `CosmosTable`, `StorageBlob`, `StorageQueue`, `StorageFile`, `StorageTable`, `AppConfig`, `EventHub`, `ServiceBus`, `SignalR`, `WebPubSub`, `ConfluentKafka`. The integration guide can be found [here](https://learn.microsoft.com/en-us/azure/service-connector/how-to-integrate-postgres).
     */
    targetResourceId?: pulumi.Input<string>;
    /**
     * The type of the VNet solution. Possible values are `serviceEndpoint`, `privateLink`.
     */
    vnetSolution?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SpringCloudConnection resource.
 */
export interface SpringCloudConnectionArgs {
    /**
     * The authentication info. An `authentication` block as defined below.
     */
    authentication: pulumi.Input<inputs.appplatform.SpringCloudConnectionAuthentication>;
    /**
     * The application client type. Possible values are `none`, `dotnet`, `java`, `python`, `go`, `php`, `ruby`, `django`, `nodejs` and `springBoot`. Defaults to `none`.
     */
    clientType?: pulumi.Input<string>;
    /**
     * The name of the service connection. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * An option to store secret value in secure place. An `secretStore` block as defined below.
     */
    secretStore?: pulumi.Input<inputs.appplatform.SpringCloudConnectionSecretStore>;
    /**
     * The ID of the data source spring cloud. Changing this forces a new resource to be created.
     */
    springCloudId: pulumi.Input<string>;
    /**
     * The ID of the target resource. Changing this forces a new resource to be created. Possible target resources are `Postgres`, `PostgresFlexible`, `Mysql`, `Sql`, `Redis`, `RedisEnterprise`, `CosmosCassandra`, `CosmosGremlin`, `CosmosMongo`, `CosmosSql`, `CosmosTable`, `StorageBlob`, `StorageQueue`, `StorageFile`, `StorageTable`, `AppConfig`, `EventHub`, `ServiceBus`, `SignalR`, `WebPubSub`, `ConfluentKafka`. The integration guide can be found [here](https://learn.microsoft.com/en-us/azure/service-connector/how-to-integrate-postgres).
     */
    targetResourceId: pulumi.Input<string>;
    /**
     * The type of the VNet solution. Possible values are `serviceEndpoint`, `privateLink`.
     */
    vnetSolution?: pulumi.Input<string>;
}
