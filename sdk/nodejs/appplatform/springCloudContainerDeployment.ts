// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Spring Cloud Container Deployment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleSpringCloudService = new azure.appplatform.SpringCloudService("exampleSpringCloudService", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     skuName: "E0",
 * });
 * const exampleSpringCloudApp = new azure.appplatform.SpringCloudApp("exampleSpringCloudApp", {
 *     resourceGroupName: exampleSpringCloudService.resourceGroupName,
 *     serviceName: exampleSpringCloudService.name,
 * });
 * const exampleSpringCloudContainerDeployment = new azure.appplatform.SpringCloudContainerDeployment("exampleSpringCloudContainerDeployment", {
 *     springCloudAppId: exampleSpringCloudApp.id,
 *     instanceCount: 2,
 *     arguments: [
 *         "-cp",
 *         "/app/resources:/app/classes:/app/libs/*",
 *         "hello.Application",
 *     ],
 *     commands: ["java"],
 *     environmentVariables: {
 *         Foo: "Bar",
 *         Env: "Staging",
 *     },
 *     server: "docker.io",
 *     image: "springio/gs-spring-boot-docker",
 *     languageFramework: "springboot",
 * });
 * ```
 *
 * ## Import
 *
 * Spring Cloud Container Deployments can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:appplatform/springCloudContainerDeployment:SpringCloudContainerDeployment example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.AppPlatform/spring/spring1/apps/app1/deployments/deploy1
 * ```
 */
export class SpringCloudContainerDeployment extends pulumi.CustomResource {
    /**
     * Get an existing SpringCloudContainerDeployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SpringCloudContainerDeploymentState, opts?: pulumi.CustomResourceOptions): SpringCloudContainerDeployment {
        return new SpringCloudContainerDeployment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:appplatform/springCloudContainerDeployment:SpringCloudContainerDeployment';

    /**
     * Returns true if the given object is an instance of SpringCloudContainerDeployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SpringCloudContainerDeployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SpringCloudContainerDeployment.__pulumiType;
    }

    /**
     * A JSON object that contains the addon configurations of the Spring Cloud Container Deployment.
     */
    public readonly addonJson!: pulumi.Output<string>;
    /**
     * Specifies a list of Spring Cloud Application Performance Monitoring IDs.
     */
    public readonly applicationPerformanceMonitoringIds!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the arguments to the entrypoint. The docker image's `CMD` is used if not specified.
     */
    public readonly arguments!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the entrypoint array. It will not be executed within a shell. The docker image's `ENTRYPOINT` is used if not specified.
     */
    public readonly commands!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the environment variables of the Spring Cloud Deployment as a map of key-value pairs.
     */
    public readonly environmentVariables!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Container image of the custom container. This should be in the form of `<repository>:<tag>` without the server name of the registry.
     */
    public readonly image!: pulumi.Output<string>;
    /**
     * Specifies the required instance count of the Spring Cloud Deployment. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
     */
    public readonly instanceCount!: pulumi.Output<number | undefined>;
    /**
     * Specifies the language framework of the container image. The only possible value is `springboot`.
     */
    public readonly languageFramework!: pulumi.Output<string | undefined>;
    /**
     * The name which should be used for this Spring Cloud Container Deployment. Changing this forces a new Spring Cloud Container Deployment to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A `quota` block as defined below.
     */
    public readonly quota!: pulumi.Output<outputs.appplatform.SpringCloudContainerDeploymentQuota>;
    /**
     * The name of the registry that contains the container image.
     */
    public readonly server!: pulumi.Output<string>;
    /**
     * The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Container Deployment to be created.
     */
    public readonly springCloudAppId!: pulumi.Output<string>;

    /**
     * Create a SpringCloudContainerDeployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SpringCloudContainerDeploymentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SpringCloudContainerDeploymentArgs | SpringCloudContainerDeploymentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SpringCloudContainerDeploymentState | undefined;
            resourceInputs["addonJson"] = state ? state.addonJson : undefined;
            resourceInputs["applicationPerformanceMonitoringIds"] = state ? state.applicationPerformanceMonitoringIds : undefined;
            resourceInputs["arguments"] = state ? state.arguments : undefined;
            resourceInputs["commands"] = state ? state.commands : undefined;
            resourceInputs["environmentVariables"] = state ? state.environmentVariables : undefined;
            resourceInputs["image"] = state ? state.image : undefined;
            resourceInputs["instanceCount"] = state ? state.instanceCount : undefined;
            resourceInputs["languageFramework"] = state ? state.languageFramework : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["quota"] = state ? state.quota : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["springCloudAppId"] = state ? state.springCloudAppId : undefined;
        } else {
            const args = argsOrState as SpringCloudContainerDeploymentArgs | undefined;
            if ((!args || args.image === undefined) && !opts.urn) {
                throw new Error("Missing required property 'image'");
            }
            if ((!args || args.server === undefined) && !opts.urn) {
                throw new Error("Missing required property 'server'");
            }
            if ((!args || args.springCloudAppId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'springCloudAppId'");
            }
            resourceInputs["addonJson"] = args ? args.addonJson : undefined;
            resourceInputs["applicationPerformanceMonitoringIds"] = args ? args.applicationPerformanceMonitoringIds : undefined;
            resourceInputs["arguments"] = args ? args.arguments : undefined;
            resourceInputs["commands"] = args ? args.commands : undefined;
            resourceInputs["environmentVariables"] = args ? args.environmentVariables : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["instanceCount"] = args ? args.instanceCount : undefined;
            resourceInputs["languageFramework"] = args ? args.languageFramework : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["quota"] = args ? args.quota : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["springCloudAppId"] = args ? args.springCloudAppId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SpringCloudContainerDeployment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SpringCloudContainerDeployment resources.
 */
export interface SpringCloudContainerDeploymentState {
    /**
     * A JSON object that contains the addon configurations of the Spring Cloud Container Deployment.
     */
    addonJson?: pulumi.Input<string>;
    /**
     * Specifies a list of Spring Cloud Application Performance Monitoring IDs.
     */
    applicationPerformanceMonitoringIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the arguments to the entrypoint. The docker image's `CMD` is used if not specified.
     */
    arguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the entrypoint array. It will not be executed within a shell. The docker image's `ENTRYPOINT` is used if not specified.
     */
    commands?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the environment variables of the Spring Cloud Deployment as a map of key-value pairs.
     */
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Container image of the custom container. This should be in the form of `<repository>:<tag>` without the server name of the registry.
     */
    image?: pulumi.Input<string>;
    /**
     * Specifies the required instance count of the Spring Cloud Deployment. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
     */
    instanceCount?: pulumi.Input<number>;
    /**
     * Specifies the language framework of the container image. The only possible value is `springboot`.
     */
    languageFramework?: pulumi.Input<string>;
    /**
     * The name which should be used for this Spring Cloud Container Deployment. Changing this forces a new Spring Cloud Container Deployment to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A `quota` block as defined below.
     */
    quota?: pulumi.Input<inputs.appplatform.SpringCloudContainerDeploymentQuota>;
    /**
     * The name of the registry that contains the container image.
     */
    server?: pulumi.Input<string>;
    /**
     * The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Container Deployment to be created.
     */
    springCloudAppId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SpringCloudContainerDeployment resource.
 */
export interface SpringCloudContainerDeploymentArgs {
    /**
     * A JSON object that contains the addon configurations of the Spring Cloud Container Deployment.
     */
    addonJson?: pulumi.Input<string>;
    /**
     * Specifies a list of Spring Cloud Application Performance Monitoring IDs.
     */
    applicationPerformanceMonitoringIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the arguments to the entrypoint. The docker image's `CMD` is used if not specified.
     */
    arguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the entrypoint array. It will not be executed within a shell. The docker image's `ENTRYPOINT` is used if not specified.
     */
    commands?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the environment variables of the Spring Cloud Deployment as a map of key-value pairs.
     */
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Container image of the custom container. This should be in the form of `<repository>:<tag>` without the server name of the registry.
     */
    image: pulumi.Input<string>;
    /**
     * Specifies the required instance count of the Spring Cloud Deployment. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
     */
    instanceCount?: pulumi.Input<number>;
    /**
     * Specifies the language framework of the container image. The only possible value is `springboot`.
     */
    languageFramework?: pulumi.Input<string>;
    /**
     * The name which should be used for this Spring Cloud Container Deployment. Changing this forces a new Spring Cloud Container Deployment to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A `quota` block as defined below.
     */
    quota?: pulumi.Input<inputs.appplatform.SpringCloudContainerDeploymentQuota>;
    /**
     * The name of the registry that contains the container image.
     */
    server: pulumi.Input<string>;
    /**
     * The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Container Deployment to be created.
     */
    springCloudAppId: pulumi.Input<string>;
}
