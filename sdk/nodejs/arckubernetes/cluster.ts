// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages an Arc Kubernetes Cluster.
 *
 * > **Note:** Installing and configuring the Azure Arc Agent on your Kubernetes Cluster to establish connectivity is outside the scope of this document. For more details refer to [Deploy agents to your cluster](https://learn.microsoft.com/en-us/azure/azure-arc/kubernetes/conceptual-agent-overview#deploy-agents-to-your-cluster) and [Connect an existing Kubernetes Cluster](https://learn.microsoft.com/en-us/azure/azure-arc/kubernetes/quickstart-connect-cluster?tabs=azure-cli#connect-an-existing-kubernetes-cluster). If you encounter issues connecting your Kubernetes Cluster to Azure Arc, we'd recommend opening a ticket with Microsoft Support.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as fs from "fs";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleCluster = new azure.arckubernetes.Cluster("exampleCluster", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: "West Europe",
 *     agentPublicKeyCertificate: fs.readFileSync("testdata/public.cer", { encoding: "base64" }),
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 *     tags: {
 *         ENV: "Test",
 *     },
 * });
 * ```
 *
 * > **Note:** An extensive example on connecting the `azure.arckubernetes.Cluster` to an external kubernetes cluster can be found in the `./examples/arckubernetes` directory within the GitHub Repository.
 *
 * ## Import
 *
 * Arc Kubernetes Cluster can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:arckubernetes/cluster:Cluster example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Kubernetes/connectedClusters/cluster1
 * ```
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:arckubernetes/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * Specifies the base64-encoded public certificate used by the agent to do the initial handshake to the backend services in Azure. Changing this forces a new Arc Kubernetes Cluster to be created.
     */
    public readonly agentPublicKeyCertificate!: pulumi.Output<string>;
    /**
     * Version of the agent running on the cluster resource.
     */
    public /*out*/ readonly agentVersion!: pulumi.Output<string>;
    /**
     * The distribution running on this Arc Kubernetes Cluster.
     */
    public /*out*/ readonly distribution!: pulumi.Output<string>;
    /**
     * An `identity` block as defined below. Changing this forces a new Arc Kubernetes Cluster to be created.
     */
    public readonly identity!: pulumi.Output<outputs.arckubernetes.ClusterIdentity>;
    /**
     * The infrastructure on which the Arc Kubernetes Cluster is running on.
     */
    public /*out*/ readonly infrastructure!: pulumi.Output<string>;
    /**
     * The Kubernetes version of the cluster resource.
     */
    public /*out*/ readonly kubernetesVersion!: pulumi.Output<string>;
    /**
     * Specifies the Azure Region where the Arc Kubernetes Cluster should exist. Changing this forces a new Arc Kubernetes Cluster to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Specifies the name which should be used for this Arc Kubernetes Cluster. Changing this forces a new Arc Kubernetes Cluster to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The cluster offering.
     */
    public /*out*/ readonly offering!: pulumi.Output<string>;
    /**
     * Specifies the name of the Resource Group where the Arc Kubernetes Cluster should exist. Changing this forces a new Arc Kubernetes Cluster to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * A mapping of tags which should be assigned to the Arc Kubernetes Cluster.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Number of CPU cores present in the cluster resource.
     */
    public /*out*/ readonly totalCoreCount!: pulumi.Output<number>;
    /**
     * Number of nodes present in the cluster resource.
     */
    public /*out*/ readonly totalNodeCount!: pulumi.Output<number>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["agentPublicKeyCertificate"] = state ? state.agentPublicKeyCertificate : undefined;
            resourceInputs["agentVersion"] = state ? state.agentVersion : undefined;
            resourceInputs["distribution"] = state ? state.distribution : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["infrastructure"] = state ? state.infrastructure : undefined;
            resourceInputs["kubernetesVersion"] = state ? state.kubernetesVersion : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["offering"] = state ? state.offering : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["totalCoreCount"] = state ? state.totalCoreCount : undefined;
            resourceInputs["totalNodeCount"] = state ? state.totalNodeCount : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if ((!args || args.agentPublicKeyCertificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agentPublicKeyCertificate'");
            }
            if ((!args || args.identity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identity'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["agentPublicKeyCertificate"] = args ? args.agentPublicKeyCertificate : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["agentVersion"] = undefined /*out*/;
            resourceInputs["distribution"] = undefined /*out*/;
            resourceInputs["infrastructure"] = undefined /*out*/;
            resourceInputs["kubernetesVersion"] = undefined /*out*/;
            resourceInputs["offering"] = undefined /*out*/;
            resourceInputs["totalCoreCount"] = undefined /*out*/;
            resourceInputs["totalNodeCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * Specifies the base64-encoded public certificate used by the agent to do the initial handshake to the backend services in Azure. Changing this forces a new Arc Kubernetes Cluster to be created.
     */
    agentPublicKeyCertificate?: pulumi.Input<string>;
    /**
     * Version of the agent running on the cluster resource.
     */
    agentVersion?: pulumi.Input<string>;
    /**
     * The distribution running on this Arc Kubernetes Cluster.
     */
    distribution?: pulumi.Input<string>;
    /**
     * An `identity` block as defined below. Changing this forces a new Arc Kubernetes Cluster to be created.
     */
    identity?: pulumi.Input<inputs.arckubernetes.ClusterIdentity>;
    /**
     * The infrastructure on which the Arc Kubernetes Cluster is running on.
     */
    infrastructure?: pulumi.Input<string>;
    /**
     * The Kubernetes version of the cluster resource.
     */
    kubernetesVersion?: pulumi.Input<string>;
    /**
     * Specifies the Azure Region where the Arc Kubernetes Cluster should exist. Changing this forces a new Arc Kubernetes Cluster to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name which should be used for this Arc Kubernetes Cluster. Changing this forces a new Arc Kubernetes Cluster to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The cluster offering.
     */
    offering?: pulumi.Input<string>;
    /**
     * Specifies the name of the Resource Group where the Arc Kubernetes Cluster should exist. Changing this forces a new Arc Kubernetes Cluster to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Arc Kubernetes Cluster.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Number of CPU cores present in the cluster resource.
     */
    totalCoreCount?: pulumi.Input<number>;
    /**
     * Number of nodes present in the cluster resource.
     */
    totalNodeCount?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * Specifies the base64-encoded public certificate used by the agent to do the initial handshake to the backend services in Azure. Changing this forces a new Arc Kubernetes Cluster to be created.
     */
    agentPublicKeyCertificate: pulumi.Input<string>;
    /**
     * An `identity` block as defined below. Changing this forces a new Arc Kubernetes Cluster to be created.
     */
    identity: pulumi.Input<inputs.arckubernetes.ClusterIdentity>;
    /**
     * Specifies the Azure Region where the Arc Kubernetes Cluster should exist. Changing this forces a new Arc Kubernetes Cluster to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name which should be used for this Arc Kubernetes Cluster. Changing this forces a new Arc Kubernetes Cluster to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the name of the Resource Group where the Arc Kubernetes Cluster should exist. Changing this forces a new Arc Kubernetes Cluster to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Arc Kubernetes Cluster.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
