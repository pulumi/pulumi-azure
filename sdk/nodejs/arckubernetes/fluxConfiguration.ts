// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages an Arc Kubernetes Flux Configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as fs from "fs";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleCluster = new azure.arckubernetes.Cluster("exampleCluster", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: "West Europe",
 *     agentPublicKeyCertificate: fs.readFileSync("testdata/public.cer", { encoding: "base64" }),
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 *     tags: {
 *         ENV: "Test",
 *     },
 * });
 * const exampleClusterExtension = new azure.arckubernetes.ClusterExtension("exampleClusterExtension", {
 *     clusterId: azurerm_arc_kubernetes_cluster.test.id,
 *     extensionType: "microsoft.flux",
 * });
 * const exampleFluxConfiguration = new azure.arckubernetes.FluxConfiguration("exampleFluxConfiguration", {
 *     clusterId: azurerm_arc_kubernetes_cluster.test.id,
 *     namespace: "flux",
 *     gitRepository: {
 *         url: "https://github.com/Azure/arc-k8s-demo",
 *         referenceType: "branch",
 *         referenceValue: "main",
 *     },
 *     kustomizations: [{
 *         name: "kustomization-1",
 *     }],
 * }, {
 *     dependsOn: [exampleClusterExtension],
 * });
 * ```
 *
 * ## Import
 *
 * Arc Kubernetes Flux Configuration can be imported using the `resource id` for different `cluster_resource_name`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:arckubernetes/fluxConfiguration:FluxConfiguration example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Kubernetes/connectedClusters/cluster1/providers/Microsoft.KubernetesConfiguration/fluxConfigurations/fluxConfiguration1
 * ```
 */
export class FluxConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing FluxConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FluxConfigurationState, opts?: pulumi.CustomResourceOptions): FluxConfiguration {
        return new FluxConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:arckubernetes/fluxConfiguration:FluxConfiguration';

    /**
     * Returns true if the given object is an instance of FluxConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FluxConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FluxConfiguration.__pulumiType;
    }

    /**
     * An `blobStorage` block as defined below.
     */
    public readonly blobStorage!: pulumi.Output<outputs.arckubernetes.FluxConfigurationBlobStorage | undefined>;
    /**
     * A `bucket` block as defined below.
     */
    public readonly bucket!: pulumi.Output<outputs.arckubernetes.FluxConfigurationBucket | undefined>;
    /**
     * Specifies the Cluster ID. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Whether the configuration will keep its reconciliation of its kustomizations and sources with the repository. Defaults to `true`.
     */
    public readonly continuousReconciliationEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * A `gitRepository` block as defined below.
     */
    public readonly gitRepository!: pulumi.Output<outputs.arckubernetes.FluxConfigurationGitRepository | undefined>;
    /**
     * A `kustomizations` block as defined below.
     */
    public readonly kustomizations!: pulumi.Output<outputs.arckubernetes.FluxConfigurationKustomization[]>;
    /**
     * Specifies the name which should be used for this Arc Kubernetes Flux Configuration. Changing this forces a new Arc Kubernetes Flux Configuration to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the namespace to which this configuration is installed to. Changing this forces a new Arc Kubernetes Flux Configuration to be created.
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * Specifies the scope at which the operator will be installed. Possible values are `cluster` and `namespace`. Defaults to `namespace`. Changing this forces a new Arc Kubernetes Flux Configuration to be created.
     */
    public readonly scope!: pulumi.Output<string | undefined>;

    /**
     * Create a FluxConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FluxConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FluxConfigurationArgs | FluxConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FluxConfigurationState | undefined;
            resourceInputs["blobStorage"] = state ? state.blobStorage : undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["continuousReconciliationEnabled"] = state ? state.continuousReconciliationEnabled : undefined;
            resourceInputs["gitRepository"] = state ? state.gitRepository : undefined;
            resourceInputs["kustomizations"] = state ? state.kustomizations : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
        } else {
            const args = argsOrState as FluxConfigurationArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.kustomizations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kustomizations'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["blobStorage"] = args ? args.blobStorage : undefined;
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["continuousReconciliationEnabled"] = args ? args.continuousReconciliationEnabled : undefined;
            resourceInputs["gitRepository"] = args ? args.gitRepository : undefined;
            resourceInputs["kustomizations"] = args ? args.kustomizations : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FluxConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FluxConfiguration resources.
 */
export interface FluxConfigurationState {
    /**
     * An `blobStorage` block as defined below.
     */
    blobStorage?: pulumi.Input<inputs.arckubernetes.FluxConfigurationBlobStorage>;
    /**
     * A `bucket` block as defined below.
     */
    bucket?: pulumi.Input<inputs.arckubernetes.FluxConfigurationBucket>;
    /**
     * Specifies the Cluster ID. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Whether the configuration will keep its reconciliation of its kustomizations and sources with the repository. Defaults to `true`.
     */
    continuousReconciliationEnabled?: pulumi.Input<boolean>;
    /**
     * A `gitRepository` block as defined below.
     */
    gitRepository?: pulumi.Input<inputs.arckubernetes.FluxConfigurationGitRepository>;
    /**
     * A `kustomizations` block as defined below.
     */
    kustomizations?: pulumi.Input<pulumi.Input<inputs.arckubernetes.FluxConfigurationKustomization>[]>;
    /**
     * Specifies the name which should be used for this Arc Kubernetes Flux Configuration. Changing this forces a new Arc Kubernetes Flux Configuration to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the namespace to which this configuration is installed to. Changing this forces a new Arc Kubernetes Flux Configuration to be created.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies the scope at which the operator will be installed. Possible values are `cluster` and `namespace`. Defaults to `namespace`. Changing this forces a new Arc Kubernetes Flux Configuration to be created.
     */
    scope?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FluxConfiguration resource.
 */
export interface FluxConfigurationArgs {
    /**
     * An `blobStorage` block as defined below.
     */
    blobStorage?: pulumi.Input<inputs.arckubernetes.FluxConfigurationBlobStorage>;
    /**
     * A `bucket` block as defined below.
     */
    bucket?: pulumi.Input<inputs.arckubernetes.FluxConfigurationBucket>;
    /**
     * Specifies the Cluster ID. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
     */
    clusterId: pulumi.Input<string>;
    /**
     * Whether the configuration will keep its reconciliation of its kustomizations and sources with the repository. Defaults to `true`.
     */
    continuousReconciliationEnabled?: pulumi.Input<boolean>;
    /**
     * A `gitRepository` block as defined below.
     */
    gitRepository?: pulumi.Input<inputs.arckubernetes.FluxConfigurationGitRepository>;
    /**
     * A `kustomizations` block as defined below.
     */
    kustomizations: pulumi.Input<pulumi.Input<inputs.arckubernetes.FluxConfigurationKustomization>[]>;
    /**
     * Specifies the name which should be used for this Arc Kubernetes Flux Configuration. Changing this forces a new Arc Kubernetes Flux Configuration to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the namespace to which this configuration is installed to. Changing this forces a new Arc Kubernetes Flux Configuration to be created.
     */
    namespace: pulumi.Input<string>;
    /**
     * Specifies the scope at which the operator will be installed. Possible values are `cluster` and `namespace`. Defaults to `namespace`. Changing this forces a new Arc Kubernetes Flux Configuration to be created.
     */
    scope?: pulumi.Input<string>;
}
