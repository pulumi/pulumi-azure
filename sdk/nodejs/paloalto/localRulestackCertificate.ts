// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Palo Alto Networks Rulestack Certificate.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleLocalRulestack = new azure.paloalto.LocalRulestack("exampleLocalRulestack", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 * });
 * const exampleLocalRulestackCertificate = new azure.paloalto.LocalRulestackCertificate("exampleLocalRulestackCertificate", {
 *     rulestackId: exampleLocalRulestack.id,
 *     selfSigned: true,
 * });
 * ```
 *
 * ## Import
 *
 * Palo Alto Networks Rulestack Certificates can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:paloalto/localRulestackCertificate:LocalRulestackCertificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/PaloAltoNetworks.Cloudngfw/localRulestacks/myLocalRulestack/certificates/myCertificate
 * ```
 */
export class LocalRulestackCertificate extends pulumi.CustomResource {
    /**
     * Get an existing LocalRulestackCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LocalRulestackCertificateState, opts?: pulumi.CustomResourceOptions): LocalRulestackCertificate {
        return new LocalRulestackCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:paloalto/localRulestackCertificate:LocalRulestackCertificate';

    /**
     * Returns true if the given object is an instance of LocalRulestackCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LocalRulestackCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LocalRulestackCertificate.__pulumiType;
    }

    /**
     * The comment for Audit purposes.
     */
    public readonly auditComment!: pulumi.Output<string | undefined>;
    /**
     * The description for the Certificate.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The `versionlesId` of the Key Vault Certificate to use. Changing this forces a new Palo Alto Networks Rulestack Certificate to be created.
     */
    public readonly keyVaultCertificateId!: pulumi.Output<string | undefined>;
    /**
     * The name which should be used for this Palo Alto Networks Rulestack Certificate.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the TODO. Changing this forces a new Palo Alto Networks Rulestack Certificate to be created.
     */
    public readonly rulestackId!: pulumi.Output<string>;
    /**
     * Should a Self Signed Certificate be used. Defaults to `false`. Changing this forces a new Palo Alto Networks Rulestack Certificate to be created.
     *
     * > **Note:** One and only one of `selfSigned` or `keyVaultCertificateId` must be specified.
     */
    public readonly selfSigned!: pulumi.Output<boolean | undefined>;

    /**
     * Create a LocalRulestackCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LocalRulestackCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LocalRulestackCertificateArgs | LocalRulestackCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LocalRulestackCertificateState | undefined;
            resourceInputs["auditComment"] = state ? state.auditComment : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["keyVaultCertificateId"] = state ? state.keyVaultCertificateId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rulestackId"] = state ? state.rulestackId : undefined;
            resourceInputs["selfSigned"] = state ? state.selfSigned : undefined;
        } else {
            const args = argsOrState as LocalRulestackCertificateArgs | undefined;
            if ((!args || args.rulestackId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rulestackId'");
            }
            resourceInputs["auditComment"] = args ? args.auditComment : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["keyVaultCertificateId"] = args ? args.keyVaultCertificateId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rulestackId"] = args ? args.rulestackId : undefined;
            resourceInputs["selfSigned"] = args ? args.selfSigned : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LocalRulestackCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LocalRulestackCertificate resources.
 */
export interface LocalRulestackCertificateState {
    /**
     * The comment for Audit purposes.
     */
    auditComment?: pulumi.Input<string>;
    /**
     * The description for the Certificate.
     */
    description?: pulumi.Input<string>;
    /**
     * The `versionlesId` of the Key Vault Certificate to use. Changing this forces a new Palo Alto Networks Rulestack Certificate to be created.
     */
    keyVaultCertificateId?: pulumi.Input<string>;
    /**
     * The name which should be used for this Palo Alto Networks Rulestack Certificate.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the TODO. Changing this forces a new Palo Alto Networks Rulestack Certificate to be created.
     */
    rulestackId?: pulumi.Input<string>;
    /**
     * Should a Self Signed Certificate be used. Defaults to `false`. Changing this forces a new Palo Alto Networks Rulestack Certificate to be created.
     *
     * > **Note:** One and only one of `selfSigned` or `keyVaultCertificateId` must be specified.
     */
    selfSigned?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a LocalRulestackCertificate resource.
 */
export interface LocalRulestackCertificateArgs {
    /**
     * The comment for Audit purposes.
     */
    auditComment?: pulumi.Input<string>;
    /**
     * The description for the Certificate.
     */
    description?: pulumi.Input<string>;
    /**
     * The `versionlesId` of the Key Vault Certificate to use. Changing this forces a new Palo Alto Networks Rulestack Certificate to be created.
     */
    keyVaultCertificateId?: pulumi.Input<string>;
    /**
     * The name which should be used for this Palo Alto Networks Rulestack Certificate.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the TODO. Changing this forces a new Palo Alto Networks Rulestack Certificate to be created.
     */
    rulestackId: pulumi.Input<string>;
    /**
     * Should a Self Signed Certificate be used. Defaults to `false`. Changing this forces a new Palo Alto Networks Rulestack Certificate to be created.
     *
     * > **Note:** One and only one of `selfSigned` or `keyVaultCertificateId` must be specified.
     */
    selfSigned?: pulumi.Input<boolean>;
}
