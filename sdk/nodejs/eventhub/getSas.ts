// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this data source to obtain a Shared Access Signature (SAS Token) for an existing Event Hub.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleEventHubNamespace = new azure.eventhub.EventHubNamespace("example", {
 *     name: "example-ehn",
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     sku: "Basic",
 * });
 * const exampleEventHub = new azure.eventhub.EventHub("example", {
 *     name: "example-eh",
 *     namespaceName: exampleEventHubNamespace.name,
 *     resourceGroupName: exampleResourceGroup.name,
 *     partitionCount: 1,
 *     messageRetention: 1,
 * });
 * const exampleAuthorizationRule = new azure.eventhub.AuthorizationRule("example", {
 *     name: "example-ehar",
 *     namespaceName: exampleEventHubNamespace.name,
 *     eventhubName: exampleEventHub.name,
 *     resourceGroupName: exampleResourceGroup.name,
 *     listen: true,
 *     send: true,
 *     manage: true,
 * });
 * const example = azure.eventhub.getAuthorizationRuleOutput({
 *     name: exampleAuthorizationRule.name,
 *     namespaceName: exampleEventHubNamespace.name,
 *     eventhubName: exampleEventHub.name,
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * const exampleGetSas = example.apply(example => azure.eventhub.getSas({
 *     connectionString: example.primaryConnectionString,
 *     expiry: "2023-06-23T00:00:00Z",
 * }));
 * ```
 */
export function getSas(args: GetSasArgs, opts?: pulumi.InvokeOptions): Promise<GetSasResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure:eventhub/getSas:getSas", {
        "connectionString": args.connectionString,
        "expiry": args.expiry,
    }, opts);
}

/**
 * A collection of arguments for invoking getSas.
 */
export interface GetSasArgs {
    /**
     * The connection string for the Event Hub to which this SAS applies.
     */
    connectionString: string;
    /**
     * The expiration time and date of this SAS. Must be a valid ISO-8601 format time/date string.
     */
    expiry: string;
}

/**
 * A collection of values returned by getSas.
 */
export interface GetSasResult {
    readonly connectionString: string;
    readonly expiry: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The computed Event Hub Shared Access Signature (SAS).
     */
    readonly sas: string;
}
/**
 * Use this data source to obtain a Shared Access Signature (SAS Token) for an existing Event Hub.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleEventHubNamespace = new azure.eventhub.EventHubNamespace("example", {
 *     name: "example-ehn",
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     sku: "Basic",
 * });
 * const exampleEventHub = new azure.eventhub.EventHub("example", {
 *     name: "example-eh",
 *     namespaceName: exampleEventHubNamespace.name,
 *     resourceGroupName: exampleResourceGroup.name,
 *     partitionCount: 1,
 *     messageRetention: 1,
 * });
 * const exampleAuthorizationRule = new azure.eventhub.AuthorizationRule("example", {
 *     name: "example-ehar",
 *     namespaceName: exampleEventHubNamespace.name,
 *     eventhubName: exampleEventHub.name,
 *     resourceGroupName: exampleResourceGroup.name,
 *     listen: true,
 *     send: true,
 *     manage: true,
 * });
 * const example = azure.eventhub.getAuthorizationRuleOutput({
 *     name: exampleAuthorizationRule.name,
 *     namespaceName: exampleEventHubNamespace.name,
 *     eventhubName: exampleEventHub.name,
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * const exampleGetSas = example.apply(example => azure.eventhub.getSas({
 *     connectionString: example.primaryConnectionString,
 *     expiry: "2023-06-23T00:00:00Z",
 * }));
 * ```
 */
export function getSasOutput(args: GetSasOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetSasResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("azure:eventhub/getSas:getSas", {
        "connectionString": args.connectionString,
        "expiry": args.expiry,
    }, opts);
}

/**
 * A collection of arguments for invoking getSas.
 */
export interface GetSasOutputArgs {
    /**
     * The connection string for the Event Hub to which this SAS applies.
     */
    connectionString: pulumi.Input<string>;
    /**
     * The expiration time and date of this SAS. Must be a valid ISO-8601 format time/date string.
     */
    expiry: pulumi.Input<string>;
}
