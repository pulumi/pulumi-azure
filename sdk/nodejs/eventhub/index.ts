// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export * from "./authorizationRule";
export * from "./cluster";
export * from "./consumerGroup";
export * from "./domain";
export * from "./eventGridTopic";
export * from "./eventHub";
export * from "./eventHubAuthorizationRule";
export * from "./eventHubConsumerGroup";
export * from "./eventHubNamespace";
export * from "./eventHubNamespaceAuthorizationRule";
export * from "./eventSubscription";
export * from "./eventhubNamespaceDisasterRecoveryConfig";
export * from "./getAuthorizationRule";
export * from "./getConsumeGroup";
export * from "./getEventHub";
export * from "./getEventhubNamespace";
export * from "./getNamespace";
export * from "./getNamespaceAuthorizationRule";
export * from "./getServiceBusNamespace";
export * from "./namespace";
export * from "./namespaceAuthorizationRule";
export * from "./queue";
export * from "./queueAuthorizationRule";
export * from "./subscription";
export * from "./subscriptionRule";
export * from "./topic";
export * from "./topicAuthorizationRule";
export * from "./zMixins";

// Import resources to register:
import { AuthorizationRule } from "./authorizationRule";
import { Cluster } from "./cluster";
import { ConsumerGroup } from "./consumerGroup";
import { Domain } from "./domain";
import { EventGridTopic } from "./eventGridTopic";
import { EventHub } from "./eventHub";
import { EventHubAuthorizationRule } from "./eventHubAuthorizationRule";
import { EventHubConsumerGroup } from "./eventHubConsumerGroup";
import { EventHubNamespace } from "./eventHubNamespace";
import { EventHubNamespaceAuthorizationRule } from "./eventHubNamespaceAuthorizationRule";
import { EventSubscription } from "./eventSubscription";
import { EventhubNamespaceDisasterRecoveryConfig } from "./eventhubNamespaceDisasterRecoveryConfig";
import { Namespace } from "./namespace";
import { NamespaceAuthorizationRule } from "./namespaceAuthorizationRule";
import { Queue } from "./queue";
import { QueueAuthorizationRule } from "./queueAuthorizationRule";
import { Subscription } from "./subscription";
import { SubscriptionRule } from "./subscriptionRule";
import { Topic } from "./topic";
import { TopicAuthorizationRule } from "./topicAuthorizationRule";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:eventhub/authorizationRule:AuthorizationRule":
                return new AuthorizationRule(name, <any>undefined, { urn })
            case "azure:eventhub/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "azure:eventhub/consumerGroup:ConsumerGroup":
                return new ConsumerGroup(name, <any>undefined, { urn })
            case "azure:eventhub/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "azure:eventhub/eventGridTopic:EventGridTopic":
                return new EventGridTopic(name, <any>undefined, { urn })
            case "azure:eventhub/eventHub:EventHub":
                return new EventHub(name, <any>undefined, { urn })
            case "azure:eventhub/eventHubAuthorizationRule:EventHubAuthorizationRule":
                return new EventHubAuthorizationRule(name, <any>undefined, { urn })
            case "azure:eventhub/eventHubConsumerGroup:EventHubConsumerGroup":
                return new EventHubConsumerGroup(name, <any>undefined, { urn })
            case "azure:eventhub/eventHubNamespace:EventHubNamespace":
                return new EventHubNamespace(name, <any>undefined, { urn })
            case "azure:eventhub/eventHubNamespaceAuthorizationRule:EventHubNamespaceAuthorizationRule":
                return new EventHubNamespaceAuthorizationRule(name, <any>undefined, { urn })
            case "azure:eventhub/eventSubscription:EventSubscription":
                return new EventSubscription(name, <any>undefined, { urn })
            case "azure:eventhub/eventhubNamespaceDisasterRecoveryConfig:EventhubNamespaceDisasterRecoveryConfig":
                return new EventhubNamespaceDisasterRecoveryConfig(name, <any>undefined, { urn })
            case "azure:eventhub/namespace:Namespace":
                return new Namespace(name, <any>undefined, { urn })
            case "azure:eventhub/namespaceAuthorizationRule:NamespaceAuthorizationRule":
                return new NamespaceAuthorizationRule(name, <any>undefined, { urn })
            case "azure:eventhub/queue:Queue":
                return new Queue(name, <any>undefined, { urn })
            case "azure:eventhub/queueAuthorizationRule:QueueAuthorizationRule":
                return new QueueAuthorizationRule(name, <any>undefined, { urn })
            case "azure:eventhub/subscription:Subscription":
                return new Subscription(name, <any>undefined, { urn })
            case "azure:eventhub/subscriptionRule:SubscriptionRule":
                return new SubscriptionRule(name, <any>undefined, { urn })
            case "azure:eventhub/topic:Topic":
                return new Topic(name, <any>undefined, { urn })
            case "azure:eventhub/topicAuthorizationRule:TopicAuthorizationRule":
                return new TopicAuthorizationRule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "eventhub/authorizationRule", _module)
pulumi.runtime.registerResourceModule("azure", "eventhub/cluster", _module)
pulumi.runtime.registerResourceModule("azure", "eventhub/consumerGroup", _module)
pulumi.runtime.registerResourceModule("azure", "eventhub/domain", _module)
pulumi.runtime.registerResourceModule("azure", "eventhub/eventGridTopic", _module)
pulumi.runtime.registerResourceModule("azure", "eventhub/eventHub", _module)
pulumi.runtime.registerResourceModule("azure", "eventhub/eventHubAuthorizationRule", _module)
pulumi.runtime.registerResourceModule("azure", "eventhub/eventHubConsumerGroup", _module)
pulumi.runtime.registerResourceModule("azure", "eventhub/eventHubNamespace", _module)
pulumi.runtime.registerResourceModule("azure", "eventhub/eventHubNamespaceAuthorizationRule", _module)
pulumi.runtime.registerResourceModule("azure", "eventhub/eventSubscription", _module)
pulumi.runtime.registerResourceModule("azure", "eventhub/eventhubNamespaceDisasterRecoveryConfig", _module)
pulumi.runtime.registerResourceModule("azure", "eventhub/namespace", _module)
pulumi.runtime.registerResourceModule("azure", "eventhub/namespaceAuthorizationRule", _module)
pulumi.runtime.registerResourceModule("azure", "eventhub/queue", _module)
pulumi.runtime.registerResourceModule("azure", "eventhub/queueAuthorizationRule", _module)
pulumi.runtime.registerResourceModule("azure", "eventhub/subscription", _module)
pulumi.runtime.registerResourceModule("azure", "eventhub/subscriptionRule", _module)
pulumi.runtime.registerResourceModule("azure", "eventhub/topic", _module)
pulumi.runtime.registerResourceModule("azure", "eventhub/topicAuthorizationRule", _module)
