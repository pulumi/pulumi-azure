// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Customer Managed Key for a EventHub Namespace.
 *
 * !> **Note:** In 2.x versions of the Azure Provider during deletion this resource will **delete and recreate the parent EventHub Namespace which may involve data loss** as it's not possible to remove the Customer Managed Key from the EventHub Namespace once it's been added. Version 3.0 of the Azure Provider will change this so that the Delete operation is a noop, requiring the parent EventHub Namespace is deleted/recreated to remove the Customer Managed Key.
 *
 * ## Import
 *
 * Customer Managed Keys for a EventHub Namespace can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:eventhub/namespaceCustomerManagedKey:NamespaceCustomerManagedKey example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.EventHub/namespaces/namespace1
 * ```
 */
export class NamespaceCustomerManagedKey extends pulumi.CustomResource {
    /**
     * Get an existing NamespaceCustomerManagedKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NamespaceCustomerManagedKeyState, opts?: pulumi.CustomResourceOptions): NamespaceCustomerManagedKey {
        return new NamespaceCustomerManagedKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:eventhub/namespaceCustomerManagedKey:NamespaceCustomerManagedKey';

    /**
     * Returns true if the given object is an instance of NamespaceCustomerManagedKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NamespaceCustomerManagedKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NamespaceCustomerManagedKey.__pulumiType;
    }

    /**
     * The ID of the EventHub Namespace. Changing this forces a new resource to be created.
     */
    public readonly eventhubNamespaceId!: pulumi.Output<string>;
    /**
     * Whether to enable Infrastructure Encryption (Double Encryption). Changing this forces a new resource to be created.
     */
    public readonly infrastructureEncryptionEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The list of keys of Key Vault.
     */
    public readonly keyVaultKeyIds!: pulumi.Output<string[]>;

    /**
     * Create a NamespaceCustomerManagedKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NamespaceCustomerManagedKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NamespaceCustomerManagedKeyArgs | NamespaceCustomerManagedKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NamespaceCustomerManagedKeyState | undefined;
            resourceInputs["eventhubNamespaceId"] = state ? state.eventhubNamespaceId : undefined;
            resourceInputs["infrastructureEncryptionEnabled"] = state ? state.infrastructureEncryptionEnabled : undefined;
            resourceInputs["keyVaultKeyIds"] = state ? state.keyVaultKeyIds : undefined;
        } else {
            const args = argsOrState as NamespaceCustomerManagedKeyArgs | undefined;
            if ((!args || args.eventhubNamespaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventhubNamespaceId'");
            }
            if ((!args || args.keyVaultKeyIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyVaultKeyIds'");
            }
            resourceInputs["eventhubNamespaceId"] = args ? args.eventhubNamespaceId : undefined;
            resourceInputs["infrastructureEncryptionEnabled"] = args ? args.infrastructureEncryptionEnabled : undefined;
            resourceInputs["keyVaultKeyIds"] = args ? args.keyVaultKeyIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NamespaceCustomerManagedKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NamespaceCustomerManagedKey resources.
 */
export interface NamespaceCustomerManagedKeyState {
    /**
     * The ID of the EventHub Namespace. Changing this forces a new resource to be created.
     */
    eventhubNamespaceId?: pulumi.Input<string>;
    /**
     * Whether to enable Infrastructure Encryption (Double Encryption). Changing this forces a new resource to be created.
     */
    infrastructureEncryptionEnabled?: pulumi.Input<boolean>;
    /**
     * The list of keys of Key Vault.
     */
    keyVaultKeyIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a NamespaceCustomerManagedKey resource.
 */
export interface NamespaceCustomerManagedKeyArgs {
    /**
     * The ID of the EventHub Namespace. Changing this forces a new resource to be created.
     */
    eventhubNamespaceId: pulumi.Input<string>;
    /**
     * Whether to enable Infrastructure Encryption (Double Encryption). Changing this forces a new resource to be created.
     */
    infrastructureEncryptionEnabled?: pulumi.Input<boolean>;
    /**
     * The list of keys of Key Vault.
     */
    keyVaultKeyIds: pulumi.Input<pulumi.Input<string>[]>;
}
