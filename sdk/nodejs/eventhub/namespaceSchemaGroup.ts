// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {location: "East US"});
 * const testEventHubNamespace = new azure.eventhub.EventHubNamespace("testEventHubNamespace", {
 *     location: azurerm_resource_group.test.location,
 *     resourceGroupName: azurerm_resource_group.test.name,
 *     sku: "Standard",
 * });
 * const testNamespaceSchemaGroup = new azure.eventhub.NamespaceSchemaGroup("testNamespaceSchemaGroup", {
 *     namespaceId: testEventHubNamespace.id,
 *     schemaCompatibility: "Forward",
 *     schemaType: "Avro",
 * });
 * ```
 *
 * ## Import
 *
 * Schema Group for a EventHub Namespace can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:eventhub/namespaceSchemaGroup:NamespaceSchemaGroup example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.EventHub/namespaces/namespace1/schemaGroups/group1
 * ```
 */
export class NamespaceSchemaGroup extends pulumi.CustomResource {
    /**
     * Get an existing NamespaceSchemaGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NamespaceSchemaGroupState, opts?: pulumi.CustomResourceOptions): NamespaceSchemaGroup {
        return new NamespaceSchemaGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:eventhub/namespaceSchemaGroup:NamespaceSchemaGroup';

    /**
     * Returns true if the given object is an instance of NamespaceSchemaGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NamespaceSchemaGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NamespaceSchemaGroup.__pulumiType;
    }

    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the EventHub Namespace. Changing this forces a new resource to be created.
     */
    public readonly namespaceId!: pulumi.Output<string>;
    /**
     * The compatibility of this schema group. Possible values are `None`, `Backward`, `Forward`. Changing this forces a new resource to be created.
     */
    public readonly schemaCompatibility!: pulumi.Output<string>;
    /**
     * The Type of this schema group. Possible values are `Avro`, `Unknown`. Changing this forces a new resource to be created.
     */
    public readonly schemaType!: pulumi.Output<string>;

    /**
     * Create a NamespaceSchemaGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NamespaceSchemaGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NamespaceSchemaGroupArgs | NamespaceSchemaGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NamespaceSchemaGroupState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespaceId"] = state ? state.namespaceId : undefined;
            resourceInputs["schemaCompatibility"] = state ? state.schemaCompatibility : undefined;
            resourceInputs["schemaType"] = state ? state.schemaType : undefined;
        } else {
            const args = argsOrState as NamespaceSchemaGroupArgs | undefined;
            if ((!args || args.namespaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespaceId'");
            }
            if ((!args || args.schemaCompatibility === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaCompatibility'");
            }
            if ((!args || args.schemaType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaType'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespaceId"] = args ? args.namespaceId : undefined;
            resourceInputs["schemaCompatibility"] = args ? args.schemaCompatibility : undefined;
            resourceInputs["schemaType"] = args ? args.schemaType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NamespaceSchemaGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NamespaceSchemaGroup resources.
 */
export interface NamespaceSchemaGroupState {
    name?: pulumi.Input<string>;
    /**
     * The ID of the EventHub Namespace. Changing this forces a new resource to be created.
     */
    namespaceId?: pulumi.Input<string>;
    /**
     * The compatibility of this schema group. Possible values are `None`, `Backward`, `Forward`. Changing this forces a new resource to be created.
     */
    schemaCompatibility?: pulumi.Input<string>;
    /**
     * The Type of this schema group. Possible values are `Avro`, `Unknown`. Changing this forces a new resource to be created.
     */
    schemaType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NamespaceSchemaGroup resource.
 */
export interface NamespaceSchemaGroupArgs {
    name?: pulumi.Input<string>;
    /**
     * The ID of the EventHub Namespace. Changing this forces a new resource to be created.
     */
    namespaceId: pulumi.Input<string>;
    /**
     * The compatibility of this schema group. Possible values are `None`, `Backward`, `Forward`. Changing this forces a new resource to be created.
     */
    schemaCompatibility: pulumi.Input<string>;
    /**
     * The Type of this schema group. Possible values are `Avro`, `Unknown`. Changing this forces a new resource to be created.
     */
    schemaType: pulumi.Input<string>;
}
