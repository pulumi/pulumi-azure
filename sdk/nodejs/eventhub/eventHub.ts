// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Event Hubs as a nested resource within a Event Hubs namespace.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleEventHubNamespace = new azure.eventhub.EventHubNamespace("example", {
 *     name: "acceptanceTestEventHubNamespace",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: "Standard",
 *     capacity: 1,
 *     tags: {
 *         environment: "Production",
 *     },
 * });
 * const exampleEventHub = new azure.eventhub.EventHub("example", {
 *     name: "acceptanceTestEventHub",
 *     namespaceId: exampleEventHubNamespace.id,
 *     partitionCount: 2,
 *     messageRetention: 1,
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.EventHub` - 2024-01-01
 *
 * ## Import
 *
 * EventHubs can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:eventhub/eventHub:EventHub eventhub1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.EventHub/namespaces/namespace1/eventhubs/eventhub1
 * ```
 */
export class EventHub extends pulumi.CustomResource {
    /**
     * Get an existing EventHub resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventHubState, opts?: pulumi.CustomResourceOptions): EventHub {
        return new EventHub(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:eventhub/eventHub:EventHub';

    /**
     * Returns true if the given object is an instance of EventHub.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventHub {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventHub.__pulumiType;
    }

    /**
     * A `captureDescription` block as defined below.
     */
    declare public readonly captureDescription: pulumi.Output<outputs.eventhub.EventHubCaptureDescription | undefined>;
    /**
     * Specifies the number of days to retain the events for this Event Hub.
     *
     * > **Note:** When using a dedicated Event Hubs cluster, maximum value of `messageRetention` is 90 days. When using a shared parent EventHub Namespace, maximum value is 7 days; or 1 day when using a Basic SKU for the shared parent EventHub Namespace.
     */
    declare public readonly messageRetention: pulumi.Output<number>;
    /**
     * Specifies the name of the EventHub resource. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Specifies the ID of the EventHub Namespace. Changing this forces a new resource to be created.
     */
    declare public readonly namespaceId: pulumi.Output<string>;
    /**
     * @deprecated `namespaceName` has been deprecated in favour of `namespaceId` and will be removed in v5.0 of the AzureRM Provider
     */
    declare public readonly namespaceName: pulumi.Output<string>;
    /**
     * Specifies the current number of shards on the Event Hub.
     *
     * > **Note:** `partitionCount` cannot be changed unless Eventhub Namespace SKU is `Premium` and cannot be decreased.
     *
     * > **Note:** When using a dedicated Event Hubs cluster, maximum value of `partitionCount` is 1024. When using a shared parent EventHub Namespace, maximum value is 32.
     */
    declare public readonly partitionCount: pulumi.Output<number>;
    /**
     * The identifiers for partitions created for Event Hubs.
     */
    declare public /*out*/ readonly partitionIds: pulumi.Output<string[]>;
    /**
     * @deprecated `resourceGroupName` has been deprecated in favour of `namespaceId` and will be removed in v5.0 of the AzureRM Provider
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * A `retentionDescription` block as defined below.
     */
    declare public readonly retentionDescription: pulumi.Output<outputs.eventhub.EventHubRetentionDescription>;
    /**
     * Specifies the status of the Event Hub resource. Possible values are `Active`, `Disabled` and `SendDisabled`. Defaults to `Active`.
     */
    declare public readonly status: pulumi.Output<string | undefined>;

    /**
     * Create a EventHub resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventHubArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventHubArgs | EventHubState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EventHubState | undefined;
            resourceInputs["captureDescription"] = state?.captureDescription;
            resourceInputs["messageRetention"] = state?.messageRetention;
            resourceInputs["name"] = state?.name;
            resourceInputs["namespaceId"] = state?.namespaceId;
            resourceInputs["namespaceName"] = state?.namespaceName;
            resourceInputs["partitionCount"] = state?.partitionCount;
            resourceInputs["partitionIds"] = state?.partitionIds;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["retentionDescription"] = state?.retentionDescription;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as EventHubArgs | undefined;
            if (args?.partitionCount === undefined && !opts.urn) {
                throw new Error("Missing required property 'partitionCount'");
            }
            resourceInputs["captureDescription"] = args?.captureDescription;
            resourceInputs["messageRetention"] = args?.messageRetention;
            resourceInputs["name"] = args?.name;
            resourceInputs["namespaceId"] = args?.namespaceId;
            resourceInputs["namespaceName"] = args?.namespaceName;
            resourceInputs["partitionCount"] = args?.partitionCount;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["retentionDescription"] = args?.retentionDescription;
            resourceInputs["status"] = args?.status;
            resourceInputs["partitionIds"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EventHub.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EventHub resources.
 */
export interface EventHubState {
    /**
     * A `captureDescription` block as defined below.
     */
    captureDescription?: pulumi.Input<inputs.eventhub.EventHubCaptureDescription>;
    /**
     * Specifies the number of days to retain the events for this Event Hub.
     *
     * > **Note:** When using a dedicated Event Hubs cluster, maximum value of `messageRetention` is 90 days. When using a shared parent EventHub Namespace, maximum value is 7 days; or 1 day when using a Basic SKU for the shared parent EventHub Namespace.
     */
    messageRetention?: pulumi.Input<number>;
    /**
     * Specifies the name of the EventHub resource. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the ID of the EventHub Namespace. Changing this forces a new resource to be created.
     */
    namespaceId?: pulumi.Input<string>;
    /**
     * @deprecated `namespaceName` has been deprecated in favour of `namespaceId` and will be removed in v5.0 of the AzureRM Provider
     */
    namespaceName?: pulumi.Input<string>;
    /**
     * Specifies the current number of shards on the Event Hub.
     *
     * > **Note:** `partitionCount` cannot be changed unless Eventhub Namespace SKU is `Premium` and cannot be decreased.
     *
     * > **Note:** When using a dedicated Event Hubs cluster, maximum value of `partitionCount` is 1024. When using a shared parent EventHub Namespace, maximum value is 32.
     */
    partitionCount?: pulumi.Input<number>;
    /**
     * The identifiers for partitions created for Event Hubs.
     */
    partitionIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * @deprecated `resourceGroupName` has been deprecated in favour of `namespaceId` and will be removed in v5.0 of the AzureRM Provider
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A `retentionDescription` block as defined below.
     */
    retentionDescription?: pulumi.Input<inputs.eventhub.EventHubRetentionDescription>;
    /**
     * Specifies the status of the Event Hub resource. Possible values are `Active`, `Disabled` and `SendDisabled`. Defaults to `Active`.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EventHub resource.
 */
export interface EventHubArgs {
    /**
     * A `captureDescription` block as defined below.
     */
    captureDescription?: pulumi.Input<inputs.eventhub.EventHubCaptureDescription>;
    /**
     * Specifies the number of days to retain the events for this Event Hub.
     *
     * > **Note:** When using a dedicated Event Hubs cluster, maximum value of `messageRetention` is 90 days. When using a shared parent EventHub Namespace, maximum value is 7 days; or 1 day when using a Basic SKU for the shared parent EventHub Namespace.
     */
    messageRetention?: pulumi.Input<number>;
    /**
     * Specifies the name of the EventHub resource. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the ID of the EventHub Namespace. Changing this forces a new resource to be created.
     */
    namespaceId?: pulumi.Input<string>;
    /**
     * @deprecated `namespaceName` has been deprecated in favour of `namespaceId` and will be removed in v5.0 of the AzureRM Provider
     */
    namespaceName?: pulumi.Input<string>;
    /**
     * Specifies the current number of shards on the Event Hub.
     *
     * > **Note:** `partitionCount` cannot be changed unless Eventhub Namespace SKU is `Premium` and cannot be decreased.
     *
     * > **Note:** When using a dedicated Event Hubs cluster, maximum value of `partitionCount` is 1024. When using a shared parent EventHub Namespace, maximum value is 32.
     */
    partitionCount: pulumi.Input<number>;
    /**
     * @deprecated `resourceGroupName` has been deprecated in favour of `namespaceId` and will be removed in v5.0 of the AzureRM Provider
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A `retentionDescription` block as defined below.
     */
    retentionDescription?: pulumi.Input<inputs.eventhub.EventHubRetentionDescription>;
    /**
     * Specifies the status of the Event Hub resource. Possible values are `Active`, `Disabled` and `SendDisabled`. Defaults to `Active`.
     */
    status?: pulumi.Input<string>;
}
