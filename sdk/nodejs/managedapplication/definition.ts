// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Managed Application Definition.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleDefinition = new azure.managedapplication.Definition("example", {
 *     name: "examplemanagedapplicationdefinition",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     lockLevel: "ReadOnly",
 *     packageFileUri: "https://github.com/Azure/azure-managedapp-samples/raw/master/Managed Application Sample Packages/201-managed-storage-account/managedstorage.zip",
 *     displayName: "TestManagedApplicationDefinition",
 *     description: "Test Managed Application Definition",
 *     authorizations: [{
 *         servicePrincipalId: current.then(current => current.objectId),
 *         roleDefinitionId: "a094b430-dad3-424d-ae58-13f72fd72591",
 *     }],
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Solutions` - 2021-07-01
 *
 * ## Import
 *
 * Managed Application Definition can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:managedapplication/definition:Definition example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Solutions/applicationDefinitions/appDefinition1
 * ```
 */
export class Definition extends pulumi.CustomResource {
    /**
     * Get an existing Definition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefinitionState, opts?: pulumi.CustomResourceOptions): Definition {
        return new Definition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:managedapplication/definition:Definition';

    /**
     * Returns true if the given object is an instance of Definition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Definition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Definition.__pulumiType;
    }

    /**
     * One or more `authorization` block defined below.
     */
    declare public readonly authorizations: pulumi.Output<outputs.managedapplication.DefinitionAuthorization[] | undefined>;
    /**
     * Specifies the `createUiDefinition` JSON for the backing template with `Microsoft.Solutions/applications` resource.
     */
    declare public readonly createUiDefinition: pulumi.Output<string | undefined>;
    /**
     * Specifies the managed application definition description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Specifies the managed application definition display name.
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * Specifies the managed application lock level. Valid values include `CanNotDelete`, `None`, `ReadOnly`. Changing this forces a new resource to be created.
     */
    declare public readonly lockLevel: pulumi.Output<string>;
    /**
     * Specifies the inline main template JSON which has resources to be provisioned.
     */
    declare public readonly mainTemplate: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of the Managed Application Definition. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Is the package enabled? Defaults to `true`.
     */
    declare public readonly packageEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the managed application definition package file Uri.
     */
    declare public readonly packageFileUri: pulumi.Output<string | undefined>;
    /**
     * The name of the Resource Group where the Managed Application Definition should exist. Changing this forces a new resource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource.
     *
     * > **Note:** If either `createUiDefinition` or `mainTemplate` is set they both must be set.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Definition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DefinitionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefinitionArgs | DefinitionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefinitionState | undefined;
            resourceInputs["authorizations"] = state?.authorizations;
            resourceInputs["createUiDefinition"] = state?.createUiDefinition;
            resourceInputs["description"] = state?.description;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["location"] = state?.location;
            resourceInputs["lockLevel"] = state?.lockLevel;
            resourceInputs["mainTemplate"] = state?.mainTemplate;
            resourceInputs["name"] = state?.name;
            resourceInputs["packageEnabled"] = state?.packageEnabled;
            resourceInputs["packageFileUri"] = state?.packageFileUri;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as DefinitionArgs | undefined;
            if (args?.displayName === undefined && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if (args?.lockLevel === undefined && !opts.urn) {
                throw new Error("Missing required property 'lockLevel'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["authorizations"] = args?.authorizations;
            resourceInputs["createUiDefinition"] = args?.createUiDefinition;
            resourceInputs["description"] = args?.description;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["location"] = args?.location;
            resourceInputs["lockLevel"] = args?.lockLevel;
            resourceInputs["mainTemplate"] = args?.mainTemplate;
            resourceInputs["name"] = args?.name;
            resourceInputs["packageEnabled"] = args?.packageEnabled;
            resourceInputs["packageFileUri"] = args?.packageFileUri;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["tags"] = args?.tags;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Definition.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Definition resources.
 */
export interface DefinitionState {
    /**
     * One or more `authorization` block defined below.
     */
    authorizations?: pulumi.Input<pulumi.Input<inputs.managedapplication.DefinitionAuthorization>[]>;
    /**
     * Specifies the `createUiDefinition` JSON for the backing template with `Microsoft.Solutions/applications` resource.
     */
    createUiDefinition?: pulumi.Input<string>;
    /**
     * Specifies the managed application definition description.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the managed application definition display name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the managed application lock level. Valid values include `CanNotDelete`, `None`, `ReadOnly`. Changing this forces a new resource to be created.
     */
    lockLevel?: pulumi.Input<string>;
    /**
     * Specifies the inline main template JSON which has resources to be provisioned.
     */
    mainTemplate?: pulumi.Input<string>;
    /**
     * Specifies the name of the Managed Application Definition. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Is the package enabled? Defaults to `true`.
     */
    packageEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the managed application definition package file Uri.
     */
    packageFileUri?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Managed Application Definition should exist. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     *
     * > **Note:** If either `createUiDefinition` or `mainTemplate` is set they both must be set.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Definition resource.
 */
export interface DefinitionArgs {
    /**
     * One or more `authorization` block defined below.
     */
    authorizations?: pulumi.Input<pulumi.Input<inputs.managedapplication.DefinitionAuthorization>[]>;
    /**
     * Specifies the `createUiDefinition` JSON for the backing template with `Microsoft.Solutions/applications` resource.
     */
    createUiDefinition?: pulumi.Input<string>;
    /**
     * Specifies the managed application definition description.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the managed application definition display name.
     */
    displayName: pulumi.Input<string>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the managed application lock level. Valid values include `CanNotDelete`, `None`, `ReadOnly`. Changing this forces a new resource to be created.
     */
    lockLevel: pulumi.Input<string>;
    /**
     * Specifies the inline main template JSON which has resources to be provisioned.
     */
    mainTemplate?: pulumi.Input<string>;
    /**
     * Specifies the name of the Managed Application Definition. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Is the package enabled? Defaults to `true`.
     */
    packageEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the managed application definition package file Uri.
     */
    packageFileUri?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Managed Application Definition should exist. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     *
     * > **Note:** If either `createUiDefinition` or `mainTemplate` is set they both must be set.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
