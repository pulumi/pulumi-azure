// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AadDiagnosticSettingArgs, AadDiagnosticSettingState } from "./aadDiagnosticSetting";
export type AadDiagnosticSetting = import("./aadDiagnosticSetting").AadDiagnosticSetting;
export const AadDiagnosticSetting: typeof import("./aadDiagnosticSetting").AadDiagnosticSetting = null as any;
utilities.lazyLoad(exports, ["AadDiagnosticSetting"], () => require("./aadDiagnosticSetting"));

export { ActionGroupArgs, ActionGroupState } from "./actionGroup";
export type ActionGroup = import("./actionGroup").ActionGroup;
export const ActionGroup: typeof import("./actionGroup").ActionGroup = null as any;
utilities.lazyLoad(exports, ["ActionGroup"], () => require("./actionGroup"));

export { ActionRuleActionGroupArgs, ActionRuleActionGroupState } from "./actionRuleActionGroup";
export type ActionRuleActionGroup = import("./actionRuleActionGroup").ActionRuleActionGroup;
export const ActionRuleActionGroup: typeof import("./actionRuleActionGroup").ActionRuleActionGroup = null as any;
utilities.lazyLoad(exports, ["ActionRuleActionGroup"], () => require("./actionRuleActionGroup"));

export { ActionRuleSuppressionArgs, ActionRuleSuppressionState } from "./actionRuleSuppression";
export type ActionRuleSuppression = import("./actionRuleSuppression").ActionRuleSuppression;
export const ActionRuleSuppression: typeof import("./actionRuleSuppression").ActionRuleSuppression = null as any;
utilities.lazyLoad(exports, ["ActionRuleSuppression"], () => require("./actionRuleSuppression"));

export { ActivityLogAlertArgs, ActivityLogAlertState } from "./activityLogAlert";
export type ActivityLogAlert = import("./activityLogAlert").ActivityLogAlert;
export const ActivityLogAlert: typeof import("./activityLogAlert").ActivityLogAlert = null as any;
utilities.lazyLoad(exports, ["ActivityLogAlert"], () => require("./activityLogAlert"));

export { AlertProcessingRuleActionGroupArgs, AlertProcessingRuleActionGroupState } from "./alertProcessingRuleActionGroup";
export type AlertProcessingRuleActionGroup = import("./alertProcessingRuleActionGroup").AlertProcessingRuleActionGroup;
export const AlertProcessingRuleActionGroup: typeof import("./alertProcessingRuleActionGroup").AlertProcessingRuleActionGroup = null as any;
utilities.lazyLoad(exports, ["AlertProcessingRuleActionGroup"], () => require("./alertProcessingRuleActionGroup"));

export { AlertProcessingRuleSuppressionArgs, AlertProcessingRuleSuppressionState } from "./alertProcessingRuleSuppression";
export type AlertProcessingRuleSuppression = import("./alertProcessingRuleSuppression").AlertProcessingRuleSuppression;
export const AlertProcessingRuleSuppression: typeof import("./alertProcessingRuleSuppression").AlertProcessingRuleSuppression = null as any;
utilities.lazyLoad(exports, ["AlertProcessingRuleSuppression"], () => require("./alertProcessingRuleSuppression"));

export { AlertPrometheusRuleGroupArgs, AlertPrometheusRuleGroupState } from "./alertPrometheusRuleGroup";
export type AlertPrometheusRuleGroup = import("./alertPrometheusRuleGroup").AlertPrometheusRuleGroup;
export const AlertPrometheusRuleGroup: typeof import("./alertPrometheusRuleGroup").AlertPrometheusRuleGroup = null as any;
utilities.lazyLoad(exports, ["AlertPrometheusRuleGroup"], () => require("./alertPrometheusRuleGroup"));

export { AutoscaleSettingArgs, AutoscaleSettingState } from "./autoscaleSetting";
export type AutoscaleSetting = import("./autoscaleSetting").AutoscaleSetting;
export const AutoscaleSetting: typeof import("./autoscaleSetting").AutoscaleSetting = null as any;
utilities.lazyLoad(exports, ["AutoscaleSetting"], () => require("./autoscaleSetting"));

export { DataCollectionEndpointArgs, DataCollectionEndpointState } from "./dataCollectionEndpoint";
export type DataCollectionEndpoint = import("./dataCollectionEndpoint").DataCollectionEndpoint;
export const DataCollectionEndpoint: typeof import("./dataCollectionEndpoint").DataCollectionEndpoint = null as any;
utilities.lazyLoad(exports, ["DataCollectionEndpoint"], () => require("./dataCollectionEndpoint"));

export { DataCollectionRuleArgs, DataCollectionRuleState } from "./dataCollectionRule";
export type DataCollectionRule = import("./dataCollectionRule").DataCollectionRule;
export const DataCollectionRule: typeof import("./dataCollectionRule").DataCollectionRule = null as any;
utilities.lazyLoad(exports, ["DataCollectionRule"], () => require("./dataCollectionRule"));

export { DataCollectionRuleAssociationArgs, DataCollectionRuleAssociationState } from "./dataCollectionRuleAssociation";
export type DataCollectionRuleAssociation = import("./dataCollectionRuleAssociation").DataCollectionRuleAssociation;
export const DataCollectionRuleAssociation: typeof import("./dataCollectionRuleAssociation").DataCollectionRuleAssociation = null as any;
utilities.lazyLoad(exports, ["DataCollectionRuleAssociation"], () => require("./dataCollectionRuleAssociation"));

export { DiagnosticSettingArgs, DiagnosticSettingState } from "./diagnosticSetting";
export type DiagnosticSetting = import("./diagnosticSetting").DiagnosticSetting;
export const DiagnosticSetting: typeof import("./diagnosticSetting").DiagnosticSetting = null as any;
utilities.lazyLoad(exports, ["DiagnosticSetting"], () => require("./diagnosticSetting"));

export { GetActionGroupArgs, GetActionGroupResult, GetActionGroupOutputArgs } from "./getActionGroup";
export const getActionGroup: typeof import("./getActionGroup").getActionGroup = null as any;
export const getActionGroupOutput: typeof import("./getActionGroup").getActionGroupOutput = null as any;
utilities.lazyLoad(exports, ["getActionGroup","getActionGroupOutput"], () => require("./getActionGroup"));

export { GetDataCollectionEndpointArgs, GetDataCollectionEndpointResult, GetDataCollectionEndpointOutputArgs } from "./getDataCollectionEndpoint";
export const getDataCollectionEndpoint: typeof import("./getDataCollectionEndpoint").getDataCollectionEndpoint = null as any;
export const getDataCollectionEndpointOutput: typeof import("./getDataCollectionEndpoint").getDataCollectionEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getDataCollectionEndpoint","getDataCollectionEndpointOutput"], () => require("./getDataCollectionEndpoint"));

export { GetDataCollectionRuleArgs, GetDataCollectionRuleResult, GetDataCollectionRuleOutputArgs } from "./getDataCollectionRule";
export const getDataCollectionRule: typeof import("./getDataCollectionRule").getDataCollectionRule = null as any;
export const getDataCollectionRuleOutput: typeof import("./getDataCollectionRule").getDataCollectionRuleOutput = null as any;
utilities.lazyLoad(exports, ["getDataCollectionRule","getDataCollectionRuleOutput"], () => require("./getDataCollectionRule"));

export { GetDiagnosticCategoriesArgs, GetDiagnosticCategoriesResult, GetDiagnosticCategoriesOutputArgs } from "./getDiagnosticCategories";
export const getDiagnosticCategories: typeof import("./getDiagnosticCategories").getDiagnosticCategories = null as any;
export const getDiagnosticCategoriesOutput: typeof import("./getDiagnosticCategories").getDiagnosticCategoriesOutput = null as any;
utilities.lazyLoad(exports, ["getDiagnosticCategories","getDiagnosticCategoriesOutput"], () => require("./getDiagnosticCategories"));

export { GetLogProfileArgs, GetLogProfileResult, GetLogProfileOutputArgs } from "./getLogProfile";
export const getLogProfile: typeof import("./getLogProfile").getLogProfile = null as any;
export const getLogProfileOutput: typeof import("./getLogProfile").getLogProfileOutput = null as any;
utilities.lazyLoad(exports, ["getLogProfile","getLogProfileOutput"], () => require("./getLogProfile"));

export { GetScheduledQueryRulesAlertArgs, GetScheduledQueryRulesAlertResult, GetScheduledQueryRulesAlertOutputArgs } from "./getScheduledQueryRulesAlert";
export const getScheduledQueryRulesAlert: typeof import("./getScheduledQueryRulesAlert").getScheduledQueryRulesAlert = null as any;
export const getScheduledQueryRulesAlertOutput: typeof import("./getScheduledQueryRulesAlert").getScheduledQueryRulesAlertOutput = null as any;
utilities.lazyLoad(exports, ["getScheduledQueryRulesAlert","getScheduledQueryRulesAlertOutput"], () => require("./getScheduledQueryRulesAlert"));

export { GetScheduledQueryRulesLogArgs, GetScheduledQueryRulesLogResult, GetScheduledQueryRulesLogOutputArgs } from "./getScheduledQueryRulesLog";
export const getScheduledQueryRulesLog: typeof import("./getScheduledQueryRulesLog").getScheduledQueryRulesLog = null as any;
export const getScheduledQueryRulesLogOutput: typeof import("./getScheduledQueryRulesLog").getScheduledQueryRulesLogOutput = null as any;
utilities.lazyLoad(exports, ["getScheduledQueryRulesLog","getScheduledQueryRulesLogOutput"], () => require("./getScheduledQueryRulesLog"));

export { GetWorkspaceArgs, GetWorkspaceResult, GetWorkspaceOutputArgs } from "./getWorkspace";
export const getWorkspace: typeof import("./getWorkspace").getWorkspace = null as any;
export const getWorkspaceOutput: typeof import("./getWorkspace").getWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspace","getWorkspaceOutput"], () => require("./getWorkspace"));

export { LogProfileArgs, LogProfileState } from "./logProfile";
export type LogProfile = import("./logProfile").LogProfile;
export const LogProfile: typeof import("./logProfile").LogProfile = null as any;
utilities.lazyLoad(exports, ["LogProfile"], () => require("./logProfile"));

export { LogzMonitorArgs, LogzMonitorState } from "./logzMonitor";
export type LogzMonitor = import("./logzMonitor").LogzMonitor;
export const LogzMonitor: typeof import("./logzMonitor").LogzMonitor = null as any;
utilities.lazyLoad(exports, ["LogzMonitor"], () => require("./logzMonitor"));

export { LogzSubAccountArgs, LogzSubAccountState } from "./logzSubAccount";
export type LogzSubAccount = import("./logzSubAccount").LogzSubAccount;
export const LogzSubAccount: typeof import("./logzSubAccount").LogzSubAccount = null as any;
utilities.lazyLoad(exports, ["LogzSubAccount"], () => require("./logzSubAccount"));

export { LogzSubAccountTagRuleArgs, LogzSubAccountTagRuleState } from "./logzSubAccountTagRule";
export type LogzSubAccountTagRule = import("./logzSubAccountTagRule").LogzSubAccountTagRule;
export const LogzSubAccountTagRule: typeof import("./logzSubAccountTagRule").LogzSubAccountTagRule = null as any;
utilities.lazyLoad(exports, ["LogzSubAccountTagRule"], () => require("./logzSubAccountTagRule"));

export { LogzTagRuleArgs, LogzTagRuleState } from "./logzTagRule";
export type LogzTagRule = import("./logzTagRule").LogzTagRule;
export const LogzTagRule: typeof import("./logzTagRule").LogzTagRule = null as any;
utilities.lazyLoad(exports, ["LogzTagRule"], () => require("./logzTagRule"));

export { MetricAlertArgs, MetricAlertState } from "./metricAlert";
export type MetricAlert = import("./metricAlert").MetricAlert;
export const MetricAlert: typeof import("./metricAlert").MetricAlert = null as any;
utilities.lazyLoad(exports, ["MetricAlert"], () => require("./metricAlert"));

export { PrivateLinkScopeArgs, PrivateLinkScopeState } from "./privateLinkScope";
export type PrivateLinkScope = import("./privateLinkScope").PrivateLinkScope;
export const PrivateLinkScope: typeof import("./privateLinkScope").PrivateLinkScope = null as any;
utilities.lazyLoad(exports, ["PrivateLinkScope"], () => require("./privateLinkScope"));

export { PrivateLinkScopedServiceArgs, PrivateLinkScopedServiceState } from "./privateLinkScopedService";
export type PrivateLinkScopedService = import("./privateLinkScopedService").PrivateLinkScopedService;
export const PrivateLinkScopedService: typeof import("./privateLinkScopedService").PrivateLinkScopedService = null as any;
utilities.lazyLoad(exports, ["PrivateLinkScopedService"], () => require("./privateLinkScopedService"));

export { ScheduledQueryRulesAlertArgs, ScheduledQueryRulesAlertState } from "./scheduledQueryRulesAlert";
export type ScheduledQueryRulesAlert = import("./scheduledQueryRulesAlert").ScheduledQueryRulesAlert;
export const ScheduledQueryRulesAlert: typeof import("./scheduledQueryRulesAlert").ScheduledQueryRulesAlert = null as any;
utilities.lazyLoad(exports, ["ScheduledQueryRulesAlert"], () => require("./scheduledQueryRulesAlert"));

export { ScheduledQueryRulesAlertV2Args, ScheduledQueryRulesAlertV2State } from "./scheduledQueryRulesAlertV2";
export type ScheduledQueryRulesAlertV2 = import("./scheduledQueryRulesAlertV2").ScheduledQueryRulesAlertV2;
export const ScheduledQueryRulesAlertV2: typeof import("./scheduledQueryRulesAlertV2").ScheduledQueryRulesAlertV2 = null as any;
utilities.lazyLoad(exports, ["ScheduledQueryRulesAlertV2"], () => require("./scheduledQueryRulesAlertV2"));

export { ScheduledQueryRulesLogArgs, ScheduledQueryRulesLogState } from "./scheduledQueryRulesLog";
export type ScheduledQueryRulesLog = import("./scheduledQueryRulesLog").ScheduledQueryRulesLog;
export const ScheduledQueryRulesLog: typeof import("./scheduledQueryRulesLog").ScheduledQueryRulesLog = null as any;
utilities.lazyLoad(exports, ["ScheduledQueryRulesLog"], () => require("./scheduledQueryRulesLog"));

export { SmartDetectorAlertRuleArgs, SmartDetectorAlertRuleState } from "./smartDetectorAlertRule";
export type SmartDetectorAlertRule = import("./smartDetectorAlertRule").SmartDetectorAlertRule;
export const SmartDetectorAlertRule: typeof import("./smartDetectorAlertRule").SmartDetectorAlertRule = null as any;
utilities.lazyLoad(exports, ["SmartDetectorAlertRule"], () => require("./smartDetectorAlertRule"));

export { WorkspaceArgs, WorkspaceState } from "./workspace";
export type Workspace = import("./workspace").Workspace;
export const Workspace: typeof import("./workspace").Workspace = null as any;
utilities.lazyLoad(exports, ["Workspace"], () => require("./workspace"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:monitoring/aadDiagnosticSetting:AadDiagnosticSetting":
                return new AadDiagnosticSetting(name, <any>undefined, { urn })
            case "azure:monitoring/actionGroup:ActionGroup":
                return new ActionGroup(name, <any>undefined, { urn })
            case "azure:monitoring/actionRuleActionGroup:ActionRuleActionGroup":
                return new ActionRuleActionGroup(name, <any>undefined, { urn })
            case "azure:monitoring/actionRuleSuppression:ActionRuleSuppression":
                return new ActionRuleSuppression(name, <any>undefined, { urn })
            case "azure:monitoring/activityLogAlert:ActivityLogAlert":
                return new ActivityLogAlert(name, <any>undefined, { urn })
            case "azure:monitoring/alertProcessingRuleActionGroup:AlertProcessingRuleActionGroup":
                return new AlertProcessingRuleActionGroup(name, <any>undefined, { urn })
            case "azure:monitoring/alertProcessingRuleSuppression:AlertProcessingRuleSuppression":
                return new AlertProcessingRuleSuppression(name, <any>undefined, { urn })
            case "azure:monitoring/alertPrometheusRuleGroup:AlertPrometheusRuleGroup":
                return new AlertPrometheusRuleGroup(name, <any>undefined, { urn })
            case "azure:monitoring/autoscaleSetting:AutoscaleSetting":
                return new AutoscaleSetting(name, <any>undefined, { urn })
            case "azure:monitoring/dataCollectionEndpoint:DataCollectionEndpoint":
                return new DataCollectionEndpoint(name, <any>undefined, { urn })
            case "azure:monitoring/dataCollectionRule:DataCollectionRule":
                return new DataCollectionRule(name, <any>undefined, { urn })
            case "azure:monitoring/dataCollectionRuleAssociation:DataCollectionRuleAssociation":
                return new DataCollectionRuleAssociation(name, <any>undefined, { urn })
            case "azure:monitoring/diagnosticSetting:DiagnosticSetting":
                return new DiagnosticSetting(name, <any>undefined, { urn })
            case "azure:monitoring/logProfile:LogProfile":
                return new LogProfile(name, <any>undefined, { urn })
            case "azure:monitoring/logzMonitor:LogzMonitor":
                return new LogzMonitor(name, <any>undefined, { urn })
            case "azure:monitoring/logzSubAccount:LogzSubAccount":
                return new LogzSubAccount(name, <any>undefined, { urn })
            case "azure:monitoring/logzSubAccountTagRule:LogzSubAccountTagRule":
                return new LogzSubAccountTagRule(name, <any>undefined, { urn })
            case "azure:monitoring/logzTagRule:LogzTagRule":
                return new LogzTagRule(name, <any>undefined, { urn })
            case "azure:monitoring/metricAlert:MetricAlert":
                return new MetricAlert(name, <any>undefined, { urn })
            case "azure:monitoring/privateLinkScope:PrivateLinkScope":
                return new PrivateLinkScope(name, <any>undefined, { urn })
            case "azure:monitoring/privateLinkScopedService:PrivateLinkScopedService":
                return new PrivateLinkScopedService(name, <any>undefined, { urn })
            case "azure:monitoring/scheduledQueryRulesAlert:ScheduledQueryRulesAlert":
                return new ScheduledQueryRulesAlert(name, <any>undefined, { urn })
            case "azure:monitoring/scheduledQueryRulesAlertV2:ScheduledQueryRulesAlertV2":
                return new ScheduledQueryRulesAlertV2(name, <any>undefined, { urn })
            case "azure:monitoring/scheduledQueryRulesLog:ScheduledQueryRulesLog":
                return new ScheduledQueryRulesLog(name, <any>undefined, { urn })
            case "azure:monitoring/smartDetectorAlertRule:SmartDetectorAlertRule":
                return new SmartDetectorAlertRule(name, <any>undefined, { urn })
            case "azure:monitoring/workspace:Workspace":
                return new Workspace(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "monitoring/aadDiagnosticSetting", _module)
pulumi.runtime.registerResourceModule("azure", "monitoring/actionGroup", _module)
pulumi.runtime.registerResourceModule("azure", "monitoring/actionRuleActionGroup", _module)
pulumi.runtime.registerResourceModule("azure", "monitoring/actionRuleSuppression", _module)
pulumi.runtime.registerResourceModule("azure", "monitoring/activityLogAlert", _module)
pulumi.runtime.registerResourceModule("azure", "monitoring/alertProcessingRuleActionGroup", _module)
pulumi.runtime.registerResourceModule("azure", "monitoring/alertProcessingRuleSuppression", _module)
pulumi.runtime.registerResourceModule("azure", "monitoring/alertPrometheusRuleGroup", _module)
pulumi.runtime.registerResourceModule("azure", "monitoring/autoscaleSetting", _module)
pulumi.runtime.registerResourceModule("azure", "monitoring/dataCollectionEndpoint", _module)
pulumi.runtime.registerResourceModule("azure", "monitoring/dataCollectionRule", _module)
pulumi.runtime.registerResourceModule("azure", "monitoring/dataCollectionRuleAssociation", _module)
pulumi.runtime.registerResourceModule("azure", "monitoring/diagnosticSetting", _module)
pulumi.runtime.registerResourceModule("azure", "monitoring/logProfile", _module)
pulumi.runtime.registerResourceModule("azure", "monitoring/logzMonitor", _module)
pulumi.runtime.registerResourceModule("azure", "monitoring/logzSubAccount", _module)
pulumi.runtime.registerResourceModule("azure", "monitoring/logzSubAccountTagRule", _module)
pulumi.runtime.registerResourceModule("azure", "monitoring/logzTagRule", _module)
pulumi.runtime.registerResourceModule("azure", "monitoring/metricAlert", _module)
pulumi.runtime.registerResourceModule("azure", "monitoring/privateLinkScope", _module)
pulumi.runtime.registerResourceModule("azure", "monitoring/privateLinkScopedService", _module)
pulumi.runtime.registerResourceModule("azure", "monitoring/scheduledQueryRulesAlert", _module)
pulumi.runtime.registerResourceModule("azure", "monitoring/scheduledQueryRulesAlertV2", _module)
pulumi.runtime.registerResourceModule("azure", "monitoring/scheduledQueryRulesLog", _module)
pulumi.runtime.registerResourceModule("azure", "monitoring/smartDetectorAlertRule", _module)
pulumi.runtime.registerResourceModule("azure", "monitoring/workspace", _module)
