// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class ActivityLogAlert extends pulumi.CustomResource {
    /**
     * Get an existing ActivityLogAlert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ActivityLogAlertState): ActivityLogAlert {
        return new ActivityLogAlert(name, <any>state, { id });
    }

    public readonly actions: pulumi.Output<{ actionGroupId: string, webhookProperties?: {[key: string]: string} }[] | undefined>;
    public readonly criteria: pulumi.Output<{ caller?: string, category: string, level?: string, operationName: string, resourceId?: string, status?: string, subStatus?: string }>;
    public readonly description: pulumi.Output<string | undefined>;
    public readonly enabled: pulumi.Output<boolean | undefined>;
    public readonly name: pulumi.Output<string>;
    public readonly resourceGroupName: pulumi.Output<string>;
    public readonly scopes: pulumi.Output<string[]>;
    public readonly tags: pulumi.Output<{[key: string]: any}>;

    /**
     * Create a ActivityLogAlert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ActivityLogAlertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ActivityLogAlertArgs | ActivityLogAlertState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: ActivityLogAlertState = argsOrState as ActivityLogAlertState | undefined;
            inputs["actions"] = state ? state.actions : undefined;
            inputs["criteria"] = state ? state.criteria : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["scopes"] = state ? state.scopes : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ActivityLogAlertArgs | undefined;
            if (!args || args.criteria === undefined) {
                throw new Error("Missing required property 'criteria'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.scopes === undefined) {
                throw new Error("Missing required property 'scopes'");
            }
            inputs["actions"] = args ? args.actions : undefined;
            inputs["criteria"] = args ? args.criteria : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["scopes"] = args ? args.scopes : undefined;
            inputs["tags"] = args ? args.tags : undefined;
        }
        super("azure:monitoring/activityLogAlert:ActivityLogAlert", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ActivityLogAlert resources.
 */
export interface ActivityLogAlertState {
    readonly actions?: pulumi.Input<pulumi.Input<{ actionGroupId: pulumi.Input<string>, webhookProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}> }>[]>;
    readonly criteria?: pulumi.Input<{ caller?: pulumi.Input<string>, category: pulumi.Input<string>, level?: pulumi.Input<string>, operationName: pulumi.Input<string>, resourceId?: pulumi.Input<string>, status?: pulumi.Input<string>, subStatus?: pulumi.Input<string> }>;
    readonly description?: pulumi.Input<string>;
    readonly enabled?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly resourceGroupName?: pulumi.Input<string>;
    readonly scopes?: pulumi.Input<pulumi.Input<string>[]>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
}

/**
 * The set of arguments for constructing a ActivityLogAlert resource.
 */
export interface ActivityLogAlertArgs {
    readonly actions?: pulumi.Input<pulumi.Input<{ actionGroupId: pulumi.Input<string>, webhookProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}> }>[]>;
    readonly criteria: pulumi.Input<{ caller?: pulumi.Input<string>, category: pulumi.Input<string>, level?: pulumi.Input<string>, operationName: pulumi.Input<string>, resourceId?: pulumi.Input<string>, status?: pulumi.Input<string>, subStatus?: pulumi.Input<string> }>;
    readonly description?: pulumi.Input<string>;
    readonly enabled?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly resourceGroupName: pulumi.Input<string>;
    readonly scopes: pulumi.Input<pulumi.Input<string>[]>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
}
