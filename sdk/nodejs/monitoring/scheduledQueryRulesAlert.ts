// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages an AlertingAction Scheduled Query Rules resource within Azure Monitor.
 *
 * ## Import
 *
 * Scheduled Query Rule Alerts can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:monitoring/scheduledQueryRulesAlert:ScheduledQueryRulesAlert example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Insights/scheduledQueryRules/myrulename
 * ```
 */
export class ScheduledQueryRulesAlert extends pulumi.CustomResource {
    /**
     * Get an existing ScheduledQueryRulesAlert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScheduledQueryRulesAlertState, opts?: pulumi.CustomResourceOptions): ScheduledQueryRulesAlert {
        return new ScheduledQueryRulesAlert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:monitoring/scheduledQueryRulesAlert:ScheduledQueryRulesAlert';

    /**
     * Returns true if the given object is an instance of ScheduledQueryRulesAlert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScheduledQueryRulesAlert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScheduledQueryRulesAlert.__pulumiType;
    }

    /**
     * An `action` block as defined below.
     */
    public readonly action!: pulumi.Output<outputs.monitoring.ScheduledQueryRulesAlertAction>;
    /**
     * List of Resource IDs referred into query.
     */
    public readonly authorizedResourceIds!: pulumi.Output<string[] | undefined>;
    /**
     * Should the alerts in this Metric Alert be auto resolved? Defaults to `false`.
     * > **NOTE** `autoMitigationEnabled` and `throttling` are mutually exclusive and cannot both be set.
     */
    public readonly autoMitigationEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The resource URI over which log search query is to be run.
     */
    public readonly dataSourceId!: pulumi.Output<string>;
    /**
     * The description of the scheduled query rule.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Whether this scheduled query rule is enabled. Default is `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Frequency (in minutes) at which rule condition should be evaluated. Values must be between 5 and 1440 (inclusive).
     */
    public readonly frequency!: pulumi.Output<number>;
    /**
     * Specifies the Azure Region where the resource should exist. Changing this forces a new resource to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name of the scheduled query rule. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Log search query.
     */
    public readonly query!: pulumi.Output<string>;
    /**
     * The type of query results. Possible values are `ResultCount` and `Number`. Default is `ResultCount`. If set to `ResultCount`, `query` must include an `AggregatedValue` column of a numeric type, for example, `Heartbeat | summarize AggregatedValue = count() by bin(TimeGenerated, 5m)`.
     */
    public readonly queryType!: pulumi.Output<string | undefined>;
    /**
     * The name of the resource group in which to create the scheduled query rule instance. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * Severity of the alert. Possible values include: 0, 1, 2, 3, or 4.
     */
    public readonly severity!: pulumi.Output<number | undefined>;
    /**
     * A mapping of tags to assign to the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Time (in minutes) for which Alerts should be throttled or suppressed. Values must be between 0 and 10000 (inclusive).
     */
    public readonly throttling!: pulumi.Output<number | undefined>;
    /**
     * Time window for which data needs to be fetched for query (must be greater than or equal to `frequency`). Values must be between 5 and 2880 (inclusive).
     */
    public readonly timeWindow!: pulumi.Output<number>;
    /**
     * A `trigger` block as defined below.
     */
    public readonly trigger!: pulumi.Output<outputs.monitoring.ScheduledQueryRulesAlertTrigger>;

    /**
     * Create a ScheduledQueryRulesAlert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScheduledQueryRulesAlertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScheduledQueryRulesAlertArgs | ScheduledQueryRulesAlertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScheduledQueryRulesAlertState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["authorizedResourceIds"] = state ? state.authorizedResourceIds : undefined;
            resourceInputs["autoMitigationEnabled"] = state ? state.autoMitigationEnabled : undefined;
            resourceInputs["dataSourceId"] = state ? state.dataSourceId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["frequency"] = state ? state.frequency : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["query"] = state ? state.query : undefined;
            resourceInputs["queryType"] = state ? state.queryType : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["throttling"] = state ? state.throttling : undefined;
            resourceInputs["timeWindow"] = state ? state.timeWindow : undefined;
            resourceInputs["trigger"] = state ? state.trigger : undefined;
        } else {
            const args = argsOrState as ScheduledQueryRulesAlertArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.dataSourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataSourceId'");
            }
            if ((!args || args.frequency === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frequency'");
            }
            if ((!args || args.query === undefined) && !opts.urn) {
                throw new Error("Missing required property 'query'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.timeWindow === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeWindow'");
            }
            if ((!args || args.trigger === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trigger'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["authorizedResourceIds"] = args ? args.authorizedResourceIds : undefined;
            resourceInputs["autoMitigationEnabled"] = args ? args.autoMitigationEnabled : undefined;
            resourceInputs["dataSourceId"] = args ? args.dataSourceId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["frequency"] = args ? args.frequency : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["query"] = args ? args.query : undefined;
            resourceInputs["queryType"] = args ? args.queryType : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["throttling"] = args ? args.throttling : undefined;
            resourceInputs["timeWindow"] = args ? args.timeWindow : undefined;
            resourceInputs["trigger"] = args ? args.trigger : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScheduledQueryRulesAlert.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ScheduledQueryRulesAlert resources.
 */
export interface ScheduledQueryRulesAlertState {
    /**
     * An `action` block as defined below.
     */
    action?: pulumi.Input<inputs.monitoring.ScheduledQueryRulesAlertAction>;
    /**
     * List of Resource IDs referred into query.
     */
    authorizedResourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Should the alerts in this Metric Alert be auto resolved? Defaults to `false`.
     * > **NOTE** `autoMitigationEnabled` and `throttling` are mutually exclusive and cannot both be set.
     */
    autoMitigationEnabled?: pulumi.Input<boolean>;
    /**
     * The resource URI over which log search query is to be run.
     */
    dataSourceId?: pulumi.Input<string>;
    /**
     * The description of the scheduled query rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether this scheduled query rule is enabled. Default is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Frequency (in minutes) at which rule condition should be evaluated. Values must be between 5 and 1440 (inclusive).
     */
    frequency?: pulumi.Input<number>;
    /**
     * Specifies the Azure Region where the resource should exist. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the scheduled query rule. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Log search query.
     */
    query?: pulumi.Input<string>;
    /**
     * The type of query results. Possible values are `ResultCount` and `Number`. Default is `ResultCount`. If set to `ResultCount`, `query` must include an `AggregatedValue` column of a numeric type, for example, `Heartbeat | summarize AggregatedValue = count() by bin(TimeGenerated, 5m)`.
     */
    queryType?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the scheduled query rule instance. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * Severity of the alert. Possible values include: 0, 1, 2, 3, or 4.
     */
    severity?: pulumi.Input<number>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Time (in minutes) for which Alerts should be throttled or suppressed. Values must be between 0 and 10000 (inclusive).
     */
    throttling?: pulumi.Input<number>;
    /**
     * Time window for which data needs to be fetched for query (must be greater than or equal to `frequency`). Values must be between 5 and 2880 (inclusive).
     */
    timeWindow?: pulumi.Input<number>;
    /**
     * A `trigger` block as defined below.
     */
    trigger?: pulumi.Input<inputs.monitoring.ScheduledQueryRulesAlertTrigger>;
}

/**
 * The set of arguments for constructing a ScheduledQueryRulesAlert resource.
 */
export interface ScheduledQueryRulesAlertArgs {
    /**
     * An `action` block as defined below.
     */
    action: pulumi.Input<inputs.monitoring.ScheduledQueryRulesAlertAction>;
    /**
     * List of Resource IDs referred into query.
     */
    authorizedResourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Should the alerts in this Metric Alert be auto resolved? Defaults to `false`.
     * > **NOTE** `autoMitigationEnabled` and `throttling` are mutually exclusive and cannot both be set.
     */
    autoMitigationEnabled?: pulumi.Input<boolean>;
    /**
     * The resource URI over which log search query is to be run.
     */
    dataSourceId: pulumi.Input<string>;
    /**
     * The description of the scheduled query rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether this scheduled query rule is enabled. Default is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Frequency (in minutes) at which rule condition should be evaluated. Values must be between 5 and 1440 (inclusive).
     */
    frequency: pulumi.Input<number>;
    /**
     * Specifies the Azure Region where the resource should exist. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the scheduled query rule. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Log search query.
     */
    query: pulumi.Input<string>;
    /**
     * The type of query results. Possible values are `ResultCount` and `Number`. Default is `ResultCount`. If set to `ResultCount`, `query` must include an `AggregatedValue` column of a numeric type, for example, `Heartbeat | summarize AggregatedValue = count() by bin(TimeGenerated, 5m)`.
     */
    queryType?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the scheduled query rule instance. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Severity of the alert. Possible values include: 0, 1, 2, 3, or 4.
     */
    severity?: pulumi.Input<number>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Time (in minutes) for which Alerts should be throttled or suppressed. Values must be between 0 and 10000 (inclusive).
     */
    throttling?: pulumi.Input<number>;
    /**
     * Time window for which data needs to be fetched for query (must be greater than or equal to `frequency`). Values must be between 5 and 2880 (inclusive).
     */
    timeWindow: pulumi.Input<number>;
    /**
     * A `trigger` block as defined below.
     */
    trigger: pulumi.Input<inputs.monitoring.ScheduledQueryRulesAlertTrigger>;
}
