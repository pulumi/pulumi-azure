// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a logz Sub Account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleLogzMonitor = new azure.monitoring.LogzMonitor("exampleLogzMonitor", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     plan: {
 *         billingCycle: "MONTHLY",
 *         effectiveDate: "2022-06-06T00:00:00Z",
 *         usageType: "COMMITTED",
 *     },
 *     user: {
 *         email: "user@example.com",
 *         firstName: "Example",
 *         lastName: "User",
 *         phoneNumber: "+12313803556",
 *     },
 * });
 * const exampleLogzSubAccount = new azure.monitoring.LogzSubAccount("exampleLogzSubAccount", {
 *     logzMonitorId: exampleLogzMonitor.id,
 *     user: {
 *         email: exampleLogzMonitor.user.apply(user => user.email),
 *         firstName: exampleLogzMonitor.user.apply(user => user.firstName),
 *         lastName: exampleLogzMonitor.user.apply(user => user.lastName),
 *         phoneNumber: exampleLogzMonitor.user.apply(user => user.phoneNumber),
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * logz SubAccounts can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:monitoring/logzSubAccount:LogzSubAccount example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Logz/monitors/monitor1/accounts/subAccount1
 * ```
 */
export class LogzSubAccount extends pulumi.CustomResource {
    /**
     * Get an existing LogzSubAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogzSubAccountState, opts?: pulumi.CustomResourceOptions): LogzSubAccount {
        return new LogzSubAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:monitoring/logzSubAccount:LogzSubAccount';

    /**
     * Returns true if the given object is an instance of LogzSubAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogzSubAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogzSubAccount.__pulumiType;
    }

    /**
     * Whether the resource monitoring is enabled? Defaults to `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the Logz Monitor. Changing this forces a new logz Sub Account to be created.
     */
    public readonly logzMonitorId!: pulumi.Output<string>;
    /**
     * The name which should be used for this logz Sub Account. Possible values must be between 1 and 32 characters in length and may contain only letters, numbers, hyphens and underscores. Changing this forces a new logz Sub Account to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A mapping of tags which should be assigned to the logz Sub Account.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A `user` block as defined below.
     */
    public readonly user!: pulumi.Output<outputs.monitoring.LogzSubAccountUser>;

    /**
     * Create a LogzSubAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogzSubAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogzSubAccountArgs | LogzSubAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogzSubAccountState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["logzMonitorId"] = state ? state.logzMonitorId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        } else {
            const args = argsOrState as LogzSubAccountArgs | undefined;
            if ((!args || args.logzMonitorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logzMonitorId'");
            }
            if ((!args || args.user === undefined) && !opts.urn) {
                throw new Error("Missing required property 'user'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["logzMonitorId"] = args ? args.logzMonitorId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogzSubAccount.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogzSubAccount resources.
 */
export interface LogzSubAccountState {
    /**
     * Whether the resource monitoring is enabled? Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The ID of the Logz Monitor. Changing this forces a new logz Sub Account to be created.
     */
    logzMonitorId?: pulumi.Input<string>;
    /**
     * The name which should be used for this logz Sub Account. Possible values must be between 1 and 32 characters in length and may contain only letters, numbers, hyphens and underscores. Changing this forces a new logz Sub Account to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the logz Sub Account.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A `user` block as defined below.
     */
    user?: pulumi.Input<inputs.monitoring.LogzSubAccountUser>;
}

/**
 * The set of arguments for constructing a LogzSubAccount resource.
 */
export interface LogzSubAccountArgs {
    /**
     * Whether the resource monitoring is enabled? Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The ID of the Logz Monitor. Changing this forces a new logz Sub Account to be created.
     */
    logzMonitorId: pulumi.Input<string>;
    /**
     * The name which should be used for this logz Sub Account. Possible values must be between 1 and 32 characters in length and may contain only letters, numbers, hyphens and underscores. Changing this forces a new logz Sub Account to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the logz Sub Account.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A `user` block as defined below.
     */
    user: pulumi.Input<inputs.monitoring.LogzSubAccountUser>;
}
