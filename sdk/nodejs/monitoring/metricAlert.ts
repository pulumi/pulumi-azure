// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Metric Alert within Azure Monitor.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const toMonitor = new azure.storage.Account("to_monitor", {
 *     name: "examplestorageaccount",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const main = new azure.monitoring.ActionGroup("main", {
 *     name: "example-actiongroup",
 *     resourceGroupName: example.name,
 *     shortName: "exampleact",
 *     webhookReceivers: [{
 *         name: "callmyapi",
 *         serviceUri: "http://example.com/alert",
 *     }],
 * });
 * const exampleMetricAlert = new azure.monitoring.MetricAlert("example", {
 *     name: "example-metricalert",
 *     resourceGroupName: example.name,
 *     scopes: [toMonitor.id],
 *     description: "Action will be triggered when Transactions count is greater than 50.",
 *     criterias: [{
 *         metricNamespace: "Microsoft.Storage/storageAccounts",
 *         metricName: "Transactions",
 *         aggregation: "Total",
 *         operator: "GreaterThan",
 *         threshold: 50,
 *         dimensions: [{
 *             name: "ApiName",
 *             operator: "Include",
 *             values: ["*"],
 *         }],
 *     }],
 *     actions: [{
 *         actionGroupId: main.id,
 *     }],
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Insights` - 2018-03-01
 *
 * ## Import
 *
 * Metric Alerts can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:monitoring/metricAlert:MetricAlert main /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-resources/providers/Microsoft.Insights/metricAlerts/example-metricalert
 * ```
 */
export class MetricAlert extends pulumi.CustomResource {
    /**
     * Get an existing MetricAlert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetricAlertState, opts?: pulumi.CustomResourceOptions): MetricAlert {
        return new MetricAlert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:monitoring/metricAlert:MetricAlert';

    /**
     * Returns true if the given object is an instance of MetricAlert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetricAlert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetricAlert.__pulumiType;
    }

    /**
     * One or more `action` blocks as defined below.
     */
    declare public readonly actions: pulumi.Output<outputs.monitoring.MetricAlertAction[] | undefined>;
    /**
     * A `applicationInsightsWebTestLocationAvailabilityCriteria` block as defined below.
     *
     * > **Note:** One of either `criteria`, `dynamicCriteria` or `applicationInsightsWebTestLocationAvailabilityCriteria` must be specified.
     */
    declare public readonly applicationInsightsWebTestLocationAvailabilityCriteria: pulumi.Output<outputs.monitoring.MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria | undefined>;
    /**
     * Should the alerts in this Metric Alert be auto resolved? Defaults to `true`.
     */
    declare public readonly autoMitigate: pulumi.Output<boolean | undefined>;
    /**
     * One or more (static) `criteria` blocks as defined below.
     *
     * > **Note:** One of either `criteria`, `dynamicCriteria` or `applicationInsightsWebTestLocationAvailabilityCriteria` must be specified.
     */
    declare public readonly criterias: pulumi.Output<outputs.monitoring.MetricAlertCriteria[] | undefined>;
    /**
     * The description of this Metric Alert.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * A `dynamicCriteria` block as defined below.
     *
     * > **Note:** One of either `criteria`, `dynamicCriteria` or `applicationInsightsWebTestLocationAvailabilityCriteria` must be specified.
     */
    declare public readonly dynamicCriteria: pulumi.Output<outputs.monitoring.MetricAlertDynamicCriteria | undefined>;
    /**
     * Should this Metric Alert be enabled? Defaults to `true`.
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * The evaluation frequency of this Metric Alert, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M` and `PT1H`. Defaults to `PT1M`.
     */
    declare public readonly frequency: pulumi.Output<string | undefined>;
    /**
     * The name of the Metric Alert. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The name of the resource group in which to create the Metric Alert instance. Changing this forces a new resource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * A set of strings of resource IDs at which the metric criteria should be applied.
     */
    declare public readonly scopes: pulumi.Output<string[]>;
    /**
     * The severity of this Metric Alert. Possible values are `0`, `1`, `2`, `3` and `4`. Defaults to `3`.
     */
    declare public readonly severity: pulumi.Output<number | undefined>;
    /**
     * A mapping of tags to assign to the resource.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The location of the target resource.
     *
     * > **Note:** This is Required when using a Subscription as scope, a Resource Group as scope or Multiple Scopes.
     */
    declare public readonly targetResourceLocation: pulumi.Output<string>;
    /**
     * The resource type (e.g. `Microsoft.Compute/virtualMachines`) of the target resource.
     *
     * > **Note:** This is Required when using a Subscription as scope, a Resource Group as scope or Multiple Scopes.
     */
    declare public readonly targetResourceType: pulumi.Output<string>;
    /**
     * The period of time that is used to monitor alert activity, represented in ISO 8601 duration format. This value must be greater than `frequency`. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M`, `PT1H`, `PT6H`, `PT12H` and `P1D`. Defaults to `PT5M`.
     */
    declare public readonly windowSize: pulumi.Output<string | undefined>;

    /**
     * Create a MetricAlert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetricAlertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetricAlertArgs | MetricAlertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetricAlertState | undefined;
            resourceInputs["actions"] = state?.actions;
            resourceInputs["applicationInsightsWebTestLocationAvailabilityCriteria"] = state?.applicationInsightsWebTestLocationAvailabilityCriteria;
            resourceInputs["autoMitigate"] = state?.autoMitigate;
            resourceInputs["criterias"] = state?.criterias;
            resourceInputs["description"] = state?.description;
            resourceInputs["dynamicCriteria"] = state?.dynamicCriteria;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["frequency"] = state?.frequency;
            resourceInputs["name"] = state?.name;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["scopes"] = state?.scopes;
            resourceInputs["severity"] = state?.severity;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["targetResourceLocation"] = state?.targetResourceLocation;
            resourceInputs["targetResourceType"] = state?.targetResourceType;
            resourceInputs["windowSize"] = state?.windowSize;
        } else {
            const args = argsOrState as MetricAlertArgs | undefined;
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.scopes === undefined && !opts.urn) {
                throw new Error("Missing required property 'scopes'");
            }
            resourceInputs["actions"] = args?.actions;
            resourceInputs["applicationInsightsWebTestLocationAvailabilityCriteria"] = args?.applicationInsightsWebTestLocationAvailabilityCriteria;
            resourceInputs["autoMitigate"] = args?.autoMitigate;
            resourceInputs["criterias"] = args?.criterias;
            resourceInputs["description"] = args?.description;
            resourceInputs["dynamicCriteria"] = args?.dynamicCriteria;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["frequency"] = args?.frequency;
            resourceInputs["name"] = args?.name;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["scopes"] = args?.scopes;
            resourceInputs["severity"] = args?.severity;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["targetResourceLocation"] = args?.targetResourceLocation;
            resourceInputs["targetResourceType"] = args?.targetResourceType;
            resourceInputs["windowSize"] = args?.windowSize;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MetricAlert.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MetricAlert resources.
 */
export interface MetricAlertState {
    /**
     * One or more `action` blocks as defined below.
     */
    actions?: pulumi.Input<pulumi.Input<inputs.monitoring.MetricAlertAction>[]>;
    /**
     * A `applicationInsightsWebTestLocationAvailabilityCriteria` block as defined below.
     *
     * > **Note:** One of either `criteria`, `dynamicCriteria` or `applicationInsightsWebTestLocationAvailabilityCriteria` must be specified.
     */
    applicationInsightsWebTestLocationAvailabilityCriteria?: pulumi.Input<inputs.monitoring.MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria>;
    /**
     * Should the alerts in this Metric Alert be auto resolved? Defaults to `true`.
     */
    autoMitigate?: pulumi.Input<boolean>;
    /**
     * One or more (static) `criteria` blocks as defined below.
     *
     * > **Note:** One of either `criteria`, `dynamicCriteria` or `applicationInsightsWebTestLocationAvailabilityCriteria` must be specified.
     */
    criterias?: pulumi.Input<pulumi.Input<inputs.monitoring.MetricAlertCriteria>[]>;
    /**
     * The description of this Metric Alert.
     */
    description?: pulumi.Input<string>;
    /**
     * A `dynamicCriteria` block as defined below.
     *
     * > **Note:** One of either `criteria`, `dynamicCriteria` or `applicationInsightsWebTestLocationAvailabilityCriteria` must be specified.
     */
    dynamicCriteria?: pulumi.Input<inputs.monitoring.MetricAlertDynamicCriteria>;
    /**
     * Should this Metric Alert be enabled? Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The evaluation frequency of this Metric Alert, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M` and `PT1H`. Defaults to `PT1M`.
     */
    frequency?: pulumi.Input<string>;
    /**
     * The name of the Metric Alert. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the Metric Alert instance. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A set of strings of resource IDs at which the metric criteria should be applied.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The severity of this Metric Alert. Possible values are `0`, `1`, `2`, `3` and `4`. Defaults to `3`.
     */
    severity?: pulumi.Input<number>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location of the target resource.
     *
     * > **Note:** This is Required when using a Subscription as scope, a Resource Group as scope or Multiple Scopes.
     */
    targetResourceLocation?: pulumi.Input<string>;
    /**
     * The resource type (e.g. `Microsoft.Compute/virtualMachines`) of the target resource.
     *
     * > **Note:** This is Required when using a Subscription as scope, a Resource Group as scope or Multiple Scopes.
     */
    targetResourceType?: pulumi.Input<string>;
    /**
     * The period of time that is used to monitor alert activity, represented in ISO 8601 duration format. This value must be greater than `frequency`. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M`, `PT1H`, `PT6H`, `PT12H` and `P1D`. Defaults to `PT5M`.
     */
    windowSize?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MetricAlert resource.
 */
export interface MetricAlertArgs {
    /**
     * One or more `action` blocks as defined below.
     */
    actions?: pulumi.Input<pulumi.Input<inputs.monitoring.MetricAlertAction>[]>;
    /**
     * A `applicationInsightsWebTestLocationAvailabilityCriteria` block as defined below.
     *
     * > **Note:** One of either `criteria`, `dynamicCriteria` or `applicationInsightsWebTestLocationAvailabilityCriteria` must be specified.
     */
    applicationInsightsWebTestLocationAvailabilityCriteria?: pulumi.Input<inputs.monitoring.MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria>;
    /**
     * Should the alerts in this Metric Alert be auto resolved? Defaults to `true`.
     */
    autoMitigate?: pulumi.Input<boolean>;
    /**
     * One or more (static) `criteria` blocks as defined below.
     *
     * > **Note:** One of either `criteria`, `dynamicCriteria` or `applicationInsightsWebTestLocationAvailabilityCriteria` must be specified.
     */
    criterias?: pulumi.Input<pulumi.Input<inputs.monitoring.MetricAlertCriteria>[]>;
    /**
     * The description of this Metric Alert.
     */
    description?: pulumi.Input<string>;
    /**
     * A `dynamicCriteria` block as defined below.
     *
     * > **Note:** One of either `criteria`, `dynamicCriteria` or `applicationInsightsWebTestLocationAvailabilityCriteria` must be specified.
     */
    dynamicCriteria?: pulumi.Input<inputs.monitoring.MetricAlertDynamicCriteria>;
    /**
     * Should this Metric Alert be enabled? Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The evaluation frequency of this Metric Alert, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M` and `PT1H`. Defaults to `PT1M`.
     */
    frequency?: pulumi.Input<string>;
    /**
     * The name of the Metric Alert. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the Metric Alert instance. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A set of strings of resource IDs at which the metric criteria should be applied.
     */
    scopes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The severity of this Metric Alert. Possible values are `0`, `1`, `2`, `3` and `4`. Defaults to `3`.
     */
    severity?: pulumi.Input<number>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location of the target resource.
     *
     * > **Note:** This is Required when using a Subscription as scope, a Resource Group as scope or Multiple Scopes.
     */
    targetResourceLocation?: pulumi.Input<string>;
    /**
     * The resource type (e.g. `Microsoft.Compute/virtualMachines`) of the target resource.
     *
     * > **Note:** This is Required when using a Subscription as scope, a Resource Group as scope or Multiple Scopes.
     */
    targetResourceType?: pulumi.Input<string>;
    /**
     * The period of time that is used to monitor alert activity, represented in ISO 8601 duration format. This value must be greater than `frequency`. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M`, `PT1H`, `PT6H`, `PT12H` and `P1D`. Defaults to `PT5M`.
     */
    windowSize?: pulumi.Input<string>;
}
