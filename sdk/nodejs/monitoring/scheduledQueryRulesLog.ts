// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a LogToMetricAction Scheduled Query Rules resource within Azure Monitor.
 *
 */
export class ScheduledQueryRulesLog extends pulumi.CustomResource {
    /**
     * Get an existing ScheduledQueryRulesLog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScheduledQueryRulesLogState, opts?: pulumi.CustomResourceOptions): ScheduledQueryRulesLog {
        return new ScheduledQueryRulesLog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:monitoring/scheduledQueryRulesLog:ScheduledQueryRulesLog';

    /**
     * Returns true if the given object is an instance of ScheduledQueryRulesLog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScheduledQueryRulesLog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScheduledQueryRulesLog.__pulumiType;
    }

    public readonly authorizedResourceIds!: pulumi.Output<string[] | undefined>;
    /**
     * A `criteria` block as defined below.
     */
    public readonly criteria!: pulumi.Output<outputs.monitoring.ScheduledQueryRulesLogCriteria>;
    /**
     * The resource uri over which log search query is to be run.
     */
    public readonly dataSourceId!: pulumi.Output<string>;
    /**
     * The description of the scheduled query rule.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Whether this scheduled query rule is enabled.  Default is `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly location!: pulumi.Output<string>;
    /**
     * The name of the scheduled query rule. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the resource group in which to create the scheduled query rule instance.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a ScheduledQueryRulesLog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScheduledQueryRulesLogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScheduledQueryRulesLogArgs | ScheduledQueryRulesLogState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ScheduledQueryRulesLogState | undefined;
            inputs["authorizedResourceIds"] = state ? state.authorizedResourceIds : undefined;
            inputs["criteria"] = state ? state.criteria : undefined;
            inputs["dataSourceId"] = state ? state.dataSourceId : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ScheduledQueryRulesLogArgs | undefined;
            if (!args || args.criteria === undefined) {
                throw new Error("Missing required property 'criteria'");
            }
            if (!args || args.dataSourceId === undefined) {
                throw new Error("Missing required property 'dataSourceId'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["authorizedResourceIds"] = args ? args.authorizedResourceIds : undefined;
            inputs["criteria"] = args ? args.criteria : undefined;
            inputs["dataSourceId"] = args ? args.dataSourceId : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ScheduledQueryRulesLog.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ScheduledQueryRulesLog resources.
 */
export interface ScheduledQueryRulesLogState {
    readonly authorizedResourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A `criteria` block as defined below.
     */
    readonly criteria?: pulumi.Input<inputs.monitoring.ScheduledQueryRulesLogCriteria>;
    /**
     * The resource uri over which log search query is to be run.
     */
    readonly dataSourceId?: pulumi.Input<string>;
    /**
     * The description of the scheduled query rule.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Whether this scheduled query rule is enabled.  Default is `true`.
     */
    readonly enabled?: pulumi.Input<boolean>;
    readonly location?: pulumi.Input<string>;
    /**
     * The name of the scheduled query rule. Changing this forces a new resource to be created.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the scheduled query rule instance.
     */
    readonly resourceGroupName?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a ScheduledQueryRulesLog resource.
 */
export interface ScheduledQueryRulesLogArgs {
    readonly authorizedResourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A `criteria` block as defined below.
     */
    readonly criteria: pulumi.Input<inputs.monitoring.ScheduledQueryRulesLogCriteria>;
    /**
     * The resource uri over which log search query is to be run.
     */
    readonly dataSourceId: pulumi.Input<string>;
    /**
     * The description of the scheduled query rule.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Whether this scheduled query rule is enabled.  Default is `true`.
     */
    readonly enabled?: pulumi.Input<boolean>;
    readonly location?: pulumi.Input<string>;
    /**
     * The name of the scheduled query rule. Changing this forces a new resource to be created.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the scheduled query rule instance.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
