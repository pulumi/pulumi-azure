// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Data Collection Rule.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAnalyticsWorkspace = new azure.operationalinsights.AnalyticsWorkspace("exampleAnalyticsWorkspace", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 * });
 * const exampleAnalyticsSolution = new azure.operationalinsights.AnalyticsSolution("exampleAnalyticsSolution", {
 *     solutionName: "WindowsEventForwarding",
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     workspaceResourceId: exampleAnalyticsWorkspace.id,
 *     workspaceName: exampleAnalyticsWorkspace.name,
 *     plan: {
 *         publisher: "Microsoft",
 *         product: "OMSGallery/WindowsEventForwarding",
 *     },
 * });
 * const exampleDataCollectionRule = new azure.monitoring.DataCollectionRule("exampleDataCollectionRule", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     destinations: {
 *         logAnalytics: [{
 *             workspaceResourceId: exampleAnalyticsWorkspace.id,
 *             name: "test-destination-log",
 *         }],
 *         azureMonitorMetrics: {
 *             name: "test-destination-metrics",
 *         },
 *     },
 *     dataFlows: [
 *         {
 *             streams: ["Microsoft-InsightsMetrics"],
 *             destinations: ["test-destination-metrics"],
 *         },
 *         {
 *             streams: [
 *                 "Microsoft-InsightsMetrics",
 *                 "Microsoft-Syslog",
 *                 "Microsoft-Perf",
 *             ],
 *             destinations: ["test-destination-log"],
 *         },
 *     ],
 *     dataSources: {
 *         syslogs: [{
 *             facilityNames: ["*"],
 *             logLevels: ["*"],
 *             name: "test-datasource-syslog",
 *         }],
 *         performanceCounters: [{
 *             streams: [
 *                 "Microsoft-Perf",
 *                 "Microsoft-InsightsMetrics",
 *             ],
 *             samplingFrequencyInSeconds: 60,
 *             counterSpecifiers: ["Processor(*)\\% Processor Time"],
 *             name: "test-datasource-perfcounter",
 *         }],
 *         windowsEventLogs: [{
 *             streams: ["Microsoft-WindowsEvent"],
 *             xPathQueries: ["*![System/Level=1]"],
 *             name: "test-datasource-wineventlog",
 *         }],
 *         extensions: [{
 *             streams: ["Microsoft-WindowsEvent"],
 *             inputDataSources: ["test-datasource-wineventlog"],
 *             extensionName: "test-extension-name",
 *             extensionJson: JSON.stringify({
 *                 a: 1,
 *                 b: "hello",
 *             }),
 *             name: "test-datasource-extension",
 *         }],
 *     },
 *     description: "data collection rule example",
 *     tags: {
 *         foo: "bar",
 *     },
 * }, {
 *     dependsOn: [exampleAnalyticsSolution],
 * });
 * ```
 *
 * ## Import
 *
 * Data Collection Rules can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:monitoring/dataCollectionRule:DataCollectionRule example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.Insights/dataCollectionRules/rule1
 * ```
 */
export class DataCollectionRule extends pulumi.CustomResource {
    /**
     * Get an existing DataCollectionRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataCollectionRuleState, opts?: pulumi.CustomResourceOptions): DataCollectionRule {
        return new DataCollectionRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:monitoring/dataCollectionRule:DataCollectionRule';

    /**
     * Returns true if the given object is an instance of DataCollectionRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataCollectionRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataCollectionRule.__pulumiType;
    }

    /**
     * One or more `dataFlow` blocks as defined below.
     */
    public readonly dataFlows!: pulumi.Output<outputs.monitoring.DataCollectionRuleDataFlow[]>;
    /**
     * A `dataSources` block as defined below. This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
     */
    public readonly dataSources!: pulumi.Output<outputs.monitoring.DataCollectionRuleDataSources | undefined>;
    /**
     * The description of the Data Collection Rule.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A `destinations` block as defined below.
     */
    public readonly destinations!: pulumi.Output<outputs.monitoring.DataCollectionRuleDestinations>;
    /**
     * The kind of the Data Collection Rule. Possible values are `Linux` and `Windows`. A rule of kind `Linux` does not allow for `windowsEventLog` data sources. And a rule of kind `Windows` does not allow for `syslog` data sources. If kind is not specified, all kinds of data sources are allowed.
     */
    public readonly kind!: pulumi.Output<string | undefined>;
    /**
     * The Azure Region where the Data Collection Rule should exist. Changing this forces a new Data Collection Rule to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name which should be used for this Data Collection Rule. Changing this forces a new Data Collection Rule to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the Resource Group where the Data Collection Rule should exist. Changing this forces a new Data Collection Rule to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * A mapping of tags which should be assigned to the Data Collection Rule.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a DataCollectionRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataCollectionRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataCollectionRuleArgs | DataCollectionRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataCollectionRuleState | undefined;
            resourceInputs["dataFlows"] = state ? state.dataFlows : undefined;
            resourceInputs["dataSources"] = state ? state.dataSources : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinations"] = state ? state.destinations : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as DataCollectionRuleArgs | undefined;
            if ((!args || args.dataFlows === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataFlows'");
            }
            if ((!args || args.destinations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinations'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["dataFlows"] = args ? args.dataFlows : undefined;
            resourceInputs["dataSources"] = args ? args.dataSources : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinations"] = args ? args.destinations : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataCollectionRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DataCollectionRule resources.
 */
export interface DataCollectionRuleState {
    /**
     * One or more `dataFlow` blocks as defined below.
     */
    dataFlows?: pulumi.Input<pulumi.Input<inputs.monitoring.DataCollectionRuleDataFlow>[]>;
    /**
     * A `dataSources` block as defined below. This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
     */
    dataSources?: pulumi.Input<inputs.monitoring.DataCollectionRuleDataSources>;
    /**
     * The description of the Data Collection Rule.
     */
    description?: pulumi.Input<string>;
    /**
     * A `destinations` block as defined below.
     */
    destinations?: pulumi.Input<inputs.monitoring.DataCollectionRuleDestinations>;
    /**
     * The kind of the Data Collection Rule. Possible values are `Linux` and `Windows`. A rule of kind `Linux` does not allow for `windowsEventLog` data sources. And a rule of kind `Windows` does not allow for `syslog` data sources. If kind is not specified, all kinds of data sources are allowed.
     */
    kind?: pulumi.Input<string>;
    /**
     * The Azure Region where the Data Collection Rule should exist. Changing this forces a new Data Collection Rule to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The name which should be used for this Data Collection Rule. Changing this forces a new Data Collection Rule to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Data Collection Rule should exist. Changing this forces a new Data Collection Rule to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Data Collection Rule.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a DataCollectionRule resource.
 */
export interface DataCollectionRuleArgs {
    /**
     * One or more `dataFlow` blocks as defined below.
     */
    dataFlows: pulumi.Input<pulumi.Input<inputs.monitoring.DataCollectionRuleDataFlow>[]>;
    /**
     * A `dataSources` block as defined below. This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
     */
    dataSources?: pulumi.Input<inputs.monitoring.DataCollectionRuleDataSources>;
    /**
     * The description of the Data Collection Rule.
     */
    description?: pulumi.Input<string>;
    /**
     * A `destinations` block as defined below.
     */
    destinations: pulumi.Input<inputs.monitoring.DataCollectionRuleDestinations>;
    /**
     * The kind of the Data Collection Rule. Possible values are `Linux` and `Windows`. A rule of kind `Linux` does not allow for `windowsEventLog` data sources. And a rule of kind `Windows` does not allow for `syslog` data sources. If kind is not specified, all kinds of data sources are allowed.
     */
    kind?: pulumi.Input<string>;
    /**
     * The Azure Region where the Data Collection Rule should exist. Changing this forces a new Data Collection Rule to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The name which should be used for this Data Collection Rule. Changing this forces a new Data Collection Rule to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Data Collection Rule should exist. Changing this forces a new Data Collection Rule to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Data Collection Rule.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
