// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ActiveDirectoryAdministratorArgs, ActiveDirectoryAdministratorState } from "./activeDirectoryAdministrator";
export type ActiveDirectoryAdministrator = import("./activeDirectoryAdministrator").ActiveDirectoryAdministrator;
export const ActiveDirectoryAdministrator: typeof import("./activeDirectoryAdministrator").ActiveDirectoryAdministrator = null as any;
utilities.lazyLoad(exports, ["ActiveDirectoryAdministrator"], () => require("./activeDirectoryAdministrator"));

export { ConfigurationArgs, ConfigurationState } from "./configuration";
export type Configuration = import("./configuration").Configuration;
export const Configuration: typeof import("./configuration").Configuration = null as any;
utilities.lazyLoad(exports, ["Configuration"], () => require("./configuration"));

export { DatabaseArgs, DatabaseState } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { FirewallRuleArgs, FirewallRuleState } from "./firewallRule";
export type FirewallRule = import("./firewallRule").FirewallRule;
export const FirewallRule: typeof import("./firewallRule").FirewallRule = null as any;
utilities.lazyLoad(exports, ["FirewallRule"], () => require("./firewallRule"));

export { FlexibleDatabaseArgs, FlexibleDatabaseState } from "./flexibleDatabase";
export type FlexibleDatabase = import("./flexibleDatabase").FlexibleDatabase;
export const FlexibleDatabase: typeof import("./flexibleDatabase").FlexibleDatabase = null as any;
utilities.lazyLoad(exports, ["FlexibleDatabase"], () => require("./flexibleDatabase"));

export { FlexibleServerArgs, FlexibleServerState } from "./flexibleServer";
export type FlexibleServer = import("./flexibleServer").FlexibleServer;
export const FlexibleServer: typeof import("./flexibleServer").FlexibleServer = null as any;
utilities.lazyLoad(exports, ["FlexibleServer"], () => require("./flexibleServer"));

export { FlexibleServerActiveDirectoryAdministratorArgs, FlexibleServerActiveDirectoryAdministratorState } from "./flexibleServerActiveDirectoryAdministrator";
export type FlexibleServerActiveDirectoryAdministrator = import("./flexibleServerActiveDirectoryAdministrator").FlexibleServerActiveDirectoryAdministrator;
export const FlexibleServerActiveDirectoryAdministrator: typeof import("./flexibleServerActiveDirectoryAdministrator").FlexibleServerActiveDirectoryAdministrator = null as any;
utilities.lazyLoad(exports, ["FlexibleServerActiveDirectoryAdministrator"], () => require("./flexibleServerActiveDirectoryAdministrator"));

export { FlexibleServerConfigurationArgs, FlexibleServerConfigurationState } from "./flexibleServerConfiguration";
export type FlexibleServerConfiguration = import("./flexibleServerConfiguration").FlexibleServerConfiguration;
export const FlexibleServerConfiguration: typeof import("./flexibleServerConfiguration").FlexibleServerConfiguration = null as any;
utilities.lazyLoad(exports, ["FlexibleServerConfiguration"], () => require("./flexibleServerConfiguration"));

export { FlexibleServerFirewallRuleArgs, FlexibleServerFirewallRuleState } from "./flexibleServerFirewallRule";
export type FlexibleServerFirewallRule = import("./flexibleServerFirewallRule").FlexibleServerFirewallRule;
export const FlexibleServerFirewallRule: typeof import("./flexibleServerFirewallRule").FlexibleServerFirewallRule = null as any;
utilities.lazyLoad(exports, ["FlexibleServerFirewallRule"], () => require("./flexibleServerFirewallRule"));

export { GetFlexibleServerArgs, GetFlexibleServerResult, GetFlexibleServerOutputArgs } from "./getFlexibleServer";
export const getFlexibleServer: typeof import("./getFlexibleServer").getFlexibleServer = null as any;
export const getFlexibleServerOutput: typeof import("./getFlexibleServer").getFlexibleServerOutput = null as any;
utilities.lazyLoad(exports, ["getFlexibleServer","getFlexibleServerOutput"], () => require("./getFlexibleServer"));

export { GetServerArgs, GetServerResult, GetServerOutputArgs } from "./getServer";
export const getServer: typeof import("./getServer").getServer = null as any;
export const getServerOutput: typeof import("./getServer").getServerOutput = null as any;
utilities.lazyLoad(exports, ["getServer","getServerOutput"], () => require("./getServer"));

export { ServerArgs, ServerState } from "./server";
export type Server = import("./server").Server;
export const Server: typeof import("./server").Server = null as any;
utilities.lazyLoad(exports, ["Server"], () => require("./server"));

export { ServerKeyArgs, ServerKeyState } from "./serverKey";
export type ServerKey = import("./serverKey").ServerKey;
export const ServerKey: typeof import("./serverKey").ServerKey = null as any;
utilities.lazyLoad(exports, ["ServerKey"], () => require("./serverKey"));

export { VirtualNetworkRuleArgs, VirtualNetworkRuleState } from "./virtualNetworkRule";
export type VirtualNetworkRule = import("./virtualNetworkRule").VirtualNetworkRule;
export const VirtualNetworkRule: typeof import("./virtualNetworkRule").VirtualNetworkRule = null as any;
utilities.lazyLoad(exports, ["VirtualNetworkRule"], () => require("./virtualNetworkRule"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:mysql/activeDirectoryAdministrator:ActiveDirectoryAdministrator":
                return new ActiveDirectoryAdministrator(name, <any>undefined, { urn })
            case "azure:mysql/configuration:Configuration":
                return new Configuration(name, <any>undefined, { urn })
            case "azure:mysql/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "azure:mysql/firewallRule:FirewallRule":
                return new FirewallRule(name, <any>undefined, { urn })
            case "azure:mysql/flexibleDatabase:FlexibleDatabase":
                return new FlexibleDatabase(name, <any>undefined, { urn })
            case "azure:mysql/flexibleServer:FlexibleServer":
                return new FlexibleServer(name, <any>undefined, { urn })
            case "azure:mysql/flexibleServerActiveDirectoryAdministrator:FlexibleServerActiveDirectoryAdministrator":
                return new FlexibleServerActiveDirectoryAdministrator(name, <any>undefined, { urn })
            case "azure:mysql/flexibleServerConfiguration:FlexibleServerConfiguration":
                return new FlexibleServerConfiguration(name, <any>undefined, { urn })
            case "azure:mysql/flexibleServerFirewallRule:FlexibleServerFirewallRule":
                return new FlexibleServerFirewallRule(name, <any>undefined, { urn })
            case "azure:mysql/server:Server":
                return new Server(name, <any>undefined, { urn })
            case "azure:mysql/serverKey:ServerKey":
                return new ServerKey(name, <any>undefined, { urn })
            case "azure:mysql/virtualNetworkRule:VirtualNetworkRule":
                return new VirtualNetworkRule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "mysql/activeDirectoryAdministrator", _module)
pulumi.runtime.registerResourceModule("azure", "mysql/configuration", _module)
pulumi.runtime.registerResourceModule("azure", "mysql/database", _module)
pulumi.runtime.registerResourceModule("azure", "mysql/firewallRule", _module)
pulumi.runtime.registerResourceModule("azure", "mysql/flexibleDatabase", _module)
pulumi.runtime.registerResourceModule("azure", "mysql/flexibleServer", _module)
pulumi.runtime.registerResourceModule("azure", "mysql/flexibleServerActiveDirectoryAdministrator", _module)
pulumi.runtime.registerResourceModule("azure", "mysql/flexibleServerConfiguration", _module)
pulumi.runtime.registerResourceModule("azure", "mysql/flexibleServerFirewallRule", _module)
pulumi.runtime.registerResourceModule("azure", "mysql/server", _module)
pulumi.runtime.registerResourceModule("azure", "mysql/serverKey", _module)
pulumi.runtime.registerResourceModule("azure", "mysql/virtualNetworkRule", _module)
