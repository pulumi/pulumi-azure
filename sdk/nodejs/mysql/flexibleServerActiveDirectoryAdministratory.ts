// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an Active Directory administrator on a MySQL Flexible Server
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleUserAssignedIdentity = new azure.authorization.UserAssignedIdentity("example", {
 *     name: "exampleUAI",
 *     resourceGroupName: example.name,
 *     location: example.location,
 * });
 * const exampleFlexibleServer = new azure.mysql.FlexibleServer("example", {
 *     name: "example-mysqlfs",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     administratorLogin: "_admin_Terraform_892123456789312",
 *     administratorPassword: "QAZwsx123",
 *     skuName: "B_Standard_B1ms",
 *     zone: "2",
 *     identity: {
 *         type: "UserAssigned",
 *         identityIds: [exampleUserAssignedIdentity.id],
 *     },
 * });
 * const exampleFlexibleServerActiveDirectoryAdministratory = new azure.mysql.FlexibleServerActiveDirectoryAdministratory("example", {
 *     serverId: exampleFlexibleServer.id,
 *     identityId: exampleUserAssignedIdentity.id,
 *     login: "sqladmin",
 *     objectId: current.then(current => current.clientId),
 *     tenantId: current.then(current => current.tenantId),
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.DBforMySQL` - 2023-12-30
 *
 * ## Import
 *
 * A MySQL Flexible Server Active Directory Administrator can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:mysql/flexibleServerActiveDirectoryAdministratory:FlexibleServerActiveDirectoryAdministratory example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.DBforMySQL/flexibleServers/server1/administrators/ActiveDirectory
 * ```
 */
export class FlexibleServerActiveDirectoryAdministratory extends pulumi.CustomResource {
    /**
     * Get an existing FlexibleServerActiveDirectoryAdministratory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlexibleServerActiveDirectoryAdministratoryState, opts?: pulumi.CustomResourceOptions): FlexibleServerActiveDirectoryAdministratory {
        return new FlexibleServerActiveDirectoryAdministratory(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:mysql/flexibleServerActiveDirectoryAdministratory:FlexibleServerActiveDirectoryAdministratory';

    /**
     * Returns true if the given object is an instance of FlexibleServerActiveDirectoryAdministratory.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FlexibleServerActiveDirectoryAdministratory {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlexibleServerActiveDirectoryAdministratory.__pulumiType;
    }

    /**
     * The resource ID of the identity used for AAD Authentication.
     */
    public readonly identityId!: pulumi.Output<string>;
    /**
     * The login name of the principal to set as the server administrator
     */
    public readonly login!: pulumi.Output<string>;
    /**
     * The ID of the principal to set as the server administrator. For a managed identity this should be the Client ID of the identity.
     */
    public readonly objectId!: pulumi.Output<string>;
    /**
     * The resource ID of the MySQL Flexible Server. Changing this forces a new resource to be created.
     */
    public readonly serverId!: pulumi.Output<string>;
    /**
     * The Azure Tenant ID.
     */
    public readonly tenantId!: pulumi.Output<string>;

    /**
     * Create a FlexibleServerActiveDirectoryAdministratory resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlexibleServerActiveDirectoryAdministratoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FlexibleServerActiveDirectoryAdministratoryArgs | FlexibleServerActiveDirectoryAdministratoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FlexibleServerActiveDirectoryAdministratoryState | undefined;
            resourceInputs["identityId"] = state ? state.identityId : undefined;
            resourceInputs["login"] = state ? state.login : undefined;
            resourceInputs["objectId"] = state ? state.objectId : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
        } else {
            const args = argsOrState as FlexibleServerActiveDirectoryAdministratoryArgs | undefined;
            if ((!args || args.identityId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identityId'");
            }
            if ((!args || args.login === undefined) && !opts.urn) {
                throw new Error("Missing required property 'login'");
            }
            if ((!args || args.objectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'objectId'");
            }
            if ((!args || args.serverId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverId'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["identityId"] = args ? args.identityId : undefined;
            resourceInputs["login"] = args ? args.login : undefined;
            resourceInputs["objectId"] = args ? args.objectId : undefined;
            resourceInputs["serverId"] = args ? args.serverId : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure:mysql/flexibleServerActiveDirectoryAdministrator:FlexibleServerActiveDirectoryAdministrator" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(FlexibleServerActiveDirectoryAdministratory.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FlexibleServerActiveDirectoryAdministratory resources.
 */
export interface FlexibleServerActiveDirectoryAdministratoryState {
    /**
     * The resource ID of the identity used for AAD Authentication.
     */
    identityId?: pulumi.Input<string>;
    /**
     * The login name of the principal to set as the server administrator
     */
    login?: pulumi.Input<string>;
    /**
     * The ID of the principal to set as the server administrator. For a managed identity this should be the Client ID of the identity.
     */
    objectId?: pulumi.Input<string>;
    /**
     * The resource ID of the MySQL Flexible Server. Changing this forces a new resource to be created.
     */
    serverId?: pulumi.Input<string>;
    /**
     * The Azure Tenant ID.
     */
    tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FlexibleServerActiveDirectoryAdministratory resource.
 */
export interface FlexibleServerActiveDirectoryAdministratoryArgs {
    /**
     * The resource ID of the identity used for AAD Authentication.
     */
    identityId: pulumi.Input<string>;
    /**
     * The login name of the principal to set as the server administrator
     */
    login: pulumi.Input<string>;
    /**
     * The ID of the principal to set as the server administrator. For a managed identity this should be the Client ID of the identity.
     */
    objectId: pulumi.Input<string>;
    /**
     * The resource ID of the MySQL Flexible Server. Changing this forces a new resource to be created.
     */
    serverId: pulumi.Input<string>;
    /**
     * The Azure Tenant ID.
     */
    tenantId: pulumi.Input<string>;
}
