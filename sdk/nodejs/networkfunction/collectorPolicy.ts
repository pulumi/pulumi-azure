// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Network Function Collector Policy.
 *
 * ## Import
 *
 * Network Function Collector Policy can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:networkfunction/collectorPolicy:CollectorPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.NetworkFunction/azureTrafficCollectors/azureTrafficCollector1/collectorPolicies/collectorPolicy1
 * ```
 */
export class CollectorPolicy extends pulumi.CustomResource {
    /**
     * Get an existing CollectorPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CollectorPolicyState, opts?: pulumi.CustomResourceOptions): CollectorPolicy {
        return new CollectorPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:networkfunction/collectorPolicy:CollectorPolicy';

    /**
     * Returns true if the given object is an instance of CollectorPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CollectorPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CollectorPolicy.__pulumiType;
    }

    /**
     * An `ipfxEmission` block as defined below. Changing this forces a new Network Function Collector Policy to be created.
     */
    public readonly ipfxEmission!: pulumi.Output<outputs.networkfunction.CollectorPolicyIpfxEmission>;
    /**
     * An `ipfxIngestion` block as defined below. Changing this forces a new Network Function Collector Policy to be created.
     */
    public readonly ipfxIngestion!: pulumi.Output<outputs.networkfunction.CollectorPolicyIpfxIngestion>;
    /**
     * Specifies the Azure Region where the Network Function Collector Policy should exist. Changing this forces a new Network Function Collector Policy to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Specifies the name which should be used for this Network Function Collector Policy. Changing this forces a new Network Function Collector Policy to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A mapping of tags which should be assigned to the Network Function Collector Policy.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the Azure Traffic Collector ID of the Network Function Collector Policy. Changing this forces a new Network Function Collector Policy to be created.
     */
    public readonly trafficCollectorId!: pulumi.Output<string>;

    /**
     * Create a CollectorPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CollectorPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CollectorPolicyArgs | CollectorPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CollectorPolicyState | undefined;
            resourceInputs["ipfxEmission"] = state ? state.ipfxEmission : undefined;
            resourceInputs["ipfxIngestion"] = state ? state.ipfxIngestion : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["trafficCollectorId"] = state ? state.trafficCollectorId : undefined;
        } else {
            const args = argsOrState as CollectorPolicyArgs | undefined;
            if ((!args || args.ipfxEmission === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipfxEmission'");
            }
            if ((!args || args.ipfxIngestion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipfxIngestion'");
            }
            if ((!args || args.trafficCollectorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficCollectorId'");
            }
            resourceInputs["ipfxEmission"] = args ? args.ipfxEmission : undefined;
            resourceInputs["ipfxIngestion"] = args ? args.ipfxIngestion : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["trafficCollectorId"] = args ? args.trafficCollectorId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CollectorPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CollectorPolicy resources.
 */
export interface CollectorPolicyState {
    /**
     * An `ipfxEmission` block as defined below. Changing this forces a new Network Function Collector Policy to be created.
     */
    ipfxEmission?: pulumi.Input<inputs.networkfunction.CollectorPolicyIpfxEmission>;
    /**
     * An `ipfxIngestion` block as defined below. Changing this forces a new Network Function Collector Policy to be created.
     */
    ipfxIngestion?: pulumi.Input<inputs.networkfunction.CollectorPolicyIpfxIngestion>;
    /**
     * Specifies the Azure Region where the Network Function Collector Policy should exist. Changing this forces a new Network Function Collector Policy to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name which should be used for this Network Function Collector Policy. Changing this forces a new Network Function Collector Policy to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Network Function Collector Policy.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the Azure Traffic Collector ID of the Network Function Collector Policy. Changing this forces a new Network Function Collector Policy to be created.
     */
    trafficCollectorId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CollectorPolicy resource.
 */
export interface CollectorPolicyArgs {
    /**
     * An `ipfxEmission` block as defined below. Changing this forces a new Network Function Collector Policy to be created.
     */
    ipfxEmission: pulumi.Input<inputs.networkfunction.CollectorPolicyIpfxEmission>;
    /**
     * An `ipfxIngestion` block as defined below. Changing this forces a new Network Function Collector Policy to be created.
     */
    ipfxIngestion: pulumi.Input<inputs.networkfunction.CollectorPolicyIpfxIngestion>;
    /**
     * Specifies the Azure Region where the Network Function Collector Policy should exist. Changing this forces a new Network Function Collector Policy to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name which should be used for this Network Function Collector Policy. Changing this forces a new Network Function Collector Policy to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Network Function Collector Policy.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the Azure Traffic Collector ID of the Network Function Collector Policy. Changing this forces a new Network Function Collector Policy to be created.
     */
    trafficCollectorId: pulumi.Input<string>;
}
