// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages an Elasticsearch in Elastic Cloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const test = new azure.core.ResourceGroup("test", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const testElasticsearch = new azure.elasticcloud.Elasticsearch("test", {
 *     name: "example-elasticsearch",
 *     resourceGroupName: test.name,
 *     location: test.location,
 *     skuName: "ess-consumption-2024_Monthly",
 *     elasticCloudEmailAddress: "user@example.com",
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Elastic` - 2023-06-01
 *
 * ## Import
 *
 * Elasticsearch's can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:elasticcloud/elasticsearch:Elasticsearch example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Elastic/monitors/monitor1
 * ```
 */
export class Elasticsearch extends pulumi.CustomResource {
    /**
     * Get an existing Elasticsearch resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElasticsearchState, opts?: pulumi.CustomResourceOptions): Elasticsearch {
        return new Elasticsearch(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:elasticcloud/elasticsearch:Elasticsearch';

    /**
     * Returns true if the given object is an instance of Elasticsearch.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Elasticsearch {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Elasticsearch.__pulumiType;
    }

    /**
     * The ID of the Deployment within Elastic Cloud.
     */
    declare public /*out*/ readonly elasticCloudDeploymentId: pulumi.Output<string>;
    /**
     * Specifies the Email Address which should be associated with this Elasticsearch account. Changing this forces a new Elasticsearch to be created.
     */
    declare public readonly elasticCloudEmailAddress: pulumi.Output<string>;
    /**
     * The Default URL used for Single Sign On (SSO) to Elastic Cloud.
     */
    declare public /*out*/ readonly elasticCloudSsoDefaultUrl: pulumi.Output<string>;
    /**
     * The ID of the User Account within Elastic Cloud.
     */
    declare public /*out*/ readonly elasticCloudUserId: pulumi.Output<string>;
    /**
     * The URL to the Elasticsearch Service associated with this Elasticsearch.
     */
    declare public /*out*/ readonly elasticsearchServiceUrl: pulumi.Output<string>;
    /**
     * The URL to the Kibana Dashboard associated with this Elasticsearch.
     */
    declare public /*out*/ readonly kibanaServiceUrl: pulumi.Output<string>;
    /**
     * The URI used for SSO to the Kibana Dashboard associated with this Elasticsearch.
     */
    declare public /*out*/ readonly kibanaSsoUri: pulumi.Output<string>;
    /**
     * The Azure Region where the Elasticsearch resource should exist. Changing this forces a new Elasticsearch to be created.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * A `logs` block as defined below.
     */
    declare public readonly logs: pulumi.Output<outputs.elasticcloud.ElasticsearchLogs | undefined>;
    /**
     * Specifies if the Elasticsearch should have monitoring configured? Defaults to `true`. Changing this forces a new Elasticsearch to be created.
     */
    declare public readonly monitoringEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The name which should be used for this Elasticsearch resource. Changing this forces a new Elasticsearch to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The name of the Resource Group where the Elasticsearch resource should exist. Changing this forces a new Elasticsearch to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * Specifies the name of the SKU for this Elasticsearch. Changing this forces a new Elasticsearch to be created.
     *
     * > **Note:** The SKU depends on the Elasticsearch Plans available for your account and is a combination of PlanID_Term.
     * Ex: If the plan ID is "planXYZ" and term is "Yearly", the SKU will be "planXYZ_Yearly".
     * You may find your eligible plans [here](https://portal.azure.com/#view/Microsoft_Azure_Marketplace/GalleryItemDetailsBladeNopdl/id/elastic.ec-azure-pp) or in the online documentation [here](https://azuremarketplace.microsoft.com/en-us/marketplace/apps/elastic.ec-azure-pp?tab=PlansAndPrice) for more details or in case of any issues with the SKU.
     */
    declare public readonly skuName: pulumi.Output<string>;
    /**
     * A mapping of tags which should be assigned to the Elasticsearch resource.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Elasticsearch resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ElasticsearchArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElasticsearchArgs | ElasticsearchState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ElasticsearchState | undefined;
            resourceInputs["elasticCloudDeploymentId"] = state?.elasticCloudDeploymentId;
            resourceInputs["elasticCloudEmailAddress"] = state?.elasticCloudEmailAddress;
            resourceInputs["elasticCloudSsoDefaultUrl"] = state?.elasticCloudSsoDefaultUrl;
            resourceInputs["elasticCloudUserId"] = state?.elasticCloudUserId;
            resourceInputs["elasticsearchServiceUrl"] = state?.elasticsearchServiceUrl;
            resourceInputs["kibanaServiceUrl"] = state?.kibanaServiceUrl;
            resourceInputs["kibanaSsoUri"] = state?.kibanaSsoUri;
            resourceInputs["location"] = state?.location;
            resourceInputs["logs"] = state?.logs;
            resourceInputs["monitoringEnabled"] = state?.monitoringEnabled;
            resourceInputs["name"] = state?.name;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["skuName"] = state?.skuName;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as ElasticsearchArgs | undefined;
            if (args?.elasticCloudEmailAddress === undefined && !opts.urn) {
                throw new Error("Missing required property 'elasticCloudEmailAddress'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.skuName === undefined && !opts.urn) {
                throw new Error("Missing required property 'skuName'");
            }
            resourceInputs["elasticCloudEmailAddress"] = args?.elasticCloudEmailAddress;
            resourceInputs["location"] = args?.location;
            resourceInputs["logs"] = args?.logs;
            resourceInputs["monitoringEnabled"] = args?.monitoringEnabled;
            resourceInputs["name"] = args?.name;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["skuName"] = args?.skuName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["elasticCloudDeploymentId"] = undefined /*out*/;
            resourceInputs["elasticCloudSsoDefaultUrl"] = undefined /*out*/;
            resourceInputs["elasticCloudUserId"] = undefined /*out*/;
            resourceInputs["elasticsearchServiceUrl"] = undefined /*out*/;
            resourceInputs["kibanaServiceUrl"] = undefined /*out*/;
            resourceInputs["kibanaSsoUri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Elasticsearch.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Elasticsearch resources.
 */
export interface ElasticsearchState {
    /**
     * The ID of the Deployment within Elastic Cloud.
     */
    elasticCloudDeploymentId?: pulumi.Input<string>;
    /**
     * Specifies the Email Address which should be associated with this Elasticsearch account. Changing this forces a new Elasticsearch to be created.
     */
    elasticCloudEmailAddress?: pulumi.Input<string>;
    /**
     * The Default URL used for Single Sign On (SSO) to Elastic Cloud.
     */
    elasticCloudSsoDefaultUrl?: pulumi.Input<string>;
    /**
     * The ID of the User Account within Elastic Cloud.
     */
    elasticCloudUserId?: pulumi.Input<string>;
    /**
     * The URL to the Elasticsearch Service associated with this Elasticsearch.
     */
    elasticsearchServiceUrl?: pulumi.Input<string>;
    /**
     * The URL to the Kibana Dashboard associated with this Elasticsearch.
     */
    kibanaServiceUrl?: pulumi.Input<string>;
    /**
     * The URI used for SSO to the Kibana Dashboard associated with this Elasticsearch.
     */
    kibanaSsoUri?: pulumi.Input<string>;
    /**
     * The Azure Region where the Elasticsearch resource should exist. Changing this forces a new Elasticsearch to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * A `logs` block as defined below.
     */
    logs?: pulumi.Input<inputs.elasticcloud.ElasticsearchLogs>;
    /**
     * Specifies if the Elasticsearch should have monitoring configured? Defaults to `true`. Changing this forces a new Elasticsearch to be created.
     */
    monitoringEnabled?: pulumi.Input<boolean>;
    /**
     * The name which should be used for this Elasticsearch resource. Changing this forces a new Elasticsearch to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Elasticsearch resource should exist. Changing this forces a new Elasticsearch to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * Specifies the name of the SKU for this Elasticsearch. Changing this forces a new Elasticsearch to be created.
     *
     * > **Note:** The SKU depends on the Elasticsearch Plans available for your account and is a combination of PlanID_Term.
     * Ex: If the plan ID is "planXYZ" and term is "Yearly", the SKU will be "planXYZ_Yearly".
     * You may find your eligible plans [here](https://portal.azure.com/#view/Microsoft_Azure_Marketplace/GalleryItemDetailsBladeNopdl/id/elastic.ec-azure-pp) or in the online documentation [here](https://azuremarketplace.microsoft.com/en-us/marketplace/apps/elastic.ec-azure-pp?tab=PlansAndPrice) for more details or in case of any issues with the SKU.
     */
    skuName?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Elasticsearch resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Elasticsearch resource.
 */
export interface ElasticsearchArgs {
    /**
     * Specifies the Email Address which should be associated with this Elasticsearch account. Changing this forces a new Elasticsearch to be created.
     */
    elasticCloudEmailAddress: pulumi.Input<string>;
    /**
     * The Azure Region where the Elasticsearch resource should exist. Changing this forces a new Elasticsearch to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * A `logs` block as defined below.
     */
    logs?: pulumi.Input<inputs.elasticcloud.ElasticsearchLogs>;
    /**
     * Specifies if the Elasticsearch should have monitoring configured? Defaults to `true`. Changing this forces a new Elasticsearch to be created.
     */
    monitoringEnabled?: pulumi.Input<boolean>;
    /**
     * The name which should be used for this Elasticsearch resource. Changing this forces a new Elasticsearch to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Elasticsearch resource should exist. Changing this forces a new Elasticsearch to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Specifies the name of the SKU for this Elasticsearch. Changing this forces a new Elasticsearch to be created.
     *
     * > **Note:** The SKU depends on the Elasticsearch Plans available for your account and is a combination of PlanID_Term.
     * Ex: If the plan ID is "planXYZ" and term is "Yearly", the SKU will be "planXYZ_Yearly".
     * You may find your eligible plans [here](https://portal.azure.com/#view/Microsoft_Azure_Marketplace/GalleryItemDetailsBladeNopdl/id/elastic.ec-azure-pp) or in the online documentation [here](https://azuremarketplace.microsoft.com/en-us/marketplace/apps/elastic.ec-azure-pp?tab=PlansAndPrice) for more details or in case of any issues with the SKU.
     */
    skuName: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Elasticsearch resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
