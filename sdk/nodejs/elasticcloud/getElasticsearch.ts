// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to access information about an existing Elasticsearch resource.
 */
export function getElasticsearch(args: GetElasticsearchArgs, opts?: pulumi.InvokeOptions): Promise<GetElasticsearchResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure:elasticcloud/getElasticsearch:getElasticsearch", {
        "logs": args.logs,
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

/**
 * A collection of arguments for invoking getElasticsearch.
 */
export interface GetElasticsearchArgs {
    /**
     * A `logs` block as defined below.
     */
    logs?: inputs.elasticcloud.GetElasticsearchLog[];
    /**
     * The name of the Elasticsearch resource.
     */
    name: string;
    /**
     * The name of the resource group in which the Elasticsearch exists.
     */
    resourceGroupName: string;
}

/**
 * A collection of values returned by getElasticsearch.
 */
export interface GetElasticsearchResult {
    /**
     * The ID of the Deployment within Elastic Cloud.
     */
    readonly elasticCloudDeploymentId: string;
    /**
     * The Email Address which is associated with this Elasticsearch account.
     */
    readonly elasticCloudEmailAddress: string;
    /**
     * The Default URL used for Single Sign On (SSO) to Elastic Cloud.
     */
    readonly elasticCloudSsoDefaultUrl: string;
    /**
     * The ID of the User Account within Elastic Cloud.
     */
    readonly elasticCloudUserId: string;
    /**
     * The URL to the Elasticsearch Service associated with this Elasticsearch.
     */
    readonly elasticsearchServiceUrl: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The URL to the Kibana Dashboard associated with this Elasticsearch.
     */
    readonly kibanaServiceUrl: string;
    /**
     * The URI used for SSO to the Kibana Dashboard associated with this Elasticsearch.
     */
    readonly kibanaSsoUri: string;
    /**
     * The Azure Region in which this Elasticsearch exists.
     */
    readonly location: string;
    /**
     * A `logs` block as defined below.
     */
    readonly logs: outputs.elasticcloud.GetElasticsearchLog[];
    /**
     * Specifies if monitoring is enabled on this Elasticsearch or not.
     */
    readonly monitoringEnabled: boolean;
    /**
     * The name (key) of the Tag which should be filtered.
     */
    readonly name: string;
    readonly resourceGroupName: string;
    /**
     * The name of the SKU used for this Elasticsearch.
     */
    readonly skuName: string;
    /**
     * A mapping of tags assigned to the Elasticsearch.
     */
    readonly tags: {[key: string]: string};
}
/**
 * Use this data source to access information about an existing Elasticsearch resource.
 */
export function getElasticsearchOutput(args: GetElasticsearchOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetElasticsearchResult> {
    return pulumi.output(args).apply((a: any) => getElasticsearch(a, opts))
}

/**
 * A collection of arguments for invoking getElasticsearch.
 */
export interface GetElasticsearchOutputArgs {
    /**
     * A `logs` block as defined below.
     */
    logs?: pulumi.Input<pulumi.Input<inputs.elasticcloud.GetElasticsearchLogArgs>[]>;
    /**
     * The name of the Elasticsearch resource.
     */
    name: pulumi.Input<string>;
    /**
     * The name of the resource group in which the Elasticsearch exists.
     */
    resourceGroupName: pulumi.Input<string>;
}
