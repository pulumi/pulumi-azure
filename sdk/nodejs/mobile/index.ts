// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetNetworkAttachedDataNetworkArgs, GetNetworkAttachedDataNetworkResult, GetNetworkAttachedDataNetworkOutputArgs } from "./getNetworkAttachedDataNetwork";
export const getNetworkAttachedDataNetwork: typeof import("./getNetworkAttachedDataNetwork").getNetworkAttachedDataNetwork = null as any;
export const getNetworkAttachedDataNetworkOutput: typeof import("./getNetworkAttachedDataNetwork").getNetworkAttachedDataNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkAttachedDataNetwork","getNetworkAttachedDataNetworkOutput"], () => require("./getNetworkAttachedDataNetwork"));

export { GetNetworkDataNetworkArgs, GetNetworkDataNetworkResult, GetNetworkDataNetworkOutputArgs } from "./getNetworkDataNetwork";
export const getNetworkDataNetwork: typeof import("./getNetworkDataNetwork").getNetworkDataNetwork = null as any;
export const getNetworkDataNetworkOutput: typeof import("./getNetworkDataNetwork").getNetworkDataNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkDataNetwork","getNetworkDataNetworkOutput"], () => require("./getNetworkDataNetwork"));

export { GetNetworkPacketCoreControlPlaneArgs, GetNetworkPacketCoreControlPlaneResult, GetNetworkPacketCoreControlPlaneOutputArgs } from "./getNetworkPacketCoreControlPlane";
export const getNetworkPacketCoreControlPlane: typeof import("./getNetworkPacketCoreControlPlane").getNetworkPacketCoreControlPlane = null as any;
export const getNetworkPacketCoreControlPlaneOutput: typeof import("./getNetworkPacketCoreControlPlane").getNetworkPacketCoreControlPlaneOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkPacketCoreControlPlane","getNetworkPacketCoreControlPlaneOutput"], () => require("./getNetworkPacketCoreControlPlane"));

export { GetNetworkPacketCoreDataPlaneArgs, GetNetworkPacketCoreDataPlaneResult, GetNetworkPacketCoreDataPlaneOutputArgs } from "./getNetworkPacketCoreDataPlane";
export const getNetworkPacketCoreDataPlane: typeof import("./getNetworkPacketCoreDataPlane").getNetworkPacketCoreDataPlane = null as any;
export const getNetworkPacketCoreDataPlaneOutput: typeof import("./getNetworkPacketCoreDataPlane").getNetworkPacketCoreDataPlaneOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkPacketCoreDataPlane","getNetworkPacketCoreDataPlaneOutput"], () => require("./getNetworkPacketCoreDataPlane"));

export { GetNetworkServiceArgs, GetNetworkServiceResult, GetNetworkServiceOutputArgs } from "./getNetworkService";
export const getNetworkService: typeof import("./getNetworkService").getNetworkService = null as any;
export const getNetworkServiceOutput: typeof import("./getNetworkService").getNetworkServiceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkService","getNetworkServiceOutput"], () => require("./getNetworkService"));

export { GetNetworkSimArgs, GetNetworkSimResult, GetNetworkSimOutputArgs } from "./getNetworkSim";
export const getNetworkSim: typeof import("./getNetworkSim").getNetworkSim = null as any;
export const getNetworkSimOutput: typeof import("./getNetworkSim").getNetworkSimOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkSim","getNetworkSimOutput"], () => require("./getNetworkSim"));

export { GetNetworkSimGroupArgs, GetNetworkSimGroupResult, GetNetworkSimGroupOutputArgs } from "./getNetworkSimGroup";
export const getNetworkSimGroup: typeof import("./getNetworkSimGroup").getNetworkSimGroup = null as any;
export const getNetworkSimGroupOutput: typeof import("./getNetworkSimGroup").getNetworkSimGroupOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkSimGroup","getNetworkSimGroupOutput"], () => require("./getNetworkSimGroup"));

export { GetNetworkSimPolicyArgs, GetNetworkSimPolicyResult, GetNetworkSimPolicyOutputArgs } from "./getNetworkSimPolicy";
export const getNetworkSimPolicy: typeof import("./getNetworkSimPolicy").getNetworkSimPolicy = null as any;
export const getNetworkSimPolicyOutput: typeof import("./getNetworkSimPolicy").getNetworkSimPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkSimPolicy","getNetworkSimPolicyOutput"], () => require("./getNetworkSimPolicy"));

export { GetNetworkSiteArgs, GetNetworkSiteResult, GetNetworkSiteOutputArgs } from "./getNetworkSite";
export const getNetworkSite: typeof import("./getNetworkSite").getNetworkSite = null as any;
export const getNetworkSiteOutput: typeof import("./getNetworkSite").getNetworkSiteOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkSite","getNetworkSiteOutput"], () => require("./getNetworkSite"));

export { GetNetworkSliceArgs, GetNetworkSliceResult, GetNetworkSliceOutputArgs } from "./getNetworkSlice";
export const getNetworkSlice: typeof import("./getNetworkSlice").getNetworkSlice = null as any;
export const getNetworkSliceOutput: typeof import("./getNetworkSlice").getNetworkSliceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkSlice","getNetworkSliceOutput"], () => require("./getNetworkSlice"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { NetworkAttachedDataNetworkArgs, NetworkAttachedDataNetworkState } from "./networkAttachedDataNetwork";
export type NetworkAttachedDataNetwork = import("./networkAttachedDataNetwork").NetworkAttachedDataNetwork;
export const NetworkAttachedDataNetwork: typeof import("./networkAttachedDataNetwork").NetworkAttachedDataNetwork = null as any;
utilities.lazyLoad(exports, ["NetworkAttachedDataNetwork"], () => require("./networkAttachedDataNetwork"));

export { NetworkDataNetworkArgs, NetworkDataNetworkState } from "./networkDataNetwork";
export type NetworkDataNetwork = import("./networkDataNetwork").NetworkDataNetwork;
export const NetworkDataNetwork: typeof import("./networkDataNetwork").NetworkDataNetwork = null as any;
utilities.lazyLoad(exports, ["NetworkDataNetwork"], () => require("./networkDataNetwork"));

export { NetworkPacketCoreControlPlaneArgs, NetworkPacketCoreControlPlaneState } from "./networkPacketCoreControlPlane";
export type NetworkPacketCoreControlPlane = import("./networkPacketCoreControlPlane").NetworkPacketCoreControlPlane;
export const NetworkPacketCoreControlPlane: typeof import("./networkPacketCoreControlPlane").NetworkPacketCoreControlPlane = null as any;
utilities.lazyLoad(exports, ["NetworkPacketCoreControlPlane"], () => require("./networkPacketCoreControlPlane"));

export { NetworkPacketCoreDataPlaneArgs, NetworkPacketCoreDataPlaneState } from "./networkPacketCoreDataPlane";
export type NetworkPacketCoreDataPlane = import("./networkPacketCoreDataPlane").NetworkPacketCoreDataPlane;
export const NetworkPacketCoreDataPlane: typeof import("./networkPacketCoreDataPlane").NetworkPacketCoreDataPlane = null as any;
utilities.lazyLoad(exports, ["NetworkPacketCoreDataPlane"], () => require("./networkPacketCoreDataPlane"));

export { NetworkServiceArgs, NetworkServiceState } from "./networkService";
export type NetworkService = import("./networkService").NetworkService;
export const NetworkService: typeof import("./networkService").NetworkService = null as any;
utilities.lazyLoad(exports, ["NetworkService"], () => require("./networkService"));

export { NetworkSimArgs, NetworkSimState } from "./networkSim";
export type NetworkSim = import("./networkSim").NetworkSim;
export const NetworkSim: typeof import("./networkSim").NetworkSim = null as any;
utilities.lazyLoad(exports, ["NetworkSim"], () => require("./networkSim"));

export { NetworkSimGroupArgs, NetworkSimGroupState } from "./networkSimGroup";
export type NetworkSimGroup = import("./networkSimGroup").NetworkSimGroup;
export const NetworkSimGroup: typeof import("./networkSimGroup").NetworkSimGroup = null as any;
utilities.lazyLoad(exports, ["NetworkSimGroup"], () => require("./networkSimGroup"));

export { NetworkSimPolicyArgs, NetworkSimPolicyState } from "./networkSimPolicy";
export type NetworkSimPolicy = import("./networkSimPolicy").NetworkSimPolicy;
export const NetworkSimPolicy: typeof import("./networkSimPolicy").NetworkSimPolicy = null as any;
utilities.lazyLoad(exports, ["NetworkSimPolicy"], () => require("./networkSimPolicy"));

export { NetworkSiteArgs, NetworkSiteState } from "./networkSite";
export type NetworkSite = import("./networkSite").NetworkSite;
export const NetworkSite: typeof import("./networkSite").NetworkSite = null as any;
utilities.lazyLoad(exports, ["NetworkSite"], () => require("./networkSite"));

export { NetworkSliceArgs, NetworkSliceState } from "./networkSlice";
export type NetworkSlice = import("./networkSlice").NetworkSlice;
export const NetworkSlice: typeof import("./networkSlice").NetworkSlice = null as any;
utilities.lazyLoad(exports, ["NetworkSlice"], () => require("./networkSlice"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:mobile/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "azure:mobile/networkAttachedDataNetwork:NetworkAttachedDataNetwork":
                return new NetworkAttachedDataNetwork(name, <any>undefined, { urn })
            case "azure:mobile/networkDataNetwork:NetworkDataNetwork":
                return new NetworkDataNetwork(name, <any>undefined, { urn })
            case "azure:mobile/networkPacketCoreControlPlane:NetworkPacketCoreControlPlane":
                return new NetworkPacketCoreControlPlane(name, <any>undefined, { urn })
            case "azure:mobile/networkPacketCoreDataPlane:NetworkPacketCoreDataPlane":
                return new NetworkPacketCoreDataPlane(name, <any>undefined, { urn })
            case "azure:mobile/networkService:NetworkService":
                return new NetworkService(name, <any>undefined, { urn })
            case "azure:mobile/networkSim:NetworkSim":
                return new NetworkSim(name, <any>undefined, { urn })
            case "azure:mobile/networkSimGroup:NetworkSimGroup":
                return new NetworkSimGroup(name, <any>undefined, { urn })
            case "azure:mobile/networkSimPolicy:NetworkSimPolicy":
                return new NetworkSimPolicy(name, <any>undefined, { urn })
            case "azure:mobile/networkSite:NetworkSite":
                return new NetworkSite(name, <any>undefined, { urn })
            case "azure:mobile/networkSlice:NetworkSlice":
                return new NetworkSlice(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "mobile/network", _module)
pulumi.runtime.registerResourceModule("azure", "mobile/networkAttachedDataNetwork", _module)
pulumi.runtime.registerResourceModule("azure", "mobile/networkDataNetwork", _module)
pulumi.runtime.registerResourceModule("azure", "mobile/networkPacketCoreControlPlane", _module)
pulumi.runtime.registerResourceModule("azure", "mobile/networkPacketCoreDataPlane", _module)
pulumi.runtime.registerResourceModule("azure", "mobile/networkService", _module)
pulumi.runtime.registerResourceModule("azure", "mobile/networkSim", _module)
pulumi.runtime.registerResourceModule("azure", "mobile/networkSimGroup", _module)
pulumi.runtime.registerResourceModule("azure", "mobile/networkSimPolicy", _module)
pulumi.runtime.registerResourceModule("azure", "mobile/networkSite", _module)
pulumi.runtime.registerResourceModule("azure", "mobile/networkSlice", _module)
