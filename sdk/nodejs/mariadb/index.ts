// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ConfigurationArgs, ConfigurationState } from "./configuration";
export type Configuration = import("./configuration").Configuration;
export const Configuration: typeof import("./configuration").Configuration = null as any;
utilities.lazyLoad(exports, ["Configuration"], () => require("./configuration"));

export { DatabaseArgs, DatabaseState } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { FirewallRuleArgs, FirewallRuleState } from "./firewallRule";
export type FirewallRule = import("./firewallRule").FirewallRule;
export const FirewallRule: typeof import("./firewallRule").FirewallRule = null as any;
utilities.lazyLoad(exports, ["FirewallRule"], () => require("./firewallRule"));

export { GetMariaDbServerArgs, GetMariaDbServerResult, GetMariaDbServerOutputArgs } from "./getMariaDbServer";
export const getMariaDbServer: typeof import("./getMariaDbServer").getMariaDbServer = null as any;
export const getMariaDbServerOutput: typeof import("./getMariaDbServer").getMariaDbServerOutput = null as any;
utilities.lazyLoad(exports, ["getMariaDbServer","getMariaDbServerOutput"], () => require("./getMariaDbServer"));

export { ServerArgs, ServerState } from "./server";
export type Server = import("./server").Server;
export const Server: typeof import("./server").Server = null as any;
utilities.lazyLoad(exports, ["Server"], () => require("./server"));

export { VirtualNetworkRuleArgs, VirtualNetworkRuleState } from "./virtualNetworkRule";
export type VirtualNetworkRule = import("./virtualNetworkRule").VirtualNetworkRule;
export const VirtualNetworkRule: typeof import("./virtualNetworkRule").VirtualNetworkRule = null as any;
utilities.lazyLoad(exports, ["VirtualNetworkRule"], () => require("./virtualNetworkRule"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:mariadb/configuration:Configuration":
                return new Configuration(name, <any>undefined, { urn })
            case "azure:mariadb/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "azure:mariadb/firewallRule:FirewallRule":
                return new FirewallRule(name, <any>undefined, { urn })
            case "azure:mariadb/server:Server":
                return new Server(name, <any>undefined, { urn })
            case "azure:mariadb/virtualNetworkRule:VirtualNetworkRule":
                return new VirtualNetworkRule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "mariadb/configuration", _module)
pulumi.runtime.registerResourceModule("azure", "mariadb/database", _module)
pulumi.runtime.registerResourceModule("azure", "mariadb/firewallRule", _module)
pulumi.runtime.registerResourceModule("azure", "mariadb/server", _module)
pulumi.runtime.registerResourceModule("azure", "mariadb/virtualNetworkRule", _module)
