// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Active Directory Domain Service Trust.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleService = azure.domainservices.getService({
 *     name: "example-ds",
 *     resourceGroupName: "example-rg",
 * });
 * const exampleServiceTrust = new azure.domainservices.ServiceTrust("exampleServiceTrust", {
 *     domainServiceId: exampleService.then(exampleService => exampleService.id),
 *     trustedDomainFqdn: "example.com",
 *     trustedDomainDnsIps: [
 *         "10.1.0.3",
 *         "10.1.0.4",
 *     ],
 *     password: "Password123",
 * });
 * ```
 *
 * ## Import
 *
 * Active Directory Domain Service Trusts can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:domainservices/serviceTrust:ServiceTrust example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.AAD/domainServices/DomainService1/trusts/trust1
 * ```
 */
export class ServiceTrust extends pulumi.CustomResource {
    /**
     * Get an existing ServiceTrust resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceTrustState, opts?: pulumi.CustomResourceOptions): ServiceTrust {
        return new ServiceTrust(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:domainservices/serviceTrust:ServiceTrust';

    /**
     * Returns true if the given object is an instance of ServiceTrust.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceTrust {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceTrust.__pulumiType;
    }

    /**
     * The ID of the Active Directory Domain Service. Changing this forces a new Active Directory Domain Service Trust to be created.
     */
    public readonly domainServiceId!: pulumi.Output<string>;
    /**
     * The name which should be used for this Active Directory Domain Service Trust. Changing this forces a new Active Directory Domain Service Trust to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The password of the inbound trust set in the on-premise Active Directory Domain Service.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Specifies a list of DNS IPs that are used to resolve the on-premise Active Directory Domain Service.
     */
    public readonly trustedDomainDnsIps!: pulumi.Output<string[]>;
    /**
     * The FQDN of the on-premise Active Directory Domain Service.
     */
    public readonly trustedDomainFqdn!: pulumi.Output<string>;

    /**
     * Create a ServiceTrust resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceTrustArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceTrustArgs | ServiceTrustState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceTrustState | undefined;
            resourceInputs["domainServiceId"] = state ? state.domainServiceId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["trustedDomainDnsIps"] = state ? state.trustedDomainDnsIps : undefined;
            resourceInputs["trustedDomainFqdn"] = state ? state.trustedDomainFqdn : undefined;
        } else {
            const args = argsOrState as ServiceTrustArgs | undefined;
            if ((!args || args.domainServiceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainServiceId'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.trustedDomainDnsIps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trustedDomainDnsIps'");
            }
            if ((!args || args.trustedDomainFqdn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trustedDomainFqdn'");
            }
            resourceInputs["domainServiceId"] = args ? args.domainServiceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["trustedDomainDnsIps"] = args ? args.trustedDomainDnsIps : undefined;
            resourceInputs["trustedDomainFqdn"] = args ? args.trustedDomainFqdn : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceTrust.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceTrust resources.
 */
export interface ServiceTrustState {
    /**
     * The ID of the Active Directory Domain Service. Changing this forces a new Active Directory Domain Service Trust to be created.
     */
    domainServiceId?: pulumi.Input<string>;
    /**
     * The name which should be used for this Active Directory Domain Service Trust. Changing this forces a new Active Directory Domain Service Trust to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The password of the inbound trust set in the on-premise Active Directory Domain Service.
     */
    password?: pulumi.Input<string>;
    /**
     * Specifies a list of DNS IPs that are used to resolve the on-premise Active Directory Domain Service.
     */
    trustedDomainDnsIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The FQDN of the on-premise Active Directory Domain Service.
     */
    trustedDomainFqdn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceTrust resource.
 */
export interface ServiceTrustArgs {
    /**
     * The ID of the Active Directory Domain Service. Changing this forces a new Active Directory Domain Service Trust to be created.
     */
    domainServiceId: pulumi.Input<string>;
    /**
     * The name which should be used for this Active Directory Domain Service Trust. Changing this forces a new Active Directory Domain Service Trust to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The password of the inbound trust set in the on-premise Active Directory Domain Service.
     */
    password: pulumi.Input<string>;
    /**
     * Specifies a list of DNS IPs that are used to resolve the on-premise Active Directory Domain Service.
     */
    trustedDomainDnsIps: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The FQDN of the on-premise Active Directory Domain Service.
     */
    trustedDomainFqdn: pulumi.Input<string>;
}
