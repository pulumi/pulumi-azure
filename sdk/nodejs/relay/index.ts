// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { HybridConnectionArgs, HybridConnectionState } from "./hybridConnection";
export type HybridConnection = import("./hybridConnection").HybridConnection;
export const HybridConnection: typeof import("./hybridConnection").HybridConnection = null as any;
utilities.lazyLoad(exports, ["HybridConnection"], () => require("./hybridConnection"));

export { HybridConnectionAuthorizationRuleArgs, HybridConnectionAuthorizationRuleState } from "./hybridConnectionAuthorizationRule";
export type HybridConnectionAuthorizationRule = import("./hybridConnectionAuthorizationRule").HybridConnectionAuthorizationRule;
export const HybridConnectionAuthorizationRule: typeof import("./hybridConnectionAuthorizationRule").HybridConnectionAuthorizationRule = null as any;
utilities.lazyLoad(exports, ["HybridConnectionAuthorizationRule"], () => require("./hybridConnectionAuthorizationRule"));

export { NamespaceArgs, NamespaceState } from "./namespace";
export type Namespace = import("./namespace").Namespace;
export const Namespace: typeof import("./namespace").Namespace = null as any;
utilities.lazyLoad(exports, ["Namespace"], () => require("./namespace"));

export { NamespaceAuthorizationRuleArgs, NamespaceAuthorizationRuleState } from "./namespaceAuthorizationRule";
export type NamespaceAuthorizationRule = import("./namespaceAuthorizationRule").NamespaceAuthorizationRule;
export const NamespaceAuthorizationRule: typeof import("./namespaceAuthorizationRule").NamespaceAuthorizationRule = null as any;
utilities.lazyLoad(exports, ["NamespaceAuthorizationRule"], () => require("./namespaceAuthorizationRule"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:relay/hybridConnection:HybridConnection":
                return new HybridConnection(name, <any>undefined, { urn })
            case "azure:relay/hybridConnectionAuthorizationRule:HybridConnectionAuthorizationRule":
                return new HybridConnectionAuthorizationRule(name, <any>undefined, { urn })
            case "azure:relay/namespace:Namespace":
                return new Namespace(name, <any>undefined, { urn })
            case "azure:relay/namespaceAuthorizationRule:NamespaceAuthorizationRule":
                return new NamespaceAuthorizationRule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "relay/hybridConnection", _module)
pulumi.runtime.registerResourceModule("azure", "relay/hybridConnectionAuthorizationRule", _module)
pulumi.runtime.registerResourceModule("azure", "relay/namespace", _module)
pulumi.runtime.registerResourceModule("azure", "relay/namespaceAuthorizationRule", _module)
