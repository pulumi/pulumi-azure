// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Subscription Policy Exemption.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.core.getSubscription({});
 * const exampleGetPolicySetDefinition = azure.policy.getPolicySetDefinition({
 *     displayName: "Audit machines with insecure password security settings",
 * });
 * const exampleSubscriptionPolicyAssignment = new azure.core.SubscriptionPolicyAssignment("example", {
 *     name: "exampleAssignment",
 *     subscriptionId: example.then(example => example.id),
 *     policyDefinitionId: exampleGetPolicySetDefinition.then(exampleGetPolicySetDefinition => exampleGetPolicySetDefinition.id),
 *     location: "westus",
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * const exampleSubscriptionPolicyExemption = new azure.core.SubscriptionPolicyExemption("example", {
 *     name: "exampleExemption",
 *     subscriptionId: example.then(example => example.id),
 *     policyAssignmentId: exampleSubscriptionPolicyAssignment.id,
 *     exemptionCategory: "Mitigated",
 * });
 * ```
 *
 * ## Import
 *
 * Policy Exemptions can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:core/subscriptionPolicyExemption:SubscriptionPolicyExemption exemption1 /subscriptions/00000000-0000-0000-000000000000/providers/Microsoft.Authorization/policyExemptions/exemption1
 * ```
 */
export class SubscriptionPolicyExemption extends pulumi.CustomResource {
    /**
     * Get an existing SubscriptionPolicyExemption resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubscriptionPolicyExemptionState, opts?: pulumi.CustomResourceOptions): SubscriptionPolicyExemption {
        return new SubscriptionPolicyExemption(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:core/subscriptionPolicyExemption:SubscriptionPolicyExemption';

    /**
     * Returns true if the given object is an instance of SubscriptionPolicyExemption.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SubscriptionPolicyExemption {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SubscriptionPolicyExemption.__pulumiType;
    }

    /**
     * A description to use for this Policy Exemption.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * A friendly display name to use for this Policy Exemption.
     */
    declare public readonly displayName: pulumi.Output<string | undefined>;
    /**
     * The category of this policy exemption. Possible values are `Waiver` and `Mitigated`.
     */
    declare public readonly exemptionCategory: pulumi.Output<string>;
    /**
     * The expiration date and time in UTC ISO 8601 format of this policy exemption.
     */
    declare public readonly expiresOn: pulumi.Output<string | undefined>;
    /**
     * The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
     */
    declare public readonly metadata: pulumi.Output<string>;
    /**
     * The name of the Policy Exemption. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID of the Policy Assignment to be exempted at the specified Scope. Changing this forces a new resource to be created.
     */
    declare public readonly policyAssignmentId: pulumi.Output<string>;
    /**
     * The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
     */
    declare public readonly policyDefinitionReferenceIds: pulumi.Output<string[] | undefined>;
    /**
     * The Subscription ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
     */
    declare public readonly subscriptionId: pulumi.Output<string>;

    /**
     * Create a SubscriptionPolicyExemption resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubscriptionPolicyExemptionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubscriptionPolicyExemptionArgs | SubscriptionPolicyExemptionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubscriptionPolicyExemptionState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["exemptionCategory"] = state?.exemptionCategory;
            resourceInputs["expiresOn"] = state?.expiresOn;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["name"] = state?.name;
            resourceInputs["policyAssignmentId"] = state?.policyAssignmentId;
            resourceInputs["policyDefinitionReferenceIds"] = state?.policyDefinitionReferenceIds;
            resourceInputs["subscriptionId"] = state?.subscriptionId;
        } else {
            const args = argsOrState as SubscriptionPolicyExemptionArgs | undefined;
            if (args?.exemptionCategory === undefined && !opts.urn) {
                throw new Error("Missing required property 'exemptionCategory'");
            }
            if (args?.policyAssignmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'policyAssignmentId'");
            }
            if (args?.subscriptionId === undefined && !opts.urn) {
                throw new Error("Missing required property 'subscriptionId'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["exemptionCategory"] = args?.exemptionCategory;
            resourceInputs["expiresOn"] = args?.expiresOn;
            resourceInputs["metadata"] = args?.metadata;
            resourceInputs["name"] = args?.name;
            resourceInputs["policyAssignmentId"] = args?.policyAssignmentId;
            resourceInputs["policyDefinitionReferenceIds"] = args?.policyDefinitionReferenceIds;
            resourceInputs["subscriptionId"] = args?.subscriptionId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SubscriptionPolicyExemption.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SubscriptionPolicyExemption resources.
 */
export interface SubscriptionPolicyExemptionState {
    /**
     * A description to use for this Policy Exemption.
     */
    description?: pulumi.Input<string>;
    /**
     * A friendly display name to use for this Policy Exemption.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The category of this policy exemption. Possible values are `Waiver` and `Mitigated`.
     */
    exemptionCategory?: pulumi.Input<string>;
    /**
     * The expiration date and time in UTC ISO 8601 format of this policy exemption.
     */
    expiresOn?: pulumi.Input<string>;
    /**
     * The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
     */
    metadata?: pulumi.Input<string>;
    /**
     * The name of the Policy Exemption. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Policy Assignment to be exempted at the specified Scope. Changing this forces a new resource to be created.
     */
    policyAssignmentId?: pulumi.Input<string>;
    /**
     * The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
     */
    policyDefinitionReferenceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Subscription ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
     */
    subscriptionId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SubscriptionPolicyExemption resource.
 */
export interface SubscriptionPolicyExemptionArgs {
    /**
     * A description to use for this Policy Exemption.
     */
    description?: pulumi.Input<string>;
    /**
     * A friendly display name to use for this Policy Exemption.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The category of this policy exemption. Possible values are `Waiver` and `Mitigated`.
     */
    exemptionCategory: pulumi.Input<string>;
    /**
     * The expiration date and time in UTC ISO 8601 format of this policy exemption.
     */
    expiresOn?: pulumi.Input<string>;
    /**
     * The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
     */
    metadata?: pulumi.Input<string>;
    /**
     * The name of the Policy Exemption. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Policy Assignment to be exempted at the specified Scope. Changing this forces a new resource to be created.
     */
    policyAssignmentId: pulumi.Input<string>;
    /**
     * The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
     */
    policyDefinitionReferenceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Subscription ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
     */
    subscriptionId: pulumi.Input<string>;
}
