// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Resource Group Policy Assignment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleDefinition = new azure.policy.Definition("example", {
 *     name: "only-deploy-in-westeurope",
 *     policyType: "Custom",
 *     mode: "All",
 *     displayName: "my-policy-definition",
 *     policyRule: ` {
 *     "if": {
 *       "not": {
 *         "field": "location",
 *         "equals": "westeurope"
 *       }
 *     },
 *     "then": {
 *       "effect": "Deny"
 *     }
 *   }
 * `,
 * });
 * const exampleResourceGroupPolicyAssignment = new azure.core.ResourceGroupPolicyAssignment("example", {
 *     name: "example",
 *     resourceGroupId: example.id,
 *     policyDefinitionId: exampleDefinition.id,
 *     parameters: `    {
 *       "tagName": {
 *         "value": "Business Unit"
 *       },
 *       "tagValue": {
 *         "value": "BU"
 *       }
 *     }
 * `,
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Authorization` - 2022-06-01
 *
 * ## Import
 *
 * Resource Group Policy Assignments can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:core/resourceGroupPolicyAssignment:ResourceGroupPolicyAssignment example /subscriptions/00000000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Authorization/policyAssignments/assignment1
 * ```
 */
export class ResourceGroupPolicyAssignment extends pulumi.CustomResource {
    /**
     * Get an existing ResourceGroupPolicyAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceGroupPolicyAssignmentState, opts?: pulumi.CustomResourceOptions): ResourceGroupPolicyAssignment {
        return new ResourceGroupPolicyAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:core/resourceGroupPolicyAssignment:ResourceGroupPolicyAssignment';

    /**
     * Returns true if the given object is an instance of ResourceGroupPolicyAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceGroupPolicyAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceGroupPolicyAssignment.__pulumiType;
    }

    /**
     * A description which should be used for this Policy Assignment.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The Display Name for this Policy Assignment.
     */
    declare public readonly displayName: pulumi.Output<string | undefined>;
    /**
     * Specifies if this Policy should be enforced or not? Defaults to `true`.
     */
    declare public readonly enforce: pulumi.Output<boolean | undefined>;
    /**
     * An `identity` block as defined below.
     *
     * > **Note:** The `location` field must also be specified when `identity` is specified.
     */
    declare public readonly identity: pulumi.Output<outputs.core.ResourceGroupPolicyAssignmentIdentity | undefined>;
    /**
     * The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * A JSON mapping of any Metadata for this Policy.
     */
    declare public readonly metadata: pulumi.Output<string>;
    /**
     * The name which should be used for this Policy Assignment. Changing this forces a new Policy Assignment to be created. Cannot exceed 64 characters in length.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * One or more `nonComplianceMessage` blocks as defined below.
     */
    declare public readonly nonComplianceMessages: pulumi.Output<outputs.core.ResourceGroupPolicyAssignmentNonComplianceMessage[] | undefined>;
    /**
     * Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.
     */
    declare public readonly notScopes: pulumi.Output<string[] | undefined>;
    /**
     * One or more `overrides` blocks as defined below. More detail about `overrides` and `resourceSelectors` see [policy assignment structure](https://learn.microsoft.com/en-us/azure/governance/policy/concepts/assignment-structure)
     */
    declare public readonly overrides: pulumi.Output<outputs.core.ResourceGroupPolicyAssignmentOverride[] | undefined>;
    /**
     * A JSON mapping of any Parameters for this Policy.
     */
    declare public readonly parameters: pulumi.Output<string | undefined>;
    /**
     * The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.
     */
    declare public readonly policyDefinitionId: pulumi.Output<string>;
    /**
     * The ID of the Resource Group where this Policy Assignment should be created. Changing this forces a new Policy Assignment to be created.
     */
    declare public readonly resourceGroupId: pulumi.Output<string>;
    /**
     * One or more `resourceSelectors` blocks as defined below to filter polices by resource properties.
     */
    declare public readonly resourceSelectors: pulumi.Output<outputs.core.ResourceGroupPolicyAssignmentResourceSelector[] | undefined>;

    /**
     * Create a ResourceGroupPolicyAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceGroupPolicyAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceGroupPolicyAssignmentArgs | ResourceGroupPolicyAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceGroupPolicyAssignmentState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["enforce"] = state?.enforce;
            resourceInputs["identity"] = state?.identity;
            resourceInputs["location"] = state?.location;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["name"] = state?.name;
            resourceInputs["nonComplianceMessages"] = state?.nonComplianceMessages;
            resourceInputs["notScopes"] = state?.notScopes;
            resourceInputs["overrides"] = state?.overrides;
            resourceInputs["parameters"] = state?.parameters;
            resourceInputs["policyDefinitionId"] = state?.policyDefinitionId;
            resourceInputs["resourceGroupId"] = state?.resourceGroupId;
            resourceInputs["resourceSelectors"] = state?.resourceSelectors;
        } else {
            const args = argsOrState as ResourceGroupPolicyAssignmentArgs | undefined;
            if (args?.policyDefinitionId === undefined && !opts.urn) {
                throw new Error("Missing required property 'policyDefinitionId'");
            }
            if (args?.resourceGroupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupId'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["enforce"] = args?.enforce;
            resourceInputs["identity"] = args?.identity;
            resourceInputs["location"] = args?.location;
            resourceInputs["metadata"] = args?.metadata;
            resourceInputs["name"] = args?.name;
            resourceInputs["nonComplianceMessages"] = args?.nonComplianceMessages;
            resourceInputs["notScopes"] = args?.notScopes;
            resourceInputs["overrides"] = args?.overrides;
            resourceInputs["parameters"] = args?.parameters;
            resourceInputs["policyDefinitionId"] = args?.policyDefinitionId;
            resourceInputs["resourceGroupId"] = args?.resourceGroupId;
            resourceInputs["resourceSelectors"] = args?.resourceSelectors;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceGroupPolicyAssignment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ResourceGroupPolicyAssignment resources.
 */
export interface ResourceGroupPolicyAssignmentState {
    /**
     * A description which should be used for this Policy Assignment.
     */
    description?: pulumi.Input<string>;
    /**
     * The Display Name for this Policy Assignment.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Specifies if this Policy should be enforced or not? Defaults to `true`.
     */
    enforce?: pulumi.Input<boolean>;
    /**
     * An `identity` block as defined below.
     *
     * > **Note:** The `location` field must also be specified when `identity` is specified.
     */
    identity?: pulumi.Input<inputs.core.ResourceGroupPolicyAssignmentIdentity>;
    /**
     * The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * A JSON mapping of any Metadata for this Policy.
     */
    metadata?: pulumi.Input<string>;
    /**
     * The name which should be used for this Policy Assignment. Changing this forces a new Policy Assignment to be created. Cannot exceed 64 characters in length.
     */
    name?: pulumi.Input<string>;
    /**
     * One or more `nonComplianceMessage` blocks as defined below.
     */
    nonComplianceMessages?: pulumi.Input<pulumi.Input<inputs.core.ResourceGroupPolicyAssignmentNonComplianceMessage>[]>;
    /**
     * Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.
     */
    notScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One or more `overrides` blocks as defined below. More detail about `overrides` and `resourceSelectors` see [policy assignment structure](https://learn.microsoft.com/en-us/azure/governance/policy/concepts/assignment-structure)
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.core.ResourceGroupPolicyAssignmentOverride>[]>;
    /**
     * A JSON mapping of any Parameters for this Policy.
     */
    parameters?: pulumi.Input<string>;
    /**
     * The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.
     */
    policyDefinitionId?: pulumi.Input<string>;
    /**
     * The ID of the Resource Group where this Policy Assignment should be created. Changing this forces a new Policy Assignment to be created.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * One or more `resourceSelectors` blocks as defined below to filter polices by resource properties.
     */
    resourceSelectors?: pulumi.Input<pulumi.Input<inputs.core.ResourceGroupPolicyAssignmentResourceSelector>[]>;
}

/**
 * The set of arguments for constructing a ResourceGroupPolicyAssignment resource.
 */
export interface ResourceGroupPolicyAssignmentArgs {
    /**
     * A description which should be used for this Policy Assignment.
     */
    description?: pulumi.Input<string>;
    /**
     * The Display Name for this Policy Assignment.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Specifies if this Policy should be enforced or not? Defaults to `true`.
     */
    enforce?: pulumi.Input<boolean>;
    /**
     * An `identity` block as defined below.
     *
     * > **Note:** The `location` field must also be specified when `identity` is specified.
     */
    identity?: pulumi.Input<inputs.core.ResourceGroupPolicyAssignmentIdentity>;
    /**
     * The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * A JSON mapping of any Metadata for this Policy.
     */
    metadata?: pulumi.Input<string>;
    /**
     * The name which should be used for this Policy Assignment. Changing this forces a new Policy Assignment to be created. Cannot exceed 64 characters in length.
     */
    name?: pulumi.Input<string>;
    /**
     * One or more `nonComplianceMessage` blocks as defined below.
     */
    nonComplianceMessages?: pulumi.Input<pulumi.Input<inputs.core.ResourceGroupPolicyAssignmentNonComplianceMessage>[]>;
    /**
     * Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.
     */
    notScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One or more `overrides` blocks as defined below. More detail about `overrides` and `resourceSelectors` see [policy assignment structure](https://learn.microsoft.com/en-us/azure/governance/policy/concepts/assignment-structure)
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.core.ResourceGroupPolicyAssignmentOverride>[]>;
    /**
     * A JSON mapping of any Parameters for this Policy.
     */
    parameters?: pulumi.Input<string>;
    /**
     * The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.
     */
    policyDefinitionId: pulumi.Input<string>;
    /**
     * The ID of the Resource Group where this Policy Assignment should be created. Changing this forces a new Policy Assignment to be created.
     */
    resourceGroupId: pulumi.Input<string>;
    /**
     * One or more `resourceSelectors` blocks as defined below to filter polices by resource properties.
     */
    resourceSelectors?: pulumi.Input<pulumi.Input<inputs.core.ResourceGroupPolicyAssignmentResourceSelector>[]>;
}
