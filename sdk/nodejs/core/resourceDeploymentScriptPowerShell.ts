// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Resource Deployment Script of Azure PowerShell.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleUserAssignedIdentity = new azure.authorization.UserAssignedIdentity("exampleUserAssignedIdentity", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * const exampleResourceDeploymentScriptPowerShell = new azure.core.ResourceDeploymentScriptPowerShell("exampleResourceDeploymentScriptPowerShell", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: "West Europe",
 *     version: "8.3",
 *     retentionInterval: "P1D",
 *     commandLine: "-name \"John Dole\"",
 *     cleanupPreference: "OnSuccess",
 *     forceUpdateTag: "1",
 *     timeout: "PT30M",
 *     scriptContent: `          param([string] $name)
 *             $output = 'Hello {0}.' -f $name
 *             Write-Output $output
 *             $DeploymentScriptOutputs = @{}
 *             $DeploymentScriptOutputs['text'] = $output
 * `,
 *     identity: {
 *         type: "UserAssigned",
 *         identityIds: [exampleUserAssignedIdentity.id],
 *     },
 *     tags: {
 *         key: "value",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Resource Deployment Script can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:core/resourceDeploymentScriptPowerShell:ResourceDeploymentScriptPowerShell example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Resources/deploymentScripts/script1
 * ```
 */
export class ResourceDeploymentScriptPowerShell extends pulumi.CustomResource {
    /**
     * Get an existing ResourceDeploymentScriptPowerShell resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceDeploymentScriptPowerShellState, opts?: pulumi.CustomResourceOptions): ResourceDeploymentScriptPowerShell {
        return new ResourceDeploymentScriptPowerShell(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:core/resourceDeploymentScriptPowerShell:ResourceDeploymentScriptPowerShell';

    /**
     * Returns true if the given object is an instance of ResourceDeploymentScriptPowerShell.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceDeploymentScriptPowerShell {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceDeploymentScriptPowerShell.__pulumiType;
    }

    /**
     * Specifies the cleanup preference when the script execution gets in a terminal state. Possible values are `Always`, `OnExpiration`, `OnSuccess`. Defaults to `Always`. Changing this forces a new Resource Deployment Script to be created.
     */
    public readonly cleanupPreference!: pulumi.Output<string | undefined>;
    /**
     * Command line arguments to pass to the script. Changing this forces a new Resource Deployment Script to be created.
     */
    public readonly commandLine!: pulumi.Output<string | undefined>;
    /**
     * A `container` block as defined below. Changing this forces a new Resource Deployment Script to be created.
     */
    public readonly container!: pulumi.Output<outputs.core.ResourceDeploymentScriptPowerShellContainer | undefined>;
    /**
     * An `environmentVariable` block as defined below. Changing this forces a new Resource Deployment Script to be created.
     */
    public readonly environmentVariables!: pulumi.Output<outputs.core.ResourceDeploymentScriptPowerShellEnvironmentVariable[] | undefined>;
    /**
     * Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. Changing this forces a new Resource Deployment Script to be created.
     */
    public readonly forceUpdateTag!: pulumi.Output<string | undefined>;
    /**
     * An `identity` block as defined below. Changing this forces a new Resource Deployment Script to be created.
     */
    public readonly identity!: pulumi.Output<outputs.core.ResourceDeploymentScriptPowerShellIdentity | undefined>;
    /**
     * Specifies the Azure Region where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Specifies the name which should be used for this Resource Deployment Script. The name length must be from 1 to 260 characters. The name can only contain alphanumeric, underscore, parentheses, hyphen and period, and it cannot end with a period. Changing this forces a new Resource Deployment Script to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of script outputs.
     */
    public /*out*/ readonly outputs!: pulumi.Output<string>;
    /**
     * Uri for the script. This is the entry point for the external script. Changing this forces a new Resource Deployment Script to be created.
     */
    public readonly primaryScriptUri!: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of the Resource Group where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. The time duration should be between `1` hour and `26` hours (inclusive) and should be specified in ISO 8601 format. Changing this forces a new Resource Deployment Script to be created.
     */
    public readonly retentionInterval!: pulumi.Output<string>;
    /**
     * Script body. Changing this forces a new Resource Deployment Script to be created.
     */
    public readonly scriptContent!: pulumi.Output<string | undefined>;
    /**
     * A `storageAccount` block as defined below. Changing this forces a new Resource Deployment Script to be created.
     */
    public readonly storageAccount!: pulumi.Output<outputs.core.ResourceDeploymentScriptPowerShellStorageAccount | undefined>;
    /**
     * Supporting files for the external script. Changing this forces a new Resource Deployment Script to be created.
     */
    public readonly supportingScriptUris!: pulumi.Output<string[] | undefined>;
    /**
     * A mapping of tags which should be assigned to the Resource Deployment Script.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Maximum allowed script execution time specified in ISO 8601 format. Needs to be greater than 0 and smaller than 1 day. Defaults to `P1D`. Changing this forces a new Resource Deployment Script to be created.
     */
    public readonly timeout!: pulumi.Output<string | undefined>;
    /**
     * Azure PowerShell module version to be used. The supported versions are `2.7`, `2.8`, `3.0`, `3.1`, `3.2`, `3.3`, `3.4`, `3.5`, `3.6`, `3.7`, `3.8`, `4.1`, `4.2`, `4.3`, `4.4`, `4.5`, `4.6`, `4.7`, `4.8`, `5.0`, `5.1`, `5.2`, `5.3`, `5.4`, `5.5`, `5.6`, `5.7`, `5.8`, `5.9`, `6.0`, `6.1`, `6.2`, `6.3`, `6.4`, `6.5`, `6.6`, `7.0`, `7.1`, `7.2`, `7.3`, `7.4`, `7.5`, `8.0`, `8.1`, `8.2`, `8.3`, `9.0`. Changing this forces a new Resource Deployment Script to be created.
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a ResourceDeploymentScriptPowerShell resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceDeploymentScriptPowerShellArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceDeploymentScriptPowerShellArgs | ResourceDeploymentScriptPowerShellState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceDeploymentScriptPowerShellState | undefined;
            resourceInputs["cleanupPreference"] = state ? state.cleanupPreference : undefined;
            resourceInputs["commandLine"] = state ? state.commandLine : undefined;
            resourceInputs["container"] = state ? state.container : undefined;
            resourceInputs["environmentVariables"] = state ? state.environmentVariables : undefined;
            resourceInputs["forceUpdateTag"] = state ? state.forceUpdateTag : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outputs"] = state ? state.outputs : undefined;
            resourceInputs["primaryScriptUri"] = state ? state.primaryScriptUri : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["retentionInterval"] = state ? state.retentionInterval : undefined;
            resourceInputs["scriptContent"] = state ? state.scriptContent : undefined;
            resourceInputs["storageAccount"] = state ? state.storageAccount : undefined;
            resourceInputs["supportingScriptUris"] = state ? state.supportingScriptUris : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as ResourceDeploymentScriptPowerShellArgs | undefined;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.retentionInterval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'retentionInterval'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["cleanupPreference"] = args ? args.cleanupPreference : undefined;
            resourceInputs["commandLine"] = args ? args.commandLine : undefined;
            resourceInputs["container"] = args ? args.container : undefined;
            resourceInputs["environmentVariables"] = args ? args.environmentVariables : undefined;
            resourceInputs["forceUpdateTag"] = args ? args.forceUpdateTag : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["primaryScriptUri"] = args ? args.primaryScriptUri : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["retentionInterval"] = args ? args.retentionInterval : undefined;
            resourceInputs["scriptContent"] = args ? args.scriptContent : undefined;
            resourceInputs["storageAccount"] = args ? args.storageAccount : undefined;
            resourceInputs["supportingScriptUris"] = args ? args.supportingScriptUris : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["outputs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceDeploymentScriptPowerShell.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ResourceDeploymentScriptPowerShell resources.
 */
export interface ResourceDeploymentScriptPowerShellState {
    /**
     * Specifies the cleanup preference when the script execution gets in a terminal state. Possible values are `Always`, `OnExpiration`, `OnSuccess`. Defaults to `Always`. Changing this forces a new Resource Deployment Script to be created.
     */
    cleanupPreference?: pulumi.Input<string>;
    /**
     * Command line arguments to pass to the script. Changing this forces a new Resource Deployment Script to be created.
     */
    commandLine?: pulumi.Input<string>;
    /**
     * A `container` block as defined below. Changing this forces a new Resource Deployment Script to be created.
     */
    container?: pulumi.Input<inputs.core.ResourceDeploymentScriptPowerShellContainer>;
    /**
     * An `environmentVariable` block as defined below. Changing this forces a new Resource Deployment Script to be created.
     */
    environmentVariables?: pulumi.Input<pulumi.Input<inputs.core.ResourceDeploymentScriptPowerShellEnvironmentVariable>[]>;
    /**
     * Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. Changing this forces a new Resource Deployment Script to be created.
     */
    forceUpdateTag?: pulumi.Input<string>;
    /**
     * An `identity` block as defined below. Changing this forces a new Resource Deployment Script to be created.
     */
    identity?: pulumi.Input<inputs.core.ResourceDeploymentScriptPowerShellIdentity>;
    /**
     * Specifies the Azure Region where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name which should be used for this Resource Deployment Script. The name length must be from 1 to 260 characters. The name can only contain alphanumeric, underscore, parentheses, hyphen and period, and it cannot end with a period. Changing this forces a new Resource Deployment Script to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * List of script outputs.
     */
    outputs?: pulumi.Input<string>;
    /**
     * Uri for the script. This is the entry point for the external script. Changing this forces a new Resource Deployment Script to be created.
     */
    primaryScriptUri?: pulumi.Input<string>;
    /**
     * Specifies the name of the Resource Group where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. The time duration should be between `1` hour and `26` hours (inclusive) and should be specified in ISO 8601 format. Changing this forces a new Resource Deployment Script to be created.
     */
    retentionInterval?: pulumi.Input<string>;
    /**
     * Script body. Changing this forces a new Resource Deployment Script to be created.
     */
    scriptContent?: pulumi.Input<string>;
    /**
     * A `storageAccount` block as defined below. Changing this forces a new Resource Deployment Script to be created.
     */
    storageAccount?: pulumi.Input<inputs.core.ResourceDeploymentScriptPowerShellStorageAccount>;
    /**
     * Supporting files for the external script. Changing this forces a new Resource Deployment Script to be created.
     */
    supportingScriptUris?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A mapping of tags which should be assigned to the Resource Deployment Script.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Maximum allowed script execution time specified in ISO 8601 format. Needs to be greater than 0 and smaller than 1 day. Defaults to `P1D`. Changing this forces a new Resource Deployment Script to be created.
     */
    timeout?: pulumi.Input<string>;
    /**
     * Azure PowerShell module version to be used. The supported versions are `2.7`, `2.8`, `3.0`, `3.1`, `3.2`, `3.3`, `3.4`, `3.5`, `3.6`, `3.7`, `3.8`, `4.1`, `4.2`, `4.3`, `4.4`, `4.5`, `4.6`, `4.7`, `4.8`, `5.0`, `5.1`, `5.2`, `5.3`, `5.4`, `5.5`, `5.6`, `5.7`, `5.8`, `5.9`, `6.0`, `6.1`, `6.2`, `6.3`, `6.4`, `6.5`, `6.6`, `7.0`, `7.1`, `7.2`, `7.3`, `7.4`, `7.5`, `8.0`, `8.1`, `8.2`, `8.3`, `9.0`. Changing this forces a new Resource Deployment Script to be created.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ResourceDeploymentScriptPowerShell resource.
 */
export interface ResourceDeploymentScriptPowerShellArgs {
    /**
     * Specifies the cleanup preference when the script execution gets in a terminal state. Possible values are `Always`, `OnExpiration`, `OnSuccess`. Defaults to `Always`. Changing this forces a new Resource Deployment Script to be created.
     */
    cleanupPreference?: pulumi.Input<string>;
    /**
     * Command line arguments to pass to the script. Changing this forces a new Resource Deployment Script to be created.
     */
    commandLine?: pulumi.Input<string>;
    /**
     * A `container` block as defined below. Changing this forces a new Resource Deployment Script to be created.
     */
    container?: pulumi.Input<inputs.core.ResourceDeploymentScriptPowerShellContainer>;
    /**
     * An `environmentVariable` block as defined below. Changing this forces a new Resource Deployment Script to be created.
     */
    environmentVariables?: pulumi.Input<pulumi.Input<inputs.core.ResourceDeploymentScriptPowerShellEnvironmentVariable>[]>;
    /**
     * Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. Changing this forces a new Resource Deployment Script to be created.
     */
    forceUpdateTag?: pulumi.Input<string>;
    /**
     * An `identity` block as defined below. Changing this forces a new Resource Deployment Script to be created.
     */
    identity?: pulumi.Input<inputs.core.ResourceDeploymentScriptPowerShellIdentity>;
    /**
     * Specifies the Azure Region where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name which should be used for this Resource Deployment Script. The name length must be from 1 to 260 characters. The name can only contain alphanumeric, underscore, parentheses, hyphen and period, and it cannot end with a period. Changing this forces a new Resource Deployment Script to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Uri for the script. This is the entry point for the external script. Changing this forces a new Resource Deployment Script to be created.
     */
    primaryScriptUri?: pulumi.Input<string>;
    /**
     * Specifies the name of the Resource Group where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. The time duration should be between `1` hour and `26` hours (inclusive) and should be specified in ISO 8601 format. Changing this forces a new Resource Deployment Script to be created.
     */
    retentionInterval: pulumi.Input<string>;
    /**
     * Script body. Changing this forces a new Resource Deployment Script to be created.
     */
    scriptContent?: pulumi.Input<string>;
    /**
     * A `storageAccount` block as defined below. Changing this forces a new Resource Deployment Script to be created.
     */
    storageAccount?: pulumi.Input<inputs.core.ResourceDeploymentScriptPowerShellStorageAccount>;
    /**
     * Supporting files for the external script. Changing this forces a new Resource Deployment Script to be created.
     */
    supportingScriptUris?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A mapping of tags which should be assigned to the Resource Deployment Script.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Maximum allowed script execution time specified in ISO 8601 format. Needs to be greater than 0 and smaller than 1 day. Defaults to `P1D`. Changing this forces a new Resource Deployment Script to be created.
     */
    timeout?: pulumi.Input<string>;
    /**
     * Azure PowerShell module version to be used. The supported versions are `2.7`, `2.8`, `3.0`, `3.1`, `3.2`, `3.3`, `3.4`, `3.5`, `3.6`, `3.7`, `3.8`, `4.1`, `4.2`, `4.3`, `4.4`, `4.5`, `4.6`, `4.7`, `4.8`, `5.0`, `5.1`, `5.2`, `5.3`, `5.4`, `5.5`, `5.6`, `5.7`, `5.8`, `5.9`, `6.0`, `6.1`, `6.2`, `6.3`, `6.4`, `6.5`, `6.6`, `7.0`, `7.1`, `7.2`, `7.3`, `7.4`, `7.5`, `8.0`, `8.1`, `8.2`, `8.3`, `9.0`. Changing this forces a new Resource Deployment Script to be created.
     */
    version: pulumi.Input<string>;
}
