// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages an Azure Cost Management View for a Subscription.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.SubscriptionCostManagementView("example", {
 *     accumulated: false,
 *     chartType: "StackedColumn",
 *     dataset: {
 *         aggregations: [{
 *             columnName: "Cost",
 *             name: "totalCost",
 *         }],
 *         granularity: "Monthly",
 *     },
 *     displayName: "Cost View per Month",
 *     reportType: "Usage",
 *     subscriptionId: "/subscription/00000000-0000-0000-0000-000000000000",
 *     timeframe: "MonthToDate",
 * });
 * ```
 *
 * ## Import
 *
 * Cost Management View for a Subscriptions can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:core/subscriptionCostManagementView:SubscriptionCostManagementView example /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/views/costmanagementview
 * ```
 */
export class SubscriptionCostManagementView extends pulumi.CustomResource {
    /**
     * Get an existing SubscriptionCostManagementView resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubscriptionCostManagementViewState, opts?: pulumi.CustomResourceOptions): SubscriptionCostManagementView {
        return new SubscriptionCostManagementView(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:core/subscriptionCostManagementView:SubscriptionCostManagementView';

    /**
     * Returns true if the given object is an instance of SubscriptionCostManagementView.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SubscriptionCostManagementView {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SubscriptionCostManagementView.__pulumiType;
    }

    /**
     * Whether the costs data in the Cost Management View are accumulated over time. Changing this forces a new Cost Management View for a Subscription to be created.
     */
    public readonly accumulated!: pulumi.Output<boolean>;
    /**
     * Chart type of the main view in Cost Analysis. Possible values are `Area`, `GroupedColumn`, `Line`, `StackedColumn` and `Table`.
     */
    public readonly chartType!: pulumi.Output<string>;
    /**
     * A `dataset` block as defined below.
     */
    public readonly dataset!: pulumi.Output<outputs.core.SubscriptionCostManagementViewDataset>;
    /**
     * User visible input name of the Cost Management View.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * One or more `kpi` blocks as defined below, to show in Cost Analysis UI.
     */
    public readonly kpis!: pulumi.Output<outputs.core.SubscriptionCostManagementViewKpi[] | undefined>;
    /**
     * The name which should be used for this Cost Management View for a Subscription. Changing this forces a new Cost Management View for a Subscription to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * One or more `pivot` blocks as defined below, containing the configuration of 3 sub-views in the Cost Analysis UI. Non table views should have three pivots.
     */
    public readonly pivots!: pulumi.Output<outputs.core.SubscriptionCostManagementViewPivot[] | undefined>;
    /**
     * The type of the report. The only possible value is `Usage`.
     */
    public readonly reportType!: pulumi.Output<string>;
    /**
     * The ID of the Subscription this View is scoped to. Changing this forces a new Cost Management View for a Subscription to be created.
     */
    public readonly subscriptionId!: pulumi.Output<string>;
    /**
     * The time frame for pulling data for the report. Possible values are `Custom`, `MonthToDate`, `WeekToDate` and `YearToDate`.
     */
    public readonly timeframe!: pulumi.Output<string>;

    /**
     * Create a SubscriptionCostManagementView resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubscriptionCostManagementViewArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubscriptionCostManagementViewArgs | SubscriptionCostManagementViewState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubscriptionCostManagementViewState | undefined;
            resourceInputs["accumulated"] = state ? state.accumulated : undefined;
            resourceInputs["chartType"] = state ? state.chartType : undefined;
            resourceInputs["dataset"] = state ? state.dataset : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["kpis"] = state ? state.kpis : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pivots"] = state ? state.pivots : undefined;
            resourceInputs["reportType"] = state ? state.reportType : undefined;
            resourceInputs["subscriptionId"] = state ? state.subscriptionId : undefined;
            resourceInputs["timeframe"] = state ? state.timeframe : undefined;
        } else {
            const args = argsOrState as SubscriptionCostManagementViewArgs | undefined;
            if ((!args || args.accumulated === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accumulated'");
            }
            if ((!args || args.chartType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'chartType'");
            }
            if ((!args || args.dataset === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataset'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.reportType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'reportType'");
            }
            if ((!args || args.subscriptionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriptionId'");
            }
            if ((!args || args.timeframe === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeframe'");
            }
            resourceInputs["accumulated"] = args ? args.accumulated : undefined;
            resourceInputs["chartType"] = args ? args.chartType : undefined;
            resourceInputs["dataset"] = args ? args.dataset : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["kpis"] = args ? args.kpis : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pivots"] = args ? args.pivots : undefined;
            resourceInputs["reportType"] = args ? args.reportType : undefined;
            resourceInputs["subscriptionId"] = args ? args.subscriptionId : undefined;
            resourceInputs["timeframe"] = args ? args.timeframe : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SubscriptionCostManagementView.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SubscriptionCostManagementView resources.
 */
export interface SubscriptionCostManagementViewState {
    /**
     * Whether the costs data in the Cost Management View are accumulated over time. Changing this forces a new Cost Management View for a Subscription to be created.
     */
    accumulated?: pulumi.Input<boolean>;
    /**
     * Chart type of the main view in Cost Analysis. Possible values are `Area`, `GroupedColumn`, `Line`, `StackedColumn` and `Table`.
     */
    chartType?: pulumi.Input<string>;
    /**
     * A `dataset` block as defined below.
     */
    dataset?: pulumi.Input<inputs.core.SubscriptionCostManagementViewDataset>;
    /**
     * User visible input name of the Cost Management View.
     */
    displayName?: pulumi.Input<string>;
    /**
     * One or more `kpi` blocks as defined below, to show in Cost Analysis UI.
     */
    kpis?: pulumi.Input<pulumi.Input<inputs.core.SubscriptionCostManagementViewKpi>[]>;
    /**
     * The name which should be used for this Cost Management View for a Subscription. Changing this forces a new Cost Management View for a Subscription to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * One or more `pivot` blocks as defined below, containing the configuration of 3 sub-views in the Cost Analysis UI. Non table views should have three pivots.
     */
    pivots?: pulumi.Input<pulumi.Input<inputs.core.SubscriptionCostManagementViewPivot>[]>;
    /**
     * The type of the report. The only possible value is `Usage`.
     */
    reportType?: pulumi.Input<string>;
    /**
     * The ID of the Subscription this View is scoped to. Changing this forces a new Cost Management View for a Subscription to be created.
     */
    subscriptionId?: pulumi.Input<string>;
    /**
     * The time frame for pulling data for the report. Possible values are `Custom`, `MonthToDate`, `WeekToDate` and `YearToDate`.
     */
    timeframe?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SubscriptionCostManagementView resource.
 */
export interface SubscriptionCostManagementViewArgs {
    /**
     * Whether the costs data in the Cost Management View are accumulated over time. Changing this forces a new Cost Management View for a Subscription to be created.
     */
    accumulated: pulumi.Input<boolean>;
    /**
     * Chart type of the main view in Cost Analysis. Possible values are `Area`, `GroupedColumn`, `Line`, `StackedColumn` and `Table`.
     */
    chartType: pulumi.Input<string>;
    /**
     * A `dataset` block as defined below.
     */
    dataset: pulumi.Input<inputs.core.SubscriptionCostManagementViewDataset>;
    /**
     * User visible input name of the Cost Management View.
     */
    displayName: pulumi.Input<string>;
    /**
     * One or more `kpi` blocks as defined below, to show in Cost Analysis UI.
     */
    kpis?: pulumi.Input<pulumi.Input<inputs.core.SubscriptionCostManagementViewKpi>[]>;
    /**
     * The name which should be used for this Cost Management View for a Subscription. Changing this forces a new Cost Management View for a Subscription to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * One or more `pivot` blocks as defined below, containing the configuration of 3 sub-views in the Cost Analysis UI. Non table views should have three pivots.
     */
    pivots?: pulumi.Input<pulumi.Input<inputs.core.SubscriptionCostManagementViewPivot>[]>;
    /**
     * The type of the report. The only possible value is `Usage`.
     */
    reportType: pulumi.Input<string>;
    /**
     * The ID of the Subscription this View is scoped to. Changing this forces a new Cost Management View for a Subscription to be created.
     */
    subscriptionId: pulumi.Input<string>;
    /**
     * The time frame for pulling data for the report. Possible values are `Custom`, `MonthToDate`, `WeekToDate` and `YearToDate`.
     */
    timeframe: pulumi.Input<string>;
}
