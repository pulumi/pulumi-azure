// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Container App Environment Certificate.
 *
 * ## Import
 *
 * A Container App Environment Certificate can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:containerapp/environmentCertificate:EnvironmentCertificate example "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.App/managedEnvironments/myenv/certificates/mycertificate"
 * ```
 */
export class EnvironmentCertificate extends pulumi.CustomResource {
    /**
     * Get an existing EnvironmentCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnvironmentCertificateState, opts?: pulumi.CustomResourceOptions): EnvironmentCertificate {
        return new EnvironmentCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:containerapp/environmentCertificate:EnvironmentCertificate';

    /**
     * Returns true if the given object is an instance of EnvironmentCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EnvironmentCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EnvironmentCertificate.__pulumiType;
    }

    /**
     * The Certificate Private Key as a base64 encoded PFX or PEM. Changing this forces a new resource to be created.
     */
    public readonly certificateBlobBase64!: pulumi.Output<string>;
    /**
     * The password for the Certificate. Changing this forces a new resource to be created.
     */
    public readonly certificatePassword!: pulumi.Output<string>;
    /**
     * The Container App Managed Environment ID to configure this Certificate on. Changing this forces a new resource to be created.
     */
    public readonly containerAppEnvironmentId!: pulumi.Output<string>;
    /**
     * The expiration date for the Certificate.
     */
    public /*out*/ readonly expirationDate!: pulumi.Output<string>;
    /**
     * The date of issue for the Certificate.
     */
    public /*out*/ readonly issueDate!: pulumi.Output<string>;
    /**
     * The Certificate Issuer.
     */
    public /*out*/ readonly issuer!: pulumi.Output<string>;
    /**
     * The name of the Container Apps Environment Certificate. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Subject Name for the Certificate.
     */
    public /*out*/ readonly subjectName!: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The Thumbprint of the Certificate.
     */
    public /*out*/ readonly thumbprint!: pulumi.Output<string>;

    /**
     * Create a EnvironmentCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnvironmentCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EnvironmentCertificateArgs | EnvironmentCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EnvironmentCertificateState | undefined;
            resourceInputs["certificateBlobBase64"] = state ? state.certificateBlobBase64 : undefined;
            resourceInputs["certificatePassword"] = state ? state.certificatePassword : undefined;
            resourceInputs["containerAppEnvironmentId"] = state ? state.containerAppEnvironmentId : undefined;
            resourceInputs["expirationDate"] = state ? state.expirationDate : undefined;
            resourceInputs["issueDate"] = state ? state.issueDate : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["subjectName"] = state ? state.subjectName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["thumbprint"] = state ? state.thumbprint : undefined;
        } else {
            const args = argsOrState as EnvironmentCertificateArgs | undefined;
            if ((!args || args.certificateBlobBase64 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateBlobBase64'");
            }
            if ((!args || args.certificatePassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificatePassword'");
            }
            if ((!args || args.containerAppEnvironmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerAppEnvironmentId'");
            }
            resourceInputs["certificateBlobBase64"] = args ? args.certificateBlobBase64 : undefined;
            resourceInputs["certificatePassword"] = args?.certificatePassword ? pulumi.secret(args.certificatePassword) : undefined;
            resourceInputs["containerAppEnvironmentId"] = args ? args.containerAppEnvironmentId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["expirationDate"] = undefined /*out*/;
            resourceInputs["issueDate"] = undefined /*out*/;
            resourceInputs["issuer"] = undefined /*out*/;
            resourceInputs["subjectName"] = undefined /*out*/;
            resourceInputs["thumbprint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["certificatePassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(EnvironmentCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EnvironmentCertificate resources.
 */
export interface EnvironmentCertificateState {
    /**
     * The Certificate Private Key as a base64 encoded PFX or PEM. Changing this forces a new resource to be created.
     */
    certificateBlobBase64?: pulumi.Input<string>;
    /**
     * The password for the Certificate. Changing this forces a new resource to be created.
     */
    certificatePassword?: pulumi.Input<string>;
    /**
     * The Container App Managed Environment ID to configure this Certificate on. Changing this forces a new resource to be created.
     */
    containerAppEnvironmentId?: pulumi.Input<string>;
    /**
     * The expiration date for the Certificate.
     */
    expirationDate?: pulumi.Input<string>;
    /**
     * The date of issue for the Certificate.
     */
    issueDate?: pulumi.Input<string>;
    /**
     * The Certificate Issuer.
     */
    issuer?: pulumi.Input<string>;
    /**
     * The name of the Container Apps Environment Certificate. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The Subject Name for the Certificate.
     */
    subjectName?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Thumbprint of the Certificate.
     */
    thumbprint?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EnvironmentCertificate resource.
 */
export interface EnvironmentCertificateArgs {
    /**
     * The Certificate Private Key as a base64 encoded PFX or PEM. Changing this forces a new resource to be created.
     */
    certificateBlobBase64: pulumi.Input<string>;
    /**
     * The password for the Certificate. Changing this forces a new resource to be created.
     */
    certificatePassword: pulumi.Input<string>;
    /**
     * The Container App Managed Environment ID to configure this Certificate on. Changing this forces a new resource to be created.
     */
    containerAppEnvironmentId: pulumi.Input<string>;
    /**
     * The name of the Container Apps Environment Certificate. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
