// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Container App Environment Storage.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAnalyticsWorkspace = new azure.operationalinsights.AnalyticsWorkspace("exampleAnalyticsWorkspace", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     sku: "PerGB2018",
 *     retentionInDays: 30,
 * });
 * const exampleEnvironment = new azure.containerapp.Environment("exampleEnvironment", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     logAnalyticsWorkspaceId: exampleAnalyticsWorkspace.id,
 * });
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleShare = new azure.storage.Share("exampleShare", {
 *     storageAccountName: exampleAccount.name,
 *     quota: 5,
 * });
 * const exampleEnvironmentStorage = new azure.containerapp.EnvironmentStorage("exampleEnvironmentStorage", {
 *     containerAppEnvironmentId: exampleEnvironment.id,
 *     accountName: exampleAccount.name,
 *     shareName: exampleShare.name,
 *     accessKey: exampleAccount.primaryAccessKey,
 *     accessMode: "ReadOnly",
 * });
 * ```
 *
 * ## Import
 *
 * A Container App Environment Storage can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:containerapp/environmentStorage:EnvironmentStorage example "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.App/managedEnvironments/myEnvironment/storages/mystorage"
 * ```
 */
export class EnvironmentStorage extends pulumi.CustomResource {
    /**
     * Get an existing EnvironmentStorage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnvironmentStorageState, opts?: pulumi.CustomResourceOptions): EnvironmentStorage {
        return new EnvironmentStorage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:containerapp/environmentStorage:EnvironmentStorage';

    /**
     * Returns true if the given object is an instance of EnvironmentStorage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EnvironmentStorage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EnvironmentStorage.__pulumiType;
    }

    /**
     * The Storage Account Access Key.
     */
    public readonly accessKey!: pulumi.Output<string>;
    /**
     * The access mode to connect this storage to the Container App. Possible values include `ReadOnly` and `ReadWrite`. Changing this forces a new resource to be created.
     */
    public readonly accessMode!: pulumi.Output<string>;
    /**
     * The Azure Storage Account in which the Share to be used is located. Changing this forces a new resource to be created.
     */
    public readonly accountName!: pulumi.Output<string>;
    /**
     * The ID of the Container App Environment to which this storage belongs. Changing this forces a new resource to be created.
     */
    public readonly containerAppEnvironmentId!: pulumi.Output<string>;
    /**
     * The name for this Container App Environment Storage. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the Azure Storage Share to use. Changing this forces a new resource to be created.
     */
    public readonly shareName!: pulumi.Output<string>;

    /**
     * Create a EnvironmentStorage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnvironmentStorageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EnvironmentStorageArgs | EnvironmentStorageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EnvironmentStorageState | undefined;
            resourceInputs["accessKey"] = state ? state.accessKey : undefined;
            resourceInputs["accessMode"] = state ? state.accessMode : undefined;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["containerAppEnvironmentId"] = state ? state.containerAppEnvironmentId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["shareName"] = state ? state.shareName : undefined;
        } else {
            const args = argsOrState as EnvironmentStorageArgs | undefined;
            if ((!args || args.accessKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessKey'");
            }
            if ((!args || args.accessMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessMode'");
            }
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.containerAppEnvironmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerAppEnvironmentId'");
            }
            if ((!args || args.shareName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shareName'");
            }
            resourceInputs["accessKey"] = args?.accessKey ? pulumi.secret(args.accessKey) : undefined;
            resourceInputs["accessMode"] = args ? args.accessMode : undefined;
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["containerAppEnvironmentId"] = args ? args.containerAppEnvironmentId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["shareName"] = args ? args.shareName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(EnvironmentStorage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EnvironmentStorage resources.
 */
export interface EnvironmentStorageState {
    /**
     * The Storage Account Access Key.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * The access mode to connect this storage to the Container App. Possible values include `ReadOnly` and `ReadWrite`. Changing this forces a new resource to be created.
     */
    accessMode?: pulumi.Input<string>;
    /**
     * The Azure Storage Account in which the Share to be used is located. Changing this forces a new resource to be created.
     */
    accountName?: pulumi.Input<string>;
    /**
     * The ID of the Container App Environment to which this storage belongs. Changing this forces a new resource to be created.
     */
    containerAppEnvironmentId?: pulumi.Input<string>;
    /**
     * The name for this Container App Environment Storage. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Azure Storage Share to use. Changing this forces a new resource to be created.
     */
    shareName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EnvironmentStorage resource.
 */
export interface EnvironmentStorageArgs {
    /**
     * The Storage Account Access Key.
     */
    accessKey: pulumi.Input<string>;
    /**
     * The access mode to connect this storage to the Container App. Possible values include `ReadOnly` and `ReadWrite`. Changing this forces a new resource to be created.
     */
    accessMode: pulumi.Input<string>;
    /**
     * The Azure Storage Account in which the Share to be used is located. Changing this forces a new resource to be created.
     */
    accountName: pulumi.Input<string>;
    /**
     * The ID of the Container App Environment to which this storage belongs. Changing this forces a new resource to be created.
     */
    containerAppEnvironmentId: pulumi.Input<string>;
    /**
     * The name for this Container App Environment Storage. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Azure Storage Share to use. Changing this forces a new resource to be created.
     */
    shareName: pulumi.Input<string>;
}
