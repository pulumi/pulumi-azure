// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an Api Management Policy Fragment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as std from "@pulumi/std";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleService = new azure.apimanagement.Service("example", {
 *     name: "example-apim",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     publisherName: "pub1",
 *     publisherEmail: "pub1@email.com",
 *     skuName: "Developer_1",
 * });
 * const examplePolicyFragment = new azure.apimanagement.PolicyFragment("example", {
 *     apiManagementId: exampleService.id,
 *     name: "example-policy-fragment",
 *     format: "xml",
 *     value: std.file({
 *         input: "policy-fragment-1.xml",
 *     }).then(invoke => invoke.result),
 * });
 * ```
 *
 * ## Import
 *
 * Api Management Policy Fragments can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:apimanagement/policyFragment:PolicyFragment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ApiManagement/service/instance1/policyFragments/policyFragment1
 * ```
 */
export class PolicyFragment extends pulumi.CustomResource {
    /**
     * Get an existing PolicyFragment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyFragmentState, opts?: pulumi.CustomResourceOptions): PolicyFragment {
        return new PolicyFragment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:apimanagement/policyFragment:PolicyFragment';

    /**
     * Returns true if the given object is an instance of PolicyFragment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyFragment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyFragment.__pulumiType;
    }

    /**
     * The id of the API Management Service. Changing this forces a new Api Management Policy Fragment to be created.
     */
    public readonly apiManagementId!: pulumi.Output<string>;
    /**
     * The description for the Policy Fragment.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The format of the Policy Fragment. Possible values are `xml` or `rawxml`.
     *
     * > **NOTE:** The `value` property will be updated to reflect the corresponding format when `format` is updated.
     */
    public readonly format!: pulumi.Output<string | undefined>;
    /**
     * The name which should be used for this Api Management Policy Fragment. Changing this forces a new Api Management Policy Fragment to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The value of the Policy Fragment.
     *
     * > **NOTE:** Be aware of the two format possibilities. If the `value` is not applied and continues to cause a diff the format could be wrong.
     */
    public readonly value!: pulumi.Output<string>;

    /**
     * Create a PolicyFragment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyFragmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyFragmentArgs | PolicyFragmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyFragmentState | undefined;
            resourceInputs["apiManagementId"] = state ? state.apiManagementId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["format"] = state ? state.format : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as PolicyFragmentArgs | undefined;
            if ((!args || args.apiManagementId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiManagementId'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["apiManagementId"] = args ? args.apiManagementId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["format"] = args ? args.format : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicyFragment.__pulumiType, name, resourceInputs, opts, false /*remote*/);
    }
}

/**
 * Input properties used for looking up and filtering PolicyFragment resources.
 */
export interface PolicyFragmentState {
    /**
     * The id of the API Management Service. Changing this forces a new Api Management Policy Fragment to be created.
     */
    apiManagementId?: pulumi.Input<string>;
    /**
     * The description for the Policy Fragment.
     */
    description?: pulumi.Input<string>;
    /**
     * The format of the Policy Fragment. Possible values are `xml` or `rawxml`.
     *
     * > **NOTE:** The `value` property will be updated to reflect the corresponding format when `format` is updated.
     */
    format?: pulumi.Input<string>;
    /**
     * The name which should be used for this Api Management Policy Fragment. Changing this forces a new Api Management Policy Fragment to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The value of the Policy Fragment.
     *
     * > **NOTE:** Be aware of the two format possibilities. If the `value` is not applied and continues to cause a diff the format could be wrong.
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PolicyFragment resource.
 */
export interface PolicyFragmentArgs {
    /**
     * The id of the API Management Service. Changing this forces a new Api Management Policy Fragment to be created.
     */
    apiManagementId: pulumi.Input<string>;
    /**
     * The description for the Policy Fragment.
     */
    description?: pulumi.Input<string>;
    /**
     * The format of the Policy Fragment. Possible values are `xml` or `rawxml`.
     *
     * > **NOTE:** The `value` property will be updated to reflect the corresponding format when `format` is updated.
     */
    format?: pulumi.Input<string>;
    /**
     * The name which should be used for this Api Management Policy Fragment. Changing this forces a new Api Management Policy Fragment to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The value of the Policy Fragment.
     *
     * > **NOTE:** Be aware of the two format possibilities. If the `value` is not applied and continues to cause a diff the format could be wrong.
     */
    value: pulumi.Input<string>;
}
