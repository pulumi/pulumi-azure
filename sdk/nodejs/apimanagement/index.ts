// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ApiArgs, ApiState } from "./api";
export type Api = import("./api").Api;
export const Api: typeof import("./api").Api = null as any;
utilities.lazyLoad(exports, ["Api"], () => require("./api"));

export { ApiDiagnosticArgs, ApiDiagnosticState } from "./apiDiagnostic";
export type ApiDiagnostic = import("./apiDiagnostic").ApiDiagnostic;
export const ApiDiagnostic: typeof import("./apiDiagnostic").ApiDiagnostic = null as any;
utilities.lazyLoad(exports, ["ApiDiagnostic"], () => require("./apiDiagnostic"));

export { ApiOperationArgs, ApiOperationState } from "./apiOperation";
export type ApiOperation = import("./apiOperation").ApiOperation;
export const ApiOperation: typeof import("./apiOperation").ApiOperation = null as any;
utilities.lazyLoad(exports, ["ApiOperation"], () => require("./apiOperation"));

export { ApiOperationPolicyArgs, ApiOperationPolicyState } from "./apiOperationPolicy";
export type ApiOperationPolicy = import("./apiOperationPolicy").ApiOperationPolicy;
export const ApiOperationPolicy: typeof import("./apiOperationPolicy").ApiOperationPolicy = null as any;
utilities.lazyLoad(exports, ["ApiOperationPolicy"], () => require("./apiOperationPolicy"));

export { ApiOperationTagArgs, ApiOperationTagState } from "./apiOperationTag";
export type ApiOperationTag = import("./apiOperationTag").ApiOperationTag;
export const ApiOperationTag: typeof import("./apiOperationTag").ApiOperationTag = null as any;
utilities.lazyLoad(exports, ["ApiOperationTag"], () => require("./apiOperationTag"));

export { ApiPolicyArgs, ApiPolicyState } from "./apiPolicy";
export type ApiPolicy = import("./apiPolicy").ApiPolicy;
export const ApiPolicy: typeof import("./apiPolicy").ApiPolicy = null as any;
utilities.lazyLoad(exports, ["ApiPolicy"], () => require("./apiPolicy"));

export { ApiReleaseArgs, ApiReleaseState } from "./apiRelease";
export type ApiRelease = import("./apiRelease").ApiRelease;
export const ApiRelease: typeof import("./apiRelease").ApiRelease = null as any;
utilities.lazyLoad(exports, ["ApiRelease"], () => require("./apiRelease"));

export { ApiSchemaArgs, ApiSchemaState } from "./apiSchema";
export type ApiSchema = import("./apiSchema").ApiSchema;
export const ApiSchema: typeof import("./apiSchema").ApiSchema = null as any;
utilities.lazyLoad(exports, ["ApiSchema"], () => require("./apiSchema"));

export { ApiTagArgs, ApiTagState } from "./apiTag";
export type ApiTag = import("./apiTag").ApiTag;
export const ApiTag: typeof import("./apiTag").ApiTag = null as any;
utilities.lazyLoad(exports, ["ApiTag"], () => require("./apiTag"));

export { ApiTagDescriptionArgs, ApiTagDescriptionState } from "./apiTagDescription";
export type ApiTagDescription = import("./apiTagDescription").ApiTagDescription;
export const ApiTagDescription: typeof import("./apiTagDescription").ApiTagDescription = null as any;
utilities.lazyLoad(exports, ["ApiTagDescription"], () => require("./apiTagDescription"));

export { ApiVersionSetArgs, ApiVersionSetState } from "./apiVersionSet";
export type ApiVersionSet = import("./apiVersionSet").ApiVersionSet;
export const ApiVersionSet: typeof import("./apiVersionSet").ApiVersionSet = null as any;
utilities.lazyLoad(exports, ["ApiVersionSet"], () => require("./apiVersionSet"));

export { AuthorizationServerArgs, AuthorizationServerState } from "./authorizationServer";
export type AuthorizationServer = import("./authorizationServer").AuthorizationServer;
export const AuthorizationServer: typeof import("./authorizationServer").AuthorizationServer = null as any;
utilities.lazyLoad(exports, ["AuthorizationServer"], () => require("./authorizationServer"));

export { BackendArgs, BackendState } from "./backend";
export type Backend = import("./backend").Backend;
export const Backend: typeof import("./backend").Backend = null as any;
utilities.lazyLoad(exports, ["Backend"], () => require("./backend"));

export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { CustomDomainArgs, CustomDomainState } from "./customDomain";
export type CustomDomain = import("./customDomain").CustomDomain;
export const CustomDomain: typeof import("./customDomain").CustomDomain = null as any;
utilities.lazyLoad(exports, ["CustomDomain"], () => require("./customDomain"));

export { DiagnosticArgs, DiagnosticState } from "./diagnostic";
export type Diagnostic = import("./diagnostic").Diagnostic;
export const Diagnostic: typeof import("./diagnostic").Diagnostic = null as any;
utilities.lazyLoad(exports, ["Diagnostic"], () => require("./diagnostic"));

export { EmailTemplateArgs, EmailTemplateState } from "./emailTemplate";
export type EmailTemplate = import("./emailTemplate").EmailTemplate;
export const EmailTemplate: typeof import("./emailTemplate").EmailTemplate = null as any;
utilities.lazyLoad(exports, ["EmailTemplate"], () => require("./emailTemplate"));

export { GatewayArgs, GatewayState } from "./gateway";
export type Gateway = import("./gateway").Gateway;
export const Gateway: typeof import("./gateway").Gateway = null as any;
utilities.lazyLoad(exports, ["Gateway"], () => require("./gateway"));

export { GatewayApiArgs, GatewayApiState } from "./gatewayApi";
export type GatewayApi = import("./gatewayApi").GatewayApi;
export const GatewayApi: typeof import("./gatewayApi").GatewayApi = null as any;
utilities.lazyLoad(exports, ["GatewayApi"], () => require("./gatewayApi"));

export { GatewayCertificateAuthorityArgs, GatewayCertificateAuthorityState } from "./gatewayCertificateAuthority";
export type GatewayCertificateAuthority = import("./gatewayCertificateAuthority").GatewayCertificateAuthority;
export const GatewayCertificateAuthority: typeof import("./gatewayCertificateAuthority").GatewayCertificateAuthority = null as any;
utilities.lazyLoad(exports, ["GatewayCertificateAuthority"], () => require("./gatewayCertificateAuthority"));

export { GatewayHostNameConfigurationArgs, GatewayHostNameConfigurationState } from "./gatewayHostNameConfiguration";
export type GatewayHostNameConfiguration = import("./gatewayHostNameConfiguration").GatewayHostNameConfiguration;
export const GatewayHostNameConfiguration: typeof import("./gatewayHostNameConfiguration").GatewayHostNameConfiguration = null as any;
utilities.lazyLoad(exports, ["GatewayHostNameConfiguration"], () => require("./gatewayHostNameConfiguration"));

export { GetApiArgs, GetApiResult, GetApiOutputArgs } from "./getApi";
export const getApi: typeof import("./getApi").getApi = null as any;
export const getApiOutput: typeof import("./getApi").getApiOutput = null as any;
utilities.lazyLoad(exports, ["getApi","getApiOutput"], () => require("./getApi"));

export { GetApiVersionSetArgs, GetApiVersionSetResult, GetApiVersionSetOutputArgs } from "./getApiVersionSet";
export const getApiVersionSet: typeof import("./getApiVersionSet").getApiVersionSet = null as any;
export const getApiVersionSetOutput: typeof import("./getApiVersionSet").getApiVersionSetOutput = null as any;
utilities.lazyLoad(exports, ["getApiVersionSet","getApiVersionSetOutput"], () => require("./getApiVersionSet"));

export { GetGatewayArgs, GetGatewayResult, GetGatewayOutputArgs } from "./getGateway";
export const getGateway: typeof import("./getGateway").getGateway = null as any;
export const getGatewayOutput: typeof import("./getGateway").getGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getGateway","getGatewayOutput"], () => require("./getGateway"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetProductArgs, GetProductResult, GetProductOutputArgs } from "./getProduct";
export const getProduct: typeof import("./getProduct").getProduct = null as any;
export const getProductOutput: typeof import("./getProduct").getProductOutput = null as any;
utilities.lazyLoad(exports, ["getProduct","getProductOutput"], () => require("./getProduct"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GlobalSchemaArgs, GlobalSchemaState } from "./globalSchema";
export type GlobalSchema = import("./globalSchema").GlobalSchema;
export const GlobalSchema: typeof import("./globalSchema").GlobalSchema = null as any;
utilities.lazyLoad(exports, ["GlobalSchema"], () => require("./globalSchema"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupUserArgs, GroupUserState } from "./groupUser";
export type GroupUser = import("./groupUser").GroupUser;
export const GroupUser: typeof import("./groupUser").GroupUser = null as any;
utilities.lazyLoad(exports, ["GroupUser"], () => require("./groupUser"));

export { IdentityProviderAadArgs, IdentityProviderAadState } from "./identityProviderAad";
export type IdentityProviderAad = import("./identityProviderAad").IdentityProviderAad;
export const IdentityProviderAad: typeof import("./identityProviderAad").IdentityProviderAad = null as any;
utilities.lazyLoad(exports, ["IdentityProviderAad"], () => require("./identityProviderAad"));

export { IdentityProviderAadb2cArgs, IdentityProviderAadb2cState } from "./identityProviderAadb2c";
export type IdentityProviderAadb2c = import("./identityProviderAadb2c").IdentityProviderAadb2c;
export const IdentityProviderAadb2c: typeof import("./identityProviderAadb2c").IdentityProviderAadb2c = null as any;
utilities.lazyLoad(exports, ["IdentityProviderAadb2c"], () => require("./identityProviderAadb2c"));

export { IdentityProviderFacebookArgs, IdentityProviderFacebookState } from "./identityProviderFacebook";
export type IdentityProviderFacebook = import("./identityProviderFacebook").IdentityProviderFacebook;
export const IdentityProviderFacebook: typeof import("./identityProviderFacebook").IdentityProviderFacebook = null as any;
utilities.lazyLoad(exports, ["IdentityProviderFacebook"], () => require("./identityProviderFacebook"));

export { IdentityProviderGoogleArgs, IdentityProviderGoogleState } from "./identityProviderGoogle";
export type IdentityProviderGoogle = import("./identityProviderGoogle").IdentityProviderGoogle;
export const IdentityProviderGoogle: typeof import("./identityProviderGoogle").IdentityProviderGoogle = null as any;
utilities.lazyLoad(exports, ["IdentityProviderGoogle"], () => require("./identityProviderGoogle"));

export { IdentityProviderMicrosoftArgs, IdentityProviderMicrosoftState } from "./identityProviderMicrosoft";
export type IdentityProviderMicrosoft = import("./identityProviderMicrosoft").IdentityProviderMicrosoft;
export const IdentityProviderMicrosoft: typeof import("./identityProviderMicrosoft").IdentityProviderMicrosoft = null as any;
utilities.lazyLoad(exports, ["IdentityProviderMicrosoft"], () => require("./identityProviderMicrosoft"));

export { IdentityProviderTwitterArgs, IdentityProviderTwitterState } from "./identityProviderTwitter";
export type IdentityProviderTwitter = import("./identityProviderTwitter").IdentityProviderTwitter;
export const IdentityProviderTwitter: typeof import("./identityProviderTwitter").IdentityProviderTwitter = null as any;
utilities.lazyLoad(exports, ["IdentityProviderTwitter"], () => require("./identityProviderTwitter"));

export { LoggerArgs, LoggerState } from "./logger";
export type Logger = import("./logger").Logger;
export const Logger: typeof import("./logger").Logger = null as any;
utilities.lazyLoad(exports, ["Logger"], () => require("./logger"));

export { NamedValueArgs, NamedValueState } from "./namedValue";
export type NamedValue = import("./namedValue").NamedValue;
export const NamedValue: typeof import("./namedValue").NamedValue = null as any;
utilities.lazyLoad(exports, ["NamedValue"], () => require("./namedValue"));

export { NotificationRecipientEmailArgs, NotificationRecipientEmailState } from "./notificationRecipientEmail";
export type NotificationRecipientEmail = import("./notificationRecipientEmail").NotificationRecipientEmail;
export const NotificationRecipientEmail: typeof import("./notificationRecipientEmail").NotificationRecipientEmail = null as any;
utilities.lazyLoad(exports, ["NotificationRecipientEmail"], () => require("./notificationRecipientEmail"));

export { NotificationRecipientUserArgs, NotificationRecipientUserState } from "./notificationRecipientUser";
export type NotificationRecipientUser = import("./notificationRecipientUser").NotificationRecipientUser;
export const NotificationRecipientUser: typeof import("./notificationRecipientUser").NotificationRecipientUser = null as any;
utilities.lazyLoad(exports, ["NotificationRecipientUser"], () => require("./notificationRecipientUser"));

export { OpenIdConnectProviderArgs, OpenIdConnectProviderState } from "./openIdConnectProvider";
export type OpenIdConnectProvider = import("./openIdConnectProvider").OpenIdConnectProvider;
export const OpenIdConnectProvider: typeof import("./openIdConnectProvider").OpenIdConnectProvider = null as any;
utilities.lazyLoad(exports, ["OpenIdConnectProvider"], () => require("./openIdConnectProvider"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { ProductArgs, ProductState } from "./product";
export type Product = import("./product").Product;
export const Product: typeof import("./product").Product = null as any;
utilities.lazyLoad(exports, ["Product"], () => require("./product"));

export { ProductApiArgs, ProductApiState } from "./productApi";
export type ProductApi = import("./productApi").ProductApi;
export const ProductApi: typeof import("./productApi").ProductApi = null as any;
utilities.lazyLoad(exports, ["ProductApi"], () => require("./productApi"));

export { ProductGroupArgs, ProductGroupState } from "./productGroup";
export type ProductGroup = import("./productGroup").ProductGroup;
export const ProductGroup: typeof import("./productGroup").ProductGroup = null as any;
utilities.lazyLoad(exports, ["ProductGroup"], () => require("./productGroup"));

export { ProductPolicyArgs, ProductPolicyState } from "./productPolicy";
export type ProductPolicy = import("./productPolicy").ProductPolicy;
export const ProductPolicy: typeof import("./productPolicy").ProductPolicy = null as any;
utilities.lazyLoad(exports, ["ProductPolicy"], () => require("./productPolicy"));

export { ProductTagArgs, ProductTagState } from "./productTag";
export type ProductTag = import("./productTag").ProductTag;
export const ProductTag: typeof import("./productTag").ProductTag = null as any;
utilities.lazyLoad(exports, ["ProductTag"], () => require("./productTag"));

export { RedisCacheArgs, RedisCacheState } from "./redisCache";
export type RedisCache = import("./redisCache").RedisCache;
export const RedisCache: typeof import("./redisCache").RedisCache = null as any;
utilities.lazyLoad(exports, ["RedisCache"], () => require("./redisCache"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { SubscriptionArgs, SubscriptionState } from "./subscription";
export type Subscription = import("./subscription").Subscription;
export const Subscription: typeof import("./subscription").Subscription = null as any;
utilities.lazyLoad(exports, ["Subscription"], () => require("./subscription"));

export { TagArgs, TagState } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:apimanagement/api:Api":
                return new Api(name, <any>undefined, { urn })
            case "azure:apimanagement/apiDiagnostic:ApiDiagnostic":
                return new ApiDiagnostic(name, <any>undefined, { urn })
            case "azure:apimanagement/apiOperation:ApiOperation":
                return new ApiOperation(name, <any>undefined, { urn })
            case "azure:apimanagement/apiOperationPolicy:ApiOperationPolicy":
                return new ApiOperationPolicy(name, <any>undefined, { urn })
            case "azure:apimanagement/apiOperationTag:ApiOperationTag":
                return new ApiOperationTag(name, <any>undefined, { urn })
            case "azure:apimanagement/apiPolicy:ApiPolicy":
                return new ApiPolicy(name, <any>undefined, { urn })
            case "azure:apimanagement/apiRelease:ApiRelease":
                return new ApiRelease(name, <any>undefined, { urn })
            case "azure:apimanagement/apiSchema:ApiSchema":
                return new ApiSchema(name, <any>undefined, { urn })
            case "azure:apimanagement/apiTag:ApiTag":
                return new ApiTag(name, <any>undefined, { urn })
            case "azure:apimanagement/apiTagDescription:ApiTagDescription":
                return new ApiTagDescription(name, <any>undefined, { urn })
            case "azure:apimanagement/apiVersionSet:ApiVersionSet":
                return new ApiVersionSet(name, <any>undefined, { urn })
            case "azure:apimanagement/authorizationServer:AuthorizationServer":
                return new AuthorizationServer(name, <any>undefined, { urn })
            case "azure:apimanagement/backend:Backend":
                return new Backend(name, <any>undefined, { urn })
            case "azure:apimanagement/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "azure:apimanagement/customDomain:CustomDomain":
                return new CustomDomain(name, <any>undefined, { urn })
            case "azure:apimanagement/diagnostic:Diagnostic":
                return new Diagnostic(name, <any>undefined, { urn })
            case "azure:apimanagement/emailTemplate:EmailTemplate":
                return new EmailTemplate(name, <any>undefined, { urn })
            case "azure:apimanagement/gateway:Gateway":
                return new Gateway(name, <any>undefined, { urn })
            case "azure:apimanagement/gatewayApi:GatewayApi":
                return new GatewayApi(name, <any>undefined, { urn })
            case "azure:apimanagement/gatewayCertificateAuthority:GatewayCertificateAuthority":
                return new GatewayCertificateAuthority(name, <any>undefined, { urn })
            case "azure:apimanagement/gatewayHostNameConfiguration:GatewayHostNameConfiguration":
                return new GatewayHostNameConfiguration(name, <any>undefined, { urn })
            case "azure:apimanagement/globalSchema:GlobalSchema":
                return new GlobalSchema(name, <any>undefined, { urn })
            case "azure:apimanagement/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "azure:apimanagement/groupUser:GroupUser":
                return new GroupUser(name, <any>undefined, { urn })
            case "azure:apimanagement/identityProviderAad:IdentityProviderAad":
                return new IdentityProviderAad(name, <any>undefined, { urn })
            case "azure:apimanagement/identityProviderAadb2c:IdentityProviderAadb2c":
                return new IdentityProviderAadb2c(name, <any>undefined, { urn })
            case "azure:apimanagement/identityProviderFacebook:IdentityProviderFacebook":
                return new IdentityProviderFacebook(name, <any>undefined, { urn })
            case "azure:apimanagement/identityProviderGoogle:IdentityProviderGoogle":
                return new IdentityProviderGoogle(name, <any>undefined, { urn })
            case "azure:apimanagement/identityProviderMicrosoft:IdentityProviderMicrosoft":
                return new IdentityProviderMicrosoft(name, <any>undefined, { urn })
            case "azure:apimanagement/identityProviderTwitter:IdentityProviderTwitter":
                return new IdentityProviderTwitter(name, <any>undefined, { urn })
            case "azure:apimanagement/logger:Logger":
                return new Logger(name, <any>undefined, { urn })
            case "azure:apimanagement/namedValue:NamedValue":
                return new NamedValue(name, <any>undefined, { urn })
            case "azure:apimanagement/notificationRecipientEmail:NotificationRecipientEmail":
                return new NotificationRecipientEmail(name, <any>undefined, { urn })
            case "azure:apimanagement/notificationRecipientUser:NotificationRecipientUser":
                return new NotificationRecipientUser(name, <any>undefined, { urn })
            case "azure:apimanagement/openIdConnectProvider:OpenIdConnectProvider":
                return new OpenIdConnectProvider(name, <any>undefined, { urn })
            case "azure:apimanagement/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "azure:apimanagement/product:Product":
                return new Product(name, <any>undefined, { urn })
            case "azure:apimanagement/productApi:ProductApi":
                return new ProductApi(name, <any>undefined, { urn })
            case "azure:apimanagement/productGroup:ProductGroup":
                return new ProductGroup(name, <any>undefined, { urn })
            case "azure:apimanagement/productPolicy:ProductPolicy":
                return new ProductPolicy(name, <any>undefined, { urn })
            case "azure:apimanagement/productTag:ProductTag":
                return new ProductTag(name, <any>undefined, { urn })
            case "azure:apimanagement/redisCache:RedisCache":
                return new RedisCache(name, <any>undefined, { urn })
            case "azure:apimanagement/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "azure:apimanagement/subscription:Subscription":
                return new Subscription(name, <any>undefined, { urn })
            case "azure:apimanagement/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            case "azure:apimanagement/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "apimanagement/api", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiDiagnostic", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiOperation", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiOperationPolicy", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiOperationTag", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiPolicy", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiRelease", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiSchema", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiTag", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiTagDescription", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiVersionSet", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/authorizationServer", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/backend", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/certificate", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/customDomain", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/diagnostic", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/emailTemplate", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/gateway", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/gatewayApi", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/gatewayCertificateAuthority", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/gatewayHostNameConfiguration", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/globalSchema", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/group", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/groupUser", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/identityProviderAad", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/identityProviderAadb2c", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/identityProviderFacebook", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/identityProviderGoogle", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/identityProviderMicrosoft", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/identityProviderTwitter", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/logger", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/namedValue", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/notificationRecipientEmail", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/notificationRecipientUser", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/openIdConnectProvider", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/policy", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/product", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/productApi", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/productGroup", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/productPolicy", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/productTag", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/redisCache", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/service", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/subscription", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/tag", _module)
pulumi.runtime.registerResourceModule("azure", "apimanagement/user", _module)
