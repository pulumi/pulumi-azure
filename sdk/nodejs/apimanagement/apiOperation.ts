// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages an API Operation within an API Management Service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.apimanagement.getApi({
 *     name: "search-api",
 *     apiManagementName: "search-api-management",
 *     resourceGroupName: "search-service",
 *     revision: "2",
 * });
 * const exampleApiOperation = new azure.apimanagement.ApiOperation("example", {
 *     operationId: "user-delete",
 *     apiName: example.then(example => example.name),
 *     apiManagementName: example.then(example => example.apiManagementName),
 *     resourceGroupName: example.then(example => example.resourceGroupName),
 *     displayName: "Delete User Operation",
 *     method: "DELETE",
 *     urlTemplate: "/users/{id}/delete",
 *     description: "This can only be done by the logged in user.",
 *     templateParameters: [{
 *         name: "id",
 *         type: "number",
 *         required: true,
 *     }],
 *     responses: [{
 *         statusCode: 200,
 *     }],
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.ApiManagement` - 2022-08-01
 *
 * ## Import
 *
 * API Management API Operation's can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:apimanagement/apiOperation:ApiOperation example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ApiManagement/service/instance1/apis/api1/operations/operation1
 * ```
 */
export class ApiOperation extends pulumi.CustomResource {
    /**
     * Get an existing ApiOperation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiOperationState, opts?: pulumi.CustomResourceOptions): ApiOperation {
        return new ApiOperation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:apimanagement/apiOperation:ApiOperation';

    /**
     * Returns true if the given object is an instance of ApiOperation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiOperation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiOperation.__pulumiType;
    }

    /**
     * The Name of the API Management Service where the API exists. Changing this forces a new resource to be created.
     */
    declare public readonly apiManagementName: pulumi.Output<string>;
    /**
     * The name of the API within the API Management Service where this API Operation should be created. Changing this forces a new resource to be created.
     */
    declare public readonly apiName: pulumi.Output<string>;
    /**
     * A description for this API Operation, which may include HTML formatting tags.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The Display Name for this API Management Operation.
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * The HTTP Method used for this API Management Operation, like `GET`, `DELETE`, `PUT` or `POST` - but not limited to these values.
     */
    declare public readonly method: pulumi.Output<string>;
    /**
     * A unique identifier for this API Operation. Changing this forces a new resource to be created.
     */
    declare public readonly operationId: pulumi.Output<string>;
    /**
     * A `request` block as defined below.
     */
    declare public readonly request: pulumi.Output<outputs.apimanagement.ApiOperationRequest>;
    /**
     * The Name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * One or more `response` blocks as defined below.
     */
    declare public readonly responses: pulumi.Output<outputs.apimanagement.ApiOperationResponse[] | undefined>;
    /**
     * One or more `templateParameter` blocks as defined below. Required if `urlTemplate` contains one or more parameters.
     */
    declare public readonly templateParameters: pulumi.Output<outputs.apimanagement.ApiOperationTemplateParameter[] | undefined>;
    /**
     * The relative URL Template identifying the target resource for this operation, which may include parameters.
     */
    declare public readonly urlTemplate: pulumi.Output<string>;

    /**
     * Create a ApiOperation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiOperationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiOperationArgs | ApiOperationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiOperationState | undefined;
            resourceInputs["apiManagementName"] = state?.apiManagementName;
            resourceInputs["apiName"] = state?.apiName;
            resourceInputs["description"] = state?.description;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["method"] = state?.method;
            resourceInputs["operationId"] = state?.operationId;
            resourceInputs["request"] = state?.request;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["responses"] = state?.responses;
            resourceInputs["templateParameters"] = state?.templateParameters;
            resourceInputs["urlTemplate"] = state?.urlTemplate;
        } else {
            const args = argsOrState as ApiOperationArgs | undefined;
            if (args?.apiManagementName === undefined && !opts.urn) {
                throw new Error("Missing required property 'apiManagementName'");
            }
            if (args?.apiName === undefined && !opts.urn) {
                throw new Error("Missing required property 'apiName'");
            }
            if (args?.displayName === undefined && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if (args?.method === undefined && !opts.urn) {
                throw new Error("Missing required property 'method'");
            }
            if (args?.operationId === undefined && !opts.urn) {
                throw new Error("Missing required property 'operationId'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.urlTemplate === undefined && !opts.urn) {
                throw new Error("Missing required property 'urlTemplate'");
            }
            resourceInputs["apiManagementName"] = args?.apiManagementName;
            resourceInputs["apiName"] = args?.apiName;
            resourceInputs["description"] = args?.description;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["method"] = args?.method;
            resourceInputs["operationId"] = args?.operationId;
            resourceInputs["request"] = args?.request;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["responses"] = args?.responses;
            resourceInputs["templateParameters"] = args?.templateParameters;
            resourceInputs["urlTemplate"] = args?.urlTemplate;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApiOperation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApiOperation resources.
 */
export interface ApiOperationState {
    /**
     * The Name of the API Management Service where the API exists. Changing this forces a new resource to be created.
     */
    apiManagementName?: pulumi.Input<string>;
    /**
     * The name of the API within the API Management Service where this API Operation should be created. Changing this forces a new resource to be created.
     */
    apiName?: pulumi.Input<string>;
    /**
     * A description for this API Operation, which may include HTML formatting tags.
     */
    description?: pulumi.Input<string>;
    /**
     * The Display Name for this API Management Operation.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The HTTP Method used for this API Management Operation, like `GET`, `DELETE`, `PUT` or `POST` - but not limited to these values.
     */
    method?: pulumi.Input<string>;
    /**
     * A unique identifier for this API Operation. Changing this forces a new resource to be created.
     */
    operationId?: pulumi.Input<string>;
    /**
     * A `request` block as defined below.
     */
    request?: pulumi.Input<inputs.apimanagement.ApiOperationRequest>;
    /**
     * The Name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * One or more `response` blocks as defined below.
     */
    responses?: pulumi.Input<pulumi.Input<inputs.apimanagement.ApiOperationResponse>[]>;
    /**
     * One or more `templateParameter` blocks as defined below. Required if `urlTemplate` contains one or more parameters.
     */
    templateParameters?: pulumi.Input<pulumi.Input<inputs.apimanagement.ApiOperationTemplateParameter>[]>;
    /**
     * The relative URL Template identifying the target resource for this operation, which may include parameters.
     */
    urlTemplate?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApiOperation resource.
 */
export interface ApiOperationArgs {
    /**
     * The Name of the API Management Service where the API exists. Changing this forces a new resource to be created.
     */
    apiManagementName: pulumi.Input<string>;
    /**
     * The name of the API within the API Management Service where this API Operation should be created. Changing this forces a new resource to be created.
     */
    apiName: pulumi.Input<string>;
    /**
     * A description for this API Operation, which may include HTML formatting tags.
     */
    description?: pulumi.Input<string>;
    /**
     * The Display Name for this API Management Operation.
     */
    displayName: pulumi.Input<string>;
    /**
     * The HTTP Method used for this API Management Operation, like `GET`, `DELETE`, `PUT` or `POST` - but not limited to these values.
     */
    method: pulumi.Input<string>;
    /**
     * A unique identifier for this API Operation. Changing this forces a new resource to be created.
     */
    operationId: pulumi.Input<string>;
    /**
     * A `request` block as defined below.
     */
    request?: pulumi.Input<inputs.apimanagement.ApiOperationRequest>;
    /**
     * The Name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * One or more `response` blocks as defined below.
     */
    responses?: pulumi.Input<pulumi.Input<inputs.apimanagement.ApiOperationResponse>[]>;
    /**
     * One or more `templateParameter` blocks as defined below. Required if `urlTemplate` contains one or more parameters.
     */
    templateParameters?: pulumi.Input<pulumi.Input<inputs.apimanagement.ApiOperationTemplateParameter>[]>;
    /**
     * The relative URL Template identifying the target resource for this operation, which may include parameters.
     */
    urlTemplate: pulumi.Input<string>;
}
