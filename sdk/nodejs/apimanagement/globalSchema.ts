// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Global Schema within an API Management Service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as std from "@pulumi/std";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-rg",
 *     location: "West Europe",
 * });
 * const exampleService = new azure.apimanagement.Service("example", {
 *     name: "example-apim",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     publisherName: "pub1",
 *     publisherEmail: "pub1@email.com",
 *     skuName: "Consumption_0",
 * });
 * const exampleGlobalSchema = new azure.apimanagement.GlobalSchema("example", {
 *     schemaId: "example-schema1",
 *     apiManagementName: exampleService.name,
 *     resourceGroupName: example.name,
 *     type: "xml",
 *     value: std.file({
 *         input: "api_management_api_schema.xml",
 *     }).then(invoke => invoke.result),
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.ApiManagement` - 2022-08-01
 *
 * ## Import
 *
 * API Management API Schema's can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:apimanagement/globalSchema:GlobalSchema example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ApiManagement/service/instance1/schemas/schema1
 * ```
 */
export class GlobalSchema extends pulumi.CustomResource {
    /**
     * Get an existing GlobalSchema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlobalSchemaState, opts?: pulumi.CustomResourceOptions): GlobalSchema {
        return new GlobalSchema(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:apimanagement/globalSchema:GlobalSchema';

    /**
     * Returns true if the given object is an instance of GlobalSchema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlobalSchema {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlobalSchema.__pulumiType;
    }

    /**
     * The Name of the API Management Service where the API exists. Changing this forces a new resource to be created.
     */
    declare public readonly apiManagementName: pulumi.Output<string>;
    /**
     * The description of the schema.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The Name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * A unique identifier for this Schema. Changing this forces a new resource to be created.
     */
    declare public readonly schemaId: pulumi.Output<string>;
    /**
     * The content type of the Schema. Possible values are `xml` and `json`.
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * The string defining the document representing the Schema.
     */
    declare public readonly value: pulumi.Output<string>;

    /**
     * Create a GlobalSchema resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlobalSchemaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlobalSchemaArgs | GlobalSchemaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlobalSchemaState | undefined;
            resourceInputs["apiManagementName"] = state?.apiManagementName;
            resourceInputs["description"] = state?.description;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["schemaId"] = state?.schemaId;
            resourceInputs["type"] = state?.type;
            resourceInputs["value"] = state?.value;
        } else {
            const args = argsOrState as GlobalSchemaArgs | undefined;
            if (args?.apiManagementName === undefined && !opts.urn) {
                throw new Error("Missing required property 'apiManagementName'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.schemaId === undefined && !opts.urn) {
                throw new Error("Missing required property 'schemaId'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if (args?.value === undefined && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["apiManagementName"] = args?.apiManagementName;
            resourceInputs["description"] = args?.description;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["schemaId"] = args?.schemaId;
            resourceInputs["type"] = args?.type;
            resourceInputs["value"] = args?.value;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GlobalSchema.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GlobalSchema resources.
 */
export interface GlobalSchemaState {
    /**
     * The Name of the API Management Service where the API exists. Changing this forces a new resource to be created.
     */
    apiManagementName?: pulumi.Input<string>;
    /**
     * The description of the schema.
     */
    description?: pulumi.Input<string>;
    /**
     * The Name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A unique identifier for this Schema. Changing this forces a new resource to be created.
     */
    schemaId?: pulumi.Input<string>;
    /**
     * The content type of the Schema. Possible values are `xml` and `json`.
     */
    type?: pulumi.Input<string>;
    /**
     * The string defining the document representing the Schema.
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GlobalSchema resource.
 */
export interface GlobalSchemaArgs {
    /**
     * The Name of the API Management Service where the API exists. Changing this forces a new resource to be created.
     */
    apiManagementName: pulumi.Input<string>;
    /**
     * The description of the schema.
     */
    description?: pulumi.Input<string>;
    /**
     * The Name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A unique identifier for this Schema. Changing this forces a new resource to be created.
     */
    schemaId: pulumi.Input<string>;
    /**
     * The content type of the Schema. Possible values are `xml` and `json`.
     */
    type: pulumi.Input<string>;
    /**
     * The string defining the document representing the Schema.
     */
    value: pulumi.Input<string>;
}
