// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an API Schema within an API Management Service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as fs from "fs";
 *
 * const exampleApi = azure.apimanagement.getApi({
 *     name: "search-api",
 *     apiManagementName: "search-api-management",
 *     resourceGroupName: "search-service",
 *     revision: "2",
 * });
 * const exampleApiSchema = new azure.apimanagement.ApiSchema("exampleApiSchema", {
 *     apiName: exampleApi.then(exampleApi => exampleApi.name),
 *     apiManagementName: exampleApi.then(exampleApi => exampleApi.apiManagementName),
 *     resourceGroupName: exampleApi.then(exampleApi => exampleApi.resourceGroupName),
 *     schemaId: "example-schema",
 *     contentType: "application/vnd.ms-azure-apim.xsd+xml",
 *     value: fs.readFileSync("api_management_api_schema.xml", "utf8"),
 * });
 * ```
 *
 * ## Import
 *
 * API Management API Schema's can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:apimanagement/apiSchema:ApiSchema example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ApiManagement/service/instance1/apis/api1/schemas/schema1
 * ```
 */
export class ApiSchema extends pulumi.CustomResource {
    /**
     * Get an existing ApiSchema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiSchemaState, opts?: pulumi.CustomResourceOptions): ApiSchema {
        return new ApiSchema(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:apimanagement/apiSchema:ApiSchema';

    /**
     * Returns true if the given object is an instance of ApiSchema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiSchema {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiSchema.__pulumiType;
    }

    /**
     * The Name of the API Management Service where the API exists. Changing this forces a new resource to be created.
     */
    public readonly apiManagementName!: pulumi.Output<string>;
    /**
     * The name of the API within the API Management Service where this API Schema should be created. Changing this forces a new resource to be created.
     */
    public readonly apiName!: pulumi.Output<string>;
    /**
     * Types definitions. Used for Swagger/OpenAPI v2/v3 schemas only.
     */
    public readonly components!: pulumi.Output<string | undefined>;
    /**
     * The content type of the API Schema.
     */
    public readonly contentType!: pulumi.Output<string>;
    /**
     * Types definitions. Used for Swagger/OpenAPI v1 schemas only.
     */
    public readonly definitions!: pulumi.Output<string | undefined>;
    /**
     * The Name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * A unique identifier for this API Schema. Changing this forces a new resource to be created.
     */
    public readonly schemaId!: pulumi.Output<string>;
    /**
     * The JSON escaped string defining the document representing the Schema.
     */
    public readonly value!: pulumi.Output<string | undefined>;

    /**
     * Create a ApiSchema resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiSchemaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiSchemaArgs | ApiSchemaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiSchemaState | undefined;
            resourceInputs["apiManagementName"] = state ? state.apiManagementName : undefined;
            resourceInputs["apiName"] = state ? state.apiName : undefined;
            resourceInputs["components"] = state ? state.components : undefined;
            resourceInputs["contentType"] = state ? state.contentType : undefined;
            resourceInputs["definitions"] = state ? state.definitions : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["schemaId"] = state ? state.schemaId : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as ApiSchemaArgs | undefined;
            if ((!args || args.apiManagementName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiManagementName'");
            }
            if ((!args || args.apiName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiName'");
            }
            if ((!args || args.contentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contentType'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.schemaId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaId'");
            }
            resourceInputs["apiManagementName"] = args ? args.apiManagementName : undefined;
            resourceInputs["apiName"] = args ? args.apiName : undefined;
            resourceInputs["components"] = args ? args.components : undefined;
            resourceInputs["contentType"] = args ? args.contentType : undefined;
            resourceInputs["definitions"] = args ? args.definitions : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["schemaId"] = args ? args.schemaId : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApiSchema.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApiSchema resources.
 */
export interface ApiSchemaState {
    /**
     * The Name of the API Management Service where the API exists. Changing this forces a new resource to be created.
     */
    apiManagementName?: pulumi.Input<string>;
    /**
     * The name of the API within the API Management Service where this API Schema should be created. Changing this forces a new resource to be created.
     */
    apiName?: pulumi.Input<string>;
    /**
     * Types definitions. Used for Swagger/OpenAPI v2/v3 schemas only.
     */
    components?: pulumi.Input<string>;
    /**
     * The content type of the API Schema.
     */
    contentType?: pulumi.Input<string>;
    /**
     * Types definitions. Used for Swagger/OpenAPI v1 schemas only.
     */
    definitions?: pulumi.Input<string>;
    /**
     * The Name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A unique identifier for this API Schema. Changing this forces a new resource to be created.
     */
    schemaId?: pulumi.Input<string>;
    /**
     * The JSON escaped string defining the document representing the Schema.
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApiSchema resource.
 */
export interface ApiSchemaArgs {
    /**
     * The Name of the API Management Service where the API exists. Changing this forces a new resource to be created.
     */
    apiManagementName: pulumi.Input<string>;
    /**
     * The name of the API within the API Management Service where this API Schema should be created. Changing this forces a new resource to be created.
     */
    apiName: pulumi.Input<string>;
    /**
     * Types definitions. Used for Swagger/OpenAPI v2/v3 schemas only.
     */
    components?: pulumi.Input<string>;
    /**
     * The content type of the API Schema.
     */
    contentType: pulumi.Input<string>;
    /**
     * Types definitions. Used for Swagger/OpenAPI v1 schemas only.
     */
    definitions?: pulumi.Input<string>;
    /**
     * The Name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A unique identifier for this API Schema. Changing this forces a new resource to be created.
     */
    schemaId: pulumi.Input<string>;
    /**
     * The JSON escaped string defining the document representing the Schema.
     */
    value?: pulumi.Input<string>;
}
