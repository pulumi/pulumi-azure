// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an API Management User.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleService = new azure.apimanagement.Service("example", {
 *     name: "example-apim",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     publisherName: "My Company",
 *     publisherEmail: "company@exmaple.com",
 *     skuName: "Developer_1",
 * });
 * const exampleUser = new azure.apimanagement.User("example", {
 *     userId: "5931a75ae4bbd512288c680b",
 *     apiManagementName: exampleService.name,
 *     resourceGroupName: example.name,
 *     firstName: "Example",
 *     lastName: "User",
 *     email: "user@example.com",
 *     state: "active",
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.ApiManagement` - 2022-08-01
 *
 * ## Import
 *
 * API Management Users can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:apimanagement/user:User example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ApiManagement/service/instance1/users/abc123
 * ```
 */
export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:apimanagement/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * The name of the API Management Service in which the User should be created. Changing this forces a new resource to be created.
     */
    declare public readonly apiManagementName: pulumi.Output<string>;
    /**
     * The kind of confirmation email which will be sent to this user. Possible values are `invite` and `signup`. Changing this forces a new resource to be created.
     */
    declare public readonly confirmation: pulumi.Output<string | undefined>;
    /**
     * The email address associated with this user.
     */
    declare public readonly email: pulumi.Output<string>;
    /**
     * The first name for this user.
     */
    declare public readonly firstName: pulumi.Output<string>;
    /**
     * The last name for this user.
     */
    declare public readonly lastName: pulumi.Output<string>;
    /**
     * A note about this user.
     */
    declare public readonly note: pulumi.Output<string | undefined>;
    /**
     * The password associated with this user.
     */
    declare public readonly password: pulumi.Output<string | undefined>;
    /**
     * The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * The state of this user. Possible values are `active`, `blocked` and `pending`.
     *
     * > **Note:** the State can be changed from Pending > Active/Blocked but not from Active/Blocked > Pending.
     */
    declare public readonly state: pulumi.Output<string>;
    /**
     * The Identifier for this User, which must be unique within the API Management Service. Changing this forces a new resource to be created.
     */
    declare public readonly userId: pulumi.Output<string>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["apiManagementName"] = state?.apiManagementName;
            resourceInputs["confirmation"] = state?.confirmation;
            resourceInputs["email"] = state?.email;
            resourceInputs["firstName"] = state?.firstName;
            resourceInputs["lastName"] = state?.lastName;
            resourceInputs["note"] = state?.note;
            resourceInputs["password"] = state?.password;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["state"] = state?.state;
            resourceInputs["userId"] = state?.userId;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if (args?.apiManagementName === undefined && !opts.urn) {
                throw new Error("Missing required property 'apiManagementName'");
            }
            if (args?.email === undefined && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if (args?.firstName === undefined && !opts.urn) {
                throw new Error("Missing required property 'firstName'");
            }
            if (args?.lastName === undefined && !opts.urn) {
                throw new Error("Missing required property 'lastName'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.userId === undefined && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["apiManagementName"] = args?.apiManagementName;
            resourceInputs["confirmation"] = args?.confirmation;
            resourceInputs["email"] = args?.email;
            resourceInputs["firstName"] = args?.firstName;
            resourceInputs["lastName"] = args?.lastName;
            resourceInputs["note"] = args?.note;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["state"] = args?.state;
            resourceInputs["userId"] = args?.userId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * The name of the API Management Service in which the User should be created. Changing this forces a new resource to be created.
     */
    apiManagementName?: pulumi.Input<string>;
    /**
     * The kind of confirmation email which will be sent to this user. Possible values are `invite` and `signup`. Changing this forces a new resource to be created.
     */
    confirmation?: pulumi.Input<string>;
    /**
     * The email address associated with this user.
     */
    email?: pulumi.Input<string>;
    /**
     * The first name for this user.
     */
    firstName?: pulumi.Input<string>;
    /**
     * The last name for this user.
     */
    lastName?: pulumi.Input<string>;
    /**
     * A note about this user.
     */
    note?: pulumi.Input<string>;
    /**
     * The password associated with this user.
     */
    password?: pulumi.Input<string>;
    /**
     * The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The state of this user. Possible values are `active`, `blocked` and `pending`.
     *
     * > **Note:** the State can be changed from Pending > Active/Blocked but not from Active/Blocked > Pending.
     */
    state?: pulumi.Input<string>;
    /**
     * The Identifier for this User, which must be unique within the API Management Service. Changing this forces a new resource to be created.
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * The name of the API Management Service in which the User should be created. Changing this forces a new resource to be created.
     */
    apiManagementName: pulumi.Input<string>;
    /**
     * The kind of confirmation email which will be sent to this user. Possible values are `invite` and `signup`. Changing this forces a new resource to be created.
     */
    confirmation?: pulumi.Input<string>;
    /**
     * The email address associated with this user.
     */
    email: pulumi.Input<string>;
    /**
     * The first name for this user.
     */
    firstName: pulumi.Input<string>;
    /**
     * The last name for this user.
     */
    lastName: pulumi.Input<string>;
    /**
     * A note about this user.
     */
    note?: pulumi.Input<string>;
    /**
     * The password associated with this user.
     */
    password?: pulumi.Input<string>;
    /**
     * The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The state of this user. Possible values are `active`, `blocked` and `pending`.
     *
     * > **Note:** the State can be changed from Pending > Active/Blocked but not from Active/Blocked > Pending.
     */
    state?: pulumi.Input<string>;
    /**
     * The Identifier for this User, which must be unique within the API Management Service. Changing this forces a new resource to be created.
     */
    userId: pulumi.Input<string>;
}
