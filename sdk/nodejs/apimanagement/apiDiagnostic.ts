// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a API Management Service API Diagnostics Logs.
 *
 * ## Import
 *
 * API Management Service API Diagnostics Logs can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:apimanagement/apiDiagnostic:ApiDiagnostic example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ApiManagement/service/instance1/apis/api1/diagnostics/diagnostic1
 * ```
 */
export class ApiDiagnostic extends pulumi.CustomResource {
    /**
     * Get an existing ApiDiagnostic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiDiagnosticState, opts?: pulumi.CustomResourceOptions): ApiDiagnostic {
        return new ApiDiagnostic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:apimanagement/apiDiagnostic:ApiDiagnostic';

    /**
     * Returns true if the given object is an instance of ApiDiagnostic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiDiagnostic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiDiagnostic.__pulumiType;
    }

    /**
     * Always log errors. Send telemetry if there is an erroneous condition, regardless of sampling settings.
     */
    public readonly alwaysLogErrors!: pulumi.Output<boolean>;
    /**
     * The ID (name) of the Diagnostics Logger.
     */
    public readonly apiManagementLoggerId!: pulumi.Output<string>;
    /**
     * The name of the API Management Service instance. Changing this forces a new API Management Service API Diagnostics Logs to be created.
     */
    public readonly apiManagementName!: pulumi.Output<string>;
    /**
     * The name of the API on which to configure the Diagnostics Logs. Changing this forces a new API Management Service API Diagnostics Logs to be created.
     */
    public readonly apiName!: pulumi.Output<string>;
    /**
     * A `backendRequest` block as defined below.
     */
    public readonly backendRequest!: pulumi.Output<outputs.apimanagement.ApiDiagnosticBackendRequest>;
    /**
     * A `backendResponse` block as defined below.
     */
    public readonly backendResponse!: pulumi.Output<outputs.apimanagement.ApiDiagnosticBackendResponse>;
    /**
     * A `frontendRequest` block as defined below.
     */
    public readonly frontendRequest!: pulumi.Output<outputs.apimanagement.ApiDiagnosticFrontendRequest>;
    /**
     * A `frontendResponse` block as defined below.
     */
    public readonly frontendResponse!: pulumi.Output<outputs.apimanagement.ApiDiagnosticFrontendResponse>;
    /**
     * The HTTP Correlation Protocol to use. Possible values are `None`, `Legacy` or `W3C`.
     */
    public readonly httpCorrelationProtocol!: pulumi.Output<string>;
    /**
     * Identifier of the Diagnostics Logs. Possible values are `applicationinsights` and `azuremonitor`. Changing this forces a new API Management Service API Diagnostics Logs to be created.
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * Log client IP address.
     */
    public readonly logClientIp!: pulumi.Output<boolean>;
    /**
     * The format of the Operation Name for Application Insights telemetries. Possible values are `Name`, and `Url`. Defaults to `Name`.
     */
    public readonly operationNameFormat!: pulumi.Output<string | undefined>;
    /**
     * The name of the Resource Group where the API Management Service API Diagnostics Logs should exist. Changing this forces a new API Management Service API Diagnostics Logs to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * Sampling (%). For high traffic APIs, please read this [documentation](https://docs.microsoft.com/azure/api-management/api-management-howto-app-insights#performance-implications-and-log-sampling) to understand performance implications and log sampling. Valid values are between `0.0` and `100.0`.
     */
    public readonly samplingPercentage!: pulumi.Output<number>;
    /**
     * Logging verbosity. Possible values are `verbose`, `information` or `error`.
     */
    public readonly verbosity!: pulumi.Output<string>;

    /**
     * Create a ApiDiagnostic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiDiagnosticArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiDiagnosticArgs | ApiDiagnosticState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiDiagnosticState | undefined;
            resourceInputs["alwaysLogErrors"] = state ? state.alwaysLogErrors : undefined;
            resourceInputs["apiManagementLoggerId"] = state ? state.apiManagementLoggerId : undefined;
            resourceInputs["apiManagementName"] = state ? state.apiManagementName : undefined;
            resourceInputs["apiName"] = state ? state.apiName : undefined;
            resourceInputs["backendRequest"] = state ? state.backendRequest : undefined;
            resourceInputs["backendResponse"] = state ? state.backendResponse : undefined;
            resourceInputs["frontendRequest"] = state ? state.frontendRequest : undefined;
            resourceInputs["frontendResponse"] = state ? state.frontendResponse : undefined;
            resourceInputs["httpCorrelationProtocol"] = state ? state.httpCorrelationProtocol : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["logClientIp"] = state ? state.logClientIp : undefined;
            resourceInputs["operationNameFormat"] = state ? state.operationNameFormat : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["samplingPercentage"] = state ? state.samplingPercentage : undefined;
            resourceInputs["verbosity"] = state ? state.verbosity : undefined;
        } else {
            const args = argsOrState as ApiDiagnosticArgs | undefined;
            if ((!args || args.apiManagementLoggerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiManagementLoggerId'");
            }
            if ((!args || args.apiManagementName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiManagementName'");
            }
            if ((!args || args.apiName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiName'");
            }
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["alwaysLogErrors"] = args ? args.alwaysLogErrors : undefined;
            resourceInputs["apiManagementLoggerId"] = args ? args.apiManagementLoggerId : undefined;
            resourceInputs["apiManagementName"] = args ? args.apiManagementName : undefined;
            resourceInputs["apiName"] = args ? args.apiName : undefined;
            resourceInputs["backendRequest"] = args ? args.backendRequest : undefined;
            resourceInputs["backendResponse"] = args ? args.backendResponse : undefined;
            resourceInputs["frontendRequest"] = args ? args.frontendRequest : undefined;
            resourceInputs["frontendResponse"] = args ? args.frontendResponse : undefined;
            resourceInputs["httpCorrelationProtocol"] = args ? args.httpCorrelationProtocol : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["logClientIp"] = args ? args.logClientIp : undefined;
            resourceInputs["operationNameFormat"] = args ? args.operationNameFormat : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["samplingPercentage"] = args ? args.samplingPercentage : undefined;
            resourceInputs["verbosity"] = args ? args.verbosity : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApiDiagnostic.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApiDiagnostic resources.
 */
export interface ApiDiagnosticState {
    /**
     * Always log errors. Send telemetry if there is an erroneous condition, regardless of sampling settings.
     */
    alwaysLogErrors?: pulumi.Input<boolean>;
    /**
     * The ID (name) of the Diagnostics Logger.
     */
    apiManagementLoggerId?: pulumi.Input<string>;
    /**
     * The name of the API Management Service instance. Changing this forces a new API Management Service API Diagnostics Logs to be created.
     */
    apiManagementName?: pulumi.Input<string>;
    /**
     * The name of the API on which to configure the Diagnostics Logs. Changing this forces a new API Management Service API Diagnostics Logs to be created.
     */
    apiName?: pulumi.Input<string>;
    /**
     * A `backendRequest` block as defined below.
     */
    backendRequest?: pulumi.Input<inputs.apimanagement.ApiDiagnosticBackendRequest>;
    /**
     * A `backendResponse` block as defined below.
     */
    backendResponse?: pulumi.Input<inputs.apimanagement.ApiDiagnosticBackendResponse>;
    /**
     * A `frontendRequest` block as defined below.
     */
    frontendRequest?: pulumi.Input<inputs.apimanagement.ApiDiagnosticFrontendRequest>;
    /**
     * A `frontendResponse` block as defined below.
     */
    frontendResponse?: pulumi.Input<inputs.apimanagement.ApiDiagnosticFrontendResponse>;
    /**
     * The HTTP Correlation Protocol to use. Possible values are `None`, `Legacy` or `W3C`.
     */
    httpCorrelationProtocol?: pulumi.Input<string>;
    /**
     * Identifier of the Diagnostics Logs. Possible values are `applicationinsights` and `azuremonitor`. Changing this forces a new API Management Service API Diagnostics Logs to be created.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Log client IP address.
     */
    logClientIp?: pulumi.Input<boolean>;
    /**
     * The format of the Operation Name for Application Insights telemetries. Possible values are `Name`, and `Url`. Defaults to `Name`.
     */
    operationNameFormat?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the API Management Service API Diagnostics Logs should exist. Changing this forces a new API Management Service API Diagnostics Logs to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * Sampling (%). For high traffic APIs, please read this [documentation](https://docs.microsoft.com/azure/api-management/api-management-howto-app-insights#performance-implications-and-log-sampling) to understand performance implications and log sampling. Valid values are between `0.0` and `100.0`.
     */
    samplingPercentage?: pulumi.Input<number>;
    /**
     * Logging verbosity. Possible values are `verbose`, `information` or `error`.
     */
    verbosity?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApiDiagnostic resource.
 */
export interface ApiDiagnosticArgs {
    /**
     * Always log errors. Send telemetry if there is an erroneous condition, regardless of sampling settings.
     */
    alwaysLogErrors?: pulumi.Input<boolean>;
    /**
     * The ID (name) of the Diagnostics Logger.
     */
    apiManagementLoggerId: pulumi.Input<string>;
    /**
     * The name of the API Management Service instance. Changing this forces a new API Management Service API Diagnostics Logs to be created.
     */
    apiManagementName: pulumi.Input<string>;
    /**
     * The name of the API on which to configure the Diagnostics Logs. Changing this forces a new API Management Service API Diagnostics Logs to be created.
     */
    apiName: pulumi.Input<string>;
    /**
     * A `backendRequest` block as defined below.
     */
    backendRequest?: pulumi.Input<inputs.apimanagement.ApiDiagnosticBackendRequest>;
    /**
     * A `backendResponse` block as defined below.
     */
    backendResponse?: pulumi.Input<inputs.apimanagement.ApiDiagnosticBackendResponse>;
    /**
     * A `frontendRequest` block as defined below.
     */
    frontendRequest?: pulumi.Input<inputs.apimanagement.ApiDiagnosticFrontendRequest>;
    /**
     * A `frontendResponse` block as defined below.
     */
    frontendResponse?: pulumi.Input<inputs.apimanagement.ApiDiagnosticFrontendResponse>;
    /**
     * The HTTP Correlation Protocol to use. Possible values are `None`, `Legacy` or `W3C`.
     */
    httpCorrelationProtocol?: pulumi.Input<string>;
    /**
     * Identifier of the Diagnostics Logs. Possible values are `applicationinsights` and `azuremonitor`. Changing this forces a new API Management Service API Diagnostics Logs to be created.
     */
    identifier: pulumi.Input<string>;
    /**
     * Log client IP address.
     */
    logClientIp?: pulumi.Input<boolean>;
    /**
     * The format of the Operation Name for Application Insights telemetries. Possible values are `Name`, and `Url`. Defaults to `Name`.
     */
    operationNameFormat?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the API Management Service API Diagnostics Logs should exist. Changing this forces a new API Management Service API Diagnostics Logs to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Sampling (%). For high traffic APIs, please read this [documentation](https://docs.microsoft.com/azure/api-management/api-management-howto-app-insights#performance-implications-and-log-sampling) to understand performance implications and log sampling. Valid values are between `0.0` and `100.0`.
     */
    samplingPercentage?: pulumi.Input<number>;
    /**
     * Logging verbosity. Possible values are `verbose`, `information` or `error`.
     */
    verbosity?: pulumi.Input<string>;
}
