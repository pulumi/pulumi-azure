// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a backend within an API Management Service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleService = new azure.apimanagement.Service("example", {
 *     name: "example-apim",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     publisherName: "My Company",
 *     publisherEmail: "company@exmaple.com",
 *     skuName: "Developer_1",
 * });
 * const exampleBackend = new azure.apimanagement.Backend("example", {
 *     name: "example-backend",
 *     resourceGroupName: example.name,
 *     apiManagementName: exampleService.name,
 *     protocol: "http",
 *     url: "https://backend.com/api",
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.ApiManagement` - 2022-08-01
 *
 * ## Import
 *
 * API Management backends can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:apimanagement/backend:Backend example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ApiManagement/service/instance1/backends/backend1
 * ```
 */
export class Backend extends pulumi.CustomResource {
    /**
     * Get an existing Backend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackendState, opts?: pulumi.CustomResourceOptions): Backend {
        return new Backend(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:apimanagement/backend:Backend';

    /**
     * Returns true if the given object is an instance of Backend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Backend {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Backend.__pulumiType;
    }

    /**
     * The Name of the API Management Service where this backend should be created. Changing this forces a new resource to be created.
     */
    declare public readonly apiManagementName: pulumi.Output<string>;
    /**
     * A `credentials` block as documented below.
     */
    declare public readonly credentials: pulumi.Output<outputs.apimanagement.BackendCredentials | undefined>;
    /**
     * The description of the backend.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The name of the API Management backend. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The protocol used by the backend host. Possible values are `http` or `soap`.
     */
    declare public readonly protocol: pulumi.Output<string>;
    /**
     * A `proxy` block as documented below.
     */
    declare public readonly proxy: pulumi.Output<outputs.apimanagement.BackendProxy | undefined>;
    /**
     * The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * The management URI of the backend host in an external system. This URI can be the ARM Resource ID of Logic Apps, Function Apps or API Apps, or the management endpoint of a Service Fabric cluster.
     */
    declare public readonly resourceId: pulumi.Output<string | undefined>;
    /**
     * A `serviceFabricCluster` block as documented below.
     */
    declare public readonly serviceFabricCluster: pulumi.Output<outputs.apimanagement.BackendServiceFabricCluster | undefined>;
    /**
     * The title of the backend.
     */
    declare public readonly title: pulumi.Output<string | undefined>;
    /**
     * A `tls` block as documented below.
     */
    declare public readonly tls: pulumi.Output<outputs.apimanagement.BackendTls | undefined>;
    /**
     * The backend host URL should be specified in the format `"https://backend.com/api"`, avoiding trailing slashes (/) to minimize misconfiguration risks. Azure API Management instance will append the backend resource name to this URL. This URL typically serves as the `base-url` in the [`set-backend-service`](https://learn.microsoft.com/azure/api-management/set-backend-service-policy) policy, enabling seamless transitions from frontend to backend.
     */
    declare public readonly url: pulumi.Output<string>;

    /**
     * Create a Backend resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackendArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackendArgs | BackendState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackendState | undefined;
            resourceInputs["apiManagementName"] = state?.apiManagementName;
            resourceInputs["credentials"] = state?.credentials;
            resourceInputs["description"] = state?.description;
            resourceInputs["name"] = state?.name;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["proxy"] = state?.proxy;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["resourceId"] = state?.resourceId;
            resourceInputs["serviceFabricCluster"] = state?.serviceFabricCluster;
            resourceInputs["title"] = state?.title;
            resourceInputs["tls"] = state?.tls;
            resourceInputs["url"] = state?.url;
        } else {
            const args = argsOrState as BackendArgs | undefined;
            if (args?.apiManagementName === undefined && !opts.urn) {
                throw new Error("Missing required property 'apiManagementName'");
            }
            if (args?.protocol === undefined && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.url === undefined && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["apiManagementName"] = args?.apiManagementName;
            resourceInputs["credentials"] = args?.credentials;
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["proxy"] = args?.proxy;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["resourceId"] = args?.resourceId;
            resourceInputs["serviceFabricCluster"] = args?.serviceFabricCluster;
            resourceInputs["title"] = args?.title;
            resourceInputs["tls"] = args?.tls;
            resourceInputs["url"] = args?.url;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Backend.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Backend resources.
 */
export interface BackendState {
    /**
     * The Name of the API Management Service where this backend should be created. Changing this forces a new resource to be created.
     */
    apiManagementName?: pulumi.Input<string>;
    /**
     * A `credentials` block as documented below.
     */
    credentials?: pulumi.Input<inputs.apimanagement.BackendCredentials>;
    /**
     * The description of the backend.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the API Management backend. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The protocol used by the backend host. Possible values are `http` or `soap`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * A `proxy` block as documented below.
     */
    proxy?: pulumi.Input<inputs.apimanagement.BackendProxy>;
    /**
     * The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The management URI of the backend host in an external system. This URI can be the ARM Resource ID of Logic Apps, Function Apps or API Apps, or the management endpoint of a Service Fabric cluster.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * A `serviceFabricCluster` block as documented below.
     */
    serviceFabricCluster?: pulumi.Input<inputs.apimanagement.BackendServiceFabricCluster>;
    /**
     * The title of the backend.
     */
    title?: pulumi.Input<string>;
    /**
     * A `tls` block as documented below.
     */
    tls?: pulumi.Input<inputs.apimanagement.BackendTls>;
    /**
     * The backend host URL should be specified in the format `"https://backend.com/api"`, avoiding trailing slashes (/) to minimize misconfiguration risks. Azure API Management instance will append the backend resource name to this URL. This URL typically serves as the `base-url` in the [`set-backend-service`](https://learn.microsoft.com/azure/api-management/set-backend-service-policy) policy, enabling seamless transitions from frontend to backend.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Backend resource.
 */
export interface BackendArgs {
    /**
     * The Name of the API Management Service where this backend should be created. Changing this forces a new resource to be created.
     */
    apiManagementName: pulumi.Input<string>;
    /**
     * A `credentials` block as documented below.
     */
    credentials?: pulumi.Input<inputs.apimanagement.BackendCredentials>;
    /**
     * The description of the backend.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the API Management backend. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The protocol used by the backend host. Possible values are `http` or `soap`.
     */
    protocol: pulumi.Input<string>;
    /**
     * A `proxy` block as documented below.
     */
    proxy?: pulumi.Input<inputs.apimanagement.BackendProxy>;
    /**
     * The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The management URI of the backend host in an external system. This URI can be the ARM Resource ID of Logic Apps, Function Apps or API Apps, or the management endpoint of a Service Fabric cluster.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * A `serviceFabricCluster` block as documented below.
     */
    serviceFabricCluster?: pulumi.Input<inputs.apimanagement.BackendServiceFabricCluster>;
    /**
     * The title of the backend.
     */
    title?: pulumi.Input<string>;
    /**
     * A `tls` block as documented below.
     */
    tls?: pulumi.Input<inputs.apimanagement.BackendTls>;
    /**
     * The backend host URL should be specified in the format `"https://backend.com/api"`, avoiding trailing slashes (/) to minimize misconfiguration risks. Azure API Management instance will append the backend resource name to this URL. This URL typically serves as the `base-url` in the [`set-backend-service`](https://learn.microsoft.com/azure/api-management/set-backend-service-policy) policy, enabling seamless transitions from frontend to backend.
     */
    url: pulumi.Input<string>;
}
