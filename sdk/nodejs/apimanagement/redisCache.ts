// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a API Management Redis Cache.
 *
 * ## Example Usage
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.ApiManagement` - 2022-08-01
 *
 * ## Import
 *
 * API Management Redis Caches can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:apimanagement/redisCache:RedisCache example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ApiManagement/service/service1/caches/cache1
 * ```
 */
export class RedisCache extends pulumi.CustomResource {
    /**
     * Get an existing RedisCache resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedisCacheState, opts?: pulumi.CustomResourceOptions): RedisCache {
        return new RedisCache(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:apimanagement/redisCache:RedisCache';

    /**
     * Returns true if the given object is an instance of RedisCache.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RedisCache {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RedisCache.__pulumiType;
    }

    /**
     * The resource ID of the API Management Service from which to create this external cache. Changing this forces a new API Management Redis Cache to be created.
     */
    declare public readonly apiManagementId: pulumi.Output<string>;
    /**
     * The location where to use cache from. Possible values are `default` and valid Azure regions. Defaults to `default`.
     */
    declare public readonly cacheLocation: pulumi.Output<string | undefined>;
    /**
     * The connection string to the Cache for Redis.
     */
    declare public readonly connectionString: pulumi.Output<string>;
    /**
     * The description of the API Management Redis Cache.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The name which should be used for this API Management Redis Cache. Changing this forces a new API Management Redis Cache to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The resource ID of the Cache for Redis.
     */
    declare public readonly redisCacheId: pulumi.Output<string | undefined>;

    /**
     * Create a RedisCache resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedisCacheArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedisCacheArgs | RedisCacheState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedisCacheState | undefined;
            resourceInputs["apiManagementId"] = state?.apiManagementId;
            resourceInputs["cacheLocation"] = state?.cacheLocation;
            resourceInputs["connectionString"] = state?.connectionString;
            resourceInputs["description"] = state?.description;
            resourceInputs["name"] = state?.name;
            resourceInputs["redisCacheId"] = state?.redisCacheId;
        } else {
            const args = argsOrState as RedisCacheArgs | undefined;
            if (args?.apiManagementId === undefined && !opts.urn) {
                throw new Error("Missing required property 'apiManagementId'");
            }
            if (args?.connectionString === undefined && !opts.urn) {
                throw new Error("Missing required property 'connectionString'");
            }
            resourceInputs["apiManagementId"] = args?.apiManagementId;
            resourceInputs["cacheLocation"] = args?.cacheLocation;
            resourceInputs["connectionString"] = args?.connectionString ? pulumi.secret(args.connectionString) : undefined;
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["redisCacheId"] = args?.redisCacheId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["connectionString"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RedisCache.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RedisCache resources.
 */
export interface RedisCacheState {
    /**
     * The resource ID of the API Management Service from which to create this external cache. Changing this forces a new API Management Redis Cache to be created.
     */
    apiManagementId?: pulumi.Input<string>;
    /**
     * The location where to use cache from. Possible values are `default` and valid Azure regions. Defaults to `default`.
     */
    cacheLocation?: pulumi.Input<string>;
    /**
     * The connection string to the Cache for Redis.
     */
    connectionString?: pulumi.Input<string>;
    /**
     * The description of the API Management Redis Cache.
     */
    description?: pulumi.Input<string>;
    /**
     * The name which should be used for this API Management Redis Cache. Changing this forces a new API Management Redis Cache to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The resource ID of the Cache for Redis.
     */
    redisCacheId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RedisCache resource.
 */
export interface RedisCacheArgs {
    /**
     * The resource ID of the API Management Service from which to create this external cache. Changing this forces a new API Management Redis Cache to be created.
     */
    apiManagementId: pulumi.Input<string>;
    /**
     * The location where to use cache from. Possible values are `default` and valid Azure regions. Defaults to `default`.
     */
    cacheLocation?: pulumi.Input<string>;
    /**
     * The connection string to the Cache for Redis.
     */
    connectionString: pulumi.Input<string>;
    /**
     * The description of the API Management Redis Cache.
     */
    description?: pulumi.Input<string>;
    /**
     * The name which should be used for this API Management Redis Cache. Changing this forces a new API Management Redis Cache to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The resource ID of the Cache for Redis.
     */
    redisCacheId?: pulumi.Input<string>;
}
