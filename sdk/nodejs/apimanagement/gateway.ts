// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages an API Management Gateway.
 *
 * ## Import
 *
 * API Management Gateways can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:apimanagement/gateway:Gateway example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ApiManagement/service/service1/gateways/gateway1
 * ```
 */
export class Gateway extends pulumi.CustomResource {
    /**
     * Get an existing Gateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayState, opts?: pulumi.CustomResourceOptions): Gateway {
        return new Gateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:apimanagement/gateway:Gateway';

    /**
     * Returns true if the given object is an instance of Gateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Gateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Gateway.__pulumiType;
    }

    /**
     * The ID of the API Management Resource in which the gateway will be created. Changing this forces a new API Management Gateway resource to be created.
     */
    public readonly apiManagementId!: pulumi.Output<string>;
    /**
     * The description of the API Management Gateway.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A `locationData` block as documented below.
     */
    public readonly locationData!: pulumi.Output<outputs.apimanagement.GatewayLocationData>;
    /**
     * The name which should be used for the API Management Gateway. Changing this forces a new API Management Gateway to be created.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a Gateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayArgs | GatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayState | undefined;
            resourceInputs["apiManagementId"] = state ? state.apiManagementId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["locationData"] = state ? state.locationData : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as GatewayArgs | undefined;
            if ((!args || args.apiManagementId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiManagementId'");
            }
            if ((!args || args.locationData === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locationData'");
            }
            resourceInputs["apiManagementId"] = args ? args.apiManagementId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["locationData"] = args ? args.locationData : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Gateway.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Gateway resources.
 */
export interface GatewayState {
    /**
     * The ID of the API Management Resource in which the gateway will be created. Changing this forces a new API Management Gateway resource to be created.
     */
    apiManagementId?: pulumi.Input<string>;
    /**
     * The description of the API Management Gateway.
     */
    description?: pulumi.Input<string>;
    /**
     * A `locationData` block as documented below.
     */
    locationData?: pulumi.Input<inputs.apimanagement.GatewayLocationData>;
    /**
     * The name which should be used for the API Management Gateway. Changing this forces a new API Management Gateway to be created.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Gateway resource.
 */
export interface GatewayArgs {
    /**
     * The ID of the API Management Resource in which the gateway will be created. Changing this forces a new API Management Gateway resource to be created.
     */
    apiManagementId: pulumi.Input<string>;
    /**
     * The description of the API Management Gateway.
     */
    description?: pulumi.Input<string>;
    /**
     * A `locationData` block as documented below.
     */
    locationData: pulumi.Input<inputs.apimanagement.GatewayLocationData>;
    /**
     * The name which should be used for the API Management Gateway. Changing this forces a new API Management Gateway to be created.
     */
    name?: pulumi.Input<string>;
}
