// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an Azure Server Vulnerability Assessment (Qualys) to a VM.
 *
 * > **NOTE** Azure Defender has to be enabled on the subscription in order for this resource to work.
 * See this [documentation](https://docs.microsoft.com/azure/security-center/security-center-get-started) to get started.
 *
 * ## Import
 *
 * Server Vulnerability Assessments can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:securitycenter/serverVulnerabilityAssessmentVirtualMachine:ServerVulnerabilityAssessmentVirtualMachine example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.Compute/virtualMachines/vm-name/providers/Microsoft.Security/serverVulnerabilityAssessments/Default
 * ```
 */
export class ServerVulnerabilityAssessmentVirtualMachine extends pulumi.CustomResource {
    /**
     * Get an existing ServerVulnerabilityAssessmentVirtualMachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerVulnerabilityAssessmentVirtualMachineState, opts?: pulumi.CustomResourceOptions): ServerVulnerabilityAssessmentVirtualMachine {
        return new ServerVulnerabilityAssessmentVirtualMachine(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:securitycenter/serverVulnerabilityAssessmentVirtualMachine:ServerVulnerabilityAssessmentVirtualMachine';

    /**
     * Returns true if the given object is an instance of ServerVulnerabilityAssessmentVirtualMachine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerVulnerabilityAssessmentVirtualMachine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerVulnerabilityAssessmentVirtualMachine.__pulumiType;
    }

    /**
     * The ID of the virtual machine to be monitored by vulnerability assessment. Changing this forces a new resource to be created.
     */
    public readonly virtualMachineId!: pulumi.Output<string>;

    /**
     * Create a ServerVulnerabilityAssessmentVirtualMachine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerVulnerabilityAssessmentVirtualMachineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerVulnerabilityAssessmentVirtualMachineArgs | ServerVulnerabilityAssessmentVirtualMachineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerVulnerabilityAssessmentVirtualMachineState | undefined;
            resourceInputs["virtualMachineId"] = state ? state.virtualMachineId : undefined;
        } else {
            const args = argsOrState as ServerVulnerabilityAssessmentVirtualMachineArgs | undefined;
            if ((!args || args.virtualMachineId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualMachineId'");
            }
            resourceInputs["virtualMachineId"] = args ? args.virtualMachineId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServerVulnerabilityAssessmentVirtualMachine.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServerVulnerabilityAssessmentVirtualMachine resources.
 */
export interface ServerVulnerabilityAssessmentVirtualMachineState {
    /**
     * The ID of the virtual machine to be monitored by vulnerability assessment. Changing this forces a new resource to be created.
     */
    virtualMachineId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServerVulnerabilityAssessmentVirtualMachine resource.
 */
export interface ServerVulnerabilityAssessmentVirtualMachineArgs {
    /**
     * The ID of the virtual machine to be monitored by vulnerability assessment. Changing this forces a new resource to be created.
     */
    virtualMachineId: pulumi.Input<string>;
}
