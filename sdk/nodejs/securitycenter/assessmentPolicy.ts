// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages the Security Center Assessment Metadata for Azure Security Center.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.securitycenter.AssessmentPolicy("example", {
 *     description: "Test Description",
 *     displayName: "Test Display Name",
 *     severity: "Medium",
 * });
 * ```
 *
 * ## Import
 *
 * Security Assessments Policy can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:securitycenter/assessmentPolicy:AssessmentPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Security/assessmentMetadata/metadata1
 * ```
 */
export class AssessmentPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AssessmentPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AssessmentPolicyState, opts?: pulumi.CustomResourceOptions): AssessmentPolicy {
        return new AssessmentPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:securitycenter/assessmentPolicy:AssessmentPolicy';

    /**
     * Returns true if the given object is an instance of AssessmentPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AssessmentPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AssessmentPolicy.__pulumiType;
    }

    /**
     * The description of the Security Center Assessment.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The user-friendly display name of the Security Center Assessment.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The implementation effort which is used to remediate the Security Center Assessment. Possible values are `Low`, `Moderate` and `High`.
     */
    public readonly implementationEffort!: pulumi.Output<string | undefined>;
    /**
     * The GUID as the name of the Security Center Assessment Policy.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The description which is used to mitigate the security issue.
     */
    public readonly remediationDescription!: pulumi.Output<string | undefined>;
    /**
     * The severity level of the Security Center Assessment. Possible values are `Low`, `Medium` and `High`. Defaults to `Medium`.
     */
    public readonly severity!: pulumi.Output<string | undefined>;
    /**
     * A list of the threat impacts for the Security Center Assessment. Possible values are `AccountBreach`, `DataExfiltration`, `DataSpillage`, `DenialOfService`, `ElevationOfPrivilege`, `MaliciousInsider`, `MissingCoverage` and `ThreatResistance`.
     */
    public readonly threats!: pulumi.Output<string[] | undefined>;
    /**
     * The user impact of the Security Center Assessment. Possible values are `Low`, `Moderate` and `High`.
     */
    public readonly userImpact!: pulumi.Output<string | undefined>;

    /**
     * Create a AssessmentPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AssessmentPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AssessmentPolicyArgs | AssessmentPolicyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AssessmentPolicyState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["implementationEffort"] = state ? state.implementationEffort : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["remediationDescription"] = state ? state.remediationDescription : undefined;
            inputs["severity"] = state ? state.severity : undefined;
            inputs["threats"] = state ? state.threats : undefined;
            inputs["userImpact"] = state ? state.userImpact : undefined;
        } else {
            const args = argsOrState as AssessmentPolicyArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["implementationEffort"] = args ? args.implementationEffort : undefined;
            inputs["remediationDescription"] = args ? args.remediationDescription : undefined;
            inputs["severity"] = args ? args.severity : undefined;
            inputs["threats"] = args ? args.threats : undefined;
            inputs["userImpact"] = args ? args.userImpact : undefined;
            inputs["name"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(AssessmentPolicy.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AssessmentPolicy resources.
 */
export interface AssessmentPolicyState {
    /**
     * The description of the Security Center Assessment.
     */
    description?: pulumi.Input<string>;
    /**
     * The user-friendly display name of the Security Center Assessment.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The implementation effort which is used to remediate the Security Center Assessment. Possible values are `Low`, `Moderate` and `High`.
     */
    implementationEffort?: pulumi.Input<string>;
    /**
     * The GUID as the name of the Security Center Assessment Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The description which is used to mitigate the security issue.
     */
    remediationDescription?: pulumi.Input<string>;
    /**
     * The severity level of the Security Center Assessment. Possible values are `Low`, `Medium` and `High`. Defaults to `Medium`.
     */
    severity?: pulumi.Input<string>;
    /**
     * A list of the threat impacts for the Security Center Assessment. Possible values are `AccountBreach`, `DataExfiltration`, `DataSpillage`, `DenialOfService`, `ElevationOfPrivilege`, `MaliciousInsider`, `MissingCoverage` and `ThreatResistance`.
     */
    threats?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The user impact of the Security Center Assessment. Possible values are `Low`, `Moderate` and `High`.
     */
    userImpact?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AssessmentPolicy resource.
 */
export interface AssessmentPolicyArgs {
    /**
     * The description of the Security Center Assessment.
     */
    description: pulumi.Input<string>;
    /**
     * The user-friendly display name of the Security Center Assessment.
     */
    displayName: pulumi.Input<string>;
    /**
     * The implementation effort which is used to remediate the Security Center Assessment. Possible values are `Low`, `Moderate` and `High`.
     */
    implementationEffort?: pulumi.Input<string>;
    /**
     * The description which is used to mitigate the security issue.
     */
    remediationDescription?: pulumi.Input<string>;
    /**
     * The severity level of the Security Center Assessment. Possible values are `Low`, `Medium` and `High`. Defaults to `Medium`.
     */
    severity?: pulumi.Input<string>;
    /**
     * A list of the threat impacts for the Security Center Assessment. Possible values are `AccountBreach`, `DataExfiltration`, `DataSpillage`, `DenialOfService`, `ElevationOfPrivilege`, `MaliciousInsider`, `MissingCoverage` and `ThreatResistance`.
     */
    threats?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The user impact of the Security Center Assessment. Possible values are `Low`, `Moderate` and `High`.
     */
    userImpact?: pulumi.Input<string>;
}
