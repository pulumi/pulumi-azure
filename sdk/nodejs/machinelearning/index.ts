// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ComputeClusterArgs, ComputeClusterState } from "./computeCluster";
export type ComputeCluster = import("./computeCluster").ComputeCluster;
export const ComputeCluster: typeof import("./computeCluster").ComputeCluster = null as any;
utilities.lazyLoad(exports, ["ComputeCluster"], () => require("./computeCluster"));

export { ComputeInstanceArgs, ComputeInstanceState } from "./computeInstance";
export type ComputeInstance = import("./computeInstance").ComputeInstance;
export const ComputeInstance: typeof import("./computeInstance").ComputeInstance = null as any;
utilities.lazyLoad(exports, ["ComputeInstance"], () => require("./computeInstance"));

export { DatastoreBlobstorageArgs, DatastoreBlobstorageState } from "./datastoreBlobstorage";
export type DatastoreBlobstorage = import("./datastoreBlobstorage").DatastoreBlobstorage;
export const DatastoreBlobstorage: typeof import("./datastoreBlobstorage").DatastoreBlobstorage = null as any;
utilities.lazyLoad(exports, ["DatastoreBlobstorage"], () => require("./datastoreBlobstorage"));

export { GetWorkspaceArgs, GetWorkspaceResult, GetWorkspaceOutputArgs } from "./getWorkspace";
export const getWorkspace: typeof import("./getWorkspace").getWorkspace = null as any;
export const getWorkspaceOutput: typeof import("./getWorkspace").getWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspace","getWorkspaceOutput"], () => require("./getWorkspace"));

export { InferenceClusterArgs, InferenceClusterState } from "./inferenceCluster";
export type InferenceCluster = import("./inferenceCluster").InferenceCluster;
export const InferenceCluster: typeof import("./inferenceCluster").InferenceCluster = null as any;
utilities.lazyLoad(exports, ["InferenceCluster"], () => require("./inferenceCluster"));

export { SynapseSparkArgs, SynapseSparkState } from "./synapseSpark";
export type SynapseSpark = import("./synapseSpark").SynapseSpark;
export const SynapseSpark: typeof import("./synapseSpark").SynapseSpark = null as any;
utilities.lazyLoad(exports, ["SynapseSpark"], () => require("./synapseSpark"));

export { WorkspaceArgs, WorkspaceState } from "./workspace";
export type Workspace = import("./workspace").Workspace;
export const Workspace: typeof import("./workspace").Workspace = null as any;
utilities.lazyLoad(exports, ["Workspace"], () => require("./workspace"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:machinelearning/computeCluster:ComputeCluster":
                return new ComputeCluster(name, <any>undefined, { urn })
            case "azure:machinelearning/computeInstance:ComputeInstance":
                return new ComputeInstance(name, <any>undefined, { urn })
            case "azure:machinelearning/datastoreBlobstorage:DatastoreBlobstorage":
                return new DatastoreBlobstorage(name, <any>undefined, { urn })
            case "azure:machinelearning/inferenceCluster:InferenceCluster":
                return new InferenceCluster(name, <any>undefined, { urn })
            case "azure:machinelearning/synapseSpark:SynapseSpark":
                return new SynapseSpark(name, <any>undefined, { urn })
            case "azure:machinelearning/workspace:Workspace":
                return new Workspace(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "machinelearning/computeCluster", _module)
pulumi.runtime.registerResourceModule("azure", "machinelearning/computeInstance", _module)
pulumi.runtime.registerResourceModule("azure", "machinelearning/datastoreBlobstorage", _module)
pulumi.runtime.registerResourceModule("azure", "machinelearning/inferenceCluster", _module)
pulumi.runtime.registerResourceModule("azure", "machinelearning/synapseSpark", _module)
pulumi.runtime.registerResourceModule("azure", "machinelearning/workspace", _module)
