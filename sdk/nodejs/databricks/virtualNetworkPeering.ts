// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Databricks Virtual Network Peering
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const remoteVirtualNetwork = new azure.network.VirtualNetwork("remoteVirtualNetwork", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     addressSpaces: ["10.0.1.0/24"],
 *     location: exampleResourceGroup.location,
 * });
 * const exampleWorkspace = new azure.databricks.Workspace("exampleWorkspace", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     sku: "standard",
 * });
 * const exampleVirtualNetworkPeering = new azure.databricks.VirtualNetworkPeering("exampleVirtualNetworkPeering", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     workspaceId: exampleWorkspace.id,
 *     remoteAddressSpacePrefixes: remoteVirtualNetwork.addressSpaces,
 *     remoteVirtualNetworkId: remoteVirtualNetwork.id,
 *     allowVirtualNetworkAccess: true,
 * });
 * const remoteVirtualNetworkPeering = new azure.network.VirtualNetworkPeering("remoteVirtualNetworkPeering", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     virtualNetworkName: remoteVirtualNetwork.name,
 *     remoteVirtualNetworkId: exampleVirtualNetworkPeering.virtualNetworkId,
 *     allowVirtualNetworkAccess: true,
 * });
 * ```
 *
 * ## Import
 *
 * Databrick Virtual Network Peerings can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:databricks/virtualNetworkPeering:VirtualNetworkPeering example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Databricks/workspaces/workspace1/virtualNetworkPeerings/peering1
 * ```
 */
export class VirtualNetworkPeering extends pulumi.CustomResource {
    /**
     * Get an existing VirtualNetworkPeering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualNetworkPeeringState, opts?: pulumi.CustomResourceOptions): VirtualNetworkPeering {
        return new VirtualNetworkPeering(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:databricks/virtualNetworkPeering:VirtualNetworkPeering';

    /**
     * Returns true if the given object is an instance of VirtualNetworkPeering.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualNetworkPeering {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualNetworkPeering.__pulumiType;
    }

    /**
     * A list of address blocks reserved for this virtual network in CIDR notation.
     */
    public /*out*/ readonly addressSpacePrefixes!: pulumi.Output<string[]>;
    /**
     * Can the forwarded traffic from the VMs in the local virtual network be forwarded to the remote virtual network? Defaults to `false`.
     */
    public readonly allowForwardedTraffic!: pulumi.Output<boolean | undefined>;
    /**
     * Can the gateway links be used in the remote virtual network to link to the Databricks virtual network? Defaults to `false`.
     */
    public readonly allowGatewayTransit!: pulumi.Output<boolean | undefined>;
    /**
     * Can the VMs in the local virtual network space access the VMs in the remote virtual network space? Defaults to `true`.
     */
    public readonly allowVirtualNetworkAccess!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the name of the Databricks Virtual Network Peering resource. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A list of address blocks reserved for the remote virtual network in CIDR notation. Changing this forces a new resource to be created.
     */
    public readonly remoteAddressSpacePrefixes!: pulumi.Output<string[]>;
    /**
     * The ID of the remote virtual network. Changing this forces a new resource to be created.
     *
     * > **NOTE:** The remote virtual network should be in the same region as the databricks workspace. Please see the [product documentation](https://learn.microsoft.com/azure/databricks/administration-guide/cloud-configurations/azure/vnet-peering) for more information.
     */
    public readonly remoteVirtualNetworkId!: pulumi.Output<string>;
    /**
     * The name of the Resource Group in which the Databricks Virtual Network Peering should exist. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * Can remote gateways be used on the Databricks virtual network? Defaults to `false`.
     *
     * > **NOTE:** If the `useRemoteGateways` is set to `true`, and `allowGatewayTransit` on the remote peering is also `true`, the virtual network will use the gateways of the remote virtual network for transit. Only one peering can have this flag set to `true`. `useRemoteGateways` cannot be set if the virtual network already has a gateway.
     */
    public readonly useRemoteGateways!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the internal Virtual Network used by the DataBricks Workspace.
     *
     * > **NOTE:** The `virtualNetworkId` field is the value you must supply to the `azure.network.VirtualNetworkPeering` resources `remoteVirtualNetworkId` field to successfully peer the Databricks Virtual Network with the remote virtual network.
     */
    public /*out*/ readonly virtualNetworkId!: pulumi.Output<string>;
    /**
     * The ID of the Databricks Workspace that this Databricks Virtual Network Peering is bound. Changing this forces a new resource to be created.
     */
    public readonly workspaceId!: pulumi.Output<string>;

    /**
     * Create a VirtualNetworkPeering resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualNetworkPeeringArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualNetworkPeeringArgs | VirtualNetworkPeeringState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualNetworkPeeringState | undefined;
            resourceInputs["addressSpacePrefixes"] = state ? state.addressSpacePrefixes : undefined;
            resourceInputs["allowForwardedTraffic"] = state ? state.allowForwardedTraffic : undefined;
            resourceInputs["allowGatewayTransit"] = state ? state.allowGatewayTransit : undefined;
            resourceInputs["allowVirtualNetworkAccess"] = state ? state.allowVirtualNetworkAccess : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["remoteAddressSpacePrefixes"] = state ? state.remoteAddressSpacePrefixes : undefined;
            resourceInputs["remoteVirtualNetworkId"] = state ? state.remoteVirtualNetworkId : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["useRemoteGateways"] = state ? state.useRemoteGateways : undefined;
            resourceInputs["virtualNetworkId"] = state ? state.virtualNetworkId : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        } else {
            const args = argsOrState as VirtualNetworkPeeringArgs | undefined;
            if ((!args || args.remoteAddressSpacePrefixes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteAddressSpacePrefixes'");
            }
            if ((!args || args.remoteVirtualNetworkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteVirtualNetworkId'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.workspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["allowForwardedTraffic"] = args ? args.allowForwardedTraffic : undefined;
            resourceInputs["allowGatewayTransit"] = args ? args.allowGatewayTransit : undefined;
            resourceInputs["allowVirtualNetworkAccess"] = args ? args.allowVirtualNetworkAccess : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["remoteAddressSpacePrefixes"] = args ? args.remoteAddressSpacePrefixes : undefined;
            resourceInputs["remoteVirtualNetworkId"] = args ? args.remoteVirtualNetworkId : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["useRemoteGateways"] = args ? args.useRemoteGateways : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
            resourceInputs["addressSpacePrefixes"] = undefined /*out*/;
            resourceInputs["virtualNetworkId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualNetworkPeering.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VirtualNetworkPeering resources.
 */
export interface VirtualNetworkPeeringState {
    /**
     * A list of address blocks reserved for this virtual network in CIDR notation.
     */
    addressSpacePrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Can the forwarded traffic from the VMs in the local virtual network be forwarded to the remote virtual network? Defaults to `false`.
     */
    allowForwardedTraffic?: pulumi.Input<boolean>;
    /**
     * Can the gateway links be used in the remote virtual network to link to the Databricks virtual network? Defaults to `false`.
     */
    allowGatewayTransit?: pulumi.Input<boolean>;
    /**
     * Can the VMs in the local virtual network space access the VMs in the remote virtual network space? Defaults to `true`.
     */
    allowVirtualNetworkAccess?: pulumi.Input<boolean>;
    /**
     * Specifies the name of the Databricks Virtual Network Peering resource. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of address blocks reserved for the remote virtual network in CIDR notation. Changing this forces a new resource to be created.
     */
    remoteAddressSpacePrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the remote virtual network. Changing this forces a new resource to be created.
     *
     * > **NOTE:** The remote virtual network should be in the same region as the databricks workspace. Please see the [product documentation](https://learn.microsoft.com/azure/databricks/administration-guide/cloud-configurations/azure/vnet-peering) for more information.
     */
    remoteVirtualNetworkId?: pulumi.Input<string>;
    /**
     * The name of the Resource Group in which the Databricks Virtual Network Peering should exist. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * Can remote gateways be used on the Databricks virtual network? Defaults to `false`.
     *
     * > **NOTE:** If the `useRemoteGateways` is set to `true`, and `allowGatewayTransit` on the remote peering is also `true`, the virtual network will use the gateways of the remote virtual network for transit. Only one peering can have this flag set to `true`. `useRemoteGateways` cannot be set if the virtual network already has a gateway.
     */
    useRemoteGateways?: pulumi.Input<boolean>;
    /**
     * The ID of the internal Virtual Network used by the DataBricks Workspace.
     *
     * > **NOTE:** The `virtualNetworkId` field is the value you must supply to the `azure.network.VirtualNetworkPeering` resources `remoteVirtualNetworkId` field to successfully peer the Databricks Virtual Network with the remote virtual network.
     */
    virtualNetworkId?: pulumi.Input<string>;
    /**
     * The ID of the Databricks Workspace that this Databricks Virtual Network Peering is bound. Changing this forces a new resource to be created.
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VirtualNetworkPeering resource.
 */
export interface VirtualNetworkPeeringArgs {
    /**
     * Can the forwarded traffic from the VMs in the local virtual network be forwarded to the remote virtual network? Defaults to `false`.
     */
    allowForwardedTraffic?: pulumi.Input<boolean>;
    /**
     * Can the gateway links be used in the remote virtual network to link to the Databricks virtual network? Defaults to `false`.
     */
    allowGatewayTransit?: pulumi.Input<boolean>;
    /**
     * Can the VMs in the local virtual network space access the VMs in the remote virtual network space? Defaults to `true`.
     */
    allowVirtualNetworkAccess?: pulumi.Input<boolean>;
    /**
     * Specifies the name of the Databricks Virtual Network Peering resource. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of address blocks reserved for the remote virtual network in CIDR notation. Changing this forces a new resource to be created.
     */
    remoteAddressSpacePrefixes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the remote virtual network. Changing this forces a new resource to be created.
     *
     * > **NOTE:** The remote virtual network should be in the same region as the databricks workspace. Please see the [product documentation](https://learn.microsoft.com/azure/databricks/administration-guide/cloud-configurations/azure/vnet-peering) for more information.
     */
    remoteVirtualNetworkId: pulumi.Input<string>;
    /**
     * The name of the Resource Group in which the Databricks Virtual Network Peering should exist. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Can remote gateways be used on the Databricks virtual network? Defaults to `false`.
     *
     * > **NOTE:** If the `useRemoteGateways` is set to `true`, and `allowGatewayTransit` on the remote peering is also `true`, the virtual network will use the gateways of the remote virtual network for transit. Only one peering can have this flag set to `true`. `useRemoteGateways` cannot be set if the virtual network already has a gateway.
     */
    useRemoteGateways?: pulumi.Input<boolean>;
    /**
     * The ID of the Databricks Workspace that this Databricks Virtual Network Peering is bound. Changing this forces a new resource to be created.
     */
    workspaceId: pulumi.Input<string>;
}
