// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a maintenance configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleConfiguration = new azure.maintenance.Configuration("example", {
 *     name: "example-mc",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     scope: "SQLDB",
 *     tags: {
 *         Env: "prod",
 *     },
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Maintenance` - 2023-04-01
 *
 * ## Import
 *
 * Maintenance Configuration can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:maintenance/configuration:Configuration example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Maintenance/maintenanceConfigurations/example-mc
 * ```
 */
export class Configuration extends pulumi.CustomResource {
    /**
     * Get an existing Configuration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigurationState, opts?: pulumi.CustomResourceOptions): Configuration {
        return new Configuration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:maintenance/configuration:Configuration';

    /**
     * Returns true if the given object is an instance of Configuration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Configuration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Configuration.__pulumiType;
    }

    /**
     * The in guest user patch mode. Possible values are `Platform` or `User`. Must be specified when `scope` is `InGuestPatch`.
     */
    declare public readonly inGuestUserPatchMode: pulumi.Output<string | undefined>;
    /**
     * An `installPatches` block as defined below.
     *
     * > **Note:** `installPatches` must be specified when `scope` is `InGuestPatch`.
     */
    declare public readonly installPatches: pulumi.Output<outputs.maintenance.ConfigurationInstallPatches | undefined>;
    /**
     * Specified the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * Specifies the name of the Maintenance Configuration. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * A mapping of properties to assign to the resource.
     */
    declare public readonly properties: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name of the Resource Group where the Maintenance Configuration should exist. Changing this forces a new resource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * The scope of the Maintenance Configuration. Possible values are `Extension`, `Host`, `InGuestPatch`, `OSImage`, `SQLDB` or `SQLManagedInstance`.
     */
    declare public readonly scope: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource. The key could not contain upper case letter.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The visibility of the Maintenance Configuration. The only allowable value is `Custom`. Defaults to `Custom`.
     */
    declare public readonly visibility: pulumi.Output<string | undefined>;
    /**
     * A `window` block as defined below.
     */
    declare public readonly window: pulumi.Output<outputs.maintenance.ConfigurationWindow | undefined>;

    /**
     * Create a Configuration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigurationArgs | ConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigurationState | undefined;
            resourceInputs["inGuestUserPatchMode"] = state?.inGuestUserPatchMode;
            resourceInputs["installPatches"] = state?.installPatches;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["properties"] = state?.properties;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["scope"] = state?.scope;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["visibility"] = state?.visibility;
            resourceInputs["window"] = state?.window;
        } else {
            const args = argsOrState as ConfigurationArgs | undefined;
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.scope === undefined && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            resourceInputs["inGuestUserPatchMode"] = args?.inGuestUserPatchMode;
            resourceInputs["installPatches"] = args?.installPatches;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["properties"] = args?.properties;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["scope"] = args?.scope;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["visibility"] = args?.visibility;
            resourceInputs["window"] = args?.window;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Configuration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Configuration resources.
 */
export interface ConfigurationState {
    /**
     * The in guest user patch mode. Possible values are `Platform` or `User`. Must be specified when `scope` is `InGuestPatch`.
     */
    inGuestUserPatchMode?: pulumi.Input<string>;
    /**
     * An `installPatches` block as defined below.
     *
     * > **Note:** `installPatches` must be specified when `scope` is `InGuestPatch`.
     */
    installPatches?: pulumi.Input<inputs.maintenance.ConfigurationInstallPatches>;
    /**
     * Specified the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of the Maintenance Configuration. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A mapping of properties to assign to the resource.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the Resource Group where the Maintenance Configuration should exist. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The scope of the Maintenance Configuration. Possible values are `Extension`, `Host`, `InGuestPatch`, `OSImage`, `SQLDB` or `SQLManagedInstance`.
     */
    scope?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource. The key could not contain upper case letter.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The visibility of the Maintenance Configuration. The only allowable value is `Custom`. Defaults to `Custom`.
     */
    visibility?: pulumi.Input<string>;
    /**
     * A `window` block as defined below.
     */
    window?: pulumi.Input<inputs.maintenance.ConfigurationWindow>;
}

/**
 * The set of arguments for constructing a Configuration resource.
 */
export interface ConfigurationArgs {
    /**
     * The in guest user patch mode. Possible values are `Platform` or `User`. Must be specified when `scope` is `InGuestPatch`.
     */
    inGuestUserPatchMode?: pulumi.Input<string>;
    /**
     * An `installPatches` block as defined below.
     *
     * > **Note:** `installPatches` must be specified when `scope` is `InGuestPatch`.
     */
    installPatches?: pulumi.Input<inputs.maintenance.ConfigurationInstallPatches>;
    /**
     * Specified the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of the Maintenance Configuration. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A mapping of properties to assign to the resource.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the Resource Group where the Maintenance Configuration should exist. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The scope of the Maintenance Configuration. Possible values are `Extension`, `Host`, `InGuestPatch`, `OSImage`, `SQLDB` or `SQLManagedInstance`.
     */
    scope: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource. The key could not contain upper case letter.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The visibility of the Maintenance Configuration. The only allowable value is `Custom`. Defaults to `Custom`.
     */
    visibility?: pulumi.Input<string>;
    /**
     * A `window` block as defined below.
     */
    window?: pulumi.Input<inputs.maintenance.ConfigurationWindow>;
}
