// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Dynamic Maintenance Assignment.
 *
 * > **Note:** Only valid for `InGuestPatch` Maintenance Configuration Scopes.
 *
 * ## Import
 *
 * Dynamic Maintenance Assignments can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:maintenance/assignmentDynamicScope:AssignmentDynamicScope example /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Maintenance/configurationAssignments/assignmentName
 * ```
 */
export class AssignmentDynamicScope extends pulumi.CustomResource {
    /**
     * Get an existing AssignmentDynamicScope resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AssignmentDynamicScopeState, opts?: pulumi.CustomResourceOptions): AssignmentDynamicScope {
        return new AssignmentDynamicScope(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:maintenance/assignmentDynamicScope:AssignmentDynamicScope';

    /**
     * Returns true if the given object is an instance of AssignmentDynamicScope.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AssignmentDynamicScope {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AssignmentDynamicScope.__pulumiType;
    }

    /**
     * A `filter` block as defined below.
     */
    declare public readonly filter: pulumi.Output<outputs.maintenance.AssignmentDynamicScopeFilter>;
    /**
     * The ID of the Maintenance Configuration Resource. Changing this forces a new Dynamic Maintenance Assignment to be created.
     */
    declare public readonly maintenanceConfigurationId: pulumi.Output<string>;
    /**
     * The name which should be used for this Dynamic Maintenance Assignment. Changing this forces a new Dynamic Maintenance Assignment to be created.
     *
     * > **Note:** The `name` must be unique per subscription.
     */
    declare public readonly name: pulumi.Output<string>;

    /**
     * Create a AssignmentDynamicScope resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AssignmentDynamicScopeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AssignmentDynamicScopeArgs | AssignmentDynamicScopeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AssignmentDynamicScopeState | undefined;
            resourceInputs["filter"] = state?.filter;
            resourceInputs["maintenanceConfigurationId"] = state?.maintenanceConfigurationId;
            resourceInputs["name"] = state?.name;
        } else {
            const args = argsOrState as AssignmentDynamicScopeArgs | undefined;
            if (args?.filter === undefined && !opts.urn) {
                throw new Error("Missing required property 'filter'");
            }
            if (args?.maintenanceConfigurationId === undefined && !opts.urn) {
                throw new Error("Missing required property 'maintenanceConfigurationId'");
            }
            resourceInputs["filter"] = args?.filter;
            resourceInputs["maintenanceConfigurationId"] = args?.maintenanceConfigurationId;
            resourceInputs["name"] = args?.name;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AssignmentDynamicScope.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AssignmentDynamicScope resources.
 */
export interface AssignmentDynamicScopeState {
    /**
     * A `filter` block as defined below.
     */
    filter?: pulumi.Input<inputs.maintenance.AssignmentDynamicScopeFilter>;
    /**
     * The ID of the Maintenance Configuration Resource. Changing this forces a new Dynamic Maintenance Assignment to be created.
     */
    maintenanceConfigurationId?: pulumi.Input<string>;
    /**
     * The name which should be used for this Dynamic Maintenance Assignment. Changing this forces a new Dynamic Maintenance Assignment to be created.
     *
     * > **Note:** The `name` must be unique per subscription.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AssignmentDynamicScope resource.
 */
export interface AssignmentDynamicScopeArgs {
    /**
     * A `filter` block as defined below.
     */
    filter: pulumi.Input<inputs.maintenance.AssignmentDynamicScopeFilter>;
    /**
     * The ID of the Maintenance Configuration Resource. Changing this forces a new Dynamic Maintenance Assignment to be created.
     */
    maintenanceConfigurationId: pulumi.Input<string>;
    /**
     * The name which should be used for this Dynamic Maintenance Assignment. Changing this forces a new Dynamic Maintenance Assignment to be created.
     *
     * > **Note:** The `name` must be unique per subscription.
     */
    name?: pulumi.Input<string>;
}
