// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ActiveRoleAssignmentArgs, ActiveRoleAssignmentState } from "./activeRoleAssignment";
export type ActiveRoleAssignment = import("./activeRoleAssignment").ActiveRoleAssignment;
export const ActiveRoleAssignment: typeof import("./activeRoleAssignment").ActiveRoleAssignment = null as any;
utilities.lazyLoad(exports, ["ActiveRoleAssignment"], () => require("./activeRoleAssignment"));

export { EligibleRoleAssignmentArgs, EligibleRoleAssignmentState } from "./eligibleRoleAssignment";
export type EligibleRoleAssignment = import("./eligibleRoleAssignment").EligibleRoleAssignment;
export const EligibleRoleAssignment: typeof import("./eligibleRoleAssignment").EligibleRoleAssignment = null as any;
utilities.lazyLoad(exports, ["EligibleRoleAssignment"], () => require("./eligibleRoleAssignment"));

export { GetRoleManagementPolicyArgs, GetRoleManagementPolicyResult, GetRoleManagementPolicyOutputArgs } from "./getRoleManagementPolicy";
export const getRoleManagementPolicy: typeof import("./getRoleManagementPolicy").getRoleManagementPolicy = null as any;
export const getRoleManagementPolicyOutput: typeof import("./getRoleManagementPolicy").getRoleManagementPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getRoleManagementPolicy","getRoleManagementPolicyOutput"], () => require("./getRoleManagementPolicy"));

export { RoleManagementPolicyArgs, RoleManagementPolicyState } from "./roleManagementPolicy";
export type RoleManagementPolicy = import("./roleManagementPolicy").RoleManagementPolicy;
export const RoleManagementPolicy: typeof import("./roleManagementPolicy").RoleManagementPolicy = null as any;
utilities.lazyLoad(exports, ["RoleManagementPolicy"], () => require("./roleManagementPolicy"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:pim/activeRoleAssignment:ActiveRoleAssignment":
                return new ActiveRoleAssignment(name, <any>undefined, { urn })
            case "azure:pim/eligibleRoleAssignment:EligibleRoleAssignment":
                return new EligibleRoleAssignment(name, <any>undefined, { urn })
            case "azure:pim/roleManagementPolicy:RoleManagementPolicy":
                return new RoleManagementPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "pim/activeRoleAssignment", _module)
pulumi.runtime.registerResourceModule("azure", "pim/eligibleRoleAssignment", _module)
pulumi.runtime.registerResourceModule("azure", "pim/roleManagementPolicy", _module)
