// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a PIM Eligible Role Assignment.
 *
 * ## Example Usage
 *
 * ### Subscription)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as time from "@pulumiverse/time";
 *
 * const primary = azure.core.getSubscription({});
 * const example = azure.core.getClientConfig({});
 * const exampleGetRoleDefinition = azure.authorization.getRoleDefinition({
 *     name: "Reader",
 * });
 * const exampleStatic = new time.Static("example", {});
 * const exampleEligibleRoleAssignment = new azure.pim.EligibleRoleAssignment("example", {
 *     scope: primary.then(primary => primary.id),
 *     roleDefinitionId: Promise.all([primary, exampleGetRoleDefinition]).then(([primary, exampleGetRoleDefinition]) => `${primary.id}${exampleGetRoleDefinition.id}`),
 *     principalId: example.then(example => example.objectId),
 *     schedule: {
 *         startDateTime: exampleStatic.rfc3339,
 *         expiration: {
 *             durationHours: 8,
 *         },
 *     },
 *     justification: "Expiration Duration Set",
 *     ticket: {
 *         number: "1",
 *         system: "example ticket system",
 *     },
 * });
 * ```
 *
 * ### Management Group)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as time from "@pulumiverse/time";
 *
 * const example = azure.core.getClientConfig({});
 * const exampleGetRoleDefinition = azure.authorization.getRoleDefinition({
 *     name: "Reader",
 * });
 * const exampleGroup = new azure.management.Group("example", {name: "Example-Management-Group"});
 * const exampleStatic = new time.Static("example", {});
 * const exampleEligibleRoleAssignment = new azure.pim.EligibleRoleAssignment("example", {
 *     scope: exampleGroup.id,
 *     roleDefinitionId: exampleGetRoleDefinition.then(exampleGetRoleDefinition => exampleGetRoleDefinition.id),
 *     principalId: example.then(example => example.objectId),
 *     schedule: {
 *         startDateTime: exampleStatic.rfc3339,
 *         expiration: {
 *             durationHours: 8,
 *         },
 *     },
 *     justification: "Expiration Duration Set",
 *     ticket: {
 *         number: "1",
 *         system: "example ticket system",
 *     },
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Authorization` - 2020-10-01
 *
 * ## Import
 *
 * PIM Eligible Role Assignments can be imported using the following composite resource ID, e.g.
 *
 * ```sh
 * $ pulumi import azure:pim/eligibleRoleAssignment:EligibleRoleAssignment example /subscriptions/00000000-0000-0000-0000-000000000000|/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Authorization/roleDefinitions/00000000-0000-0000-0000-000000000000|00000000-0000-0000-0000-000000000000
 * ```
 */
export class EligibleRoleAssignment extends pulumi.CustomResource {
    /**
     * Get an existing EligibleRoleAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EligibleRoleAssignmentState, opts?: pulumi.CustomResourceOptions): EligibleRoleAssignment {
        return new EligibleRoleAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:pim/eligibleRoleAssignment:EligibleRoleAssignment';

    /**
     * Returns true if the given object is an instance of EligibleRoleAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EligibleRoleAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EligibleRoleAssignment.__pulumiType;
    }

    /**
     * The condition that limits the resources that the role can be assigned to. See the [official conditions documentation](https://learn.microsoft.com/en-us/azure/role-based-access-control/conditions-overview#what-are-role-assignment-conditions) for details. Changing this forces a new resource to be created.
     */
    declare public readonly condition: pulumi.Output<string | undefined>;
    /**
     * The version of the condition. Supported values include `2.0`. Changing this forces a new resource to be created.
     *
     * > **Note:** `conditionVersion` is required when specifying `condition` and vice versa.
     */
    declare public readonly conditionVersion: pulumi.Output<string | undefined>;
    /**
     * The justification of the role assignment. Changing this forces a new resource to be created.
     */
    declare public readonly justification: pulumi.Output<string>;
    /**
     * Object ID of the principal for this eligible role assignment. Changing this forces a new resource to be created.
     */
    declare public readonly principalId: pulumi.Output<string>;
    /**
     * Type of principal to which the role will be assigned.
     */
    declare public /*out*/ readonly principalType: pulumi.Output<string>;
    /**
     * The role definition ID for this eligible role assignment. Changing this forces a new resource to be created.
     */
    declare public readonly roleDefinitionId: pulumi.Output<string>;
    /**
     * A `schedule` block as defined below. Changing this forces a new resource to be created.
     */
    declare public readonly schedule: pulumi.Output<outputs.pim.EligibleRoleAssignmentSchedule>;
    /**
     * The scope for this eligible role assignment, should be a valid resource ID. Changing this forces a new resource to be created.
     */
    declare public readonly scope: pulumi.Output<string>;
    /**
     * A `ticket` block as defined below. Changing this forces a new resource to be created.
     */
    declare public readonly ticket: pulumi.Output<outputs.pim.EligibleRoleAssignmentTicket>;

    /**
     * Create a EligibleRoleAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EligibleRoleAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EligibleRoleAssignmentArgs | EligibleRoleAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EligibleRoleAssignmentState | undefined;
            resourceInputs["condition"] = state?.condition;
            resourceInputs["conditionVersion"] = state?.conditionVersion;
            resourceInputs["justification"] = state?.justification;
            resourceInputs["principalId"] = state?.principalId;
            resourceInputs["principalType"] = state?.principalType;
            resourceInputs["roleDefinitionId"] = state?.roleDefinitionId;
            resourceInputs["schedule"] = state?.schedule;
            resourceInputs["scope"] = state?.scope;
            resourceInputs["ticket"] = state?.ticket;
        } else {
            const args = argsOrState as EligibleRoleAssignmentArgs | undefined;
            if (args?.principalId === undefined && !opts.urn) {
                throw new Error("Missing required property 'principalId'");
            }
            if (args?.roleDefinitionId === undefined && !opts.urn) {
                throw new Error("Missing required property 'roleDefinitionId'");
            }
            if (args?.scope === undefined && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            resourceInputs["condition"] = args?.condition;
            resourceInputs["conditionVersion"] = args?.conditionVersion;
            resourceInputs["justification"] = args?.justification;
            resourceInputs["principalId"] = args?.principalId;
            resourceInputs["roleDefinitionId"] = args?.roleDefinitionId;
            resourceInputs["schedule"] = args?.schedule;
            resourceInputs["scope"] = args?.scope;
            resourceInputs["ticket"] = args?.ticket;
            resourceInputs["principalType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EligibleRoleAssignment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EligibleRoleAssignment resources.
 */
export interface EligibleRoleAssignmentState {
    /**
     * The condition that limits the resources that the role can be assigned to. See the [official conditions documentation](https://learn.microsoft.com/en-us/azure/role-based-access-control/conditions-overview#what-are-role-assignment-conditions) for details. Changing this forces a new resource to be created.
     */
    condition?: pulumi.Input<string>;
    /**
     * The version of the condition. Supported values include `2.0`. Changing this forces a new resource to be created.
     *
     * > **Note:** `conditionVersion` is required when specifying `condition` and vice versa.
     */
    conditionVersion?: pulumi.Input<string>;
    /**
     * The justification of the role assignment. Changing this forces a new resource to be created.
     */
    justification?: pulumi.Input<string>;
    /**
     * Object ID of the principal for this eligible role assignment. Changing this forces a new resource to be created.
     */
    principalId?: pulumi.Input<string>;
    /**
     * Type of principal to which the role will be assigned.
     */
    principalType?: pulumi.Input<string>;
    /**
     * The role definition ID for this eligible role assignment. Changing this forces a new resource to be created.
     */
    roleDefinitionId?: pulumi.Input<string>;
    /**
     * A `schedule` block as defined below. Changing this forces a new resource to be created.
     */
    schedule?: pulumi.Input<inputs.pim.EligibleRoleAssignmentSchedule>;
    /**
     * The scope for this eligible role assignment, should be a valid resource ID. Changing this forces a new resource to be created.
     */
    scope?: pulumi.Input<string>;
    /**
     * A `ticket` block as defined below. Changing this forces a new resource to be created.
     */
    ticket?: pulumi.Input<inputs.pim.EligibleRoleAssignmentTicket>;
}

/**
 * The set of arguments for constructing a EligibleRoleAssignment resource.
 */
export interface EligibleRoleAssignmentArgs {
    /**
     * The condition that limits the resources that the role can be assigned to. See the [official conditions documentation](https://learn.microsoft.com/en-us/azure/role-based-access-control/conditions-overview#what-are-role-assignment-conditions) for details. Changing this forces a new resource to be created.
     */
    condition?: pulumi.Input<string>;
    /**
     * The version of the condition. Supported values include `2.0`. Changing this forces a new resource to be created.
     *
     * > **Note:** `conditionVersion` is required when specifying `condition` and vice versa.
     */
    conditionVersion?: pulumi.Input<string>;
    /**
     * The justification of the role assignment. Changing this forces a new resource to be created.
     */
    justification?: pulumi.Input<string>;
    /**
     * Object ID of the principal for this eligible role assignment. Changing this forces a new resource to be created.
     */
    principalId: pulumi.Input<string>;
    /**
     * The role definition ID for this eligible role assignment. Changing this forces a new resource to be created.
     */
    roleDefinitionId: pulumi.Input<string>;
    /**
     * A `schedule` block as defined below. Changing this forces a new resource to be created.
     */
    schedule?: pulumi.Input<inputs.pim.EligibleRoleAssignmentSchedule>;
    /**
     * The scope for this eligible role assignment, should be a valid resource ID. Changing this forces a new resource to be created.
     */
    scope: pulumi.Input<string>;
    /**
     * A `ticket` block as defined below. Changing this forces a new resource to be created.
     */
    ticket?: pulumi.Input<inputs.pim.EligibleRoleAssignmentTicket>;
}
