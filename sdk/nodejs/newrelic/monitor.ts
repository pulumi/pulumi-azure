// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages an Azure Native New Relic Monitor.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "East US"});
 * const exampleMonitor = new azure.newrelic.Monitor("exampleMonitor", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     plan: {
 *         effectiveDate: "2023-06-06T00:00:00Z",
 *     },
 *     user: {
 *         email: "user@example.com",
 *         firstName: "Example",
 *         lastName: "User",
 *         phoneNumber: "+12313803556",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Azure Native New Relic Monitor can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:newrelic/monitor:Monitor example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/NewRelic.Observability/monitors/monitor1
 * ```
 */
export class Monitor extends pulumi.CustomResource {
    /**
     * Get an existing Monitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorState, opts?: pulumi.CustomResourceOptions): Monitor {
        return new Monitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:newrelic/monitor:Monitor';

    /**
     * Returns true if the given object is an instance of Monitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Monitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Monitor.__pulumiType;
    }

    /**
     * Specifies the source of account creation. Possible values are `LIFTR` and `NEWRELIC`. Defaults to `LIFTR`. Changing this forces a new Azure Native New Relic Monitor to be created.
     */
    public readonly accountCreationSource!: pulumi.Output<string | undefined>;
    /**
     * Specifies the account id. Changing this forces a new Azure Native New Relic Monitor to be created.
     *
     * > **NOTE:** The value of `accountId` must come from an Azure Native New Relic Monitor instance of another different subscription.
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * Specifies the ingestion key of account. Changing this forces a new Azure Native New Relic Monitor to be created.
     */
    public readonly ingestionKey!: pulumi.Output<string | undefined>;
    /**
     * Specifies the Azure Region where the Azure Native New Relic Monitor should exist. Changing this forces a new Azure Native New Relic Monitor to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Specifies the name which should be used for this Azure Native New Relic Monitor. Changing this forces a new Azure Native New Relic Monitor to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the source of org creation. Possible values are `LIFTR` and `NEWRELIC`. Defaults to `LIFTR`. Changing this forces a new Azure Native New Relic Monitor to be created.
     */
    public readonly orgCreationSource!: pulumi.Output<string | undefined>;
    /**
     * Specifies the organization id. Changing this forces a new Azure Native New Relic Monitor to be created.
     *
     * > **NOTE:** The value of `organizationId` must come from an Azure Native New Relic Monitor instance of another different subscription.
     */
    public readonly organizationId!: pulumi.Output<string>;
    /**
     * A `plan` block as defined below. Changing this forces a new Azure Native New Relic Monitor to be created.
     */
    public readonly plan!: pulumi.Output<outputs.newrelic.MonitorPlan>;
    /**
     * Specifies the name of the Resource Group where the Azure Native New Relic Monitor should exist. Changing this forces a new Azure Native New Relic Monitor to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * A `user` block as defined below. Changing this forces a new Azure Native New Relic Monitor to be created.
     */
    public readonly user!: pulumi.Output<outputs.newrelic.MonitorUser>;
    /**
     * Specifies the user id. Changing this forces a new Azure Native New Relic Monitor to be created.
     */
    public readonly userId!: pulumi.Output<string | undefined>;

    /**
     * Create a Monitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorArgs | MonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitorState | undefined;
            resourceInputs["accountCreationSource"] = state ? state.accountCreationSource : undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["ingestionKey"] = state ? state.ingestionKey : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgCreationSource"] = state ? state.orgCreationSource : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as MonitorArgs | undefined;
            if ((!args || args.plan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plan'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.user === undefined) && !opts.urn) {
                throw new Error("Missing required property 'user'");
            }
            resourceInputs["accountCreationSource"] = args ? args.accountCreationSource : undefined;
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["ingestionKey"] = args?.ingestionKey ? pulumi.secret(args.ingestionKey) : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgCreationSource"] = args ? args.orgCreationSource : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["ingestionKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Monitor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Monitor resources.
 */
export interface MonitorState {
    /**
     * Specifies the source of account creation. Possible values are `LIFTR` and `NEWRELIC`. Defaults to `LIFTR`. Changing this forces a new Azure Native New Relic Monitor to be created.
     */
    accountCreationSource?: pulumi.Input<string>;
    /**
     * Specifies the account id. Changing this forces a new Azure Native New Relic Monitor to be created.
     *
     * > **NOTE:** The value of `accountId` must come from an Azure Native New Relic Monitor instance of another different subscription.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Specifies the ingestion key of account. Changing this forces a new Azure Native New Relic Monitor to be created.
     */
    ingestionKey?: pulumi.Input<string>;
    /**
     * Specifies the Azure Region where the Azure Native New Relic Monitor should exist. Changing this forces a new Azure Native New Relic Monitor to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name which should be used for this Azure Native New Relic Monitor. Changing this forces a new Azure Native New Relic Monitor to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the source of org creation. Possible values are `LIFTR` and `NEWRELIC`. Defaults to `LIFTR`. Changing this forces a new Azure Native New Relic Monitor to be created.
     */
    orgCreationSource?: pulumi.Input<string>;
    /**
     * Specifies the organization id. Changing this forces a new Azure Native New Relic Monitor to be created.
     *
     * > **NOTE:** The value of `organizationId` must come from an Azure Native New Relic Monitor instance of another different subscription.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * A `plan` block as defined below. Changing this forces a new Azure Native New Relic Monitor to be created.
     */
    plan?: pulumi.Input<inputs.newrelic.MonitorPlan>;
    /**
     * Specifies the name of the Resource Group where the Azure Native New Relic Monitor should exist. Changing this forces a new Azure Native New Relic Monitor to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A `user` block as defined below. Changing this forces a new Azure Native New Relic Monitor to be created.
     */
    user?: pulumi.Input<inputs.newrelic.MonitorUser>;
    /**
     * Specifies the user id. Changing this forces a new Azure Native New Relic Monitor to be created.
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Monitor resource.
 */
export interface MonitorArgs {
    /**
     * Specifies the source of account creation. Possible values are `LIFTR` and `NEWRELIC`. Defaults to `LIFTR`. Changing this forces a new Azure Native New Relic Monitor to be created.
     */
    accountCreationSource?: pulumi.Input<string>;
    /**
     * Specifies the account id. Changing this forces a new Azure Native New Relic Monitor to be created.
     *
     * > **NOTE:** The value of `accountId` must come from an Azure Native New Relic Monitor instance of another different subscription.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Specifies the ingestion key of account. Changing this forces a new Azure Native New Relic Monitor to be created.
     */
    ingestionKey?: pulumi.Input<string>;
    /**
     * Specifies the Azure Region where the Azure Native New Relic Monitor should exist. Changing this forces a new Azure Native New Relic Monitor to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name which should be used for this Azure Native New Relic Monitor. Changing this forces a new Azure Native New Relic Monitor to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the source of org creation. Possible values are `LIFTR` and `NEWRELIC`. Defaults to `LIFTR`. Changing this forces a new Azure Native New Relic Monitor to be created.
     */
    orgCreationSource?: pulumi.Input<string>;
    /**
     * Specifies the organization id. Changing this forces a new Azure Native New Relic Monitor to be created.
     *
     * > **NOTE:** The value of `organizationId` must come from an Azure Native New Relic Monitor instance of another different subscription.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * A `plan` block as defined below. Changing this forces a new Azure Native New Relic Monitor to be created.
     */
    plan: pulumi.Input<inputs.newrelic.MonitorPlan>;
    /**
     * Specifies the name of the Resource Group where the Azure Native New Relic Monitor should exist. Changing this forces a new Azure Native New Relic Monitor to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A `user` block as defined below. Changing this forces a new Azure Native New Relic Monitor to be created.
     */
    user: pulumi.Input<inputs.newrelic.MonitorUser>;
    /**
     * Specifies the user id. Changing this forces a new Azure Native New Relic Monitor to be created.
     */
    userId?: pulumi.Input<string>;
}
