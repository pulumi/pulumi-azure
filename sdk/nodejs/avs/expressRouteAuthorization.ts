// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an Azure VMware Solution ExpressRoute Circuit Authorization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const examplePrivateCloud = new azure.avs.PrivateCloud("example", {
 *     name: "example-vmware-private-cloud",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     skuName: "av36",
 *     managementCluster: {
 *         size: 3,
 *     },
 *     networkSubnetCidr: "192.168.48.0/22",
 *     internetConnectionEnabled: false,
 *     nsxtPassword: "QazWsx13$Edc",
 *     vcenterPassword: "WsxEdc23$Rfv",
 * });
 * const exampleExpressRouteAuthorization = new azure.avs.ExpressRouteAuthorization("example", {
 *     name: "example-authorization",
 *     privateCloudId: examplePrivateCloud.id,
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.AVS` - 2022-05-01
 *
 * ## Import
 *
 * Azure VMware Solution ExpressRoute Circuit Authorizations can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:avs/expressRouteAuthorization:ExpressRouteAuthorization example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.AVS/privateClouds/privateCloud1/authorizations/authorization1
 * ```
 */
export class ExpressRouteAuthorization extends pulumi.CustomResource {
    /**
     * Get an existing ExpressRouteAuthorization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExpressRouteAuthorizationState, opts?: pulumi.CustomResourceOptions): ExpressRouteAuthorization {
        return new ExpressRouteAuthorization(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:avs/expressRouteAuthorization:ExpressRouteAuthorization';

    /**
     * Returns true if the given object is an instance of ExpressRouteAuthorization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExpressRouteAuthorization {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExpressRouteAuthorization.__pulumiType;
    }

    /**
     * The ID of the Azure VMware Solution ExpressRoute Circuit Authorization.
     */
    declare public /*out*/ readonly expressRouteAuthorizationId: pulumi.Output<string>;
    /**
     * The key of the Azure VMware Solution ExpressRoute Circuit Authorization.
     */
    declare public /*out*/ readonly expressRouteAuthorizationKey: pulumi.Output<string>;
    /**
     * The name which should be used for this Azure VMware Solution ExpressRoute Circuit Authorization. Changing this forces a new Azure VMware Solution ExpressRoute Circuit Authorization to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID of the Azure VMware Solution Private Cloud in which to create this Azure VMware Solution ExpressRoute Circuit Authorization. Changing this forces a new Azure VMware Solution ExpressRoute Circuit Authorization to be created.
     */
    declare public readonly privateCloudId: pulumi.Output<string>;

    /**
     * Create a ExpressRouteAuthorization resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExpressRouteAuthorizationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExpressRouteAuthorizationArgs | ExpressRouteAuthorizationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExpressRouteAuthorizationState | undefined;
            resourceInputs["expressRouteAuthorizationId"] = state?.expressRouteAuthorizationId;
            resourceInputs["expressRouteAuthorizationKey"] = state?.expressRouteAuthorizationKey;
            resourceInputs["name"] = state?.name;
            resourceInputs["privateCloudId"] = state?.privateCloudId;
        } else {
            const args = argsOrState as ExpressRouteAuthorizationArgs | undefined;
            if (args?.privateCloudId === undefined && !opts.urn) {
                throw new Error("Missing required property 'privateCloudId'");
            }
            resourceInputs["name"] = args?.name;
            resourceInputs["privateCloudId"] = args?.privateCloudId;
            resourceInputs["expressRouteAuthorizationId"] = undefined /*out*/;
            resourceInputs["expressRouteAuthorizationKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["expressRouteAuthorizationKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ExpressRouteAuthorization.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ExpressRouteAuthorization resources.
 */
export interface ExpressRouteAuthorizationState {
    /**
     * The ID of the Azure VMware Solution ExpressRoute Circuit Authorization.
     */
    expressRouteAuthorizationId?: pulumi.Input<string>;
    /**
     * The key of the Azure VMware Solution ExpressRoute Circuit Authorization.
     */
    expressRouteAuthorizationKey?: pulumi.Input<string>;
    /**
     * The name which should be used for this Azure VMware Solution ExpressRoute Circuit Authorization. Changing this forces a new Azure VMware Solution ExpressRoute Circuit Authorization to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Azure VMware Solution Private Cloud in which to create this Azure VMware Solution ExpressRoute Circuit Authorization. Changing this forces a new Azure VMware Solution ExpressRoute Circuit Authorization to be created.
     */
    privateCloudId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ExpressRouteAuthorization resource.
 */
export interface ExpressRouteAuthorizationArgs {
    /**
     * The name which should be used for this Azure VMware Solution ExpressRoute Circuit Authorization. Changing this forces a new Azure VMware Solution ExpressRoute Circuit Authorization to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Azure VMware Solution Private Cloud in which to create this Azure VMware Solution ExpressRoute Circuit Authorization. Changing this forces a new Azure VMware Solution ExpressRoute Circuit Authorization to be created.
     */
    privateCloudId: pulumi.Input<string>;
}
