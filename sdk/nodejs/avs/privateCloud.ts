// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * Vmware Private Clouds can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:avs/privateCloud:PrivateCloud example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.AVS/PrivateClouds/privateCloud1
 * ```
 */
export class PrivateCloud extends pulumi.CustomResource {
    /**
     * Get an existing PrivateCloud resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PrivateCloudState, opts?: pulumi.CustomResourceOptions): PrivateCloud {
        return new PrivateCloud(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:avs/privateCloud:PrivateCloud';

    /**
     * Returns true if the given object is an instance of PrivateCloud.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PrivateCloud {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PrivateCloud.__pulumiType;
    }

    /**
     * A `circuit` block as defined below.
     */
    public /*out*/ readonly circuits!: pulumi.Output<outputs.avs.PrivateCloudCircuit[]>;
    /**
     * The endpoint for the HCX Cloud Manager.
     */
    public /*out*/ readonly hcxCloudManagerEndpoint!: pulumi.Output<string>;
    /**
     * Is the Private Cluster connected to the internet? This field can not updated with `management_cluster.0.size` together.
     * > **NOTE :** `internetConnectionEnabled` and `management_cluster.0.size` cannot be updated at the same time.
     */
    public readonly internetConnectionEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The Azure Region where the Vmware Private Cloud should exist. Changing this forces a new Vmware Private Cloud to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * A `managementCluster` block as defined below.
     * > **NOTE :** `internetConnectionEnabled` and `management_cluster.0.size` cannot be updated at the same time.
     */
    public readonly managementCluster!: pulumi.Output<outputs.avs.PrivateCloudManagementCluster>;
    /**
     * The network used to access vCenter Server and NSX-T Manager.
     */
    public /*out*/ readonly managementSubnetCidr!: pulumi.Output<string>;
    /**
     * The name which should be used for this Vmware Private Cloud. Changing this forces a new Vmware Private Cloud to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The subnet which should be unique across virtual network in your subscription as well as on-premise. Changing this forces a new Vmware Private Cloud to be created.
     */
    public readonly networkSubnetCidr!: pulumi.Output<string>;
    /**
     * The thumbprint of the NSX-T Manager SSL certificate.
     */
    public /*out*/ readonly nsxtCertificateThumbprint!: pulumi.Output<string>;
    /**
     * The endpoint for the NSX-T Data Center manager.
     */
    public /*out*/ readonly nsxtManagerEndpoint!: pulumi.Output<string>;
    /**
     * The password of the NSX-T Manager. Changing this forces a new Vmware Private Cloud to be created.
     */
    public readonly nsxtPassword!: pulumi.Output<string | undefined>;
    /**
     * The network which is used for virtual machine cold migration, cloning, and snapshot migration.
     */
    public /*out*/ readonly provisioningSubnetCidr!: pulumi.Output<string>;
    /**
     * The name of the Resource Group where the Vmware Private Cloud should exist. Changing this forces a new Vmware Private Cloud to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * The Name of the SKU used for this Private Cloud. Possible values are `av20`, `av36` and `av36t`. Changing this forces a new Vmware Private Cloud to be created.
     */
    public readonly skuName!: pulumi.Output<string>;
    /**
     * A mapping of tags which should be assigned to the Vmware Private Cloud.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The thumbprint of the vCenter Server SSL certificate.
     */
    public /*out*/ readonly vcenterCertificateThumbprint!: pulumi.Output<string>;
    /**
     * The password of the vCenter admin. Changing this forces a new Vmware Private Cloud to be created.
     */
    public readonly vcenterPassword!: pulumi.Output<string | undefined>;
    /**
     * The endpoint for Virtual Center Server Appliance.
     */
    public /*out*/ readonly vcsaEndpoint!: pulumi.Output<string>;
    /**
     * The network which is used for live migration of virtual machines.
     */
    public /*out*/ readonly vmotionSubnetCidr!: pulumi.Output<string>;

    /**
     * Create a PrivateCloud resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PrivateCloudArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PrivateCloudArgs | PrivateCloudState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PrivateCloudState | undefined;
            inputs["circuits"] = state ? state.circuits : undefined;
            inputs["hcxCloudManagerEndpoint"] = state ? state.hcxCloudManagerEndpoint : undefined;
            inputs["internetConnectionEnabled"] = state ? state.internetConnectionEnabled : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["managementCluster"] = state ? state.managementCluster : undefined;
            inputs["managementSubnetCidr"] = state ? state.managementSubnetCidr : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkSubnetCidr"] = state ? state.networkSubnetCidr : undefined;
            inputs["nsxtCertificateThumbprint"] = state ? state.nsxtCertificateThumbprint : undefined;
            inputs["nsxtManagerEndpoint"] = state ? state.nsxtManagerEndpoint : undefined;
            inputs["nsxtPassword"] = state ? state.nsxtPassword : undefined;
            inputs["provisioningSubnetCidr"] = state ? state.provisioningSubnetCidr : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["skuName"] = state ? state.skuName : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["vcenterCertificateThumbprint"] = state ? state.vcenterCertificateThumbprint : undefined;
            inputs["vcenterPassword"] = state ? state.vcenterPassword : undefined;
            inputs["vcsaEndpoint"] = state ? state.vcsaEndpoint : undefined;
            inputs["vmotionSubnetCidr"] = state ? state.vmotionSubnetCidr : undefined;
        } else {
            const args = argsOrState as PrivateCloudArgs | undefined;
            if ((!args || args.managementCluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managementCluster'");
            }
            if ((!args || args.networkSubnetCidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkSubnetCidr'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.skuName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'skuName'");
            }
            inputs["internetConnectionEnabled"] = args ? args.internetConnectionEnabled : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["managementCluster"] = args ? args.managementCluster : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkSubnetCidr"] = args ? args.networkSubnetCidr : undefined;
            inputs["nsxtPassword"] = args ? args.nsxtPassword : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["skuName"] = args ? args.skuName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["vcenterPassword"] = args ? args.vcenterPassword : undefined;
            inputs["circuits"] = undefined /*out*/;
            inputs["hcxCloudManagerEndpoint"] = undefined /*out*/;
            inputs["managementSubnetCidr"] = undefined /*out*/;
            inputs["nsxtCertificateThumbprint"] = undefined /*out*/;
            inputs["nsxtManagerEndpoint"] = undefined /*out*/;
            inputs["provisioningSubnetCidr"] = undefined /*out*/;
            inputs["vcenterCertificateThumbprint"] = undefined /*out*/;
            inputs["vcsaEndpoint"] = undefined /*out*/;
            inputs["vmotionSubnetCidr"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(PrivateCloud.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PrivateCloud resources.
 */
export interface PrivateCloudState {
    /**
     * A `circuit` block as defined below.
     */
    circuits?: pulumi.Input<pulumi.Input<inputs.avs.PrivateCloudCircuit>[]>;
    /**
     * The endpoint for the HCX Cloud Manager.
     */
    hcxCloudManagerEndpoint?: pulumi.Input<string>;
    /**
     * Is the Private Cluster connected to the internet? This field can not updated with `management_cluster.0.size` together.
     * > **NOTE :** `internetConnectionEnabled` and `management_cluster.0.size` cannot be updated at the same time.
     */
    internetConnectionEnabled?: pulumi.Input<boolean>;
    /**
     * The Azure Region where the Vmware Private Cloud should exist. Changing this forces a new Vmware Private Cloud to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * A `managementCluster` block as defined below.
     * > **NOTE :** `internetConnectionEnabled` and `management_cluster.0.size` cannot be updated at the same time.
     */
    managementCluster?: pulumi.Input<inputs.avs.PrivateCloudManagementCluster>;
    /**
     * The network used to access vCenter Server and NSX-T Manager.
     */
    managementSubnetCidr?: pulumi.Input<string>;
    /**
     * The name which should be used for this Vmware Private Cloud. Changing this forces a new Vmware Private Cloud to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The subnet which should be unique across virtual network in your subscription as well as on-premise. Changing this forces a new Vmware Private Cloud to be created.
     */
    networkSubnetCidr?: pulumi.Input<string>;
    /**
     * The thumbprint of the NSX-T Manager SSL certificate.
     */
    nsxtCertificateThumbprint?: pulumi.Input<string>;
    /**
     * The endpoint for the NSX-T Data Center manager.
     */
    nsxtManagerEndpoint?: pulumi.Input<string>;
    /**
     * The password of the NSX-T Manager. Changing this forces a new Vmware Private Cloud to be created.
     */
    nsxtPassword?: pulumi.Input<string>;
    /**
     * The network which is used for virtual machine cold migration, cloning, and snapshot migration.
     */
    provisioningSubnetCidr?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Vmware Private Cloud should exist. Changing this forces a new Vmware Private Cloud to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The Name of the SKU used for this Private Cloud. Possible values are `av20`, `av36` and `av36t`. Changing this forces a new Vmware Private Cloud to be created.
     */
    skuName?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Vmware Private Cloud.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The thumbprint of the vCenter Server SSL certificate.
     */
    vcenterCertificateThumbprint?: pulumi.Input<string>;
    /**
     * The password of the vCenter admin. Changing this forces a new Vmware Private Cloud to be created.
     */
    vcenterPassword?: pulumi.Input<string>;
    /**
     * The endpoint for Virtual Center Server Appliance.
     */
    vcsaEndpoint?: pulumi.Input<string>;
    /**
     * The network which is used for live migration of virtual machines.
     */
    vmotionSubnetCidr?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PrivateCloud resource.
 */
export interface PrivateCloudArgs {
    /**
     * Is the Private Cluster connected to the internet? This field can not updated with `management_cluster.0.size` together.
     * > **NOTE :** `internetConnectionEnabled` and `management_cluster.0.size` cannot be updated at the same time.
     */
    internetConnectionEnabled?: pulumi.Input<boolean>;
    /**
     * The Azure Region where the Vmware Private Cloud should exist. Changing this forces a new Vmware Private Cloud to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * A `managementCluster` block as defined below.
     * > **NOTE :** `internetConnectionEnabled` and `management_cluster.0.size` cannot be updated at the same time.
     */
    managementCluster: pulumi.Input<inputs.avs.PrivateCloudManagementCluster>;
    /**
     * The name which should be used for this Vmware Private Cloud. Changing this forces a new Vmware Private Cloud to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The subnet which should be unique across virtual network in your subscription as well as on-premise. Changing this forces a new Vmware Private Cloud to be created.
     */
    networkSubnetCidr: pulumi.Input<string>;
    /**
     * The password of the NSX-T Manager. Changing this forces a new Vmware Private Cloud to be created.
     */
    nsxtPassword?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Vmware Private Cloud should exist. Changing this forces a new Vmware Private Cloud to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The Name of the SKU used for this Private Cloud. Possible values are `av20`, `av36` and `av36t`. Changing this forces a new Vmware Private Cloud to be created.
     */
    skuName: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Vmware Private Cloud.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The password of the vCenter admin. Changing this forces a new Vmware Private Cloud to be created.
     */
    vcenterPassword?: pulumi.Input<string>;
}
