// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a VMWare Replication Policy.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "eastus"});
 * const exampleVault = new azure.recoveryservices.Vault("exampleVault", {
 *     location: azurerm_resource_group.test.location,
 *     resourceGroupName: azurerm_resource_group.test.name,
 *     sku: "Standard",
 *     classicVmwareReplicationEnabled: true,
 *     softDeleteEnabled: false,
 * });
 * const exampleVMWareReplicationPolicy = new azure.siterecovery.VMWareReplicationPolicy("exampleVMWareReplicationPolicy", {
 *     recoveryVaultId: exampleVault.id,
 *     recoveryPointRetentionInMinutes: 1440,
 *     applicationConsistentSnapshotFrequencyInMinutes: 240,
 * });
 * ```
 *
 * ## Import
 *
 * VMWare Replication Policy can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:siterecovery/vMWareReplicationPolicy:VMWareReplicationPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/vault1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/policy1
 * ```
 */
export class VMWareReplicationPolicy extends pulumi.CustomResource {
    /**
     * Get an existing VMWareReplicationPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VMWareReplicationPolicyState, opts?: pulumi.CustomResourceOptions): VMWareReplicationPolicy {
        return new VMWareReplicationPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:siterecovery/vMWareReplicationPolicy:VMWareReplicationPolicy';

    /**
     * Returns true if the given object is an instance of VMWareReplicationPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VMWareReplicationPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VMWareReplicationPolicy.__pulumiType;
    }

    /**
     * Specifies the frequency at which to create application consistent recovery points. Must between `0` to `720`.
     */
    public readonly applicationConsistentSnapshotFrequencyInMinutes!: pulumi.Output<number>;
    /**
     * The name which should be used for this Classic Replication Policy. Changing this forces a new Replication Policy to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the period up to which the recovery points will be retained. Must between `0` to `21600`.
     */
    public readonly recoveryPointRetentionInMinutes!: pulumi.Output<number>;
    /**
     * ID of the Recovery Services Vault. Changing this forces a new Replication Policy to be created.
     */
    public readonly recoveryVaultId!: pulumi.Output<string>;

    /**
     * Create a VMWareReplicationPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VMWareReplicationPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VMWareReplicationPolicyArgs | VMWareReplicationPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VMWareReplicationPolicyState | undefined;
            resourceInputs["applicationConsistentSnapshotFrequencyInMinutes"] = state ? state.applicationConsistentSnapshotFrequencyInMinutes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["recoveryPointRetentionInMinutes"] = state ? state.recoveryPointRetentionInMinutes : undefined;
            resourceInputs["recoveryVaultId"] = state ? state.recoveryVaultId : undefined;
        } else {
            const args = argsOrState as VMWareReplicationPolicyArgs | undefined;
            if ((!args || args.applicationConsistentSnapshotFrequencyInMinutes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationConsistentSnapshotFrequencyInMinutes'");
            }
            if ((!args || args.recoveryPointRetentionInMinutes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recoveryPointRetentionInMinutes'");
            }
            if ((!args || args.recoveryVaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recoveryVaultId'");
            }
            resourceInputs["applicationConsistentSnapshotFrequencyInMinutes"] = args ? args.applicationConsistentSnapshotFrequencyInMinutes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["recoveryPointRetentionInMinutes"] = args ? args.recoveryPointRetentionInMinutes : undefined;
            resourceInputs["recoveryVaultId"] = args ? args.recoveryVaultId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VMWareReplicationPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VMWareReplicationPolicy resources.
 */
export interface VMWareReplicationPolicyState {
    /**
     * Specifies the frequency at which to create application consistent recovery points. Must between `0` to `720`.
     */
    applicationConsistentSnapshotFrequencyInMinutes?: pulumi.Input<number>;
    /**
     * The name which should be used for this Classic Replication Policy. Changing this forces a new Replication Policy to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the period up to which the recovery points will be retained. Must between `0` to `21600`.
     */
    recoveryPointRetentionInMinutes?: pulumi.Input<number>;
    /**
     * ID of the Recovery Services Vault. Changing this forces a new Replication Policy to be created.
     */
    recoveryVaultId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VMWareReplicationPolicy resource.
 */
export interface VMWareReplicationPolicyArgs {
    /**
     * Specifies the frequency at which to create application consistent recovery points. Must between `0` to `720`.
     */
    applicationConsistentSnapshotFrequencyInMinutes: pulumi.Input<number>;
    /**
     * The name which should be used for this Classic Replication Policy. Changing this forces a new Replication Policy to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the period up to which the recovery points will be retained. Must between `0` to `21600`.
     */
    recoveryPointRetentionInMinutes: pulumi.Input<number>;
    /**
     * ID of the Recovery Services Vault. Changing this forces a new Replication Policy to be created.
     */
    recoveryVaultId: pulumi.Input<string>;
}
