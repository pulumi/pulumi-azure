// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { FabricArgs, FabricState } from "./fabric";
export type Fabric = import("./fabric").Fabric;
export const Fabric: typeof import("./fabric").Fabric = null as any;
utilities.lazyLoad(exports, ["Fabric"], () => require("./fabric"));

export { GetFabricArgs, GetFabricResult, GetFabricOutputArgs } from "./getFabric";
export const getFabric: typeof import("./getFabric").getFabric = null as any;
export const getFabricOutput: typeof import("./getFabric").getFabricOutput = null as any;
utilities.lazyLoad(exports, ["getFabric","getFabricOutput"], () => require("./getFabric"));

export { GetProtectionContainerArgs, GetProtectionContainerResult, GetProtectionContainerOutputArgs } from "./getProtectionContainer";
export const getProtectionContainer: typeof import("./getProtectionContainer").getProtectionContainer = null as any;
export const getProtectionContainerOutput: typeof import("./getProtectionContainer").getProtectionContainerOutput = null as any;
utilities.lazyLoad(exports, ["getProtectionContainer","getProtectionContainerOutput"], () => require("./getProtectionContainer"));

export { GetReplicationPolicyArgs, GetReplicationPolicyResult, GetReplicationPolicyOutputArgs } from "./getReplicationPolicy";
export const getReplicationPolicy: typeof import("./getReplicationPolicy").getReplicationPolicy = null as any;
export const getReplicationPolicyOutput: typeof import("./getReplicationPolicy").getReplicationPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getReplicationPolicy","getReplicationPolicyOutput"], () => require("./getReplicationPolicy"));

export { GetReplicationRecoveryPlanArgs, GetReplicationRecoveryPlanResult, GetReplicationRecoveryPlanOutputArgs } from "./getReplicationRecoveryPlan";
export const getReplicationRecoveryPlan: typeof import("./getReplicationRecoveryPlan").getReplicationRecoveryPlan = null as any;
export const getReplicationRecoveryPlanOutput: typeof import("./getReplicationRecoveryPlan").getReplicationRecoveryPlanOutput = null as any;
utilities.lazyLoad(exports, ["getReplicationRecoveryPlan","getReplicationRecoveryPlanOutput"], () => require("./getReplicationRecoveryPlan"));

export { HyperVReplicationPolicyArgs, HyperVReplicationPolicyState } from "./hyperVReplicationPolicy";
export type HyperVReplicationPolicy = import("./hyperVReplicationPolicy").HyperVReplicationPolicy;
export const HyperVReplicationPolicy: typeof import("./hyperVReplicationPolicy").HyperVReplicationPolicy = null as any;
utilities.lazyLoad(exports, ["HyperVReplicationPolicy"], () => require("./hyperVReplicationPolicy"));

export { HyperVReplicationPolicyAssociationArgs, HyperVReplicationPolicyAssociationState } from "./hyperVReplicationPolicyAssociation";
export type HyperVReplicationPolicyAssociation = import("./hyperVReplicationPolicyAssociation").HyperVReplicationPolicyAssociation;
export const HyperVReplicationPolicyAssociation: typeof import("./hyperVReplicationPolicyAssociation").HyperVReplicationPolicyAssociation = null as any;
utilities.lazyLoad(exports, ["HyperVReplicationPolicyAssociation"], () => require("./hyperVReplicationPolicyAssociation"));

export { HyperVSiteArgs, HyperVSiteState } from "./hyperVSite";
export type HyperVSite = import("./hyperVSite").HyperVSite;
export const HyperVSite: typeof import("./hyperVSite").HyperVSite = null as any;
utilities.lazyLoad(exports, ["HyperVSite"], () => require("./hyperVSite"));

export { NetworkMappingArgs, NetworkMappingState } from "./networkMapping";
export type NetworkMapping = import("./networkMapping").NetworkMapping;
export const NetworkMapping: typeof import("./networkMapping").NetworkMapping = null as any;
utilities.lazyLoad(exports, ["NetworkMapping"], () => require("./networkMapping"));

export { ProtectionContainerArgs, ProtectionContainerState } from "./protectionContainer";
export type ProtectionContainer = import("./protectionContainer").ProtectionContainer;
export const ProtectionContainer: typeof import("./protectionContainer").ProtectionContainer = null as any;
utilities.lazyLoad(exports, ["ProtectionContainer"], () => require("./protectionContainer"));

export { ProtectionContainerMappingArgs, ProtectionContainerMappingState } from "./protectionContainerMapping";
export type ProtectionContainerMapping = import("./protectionContainerMapping").ProtectionContainerMapping;
export const ProtectionContainerMapping: typeof import("./protectionContainerMapping").ProtectionContainerMapping = null as any;
utilities.lazyLoad(exports, ["ProtectionContainerMapping"], () => require("./protectionContainerMapping"));

export { ReplicatedVMArgs, ReplicatedVMState } from "./replicatedVM";
export type ReplicatedVM = import("./replicatedVM").ReplicatedVM;
export const ReplicatedVM: typeof import("./replicatedVM").ReplicatedVM = null as any;
utilities.lazyLoad(exports, ["ReplicatedVM"], () => require("./replicatedVM"));

export { ReplicationPolicyArgs, ReplicationPolicyState } from "./replicationPolicy";
export type ReplicationPolicy = import("./replicationPolicy").ReplicationPolicy;
export const ReplicationPolicy: typeof import("./replicationPolicy").ReplicationPolicy = null as any;
utilities.lazyLoad(exports, ["ReplicationPolicy"], () => require("./replicationPolicy"));

export { ReplicationRecoveryPlanArgs, ReplicationRecoveryPlanState } from "./replicationRecoveryPlan";
export type ReplicationRecoveryPlan = import("./replicationRecoveryPlan").ReplicationRecoveryPlan;
export const ReplicationRecoveryPlan: typeof import("./replicationRecoveryPlan").ReplicationRecoveryPlan = null as any;
utilities.lazyLoad(exports, ["ReplicationRecoveryPlan"], () => require("./replicationRecoveryPlan"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:siterecovery/fabric:Fabric":
                return new Fabric(name, <any>undefined, { urn })
            case "azure:siterecovery/hyperVReplicationPolicy:HyperVReplicationPolicy":
                return new HyperVReplicationPolicy(name, <any>undefined, { urn })
            case "azure:siterecovery/hyperVReplicationPolicyAssociation:HyperVReplicationPolicyAssociation":
                return new HyperVReplicationPolicyAssociation(name, <any>undefined, { urn })
            case "azure:siterecovery/hyperVSite:HyperVSite":
                return new HyperVSite(name, <any>undefined, { urn })
            case "azure:siterecovery/networkMapping:NetworkMapping":
                return new NetworkMapping(name, <any>undefined, { urn })
            case "azure:siterecovery/protectionContainer:ProtectionContainer":
                return new ProtectionContainer(name, <any>undefined, { urn })
            case "azure:siterecovery/protectionContainerMapping:ProtectionContainerMapping":
                return new ProtectionContainerMapping(name, <any>undefined, { urn })
            case "azure:siterecovery/replicatedVM:ReplicatedVM":
                return new ReplicatedVM(name, <any>undefined, { urn })
            case "azure:siterecovery/replicationPolicy:ReplicationPolicy":
                return new ReplicationPolicy(name, <any>undefined, { urn })
            case "azure:siterecovery/replicationRecoveryPlan:ReplicationRecoveryPlan":
                return new ReplicationRecoveryPlan(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "siterecovery/fabric", _module)
pulumi.runtime.registerResourceModule("azure", "siterecovery/hyperVReplicationPolicy", _module)
pulumi.runtime.registerResourceModule("azure", "siterecovery/hyperVReplicationPolicyAssociation", _module)
pulumi.runtime.registerResourceModule("azure", "siterecovery/hyperVSite", _module)
pulumi.runtime.registerResourceModule("azure", "siterecovery/networkMapping", _module)
pulumi.runtime.registerResourceModule("azure", "siterecovery/protectionContainer", _module)
pulumi.runtime.registerResourceModule("azure", "siterecovery/protectionContainerMapping", _module)
pulumi.runtime.registerResourceModule("azure", "siterecovery/replicatedVM", _module)
pulumi.runtime.registerResourceModule("azure", "siterecovery/replicationPolicy", _module)
pulumi.runtime.registerResourceModule("azure", "siterecovery/replicationRecoveryPlan", _module)
