// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Azure Site Recovery replication policy for HyperV within a Recovery Vault. Replication policies define the frequency at which recovery points are created and how long they are stored.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {location: "East US"});
 * const vault = new azure.recoveryservices.Vault("vault", {
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: "Standard",
 * });
 * const policy = new azure.siterecovery.HyperVReplicationPolicy("policy", {
 *     recoveryVaultId: vault.id,
 *     recoveryPointRetentionInHours: 2,
 *     applicationConsistentSnapshotFrequencyInHours: 1,
 *     replicationIntervalInSeconds: 300,
 * });
 * ```
 *
 * ## Import
 *
 * Site Recovery Replication Policies can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:siterecovery/hyperVReplicationPolicy:HyperVReplicationPolicy mypolicy /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.RecoveryServices/vaults/recovery-vault-name/replicationPolicies/policy-name
 * ```
 */
export class HyperVReplicationPolicy extends pulumi.CustomResource {
    /**
     * Get an existing HyperVReplicationPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HyperVReplicationPolicyState, opts?: pulumi.CustomResourceOptions): HyperVReplicationPolicy {
        return new HyperVReplicationPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:siterecovery/hyperVReplicationPolicy:HyperVReplicationPolicy';

    /**
     * Returns true if the given object is an instance of HyperVReplicationPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HyperVReplicationPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HyperVReplicationPolicy.__pulumiType;
    }

    /**
     * Specifies the frequency at which to create application consistent recovery points.
     */
    public readonly applicationConsistentSnapshotFrequencyInHours!: pulumi.Output<number>;
    /**
     * The name of the replication policy. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The duration in hours for which the recovery points need to be stored.
     */
    public readonly recoveryPointRetentionInHours!: pulumi.Output<number>;
    /**
     * The id of the vault that should be updated. Changing this forces a new resource to be created.
     */
    public readonly recoveryVaultId!: pulumi.Output<string>;
    /**
     * Specifies how frequently data should be synchronized between source and target locations. Possible values are `30` and `300`.
     */
    public readonly replicationIntervalInSeconds!: pulumi.Output<number>;

    /**
     * Create a HyperVReplicationPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HyperVReplicationPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HyperVReplicationPolicyArgs | HyperVReplicationPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HyperVReplicationPolicyState | undefined;
            resourceInputs["applicationConsistentSnapshotFrequencyInHours"] = state ? state.applicationConsistentSnapshotFrequencyInHours : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["recoveryPointRetentionInHours"] = state ? state.recoveryPointRetentionInHours : undefined;
            resourceInputs["recoveryVaultId"] = state ? state.recoveryVaultId : undefined;
            resourceInputs["replicationIntervalInSeconds"] = state ? state.replicationIntervalInSeconds : undefined;
        } else {
            const args = argsOrState as HyperVReplicationPolicyArgs | undefined;
            if ((!args || args.applicationConsistentSnapshotFrequencyInHours === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationConsistentSnapshotFrequencyInHours'");
            }
            if ((!args || args.recoveryPointRetentionInHours === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recoveryPointRetentionInHours'");
            }
            if ((!args || args.recoveryVaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recoveryVaultId'");
            }
            if ((!args || args.replicationIntervalInSeconds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicationIntervalInSeconds'");
            }
            resourceInputs["applicationConsistentSnapshotFrequencyInHours"] = args ? args.applicationConsistentSnapshotFrequencyInHours : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["recoveryPointRetentionInHours"] = args ? args.recoveryPointRetentionInHours : undefined;
            resourceInputs["recoveryVaultId"] = args ? args.recoveryVaultId : undefined;
            resourceInputs["replicationIntervalInSeconds"] = args ? args.replicationIntervalInSeconds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HyperVReplicationPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HyperVReplicationPolicy resources.
 */
export interface HyperVReplicationPolicyState {
    /**
     * Specifies the frequency at which to create application consistent recovery points.
     */
    applicationConsistentSnapshotFrequencyInHours?: pulumi.Input<number>;
    /**
     * The name of the replication policy. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The duration in hours for which the recovery points need to be stored.
     */
    recoveryPointRetentionInHours?: pulumi.Input<number>;
    /**
     * The id of the vault that should be updated. Changing this forces a new resource to be created.
     */
    recoveryVaultId?: pulumi.Input<string>;
    /**
     * Specifies how frequently data should be synchronized between source and target locations. Possible values are `30` and `300`.
     */
    replicationIntervalInSeconds?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a HyperVReplicationPolicy resource.
 */
export interface HyperVReplicationPolicyArgs {
    /**
     * Specifies the frequency at which to create application consistent recovery points.
     */
    applicationConsistentSnapshotFrequencyInHours: pulumi.Input<number>;
    /**
     * The name of the replication policy. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The duration in hours for which the recovery points need to be stored.
     */
    recoveryPointRetentionInHours: pulumi.Input<number>;
    /**
     * The id of the vault that should be updated. Changing this forces a new resource to be created.
     */
    recoveryVaultId: pulumi.Input<string>;
    /**
     * Specifies how frequently data should be synchronized between source and target locations. Possible values are `30` and `300`.
     */
    replicationIntervalInSeconds: pulumi.Input<number>;
}
