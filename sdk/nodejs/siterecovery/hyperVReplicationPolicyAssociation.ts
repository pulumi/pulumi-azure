// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an Azure Site Recovery replication policy for HyperV within a Recovery Vault.
 *
 * ## Import
 *
 * Site Recovery Replication Policies can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:siterecovery/hyperVReplicationPolicyAssociation:HyperVReplicationPolicyAssociation azurerm_site_recovery_hyperv_replication_policy_association.mypolicy /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.RecoveryServices/vaults/recovery-vault-name/replicationFabrics/site-name/replicationProtectionContainers/container-name/replicationProtectionContainerMappings/mapping-name
 * ```
 */
export class HyperVReplicationPolicyAssociation extends pulumi.CustomResource {
    /**
     * Get an existing HyperVReplicationPolicyAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HyperVReplicationPolicyAssociationState, opts?: pulumi.CustomResourceOptions): HyperVReplicationPolicyAssociation {
        return new HyperVReplicationPolicyAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:siterecovery/hyperVReplicationPolicyAssociation:HyperVReplicationPolicyAssociation';

    /**
     * Returns true if the given object is an instance of HyperVReplicationPolicyAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HyperVReplicationPolicyAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HyperVReplicationPolicyAssociation.__pulumiType;
    }

    /**
     * The ID of the HyperV site to which the policy should be associated. Changing this forces a new association to be created.
     */
    public readonly hypervSiteId!: pulumi.Output<string>;
    /**
     * The name of the replication policy association. Changing this forces a new association to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the HyperV replication policy which to be associated. Changing this forces a new association to be created.
     */
    public readonly policyId!: pulumi.Output<string>;

    /**
     * Create a HyperVReplicationPolicyAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HyperVReplicationPolicyAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HyperVReplicationPolicyAssociationArgs | HyperVReplicationPolicyAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HyperVReplicationPolicyAssociationState | undefined;
            resourceInputs["hypervSiteId"] = state ? state.hypervSiteId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
        } else {
            const args = argsOrState as HyperVReplicationPolicyAssociationArgs | undefined;
            if ((!args || args.hypervSiteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hypervSiteId'");
            }
            if ((!args || args.policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            resourceInputs["hypervSiteId"] = args ? args.hypervSiteId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HyperVReplicationPolicyAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HyperVReplicationPolicyAssociation resources.
 */
export interface HyperVReplicationPolicyAssociationState {
    /**
     * The ID of the HyperV site to which the policy should be associated. Changing this forces a new association to be created.
     */
    hypervSiteId?: pulumi.Input<string>;
    /**
     * The name of the replication policy association. Changing this forces a new association to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the HyperV replication policy which to be associated. Changing this forces a new association to be created.
     */
    policyId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HyperVReplicationPolicyAssociation resource.
 */
export interface HyperVReplicationPolicyAssociationArgs {
    /**
     * The ID of the HyperV site to which the policy should be associated. Changing this forces a new association to be created.
     */
    hypervSiteId: pulumi.Input<string>;
    /**
     * The name of the replication policy association. Changing this forces a new association to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the HyperV replication policy which to be associated. Changing this forces a new association to be created.
     */
    policyId: pulumi.Input<string>;
}
