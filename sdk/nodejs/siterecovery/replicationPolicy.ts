// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Azure Site Recovery replication policy within a recovery vault. Replication policies define the frequency at which recovery points are created and how long they are stored.
 *
 * ## Example Usage
 *
 *
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const secondary = new azure.core.ResourceGroup("secondary", {location: "East US"});
 * const vault = new azure.recoveryservices.Vault("vault", {
 *     location: secondary.location,
 *     resourceGroupName: secondary.name,
 *     sku: "Standard",
 * });
 * const policy = new azure.siterecovery.ReplicationPolicy("policy", {
 *     resourceGroupName: secondary.name,
 *     recoveryVaultName: vault.name,
 *     recoveryPointRetentionInMinutes: 24 * 60,
 *     applicationConsistentSnapshotFrequencyInMinutes: 4 * 60,
 * });
 * ```
 */
export class ReplicationPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ReplicationPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReplicationPolicyState, opts?: pulumi.CustomResourceOptions): ReplicationPolicy {
        return new ReplicationPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:siterecovery/replicationPolicy:ReplicationPolicy';

    /**
     * Returns true if the given object is an instance of ReplicationPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ReplicationPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReplicationPolicy.__pulumiType;
    }

    /**
     * Specifies the frequency(in minutes) at which to create application consistent recovery points.
     */
    public readonly applicationConsistentSnapshotFrequencyInMinutes!: pulumi.Output<number>;
    /**
     * The name of the network mapping.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The duration in minutes for which the recovery points need to be stored.
     */
    public readonly recoveryPointRetentionInMinutes!: pulumi.Output<number>;
    /**
     * The name of the vault that should be updated.
     */
    public readonly recoveryVaultName!: pulumi.Output<string>;
    /**
     * Name of the resource group where the vault that should be updated is located.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;

    /**
     * Create a ReplicationPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReplicationPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReplicationPolicyArgs | ReplicationPolicyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ReplicationPolicyState | undefined;
            inputs["applicationConsistentSnapshotFrequencyInMinutes"] = state ? state.applicationConsistentSnapshotFrequencyInMinutes : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["recoveryPointRetentionInMinutes"] = state ? state.recoveryPointRetentionInMinutes : undefined;
            inputs["recoveryVaultName"] = state ? state.recoveryVaultName : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
        } else {
            const args = argsOrState as ReplicationPolicyArgs | undefined;
            if (!args || args.applicationConsistentSnapshotFrequencyInMinutes === undefined) {
                throw new Error("Missing required property 'applicationConsistentSnapshotFrequencyInMinutes'");
            }
            if (!args || args.recoveryPointRetentionInMinutes === undefined) {
                throw new Error("Missing required property 'recoveryPointRetentionInMinutes'");
            }
            if (!args || args.recoveryVaultName === undefined) {
                throw new Error("Missing required property 'recoveryVaultName'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["applicationConsistentSnapshotFrequencyInMinutes"] = args ? args.applicationConsistentSnapshotFrequencyInMinutes : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["recoveryPointRetentionInMinutes"] = args ? args.recoveryPointRetentionInMinutes : undefined;
            inputs["recoveryVaultName"] = args ? args.recoveryVaultName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ReplicationPolicy.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ReplicationPolicy resources.
 */
export interface ReplicationPolicyState {
    /**
     * Specifies the frequency(in minutes) at which to create application consistent recovery points.
     */
    readonly applicationConsistentSnapshotFrequencyInMinutes?: pulumi.Input<number>;
    /**
     * The name of the network mapping.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The duration in minutes for which the recovery points need to be stored.
     */
    readonly recoveryPointRetentionInMinutes?: pulumi.Input<number>;
    /**
     * The name of the vault that should be updated.
     */
    readonly recoveryVaultName?: pulumi.Input<string>;
    /**
     * Name of the resource group where the vault that should be updated is located.
     */
    readonly resourceGroupName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ReplicationPolicy resource.
 */
export interface ReplicationPolicyArgs {
    /**
     * Specifies the frequency(in minutes) at which to create application consistent recovery points.
     */
    readonly applicationConsistentSnapshotFrequencyInMinutes: pulumi.Input<number>;
    /**
     * The name of the network mapping.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The duration in minutes for which the recovery points need to be stored.
     */
    readonly recoveryPointRetentionInMinutes: pulumi.Input<number>;
    /**
     * The name of the vault that should be updated.
     */
    readonly recoveryVaultName: pulumi.Input<string>;
    /**
     * Name of the resource group where the vault that should be updated is located.
     */
    readonly resourceGroupName: pulumi.Input<string>;
}
