// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Azure Site Recovery replication policy within a recovery vault. Replication policies define the frequency at which recovery points are created and how long they are stored.
 *
 * ## Import
 *
 * Site Recovery Replication Policies can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:siterecovery/replicationPolicy:ReplicationPolicy mypolicy /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.RecoveryServices/vaults/recovery-vault-name/replicationPolicies/policy-name
 * ```
 */
export class ReplicationPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ReplicationPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReplicationPolicyState, opts?: pulumi.CustomResourceOptions): ReplicationPolicy {
        return new ReplicationPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:siterecovery/replicationPolicy:ReplicationPolicy';

    /**
     * Returns true if the given object is an instance of ReplicationPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ReplicationPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReplicationPolicy.__pulumiType;
    }

    /**
     * Specifies the frequency(in minutes) at which to create application consistent recovery points.
     *
     * > **Note:** The value of `applicationConsistentSnapshotFrequencyInMinutes` must be less than or equal to the value of `recoveryPointRetentionInMinutes`.
     */
    public readonly applicationConsistentSnapshotFrequencyInMinutes!: pulumi.Output<number>;
    /**
     * The name of the replication policy. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The duration in minutes for which the recovery points need to be stored.
     */
    public readonly recoveryPointRetentionInMinutes!: pulumi.Output<number>;
    /**
     * The name of the vault that should be updated. Changing this forces a new resource to be created.
     */
    public readonly recoveryVaultName!: pulumi.Output<string>;
    /**
     * Name of the resource group where the vault that should be updated is located. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;

    /**
     * Create a ReplicationPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReplicationPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReplicationPolicyArgs | ReplicationPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReplicationPolicyState | undefined;
            resourceInputs["applicationConsistentSnapshotFrequencyInMinutes"] = state ? state.applicationConsistentSnapshotFrequencyInMinutes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["recoveryPointRetentionInMinutes"] = state ? state.recoveryPointRetentionInMinutes : undefined;
            resourceInputs["recoveryVaultName"] = state ? state.recoveryVaultName : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
        } else {
            const args = argsOrState as ReplicationPolicyArgs | undefined;
            if ((!args || args.applicationConsistentSnapshotFrequencyInMinutes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationConsistentSnapshotFrequencyInMinutes'");
            }
            if ((!args || args.recoveryPointRetentionInMinutes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recoveryPointRetentionInMinutes'");
            }
            if ((!args || args.recoveryVaultName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recoveryVaultName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["applicationConsistentSnapshotFrequencyInMinutes"] = args ? args.applicationConsistentSnapshotFrequencyInMinutes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["recoveryPointRetentionInMinutes"] = args ? args.recoveryPointRetentionInMinutes : undefined;
            resourceInputs["recoveryVaultName"] = args ? args.recoveryVaultName : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ReplicationPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ReplicationPolicy resources.
 */
export interface ReplicationPolicyState {
    /**
     * Specifies the frequency(in minutes) at which to create application consistent recovery points.
     *
     * > **Note:** The value of `applicationConsistentSnapshotFrequencyInMinutes` must be less than or equal to the value of `recoveryPointRetentionInMinutes`.
     */
    applicationConsistentSnapshotFrequencyInMinutes?: pulumi.Input<number>;
    /**
     * The name of the replication policy. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The duration in minutes for which the recovery points need to be stored.
     */
    recoveryPointRetentionInMinutes?: pulumi.Input<number>;
    /**
     * The name of the vault that should be updated. Changing this forces a new resource to be created.
     */
    recoveryVaultName?: pulumi.Input<string>;
    /**
     * Name of the resource group where the vault that should be updated is located. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ReplicationPolicy resource.
 */
export interface ReplicationPolicyArgs {
    /**
     * Specifies the frequency(in minutes) at which to create application consistent recovery points.
     *
     * > **Note:** The value of `applicationConsistentSnapshotFrequencyInMinutes` must be less than or equal to the value of `recoveryPointRetentionInMinutes`.
     */
    applicationConsistentSnapshotFrequencyInMinutes: pulumi.Input<number>;
    /**
     * The name of the replication policy. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The duration in minutes for which the recovery points need to be stored.
     */
    recoveryPointRetentionInMinutes: pulumi.Input<number>;
    /**
     * The name of the vault that should be updated. Changing this forces a new resource to be created.
     */
    recoveryVaultName: pulumi.Input<string>;
    /**
     * Name of the resource group where the vault that should be updated is located. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
}
