// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Allows you to create a Virtual Endpoint associated with a Postgres Flexible Replica.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "East US",
 * });
 * const exampleFlexibleServer = new azure.postgresql.FlexibleServer("example", {
 *     name: "example",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     version: "16",
 *     publicNetworkAccessEnabled: false,
 *     administratorLogin: "psqladmin",
 *     administratorPassword: "H@Sh1CoR3!",
 *     zone: "1",
 *     storageMb: 32768,
 *     storageTier: "P30",
 *     skuName: "GP_Standard_D2ads_v5",
 * });
 * const exampleReplica = new azure.postgresql.FlexibleServer("example_replica", {
 *     name: "example-replica",
 *     resourceGroupName: exampleFlexibleServer.resourceGroupName,
 *     location: exampleFlexibleServer.location,
 *     createMode: "Replica",
 *     sourceServerId: exampleFlexibleServer.id,
 *     version: "16",
 *     publicNetworkAccessEnabled: false,
 *     zone: "1",
 *     storageMb: 32768,
 *     storageTier: "P30",
 *     skuName: "GP_Standard_D2ads_v5",
 * });
 * const exampleFlexibleServerVirtualEndpoint = new azure.postgresql.FlexibleServerVirtualEndpoint("example", {
 *     name: "example-endpoint-1",
 *     sourceServerId: exampleFlexibleServer.id,
 *     replicaServerId: exampleReplica.id,
 *     type: "ReadWrite",
 * });
 * ```
 *
 * > **Note:** If creating multiple replicas, an error can occur if virtual endpoints are created before all replicas have been completed. To avoid this error, use a `dependsOn` property on `azure.postgresql.FlexibleServerVirtualEndpoint` that references all Postgres Flexible Server Replicas.
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.DBforPostgreSQL`: 2024-08-01
 *
 * ## Import
 *
 * A PostgreSQL Flexible Virtual Endpoint can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:postgresql/flexibleServerVirtualEndpoint:FlexibleServerVirtualEndpoint example "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DBforPostgreSQL/flexibleServers/sourceServerName/virtualEndpoints/endpointName|/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DBforPostgreSQL/flexibleServers/replicaServerName/virtualEndpoints/endpointName"
 * ```
 */
export class FlexibleServerVirtualEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing FlexibleServerVirtualEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlexibleServerVirtualEndpointState, opts?: pulumi.CustomResourceOptions): FlexibleServerVirtualEndpoint {
        return new FlexibleServerVirtualEndpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:postgresql/flexibleServerVirtualEndpoint:FlexibleServerVirtualEndpoint';

    /**
     * Returns true if the given object is an instance of FlexibleServerVirtualEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FlexibleServerVirtualEndpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlexibleServerVirtualEndpoint.__pulumiType;
    }

    /**
     * The name of the Virtual Endpoint
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Resource ID of the *Replica* Postgres Flexible Server this should be associated with
     *
     * > **Note:** If a fail-over has occurred, you will be unable to update `replicaServerId`. You can remove the resource from state and reimport it back in with `sourceServerId` and `replicaServerId` flipped and then update `replicaServerId`.
     */
    public readonly replicaServerId!: pulumi.Output<string>;
    /**
     * The Resource ID of the *Source* Postgres Flexible Server this should be associated with.
     */
    public readonly sourceServerId!: pulumi.Output<string>;
    /**
     * The type of Virtual Endpoint. Currently only `ReadWrite` is supported.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a FlexibleServerVirtualEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlexibleServerVirtualEndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FlexibleServerVirtualEndpointArgs | FlexibleServerVirtualEndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FlexibleServerVirtualEndpointState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["replicaServerId"] = state ? state.replicaServerId : undefined;
            resourceInputs["sourceServerId"] = state ? state.sourceServerId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as FlexibleServerVirtualEndpointArgs | undefined;
            if ((!args || args.replicaServerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicaServerId'");
            }
            if ((!args || args.sourceServerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceServerId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["replicaServerId"] = args ? args.replicaServerId : undefined;
            resourceInputs["sourceServerId"] = args ? args.sourceServerId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FlexibleServerVirtualEndpoint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FlexibleServerVirtualEndpoint resources.
 */
export interface FlexibleServerVirtualEndpointState {
    /**
     * The name of the Virtual Endpoint
     */
    name?: pulumi.Input<string>;
    /**
     * The Resource ID of the *Replica* Postgres Flexible Server this should be associated with
     *
     * > **Note:** If a fail-over has occurred, you will be unable to update `replicaServerId`. You can remove the resource from state and reimport it back in with `sourceServerId` and `replicaServerId` flipped and then update `replicaServerId`.
     */
    replicaServerId?: pulumi.Input<string>;
    /**
     * The Resource ID of the *Source* Postgres Flexible Server this should be associated with.
     */
    sourceServerId?: pulumi.Input<string>;
    /**
     * The type of Virtual Endpoint. Currently only `ReadWrite` is supported.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FlexibleServerVirtualEndpoint resource.
 */
export interface FlexibleServerVirtualEndpointArgs {
    /**
     * The name of the Virtual Endpoint
     */
    name?: pulumi.Input<string>;
    /**
     * The Resource ID of the *Replica* Postgres Flexible Server this should be associated with
     *
     * > **Note:** If a fail-over has occurred, you will be unable to update `replicaServerId`. You can remove the resource from state and reimport it back in with `sourceServerId` and `replicaServerId` flipped and then update `replicaServerId`.
     */
    replicaServerId: pulumi.Input<string>;
    /**
     * The Resource ID of the *Source* Postgres Flexible Server this should be associated with.
     */
    sourceServerId: pulumi.Input<string>;
    /**
     * The type of Virtual Endpoint. Currently only `ReadWrite` is supported.
     */
    type: pulumi.Input<string>;
}
