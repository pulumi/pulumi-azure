// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to access information about existing DB Servers.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.oracle.getDbServers({
 *     resourceGroupName: "existing",
 *     cloudExadataInfrastructureName: "existing",
 * });
 * export const id = example.then(example => example.id);
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This data source uses the following Azure API Providers:
 *
 * * `Oracle.Database`: 2024-06-01
 */
export function getDbServers(args: GetDbServersArgs, opts?: pulumi.InvokeOptions): Promise<GetDbServersResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure:oracle/getDbServers:getDbServers", {
        "cloudExadataInfrastructureName": args.cloudExadataInfrastructureName,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

/**
 * A collection of arguments for invoking getDbServers.
 */
export interface GetDbServersArgs {
    /**
     * The name of the Cloud Exadata Infrastructure.
     */
    cloudExadataInfrastructureName: string;
    /**
     * The name of the Resource Group where the DB Server exists.
     */
    resourceGroupName: string;
}

/**
 * A collection of values returned by getDbServers.
 */
export interface GetDbServersResult {
    readonly cloudExadataInfrastructureName: string;
    /**
     * A `dbServers` block as defined below.
     */
    readonly dbServers: outputs.oracle.GetDbServersDbServer[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly resourceGroupName: string;
}
/**
 * Use this data source to access information about existing DB Servers.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.oracle.getDbServers({
 *     resourceGroupName: "existing",
 *     cloudExadataInfrastructureName: "existing",
 * });
 * export const id = example.then(example => example.id);
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This data source uses the following Azure API Providers:
 *
 * * `Oracle.Database`: 2024-06-01
 */
export function getDbServersOutput(args: GetDbServersOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDbServersResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("azure:oracle/getDbServers:getDbServers", {
        "cloudExadataInfrastructureName": args.cloudExadataInfrastructureName,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

/**
 * A collection of arguments for invoking getDbServers.
 */
export interface GetDbServersOutputArgs {
    /**
     * The name of the Cloud Exadata Infrastructure.
     */
    cloudExadataInfrastructureName: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the DB Server exists.
     */
    resourceGroupName: pulumi.Input<string>;
}
