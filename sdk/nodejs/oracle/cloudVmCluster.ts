// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Cloud VM Cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as std from "@pulumi/std";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleExadataInfrastructure = new azure.oracle.ExadataInfrastructure("example", {
 *     name: "example-exadata-infrastructure",
 *     displayName: "example-exadata-infrastructure",
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     shape: "Exadata.X9M",
 *     storageCount: 3,
 *     computeCount: 2,
 *     zones: ["3"],
 * });
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
 *     name: "example-virtual-network",
 *     addressSpaces: ["10.0.0.0/16"],
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * const exampleSubnet = new azure.network.Subnet("example", {
 *     name: "example-subnet",
 *     resourceGroupName: exampleResourceGroup.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.1.0/24"],
 *     delegations: [{
 *         name: "delegation",
 *         serviceDelegation: {
 *             actions: [
 *                 "Microsoft.Network/networkinterfaces/*",
 *                 "Microsoft.Network/virtualNetworks/subnets/join/action",
 *             ],
 *             name: "Oracle.Database/networkAttachments",
 *         },
 *     }],
 * });
 * const example = azure.oracle.getDbServersOutput({
 *     resourceGroupName: exampleResourceGroup.name,
 *     cloudExadataInfrastructureName: exampleExadataInfrastructure.name,
 * });
 * const exampleCloudVmCluster = new azure.oracle.CloudVmCluster("example", {
 *     name: "example-cloud-vm-cluster",
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     giVersion: "23.0.0.0",
 *     virtualNetworkId: exampleVirtualNetwork.id,
 *     licenseModel: "BringYourOwnLicense",
 *     dbServers: example.apply(example => .map(obj => (obj.ocid))),
 *     sshPublicKeys: [std.file({
 *         input: "~/.ssh/id_rsa.pub",
 *     }).then(invoke => invoke.result)],
 *     displayName: "example-cloud-vm-cluster",
 *     cloudExadataInfrastructureId: exampleExadataInfrastructure.id,
 *     cpuCoreCount: 2,
 *     hostname: "hostname",
 *     subnetId: exampleSubnet.id,
 * });
 * ```
 *
 * ## Import
 *
 * Cloud VM Clusters can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:oracle/cloudVmCluster:CloudVmCluster example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup/providers/Oracle.Database/cloudVmClusters/cloudVmClusters1
 * ```
 */
export class CloudVmCluster extends pulumi.CustomResource {
    /**
     * Get an existing CloudVmCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudVmClusterState, opts?: pulumi.CustomResourceOptions): CloudVmCluster {
        return new CloudVmCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:oracle/cloudVmCluster:CloudVmCluster';

    /**
     * Returns true if the given object is an instance of CloudVmCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudVmCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudVmCluster.__pulumiType;
    }

    /**
     * The backup subnet CIDR of the Virtual Network associated with the Cloud VM Cluster.
     */
    public readonly backupSubnetCidr!: pulumi.Output<string | undefined>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Cloud Exadata infrastructure.
     */
    public readonly cloudExadataInfrastructureId!: pulumi.Output<string>;
    /**
     * The cluster name for Cloud VM Cluster.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * The number of CPU cores enabled on the Cloud VM Cluster.
     */
    public readonly cpuCoreCount!: pulumi.Output<number>;
    /**
     * A `dataCollectionOptions` block as defined below.
     */
    public readonly dataCollectionOptions!: pulumi.Output<outputs.oracle.CloudVmClusterDataCollectionOptions>;
    /**
     * The percentage assigned to DATA storage (user data and database files). The remaining percentage is assigned to RECO storage (database redo logs, archive logs, and recovery manager backups). Accepted values are `35`, `40`, `60` and `80`.
     */
    public readonly dataStoragePercentage!: pulumi.Output<number>;
    /**
     * The data disk group size to be allocated in TBs.
     */
    public readonly dataStorageSizeInTbs!: pulumi.Output<number>;
    /**
     * The local node storage to be allocated in GBs.
     */
    public readonly dbNodeStorageSizeInGbs!: pulumi.Output<number>;
    /**
     * The list of DB servers.
     */
    public readonly dbServers!: pulumi.Output<string[]>;
    /**
     * The user-friendly name for the Cloud VM Cluster. The name does not need to be unique..
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * A valid Oracle Grid Infrastructure (GI) software version.
     */
    public readonly giVersion!: pulumi.Output<string>;
    /**
     * The hostname for the Cloud VM Cluster without suffix.
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * The hostname for the Cloud VM Cluster with suffix.
     */
    public /*out*/ readonly hostnameActual!: pulumi.Output<string>;
    /**
     * The Oracle license model that applies to the Cloud VM Cluster, either `BringYourOwnLicense` or `LicenseIncluded`.
     */
    public readonly licenseModel!: pulumi.Output<string>;
    /**
     * If true, database backup on local Exadata storage is configured for the Cloud VM Cluster. If `false`, database backup on local Exadata storage is not available in the Cloud VM Cluster.
     */
    public readonly localBackupEnabled!: pulumi.Output<boolean>;
    /**
     * The Azure Region where the Cloud VM Cluster should exist.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The memory to be allocated in GBs.
     */
    public readonly memorySizeInGbs!: pulumi.Output<number>;
    /**
     * The name which should be used for this Cloud VM Cluster.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the Resource Group where the Cloud VM Cluster should exist.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * If true, the sparse disk group is configured for the Cloud VM Cluster. If `false`, the sparse disk group is not created.
     */
    public readonly sparseDiskgroupEnabled!: pulumi.Output<boolean>;
    /**
     * The public key portion of one or more key pairs used for SSH access to the Cloud VM Cluster.
     */
    public readonly sshPublicKeys!: pulumi.Output<string[]>;
    /**
     * The ID of the subnet associated with the Cloud VM Cluster.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * A mapping of tags which should be assigned to the Cloud VM Cluster.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The time zone of the Cloud VM Cluster. For details, see [Exadata Infrastructure Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
     */
    public readonly timeZone!: pulumi.Output<string>;
    /**
     * The ID of the Virtual Network associated with the Cloud VM Cluster.
     */
    public readonly virtualNetworkId!: pulumi.Output<string>;

    /**
     * Create a CloudVmCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudVmClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudVmClusterArgs | CloudVmClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudVmClusterState | undefined;
            resourceInputs["backupSubnetCidr"] = state ? state.backupSubnetCidr : undefined;
            resourceInputs["cloudExadataInfrastructureId"] = state ? state.cloudExadataInfrastructureId : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["cpuCoreCount"] = state ? state.cpuCoreCount : undefined;
            resourceInputs["dataCollectionOptions"] = state ? state.dataCollectionOptions : undefined;
            resourceInputs["dataStoragePercentage"] = state ? state.dataStoragePercentage : undefined;
            resourceInputs["dataStorageSizeInTbs"] = state ? state.dataStorageSizeInTbs : undefined;
            resourceInputs["dbNodeStorageSizeInGbs"] = state ? state.dbNodeStorageSizeInGbs : undefined;
            resourceInputs["dbServers"] = state ? state.dbServers : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["giVersion"] = state ? state.giVersion : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["hostnameActual"] = state ? state.hostnameActual : undefined;
            resourceInputs["licenseModel"] = state ? state.licenseModel : undefined;
            resourceInputs["localBackupEnabled"] = state ? state.localBackupEnabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["memorySizeInGbs"] = state ? state.memorySizeInGbs : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["sparseDiskgroupEnabled"] = state ? state.sparseDiskgroupEnabled : undefined;
            resourceInputs["sshPublicKeys"] = state ? state.sshPublicKeys : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
            resourceInputs["virtualNetworkId"] = state ? state.virtualNetworkId : undefined;
        } else {
            const args = argsOrState as CloudVmClusterArgs | undefined;
            if ((!args || args.cloudExadataInfrastructureId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudExadataInfrastructureId'");
            }
            if ((!args || args.cpuCoreCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cpuCoreCount'");
            }
            if ((!args || args.dbServers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbServers'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.giVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'giVersion'");
            }
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.licenseModel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'licenseModel'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.sshPublicKeys === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sshPublicKeys'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.virtualNetworkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualNetworkId'");
            }
            resourceInputs["backupSubnetCidr"] = args ? args.backupSubnetCidr : undefined;
            resourceInputs["cloudExadataInfrastructureId"] = args ? args.cloudExadataInfrastructureId : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["cpuCoreCount"] = args ? args.cpuCoreCount : undefined;
            resourceInputs["dataCollectionOptions"] = args ? args.dataCollectionOptions : undefined;
            resourceInputs["dataStoragePercentage"] = args ? args.dataStoragePercentage : undefined;
            resourceInputs["dataStorageSizeInTbs"] = args ? args.dataStorageSizeInTbs : undefined;
            resourceInputs["dbNodeStorageSizeInGbs"] = args ? args.dbNodeStorageSizeInGbs : undefined;
            resourceInputs["dbServers"] = args ? args.dbServers : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["giVersion"] = args ? args.giVersion : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["licenseModel"] = args ? args.licenseModel : undefined;
            resourceInputs["localBackupEnabled"] = args ? args.localBackupEnabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["memorySizeInGbs"] = args ? args.memorySizeInGbs : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["sparseDiskgroupEnabled"] = args ? args.sparseDiskgroupEnabled : undefined;
            resourceInputs["sshPublicKeys"] = args ? args.sshPublicKeys : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeZone"] = args ? args.timeZone : undefined;
            resourceInputs["virtualNetworkId"] = args ? args.virtualNetworkId : undefined;
            resourceInputs["hostnameActual"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudVmCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CloudVmCluster resources.
 */
export interface CloudVmClusterState {
    /**
     * The backup subnet CIDR of the Virtual Network associated with the Cloud VM Cluster.
     */
    backupSubnetCidr?: pulumi.Input<string>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Cloud Exadata infrastructure.
     */
    cloudExadataInfrastructureId?: pulumi.Input<string>;
    /**
     * The cluster name for Cloud VM Cluster.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The number of CPU cores enabled on the Cloud VM Cluster.
     */
    cpuCoreCount?: pulumi.Input<number>;
    /**
     * A `dataCollectionOptions` block as defined below.
     */
    dataCollectionOptions?: pulumi.Input<inputs.oracle.CloudVmClusterDataCollectionOptions>;
    /**
     * The percentage assigned to DATA storage (user data and database files). The remaining percentage is assigned to RECO storage (database redo logs, archive logs, and recovery manager backups). Accepted values are `35`, `40`, `60` and `80`.
     */
    dataStoragePercentage?: pulumi.Input<number>;
    /**
     * The data disk group size to be allocated in TBs.
     */
    dataStorageSizeInTbs?: pulumi.Input<number>;
    /**
     * The local node storage to be allocated in GBs.
     */
    dbNodeStorageSizeInGbs?: pulumi.Input<number>;
    /**
     * The list of DB servers.
     */
    dbServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The user-friendly name for the Cloud VM Cluster. The name does not need to be unique..
     */
    displayName?: pulumi.Input<string>;
    /**
     * A valid Oracle Grid Infrastructure (GI) software version.
     */
    giVersion?: pulumi.Input<string>;
    /**
     * The hostname for the Cloud VM Cluster without suffix.
     */
    hostname?: pulumi.Input<string>;
    /**
     * The hostname for the Cloud VM Cluster with suffix.
     */
    hostnameActual?: pulumi.Input<string>;
    /**
     * The Oracle license model that applies to the Cloud VM Cluster, either `BringYourOwnLicense` or `LicenseIncluded`.
     */
    licenseModel?: pulumi.Input<string>;
    /**
     * If true, database backup on local Exadata storage is configured for the Cloud VM Cluster. If `false`, database backup on local Exadata storage is not available in the Cloud VM Cluster.
     */
    localBackupEnabled?: pulumi.Input<boolean>;
    /**
     * The Azure Region where the Cloud VM Cluster should exist.
     */
    location?: pulumi.Input<string>;
    /**
     * The memory to be allocated in GBs.
     */
    memorySizeInGbs?: pulumi.Input<number>;
    /**
     * The name which should be used for this Cloud VM Cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Cloud VM Cluster should exist.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * If true, the sparse disk group is configured for the Cloud VM Cluster. If `false`, the sparse disk group is not created.
     */
    sparseDiskgroupEnabled?: pulumi.Input<boolean>;
    /**
     * The public key portion of one or more key pairs used for SSH access to the Cloud VM Cluster.
     */
    sshPublicKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the subnet associated with the Cloud VM Cluster.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Cloud VM Cluster.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The time zone of the Cloud VM Cluster. For details, see [Exadata Infrastructure Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
     */
    timeZone?: pulumi.Input<string>;
    /**
     * The ID of the Virtual Network associated with the Cloud VM Cluster.
     */
    virtualNetworkId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudVmCluster resource.
 */
export interface CloudVmClusterArgs {
    /**
     * The backup subnet CIDR of the Virtual Network associated with the Cloud VM Cluster.
     */
    backupSubnetCidr?: pulumi.Input<string>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Cloud Exadata infrastructure.
     */
    cloudExadataInfrastructureId: pulumi.Input<string>;
    /**
     * The cluster name for Cloud VM Cluster.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The number of CPU cores enabled on the Cloud VM Cluster.
     */
    cpuCoreCount: pulumi.Input<number>;
    /**
     * A `dataCollectionOptions` block as defined below.
     */
    dataCollectionOptions?: pulumi.Input<inputs.oracle.CloudVmClusterDataCollectionOptions>;
    /**
     * The percentage assigned to DATA storage (user data and database files). The remaining percentage is assigned to RECO storage (database redo logs, archive logs, and recovery manager backups). Accepted values are `35`, `40`, `60` and `80`.
     */
    dataStoragePercentage?: pulumi.Input<number>;
    /**
     * The data disk group size to be allocated in TBs.
     */
    dataStorageSizeInTbs?: pulumi.Input<number>;
    /**
     * The local node storage to be allocated in GBs.
     */
    dbNodeStorageSizeInGbs?: pulumi.Input<number>;
    /**
     * The list of DB servers.
     */
    dbServers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The user-friendly name for the Cloud VM Cluster. The name does not need to be unique..
     */
    displayName: pulumi.Input<string>;
    /**
     * A valid Oracle Grid Infrastructure (GI) software version.
     */
    giVersion: pulumi.Input<string>;
    /**
     * The hostname for the Cloud VM Cluster without suffix.
     */
    hostname: pulumi.Input<string>;
    /**
     * The Oracle license model that applies to the Cloud VM Cluster, either `BringYourOwnLicense` or `LicenseIncluded`.
     */
    licenseModel: pulumi.Input<string>;
    /**
     * If true, database backup on local Exadata storage is configured for the Cloud VM Cluster. If `false`, database backup on local Exadata storage is not available in the Cloud VM Cluster.
     */
    localBackupEnabled?: pulumi.Input<boolean>;
    /**
     * The Azure Region where the Cloud VM Cluster should exist.
     */
    location?: pulumi.Input<string>;
    /**
     * The memory to be allocated in GBs.
     */
    memorySizeInGbs?: pulumi.Input<number>;
    /**
     * The name which should be used for this Cloud VM Cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Cloud VM Cluster should exist.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * If true, the sparse disk group is configured for the Cloud VM Cluster. If `false`, the sparse disk group is not created.
     */
    sparseDiskgroupEnabled?: pulumi.Input<boolean>;
    /**
     * The public key portion of one or more key pairs used for SSH access to the Cloud VM Cluster.
     */
    sshPublicKeys: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the subnet associated with the Cloud VM Cluster.
     */
    subnetId: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Cloud VM Cluster.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The time zone of the Cloud VM Cluster. For details, see [Exadata Infrastructure Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
     */
    timeZone?: pulumi.Input<string>;
    /**
     * The ID of the Virtual Network associated with the Cloud VM Cluster.
     */
    virtualNetworkId: pulumi.Input<string>;
}
