// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Network Manager Security Admin Configuration.
 *
 * ## Import
 *
 * Network Manager Security Admin Configuration can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:network/networkManagerSecurityAdminConfiguration:NetworkManagerSecurityAdminConfiguration example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Network/networkManagers/networkManager1/securityAdminConfigurations/configuration1
 * ```
 */
export class NetworkManagerSecurityAdminConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing NetworkManagerSecurityAdminConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkManagerSecurityAdminConfigurationState, opts?: pulumi.CustomResourceOptions): NetworkManagerSecurityAdminConfiguration {
        return new NetworkManagerSecurityAdminConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:network/networkManagerSecurityAdminConfiguration:NetworkManagerSecurityAdminConfiguration';

    /**
     * Returns true if the given object is an instance of NetworkManagerSecurityAdminConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkManagerSecurityAdminConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkManagerSecurityAdminConfiguration.__pulumiType;
    }

    /**
     * A list of network intent policy based services. Possible values are `All`, `None` and `AllowRulesOnly`. Exactly one value should be set. The `All` option requires `Microsoft.Network/AllowAdminRulesOnNipBasedServices` feature registration to Subscription. Please see [this document](https://learn.microsoft.com/en-us/azure/virtual-network-manager/concept-security-admins#network-intent-policies-and-security-admin-rules) for more information.
     */
    public readonly applyOnNetworkIntentPolicyBasedServices!: pulumi.Output<string | undefined>;
    /**
     * A description of the Security Admin Configuration.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies the name which should be used for this Network Manager Security Admin Configuration. Changing this forces a new Network Manager Security Admin Configuration to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the ID of the Network Manager Security Admin Configuration. Changing this forces a new Network Manager Security Admin Configuration to be created.
     */
    public readonly networkManagerId!: pulumi.Output<string>;

    /**
     * Create a NetworkManagerSecurityAdminConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkManagerSecurityAdminConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkManagerSecurityAdminConfigurationArgs | NetworkManagerSecurityAdminConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkManagerSecurityAdminConfigurationState | undefined;
            resourceInputs["applyOnNetworkIntentPolicyBasedServices"] = state ? state.applyOnNetworkIntentPolicyBasedServices : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkManagerId"] = state ? state.networkManagerId : undefined;
        } else {
            const args = argsOrState as NetworkManagerSecurityAdminConfigurationArgs | undefined;
            if ((!args || args.networkManagerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkManagerId'");
            }
            resourceInputs["applyOnNetworkIntentPolicyBasedServices"] = args ? args.applyOnNetworkIntentPolicyBasedServices : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkManagerId"] = args ? args.networkManagerId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkManagerSecurityAdminConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkManagerSecurityAdminConfiguration resources.
 */
export interface NetworkManagerSecurityAdminConfigurationState {
    /**
     * A list of network intent policy based services. Possible values are `All`, `None` and `AllowRulesOnly`. Exactly one value should be set. The `All` option requires `Microsoft.Network/AllowAdminRulesOnNipBasedServices` feature registration to Subscription. Please see [this document](https://learn.microsoft.com/en-us/azure/virtual-network-manager/concept-security-admins#network-intent-policies-and-security-admin-rules) for more information.
     */
    applyOnNetworkIntentPolicyBasedServices?: pulumi.Input<string>;
    /**
     * A description of the Security Admin Configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the name which should be used for this Network Manager Security Admin Configuration. Changing this forces a new Network Manager Security Admin Configuration to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the ID of the Network Manager Security Admin Configuration. Changing this forces a new Network Manager Security Admin Configuration to be created.
     */
    networkManagerId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkManagerSecurityAdminConfiguration resource.
 */
export interface NetworkManagerSecurityAdminConfigurationArgs {
    /**
     * A list of network intent policy based services. Possible values are `All`, `None` and `AllowRulesOnly`. Exactly one value should be set. The `All` option requires `Microsoft.Network/AllowAdminRulesOnNipBasedServices` feature registration to Subscription. Please see [this document](https://learn.microsoft.com/en-us/azure/virtual-network-manager/concept-security-admins#network-intent-policies-and-security-admin-rules) for more information.
     */
    applyOnNetworkIntentPolicyBasedServices?: pulumi.Input<string>;
    /**
     * A description of the Security Admin Configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the name which should be used for this Network Manager Security Admin Configuration. Changing this forces a new Network Manager Security Admin Configuration to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the ID of the Network Manager Security Admin Configuration. Changing this forces a new Network Manager Security Admin Configuration to be created.
     */
    networkManagerId: pulumi.Input<string>;
}
