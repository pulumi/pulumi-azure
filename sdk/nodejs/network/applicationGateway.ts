// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";

export class ApplicationGateway extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationGatewayState): ApplicationGateway {
        return new ApplicationGateway(name, <any>state, { id });
    }

    public readonly authenticationCertificates: pulumi.Output<{ data: string, id: string, name: string }[] | undefined>;
    public readonly backendAddressPools: pulumi.Output<{ fqdnLists?: string[], id: string, ipAddressLists?: string[], name: string }[]>;
    public readonly backendHttpSettings: pulumi.Output<{ authenticationCertificates?: { id: string, name: string }[], cookieBasedAffinity: string, id: string, name: string, port: number, probeId: string, probeName?: string, protocol: string, requestTimeout?: number }[]>;
    public readonly disabledSslProtocols: pulumi.Output<string[] | undefined>;
    public readonly frontendIpConfigurations: pulumi.Output<{ id: string, name: string, privateIpAddress: string, privateIpAddressAllocation: string, publicIpAddressId: string, subnetId: string }[]>;
    public readonly frontendPorts: pulumi.Output<{ id: string, name: string, port: number }[]>;
    public readonly gatewayIpConfigurations: pulumi.Output<{ id: string, name: string, subnetId: string }[]>;
    public readonly httpListeners: pulumi.Output<{ frontendIpConfigurationId: string, frontendIpConfigurationName: string, frontendPortId: string, frontendPortName: string, hostName?: string, id: string, name: string, protocol: string, requireSni?: boolean, sslCertificateId: string, sslCertificateName?: string }[]>;
    public readonly location: pulumi.Output<string>;
    public readonly name: pulumi.Output<string>;
    public readonly probes: pulumi.Output<{ host: string, id: string, interval: number, name: string, path: string, protocol: string, timeout: number, unhealthyThreshold: number }[] | undefined>;
    public readonly requestRoutingRules: pulumi.Output<{ backendAddressPoolId: string, backendAddressPoolName?: string, backendHttpSettingsId: string, backendHttpSettingsName?: string, httpListenerId: string, httpListenerName: string, id: string, name: string, ruleType: string, urlPathMapId: string, urlPathMapName?: string }[]>;
    public readonly resourceGroupName: pulumi.Output<string>;
    public readonly sku: pulumi.Output<{ capacity: number, name: string, tier: string }>;
    public readonly sslCertificates: pulumi.Output<{ data: string, id: string, name: string, password: string, publicCertData: string }[] | undefined>;
    public readonly tags: pulumi.Output<{[key: string]: any}>;
    public readonly urlPathMaps: pulumi.Output<{ defaultBackendAddressPoolId: string, defaultBackendAddressPoolName: string, defaultBackendHttpSettingsId: string, defaultBackendHttpSettingsName: string, id: string, name: string, pathRules: { backendAddressPoolId: string, backendAddressPoolName: string, backendHttpSettingsId: string, backendHttpSettingsName: string, id: string, name: string, paths: string[] }[] }[] | undefined>;
    public readonly wafConfiguration: pulumi.Output<{ enabled: boolean, firewallMode: string, ruleSetType?: string, ruleSetVersion: string } | undefined>;

    /**
     * Create a ApplicationGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationGatewayArgs, opts?: pulumi.ResourceOptions)
    constructor(name: string, argsOrState?: ApplicationGatewayArgs | ApplicationGatewayState, opts?: pulumi.ResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: ApplicationGatewayState = argsOrState as ApplicationGatewayState | undefined;
            inputs["authenticationCertificates"] = state ? state.authenticationCertificates : undefined;
            inputs["backendAddressPools"] = state ? state.backendAddressPools : undefined;
            inputs["backendHttpSettings"] = state ? state.backendHttpSettings : undefined;
            inputs["disabledSslProtocols"] = state ? state.disabledSslProtocols : undefined;
            inputs["frontendIpConfigurations"] = state ? state.frontendIpConfigurations : undefined;
            inputs["frontendPorts"] = state ? state.frontendPorts : undefined;
            inputs["gatewayIpConfigurations"] = state ? state.gatewayIpConfigurations : undefined;
            inputs["httpListeners"] = state ? state.httpListeners : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["probes"] = state ? state.probes : undefined;
            inputs["requestRoutingRules"] = state ? state.requestRoutingRules : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["sku"] = state ? state.sku : undefined;
            inputs["sslCertificates"] = state ? state.sslCertificates : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["urlPathMaps"] = state ? state.urlPathMaps : undefined;
            inputs["wafConfiguration"] = state ? state.wafConfiguration : undefined;
        } else {
            const args = argsOrState as ApplicationGatewayArgs | undefined;
            if (!args || args.backendAddressPools === undefined) {
                throw new Error("Missing required property 'backendAddressPools'");
            }
            if (!args || args.backendHttpSettings === undefined) {
                throw new Error("Missing required property 'backendHttpSettings'");
            }
            if (!args || args.frontendIpConfigurations === undefined) {
                throw new Error("Missing required property 'frontendIpConfigurations'");
            }
            if (!args || args.frontendPorts === undefined) {
                throw new Error("Missing required property 'frontendPorts'");
            }
            if (!args || args.gatewayIpConfigurations === undefined) {
                throw new Error("Missing required property 'gatewayIpConfigurations'");
            }
            if (!args || args.httpListeners === undefined) {
                throw new Error("Missing required property 'httpListeners'");
            }
            if (!args || args.location === undefined) {
                throw new Error("Missing required property 'location'");
            }
            if (!args || args.requestRoutingRules === undefined) {
                throw new Error("Missing required property 'requestRoutingRules'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.sku === undefined) {
                throw new Error("Missing required property 'sku'");
            }
            inputs["authenticationCertificates"] = args ? args.authenticationCertificates : undefined;
            inputs["backendAddressPools"] = args ? args.backendAddressPools : undefined;
            inputs["backendHttpSettings"] = args ? args.backendHttpSettings : undefined;
            inputs["disabledSslProtocols"] = args ? args.disabledSslProtocols : undefined;
            inputs["frontendIpConfigurations"] = args ? args.frontendIpConfigurations : undefined;
            inputs["frontendPorts"] = args ? args.frontendPorts : undefined;
            inputs["gatewayIpConfigurations"] = args ? args.gatewayIpConfigurations : undefined;
            inputs["httpListeners"] = args ? args.httpListeners : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["probes"] = args ? args.probes : undefined;
            inputs["requestRoutingRules"] = args ? args.requestRoutingRules : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["sku"] = args ? args.sku : undefined;
            inputs["sslCertificates"] = args ? args.sslCertificates : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["urlPathMaps"] = args ? args.urlPathMaps : undefined;
            inputs["wafConfiguration"] = args ? args.wafConfiguration : undefined;
        }
        super("azure:network/applicationGateway:ApplicationGateway", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplicationGateway resources.
 */
export interface ApplicationGatewayState {
    readonly authenticationCertificates?: pulumi.Input<{ data: pulumi.Input<string>, id?: pulumi.Input<string>, name: pulumi.Input<string> }[]>;
    readonly backendAddressPools?: pulumi.Input<{ fqdnLists?: pulumi.Input<pulumi.Input<string>[]>, id?: pulumi.Input<string>, ipAddressLists?: pulumi.Input<pulumi.Input<string>[]>, name: pulumi.Input<string> }[]>;
    readonly backendHttpSettings?: pulumi.Input<{ authenticationCertificates?: pulumi.Input<{ id?: pulumi.Input<string>, name: pulumi.Input<string> }[]>, cookieBasedAffinity: pulumi.Input<string>, id?: pulumi.Input<string>, name: pulumi.Input<string>, port: pulumi.Input<number>, probeId?: pulumi.Input<string>, probeName?: pulumi.Input<string>, protocol: pulumi.Input<string>, requestTimeout?: pulumi.Input<number> }[]>;
    readonly disabledSslProtocols?: pulumi.Input<pulumi.Input<string>[]>;
    readonly frontendIpConfigurations?: pulumi.Input<{ id?: pulumi.Input<string>, name: pulumi.Input<string>, privateIpAddress?: pulumi.Input<string>, privateIpAddressAllocation?: pulumi.Input<string>, publicIpAddressId?: pulumi.Input<string>, subnetId?: pulumi.Input<string> }[]>;
    readonly frontendPorts?: pulumi.Input<{ id?: pulumi.Input<string>, name: pulumi.Input<string>, port: pulumi.Input<number> }[]>;
    readonly gatewayIpConfigurations?: pulumi.Input<{ id?: pulumi.Input<string>, name: pulumi.Input<string>, subnetId: pulumi.Input<string> }[]>;
    readonly httpListeners?: pulumi.Input<{ frontendIpConfigurationId?: pulumi.Input<string>, frontendIpConfigurationName: pulumi.Input<string>, frontendPortId?: pulumi.Input<string>, frontendPortName: pulumi.Input<string>, hostName?: pulumi.Input<string>, id?: pulumi.Input<string>, name: pulumi.Input<string>, protocol: pulumi.Input<string>, requireSni?: pulumi.Input<boolean>, sslCertificateId?: pulumi.Input<string>, sslCertificateName?: pulumi.Input<string> }[]>;
    readonly location?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly probes?: pulumi.Input<{ host: pulumi.Input<string>, id?: pulumi.Input<string>, interval: pulumi.Input<number>, name: pulumi.Input<string>, path: pulumi.Input<string>, protocol: pulumi.Input<string>, timeout: pulumi.Input<number>, unhealthyThreshold: pulumi.Input<number> }[]>;
    readonly requestRoutingRules?: pulumi.Input<{ backendAddressPoolId?: pulumi.Input<string>, backendAddressPoolName?: pulumi.Input<string>, backendHttpSettingsId?: pulumi.Input<string>, backendHttpSettingsName?: pulumi.Input<string>, httpListenerId?: pulumi.Input<string>, httpListenerName: pulumi.Input<string>, id?: pulumi.Input<string>, name: pulumi.Input<string>, ruleType: pulumi.Input<string>, urlPathMapId?: pulumi.Input<string>, urlPathMapName?: pulumi.Input<string> }[]>;
    readonly resourceGroupName?: pulumi.Input<string>;
    readonly sku?: pulumi.Input<{ capacity: pulumi.Input<number>, name: pulumi.Input<string>, tier: pulumi.Input<string> }>;
    readonly sslCertificates?: pulumi.Input<{ data: pulumi.Input<string>, id?: pulumi.Input<string>, name: pulumi.Input<string>, password: pulumi.Input<string>, publicCertData?: pulumi.Input<string> }[]>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly urlPathMaps?: pulumi.Input<{ defaultBackendAddressPoolId?: pulumi.Input<string>, defaultBackendAddressPoolName: pulumi.Input<string>, defaultBackendHttpSettingsId?: pulumi.Input<string>, defaultBackendHttpSettingsName: pulumi.Input<string>, id?: pulumi.Input<string>, name: pulumi.Input<string>, pathRules: pulumi.Input<{ backendAddressPoolId?: pulumi.Input<string>, backendAddressPoolName: pulumi.Input<string>, backendHttpSettingsId?: pulumi.Input<string>, backendHttpSettingsName: pulumi.Input<string>, id?: pulumi.Input<string>, name: pulumi.Input<string>, paths: pulumi.Input<pulumi.Input<string>[]> }[]> }[]>;
    readonly wafConfiguration?: pulumi.Input<{ enabled: pulumi.Input<boolean>, firewallMode: pulumi.Input<string>, ruleSetType?: pulumi.Input<string>, ruleSetVersion: pulumi.Input<string> }>;
}

/**
 * The set of arguments for constructing a ApplicationGateway resource.
 */
export interface ApplicationGatewayArgs {
    readonly authenticationCertificates?: pulumi.Input<{ data: pulumi.Input<string>, id?: pulumi.Input<string>, name: pulumi.Input<string> }[]>;
    readonly backendAddressPools: pulumi.Input<{ fqdnLists?: pulumi.Input<pulumi.Input<string>[]>, id?: pulumi.Input<string>, ipAddressLists?: pulumi.Input<pulumi.Input<string>[]>, name: pulumi.Input<string> }[]>;
    readonly backendHttpSettings: pulumi.Input<{ authenticationCertificates?: pulumi.Input<{ id?: pulumi.Input<string>, name: pulumi.Input<string> }[]>, cookieBasedAffinity: pulumi.Input<string>, id?: pulumi.Input<string>, name: pulumi.Input<string>, port: pulumi.Input<number>, probeId?: pulumi.Input<string>, probeName?: pulumi.Input<string>, protocol: pulumi.Input<string>, requestTimeout?: pulumi.Input<number> }[]>;
    readonly disabledSslProtocols?: pulumi.Input<pulumi.Input<string>[]>;
    readonly frontendIpConfigurations: pulumi.Input<{ id?: pulumi.Input<string>, name: pulumi.Input<string>, privateIpAddress?: pulumi.Input<string>, privateIpAddressAllocation?: pulumi.Input<string>, publicIpAddressId?: pulumi.Input<string>, subnetId?: pulumi.Input<string> }[]>;
    readonly frontendPorts: pulumi.Input<{ id?: pulumi.Input<string>, name: pulumi.Input<string>, port: pulumi.Input<number> }[]>;
    readonly gatewayIpConfigurations: pulumi.Input<{ id?: pulumi.Input<string>, name: pulumi.Input<string>, subnetId: pulumi.Input<string> }[]>;
    readonly httpListeners: pulumi.Input<{ frontendIpConfigurationId?: pulumi.Input<string>, frontendIpConfigurationName: pulumi.Input<string>, frontendPortId?: pulumi.Input<string>, frontendPortName: pulumi.Input<string>, hostName?: pulumi.Input<string>, id?: pulumi.Input<string>, name: pulumi.Input<string>, protocol: pulumi.Input<string>, requireSni?: pulumi.Input<boolean>, sslCertificateId?: pulumi.Input<string>, sslCertificateName?: pulumi.Input<string> }[]>;
    readonly location: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly probes?: pulumi.Input<{ host: pulumi.Input<string>, id?: pulumi.Input<string>, interval: pulumi.Input<number>, name: pulumi.Input<string>, path: pulumi.Input<string>, protocol: pulumi.Input<string>, timeout: pulumi.Input<number>, unhealthyThreshold: pulumi.Input<number> }[]>;
    readonly requestRoutingRules: pulumi.Input<{ backendAddressPoolId?: pulumi.Input<string>, backendAddressPoolName?: pulumi.Input<string>, backendHttpSettingsId?: pulumi.Input<string>, backendHttpSettingsName?: pulumi.Input<string>, httpListenerId?: pulumi.Input<string>, httpListenerName: pulumi.Input<string>, id?: pulumi.Input<string>, name: pulumi.Input<string>, ruleType: pulumi.Input<string>, urlPathMapId?: pulumi.Input<string>, urlPathMapName?: pulumi.Input<string> }[]>;
    readonly resourceGroupName: pulumi.Input<string>;
    readonly sku: pulumi.Input<{ capacity: pulumi.Input<number>, name: pulumi.Input<string>, tier: pulumi.Input<string> }>;
    readonly sslCertificates?: pulumi.Input<{ data: pulumi.Input<string>, id?: pulumi.Input<string>, name: pulumi.Input<string>, password: pulumi.Input<string>, publicCertData?: pulumi.Input<string> }[]>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly urlPathMaps?: pulumi.Input<{ defaultBackendAddressPoolId?: pulumi.Input<string>, defaultBackendAddressPoolName: pulumi.Input<string>, defaultBackendHttpSettingsId?: pulumi.Input<string>, defaultBackendHttpSettingsName: pulumi.Input<string>, id?: pulumi.Input<string>, name: pulumi.Input<string>, pathRules: pulumi.Input<{ backendAddressPoolId?: pulumi.Input<string>, backendAddressPoolName: pulumi.Input<string>, backendHttpSettingsId?: pulumi.Input<string>, backendHttpSettingsName: pulumi.Input<string>, id?: pulumi.Input<string>, name: pulumi.Input<string>, paths: pulumi.Input<pulumi.Input<string>[]> }[]> }[]>;
    readonly wafConfiguration?: pulumi.Input<{ enabled: pulumi.Input<boolean>, firewallMode: pulumi.Input<string>, ruleSetType?: pulumi.Input<string>, ruleSetVersion: pulumi.Input<string> }>;
}
