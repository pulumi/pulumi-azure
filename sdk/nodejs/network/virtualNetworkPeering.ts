// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a virtual network peering which allows resources to access other
 * resources in the linked virtual network.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "peeredvnets-rg",
 *     location: "West Europe",
 * });
 * const example_1 = new azure.network.VirtualNetwork("example-1", {
 *     name: "peternetwork1",
 *     resourceGroupName: example.name,
 *     addressSpaces: ["10.0.1.0/24"],
 *     location: example.location,
 * });
 * const example_2 = new azure.network.VirtualNetwork("example-2", {
 *     name: "peternetwork2",
 *     resourceGroupName: example.name,
 *     addressSpaces: ["10.0.2.0/24"],
 *     location: example.location,
 * });
 * const example_1VirtualNetworkPeering = new azure.network.VirtualNetworkPeering("example-1", {
 *     name: "peer1to2",
 *     resourceGroupName: example.name,
 *     virtualNetworkName: example_1.name,
 *     remoteVirtualNetworkId: example_2.id,
 * });
 * const example_2VirtualNetworkPeering = new azure.network.VirtualNetworkPeering("example-2", {
 *     name: "peer2to1",
 *     resourceGroupName: example.name,
 *     virtualNetworkName: example_2.name,
 *     remoteVirtualNetworkId: example_1.id,
 * });
 * ```
 *
 * ### Triggers)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as std from "@pulumi/std";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "peeredvnets-rg",
 *     location: "West Europe",
 * });
 * const example_1 = new azure.network.VirtualNetwork("example-1", {
 *     name: "peternetwork1",
 *     resourceGroupName: example.name,
 *     addressSpaces: ["10.0.1.0/24"],
 *     location: example.location,
 * });
 * const example_2 = new azure.network.VirtualNetwork("example-2", {
 *     name: "peternetwork2",
 *     resourceGroupName: example.name,
 *     addressSpaces: ["10.0.2.0/24"],
 *     location: example.location,
 * });
 * const example_1VirtualNetworkPeering = new azure.network.VirtualNetworkPeering("example-1", {
 *     name: "peer1to2",
 *     resourceGroupName: example.name,
 *     virtualNetworkName: example_1.name,
 *     remoteVirtualNetworkId: example_2.id,
 *     triggers: {
 *         remote_address_space: std.joinOutput({
 *             separator: ",",
 *             input: example_2.addressSpaces,
 *         }).apply(invoke => invoke.result),
 *     },
 * });
 * const example_2VirtualNetworkPeering = new azure.network.VirtualNetworkPeering("example-2", {
 *     name: "peer2to1",
 *     resourceGroupName: example.name,
 *     virtualNetworkName: example_2.name,
 *     remoteVirtualNetworkId: example_1.id,
 *     triggers: {
 *         remote_address_space: std.joinOutput({
 *             separator: ",",
 *             input: example_1.addressSpaces,
 *         }).apply(invoke => invoke.result),
 *     },
 * });
 * ```
 *
 * ## Note
 *
 * Virtual Network peerings cannot be created, updated or deleted concurrently.
 *
 * ## Import
 *
 * Virtual Network Peerings can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:network/virtualNetworkPeering:VirtualNetworkPeering examplePeering /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/virtualNetworks/myvnet1/virtualNetworkPeerings/myvnet1peering
 * ```
 */
export class VirtualNetworkPeering extends pulumi.CustomResource {
    /**
     * Get an existing VirtualNetworkPeering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualNetworkPeeringState, opts?: pulumi.CustomResourceOptions): VirtualNetworkPeering {
        return new VirtualNetworkPeering(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:network/virtualNetworkPeering:VirtualNetworkPeering';

    /**
     * Returns true if the given object is an instance of VirtualNetworkPeering.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualNetworkPeering {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualNetworkPeering.__pulumiType;
    }

    /**
     * Controls if forwarded traffic from VMs in the remote virtual network is allowed. Defaults to `false`.
     */
    public readonly allowForwardedTraffic!: pulumi.Output<boolean | undefined>;
    /**
     * Controls gatewayLinks can be used in the remote virtual networkâ€™s link to the local virtual network. Defaults to `false`.
     */
    public readonly allowGatewayTransit!: pulumi.Output<boolean | undefined>;
    /**
     * Controls if the traffic from the local virtual network can reach the remote virtual network. Defaults to `true`.
     */
    public readonly allowVirtualNetworkAccess!: pulumi.Output<boolean | undefined>;
    /**
     * A list of local Subnet names that are Subnet peered with remote Virtual Network.
     */
    public readonly localSubnetNames!: pulumi.Output<string[] | undefined>;
    /**
     * The name of the virtual network peering. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies whether only IPv6 address space is peered for Subnet peering. Changing this forces a new resource to be created.
     */
    public readonly onlyIpv6PeeringEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies whether complete Virtual Network address space is peered. Defaults to `true`. Changing this forces a new resource to be created.
     */
    public readonly peerCompleteVirtualNetworksEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * A list of remote Subnet names from remote Virtual Network that are Subnet peered.
     */
    public readonly remoteSubnetNames!: pulumi.Output<string[] | undefined>;
    /**
     * The full Azure resource ID of the remote virtual network. Changing this forces a new resource to be created.
     */
    public readonly remoteVirtualNetworkId!: pulumi.Output<string>;
    /**
     * The name of the resource group in which to create the virtual network peering. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * A mapping of key values pairs that can be used to sync network routes from the remote virtual network to the local virtual network. See the trigger example for an example on how to set it up.
     */
    public readonly triggers!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Controls if remote gateways can be used on the local virtual network. If the flag is set to `true`, and `allowGatewayTransit` on the remote peering is also `true`, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to `true`. This flag cannot be set if virtual network already has a gateway. Defaults to `false`.
     *
     * > **Note:** `useRemoteGateways` must be set to `false` if using Global Virtual Network Peerings.
     */
    public readonly useRemoteGateways!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the virtual network. Changing this forces a new resource to be created.
     */
    public readonly virtualNetworkName!: pulumi.Output<string>;

    /**
     * Create a VirtualNetworkPeering resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualNetworkPeeringArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualNetworkPeeringArgs | VirtualNetworkPeeringState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualNetworkPeeringState | undefined;
            resourceInputs["allowForwardedTraffic"] = state ? state.allowForwardedTraffic : undefined;
            resourceInputs["allowGatewayTransit"] = state ? state.allowGatewayTransit : undefined;
            resourceInputs["allowVirtualNetworkAccess"] = state ? state.allowVirtualNetworkAccess : undefined;
            resourceInputs["localSubnetNames"] = state ? state.localSubnetNames : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["onlyIpv6PeeringEnabled"] = state ? state.onlyIpv6PeeringEnabled : undefined;
            resourceInputs["peerCompleteVirtualNetworksEnabled"] = state ? state.peerCompleteVirtualNetworksEnabled : undefined;
            resourceInputs["remoteSubnetNames"] = state ? state.remoteSubnetNames : undefined;
            resourceInputs["remoteVirtualNetworkId"] = state ? state.remoteVirtualNetworkId : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["triggers"] = state ? state.triggers : undefined;
            resourceInputs["useRemoteGateways"] = state ? state.useRemoteGateways : undefined;
            resourceInputs["virtualNetworkName"] = state ? state.virtualNetworkName : undefined;
        } else {
            const args = argsOrState as VirtualNetworkPeeringArgs | undefined;
            if ((!args || args.remoteVirtualNetworkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteVirtualNetworkId'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.virtualNetworkName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualNetworkName'");
            }
            resourceInputs["allowForwardedTraffic"] = args ? args.allowForwardedTraffic : undefined;
            resourceInputs["allowGatewayTransit"] = args ? args.allowGatewayTransit : undefined;
            resourceInputs["allowVirtualNetworkAccess"] = args ? args.allowVirtualNetworkAccess : undefined;
            resourceInputs["localSubnetNames"] = args ? args.localSubnetNames : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["onlyIpv6PeeringEnabled"] = args ? args.onlyIpv6PeeringEnabled : undefined;
            resourceInputs["peerCompleteVirtualNetworksEnabled"] = args ? args.peerCompleteVirtualNetworksEnabled : undefined;
            resourceInputs["remoteSubnetNames"] = args ? args.remoteSubnetNames : undefined;
            resourceInputs["remoteVirtualNetworkId"] = args ? args.remoteVirtualNetworkId : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
            resourceInputs["useRemoteGateways"] = args ? args.useRemoteGateways : undefined;
            resourceInputs["virtualNetworkName"] = args ? args.virtualNetworkName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualNetworkPeering.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VirtualNetworkPeering resources.
 */
export interface VirtualNetworkPeeringState {
    /**
     * Controls if forwarded traffic from VMs in the remote virtual network is allowed. Defaults to `false`.
     */
    allowForwardedTraffic?: pulumi.Input<boolean>;
    /**
     * Controls gatewayLinks can be used in the remote virtual networkâ€™s link to the local virtual network. Defaults to `false`.
     */
    allowGatewayTransit?: pulumi.Input<boolean>;
    /**
     * Controls if the traffic from the local virtual network can reach the remote virtual network. Defaults to `true`.
     */
    allowVirtualNetworkAccess?: pulumi.Input<boolean>;
    /**
     * A list of local Subnet names that are Subnet peered with remote Virtual Network.
     */
    localSubnetNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the virtual network peering. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies whether only IPv6 address space is peered for Subnet peering. Changing this forces a new resource to be created.
     */
    onlyIpv6PeeringEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies whether complete Virtual Network address space is peered. Defaults to `true`. Changing this forces a new resource to be created.
     */
    peerCompleteVirtualNetworksEnabled?: pulumi.Input<boolean>;
    /**
     * A list of remote Subnet names from remote Virtual Network that are Subnet peered.
     */
    remoteSubnetNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The full Azure resource ID of the remote virtual network. Changing this forces a new resource to be created.
     */
    remoteVirtualNetworkId?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the virtual network peering. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A mapping of key values pairs that can be used to sync network routes from the remote virtual network to the local virtual network. See the trigger example for an example on how to set it up.
     */
    triggers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Controls if remote gateways can be used on the local virtual network. If the flag is set to `true`, and `allowGatewayTransit` on the remote peering is also `true`, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to `true`. This flag cannot be set if virtual network already has a gateway. Defaults to `false`.
     *
     * > **Note:** `useRemoteGateways` must be set to `false` if using Global Virtual Network Peerings.
     */
    useRemoteGateways?: pulumi.Input<boolean>;
    /**
     * The name of the virtual network. Changing this forces a new resource to be created.
     */
    virtualNetworkName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VirtualNetworkPeering resource.
 */
export interface VirtualNetworkPeeringArgs {
    /**
     * Controls if forwarded traffic from VMs in the remote virtual network is allowed. Defaults to `false`.
     */
    allowForwardedTraffic?: pulumi.Input<boolean>;
    /**
     * Controls gatewayLinks can be used in the remote virtual networkâ€™s link to the local virtual network. Defaults to `false`.
     */
    allowGatewayTransit?: pulumi.Input<boolean>;
    /**
     * Controls if the traffic from the local virtual network can reach the remote virtual network. Defaults to `true`.
     */
    allowVirtualNetworkAccess?: pulumi.Input<boolean>;
    /**
     * A list of local Subnet names that are Subnet peered with remote Virtual Network.
     */
    localSubnetNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the virtual network peering. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies whether only IPv6 address space is peered for Subnet peering. Changing this forces a new resource to be created.
     */
    onlyIpv6PeeringEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies whether complete Virtual Network address space is peered. Defaults to `true`. Changing this forces a new resource to be created.
     */
    peerCompleteVirtualNetworksEnabled?: pulumi.Input<boolean>;
    /**
     * A list of remote Subnet names from remote Virtual Network that are Subnet peered.
     */
    remoteSubnetNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The full Azure resource ID of the remote virtual network. Changing this forces a new resource to be created.
     */
    remoteVirtualNetworkId: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the virtual network peering. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A mapping of key values pairs that can be used to sync network routes from the remote virtual network to the local virtual network. See the trigger example for an example on how to set it up.
     */
    triggers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Controls if remote gateways can be used on the local virtual network. If the flag is set to `true`, and `allowGatewayTransit` on the remote peering is also `true`, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to `true`. This flag cannot be set if virtual network already has a gateway. Defaults to `false`.
     *
     * > **Note:** `useRemoteGateways` must be set to `false` if using Global Virtual Network Peerings.
     */
    useRemoteGateways?: pulumi.Input<boolean>;
    /**
     * The name of the virtual network. Changing this forces a new resource to be created.
     */
    virtualNetworkName: pulumi.Input<string>;
}
