// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Traffic Manager Profile to which multiple endpoints can be attached.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as random from "@pulumi/random";
 *
 * const server = new random.RandomId("server", {
 *     keepers: {
 *         azi_id: "1",
 *     },
 *     byteLength: 8,
 * });
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "trafficmanagerProfile",
 *     location: "West Europe",
 * });
 * const exampleTrafficManagerProfile = new azure.network.TrafficManagerProfile("example", {
 *     name: server.hex,
 *     resourceGroupName: example.name,
 *     trafficRoutingMethod: "Weighted",
 *     dnsConfig: {
 *         relativeName: server.hex,
 *         ttl: 100,
 *     },
 *     monitorConfig: {
 *         protocol: "HTTP",
 *         port: 80,
 *         path: "/",
 *         intervalInSeconds: 30,
 *         timeoutInSeconds: 9,
 *         toleratedNumberOfFailures: 3,
 *     },
 *     tags: {
 *         environment: "Production",
 *     },
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Network` - 2022-04-01
 *
 * ## Import
 *
 * Traffic Manager Profiles can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:network/trafficManagerProfile:TrafficManagerProfile exampleProfile /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/trafficManagerProfiles/mytrafficmanagerprofile1
 * ```
 */
export class TrafficManagerProfile extends pulumi.CustomResource {
    /**
     * Get an existing TrafficManagerProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrafficManagerProfileState, opts?: pulumi.CustomResourceOptions): TrafficManagerProfile {
        return new TrafficManagerProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:network/trafficManagerProfile:TrafficManagerProfile';

    /**
     * Returns true if the given object is an instance of TrafficManagerProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrafficManagerProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrafficManagerProfile.__pulumiType;
    }

    /**
     * This block specifies the DNS configuration of the Profile. One `dnsConfig` block as defined below.
     */
    declare public readonly dnsConfig: pulumi.Output<outputs.network.TrafficManagerProfileDnsConfig>;
    /**
     * The FQDN of the created Profile.
     */
    declare public /*out*/ readonly fqdn: pulumi.Output<string>;
    /**
     * The amount of endpoints to return for DNS queries to this Profile. Possible values range from `1` to `8`.
     *
     * > **Note:** `maxReturn` must be set when the `trafficRoutingMethod` is `MultiValue`.
     */
    declare public readonly maxReturn: pulumi.Output<number | undefined>;
    /**
     * This block specifies the Endpoint monitoring configuration for the Profile. One `monitorConfig` block as defined below.
     */
    declare public readonly monitorConfig: pulumi.Output<outputs.network.TrafficManagerProfileMonitorConfig>;
    /**
     * The name of the Traffic Manager profile. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The status of the profile, can be set to either `Enabled` or `Disabled`. Defaults to `Enabled`.
     */
    declare public readonly profileStatus: pulumi.Output<string | undefined>;
    /**
     * The name of the resource group in which to create the Traffic Manager profile. Changing this forces a new resource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the algorithm used to route traffic. Possible values are `Geographic`, `Weighted`, `Performance`, `Priority`, `Subnet` and `MultiValue`.
     * * `Geographic` - Traffic is routed based on Geographic regions specified in the Endpoint.
     * * `MultiValue` - All healthy Endpoints are returned.  MultiValue routing method works only if all the endpoints of type `External` and are specified as IPv4 or IPv6 addresses.
     * * `Performance` - Traffic is routed via the User's closest Endpoint
     * * `Priority` - Traffic is routed to the Endpoint with the lowest `priority` value.
     * * `Subnet` - Traffic is routed based on a mapping of sets of end-user IP address ranges to a specific Endpoint within a Traffic Manager profile.
     * * `Weighted` - Traffic is spread across Endpoints proportional to their `weight` value.
     */
    declare public readonly trafficRoutingMethod: pulumi.Output<string>;
    /**
     * Indicates whether Traffic View is enabled for the Traffic Manager profile.
     */
    declare public readonly trafficViewEnabled: pulumi.Output<boolean | undefined>;

    /**
     * Create a TrafficManagerProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TrafficManagerProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrafficManagerProfileArgs | TrafficManagerProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TrafficManagerProfileState | undefined;
            resourceInputs["dnsConfig"] = state?.dnsConfig;
            resourceInputs["fqdn"] = state?.fqdn;
            resourceInputs["maxReturn"] = state?.maxReturn;
            resourceInputs["monitorConfig"] = state?.monitorConfig;
            resourceInputs["name"] = state?.name;
            resourceInputs["profileStatus"] = state?.profileStatus;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["trafficRoutingMethod"] = state?.trafficRoutingMethod;
            resourceInputs["trafficViewEnabled"] = state?.trafficViewEnabled;
        } else {
            const args = argsOrState as TrafficManagerProfileArgs | undefined;
            if (args?.dnsConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'dnsConfig'");
            }
            if (args?.monitorConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'monitorConfig'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.trafficRoutingMethod === undefined && !opts.urn) {
                throw new Error("Missing required property 'trafficRoutingMethod'");
            }
            resourceInputs["dnsConfig"] = args?.dnsConfig;
            resourceInputs["maxReturn"] = args?.maxReturn;
            resourceInputs["monitorConfig"] = args?.monitorConfig;
            resourceInputs["name"] = args?.name;
            resourceInputs["profileStatus"] = args?.profileStatus;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["trafficRoutingMethod"] = args?.trafficRoutingMethod;
            resourceInputs["trafficViewEnabled"] = args?.trafficViewEnabled;
            resourceInputs["fqdn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure:trafficmanager/profile:Profile" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(TrafficManagerProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TrafficManagerProfile resources.
 */
export interface TrafficManagerProfileState {
    /**
     * This block specifies the DNS configuration of the Profile. One `dnsConfig` block as defined below.
     */
    dnsConfig?: pulumi.Input<inputs.network.TrafficManagerProfileDnsConfig>;
    /**
     * The FQDN of the created Profile.
     */
    fqdn?: pulumi.Input<string>;
    /**
     * The amount of endpoints to return for DNS queries to this Profile. Possible values range from `1` to `8`.
     *
     * > **Note:** `maxReturn` must be set when the `trafficRoutingMethod` is `MultiValue`.
     */
    maxReturn?: pulumi.Input<number>;
    /**
     * This block specifies the Endpoint monitoring configuration for the Profile. One `monitorConfig` block as defined below.
     */
    monitorConfig?: pulumi.Input<inputs.network.TrafficManagerProfileMonitorConfig>;
    /**
     * The name of the Traffic Manager profile. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The status of the profile, can be set to either `Enabled` or `Disabled`. Defaults to `Enabled`.
     */
    profileStatus?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the Traffic Manager profile. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the algorithm used to route traffic. Possible values are `Geographic`, `Weighted`, `Performance`, `Priority`, `Subnet` and `MultiValue`.
     * * `Geographic` - Traffic is routed based on Geographic regions specified in the Endpoint.
     * * `MultiValue` - All healthy Endpoints are returned.  MultiValue routing method works only if all the endpoints of type `External` and are specified as IPv4 or IPv6 addresses.
     * * `Performance` - Traffic is routed via the User's closest Endpoint
     * * `Priority` - Traffic is routed to the Endpoint with the lowest `priority` value.
     * * `Subnet` - Traffic is routed based on a mapping of sets of end-user IP address ranges to a specific Endpoint within a Traffic Manager profile.
     * * `Weighted` - Traffic is spread across Endpoints proportional to their `weight` value.
     */
    trafficRoutingMethod?: pulumi.Input<string>;
    /**
     * Indicates whether Traffic View is enabled for the Traffic Manager profile.
     */
    trafficViewEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a TrafficManagerProfile resource.
 */
export interface TrafficManagerProfileArgs {
    /**
     * This block specifies the DNS configuration of the Profile. One `dnsConfig` block as defined below.
     */
    dnsConfig: pulumi.Input<inputs.network.TrafficManagerProfileDnsConfig>;
    /**
     * The amount of endpoints to return for DNS queries to this Profile. Possible values range from `1` to `8`.
     *
     * > **Note:** `maxReturn` must be set when the `trafficRoutingMethod` is `MultiValue`.
     */
    maxReturn?: pulumi.Input<number>;
    /**
     * This block specifies the Endpoint monitoring configuration for the Profile. One `monitorConfig` block as defined below.
     */
    monitorConfig: pulumi.Input<inputs.network.TrafficManagerProfileMonitorConfig>;
    /**
     * The name of the Traffic Manager profile. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The status of the profile, can be set to either `Enabled` or `Disabled`. Defaults to `Enabled`.
     */
    profileStatus?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the Traffic Manager profile. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the algorithm used to route traffic. Possible values are `Geographic`, `Weighted`, `Performance`, `Priority`, `Subnet` and `MultiValue`.
     * * `Geographic` - Traffic is routed based on Geographic regions specified in the Endpoint.
     * * `MultiValue` - All healthy Endpoints are returned.  MultiValue routing method works only if all the endpoints of type `External` and are specified as IPv4 or IPv6 addresses.
     * * `Performance` - Traffic is routed via the User's closest Endpoint
     * * `Priority` - Traffic is routed to the Endpoint with the lowest `priority` value.
     * * `Subnet` - Traffic is routed based on a mapping of sets of end-user IP address ranges to a specific Endpoint within a Traffic Manager profile.
     * * `Weighted` - Traffic is spread across Endpoints proportional to their `weight` value.
     */
    trafficRoutingMethod: pulumi.Input<string>;
    /**
     * Indicates whether Traffic View is enabled for the Traffic Manager profile.
     */
    trafficViewEnabled?: pulumi.Input<boolean>;
}
