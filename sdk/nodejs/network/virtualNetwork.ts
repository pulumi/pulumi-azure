// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a virtual network including any configured subnets. Each subnet can
 * optionally be configured with a security group to be associated with the subnet.
 *
 * > **NOTE on Virtual Networks and Subnet's:** This provider currently
 * provides both a standalone Subnet resource, and allows for Subnets to be defined in-line within the Virtual Network resource.
 * At this time you cannot use a Virtual Network with in-line Subnets in conjunction with any Subnet resources. Doing so will cause a conflict of Subnet configurations and will overwrite Subnet's.
 * **NOTE on Virtual Networks and DNS Servers:** This provider currently provides both a standalone virtual network DNS Servers resource, and allows for DNS servers to be defined in-line within the Virtual Network resource.
 * At this time you cannot use a Virtual Network with in-line DNS servers in conjunction with any Virtual Network DNS Servers resources. Doing so will cause a conflict of Virtual Network DNS Servers configurations and will overwrite virtual networks DNS servers.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleNetworkSecurityGroup = new azure.network.NetworkSecurityGroup("example", {
 *     name: "example-security-group",
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
 *     name: "example-network",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     addressSpaces: ["10.0.0.0/16"],
 *     dnsServers: [
 *         "10.0.0.4",
 *         "10.0.0.5",
 *     ],
 *     subnets: [
 *         {
 *             name: "subnet1",
 *             addressPrefixes: ["10.0.1.0/24"],
 *         },
 *         {
 *             name: "subnet2",
 *             addressPrefixes: ["10.0.2.0/24"],
 *             securityGroup: exampleNetworkSecurityGroup.id,
 *         },
 *     ],
 *     tags: {
 *         environment: "Production",
 *     },
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Network` - 2024-05-01
 *
 * ## Import
 *
 * Virtual Networks can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:network/virtualNetwork:VirtualNetwork exampleNetwork /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/virtualNetworks/myvnet1
 * ```
 */
export class VirtualNetwork extends pulumi.CustomResource {
    /**
     * Get an existing VirtualNetwork resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualNetworkState, opts?: pulumi.CustomResourceOptions): VirtualNetwork {
        return new VirtualNetwork(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:network/virtualNetwork:VirtualNetwork';

    /**
     * Returns true if the given object is an instance of VirtualNetwork.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualNetwork {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualNetwork.__pulumiType;
    }

    /**
     * The address space that is used the virtual network. You can supply more than one address space.
     *
     * > **Note:** Exactly one of `addressSpace` or `ipAddressPool` must be specified.
     */
    declare public readonly addressSpaces: pulumi.Output<string[] | undefined>;
    /**
     * The BGP community attribute in format `<as-number>:<community-value>`.
     *
     * > **NOTE** The `as-number` segment is the Microsoft ASN, which is always `12076` for now.
     */
    declare public readonly bgpCommunity: pulumi.Output<string | undefined>;
    /**
     * A `ddosProtectionPlan` block as documented below.
     */
    declare public readonly ddosProtectionPlan: pulumi.Output<outputs.network.VirtualNetworkDdosProtectionPlan | undefined>;
    /**
     * List of IP addresses of DNS servers
     *
     * > **NOTE** Since `dnsServers` can be configured both inline and via the separate `azure.network.VirtualNetworkDnsServers` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
     */
    declare public readonly dnsServers: pulumi.Output<string[]>;
    /**
     * Specifies the Edge Zone within the Azure Region where this Virtual Network should exist. Changing this forces a new Virtual Network to be created.
     */
    declare public readonly edgeZone: pulumi.Output<string | undefined>;
    /**
     * A `encryption` block as defined below.
     */
    declare public readonly encryption: pulumi.Output<outputs.network.VirtualNetworkEncryption | undefined>;
    /**
     * The flow timeout in minutes for the Virtual Network, which is used to enable connection tracking for intra-VM flows. Possible values are between `4` and `30` minutes.
     */
    declare public readonly flowTimeoutInMinutes: pulumi.Output<number | undefined>;
    /**
     * The GUID of the Virtual Network.
     */
    declare public /*out*/ readonly guid: pulumi.Output<string>;
    /**
     * One or two `ipAddressPool` blocks as defined below. Only one association of each IP type(IPv4 or IPv6) is allowed.
     *
     * > **Note:** Exactly one of `addressSpace` or `ipAddressPool` must be specified.
     */
    declare public readonly ipAddressPools: pulumi.Output<outputs.network.VirtualNetworkIpAddressPool[] | undefined>;
    /**
     * The location/region where the virtual network is created. Changing this forces a new resource to be created.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * The name of the virtual network. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The Private Endpoint VNet Policies for the Virtual Network. Possible values are `Disabled` and `Basic`. Defaults to `Disabled`.
     */
    declare public readonly privateEndpointVnetPolicies: pulumi.Output<string | undefined>;
    /**
     * The name of the resource group in which to create the virtual network. Changing this forces a new resource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * Can be specified multiple times to define multiple subnets. Each `subnet` block supports fields documented below.
     *
     * > **NOTE** Since `subnet` can be configured both inline and via the separate `azure.network.Subnet` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
     */
    declare public readonly subnets: pulumi.Output<outputs.network.VirtualNetworkSubnet[]>;
    /**
     * A mapping of tags to assign to the resource.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a VirtualNetwork resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualNetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualNetworkArgs | VirtualNetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualNetworkState | undefined;
            resourceInputs["addressSpaces"] = state?.addressSpaces;
            resourceInputs["bgpCommunity"] = state?.bgpCommunity;
            resourceInputs["ddosProtectionPlan"] = state?.ddosProtectionPlan;
            resourceInputs["dnsServers"] = state?.dnsServers;
            resourceInputs["edgeZone"] = state?.edgeZone;
            resourceInputs["encryption"] = state?.encryption;
            resourceInputs["flowTimeoutInMinutes"] = state?.flowTimeoutInMinutes;
            resourceInputs["guid"] = state?.guid;
            resourceInputs["ipAddressPools"] = state?.ipAddressPools;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["privateEndpointVnetPolicies"] = state?.privateEndpointVnetPolicies;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["subnets"] = state?.subnets;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as VirtualNetworkArgs | undefined;
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["addressSpaces"] = args?.addressSpaces;
            resourceInputs["bgpCommunity"] = args?.bgpCommunity;
            resourceInputs["ddosProtectionPlan"] = args?.ddosProtectionPlan;
            resourceInputs["dnsServers"] = args?.dnsServers;
            resourceInputs["edgeZone"] = args?.edgeZone;
            resourceInputs["encryption"] = args?.encryption;
            resourceInputs["flowTimeoutInMinutes"] = args?.flowTimeoutInMinutes;
            resourceInputs["ipAddressPools"] = args?.ipAddressPools;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["privateEndpointVnetPolicies"] = args?.privateEndpointVnetPolicies;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["subnets"] = args?.subnets;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["guid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualNetwork.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VirtualNetwork resources.
 */
export interface VirtualNetworkState {
    /**
     * The address space that is used the virtual network. You can supply more than one address space.
     *
     * > **Note:** Exactly one of `addressSpace` or `ipAddressPool` must be specified.
     */
    addressSpaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The BGP community attribute in format `<as-number>:<community-value>`.
     *
     * > **NOTE** The `as-number` segment is the Microsoft ASN, which is always `12076` for now.
     */
    bgpCommunity?: pulumi.Input<string>;
    /**
     * A `ddosProtectionPlan` block as documented below.
     */
    ddosProtectionPlan?: pulumi.Input<inputs.network.VirtualNetworkDdosProtectionPlan>;
    /**
     * List of IP addresses of DNS servers
     *
     * > **NOTE** Since `dnsServers` can be configured both inline and via the separate `azure.network.VirtualNetworkDnsServers` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the Edge Zone within the Azure Region where this Virtual Network should exist. Changing this forces a new Virtual Network to be created.
     */
    edgeZone?: pulumi.Input<string>;
    /**
     * A `encryption` block as defined below.
     */
    encryption?: pulumi.Input<inputs.network.VirtualNetworkEncryption>;
    /**
     * The flow timeout in minutes for the Virtual Network, which is used to enable connection tracking for intra-VM flows. Possible values are between `4` and `30` minutes.
     */
    flowTimeoutInMinutes?: pulumi.Input<number>;
    /**
     * The GUID of the Virtual Network.
     */
    guid?: pulumi.Input<string>;
    /**
     * One or two `ipAddressPool` blocks as defined below. Only one association of each IP type(IPv4 or IPv6) is allowed.
     *
     * > **Note:** Exactly one of `addressSpace` or `ipAddressPool` must be specified.
     */
    ipAddressPools?: pulumi.Input<pulumi.Input<inputs.network.VirtualNetworkIpAddressPool>[]>;
    /**
     * The location/region where the virtual network is created. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the virtual network. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The Private Endpoint VNet Policies for the Virtual Network. Possible values are `Disabled` and `Basic`. Defaults to `Disabled`.
     */
    privateEndpointVnetPolicies?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the virtual network. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * Can be specified multiple times to define multiple subnets. Each `subnet` block supports fields documented below.
     *
     * > **NOTE** Since `subnet` can be configured both inline and via the separate `azure.network.Subnet` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
     */
    subnets?: pulumi.Input<pulumi.Input<inputs.network.VirtualNetworkSubnet>[]>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a VirtualNetwork resource.
 */
export interface VirtualNetworkArgs {
    /**
     * The address space that is used the virtual network. You can supply more than one address space.
     *
     * > **Note:** Exactly one of `addressSpace` or `ipAddressPool` must be specified.
     */
    addressSpaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The BGP community attribute in format `<as-number>:<community-value>`.
     *
     * > **NOTE** The `as-number` segment is the Microsoft ASN, which is always `12076` for now.
     */
    bgpCommunity?: pulumi.Input<string>;
    /**
     * A `ddosProtectionPlan` block as documented below.
     */
    ddosProtectionPlan?: pulumi.Input<inputs.network.VirtualNetworkDdosProtectionPlan>;
    /**
     * List of IP addresses of DNS servers
     *
     * > **NOTE** Since `dnsServers` can be configured both inline and via the separate `azure.network.VirtualNetworkDnsServers` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the Edge Zone within the Azure Region where this Virtual Network should exist. Changing this forces a new Virtual Network to be created.
     */
    edgeZone?: pulumi.Input<string>;
    /**
     * A `encryption` block as defined below.
     */
    encryption?: pulumi.Input<inputs.network.VirtualNetworkEncryption>;
    /**
     * The flow timeout in minutes for the Virtual Network, which is used to enable connection tracking for intra-VM flows. Possible values are between `4` and `30` minutes.
     */
    flowTimeoutInMinutes?: pulumi.Input<number>;
    /**
     * One or two `ipAddressPool` blocks as defined below. Only one association of each IP type(IPv4 or IPv6) is allowed.
     *
     * > **Note:** Exactly one of `addressSpace` or `ipAddressPool` must be specified.
     */
    ipAddressPools?: pulumi.Input<pulumi.Input<inputs.network.VirtualNetworkIpAddressPool>[]>;
    /**
     * The location/region where the virtual network is created. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the virtual network. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The Private Endpoint VNet Policies for the Virtual Network. Possible values are `Disabled` and `Basic`. Defaults to `Disabled`.
     */
    privateEndpointVnetPolicies?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the virtual network. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Can be specified multiple times to define multiple subnets. Each `subnet` block supports fields documented below.
     *
     * > **NOTE** Since `subnet` can be configured both inline and via the separate `azure.network.Subnet` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
     */
    subnets?: pulumi.Input<pulumi.Input<inputs.network.VirtualNetworkSubnet>[]>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
