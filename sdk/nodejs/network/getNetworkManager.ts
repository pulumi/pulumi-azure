// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to access information about a Network Manager.
 */
export function getNetworkManager(args: GetNetworkManagerArgs, opts?: pulumi.InvokeOptions): Promise<GetNetworkManagerResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure:network/getNetworkManager:getNetworkManager", {
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

/**
 * A collection of arguments for invoking getNetworkManager.
 */
export interface GetNetworkManagerArgs {
    /**
     * The name of the Network Manager.
     */
    name: string;
    /**
     * The Name of the Resource Group where the Network Manager exists.
     */
    resourceGroupName: string;
}

/**
 * A collection of values returned by getNetworkManager.
 */
export interface GetNetworkManagerResult {
    /**
     * One or more `crossTenantScopes` blocks as defined below.
     */
    readonly crossTenantScopes: outputs.network.GetNetworkManagerCrossTenantScope[];
    /**
     * A description of the Network Manager.
     */
    readonly description: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The Azure Region where the Network Manager exists.
     */
    readonly location: string;
    readonly name: string;
    readonly resourceGroupName: string;
    /**
     * A list of configuration deployment type configured on the Network Manager.
     */
    readonly scopeAccesses: string[];
    /**
     * A `scope` block as defined below.
     */
    readonly scopes: outputs.network.GetNetworkManagerScope[];
    /**
     * A mapping of tags assigned to the Network Manager.
     */
    readonly tags: {[key: string]: string};
}
/**
 * Use this data source to access information about a Network Manager.
 */
export function getNetworkManagerOutput(args: GetNetworkManagerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkManagerResult> {
    return pulumi.output(args).apply((a: any) => getNetworkManager(a, opts))
}

/**
 * A collection of arguments for invoking getNetworkManager.
 */
export interface GetNetworkManagerOutputArgs {
    /**
     * The name of the Network Manager.
     */
    name: pulumi.Input<string>;
    /**
     * The Name of the Resource Group where the Network Manager exists.
     */
    resourceGroupName: pulumi.Input<string>;
}
