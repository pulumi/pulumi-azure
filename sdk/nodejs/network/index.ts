// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ApplicationGatewayArgs, ApplicationGatewayState } from "./applicationGateway";
export type ApplicationGateway = import("./applicationGateway").ApplicationGateway;
export const ApplicationGateway: typeof import("./applicationGateway").ApplicationGateway = null as any;
utilities.lazyLoad(exports, ["ApplicationGateway"], () => require("./applicationGateway"));

export { ApplicationSecurityGroupArgs, ApplicationSecurityGroupState } from "./applicationSecurityGroup";
export type ApplicationSecurityGroup = import("./applicationSecurityGroup").ApplicationSecurityGroup;
export const ApplicationSecurityGroup: typeof import("./applicationSecurityGroup").ApplicationSecurityGroup = null as any;
utilities.lazyLoad(exports, ["ApplicationSecurityGroup"], () => require("./applicationSecurityGroup"));

export { BgpConnectionArgs, BgpConnectionState } from "./bgpConnection";
export type BgpConnection = import("./bgpConnection").BgpConnection;
export const BgpConnection: typeof import("./bgpConnection").BgpConnection = null as any;
utilities.lazyLoad(exports, ["BgpConnection"], () => require("./bgpConnection"));

export { DdosProtectionPlanArgs, DdosProtectionPlanState } from "./ddosProtectionPlan";
export type DdosProtectionPlan = import("./ddosProtectionPlan").DdosProtectionPlan;
export const DdosProtectionPlan: typeof import("./ddosProtectionPlan").DdosProtectionPlan = null as any;
utilities.lazyLoad(exports, ["DdosProtectionPlan"], () => require("./ddosProtectionPlan"));

export { ExpressRouteCircuitArgs, ExpressRouteCircuitState } from "./expressRouteCircuit";
export type ExpressRouteCircuit = import("./expressRouteCircuit").ExpressRouteCircuit;
export const ExpressRouteCircuit: typeof import("./expressRouteCircuit").ExpressRouteCircuit = null as any;
utilities.lazyLoad(exports, ["ExpressRouteCircuit"], () => require("./expressRouteCircuit"));

export { ExpressRouteCircuitAuthorizationArgs, ExpressRouteCircuitAuthorizationState } from "./expressRouteCircuitAuthorization";
export type ExpressRouteCircuitAuthorization = import("./expressRouteCircuitAuthorization").ExpressRouteCircuitAuthorization;
export const ExpressRouteCircuitAuthorization: typeof import("./expressRouteCircuitAuthorization").ExpressRouteCircuitAuthorization = null as any;
utilities.lazyLoad(exports, ["ExpressRouteCircuitAuthorization"], () => require("./expressRouteCircuitAuthorization"));

export { ExpressRouteCircuitConnectionArgs, ExpressRouteCircuitConnectionState } from "./expressRouteCircuitConnection";
export type ExpressRouteCircuitConnection = import("./expressRouteCircuitConnection").ExpressRouteCircuitConnection;
export const ExpressRouteCircuitConnection: typeof import("./expressRouteCircuitConnection").ExpressRouteCircuitConnection = null as any;
utilities.lazyLoad(exports, ["ExpressRouteCircuitConnection"], () => require("./expressRouteCircuitConnection"));

export { ExpressRouteCircuitPeeringArgs, ExpressRouteCircuitPeeringState } from "./expressRouteCircuitPeering";
export type ExpressRouteCircuitPeering = import("./expressRouteCircuitPeering").ExpressRouteCircuitPeering;
export const ExpressRouteCircuitPeering: typeof import("./expressRouteCircuitPeering").ExpressRouteCircuitPeering = null as any;
utilities.lazyLoad(exports, ["ExpressRouteCircuitPeering"], () => require("./expressRouteCircuitPeering"));

export { ExpressRouteConnectionArgs, ExpressRouteConnectionState } from "./expressRouteConnection";
export type ExpressRouteConnection = import("./expressRouteConnection").ExpressRouteConnection;
export const ExpressRouteConnection: typeof import("./expressRouteConnection").ExpressRouteConnection = null as any;
utilities.lazyLoad(exports, ["ExpressRouteConnection"], () => require("./expressRouteConnection"));

export { ExpressRouteGatewayArgs, ExpressRouteGatewayState } from "./expressRouteGateway";
export type ExpressRouteGateway = import("./expressRouteGateway").ExpressRouteGateway;
export const ExpressRouteGateway: typeof import("./expressRouteGateway").ExpressRouteGateway = null as any;
utilities.lazyLoad(exports, ["ExpressRouteGateway"], () => require("./expressRouteGateway"));

export { ExpressRoutePortArgs, ExpressRoutePortState } from "./expressRoutePort";
export type ExpressRoutePort = import("./expressRoutePort").ExpressRoutePort;
export const ExpressRoutePort: typeof import("./expressRoutePort").ExpressRoutePort = null as any;
utilities.lazyLoad(exports, ["ExpressRoutePort"], () => require("./expressRoutePort"));

export { ExpressRoutePortAuthorizationArgs, ExpressRoutePortAuthorizationState } from "./expressRoutePortAuthorization";
export type ExpressRoutePortAuthorization = import("./expressRoutePortAuthorization").ExpressRoutePortAuthorization;
export const ExpressRoutePortAuthorization: typeof import("./expressRoutePortAuthorization").ExpressRoutePortAuthorization = null as any;
utilities.lazyLoad(exports, ["ExpressRoutePortAuthorization"], () => require("./expressRoutePortAuthorization"));

export { FirewallArgs, FirewallState } from "./firewall";
export type Firewall = import("./firewall").Firewall;
export const Firewall: typeof import("./firewall").Firewall = null as any;
utilities.lazyLoad(exports, ["Firewall"], () => require("./firewall"));

export { FirewallApplicationRuleCollectionArgs, FirewallApplicationRuleCollectionState } from "./firewallApplicationRuleCollection";
export type FirewallApplicationRuleCollection = import("./firewallApplicationRuleCollection").FirewallApplicationRuleCollection;
export const FirewallApplicationRuleCollection: typeof import("./firewallApplicationRuleCollection").FirewallApplicationRuleCollection = null as any;
utilities.lazyLoad(exports, ["FirewallApplicationRuleCollection"], () => require("./firewallApplicationRuleCollection"));

export { FirewallNatRuleCollectionArgs, FirewallNatRuleCollectionState } from "./firewallNatRuleCollection";
export type FirewallNatRuleCollection = import("./firewallNatRuleCollection").FirewallNatRuleCollection;
export const FirewallNatRuleCollection: typeof import("./firewallNatRuleCollection").FirewallNatRuleCollection = null as any;
utilities.lazyLoad(exports, ["FirewallNatRuleCollection"], () => require("./firewallNatRuleCollection"));

export { FirewallNetworkRuleCollectionArgs, FirewallNetworkRuleCollectionState } from "./firewallNetworkRuleCollection";
export type FirewallNetworkRuleCollection = import("./firewallNetworkRuleCollection").FirewallNetworkRuleCollection;
export const FirewallNetworkRuleCollection: typeof import("./firewallNetworkRuleCollection").FirewallNetworkRuleCollection = null as any;
utilities.lazyLoad(exports, ["FirewallNetworkRuleCollection"], () => require("./firewallNetworkRuleCollection"));

export { FirewallPolicyArgs, FirewallPolicyState } from "./firewallPolicy";
export type FirewallPolicy = import("./firewallPolicy").FirewallPolicy;
export const FirewallPolicy: typeof import("./firewallPolicy").FirewallPolicy = null as any;
utilities.lazyLoad(exports, ["FirewallPolicy"], () => require("./firewallPolicy"));

export { FirewallPolicyRuleCollectionGroupArgs, FirewallPolicyRuleCollectionGroupState } from "./firewallPolicyRuleCollectionGroup";
export type FirewallPolicyRuleCollectionGroup = import("./firewallPolicyRuleCollectionGroup").FirewallPolicyRuleCollectionGroup;
export const FirewallPolicyRuleCollectionGroup: typeof import("./firewallPolicyRuleCollectionGroup").FirewallPolicyRuleCollectionGroup = null as any;
utilities.lazyLoad(exports, ["FirewallPolicyRuleCollectionGroup"], () => require("./firewallPolicyRuleCollectionGroup"));

export { GetApplicationGatewayArgs, GetApplicationGatewayResult, GetApplicationGatewayOutputArgs } from "./getApplicationGateway";
export const getApplicationGateway: typeof import("./getApplicationGateway").getApplicationGateway = null as any;
export const getApplicationGatewayOutput: typeof import("./getApplicationGateway").getApplicationGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationGateway","getApplicationGatewayOutput"], () => require("./getApplicationGateway"));

export { GetApplicationSecurityGroupArgs, GetApplicationSecurityGroupResult, GetApplicationSecurityGroupOutputArgs } from "./getApplicationSecurityGroup";
export const getApplicationSecurityGroup: typeof import("./getApplicationSecurityGroup").getApplicationSecurityGroup = null as any;
export const getApplicationSecurityGroupOutput: typeof import("./getApplicationSecurityGroup").getApplicationSecurityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationSecurityGroup","getApplicationSecurityGroupOutput"], () => require("./getApplicationSecurityGroup"));

export { GetExpressRouteCircuitArgs, GetExpressRouteCircuitResult, GetExpressRouteCircuitOutputArgs } from "./getExpressRouteCircuit";
export const getExpressRouteCircuit: typeof import("./getExpressRouteCircuit").getExpressRouteCircuit = null as any;
export const getExpressRouteCircuitOutput: typeof import("./getExpressRouteCircuit").getExpressRouteCircuitOutput = null as any;
utilities.lazyLoad(exports, ["getExpressRouteCircuit","getExpressRouteCircuitOutput"], () => require("./getExpressRouteCircuit"));

export { GetFirewallArgs, GetFirewallResult, GetFirewallOutputArgs } from "./getFirewall";
export const getFirewall: typeof import("./getFirewall").getFirewall = null as any;
export const getFirewallOutput: typeof import("./getFirewall").getFirewallOutput = null as any;
utilities.lazyLoad(exports, ["getFirewall","getFirewallOutput"], () => require("./getFirewall"));

export { GetFirewallPolicyArgs, GetFirewallPolicyResult, GetFirewallPolicyOutputArgs } from "./getFirewallPolicy";
export const getFirewallPolicy: typeof import("./getFirewallPolicy").getFirewallPolicy = null as any;
export const getFirewallPolicyOutput: typeof import("./getFirewallPolicy").getFirewallPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallPolicy","getFirewallPolicyOutput"], () => require("./getFirewallPolicy"));

export { GetGatewayConnectionArgs, GetGatewayConnectionResult, GetGatewayConnectionOutputArgs } from "./getGatewayConnection";
export const getGatewayConnection: typeof import("./getGatewayConnection").getGatewayConnection = null as any;
export const getGatewayConnectionOutput: typeof import("./getGatewayConnection").getGatewayConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getGatewayConnection","getGatewayConnectionOutput"], () => require("./getGatewayConnection"));

export { GetIpGroupArgs, GetIpGroupResult, GetIpGroupOutputArgs } from "./getIpGroup";
export const getIpGroup: typeof import("./getIpGroup").getIpGroup = null as any;
export const getIpGroupOutput: typeof import("./getIpGroup").getIpGroupOutput = null as any;
utilities.lazyLoad(exports, ["getIpGroup","getIpGroupOutput"], () => require("./getIpGroup"));

export { GetIpGroupsArgs, GetIpGroupsResult, GetIpGroupsOutputArgs } from "./getIpGroups";
export const getIpGroups: typeof import("./getIpGroups").getIpGroups = null as any;
export const getIpGroupsOutput: typeof import("./getIpGroups").getIpGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getIpGroups","getIpGroupsOutput"], () => require("./getIpGroups"));

export { GetLocalNetworkGatewayArgs, GetLocalNetworkGatewayResult, GetLocalNetworkGatewayOutputArgs } from "./getLocalNetworkGateway";
export const getLocalNetworkGateway: typeof import("./getLocalNetworkGateway").getLocalNetworkGateway = null as any;
export const getLocalNetworkGatewayOutput: typeof import("./getLocalNetworkGateway").getLocalNetworkGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getLocalNetworkGateway","getLocalNetworkGatewayOutput"], () => require("./getLocalNetworkGateway"));

export { GetNatGatewayArgs, GetNatGatewayResult, GetNatGatewayOutputArgs } from "./getNatGateway";
export const getNatGateway: typeof import("./getNatGateway").getNatGateway = null as any;
export const getNatGatewayOutput: typeof import("./getNatGateway").getNatGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getNatGateway","getNatGatewayOutput"], () => require("./getNatGateway"));

export { GetNetworkDdosProtectionPlanArgs, GetNetworkDdosProtectionPlanResult, GetNetworkDdosProtectionPlanOutputArgs } from "./getNetworkDdosProtectionPlan";
export const getNetworkDdosProtectionPlan: typeof import("./getNetworkDdosProtectionPlan").getNetworkDdosProtectionPlan = null as any;
export const getNetworkDdosProtectionPlanOutput: typeof import("./getNetworkDdosProtectionPlan").getNetworkDdosProtectionPlanOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkDdosProtectionPlan","getNetworkDdosProtectionPlanOutput"], () => require("./getNetworkDdosProtectionPlan"));

export { GetNetworkInterfaceArgs, GetNetworkInterfaceResult, GetNetworkInterfaceOutputArgs } from "./getNetworkInterface";
export const getNetworkInterface: typeof import("./getNetworkInterface").getNetworkInterface = null as any;
export const getNetworkInterfaceOutput: typeof import("./getNetworkInterface").getNetworkInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkInterface","getNetworkInterfaceOutput"], () => require("./getNetworkInterface"));

export { GetNetworkManagerArgs, GetNetworkManagerResult, GetNetworkManagerOutputArgs } from "./getNetworkManager";
export const getNetworkManager: typeof import("./getNetworkManager").getNetworkManager = null as any;
export const getNetworkManagerOutput: typeof import("./getNetworkManager").getNetworkManagerOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkManager","getNetworkManagerOutput"], () => require("./getNetworkManager"));

export { GetNetworkManagerNetworkGroupArgs, GetNetworkManagerNetworkGroupResult, GetNetworkManagerNetworkGroupOutputArgs } from "./getNetworkManagerNetworkGroup";
export const getNetworkManagerNetworkGroup: typeof import("./getNetworkManagerNetworkGroup").getNetworkManagerNetworkGroup = null as any;
export const getNetworkManagerNetworkGroupOutput: typeof import("./getNetworkManagerNetworkGroup").getNetworkManagerNetworkGroupOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkManagerNetworkGroup","getNetworkManagerNetworkGroupOutput"], () => require("./getNetworkManagerNetworkGroup"));

export { GetNetworkSecurityGroupArgs, GetNetworkSecurityGroupResult, GetNetworkSecurityGroupOutputArgs } from "./getNetworkSecurityGroup";
export const getNetworkSecurityGroup: typeof import("./getNetworkSecurityGroup").getNetworkSecurityGroup = null as any;
export const getNetworkSecurityGroupOutput: typeof import("./getNetworkSecurityGroup").getNetworkSecurityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkSecurityGroup","getNetworkSecurityGroupOutput"], () => require("./getNetworkSecurityGroup"));

export { GetNetworkWatcherArgs, GetNetworkWatcherResult, GetNetworkWatcherOutputArgs } from "./getNetworkWatcher";
export const getNetworkWatcher: typeof import("./getNetworkWatcher").getNetworkWatcher = null as any;
export const getNetworkWatcherOutput: typeof import("./getNetworkWatcher").getNetworkWatcherOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkWatcher","getNetworkWatcherOutput"], () => require("./getNetworkWatcher"));

export { GetPublicIPArgs, GetPublicIPResult, GetPublicIPOutputArgs } from "./getPublicIP";
export const getPublicIP: typeof import("./getPublicIP").getPublicIP = null as any;
export const getPublicIPOutput: typeof import("./getPublicIP").getPublicIPOutput = null as any;
utilities.lazyLoad(exports, ["getPublicIP","getPublicIPOutput"], () => require("./getPublicIP"));

export { GetPublicIPsArgs, GetPublicIPsResult, GetPublicIPsOutputArgs } from "./getPublicIPs";
export const getPublicIPs: typeof import("./getPublicIPs").getPublicIPs = null as any;
export const getPublicIPsOutput: typeof import("./getPublicIPs").getPublicIPsOutput = null as any;
utilities.lazyLoad(exports, ["getPublicIPs","getPublicIPsOutput"], () => require("./getPublicIPs"));

export { GetPublicIpPrefixArgs, GetPublicIpPrefixResult, GetPublicIpPrefixOutputArgs } from "./getPublicIpPrefix";
export const getPublicIpPrefix: typeof import("./getPublicIpPrefix").getPublicIpPrefix = null as any;
export const getPublicIpPrefixOutput: typeof import("./getPublicIpPrefix").getPublicIpPrefixOutput = null as any;
utilities.lazyLoad(exports, ["getPublicIpPrefix","getPublicIpPrefixOutput"], () => require("./getPublicIpPrefix"));

export { GetRouteFilterArgs, GetRouteFilterResult, GetRouteFilterOutputArgs } from "./getRouteFilter";
export const getRouteFilter: typeof import("./getRouteFilter").getRouteFilter = null as any;
export const getRouteFilterOutput: typeof import("./getRouteFilter").getRouteFilterOutput = null as any;
utilities.lazyLoad(exports, ["getRouteFilter","getRouteFilterOutput"], () => require("./getRouteFilter"));

export { GetRouteTableArgs, GetRouteTableResult, GetRouteTableOutputArgs } from "./getRouteTable";
export const getRouteTable: typeof import("./getRouteTable").getRouteTable = null as any;
export const getRouteTableOutput: typeof import("./getRouteTable").getRouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getRouteTable","getRouteTableOutput"], () => require("./getRouteTable"));

export { GetServiceTagsArgs, GetServiceTagsResult, GetServiceTagsOutputArgs } from "./getServiceTags";
export const getServiceTags: typeof import("./getServiceTags").getServiceTags = null as any;
export const getServiceTagsOutput: typeof import("./getServiceTags").getServiceTagsOutput = null as any;
utilities.lazyLoad(exports, ["getServiceTags","getServiceTagsOutput"], () => require("./getServiceTags"));

export { GetSubnetArgs, GetSubnetResult, GetSubnetOutputArgs } from "./getSubnet";
export const getSubnet: typeof import("./getSubnet").getSubnet = null as any;
export const getSubnetOutput: typeof import("./getSubnet").getSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getSubnet","getSubnetOutput"], () => require("./getSubnet"));

export { GetTrafficManagerArgs, GetTrafficManagerResult, GetTrafficManagerOutputArgs } from "./getTrafficManager";
export const getTrafficManager: typeof import("./getTrafficManager").getTrafficManager = null as any;
export const getTrafficManagerOutput: typeof import("./getTrafficManager").getTrafficManagerOutput = null as any;
utilities.lazyLoad(exports, ["getTrafficManager","getTrafficManagerOutput"], () => require("./getTrafficManager"));

export { GetTrafficManagerProfileArgs, GetTrafficManagerProfileResult, GetTrafficManagerProfileOutputArgs } from "./getTrafficManagerProfile";
export const getTrafficManagerProfile: typeof import("./getTrafficManagerProfile").getTrafficManagerProfile = null as any;
export const getTrafficManagerProfileOutput: typeof import("./getTrafficManagerProfile").getTrafficManagerProfileOutput = null as any;
utilities.lazyLoad(exports, ["getTrafficManagerProfile","getTrafficManagerProfileOutput"], () => require("./getTrafficManagerProfile"));

export { GetVirtualHubArgs, GetVirtualHubResult, GetVirtualHubOutputArgs } from "./getVirtualHub";
export const getVirtualHub: typeof import("./getVirtualHub").getVirtualHub = null as any;
export const getVirtualHubOutput: typeof import("./getVirtualHub").getVirtualHubOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualHub","getVirtualHubOutput"], () => require("./getVirtualHub"));

export { GetVirtualHubConnectionArgs, GetVirtualHubConnectionResult, GetVirtualHubConnectionOutputArgs } from "./getVirtualHubConnection";
export const getVirtualHubConnection: typeof import("./getVirtualHubConnection").getVirtualHubConnection = null as any;
export const getVirtualHubConnectionOutput: typeof import("./getVirtualHubConnection").getVirtualHubConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualHubConnection","getVirtualHubConnectionOutput"], () => require("./getVirtualHubConnection"));

export { GetVirtualHubRouteTableArgs, GetVirtualHubRouteTableResult, GetVirtualHubRouteTableOutputArgs } from "./getVirtualHubRouteTable";
export const getVirtualHubRouteTable: typeof import("./getVirtualHubRouteTable").getVirtualHubRouteTable = null as any;
export const getVirtualHubRouteTableOutput: typeof import("./getVirtualHubRouteTable").getVirtualHubRouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualHubRouteTable","getVirtualHubRouteTableOutput"], () => require("./getVirtualHubRouteTable"));

export { GetVirtualNetworkArgs, GetVirtualNetworkResult, GetVirtualNetworkOutputArgs } from "./getVirtualNetwork";
export const getVirtualNetwork: typeof import("./getVirtualNetwork").getVirtualNetwork = null as any;
export const getVirtualNetworkOutput: typeof import("./getVirtualNetwork").getVirtualNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualNetwork","getVirtualNetworkOutput"], () => require("./getVirtualNetwork"));

export { GetVirtualNetworkGatewayArgs, GetVirtualNetworkGatewayResult, GetVirtualNetworkGatewayOutputArgs } from "./getVirtualNetworkGateway";
export const getVirtualNetworkGateway: typeof import("./getVirtualNetworkGateway").getVirtualNetworkGateway = null as any;
export const getVirtualNetworkGatewayOutput: typeof import("./getVirtualNetworkGateway").getVirtualNetworkGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualNetworkGateway","getVirtualNetworkGatewayOutput"], () => require("./getVirtualNetworkGateway"));

export { GetVirtualWanArgs, GetVirtualWanResult, GetVirtualWanOutputArgs } from "./getVirtualWan";
export const getVirtualWan: typeof import("./getVirtualWan").getVirtualWan = null as any;
export const getVirtualWanOutput: typeof import("./getVirtualWan").getVirtualWanOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualWan","getVirtualWanOutput"], () => require("./getVirtualWan"));

export { GetVpnGatewayArgs, GetVpnGatewayResult, GetVpnGatewayOutputArgs } from "./getVpnGateway";
export const getVpnGateway: typeof import("./getVpnGateway").getVpnGateway = null as any;
export const getVpnGatewayOutput: typeof import("./getVpnGateway").getVpnGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getVpnGateway","getVpnGatewayOutput"], () => require("./getVpnGateway"));

export { IPGroupArgs, IPGroupState } from "./ipgroup";
export type IPGroup = import("./ipgroup").IPGroup;
export const IPGroup: typeof import("./ipgroup").IPGroup = null as any;
utilities.lazyLoad(exports, ["IPGroup"], () => require("./ipgroup"));

export { IPGroupCIDRArgs, IPGroupCIDRState } from "./ipgroupCIDR";
export type IPGroupCIDR = import("./ipgroupCIDR").IPGroupCIDR;
export const IPGroupCIDR: typeof import("./ipgroupCIDR").IPGroupCIDR = null as any;
utilities.lazyLoad(exports, ["IPGroupCIDR"], () => require("./ipgroupCIDR"));

export { LocalNetworkGatewayArgs, LocalNetworkGatewayState } from "./localNetworkGateway";
export type LocalNetworkGateway = import("./localNetworkGateway").LocalNetworkGateway;
export const LocalNetworkGateway: typeof import("./localNetworkGateway").LocalNetworkGateway = null as any;
utilities.lazyLoad(exports, ["LocalNetworkGateway"], () => require("./localNetworkGateway"));

export { NatGatewayArgs, NatGatewayState } from "./natGateway";
export type NatGateway = import("./natGateway").NatGateway;
export const NatGateway: typeof import("./natGateway").NatGateway = null as any;
utilities.lazyLoad(exports, ["NatGateway"], () => require("./natGateway"));

export { NatGatewayPublicIpAssociationArgs, NatGatewayPublicIpAssociationState } from "./natGatewayPublicIpAssociation";
export type NatGatewayPublicIpAssociation = import("./natGatewayPublicIpAssociation").NatGatewayPublicIpAssociation;
export const NatGatewayPublicIpAssociation: typeof import("./natGatewayPublicIpAssociation").NatGatewayPublicIpAssociation = null as any;
utilities.lazyLoad(exports, ["NatGatewayPublicIpAssociation"], () => require("./natGatewayPublicIpAssociation"));

export { NatGatewayPublicIpPrefixAssociationArgs, NatGatewayPublicIpPrefixAssociationState } from "./natGatewayPublicIpPrefixAssociation";
export type NatGatewayPublicIpPrefixAssociation = import("./natGatewayPublicIpPrefixAssociation").NatGatewayPublicIpPrefixAssociation;
export const NatGatewayPublicIpPrefixAssociation: typeof import("./natGatewayPublicIpPrefixAssociation").NatGatewayPublicIpPrefixAssociation = null as any;
utilities.lazyLoad(exports, ["NatGatewayPublicIpPrefixAssociation"], () => require("./natGatewayPublicIpPrefixAssociation"));

export { NetworkConnectionMonitorArgs, NetworkConnectionMonitorState } from "./networkConnectionMonitor";
export type NetworkConnectionMonitor = import("./networkConnectionMonitor").NetworkConnectionMonitor;
export const NetworkConnectionMonitor: typeof import("./networkConnectionMonitor").NetworkConnectionMonitor = null as any;
utilities.lazyLoad(exports, ["NetworkConnectionMonitor"], () => require("./networkConnectionMonitor"));

export { NetworkInterfaceArgs, NetworkInterfaceState } from "./networkInterface";
export type NetworkInterface = import("./networkInterface").NetworkInterface;
export const NetworkInterface: typeof import("./networkInterface").NetworkInterface = null as any;
utilities.lazyLoad(exports, ["NetworkInterface"], () => require("./networkInterface"));

export { NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs, NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationState } from "./networkInterfaceApplicationGatewayBackendAddressPoolAssociation";
export type NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation = import("./networkInterfaceApplicationGatewayBackendAddressPoolAssociation").NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation;
export const NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation: typeof import("./networkInterfaceApplicationGatewayBackendAddressPoolAssociation").NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation = null as any;
utilities.lazyLoad(exports, ["NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation"], () => require("./networkInterfaceApplicationGatewayBackendAddressPoolAssociation"));

export { NetworkInterfaceApplicationSecurityGroupAssociationArgs, NetworkInterfaceApplicationSecurityGroupAssociationState } from "./networkInterfaceApplicationSecurityGroupAssociation";
export type NetworkInterfaceApplicationSecurityGroupAssociation = import("./networkInterfaceApplicationSecurityGroupAssociation").NetworkInterfaceApplicationSecurityGroupAssociation;
export const NetworkInterfaceApplicationSecurityGroupAssociation: typeof import("./networkInterfaceApplicationSecurityGroupAssociation").NetworkInterfaceApplicationSecurityGroupAssociation = null as any;
utilities.lazyLoad(exports, ["NetworkInterfaceApplicationSecurityGroupAssociation"], () => require("./networkInterfaceApplicationSecurityGroupAssociation"));

export { NetworkInterfaceBackendAddressPoolAssociationArgs, NetworkInterfaceBackendAddressPoolAssociationState } from "./networkInterfaceBackendAddressPoolAssociation";
export type NetworkInterfaceBackendAddressPoolAssociation = import("./networkInterfaceBackendAddressPoolAssociation").NetworkInterfaceBackendAddressPoolAssociation;
export const NetworkInterfaceBackendAddressPoolAssociation: typeof import("./networkInterfaceBackendAddressPoolAssociation").NetworkInterfaceBackendAddressPoolAssociation = null as any;
utilities.lazyLoad(exports, ["NetworkInterfaceBackendAddressPoolAssociation"], () => require("./networkInterfaceBackendAddressPoolAssociation"));

export { NetworkInterfaceNatRuleAssociationArgs, NetworkInterfaceNatRuleAssociationState } from "./networkInterfaceNatRuleAssociation";
export type NetworkInterfaceNatRuleAssociation = import("./networkInterfaceNatRuleAssociation").NetworkInterfaceNatRuleAssociation;
export const NetworkInterfaceNatRuleAssociation: typeof import("./networkInterfaceNatRuleAssociation").NetworkInterfaceNatRuleAssociation = null as any;
utilities.lazyLoad(exports, ["NetworkInterfaceNatRuleAssociation"], () => require("./networkInterfaceNatRuleAssociation"));

export { NetworkInterfaceSecurityGroupAssociationArgs, NetworkInterfaceSecurityGroupAssociationState } from "./networkInterfaceSecurityGroupAssociation";
export type NetworkInterfaceSecurityGroupAssociation = import("./networkInterfaceSecurityGroupAssociation").NetworkInterfaceSecurityGroupAssociation;
export const NetworkInterfaceSecurityGroupAssociation: typeof import("./networkInterfaceSecurityGroupAssociation").NetworkInterfaceSecurityGroupAssociation = null as any;
utilities.lazyLoad(exports, ["NetworkInterfaceSecurityGroupAssociation"], () => require("./networkInterfaceSecurityGroupAssociation"));

export { NetworkManagerArgs, NetworkManagerState } from "./networkManager";
export type NetworkManager = import("./networkManager").NetworkManager;
export const NetworkManager: typeof import("./networkManager").NetworkManager = null as any;
utilities.lazyLoad(exports, ["NetworkManager"], () => require("./networkManager"));

export { NetworkManagerAdminRuleArgs, NetworkManagerAdminRuleState } from "./networkManagerAdminRule";
export type NetworkManagerAdminRule = import("./networkManagerAdminRule").NetworkManagerAdminRule;
export const NetworkManagerAdminRule: typeof import("./networkManagerAdminRule").NetworkManagerAdminRule = null as any;
utilities.lazyLoad(exports, ["NetworkManagerAdminRule"], () => require("./networkManagerAdminRule"));

export { NetworkManagerAdminRuleCollectionArgs, NetworkManagerAdminRuleCollectionState } from "./networkManagerAdminRuleCollection";
export type NetworkManagerAdminRuleCollection = import("./networkManagerAdminRuleCollection").NetworkManagerAdminRuleCollection;
export const NetworkManagerAdminRuleCollection: typeof import("./networkManagerAdminRuleCollection").NetworkManagerAdminRuleCollection = null as any;
utilities.lazyLoad(exports, ["NetworkManagerAdminRuleCollection"], () => require("./networkManagerAdminRuleCollection"));

export { NetworkManagerConnectivityConfigurationArgs, NetworkManagerConnectivityConfigurationState } from "./networkManagerConnectivityConfiguration";
export type NetworkManagerConnectivityConfiguration = import("./networkManagerConnectivityConfiguration").NetworkManagerConnectivityConfiguration;
export const NetworkManagerConnectivityConfiguration: typeof import("./networkManagerConnectivityConfiguration").NetworkManagerConnectivityConfiguration = null as any;
utilities.lazyLoad(exports, ["NetworkManagerConnectivityConfiguration"], () => require("./networkManagerConnectivityConfiguration"));

export { NetworkManagerDeploymentArgs, NetworkManagerDeploymentState } from "./networkManagerDeployment";
export type NetworkManagerDeployment = import("./networkManagerDeployment").NetworkManagerDeployment;
export const NetworkManagerDeployment: typeof import("./networkManagerDeployment").NetworkManagerDeployment = null as any;
utilities.lazyLoad(exports, ["NetworkManagerDeployment"], () => require("./networkManagerDeployment"));

export { NetworkManagerManagementGroupConnectionArgs, NetworkManagerManagementGroupConnectionState } from "./networkManagerManagementGroupConnection";
export type NetworkManagerManagementGroupConnection = import("./networkManagerManagementGroupConnection").NetworkManagerManagementGroupConnection;
export const NetworkManagerManagementGroupConnection: typeof import("./networkManagerManagementGroupConnection").NetworkManagerManagementGroupConnection = null as any;
utilities.lazyLoad(exports, ["NetworkManagerManagementGroupConnection"], () => require("./networkManagerManagementGroupConnection"));

export { NetworkManagerNetworkGroupArgs, NetworkManagerNetworkGroupState } from "./networkManagerNetworkGroup";
export type NetworkManagerNetworkGroup = import("./networkManagerNetworkGroup").NetworkManagerNetworkGroup;
export const NetworkManagerNetworkGroup: typeof import("./networkManagerNetworkGroup").NetworkManagerNetworkGroup = null as any;
utilities.lazyLoad(exports, ["NetworkManagerNetworkGroup"], () => require("./networkManagerNetworkGroup"));

export { NetworkManagerScopeConnectionArgs, NetworkManagerScopeConnectionState } from "./networkManagerScopeConnection";
export type NetworkManagerScopeConnection = import("./networkManagerScopeConnection").NetworkManagerScopeConnection;
export const NetworkManagerScopeConnection: typeof import("./networkManagerScopeConnection").NetworkManagerScopeConnection = null as any;
utilities.lazyLoad(exports, ["NetworkManagerScopeConnection"], () => require("./networkManagerScopeConnection"));

export { NetworkManagerSecurityAdminConfigurationArgs, NetworkManagerSecurityAdminConfigurationState } from "./networkManagerSecurityAdminConfiguration";
export type NetworkManagerSecurityAdminConfiguration = import("./networkManagerSecurityAdminConfiguration").NetworkManagerSecurityAdminConfiguration;
export const NetworkManagerSecurityAdminConfiguration: typeof import("./networkManagerSecurityAdminConfiguration").NetworkManagerSecurityAdminConfiguration = null as any;
utilities.lazyLoad(exports, ["NetworkManagerSecurityAdminConfiguration"], () => require("./networkManagerSecurityAdminConfiguration"));

export { NetworkManagerStaticMemberArgs, NetworkManagerStaticMemberState } from "./networkManagerStaticMember";
export type NetworkManagerStaticMember = import("./networkManagerStaticMember").NetworkManagerStaticMember;
export const NetworkManagerStaticMember: typeof import("./networkManagerStaticMember").NetworkManagerStaticMember = null as any;
utilities.lazyLoad(exports, ["NetworkManagerStaticMember"], () => require("./networkManagerStaticMember"));

export { NetworkManagerSubscriptionConnectionArgs, NetworkManagerSubscriptionConnectionState } from "./networkManagerSubscriptionConnection";
export type NetworkManagerSubscriptionConnection = import("./networkManagerSubscriptionConnection").NetworkManagerSubscriptionConnection;
export const NetworkManagerSubscriptionConnection: typeof import("./networkManagerSubscriptionConnection").NetworkManagerSubscriptionConnection = null as any;
utilities.lazyLoad(exports, ["NetworkManagerSubscriptionConnection"], () => require("./networkManagerSubscriptionConnection"));

export { NetworkPacketCaptureArgs, NetworkPacketCaptureState } from "./networkPacketCapture";
export type NetworkPacketCapture = import("./networkPacketCapture").NetworkPacketCapture;
export const NetworkPacketCapture: typeof import("./networkPacketCapture").NetworkPacketCapture = null as any;
utilities.lazyLoad(exports, ["NetworkPacketCapture"], () => require("./networkPacketCapture"));

export { NetworkSecurityGroupArgs, NetworkSecurityGroupState } from "./networkSecurityGroup";
export type NetworkSecurityGroup = import("./networkSecurityGroup").NetworkSecurityGroup;
export const NetworkSecurityGroup: typeof import("./networkSecurityGroup").NetworkSecurityGroup = null as any;
utilities.lazyLoad(exports, ["NetworkSecurityGroup"], () => require("./networkSecurityGroup"));

export { NetworkSecurityRuleArgs, NetworkSecurityRuleState } from "./networkSecurityRule";
export type NetworkSecurityRule = import("./networkSecurityRule").NetworkSecurityRule;
export const NetworkSecurityRule: typeof import("./networkSecurityRule").NetworkSecurityRule = null as any;
utilities.lazyLoad(exports, ["NetworkSecurityRule"], () => require("./networkSecurityRule"));

export { NetworkWatcherArgs, NetworkWatcherState } from "./networkWatcher";
export type NetworkWatcher = import("./networkWatcher").NetworkWatcher;
export const NetworkWatcher: typeof import("./networkWatcher").NetworkWatcher = null as any;
utilities.lazyLoad(exports, ["NetworkWatcher"], () => require("./networkWatcher"));

export { NetworkWatcherFlowLogArgs, NetworkWatcherFlowLogState } from "./networkWatcherFlowLog";
export type NetworkWatcherFlowLog = import("./networkWatcherFlowLog").NetworkWatcherFlowLog;
export const NetworkWatcherFlowLog: typeof import("./networkWatcherFlowLog").NetworkWatcherFlowLog = null as any;
utilities.lazyLoad(exports, ["NetworkWatcherFlowLog"], () => require("./networkWatcherFlowLog"));

export { PointToPointVpnGatewayArgs, PointToPointVpnGatewayState } from "./pointToPointVpnGateway";
export type PointToPointVpnGateway = import("./pointToPointVpnGateway").PointToPointVpnGateway;
export const PointToPointVpnGateway: typeof import("./pointToPointVpnGateway").PointToPointVpnGateway = null as any;
utilities.lazyLoad(exports, ["PointToPointVpnGateway"], () => require("./pointToPointVpnGateway"));

export { ProfileArgs, ProfileState } from "./profile";
export type Profile = import("./profile").Profile;
export const Profile: typeof import("./profile").Profile = null as any;
utilities.lazyLoad(exports, ["Profile"], () => require("./profile"));

export { PublicIpArgs, PublicIpState } from "./publicIp";
export type PublicIp = import("./publicIp").PublicIp;
export const PublicIp: typeof import("./publicIp").PublicIp = null as any;
utilities.lazyLoad(exports, ["PublicIp"], () => require("./publicIp"));

export { PublicIpPrefixArgs, PublicIpPrefixState } from "./publicIpPrefix";
export type PublicIpPrefix = import("./publicIpPrefix").PublicIpPrefix;
export const PublicIpPrefix: typeof import("./publicIpPrefix").PublicIpPrefix = null as any;
utilities.lazyLoad(exports, ["PublicIpPrefix"], () => require("./publicIpPrefix"));

export { RouteArgs, RouteState } from "./route";
export type Route = import("./route").Route;
export const Route: typeof import("./route").Route = null as any;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));

export { RouteFilterArgs, RouteFilterState } from "./routeFilter";
export type RouteFilter = import("./routeFilter").RouteFilter;
export const RouteFilter: typeof import("./routeFilter").RouteFilter = null as any;
utilities.lazyLoad(exports, ["RouteFilter"], () => require("./routeFilter"));

export { RouteMapArgs, RouteMapState } from "./routeMap";
export type RouteMap = import("./routeMap").RouteMap;
export const RouteMap: typeof import("./routeMap").RouteMap = null as any;
utilities.lazyLoad(exports, ["RouteMap"], () => require("./routeMap"));

export { RouteServerArgs, RouteServerState } from "./routeServer";
export type RouteServer = import("./routeServer").RouteServer;
export const RouteServer: typeof import("./routeServer").RouteServer = null as any;
utilities.lazyLoad(exports, ["RouteServer"], () => require("./routeServer"));

export { RouteServerBgpConnectionArgs, RouteServerBgpConnectionState } from "./routeServerBgpConnection";
export type RouteServerBgpConnection = import("./routeServerBgpConnection").RouteServerBgpConnection;
export const RouteServerBgpConnection: typeof import("./routeServerBgpConnection").RouteServerBgpConnection = null as any;
utilities.lazyLoad(exports, ["RouteServerBgpConnection"], () => require("./routeServerBgpConnection"));

export { RouteTableArgs, RouteTableState } from "./routeTable";
export type RouteTable = import("./routeTable").RouteTable;
export const RouteTable: typeof import("./routeTable").RouteTable = null as any;
utilities.lazyLoad(exports, ["RouteTable"], () => require("./routeTable"));

export { RoutingIntentArgs, RoutingIntentState } from "./routingIntent";
export type RoutingIntent = import("./routingIntent").RoutingIntent;
export const RoutingIntent: typeof import("./routingIntent").RoutingIntent = null as any;
utilities.lazyLoad(exports, ["RoutingIntent"], () => require("./routingIntent"));

export { SecurityPartnerProviderArgs, SecurityPartnerProviderState } from "./securityPartnerProvider";
export type SecurityPartnerProvider = import("./securityPartnerProvider").SecurityPartnerProvider;
export const SecurityPartnerProvider: typeof import("./securityPartnerProvider").SecurityPartnerProvider = null as any;
utilities.lazyLoad(exports, ["SecurityPartnerProvider"], () => require("./securityPartnerProvider"));

export { SubnetArgs, SubnetState } from "./subnet";
export type Subnet = import("./subnet").Subnet;
export const Subnet: typeof import("./subnet").Subnet = null as any;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));

export { SubnetNatGatewayAssociationArgs, SubnetNatGatewayAssociationState } from "./subnetNatGatewayAssociation";
export type SubnetNatGatewayAssociation = import("./subnetNatGatewayAssociation").SubnetNatGatewayAssociation;
export const SubnetNatGatewayAssociation: typeof import("./subnetNatGatewayAssociation").SubnetNatGatewayAssociation = null as any;
utilities.lazyLoad(exports, ["SubnetNatGatewayAssociation"], () => require("./subnetNatGatewayAssociation"));

export { SubnetNetworkSecurityGroupAssociationArgs, SubnetNetworkSecurityGroupAssociationState } from "./subnetNetworkSecurityGroupAssociation";
export type SubnetNetworkSecurityGroupAssociation = import("./subnetNetworkSecurityGroupAssociation").SubnetNetworkSecurityGroupAssociation;
export const SubnetNetworkSecurityGroupAssociation: typeof import("./subnetNetworkSecurityGroupAssociation").SubnetNetworkSecurityGroupAssociation = null as any;
utilities.lazyLoad(exports, ["SubnetNetworkSecurityGroupAssociation"], () => require("./subnetNetworkSecurityGroupAssociation"));

export { SubnetRouteTableAssociationArgs, SubnetRouteTableAssociationState } from "./subnetRouteTableAssociation";
export type SubnetRouteTableAssociation = import("./subnetRouteTableAssociation").SubnetRouteTableAssociation;
export const SubnetRouteTableAssociation: typeof import("./subnetRouteTableAssociation").SubnetRouteTableAssociation = null as any;
utilities.lazyLoad(exports, ["SubnetRouteTableAssociation"], () => require("./subnetRouteTableAssociation"));

export { SubnetServiceEndpointStoragePolicyArgs, SubnetServiceEndpointStoragePolicyState } from "./subnetServiceEndpointStoragePolicy";
export type SubnetServiceEndpointStoragePolicy = import("./subnetServiceEndpointStoragePolicy").SubnetServiceEndpointStoragePolicy;
export const SubnetServiceEndpointStoragePolicy: typeof import("./subnetServiceEndpointStoragePolicy").SubnetServiceEndpointStoragePolicy = null as any;
utilities.lazyLoad(exports, ["SubnetServiceEndpointStoragePolicy"], () => require("./subnetServiceEndpointStoragePolicy"));

export { TrafficManagerAzureEndpointArgs, TrafficManagerAzureEndpointState } from "./trafficManagerAzureEndpoint";
export type TrafficManagerAzureEndpoint = import("./trafficManagerAzureEndpoint").TrafficManagerAzureEndpoint;
export const TrafficManagerAzureEndpoint: typeof import("./trafficManagerAzureEndpoint").TrafficManagerAzureEndpoint = null as any;
utilities.lazyLoad(exports, ["TrafficManagerAzureEndpoint"], () => require("./trafficManagerAzureEndpoint"));

export { TrafficManagerExternalEndpointArgs, TrafficManagerExternalEndpointState } from "./trafficManagerExternalEndpoint";
export type TrafficManagerExternalEndpoint = import("./trafficManagerExternalEndpoint").TrafficManagerExternalEndpoint;
export const TrafficManagerExternalEndpoint: typeof import("./trafficManagerExternalEndpoint").TrafficManagerExternalEndpoint = null as any;
utilities.lazyLoad(exports, ["TrafficManagerExternalEndpoint"], () => require("./trafficManagerExternalEndpoint"));

export { TrafficManagerNestedEndpointArgs, TrafficManagerNestedEndpointState } from "./trafficManagerNestedEndpoint";
export type TrafficManagerNestedEndpoint = import("./trafficManagerNestedEndpoint").TrafficManagerNestedEndpoint;
export const TrafficManagerNestedEndpoint: typeof import("./trafficManagerNestedEndpoint").TrafficManagerNestedEndpoint = null as any;
utilities.lazyLoad(exports, ["TrafficManagerNestedEndpoint"], () => require("./trafficManagerNestedEndpoint"));

export { TrafficManagerProfileArgs, TrafficManagerProfileState } from "./trafficManagerProfile";
export type TrafficManagerProfile = import("./trafficManagerProfile").TrafficManagerProfile;
export const TrafficManagerProfile: typeof import("./trafficManagerProfile").TrafficManagerProfile = null as any;
utilities.lazyLoad(exports, ["TrafficManagerProfile"], () => require("./trafficManagerProfile"));

export { VirtualHubArgs, VirtualHubState } from "./virtualHub";
export type VirtualHub = import("./virtualHub").VirtualHub;
export const VirtualHub: typeof import("./virtualHub").VirtualHub = null as any;
utilities.lazyLoad(exports, ["VirtualHub"], () => require("./virtualHub"));

export { VirtualHubConnectionArgs, VirtualHubConnectionState } from "./virtualHubConnection";
export type VirtualHubConnection = import("./virtualHubConnection").VirtualHubConnection;
export const VirtualHubConnection: typeof import("./virtualHubConnection").VirtualHubConnection = null as any;
utilities.lazyLoad(exports, ["VirtualHubConnection"], () => require("./virtualHubConnection"));

export { VirtualHubIpArgs, VirtualHubIpState } from "./virtualHubIp";
export type VirtualHubIp = import("./virtualHubIp").VirtualHubIp;
export const VirtualHubIp: typeof import("./virtualHubIp").VirtualHubIp = null as any;
utilities.lazyLoad(exports, ["VirtualHubIp"], () => require("./virtualHubIp"));

export { VirtualHubRouteTableArgs, VirtualHubRouteTableState } from "./virtualHubRouteTable";
export type VirtualHubRouteTable = import("./virtualHubRouteTable").VirtualHubRouteTable;
export const VirtualHubRouteTable: typeof import("./virtualHubRouteTable").VirtualHubRouteTable = null as any;
utilities.lazyLoad(exports, ["VirtualHubRouteTable"], () => require("./virtualHubRouteTable"));

export { VirtualHubRouteTableRouteArgs, VirtualHubRouteTableRouteState } from "./virtualHubRouteTableRoute";
export type VirtualHubRouteTableRoute = import("./virtualHubRouteTableRoute").VirtualHubRouteTableRoute;
export const VirtualHubRouteTableRoute: typeof import("./virtualHubRouteTableRoute").VirtualHubRouteTableRoute = null as any;
utilities.lazyLoad(exports, ["VirtualHubRouteTableRoute"], () => require("./virtualHubRouteTableRoute"));

export { VirtualNetworkArgs, VirtualNetworkState } from "./virtualNetwork";
export type VirtualNetwork = import("./virtualNetwork").VirtualNetwork;
export const VirtualNetwork: typeof import("./virtualNetwork").VirtualNetwork = null as any;
utilities.lazyLoad(exports, ["VirtualNetwork"], () => require("./virtualNetwork"));

export { VirtualNetworkDnsServersArgs, VirtualNetworkDnsServersState } from "./virtualNetworkDnsServers";
export type VirtualNetworkDnsServers = import("./virtualNetworkDnsServers").VirtualNetworkDnsServers;
export const VirtualNetworkDnsServers: typeof import("./virtualNetworkDnsServers").VirtualNetworkDnsServers = null as any;
utilities.lazyLoad(exports, ["VirtualNetworkDnsServers"], () => require("./virtualNetworkDnsServers"));

export { VirtualNetworkGatewayArgs, VirtualNetworkGatewayState } from "./virtualNetworkGateway";
export type VirtualNetworkGateway = import("./virtualNetworkGateway").VirtualNetworkGateway;
export const VirtualNetworkGateway: typeof import("./virtualNetworkGateway").VirtualNetworkGateway = null as any;
utilities.lazyLoad(exports, ["VirtualNetworkGateway"], () => require("./virtualNetworkGateway"));

export { VirtualNetworkGatewayConnectionArgs, VirtualNetworkGatewayConnectionState } from "./virtualNetworkGatewayConnection";
export type VirtualNetworkGatewayConnection = import("./virtualNetworkGatewayConnection").VirtualNetworkGatewayConnection;
export const VirtualNetworkGatewayConnection: typeof import("./virtualNetworkGatewayConnection").VirtualNetworkGatewayConnection = null as any;
utilities.lazyLoad(exports, ["VirtualNetworkGatewayConnection"], () => require("./virtualNetworkGatewayConnection"));

export { VirtualNetworkGatewayNatRuleArgs, VirtualNetworkGatewayNatRuleState } from "./virtualNetworkGatewayNatRule";
export type VirtualNetworkGatewayNatRule = import("./virtualNetworkGatewayNatRule").VirtualNetworkGatewayNatRule;
export const VirtualNetworkGatewayNatRule: typeof import("./virtualNetworkGatewayNatRule").VirtualNetworkGatewayNatRule = null as any;
utilities.lazyLoad(exports, ["VirtualNetworkGatewayNatRule"], () => require("./virtualNetworkGatewayNatRule"));

export { VirtualNetworkPeeringArgs, VirtualNetworkPeeringState } from "./virtualNetworkPeering";
export type VirtualNetworkPeering = import("./virtualNetworkPeering").VirtualNetworkPeering;
export const VirtualNetworkPeering: typeof import("./virtualNetworkPeering").VirtualNetworkPeering = null as any;
utilities.lazyLoad(exports, ["VirtualNetworkPeering"], () => require("./virtualNetworkPeering"));

export { VirtualWanArgs, VirtualWanState } from "./virtualWan";
export type VirtualWan = import("./virtualWan").VirtualWan;
export const VirtualWan: typeof import("./virtualWan").VirtualWan = null as any;
utilities.lazyLoad(exports, ["VirtualWan"], () => require("./virtualWan"));

export { VnpGatewayNatRuleArgs, VnpGatewayNatRuleState } from "./vnpGatewayNatRule";
export type VnpGatewayNatRule = import("./vnpGatewayNatRule").VnpGatewayNatRule;
export const VnpGatewayNatRule: typeof import("./vnpGatewayNatRule").VnpGatewayNatRule = null as any;
utilities.lazyLoad(exports, ["VnpGatewayNatRule"], () => require("./vnpGatewayNatRule"));

export { VpnGatewayArgs, VpnGatewayState } from "./vpnGateway";
export type VpnGateway = import("./vpnGateway").VpnGateway;
export const VpnGateway: typeof import("./vpnGateway").VpnGateway = null as any;
utilities.lazyLoad(exports, ["VpnGateway"], () => require("./vpnGateway"));

export { VpnGatewayConnectionArgs, VpnGatewayConnectionState } from "./vpnGatewayConnection";
export type VpnGatewayConnection = import("./vpnGatewayConnection").VpnGatewayConnection;
export const VpnGatewayConnection: typeof import("./vpnGatewayConnection").VpnGatewayConnection = null as any;
utilities.lazyLoad(exports, ["VpnGatewayConnection"], () => require("./vpnGatewayConnection"));

export { VpnServerConfigurationArgs, VpnServerConfigurationState } from "./vpnServerConfiguration";
export type VpnServerConfiguration = import("./vpnServerConfiguration").VpnServerConfiguration;
export const VpnServerConfiguration: typeof import("./vpnServerConfiguration").VpnServerConfiguration = null as any;
utilities.lazyLoad(exports, ["VpnServerConfiguration"], () => require("./vpnServerConfiguration"));

export { VpnServerConfigurationPolicyGroupArgs, VpnServerConfigurationPolicyGroupState } from "./vpnServerConfigurationPolicyGroup";
export type VpnServerConfigurationPolicyGroup = import("./vpnServerConfigurationPolicyGroup").VpnServerConfigurationPolicyGroup;
export const VpnServerConfigurationPolicyGroup: typeof import("./vpnServerConfigurationPolicyGroup").VpnServerConfigurationPolicyGroup = null as any;
utilities.lazyLoad(exports, ["VpnServerConfigurationPolicyGroup"], () => require("./vpnServerConfigurationPolicyGroup"));

export { VpnSiteArgs, VpnSiteState } from "./vpnSite";
export type VpnSite = import("./vpnSite").VpnSite;
export const VpnSite: typeof import("./vpnSite").VpnSite = null as any;
utilities.lazyLoad(exports, ["VpnSite"], () => require("./vpnSite"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:network/applicationGateway:ApplicationGateway":
                return new ApplicationGateway(name, <any>undefined, { urn })
            case "azure:network/applicationSecurityGroup:ApplicationSecurityGroup":
                return new ApplicationSecurityGroup(name, <any>undefined, { urn })
            case "azure:network/bgpConnection:BgpConnection":
                return new BgpConnection(name, <any>undefined, { urn })
            case "azure:network/ddosProtectionPlan:DdosProtectionPlan":
                return new DdosProtectionPlan(name, <any>undefined, { urn })
            case "azure:network/expressRouteCircuit:ExpressRouteCircuit":
                return new ExpressRouteCircuit(name, <any>undefined, { urn })
            case "azure:network/expressRouteCircuitAuthorization:ExpressRouteCircuitAuthorization":
                return new ExpressRouteCircuitAuthorization(name, <any>undefined, { urn })
            case "azure:network/expressRouteCircuitConnection:ExpressRouteCircuitConnection":
                return new ExpressRouteCircuitConnection(name, <any>undefined, { urn })
            case "azure:network/expressRouteCircuitPeering:ExpressRouteCircuitPeering":
                return new ExpressRouteCircuitPeering(name, <any>undefined, { urn })
            case "azure:network/expressRouteConnection:ExpressRouteConnection":
                return new ExpressRouteConnection(name, <any>undefined, { urn })
            case "azure:network/expressRouteGateway:ExpressRouteGateway":
                return new ExpressRouteGateway(name, <any>undefined, { urn })
            case "azure:network/expressRoutePort:ExpressRoutePort":
                return new ExpressRoutePort(name, <any>undefined, { urn })
            case "azure:network/expressRoutePortAuthorization:ExpressRoutePortAuthorization":
                return new ExpressRoutePortAuthorization(name, <any>undefined, { urn })
            case "azure:network/firewall:Firewall":
                return new Firewall(name, <any>undefined, { urn })
            case "azure:network/firewallApplicationRuleCollection:FirewallApplicationRuleCollection":
                return new FirewallApplicationRuleCollection(name, <any>undefined, { urn })
            case "azure:network/firewallNatRuleCollection:FirewallNatRuleCollection":
                return new FirewallNatRuleCollection(name, <any>undefined, { urn })
            case "azure:network/firewallNetworkRuleCollection:FirewallNetworkRuleCollection":
                return new FirewallNetworkRuleCollection(name, <any>undefined, { urn })
            case "azure:network/firewallPolicy:FirewallPolicy":
                return new FirewallPolicy(name, <any>undefined, { urn })
            case "azure:network/firewallPolicyRuleCollectionGroup:FirewallPolicyRuleCollectionGroup":
                return new FirewallPolicyRuleCollectionGroup(name, <any>undefined, { urn })
            case "azure:network/iPGroup:IPGroup":
                return new IPGroup(name, <any>undefined, { urn })
            case "azure:network/iPGroupCIDR:IPGroupCIDR":
                return new IPGroupCIDR(name, <any>undefined, { urn })
            case "azure:network/localNetworkGateway:LocalNetworkGateway":
                return new LocalNetworkGateway(name, <any>undefined, { urn })
            case "azure:network/natGateway:NatGateway":
                return new NatGateway(name, <any>undefined, { urn })
            case "azure:network/natGatewayPublicIpAssociation:NatGatewayPublicIpAssociation":
                return new NatGatewayPublicIpAssociation(name, <any>undefined, { urn })
            case "azure:network/natGatewayPublicIpPrefixAssociation:NatGatewayPublicIpPrefixAssociation":
                return new NatGatewayPublicIpPrefixAssociation(name, <any>undefined, { urn })
            case "azure:network/networkConnectionMonitor:NetworkConnectionMonitor":
                return new NetworkConnectionMonitor(name, <any>undefined, { urn })
            case "azure:network/networkInterface:NetworkInterface":
                return new NetworkInterface(name, <any>undefined, { urn })
            case "azure:network/networkInterfaceApplicationGatewayBackendAddressPoolAssociation:NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation":
                return new NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation(name, <any>undefined, { urn })
            case "azure:network/networkInterfaceApplicationSecurityGroupAssociation:NetworkInterfaceApplicationSecurityGroupAssociation":
                return new NetworkInterfaceApplicationSecurityGroupAssociation(name, <any>undefined, { urn })
            case "azure:network/networkInterfaceBackendAddressPoolAssociation:NetworkInterfaceBackendAddressPoolAssociation":
                return new NetworkInterfaceBackendAddressPoolAssociation(name, <any>undefined, { urn })
            case "azure:network/networkInterfaceNatRuleAssociation:NetworkInterfaceNatRuleAssociation":
                return new NetworkInterfaceNatRuleAssociation(name, <any>undefined, { urn })
            case "azure:network/networkInterfaceSecurityGroupAssociation:NetworkInterfaceSecurityGroupAssociation":
                return new NetworkInterfaceSecurityGroupAssociation(name, <any>undefined, { urn })
            case "azure:network/networkManager:NetworkManager":
                return new NetworkManager(name, <any>undefined, { urn })
            case "azure:network/networkManagerAdminRule:NetworkManagerAdminRule":
                return new NetworkManagerAdminRule(name, <any>undefined, { urn })
            case "azure:network/networkManagerAdminRuleCollection:NetworkManagerAdminRuleCollection":
                return new NetworkManagerAdminRuleCollection(name, <any>undefined, { urn })
            case "azure:network/networkManagerConnectivityConfiguration:NetworkManagerConnectivityConfiguration":
                return new NetworkManagerConnectivityConfiguration(name, <any>undefined, { urn })
            case "azure:network/networkManagerDeployment:NetworkManagerDeployment":
                return new NetworkManagerDeployment(name, <any>undefined, { urn })
            case "azure:network/networkManagerManagementGroupConnection:NetworkManagerManagementGroupConnection":
                return new NetworkManagerManagementGroupConnection(name, <any>undefined, { urn })
            case "azure:network/networkManagerNetworkGroup:NetworkManagerNetworkGroup":
                return new NetworkManagerNetworkGroup(name, <any>undefined, { urn })
            case "azure:network/networkManagerScopeConnection:NetworkManagerScopeConnection":
                return new NetworkManagerScopeConnection(name, <any>undefined, { urn })
            case "azure:network/networkManagerSecurityAdminConfiguration:NetworkManagerSecurityAdminConfiguration":
                return new NetworkManagerSecurityAdminConfiguration(name, <any>undefined, { urn })
            case "azure:network/networkManagerStaticMember:NetworkManagerStaticMember":
                return new NetworkManagerStaticMember(name, <any>undefined, { urn })
            case "azure:network/networkManagerSubscriptionConnection:NetworkManagerSubscriptionConnection":
                return new NetworkManagerSubscriptionConnection(name, <any>undefined, { urn })
            case "azure:network/networkPacketCapture:NetworkPacketCapture":
                return new NetworkPacketCapture(name, <any>undefined, { urn })
            case "azure:network/networkSecurityGroup:NetworkSecurityGroup":
                return new NetworkSecurityGroup(name, <any>undefined, { urn })
            case "azure:network/networkSecurityRule:NetworkSecurityRule":
                return new NetworkSecurityRule(name, <any>undefined, { urn })
            case "azure:network/networkWatcher:NetworkWatcher":
                return new NetworkWatcher(name, <any>undefined, { urn })
            case "azure:network/networkWatcherFlowLog:NetworkWatcherFlowLog":
                return new NetworkWatcherFlowLog(name, <any>undefined, { urn })
            case "azure:network/pointToPointVpnGateway:PointToPointVpnGateway":
                return new PointToPointVpnGateway(name, <any>undefined, { urn })
            case "azure:network/profile:Profile":
                return new Profile(name, <any>undefined, { urn })
            case "azure:network/publicIp:PublicIp":
                return new PublicIp(name, <any>undefined, { urn })
            case "azure:network/publicIpPrefix:PublicIpPrefix":
                return new PublicIpPrefix(name, <any>undefined, { urn })
            case "azure:network/route:Route":
                return new Route(name, <any>undefined, { urn })
            case "azure:network/routeFilter:RouteFilter":
                return new RouteFilter(name, <any>undefined, { urn })
            case "azure:network/routeMap:RouteMap":
                return new RouteMap(name, <any>undefined, { urn })
            case "azure:network/routeServer:RouteServer":
                return new RouteServer(name, <any>undefined, { urn })
            case "azure:network/routeServerBgpConnection:RouteServerBgpConnection":
                return new RouteServerBgpConnection(name, <any>undefined, { urn })
            case "azure:network/routeTable:RouteTable":
                return new RouteTable(name, <any>undefined, { urn })
            case "azure:network/routingIntent:RoutingIntent":
                return new RoutingIntent(name, <any>undefined, { urn })
            case "azure:network/securityPartnerProvider:SecurityPartnerProvider":
                return new SecurityPartnerProvider(name, <any>undefined, { urn })
            case "azure:network/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "azure:network/subnetNatGatewayAssociation:SubnetNatGatewayAssociation":
                return new SubnetNatGatewayAssociation(name, <any>undefined, { urn })
            case "azure:network/subnetNetworkSecurityGroupAssociation:SubnetNetworkSecurityGroupAssociation":
                return new SubnetNetworkSecurityGroupAssociation(name, <any>undefined, { urn })
            case "azure:network/subnetRouteTableAssociation:SubnetRouteTableAssociation":
                return new SubnetRouteTableAssociation(name, <any>undefined, { urn })
            case "azure:network/subnetServiceEndpointStoragePolicy:SubnetServiceEndpointStoragePolicy":
                return new SubnetServiceEndpointStoragePolicy(name, <any>undefined, { urn })
            case "azure:network/trafficManagerAzureEndpoint:TrafficManagerAzureEndpoint":
                return new TrafficManagerAzureEndpoint(name, <any>undefined, { urn })
            case "azure:network/trafficManagerExternalEndpoint:TrafficManagerExternalEndpoint":
                return new TrafficManagerExternalEndpoint(name, <any>undefined, { urn })
            case "azure:network/trafficManagerNestedEndpoint:TrafficManagerNestedEndpoint":
                return new TrafficManagerNestedEndpoint(name, <any>undefined, { urn })
            case "azure:network/trafficManagerProfile:TrafficManagerProfile":
                return new TrafficManagerProfile(name, <any>undefined, { urn })
            case "azure:network/virtualHub:VirtualHub":
                return new VirtualHub(name, <any>undefined, { urn })
            case "azure:network/virtualHubConnection:VirtualHubConnection":
                return new VirtualHubConnection(name, <any>undefined, { urn })
            case "azure:network/virtualHubIp:VirtualHubIp":
                return new VirtualHubIp(name, <any>undefined, { urn })
            case "azure:network/virtualHubRouteTable:VirtualHubRouteTable":
                return new VirtualHubRouteTable(name, <any>undefined, { urn })
            case "azure:network/virtualHubRouteTableRoute:VirtualHubRouteTableRoute":
                return new VirtualHubRouteTableRoute(name, <any>undefined, { urn })
            case "azure:network/virtualNetwork:VirtualNetwork":
                return new VirtualNetwork(name, <any>undefined, { urn })
            case "azure:network/virtualNetworkDnsServers:VirtualNetworkDnsServers":
                return new VirtualNetworkDnsServers(name, <any>undefined, { urn })
            case "azure:network/virtualNetworkGateway:VirtualNetworkGateway":
                return new VirtualNetworkGateway(name, <any>undefined, { urn })
            case "azure:network/virtualNetworkGatewayConnection:VirtualNetworkGatewayConnection":
                return new VirtualNetworkGatewayConnection(name, <any>undefined, { urn })
            case "azure:network/virtualNetworkGatewayNatRule:VirtualNetworkGatewayNatRule":
                return new VirtualNetworkGatewayNatRule(name, <any>undefined, { urn })
            case "azure:network/virtualNetworkPeering:VirtualNetworkPeering":
                return new VirtualNetworkPeering(name, <any>undefined, { urn })
            case "azure:network/virtualWan:VirtualWan":
                return new VirtualWan(name, <any>undefined, { urn })
            case "azure:network/vnpGatewayNatRule:VnpGatewayNatRule":
                return new VnpGatewayNatRule(name, <any>undefined, { urn })
            case "azure:network/vpnGateway:VpnGateway":
                return new VpnGateway(name, <any>undefined, { urn })
            case "azure:network/vpnGatewayConnection:VpnGatewayConnection":
                return new VpnGatewayConnection(name, <any>undefined, { urn })
            case "azure:network/vpnServerConfiguration:VpnServerConfiguration":
                return new VpnServerConfiguration(name, <any>undefined, { urn })
            case "azure:network/vpnServerConfigurationPolicyGroup:VpnServerConfigurationPolicyGroup":
                return new VpnServerConfigurationPolicyGroup(name, <any>undefined, { urn })
            case "azure:network/vpnSite:VpnSite":
                return new VpnSite(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "network/applicationGateway", _module)
pulumi.runtime.registerResourceModule("azure", "network/applicationSecurityGroup", _module)
pulumi.runtime.registerResourceModule("azure", "network/bgpConnection", _module)
pulumi.runtime.registerResourceModule("azure", "network/ddosProtectionPlan", _module)
pulumi.runtime.registerResourceModule("azure", "network/expressRouteCircuit", _module)
pulumi.runtime.registerResourceModule("azure", "network/expressRouteCircuitAuthorization", _module)
pulumi.runtime.registerResourceModule("azure", "network/expressRouteCircuitConnection", _module)
pulumi.runtime.registerResourceModule("azure", "network/expressRouteCircuitPeering", _module)
pulumi.runtime.registerResourceModule("azure", "network/expressRouteConnection", _module)
pulumi.runtime.registerResourceModule("azure", "network/expressRouteGateway", _module)
pulumi.runtime.registerResourceModule("azure", "network/expressRoutePort", _module)
pulumi.runtime.registerResourceModule("azure", "network/expressRoutePortAuthorization", _module)
pulumi.runtime.registerResourceModule("azure", "network/firewall", _module)
pulumi.runtime.registerResourceModule("azure", "network/firewallApplicationRuleCollection", _module)
pulumi.runtime.registerResourceModule("azure", "network/firewallNatRuleCollection", _module)
pulumi.runtime.registerResourceModule("azure", "network/firewallNetworkRuleCollection", _module)
pulumi.runtime.registerResourceModule("azure", "network/firewallPolicy", _module)
pulumi.runtime.registerResourceModule("azure", "network/firewallPolicyRuleCollectionGroup", _module)
pulumi.runtime.registerResourceModule("azure", "network/iPGroup", _module)
pulumi.runtime.registerResourceModule("azure", "network/iPGroupCIDR", _module)
pulumi.runtime.registerResourceModule("azure", "network/localNetworkGateway", _module)
pulumi.runtime.registerResourceModule("azure", "network/natGateway", _module)
pulumi.runtime.registerResourceModule("azure", "network/natGatewayPublicIpAssociation", _module)
pulumi.runtime.registerResourceModule("azure", "network/natGatewayPublicIpPrefixAssociation", _module)
pulumi.runtime.registerResourceModule("azure", "network/networkConnectionMonitor", _module)
pulumi.runtime.registerResourceModule("azure", "network/networkInterface", _module)
pulumi.runtime.registerResourceModule("azure", "network/networkInterfaceApplicationGatewayBackendAddressPoolAssociation", _module)
pulumi.runtime.registerResourceModule("azure", "network/networkInterfaceApplicationSecurityGroupAssociation", _module)
pulumi.runtime.registerResourceModule("azure", "network/networkInterfaceBackendAddressPoolAssociation", _module)
pulumi.runtime.registerResourceModule("azure", "network/networkInterfaceNatRuleAssociation", _module)
pulumi.runtime.registerResourceModule("azure", "network/networkInterfaceSecurityGroupAssociation", _module)
pulumi.runtime.registerResourceModule("azure", "network/networkManager", _module)
pulumi.runtime.registerResourceModule("azure", "network/networkManagerAdminRule", _module)
pulumi.runtime.registerResourceModule("azure", "network/networkManagerAdminRuleCollection", _module)
pulumi.runtime.registerResourceModule("azure", "network/networkManagerConnectivityConfiguration", _module)
pulumi.runtime.registerResourceModule("azure", "network/networkManagerDeployment", _module)
pulumi.runtime.registerResourceModule("azure", "network/networkManagerManagementGroupConnection", _module)
pulumi.runtime.registerResourceModule("azure", "network/networkManagerNetworkGroup", _module)
pulumi.runtime.registerResourceModule("azure", "network/networkManagerScopeConnection", _module)
pulumi.runtime.registerResourceModule("azure", "network/networkManagerSecurityAdminConfiguration", _module)
pulumi.runtime.registerResourceModule("azure", "network/networkManagerStaticMember", _module)
pulumi.runtime.registerResourceModule("azure", "network/networkManagerSubscriptionConnection", _module)
pulumi.runtime.registerResourceModule("azure", "network/networkPacketCapture", _module)
pulumi.runtime.registerResourceModule("azure", "network/networkSecurityGroup", _module)
pulumi.runtime.registerResourceModule("azure", "network/networkSecurityRule", _module)
pulumi.runtime.registerResourceModule("azure", "network/networkWatcher", _module)
pulumi.runtime.registerResourceModule("azure", "network/networkWatcherFlowLog", _module)
pulumi.runtime.registerResourceModule("azure", "network/pointToPointVpnGateway", _module)
pulumi.runtime.registerResourceModule("azure", "network/profile", _module)
pulumi.runtime.registerResourceModule("azure", "network/publicIp", _module)
pulumi.runtime.registerResourceModule("azure", "network/publicIpPrefix", _module)
pulumi.runtime.registerResourceModule("azure", "network/route", _module)
pulumi.runtime.registerResourceModule("azure", "network/routeFilter", _module)
pulumi.runtime.registerResourceModule("azure", "network/routeMap", _module)
pulumi.runtime.registerResourceModule("azure", "network/routeServer", _module)
pulumi.runtime.registerResourceModule("azure", "network/routeServerBgpConnection", _module)
pulumi.runtime.registerResourceModule("azure", "network/routeTable", _module)
pulumi.runtime.registerResourceModule("azure", "network/routingIntent", _module)
pulumi.runtime.registerResourceModule("azure", "network/securityPartnerProvider", _module)
pulumi.runtime.registerResourceModule("azure", "network/subnet", _module)
pulumi.runtime.registerResourceModule("azure", "network/subnetNatGatewayAssociation", _module)
pulumi.runtime.registerResourceModule("azure", "network/subnetNetworkSecurityGroupAssociation", _module)
pulumi.runtime.registerResourceModule("azure", "network/subnetRouteTableAssociation", _module)
pulumi.runtime.registerResourceModule("azure", "network/subnetServiceEndpointStoragePolicy", _module)
pulumi.runtime.registerResourceModule("azure", "network/trafficManagerAzureEndpoint", _module)
pulumi.runtime.registerResourceModule("azure", "network/trafficManagerExternalEndpoint", _module)
pulumi.runtime.registerResourceModule("azure", "network/trafficManagerNestedEndpoint", _module)
pulumi.runtime.registerResourceModule("azure", "network/trafficManagerProfile", _module)
pulumi.runtime.registerResourceModule("azure", "network/virtualHub", _module)
pulumi.runtime.registerResourceModule("azure", "network/virtualHubConnection", _module)
pulumi.runtime.registerResourceModule("azure", "network/virtualHubIp", _module)
pulumi.runtime.registerResourceModule("azure", "network/virtualHubRouteTable", _module)
pulumi.runtime.registerResourceModule("azure", "network/virtualHubRouteTableRoute", _module)
pulumi.runtime.registerResourceModule("azure", "network/virtualNetwork", _module)
pulumi.runtime.registerResourceModule("azure", "network/virtualNetworkDnsServers", _module)
pulumi.runtime.registerResourceModule("azure", "network/virtualNetworkGateway", _module)
pulumi.runtime.registerResourceModule("azure", "network/virtualNetworkGatewayConnection", _module)
pulumi.runtime.registerResourceModule("azure", "network/virtualNetworkGatewayNatRule", _module)
pulumi.runtime.registerResourceModule("azure", "network/virtualNetworkPeering", _module)
pulumi.runtime.registerResourceModule("azure", "network/virtualWan", _module)
pulumi.runtime.registerResourceModule("azure", "network/vnpGatewayNatRule", _module)
pulumi.runtime.registerResourceModule("azure", "network/vpnGateway", _module)
pulumi.runtime.registerResourceModule("azure", "network/vpnGatewayConnection", _module)
pulumi.runtime.registerResourceModule("azure", "network/vpnServerConfiguration", _module)
pulumi.runtime.registerResourceModule("azure", "network/vpnServerConfigurationPolicyGroup", _module)
pulumi.runtime.registerResourceModule("azure", "network/vpnSite", _module)
