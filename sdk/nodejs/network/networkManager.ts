// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Network Managers.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const current = azure.core.getSubscription({});
 * const exampleNetworkManager = new azure.network.NetworkManager("exampleNetworkManager", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     scope: {
 *         subscriptionIds: [current.then(current => current.id)],
 *     },
 *     scopeAccesses: [
 *         "Connectivity",
 *         "SecurityAdmin",
 *     ],
 *     description: "example network manager",
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Network Managers can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:network/networkManager:NetworkManager example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Network/networkManagers/networkManager1
 * ```
 */
export class NetworkManager extends pulumi.CustomResource {
    /**
     * Get an existing NetworkManager resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkManagerState, opts?: pulumi.CustomResourceOptions): NetworkManager {
        return new NetworkManager(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:network/networkManager:NetworkManager';

    /**
     * Returns true if the given object is an instance of NetworkManager.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkManager {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkManager.__pulumiType;
    }

    /**
     * One or more `crossTenantScopes` blocks as defined below.
     */
    public /*out*/ readonly crossTenantScopes!: pulumi.Output<outputs.network.NetworkManagerCrossTenantScope[]>;
    /**
     * A description of the network manager.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies the Azure Region where the Network Managers should exist. Changing this forces a new resource to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Specifies the name which should be used for this Network Managers. Changing this forces a new Network Managers to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the name of the Resource Group where the Network Managers should exist. Changing this forces a new Network Managers to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * A `scope` block as defined below.
     */
    public readonly scope!: pulumi.Output<outputs.network.NetworkManagerScope>;
    /**
     * A list of configuration deployment type. Possible values are `Connectivity` and `SecurityAdmin`, corresponds to if Connectivity Configuration and Security Admin Configuration is allowed for the Network Manager.
     */
    public readonly scopeAccesses!: pulumi.Output<string[]>;
    /**
     * A mapping of tags which should be assigned to the Network Managers.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a NetworkManager resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkManagerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkManagerArgs | NetworkManagerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkManagerState | undefined;
            resourceInputs["crossTenantScopes"] = state ? state.crossTenantScopes : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["scopeAccesses"] = state ? state.scopeAccesses : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as NetworkManagerArgs | undefined;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            if ((!args || args.scopeAccesses === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopeAccesses'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["scopeAccesses"] = args ? args.scopeAccesses : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["crossTenantScopes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkManager.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkManager resources.
 */
export interface NetworkManagerState {
    /**
     * One or more `crossTenantScopes` blocks as defined below.
     */
    crossTenantScopes?: pulumi.Input<pulumi.Input<inputs.network.NetworkManagerCrossTenantScope>[]>;
    /**
     * A description of the network manager.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the Azure Region where the Network Managers should exist. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name which should be used for this Network Managers. Changing this forces a new Network Managers to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the name of the Resource Group where the Network Managers should exist. Changing this forces a new Network Managers to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A `scope` block as defined below.
     */
    scope?: pulumi.Input<inputs.network.NetworkManagerScope>;
    /**
     * A list of configuration deployment type. Possible values are `Connectivity` and `SecurityAdmin`, corresponds to if Connectivity Configuration and Security Admin Configuration is allowed for the Network Manager.
     */
    scopeAccesses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A mapping of tags which should be assigned to the Network Managers.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a NetworkManager resource.
 */
export interface NetworkManagerArgs {
    /**
     * A description of the network manager.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the Azure Region where the Network Managers should exist. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name which should be used for this Network Managers. Changing this forces a new Network Managers to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the name of the Resource Group where the Network Managers should exist. Changing this forces a new Network Managers to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A `scope` block as defined below.
     */
    scope: pulumi.Input<inputs.network.NetworkManagerScope>;
    /**
     * A list of configuration deployment type. Possible values are `Connectivity` and `SecurityAdmin`, corresponds to if Connectivity Configuration and Security Admin Configuration is allowed for the Network Manager.
     */
    scopeAccesses: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A mapping of tags which should be assigned to the Network Managers.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
