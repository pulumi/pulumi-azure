// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Network Manager Deployment.
 *
 * > **NOTE on Virtual Network Peering:** Using Network Manager Deployment to deploy Connectivity Configuration may modify or delete existing Virtual Network Peering. At this time you should not use Network Peering resource in conjunction with Network Manager Deployment. Doing so may cause a conflict of Peering configurations.
 *
 * ## Import
 *
 * Network Manager Deployment can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:network/networkManagerDeployment:NetworkManagerDeployment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Network/networkManagers/networkManager1/commit|eastus|Connectivity
 * ```
 */
export class NetworkManagerDeployment extends pulumi.CustomResource {
    /**
     * Get an existing NetworkManagerDeployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkManagerDeploymentState, opts?: pulumi.CustomResourceOptions): NetworkManagerDeployment {
        return new NetworkManagerDeployment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:network/networkManagerDeployment:NetworkManagerDeployment';

    /**
     * Returns true if the given object is an instance of NetworkManagerDeployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkManagerDeployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkManagerDeployment.__pulumiType;
    }

    /**
     * A list of Network Manager Configuration IDs which should be aligned with `scopeAccess`.
     */
    public readonly configurationIds!: pulumi.Output<string[]>;
    /**
     * Specifies the location which the configurations will be deployed to. Changing this forces a new Network Manager Deployment to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Specifies the ID of the Network Manager. Changing this forces a new Network Manager Deployment to be created.
     */
    public readonly networkManagerId!: pulumi.Output<string>;
    /**
     * Specifies the configuration deployment type. Possible values are `Connectivity` and `SecurityAdmin`. Changing this forces a new Network Manager Deployment to be created.
     */
    public readonly scopeAccess!: pulumi.Output<string>;
    /**
     * A mapping of key values pairs that can be used to keep the deployment up with the Network Manager configurations and rules.
     */
    public readonly triggers!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a NetworkManagerDeployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkManagerDeploymentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkManagerDeploymentArgs | NetworkManagerDeploymentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkManagerDeploymentState | undefined;
            resourceInputs["configurationIds"] = state ? state.configurationIds : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["networkManagerId"] = state ? state.networkManagerId : undefined;
            resourceInputs["scopeAccess"] = state ? state.scopeAccess : undefined;
            resourceInputs["triggers"] = state ? state.triggers : undefined;
        } else {
            const args = argsOrState as NetworkManagerDeploymentArgs | undefined;
            if ((!args || args.configurationIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configurationIds'");
            }
            if ((!args || args.networkManagerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkManagerId'");
            }
            if ((!args || args.scopeAccess === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopeAccess'");
            }
            resourceInputs["configurationIds"] = args ? args.configurationIds : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["networkManagerId"] = args ? args.networkManagerId : undefined;
            resourceInputs["scopeAccess"] = args ? args.scopeAccess : undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkManagerDeployment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkManagerDeployment resources.
 */
export interface NetworkManagerDeploymentState {
    /**
     * A list of Network Manager Configuration IDs which should be aligned with `scopeAccess`.
     */
    configurationIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the location which the configurations will be deployed to. Changing this forces a new Network Manager Deployment to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the ID of the Network Manager. Changing this forces a new Network Manager Deployment to be created.
     */
    networkManagerId?: pulumi.Input<string>;
    /**
     * Specifies the configuration deployment type. Possible values are `Connectivity` and `SecurityAdmin`. Changing this forces a new Network Manager Deployment to be created.
     */
    scopeAccess?: pulumi.Input<string>;
    /**
     * A mapping of key values pairs that can be used to keep the deployment up with the Network Manager configurations and rules.
     */
    triggers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a NetworkManagerDeployment resource.
 */
export interface NetworkManagerDeploymentArgs {
    /**
     * A list of Network Manager Configuration IDs which should be aligned with `scopeAccess`.
     */
    configurationIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the location which the configurations will be deployed to. Changing this forces a new Network Manager Deployment to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the ID of the Network Manager. Changing this forces a new Network Manager Deployment to be created.
     */
    networkManagerId: pulumi.Input<string>;
    /**
     * Specifies the configuration deployment type. Possible values are `Connectivity` and `SecurityAdmin`. Changing this forces a new Network Manager Deployment to be created.
     */
    scopeAccess: pulumi.Input<string>;
    /**
     * A mapping of key values pairs that can be used to keep the deployment up with the Network Manager configurations and rules.
     */
    triggers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
