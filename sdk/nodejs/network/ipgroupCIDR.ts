// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages IP Group CIDR records.
 *
 * > Warning Do not use this resource at the same time as the `cidrs` property of the
 * `azure.network.IPGroup` resource for the same IP Group. Doing so will cause a conflict and
 * CIDRS will be removed.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleIPGroup = new azure.network.IPGroup("exampleIPGroup", {
 *     location: azurerm_resource_group.test.location,
 *     resourceGroupName: azurerm_resource_group.test.name,
 * });
 * const exampleIPGroupCIDR = new azure.network.IPGroupCIDR("exampleIPGroupCIDR", {
 *     ipGroupId: exampleIPGroup.id,
 *     cidr: "10.10.10.0/24",
 * });
 * ```
 *
 * ## Import
 *
 * IP Group CIDRs can be imported using the `resource id` of the IP Group and the CIDR value (`/` characters have to be replaced by `_`), e.g.
 *
 * ```sh
 *  $ pulumi import azure:network/iPGroupCIDR:IPGroupCIDR example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Network/ipGroups/test-ipgroup/cidrs/10.1.0.0_24
 * ```
 */
export class IPGroupCIDR extends pulumi.CustomResource {
    /**
     * Get an existing IPGroupCIDR resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IPGroupCIDRState, opts?: pulumi.CustomResourceOptions): IPGroupCIDR {
        return new IPGroupCIDR(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:network/iPGroupCIDR:IPGroupCIDR';

    /**
     * Returns true if the given object is an instance of IPGroupCIDR.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IPGroupCIDR {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IPGroupCIDR.__pulumiType;
    }

    /**
     * The `CIDR` that should be added to the IP Group.
     * Changing this forces a new IP Group CIDR to be created.
     */
    public readonly cidr!: pulumi.Output<string>;
    /**
     * The ID of the destination IP Group.
     * Changing this forces a new IP Group CIDR to be created.
     */
    public readonly ipGroupId!: pulumi.Output<string>;

    /**
     * Create a IPGroupCIDR resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IPGroupCIDRArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IPGroupCIDRArgs | IPGroupCIDRState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IPGroupCIDRState | undefined;
            resourceInputs["cidr"] = state ? state.cidr : undefined;
            resourceInputs["ipGroupId"] = state ? state.ipGroupId : undefined;
        } else {
            const args = argsOrState as IPGroupCIDRArgs | undefined;
            if ((!args || args.cidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cidr'");
            }
            if ((!args || args.ipGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipGroupId'");
            }
            resourceInputs["cidr"] = args ? args.cidr : undefined;
            resourceInputs["ipGroupId"] = args ? args.ipGroupId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IPGroupCIDR.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IPGroupCIDR resources.
 */
export interface IPGroupCIDRState {
    /**
     * The `CIDR` that should be added to the IP Group.
     * Changing this forces a new IP Group CIDR to be created.
     */
    cidr?: pulumi.Input<string>;
    /**
     * The ID of the destination IP Group.
     * Changing this forces a new IP Group CIDR to be created.
     */
    ipGroupId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IPGroupCIDR resource.
 */
export interface IPGroupCIDRArgs {
    /**
     * The `CIDR` that should be added to the IP Group.
     * Changing this forces a new IP Group CIDR to be created.
     */
    cidr: pulumi.Input<string>;
    /**
     * The ID of the destination IP Group.
     * Changing this forces a new IP Group CIDR to be created.
     */
    ipGroupId: pulumi.Input<string>;
}
