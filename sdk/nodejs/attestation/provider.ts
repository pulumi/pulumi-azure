// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages an Attestation Provider.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as fs from "fs";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleProvider = new azure.attestation.Provider("exampleProvider", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     policySigningCertificateData: fs.readFileSync("./example/cert.pem", "utf8"),
 * });
 * ```
 *
 * ## Import
 *
 * Attestation Providers can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:attestation/provider:Provider example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Attestation/attestationProviders/provider1
 * ```
 */
export class Provider extends pulumi.CustomResource {
    /**
     * Get an existing Provider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProviderState, opts?: pulumi.CustomResourceOptions): Provider {
        return new Provider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:attestation/provider:Provider';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Provider.__pulumiType;
    }

    /**
     * The URI of the Attestation Service.
     */
    public /*out*/ readonly attestationUri!: pulumi.Output<string>;
    /**
     * The Azure Region where the Attestation Provider should exist. Changing this forces a new resource to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name which should be used for this Attestation Provider. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
     */
    public readonly openEnclavePolicyBase64!: pulumi.Output<string | undefined>;
    /**
     * @deprecated This field is no longer used and will be removed in v4.0 of the Azure Provider - use `open_enclave_policy_base64`, `sgx_enclave_policy_base64`, `tpm_policy_base64` and `sev_snp_policy_base64` instead.
     */
    public readonly policies!: pulumi.Output<outputs.attestation.ProviderPolicy[] | undefined>;
    /**
     * A valid X.509 certificate (Section 4 of [RFC4648](https://tools.ietf.org/html/rfc4648)). Changing this forces a new resource to be created.
     *
     * > **NOTE:** If the `policySigningCertificateData` argument contains more than one valid X.509 certificate only the first certificate will be used.
     */
    public readonly policySigningCertificateData!: pulumi.Output<string | undefined>;
    /**
     * The name of the Resource Group where the attestation provider should exist. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
     *
     * > [More information on the JWT Policies can be found in this article on `learn.microsoft.com`](https://learn.microsoft.com/azure/attestation/author-sign-policy).
     */
    public readonly sevSnpPolicyBase64!: pulumi.Output<string | undefined>;
    /**
     * Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
     */
    public readonly sgxEnclavePolicyBase64!: pulumi.Output<string | undefined>;
    /**
     * A mapping of tags which should be assigned to the Attestation Provider.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
     */
    public readonly tpmPolicyBase64!: pulumi.Output<string | undefined>;
    /**
     * Trust model used for the Attestation Service.
     */
    public /*out*/ readonly trustModel!: pulumi.Output<string>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProviderArgs | ProviderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProviderState | undefined;
            resourceInputs["attestationUri"] = state ? state.attestationUri : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["openEnclavePolicyBase64"] = state ? state.openEnclavePolicyBase64 : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["policySigningCertificateData"] = state ? state.policySigningCertificateData : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["sevSnpPolicyBase64"] = state ? state.sevSnpPolicyBase64 : undefined;
            resourceInputs["sgxEnclavePolicyBase64"] = state ? state.sgxEnclavePolicyBase64 : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tpmPolicyBase64"] = state ? state.tpmPolicyBase64 : undefined;
            resourceInputs["trustModel"] = state ? state.trustModel : undefined;
        } else {
            const args = argsOrState as ProviderArgs | undefined;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["openEnclavePolicyBase64"] = args ? args.openEnclavePolicyBase64 : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["policySigningCertificateData"] = args ? args.policySigningCertificateData : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["sevSnpPolicyBase64"] = args ? args.sevSnpPolicyBase64 : undefined;
            resourceInputs["sgxEnclavePolicyBase64"] = args ? args.sgxEnclavePolicyBase64 : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tpmPolicyBase64"] = args ? args.tpmPolicyBase64 : undefined;
            resourceInputs["attestationUri"] = undefined /*out*/;
            resourceInputs["trustModel"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Provider.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Provider resources.
 */
export interface ProviderState {
    /**
     * The URI of the Attestation Service.
     */
    attestationUri?: pulumi.Input<string>;
    /**
     * The Azure Region where the Attestation Provider should exist. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The name which should be used for this Attestation Provider. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
     */
    openEnclavePolicyBase64?: pulumi.Input<string>;
    /**
     * @deprecated This field is no longer used and will be removed in v4.0 of the Azure Provider - use `open_enclave_policy_base64`, `sgx_enclave_policy_base64`, `tpm_policy_base64` and `sev_snp_policy_base64` instead.
     */
    policies?: pulumi.Input<pulumi.Input<inputs.attestation.ProviderPolicy>[]>;
    /**
     * A valid X.509 certificate (Section 4 of [RFC4648](https://tools.ietf.org/html/rfc4648)). Changing this forces a new resource to be created.
     *
     * > **NOTE:** If the `policySigningCertificateData` argument contains more than one valid X.509 certificate only the first certificate will be used.
     */
    policySigningCertificateData?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the attestation provider should exist. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
     *
     * > [More information on the JWT Policies can be found in this article on `learn.microsoft.com`](https://learn.microsoft.com/azure/attestation/author-sign-policy).
     */
    sevSnpPolicyBase64?: pulumi.Input<string>;
    /**
     * Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
     */
    sgxEnclavePolicyBase64?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Attestation Provider.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
     */
    tpmPolicyBase64?: pulumi.Input<string>;
    /**
     * Trust model used for the Attestation Service.
     */
    trustModel?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * The Azure Region where the Attestation Provider should exist. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The name which should be used for this Attestation Provider. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
     */
    openEnclavePolicyBase64?: pulumi.Input<string>;
    /**
     * @deprecated This field is no longer used and will be removed in v4.0 of the Azure Provider - use `open_enclave_policy_base64`, `sgx_enclave_policy_base64`, `tpm_policy_base64` and `sev_snp_policy_base64` instead.
     */
    policies?: pulumi.Input<pulumi.Input<inputs.attestation.ProviderPolicy>[]>;
    /**
     * A valid X.509 certificate (Section 4 of [RFC4648](https://tools.ietf.org/html/rfc4648)). Changing this forces a new resource to be created.
     *
     * > **NOTE:** If the `policySigningCertificateData` argument contains more than one valid X.509 certificate only the first certificate will be used.
     */
    policySigningCertificateData?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the attestation provider should exist. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
     *
     * > [More information on the JWT Policies can be found in this article on `learn.microsoft.com`](https://learn.microsoft.com/azure/attestation/author-sign-policy).
     */
    sevSnpPolicyBase64?: pulumi.Input<string>;
    /**
     * Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
     */
    sgxEnclavePolicyBase64?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Attestation Provider.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
     */
    tpmPolicyBase64?: pulumi.Input<string>;
}
