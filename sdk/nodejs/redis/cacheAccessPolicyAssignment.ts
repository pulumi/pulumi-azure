// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Redis Cache Access Policy Assignment
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const test = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "East US",
 * });
 * const exampleCache = new azure.redis.Cache("example", {
 *     name: "example",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     capacity: 1,
 *     family: "P",
 *     skuName: "Premium",
 *     enableNonSslPort: false,
 *     redisConfiguration: {
 *         maxmemoryReserved: 2,
 *         maxmemoryDelta: 2,
 *         maxmemoryPolicy: "allkeys-lru",
 *     },
 * });
 * const exampleCacheAccessPolicyAssignment = new azure.redis.CacheAccessPolicyAssignment("example", {
 *     name: "example",
 *     redisCacheId: exampleCache.id,
 *     accessPolicyName: "Data Contributor",
 *     objectId: test.then(test => test.objectId),
 *     objectIdAlias: "ServicePrincipal",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Redis Cache Policy Assignment can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:redis/cacheAccessPolicyAssignment:CacheAccessPolicyAssignment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Cache/redis/cache1/accessPolicyAssignments/assignment1
 * ```
 */
export class CacheAccessPolicyAssignment extends pulumi.CustomResource {
    /**
     * Get an existing CacheAccessPolicyAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CacheAccessPolicyAssignmentState, opts?: pulumi.CustomResourceOptions): CacheAccessPolicyAssignment {
        return new CacheAccessPolicyAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:redis/cacheAccessPolicyAssignment:CacheAccessPolicyAssignment';

    /**
     * Returns true if the given object is an instance of CacheAccessPolicyAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CacheAccessPolicyAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CacheAccessPolicyAssignment.__pulumiType;
    }

    /**
     * The name of the Access Policy to be assigned. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    public readonly accessPolicyName!: pulumi.Output<string>;
    /**
     * The name of the Redis Cache Access Policy Assignment. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The principal ID to be assigned the Access Policy. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    public readonly objectId!: pulumi.Output<string>;
    /**
     * The alias of the principal ID. Possible values are `ServicePrincipal` and `UserMSI`. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    public readonly objectIdAlias!: pulumi.Output<string>;
    /**
     * The ID of the Redis Cache. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    public readonly redisCacheId!: pulumi.Output<string>;

    /**
     * Create a CacheAccessPolicyAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CacheAccessPolicyAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CacheAccessPolicyAssignmentArgs | CacheAccessPolicyAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CacheAccessPolicyAssignmentState | undefined;
            resourceInputs["accessPolicyName"] = state ? state.accessPolicyName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objectId"] = state ? state.objectId : undefined;
            resourceInputs["objectIdAlias"] = state ? state.objectIdAlias : undefined;
            resourceInputs["redisCacheId"] = state ? state.redisCacheId : undefined;
        } else {
            const args = argsOrState as CacheAccessPolicyAssignmentArgs | undefined;
            if ((!args || args.accessPolicyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessPolicyName'");
            }
            if ((!args || args.objectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'objectId'");
            }
            if ((!args || args.objectIdAlias === undefined) && !opts.urn) {
                throw new Error("Missing required property 'objectIdAlias'");
            }
            if ((!args || args.redisCacheId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'redisCacheId'");
            }
            resourceInputs["accessPolicyName"] = args ? args.accessPolicyName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["objectId"] = args ? args.objectId : undefined;
            resourceInputs["objectIdAlias"] = args ? args.objectIdAlias : undefined;
            resourceInputs["redisCacheId"] = args ? args.redisCacheId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CacheAccessPolicyAssignment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CacheAccessPolicyAssignment resources.
 */
export interface CacheAccessPolicyAssignmentState {
    /**
     * The name of the Access Policy to be assigned. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    accessPolicyName?: pulumi.Input<string>;
    /**
     * The name of the Redis Cache Access Policy Assignment. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The principal ID to be assigned the Access Policy. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    objectId?: pulumi.Input<string>;
    /**
     * The alias of the principal ID. Possible values are `ServicePrincipal` and `UserMSI`. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    objectIdAlias?: pulumi.Input<string>;
    /**
     * The ID of the Redis Cache. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    redisCacheId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CacheAccessPolicyAssignment resource.
 */
export interface CacheAccessPolicyAssignmentArgs {
    /**
     * The name of the Access Policy to be assigned. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    accessPolicyName: pulumi.Input<string>;
    /**
     * The name of the Redis Cache Access Policy Assignment. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The principal ID to be assigned the Access Policy. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    objectId: pulumi.Input<string>;
    /**
     * The alias of the principal ID. Possible values are `ServicePrincipal` and `UserMSI`. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    objectIdAlias: pulumi.Input<string>;
    /**
     * The ID of the Redis Cache. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    redisCacheId: pulumi.Input<string>;
}
