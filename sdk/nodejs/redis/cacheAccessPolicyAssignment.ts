// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Redis Cache Access Policy Assignment
 *
 * ## Example Usage
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Cache` - 2024-11-01
 *
 * ## Import
 *
 * Redis Cache Policy Assignment can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:redis/cacheAccessPolicyAssignment:CacheAccessPolicyAssignment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Cache/redis/cache1/accessPolicyAssignments/assignment1
 * ```
 */
export class CacheAccessPolicyAssignment extends pulumi.CustomResource {
    /**
     * Get an existing CacheAccessPolicyAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CacheAccessPolicyAssignmentState, opts?: pulumi.CustomResourceOptions): CacheAccessPolicyAssignment {
        return new CacheAccessPolicyAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:redis/cacheAccessPolicyAssignment:CacheAccessPolicyAssignment';

    /**
     * Returns true if the given object is an instance of CacheAccessPolicyAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CacheAccessPolicyAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CacheAccessPolicyAssignment.__pulumiType;
    }

    /**
     * The name of the Access Policy to be assigned. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    declare public readonly accessPolicyName: pulumi.Output<string>;
    /**
     * The name of the Redis Cache Access Policy Assignment. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The principal ID to be assigned the Access Policy. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    declare public readonly objectId: pulumi.Output<string>;
    /**
     * The alias of the principal ID. User-friendly name for object ID. Also represents username for token based authentication. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    declare public readonly objectIdAlias: pulumi.Output<string>;
    /**
     * The ID of the Redis Cache. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    declare public readonly redisCacheId: pulumi.Output<string>;

    /**
     * Create a CacheAccessPolicyAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CacheAccessPolicyAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CacheAccessPolicyAssignmentArgs | CacheAccessPolicyAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CacheAccessPolicyAssignmentState | undefined;
            resourceInputs["accessPolicyName"] = state?.accessPolicyName;
            resourceInputs["name"] = state?.name;
            resourceInputs["objectId"] = state?.objectId;
            resourceInputs["objectIdAlias"] = state?.objectIdAlias;
            resourceInputs["redisCacheId"] = state?.redisCacheId;
        } else {
            const args = argsOrState as CacheAccessPolicyAssignmentArgs | undefined;
            if (args?.accessPolicyName === undefined && !opts.urn) {
                throw new Error("Missing required property 'accessPolicyName'");
            }
            if (args?.objectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'objectId'");
            }
            if (args?.objectIdAlias === undefined && !opts.urn) {
                throw new Error("Missing required property 'objectIdAlias'");
            }
            if (args?.redisCacheId === undefined && !opts.urn) {
                throw new Error("Missing required property 'redisCacheId'");
            }
            resourceInputs["accessPolicyName"] = args?.accessPolicyName;
            resourceInputs["name"] = args?.name;
            resourceInputs["objectId"] = args?.objectId;
            resourceInputs["objectIdAlias"] = args?.objectIdAlias;
            resourceInputs["redisCacheId"] = args?.redisCacheId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CacheAccessPolicyAssignment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CacheAccessPolicyAssignment resources.
 */
export interface CacheAccessPolicyAssignmentState {
    /**
     * The name of the Access Policy to be assigned. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    accessPolicyName?: pulumi.Input<string>;
    /**
     * The name of the Redis Cache Access Policy Assignment. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The principal ID to be assigned the Access Policy. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    objectId?: pulumi.Input<string>;
    /**
     * The alias of the principal ID. User-friendly name for object ID. Also represents username for token based authentication. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    objectIdAlias?: pulumi.Input<string>;
    /**
     * The ID of the Redis Cache. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    redisCacheId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CacheAccessPolicyAssignment resource.
 */
export interface CacheAccessPolicyAssignmentArgs {
    /**
     * The name of the Access Policy to be assigned. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    accessPolicyName: pulumi.Input<string>;
    /**
     * The name of the Redis Cache Access Policy Assignment. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The principal ID to be assigned the Access Policy. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    objectId: pulumi.Input<string>;
    /**
     * The alias of the principal ID. User-friendly name for object ID. Also represents username for token based authentication. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    objectIdAlias: pulumi.Input<string>;
    /**
     * The ID of the Redis Cache. Changing this forces a new Redis Cache Access Policy Assignment to be created.
     */
    redisCacheId: pulumi.Input<string>;
}
