// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CacheArgs, CacheState } from "./cache";
export type Cache = import("./cache").Cache;
export const Cache: typeof import("./cache").Cache = null as any;
utilities.lazyLoad(exports, ["Cache"], () => require("./cache"));

export { EnterpriseClusterArgs, EnterpriseClusterState } from "./enterpriseCluster";
export type EnterpriseCluster = import("./enterpriseCluster").EnterpriseCluster;
export const EnterpriseCluster: typeof import("./enterpriseCluster").EnterpriseCluster = null as any;
utilities.lazyLoad(exports, ["EnterpriseCluster"], () => require("./enterpriseCluster"));

export { EnterpriseDatabaseArgs, EnterpriseDatabaseState } from "./enterpriseDatabase";
export type EnterpriseDatabase = import("./enterpriseDatabase").EnterpriseDatabase;
export const EnterpriseDatabase: typeof import("./enterpriseDatabase").EnterpriseDatabase = null as any;
utilities.lazyLoad(exports, ["EnterpriseDatabase"], () => require("./enterpriseDatabase"));

export { FirewallRuleArgs, FirewallRuleState } from "./firewallRule";
export type FirewallRule = import("./firewallRule").FirewallRule;
export const FirewallRule: typeof import("./firewallRule").FirewallRule = null as any;
utilities.lazyLoad(exports, ["FirewallRule"], () => require("./firewallRule"));

export { GetCacheArgs, GetCacheResult, GetCacheOutputArgs } from "./getCache";
export const getCache: typeof import("./getCache").getCache = null as any;
export const getCacheOutput: typeof import("./getCache").getCacheOutput = null as any;
utilities.lazyLoad(exports, ["getCache","getCacheOutput"], () => require("./getCache"));

export { GetEnterpriseDatabaseArgs, GetEnterpriseDatabaseResult, GetEnterpriseDatabaseOutputArgs } from "./getEnterpriseDatabase";
export const getEnterpriseDatabase: typeof import("./getEnterpriseDatabase").getEnterpriseDatabase = null as any;
export const getEnterpriseDatabaseOutput: typeof import("./getEnterpriseDatabase").getEnterpriseDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getEnterpriseDatabase","getEnterpriseDatabaseOutput"], () => require("./getEnterpriseDatabase"));

export { LinkedServerArgs, LinkedServerState } from "./linkedServer";
export type LinkedServer = import("./linkedServer").LinkedServer;
export const LinkedServer: typeof import("./linkedServer").LinkedServer = null as any;
utilities.lazyLoad(exports, ["LinkedServer"], () => require("./linkedServer"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:redis/cache:Cache":
                return new Cache(name, <any>undefined, { urn })
            case "azure:redis/enterpriseCluster:EnterpriseCluster":
                return new EnterpriseCluster(name, <any>undefined, { urn })
            case "azure:redis/enterpriseDatabase:EnterpriseDatabase":
                return new EnterpriseDatabase(name, <any>undefined, { urn })
            case "azure:redis/firewallRule:FirewallRule":
                return new FirewallRule(name, <any>undefined, { urn })
            case "azure:redis/linkedServer:LinkedServer":
                return new LinkedServer(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "redis/cache", _module)
pulumi.runtime.registerResourceModule("azure", "redis/enterpriseCluster", _module)
pulumi.runtime.registerResourceModule("azure", "redis/enterpriseDatabase", _module)
pulumi.runtime.registerResourceModule("azure", "redis/firewallRule", _module)
pulumi.runtime.registerResourceModule("azure", "redis/linkedServer", _module)
