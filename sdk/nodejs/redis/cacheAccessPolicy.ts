// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Redis Cache Access Policy
 *
 * ## Example Usage
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Cache` - 2024-11-01
 *
 * ## Import
 *
 * Redis Cache Access Policy can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:redis/cacheAccessPolicy:CacheAccessPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Cache/redis/cache1/accessPolicies/policy1
 * ```
 */
export class CacheAccessPolicy extends pulumi.CustomResource {
    /**
     * Get an existing CacheAccessPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CacheAccessPolicyState, opts?: pulumi.CustomResourceOptions): CacheAccessPolicy {
        return new CacheAccessPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:redis/cacheAccessPolicy:CacheAccessPolicy';

    /**
     * Returns true if the given object is an instance of CacheAccessPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CacheAccessPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CacheAccessPolicy.__pulumiType;
    }

    /**
     * The name of the Redis Cache Access Policy. Changing this forces a new Redis Cache Access Policy to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Permissions that are going to be assigned to this Redis Cache Access Policy.
     */
    declare public readonly permissions: pulumi.Output<string>;
    /**
     * The ID of the Redis Cache. Changing this forces a new Redis Cache Access Policy to be created.
     */
    declare public readonly redisCacheId: pulumi.Output<string>;

    /**
     * Create a CacheAccessPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CacheAccessPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CacheAccessPolicyArgs | CacheAccessPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CacheAccessPolicyState | undefined;
            resourceInputs["name"] = state?.name;
            resourceInputs["permissions"] = state?.permissions;
            resourceInputs["redisCacheId"] = state?.redisCacheId;
        } else {
            const args = argsOrState as CacheAccessPolicyArgs | undefined;
            if (args?.permissions === undefined && !opts.urn) {
                throw new Error("Missing required property 'permissions'");
            }
            if (args?.redisCacheId === undefined && !opts.urn) {
                throw new Error("Missing required property 'redisCacheId'");
            }
            resourceInputs["name"] = args?.name;
            resourceInputs["permissions"] = args?.permissions;
            resourceInputs["redisCacheId"] = args?.redisCacheId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CacheAccessPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CacheAccessPolicy resources.
 */
export interface CacheAccessPolicyState {
    /**
     * The name of the Redis Cache Access Policy. Changing this forces a new Redis Cache Access Policy to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Permissions that are going to be assigned to this Redis Cache Access Policy.
     */
    permissions?: pulumi.Input<string>;
    /**
     * The ID of the Redis Cache. Changing this forces a new Redis Cache Access Policy to be created.
     */
    redisCacheId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CacheAccessPolicy resource.
 */
export interface CacheAccessPolicyArgs {
    /**
     * The name of the Redis Cache Access Policy. Changing this forces a new Redis Cache Access Policy to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Permissions that are going to be assigned to this Redis Cache Access Policy.
     */
    permissions: pulumi.Input<string>;
    /**
     * The ID of the Redis Cache. Changing this forces a new Redis Cache Access Policy to be created.
     */
    redisCacheId: pulumi.Input<string>;
}
