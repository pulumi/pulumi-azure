// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Redis Linked Server (ie Geo Location)
 *
 * ## Import
 *
 * Redis can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:redis/linkedServer:LinkedServer example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Cache/redis/cache1/linkedServers/cache2
 * ```
 */
export class LinkedServer extends pulumi.CustomResource {
    /**
     * Get an existing LinkedServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LinkedServerState, opts?: pulumi.CustomResourceOptions): LinkedServer {
        return new LinkedServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:redis/linkedServer:LinkedServer';

    /**
     * Returns true if the given object is an instance of LinkedServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LinkedServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LinkedServer.__pulumiType;
    }

    /**
     * The geo-replicated primary hostname for this linked server.
     */
    declare public /*out*/ readonly geoReplicatedPrimaryHostName: pulumi.Output<string>;
    /**
     * The ID of the linked Redis cache. Changing this forces a new Redis to be created.
     */
    declare public readonly linkedRedisCacheId: pulumi.Output<string>;
    /**
     * The location of the linked Redis cache. Changing this forces a new Redis to be created.
     */
    declare public readonly linkedRedisCacheLocation: pulumi.Output<string>;
    /**
     * The name of the linked server.
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The name of the Resource Group where the Redis caches exists. Changing this forces a new Redis to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * The role of the linked Redis cache (eg "Secondary"). Changing this forces a new Redis to be created. Possible values are `Primary` and `Secondary`.
     */
    declare public readonly serverRole: pulumi.Output<string>;
    /**
     * The name of Redis cache to link with. Changing this forces a new Redis to be created. (eg The primary role)
     */
    declare public readonly targetRedisCacheName: pulumi.Output<string>;

    /**
     * Create a LinkedServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LinkedServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LinkedServerArgs | LinkedServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LinkedServerState | undefined;
            resourceInputs["geoReplicatedPrimaryHostName"] = state?.geoReplicatedPrimaryHostName;
            resourceInputs["linkedRedisCacheId"] = state?.linkedRedisCacheId;
            resourceInputs["linkedRedisCacheLocation"] = state?.linkedRedisCacheLocation;
            resourceInputs["name"] = state?.name;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["serverRole"] = state?.serverRole;
            resourceInputs["targetRedisCacheName"] = state?.targetRedisCacheName;
        } else {
            const args = argsOrState as LinkedServerArgs | undefined;
            if (args?.linkedRedisCacheId === undefined && !opts.urn) {
                throw new Error("Missing required property 'linkedRedisCacheId'");
            }
            if (args?.linkedRedisCacheLocation === undefined && !opts.urn) {
                throw new Error("Missing required property 'linkedRedisCacheLocation'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.serverRole === undefined && !opts.urn) {
                throw new Error("Missing required property 'serverRole'");
            }
            if (args?.targetRedisCacheName === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetRedisCacheName'");
            }
            resourceInputs["linkedRedisCacheId"] = args?.linkedRedisCacheId;
            resourceInputs["linkedRedisCacheLocation"] = args?.linkedRedisCacheLocation;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["serverRole"] = args?.serverRole;
            resourceInputs["targetRedisCacheName"] = args?.targetRedisCacheName;
            resourceInputs["geoReplicatedPrimaryHostName"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LinkedServer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LinkedServer resources.
 */
export interface LinkedServerState {
    /**
     * The geo-replicated primary hostname for this linked server.
     */
    geoReplicatedPrimaryHostName?: pulumi.Input<string>;
    /**
     * The ID of the linked Redis cache. Changing this forces a new Redis to be created.
     */
    linkedRedisCacheId?: pulumi.Input<string>;
    /**
     * The location of the linked Redis cache. Changing this forces a new Redis to be created.
     */
    linkedRedisCacheLocation?: pulumi.Input<string>;
    /**
     * The name of the linked server.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Redis caches exists. Changing this forces a new Redis to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The role of the linked Redis cache (eg "Secondary"). Changing this forces a new Redis to be created. Possible values are `Primary` and `Secondary`.
     */
    serverRole?: pulumi.Input<string>;
    /**
     * The name of Redis cache to link with. Changing this forces a new Redis to be created. (eg The primary role)
     */
    targetRedisCacheName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LinkedServer resource.
 */
export interface LinkedServerArgs {
    /**
     * The ID of the linked Redis cache. Changing this forces a new Redis to be created.
     */
    linkedRedisCacheId: pulumi.Input<string>;
    /**
     * The location of the linked Redis cache. Changing this forces a new Redis to be created.
     */
    linkedRedisCacheLocation: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Redis caches exists. Changing this forces a new Redis to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The role of the linked Redis cache (eg "Secondary"). Changing this forces a new Redis to be created. Possible values are `Primary` and `Secondary`.
     */
    serverRole: pulumi.Input<string>;
    /**
     * The name of Redis cache to link with. Changing this forces a new Redis to be created. (eg The primary role)
     */
    targetRedisCacheName: pulumi.Input<string>;
}
