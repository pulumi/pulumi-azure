// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Redis Cache.
 *
 * > **Note:** Redis version 4 is being retired and no longer supports creating new instances. Version 4 will be removed in a future release. [Redis Version 4 Retirement](https://learn.microsoft.com/azure/azure-cache-for-redis/cache-retired-features#important-upgrade-timelines)
 *
 * ## Example Usage
 *
 * This example provisions a Standard Redis Cache.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * // NOTE: the Name used for Redis needs to be globally unique
 * const exampleCache = new azure.redis.Cache("example", {
 *     name: "example-cache",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     capacity: 2,
 *     family: "C",
 *     skuName: "Standard",
 *     nonSslPortEnabled: false,
 *     minimumTlsVersion: "1.2",
 *     redisConfiguration: {},
 * });
 * ```
 *
 * ## Relevant Links
 *
 * * [Azure Cache for Redis planning](https://docs.microsoft.com/azure/azure-cache-for-redis/cache-planning-faq)
 * * [Redis: Available Configuration Settings](https://redis.io/topics/config)
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Cache` - 2024-11-01
 *
 * ## Import
 *
 * Redis Cache's can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:redis/cache:Cache cache1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Cache/redis/cache1
 * ```
 */
export class Cache extends pulumi.CustomResource {
    /**
     * Get an existing Cache resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CacheState, opts?: pulumi.CustomResourceOptions): Cache {
        return new Cache(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:redis/cache:Cache';

    /**
     * Returns true if the given object is an instance of Cache.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cache {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cache.__pulumiType;
    }

    /**
     * Whether access key authentication is enabled? Defaults to `true`. `activeDirectoryAuthenticationEnabled` must be set to `true` to disable access key authentication.
     */
    declare public readonly accessKeysAuthenticationEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The size of the Redis cache to deploy. Valid values for a SKU `family` of C (Basic/Standard) are `0, 1, 2, 3, 4, 5, 6`, and for P (Premium) `family` are `1, 2, 3, 4, 5`.
     */
    declare public readonly capacity: pulumi.Output<number>;
    /**
     * The SKU family/pricing group to use. Valid values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)
     */
    declare public readonly family: pulumi.Output<string>;
    /**
     * The Hostname of the Redis Instance
     */
    declare public /*out*/ readonly hostname: pulumi.Output<string>;
    /**
     * An `identity` block as defined below.
     */
    declare public readonly identity: pulumi.Output<outputs.redis.CacheIdentity | undefined>;
    /**
     * The location of the resource group. Changing this forces a new resource to be created.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * The minimum TLS version. Possible values are `1.0`, `1.1` and `1.2`. Defaults to `1.0`.
     *
     * > **NOTE:** Azure Services will require TLS 1.2+ by August 2025, please see this [announcement](https://azure.microsoft.com/en-us/updates/v2/update-retirement-tls1-0-tls1-1-versions-azure-services/) for more.
     */
    declare public readonly minimumTlsVersion: pulumi.Output<string | undefined>;
    /**
     * The name of the Redis instance. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Enable the non-SSL port (6379) - disabled by default.
     */
    declare public readonly nonSslPortEnabled: pulumi.Output<boolean | undefined>;
    /**
     * A list of `patchSchedule` blocks as defined below.
     */
    declare public readonly patchSchedules: pulumi.Output<outputs.redis.CachePatchSchedule[] | undefined>;
    /**
     * The non-SSL Port of the Redis Instance
     */
    declare public /*out*/ readonly port: pulumi.Output<number>;
    /**
     * The Primary Access Key for the Redis Instance
     */
    declare public /*out*/ readonly primaryAccessKey: pulumi.Output<string>;
    /**
     * The primary connection string of the Redis Instance.
     */
    declare public /*out*/ readonly primaryConnectionString: pulumi.Output<string>;
    /**
     * The Static IP Address to assign to the Redis Cache when hosted inside the Virtual Network. This argument implies the use of `subnetId`. Changing this forces a new resource to be created.
     */
    declare public readonly privateStaticIpAddress: pulumi.Output<string>;
    /**
     * Whether or not public network access is allowed for this Redis Cache. `true` means this resource could be accessed by both public and private endpoint. `false` means only private endpoint access is allowed. Defaults to `true`.
     */
    declare public readonly publicNetworkAccessEnabled: pulumi.Output<boolean | undefined>;
    /**
     * A `redisConfiguration` block as defined below - with some limitations by SKU - defaults/details are shown below.
     */
    declare public readonly redisConfiguration: pulumi.Output<outputs.redis.CacheRedisConfiguration>;
    /**
     * Redis version. Only major version needed. Possible values are `4` and `6`. Defaults to `6`.
     */
    declare public readonly redisVersion: pulumi.Output<string | undefined>;
    /**
     * Amount of replicas to create per master for this Redis Cache.
     *
     * > **Note:** Configuring the number of replicas per master is only available when using the Premium SKU and cannot be used in conjunction with shards.
     */
    declare public readonly replicasPerMaster: pulumi.Output<number>;
    /**
     * Amount of replicas to create per primary for this Redis Cache. If both `replicasPerPrimary` and `replicasPerMaster` are set, they need to be equal.
     */
    declare public readonly replicasPerPrimary: pulumi.Output<number>;
    /**
     * The name of the resource group in which to create the Redis instance. Changing this forces a new resource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * The Secondary Access Key for the Redis Instance
     */
    declare public /*out*/ readonly secondaryAccessKey: pulumi.Output<string>;
    /**
     * The secondary connection string of the Redis Instance.
     */
    declare public /*out*/ readonly secondaryConnectionString: pulumi.Output<string>;
    /**
     * *Only available when using the Premium SKU* The number of Shards to create on the Redis Cluster.
     */
    declare public readonly shardCount: pulumi.Output<number | undefined>;
    /**
     * The SKU of Redis to use. Possible values are `Basic`, `Standard` and `Premium`.
     *
     * > **Note** Downgrading the SKU will force a new resource to be created.
     */
    declare public readonly skuName: pulumi.Output<string>;
    /**
     * The SSL Port of the Redis Instance
     */
    declare public /*out*/ readonly sslPort: pulumi.Output<number>;
    /**
     * *Only available when using the Premium SKU* The ID of the Subnet within which the Redis Cache should be deployed. This Subnet must only contain Azure Cache for Redis instances without any other type of resources. Changing this forces a new resource to be created.
     */
    declare public readonly subnetId: pulumi.Output<string | undefined>;
    /**
     * A mapping of tags to assign to the resource.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A mapping of tenant settings to assign to the resource.
     */
    declare public readonly tenantSettings: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies a list of Availability Zones in which this Redis Cache should be located. Changing this forces a new Redis Cache to be created.
     *
     * > **Please Note:** Availability Zones are [in Preview and only supported in several regions at this time](https://docs.microsoft.com/azure/availability-zones/az-overview) - as such you must be opted into the Preview to use this functionality. You can [opt into the Availability Zones Preview in the Azure Portal](https://aka.ms/azenroll).
     */
    declare public readonly zones: pulumi.Output<string[] | undefined>;

    /**
     * Create a Cache resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CacheArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CacheArgs | CacheState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CacheState | undefined;
            resourceInputs["accessKeysAuthenticationEnabled"] = state?.accessKeysAuthenticationEnabled;
            resourceInputs["capacity"] = state?.capacity;
            resourceInputs["family"] = state?.family;
            resourceInputs["hostname"] = state?.hostname;
            resourceInputs["identity"] = state?.identity;
            resourceInputs["location"] = state?.location;
            resourceInputs["minimumTlsVersion"] = state?.minimumTlsVersion;
            resourceInputs["name"] = state?.name;
            resourceInputs["nonSslPortEnabled"] = state?.nonSslPortEnabled;
            resourceInputs["patchSchedules"] = state?.patchSchedules;
            resourceInputs["port"] = state?.port;
            resourceInputs["primaryAccessKey"] = state?.primaryAccessKey;
            resourceInputs["primaryConnectionString"] = state?.primaryConnectionString;
            resourceInputs["privateStaticIpAddress"] = state?.privateStaticIpAddress;
            resourceInputs["publicNetworkAccessEnabled"] = state?.publicNetworkAccessEnabled;
            resourceInputs["redisConfiguration"] = state?.redisConfiguration;
            resourceInputs["redisVersion"] = state?.redisVersion;
            resourceInputs["replicasPerMaster"] = state?.replicasPerMaster;
            resourceInputs["replicasPerPrimary"] = state?.replicasPerPrimary;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["secondaryAccessKey"] = state?.secondaryAccessKey;
            resourceInputs["secondaryConnectionString"] = state?.secondaryConnectionString;
            resourceInputs["shardCount"] = state?.shardCount;
            resourceInputs["skuName"] = state?.skuName;
            resourceInputs["sslPort"] = state?.sslPort;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tenantSettings"] = state?.tenantSettings;
            resourceInputs["zones"] = state?.zones;
        } else {
            const args = argsOrState as CacheArgs | undefined;
            if (args?.capacity === undefined && !opts.urn) {
                throw new Error("Missing required property 'capacity'");
            }
            if (args?.family === undefined && !opts.urn) {
                throw new Error("Missing required property 'family'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.skuName === undefined && !opts.urn) {
                throw new Error("Missing required property 'skuName'");
            }
            resourceInputs["accessKeysAuthenticationEnabled"] = args?.accessKeysAuthenticationEnabled;
            resourceInputs["capacity"] = args?.capacity;
            resourceInputs["family"] = args?.family;
            resourceInputs["identity"] = args?.identity;
            resourceInputs["location"] = args?.location;
            resourceInputs["minimumTlsVersion"] = args?.minimumTlsVersion;
            resourceInputs["name"] = args?.name;
            resourceInputs["nonSslPortEnabled"] = args?.nonSslPortEnabled;
            resourceInputs["patchSchedules"] = args?.patchSchedules;
            resourceInputs["privateStaticIpAddress"] = args?.privateStaticIpAddress;
            resourceInputs["publicNetworkAccessEnabled"] = args?.publicNetworkAccessEnabled;
            resourceInputs["redisConfiguration"] = args?.redisConfiguration;
            resourceInputs["redisVersion"] = args?.redisVersion;
            resourceInputs["replicasPerMaster"] = args?.replicasPerMaster;
            resourceInputs["replicasPerPrimary"] = args?.replicasPerPrimary;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["shardCount"] = args?.shardCount;
            resourceInputs["skuName"] = args?.skuName;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["tenantSettings"] = args?.tenantSettings;
            resourceInputs["zones"] = args?.zones;
            resourceInputs["hostname"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["primaryAccessKey"] = undefined /*out*/;
            resourceInputs["primaryConnectionString"] = undefined /*out*/;
            resourceInputs["secondaryAccessKey"] = undefined /*out*/;
            resourceInputs["secondaryConnectionString"] = undefined /*out*/;
            resourceInputs["sslPort"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["primaryAccessKey", "primaryConnectionString", "secondaryAccessKey", "secondaryConnectionString"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Cache.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cache resources.
 */
export interface CacheState {
    /**
     * Whether access key authentication is enabled? Defaults to `true`. `activeDirectoryAuthenticationEnabled` must be set to `true` to disable access key authentication.
     */
    accessKeysAuthenticationEnabled?: pulumi.Input<boolean>;
    /**
     * The size of the Redis cache to deploy. Valid values for a SKU `family` of C (Basic/Standard) are `0, 1, 2, 3, 4, 5, 6`, and for P (Premium) `family` are `1, 2, 3, 4, 5`.
     */
    capacity?: pulumi.Input<number>;
    /**
     * The SKU family/pricing group to use. Valid values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)
     */
    family?: pulumi.Input<string>;
    /**
     * The Hostname of the Redis Instance
     */
    hostname?: pulumi.Input<string>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.redis.CacheIdentity>;
    /**
     * The location of the resource group. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The minimum TLS version. Possible values are `1.0`, `1.1` and `1.2`. Defaults to `1.0`.
     *
     * > **NOTE:** Azure Services will require TLS 1.2+ by August 2025, please see this [announcement](https://azure.microsoft.com/en-us/updates/v2/update-retirement-tls1-0-tls1-1-versions-azure-services/) for more.
     */
    minimumTlsVersion?: pulumi.Input<string>;
    /**
     * The name of the Redis instance. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Enable the non-SSL port (6379) - disabled by default.
     */
    nonSslPortEnabled?: pulumi.Input<boolean>;
    /**
     * A list of `patchSchedule` blocks as defined below.
     */
    patchSchedules?: pulumi.Input<pulumi.Input<inputs.redis.CachePatchSchedule>[]>;
    /**
     * The non-SSL Port of the Redis Instance
     */
    port?: pulumi.Input<number>;
    /**
     * The Primary Access Key for the Redis Instance
     */
    primaryAccessKey?: pulumi.Input<string>;
    /**
     * The primary connection string of the Redis Instance.
     */
    primaryConnectionString?: pulumi.Input<string>;
    /**
     * The Static IP Address to assign to the Redis Cache when hosted inside the Virtual Network. This argument implies the use of `subnetId`. Changing this forces a new resource to be created.
     */
    privateStaticIpAddress?: pulumi.Input<string>;
    /**
     * Whether or not public network access is allowed for this Redis Cache. `true` means this resource could be accessed by both public and private endpoint. `false` means only private endpoint access is allowed. Defaults to `true`.
     */
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    /**
     * A `redisConfiguration` block as defined below - with some limitations by SKU - defaults/details are shown below.
     */
    redisConfiguration?: pulumi.Input<inputs.redis.CacheRedisConfiguration>;
    /**
     * Redis version. Only major version needed. Possible values are `4` and `6`. Defaults to `6`.
     */
    redisVersion?: pulumi.Input<string>;
    /**
     * Amount of replicas to create per master for this Redis Cache.
     *
     * > **Note:** Configuring the number of replicas per master is only available when using the Premium SKU and cannot be used in conjunction with shards.
     */
    replicasPerMaster?: pulumi.Input<number>;
    /**
     * Amount of replicas to create per primary for this Redis Cache. If both `replicasPerPrimary` and `replicasPerMaster` are set, they need to be equal.
     */
    replicasPerPrimary?: pulumi.Input<number>;
    /**
     * The name of the resource group in which to create the Redis instance. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The Secondary Access Key for the Redis Instance
     */
    secondaryAccessKey?: pulumi.Input<string>;
    /**
     * The secondary connection string of the Redis Instance.
     */
    secondaryConnectionString?: pulumi.Input<string>;
    /**
     * *Only available when using the Premium SKU* The number of Shards to create on the Redis Cluster.
     */
    shardCount?: pulumi.Input<number>;
    /**
     * The SKU of Redis to use. Possible values are `Basic`, `Standard` and `Premium`.
     *
     * > **Note** Downgrading the SKU will force a new resource to be created.
     */
    skuName?: pulumi.Input<string>;
    /**
     * The SSL Port of the Redis Instance
     */
    sslPort?: pulumi.Input<number>;
    /**
     * *Only available when using the Premium SKU* The ID of the Subnet within which the Redis Cache should be deployed. This Subnet must only contain Azure Cache for Redis instances without any other type of resources. Changing this forces a new resource to be created.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A mapping of tenant settings to assign to the resource.
     */
    tenantSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies a list of Availability Zones in which this Redis Cache should be located. Changing this forces a new Redis Cache to be created.
     *
     * > **Please Note:** Availability Zones are [in Preview and only supported in several regions at this time](https://docs.microsoft.com/azure/availability-zones/az-overview) - as such you must be opted into the Preview to use this functionality. You can [opt into the Availability Zones Preview in the Azure Portal](https://aka.ms/azenroll).
     */
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Cache resource.
 */
export interface CacheArgs {
    /**
     * Whether access key authentication is enabled? Defaults to `true`. `activeDirectoryAuthenticationEnabled` must be set to `true` to disable access key authentication.
     */
    accessKeysAuthenticationEnabled?: pulumi.Input<boolean>;
    /**
     * The size of the Redis cache to deploy. Valid values for a SKU `family` of C (Basic/Standard) are `0, 1, 2, 3, 4, 5, 6`, and for P (Premium) `family` are `1, 2, 3, 4, 5`.
     */
    capacity: pulumi.Input<number>;
    /**
     * The SKU family/pricing group to use. Valid values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)
     */
    family: pulumi.Input<string>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.redis.CacheIdentity>;
    /**
     * The location of the resource group. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The minimum TLS version. Possible values are `1.0`, `1.1` and `1.2`. Defaults to `1.0`.
     *
     * > **NOTE:** Azure Services will require TLS 1.2+ by August 2025, please see this [announcement](https://azure.microsoft.com/en-us/updates/v2/update-retirement-tls1-0-tls1-1-versions-azure-services/) for more.
     */
    minimumTlsVersion?: pulumi.Input<string>;
    /**
     * The name of the Redis instance. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Enable the non-SSL port (6379) - disabled by default.
     */
    nonSslPortEnabled?: pulumi.Input<boolean>;
    /**
     * A list of `patchSchedule` blocks as defined below.
     */
    patchSchedules?: pulumi.Input<pulumi.Input<inputs.redis.CachePatchSchedule>[]>;
    /**
     * The Static IP Address to assign to the Redis Cache when hosted inside the Virtual Network. This argument implies the use of `subnetId`. Changing this forces a new resource to be created.
     */
    privateStaticIpAddress?: pulumi.Input<string>;
    /**
     * Whether or not public network access is allowed for this Redis Cache. `true` means this resource could be accessed by both public and private endpoint. `false` means only private endpoint access is allowed. Defaults to `true`.
     */
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    /**
     * A `redisConfiguration` block as defined below - with some limitations by SKU - defaults/details are shown below.
     */
    redisConfiguration?: pulumi.Input<inputs.redis.CacheRedisConfiguration>;
    /**
     * Redis version. Only major version needed. Possible values are `4` and `6`. Defaults to `6`.
     */
    redisVersion?: pulumi.Input<string>;
    /**
     * Amount of replicas to create per master for this Redis Cache.
     *
     * > **Note:** Configuring the number of replicas per master is only available when using the Premium SKU and cannot be used in conjunction with shards.
     */
    replicasPerMaster?: pulumi.Input<number>;
    /**
     * Amount of replicas to create per primary for this Redis Cache. If both `replicasPerPrimary` and `replicasPerMaster` are set, they need to be equal.
     */
    replicasPerPrimary?: pulumi.Input<number>;
    /**
     * The name of the resource group in which to create the Redis instance. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * *Only available when using the Premium SKU* The number of Shards to create on the Redis Cluster.
     */
    shardCount?: pulumi.Input<number>;
    /**
     * The SKU of Redis to use. Possible values are `Basic`, `Standard` and `Premium`.
     *
     * > **Note** Downgrading the SKU will force a new resource to be created.
     */
    skuName: pulumi.Input<string>;
    /**
     * *Only available when using the Premium SKU* The ID of the Subnet within which the Redis Cache should be deployed. This Subnet must only contain Azure Cache for Redis instances without any other type of resources. Changing this forces a new resource to be created.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A mapping of tenant settings to assign to the resource.
     */
    tenantSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies a list of Availability Zones in which this Redis Cache should be located. Changing this forces a new Redis Cache to be created.
     *
     * > **Please Note:** Availability Zones are [in Preview and only supported in several regions at this time](https://docs.microsoft.com/azure/availability-zones/az-overview) - as such you must be opted into the Preview to use this functionality. You can [opt into the Availability Zones Preview in the Azure Portal](https://aka.ms/azenroll).
     */
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}
