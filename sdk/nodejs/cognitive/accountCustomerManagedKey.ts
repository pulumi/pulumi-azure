// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Customer Managed Key for a Cognitive Services Account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West US"});
 * const exampleUserAssignedIdentity = new azure.authorization.UserAssignedIdentity("exampleUserAssignedIdentity", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 * });
 * const exampleAccount = new azure.cognitive.Account("exampleAccount", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     kind: "Face",
 *     skuName: "E0",
 *     customSubdomainName: "example-account",
 *     identity: {
 *         type: "SystemAssigned, UserAssigned",
 *         identityIds: [exampleUserAssignedIdentity.id],
 *     },
 * });
 * const exampleKeyVault = new azure.keyvault.KeyVault("exampleKeyVault", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "standard",
 *     softDeleteEnabled: true,
 *     purgeProtectionEnabled: true,
 *     accessPolicies: [
 *         {
 *             tenantId: azurerm_cognitive_account.test.identity[0].tenant_id,
 *             objectId: azurerm_cognitive_account.test.identity[0].principal_id,
 *             keyPermissions: [
 *                 "Get",
 *                 "Create",
 *                 "List",
 *                 "Restore",
 *                 "Recover",
 *                 "UnwrapKey",
 *                 "WrapKey",
 *                 "Purge",
 *                 "Encrypt",
 *                 "Decrypt",
 *                 "Sign",
 *                 "Verify",
 *             ],
 *             secretPermissions: ["Get"],
 *         },
 *         {
 *             tenantId: current.then(current => current.tenantId),
 *             objectId: current.then(current => current.objectId),
 *             keyPermissions: [
 *                 "Get",
 *                 "Create",
 *                 "Delete",
 *                 "List",
 *                 "Restore",
 *                 "Recover",
 *                 "UnwrapKey",
 *                 "WrapKey",
 *                 "Purge",
 *                 "Encrypt",
 *                 "Decrypt",
 *                 "Sign",
 *                 "Verify",
 *             ],
 *             secretPermissions: ["Get"],
 *         },
 *         {
 *             tenantId: azurerm_user_assigned_identity.test.tenant_id,
 *             objectId: azurerm_user_assigned_identity.test.principal_id,
 *             keyPermissions: [
 *                 "Get",
 *                 "Create",
 *                 "Delete",
 *                 "List",
 *                 "Restore",
 *                 "Recover",
 *                 "UnwrapKey",
 *                 "WrapKey",
 *                 "Purge",
 *                 "Encrypt",
 *                 "Decrypt",
 *                 "Sign",
 *                 "Verify",
 *             ],
 *             secretPermissions: ["Get"],
 *         },
 *     ],
 * });
 * const exampleKey = new azure.keyvault.Key("exampleKey", {
 *     keyVaultId: exampleKeyVault.id,
 *     keyType: "RSA",
 *     keySize: 2048,
 *     keyOpts: [
 *         "decrypt",
 *         "encrypt",
 *         "sign",
 *         "unwrapKey",
 *         "verify",
 *         "wrapKey",
 *     ],
 * });
 * const exampleAccountCustomerManagedKey = new azure.cognitive.AccountCustomerManagedKey("exampleAccountCustomerManagedKey", {
 *     cognitiveAccountId: exampleAccount.id,
 *     keyVaultKeyId: exampleKey.id,
 *     identityClientId: exampleUserAssignedIdentity.clientId,
 * });
 * ```
 *
 * ## Import
 *
 * Customer Managed Keys for a Cognitive Account can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:cognitive/accountCustomerManagedKey:AccountCustomerManagedKey example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.CognitiveServices/accounts/account1
 * ```
 */
export class AccountCustomerManagedKey extends pulumi.CustomResource {
    /**
     * Get an existing AccountCustomerManagedKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountCustomerManagedKeyState, opts?: pulumi.CustomResourceOptions): AccountCustomerManagedKey {
        return new AccountCustomerManagedKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:cognitive/accountCustomerManagedKey:AccountCustomerManagedKey';

    /**
     * Returns true if the given object is an instance of AccountCustomerManagedKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccountCustomerManagedKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccountCustomerManagedKey.__pulumiType;
    }

    /**
     * The ID of the Cognitive Account. Changing this forces a new resource to be created.
     */
    public readonly cognitiveAccountId!: pulumi.Output<string>;
    /**
     * The Client ID of the User Assigned Identity that has access to the key. This property only needs to be specified when there're multiple identities attached to the Cognitive Account.
     */
    public readonly identityClientId!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Key Vault Key which should be used to Encrypt the data in this Cognitive Account.
     */
    public readonly keyVaultKeyId!: pulumi.Output<string>;

    /**
     * Create a AccountCustomerManagedKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccountCustomerManagedKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccountCustomerManagedKeyArgs | AccountCustomerManagedKeyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccountCustomerManagedKeyState | undefined;
            inputs["cognitiveAccountId"] = state ? state.cognitiveAccountId : undefined;
            inputs["identityClientId"] = state ? state.identityClientId : undefined;
            inputs["keyVaultKeyId"] = state ? state.keyVaultKeyId : undefined;
        } else {
            const args = argsOrState as AccountCustomerManagedKeyArgs | undefined;
            if ((!args || args.cognitiveAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cognitiveAccountId'");
            }
            if ((!args || args.keyVaultKeyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyVaultKeyId'");
            }
            inputs["cognitiveAccountId"] = args ? args.cognitiveAccountId : undefined;
            inputs["identityClientId"] = args ? args.identityClientId : undefined;
            inputs["keyVaultKeyId"] = args ? args.keyVaultKeyId : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(AccountCustomerManagedKey.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccountCustomerManagedKey resources.
 */
export interface AccountCustomerManagedKeyState {
    /**
     * The ID of the Cognitive Account. Changing this forces a new resource to be created.
     */
    cognitiveAccountId?: pulumi.Input<string>;
    /**
     * The Client ID of the User Assigned Identity that has access to the key. This property only needs to be specified when there're multiple identities attached to the Cognitive Account.
     */
    identityClientId?: pulumi.Input<string>;
    /**
     * The ID of the Key Vault Key which should be used to Encrypt the data in this Cognitive Account.
     */
    keyVaultKeyId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccountCustomerManagedKey resource.
 */
export interface AccountCustomerManagedKeyArgs {
    /**
     * The ID of the Cognitive Account. Changing this forces a new resource to be created.
     */
    cognitiveAccountId: pulumi.Input<string>;
    /**
     * The Client ID of the User Assigned Identity that has access to the key. This property only needs to be specified when there're multiple identities attached to the Cognitive Account.
     */
    identityClientId?: pulumi.Input<string>;
    /**
     * The ID of the Key Vault Key which should be used to Encrypt the data in this Cognitive Account.
     */
    keyVaultKeyId: pulumi.Input<string>;
}
