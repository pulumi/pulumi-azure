// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a NetApp Volume.
 *
 * !> **Note:** This resource uses a feature to prevent deletion called `preventVolumeDestruction`, defaulting to `true`. It is intentionally set to `true` to prevent the possibility of accidental data loss. The example in this page shows all possible protection options you can apply, it is using same values as the defaults.
 *
 * ## Import
 *
 * NetApp Volumes can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:netapp/volume:Volume example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1
 * ```
 */
export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState, opts?: pulumi.CustomResourceOptions): Volume {
        return new Volume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:netapp/volume:Volume';

    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Volume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }

    /**
     * The name of the NetApp account in which the NetApp Pool should be created. Changing this forces a new resource to be created.
     */
    declare public readonly accountName: pulumi.Output<string>;
    /**
     * Is the NetApp Volume enabled for Azure VMware Solution (AVS) datastore purpose. Defaults to `false`. Changing this forces a new resource to be created.
     */
    declare public readonly azureVmwareDataStoreEnabled: pulumi.Output<boolean | undefined>;
    /**
     * A `coolAccess` block as defined below.
     */
    declare public readonly coolAccess: pulumi.Output<outputs.netapp.VolumeCoolAccess | undefined>;
    /**
     * Creates volume from snapshot. Following properties must be the same as the original volume where the snapshot was taken from: `protocols`, `subnetId`, `location`, `serviceLevel`, `resourceGroupName` and `accountName`. Changing this forces a new resource to be created.
     */
    declare public readonly createFromSnapshotResourceId: pulumi.Output<string | undefined>;
    /**
     * A `dataProtectionBackupPolicy` block as defined below.
     */
    declare public readonly dataProtectionBackupPolicy: pulumi.Output<outputs.netapp.VolumeDataProtectionBackupPolicy | undefined>;
    /**
     * A `dataProtectionReplication` block as defined below. Changing this forces a new resource to be created.
     */
    declare public readonly dataProtectionReplication: pulumi.Output<outputs.netapp.VolumeDataProtectionReplication | undefined>;
    /**
     * A `dataProtectionSnapshotPolicy` block as defined below.
     */
    declare public readonly dataProtectionSnapshotPolicy: pulumi.Output<outputs.netapp.VolumeDataProtectionSnapshotPolicy | undefined>;
    /**
     * The encryption key source, it can be `Microsoft.NetApp` for platform managed keys or `Microsoft.KeyVault` for customer-managed keys. This is required with `keyVaultPrivateEndpointId`. Changing this forces a new resource to be created.
     */
    declare public readonly encryptionKeySource: pulumi.Output<string>;
    /**
     * One or more `exportPolicyRule` block defined below.
     */
    declare public readonly exportPolicyRules: pulumi.Output<outputs.netapp.VolumeExportPolicyRule[] | undefined>;
    /**
     * Enable to allow Kerberos secured volumes. Requires appropriate export rules as well as the parent `azure.netapp.Account` having a defined AD connection.
     */
    declare public readonly kerberosEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The Private Endpoint ID for Key Vault, which is required when using customer-managed keys. This is required with `encryptionKeySource`. Changing this forces a new resource to be created.
     */
    declare public readonly keyVaultPrivateEndpointId: pulumi.Output<string>;
    /**
     * A boolean specifying if the volume is a large volume. Defaults to `false`.
     *
     * > **Note:** Large volumes must be at least 50 TiB in size and can be up to 1,024 TiB (1 PiB). For more information, please refer to [Requirements and considerations for large volumes](https://learn.microsoft.com/en-us/azure/azure-netapp-files/large-volumes-requirements-considerations)
     */
    declare public readonly largeVolumeEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * A list of IPv4 Addresses which should be used to mount the volume.
     */
    declare public /*out*/ readonly mountIpAddresses: pulumi.Output<string[]>;
    /**
     * The name of the NetApp Volume. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Indicates which network feature to use, accepted values are `Basic` or `Standard`, it defaults to `Basic` if not defined. This is a feature in public preview and for more information about it and how to register, please refer to [Configure network features for an Azure NetApp Files volume](https://docs.microsoft.com/en-us/azure/azure-netapp-files/configure-network-features).
     */
    declare public readonly networkFeatures: pulumi.Output<string>;
    /**
     * The name of the NetApp pool in which the NetApp Volume should be created.
     */
    declare public readonly poolName: pulumi.Output<string>;
    /**
     * The target volume protocol expressed as a list. Supported single value include `CIFS`, `NFSv3`, or `NFSv4.1`. If argument is not defined it will default to `NFSv3`. Changing this forces a new resource to be created and data will be lost. Dual protocol scenario is supported for CIFS and NFSv3, for more information, please refer to [Create a dual-protocol volume for Azure NetApp Files](https://docs.microsoft.com/azure/azure-netapp-files/create-volumes-dual-protocol) document.
     */
    declare public readonly protocols: pulumi.Output<string[]>;
    /**
     * The name of the resource group where the NetApp Volume should be created. Changing this forces a new resource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * Volume security style, accepted values are `unix` or `ntfs`. If not provided, single-protocol volume is created defaulting to `unix` if it is `NFSv3` or `NFSv4.1` volume, if `CIFS`, it will default to `ntfs`. In a dual-protocol volume, if not provided, its value will be `ntfs`. Changing this forces a new resource to be created.
     */
    declare public readonly securityStyle: pulumi.Output<string>;
    declare public readonly serviceLevel: pulumi.Output<string>;
    /**
     * Enable SMB encryption. Changing this forces a new resource to be created.
     */
    declare public readonly smb3ProtocolEncryptionEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Limits enumeration of files and folders (that is, listing the contents) in SMB only to users with allowed access on the share. For instance, if a user doesn't have access to read a file or folder in a share with access-based enumeration enabled, then the file or folder doesn't show up in directory listings. Defaults to `false`. For more information, please refer to [Understand NAS share permissions in Azure NetApp Files](https://learn.microsoft.com/en-us/azure/azure-netapp-files/network-attached-storage-permissions#:~:text=security%20for%20administrators.-,Access%2Dbased%20enumeration,in%20an%20Azure%20NetApp%20Files%20SMB%20volume.%20Only%20contosoadmin%20has%20access.,-In%20the%20below)
     */
    declare public readonly smbAccessBasedEnumerationEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Enable SMB Continuous Availability. Changing this forces a new resource to be created.
     */
    declare public readonly smbContinuousAvailabilityEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Limits clients from browsing for an SMB share by hiding the share from view in Windows Explorer or when listing shares in "net view." Only end users that know the absolute paths to the share are able to find the share. Defaults to `false`. For more information, please refer to [Understand NAS share permissions in Azure NetApp Files](https://learn.microsoft.com/en-us/azure/azure-netapp-files/network-attached-storage-permissions#:~:text=Non%2Dbrowsable%20shares,find%20the%20share.)
     */
    declare public readonly smbNonBrowsableEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Specifies whether the .snapshot (NFS clients) or ~snapshot (SMB clients) path of a volume is visible. Defaults to `true`.
     */
    declare public readonly snapshotDirectoryVisible: pulumi.Output<boolean | undefined>;
    /**
     * The maximum Storage Quota allowed for a file system in Gigabytes.
     */
    declare public readonly storageQuotaInGb: pulumi.Output<number>;
    /**
     * The ID of the Subnet the NetApp Volume resides in, which must have the `Microsoft.NetApp/volumes` delegation. Changing this forces a new resource to be created.
     */
    declare public readonly subnetId: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource.
     *
     * > **Note:** It is highly recommended to use the **lifecycle** property as noted in the example since it will prevent an accidental deletion of the volume if the `protocols` argument changes to a different protocol type.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Throughput of this volume in Mibps.
     */
    declare public readonly throughputInMibps: pulumi.Output<number>;
    /**
     * A unique file path for the volume. Used when creating mount targets. Changing this forces a new resource to be created.
     */
    declare public readonly volumePath: pulumi.Output<string>;
    /**
     * Specifies the Availability Zone in which the Volume should be located. Possible values are `1`, `2` and `3`. Changing this forces a new resource to be created. This feature is currently in preview, for more information on how to enable it, please refer to [Manage availability zone volume placement for Azure NetApp Files](https://learn.microsoft.com/en-us/azure/azure-netapp-files/manage-availability-zone-volume-placement#register-the-feature).
     */
    declare public readonly zone: pulumi.Output<string | undefined>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeArgs | VolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeState | undefined;
            resourceInputs["accountName"] = state?.accountName;
            resourceInputs["azureVmwareDataStoreEnabled"] = state?.azureVmwareDataStoreEnabled;
            resourceInputs["coolAccess"] = state?.coolAccess;
            resourceInputs["createFromSnapshotResourceId"] = state?.createFromSnapshotResourceId;
            resourceInputs["dataProtectionBackupPolicy"] = state?.dataProtectionBackupPolicy;
            resourceInputs["dataProtectionReplication"] = state?.dataProtectionReplication;
            resourceInputs["dataProtectionSnapshotPolicy"] = state?.dataProtectionSnapshotPolicy;
            resourceInputs["encryptionKeySource"] = state?.encryptionKeySource;
            resourceInputs["exportPolicyRules"] = state?.exportPolicyRules;
            resourceInputs["kerberosEnabled"] = state?.kerberosEnabled;
            resourceInputs["keyVaultPrivateEndpointId"] = state?.keyVaultPrivateEndpointId;
            resourceInputs["largeVolumeEnabled"] = state?.largeVolumeEnabled;
            resourceInputs["location"] = state?.location;
            resourceInputs["mountIpAddresses"] = state?.mountIpAddresses;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkFeatures"] = state?.networkFeatures;
            resourceInputs["poolName"] = state?.poolName;
            resourceInputs["protocols"] = state?.protocols;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["securityStyle"] = state?.securityStyle;
            resourceInputs["serviceLevel"] = state?.serviceLevel;
            resourceInputs["smb3ProtocolEncryptionEnabled"] = state?.smb3ProtocolEncryptionEnabled;
            resourceInputs["smbAccessBasedEnumerationEnabled"] = state?.smbAccessBasedEnumerationEnabled;
            resourceInputs["smbContinuousAvailabilityEnabled"] = state?.smbContinuousAvailabilityEnabled;
            resourceInputs["smbNonBrowsableEnabled"] = state?.smbNonBrowsableEnabled;
            resourceInputs["snapshotDirectoryVisible"] = state?.snapshotDirectoryVisible;
            resourceInputs["storageQuotaInGb"] = state?.storageQuotaInGb;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["throughputInMibps"] = state?.throughputInMibps;
            resourceInputs["volumePath"] = state?.volumePath;
            resourceInputs["zone"] = state?.zone;
        } else {
            const args = argsOrState as VolumeArgs | undefined;
            if (args?.accountName === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if (args?.poolName === undefined && !opts.urn) {
                throw new Error("Missing required property 'poolName'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.serviceLevel === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceLevel'");
            }
            if (args?.storageQuotaInGb === undefined && !opts.urn) {
                throw new Error("Missing required property 'storageQuotaInGb'");
            }
            if (args?.subnetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if (args?.volumePath === undefined && !opts.urn) {
                throw new Error("Missing required property 'volumePath'");
            }
            resourceInputs["accountName"] = args?.accountName;
            resourceInputs["azureVmwareDataStoreEnabled"] = args?.azureVmwareDataStoreEnabled;
            resourceInputs["coolAccess"] = args?.coolAccess;
            resourceInputs["createFromSnapshotResourceId"] = args?.createFromSnapshotResourceId;
            resourceInputs["dataProtectionBackupPolicy"] = args?.dataProtectionBackupPolicy;
            resourceInputs["dataProtectionReplication"] = args?.dataProtectionReplication;
            resourceInputs["dataProtectionSnapshotPolicy"] = args?.dataProtectionSnapshotPolicy;
            resourceInputs["encryptionKeySource"] = args?.encryptionKeySource;
            resourceInputs["exportPolicyRules"] = args?.exportPolicyRules;
            resourceInputs["kerberosEnabled"] = args?.kerberosEnabled;
            resourceInputs["keyVaultPrivateEndpointId"] = args?.keyVaultPrivateEndpointId;
            resourceInputs["largeVolumeEnabled"] = args?.largeVolumeEnabled;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkFeatures"] = args?.networkFeatures;
            resourceInputs["poolName"] = args?.poolName;
            resourceInputs["protocols"] = args?.protocols;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["securityStyle"] = args?.securityStyle;
            resourceInputs["serviceLevel"] = args?.serviceLevel;
            resourceInputs["smb3ProtocolEncryptionEnabled"] = args?.smb3ProtocolEncryptionEnabled;
            resourceInputs["smbAccessBasedEnumerationEnabled"] = args?.smbAccessBasedEnumerationEnabled;
            resourceInputs["smbContinuousAvailabilityEnabled"] = args?.smbContinuousAvailabilityEnabled;
            resourceInputs["smbNonBrowsableEnabled"] = args?.smbNonBrowsableEnabled;
            resourceInputs["snapshotDirectoryVisible"] = args?.snapshotDirectoryVisible;
            resourceInputs["storageQuotaInGb"] = args?.storageQuotaInGb;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["throughputInMibps"] = args?.throughputInMibps;
            resourceInputs["volumePath"] = args?.volumePath;
            resourceInputs["zone"] = args?.zone;
            resourceInputs["mountIpAddresses"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Volume.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    /**
     * The name of the NetApp account in which the NetApp Pool should be created. Changing this forces a new resource to be created.
     */
    accountName?: pulumi.Input<string>;
    /**
     * Is the NetApp Volume enabled for Azure VMware Solution (AVS) datastore purpose. Defaults to `false`. Changing this forces a new resource to be created.
     */
    azureVmwareDataStoreEnabled?: pulumi.Input<boolean>;
    /**
     * A `coolAccess` block as defined below.
     */
    coolAccess?: pulumi.Input<inputs.netapp.VolumeCoolAccess>;
    /**
     * Creates volume from snapshot. Following properties must be the same as the original volume where the snapshot was taken from: `protocols`, `subnetId`, `location`, `serviceLevel`, `resourceGroupName` and `accountName`. Changing this forces a new resource to be created.
     */
    createFromSnapshotResourceId?: pulumi.Input<string>;
    /**
     * A `dataProtectionBackupPolicy` block as defined below.
     */
    dataProtectionBackupPolicy?: pulumi.Input<inputs.netapp.VolumeDataProtectionBackupPolicy>;
    /**
     * A `dataProtectionReplication` block as defined below. Changing this forces a new resource to be created.
     */
    dataProtectionReplication?: pulumi.Input<inputs.netapp.VolumeDataProtectionReplication>;
    /**
     * A `dataProtectionSnapshotPolicy` block as defined below.
     */
    dataProtectionSnapshotPolicy?: pulumi.Input<inputs.netapp.VolumeDataProtectionSnapshotPolicy>;
    /**
     * The encryption key source, it can be `Microsoft.NetApp` for platform managed keys or `Microsoft.KeyVault` for customer-managed keys. This is required with `keyVaultPrivateEndpointId`. Changing this forces a new resource to be created.
     */
    encryptionKeySource?: pulumi.Input<string>;
    /**
     * One or more `exportPolicyRule` block defined below.
     */
    exportPolicyRules?: pulumi.Input<pulumi.Input<inputs.netapp.VolumeExportPolicyRule>[]>;
    /**
     * Enable to allow Kerberos secured volumes. Requires appropriate export rules as well as the parent `azure.netapp.Account` having a defined AD connection.
     */
    kerberosEnabled?: pulumi.Input<boolean>;
    /**
     * The Private Endpoint ID for Key Vault, which is required when using customer-managed keys. This is required with `encryptionKeySource`. Changing this forces a new resource to be created.
     */
    keyVaultPrivateEndpointId?: pulumi.Input<string>;
    /**
     * A boolean specifying if the volume is a large volume. Defaults to `false`.
     *
     * > **Note:** Large volumes must be at least 50 TiB in size and can be up to 1,024 TiB (1 PiB). For more information, please refer to [Requirements and considerations for large volumes](https://learn.microsoft.com/en-us/azure/azure-netapp-files/large-volumes-requirements-considerations)
     */
    largeVolumeEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * A list of IPv4 Addresses which should be used to mount the volume.
     */
    mountIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the NetApp Volume. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates which network feature to use, accepted values are `Basic` or `Standard`, it defaults to `Basic` if not defined. This is a feature in public preview and for more information about it and how to register, please refer to [Configure network features for an Azure NetApp Files volume](https://docs.microsoft.com/en-us/azure/azure-netapp-files/configure-network-features).
     */
    networkFeatures?: pulumi.Input<string>;
    /**
     * The name of the NetApp pool in which the NetApp Volume should be created.
     */
    poolName?: pulumi.Input<string>;
    /**
     * The target volume protocol expressed as a list. Supported single value include `CIFS`, `NFSv3`, or `NFSv4.1`. If argument is not defined it will default to `NFSv3`. Changing this forces a new resource to be created and data will be lost. Dual protocol scenario is supported for CIFS and NFSv3, for more information, please refer to [Create a dual-protocol volume for Azure NetApp Files](https://docs.microsoft.com/azure/azure-netapp-files/create-volumes-dual-protocol) document.
     */
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the resource group where the NetApp Volume should be created. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * Volume security style, accepted values are `unix` or `ntfs`. If not provided, single-protocol volume is created defaulting to `unix` if it is `NFSv3` or `NFSv4.1` volume, if `CIFS`, it will default to `ntfs`. In a dual-protocol volume, if not provided, its value will be `ntfs`. Changing this forces a new resource to be created.
     */
    securityStyle?: pulumi.Input<string>;
    serviceLevel?: pulumi.Input<string>;
    /**
     * Enable SMB encryption. Changing this forces a new resource to be created.
     */
    smb3ProtocolEncryptionEnabled?: pulumi.Input<boolean>;
    /**
     * Limits enumeration of files and folders (that is, listing the contents) in SMB only to users with allowed access on the share. For instance, if a user doesn't have access to read a file or folder in a share with access-based enumeration enabled, then the file or folder doesn't show up in directory listings. Defaults to `false`. For more information, please refer to [Understand NAS share permissions in Azure NetApp Files](https://learn.microsoft.com/en-us/azure/azure-netapp-files/network-attached-storage-permissions#:~:text=security%20for%20administrators.-,Access%2Dbased%20enumeration,in%20an%20Azure%20NetApp%20Files%20SMB%20volume.%20Only%20contosoadmin%20has%20access.,-In%20the%20below)
     */
    smbAccessBasedEnumerationEnabled?: pulumi.Input<boolean>;
    /**
     * Enable SMB Continuous Availability. Changing this forces a new resource to be created.
     */
    smbContinuousAvailabilityEnabled?: pulumi.Input<boolean>;
    /**
     * Limits clients from browsing for an SMB share by hiding the share from view in Windows Explorer or when listing shares in "net view." Only end users that know the absolute paths to the share are able to find the share. Defaults to `false`. For more information, please refer to [Understand NAS share permissions in Azure NetApp Files](https://learn.microsoft.com/en-us/azure/azure-netapp-files/network-attached-storage-permissions#:~:text=Non%2Dbrowsable%20shares,find%20the%20share.)
     */
    smbNonBrowsableEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies whether the .snapshot (NFS clients) or ~snapshot (SMB clients) path of a volume is visible. Defaults to `true`.
     */
    snapshotDirectoryVisible?: pulumi.Input<boolean>;
    /**
     * The maximum Storage Quota allowed for a file system in Gigabytes.
     */
    storageQuotaInGb?: pulumi.Input<number>;
    /**
     * The ID of the Subnet the NetApp Volume resides in, which must have the `Microsoft.NetApp/volumes` delegation. Changing this forces a new resource to be created.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     *
     * > **Note:** It is highly recommended to use the **lifecycle** property as noted in the example since it will prevent an accidental deletion of the volume if the `protocols` argument changes to a different protocol type.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Throughput of this volume in Mibps.
     */
    throughputInMibps?: pulumi.Input<number>;
    /**
     * A unique file path for the volume. Used when creating mount targets. Changing this forces a new resource to be created.
     */
    volumePath?: pulumi.Input<string>;
    /**
     * Specifies the Availability Zone in which the Volume should be located. Possible values are `1`, `2` and `3`. Changing this forces a new resource to be created. This feature is currently in preview, for more information on how to enable it, please refer to [Manage availability zone volume placement for Azure NetApp Files](https://learn.microsoft.com/en-us/azure/azure-netapp-files/manage-availability-zone-volume-placement#register-the-feature).
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    /**
     * The name of the NetApp account in which the NetApp Pool should be created. Changing this forces a new resource to be created.
     */
    accountName: pulumi.Input<string>;
    /**
     * Is the NetApp Volume enabled for Azure VMware Solution (AVS) datastore purpose. Defaults to `false`. Changing this forces a new resource to be created.
     */
    azureVmwareDataStoreEnabled?: pulumi.Input<boolean>;
    /**
     * A `coolAccess` block as defined below.
     */
    coolAccess?: pulumi.Input<inputs.netapp.VolumeCoolAccess>;
    /**
     * Creates volume from snapshot. Following properties must be the same as the original volume where the snapshot was taken from: `protocols`, `subnetId`, `location`, `serviceLevel`, `resourceGroupName` and `accountName`. Changing this forces a new resource to be created.
     */
    createFromSnapshotResourceId?: pulumi.Input<string>;
    /**
     * A `dataProtectionBackupPolicy` block as defined below.
     */
    dataProtectionBackupPolicy?: pulumi.Input<inputs.netapp.VolumeDataProtectionBackupPolicy>;
    /**
     * A `dataProtectionReplication` block as defined below. Changing this forces a new resource to be created.
     */
    dataProtectionReplication?: pulumi.Input<inputs.netapp.VolumeDataProtectionReplication>;
    /**
     * A `dataProtectionSnapshotPolicy` block as defined below.
     */
    dataProtectionSnapshotPolicy?: pulumi.Input<inputs.netapp.VolumeDataProtectionSnapshotPolicy>;
    /**
     * The encryption key source, it can be `Microsoft.NetApp` for platform managed keys or `Microsoft.KeyVault` for customer-managed keys. This is required with `keyVaultPrivateEndpointId`. Changing this forces a new resource to be created.
     */
    encryptionKeySource?: pulumi.Input<string>;
    /**
     * One or more `exportPolicyRule` block defined below.
     */
    exportPolicyRules?: pulumi.Input<pulumi.Input<inputs.netapp.VolumeExportPolicyRule>[]>;
    /**
     * Enable to allow Kerberos secured volumes. Requires appropriate export rules as well as the parent `azure.netapp.Account` having a defined AD connection.
     */
    kerberosEnabled?: pulumi.Input<boolean>;
    /**
     * The Private Endpoint ID for Key Vault, which is required when using customer-managed keys. This is required with `encryptionKeySource`. Changing this forces a new resource to be created.
     */
    keyVaultPrivateEndpointId?: pulumi.Input<string>;
    /**
     * A boolean specifying if the volume is a large volume. Defaults to `false`.
     *
     * > **Note:** Large volumes must be at least 50 TiB in size and can be up to 1,024 TiB (1 PiB). For more information, please refer to [Requirements and considerations for large volumes](https://learn.microsoft.com/en-us/azure/azure-netapp-files/large-volumes-requirements-considerations)
     */
    largeVolumeEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the NetApp Volume. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates which network feature to use, accepted values are `Basic` or `Standard`, it defaults to `Basic` if not defined. This is a feature in public preview and for more information about it and how to register, please refer to [Configure network features for an Azure NetApp Files volume](https://docs.microsoft.com/en-us/azure/azure-netapp-files/configure-network-features).
     */
    networkFeatures?: pulumi.Input<string>;
    /**
     * The name of the NetApp pool in which the NetApp Volume should be created.
     */
    poolName: pulumi.Input<string>;
    /**
     * The target volume protocol expressed as a list. Supported single value include `CIFS`, `NFSv3`, or `NFSv4.1`. If argument is not defined it will default to `NFSv3`. Changing this forces a new resource to be created and data will be lost. Dual protocol scenario is supported for CIFS and NFSv3, for more information, please refer to [Create a dual-protocol volume for Azure NetApp Files](https://docs.microsoft.com/azure/azure-netapp-files/create-volumes-dual-protocol) document.
     */
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the resource group where the NetApp Volume should be created. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Volume security style, accepted values are `unix` or `ntfs`. If not provided, single-protocol volume is created defaulting to `unix` if it is `NFSv3` or `NFSv4.1` volume, if `CIFS`, it will default to `ntfs`. In a dual-protocol volume, if not provided, its value will be `ntfs`. Changing this forces a new resource to be created.
     */
    securityStyle?: pulumi.Input<string>;
    serviceLevel: pulumi.Input<string>;
    /**
     * Enable SMB encryption. Changing this forces a new resource to be created.
     */
    smb3ProtocolEncryptionEnabled?: pulumi.Input<boolean>;
    /**
     * Limits enumeration of files and folders (that is, listing the contents) in SMB only to users with allowed access on the share. For instance, if a user doesn't have access to read a file or folder in a share with access-based enumeration enabled, then the file or folder doesn't show up in directory listings. Defaults to `false`. For more information, please refer to [Understand NAS share permissions in Azure NetApp Files](https://learn.microsoft.com/en-us/azure/azure-netapp-files/network-attached-storage-permissions#:~:text=security%20for%20administrators.-,Access%2Dbased%20enumeration,in%20an%20Azure%20NetApp%20Files%20SMB%20volume.%20Only%20contosoadmin%20has%20access.,-In%20the%20below)
     */
    smbAccessBasedEnumerationEnabled?: pulumi.Input<boolean>;
    /**
     * Enable SMB Continuous Availability. Changing this forces a new resource to be created.
     */
    smbContinuousAvailabilityEnabled?: pulumi.Input<boolean>;
    /**
     * Limits clients from browsing for an SMB share by hiding the share from view in Windows Explorer or when listing shares in "net view." Only end users that know the absolute paths to the share are able to find the share. Defaults to `false`. For more information, please refer to [Understand NAS share permissions in Azure NetApp Files](https://learn.microsoft.com/en-us/azure/azure-netapp-files/network-attached-storage-permissions#:~:text=Non%2Dbrowsable%20shares,find%20the%20share.)
     */
    smbNonBrowsableEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies whether the .snapshot (NFS clients) or ~snapshot (SMB clients) path of a volume is visible. Defaults to `true`.
     */
    snapshotDirectoryVisible?: pulumi.Input<boolean>;
    /**
     * The maximum Storage Quota allowed for a file system in Gigabytes.
     */
    storageQuotaInGb: pulumi.Input<number>;
    /**
     * The ID of the Subnet the NetApp Volume resides in, which must have the `Microsoft.NetApp/volumes` delegation. Changing this forces a new resource to be created.
     */
    subnetId: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     *
     * > **Note:** It is highly recommended to use the **lifecycle** property as noted in the example since it will prevent an accidental deletion of the volume if the `protocols` argument changes to a different protocol type.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Throughput of this volume in Mibps.
     */
    throughputInMibps?: pulumi.Input<number>;
    /**
     * A unique file path for the volume. Used when creating mount targets. Changing this forces a new resource to be created.
     */
    volumePath: pulumi.Input<string>;
    /**
     * Specifies the Availability Zone in which the Volume should be located. Possible values are `1`, `2` and `3`. Changing this forces a new resource to be created. This feature is currently in preview, for more information on how to enable it, please refer to [Manage availability zone volume placement for Azure NetApp Files](https://learn.microsoft.com/en-us/azure/azure-netapp-files/manage-availability-zone-volume-placement#register-the-feature).
     */
    zone?: pulumi.Input<string>;
}
