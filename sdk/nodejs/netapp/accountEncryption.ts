// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a NetApp Account Encryption Resource.
 *
 * For more information about Azure NetApp Files Customer-Managed Keys feature, please refer to [Configure customer-managed keys for Azure NetApp Files volume encryption](https://learn.microsoft.com/en-us/azure/azure-netapp-files/configure-customer-managed-keys)
 *
 * ## Import
 *
 * Account Encryption Resources can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:netapp/accountEncryption:AccountEncryption example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.NetApp/netAppAccounts/account1
 * ```
 */
export class AccountEncryption extends pulumi.CustomResource {
    /**
     * Get an existing AccountEncryption resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountEncryptionState, opts?: pulumi.CustomResourceOptions): AccountEncryption {
        return new AccountEncryption(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:netapp/accountEncryption:AccountEncryption';

    /**
     * Returns true if the given object is an instance of AccountEncryption.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccountEncryption {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccountEncryption.__pulumiType;
    }

    /**
     * The versionless encryption key url.
     */
    public readonly encryptionKey!: pulumi.Output<string>;
    /**
     * The ID of the NetApp account where volume under it will have customer managed keys-based encryption enabled.
     */
    public readonly netappAccountId!: pulumi.Output<string>;
    /**
     * The ID of the System Assigned Manged Identity. Conflicts with `userAssignedIdentityId`.
     */
    public readonly systemAssignedIdentityPrincipalId!: pulumi.Output<string | undefined>;
    /**
     * The ID of the User Assigned Managed Identity. Conflicts with `systemAssignedIdentityPrincipalId`.
     */
    public readonly userAssignedIdentityId!: pulumi.Output<string | undefined>;

    /**
     * Create a AccountEncryption resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccountEncryptionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccountEncryptionArgs | AccountEncryptionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccountEncryptionState | undefined;
            resourceInputs["encryptionKey"] = state ? state.encryptionKey : undefined;
            resourceInputs["netappAccountId"] = state ? state.netappAccountId : undefined;
            resourceInputs["systemAssignedIdentityPrincipalId"] = state ? state.systemAssignedIdentityPrincipalId : undefined;
            resourceInputs["userAssignedIdentityId"] = state ? state.userAssignedIdentityId : undefined;
        } else {
            const args = argsOrState as AccountEncryptionArgs | undefined;
            if ((!args || args.encryptionKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'encryptionKey'");
            }
            if ((!args || args.netappAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'netappAccountId'");
            }
            resourceInputs["encryptionKey"] = args ? args.encryptionKey : undefined;
            resourceInputs["netappAccountId"] = args ? args.netappAccountId : undefined;
            resourceInputs["systemAssignedIdentityPrincipalId"] = args ? args.systemAssignedIdentityPrincipalId : undefined;
            resourceInputs["userAssignedIdentityId"] = args ? args.userAssignedIdentityId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccountEncryption.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccountEncryption resources.
 */
export interface AccountEncryptionState {
    /**
     * The versionless encryption key url.
     */
    encryptionKey?: pulumi.Input<string>;
    /**
     * The ID of the NetApp account where volume under it will have customer managed keys-based encryption enabled.
     */
    netappAccountId?: pulumi.Input<string>;
    /**
     * The ID of the System Assigned Manged Identity. Conflicts with `userAssignedIdentityId`.
     */
    systemAssignedIdentityPrincipalId?: pulumi.Input<string>;
    /**
     * The ID of the User Assigned Managed Identity. Conflicts with `systemAssignedIdentityPrincipalId`.
     */
    userAssignedIdentityId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccountEncryption resource.
 */
export interface AccountEncryptionArgs {
    /**
     * The versionless encryption key url.
     */
    encryptionKey: pulumi.Input<string>;
    /**
     * The ID of the NetApp account where volume under it will have customer managed keys-based encryption enabled.
     */
    netappAccountId: pulumi.Input<string>;
    /**
     * The ID of the System Assigned Manged Identity. Conflicts with `userAssignedIdentityId`.
     */
    systemAssignedIdentityPrincipalId?: pulumi.Input<string>;
    /**
     * The ID of the User Assigned Managed Identity. Conflicts with `systemAssignedIdentityPrincipalId`.
     */
    userAssignedIdentityId?: pulumi.Input<string>;
}
