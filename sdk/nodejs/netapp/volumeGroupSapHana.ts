// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as random from "@pulumi/random";
 *
 * const example = new random.RandomString("example", {
 *     length: 12,
 *     special: true,
 * });
 * const adminUsername = "exampleadmin";
 * const adminPassword = example.result;
 * const exampleResourceGroup = new azure.core.ResourceGroup("example", {
 *     name: `${prefix}-resources`,
 *     location: location,
 * });
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
 *     name: `${prefix}-vnet`,
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     addressSpaces: ["10.88.0.0/16"],
 * });
 * const exampleSubnet = new azure.network.Subnet("example", {
 *     name: `${prefix}-delegated-subnet`,
 *     resourceGroupName: exampleResourceGroup.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.88.2.0/24"],
 *     delegations: [{
 *         name: "testdelegation",
 *         serviceDelegation: {
 *             name: "Microsoft.Netapp/volumes",
 *             actions: [
 *                 "Microsoft.Network/networkinterfaces/*",
 *                 "Microsoft.Network/virtualNetworks/subnets/join/action",
 *             ],
 *         },
 *     }],
 * });
 * const example1 = new azure.network.Subnet("example1", {
 *     name: `${prefix}-hosts-subnet`,
 *     resourceGroupName: exampleResourceGroup.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.88.1.0/24"],
 * });
 * const examplePlacementGroup = new azure.proximity.PlacementGroup("example", {
 *     name: `${prefix}-ppg`,
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * const exampleAvailabilitySet = new azure.compute.AvailabilitySet("example", {
 *     name: `${prefix}-avset`,
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     proximityPlacementGroupId: examplePlacementGroup.id,
 * });
 * const exampleNetworkInterface = new azure.network.NetworkInterface("example", {
 *     name: `${prefix}-nic`,
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     ipConfigurations: [{
 *         name: "internal",
 *         subnetId: example1.id,
 *         privateIpAddressAllocation: "Dynamic",
 *     }],
 * });
 * const exampleLinuxVirtualMachine = new azure.compute.LinuxVirtualMachine("example", {
 *     name: `${prefix}-vm`,
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     size: "Standard_M8ms",
 *     adminUsername: adminUsername,
 *     adminPassword: adminPassword,
 *     disablePasswordAuthentication: false,
 *     proximityPlacementGroupId: examplePlacementGroup.id,
 *     availabilitySetId: exampleAvailabilitySet.id,
 *     networkInterfaceIds: [exampleNetworkInterface.id],
 *     sourceImageReference: {
 *         publisher: "Canonical",
 *         offer: "0001-com-ubuntu-server-jammy",
 *         sku: "22_04-lts",
 *         version: "latest",
 *     },
 *     osDisk: {
 *         storageAccountType: "Standard_LRS",
 *         caching: "ReadWrite",
 *     },
 * });
 * const exampleAccount = new azure.netapp.Account("example", {
 *     name: `${prefix}-netapp-account`,
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 * }, {
 *     dependsOn: [
 *         exampleSubnet,
 *         example1,
 *     ],
 * });
 * const examplePool = new azure.netapp.Pool("example", {
 *     name: `${prefix}-netapp-pool`,
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     accountName: exampleAccount.name,
 *     serviceLevel: "Standard",
 *     sizeInTb: 8,
 *     qosType: "Manual",
 * });
 * const exampleVolumeGroupSapHana = new azure.netapp.VolumeGroupSapHana("example", {
 *     name: `${prefix}-netapp-volumegroup`,
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     accountName: exampleAccount.name,
 *     groupDescription: "Test volume group",
 *     applicationIdentifier: "TST",
 *     volumes: [
 *         {
 *             name: `${prefix}-netapp-volume-1`,
 *             volumePath: "my-unique-file-path-1",
 *             serviceLevel: "Standard",
 *             capacityPoolId: examplePool.id,
 *             subnetId: exampleSubnet.id,
 *             proximityPlacementGroupId: examplePlacementGroup.id,
 *             volumeSpecName: "data",
 *             storageQuotaInGb: 1024,
 *             throughputInMibps: 24,
 *             protocols: "NFSv4.1",
 *             securityStyle: "unix",
 *             snapshotDirectoryVisible: false,
 *             exportPolicyRules: [{
 *                 ruleIndex: 1,
 *                 allowedClients: "0.0.0.0/0",
 *                 nfsv3Enabled: false,
 *                 nfsv41Enabled: true,
 *                 unixReadOnly: false,
 *                 unixReadWrite: true,
 *                 rootAccessEnabled: false,
 *             }],
 *             tags: {
 *                 foo: "bar",
 *             },
 *         },
 *         {
 *             name: `${prefix}-netapp-volume-2`,
 *             volumePath: "my-unique-file-path-2",
 *             serviceLevel: "Standard",
 *             capacityPoolId: examplePool.id,
 *             subnetId: exampleSubnet.id,
 *             proximityPlacementGroupId: examplePlacementGroup.id,
 *             volumeSpecName: "log",
 *             storageQuotaInGb: 1024,
 *             throughputInMibps: 24,
 *             protocols: "NFSv4.1",
 *             securityStyle: "unix",
 *             snapshotDirectoryVisible: false,
 *             exportPolicyRules: [{
 *                 ruleIndex: 1,
 *                 allowedClients: "0.0.0.0/0",
 *                 nfsv3Enabled: false,
 *                 nfsv41Enabled: true,
 *                 unixReadOnly: false,
 *                 unixReadWrite: true,
 *                 rootAccessEnabled: false,
 *             }],
 *             tags: {
 *                 foo: "bar",
 *             },
 *         },
 *         {
 *             name: `${prefix}-netapp-volume-3`,
 *             volumePath: "my-unique-file-path-3",
 *             serviceLevel: "Standard",
 *             capacityPoolId: examplePool.id,
 *             subnetId: exampleSubnet.id,
 *             proximityPlacementGroupId: examplePlacementGroup.id,
 *             volumeSpecName: "shared",
 *             storageQuotaInGb: 1024,
 *             throughputInMibps: 24,
 *             protocols: "NFSv4.1",
 *             securityStyle: "unix",
 *             snapshotDirectoryVisible: false,
 *             exportPolicyRules: [{
 *                 ruleIndex: 1,
 *                 allowedClients: "0.0.0.0/0",
 *                 nfsv3Enabled: false,
 *                 nfsv41Enabled: true,
 *                 unixReadOnly: false,
 *                 unixReadWrite: true,
 *                 rootAccessEnabled: false,
 *             }],
 *         },
 *     ],
 * }, {
 *     dependsOn: [
 *         exampleLinuxVirtualMachine,
 *         examplePlacementGroup,
 *     ],
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.NetApp` - 2025-06-01
 *
 * ## Import
 *
 * Application Volume Groups can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:netapp/volumeGroupSapHana:VolumeGroupSapHana example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mytest-rg/providers/Microsoft.NetApp/netAppAccounts/netapp-account-test/volumeGroups/netapp-volumegroup-test
 * ```
 */
export class VolumeGroupSapHana extends pulumi.CustomResource {
    /**
     * Get an existing VolumeGroupSapHana resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeGroupSapHanaState, opts?: pulumi.CustomResourceOptions): VolumeGroupSapHana {
        return new VolumeGroupSapHana(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:netapp/volumeGroupSapHana:VolumeGroupSapHana';

    /**
     * Returns true if the given object is an instance of VolumeGroupSapHana.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VolumeGroupSapHana {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VolumeGroupSapHana.__pulumiType;
    }

    /**
     * Name of the account where the application volume group belong to. Changing this forces a new Application Volume Group to be created and data will be lost.
     */
    public readonly accountName!: pulumi.Output<string>;
    /**
     * The SAP System ID, maximum 3 characters, e.g. `SH9`. Changing this forces a new Application Volume Group to be created and data will be lost.
     */
    public readonly applicationIdentifier!: pulumi.Output<string>;
    /**
     * Volume group description. Changing this forces a new Application Volume Group to be created and data will be lost.
     */
    public readonly groupDescription!: pulumi.Output<string>;
    /**
     * The Azure Region where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name which should be used for this Application Volume Group. Changing this forces a new Application Volume Group to be created and data will be lost.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the Resource Group where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * One or more `volume` blocks as defined below.
     */
    public readonly volumes!: pulumi.Output<outputs.netapp.VolumeGroupSapHanaVolume[]>;

    /**
     * Create a VolumeGroupSapHana resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeGroupSapHanaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeGroupSapHanaArgs | VolumeGroupSapHanaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeGroupSapHanaState | undefined;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["applicationIdentifier"] = state ? state.applicationIdentifier : undefined;
            resourceInputs["groupDescription"] = state ? state.groupDescription : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["volumes"] = state ? state.volumes : undefined;
        } else {
            const args = argsOrState as VolumeGroupSapHanaArgs | undefined;
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.applicationIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationIdentifier'");
            }
            if ((!args || args.groupDescription === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupDescription'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.volumes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumes'");
            }
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["applicationIdentifier"] = args ? args.applicationIdentifier : undefined;
            resourceInputs["groupDescription"] = args ? args.groupDescription : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["volumes"] = args ? args.volumes : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VolumeGroupSapHana.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VolumeGroupSapHana resources.
 */
export interface VolumeGroupSapHanaState {
    /**
     * Name of the account where the application volume group belong to. Changing this forces a new Application Volume Group to be created and data will be lost.
     */
    accountName?: pulumi.Input<string>;
    /**
     * The SAP System ID, maximum 3 characters, e.g. `SH9`. Changing this forces a new Application Volume Group to be created and data will be lost.
     */
    applicationIdentifier?: pulumi.Input<string>;
    /**
     * Volume group description. Changing this forces a new Application Volume Group to be created and data will be lost.
     */
    groupDescription?: pulumi.Input<string>;
    /**
     * The Azure Region where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
     */
    location?: pulumi.Input<string>;
    /**
     * The name which should be used for this Application Volume Group. Changing this forces a new Application Volume Group to be created and data will be lost.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * One or more `volume` blocks as defined below.
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.netapp.VolumeGroupSapHanaVolume>[]>;
}

/**
 * The set of arguments for constructing a VolumeGroupSapHana resource.
 */
export interface VolumeGroupSapHanaArgs {
    /**
     * Name of the account where the application volume group belong to. Changing this forces a new Application Volume Group to be created and data will be lost.
     */
    accountName: pulumi.Input<string>;
    /**
     * The SAP System ID, maximum 3 characters, e.g. `SH9`. Changing this forces a new Application Volume Group to be created and data will be lost.
     */
    applicationIdentifier: pulumi.Input<string>;
    /**
     * Volume group description. Changing this forces a new Application Volume Group to be created and data will be lost.
     */
    groupDescription: pulumi.Input<string>;
    /**
     * The Azure Region where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
     */
    location?: pulumi.Input<string>;
    /**
     * The name which should be used for this Application Volume Group. Changing this forces a new Application Volume Group to be created and data will be lost.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * One or more `volume` blocks as defined below.
     */
    volumes: pulumi.Input<pulumi.Input<inputs.netapp.VolumeGroupSapHanaVolume>[]>;
}
