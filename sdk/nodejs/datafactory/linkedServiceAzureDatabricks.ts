// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Linked Service (connection) between Azure Databricks and Azure Data Factory.
 *
 * ## Example Usage
 * ### With Managed Identity & New Cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "East US"});
 * //Create a Linked Service using managed identity and new cluster config
 * const exampleFactory = new azure.datafactory.Factory("exampleFactory", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * //Create a databricks instance
 * const exampleWorkspace = new azure.databricks.Workspace("exampleWorkspace", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     sku: "standard",
 * });
 * const msiLinked = new azure.datafactory.LinkedServiceAzureDatabricks("msiLinked", {
 *     dataFactoryId: exampleFactory.id,
 *     description: "ADB Linked Service via MSI",
 *     adbDomain: pulumi.interpolate`https://${exampleWorkspace.workspaceUrl}`,
 *     msiWorkSpaceResourceId: exampleWorkspace.id,
 *     newClusterConfig: {
 *         nodeType: "Standard_NC12",
 *         clusterVersion: "5.5.x-gpu-scala2.11",
 *         minNumberOfWorkers: 1,
 *         maxNumberOfWorkers: 5,
 *         driverNodeType: "Standard_NC12",
 *         logDestination: "dbfs:/logs",
 *         customTags: {
 *             custom_tag1: "sct_value_1",
 *             custom_tag2: "sct_value_2",
 *         },
 *         sparkConfig: {
 *             config1: "value1",
 *             config2: "value2",
 *         },
 *         sparkEnvironmentVariables: {
 *             envVar1: "value1",
 *             envVar2: "value2",
 *         },
 *         initScripts: [
 *             "init.sh",
 *             "init2.sh",
 *         ],
 *     },
 * });
 * ```
 * ### With Access Token & Existing Cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "East US"});
 * //Link to an existing cluster via access token
 * const exampleFactory = new azure.datafactory.Factory("exampleFactory", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * //Create a databricks instance
 * const exampleWorkspace = new azure.databricks.Workspace("exampleWorkspace", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     sku: "standard",
 * });
 * const atLinked = new azure.datafactory.LinkedServiceAzureDatabricks("atLinked", {
 *     dataFactoryId: exampleFactory.id,
 *     description: "ADB Linked Service via Access Token",
 *     existingClusterId: "0308-201146-sly615",
 *     accessToken: "SomeDatabricksAccessToken",
 *     adbDomain: pulumi.interpolate`https://${exampleWorkspace.workspaceUrl}`,
 * });
 * ```
 *
 * ## Import
 *
 * Data Factory Linked Services can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:datafactory/linkedServiceAzureDatabricks:LinkedServiceAzureDatabricks example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/linkedservices/example
 * ```
 */
export class LinkedServiceAzureDatabricks extends pulumi.CustomResource {
    /**
     * Get an existing LinkedServiceAzureDatabricks resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LinkedServiceAzureDatabricksState, opts?: pulumi.CustomResourceOptions): LinkedServiceAzureDatabricks {
        return new LinkedServiceAzureDatabricks(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:datafactory/linkedServiceAzureDatabricks:LinkedServiceAzureDatabricks';

    /**
     * Returns true if the given object is an instance of LinkedServiceAzureDatabricks.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LinkedServiceAzureDatabricks {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LinkedServiceAzureDatabricks.__pulumiType;
    }

    /**
     * Authenticate to ADB via an access token.
     */
    public readonly accessToken!: pulumi.Output<string | undefined>;
    /**
     * The domain URL of the databricks instance.
     */
    public readonly adbDomain!: pulumi.Output<string>;
    /**
     * A map of additional properties to associate with the Data Factory Linked Service.
     */
    public readonly additionalProperties!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * List of tags that can be used for describing the Data Factory Linked Service.
     */
    public readonly annotations!: pulumi.Output<string[] | undefined>;
    /**
     * The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
     */
    public readonly dataFactoryId!: pulumi.Output<string>;
    /**
     * The description for the Data Factory Linked Service.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The clusterId of an existing cluster within the linked ADB instance.
     */
    public readonly existingClusterId!: pulumi.Output<string | undefined>;
    /**
     * Leverages an instance pool within the linked ADB instance as one `instancePool` block defined below.
     */
    public readonly instancePool!: pulumi.Output<outputs.datafactory.LinkedServiceAzureDatabricksInstancePool | undefined>;
    /**
     * The integration runtime reference to associate with the Data Factory Linked Service.
     */
    public readonly integrationRuntimeName!: pulumi.Output<string | undefined>;
    /**
     * Authenticate to ADB via Azure Key Vault Linked Service as defined in the `keyVaultPassword` block below.
     */
    public readonly keyVaultPassword!: pulumi.Output<outputs.datafactory.LinkedServiceAzureDatabricksKeyVaultPassword | undefined>;
    /**
     * Authenticate to ADB via managed service identity.
     */
    public readonly msiWorkSpaceResourceId!: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Creates new clusters within the linked ADB instance as defined in the `newClusterConfig` block below.
     */
    public readonly newClusterConfig!: pulumi.Output<outputs.datafactory.LinkedServiceAzureDatabricksNewClusterConfig | undefined>;
    /**
     * A map of parameters to associate with the Data Factory Linked Service.
     */
    public readonly parameters!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a LinkedServiceAzureDatabricks resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LinkedServiceAzureDatabricksArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LinkedServiceAzureDatabricksArgs | LinkedServiceAzureDatabricksState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LinkedServiceAzureDatabricksState | undefined;
            resourceInputs["accessToken"] = state ? state.accessToken : undefined;
            resourceInputs["adbDomain"] = state ? state.adbDomain : undefined;
            resourceInputs["additionalProperties"] = state ? state.additionalProperties : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["dataFactoryId"] = state ? state.dataFactoryId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["existingClusterId"] = state ? state.existingClusterId : undefined;
            resourceInputs["instancePool"] = state ? state.instancePool : undefined;
            resourceInputs["integrationRuntimeName"] = state ? state.integrationRuntimeName : undefined;
            resourceInputs["keyVaultPassword"] = state ? state.keyVaultPassword : undefined;
            resourceInputs["msiWorkSpaceResourceId"] = state ? state.msiWorkSpaceResourceId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["newClusterConfig"] = state ? state.newClusterConfig : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
        } else {
            const args = argsOrState as LinkedServiceAzureDatabricksArgs | undefined;
            if ((!args || args.adbDomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adbDomain'");
            }
            if ((!args || args.dataFactoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataFactoryId'");
            }
            resourceInputs["accessToken"] = args?.accessToken ? pulumi.secret(args.accessToken) : undefined;
            resourceInputs["adbDomain"] = args ? args.adbDomain : undefined;
            resourceInputs["additionalProperties"] = args ? args.additionalProperties : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["dataFactoryId"] = args ? args.dataFactoryId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["existingClusterId"] = args ? args.existingClusterId : undefined;
            resourceInputs["instancePool"] = args ? args.instancePool : undefined;
            resourceInputs["integrationRuntimeName"] = args ? args.integrationRuntimeName : undefined;
            resourceInputs["keyVaultPassword"] = args ? args.keyVaultPassword : undefined;
            resourceInputs["msiWorkSpaceResourceId"] = args ? args.msiWorkSpaceResourceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["newClusterConfig"] = args ? args.newClusterConfig : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LinkedServiceAzureDatabricks.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LinkedServiceAzureDatabricks resources.
 */
export interface LinkedServiceAzureDatabricksState {
    /**
     * Authenticate to ADB via an access token.
     */
    accessToken?: pulumi.Input<string>;
    /**
     * The domain URL of the databricks instance.
     */
    adbDomain?: pulumi.Input<string>;
    /**
     * A map of additional properties to associate with the Data Factory Linked Service.
     */
    additionalProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of tags that can be used for describing the Data Factory Linked Service.
     */
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
     */
    dataFactoryId?: pulumi.Input<string>;
    /**
     * The description for the Data Factory Linked Service.
     */
    description?: pulumi.Input<string>;
    /**
     * The clusterId of an existing cluster within the linked ADB instance.
     */
    existingClusterId?: pulumi.Input<string>;
    /**
     * Leverages an instance pool within the linked ADB instance as one `instancePool` block defined below.
     */
    instancePool?: pulumi.Input<inputs.datafactory.LinkedServiceAzureDatabricksInstancePool>;
    /**
     * The integration runtime reference to associate with the Data Factory Linked Service.
     */
    integrationRuntimeName?: pulumi.Input<string>;
    /**
     * Authenticate to ADB via Azure Key Vault Linked Service as defined in the `keyVaultPassword` block below.
     */
    keyVaultPassword?: pulumi.Input<inputs.datafactory.LinkedServiceAzureDatabricksKeyVaultPassword>;
    /**
     * Authenticate to ADB via managed service identity.
     */
    msiWorkSpaceResourceId?: pulumi.Input<string>;
    /**
     * Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     */
    name?: pulumi.Input<string>;
    /**
     * Creates new clusters within the linked ADB instance as defined in the `newClusterConfig` block below.
     */
    newClusterConfig?: pulumi.Input<inputs.datafactory.LinkedServiceAzureDatabricksNewClusterConfig>;
    /**
     * A map of parameters to associate with the Data Factory Linked Service.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a LinkedServiceAzureDatabricks resource.
 */
export interface LinkedServiceAzureDatabricksArgs {
    /**
     * Authenticate to ADB via an access token.
     */
    accessToken?: pulumi.Input<string>;
    /**
     * The domain URL of the databricks instance.
     */
    adbDomain: pulumi.Input<string>;
    /**
     * A map of additional properties to associate with the Data Factory Linked Service.
     */
    additionalProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of tags that can be used for describing the Data Factory Linked Service.
     */
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
     */
    dataFactoryId: pulumi.Input<string>;
    /**
     * The description for the Data Factory Linked Service.
     */
    description?: pulumi.Input<string>;
    /**
     * The clusterId of an existing cluster within the linked ADB instance.
     */
    existingClusterId?: pulumi.Input<string>;
    /**
     * Leverages an instance pool within the linked ADB instance as one `instancePool` block defined below.
     */
    instancePool?: pulumi.Input<inputs.datafactory.LinkedServiceAzureDatabricksInstancePool>;
    /**
     * The integration runtime reference to associate with the Data Factory Linked Service.
     */
    integrationRuntimeName?: pulumi.Input<string>;
    /**
     * Authenticate to ADB via Azure Key Vault Linked Service as defined in the `keyVaultPassword` block below.
     */
    keyVaultPassword?: pulumi.Input<inputs.datafactory.LinkedServiceAzureDatabricksKeyVaultPassword>;
    /**
     * Authenticate to ADB via managed service identity.
     */
    msiWorkSpaceResourceId?: pulumi.Input<string>;
    /**
     * Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     */
    name?: pulumi.Input<string>;
    /**
     * Creates new clusters within the linked ADB instance as defined in the `newClusterConfig` block below.
     */
    newClusterConfig?: pulumi.Input<inputs.datafactory.LinkedServiceAzureDatabricksNewClusterConfig>;
    /**
     * A map of parameters to associate with the Data Factory Linked Service.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
