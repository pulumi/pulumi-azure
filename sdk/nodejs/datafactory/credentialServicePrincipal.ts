// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manage a Data Factory Service Principal credential resource. These resources are used by Data Factory to access data sources.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "westeurope",
 * });
 * const exampleFactory = new azure.datafactory.Factory("example", {
 *     name: "example",
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const exampleKeyVault = new azure.keyvault.KeyVault("example", {
 *     name: "example",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "premium",
 *     softDeleteRetentionDays: 7,
 *     accessPolicies: [{
 *         tenantId: current.then(current => current.tenantId),
 *         objectId: current.then(current => current.objectId),
 *         keyPermissions: [
 *             "Create",
 *             "Get",
 *         ],
 *         secretPermissions: [
 *             "Set",
 *             "Get",
 *             "Delete",
 *             "Purge",
 *             "Recover",
 *         ],
 *     }],
 * });
 * const exampleSecret = new azure.keyvault.Secret("example", {
 *     name: "example",
 *     value: "example-secret",
 *     keyVaultId: exampleKeyVault.id,
 * });
 * const exampleLinkedServiceKeyVault = new azure.datafactory.LinkedServiceKeyVault("example", {
 *     name: "example",
 *     dataFactoryId: exampleFactory.id,
 *     keyVaultId: exampleKeyVault.id,
 * });
 * const exampleCredentialServicePrincipal = new azure.datafactory.CredentialServicePrincipal("example", {
 *     name: "example",
 *     description: "example description",
 *     dataFactoryId: exampleFactory.id,
 *     tenantId: current.then(current => current.tenantId),
 *     servicePrincipalId: current.then(current => current.clientId),
 *     servicePrincipalKey: {
 *         linkedServiceName: exampleLinkedServiceKeyVault.name,
 *         secretName: exampleSecret.name,
 *         secretVersion: exampleSecret.version,
 *     },
 *     annotations: [
 *         "1",
 *         "2",
 *     ],
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.DataFactory`: 2018-06-01
 *
 * ## Import
 *
 * Data Factory Credentials can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:datafactory/credentialServicePrincipal:CredentialServicePrincipal example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-resources/providers/Microsoft.DataFactory/factories/example/credentials/credential1
 * ```
 */
export class CredentialServicePrincipal extends pulumi.CustomResource {
    /**
     * Get an existing CredentialServicePrincipal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CredentialServicePrincipalState, opts?: pulumi.CustomResourceOptions): CredentialServicePrincipal {
        return new CredentialServicePrincipal(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:datafactory/credentialServicePrincipal:CredentialServicePrincipal';

    /**
     * Returns true if the given object is an instance of CredentialServicePrincipal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CredentialServicePrincipal {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CredentialServicePrincipal.__pulumiType;
    }

    /**
     * List of tags that can be used for describing the Data Factory Credential.
     */
    public readonly annotations!: pulumi.Output<string[] | undefined>;
    /**
     * The Data Factory ID in which to associate the Credential with. Changing this forces a new resource.
     */
    public readonly dataFactoryId!: pulumi.Output<string>;
    /**
     * The description for the Data Factory Credential.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of the Credential. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Client ID of the Service Principal.
     */
    public readonly servicePrincipalId!: pulumi.Output<string>;
    /**
     * A `servicePrincipalKey` block as defined below.
     */
    public readonly servicePrincipalKey!: pulumi.Output<outputs.datafactory.CredentialServicePrincipalServicePrincipalKey | undefined>;
    /**
     * The Tenant ID of the Service Principal.
     */
    public readonly tenantId!: pulumi.Output<string>;

    /**
     * Create a CredentialServicePrincipal resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CredentialServicePrincipalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CredentialServicePrincipalArgs | CredentialServicePrincipalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CredentialServicePrincipalState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["dataFactoryId"] = state ? state.dataFactoryId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["servicePrincipalId"] = state ? state.servicePrincipalId : undefined;
            resourceInputs["servicePrincipalKey"] = state ? state.servicePrincipalKey : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
        } else {
            const args = argsOrState as CredentialServicePrincipalArgs | undefined;
            if ((!args || args.dataFactoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataFactoryId'");
            }
            if ((!args || args.servicePrincipalId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicePrincipalId'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["dataFactoryId"] = args ? args.dataFactoryId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["servicePrincipalId"] = args ? args.servicePrincipalId : undefined;
            resourceInputs["servicePrincipalKey"] = args ? args.servicePrincipalKey : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CredentialServicePrincipal.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CredentialServicePrincipal resources.
 */
export interface CredentialServicePrincipalState {
    /**
     * List of tags that can be used for describing the Data Factory Credential.
     */
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Data Factory ID in which to associate the Credential with. Changing this forces a new resource.
     */
    dataFactoryId?: pulumi.Input<string>;
    /**
     * The description for the Data Factory Credential.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the name of the Credential. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The Client ID of the Service Principal.
     */
    servicePrincipalId?: pulumi.Input<string>;
    /**
     * A `servicePrincipalKey` block as defined below.
     */
    servicePrincipalKey?: pulumi.Input<inputs.datafactory.CredentialServicePrincipalServicePrincipalKey>;
    /**
     * The Tenant ID of the Service Principal.
     */
    tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CredentialServicePrincipal resource.
 */
export interface CredentialServicePrincipalArgs {
    /**
     * List of tags that can be used for describing the Data Factory Credential.
     */
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Data Factory ID in which to associate the Credential with. Changing this forces a new resource.
     */
    dataFactoryId: pulumi.Input<string>;
    /**
     * The description for the Data Factory Credential.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the name of the Credential. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The Client ID of the Service Principal.
     */
    servicePrincipalId: pulumi.Input<string>;
    /**
     * A `servicePrincipalKey` block as defined below.
     */
    servicePrincipalKey?: pulumi.Input<inputs.datafactory.CredentialServicePrincipalServicePrincipalKey>;
    /**
     * The Tenant ID of the Service Principal.
     */
    tenantId: pulumi.Input<string>;
}
