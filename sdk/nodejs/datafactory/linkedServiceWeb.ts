// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Linked Service (connection) between a Web Server and Azure Data Factory.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleFactory = new azure.datafactory.Factory("example", {
 *     name: "example",
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const exampleLinkedServiceWeb = new azure.datafactory.LinkedServiceWeb("example", {
 *     name: "example",
 *     dataFactoryId: exampleFactory.id,
 *     authenticationType: "Anonymous",
 *     url: "http://www.bing.com",
 * });
 * ```
 *
 * ## Import
 *
 * Data Factory Linked Service's can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:datafactory/linkedServiceWeb:LinkedServiceWeb example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/linkedservices/example
 * ```
 */
export class LinkedServiceWeb extends pulumi.CustomResource {
    /**
     * Get an existing LinkedServiceWeb resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LinkedServiceWebState, opts?: pulumi.CustomResourceOptions): LinkedServiceWeb {
        return new LinkedServiceWeb(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:datafactory/linkedServiceWeb:LinkedServiceWeb';

    /**
     * Returns true if the given object is an instance of LinkedServiceWeb.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LinkedServiceWeb {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LinkedServiceWeb.__pulumiType;
    }

    /**
     * A map of additional properties to associate with the Data Factory Linked Service.
     *
     * The following supported arguments are specific to Web Linked Service:
     */
    declare public readonly additionalProperties: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * List of tags that can be used for describing the Data Factory Linked Service.
     */
    declare public readonly annotations: pulumi.Output<string[] | undefined>;
    /**
     * The type of authentication used to connect to the web table source. Valid options are `Anonymous`, `Basic` and `ClientCertificate`.
     */
    declare public readonly authenticationType: pulumi.Output<string>;
    /**
     * The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
     */
    declare public readonly dataFactoryId: pulumi.Output<string>;
    /**
     * The description for the Data Factory Linked Service.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The integration runtime reference to associate with the Data Factory Linked Service.
     */
    declare public readonly integrationRuntimeName: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * A map of parameters to associate with the Data Factory Linked Service.
     */
    declare public readonly parameters: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The password for Basic authentication. Required if `authenticationType` sets to `Basic`.
     */
    declare public readonly password: pulumi.Output<string | undefined>;
    /**
     * The URL of the web service endpoint (e.g. <https://www.microsoft.com>).
     */
    declare public readonly url: pulumi.Output<string>;
    /**
     * The username for Basic authentication. Required if `authenticationType` sets to `Basic`.
     */
    declare public readonly username: pulumi.Output<string | undefined>;

    /**
     * Create a LinkedServiceWeb resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LinkedServiceWebArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LinkedServiceWebArgs | LinkedServiceWebState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LinkedServiceWebState | undefined;
            resourceInputs["additionalProperties"] = state?.additionalProperties;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["authenticationType"] = state?.authenticationType;
            resourceInputs["dataFactoryId"] = state?.dataFactoryId;
            resourceInputs["description"] = state?.description;
            resourceInputs["integrationRuntimeName"] = state?.integrationRuntimeName;
            resourceInputs["name"] = state?.name;
            resourceInputs["parameters"] = state?.parameters;
            resourceInputs["password"] = state?.password;
            resourceInputs["url"] = state?.url;
            resourceInputs["username"] = state?.username;
        } else {
            const args = argsOrState as LinkedServiceWebArgs | undefined;
            if (args?.authenticationType === undefined && !opts.urn) {
                throw new Error("Missing required property 'authenticationType'");
            }
            if (args?.dataFactoryId === undefined && !opts.urn) {
                throw new Error("Missing required property 'dataFactoryId'");
            }
            if (args?.url === undefined && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["additionalProperties"] = args?.additionalProperties;
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["authenticationType"] = args?.authenticationType;
            resourceInputs["dataFactoryId"] = args?.dataFactoryId;
            resourceInputs["description"] = args?.description;
            resourceInputs["integrationRuntimeName"] = args?.integrationRuntimeName;
            resourceInputs["name"] = args?.name;
            resourceInputs["parameters"] = args?.parameters;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["url"] = args?.url;
            resourceInputs["username"] = args?.username;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LinkedServiceWeb.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LinkedServiceWeb resources.
 */
export interface LinkedServiceWebState {
    /**
     * A map of additional properties to associate with the Data Factory Linked Service.
     *
     * The following supported arguments are specific to Web Linked Service:
     */
    additionalProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of tags that can be used for describing the Data Factory Linked Service.
     */
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of authentication used to connect to the web table source. Valid options are `Anonymous`, `Basic` and `ClientCertificate`.
     */
    authenticationType?: pulumi.Input<string>;
    /**
     * The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
     */
    dataFactoryId?: pulumi.Input<string>;
    /**
     * The description for the Data Factory Linked Service.
     */
    description?: pulumi.Input<string>;
    /**
     * The integration runtime reference to associate with the Data Factory Linked Service.
     */
    integrationRuntimeName?: pulumi.Input<string>;
    /**
     * Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     */
    name?: pulumi.Input<string>;
    /**
     * A map of parameters to associate with the Data Factory Linked Service.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The password for Basic authentication. Required if `authenticationType` sets to `Basic`.
     */
    password?: pulumi.Input<string>;
    /**
     * The URL of the web service endpoint (e.g. <https://www.microsoft.com>).
     */
    url?: pulumi.Input<string>;
    /**
     * The username for Basic authentication. Required if `authenticationType` sets to `Basic`.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LinkedServiceWeb resource.
 */
export interface LinkedServiceWebArgs {
    /**
     * A map of additional properties to associate with the Data Factory Linked Service.
     *
     * The following supported arguments are specific to Web Linked Service:
     */
    additionalProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of tags that can be used for describing the Data Factory Linked Service.
     */
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of authentication used to connect to the web table source. Valid options are `Anonymous`, `Basic` and `ClientCertificate`.
     */
    authenticationType: pulumi.Input<string>;
    /**
     * The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
     */
    dataFactoryId: pulumi.Input<string>;
    /**
     * The description for the Data Factory Linked Service.
     */
    description?: pulumi.Input<string>;
    /**
     * The integration runtime reference to associate with the Data Factory Linked Service.
     */
    integrationRuntimeName?: pulumi.Input<string>;
    /**
     * Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     */
    name?: pulumi.Input<string>;
    /**
     * A map of parameters to associate with the Data Factory Linked Service.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The password for Basic authentication. Required if `authenticationType` sets to `Basic`.
     */
    password?: pulumi.Input<string>;
    /**
     * The URL of the web service endpoint (e.g. <https://www.microsoft.com>).
     */
    url: pulumi.Input<string>;
    /**
     * The username for Basic authentication. Required if `authenticationType` sets to `Basic`.
     */
    username?: pulumi.Input<string>;
}
