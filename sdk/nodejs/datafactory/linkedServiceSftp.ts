// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Linked Service (connection) between a SFTP Server and Azure Data Factory.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleFactory = new azure.datafactory.Factory("example", {
 *     name: "example",
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const exampleLinkedServiceSftp = new azure.datafactory.LinkedServiceSftp("example", {
 *     name: "example",
 *     dataFactoryId: exampleFactory.id,
 *     authenticationType: "Basic",
 *     host: "http://www.bing.com",
 *     port: 22,
 *     username: "foo",
 *     password: "bar",
 * });
 * ```
 *
 * ## Import
 *
 * Data Factory Linked Service's can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:datafactory/linkedServiceSftp:LinkedServiceSftp example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/linkedservices/example
 * ```
 */
export class LinkedServiceSftp extends pulumi.CustomResource {
    /**
     * Get an existing LinkedServiceSftp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LinkedServiceSftpState, opts?: pulumi.CustomResourceOptions): LinkedServiceSftp {
        return new LinkedServiceSftp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:datafactory/linkedServiceSftp:LinkedServiceSftp';

    /**
     * Returns true if the given object is an instance of LinkedServiceSftp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LinkedServiceSftp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LinkedServiceSftp.__pulumiType;
    }

    /**
     * A map of additional properties to associate with the Data Factory Linked Service.
     *
     * The following supported arguments are specific to SFTP Linked Service:
     */
    public readonly additionalProperties!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * List of tags that can be used for describing the Data Factory Linked Service.
     */
    public readonly annotations!: pulumi.Output<string[] | undefined>;
    /**
     * The type of authentication used to connect to the SFTP server. Valid options are `MultiFactor`, `Basic` and `SshPublicKey`.
     */
    public readonly authenticationType!: pulumi.Output<string>;
    /**
     * The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
     */
    public readonly dataFactoryId!: pulumi.Output<string>;
    /**
     * The description for the Data Factory Linked Service.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The SFTP server hostname.
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * The host key fingerprint of the SFTP server.
     */
    public readonly hostKeyFingerprint!: pulumi.Output<string | undefined>;
    /**
     * The name of the integration runtime to associate with the Data Factory Linked Service.
     */
    public readonly integrationRuntimeName!: pulumi.Output<string | undefined>;
    /**
     * A `keyVaultPassword` block as defined below.
     *
     * > **Note:** Either `password` or `keyVaultPassword` is required when `authenticationType` is set to `Basic`.
     */
    public readonly keyVaultPasswords!: pulumi.Output<outputs.datafactory.LinkedServiceSftpKeyVaultPassword[] | undefined>;
    /**
     * A `keyVaultPrivateKeyContentBase64` block as defined below.
     */
    public readonly keyVaultPrivateKeyContentBase64!: pulumi.Output<outputs.datafactory.LinkedServiceSftpKeyVaultPrivateKeyContentBase64 | undefined>;
    /**
     * A `keyVaultPrivateKeyPassphrase` block as defined below.
     *
     * > **Note:** One of `privateKeyContentBase64` or `privateKeyPath` (or their Key Vault equivalent) is required when `authenticationType` is set to `SshPublicKey`.
     */
    public readonly keyVaultPrivateKeyPassphrase!: pulumi.Output<outputs.datafactory.LinkedServiceSftpKeyVaultPrivateKeyPassphrase | undefined>;
    /**
     * Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A map of parameters to associate with the Data Factory Linked Service.
     */
    public readonly parameters!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Password to log on to the SFTP Server for Basic Authentication.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The TCP port number that the SFTP server uses to listen for client connection. Default value is 22.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * The Base64 encoded private key content in OpenSSH format used to log on to the SFTP server.
     */
    public readonly privateKeyContentBase64!: pulumi.Output<string | undefined>;
    /**
     * The passphrase for the private key if the key is encrypted.
     */
    public readonly privateKeyPassphrase!: pulumi.Output<string | undefined>;
    /**
     * The absolute path to the private key file that the self-hosted integration runtime can access.
     *
     * > **Note:** `privateKeyPath` only applies when using a self-hosted integration runtime (instead of the default Azure provided runtime), as indicated by supplying a value for `integrationRuntimeName`.
     */
    public readonly privateKeyPath!: pulumi.Output<string | undefined>;
    /**
     * Whether to validate host key fingerprint while connecting. If set to `false`, `hostKeyFingerprint` must also be set.
     */
    public readonly skipHostKeyValidation!: pulumi.Output<boolean | undefined>;
    /**
     * The username used to log on to the SFTP server.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a LinkedServiceSftp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LinkedServiceSftpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LinkedServiceSftpArgs | LinkedServiceSftpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LinkedServiceSftpState | undefined;
            resourceInputs["additionalProperties"] = state ? state.additionalProperties : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["authenticationType"] = state ? state.authenticationType : undefined;
            resourceInputs["dataFactoryId"] = state ? state.dataFactoryId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["hostKeyFingerprint"] = state ? state.hostKeyFingerprint : undefined;
            resourceInputs["integrationRuntimeName"] = state ? state.integrationRuntimeName : undefined;
            resourceInputs["keyVaultPasswords"] = state ? state.keyVaultPasswords : undefined;
            resourceInputs["keyVaultPrivateKeyContentBase64"] = state ? state.keyVaultPrivateKeyContentBase64 : undefined;
            resourceInputs["keyVaultPrivateKeyPassphrase"] = state ? state.keyVaultPrivateKeyPassphrase : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["privateKeyContentBase64"] = state ? state.privateKeyContentBase64 : undefined;
            resourceInputs["privateKeyPassphrase"] = state ? state.privateKeyPassphrase : undefined;
            resourceInputs["privateKeyPath"] = state ? state.privateKeyPath : undefined;
            resourceInputs["skipHostKeyValidation"] = state ? state.skipHostKeyValidation : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as LinkedServiceSftpArgs | undefined;
            if ((!args || args.authenticationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authenticationType'");
            }
            if ((!args || args.dataFactoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataFactoryId'");
            }
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["additionalProperties"] = args ? args.additionalProperties : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["authenticationType"] = args ? args.authenticationType : undefined;
            resourceInputs["dataFactoryId"] = args ? args.dataFactoryId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["hostKeyFingerprint"] = args ? args.hostKeyFingerprint : undefined;
            resourceInputs["integrationRuntimeName"] = args ? args.integrationRuntimeName : undefined;
            resourceInputs["keyVaultPasswords"] = args ? args.keyVaultPasswords : undefined;
            resourceInputs["keyVaultPrivateKeyContentBase64"] = args ? args.keyVaultPrivateKeyContentBase64 : undefined;
            resourceInputs["keyVaultPrivateKeyPassphrase"] = args ? args.keyVaultPrivateKeyPassphrase : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["privateKeyContentBase64"] = args?.privateKeyContentBase64 ? pulumi.secret(args.privateKeyContentBase64) : undefined;
            resourceInputs["privateKeyPassphrase"] = args?.privateKeyPassphrase ? pulumi.secret(args.privateKeyPassphrase) : undefined;
            resourceInputs["privateKeyPath"] = args ? args.privateKeyPath : undefined;
            resourceInputs["skipHostKeyValidation"] = args ? args.skipHostKeyValidation : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "privateKeyContentBase64", "privateKeyPassphrase"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LinkedServiceSftp.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LinkedServiceSftp resources.
 */
export interface LinkedServiceSftpState {
    /**
     * A map of additional properties to associate with the Data Factory Linked Service.
     *
     * The following supported arguments are specific to SFTP Linked Service:
     */
    additionalProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of tags that can be used for describing the Data Factory Linked Service.
     */
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of authentication used to connect to the SFTP server. Valid options are `MultiFactor`, `Basic` and `SshPublicKey`.
     */
    authenticationType?: pulumi.Input<string>;
    /**
     * The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
     */
    dataFactoryId?: pulumi.Input<string>;
    /**
     * The description for the Data Factory Linked Service.
     */
    description?: pulumi.Input<string>;
    /**
     * The SFTP server hostname.
     */
    host?: pulumi.Input<string>;
    /**
     * The host key fingerprint of the SFTP server.
     */
    hostKeyFingerprint?: pulumi.Input<string>;
    /**
     * The name of the integration runtime to associate with the Data Factory Linked Service.
     */
    integrationRuntimeName?: pulumi.Input<string>;
    /**
     * A `keyVaultPassword` block as defined below.
     *
     * > **Note:** Either `password` or `keyVaultPassword` is required when `authenticationType` is set to `Basic`.
     */
    keyVaultPasswords?: pulumi.Input<pulumi.Input<inputs.datafactory.LinkedServiceSftpKeyVaultPassword>[]>;
    /**
     * A `keyVaultPrivateKeyContentBase64` block as defined below.
     */
    keyVaultPrivateKeyContentBase64?: pulumi.Input<inputs.datafactory.LinkedServiceSftpKeyVaultPrivateKeyContentBase64>;
    /**
     * A `keyVaultPrivateKeyPassphrase` block as defined below.
     *
     * > **Note:** One of `privateKeyContentBase64` or `privateKeyPath` (or their Key Vault equivalent) is required when `authenticationType` is set to `SshPublicKey`.
     */
    keyVaultPrivateKeyPassphrase?: pulumi.Input<inputs.datafactory.LinkedServiceSftpKeyVaultPrivateKeyPassphrase>;
    /**
     * Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     */
    name?: pulumi.Input<string>;
    /**
     * A map of parameters to associate with the Data Factory Linked Service.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Password to log on to the SFTP Server for Basic Authentication.
     */
    password?: pulumi.Input<string>;
    /**
     * The TCP port number that the SFTP server uses to listen for client connection. Default value is 22.
     */
    port?: pulumi.Input<number>;
    /**
     * The Base64 encoded private key content in OpenSSH format used to log on to the SFTP server.
     */
    privateKeyContentBase64?: pulumi.Input<string>;
    /**
     * The passphrase for the private key if the key is encrypted.
     */
    privateKeyPassphrase?: pulumi.Input<string>;
    /**
     * The absolute path to the private key file that the self-hosted integration runtime can access.
     *
     * > **Note:** `privateKeyPath` only applies when using a self-hosted integration runtime (instead of the default Azure provided runtime), as indicated by supplying a value for `integrationRuntimeName`.
     */
    privateKeyPath?: pulumi.Input<string>;
    /**
     * Whether to validate host key fingerprint while connecting. If set to `false`, `hostKeyFingerprint` must also be set.
     */
    skipHostKeyValidation?: pulumi.Input<boolean>;
    /**
     * The username used to log on to the SFTP server.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LinkedServiceSftp resource.
 */
export interface LinkedServiceSftpArgs {
    /**
     * A map of additional properties to associate with the Data Factory Linked Service.
     *
     * The following supported arguments are specific to SFTP Linked Service:
     */
    additionalProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of tags that can be used for describing the Data Factory Linked Service.
     */
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of authentication used to connect to the SFTP server. Valid options are `MultiFactor`, `Basic` and `SshPublicKey`.
     */
    authenticationType: pulumi.Input<string>;
    /**
     * The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
     */
    dataFactoryId: pulumi.Input<string>;
    /**
     * The description for the Data Factory Linked Service.
     */
    description?: pulumi.Input<string>;
    /**
     * The SFTP server hostname.
     */
    host: pulumi.Input<string>;
    /**
     * The host key fingerprint of the SFTP server.
     */
    hostKeyFingerprint?: pulumi.Input<string>;
    /**
     * The name of the integration runtime to associate with the Data Factory Linked Service.
     */
    integrationRuntimeName?: pulumi.Input<string>;
    /**
     * A `keyVaultPassword` block as defined below.
     *
     * > **Note:** Either `password` or `keyVaultPassword` is required when `authenticationType` is set to `Basic`.
     */
    keyVaultPasswords?: pulumi.Input<pulumi.Input<inputs.datafactory.LinkedServiceSftpKeyVaultPassword>[]>;
    /**
     * A `keyVaultPrivateKeyContentBase64` block as defined below.
     */
    keyVaultPrivateKeyContentBase64?: pulumi.Input<inputs.datafactory.LinkedServiceSftpKeyVaultPrivateKeyContentBase64>;
    /**
     * A `keyVaultPrivateKeyPassphrase` block as defined below.
     *
     * > **Note:** One of `privateKeyContentBase64` or `privateKeyPath` (or their Key Vault equivalent) is required when `authenticationType` is set to `SshPublicKey`.
     */
    keyVaultPrivateKeyPassphrase?: pulumi.Input<inputs.datafactory.LinkedServiceSftpKeyVaultPrivateKeyPassphrase>;
    /**
     * Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     */
    name?: pulumi.Input<string>;
    /**
     * A map of parameters to associate with the Data Factory Linked Service.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Password to log on to the SFTP Server for Basic Authentication.
     */
    password?: pulumi.Input<string>;
    /**
     * The TCP port number that the SFTP server uses to listen for client connection. Default value is 22.
     */
    port: pulumi.Input<number>;
    /**
     * The Base64 encoded private key content in OpenSSH format used to log on to the SFTP server.
     */
    privateKeyContentBase64?: pulumi.Input<string>;
    /**
     * The passphrase for the private key if the key is encrypted.
     */
    privateKeyPassphrase?: pulumi.Input<string>;
    /**
     * The absolute path to the private key file that the self-hosted integration runtime can access.
     *
     * > **Note:** `privateKeyPath` only applies when using a self-hosted integration runtime (instead of the default Azure provided runtime), as indicated by supplying a value for `integrationRuntimeName`.
     */
    privateKeyPath?: pulumi.Input<string>;
    /**
     * Whether to validate host key fingerprint while connecting. If set to `false`, `hostKeyFingerprint` must also be set.
     */
    skipHostKeyValidation?: pulumi.Input<boolean>;
    /**
     * The username used to log on to the SFTP server.
     */
    username: pulumi.Input<string>;
}
