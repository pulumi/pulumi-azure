// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Manages a Data Flow inside an Azure Data Factory.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleFactory = new azure.datafactory.Factory("exampleFactory", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * const exampleLinkedCustomService = new azure.datafactory.LinkedCustomService("exampleLinkedCustomService", {
 *     dataFactoryId: exampleFactory.id,
 *     type: "AzureBlobStorage",
 *     typePropertiesJson: pulumi.interpolate`{
 *   "connectionString": "${exampleAccount.primaryConnectionString}"
 * }
 * `,
 * });
 * const example1 = new azure.datafactory.DatasetJson("example1", {
 *     dataFactoryId: exampleFactory.id,
 *     linkedServiceName: exampleLinkedCustomService.name,
 *     azureBlobStorageLocation: {
 *         container: "container",
 *         path: "foo/bar/",
 *         filename: "foo.txt",
 *     },
 *     encoding: "UTF-8",
 * });
 * const example2 = new azure.datafactory.DatasetJson("example2", {
 *     dataFactoryId: exampleFactory.id,
 *     linkedServiceName: exampleLinkedCustomService.name,
 *     azureBlobStorageLocation: {
 *         container: "container",
 *         path: "foo/bar/",
 *         filename: "bar.txt",
 *     },
 *     encoding: "UTF-8",
 * });
 * const exampleDataFlow = new azure.datafactory.DataFlow("exampleDataFlow", {
 *     dataFactoryId: exampleFactory.id,
 *     sources: [{
 *         name: "source1",
 *         dataset: {
 *             name: example1.name,
 *         },
 *     }],
 *     sinks: [{
 *         name: "sink1",
 *         dataset: {
 *             name: example2.name,
 *         },
 *     }],
 *     script: `source(
 *   allowSchemaDrift: true, 
 *   validateSchema: false, 
 *   limit: 100, 
 *   ignoreNoFilesFound: false, 
 *   documentForm: 'documentPerLine') ~> source1 
 * source1 sink(
 *   allowSchemaDrift: true, 
 *   validateSchema: false, 
 *   skipDuplicateMapInputs: true, 
 *   skipDuplicateMapOutputs: true) ~> sink1
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * Data Factory Data Flow can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:datafactory/dataFlow:DataFlow example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/dataflows/example
 * ```
 */
export class DataFlow extends pulumi.CustomResource {
    /**
     * Get an existing DataFlow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataFlowState, opts?: pulumi.CustomResourceOptions): DataFlow {
        return new DataFlow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:datafactory/dataFlow:DataFlow';

    /**
     * Returns true if the given object is an instance of DataFlow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataFlow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataFlow.__pulumiType;
    }

    /**
     * List of tags that can be used for describing the Data Factory Data Flow.
     */
    public readonly annotations!: pulumi.Output<string[] | undefined>;
    /**
     * The ID of Data Factory in which to associate the Data Flow with. Changing this forces a new resource.
     */
    public readonly dataFactoryId!: pulumi.Output<string>;
    /**
     * The description for the Data Factory Data Flow.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The folder that this Data Flow is in. If not specified, the Data Flow will appear at the root level.
     */
    public readonly folder!: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of the Data Factory Data Flow. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The script for the Data Factory Data Flow.
     */
    public readonly script!: pulumi.Output<string>;
    /**
     * One or more `sink` blocks as defined below.
     */
    public readonly sinks!: pulumi.Output<outputs.datafactory.DataFlowSink[]>;
    /**
     * One or more `source` blocks as defined below.
     */
    public readonly sources!: pulumi.Output<outputs.datafactory.DataFlowSource[]>;
    /**
     * One or more `transformation` blocks as defined below.
     */
    public readonly transformations!: pulumi.Output<outputs.datafactory.DataFlowTransformation[] | undefined>;

    /**
     * Create a DataFlow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataFlowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataFlowArgs | DataFlowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataFlowState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["dataFactoryId"] = state ? state.dataFactoryId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["folder"] = state ? state.folder : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["script"] = state ? state.script : undefined;
            resourceInputs["sinks"] = state ? state.sinks : undefined;
            resourceInputs["sources"] = state ? state.sources : undefined;
            resourceInputs["transformations"] = state ? state.transformations : undefined;
        } else {
            const args = argsOrState as DataFlowArgs | undefined;
            if ((!args || args.dataFactoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataFactoryId'");
            }
            if ((!args || args.script === undefined) && !opts.urn) {
                throw new Error("Missing required property 'script'");
            }
            if ((!args || args.sinks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sinks'");
            }
            if ((!args || args.sources === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sources'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["dataFactoryId"] = args ? args.dataFactoryId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["folder"] = args ? args.folder : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["script"] = args ? args.script : undefined;
            resourceInputs["sinks"] = args ? args.sinks : undefined;
            resourceInputs["sources"] = args ? args.sources : undefined;
            resourceInputs["transformations"] = args ? args.transformations : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataFlow.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DataFlow resources.
 */
export interface DataFlowState {
    /**
     * List of tags that can be used for describing the Data Factory Data Flow.
     */
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of Data Factory in which to associate the Data Flow with. Changing this forces a new resource.
     */
    dataFactoryId?: pulumi.Input<string>;
    /**
     * The description for the Data Factory Data Flow.
     */
    description?: pulumi.Input<string>;
    /**
     * The folder that this Data Flow is in. If not specified, the Data Flow will appear at the root level.
     */
    folder?: pulumi.Input<string>;
    /**
     * Specifies the name of the Data Factory Data Flow. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The script for the Data Factory Data Flow.
     */
    script?: pulumi.Input<string>;
    /**
     * One or more `sink` blocks as defined below.
     */
    sinks?: pulumi.Input<pulumi.Input<inputs.datafactory.DataFlowSink>[]>;
    /**
     * One or more `source` blocks as defined below.
     */
    sources?: pulumi.Input<pulumi.Input<inputs.datafactory.DataFlowSource>[]>;
    /**
     * One or more `transformation` blocks as defined below.
     */
    transformations?: pulumi.Input<pulumi.Input<inputs.datafactory.DataFlowTransformation>[]>;
}

/**
 * The set of arguments for constructing a DataFlow resource.
 */
export interface DataFlowArgs {
    /**
     * List of tags that can be used for describing the Data Factory Data Flow.
     */
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of Data Factory in which to associate the Data Flow with. Changing this forces a new resource.
     */
    dataFactoryId: pulumi.Input<string>;
    /**
     * The description for the Data Factory Data Flow.
     */
    description?: pulumi.Input<string>;
    /**
     * The folder that this Data Flow is in. If not specified, the Data Flow will appear at the root level.
     */
    folder?: pulumi.Input<string>;
    /**
     * Specifies the name of the Data Factory Data Flow. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The script for the Data Factory Data Flow.
     */
    script: pulumi.Input<string>;
    /**
     * One or more `sink` blocks as defined below.
     */
    sinks: pulumi.Input<pulumi.Input<inputs.datafactory.DataFlowSink>[]>;
    /**
     * One or more `source` blocks as defined below.
     */
    sources: pulumi.Input<pulumi.Input<inputs.datafactory.DataFlowSource>[]>;
    /**
     * One or more `transformation` blocks as defined below.
     */
    transformations?: pulumi.Input<pulumi.Input<inputs.datafactory.DataFlowTransformation>[]>;
}
