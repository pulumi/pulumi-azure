// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages an Azure Delimited Text Dataset inside an Azure Data Factory.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleFactory = new azure.datafactory.Factory("exampleFactory", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * const exampleLinkedServiceWeb = new azure.datafactory.LinkedServiceWeb("exampleLinkedServiceWeb", {
 *     dataFactoryId: exampleFactory.id,
 *     authenticationType: "Anonymous",
 *     url: "https://www.bing.com",
 * });
 * const exampleDatasetDelimitedText = new azure.datafactory.DatasetDelimitedText("exampleDatasetDelimitedText", {
 *     dataFactoryId: exampleFactory.id,
 *     linkedServiceName: exampleLinkedServiceWeb.name,
 *     httpServerLocation: {
 *         relativeUrl: "http://www.bing.com",
 *         path: "foo/bar/",
 *         filename: "fizz.txt",
 *     },
 *     columnDelimiter: ",",
 *     rowDelimiter: "NEW",
 *     encoding: "UTF-8",
 *     quoteCharacter: "x",
 *     escapeCharacter: "f",
 *     firstRowAsHeader: true,
 *     nullValue: "NULL",
 * });
 * ```
 *
 * ## Import
 *
 * Data Factory Datasets can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:datafactory/datasetDelimitedText:DatasetDelimitedText example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/datasets/example
 * ```
 */
export class DatasetDelimitedText extends pulumi.CustomResource {
    /**
     * Get an existing DatasetDelimitedText resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatasetDelimitedTextState, opts?: pulumi.CustomResourceOptions): DatasetDelimitedText {
        return new DatasetDelimitedText(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:datafactory/datasetDelimitedText:DatasetDelimitedText';

    /**
     * Returns true if the given object is an instance of DatasetDelimitedText.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatasetDelimitedText {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatasetDelimitedText.__pulumiType;
    }

    /**
     * A map of additional properties to associate with the Data Factory Dataset.
     *
     * The following supported locations for a Delimited Text Dataset (exactly one of them must be set):
     */
    public readonly additionalProperties!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * List of tags that can be used for describing the Data Factory Dataset.
     */
    public readonly annotations!: pulumi.Output<string[] | undefined>;
    /**
     * An `azureBlobFsLocation` block as defined below.
     */
    public readonly azureBlobFsLocation!: pulumi.Output<outputs.datafactory.DatasetDelimitedTextAzureBlobFsLocation | undefined>;
    /**
     * An `azureBlobStorageLocation` block as defined below.
     */
    public readonly azureBlobStorageLocation!: pulumi.Output<outputs.datafactory.DatasetDelimitedTextAzureBlobStorageLocation | undefined>;
    /**
     * The column delimiter. Defaults to `,`.
     */
    public readonly columnDelimiter!: pulumi.Output<string | undefined>;
    /**
     * The compression codec used to read/write text files. Valid values are `None`, `bzip2`, `gzip`, `deflate`, `ZipDeflate`, `TarGzip`, `Tar`, `snappy` and `lz4`. Please note these values are case sensitive.
     */
    public readonly compressionCodec!: pulumi.Output<string | undefined>;
    /**
     * The compression ratio for the Data Factory Dataset. Valid values are `Fastest` or `Optimal`. Please note these values are case sensitive.
     */
    public readonly compressionLevel!: pulumi.Output<string | undefined>;
    /**
     * The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
     */
    public readonly dataFactoryId!: pulumi.Output<string>;
    /**
     * The description for the Data Factory Dataset.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The encoding format for the file.
     */
    public readonly encoding!: pulumi.Output<string | undefined>;
    /**
     * The escape character. Defaults to `\`.
     */
    public readonly escapeCharacter!: pulumi.Output<string | undefined>;
    /**
     * When used as input, treat the first row of data as headers. When used as output, write the headers into the output as the first row of data. Defaults to `false`.
     */
    public readonly firstRowAsHeader!: pulumi.Output<boolean | undefined>;
    /**
     * The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
     */
    public readonly folder!: pulumi.Output<string | undefined>;
    /**
     * A `httpServerLocation` block as defined below.
     *
     * The following supported arguments are specific to Delimited Text Dataset:
     */
    public readonly httpServerLocation!: pulumi.Output<outputs.datafactory.DatasetDelimitedTextHttpServerLocation | undefined>;
    /**
     * The Data Factory Linked Service name in which to associate the Dataset with.
     */
    public readonly linkedServiceName!: pulumi.Output<string>;
    /**
     * Specifies the name of the Data Factory Dataset. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The null value string. Defaults to `""`.
     */
    public readonly nullValue!: pulumi.Output<string | undefined>;
    /**
     * A map of parameters to associate with the Data Factory Dataset.
     */
    public readonly parameters!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The quote character. Defaults to `"`.
     */
    public readonly quoteCharacter!: pulumi.Output<string | undefined>;
    /**
     * The row delimiter. Defaults to any of the following values on read: `\r\n`, `\r`, `\n`, and `\n` or `\r\n` on write by mapping data flow and Copy activity respectively.
     */
    public readonly rowDelimiter!: pulumi.Output<string | undefined>;
    /**
     * A `schemaColumn` block as defined below.
     */
    public readonly schemaColumns!: pulumi.Output<outputs.datafactory.DatasetDelimitedTextSchemaColumn[] | undefined>;

    /**
     * Create a DatasetDelimitedText resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatasetDelimitedTextArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatasetDelimitedTextArgs | DatasetDelimitedTextState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatasetDelimitedTextState | undefined;
            resourceInputs["additionalProperties"] = state ? state.additionalProperties : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["azureBlobFsLocation"] = state ? state.azureBlobFsLocation : undefined;
            resourceInputs["azureBlobStorageLocation"] = state ? state.azureBlobStorageLocation : undefined;
            resourceInputs["columnDelimiter"] = state ? state.columnDelimiter : undefined;
            resourceInputs["compressionCodec"] = state ? state.compressionCodec : undefined;
            resourceInputs["compressionLevel"] = state ? state.compressionLevel : undefined;
            resourceInputs["dataFactoryId"] = state ? state.dataFactoryId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["encoding"] = state ? state.encoding : undefined;
            resourceInputs["escapeCharacter"] = state ? state.escapeCharacter : undefined;
            resourceInputs["firstRowAsHeader"] = state ? state.firstRowAsHeader : undefined;
            resourceInputs["folder"] = state ? state.folder : undefined;
            resourceInputs["httpServerLocation"] = state ? state.httpServerLocation : undefined;
            resourceInputs["linkedServiceName"] = state ? state.linkedServiceName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nullValue"] = state ? state.nullValue : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["quoteCharacter"] = state ? state.quoteCharacter : undefined;
            resourceInputs["rowDelimiter"] = state ? state.rowDelimiter : undefined;
            resourceInputs["schemaColumns"] = state ? state.schemaColumns : undefined;
        } else {
            const args = argsOrState as DatasetDelimitedTextArgs | undefined;
            if ((!args || args.dataFactoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataFactoryId'");
            }
            if ((!args || args.linkedServiceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'linkedServiceName'");
            }
            resourceInputs["additionalProperties"] = args ? args.additionalProperties : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["azureBlobFsLocation"] = args ? args.azureBlobFsLocation : undefined;
            resourceInputs["azureBlobStorageLocation"] = args ? args.azureBlobStorageLocation : undefined;
            resourceInputs["columnDelimiter"] = args ? args.columnDelimiter : undefined;
            resourceInputs["compressionCodec"] = args ? args.compressionCodec : undefined;
            resourceInputs["compressionLevel"] = args ? args.compressionLevel : undefined;
            resourceInputs["dataFactoryId"] = args ? args.dataFactoryId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["encoding"] = args ? args.encoding : undefined;
            resourceInputs["escapeCharacter"] = args ? args.escapeCharacter : undefined;
            resourceInputs["firstRowAsHeader"] = args ? args.firstRowAsHeader : undefined;
            resourceInputs["folder"] = args ? args.folder : undefined;
            resourceInputs["httpServerLocation"] = args ? args.httpServerLocation : undefined;
            resourceInputs["linkedServiceName"] = args ? args.linkedServiceName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nullValue"] = args ? args.nullValue : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["quoteCharacter"] = args ? args.quoteCharacter : undefined;
            resourceInputs["rowDelimiter"] = args ? args.rowDelimiter : undefined;
            resourceInputs["schemaColumns"] = args ? args.schemaColumns : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatasetDelimitedText.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DatasetDelimitedText resources.
 */
export interface DatasetDelimitedTextState {
    /**
     * A map of additional properties to associate with the Data Factory Dataset.
     *
     * The following supported locations for a Delimited Text Dataset (exactly one of them must be set):
     */
    additionalProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of tags that can be used for describing the Data Factory Dataset.
     */
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An `azureBlobFsLocation` block as defined below.
     */
    azureBlobFsLocation?: pulumi.Input<inputs.datafactory.DatasetDelimitedTextAzureBlobFsLocation>;
    /**
     * An `azureBlobStorageLocation` block as defined below.
     */
    azureBlobStorageLocation?: pulumi.Input<inputs.datafactory.DatasetDelimitedTextAzureBlobStorageLocation>;
    /**
     * The column delimiter. Defaults to `,`.
     */
    columnDelimiter?: pulumi.Input<string>;
    /**
     * The compression codec used to read/write text files. Valid values are `None`, `bzip2`, `gzip`, `deflate`, `ZipDeflate`, `TarGzip`, `Tar`, `snappy` and `lz4`. Please note these values are case sensitive.
     */
    compressionCodec?: pulumi.Input<string>;
    /**
     * The compression ratio for the Data Factory Dataset. Valid values are `Fastest` or `Optimal`. Please note these values are case sensitive.
     */
    compressionLevel?: pulumi.Input<string>;
    /**
     * The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
     */
    dataFactoryId?: pulumi.Input<string>;
    /**
     * The description for the Data Factory Dataset.
     */
    description?: pulumi.Input<string>;
    /**
     * The encoding format for the file.
     */
    encoding?: pulumi.Input<string>;
    /**
     * The escape character. Defaults to `\`.
     */
    escapeCharacter?: pulumi.Input<string>;
    /**
     * When used as input, treat the first row of data as headers. When used as output, write the headers into the output as the first row of data. Defaults to `false`.
     */
    firstRowAsHeader?: pulumi.Input<boolean>;
    /**
     * The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
     */
    folder?: pulumi.Input<string>;
    /**
     * A `httpServerLocation` block as defined below.
     *
     * The following supported arguments are specific to Delimited Text Dataset:
     */
    httpServerLocation?: pulumi.Input<inputs.datafactory.DatasetDelimitedTextHttpServerLocation>;
    /**
     * The Data Factory Linked Service name in which to associate the Dataset with.
     */
    linkedServiceName?: pulumi.Input<string>;
    /**
     * Specifies the name of the Data Factory Dataset. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     */
    name?: pulumi.Input<string>;
    /**
     * The null value string. Defaults to `""`.
     */
    nullValue?: pulumi.Input<string>;
    /**
     * A map of parameters to associate with the Data Factory Dataset.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The quote character. Defaults to `"`.
     */
    quoteCharacter?: pulumi.Input<string>;
    /**
     * The row delimiter. Defaults to any of the following values on read: `\r\n`, `\r`, `\n`, and `\n` or `\r\n` on write by mapping data flow and Copy activity respectively.
     */
    rowDelimiter?: pulumi.Input<string>;
    /**
     * A `schemaColumn` block as defined below.
     */
    schemaColumns?: pulumi.Input<pulumi.Input<inputs.datafactory.DatasetDelimitedTextSchemaColumn>[]>;
}

/**
 * The set of arguments for constructing a DatasetDelimitedText resource.
 */
export interface DatasetDelimitedTextArgs {
    /**
     * A map of additional properties to associate with the Data Factory Dataset.
     *
     * The following supported locations for a Delimited Text Dataset (exactly one of them must be set):
     */
    additionalProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of tags that can be used for describing the Data Factory Dataset.
     */
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An `azureBlobFsLocation` block as defined below.
     */
    azureBlobFsLocation?: pulumi.Input<inputs.datafactory.DatasetDelimitedTextAzureBlobFsLocation>;
    /**
     * An `azureBlobStorageLocation` block as defined below.
     */
    azureBlobStorageLocation?: pulumi.Input<inputs.datafactory.DatasetDelimitedTextAzureBlobStorageLocation>;
    /**
     * The column delimiter. Defaults to `,`.
     */
    columnDelimiter?: pulumi.Input<string>;
    /**
     * The compression codec used to read/write text files. Valid values are `None`, `bzip2`, `gzip`, `deflate`, `ZipDeflate`, `TarGzip`, `Tar`, `snappy` and `lz4`. Please note these values are case sensitive.
     */
    compressionCodec?: pulumi.Input<string>;
    /**
     * The compression ratio for the Data Factory Dataset. Valid values are `Fastest` or `Optimal`. Please note these values are case sensitive.
     */
    compressionLevel?: pulumi.Input<string>;
    /**
     * The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
     */
    dataFactoryId: pulumi.Input<string>;
    /**
     * The description for the Data Factory Dataset.
     */
    description?: pulumi.Input<string>;
    /**
     * The encoding format for the file.
     */
    encoding?: pulumi.Input<string>;
    /**
     * The escape character. Defaults to `\`.
     */
    escapeCharacter?: pulumi.Input<string>;
    /**
     * When used as input, treat the first row of data as headers. When used as output, write the headers into the output as the first row of data. Defaults to `false`.
     */
    firstRowAsHeader?: pulumi.Input<boolean>;
    /**
     * The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
     */
    folder?: pulumi.Input<string>;
    /**
     * A `httpServerLocation` block as defined below.
     *
     * The following supported arguments are specific to Delimited Text Dataset:
     */
    httpServerLocation?: pulumi.Input<inputs.datafactory.DatasetDelimitedTextHttpServerLocation>;
    /**
     * The Data Factory Linked Service name in which to associate the Dataset with.
     */
    linkedServiceName: pulumi.Input<string>;
    /**
     * Specifies the name of the Data Factory Dataset. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     */
    name?: pulumi.Input<string>;
    /**
     * The null value string. Defaults to `""`.
     */
    nullValue?: pulumi.Input<string>;
    /**
     * A map of parameters to associate with the Data Factory Dataset.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The quote character. Defaults to `"`.
     */
    quoteCharacter?: pulumi.Input<string>;
    /**
     * The row delimiter. Defaults to any of the following values on read: `\r\n`, `\r`, `\n`, and `\n` or `\r\n` on write by mapping data flow and Copy activity respectively.
     */
    rowDelimiter?: pulumi.Input<string>;
    /**
     * A `schemaColumn` block as defined below.
     */
    schemaColumns?: pulumi.Input<pulumi.Input<inputs.datafactory.DatasetDelimitedTextSchemaColumn>[]>;
}
