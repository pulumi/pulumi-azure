// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Linked Service (connection) between an Azure Blob Storage Account and Azure Data Factory.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = azure.storage.getAccountOutput({
 *     name: "storageaccountname",
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * const exampleFactory = new azure.datafactory.Factory("exampleFactory", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * const exampleLinkedServiceAzureBlobStorage = new azure.datafactory.LinkedServiceAzureBlobStorage("exampleLinkedServiceAzureBlobStorage", {
 *     dataFactoryId: exampleFactory.id,
 *     connectionString: exampleAccount.apply(exampleAccount => exampleAccount.primaryConnectionString),
 * });
 * ```
 * ### With SAS URI And SAS Token
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {location: "West Europe"});
 * const current = azure.core.getClientConfig({});
 * const testFactory = new azure.datafactory.Factory("testFactory", {
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const testKeyVault = new azure.keyvault.KeyVault("testKeyVault", {
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "standard",
 * });
 * const testLinkedServiceKeyVault = new azure.datafactory.LinkedServiceKeyVault("testLinkedServiceKeyVault", {
 *     dataFactoryId: testFactory.id,
 *     keyVaultId: testKeyVault.id,
 * });
 * const testLinkedServiceAzureBlobStorage = new azure.datafactory.LinkedServiceAzureBlobStorage("testLinkedServiceAzureBlobStorage", {
 *     dataFactoryId: testFactory.id,
 *     sasUri: "https://example.blob.core.windows.net",
 *     keyVaultSasToken: {
 *         linkedServiceName: testLinkedServiceKeyVault.name,
 *         secretName: "secret",
 *     },
 * });
 * const testDatafactory_linkedServiceAzureBlobStorageLinkedServiceAzureBlobStorage = new azure.datafactory.LinkedServiceAzureBlobStorage("testDatafactory/linkedServiceAzureBlobStorageLinkedServiceAzureBlobStorage", {
 *     dataFactoryId: testFactory.id,
 *     serviceEndpoint: "https://example.blob.core.windows.net",
 *     servicePrincipalId: "00000000-0000-0000-0000-000000000000",
 *     tenantId: "00000000-0000-0000-0000-000000000000",
 *     servicePrincipalLinkedKeyVaultKey: {
 *         linkedServiceName: testLinkedServiceKeyVault.name,
 *         secretName: "secret",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Data Factory Linked Service's can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:datafactory/linkedServiceAzureBlobStorage:LinkedServiceAzureBlobStorage example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/linkedservices/example
 * ```
 */
export class LinkedServiceAzureBlobStorage extends pulumi.CustomResource {
    /**
     * Get an existing LinkedServiceAzureBlobStorage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LinkedServiceAzureBlobStorageState, opts?: pulumi.CustomResourceOptions): LinkedServiceAzureBlobStorage {
        return new LinkedServiceAzureBlobStorage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:datafactory/linkedServiceAzureBlobStorage:LinkedServiceAzureBlobStorage';

    /**
     * Returns true if the given object is an instance of LinkedServiceAzureBlobStorage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LinkedServiceAzureBlobStorage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LinkedServiceAzureBlobStorage.__pulumiType;
    }

    /**
     * A map of additional properties to associate with the Data Factory Linked Service.
     */
    public readonly additionalProperties!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * List of tags that can be used for describing the Data Factory Linked Service.
     */
    public readonly annotations!: pulumi.Output<string[] | undefined>;
    /**
     * The connection string. Conflicts with `sasUri` and `serviceEndpoint`.
     */
    public readonly connectionString!: pulumi.Output<string | undefined>;
    /**
     * The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
     */
    public readonly dataFactoryId!: pulumi.Output<string>;
    /**
     * The description for the Data Factory Linked Service.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The integration runtime reference to associate with the Data Factory Linked Service.
     */
    public readonly integrationRuntimeName!: pulumi.Output<string | undefined>;
    /**
     * A `keyVaultSasToken` block as defined below. Use this argument to store SAS Token in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service. A `sasUri` is required.
     */
    public readonly keyVaultSasToken!: pulumi.Output<outputs.datafactory.LinkedServiceAzureBlobStorageKeyVaultSasToken | undefined>;
    /**
     * Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A map of parameters to associate with the Data Factory Linked Service.
     */
    public readonly parameters!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The SAS URI. Conflicts with `connectionString` and `serviceEndpoint`.
     */
    public readonly sasUri!: pulumi.Output<string | undefined>;
    /**
     * The Service Endpoint. Conflicts with `connectionString` and `sasUri`.
     */
    public readonly serviceEndpoint!: pulumi.Output<string | undefined>;
    /**
     * The service principal id in which to authenticate against the Azure Blob Storage account.
     */
    public readonly servicePrincipalId!: pulumi.Output<string | undefined>;
    /**
     * The service principal key in which to authenticate against the AAzure Blob Storage account.
     */
    public readonly servicePrincipalKey!: pulumi.Output<string | undefined>;
    /**
     * A `servicePrincipalLinkedKeyVaultKey` block as defined below. Use this argument to store Service Principal key in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service.
     */
    public readonly servicePrincipalLinkedKeyVaultKey!: pulumi.Output<outputs.datafactory.LinkedServiceAzureBlobStorageServicePrincipalLinkedKeyVaultKey | undefined>;
    /**
     * Specify the kind of the storage account. Allowed values are `Storage`, `StorageV2`, `BlobStorage` and `BlockBlobStorage`.
     */
    public readonly storageKind!: pulumi.Output<string | undefined>;
    /**
     * The tenant id or name in which to authenticate against the Azure Blob Storage account.
     */
    public readonly tenantId!: pulumi.Output<string | undefined>;
    /**
     * Whether to use the Data Factory's managed identity to authenticate against the Azure Blob Storage account. Incompatible with `servicePrincipalId` and `servicePrincipalKey`.
     */
    public readonly useManagedIdentity!: pulumi.Output<boolean | undefined>;

    /**
     * Create a LinkedServiceAzureBlobStorage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LinkedServiceAzureBlobStorageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LinkedServiceAzureBlobStorageArgs | LinkedServiceAzureBlobStorageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LinkedServiceAzureBlobStorageState | undefined;
            resourceInputs["additionalProperties"] = state ? state.additionalProperties : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["connectionString"] = state ? state.connectionString : undefined;
            resourceInputs["dataFactoryId"] = state ? state.dataFactoryId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["integrationRuntimeName"] = state ? state.integrationRuntimeName : undefined;
            resourceInputs["keyVaultSasToken"] = state ? state.keyVaultSasToken : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["sasUri"] = state ? state.sasUri : undefined;
            resourceInputs["serviceEndpoint"] = state ? state.serviceEndpoint : undefined;
            resourceInputs["servicePrincipalId"] = state ? state.servicePrincipalId : undefined;
            resourceInputs["servicePrincipalKey"] = state ? state.servicePrincipalKey : undefined;
            resourceInputs["servicePrincipalLinkedKeyVaultKey"] = state ? state.servicePrincipalLinkedKeyVaultKey : undefined;
            resourceInputs["storageKind"] = state ? state.storageKind : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["useManagedIdentity"] = state ? state.useManagedIdentity : undefined;
        } else {
            const args = argsOrState as LinkedServiceAzureBlobStorageArgs | undefined;
            if ((!args || args.dataFactoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataFactoryId'");
            }
            resourceInputs["additionalProperties"] = args ? args.additionalProperties : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["connectionString"] = args?.connectionString ? pulumi.secret(args.connectionString) : undefined;
            resourceInputs["dataFactoryId"] = args ? args.dataFactoryId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["integrationRuntimeName"] = args ? args.integrationRuntimeName : undefined;
            resourceInputs["keyVaultSasToken"] = args ? args.keyVaultSasToken : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["sasUri"] = args?.sasUri ? pulumi.secret(args.sasUri) : undefined;
            resourceInputs["serviceEndpoint"] = args?.serviceEndpoint ? pulumi.secret(args.serviceEndpoint) : undefined;
            resourceInputs["servicePrincipalId"] = args ? args.servicePrincipalId : undefined;
            resourceInputs["servicePrincipalKey"] = args ? args.servicePrincipalKey : undefined;
            resourceInputs["servicePrincipalLinkedKeyVaultKey"] = args ? args.servicePrincipalLinkedKeyVaultKey : undefined;
            resourceInputs["storageKind"] = args ? args.storageKind : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["useManagedIdentity"] = args ? args.useManagedIdentity : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["connectionString", "sasUri", "serviceEndpoint"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LinkedServiceAzureBlobStorage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LinkedServiceAzureBlobStorage resources.
 */
export interface LinkedServiceAzureBlobStorageState {
    /**
     * A map of additional properties to associate with the Data Factory Linked Service.
     */
    additionalProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of tags that can be used for describing the Data Factory Linked Service.
     */
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The connection string. Conflicts with `sasUri` and `serviceEndpoint`.
     */
    connectionString?: pulumi.Input<string>;
    /**
     * The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
     */
    dataFactoryId?: pulumi.Input<string>;
    /**
     * The description for the Data Factory Linked Service.
     */
    description?: pulumi.Input<string>;
    /**
     * The integration runtime reference to associate with the Data Factory Linked Service.
     */
    integrationRuntimeName?: pulumi.Input<string>;
    /**
     * A `keyVaultSasToken` block as defined below. Use this argument to store SAS Token in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service. A `sasUri` is required.
     */
    keyVaultSasToken?: pulumi.Input<inputs.datafactory.LinkedServiceAzureBlobStorageKeyVaultSasToken>;
    /**
     * Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     */
    name?: pulumi.Input<string>;
    /**
     * A map of parameters to associate with the Data Factory Linked Service.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The SAS URI. Conflicts with `connectionString` and `serviceEndpoint`.
     */
    sasUri?: pulumi.Input<string>;
    /**
     * The Service Endpoint. Conflicts with `connectionString` and `sasUri`.
     */
    serviceEndpoint?: pulumi.Input<string>;
    /**
     * The service principal id in which to authenticate against the Azure Blob Storage account.
     */
    servicePrincipalId?: pulumi.Input<string>;
    /**
     * The service principal key in which to authenticate against the AAzure Blob Storage account.
     */
    servicePrincipalKey?: pulumi.Input<string>;
    /**
     * A `servicePrincipalLinkedKeyVaultKey` block as defined below. Use this argument to store Service Principal key in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service.
     */
    servicePrincipalLinkedKeyVaultKey?: pulumi.Input<inputs.datafactory.LinkedServiceAzureBlobStorageServicePrincipalLinkedKeyVaultKey>;
    /**
     * Specify the kind of the storage account. Allowed values are `Storage`, `StorageV2`, `BlobStorage` and `BlockBlobStorage`.
     */
    storageKind?: pulumi.Input<string>;
    /**
     * The tenant id or name in which to authenticate against the Azure Blob Storage account.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Whether to use the Data Factory's managed identity to authenticate against the Azure Blob Storage account. Incompatible with `servicePrincipalId` and `servicePrincipalKey`.
     */
    useManagedIdentity?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a LinkedServiceAzureBlobStorage resource.
 */
export interface LinkedServiceAzureBlobStorageArgs {
    /**
     * A map of additional properties to associate with the Data Factory Linked Service.
     */
    additionalProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of tags that can be used for describing the Data Factory Linked Service.
     */
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The connection string. Conflicts with `sasUri` and `serviceEndpoint`.
     */
    connectionString?: pulumi.Input<string>;
    /**
     * The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
     */
    dataFactoryId: pulumi.Input<string>;
    /**
     * The description for the Data Factory Linked Service.
     */
    description?: pulumi.Input<string>;
    /**
     * The integration runtime reference to associate with the Data Factory Linked Service.
     */
    integrationRuntimeName?: pulumi.Input<string>;
    /**
     * A `keyVaultSasToken` block as defined below. Use this argument to store SAS Token in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service. A `sasUri` is required.
     */
    keyVaultSasToken?: pulumi.Input<inputs.datafactory.LinkedServiceAzureBlobStorageKeyVaultSasToken>;
    /**
     * Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     */
    name?: pulumi.Input<string>;
    /**
     * A map of parameters to associate with the Data Factory Linked Service.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The SAS URI. Conflicts with `connectionString` and `serviceEndpoint`.
     */
    sasUri?: pulumi.Input<string>;
    /**
     * The Service Endpoint. Conflicts with `connectionString` and `sasUri`.
     */
    serviceEndpoint?: pulumi.Input<string>;
    /**
     * The service principal id in which to authenticate against the Azure Blob Storage account.
     */
    servicePrincipalId?: pulumi.Input<string>;
    /**
     * The service principal key in which to authenticate against the AAzure Blob Storage account.
     */
    servicePrincipalKey?: pulumi.Input<string>;
    /**
     * A `servicePrincipalLinkedKeyVaultKey` block as defined below. Use this argument to store Service Principal key in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service.
     */
    servicePrincipalLinkedKeyVaultKey?: pulumi.Input<inputs.datafactory.LinkedServiceAzureBlobStorageServicePrincipalLinkedKeyVaultKey>;
    /**
     * Specify the kind of the storage account. Allowed values are `Storage`, `StorageV2`, `BlobStorage` and `BlockBlobStorage`.
     */
    storageKind?: pulumi.Input<string>;
    /**
     * The tenant id or name in which to authenticate against the Azure Blob Storage account.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Whether to use the Data Factory's managed identity to authenticate against the Azure Blob Storage account. Incompatible with `servicePrincipalId` and `servicePrincipalKey`.
     */
    useManagedIdentity?: pulumi.Input<boolean>;
}
