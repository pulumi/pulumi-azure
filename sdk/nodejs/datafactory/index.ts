// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CredentialUserManagedIdentityArgs, CredentialUserManagedIdentityState } from "./credentialUserManagedIdentity";
export type CredentialUserManagedIdentity = import("./credentialUserManagedIdentity").CredentialUserManagedIdentity;
export const CredentialUserManagedIdentity: typeof import("./credentialUserManagedIdentity").CredentialUserManagedIdentity = null as any;
utilities.lazyLoad(exports, ["CredentialUserManagedIdentity"], () => require("./credentialUserManagedIdentity"));

export { CustomDatasetArgs, CustomDatasetState } from "./customDataset";
export type CustomDataset = import("./customDataset").CustomDataset;
export const CustomDataset: typeof import("./customDataset").CustomDataset = null as any;
utilities.lazyLoad(exports, ["CustomDataset"], () => require("./customDataset"));

export { DataFlowArgs, DataFlowState } from "./dataFlow";
export type DataFlow = import("./dataFlow").DataFlow;
export const DataFlow: typeof import("./dataFlow").DataFlow = null as any;
utilities.lazyLoad(exports, ["DataFlow"], () => require("./dataFlow"));

export { DatasetAzureBlobArgs, DatasetAzureBlobState } from "./datasetAzureBlob";
export type DatasetAzureBlob = import("./datasetAzureBlob").DatasetAzureBlob;
export const DatasetAzureBlob: typeof import("./datasetAzureBlob").DatasetAzureBlob = null as any;
utilities.lazyLoad(exports, ["DatasetAzureBlob"], () => require("./datasetAzureBlob"));

export { DatasetAzureSqlTableArgs, DatasetAzureSqlTableState } from "./datasetAzureSqlTable";
export type DatasetAzureSqlTable = import("./datasetAzureSqlTable").DatasetAzureSqlTable;
export const DatasetAzureSqlTable: typeof import("./datasetAzureSqlTable").DatasetAzureSqlTable = null as any;
utilities.lazyLoad(exports, ["DatasetAzureSqlTable"], () => require("./datasetAzureSqlTable"));

export { DatasetBinaryArgs, DatasetBinaryState } from "./datasetBinary";
export type DatasetBinary = import("./datasetBinary").DatasetBinary;
export const DatasetBinary: typeof import("./datasetBinary").DatasetBinary = null as any;
utilities.lazyLoad(exports, ["DatasetBinary"], () => require("./datasetBinary"));

export { DatasetCosmosDBApiArgs, DatasetCosmosDBApiState } from "./datasetCosmosDBApi";
export type DatasetCosmosDBApi = import("./datasetCosmosDBApi").DatasetCosmosDBApi;
export const DatasetCosmosDBApi: typeof import("./datasetCosmosDBApi").DatasetCosmosDBApi = null as any;
utilities.lazyLoad(exports, ["DatasetCosmosDBApi"], () => require("./datasetCosmosDBApi"));

export { DatasetDelimitedTextArgs, DatasetDelimitedTextState } from "./datasetDelimitedText";
export type DatasetDelimitedText = import("./datasetDelimitedText").DatasetDelimitedText;
export const DatasetDelimitedText: typeof import("./datasetDelimitedText").DatasetDelimitedText = null as any;
utilities.lazyLoad(exports, ["DatasetDelimitedText"], () => require("./datasetDelimitedText"));

export { DatasetHttpArgs, DatasetHttpState } from "./datasetHttp";
export type DatasetHttp = import("./datasetHttp").DatasetHttp;
export const DatasetHttp: typeof import("./datasetHttp").DatasetHttp = null as any;
utilities.lazyLoad(exports, ["DatasetHttp"], () => require("./datasetHttp"));

export { DatasetJsonArgs, DatasetJsonState } from "./datasetJson";
export type DatasetJson = import("./datasetJson").DatasetJson;
export const DatasetJson: typeof import("./datasetJson").DatasetJson = null as any;
utilities.lazyLoad(exports, ["DatasetJson"], () => require("./datasetJson"));

export { DatasetMysqlArgs, DatasetMysqlState } from "./datasetMysql";
export type DatasetMysql = import("./datasetMysql").DatasetMysql;
export const DatasetMysql: typeof import("./datasetMysql").DatasetMysql = null as any;
utilities.lazyLoad(exports, ["DatasetMysql"], () => require("./datasetMysql"));

export { DatasetParquetArgs, DatasetParquetState } from "./datasetParquet";
export type DatasetParquet = import("./datasetParquet").DatasetParquet;
export const DatasetParquet: typeof import("./datasetParquet").DatasetParquet = null as any;
utilities.lazyLoad(exports, ["DatasetParquet"], () => require("./datasetParquet"));

export { DatasetPostgresqlArgs, DatasetPostgresqlState } from "./datasetPostgresql";
export type DatasetPostgresql = import("./datasetPostgresql").DatasetPostgresql;
export const DatasetPostgresql: typeof import("./datasetPostgresql").DatasetPostgresql = null as any;
utilities.lazyLoad(exports, ["DatasetPostgresql"], () => require("./datasetPostgresql"));

export { DatasetSnowflakeArgs, DatasetSnowflakeState } from "./datasetSnowflake";
export type DatasetSnowflake = import("./datasetSnowflake").DatasetSnowflake;
export const DatasetSnowflake: typeof import("./datasetSnowflake").DatasetSnowflake = null as any;
utilities.lazyLoad(exports, ["DatasetSnowflake"], () => require("./datasetSnowflake"));

export { DatasetSqlServerTableArgs, DatasetSqlServerTableState } from "./datasetSqlServerTable";
export type DatasetSqlServerTable = import("./datasetSqlServerTable").DatasetSqlServerTable;
export const DatasetSqlServerTable: typeof import("./datasetSqlServerTable").DatasetSqlServerTable = null as any;
utilities.lazyLoad(exports, ["DatasetSqlServerTable"], () => require("./datasetSqlServerTable"));

export { FactoryArgs, FactoryState } from "./factory";
export type Factory = import("./factory").Factory;
export const Factory: typeof import("./factory").Factory = null as any;
utilities.lazyLoad(exports, ["Factory"], () => require("./factory"));

export { FlowletDataFlowArgs, FlowletDataFlowState } from "./flowletDataFlow";
export type FlowletDataFlow = import("./flowletDataFlow").FlowletDataFlow;
export const FlowletDataFlow: typeof import("./flowletDataFlow").FlowletDataFlow = null as any;
utilities.lazyLoad(exports, ["FlowletDataFlow"], () => require("./flowletDataFlow"));

export { GetFactoryArgs, GetFactoryResult, GetFactoryOutputArgs } from "./getFactory";
export const getFactory: typeof import("./getFactory").getFactory = null as any;
export const getFactoryOutput: typeof import("./getFactory").getFactoryOutput = null as any;
utilities.lazyLoad(exports, ["getFactory","getFactoryOutput"], () => require("./getFactory"));

export { IntegrationRuntimeManagedArgs, IntegrationRuntimeManagedState } from "./integrationRuntimeManaged";
export type IntegrationRuntimeManaged = import("./integrationRuntimeManaged").IntegrationRuntimeManaged;
export const IntegrationRuntimeManaged: typeof import("./integrationRuntimeManaged").IntegrationRuntimeManaged = null as any;
utilities.lazyLoad(exports, ["IntegrationRuntimeManaged"], () => require("./integrationRuntimeManaged"));

export { IntegrationRuntimeRuleArgs, IntegrationRuntimeRuleState } from "./integrationRuntimeRule";
export type IntegrationRuntimeRule = import("./integrationRuntimeRule").IntegrationRuntimeRule;
export const IntegrationRuntimeRule: typeof import("./integrationRuntimeRule").IntegrationRuntimeRule = null as any;
utilities.lazyLoad(exports, ["IntegrationRuntimeRule"], () => require("./integrationRuntimeRule"));

export { IntegrationRuntimeSelfHostedArgs, IntegrationRuntimeSelfHostedState } from "./integrationRuntimeSelfHosted";
export type IntegrationRuntimeSelfHosted = import("./integrationRuntimeSelfHosted").IntegrationRuntimeSelfHosted;
export const IntegrationRuntimeSelfHosted: typeof import("./integrationRuntimeSelfHosted").IntegrationRuntimeSelfHosted = null as any;
utilities.lazyLoad(exports, ["IntegrationRuntimeSelfHosted"], () => require("./integrationRuntimeSelfHosted"));

export { IntegrationRuntimeSsisArgs, IntegrationRuntimeSsisState } from "./integrationRuntimeSsis";
export type IntegrationRuntimeSsis = import("./integrationRuntimeSsis").IntegrationRuntimeSsis;
export const IntegrationRuntimeSsis: typeof import("./integrationRuntimeSsis").IntegrationRuntimeSsis = null as any;
utilities.lazyLoad(exports, ["IntegrationRuntimeSsis"], () => require("./integrationRuntimeSsis"));

export { LinkedCustomServiceArgs, LinkedCustomServiceState } from "./linkedCustomService";
export type LinkedCustomService = import("./linkedCustomService").LinkedCustomService;
export const LinkedCustomService: typeof import("./linkedCustomService").LinkedCustomService = null as any;
utilities.lazyLoad(exports, ["LinkedCustomService"], () => require("./linkedCustomService"));

export { LinkedServiceAzureBlobStorageArgs, LinkedServiceAzureBlobStorageState } from "./linkedServiceAzureBlobStorage";
export type LinkedServiceAzureBlobStorage = import("./linkedServiceAzureBlobStorage").LinkedServiceAzureBlobStorage;
export const LinkedServiceAzureBlobStorage: typeof import("./linkedServiceAzureBlobStorage").LinkedServiceAzureBlobStorage = null as any;
utilities.lazyLoad(exports, ["LinkedServiceAzureBlobStorage"], () => require("./linkedServiceAzureBlobStorage"));

export { LinkedServiceAzureDatabricksArgs, LinkedServiceAzureDatabricksState } from "./linkedServiceAzureDatabricks";
export type LinkedServiceAzureDatabricks = import("./linkedServiceAzureDatabricks").LinkedServiceAzureDatabricks;
export const LinkedServiceAzureDatabricks: typeof import("./linkedServiceAzureDatabricks").LinkedServiceAzureDatabricks = null as any;
utilities.lazyLoad(exports, ["LinkedServiceAzureDatabricks"], () => require("./linkedServiceAzureDatabricks"));

export { LinkedServiceAzureFileStorageArgs, LinkedServiceAzureFileStorageState } from "./linkedServiceAzureFileStorage";
export type LinkedServiceAzureFileStorage = import("./linkedServiceAzureFileStorage").LinkedServiceAzureFileStorage;
export const LinkedServiceAzureFileStorage: typeof import("./linkedServiceAzureFileStorage").LinkedServiceAzureFileStorage = null as any;
utilities.lazyLoad(exports, ["LinkedServiceAzureFileStorage"], () => require("./linkedServiceAzureFileStorage"));

export { LinkedServiceAzureFunctionArgs, LinkedServiceAzureFunctionState } from "./linkedServiceAzureFunction";
export type LinkedServiceAzureFunction = import("./linkedServiceAzureFunction").LinkedServiceAzureFunction;
export const LinkedServiceAzureFunction: typeof import("./linkedServiceAzureFunction").LinkedServiceAzureFunction = null as any;
utilities.lazyLoad(exports, ["LinkedServiceAzureFunction"], () => require("./linkedServiceAzureFunction"));

export { LinkedServiceAzureSearchArgs, LinkedServiceAzureSearchState } from "./linkedServiceAzureSearch";
export type LinkedServiceAzureSearch = import("./linkedServiceAzureSearch").LinkedServiceAzureSearch;
export const LinkedServiceAzureSearch: typeof import("./linkedServiceAzureSearch").LinkedServiceAzureSearch = null as any;
utilities.lazyLoad(exports, ["LinkedServiceAzureSearch"], () => require("./linkedServiceAzureSearch"));

export { LinkedServiceAzureSqlDatabaseArgs, LinkedServiceAzureSqlDatabaseState } from "./linkedServiceAzureSqlDatabase";
export type LinkedServiceAzureSqlDatabase = import("./linkedServiceAzureSqlDatabase").LinkedServiceAzureSqlDatabase;
export const LinkedServiceAzureSqlDatabase: typeof import("./linkedServiceAzureSqlDatabase").LinkedServiceAzureSqlDatabase = null as any;
utilities.lazyLoad(exports, ["LinkedServiceAzureSqlDatabase"], () => require("./linkedServiceAzureSqlDatabase"));

export { LinkedServiceAzureTableStorageArgs, LinkedServiceAzureTableStorageState } from "./linkedServiceAzureTableStorage";
export type LinkedServiceAzureTableStorage = import("./linkedServiceAzureTableStorage").LinkedServiceAzureTableStorage;
export const LinkedServiceAzureTableStorage: typeof import("./linkedServiceAzureTableStorage").LinkedServiceAzureTableStorage = null as any;
utilities.lazyLoad(exports, ["LinkedServiceAzureTableStorage"], () => require("./linkedServiceAzureTableStorage"));

export { LinkedServiceCosmosDbArgs, LinkedServiceCosmosDbState } from "./linkedServiceCosmosDb";
export type LinkedServiceCosmosDb = import("./linkedServiceCosmosDb").LinkedServiceCosmosDb;
export const LinkedServiceCosmosDb: typeof import("./linkedServiceCosmosDb").LinkedServiceCosmosDb = null as any;
utilities.lazyLoad(exports, ["LinkedServiceCosmosDb"], () => require("./linkedServiceCosmosDb"));

export { LinkedServiceCosmosDbMongoApiArgs, LinkedServiceCosmosDbMongoApiState } from "./linkedServiceCosmosDbMongoApi";
export type LinkedServiceCosmosDbMongoApi = import("./linkedServiceCosmosDbMongoApi").LinkedServiceCosmosDbMongoApi;
export const LinkedServiceCosmosDbMongoApi: typeof import("./linkedServiceCosmosDbMongoApi").LinkedServiceCosmosDbMongoApi = null as any;
utilities.lazyLoad(exports, ["LinkedServiceCosmosDbMongoApi"], () => require("./linkedServiceCosmosDbMongoApi"));

export { LinkedServiceDataLakeStorageGen2Args, LinkedServiceDataLakeStorageGen2State } from "./linkedServiceDataLakeStorageGen2";
export type LinkedServiceDataLakeStorageGen2 = import("./linkedServiceDataLakeStorageGen2").LinkedServiceDataLakeStorageGen2;
export const LinkedServiceDataLakeStorageGen2: typeof import("./linkedServiceDataLakeStorageGen2").LinkedServiceDataLakeStorageGen2 = null as any;
utilities.lazyLoad(exports, ["LinkedServiceDataLakeStorageGen2"], () => require("./linkedServiceDataLakeStorageGen2"));

export { LinkedServiceKeyVaultArgs, LinkedServiceKeyVaultState } from "./linkedServiceKeyVault";
export type LinkedServiceKeyVault = import("./linkedServiceKeyVault").LinkedServiceKeyVault;
export const LinkedServiceKeyVault: typeof import("./linkedServiceKeyVault").LinkedServiceKeyVault = null as any;
utilities.lazyLoad(exports, ["LinkedServiceKeyVault"], () => require("./linkedServiceKeyVault"));

export { LinkedServiceKustoArgs, LinkedServiceKustoState } from "./linkedServiceKusto";
export type LinkedServiceKusto = import("./linkedServiceKusto").LinkedServiceKusto;
export const LinkedServiceKusto: typeof import("./linkedServiceKusto").LinkedServiceKusto = null as any;
utilities.lazyLoad(exports, ["LinkedServiceKusto"], () => require("./linkedServiceKusto"));

export { LinkedServiceMysqlArgs, LinkedServiceMysqlState } from "./linkedServiceMysql";
export type LinkedServiceMysql = import("./linkedServiceMysql").LinkedServiceMysql;
export const LinkedServiceMysql: typeof import("./linkedServiceMysql").LinkedServiceMysql = null as any;
utilities.lazyLoad(exports, ["LinkedServiceMysql"], () => require("./linkedServiceMysql"));

export { LinkedServiceOdataArgs, LinkedServiceOdataState } from "./linkedServiceOdata";
export type LinkedServiceOdata = import("./linkedServiceOdata").LinkedServiceOdata;
export const LinkedServiceOdata: typeof import("./linkedServiceOdata").LinkedServiceOdata = null as any;
utilities.lazyLoad(exports, ["LinkedServiceOdata"], () => require("./linkedServiceOdata"));

export { LinkedServiceOdbcArgs, LinkedServiceOdbcState } from "./linkedServiceOdbc";
export type LinkedServiceOdbc = import("./linkedServiceOdbc").LinkedServiceOdbc;
export const LinkedServiceOdbc: typeof import("./linkedServiceOdbc").LinkedServiceOdbc = null as any;
utilities.lazyLoad(exports, ["LinkedServiceOdbc"], () => require("./linkedServiceOdbc"));

export { LinkedServicePostgresqlArgs, LinkedServicePostgresqlState } from "./linkedServicePostgresql";
export type LinkedServicePostgresql = import("./linkedServicePostgresql").LinkedServicePostgresql;
export const LinkedServicePostgresql: typeof import("./linkedServicePostgresql").LinkedServicePostgresql = null as any;
utilities.lazyLoad(exports, ["LinkedServicePostgresql"], () => require("./linkedServicePostgresql"));

export { LinkedServiceSftpArgs, LinkedServiceSftpState } from "./linkedServiceSftp";
export type LinkedServiceSftp = import("./linkedServiceSftp").LinkedServiceSftp;
export const LinkedServiceSftp: typeof import("./linkedServiceSftp").LinkedServiceSftp = null as any;
utilities.lazyLoad(exports, ["LinkedServiceSftp"], () => require("./linkedServiceSftp"));

export { LinkedServiceSnowflakeArgs, LinkedServiceSnowflakeState } from "./linkedServiceSnowflake";
export type LinkedServiceSnowflake = import("./linkedServiceSnowflake").LinkedServiceSnowflake;
export const LinkedServiceSnowflake: typeof import("./linkedServiceSnowflake").LinkedServiceSnowflake = null as any;
utilities.lazyLoad(exports, ["LinkedServiceSnowflake"], () => require("./linkedServiceSnowflake"));

export { LinkedServiceSqlServerArgs, LinkedServiceSqlServerState } from "./linkedServiceSqlServer";
export type LinkedServiceSqlServer = import("./linkedServiceSqlServer").LinkedServiceSqlServer;
export const LinkedServiceSqlServer: typeof import("./linkedServiceSqlServer").LinkedServiceSqlServer = null as any;
utilities.lazyLoad(exports, ["LinkedServiceSqlServer"], () => require("./linkedServiceSqlServer"));

export { LinkedServiceSynapseArgs, LinkedServiceSynapseState } from "./linkedServiceSynapse";
export type LinkedServiceSynapse = import("./linkedServiceSynapse").LinkedServiceSynapse;
export const LinkedServiceSynapse: typeof import("./linkedServiceSynapse").LinkedServiceSynapse = null as any;
utilities.lazyLoad(exports, ["LinkedServiceSynapse"], () => require("./linkedServiceSynapse"));

export { LinkedServiceWebArgs, LinkedServiceWebState } from "./linkedServiceWeb";
export type LinkedServiceWeb = import("./linkedServiceWeb").LinkedServiceWeb;
export const LinkedServiceWeb: typeof import("./linkedServiceWeb").LinkedServiceWeb = null as any;
utilities.lazyLoad(exports, ["LinkedServiceWeb"], () => require("./linkedServiceWeb"));

export { ManagedPrivateEndpointArgs, ManagedPrivateEndpointState } from "./managedPrivateEndpoint";
export type ManagedPrivateEndpoint = import("./managedPrivateEndpoint").ManagedPrivateEndpoint;
export const ManagedPrivateEndpoint: typeof import("./managedPrivateEndpoint").ManagedPrivateEndpoint = null as any;
utilities.lazyLoad(exports, ["ManagedPrivateEndpoint"], () => require("./managedPrivateEndpoint"));

export { PipelineArgs, PipelineState } from "./pipeline";
export type Pipeline = import("./pipeline").Pipeline;
export const Pipeline: typeof import("./pipeline").Pipeline = null as any;
utilities.lazyLoad(exports, ["Pipeline"], () => require("./pipeline"));

export { TriggerBlobEventArgs, TriggerBlobEventState } from "./triggerBlobEvent";
export type TriggerBlobEvent = import("./triggerBlobEvent").TriggerBlobEvent;
export const TriggerBlobEvent: typeof import("./triggerBlobEvent").TriggerBlobEvent = null as any;
utilities.lazyLoad(exports, ["TriggerBlobEvent"], () => require("./triggerBlobEvent"));

export { TriggerCustomEventArgs, TriggerCustomEventState } from "./triggerCustomEvent";
export type TriggerCustomEvent = import("./triggerCustomEvent").TriggerCustomEvent;
export const TriggerCustomEvent: typeof import("./triggerCustomEvent").TriggerCustomEvent = null as any;
utilities.lazyLoad(exports, ["TriggerCustomEvent"], () => require("./triggerCustomEvent"));

export { TriggerScheduleArgs, TriggerScheduleState } from "./triggerSchedule";
export type TriggerSchedule = import("./triggerSchedule").TriggerSchedule;
export const TriggerSchedule: typeof import("./triggerSchedule").TriggerSchedule = null as any;
utilities.lazyLoad(exports, ["TriggerSchedule"], () => require("./triggerSchedule"));

export { TriggerTumblingWindowArgs, TriggerTumblingWindowState } from "./triggerTumblingWindow";
export type TriggerTumblingWindow = import("./triggerTumblingWindow").TriggerTumblingWindow;
export const TriggerTumblingWindow: typeof import("./triggerTumblingWindow").TriggerTumblingWindow = null as any;
utilities.lazyLoad(exports, ["TriggerTumblingWindow"], () => require("./triggerTumblingWindow"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:datafactory/credentialUserManagedIdentity:CredentialUserManagedIdentity":
                return new CredentialUserManagedIdentity(name, <any>undefined, { urn })
            case "azure:datafactory/customDataset:CustomDataset":
                return new CustomDataset(name, <any>undefined, { urn })
            case "azure:datafactory/dataFlow:DataFlow":
                return new DataFlow(name, <any>undefined, { urn })
            case "azure:datafactory/datasetAzureBlob:DatasetAzureBlob":
                return new DatasetAzureBlob(name, <any>undefined, { urn })
            case "azure:datafactory/datasetAzureSqlTable:DatasetAzureSqlTable":
                return new DatasetAzureSqlTable(name, <any>undefined, { urn })
            case "azure:datafactory/datasetBinary:DatasetBinary":
                return new DatasetBinary(name, <any>undefined, { urn })
            case "azure:datafactory/datasetCosmosDBApi:DatasetCosmosDBApi":
                return new DatasetCosmosDBApi(name, <any>undefined, { urn })
            case "azure:datafactory/datasetDelimitedText:DatasetDelimitedText":
                return new DatasetDelimitedText(name, <any>undefined, { urn })
            case "azure:datafactory/datasetHttp:DatasetHttp":
                return new DatasetHttp(name, <any>undefined, { urn })
            case "azure:datafactory/datasetJson:DatasetJson":
                return new DatasetJson(name, <any>undefined, { urn })
            case "azure:datafactory/datasetMysql:DatasetMysql":
                return new DatasetMysql(name, <any>undefined, { urn })
            case "azure:datafactory/datasetParquet:DatasetParquet":
                return new DatasetParquet(name, <any>undefined, { urn })
            case "azure:datafactory/datasetPostgresql:DatasetPostgresql":
                return new DatasetPostgresql(name, <any>undefined, { urn })
            case "azure:datafactory/datasetSnowflake:DatasetSnowflake":
                return new DatasetSnowflake(name, <any>undefined, { urn })
            case "azure:datafactory/datasetSqlServerTable:DatasetSqlServerTable":
                return new DatasetSqlServerTable(name, <any>undefined, { urn })
            case "azure:datafactory/factory:Factory":
                return new Factory(name, <any>undefined, { urn })
            case "azure:datafactory/flowletDataFlow:FlowletDataFlow":
                return new FlowletDataFlow(name, <any>undefined, { urn })
            case "azure:datafactory/integrationRuntimeManaged:IntegrationRuntimeManaged":
                return new IntegrationRuntimeManaged(name, <any>undefined, { urn })
            case "azure:datafactory/integrationRuntimeRule:IntegrationRuntimeRule":
                return new IntegrationRuntimeRule(name, <any>undefined, { urn })
            case "azure:datafactory/integrationRuntimeSelfHosted:IntegrationRuntimeSelfHosted":
                return new IntegrationRuntimeSelfHosted(name, <any>undefined, { urn })
            case "azure:datafactory/integrationRuntimeSsis:IntegrationRuntimeSsis":
                return new IntegrationRuntimeSsis(name, <any>undefined, { urn })
            case "azure:datafactory/linkedCustomService:LinkedCustomService":
                return new LinkedCustomService(name, <any>undefined, { urn })
            case "azure:datafactory/linkedServiceAzureBlobStorage:LinkedServiceAzureBlobStorage":
                return new LinkedServiceAzureBlobStorage(name, <any>undefined, { urn })
            case "azure:datafactory/linkedServiceAzureDatabricks:LinkedServiceAzureDatabricks":
                return new LinkedServiceAzureDatabricks(name, <any>undefined, { urn })
            case "azure:datafactory/linkedServiceAzureFileStorage:LinkedServiceAzureFileStorage":
                return new LinkedServiceAzureFileStorage(name, <any>undefined, { urn })
            case "azure:datafactory/linkedServiceAzureFunction:LinkedServiceAzureFunction":
                return new LinkedServiceAzureFunction(name, <any>undefined, { urn })
            case "azure:datafactory/linkedServiceAzureSearch:LinkedServiceAzureSearch":
                return new LinkedServiceAzureSearch(name, <any>undefined, { urn })
            case "azure:datafactory/linkedServiceAzureSqlDatabase:LinkedServiceAzureSqlDatabase":
                return new LinkedServiceAzureSqlDatabase(name, <any>undefined, { urn })
            case "azure:datafactory/linkedServiceAzureTableStorage:LinkedServiceAzureTableStorage":
                return new LinkedServiceAzureTableStorage(name, <any>undefined, { urn })
            case "azure:datafactory/linkedServiceCosmosDb:LinkedServiceCosmosDb":
                return new LinkedServiceCosmosDb(name, <any>undefined, { urn })
            case "azure:datafactory/linkedServiceCosmosDbMongoApi:LinkedServiceCosmosDbMongoApi":
                return new LinkedServiceCosmosDbMongoApi(name, <any>undefined, { urn })
            case "azure:datafactory/linkedServiceDataLakeStorageGen2:LinkedServiceDataLakeStorageGen2":
                return new LinkedServiceDataLakeStorageGen2(name, <any>undefined, { urn })
            case "azure:datafactory/linkedServiceKeyVault:LinkedServiceKeyVault":
                return new LinkedServiceKeyVault(name, <any>undefined, { urn })
            case "azure:datafactory/linkedServiceKusto:LinkedServiceKusto":
                return new LinkedServiceKusto(name, <any>undefined, { urn })
            case "azure:datafactory/linkedServiceMysql:LinkedServiceMysql":
                return new LinkedServiceMysql(name, <any>undefined, { urn })
            case "azure:datafactory/linkedServiceOdata:LinkedServiceOdata":
                return new LinkedServiceOdata(name, <any>undefined, { urn })
            case "azure:datafactory/linkedServiceOdbc:LinkedServiceOdbc":
                return new LinkedServiceOdbc(name, <any>undefined, { urn })
            case "azure:datafactory/linkedServicePostgresql:LinkedServicePostgresql":
                return new LinkedServicePostgresql(name, <any>undefined, { urn })
            case "azure:datafactory/linkedServiceSftp:LinkedServiceSftp":
                return new LinkedServiceSftp(name, <any>undefined, { urn })
            case "azure:datafactory/linkedServiceSnowflake:LinkedServiceSnowflake":
                return new LinkedServiceSnowflake(name, <any>undefined, { urn })
            case "azure:datafactory/linkedServiceSqlServer:LinkedServiceSqlServer":
                return new LinkedServiceSqlServer(name, <any>undefined, { urn })
            case "azure:datafactory/linkedServiceSynapse:LinkedServiceSynapse":
                return new LinkedServiceSynapse(name, <any>undefined, { urn })
            case "azure:datafactory/linkedServiceWeb:LinkedServiceWeb":
                return new LinkedServiceWeb(name, <any>undefined, { urn })
            case "azure:datafactory/managedPrivateEndpoint:ManagedPrivateEndpoint":
                return new ManagedPrivateEndpoint(name, <any>undefined, { urn })
            case "azure:datafactory/pipeline:Pipeline":
                return new Pipeline(name, <any>undefined, { urn })
            case "azure:datafactory/triggerBlobEvent:TriggerBlobEvent":
                return new TriggerBlobEvent(name, <any>undefined, { urn })
            case "azure:datafactory/triggerCustomEvent:TriggerCustomEvent":
                return new TriggerCustomEvent(name, <any>undefined, { urn })
            case "azure:datafactory/triggerSchedule:TriggerSchedule":
                return new TriggerSchedule(name, <any>undefined, { urn })
            case "azure:datafactory/triggerTumblingWindow:TriggerTumblingWindow":
                return new TriggerTumblingWindow(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "datafactory/credentialUserManagedIdentity", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/customDataset", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/dataFlow", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetAzureBlob", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetAzureSqlTable", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetBinary", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetCosmosDBApi", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetDelimitedText", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetHttp", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetJson", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetMysql", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetParquet", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetPostgresql", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetSnowflake", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetSqlServerTable", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/factory", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/flowletDataFlow", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/integrationRuntimeManaged", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/integrationRuntimeRule", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/integrationRuntimeSelfHosted", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/integrationRuntimeSsis", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedCustomService", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceAzureBlobStorage", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceAzureDatabricks", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceAzureFileStorage", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceAzureFunction", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceAzureSearch", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceAzureSqlDatabase", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceAzureTableStorage", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceCosmosDb", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceCosmosDbMongoApi", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceDataLakeStorageGen2", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceKeyVault", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceKusto", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceMysql", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceOdata", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceOdbc", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServicePostgresql", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceSftp", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceSnowflake", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceSqlServer", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceSynapse", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceWeb", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/managedPrivateEndpoint", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/pipeline", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/triggerBlobEvent", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/triggerCustomEvent", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/triggerSchedule", _module)
pulumi.runtime.registerResourceModule("azure", "datafactory/triggerTumblingWindow", _module)
