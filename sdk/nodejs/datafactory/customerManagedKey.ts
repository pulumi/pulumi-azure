// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Customer Managed Key for a Data Factory.
 *
 * > **Note:** The Customer Managed Key cannot be removed from the Data Factory once added. To remove the Customer Managed Key delete and recreate the parent Data Factory.
 *
 * ## Example Usage
 *
 * ### With System Assigned Identity
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleKeyVault = new azure.keyvault.KeyVault("example", {
 *     name: "example-key-vault",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "standard",
 *     purgeProtectionEnabled: true,
 * });
 * const exampleKey = new azure.keyvault.Key("example", {
 *     name: "examplekey",
 *     keyVaultId: exampleKeyVault.id,
 *     keyType: "RSA",
 *     keySize: 2048,
 *     keyOpts: [
 *         "unwrapKey",
 *         "wrapKey",
 *     ],
 * });
 * const currentClientPolicy = new azure.keyvault.AccessPolicy("current_client_policy", {
 *     keyVaultId: exampleKeyVault.id,
 *     tenantId: current.then(current => current.tenantId),
 *     objectId: current.then(current => current.objectId),
 *     keyPermissions: [
 *         "Create",
 *         "Delete",
 *         "Get",
 *         "Purge",
 *         "Recover",
 *         "Update",
 *         "GetRotationPolicy",
 *     ],
 *     secretPermissions: [
 *         "Delete",
 *         "Get",
 *         "Set",
 *     ],
 * });
 * const exampleFactory = new azure.datafactory.Factory("example", {
 *     name: "example_data_factory",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     identity: {
 *         type: "SystemAssigned",
 *         identityIds: [exampleAzurermUserAssignedIdentity.id],
 *     },
 * });
 * const datafactory = new azure.keyvault.AccessPolicy("datafactory", {
 *     keyVaultId: exampleKeyVault.id,
 *     tenantId: exampleFactory.identity.apply(identity => identity?.tenantId),
 *     objectId: exampleFactory.identity.apply(identity => identity?.principalId),
 *     keyPermissions: [
 *         "Create",
 *         "Delete",
 *         "Get",
 *         "Purge",
 *         "Recover",
 *         "Update",
 *         "GetRotationPolicy",
 *         "WrapKey",
 *         "UnwrapKey",
 *     ],
 *     secretPermissions: [
 *         "Delete",
 *         "Get",
 *         "Set",
 *     ],
 * });
 * const exampleCustomerManagedKey = new azure.datafactory.CustomerManagedKey("example", {
 *     dataFactoryId: exampleFactory.id,
 *     customerManagedKeyId: exampleKey.id,
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.DataFactory` - 2018-06-01
 *
 * ## Import
 *
 * Data Factory Customer Managed Keys can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:datafactory/customerManagedKey:CustomerManagedKey example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example
 * ```
 */
export class CustomerManagedKey extends pulumi.CustomResource {
    /**
     * Get an existing CustomerManagedKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomerManagedKeyState, opts?: pulumi.CustomResourceOptions): CustomerManagedKey {
        return new CustomerManagedKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:datafactory/customerManagedKey:CustomerManagedKey';

    /**
     * Returns true if the given object is an instance of CustomerManagedKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomerManagedKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomerManagedKey.__pulumiType;
    }

    /**
     * The ID the of the Customer Managed Key to associate with the Data Factory.
     */
    declare public readonly customerManagedKeyId: pulumi.Output<string>;
    /**
     * The ID of the Data Factory Resource the Customer Managed Key will be associated with. Changing this forces a new resource to be created.
     */
    declare public readonly dataFactoryId: pulumi.Output<string>;
    /**
     * The User Assigned Identity ID that will be used to access Key Vaults that contain the encryption keys.
     */
    declare public readonly userAssignedIdentityId: pulumi.Output<string | undefined>;

    /**
     * Create a CustomerManagedKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomerManagedKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomerManagedKeyArgs | CustomerManagedKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomerManagedKeyState | undefined;
            resourceInputs["customerManagedKeyId"] = state?.customerManagedKeyId;
            resourceInputs["dataFactoryId"] = state?.dataFactoryId;
            resourceInputs["userAssignedIdentityId"] = state?.userAssignedIdentityId;
        } else {
            const args = argsOrState as CustomerManagedKeyArgs | undefined;
            if (args?.customerManagedKeyId === undefined && !opts.urn) {
                throw new Error("Missing required property 'customerManagedKeyId'");
            }
            if (args?.dataFactoryId === undefined && !opts.urn) {
                throw new Error("Missing required property 'dataFactoryId'");
            }
            resourceInputs["customerManagedKeyId"] = args?.customerManagedKeyId;
            resourceInputs["dataFactoryId"] = args?.dataFactoryId;
            resourceInputs["userAssignedIdentityId"] = args?.userAssignedIdentityId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomerManagedKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomerManagedKey resources.
 */
export interface CustomerManagedKeyState {
    /**
     * The ID the of the Customer Managed Key to associate with the Data Factory.
     */
    customerManagedKeyId?: pulumi.Input<string>;
    /**
     * The ID of the Data Factory Resource the Customer Managed Key will be associated with. Changing this forces a new resource to be created.
     */
    dataFactoryId?: pulumi.Input<string>;
    /**
     * The User Assigned Identity ID that will be used to access Key Vaults that contain the encryption keys.
     */
    userAssignedIdentityId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CustomerManagedKey resource.
 */
export interface CustomerManagedKeyArgs {
    /**
     * The ID the of the Customer Managed Key to associate with the Data Factory.
     */
    customerManagedKeyId: pulumi.Input<string>;
    /**
     * The ID of the Data Factory Resource the Customer Managed Key will be associated with. Changing this forces a new resource to be created.
     */
    dataFactoryId: pulumi.Input<string>;
    /**
     * The User Assigned Identity ID that will be used to access Key Vaults that contain the encryption keys.
     */
    userAssignedIdentityId?: pulumi.Input<string>;
}
