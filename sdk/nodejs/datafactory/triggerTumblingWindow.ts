// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

export class TriggerTumblingWindow extends pulumi.CustomResource {
    /**
     * Get an existing TriggerTumblingWindow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TriggerTumblingWindowState, opts?: pulumi.CustomResourceOptions): TriggerTumblingWindow {
        return new TriggerTumblingWindow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:datafactory/triggerTumblingWindow:TriggerTumblingWindow';

    /**
     * Returns true if the given object is an instance of TriggerTumblingWindow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TriggerTumblingWindow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TriggerTumblingWindow.__pulumiType;
    }

    public readonly activated!: pulumi.Output<boolean | undefined>;
    public readonly additionalProperties!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly annotations!: pulumi.Output<string[] | undefined>;
    public readonly dataFactoryId!: pulumi.Output<string>;
    public readonly delay!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly endTime!: pulumi.Output<string | undefined>;
    public readonly frequency!: pulumi.Output<string>;
    public readonly interval!: pulumi.Output<number>;
    public readonly maxConcurrency!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly pipeline!: pulumi.Output<outputs.datafactory.TriggerTumblingWindowPipeline>;
    public readonly retry!: pulumi.Output<outputs.datafactory.TriggerTumblingWindowRetry | undefined>;
    public readonly startTime!: pulumi.Output<string>;
    public readonly triggerDependencies!: pulumi.Output<outputs.datafactory.TriggerTumblingWindowTriggerDependency[] | undefined>;

    /**
     * Create a TriggerTumblingWindow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TriggerTumblingWindowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TriggerTumblingWindowArgs | TriggerTumblingWindowState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TriggerTumblingWindowState | undefined;
            inputs["activated"] = state ? state.activated : undefined;
            inputs["additionalProperties"] = state ? state.additionalProperties : undefined;
            inputs["annotations"] = state ? state.annotations : undefined;
            inputs["dataFactoryId"] = state ? state.dataFactoryId : undefined;
            inputs["delay"] = state ? state.delay : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["endTime"] = state ? state.endTime : undefined;
            inputs["frequency"] = state ? state.frequency : undefined;
            inputs["interval"] = state ? state.interval : undefined;
            inputs["maxConcurrency"] = state ? state.maxConcurrency : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["pipeline"] = state ? state.pipeline : undefined;
            inputs["retry"] = state ? state.retry : undefined;
            inputs["startTime"] = state ? state.startTime : undefined;
            inputs["triggerDependencies"] = state ? state.triggerDependencies : undefined;
        } else {
            const args = argsOrState as TriggerTumblingWindowArgs | undefined;
            if ((!args || args.dataFactoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataFactoryId'");
            }
            if ((!args || args.frequency === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frequency'");
            }
            if ((!args || args.interval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interval'");
            }
            if ((!args || args.pipeline === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pipeline'");
            }
            if ((!args || args.startTime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'startTime'");
            }
            inputs["activated"] = args ? args.activated : undefined;
            inputs["additionalProperties"] = args ? args.additionalProperties : undefined;
            inputs["annotations"] = args ? args.annotations : undefined;
            inputs["dataFactoryId"] = args ? args.dataFactoryId : undefined;
            inputs["delay"] = args ? args.delay : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["endTime"] = args ? args.endTime : undefined;
            inputs["frequency"] = args ? args.frequency : undefined;
            inputs["interval"] = args ? args.interval : undefined;
            inputs["maxConcurrency"] = args ? args.maxConcurrency : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["pipeline"] = args ? args.pipeline : undefined;
            inputs["retry"] = args ? args.retry : undefined;
            inputs["startTime"] = args ? args.startTime : undefined;
            inputs["triggerDependencies"] = args ? args.triggerDependencies : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(TriggerTumblingWindow.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TriggerTumblingWindow resources.
 */
export interface TriggerTumblingWindowState {
    activated?: pulumi.Input<boolean>;
    additionalProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    dataFactoryId?: pulumi.Input<string>;
    delay?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    frequency?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
    maxConcurrency?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    pipeline?: pulumi.Input<inputs.datafactory.TriggerTumblingWindowPipeline>;
    retry?: pulumi.Input<inputs.datafactory.TriggerTumblingWindowRetry>;
    startTime?: pulumi.Input<string>;
    triggerDependencies?: pulumi.Input<pulumi.Input<inputs.datafactory.TriggerTumblingWindowTriggerDependency>[]>;
}

/**
 * The set of arguments for constructing a TriggerTumblingWindow resource.
 */
export interface TriggerTumblingWindowArgs {
    activated?: pulumi.Input<boolean>;
    additionalProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    dataFactoryId: pulumi.Input<string>;
    delay?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    frequency: pulumi.Input<string>;
    interval: pulumi.Input<number>;
    maxConcurrency?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    pipeline: pulumi.Input<inputs.datafactory.TriggerTumblingWindowPipeline>;
    retry?: pulumi.Input<inputs.datafactory.TriggerTumblingWindowRetry>;
    startTime: pulumi.Input<string>;
    triggerDependencies?: pulumi.Input<pulumi.Input<inputs.datafactory.TriggerTumblingWindowTriggerDependency>[]>;
}
