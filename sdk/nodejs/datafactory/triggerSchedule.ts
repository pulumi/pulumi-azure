// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Trigger Schedule inside a Azure Data Factory.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleFactory = new azure.datafactory.Factory("example", {
 *     name: "example",
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const examplePipeline = new azure.datafactory.Pipeline("example", {
 *     name: "example",
 *     dataFactoryId: exampleFactory.id,
 * });
 * const exampleTriggerSchedule = new azure.datafactory.TriggerSchedule("example", {
 *     name: "example",
 *     dataFactoryId: exampleFactory.id,
 *     pipelineName: examplePipeline.name,
 *     interval: 5,
 *     frequency: "Day",
 * });
 * ```
 *
 * ## Import
 *
 * Data Factory Schedule Trigger can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:datafactory/triggerSchedule:TriggerSchedule example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/triggers/example
 * ```
 */
export class TriggerSchedule extends pulumi.CustomResource {
    /**
     * Get an existing TriggerSchedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TriggerScheduleState, opts?: pulumi.CustomResourceOptions): TriggerSchedule {
        return new TriggerSchedule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:datafactory/triggerSchedule:TriggerSchedule';

    /**
     * Returns true if the given object is an instance of TriggerSchedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TriggerSchedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TriggerSchedule.__pulumiType;
    }

    /**
     * Specifies if the Data Factory Schedule Trigger is activated. Defaults to `true`.
     */
    declare public readonly activated: pulumi.Output<boolean | undefined>;
    /**
     * List of tags that can be used for describing the Data Factory Schedule Trigger.
     */
    declare public readonly annotations: pulumi.Output<string[] | undefined>;
    /**
     * The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
     */
    declare public readonly dataFactoryId: pulumi.Output<string>;
    /**
     * The Schedule Trigger's description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The time the Schedule Trigger should end. The time will be represented in UTC.
     */
    declare public readonly endTime: pulumi.Output<string | undefined>;
    /**
     * The trigger frequency. Valid values include `Minute`, `Hour`, `Day`, `Week`, `Month`. Defaults to `Minute`.
     */
    declare public readonly frequency: pulumi.Output<string | undefined>;
    /**
     * The interval for how often the trigger occurs. This defaults to `1`.
     */
    declare public readonly interval: pulumi.Output<number | undefined>;
    /**
     * Specifies the name of the Data Factory Schedule Trigger. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The Data Factory Pipeline name that the trigger will act on.
     */
    declare public readonly pipelineName: pulumi.Output<string>;
    /**
     * The pipeline parameters that the trigger will act upon.
     */
    declare public readonly pipelineParameters: pulumi.Output<{[key: string]: string}>;
    /**
     * A `pipeline` block as defined below.
     */
    declare public readonly pipelines: pulumi.Output<outputs.datafactory.TriggerSchedulePipeline[]>;
    /**
     * A `schedule` block as defined below, which further specifies the recurrence schedule for the trigger. A schedule is capable of limiting or increasing the number of trigger executions specified by the `frequency` and `interval` properties.
     */
    declare public readonly schedule: pulumi.Output<outputs.datafactory.TriggerScheduleSchedule | undefined>;
    /**
     * The time the Schedule Trigger will start. This defaults to the current time. The time will be represented in UTC.
     */
    declare public readonly startTime: pulumi.Output<string>;
    /**
     * The timezone of the start/end time.
     */
    declare public readonly timeZone: pulumi.Output<string | undefined>;

    /**
     * Create a TriggerSchedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TriggerScheduleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TriggerScheduleArgs | TriggerScheduleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TriggerScheduleState | undefined;
            resourceInputs["activated"] = state?.activated;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["dataFactoryId"] = state?.dataFactoryId;
            resourceInputs["description"] = state?.description;
            resourceInputs["endTime"] = state?.endTime;
            resourceInputs["frequency"] = state?.frequency;
            resourceInputs["interval"] = state?.interval;
            resourceInputs["name"] = state?.name;
            resourceInputs["pipelineName"] = state?.pipelineName;
            resourceInputs["pipelineParameters"] = state?.pipelineParameters;
            resourceInputs["pipelines"] = state?.pipelines;
            resourceInputs["schedule"] = state?.schedule;
            resourceInputs["startTime"] = state?.startTime;
            resourceInputs["timeZone"] = state?.timeZone;
        } else {
            const args = argsOrState as TriggerScheduleArgs | undefined;
            if (args?.dataFactoryId === undefined && !opts.urn) {
                throw new Error("Missing required property 'dataFactoryId'");
            }
            resourceInputs["activated"] = args?.activated;
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["dataFactoryId"] = args?.dataFactoryId;
            resourceInputs["description"] = args?.description;
            resourceInputs["endTime"] = args?.endTime;
            resourceInputs["frequency"] = args?.frequency;
            resourceInputs["interval"] = args?.interval;
            resourceInputs["name"] = args?.name;
            resourceInputs["pipelineName"] = args?.pipelineName;
            resourceInputs["pipelineParameters"] = args?.pipelineParameters;
            resourceInputs["pipelines"] = args?.pipelines;
            resourceInputs["schedule"] = args?.schedule;
            resourceInputs["startTime"] = args?.startTime;
            resourceInputs["timeZone"] = args?.timeZone;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TriggerSchedule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TriggerSchedule resources.
 */
export interface TriggerScheduleState {
    /**
     * Specifies if the Data Factory Schedule Trigger is activated. Defaults to `true`.
     */
    activated?: pulumi.Input<boolean>;
    /**
     * List of tags that can be used for describing the Data Factory Schedule Trigger.
     */
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
     */
    dataFactoryId?: pulumi.Input<string>;
    /**
     * The Schedule Trigger's description.
     */
    description?: pulumi.Input<string>;
    /**
     * The time the Schedule Trigger should end. The time will be represented in UTC.
     */
    endTime?: pulumi.Input<string>;
    /**
     * The trigger frequency. Valid values include `Minute`, `Hour`, `Day`, `Week`, `Month`. Defaults to `Minute`.
     */
    frequency?: pulumi.Input<string>;
    /**
     * The interval for how often the trigger occurs. This defaults to `1`.
     */
    interval?: pulumi.Input<number>;
    /**
     * Specifies the name of the Data Factory Schedule Trigger. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     */
    name?: pulumi.Input<string>;
    /**
     * The Data Factory Pipeline name that the trigger will act on.
     */
    pipelineName?: pulumi.Input<string>;
    /**
     * The pipeline parameters that the trigger will act upon.
     */
    pipelineParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A `pipeline` block as defined below.
     */
    pipelines?: pulumi.Input<pulumi.Input<inputs.datafactory.TriggerSchedulePipeline>[]>;
    /**
     * A `schedule` block as defined below, which further specifies the recurrence schedule for the trigger. A schedule is capable of limiting or increasing the number of trigger executions specified by the `frequency` and `interval` properties.
     */
    schedule?: pulumi.Input<inputs.datafactory.TriggerScheduleSchedule>;
    /**
     * The time the Schedule Trigger will start. This defaults to the current time. The time will be represented in UTC.
     */
    startTime?: pulumi.Input<string>;
    /**
     * The timezone of the start/end time.
     */
    timeZone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TriggerSchedule resource.
 */
export interface TriggerScheduleArgs {
    /**
     * Specifies if the Data Factory Schedule Trigger is activated. Defaults to `true`.
     */
    activated?: pulumi.Input<boolean>;
    /**
     * List of tags that can be used for describing the Data Factory Schedule Trigger.
     */
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
     */
    dataFactoryId: pulumi.Input<string>;
    /**
     * The Schedule Trigger's description.
     */
    description?: pulumi.Input<string>;
    /**
     * The time the Schedule Trigger should end. The time will be represented in UTC.
     */
    endTime?: pulumi.Input<string>;
    /**
     * The trigger frequency. Valid values include `Minute`, `Hour`, `Day`, `Week`, `Month`. Defaults to `Minute`.
     */
    frequency?: pulumi.Input<string>;
    /**
     * The interval for how often the trigger occurs. This defaults to `1`.
     */
    interval?: pulumi.Input<number>;
    /**
     * Specifies the name of the Data Factory Schedule Trigger. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     */
    name?: pulumi.Input<string>;
    /**
     * The Data Factory Pipeline name that the trigger will act on.
     */
    pipelineName?: pulumi.Input<string>;
    /**
     * The pipeline parameters that the trigger will act upon.
     */
    pipelineParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A `pipeline` block as defined below.
     */
    pipelines?: pulumi.Input<pulumi.Input<inputs.datafactory.TriggerSchedulePipeline>[]>;
    /**
     * A `schedule` block as defined below, which further specifies the recurrence schedule for the trigger. A schedule is capable of limiting or increasing the number of trigger executions specified by the `frequency` and `interval` properties.
     */
    schedule?: pulumi.Input<inputs.datafactory.TriggerScheduleSchedule>;
    /**
     * The time the Schedule Trigger will start. This defaults to the current time. The time will be represented in UTC.
     */
    startTime?: pulumi.Input<string>;
    /**
     * The timezone of the start/end time.
     */
    timeZone?: pulumi.Input<string>;
}
