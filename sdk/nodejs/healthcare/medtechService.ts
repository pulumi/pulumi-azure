// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Healthcare Med Tech Service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-rg",
 *     location: "east us",
 * });
 * const exampleWorkspace = new azure.healthcare.Workspace("example", {
 *     name: "examplewkspace",
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const exampleMedtechService = new azure.healthcare.MedtechService("example", {
 *     name: "examplemed",
 *     workspaceId: exampleWorkspace.id,
 *     location: "east us",
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 *     eventhubNamespaceName: "example-eventhub-namespace",
 *     eventhubName: "example-eventhub",
 *     eventhubConsumerGroupName: "$Default",
 *     deviceMappingJson: JSON.stringify({
 *         templateType: "CollectionContent",
 *         template: [{
 *             templateType: "JsonPathContent",
 *             template: {
 *                 typeName: "heartrate",
 *                 typeMatchExpression: "$..[?(@heartrate)]",
 *                 deviceIdExpression: "$.deviceid",
 *                 timestampExpression: "$.measurementdatetime",
 *                 values: [{
 *                     required: "true",
 *                     valueExpression: "$.heartrate",
 *                     valueName: "hr",
 *                 }],
 *             },
 *         }],
 *     }),
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.HealthcareApis` - 2022-12-01
 *
 * ## Import
 *
 * Healthcare Med Tech Service can be imported using the resource`id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:healthcare/medtechService:MedtechService example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.HealthcareApis/workspaces/workspace1/iotConnectors/iotconnector1
 * ```
 */
export class MedtechService extends pulumi.CustomResource {
    /**
     * Get an existing MedtechService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MedtechServiceState, opts?: pulumi.CustomResourceOptions): MedtechService {
        return new MedtechService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:healthcare/medtechService:MedtechService';

    /**
     * Returns true if the given object is an instance of MedtechService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MedtechService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MedtechService.__pulumiType;
    }

    /**
     * Specifies the Device Mappings of the Med Tech Service.
     */
    declare public readonly deviceMappingJson: pulumi.Output<string>;
    /**
     * Specifies the Consumer Group of the Event Hub to connect to.
     */
    declare public readonly eventhubConsumerGroupName: pulumi.Output<string>;
    /**
     * Specifies the name of the Event Hub to connect to.
     */
    declare public readonly eventhubName: pulumi.Output<string>;
    /**
     * Specifies the namespace name of the Event Hub to connect to.
     */
    declare public readonly eventhubNamespaceName: pulumi.Output<string>;
    /**
     * An `identity` block as defined below.
     */
    declare public readonly identity: pulumi.Output<outputs.healthcare.MedtechServiceIdentity | undefined>;
    /**
     * Specifies the Azure Region where the Healthcare Med Tech Service should be created. Changing this forces a new Healthcare Med Tech Service to be created.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * Specifies the name of the Healthcare Med Tech Service. Changing this forces a new Healthcare Med Tech Service to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the Healthcare Med Tech Service.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the id of the Healthcare Workspace where the Healthcare Med Tech Service should exist. Changing this forces a new Healthcare Med Tech Service to be created.
     */
    declare public readonly workspaceId: pulumi.Output<string>;

    /**
     * Create a MedtechService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MedtechServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MedtechServiceArgs | MedtechServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MedtechServiceState | undefined;
            resourceInputs["deviceMappingJson"] = state?.deviceMappingJson;
            resourceInputs["eventhubConsumerGroupName"] = state?.eventhubConsumerGroupName;
            resourceInputs["eventhubName"] = state?.eventhubName;
            resourceInputs["eventhubNamespaceName"] = state?.eventhubNamespaceName;
            resourceInputs["identity"] = state?.identity;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["workspaceId"] = state?.workspaceId;
        } else {
            const args = argsOrState as MedtechServiceArgs | undefined;
            if (args?.deviceMappingJson === undefined && !opts.urn) {
                throw new Error("Missing required property 'deviceMappingJson'");
            }
            if (args?.eventhubConsumerGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'eventhubConsumerGroupName'");
            }
            if (args?.eventhubName === undefined && !opts.urn) {
                throw new Error("Missing required property 'eventhubName'");
            }
            if (args?.eventhubNamespaceName === undefined && !opts.urn) {
                throw new Error("Missing required property 'eventhubNamespaceName'");
            }
            if (args?.workspaceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["deviceMappingJson"] = args?.deviceMappingJson;
            resourceInputs["eventhubConsumerGroupName"] = args?.eventhubConsumerGroupName;
            resourceInputs["eventhubName"] = args?.eventhubName;
            resourceInputs["eventhubNamespaceName"] = args?.eventhubNamespaceName;
            resourceInputs["identity"] = args?.identity;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["workspaceId"] = args?.workspaceId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MedtechService.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MedtechService resources.
 */
export interface MedtechServiceState {
    /**
     * Specifies the Device Mappings of the Med Tech Service.
     */
    deviceMappingJson?: pulumi.Input<string>;
    /**
     * Specifies the Consumer Group of the Event Hub to connect to.
     */
    eventhubConsumerGroupName?: pulumi.Input<string>;
    /**
     * Specifies the name of the Event Hub to connect to.
     */
    eventhubName?: pulumi.Input<string>;
    /**
     * Specifies the namespace name of the Event Hub to connect to.
     */
    eventhubNamespaceName?: pulumi.Input<string>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.healthcare.MedtechServiceIdentity>;
    /**
     * Specifies the Azure Region where the Healthcare Med Tech Service should be created. Changing this forces a new Healthcare Med Tech Service to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of the Healthcare Med Tech Service. Changing this forces a new Healthcare Med Tech Service to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the Healthcare Med Tech Service.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the id of the Healthcare Workspace where the Healthcare Med Tech Service should exist. Changing this forces a new Healthcare Med Tech Service to be created.
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MedtechService resource.
 */
export interface MedtechServiceArgs {
    /**
     * Specifies the Device Mappings of the Med Tech Service.
     */
    deviceMappingJson: pulumi.Input<string>;
    /**
     * Specifies the Consumer Group of the Event Hub to connect to.
     */
    eventhubConsumerGroupName: pulumi.Input<string>;
    /**
     * Specifies the name of the Event Hub to connect to.
     */
    eventhubName: pulumi.Input<string>;
    /**
     * Specifies the namespace name of the Event Hub to connect to.
     */
    eventhubNamespaceName: pulumi.Input<string>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.healthcare.MedtechServiceIdentity>;
    /**
     * Specifies the Azure Region where the Healthcare Med Tech Service should be created. Changing this forces a new Healthcare Med Tech Service to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of the Healthcare Med Tech Service. Changing this forces a new Healthcare Med Tech Service to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the Healthcare Med Tech Service.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the id of the Healthcare Workspace where the Healthcare Med Tech Service should exist. Changing this forces a new Healthcare Med Tech Service to be created.
     */
    workspaceId: pulumi.Input<string>;
}
