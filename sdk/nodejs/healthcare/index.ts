// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DicomServiceArgs, DicomServiceState } from "./dicomService";
export type DicomService = import("./dicomService").DicomService;
export const DicomService: typeof import("./dicomService").DicomService = null as any;
utilities.lazyLoad(exports, ["DicomService"], () => require("./dicomService"));

export { FhirServiceArgs, FhirServiceState } from "./fhirService";
export type FhirService = import("./fhirService").FhirService;
export const FhirService: typeof import("./fhirService").FhirService = null as any;
utilities.lazyLoad(exports, ["FhirService"], () => require("./fhirService"));

export { GetDicomServiceArgs, GetDicomServiceResult, GetDicomServiceOutputArgs } from "./getDicomService";
export const getDicomService: typeof import("./getDicomService").getDicomService = null as any;
export const getDicomServiceOutput: typeof import("./getDicomService").getDicomServiceOutput = null as any;
utilities.lazyLoad(exports, ["getDicomService","getDicomServiceOutput"], () => require("./getDicomService"));

export { GetFhirServiceArgs, GetFhirServiceResult, GetFhirServiceOutputArgs } from "./getFhirService";
export const getFhirService: typeof import("./getFhirService").getFhirService = null as any;
export const getFhirServiceOutput: typeof import("./getFhirService").getFhirServiceOutput = null as any;
utilities.lazyLoad(exports, ["getFhirService","getFhirServiceOutput"], () => require("./getFhirService"));

export { GetMedtechServiceArgs, GetMedtechServiceResult, GetMedtechServiceOutputArgs } from "./getMedtechService";
export const getMedtechService: typeof import("./getMedtechService").getMedtechService = null as any;
export const getMedtechServiceOutput: typeof import("./getMedtechService").getMedtechServiceOutput = null as any;
utilities.lazyLoad(exports, ["getMedtechService","getMedtechServiceOutput"], () => require("./getMedtechService"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { GetWorkspaceArgs, GetWorkspaceResult, GetWorkspaceOutputArgs } from "./getWorkspace";
export const getWorkspace: typeof import("./getWorkspace").getWorkspace = null as any;
export const getWorkspaceOutput: typeof import("./getWorkspace").getWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspace","getWorkspaceOutput"], () => require("./getWorkspace"));

export { MedtechServiceArgs, MedtechServiceState } from "./medtechService";
export type MedtechService = import("./medtechService").MedtechService;
export const MedtechService: typeof import("./medtechService").MedtechService = null as any;
utilities.lazyLoad(exports, ["MedtechService"], () => require("./medtechService"));

export { MedtechServiceFhirDestinationArgs, MedtechServiceFhirDestinationState } from "./medtechServiceFhirDestination";
export type MedtechServiceFhirDestination = import("./medtechServiceFhirDestination").MedtechServiceFhirDestination;
export const MedtechServiceFhirDestination: typeof import("./medtechServiceFhirDestination").MedtechServiceFhirDestination = null as any;
utilities.lazyLoad(exports, ["MedtechServiceFhirDestination"], () => require("./medtechServiceFhirDestination"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { WorkspaceArgs, WorkspaceState } from "./workspace";
export type Workspace = import("./workspace").Workspace;
export const Workspace: typeof import("./workspace").Workspace = null as any;
utilities.lazyLoad(exports, ["Workspace"], () => require("./workspace"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:healthcare/dicomService:DicomService":
                return new DicomService(name, <any>undefined, { urn })
            case "azure:healthcare/fhirService:FhirService":
                return new FhirService(name, <any>undefined, { urn })
            case "azure:healthcare/medtechService:MedtechService":
                return new MedtechService(name, <any>undefined, { urn })
            case "azure:healthcare/medtechServiceFhirDestination:MedtechServiceFhirDestination":
                return new MedtechServiceFhirDestination(name, <any>undefined, { urn })
            case "azure:healthcare/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "azure:healthcare/workspace:Workspace":
                return new Workspace(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "healthcare/dicomService", _module)
pulumi.runtime.registerResourceModule("azure", "healthcare/fhirService", _module)
pulumi.runtime.registerResourceModule("azure", "healthcare/medtechService", _module)
pulumi.runtime.registerResourceModule("azure", "healthcare/medtechServiceFhirDestination", _module)
pulumi.runtime.registerResourceModule("azure", "healthcare/service", _module)
pulumi.runtime.registerResourceModule("azure", "healthcare/workspace", _module)
