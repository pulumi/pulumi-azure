// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Healthcare DICOM Service
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const test = new azure.healthcare.Workspace("test", {
 *     name: "tfexworkspace",
 *     resourceGroupName: "tfex-resource_group",
 *     location: "east us",
 * });
 * const testDicomService = new azure.healthcare.DicomService("test", {
 *     name: "tfexDicom",
 *     workspaceId: test.id,
 *     location: "east us",
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 *     tags: {
 *         environment: "None",
 *     },
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.HealthcareApis` - 2024-03-31
 *
 * ## Import
 *
 * Healthcare DICOM Service can be imported using the resource`id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:healthcare/dicomService:DicomService example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.HealthcareApis/workspaces/workspace1/dicomServices/service1
 * ```
 */
export class DicomService extends pulumi.CustomResource {
    /**
     * Get an existing DicomService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DicomServiceState, opts?: pulumi.CustomResourceOptions): DicomService {
        return new DicomService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:healthcare/dicomService:DicomService';

    /**
     * Returns true if the given object is an instance of DicomService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DicomService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DicomService.__pulumiType;
    }

    /**
     * The `authentication` block as defined below.
     */
    declare public /*out*/ readonly authentications: pulumi.Output<outputs.healthcare.DicomServiceAuthentication[]>;
    /**
     * A `cors` block as defined below.
     */
    declare public readonly cors: pulumi.Output<outputs.healthcare.DicomServiceCors>;
    /**
     * If data partitions are enabled or not. Defaults to `false`. Changing this forces a new Healthcare DICOM Service to be created.
     */
    declare public readonly dataPartitionsEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The URL of the key to use for encryption as part of the customer-managed key encryption settings. For more details, refer to the [Azure Customer-Managed Keys Overview](https://learn.microsoft.com/en-us/azure/storage/common/customer-managed-keys-overview).
     */
    declare public readonly encryptionKeyUrl: pulumi.Output<string | undefined>;
    /**
     * An `identity` block as defined below.
     */
    declare public readonly identity: pulumi.Output<outputs.healthcare.DicomServiceIdentity | undefined>;
    /**
     * Specifies the Azure Region where the Healthcare DICOM Service should be created. Changing this forces a new Healthcare DICOM Service to be created.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * Specifies the name of the Healthcare DICOM Service. Changing this forces a new Healthcare DICOM Service to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    declare public /*out*/ readonly privateEndpoints: pulumi.Output<outputs.healthcare.DicomServicePrivateEndpoint[]>;
    /**
     * Whether to enabled public networks when data plane traffic coming from public networks while private endpoint is enabled. Defaults to `true`.
     */
    declare public readonly publicNetworkAccessEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The url of the Healthcare DICOM Services.
     */
    declare public /*out*/ readonly serviceUrl: pulumi.Output<string>;
    /**
     * A `storage` block as defined below.
     */
    declare public readonly storage: pulumi.Output<outputs.healthcare.DicomServiceStorage>;
    /**
     * A mapping of tags to assign to the Healthcare DICOM Service.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the ID of the Healthcare Workspace where the Healthcare DICOM Service should exist. Changing this forces a new Healthcare DICOM Service to be created.
     */
    declare public readonly workspaceId: pulumi.Output<string>;

    /**
     * Create a DicomService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DicomServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DicomServiceArgs | DicomServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DicomServiceState | undefined;
            resourceInputs["authentications"] = state?.authentications;
            resourceInputs["cors"] = state?.cors;
            resourceInputs["dataPartitionsEnabled"] = state?.dataPartitionsEnabled;
            resourceInputs["encryptionKeyUrl"] = state?.encryptionKeyUrl;
            resourceInputs["identity"] = state?.identity;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["privateEndpoints"] = state?.privateEndpoints;
            resourceInputs["publicNetworkAccessEnabled"] = state?.publicNetworkAccessEnabled;
            resourceInputs["serviceUrl"] = state?.serviceUrl;
            resourceInputs["storage"] = state?.storage;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["workspaceId"] = state?.workspaceId;
        } else {
            const args = argsOrState as DicomServiceArgs | undefined;
            if (args?.workspaceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["cors"] = args?.cors;
            resourceInputs["dataPartitionsEnabled"] = args?.dataPartitionsEnabled;
            resourceInputs["encryptionKeyUrl"] = args?.encryptionKeyUrl;
            resourceInputs["identity"] = args?.identity;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["publicNetworkAccessEnabled"] = args?.publicNetworkAccessEnabled;
            resourceInputs["storage"] = args?.storage;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["workspaceId"] = args?.workspaceId;
            resourceInputs["authentications"] = undefined /*out*/;
            resourceInputs["privateEndpoints"] = undefined /*out*/;
            resourceInputs["serviceUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DicomService.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DicomService resources.
 */
export interface DicomServiceState {
    /**
     * The `authentication` block as defined below.
     */
    authentications?: pulumi.Input<pulumi.Input<inputs.healthcare.DicomServiceAuthentication>[]>;
    /**
     * A `cors` block as defined below.
     */
    cors?: pulumi.Input<inputs.healthcare.DicomServiceCors>;
    /**
     * If data partitions are enabled or not. Defaults to `false`. Changing this forces a new Healthcare DICOM Service to be created.
     */
    dataPartitionsEnabled?: pulumi.Input<boolean>;
    /**
     * The URL of the key to use for encryption as part of the customer-managed key encryption settings. For more details, refer to the [Azure Customer-Managed Keys Overview](https://learn.microsoft.com/en-us/azure/storage/common/customer-managed-keys-overview).
     */
    encryptionKeyUrl?: pulumi.Input<string>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.healthcare.DicomServiceIdentity>;
    /**
     * Specifies the Azure Region where the Healthcare DICOM Service should be created. Changing this forces a new Healthcare DICOM Service to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of the Healthcare DICOM Service. Changing this forces a new Healthcare DICOM Service to be created.
     */
    name?: pulumi.Input<string>;
    privateEndpoints?: pulumi.Input<pulumi.Input<inputs.healthcare.DicomServicePrivateEndpoint>[]>;
    /**
     * Whether to enabled public networks when data plane traffic coming from public networks while private endpoint is enabled. Defaults to `true`.
     */
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    /**
     * The url of the Healthcare DICOM Services.
     */
    serviceUrl?: pulumi.Input<string>;
    /**
     * A `storage` block as defined below.
     */
    storage?: pulumi.Input<inputs.healthcare.DicomServiceStorage>;
    /**
     * A mapping of tags to assign to the Healthcare DICOM Service.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the ID of the Healthcare Workspace where the Healthcare DICOM Service should exist. Changing this forces a new Healthcare DICOM Service to be created.
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DicomService resource.
 */
export interface DicomServiceArgs {
    /**
     * A `cors` block as defined below.
     */
    cors?: pulumi.Input<inputs.healthcare.DicomServiceCors>;
    /**
     * If data partitions are enabled or not. Defaults to `false`. Changing this forces a new Healthcare DICOM Service to be created.
     */
    dataPartitionsEnabled?: pulumi.Input<boolean>;
    /**
     * The URL of the key to use for encryption as part of the customer-managed key encryption settings. For more details, refer to the [Azure Customer-Managed Keys Overview](https://learn.microsoft.com/en-us/azure/storage/common/customer-managed-keys-overview).
     */
    encryptionKeyUrl?: pulumi.Input<string>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.healthcare.DicomServiceIdentity>;
    /**
     * Specifies the Azure Region where the Healthcare DICOM Service should be created. Changing this forces a new Healthcare DICOM Service to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of the Healthcare DICOM Service. Changing this forces a new Healthcare DICOM Service to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether to enabled public networks when data plane traffic coming from public networks while private endpoint is enabled. Defaults to `true`.
     */
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    /**
     * A `storage` block as defined below.
     */
    storage?: pulumi.Input<inputs.healthcare.DicomServiceStorage>;
    /**
     * A mapping of tags to assign to the Healthcare DICOM Service.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the ID of the Healthcare Workspace where the Healthcare DICOM Service should exist. Changing this forces a new Healthcare DICOM Service to be created.
     */
    workspaceId: pulumi.Input<string>;
}
