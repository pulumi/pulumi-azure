// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Healthcare Service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.healthcare.Service("example", {
 *     resourceGroupName: "sample-resource-group",
 *     location: "westus2",
 *     kind: "fhir-R4",
 *     cosmosdbThroughput: 2000,
 *     accessPolicyObjectIds: current.then(current => current.objectId),
 *     tags: {
 *         environment: "testenv",
 *         purpose: "AcceptanceTests",
 *     },
 *     authenticationConfiguration: {
 *         authority: "https://login.microsoftonline.com/$%7Bdata.azurerm_client_config.current.tenant_id%7D",
 *         audience: "https://azurehealthcareapis.com/",
 *         smartProxyEnabled: true,
 *     },
 *     corsConfiguration: {
 *         allowedOrigins: [
 *             "http://www.example.com",
 *             "http://www.example2.com",
 *         ],
 *         allowedHeaders: [
 *             "x-tempo-*",
 *             "x-tempo2-*",
 *         ],
 *         allowedMethods: [
 *             "GET",
 *             "PUT",
 *         ],
 *         maxAgeInSeconds: 500,
 *         allowCredentials: true,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Healthcare Service can be imported using the resource`id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:healthcare/service:Service example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource_group/providers/Microsoft.HealthcareApis/services/service_name
 * ```
 */
export class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceState, opts?: pulumi.CustomResourceOptions): Service {
        return new Service(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:healthcare/service:Service';

    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Service {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }

    public readonly accessPolicyObjectIds!: pulumi.Output<string[] | undefined>;
    /**
     * An `authenticationConfiguration` block as defined below.
     */
    public readonly authenticationConfiguration!: pulumi.Output<outputs.healthcare.ServiceAuthenticationConfiguration>;
    /**
     * A `corsConfiguration` block as defined below.
     */
    public readonly corsConfiguration!: pulumi.Output<outputs.healthcare.ServiceCorsConfiguration>;
    /**
     * A versionless Key Vault Key ID for CMK encryption of the backing database. Changing this forces a new resource to be created.
     *
     * > **Please Note** In order to use a `Custom Key` from Key Vault for encryption you must grant Azure Cosmos DB Service access to your key vault. For instructions on how to configure your Key Vault correctly please refer to the [product documentation](https://docs.microsoft.com/azure/cosmos-db/how-to-setup-cmk#add-an-access-policy-to-your-azure-key-vault-instance)
     */
    public readonly cosmosdbKeyVaultKeyVersionlessId!: pulumi.Output<string | undefined>;
    /**
     * The provisioned throughput for the backing database. Range of `400`-`100000`. Defaults to `1000`.
     */
    public readonly cosmosdbThroughput!: pulumi.Output<number | undefined>;
    /**
     * The type of the service. Values at time of publication are: `fhir`, `fhir-Stu3` and `fhir-R4`. Default value is `fhir`.
     */
    public readonly kind!: pulumi.Output<string | undefined>;
    /**
     * Specifies the supported Azure Region where the Service should be created. Changing this forces a new resource to be created.
     *
     * > **Please Note**: Not all locations support this resource. Some are `West US 2`, `North Central US`, and `UK West`.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name of the service instance. Used for service endpoint, must be unique within the audience. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Whether public network access is enabled or disabled for this service instance. Defaults to `true`.
     */
    public readonly publicNetworkAccessEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the Resource Group in which to create the Service. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceArgs | ServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceState | undefined;
            resourceInputs["accessPolicyObjectIds"] = state ? state.accessPolicyObjectIds : undefined;
            resourceInputs["authenticationConfiguration"] = state ? state.authenticationConfiguration : undefined;
            resourceInputs["corsConfiguration"] = state ? state.corsConfiguration : undefined;
            resourceInputs["cosmosdbKeyVaultKeyVersionlessId"] = state ? state.cosmosdbKeyVaultKeyVersionlessId : undefined;
            resourceInputs["cosmosdbThroughput"] = state ? state.cosmosdbThroughput : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ServiceArgs | undefined;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["accessPolicyObjectIds"] = args ? args.accessPolicyObjectIds : undefined;
            resourceInputs["authenticationConfiguration"] = args ? args.authenticationConfiguration : undefined;
            resourceInputs["corsConfiguration"] = args ? args.corsConfiguration : undefined;
            resourceInputs["cosmosdbKeyVaultKeyVersionlessId"] = args ? args.cosmosdbKeyVaultKeyVersionlessId : undefined;
            resourceInputs["cosmosdbThroughput"] = args ? args.cosmosdbThroughput : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Service.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Service resources.
 */
export interface ServiceState {
    accessPolicyObjectIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An `authenticationConfiguration` block as defined below.
     */
    authenticationConfiguration?: pulumi.Input<inputs.healthcare.ServiceAuthenticationConfiguration>;
    /**
     * A `corsConfiguration` block as defined below.
     */
    corsConfiguration?: pulumi.Input<inputs.healthcare.ServiceCorsConfiguration>;
    /**
     * A versionless Key Vault Key ID for CMK encryption of the backing database. Changing this forces a new resource to be created.
     *
     * > **Please Note** In order to use a `Custom Key` from Key Vault for encryption you must grant Azure Cosmos DB Service access to your key vault. For instructions on how to configure your Key Vault correctly please refer to the [product documentation](https://docs.microsoft.com/azure/cosmos-db/how-to-setup-cmk#add-an-access-policy-to-your-azure-key-vault-instance)
     */
    cosmosdbKeyVaultKeyVersionlessId?: pulumi.Input<string>;
    /**
     * The provisioned throughput for the backing database. Range of `400`-`100000`. Defaults to `1000`.
     */
    cosmosdbThroughput?: pulumi.Input<number>;
    /**
     * The type of the service. Values at time of publication are: `fhir`, `fhir-Stu3` and `fhir-R4`. Default value is `fhir`.
     */
    kind?: pulumi.Input<string>;
    /**
     * Specifies the supported Azure Region where the Service should be created. Changing this forces a new resource to be created.
     *
     * > **Please Note**: Not all locations support this resource. Some are `West US 2`, `North Central US`, and `UK West`.
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the service instance. Used for service endpoint, must be unique within the audience. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether public network access is enabled or disabled for this service instance. Defaults to `true`.
     */
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the Resource Group in which to create the Service. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    accessPolicyObjectIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An `authenticationConfiguration` block as defined below.
     */
    authenticationConfiguration?: pulumi.Input<inputs.healthcare.ServiceAuthenticationConfiguration>;
    /**
     * A `corsConfiguration` block as defined below.
     */
    corsConfiguration?: pulumi.Input<inputs.healthcare.ServiceCorsConfiguration>;
    /**
     * A versionless Key Vault Key ID for CMK encryption of the backing database. Changing this forces a new resource to be created.
     *
     * > **Please Note** In order to use a `Custom Key` from Key Vault for encryption you must grant Azure Cosmos DB Service access to your key vault. For instructions on how to configure your Key Vault correctly please refer to the [product documentation](https://docs.microsoft.com/azure/cosmos-db/how-to-setup-cmk#add-an-access-policy-to-your-azure-key-vault-instance)
     */
    cosmosdbKeyVaultKeyVersionlessId?: pulumi.Input<string>;
    /**
     * The provisioned throughput for the backing database. Range of `400`-`100000`. Defaults to `1000`.
     */
    cosmosdbThroughput?: pulumi.Input<number>;
    /**
     * The type of the service. Values at time of publication are: `fhir`, `fhir-Stu3` and `fhir-R4`. Default value is `fhir`.
     */
    kind?: pulumi.Input<string>;
    /**
     * Specifies the supported Azure Region where the Service should be created. Changing this forces a new resource to be created.
     *
     * > **Please Note**: Not all locations support this resource. Some are `West US 2`, `North Central US`, and `UK West`.
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the service instance. Used for service endpoint, must be unique within the audience. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether public network access is enabled or disabled for this service instance. Defaults to `true`.
     */
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the Resource Group in which to create the Service. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
