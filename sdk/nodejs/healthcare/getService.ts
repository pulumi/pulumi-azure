// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to access information about an existing Healthcare Service
 */
export function getService(args: GetServiceArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure:healthcare/getService:getService", {
        "location": args.location,
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

/**
 * A collection of arguments for invoking getService.
 */
export interface GetServiceArgs {
    /**
     * The Azure Region where the Service is located.
     */
    location: string;
    /**
     * Specifies the name of the Healthcare Service.
     */
    name: string;
    /**
     * The name of the Resource Group in which the Healthcare Service exists.
     */
    resourceGroupName: string;
}

/**
 * A collection of values returned by getService.
 */
export interface GetServiceResult {
    readonly accessPolicyObjectIds: string[];
    /**
     * An `authenticationConfiguration` block as defined below.
     */
    readonly authenticationConfigurations: outputs.healthcare.GetServiceAuthenticationConfiguration[];
    /**
     * A `corsConfiguration` block as defined below.
     */
    readonly corsConfigurations: outputs.healthcare.GetServiceCorsConfiguration[];
    /**
     * The versionless Key Vault Key ID for CMK encryption of the backing database.
     */
    readonly cosmosdbKeyVaultKeyVersionlessId: string;
    /**
     * The provisioned throughput for the backing database.
     */
    readonly cosmosdbThroughput: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The type of the service.
     */
    readonly kind: string;
    /**
     * The Azure Region where the Service is located.
     */
    readonly location: string;
    readonly name: string;
    readonly resourceGroupName: string;
    /**
     * A mapping of tags to assign to the resource.
     */
    readonly tags: {[key: string]: string};
}
/**
 * Use this data source to access information about an existing Healthcare Service
 */
export function getServiceOutput(args: GetServiceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceResult> {
    return pulumi.output(args).apply((a: any) => getService(a, opts))
}

/**
 * A collection of arguments for invoking getService.
 */
export interface GetServiceOutputArgs {
    /**
     * The Azure Region where the Service is located.
     */
    location: pulumi.Input<string>;
    /**
     * Specifies the name of the Healthcare Service.
     */
    name: pulumi.Input<string>;
    /**
     * The name of the Resource Group in which the Healthcare Service exists.
     */
    resourceGroupName: pulumi.Input<string>;
}
