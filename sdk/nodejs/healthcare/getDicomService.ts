// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to access information about an existing Healthcare DICOM Service
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.healthcare.getDicomService({
 *     name: "example-healthcare_dicom_service",
 *     workspaceId: exampleAzurermHealthcareWorkspace.id,
 * });
 * export const azurermHealthcareDicomService = example.then(example => example.id);
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This data source uses the following Azure API Providers:
 *
 * * `Microsoft.HealthcareApis` - 2024-03-31
 */
export function getDicomService(args: GetDicomServiceArgs, opts?: pulumi.InvokeOptions): Promise<GetDicomServiceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure:healthcare/getDicomService:getDicomService", {
        "name": args.name,
        "workspaceId": args.workspaceId,
    }, opts);
}

/**
 * A collection of arguments for invoking getDicomService.
 */
export interface GetDicomServiceArgs {
    /**
     * The name of the Healthcare DICOM Service
     */
    name: string;
    /**
     * The ID of the Healthcare Workspace in which the Healthcare DICOM Service exists.
     */
    workspaceId: string;
}

/**
 * A collection of values returned by getDicomService.
 */
export interface GetDicomServiceResult {
    /**
     * The `authentication` block as defined below.
     */
    readonly authentications: outputs.healthcare.GetDicomServiceAuthentication[];
    /**
     * The `cors` block as defined below.
     */
    readonly cors: outputs.healthcare.GetDicomServiceCor[];
    /**
     * If data partitions are enabled or not.
     */
    readonly dataPartitionsEnabled: boolean;
    /**
     * The URL of the key to use for encryption as part of the customer-managed key encryption settings.
     */
    readonly encryptionKeyUrl: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly identities: outputs.healthcare.GetDicomServiceIdentity[];
    /**
     * The Azure Region where the Healthcare DICOM Service is located.
     */
    readonly location: string;
    readonly name: string;
    readonly privateEndpoints: outputs.healthcare.GetDicomServicePrivateEndpoint[];
    /**
     * The url of the Healthcare DICOM Services.
     */
    readonly serviceUrl: string;
    /**
     * The `storage` block as defined below.
     */
    readonly storages: outputs.healthcare.GetDicomServiceStorage[];
    /**
     * A map of tags assigned to the Healthcare DICOM Service.
     */
    readonly tags: {[key: string]: string};
    readonly workspaceId: string;
}
/**
 * Use this data source to access information about an existing Healthcare DICOM Service
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.healthcare.getDicomService({
 *     name: "example-healthcare_dicom_service",
 *     workspaceId: exampleAzurermHealthcareWorkspace.id,
 * });
 * export const azurermHealthcareDicomService = example.then(example => example.id);
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This data source uses the following Azure API Providers:
 *
 * * `Microsoft.HealthcareApis` - 2024-03-31
 */
export function getDicomServiceOutput(args: GetDicomServiceOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDicomServiceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("azure:healthcare/getDicomService:getDicomService", {
        "name": args.name,
        "workspaceId": args.workspaceId,
    }, opts);
}

/**
 * A collection of arguments for invoking getDicomService.
 */
export interface GetDicomServiceOutputArgs {
    /**
     * The name of the Healthcare DICOM Service
     */
    name: pulumi.Input<string>;
    /**
     * The ID of the Healthcare Workspace in which the Healthcare DICOM Service exists.
     */
    workspaceId: pulumi.Input<string>;
}
