// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an Azure SignalR Custom Domain.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as std from "@pulumi/std";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleService = new azure.signalr.Service("example", {
 *     name: "example-signalr",
 *     location: testAzurermResourceGroup.location,
 *     resourceGroupName: testAzurermResourceGroup.name,
 *     sku: {
 *         name: "Premium_P1",
 *         capacity: 1,
 *     },
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * const exampleKeyVault = new azure.keyvault.KeyVault("example", {
 *     name: "example-keyvault",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "premium",
 *     accessPolicies: [
 *         {
 *             tenantId: current.then(current => current.tenantId),
 *             objectId: current.then(current => current.objectId),
 *             certificatePermissions: [
 *                 "Create",
 *                 "Get",
 *                 "List",
 *             ],
 *             secretPermissions: [
 *                 "Get",
 *                 "List",
 *             ],
 *         },
 *         {
 *             tenantId: current.then(current => current.tenantId),
 *             objectId: testAzurermSignalrService.identity[0].principalId,
 *             certificatePermissions: [
 *                 "Create",
 *                 "Get",
 *                 "List",
 *             ],
 *             secretPermissions: [
 *                 "Get",
 *                 "List",
 *             ],
 *         },
 *     ],
 * });
 * const exampleCertificate = new azure.keyvault.Certificate("example", {
 *     name: "imported-cert",
 *     keyVaultId: exampleKeyVault.id,
 *     certificate: {
 *         contents: std.filebase64({
 *             input: "certificate-to-import.pfx",
 *         }).then(invoke => invoke.result),
 *         password: "",
 *     },
 * });
 * const test = new azure.signalr.ServiceCustomCertificate("test", {
 *     name: "example-cert",
 *     signalrServiceId: exampleService.id,
 *     customCertificateId: exampleCertificate.id,
 * }, {
 *     dependsOn: [exampleAzurermKeyVaultAccessPolicy],
 * });
 * const testServiceCustomDomain = new azure.signalr.ServiceCustomDomain("test", {
 *     name: "example-domain",
 *     signalrServiceId: testAzurermSignalrService.id,
 *     domainName: "tftest.com",
 *     signalrCustomCertificateId: test.id,
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.SignalRService` - 2024-03-01
 *
 * ## Import
 *
 * Custom Domain for a SignalR service can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:signalr/serviceCustomDomain:ServiceCustomDomain example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.SignalRService/signalR/signalr1/customDomains/customDomain1
 * ```
 */
export class ServiceCustomDomain extends pulumi.CustomResource {
    /**
     * Get an existing ServiceCustomDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceCustomDomainState, opts?: pulumi.CustomResourceOptions): ServiceCustomDomain {
        return new ServiceCustomDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:signalr/serviceCustomDomain:ServiceCustomDomain';

    /**
     * Returns true if the given object is an instance of ServiceCustomDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceCustomDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceCustomDomain.__pulumiType;
    }

    /**
     * Specifies the custom domain name of the SignalR Custom Domain. Changing this forces a new resource to be created.
     *
     * > **Note:** Please ensure the custom domain name is included in the Subject Alternative Names of the selected SignalR Custom Certificate.
     */
    declare public readonly domainName: pulumi.Output<string>;
    /**
     * Specifies the name of the SignalR Custom Domain. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Specifies the SignalR Custom Certificate ID of the SignalR Custom Domain. Changing this forces a new resource to be created.
     */
    declare public readonly signalrCustomCertificateId: pulumi.Output<string>;
    /**
     * Specifies the SignalR ID of the SignalR Custom Domain. Changing this forces a new resource to be created.
     */
    declare public readonly signalrServiceId: pulumi.Output<string>;

    /**
     * Create a ServiceCustomDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceCustomDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceCustomDomainArgs | ServiceCustomDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceCustomDomainState | undefined;
            resourceInputs["domainName"] = state?.domainName;
            resourceInputs["name"] = state?.name;
            resourceInputs["signalrCustomCertificateId"] = state?.signalrCustomCertificateId;
            resourceInputs["signalrServiceId"] = state?.signalrServiceId;
        } else {
            const args = argsOrState as ServiceCustomDomainArgs | undefined;
            if (args?.domainName === undefined && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if (args?.signalrCustomCertificateId === undefined && !opts.urn) {
                throw new Error("Missing required property 'signalrCustomCertificateId'");
            }
            if (args?.signalrServiceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'signalrServiceId'");
            }
            resourceInputs["domainName"] = args?.domainName;
            resourceInputs["name"] = args?.name;
            resourceInputs["signalrCustomCertificateId"] = args?.signalrCustomCertificateId;
            resourceInputs["signalrServiceId"] = args?.signalrServiceId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceCustomDomain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceCustomDomain resources.
 */
export interface ServiceCustomDomainState {
    /**
     * Specifies the custom domain name of the SignalR Custom Domain. Changing this forces a new resource to be created.
     *
     * > **Note:** Please ensure the custom domain name is included in the Subject Alternative Names of the selected SignalR Custom Certificate.
     */
    domainName?: pulumi.Input<string>;
    /**
     * Specifies the name of the SignalR Custom Domain. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the SignalR Custom Certificate ID of the SignalR Custom Domain. Changing this forces a new resource to be created.
     */
    signalrCustomCertificateId?: pulumi.Input<string>;
    /**
     * Specifies the SignalR ID of the SignalR Custom Domain. Changing this forces a new resource to be created.
     */
    signalrServiceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceCustomDomain resource.
 */
export interface ServiceCustomDomainArgs {
    /**
     * Specifies the custom domain name of the SignalR Custom Domain. Changing this forces a new resource to be created.
     *
     * > **Note:** Please ensure the custom domain name is included in the Subject Alternative Names of the selected SignalR Custom Certificate.
     */
    domainName: pulumi.Input<string>;
    /**
     * Specifies the name of the SignalR Custom Domain. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the SignalR Custom Certificate ID of the SignalR Custom Domain. Changing this forces a new resource to be created.
     */
    signalrCustomCertificateId: pulumi.Input<string>;
    /**
     * Specifies the SignalR ID of the SignalR Custom Domain. Changing this forces a new resource to be created.
     */
    signalrServiceId: pulumi.Input<string>;
}
