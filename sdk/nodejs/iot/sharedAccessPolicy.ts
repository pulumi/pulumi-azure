// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an IotHub Shared Access Policy
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleIoTHub = new azure.iot.IoTHub("example", {
 *     name: "example",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     sku: {
 *         name: "S1",
 *         capacity: 1,
 *     },
 * });
 * const exampleSharedAccessPolicy = new azure.iot.SharedAccessPolicy("example", {
 *     name: "example",
 *     resourceGroupName: example.name,
 *     iothubName: exampleIoTHub.name,
 *     registryRead: true,
 *     registryWrite: true,
 * });
 * ```
 *
 * ## Import
 *
 * IoTHub Shared Access Policies can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:iot/sharedAccessPolicy:SharedAccessPolicy shared_access_policy1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/iotHubs/hub1/iotHubKeys/shared_access_policy1
 * ```
 */
export class SharedAccessPolicy extends pulumi.CustomResource {
    /**
     * Get an existing SharedAccessPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SharedAccessPolicyState, opts?: pulumi.CustomResourceOptions): SharedAccessPolicy {
        return new SharedAccessPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:iot/sharedAccessPolicy:SharedAccessPolicy';

    /**
     * Returns true if the given object is an instance of SharedAccessPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SharedAccessPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SharedAccessPolicy.__pulumiType;
    }

    /**
     * Adds `DeviceConnect` permission to this Shared Access Account. It allows sending and receiving on the device-side endpoints.
     *
     * > **Note:** At least one of `registryRead`, `registryWrite`, `serviceConnect`, `deviceConnect` permissions must be set to `true`.
     */
    declare public readonly deviceConnect: pulumi.Output<boolean | undefined>;
    /**
     * The name of the IoTHub to which this Shared Access Policy belongs. Changing this forces a new resource to be created.
     */
    declare public readonly iothubName: pulumi.Output<string>;
    /**
     * Specifies the name of the IotHub Shared Access Policy resource. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The primary connection string of the Shared Access Policy.
     */
    declare public /*out*/ readonly primaryConnectionString: pulumi.Output<string>;
    /**
     * The primary key used to create the authentication token.
     */
    declare public /*out*/ readonly primaryKey: pulumi.Output<string>;
    /**
     * Adds `RegistryRead` permission to this Shared Access Account. It allows read access to the identity registry.
     */
    declare public readonly registryRead: pulumi.Output<boolean | undefined>;
    /**
     * Adds `RegistryWrite` permission to this Shared Access Account. It allows write access to the identity registry.
     *
     * > **Note:** When `registryWrite` is set to `true`, `registryRead` must also be set to true. This is a limitation of the Azure REST API
     */
    declare public readonly registryWrite: pulumi.Output<boolean | undefined>;
    /**
     * The name of the resource group under which the IotHub Shared Access Policy resource has to be created. Changing this forces a new resource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * The secondary connection string of the Shared Access Policy.
     */
    declare public /*out*/ readonly secondaryConnectionString: pulumi.Output<string>;
    /**
     * The secondary key used to create the authentication token.
     */
    declare public /*out*/ readonly secondaryKey: pulumi.Output<string>;
    /**
     * Adds `ServiceConnect` permission to this Shared Access Account. It allows sending and receiving on the cloud-side endpoints.
     */
    declare public readonly serviceConnect: pulumi.Output<boolean | undefined>;

    /**
     * Create a SharedAccessPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SharedAccessPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SharedAccessPolicyArgs | SharedAccessPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SharedAccessPolicyState | undefined;
            resourceInputs["deviceConnect"] = state?.deviceConnect;
            resourceInputs["iothubName"] = state?.iothubName;
            resourceInputs["name"] = state?.name;
            resourceInputs["primaryConnectionString"] = state?.primaryConnectionString;
            resourceInputs["primaryKey"] = state?.primaryKey;
            resourceInputs["registryRead"] = state?.registryRead;
            resourceInputs["registryWrite"] = state?.registryWrite;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["secondaryConnectionString"] = state?.secondaryConnectionString;
            resourceInputs["secondaryKey"] = state?.secondaryKey;
            resourceInputs["serviceConnect"] = state?.serviceConnect;
        } else {
            const args = argsOrState as SharedAccessPolicyArgs | undefined;
            if (args?.iothubName === undefined && !opts.urn) {
                throw new Error("Missing required property 'iothubName'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["deviceConnect"] = args?.deviceConnect;
            resourceInputs["iothubName"] = args?.iothubName;
            resourceInputs["name"] = args?.name;
            resourceInputs["registryRead"] = args?.registryRead;
            resourceInputs["registryWrite"] = args?.registryWrite;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["serviceConnect"] = args?.serviceConnect;
            resourceInputs["primaryConnectionString"] = undefined /*out*/;
            resourceInputs["primaryKey"] = undefined /*out*/;
            resourceInputs["secondaryConnectionString"] = undefined /*out*/;
            resourceInputs["secondaryKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["primaryConnectionString", "primaryKey", "secondaryConnectionString", "secondaryKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SharedAccessPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SharedAccessPolicy resources.
 */
export interface SharedAccessPolicyState {
    /**
     * Adds `DeviceConnect` permission to this Shared Access Account. It allows sending and receiving on the device-side endpoints.
     *
     * > **Note:** At least one of `registryRead`, `registryWrite`, `serviceConnect`, `deviceConnect` permissions must be set to `true`.
     */
    deviceConnect?: pulumi.Input<boolean>;
    /**
     * The name of the IoTHub to which this Shared Access Policy belongs. Changing this forces a new resource to be created.
     */
    iothubName?: pulumi.Input<string>;
    /**
     * Specifies the name of the IotHub Shared Access Policy resource. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The primary connection string of the Shared Access Policy.
     */
    primaryConnectionString?: pulumi.Input<string>;
    /**
     * The primary key used to create the authentication token.
     */
    primaryKey?: pulumi.Input<string>;
    /**
     * Adds `RegistryRead` permission to this Shared Access Account. It allows read access to the identity registry.
     */
    registryRead?: pulumi.Input<boolean>;
    /**
     * Adds `RegistryWrite` permission to this Shared Access Account. It allows write access to the identity registry.
     *
     * > **Note:** When `registryWrite` is set to `true`, `registryRead` must also be set to true. This is a limitation of the Azure REST API
     */
    registryWrite?: pulumi.Input<boolean>;
    /**
     * The name of the resource group under which the IotHub Shared Access Policy resource has to be created. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The secondary connection string of the Shared Access Policy.
     */
    secondaryConnectionString?: pulumi.Input<string>;
    /**
     * The secondary key used to create the authentication token.
     */
    secondaryKey?: pulumi.Input<string>;
    /**
     * Adds `ServiceConnect` permission to this Shared Access Account. It allows sending and receiving on the cloud-side endpoints.
     */
    serviceConnect?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SharedAccessPolicy resource.
 */
export interface SharedAccessPolicyArgs {
    /**
     * Adds `DeviceConnect` permission to this Shared Access Account. It allows sending and receiving on the device-side endpoints.
     *
     * > **Note:** At least one of `registryRead`, `registryWrite`, `serviceConnect`, `deviceConnect` permissions must be set to `true`.
     */
    deviceConnect?: pulumi.Input<boolean>;
    /**
     * The name of the IoTHub to which this Shared Access Policy belongs. Changing this forces a new resource to be created.
     */
    iothubName: pulumi.Input<string>;
    /**
     * Specifies the name of the IotHub Shared Access Policy resource. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Adds `RegistryRead` permission to this Shared Access Account. It allows read access to the identity registry.
     */
    registryRead?: pulumi.Input<boolean>;
    /**
     * Adds `RegistryWrite` permission to this Shared Access Account. It allows write access to the identity registry.
     *
     * > **Note:** When `registryWrite` is set to `true`, `registryRead` must also be set to true. This is a limitation of the Azure REST API
     */
    registryWrite?: pulumi.Input<boolean>;
    /**
     * The name of the resource group under which the IotHub Shared Access Policy resource has to be created. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Adds `ServiceConnect` permission to this Shared Access Account. It allows sending and receiving on the cloud-side endpoints.
     */
    serviceConnect?: pulumi.Input<boolean>;
}
