// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an IotHub Cosmos DB Account Endpoint
 *
 * > **Note:** Endpoints can be defined either directly on the `azure.iot.IoTHub` resource, or using the `azurerm_iothub_endpoint_*` resources - but the two ways of defining the endpoints cannot be used together. If both are used against the same IoTHub, spurious changes will occur. Also, defining a `azurerm_iothub_endpoint_*` resource and another endpoint of a different type directly on the `azure.iot.IoTHub` resource is not supported.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleIoTHub = new azure.iot.IoTHub("example", {
 *     name: "exampleIothub",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     sku: {
 *         name: "B1",
 *         capacity: 1,
 *     },
 *     tags: {
 *         purpose: "example",
 *     },
 * });
 * const exampleAccount = new azure.cosmosdb.Account("example", {
 *     name: "cosmosdb-account",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     offerType: "Standard",
 *     kind: "GlobalDocumentDB",
 *     consistencyPolicy: {
 *         consistencyLevel: "Strong",
 *     },
 *     geoLocations: [{
 *         location: example.location,
 *         failoverPriority: 0,
 *     }],
 * });
 * const exampleSqlDatabase = new azure.cosmosdb.SqlDatabase("example", {
 *     name: "cosmos-sql-db",
 *     resourceGroupName: exampleAccount.resourceGroupName,
 *     accountName: exampleAccount.name,
 * });
 * const exampleSqlContainer = new azure.cosmosdb.SqlContainer("example", {
 *     name: "example-container",
 *     resourceGroupName: exampleAccount.resourceGroupName,
 *     accountName: exampleAccount.name,
 *     databaseName: exampleSqlDatabase.name,
 *     partitionKeyPath: "/definition/id",
 * });
 * const exampleEndpointCosmosdbAccount = new azure.iot.EndpointCosmosdbAccount("example", {
 *     name: "example",
 *     resourceGroupName: example.name,
 *     iothubId: exampleIoTHub.id,
 *     containerName: exampleSqlContainer.name,
 *     databaseName: exampleSqlDatabase.name,
 *     endpointUri: exampleAccount.endpoint,
 *     primaryKey: exampleAccount.primaryKey,
 *     secondaryKey: exampleAccount.secondaryKey,
 * });
 * ```
 *
 * ## Import
 *
 * IoTHub Cosmos DB Account Endpoint can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:iot/endpointCosmosdbAccount:EndpointCosmosdbAccount endpoint1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/iotHubs/hub1/endpoints/cosmosDBAccountEndpoint1
 * ```
 */
export class EndpointCosmosdbAccount extends pulumi.CustomResource {
    /**
     * Get an existing EndpointCosmosdbAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EndpointCosmosdbAccountState, opts?: pulumi.CustomResourceOptions): EndpointCosmosdbAccount {
        return new EndpointCosmosdbAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:iot/endpointCosmosdbAccount:EndpointCosmosdbAccount';

    /**
     * Returns true if the given object is an instance of EndpointCosmosdbAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EndpointCosmosdbAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EndpointCosmosdbAccount.__pulumiType;
    }

    /**
     * The type used to authenticate against the Cosmos DB Account endpoint. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
     */
    declare public readonly authenticationType: pulumi.Output<string | undefined>;
    /**
     * The name of the Cosmos DB Container in the Cosmos DB Database. Changing this forces a new resource to be created.
     */
    declare public readonly containerName: pulumi.Output<string>;
    /**
     * The name of the Cosmos DB Database in the Cosmos DB Account. Changing this forces a new resource to be created.
     */
    declare public readonly databaseName: pulumi.Output<string>;
    /**
     * The URI of the Cosmos DB Account. Changing this forces a new resource to be created.
     */
    declare public readonly endpointUri: pulumi.Output<string>;
    /**
     * The ID of the User Managed Identity used to authenticate against the Cosmos DB Account endpoint.
     *
     * > **Note:** `identityId` can only be specified when `authenticationType` is `identityBased`. It must be one of the `identityIds` of the Iot Hub. If not specified when `authenticationType` is `identityBased`, System Assigned Managed Identity of the Iot Hub will be used.
     */
    declare public readonly identityId: pulumi.Output<string | undefined>;
    /**
     * The ID of the IoT Hub to create the endpoint. Changing this forces a new resource to be created.
     */
    declare public readonly iothubId: pulumi.Output<string>;
    /**
     * The name of the endpoint. The name must be unique across endpoint types. The following names are reserved: `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The name of the partition key associated with the Cosmos DB Container.
     */
    declare public readonly partitionKeyName: pulumi.Output<string | undefined>;
    /**
     * The template for generating a synthetic partition key value for use within the Cosmos DB Container.
     */
    declare public readonly partitionKeyTemplate: pulumi.Output<string | undefined>;
    /**
     * The primary key of the Cosmos DB Account.
     *
     * > **Note:** `primaryKey` must and can only be specified when `authenticationType` is `keyBased`.
     */
    declare public readonly primaryKey: pulumi.Output<string | undefined>;
    /**
     * The name of the resource group under which the Cosmos DB Account has been created. Changing this forces a new resource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * The secondary key of the Cosmos DB Account.
     *
     * > **Note:** `secondaryKey` must and can only be specified when `authenticationType` is `keyBased`.
     */
    declare public readonly secondaryKey: pulumi.Output<string | undefined>;
    /**
     * The subscription ID for the endpoint.
     *
     * > **Note:** When `subscriptionId` isn't specified it will be set to the subscription ID of the IoT Hub resource.
     */
    declare public readonly subscriptionId: pulumi.Output<string>;

    /**
     * Create a EndpointCosmosdbAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EndpointCosmosdbAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EndpointCosmosdbAccountArgs | EndpointCosmosdbAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EndpointCosmosdbAccountState | undefined;
            resourceInputs["authenticationType"] = state?.authenticationType;
            resourceInputs["containerName"] = state?.containerName;
            resourceInputs["databaseName"] = state?.databaseName;
            resourceInputs["endpointUri"] = state?.endpointUri;
            resourceInputs["identityId"] = state?.identityId;
            resourceInputs["iothubId"] = state?.iothubId;
            resourceInputs["name"] = state?.name;
            resourceInputs["partitionKeyName"] = state?.partitionKeyName;
            resourceInputs["partitionKeyTemplate"] = state?.partitionKeyTemplate;
            resourceInputs["primaryKey"] = state?.primaryKey;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["secondaryKey"] = state?.secondaryKey;
            resourceInputs["subscriptionId"] = state?.subscriptionId;
        } else {
            const args = argsOrState as EndpointCosmosdbAccountArgs | undefined;
            if (args?.containerName === undefined && !opts.urn) {
                throw new Error("Missing required property 'containerName'");
            }
            if (args?.databaseName === undefined && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if (args?.endpointUri === undefined && !opts.urn) {
                throw new Error("Missing required property 'endpointUri'");
            }
            if (args?.iothubId === undefined && !opts.urn) {
                throw new Error("Missing required property 'iothubId'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["authenticationType"] = args?.authenticationType;
            resourceInputs["containerName"] = args?.containerName;
            resourceInputs["databaseName"] = args?.databaseName;
            resourceInputs["endpointUri"] = args?.endpointUri;
            resourceInputs["identityId"] = args?.identityId;
            resourceInputs["iothubId"] = args?.iothubId;
            resourceInputs["name"] = args?.name;
            resourceInputs["partitionKeyName"] = args?.partitionKeyName;
            resourceInputs["partitionKeyTemplate"] = args?.partitionKeyTemplate;
            resourceInputs["primaryKey"] = args?.primaryKey ? pulumi.secret(args.primaryKey) : undefined;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["secondaryKey"] = args?.secondaryKey ? pulumi.secret(args.secondaryKey) : undefined;
            resourceInputs["subscriptionId"] = args?.subscriptionId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["primaryKey", "secondaryKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(EndpointCosmosdbAccount.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EndpointCosmosdbAccount resources.
 */
export interface EndpointCosmosdbAccountState {
    /**
     * The type used to authenticate against the Cosmos DB Account endpoint. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
     */
    authenticationType?: pulumi.Input<string>;
    /**
     * The name of the Cosmos DB Container in the Cosmos DB Database. Changing this forces a new resource to be created.
     */
    containerName?: pulumi.Input<string>;
    /**
     * The name of the Cosmos DB Database in the Cosmos DB Account. Changing this forces a new resource to be created.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The URI of the Cosmos DB Account. Changing this forces a new resource to be created.
     */
    endpointUri?: pulumi.Input<string>;
    /**
     * The ID of the User Managed Identity used to authenticate against the Cosmos DB Account endpoint.
     *
     * > **Note:** `identityId` can only be specified when `authenticationType` is `identityBased`. It must be one of the `identityIds` of the Iot Hub. If not specified when `authenticationType` is `identityBased`, System Assigned Managed Identity of the Iot Hub will be used.
     */
    identityId?: pulumi.Input<string>;
    /**
     * The ID of the IoT Hub to create the endpoint. Changing this forces a new resource to be created.
     */
    iothubId?: pulumi.Input<string>;
    /**
     * The name of the endpoint. The name must be unique across endpoint types. The following names are reserved: `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the partition key associated with the Cosmos DB Container.
     */
    partitionKeyName?: pulumi.Input<string>;
    /**
     * The template for generating a synthetic partition key value for use within the Cosmos DB Container.
     */
    partitionKeyTemplate?: pulumi.Input<string>;
    /**
     * The primary key of the Cosmos DB Account.
     *
     * > **Note:** `primaryKey` must and can only be specified when `authenticationType` is `keyBased`.
     */
    primaryKey?: pulumi.Input<string>;
    /**
     * The name of the resource group under which the Cosmos DB Account has been created. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The secondary key of the Cosmos DB Account.
     *
     * > **Note:** `secondaryKey` must and can only be specified when `authenticationType` is `keyBased`.
     */
    secondaryKey?: pulumi.Input<string>;
    /**
     * The subscription ID for the endpoint.
     *
     * > **Note:** When `subscriptionId` isn't specified it will be set to the subscription ID of the IoT Hub resource.
     */
    subscriptionId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EndpointCosmosdbAccount resource.
 */
export interface EndpointCosmosdbAccountArgs {
    /**
     * The type used to authenticate against the Cosmos DB Account endpoint. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
     */
    authenticationType?: pulumi.Input<string>;
    /**
     * The name of the Cosmos DB Container in the Cosmos DB Database. Changing this forces a new resource to be created.
     */
    containerName: pulumi.Input<string>;
    /**
     * The name of the Cosmos DB Database in the Cosmos DB Account. Changing this forces a new resource to be created.
     */
    databaseName: pulumi.Input<string>;
    /**
     * The URI of the Cosmos DB Account. Changing this forces a new resource to be created.
     */
    endpointUri: pulumi.Input<string>;
    /**
     * The ID of the User Managed Identity used to authenticate against the Cosmos DB Account endpoint.
     *
     * > **Note:** `identityId` can only be specified when `authenticationType` is `identityBased`. It must be one of the `identityIds` of the Iot Hub. If not specified when `authenticationType` is `identityBased`, System Assigned Managed Identity of the Iot Hub will be used.
     */
    identityId?: pulumi.Input<string>;
    /**
     * The ID of the IoT Hub to create the endpoint. Changing this forces a new resource to be created.
     */
    iothubId: pulumi.Input<string>;
    /**
     * The name of the endpoint. The name must be unique across endpoint types. The following names are reserved: `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the partition key associated with the Cosmos DB Container.
     */
    partitionKeyName?: pulumi.Input<string>;
    /**
     * The template for generating a synthetic partition key value for use within the Cosmos DB Container.
     */
    partitionKeyTemplate?: pulumi.Input<string>;
    /**
     * The primary key of the Cosmos DB Account.
     *
     * > **Note:** `primaryKey` must and can only be specified when `authenticationType` is `keyBased`.
     */
    primaryKey?: pulumi.Input<string>;
    /**
     * The name of the resource group under which the Cosmos DB Account has been created. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The secondary key of the Cosmos DB Account.
     *
     * > **Note:** `secondaryKey` must and can only be specified when `authenticationType` is `keyBased`.
     */
    secondaryKey?: pulumi.Input<string>;
    /**
     * The subscription ID for the endpoint.
     *
     * > **Note:** When `subscriptionId` isn't specified it will be set to the subscription ID of the IoT Hub resource.
     */
    subscriptionId?: pulumi.Input<string>;
}
