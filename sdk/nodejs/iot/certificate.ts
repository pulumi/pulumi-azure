// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an IotHub Certificate.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as std from "@pulumi/std";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleIoTHub = new azure.iot.IoTHub("example", {
 *     name: "example",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     sku: {
 *         name: "B1",
 *         capacity: 1,
 *     },
 * });
 * const exampleCertificate = new azure.iot.Certificate("example", {
 *     name: "example",
 *     resourceGroupName: example.name,
 *     iothubName: exampleIoTHub.name,
 *     isVerified: true,
 *     certificateContent: std.filebase64({
 *         input: "example.cer",
 *     }).then(invoke => invoke.result),
 * });
 * ```
 *
 * ## Import
 *
 * IoTHub Certificates can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:iot/certificate:Certificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/iotHubs/example/certificates/example
 * ```
 */
export class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateState, opts?: pulumi.CustomResourceOptions): Certificate {
        return new Certificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:iot/certificate:Certificate';

    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }

    /**
     * The Base-64 representation of the X509 leaf certificate .cer file or just a .pem file content.
     */
    declare public readonly certificateContent: pulumi.Output<string>;
    /**
     * The name of the IoTHub that this certificate will be attached to. Changing this forces a new resource to be created.
     */
    declare public readonly iothubName: pulumi.Output<string>;
    /**
     * Is the certificate verified? Defaults to `false`.
     */
    declare public readonly isVerified: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the name of the IotHub Certificate resource. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The name of the resource group under which the IotHub Certificate resource has to be created. Changing this forces a new resource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;

    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateArgs | CertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateState | undefined;
            resourceInputs["certificateContent"] = state?.certificateContent;
            resourceInputs["iothubName"] = state?.iothubName;
            resourceInputs["isVerified"] = state?.isVerified;
            resourceInputs["name"] = state?.name;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
        } else {
            const args = argsOrState as CertificateArgs | undefined;
            if (args?.certificateContent === undefined && !opts.urn) {
                throw new Error("Missing required property 'certificateContent'");
            }
            if (args?.iothubName === undefined && !opts.urn) {
                throw new Error("Missing required property 'iothubName'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["certificateContent"] = args?.certificateContent ? pulumi.secret(args.certificateContent) : undefined;
            resourceInputs["iothubName"] = args?.iothubName;
            resourceInputs["isVerified"] = args?.isVerified;
            resourceInputs["name"] = args?.name;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["certificateContent"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Certificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Certificate resources.
 */
export interface CertificateState {
    /**
     * The Base-64 representation of the X509 leaf certificate .cer file or just a .pem file content.
     */
    certificateContent?: pulumi.Input<string>;
    /**
     * The name of the IoTHub that this certificate will be attached to. Changing this forces a new resource to be created.
     */
    iothubName?: pulumi.Input<string>;
    /**
     * Is the certificate verified? Defaults to `false`.
     */
    isVerified?: pulumi.Input<boolean>;
    /**
     * Specifies the name of the IotHub Certificate resource. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the resource group under which the IotHub Certificate resource has to be created. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    /**
     * The Base-64 representation of the X509 leaf certificate .cer file or just a .pem file content.
     */
    certificateContent: pulumi.Input<string>;
    /**
     * The name of the IoTHub that this certificate will be attached to. Changing this forces a new resource to be created.
     */
    iothubName: pulumi.Input<string>;
    /**
     * Is the certificate verified? Defaults to `false`.
     */
    isVerified?: pulumi.Input<boolean>;
    /**
     * Specifies the name of the IotHub Certificate resource. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the resource group under which the IotHub Certificate resource has to be created. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
}
