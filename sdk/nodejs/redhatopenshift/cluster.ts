// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a fully managed Azure Red Hat OpenShift Cluster (also known as ARO).
 *
 * > **Note:** All arguments including the client secret will be stored in the raw state as plain-text. [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
 *
 * ## Import
 *
 * Red Hat OpenShift Clusters can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:redhatopenshift/cluster:Cluster cluster1 /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/group1/providers/Microsoft.RedHatOpenShift/openShiftClusters/cluster1
 * ```
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:redhatopenshift/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * An `apiServerProfile` block as defined below.
     */
    public readonly apiServerProfile!: pulumi.Output<outputs.redhatopenshift.ClusterApiServerProfile>;
    /**
     * A `clusterProfile` block as defined below.
     */
    public readonly clusterProfile!: pulumi.Output<outputs.redhatopenshift.ClusterClusterProfile>;
    /**
     * The Red Hat OpenShift cluster console URL.
     */
    public /*out*/ readonly consoleUrl!: pulumi.Output<string>;
    /**
     * An `ingressProfile` block as defined below.
     */
    public readonly ingressProfile!: pulumi.Output<outputs.redhatopenshift.ClusterIngressProfile>;
    /**
     * The location where the Azure Red Hat OpenShift Cluster should be created. Changing this forces a new resource to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * A `mainProfile` block as defined below.
     */
    public readonly mainProfile!: pulumi.Output<outputs.redhatopenshift.ClusterMainProfile>;
    /**
     * The name of the Azure Red Hat OpenShift Cluster to create. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A `networkProfile` block as defined below.
     */
    public readonly networkProfile!: pulumi.Output<outputs.redhatopenshift.ClusterNetworkProfile>;
    /**
     * Specifies the Resource Group where the Azure Red Hat OpenShift Cluster should exist. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * A `servicePrincipal` block as defined below.
     */
    public readonly servicePrincipal!: pulumi.Output<outputs.redhatopenshift.ClusterServicePrincipal>;
    /**
     * A mapping of tags to assign to the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A `workerProfile` block as defined below.
     */
    public readonly workerProfile!: pulumi.Output<outputs.redhatopenshift.ClusterWorkerProfile>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["apiServerProfile"] = state ? state.apiServerProfile : undefined;
            resourceInputs["clusterProfile"] = state ? state.clusterProfile : undefined;
            resourceInputs["consoleUrl"] = state ? state.consoleUrl : undefined;
            resourceInputs["ingressProfile"] = state ? state.ingressProfile : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["mainProfile"] = state ? state.mainProfile : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkProfile"] = state ? state.networkProfile : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["servicePrincipal"] = state ? state.servicePrincipal : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["workerProfile"] = state ? state.workerProfile : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if ((!args || args.apiServerProfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiServerProfile'");
            }
            if ((!args || args.clusterProfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterProfile'");
            }
            if ((!args || args.ingressProfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ingressProfile'");
            }
            if ((!args || args.mainProfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mainProfile'");
            }
            if ((!args || args.networkProfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkProfile'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.servicePrincipal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicePrincipal'");
            }
            if ((!args || args.workerProfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workerProfile'");
            }
            resourceInputs["apiServerProfile"] = args ? args.apiServerProfile : undefined;
            resourceInputs["clusterProfile"] = args ? args.clusterProfile : undefined;
            resourceInputs["ingressProfile"] = args ? args.ingressProfile : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["mainProfile"] = args ? args.mainProfile : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkProfile"] = args ? args.networkProfile : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["servicePrincipal"] = args ? args.servicePrincipal : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["workerProfile"] = args ? args.workerProfile : undefined;
            resourceInputs["consoleUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * An `apiServerProfile` block as defined below.
     */
    apiServerProfile?: pulumi.Input<inputs.redhatopenshift.ClusterApiServerProfile>;
    /**
     * A `clusterProfile` block as defined below.
     */
    clusterProfile?: pulumi.Input<inputs.redhatopenshift.ClusterClusterProfile>;
    /**
     * The Red Hat OpenShift cluster console URL.
     */
    consoleUrl?: pulumi.Input<string>;
    /**
     * An `ingressProfile` block as defined below.
     */
    ingressProfile?: pulumi.Input<inputs.redhatopenshift.ClusterIngressProfile>;
    /**
     * The location where the Azure Red Hat OpenShift Cluster should be created. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * A `mainProfile` block as defined below.
     */
    mainProfile?: pulumi.Input<inputs.redhatopenshift.ClusterMainProfile>;
    /**
     * The name of the Azure Red Hat OpenShift Cluster to create. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A `networkProfile` block as defined below.
     */
    networkProfile?: pulumi.Input<inputs.redhatopenshift.ClusterNetworkProfile>;
    /**
     * Specifies the Resource Group where the Azure Red Hat OpenShift Cluster should exist. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A `servicePrincipal` block as defined below.
     */
    servicePrincipal?: pulumi.Input<inputs.redhatopenshift.ClusterServicePrincipal>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A `workerProfile` block as defined below.
     */
    workerProfile?: pulumi.Input<inputs.redhatopenshift.ClusterWorkerProfile>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * An `apiServerProfile` block as defined below.
     */
    apiServerProfile: pulumi.Input<inputs.redhatopenshift.ClusterApiServerProfile>;
    /**
     * A `clusterProfile` block as defined below.
     */
    clusterProfile: pulumi.Input<inputs.redhatopenshift.ClusterClusterProfile>;
    /**
     * An `ingressProfile` block as defined below.
     */
    ingressProfile: pulumi.Input<inputs.redhatopenshift.ClusterIngressProfile>;
    /**
     * The location where the Azure Red Hat OpenShift Cluster should be created. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * A `mainProfile` block as defined below.
     */
    mainProfile: pulumi.Input<inputs.redhatopenshift.ClusterMainProfile>;
    /**
     * The name of the Azure Red Hat OpenShift Cluster to create. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A `networkProfile` block as defined below.
     */
    networkProfile: pulumi.Input<inputs.redhatopenshift.ClusterNetworkProfile>;
    /**
     * Specifies the Resource Group where the Azure Red Hat OpenShift Cluster should exist. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A `servicePrincipal` block as defined below.
     */
    servicePrincipal: pulumi.Input<inputs.redhatopenshift.ClusterServicePrincipal>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A `workerProfile` block as defined below.
     */
    workerProfile: pulumi.Input<inputs.redhatopenshift.ClusterWorkerProfile>;
}
