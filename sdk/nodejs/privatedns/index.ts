// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AAAARecordArgs, AAAARecordState } from "./aaaarecord";
export type AAAARecord = import("./aaaarecord").AAAARecord;
export const AAAARecord: typeof import("./aaaarecord").AAAARecord = null as any;

export { ARecordArgs, ARecordState } from "./arecord";
export type ARecord = import("./arecord").ARecord;
export const ARecord: typeof import("./arecord").ARecord = null as any;

export { CnameRecordArgs, CnameRecordState } from "./cnameRecord";
export type CnameRecord = import("./cnameRecord").CnameRecord;
export const CnameRecord: typeof import("./cnameRecord").CnameRecord = null as any;

export { GetAAAARecordArgs, GetAAAARecordResult, GetAAAARecordOutputArgs } from "./getAAAARecord";
export const getAAAARecord: typeof import("./getAAAARecord").getAAAARecord = null as any;
export const getAAAARecordOutput: typeof import("./getAAAARecord").getAAAARecordOutput = null as any;

export { GetARecordArgs, GetARecordResult, GetARecordOutputArgs } from "./getARecord";
export const getARecord: typeof import("./getARecord").getARecord = null as any;
export const getARecordOutput: typeof import("./getARecord").getARecordOutput = null as any;

export { GetCnameRecordArgs, GetCnameRecordResult, GetCnameRecordOutputArgs } from "./getCnameRecord";
export const getCnameRecord: typeof import("./getCnameRecord").getCnameRecord = null as any;
export const getCnameRecordOutput: typeof import("./getCnameRecord").getCnameRecordOutput = null as any;

export { GetDnsZoneArgs, GetDnsZoneResult, GetDnsZoneOutputArgs } from "./getDnsZone";
export const getDnsZone: typeof import("./getDnsZone").getDnsZone = null as any;
export const getDnsZoneOutput: typeof import("./getDnsZone").getDnsZoneOutput = null as any;

export { GetMxRecordArgs, GetMxRecordResult, GetMxRecordOutputArgs } from "./getMxRecord";
export const getMxRecord: typeof import("./getMxRecord").getMxRecord = null as any;
export const getMxRecordOutput: typeof import("./getMxRecord").getMxRecordOutput = null as any;

export { GetPtrRecordArgs, GetPtrRecordResult, GetPtrRecordOutputArgs } from "./getPtrRecord";
export const getPtrRecord: typeof import("./getPtrRecord").getPtrRecord = null as any;
export const getPtrRecordOutput: typeof import("./getPtrRecord").getPtrRecordOutput = null as any;

export { GetSoaRecordArgs, GetSoaRecordResult, GetSoaRecordOutputArgs } from "./getSoaRecord";
export const getSoaRecord: typeof import("./getSoaRecord").getSoaRecord = null as any;
export const getSoaRecordOutput: typeof import("./getSoaRecord").getSoaRecordOutput = null as any;

export { GetSrvRecordArgs, GetSrvRecordResult, GetSrvRecordOutputArgs } from "./getSrvRecord";
export const getSrvRecord: typeof import("./getSrvRecord").getSrvRecord = null as any;
export const getSrvRecordOutput: typeof import("./getSrvRecord").getSrvRecordOutput = null as any;

export { GetTxtRecordArgs, GetTxtRecordResult, GetTxtRecordOutputArgs } from "./getTxtRecord";
export const getTxtRecord: typeof import("./getTxtRecord").getTxtRecord = null as any;
export const getTxtRecordOutput: typeof import("./getTxtRecord").getTxtRecordOutput = null as any;

export { GetZoneVirtualNetworkLinkArgs, GetZoneVirtualNetworkLinkResult, GetZoneVirtualNetworkLinkOutputArgs } from "./getZoneVirtualNetworkLink";
export const getZoneVirtualNetworkLink: typeof import("./getZoneVirtualNetworkLink").getZoneVirtualNetworkLink = null as any;
export const getZoneVirtualNetworkLinkOutput: typeof import("./getZoneVirtualNetworkLink").getZoneVirtualNetworkLinkOutput = null as any;

export { LinkServiceArgs, LinkServiceState } from "./linkService";
export type LinkService = import("./linkService").LinkService;
export const LinkService: typeof import("./linkService").LinkService = null as any;

export { MxRecordArgs, MxRecordState } from "./mxRecord";
export type MxRecord = import("./mxRecord").MxRecord;
export const MxRecord: typeof import("./mxRecord").MxRecord = null as any;

export { PTRRecordArgs, PTRRecordState } from "./ptrrecord";
export type PTRRecord = import("./ptrrecord").PTRRecord;
export const PTRRecord: typeof import("./ptrrecord").PTRRecord = null as any;

export { SRVRecordArgs, SRVRecordState } from "./srvrecord";
export type SRVRecord = import("./srvrecord").SRVRecord;
export const SRVRecord: typeof import("./srvrecord").SRVRecord = null as any;

export { TxtRecordArgs, TxtRecordState } from "./txtRecord";
export type TxtRecord = import("./txtRecord").TxtRecord;
export const TxtRecord: typeof import("./txtRecord").TxtRecord = null as any;

export { ZoneArgs, ZoneState } from "./zone";
export type Zone = import("./zone").Zone;
export const Zone: typeof import("./zone").Zone = null as any;

export { ZoneVirtualNetworkLinkArgs, ZoneVirtualNetworkLinkState } from "./zoneVirtualNetworkLink";
export type ZoneVirtualNetworkLink = import("./zoneVirtualNetworkLink").ZoneVirtualNetworkLink;
export const ZoneVirtualNetworkLink: typeof import("./zoneVirtualNetworkLink").ZoneVirtualNetworkLink = null as any;

utilities.lazyLoad(exports, ["AAAARecord"], () => require("./aaaarecord"));
utilities.lazyLoad(exports, ["ARecord"], () => require("./arecord"));
utilities.lazyLoad(exports, ["CnameRecord"], () => require("./cnameRecord"));
utilities.lazyLoad(exports, ["getAAAARecord","getAAAARecordOutput"], () => require("./getAAAARecord"));
utilities.lazyLoad(exports, ["getARecord","getARecordOutput"], () => require("./getARecord"));
utilities.lazyLoad(exports, ["getCnameRecord","getCnameRecordOutput"], () => require("./getCnameRecord"));
utilities.lazyLoad(exports, ["getDnsZone","getDnsZoneOutput"], () => require("./getDnsZone"));
utilities.lazyLoad(exports, ["getMxRecord","getMxRecordOutput"], () => require("./getMxRecord"));
utilities.lazyLoad(exports, ["getPtrRecord","getPtrRecordOutput"], () => require("./getPtrRecord"));
utilities.lazyLoad(exports, ["getSoaRecord","getSoaRecordOutput"], () => require("./getSoaRecord"));
utilities.lazyLoad(exports, ["getSrvRecord","getSrvRecordOutput"], () => require("./getSrvRecord"));
utilities.lazyLoad(exports, ["getTxtRecord","getTxtRecordOutput"], () => require("./getTxtRecord"));
utilities.lazyLoad(exports, ["getZoneVirtualNetworkLink","getZoneVirtualNetworkLinkOutput"], () => require("./getZoneVirtualNetworkLink"));
utilities.lazyLoad(exports, ["LinkService"], () => require("./linkService"));
utilities.lazyLoad(exports, ["MxRecord"], () => require("./mxRecord"));
utilities.lazyLoad(exports, ["PTRRecord"], () => require("./ptrrecord"));
utilities.lazyLoad(exports, ["SRVRecord"], () => require("./srvrecord"));
utilities.lazyLoad(exports, ["TxtRecord"], () => require("./txtRecord"));
utilities.lazyLoad(exports, ["Zone"], () => require("./zone"));
utilities.lazyLoad(exports, ["ZoneVirtualNetworkLink"], () => require("./zoneVirtualNetworkLink"));

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:privatedns/aAAARecord:AAAARecord":
                return new AAAARecord(name, <any>undefined, { urn })
            case "azure:privatedns/aRecord:ARecord":
                return new ARecord(name, <any>undefined, { urn })
            case "azure:privatedns/cnameRecord:CnameRecord":
                return new CnameRecord(name, <any>undefined, { urn })
            case "azure:privatedns/linkService:LinkService":
                return new LinkService(name, <any>undefined, { urn })
            case "azure:privatedns/mxRecord:MxRecord":
                return new MxRecord(name, <any>undefined, { urn })
            case "azure:privatedns/pTRRecord:PTRRecord":
                return new PTRRecord(name, <any>undefined, { urn })
            case "azure:privatedns/sRVRecord:SRVRecord":
                return new SRVRecord(name, <any>undefined, { urn })
            case "azure:privatedns/txtRecord:TxtRecord":
                return new TxtRecord(name, <any>undefined, { urn })
            case "azure:privatedns/zone:Zone":
                return new Zone(name, <any>undefined, { urn })
            case "azure:privatedns/zoneVirtualNetworkLink:ZoneVirtualNetworkLink":
                return new ZoneVirtualNetworkLink(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "privatedns/aAAARecord", _module)
pulumi.runtime.registerResourceModule("azure", "privatedns/aRecord", _module)
pulumi.runtime.registerResourceModule("azure", "privatedns/cnameRecord", _module)
pulumi.runtime.registerResourceModule("azure", "privatedns/linkService", _module)
pulumi.runtime.registerResourceModule("azure", "privatedns/mxRecord", _module)
pulumi.runtime.registerResourceModule("azure", "privatedns/pTRRecord", _module)
pulumi.runtime.registerResourceModule("azure", "privatedns/sRVRecord", _module)
pulumi.runtime.registerResourceModule("azure", "privatedns/txtRecord", _module)
pulumi.runtime.registerResourceModule("azure", "privatedns/zone", _module)
pulumi.runtime.registerResourceModule("azure", "privatedns/zoneVirtualNetworkLink", _module)
