// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Private DNS Resolver Forwarding Rule.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "west europe"});
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("exampleVirtualNetwork", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     addressSpaces: ["10.0.0.0/16"],
 * });
 * const exampleSubnet = new azure.network.Subnet("exampleSubnet", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.0.64/28"],
 *     delegations: [{
 *         name: "Microsoft.Network.dnsResolvers",
 *         serviceDelegation: {
 *             actions: ["Microsoft.Network/virtualNetworks/subnets/join/action"],
 *             name: "Microsoft.Network/dnsResolvers",
 *         },
 *     }],
 * });
 * const exampleResolver = new azure.privatedns.Resolver("exampleResolver", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     virtualNetworkId: exampleVirtualNetwork.id,
 * });
 * const exampleResolverOutboundEndpoint = new azure.privatedns.ResolverOutboundEndpoint("exampleResolverOutboundEndpoint", {
 *     privateDnsResolverId: exampleResolver.id,
 *     location: exampleResolver.location,
 *     subnetId: exampleSubnet.id,
 *     tags: {
 *         key: "value",
 *     },
 * });
 * const exampleResolverDnsForwardingRuleset = new azure.privatedns.ResolverDnsForwardingRuleset("exampleResolverDnsForwardingRuleset", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     privateDnsResolverOutboundEndpointIds: [exampleResolverOutboundEndpoint.id],
 * });
 * const exampleResolverForwardingRule = new azure.privatedns.ResolverForwardingRule("exampleResolverForwardingRule", {
 *     dnsForwardingRulesetId: exampleResolverDnsForwardingRuleset.id,
 *     domainName: "onprem.local.",
 *     enabled: true,
 *     targetDnsServers: [{
 *         ipAddress: "10.10.0.1",
 *         port: 53,
 *     }],
 *     metadata: {
 *         key: "value",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Private DNS Resolver Forwarding Rules can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:privatedns/resolverForwardingRule:ResolverForwardingRule example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Network/dnsForwardingRulesets/dnsForwardingRuleset1/forwardingRules/forwardingRule1
 * ```
 */
export class ResolverForwardingRule extends pulumi.CustomResource {
    /**
     * Get an existing ResolverForwardingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResolverForwardingRuleState, opts?: pulumi.CustomResourceOptions): ResolverForwardingRule {
        return new ResolverForwardingRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:privatedns/resolverForwardingRule:ResolverForwardingRule';

    /**
     * Returns true if the given object is an instance of ResolverForwardingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResolverForwardingRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResolverForwardingRule.__pulumiType;
    }

    /**
     * Specifies the ID of the Private DNS Resolver Forwarding Ruleset. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
     */
    public readonly dnsForwardingRulesetId!: pulumi.Output<string>;
    /**
     * Specifies the domain name for the Private DNS Resolver Forwarding Rule.
     */
    public readonly domainName!: pulumi.Output<string>;
    /**
     * Specifies the state of the Private DNS Resolver Forwarding Rule. Defaults to `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Metadata attached to the Private DNS Resolver Forwarding Rule.
     */
    public readonly metadata!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the name which should be used for this Private DNS Resolver Forwarding Rule. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Can be specified multiple times to define multiple target DNS servers. Each `targetDnsServers` block as defined below.
     */
    public readonly targetDnsServers!: pulumi.Output<outputs.privatedns.ResolverForwardingRuleTargetDnsServer[]>;

    /**
     * Create a ResolverForwardingRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResolverForwardingRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResolverForwardingRuleArgs | ResolverForwardingRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResolverForwardingRuleState | undefined;
            resourceInputs["dnsForwardingRulesetId"] = state ? state.dnsForwardingRulesetId : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["targetDnsServers"] = state ? state.targetDnsServers : undefined;
        } else {
            const args = argsOrState as ResolverForwardingRuleArgs | undefined;
            if ((!args || args.dnsForwardingRulesetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsForwardingRulesetId'");
            }
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if ((!args || args.targetDnsServers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetDnsServers'");
            }
            resourceInputs["dnsForwardingRulesetId"] = args ? args.dnsForwardingRulesetId : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["targetDnsServers"] = args ? args.targetDnsServers : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResolverForwardingRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ResolverForwardingRule resources.
 */
export interface ResolverForwardingRuleState {
    /**
     * Specifies the ID of the Private DNS Resolver Forwarding Ruleset. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
     */
    dnsForwardingRulesetId?: pulumi.Input<string>;
    /**
     * Specifies the domain name for the Private DNS Resolver Forwarding Rule.
     */
    domainName?: pulumi.Input<string>;
    /**
     * Specifies the state of the Private DNS Resolver Forwarding Rule. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Metadata attached to the Private DNS Resolver Forwarding Rule.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the name which should be used for this Private DNS Resolver Forwarding Rule. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Can be specified multiple times to define multiple target DNS servers. Each `targetDnsServers` block as defined below.
     */
    targetDnsServers?: pulumi.Input<pulumi.Input<inputs.privatedns.ResolverForwardingRuleTargetDnsServer>[]>;
}

/**
 * The set of arguments for constructing a ResolverForwardingRule resource.
 */
export interface ResolverForwardingRuleArgs {
    /**
     * Specifies the ID of the Private DNS Resolver Forwarding Ruleset. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
     */
    dnsForwardingRulesetId: pulumi.Input<string>;
    /**
     * Specifies the domain name for the Private DNS Resolver Forwarding Rule.
     */
    domainName: pulumi.Input<string>;
    /**
     * Specifies the state of the Private DNS Resolver Forwarding Rule. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Metadata attached to the Private DNS Resolver Forwarding Rule.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the name which should be used for this Private DNS Resolver Forwarding Rule. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Can be specified multiple times to define multiple target DNS servers. Each `targetDnsServers` block as defined below.
     */
    targetDnsServers: pulumi.Input<pulumi.Input<inputs.privatedns.ResolverForwardingRuleTargetDnsServer>[]>;
}
