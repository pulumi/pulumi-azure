// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Web PubSub Service for Socket.IO.
 *
 * ## Import
 *
 * Web PubSub Service for Socket.IOs can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:webpubsub/socketio:Socketio example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.SignalRService/webPubSub/pubsub1
 * ```
 */
export class Socketio extends pulumi.CustomResource {
    /**
     * Get an existing Socketio resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SocketioState, opts?: pulumi.CustomResourceOptions): Socketio {
        return new Socketio(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:webpubsub/socketio:Socketio';

    /**
     * Returns true if the given object is an instance of Socketio.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Socketio {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Socketio.__pulumiType;
    }

    /**
     * Whether Azure Active Directory authentication is enabled. Defaults to `true`.
     */
    declare public readonly aadAuthEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The publicly accessible IP address of the Web PubSub Service.
     */
    declare public /*out*/ readonly externalIp: pulumi.Output<string>;
    /**
     * The FQDN of the Web PubSub Service.
     */
    declare public /*out*/ readonly hostname: pulumi.Output<string>;
    /**
     * An `identity` block as defined below.
     */
    declare public readonly identity: pulumi.Output<outputs.webpubsub.SocketioIdentity | undefined>;
    /**
     * Whether the connectivity log category for live trace is enabled. Defaults to `true`.
     */
    declare public readonly liveTraceConnectivityLogsEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Whether the live trace tool is enabled. Defaults to `true`.
     */
    declare public readonly liveTraceEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Whether the HTTP request log category for live trace is enabled. Defaults to `true`.
     */
    declare public readonly liveTraceHttpRequestLogsEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Whether the messaging log category for live trace is enabled. Defaults to `true`.
     */
    declare public readonly liveTraceMessagingLogsEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Whether local authentication using an access key is enabled. Defaults to `true`.
     */
    declare public readonly localAuthEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The Azure Region where the Web PubSub Service should exist. Changing this forces a new Web PubSub Service to be created.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * The name which should be used for this Web PubSub Service. Changing this forces a new Web PubSub Service to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The primary access key for the Web PubSub Service.
     */
    declare public /*out*/ readonly primaryAccessKey: pulumi.Output<string>;
    /**
     * The primary connection string for the Web PubSub Service.
     */
    declare public /*out*/ readonly primaryConnectionString: pulumi.Output<string>;
    /**
     * Whether public network access is enabled. Defaults to `Enabled`. Possible values are `Enabled` and `Disabled`.
     *
     * > **Note:** `publicNetworkAccess` cannot be set to `Disabled` when `sku` is `Free_F1`.
     */
    declare public readonly publicNetworkAccess: pulumi.Output<string | undefined>;
    /**
     * The publicly accessible port for client-side usage of the Web PubSub Service.
     */
    declare public /*out*/ readonly publicPort: pulumi.Output<number>;
    /**
     * The name of the Resource Group where the Web PubSub Service should exist. Changing this forces a new Web PubSub Service to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * The secondary access key for the Web PubSub Service.
     */
    declare public /*out*/ readonly secondaryAccessKey: pulumi.Output<string>;
    /**
     * The secondary connection string for the Web PubSub Service.
     */
    declare public /*out*/ readonly secondaryConnectionString: pulumi.Output<string>;
    /**
     * The publicly accessible port for server-side usage of the Web PubSub Service.
     */
    declare public /*out*/ readonly serverPort: pulumi.Output<number>;
    /**
     * The service mode of this Web PubSub Service. Defaults to `Default`. Possible values are `Default` and `Serverless`.
     */
    declare public readonly serviceMode: pulumi.Output<string | undefined>;
    /**
     * The SKU to use for this Web PubSub Service. Possible values are `Free_F1`, `Standard_S1`, `Premium_P1`, and `Premium_P2`.
     */
    declare public readonly sku: pulumi.Output<outputs.webpubsub.SocketioSku>;
    /**
     * A mapping of tags which should be assigned to the Web PubSub Service.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Whether the service should request a client certificate during a TLS handshake. Defaults to `false`.
     *
     * > **Note:** `tlsClientCertEnabled` cannot be set to `true` when `sku` is `Free_F1`.
     */
    declare public readonly tlsClientCertEnabled: pulumi.Output<boolean | undefined>;

    /**
     * Create a Socketio resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SocketioArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SocketioArgs | SocketioState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SocketioState | undefined;
            resourceInputs["aadAuthEnabled"] = state?.aadAuthEnabled;
            resourceInputs["externalIp"] = state?.externalIp;
            resourceInputs["hostname"] = state?.hostname;
            resourceInputs["identity"] = state?.identity;
            resourceInputs["liveTraceConnectivityLogsEnabled"] = state?.liveTraceConnectivityLogsEnabled;
            resourceInputs["liveTraceEnabled"] = state?.liveTraceEnabled;
            resourceInputs["liveTraceHttpRequestLogsEnabled"] = state?.liveTraceHttpRequestLogsEnabled;
            resourceInputs["liveTraceMessagingLogsEnabled"] = state?.liveTraceMessagingLogsEnabled;
            resourceInputs["localAuthEnabled"] = state?.localAuthEnabled;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["primaryAccessKey"] = state?.primaryAccessKey;
            resourceInputs["primaryConnectionString"] = state?.primaryConnectionString;
            resourceInputs["publicNetworkAccess"] = state?.publicNetworkAccess;
            resourceInputs["publicPort"] = state?.publicPort;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["secondaryAccessKey"] = state?.secondaryAccessKey;
            resourceInputs["secondaryConnectionString"] = state?.secondaryConnectionString;
            resourceInputs["serverPort"] = state?.serverPort;
            resourceInputs["serviceMode"] = state?.serviceMode;
            resourceInputs["sku"] = state?.sku;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tlsClientCertEnabled"] = state?.tlsClientCertEnabled;
        } else {
            const args = argsOrState as SocketioArgs | undefined;
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.sku === undefined && !opts.urn) {
                throw new Error("Missing required property 'sku'");
            }
            resourceInputs["aadAuthEnabled"] = args?.aadAuthEnabled;
            resourceInputs["identity"] = args?.identity;
            resourceInputs["liveTraceConnectivityLogsEnabled"] = args?.liveTraceConnectivityLogsEnabled;
            resourceInputs["liveTraceEnabled"] = args?.liveTraceEnabled;
            resourceInputs["liveTraceHttpRequestLogsEnabled"] = args?.liveTraceHttpRequestLogsEnabled;
            resourceInputs["liveTraceMessagingLogsEnabled"] = args?.liveTraceMessagingLogsEnabled;
            resourceInputs["localAuthEnabled"] = args?.localAuthEnabled;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["publicNetworkAccess"] = args?.publicNetworkAccess;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["serviceMode"] = args?.serviceMode;
            resourceInputs["sku"] = args?.sku;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["tlsClientCertEnabled"] = args?.tlsClientCertEnabled;
            resourceInputs["externalIp"] = undefined /*out*/;
            resourceInputs["hostname"] = undefined /*out*/;
            resourceInputs["primaryAccessKey"] = undefined /*out*/;
            resourceInputs["primaryConnectionString"] = undefined /*out*/;
            resourceInputs["publicPort"] = undefined /*out*/;
            resourceInputs["secondaryAccessKey"] = undefined /*out*/;
            resourceInputs["secondaryConnectionString"] = undefined /*out*/;
            resourceInputs["serverPort"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["primaryAccessKey", "primaryConnectionString", "secondaryAccessKey", "secondaryConnectionString"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Socketio.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Socketio resources.
 */
export interface SocketioState {
    /**
     * Whether Azure Active Directory authentication is enabled. Defaults to `true`.
     */
    aadAuthEnabled?: pulumi.Input<boolean>;
    /**
     * The publicly accessible IP address of the Web PubSub Service.
     */
    externalIp?: pulumi.Input<string>;
    /**
     * The FQDN of the Web PubSub Service.
     */
    hostname?: pulumi.Input<string>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.webpubsub.SocketioIdentity>;
    /**
     * Whether the connectivity log category for live trace is enabled. Defaults to `true`.
     */
    liveTraceConnectivityLogsEnabled?: pulumi.Input<boolean>;
    /**
     * Whether the live trace tool is enabled. Defaults to `true`.
     */
    liveTraceEnabled?: pulumi.Input<boolean>;
    /**
     * Whether the HTTP request log category for live trace is enabled. Defaults to `true`.
     */
    liveTraceHttpRequestLogsEnabled?: pulumi.Input<boolean>;
    /**
     * Whether the messaging log category for live trace is enabled. Defaults to `true`.
     */
    liveTraceMessagingLogsEnabled?: pulumi.Input<boolean>;
    /**
     * Whether local authentication using an access key is enabled. Defaults to `true`.
     */
    localAuthEnabled?: pulumi.Input<boolean>;
    /**
     * The Azure Region where the Web PubSub Service should exist. Changing this forces a new Web PubSub Service to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The name which should be used for this Web PubSub Service. Changing this forces a new Web PubSub Service to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The primary access key for the Web PubSub Service.
     */
    primaryAccessKey?: pulumi.Input<string>;
    /**
     * The primary connection string for the Web PubSub Service.
     */
    primaryConnectionString?: pulumi.Input<string>;
    /**
     * Whether public network access is enabled. Defaults to `Enabled`. Possible values are `Enabled` and `Disabled`.
     *
     * > **Note:** `publicNetworkAccess` cannot be set to `Disabled` when `sku` is `Free_F1`.
     */
    publicNetworkAccess?: pulumi.Input<string>;
    /**
     * The publicly accessible port for client-side usage of the Web PubSub Service.
     */
    publicPort?: pulumi.Input<number>;
    /**
     * The name of the Resource Group where the Web PubSub Service should exist. Changing this forces a new Web PubSub Service to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The secondary access key for the Web PubSub Service.
     */
    secondaryAccessKey?: pulumi.Input<string>;
    /**
     * The secondary connection string for the Web PubSub Service.
     */
    secondaryConnectionString?: pulumi.Input<string>;
    /**
     * The publicly accessible port for server-side usage of the Web PubSub Service.
     */
    serverPort?: pulumi.Input<number>;
    /**
     * The service mode of this Web PubSub Service. Defaults to `Default`. Possible values are `Default` and `Serverless`.
     */
    serviceMode?: pulumi.Input<string>;
    /**
     * The SKU to use for this Web PubSub Service. Possible values are `Free_F1`, `Standard_S1`, `Premium_P1`, and `Premium_P2`.
     */
    sku?: pulumi.Input<inputs.webpubsub.SocketioSku>;
    /**
     * A mapping of tags which should be assigned to the Web PubSub Service.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether the service should request a client certificate during a TLS handshake. Defaults to `false`.
     *
     * > **Note:** `tlsClientCertEnabled` cannot be set to `true` when `sku` is `Free_F1`.
     */
    tlsClientCertEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Socketio resource.
 */
export interface SocketioArgs {
    /**
     * Whether Azure Active Directory authentication is enabled. Defaults to `true`.
     */
    aadAuthEnabled?: pulumi.Input<boolean>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.webpubsub.SocketioIdentity>;
    /**
     * Whether the connectivity log category for live trace is enabled. Defaults to `true`.
     */
    liveTraceConnectivityLogsEnabled?: pulumi.Input<boolean>;
    /**
     * Whether the live trace tool is enabled. Defaults to `true`.
     */
    liveTraceEnabled?: pulumi.Input<boolean>;
    /**
     * Whether the HTTP request log category for live trace is enabled. Defaults to `true`.
     */
    liveTraceHttpRequestLogsEnabled?: pulumi.Input<boolean>;
    /**
     * Whether the messaging log category for live trace is enabled. Defaults to `true`.
     */
    liveTraceMessagingLogsEnabled?: pulumi.Input<boolean>;
    /**
     * Whether local authentication using an access key is enabled. Defaults to `true`.
     */
    localAuthEnabled?: pulumi.Input<boolean>;
    /**
     * The Azure Region where the Web PubSub Service should exist. Changing this forces a new Web PubSub Service to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The name which should be used for this Web PubSub Service. Changing this forces a new Web PubSub Service to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether public network access is enabled. Defaults to `Enabled`. Possible values are `Enabled` and `Disabled`.
     *
     * > **Note:** `publicNetworkAccess` cannot be set to `Disabled` when `sku` is `Free_F1`.
     */
    publicNetworkAccess?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Web PubSub Service should exist. Changing this forces a new Web PubSub Service to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The service mode of this Web PubSub Service. Defaults to `Default`. Possible values are `Default` and `Serverless`.
     */
    serviceMode?: pulumi.Input<string>;
    /**
     * The SKU to use for this Web PubSub Service. Possible values are `Free_F1`, `Standard_S1`, `Premium_P1`, and `Premium_P2`.
     */
    sku: pulumi.Input<inputs.webpubsub.SocketioSku>;
    /**
     * A mapping of tags which should be assigned to the Web PubSub Service.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether the service should request a client certificate during a TLS handshake. Defaults to `false`.
     *
     * > **Note:** `tlsClientCertEnabled` cannot be set to `true` when `sku` is `Free_F1`.
     */
    tlsClientCertEnabled?: pulumi.Input<boolean>;
}
