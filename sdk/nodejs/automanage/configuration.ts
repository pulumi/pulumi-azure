// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages an Automanage Configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleConfiguration = new azure.automanage.Configuration("exampleConfiguration", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     antimalware: {
 *         exclusions: {
 *             extensions: "exe;dll",
 *             paths: "C:\\Windows\\Temp;D:\\Temp",
 *             processes: "svchost.exe;notepad.exe",
 *         },
 *         realTimeProtectionEnabled: true,
 *         scheduledScanEnabled: true,
 *         scheduledScanType: "Quick",
 *         scheduledScanDay: 1,
 *         scheduledScanTimeInMinutes: 1339,
 *     },
 *     azureSecurityBaseline: {
 *         assignmentType: "ApplyAndAutoCorrect",
 *     },
 *     automationAccountEnabled: true,
 *     backup: {
 *         policyName: "acctest-backup-policy-%d",
 *         timeZone: "UTC",
 *         instantRpRetentionRangeInDays: 2,
 *         schedulePolicy: {
 *             scheduleRunFrequency: "Daily",
 *             scheduleRunDays: [
 *                 "Monday",
 *                 "Tuesday",
 *             ],
 *             scheduleRunTimes: ["12:00"],
 *             schedulePolicyType: "SimpleSchedulePolicy",
 *         },
 *         retentionPolicy: {
 *             retentionPolicyType: "LongTermRetentionPolicy",
 *             dailySchedule: {
 *                 retentionTimes: ["12:00"],
 *                 retentionDuration: {
 *                     count: 7,
 *                     durationType: "Days",
 *                 },
 *             },
 *             weeklySchedule: {
 *                 retentionTimes: ["14:00"],
 *                 retentionDuration: {
 *                     count: 4,
 *                     durationType: "Weeks",
 *                 },
 *             },
 *         },
 *     },
 *     bootDiagnosticsEnabled: true,
 *     defenderForCloudEnabled: true,
 *     guestConfigurationEnabled: true,
 *     logAnalyticsEnabled: true,
 *     statusChangeAlertEnabled: true,
 *     tags: {
 *         env: "test",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Automanage Configuration can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:automanage/configuration:Configuration example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Automanage/configurationProfiles/configurationProfile1
 * ```
 */
export class Configuration extends pulumi.CustomResource {
    /**
     * Get an existing Configuration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigurationState, opts?: pulumi.CustomResourceOptions): Configuration {
        return new Configuration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:automanage/configuration:Configuration';

    /**
     * Returns true if the given object is an instance of Configuration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Configuration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Configuration.__pulumiType;
    }

    /**
     * A `antimalware` block as defined below.
     */
    public readonly antimalware!: pulumi.Output<outputs.automanage.ConfigurationAntimalware | undefined>;
    /**
     * Whether the automation account is enabled. Defaults to `false`.
     */
    public readonly automationAccountEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * A `azureSecurityBaseline` block as defined below.
     */
    public readonly azureSecurityBaseline!: pulumi.Output<outputs.automanage.ConfigurationAzureSecurityBaseline | undefined>;
    /**
     * A `backup` block as defined below.
     */
    public readonly backup!: pulumi.Output<outputs.automanage.ConfigurationBackup | undefined>;
    /**
     * Whether the boot diagnostics are enabled. Defaults to `false`.
     */
    public readonly bootDiagnosticsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Whether the defender for cloud is enabled. Defaults to `false`.
     */
    public readonly defenderForCloudEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Whether the guest configuration is enabled. Defaults to `false`.
     */
    public readonly guestConfigurationEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The Azure Region where the Automanage Configuration should exist. Changing this forces a new Automanage Configuration to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Whether log analytics are enabled. Defaults to `false`.
     */
    public readonly logAnalyticsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The name which should be used for this Automanage Configuration. Changing this forces a new Automanage Configuration to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the Resource Group where the Automanage Configuration should exist. Changing this forces a new Automanage Configuration to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * Whether the status change alert is enabled. Defaults to `false`.
     */
    public readonly statusChangeAlertEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * A mapping of tags to assign to the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Configuration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigurationArgs | ConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigurationState | undefined;
            resourceInputs["antimalware"] = state ? state.antimalware : undefined;
            resourceInputs["automationAccountEnabled"] = state ? state.automationAccountEnabled : undefined;
            resourceInputs["azureSecurityBaseline"] = state ? state.azureSecurityBaseline : undefined;
            resourceInputs["backup"] = state ? state.backup : undefined;
            resourceInputs["bootDiagnosticsEnabled"] = state ? state.bootDiagnosticsEnabled : undefined;
            resourceInputs["defenderForCloudEnabled"] = state ? state.defenderForCloudEnabled : undefined;
            resourceInputs["guestConfigurationEnabled"] = state ? state.guestConfigurationEnabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["logAnalyticsEnabled"] = state ? state.logAnalyticsEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["statusChangeAlertEnabled"] = state ? state.statusChangeAlertEnabled : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ConfigurationArgs | undefined;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["antimalware"] = args ? args.antimalware : undefined;
            resourceInputs["automationAccountEnabled"] = args ? args.automationAccountEnabled : undefined;
            resourceInputs["azureSecurityBaseline"] = args ? args.azureSecurityBaseline : undefined;
            resourceInputs["backup"] = args ? args.backup : undefined;
            resourceInputs["bootDiagnosticsEnabled"] = args ? args.bootDiagnosticsEnabled : undefined;
            resourceInputs["defenderForCloudEnabled"] = args ? args.defenderForCloudEnabled : undefined;
            resourceInputs["guestConfigurationEnabled"] = args ? args.guestConfigurationEnabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["logAnalyticsEnabled"] = args ? args.logAnalyticsEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["statusChangeAlertEnabled"] = args ? args.statusChangeAlertEnabled : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Configuration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Configuration resources.
 */
export interface ConfigurationState {
    /**
     * A `antimalware` block as defined below.
     */
    antimalware?: pulumi.Input<inputs.automanage.ConfigurationAntimalware>;
    /**
     * Whether the automation account is enabled. Defaults to `false`.
     */
    automationAccountEnabled?: pulumi.Input<boolean>;
    /**
     * A `azureSecurityBaseline` block as defined below.
     */
    azureSecurityBaseline?: pulumi.Input<inputs.automanage.ConfigurationAzureSecurityBaseline>;
    /**
     * A `backup` block as defined below.
     */
    backup?: pulumi.Input<inputs.automanage.ConfigurationBackup>;
    /**
     * Whether the boot diagnostics are enabled. Defaults to `false`.
     */
    bootDiagnosticsEnabled?: pulumi.Input<boolean>;
    /**
     * Whether the defender for cloud is enabled. Defaults to `false`.
     */
    defenderForCloudEnabled?: pulumi.Input<boolean>;
    /**
     * Whether the guest configuration is enabled. Defaults to `false`.
     */
    guestConfigurationEnabled?: pulumi.Input<boolean>;
    /**
     * The Azure Region where the Automanage Configuration should exist. Changing this forces a new Automanage Configuration to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Whether log analytics are enabled. Defaults to `false`.
     */
    logAnalyticsEnabled?: pulumi.Input<boolean>;
    /**
     * The name which should be used for this Automanage Configuration. Changing this forces a new Automanage Configuration to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Automanage Configuration should exist. Changing this forces a new Automanage Configuration to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * Whether the status change alert is enabled. Defaults to `false`.
     */
    statusChangeAlertEnabled?: pulumi.Input<boolean>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Configuration resource.
 */
export interface ConfigurationArgs {
    /**
     * A `antimalware` block as defined below.
     */
    antimalware?: pulumi.Input<inputs.automanage.ConfigurationAntimalware>;
    /**
     * Whether the automation account is enabled. Defaults to `false`.
     */
    automationAccountEnabled?: pulumi.Input<boolean>;
    /**
     * A `azureSecurityBaseline` block as defined below.
     */
    azureSecurityBaseline?: pulumi.Input<inputs.automanage.ConfigurationAzureSecurityBaseline>;
    /**
     * A `backup` block as defined below.
     */
    backup?: pulumi.Input<inputs.automanage.ConfigurationBackup>;
    /**
     * Whether the boot diagnostics are enabled. Defaults to `false`.
     */
    bootDiagnosticsEnabled?: pulumi.Input<boolean>;
    /**
     * Whether the defender for cloud is enabled. Defaults to `false`.
     */
    defenderForCloudEnabled?: pulumi.Input<boolean>;
    /**
     * Whether the guest configuration is enabled. Defaults to `false`.
     */
    guestConfigurationEnabled?: pulumi.Input<boolean>;
    /**
     * The Azure Region where the Automanage Configuration should exist. Changing this forces a new Automanage Configuration to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Whether log analytics are enabled. Defaults to `false`.
     */
    logAnalyticsEnabled?: pulumi.Input<boolean>;
    /**
     * The name which should be used for this Automanage Configuration. Changing this forces a new Automanage Configuration to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Automanage Configuration should exist. Changing this forces a new Automanage Configuration to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Whether the status change alert is enabled. Defaults to `false`.
     */
    statusChangeAlertEnabled?: pulumi.Input<boolean>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
