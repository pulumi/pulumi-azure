// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to access information about an existing Logic App Standard instance.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.logicapps.getStandard({
 *     name: "logicappstd",
 *     resourceGroupName: "example-rg",
 * });
 * export const id = example.then(example => example.id);
 * ```
 */
export function getStandard(args: GetStandardArgs, opts?: pulumi.InvokeOptions): Promise<GetStandardResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure:logicapps/getStandard:getStandard", {
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
        "siteConfig": args.siteConfig,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getStandard.
 */
export interface GetStandardArgs {
    /**
     * The name of this Logic App.
     */
    name: string;
    /**
     * The name of the Resource Group where the Logic App exists.
     */
    resourceGroupName: string;
    siteConfig?: inputs.logicapps.GetStandardSiteConfig;
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getStandard.
 */
export interface GetStandardResult {
    readonly appServicePlanId: string;
    readonly appSettings: {[key: string]: string};
    /**
     * The Auto-swap slot name.
     */
    readonly autoSwapSlotName: string;
    readonly bundleVersion: string;
    readonly clientAffinityEnabled: boolean;
    readonly clientCertificateMode: string;
    readonly connectionStrings: outputs.logicapps.GetStandardConnectionString[];
    readonly customDomainVerificationId: string;
    readonly defaultHostname: string;
    readonly enabled: boolean;
    readonly httpsOnly: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * An `identity` block as defined below.
     */
    readonly identities: outputs.logicapps.GetStandardIdentity[];
    readonly kind: string;
    /**
     * The Azure location where the Logic App Standard exists.
     */
    readonly location: string;
    readonly name: string;
    readonly outboundIpAddresses: string;
    readonly possibleOutboundIpAddresses: string;
    readonly resourceGroupName: string;
    readonly siteConfig: outputs.logicapps.GetStandardSiteConfig;
    readonly siteCredentials: outputs.logicapps.GetStandardSiteCredential[];
    readonly storageAccountAccessKey: string;
    readonly storageAccountName: string;
    readonly storageAccountShareName: string;
    readonly tags?: {[key: string]: string};
    readonly useExtensionBundle: boolean;
    readonly version: string;
    readonly virtualNetworkSubnetId: string;
}
/**
 * Use this data source to access information about an existing Logic App Standard instance.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.logicapps.getStandard({
 *     name: "logicappstd",
 *     resourceGroupName: "example-rg",
 * });
 * export const id = example.then(example => example.id);
 * ```
 */
export function getStandardOutput(args: GetStandardOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStandardResult> {
    return pulumi.output(args).apply((a: any) => getStandard(a, opts))
}

/**
 * A collection of arguments for invoking getStandard.
 */
export interface GetStandardOutputArgs {
    /**
     * The name of this Logic App.
     */
    name: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Logic App exists.
     */
    resourceGroupName: pulumi.Input<string>;
    siteConfig?: pulumi.Input<inputs.logicapps.GetStandardSiteConfigArgs>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
