// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Manages a Logic App Integration Account Certificate.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleIntegrationAccount = new azure.logicapps.IntegrationAccount("exampleIntegrationAccount", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     skuName: "Standard",
 * });
 * const exampleIntegrationAccountCertificate = new azure.logicapps.IntegrationAccountCertificate("exampleIntegrationAccountCertificate", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     integrationAccountName: exampleIntegrationAccount.name,
 *     publicCertificate: "MIIDbzCCAlegAwIBAgIJAIzjRD36sIbbMA0GCSqGSIb3DQEBCwUAME0xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApTb21lLVN0YXRlMRIwEAYDVQQKDAl0ZXJyYWZvcm0xFTATBgNVBAMMDHRlcnJhZm9ybS5pbzAgFw0xNzA0MjEyMDA1MjdaGA8yMTE3MDMyODIwMDUyN1owTTELMAkGA1UEBhMCVVMxEzARBgNVBAgMClNvbWUtU3RhdGUxEjAQBgNVBAoMCXRlcnJhZm9ybTEVMBMGA1UEAwwMdGVycmFmb3JtLmlvMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3L9L5szT4+FLykTFNyyPjy/k3BQTYAfRQzP2dhnsuUKm3cdPC0NyZ+wEXIUGhoDO2YG6EYChOl8fsDqDOjloSUGKqYw++nlpHIuUgJx8IxxG2XkALCjFU7EmF+w7kn76d0ezpEIYxnLP+KG2DVornoEt1aLhv1MLmpgEZZPhDbMSLhSYWeTVRMayXLwqtfgnDumQSB+8d/1JuJqrSI4pD12JozVThzb6hsjfb6RMX4epPmrGn0PbTPEEA6awmsxBCXB0s13nNQt/O0hLM2agwvAyozilQV+s616Ckgk6DJoUkqZhDy7vPYMIRSr98fBws6zkrV6tTLjmD8xAvobePQIDAQABo1AwTjAdBgNVHQ4EFgQUXIqO421zMMmbcRRX9wctZFCQuPIwHwYDVR0jBBgwFoAUXIqO421zMMmbcRRX9wctZFCQuPIwDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAr82NeT3BYJOKLlUL6Om5LjUF66ewcJjG9ltdvyQwVneMcq7t5UAPxgChzqNRVk4da8PzkXpjBJyWezHupdJNX3XqeUk2kSxqQ6/gmhqvfI3y7djrwoO6jvMEY26WqtkTNORWDP3THJJVimC3zV+KMU5UBVrEzhOVhHSU709lBP75o0BBn3xGsPqSq9k8IotIFfyAc6a+XP3+ZMpvh7wqAUml7vWa5wlcXExCx39h1balfDSLGNC4swWPCp9AMnQR0p+vMay9hNP1Eh+9QYUai14d5KS3cFV+KxE1cJR5HD/iLltnnOEbpMsB0eVOZWkFvE7Y5lW0oVSAfin5TwTJMQ==",
 * });
 * ```
 *
 * ## Import
 *
 * Logic App Integration Account Certificates can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:logicapps/integrationAccountCertificate:IntegrationAccountCertificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Logic/integrationAccounts/account1/certificates/certificate1
 * ```
 */
export class IntegrationAccountCertificate extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationAccountCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationAccountCertificateState, opts?: pulumi.CustomResourceOptions): IntegrationAccountCertificate {
        return new IntegrationAccountCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:logicapps/integrationAccountCertificate:IntegrationAccountCertificate';

    /**
     * Returns true if the given object is an instance of IntegrationAccountCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationAccountCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationAccountCertificate.__pulumiType;
    }

    /**
     * The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Certificate to be created.
     */
    public readonly integrationAccountName!: pulumi.Output<string>;
    /**
     * A `keyVaultKey` block as documented below.
     */
    public readonly keyVaultKey!: pulumi.Output<outputs.logicapps.IntegrationAccountCertificateKeyVaultKey | undefined>;
    /**
     * A JSON mapping of any Metadata for this Logic App Integration Account Certificate.
     */
    public readonly metadata!: pulumi.Output<string | undefined>;
    /**
     * The name which should be used for this Logic App Integration Account Certificate. Changing this forces a new Logic App Integration Account Certificate to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The public certificate for the Logic App Integration Account Certificate.
     */
    public readonly publicCertificate!: pulumi.Output<string | undefined>;
    /**
     * The name of the Resource Group where the Logic App Integration Account Certificate should exist. Changing this forces a new Logic App Integration Account Certificate to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;

    /**
     * Create a IntegrationAccountCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationAccountCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationAccountCertificateArgs | IntegrationAccountCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationAccountCertificateState | undefined;
            resourceInputs["integrationAccountName"] = state ? state.integrationAccountName : undefined;
            resourceInputs["keyVaultKey"] = state ? state.keyVaultKey : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publicCertificate"] = state ? state.publicCertificate : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
        } else {
            const args = argsOrState as IntegrationAccountCertificateArgs | undefined;
            if ((!args || args.integrationAccountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integrationAccountName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["integrationAccountName"] = args ? args.integrationAccountName : undefined;
            resourceInputs["keyVaultKey"] = args ? args.keyVaultKey : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicCertificate"] = args ? args.publicCertificate : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IntegrationAccountCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IntegrationAccountCertificate resources.
 */
export interface IntegrationAccountCertificateState {
    /**
     * The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Certificate to be created.
     */
    integrationAccountName?: pulumi.Input<string>;
    /**
     * A `keyVaultKey` block as documented below.
     */
    keyVaultKey?: pulumi.Input<inputs.logicapps.IntegrationAccountCertificateKeyVaultKey>;
    /**
     * A JSON mapping of any Metadata for this Logic App Integration Account Certificate.
     */
    metadata?: pulumi.Input<string>;
    /**
     * The name which should be used for this Logic App Integration Account Certificate. Changing this forces a new Logic App Integration Account Certificate to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The public certificate for the Logic App Integration Account Certificate.
     */
    publicCertificate?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Logic App Integration Account Certificate should exist. Changing this forces a new Logic App Integration Account Certificate to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IntegrationAccountCertificate resource.
 */
export interface IntegrationAccountCertificateArgs {
    /**
     * The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Certificate to be created.
     */
    integrationAccountName: pulumi.Input<string>;
    /**
     * A `keyVaultKey` block as documented below.
     */
    keyVaultKey?: pulumi.Input<inputs.logicapps.IntegrationAccountCertificateKeyVaultKey>;
    /**
     * A JSON mapping of any Metadata for this Logic App Integration Account Certificate.
     */
    metadata?: pulumi.Input<string>;
    /**
     * The name which should be used for this Logic App Integration Account Certificate. Changing this forces a new Logic App Integration Account Certificate to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The public certificate for the Logic App Integration Account Certificate.
     */
    publicCertificate?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Logic App Integration Account Certificate should exist. Changing this forces a new Logic App Integration Account Certificate to be created.
     */
    resourceGroupName: pulumi.Input<string>;
}
