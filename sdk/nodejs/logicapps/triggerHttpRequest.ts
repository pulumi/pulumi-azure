// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a HTTP Request Trigger within a Logic App Workflow
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "workflow-resources",
 *     location: "West Europe",
 * });
 * const exampleWorkflow = new azure.logicapps.Workflow("example", {
 *     name: "workflow1",
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const exampleTriggerHttpRequest = new azure.logicapps.TriggerHttpRequest("example", {
 *     name: "some-http-trigger",
 *     logicAppId: exampleWorkflow.id,
 *     schema: `{
 *     "type": "object",
 *     "properties": {
 *         "hello": {
 *             "type": "string"
 *         }
 *     }
 * }
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * Logic App HTTP Request Triggers can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:logicapps/triggerHttpRequest:TriggerHttpRequest request1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Logic/workflows/workflow1/triggers/request1
 * ```
 */
export class TriggerHttpRequest extends pulumi.CustomResource {
    /**
     * Get an existing TriggerHttpRequest resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TriggerHttpRequestState, opts?: pulumi.CustomResourceOptions): TriggerHttpRequest {
        return new TriggerHttpRequest(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:logicapps/triggerHttpRequest:TriggerHttpRequest';

    /**
     * Returns true if the given object is an instance of TriggerHttpRequest.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TriggerHttpRequest {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TriggerHttpRequest.__pulumiType;
    }

    /**
     * The URL of the Trigger within the Logic App Workflow. For use with certain resources like monitorActionGroup and security_center_automation.
     */
    declare public /*out*/ readonly callbackUrl: pulumi.Output<string>;
    /**
     * Specifies the ID of the Logic App Workflow. Changing this forces a new resource to be created.
     */
    declare public readonly logicAppId: pulumi.Output<string>;
    /**
     * Specifies the HTTP Method which the request be using. Possible values include `DELETE`, `GET`, `PATCH`, `POST` or `PUT`.
     */
    declare public readonly method: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of the HTTP Request Trigger to be created within the Logic App Workflow. Changing this forces a new resource to be created.
     *
     * > **NOTE:** This name must be unique across all Triggers within the Logic App Workflow.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Specifies the Relative Path used for this Request.
     *
     * > **NOTE:** When `relativePath` is set a `method` must also be set.
     */
    declare public readonly relativePath: pulumi.Output<string | undefined>;
    /**
     * A JSON Blob defining the Schema of the incoming request. This needs to be valid JSON.
     */
    declare public readonly schema: pulumi.Output<string>;

    /**
     * Create a TriggerHttpRequest resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TriggerHttpRequestArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TriggerHttpRequestArgs | TriggerHttpRequestState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TriggerHttpRequestState | undefined;
            resourceInputs["callbackUrl"] = state?.callbackUrl;
            resourceInputs["logicAppId"] = state?.logicAppId;
            resourceInputs["method"] = state?.method;
            resourceInputs["name"] = state?.name;
            resourceInputs["relativePath"] = state?.relativePath;
            resourceInputs["schema"] = state?.schema;
        } else {
            const args = argsOrState as TriggerHttpRequestArgs | undefined;
            if (args?.logicAppId === undefined && !opts.urn) {
                throw new Error("Missing required property 'logicAppId'");
            }
            if (args?.schema === undefined && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            resourceInputs["logicAppId"] = args?.logicAppId;
            resourceInputs["method"] = args?.method;
            resourceInputs["name"] = args?.name;
            resourceInputs["relativePath"] = args?.relativePath;
            resourceInputs["schema"] = args?.schema;
            resourceInputs["callbackUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TriggerHttpRequest.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TriggerHttpRequest resources.
 */
export interface TriggerHttpRequestState {
    /**
     * The URL of the Trigger within the Logic App Workflow. For use with certain resources like monitorActionGroup and security_center_automation.
     */
    callbackUrl?: pulumi.Input<string>;
    /**
     * Specifies the ID of the Logic App Workflow. Changing this forces a new resource to be created.
     */
    logicAppId?: pulumi.Input<string>;
    /**
     * Specifies the HTTP Method which the request be using. Possible values include `DELETE`, `GET`, `PATCH`, `POST` or `PUT`.
     */
    method?: pulumi.Input<string>;
    /**
     * Specifies the name of the HTTP Request Trigger to be created within the Logic App Workflow. Changing this forces a new resource to be created.
     *
     * > **NOTE:** This name must be unique across all Triggers within the Logic App Workflow.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the Relative Path used for this Request.
     *
     * > **NOTE:** When `relativePath` is set a `method` must also be set.
     */
    relativePath?: pulumi.Input<string>;
    /**
     * A JSON Blob defining the Schema of the incoming request. This needs to be valid JSON.
     */
    schema?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TriggerHttpRequest resource.
 */
export interface TriggerHttpRequestArgs {
    /**
     * Specifies the ID of the Logic App Workflow. Changing this forces a new resource to be created.
     */
    logicAppId: pulumi.Input<string>;
    /**
     * Specifies the HTTP Method which the request be using. Possible values include `DELETE`, `GET`, `PATCH`, `POST` or `PUT`.
     */
    method?: pulumi.Input<string>;
    /**
     * Specifies the name of the HTTP Request Trigger to be created within the Logic App Workflow. Changing this forces a new resource to be created.
     *
     * > **NOTE:** This name must be unique across all Triggers within the Logic App Workflow.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the Relative Path used for this Request.
     *
     * > **NOTE:** When `relativePath` is set a `method` must also be set.
     */
    relativePath?: pulumi.Input<string>;
    /**
     * A JSON Blob defining the Schema of the incoming request. This needs to be valid JSON.
     */
    schema: pulumi.Input<string>;
}
