// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ActionCustomArgs, ActionCustomState } from "./actionCustom";
export type ActionCustom = import("./actionCustom").ActionCustom;
export const ActionCustom: typeof import("./actionCustom").ActionCustom = null as any;
utilities.lazyLoad(exports, ["ActionCustom"], () => require("./actionCustom"));

export { ActionHttpArgs, ActionHttpState } from "./actionHttp";
export type ActionHttp = import("./actionHttp").ActionHttp;
export const ActionHttp: typeof import("./actionHttp").ActionHttp = null as any;
utilities.lazyLoad(exports, ["ActionHttp"], () => require("./actionHttp"));

export { GetIntegrationAccountArgs, GetIntegrationAccountResult, GetIntegrationAccountOutputArgs } from "./getIntegrationAccount";
export const getIntegrationAccount: typeof import("./getIntegrationAccount").getIntegrationAccount = null as any;
export const getIntegrationAccountOutput: typeof import("./getIntegrationAccount").getIntegrationAccountOutput = null as any;
utilities.lazyLoad(exports, ["getIntegrationAccount","getIntegrationAccountOutput"], () => require("./getIntegrationAccount"));

export { GetStandardArgs, GetStandardResult, GetStandardOutputArgs } from "./getStandard";
export const getStandard: typeof import("./getStandard").getStandard = null as any;
export const getStandardOutput: typeof import("./getStandard").getStandardOutput = null as any;
utilities.lazyLoad(exports, ["getStandard","getStandardOutput"], () => require("./getStandard"));

export { GetWorkflowArgs, GetWorkflowResult, GetWorkflowOutputArgs } from "./getWorkflow";
export const getWorkflow: typeof import("./getWorkflow").getWorkflow = null as any;
export const getWorkflowOutput: typeof import("./getWorkflow").getWorkflowOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflow","getWorkflowOutput"], () => require("./getWorkflow"));

export { IntegrationAccountArgs, IntegrationAccountState } from "./integrationAccount";
export type IntegrationAccount = import("./integrationAccount").IntegrationAccount;
export const IntegrationAccount: typeof import("./integrationAccount").IntegrationAccount = null as any;
utilities.lazyLoad(exports, ["IntegrationAccount"], () => require("./integrationAccount"));

export { IntegrationAccountAgreementArgs, IntegrationAccountAgreementState } from "./integrationAccountAgreement";
export type IntegrationAccountAgreement = import("./integrationAccountAgreement").IntegrationAccountAgreement;
export const IntegrationAccountAgreement: typeof import("./integrationAccountAgreement").IntegrationAccountAgreement = null as any;
utilities.lazyLoad(exports, ["IntegrationAccountAgreement"], () => require("./integrationAccountAgreement"));

export { IntegrationAccountAssemblyArgs, IntegrationAccountAssemblyState } from "./integrationAccountAssembly";
export type IntegrationAccountAssembly = import("./integrationAccountAssembly").IntegrationAccountAssembly;
export const IntegrationAccountAssembly: typeof import("./integrationAccountAssembly").IntegrationAccountAssembly = null as any;
utilities.lazyLoad(exports, ["IntegrationAccountAssembly"], () => require("./integrationAccountAssembly"));

export { IntegrationAccountBatchConfigurationArgs, IntegrationAccountBatchConfigurationState } from "./integrationAccountBatchConfiguration";
export type IntegrationAccountBatchConfiguration = import("./integrationAccountBatchConfiguration").IntegrationAccountBatchConfiguration;
export const IntegrationAccountBatchConfiguration: typeof import("./integrationAccountBatchConfiguration").IntegrationAccountBatchConfiguration = null as any;
utilities.lazyLoad(exports, ["IntegrationAccountBatchConfiguration"], () => require("./integrationAccountBatchConfiguration"));

export { IntegrationAccountCertificateArgs, IntegrationAccountCertificateState } from "./integrationAccountCertificate";
export type IntegrationAccountCertificate = import("./integrationAccountCertificate").IntegrationAccountCertificate;
export const IntegrationAccountCertificate: typeof import("./integrationAccountCertificate").IntegrationAccountCertificate = null as any;
utilities.lazyLoad(exports, ["IntegrationAccountCertificate"], () => require("./integrationAccountCertificate"));

export { IntegrationAccountMapArgs, IntegrationAccountMapState } from "./integrationAccountMap";
export type IntegrationAccountMap = import("./integrationAccountMap").IntegrationAccountMap;
export const IntegrationAccountMap: typeof import("./integrationAccountMap").IntegrationAccountMap = null as any;
utilities.lazyLoad(exports, ["IntegrationAccountMap"], () => require("./integrationAccountMap"));

export { IntegrationAccountPartnerArgs, IntegrationAccountPartnerState } from "./integrationAccountPartner";
export type IntegrationAccountPartner = import("./integrationAccountPartner").IntegrationAccountPartner;
export const IntegrationAccountPartner: typeof import("./integrationAccountPartner").IntegrationAccountPartner = null as any;
utilities.lazyLoad(exports, ["IntegrationAccountPartner"], () => require("./integrationAccountPartner"));

export { IntegrationAccountSchemaArgs, IntegrationAccountSchemaState } from "./integrationAccountSchema";
export type IntegrationAccountSchema = import("./integrationAccountSchema").IntegrationAccountSchema;
export const IntegrationAccountSchema: typeof import("./integrationAccountSchema").IntegrationAccountSchema = null as any;
utilities.lazyLoad(exports, ["IntegrationAccountSchema"], () => require("./integrationAccountSchema"));

export { IntegrationAccountSessionArgs, IntegrationAccountSessionState } from "./integrationAccountSession";
export type IntegrationAccountSession = import("./integrationAccountSession").IntegrationAccountSession;
export const IntegrationAccountSession: typeof import("./integrationAccountSession").IntegrationAccountSession = null as any;
utilities.lazyLoad(exports, ["IntegrationAccountSession"], () => require("./integrationAccountSession"));

export { InterationServiceEnvironmentArgs, InterationServiceEnvironmentState } from "./interationServiceEnvironment";
export type InterationServiceEnvironment = import("./interationServiceEnvironment").InterationServiceEnvironment;
export const InterationServiceEnvironment: typeof import("./interationServiceEnvironment").InterationServiceEnvironment = null as any;
utilities.lazyLoad(exports, ["InterationServiceEnvironment"], () => require("./interationServiceEnvironment"));

export { StandardArgs, StandardState } from "./standard";
export type Standard = import("./standard").Standard;
export const Standard: typeof import("./standard").Standard = null as any;
utilities.lazyLoad(exports, ["Standard"], () => require("./standard"));

export { TriggerCustomArgs, TriggerCustomState } from "./triggerCustom";
export type TriggerCustom = import("./triggerCustom").TriggerCustom;
export const TriggerCustom: typeof import("./triggerCustom").TriggerCustom = null as any;
utilities.lazyLoad(exports, ["TriggerCustom"], () => require("./triggerCustom"));

export { TriggerHttpRequestArgs, TriggerHttpRequestState } from "./triggerHttpRequest";
export type TriggerHttpRequest = import("./triggerHttpRequest").TriggerHttpRequest;
export const TriggerHttpRequest: typeof import("./triggerHttpRequest").TriggerHttpRequest = null as any;
utilities.lazyLoad(exports, ["TriggerHttpRequest"], () => require("./triggerHttpRequest"));

export { TriggerRecurrenceArgs, TriggerRecurrenceState } from "./triggerRecurrence";
export type TriggerRecurrence = import("./triggerRecurrence").TriggerRecurrence;
export const TriggerRecurrence: typeof import("./triggerRecurrence").TriggerRecurrence = null as any;
utilities.lazyLoad(exports, ["TriggerRecurrence"], () => require("./triggerRecurrence"));

export { WorkflowArgs, WorkflowState } from "./workflow";
export type Workflow = import("./workflow").Workflow;
export const Workflow: typeof import("./workflow").Workflow = null as any;
utilities.lazyLoad(exports, ["Workflow"], () => require("./workflow"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:logicapps/actionCustom:ActionCustom":
                return new ActionCustom(name, <any>undefined, { urn })
            case "azure:logicapps/actionHttp:ActionHttp":
                return new ActionHttp(name, <any>undefined, { urn })
            case "azure:logicapps/integrationAccount:IntegrationAccount":
                return new IntegrationAccount(name, <any>undefined, { urn })
            case "azure:logicapps/integrationAccountAgreement:IntegrationAccountAgreement":
                return new IntegrationAccountAgreement(name, <any>undefined, { urn })
            case "azure:logicapps/integrationAccountAssembly:IntegrationAccountAssembly":
                return new IntegrationAccountAssembly(name, <any>undefined, { urn })
            case "azure:logicapps/integrationAccountBatchConfiguration:IntegrationAccountBatchConfiguration":
                return new IntegrationAccountBatchConfiguration(name, <any>undefined, { urn })
            case "azure:logicapps/integrationAccountCertificate:IntegrationAccountCertificate":
                return new IntegrationAccountCertificate(name, <any>undefined, { urn })
            case "azure:logicapps/integrationAccountMap:IntegrationAccountMap":
                return new IntegrationAccountMap(name, <any>undefined, { urn })
            case "azure:logicapps/integrationAccountPartner:IntegrationAccountPartner":
                return new IntegrationAccountPartner(name, <any>undefined, { urn })
            case "azure:logicapps/integrationAccountSchema:IntegrationAccountSchema":
                return new IntegrationAccountSchema(name, <any>undefined, { urn })
            case "azure:logicapps/integrationAccountSession:IntegrationAccountSession":
                return new IntegrationAccountSession(name, <any>undefined, { urn })
            case "azure:logicapps/interationServiceEnvironment:InterationServiceEnvironment":
                return new InterationServiceEnvironment(name, <any>undefined, { urn })
            case "azure:logicapps/standard:Standard":
                return new Standard(name, <any>undefined, { urn })
            case "azure:logicapps/triggerCustom:TriggerCustom":
                return new TriggerCustom(name, <any>undefined, { urn })
            case "azure:logicapps/triggerHttpRequest:TriggerHttpRequest":
                return new TriggerHttpRequest(name, <any>undefined, { urn })
            case "azure:logicapps/triggerRecurrence:TriggerRecurrence":
                return new TriggerRecurrence(name, <any>undefined, { urn })
            case "azure:logicapps/workflow:Workflow":
                return new Workflow(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "logicapps/actionCustom", _module)
pulumi.runtime.registerResourceModule("azure", "logicapps/actionHttp", _module)
pulumi.runtime.registerResourceModule("azure", "logicapps/integrationAccount", _module)
pulumi.runtime.registerResourceModule("azure", "logicapps/integrationAccountAgreement", _module)
pulumi.runtime.registerResourceModule("azure", "logicapps/integrationAccountAssembly", _module)
pulumi.runtime.registerResourceModule("azure", "logicapps/integrationAccountBatchConfiguration", _module)
pulumi.runtime.registerResourceModule("azure", "logicapps/integrationAccountCertificate", _module)
pulumi.runtime.registerResourceModule("azure", "logicapps/integrationAccountMap", _module)
pulumi.runtime.registerResourceModule("azure", "logicapps/integrationAccountPartner", _module)
pulumi.runtime.registerResourceModule("azure", "logicapps/integrationAccountSchema", _module)
pulumi.runtime.registerResourceModule("azure", "logicapps/integrationAccountSession", _module)
pulumi.runtime.registerResourceModule("azure", "logicapps/interationServiceEnvironment", _module)
pulumi.runtime.registerResourceModule("azure", "logicapps/standard", _module)
pulumi.runtime.registerResourceModule("azure", "logicapps/triggerCustom", _module)
pulumi.runtime.registerResourceModule("azure", "logicapps/triggerHttpRequest", _module)
pulumi.runtime.registerResourceModule("azure", "logicapps/triggerRecurrence", _module)
pulumi.runtime.registerResourceModule("azure", "logicapps/workflow", _module)
