// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Logic App Integration Account Assembly.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as std from "@pulumi/std";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleIntegrationAccount = new azure.logicapps.IntegrationAccount("example", {
 *     name: "example-ia",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     skuName: "Basic",
 * });
 * const exampleIntegrationAccountAssembly = new azure.logicapps.IntegrationAccountAssembly("example", {
 *     name: "example-assembly",
 *     resourceGroupName: example.name,
 *     integrationAccountName: exampleIntegrationAccount.name,
 *     assemblyName: "TestAssembly",
 *     content: std.filebase64({
 *         input: "testdata/log4net.dll",
 *     }).then(invoke => invoke.result),
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Logic` - 2019-05-01
 *
 * ## Import
 *
 * Logic App Integration Account Assemblies can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:logicapps/integrationAccountAssembly:IntegrationAccountAssembly example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Logic/integrationAccounts/account1/assemblies/assembly1
 * ```
 */
export class IntegrationAccountAssembly extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationAccountAssembly resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationAccountAssemblyState, opts?: pulumi.CustomResourceOptions): IntegrationAccountAssembly {
        return new IntegrationAccountAssembly(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:logicapps/integrationAccountAssembly:IntegrationAccountAssembly';

    /**
     * Returns true if the given object is an instance of IntegrationAccountAssembly.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationAccountAssembly {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationAccountAssembly.__pulumiType;
    }

    /**
     * The name of the Logic App Integration Account Assembly.
     */
    declare public readonly assemblyName: pulumi.Output<string>;
    /**
     * The version of the Logic App Integration Account Assembly. Defaults to `0.0.0.0`.
     */
    declare public readonly assemblyVersion: pulumi.Output<string | undefined>;
    /**
     * The content of the Logic App Integration Account Assembly.
     */
    declare public readonly content: pulumi.Output<string | undefined>;
    /**
     * The content link URI of the Logic App Integration Account Assembly.
     */
    declare public readonly contentLinkUri: pulumi.Output<string | undefined>;
    /**
     * The name of the Logic App Integration Account. Changing this forces a new resource to be created.
     */
    declare public readonly integrationAccountName: pulumi.Output<string>;
    /**
     * The metadata of the Logic App Integration Account Assembly.
     */
    declare public readonly metadata: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name which should be used for this Logic App Integration Account Assembly Artifact. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The name of the Resource Group where the Logic App Integration Account Assembly Artifact should exist. Changing this forces a new resource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;

    /**
     * Create a IntegrationAccountAssembly resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationAccountAssemblyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationAccountAssemblyArgs | IntegrationAccountAssemblyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationAccountAssemblyState | undefined;
            resourceInputs["assemblyName"] = state?.assemblyName;
            resourceInputs["assemblyVersion"] = state?.assemblyVersion;
            resourceInputs["content"] = state?.content;
            resourceInputs["contentLinkUri"] = state?.contentLinkUri;
            resourceInputs["integrationAccountName"] = state?.integrationAccountName;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["name"] = state?.name;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
        } else {
            const args = argsOrState as IntegrationAccountAssemblyArgs | undefined;
            if (args?.assemblyName === undefined && !opts.urn) {
                throw new Error("Missing required property 'assemblyName'");
            }
            if (args?.integrationAccountName === undefined && !opts.urn) {
                throw new Error("Missing required property 'integrationAccountName'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["assemblyName"] = args?.assemblyName;
            resourceInputs["assemblyVersion"] = args?.assemblyVersion;
            resourceInputs["content"] = args?.content;
            resourceInputs["contentLinkUri"] = args?.contentLinkUri;
            resourceInputs["integrationAccountName"] = args?.integrationAccountName;
            resourceInputs["metadata"] = args?.metadata;
            resourceInputs["name"] = args?.name;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IntegrationAccountAssembly.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IntegrationAccountAssembly resources.
 */
export interface IntegrationAccountAssemblyState {
    /**
     * The name of the Logic App Integration Account Assembly.
     */
    assemblyName?: pulumi.Input<string>;
    /**
     * The version of the Logic App Integration Account Assembly. Defaults to `0.0.0.0`.
     */
    assemblyVersion?: pulumi.Input<string>;
    /**
     * The content of the Logic App Integration Account Assembly.
     */
    content?: pulumi.Input<string>;
    /**
     * The content link URI of the Logic App Integration Account Assembly.
     */
    contentLinkUri?: pulumi.Input<string>;
    /**
     * The name of the Logic App Integration Account. Changing this forces a new resource to be created.
     */
    integrationAccountName?: pulumi.Input<string>;
    /**
     * The metadata of the Logic App Integration Account Assembly.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name which should be used for this Logic App Integration Account Assembly Artifact. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Logic App Integration Account Assembly Artifact should exist. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IntegrationAccountAssembly resource.
 */
export interface IntegrationAccountAssemblyArgs {
    /**
     * The name of the Logic App Integration Account Assembly.
     */
    assemblyName: pulumi.Input<string>;
    /**
     * The version of the Logic App Integration Account Assembly. Defaults to `0.0.0.0`.
     */
    assemblyVersion?: pulumi.Input<string>;
    /**
     * The content of the Logic App Integration Account Assembly.
     */
    content?: pulumi.Input<string>;
    /**
     * The content link URI of the Logic App Integration Account Assembly.
     */
    contentLinkUri?: pulumi.Input<string>;
    /**
     * The name of the Logic App Integration Account. Changing this forces a new resource to be created.
     */
    integrationAccountName: pulumi.Input<string>;
    /**
     * The metadata of the Logic App Integration Account Assembly.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name which should be used for this Logic App Integration Account Assembly Artifact. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Logic App Integration Account Assembly Artifact should exist. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
}
