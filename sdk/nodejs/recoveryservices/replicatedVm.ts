// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Azure recovery replicated vms (Azure to Azure). An replicated VM keeps a copiously updated image of the vm in another region in order to be able to start the VM in that region in case of a disaster. 
 * 
 * ## Example Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * 
 * const primaryResourceGroup = new azure.core.ResourceGroup("primary", {
 *     location: "West US",
 *     name: "tfex-replicated-vm-primary",
 * });
 * const secondaryResourceGroup = new azure.core.ResourceGroup("secondary", {
 *     location: "East US",
 *     name: "tfex-replicated-vm-secondary",
 * });
 * const primaryVirtualNetwork = new azure.network.VirtualNetwork("primary", {
 *     addressSpaces: ["192.168.1.0/24"],
 *     location: primaryResourceGroup.location,
 *     name: "network1",
 *     resourceGroupName: primaryResourceGroup.name,
 * });
 * const primarySubnet = new azure.network.Subnet("primary", {
 *     addressPrefix: "192.168.1.0/24",
 *     name: "network1-subnet",
 *     resourceGroupName: primaryResourceGroup.name,
 *     virtualNetworkName: primaryVirtualNetwork.name,
 * });
 * const vmNetworkInterface = new azure.network.NetworkInterface("vm", {
 *     ipConfigurations: [{
 *         name: "vm",
 *         privateIpAddressAllocation: "Dynamic",
 *         subnetId: primarySubnet.id,
 *     }],
 *     location: primaryResourceGroup.location,
 *     name: "vm-nic",
 *     resourceGroupName: primaryResourceGroup.name,
 * });
 * const vmVirtualMachine = new azure.compute.VirtualMachine("vm", {
 *     location: primaryResourceGroup.location,
 *     name: "vm",
 *     networkInterfaceIds: [vmNetworkInterface.id],
 *     osProfile: {
 *         adminPassword: "test-pwd-123",
 *         adminUsername: "test-admin-123",
 *         computerName: "vm",
 *     },
 *     osProfileLinuxConfig: {
 *         disablePasswordAuthentication: false,
 *     },
 *     resourceGroupName: primaryResourceGroup.name,
 *     storageImageReference: {
 *         offer: "CentOS",
 *         publisher: "OpenLogic",
 *         sku: "7.5",
 *         version: "latest",
 *     },
 *     storageOsDisk: {
 *         caching: "ReadWrite",
 *         createOption: "FromImage",
 *         managedDiskType: "Premium_LRS",
 *         name: "vm-os-disk",
 *         osType: "Linux",
 *     },
 *     vmSize: "Standard_B1s",
 * });
 * const vault = new azure.recoveryservices.Vault("vault", {
 *     location: secondaryResourceGroup.location,
 *     name: "example-recovery-vault",
 *     resourceGroupName: secondaryResourceGroup.name,
 *     sku: "Standard",
 * });
 * const primaryFabric = new azure.recoveryservices.Fabric("primary", {
 *     location: primaryResourceGroup.location,
 *     name: "primary-fabric",
 *     recoveryVaultName: vault.name,
 *     resourceGroupName: secondaryResourceGroup.name,
 * });
 * const secondaryFabric = new azure.recoveryservices.Fabric("secondary", {
 *     location: secondaryResourceGroup.location,
 *     name: "secondary-fabric",
 *     recoveryVaultName: vault.name,
 *     resourceGroupName: secondaryResourceGroup.name,
 * });
 * const primaryProtectionContainer = new azure.recoveryservices.ProtectionContainer("primary", {
 *     name: "primary-protection-container",
 *     recoveryFabricName: primaryFabric.name,
 *     recoveryVaultName: vault.name,
 *     resourceGroupName: secondaryResourceGroup.name,
 * });
 * const secondaryProtectionContainer = new azure.recoveryservices.ProtectionContainer("secondary", {
 *     name: "secondary-protection-container",
 *     recoveryFabricName: secondaryFabric.name,
 *     recoveryVaultName: vault.name,
 *     resourceGroupName: secondaryResourceGroup.name,
 * });
 * const policy = new azure.recoveryservices.ReplicationPolicy("policy", {
 *     applicationConsistentSnapshotFrequencyInMinutes: (4 * 60),
 *     name: "policy",
 *     recoveryPointRetentionInMinutes: (24 * 60),
 *     recoveryVaultName: vault.name,
 *     resourceGroupName: secondaryResourceGroup.name,
 * });
 * const containerMapping = new azure.recoveryservices.ProtectionContainerMapping("container-mapping", {
 *     name: "container-mapping",
 *     recoveryFabricName: primaryFabric.name,
 *     recoveryReplicationPolicyId: policy.id,
 *     recoverySourceProtectionContainerName: primaryProtectionContainer.name,
 *     recoveryTargetProtectionContainerId: secondaryProtectionContainer.id,
 *     recoveryVaultName: vault.name,
 *     resourceGroupName: secondaryResourceGroup.name,
 * });
 * const primaryAccount = new azure.storage.Account("primary", {
 *     accountReplicationType: "LRS",
 *     accountTier: "Standard",
 *     location: primaryResourceGroup.location,
 *     name: "primaryrecoverycache",
 *     resourceGroupName: primaryResourceGroup.name,
 * });
 * const vmReplication = new azure.recoveryservices.ReplicatedVm("vm-replication", {
 *     managedDisks: [{
 *         diskId: vmVirtualMachine.storageOsDisk.managedDiskId!,
 *         stagingStorageAccountId: primaryAccount.id,
 *         targetDiskType: "Premium_LRS",
 *         targetReplicaDiskType: "Premium_LRS",
 *         targetResourceGroupId: secondaryResourceGroup.id,
 *     }],
 *     name: "vm-replication",
 *     recoveryReplicationPolicyId: policy.id,
 *     recoveryVaultName: vault.name,
 *     resourceGroupName: secondaryResourceGroup.name,
 *     sourceRecoveryFabricName: primaryFabric.name,
 *     sourceRecoveryProtectionContainerName: primaryProtectionContainer.name,
 *     sourceVmId: vmVirtualMachine.id,
 *     targetRecoveryFabricId: secondaryFabric.id,
 *     targetRecoveryProtectionContainerId: secondaryProtectionContainer.id,
 *     targetResourceGroupId: secondaryResourceGroup.id,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/recovery_replicated_vm.html.markdown.
 */
export class ReplicatedVm extends pulumi.CustomResource {
    /**
     * Get an existing ReplicatedVm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReplicatedVmState, opts?: pulumi.CustomResourceOptions): ReplicatedVm {
        return new ReplicatedVm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:recoveryservices/replicatedVm:ReplicatedVm';

    /**
     * Returns true if the given object is an instance of ReplicatedVm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ReplicatedVm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReplicatedVm.__pulumiType;
    }

    /**
     * One or more `managedDisk` block.
     */
    public readonly managedDisks!: pulumi.Output<outputs.recoveryservices.ReplicatedVmManagedDisk[] | undefined>;
    /**
     * The name of the network mapping.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly recoveryReplicationPolicyId!: pulumi.Output<string>;
    /**
     * The name of the vault that should be updated.
     */
    public readonly recoveryVaultName!: pulumi.Output<string>;
    /**
     * Name of the resource group where the vault that should be updated is located.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * Name of fabric that should contains this replication.
     */
    public readonly sourceRecoveryFabricName!: pulumi.Output<string>;
    /**
     * Name of the protection container to use.
     */
    public readonly sourceRecoveryProtectionContainerName!: pulumi.Output<string>;
    /**
     * Id of the VM to replicate
     */
    public readonly sourceVmId!: pulumi.Output<string>;
    /**
     * Id of availability set that the new VM should belong to when a failover is done.
     */
    public readonly targetAvailabilitySetId!: pulumi.Output<string | undefined>;
    /**
     * Id of fabric where the VM replication should be handled when a failover is done.
     */
    public readonly targetRecoveryFabricId!: pulumi.Output<string>;
    /**
     * Id of protection container where the VM replication should be created when a failover is done.
     */
    public readonly targetRecoveryProtectionContainerId!: pulumi.Output<string>;
    /**
     * Id of resource group where the VM should be created when a failover is done.
     */
    public readonly targetResourceGroupId!: pulumi.Output<string>;

    /**
     * Create a ReplicatedVm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReplicatedVmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReplicatedVmArgs | ReplicatedVmState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ReplicatedVmState | undefined;
            inputs["managedDisks"] = state ? state.managedDisks : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["recoveryReplicationPolicyId"] = state ? state.recoveryReplicationPolicyId : undefined;
            inputs["recoveryVaultName"] = state ? state.recoveryVaultName : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["sourceRecoveryFabricName"] = state ? state.sourceRecoveryFabricName : undefined;
            inputs["sourceRecoveryProtectionContainerName"] = state ? state.sourceRecoveryProtectionContainerName : undefined;
            inputs["sourceVmId"] = state ? state.sourceVmId : undefined;
            inputs["targetAvailabilitySetId"] = state ? state.targetAvailabilitySetId : undefined;
            inputs["targetRecoveryFabricId"] = state ? state.targetRecoveryFabricId : undefined;
            inputs["targetRecoveryProtectionContainerId"] = state ? state.targetRecoveryProtectionContainerId : undefined;
            inputs["targetResourceGroupId"] = state ? state.targetResourceGroupId : undefined;
        } else {
            const args = argsOrState as ReplicatedVmArgs | undefined;
            if (!args || args.recoveryReplicationPolicyId === undefined) {
                throw new Error("Missing required property 'recoveryReplicationPolicyId'");
            }
            if (!args || args.recoveryVaultName === undefined) {
                throw new Error("Missing required property 'recoveryVaultName'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.sourceRecoveryFabricName === undefined) {
                throw new Error("Missing required property 'sourceRecoveryFabricName'");
            }
            if (!args || args.sourceRecoveryProtectionContainerName === undefined) {
                throw new Error("Missing required property 'sourceRecoveryProtectionContainerName'");
            }
            if (!args || args.sourceVmId === undefined) {
                throw new Error("Missing required property 'sourceVmId'");
            }
            if (!args || args.targetRecoveryFabricId === undefined) {
                throw new Error("Missing required property 'targetRecoveryFabricId'");
            }
            if (!args || args.targetRecoveryProtectionContainerId === undefined) {
                throw new Error("Missing required property 'targetRecoveryProtectionContainerId'");
            }
            if (!args || args.targetResourceGroupId === undefined) {
                throw new Error("Missing required property 'targetResourceGroupId'");
            }
            inputs["managedDisks"] = args ? args.managedDisks : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["recoveryReplicationPolicyId"] = args ? args.recoveryReplicationPolicyId : undefined;
            inputs["recoveryVaultName"] = args ? args.recoveryVaultName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["sourceRecoveryFabricName"] = args ? args.sourceRecoveryFabricName : undefined;
            inputs["sourceRecoveryProtectionContainerName"] = args ? args.sourceRecoveryProtectionContainerName : undefined;
            inputs["sourceVmId"] = args ? args.sourceVmId : undefined;
            inputs["targetAvailabilitySetId"] = args ? args.targetAvailabilitySetId : undefined;
            inputs["targetRecoveryFabricId"] = args ? args.targetRecoveryFabricId : undefined;
            inputs["targetRecoveryProtectionContainerId"] = args ? args.targetRecoveryProtectionContainerId : undefined;
            inputs["targetResourceGroupId"] = args ? args.targetResourceGroupId : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ReplicatedVm.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ReplicatedVm resources.
 */
export interface ReplicatedVmState {
    /**
     * One or more `managedDisk` block.
     */
    readonly managedDisks?: pulumi.Input<pulumi.Input<inputs.recoveryservices.ReplicatedVmManagedDisk>[]>;
    /**
     * The name of the network mapping.
     */
    readonly name?: pulumi.Input<string>;
    readonly recoveryReplicationPolicyId?: pulumi.Input<string>;
    /**
     * The name of the vault that should be updated.
     */
    readonly recoveryVaultName?: pulumi.Input<string>;
    /**
     * Name of the resource group where the vault that should be updated is located.
     */
    readonly resourceGroupName?: pulumi.Input<string>;
    /**
     * Name of fabric that should contains this replication.
     */
    readonly sourceRecoveryFabricName?: pulumi.Input<string>;
    /**
     * Name of the protection container to use.
     */
    readonly sourceRecoveryProtectionContainerName?: pulumi.Input<string>;
    /**
     * Id of the VM to replicate
     */
    readonly sourceVmId?: pulumi.Input<string>;
    /**
     * Id of availability set that the new VM should belong to when a failover is done.
     */
    readonly targetAvailabilitySetId?: pulumi.Input<string>;
    /**
     * Id of fabric where the VM replication should be handled when a failover is done.
     */
    readonly targetRecoveryFabricId?: pulumi.Input<string>;
    /**
     * Id of protection container where the VM replication should be created when a failover is done.
     */
    readonly targetRecoveryProtectionContainerId?: pulumi.Input<string>;
    /**
     * Id of resource group where the VM should be created when a failover is done.
     */
    readonly targetResourceGroupId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ReplicatedVm resource.
 */
export interface ReplicatedVmArgs {
    /**
     * One or more `managedDisk` block.
     */
    readonly managedDisks?: pulumi.Input<pulumi.Input<inputs.recoveryservices.ReplicatedVmManagedDisk>[]>;
    /**
     * The name of the network mapping.
     */
    readonly name?: pulumi.Input<string>;
    readonly recoveryReplicationPolicyId: pulumi.Input<string>;
    /**
     * The name of the vault that should be updated.
     */
    readonly recoveryVaultName: pulumi.Input<string>;
    /**
     * Name of the resource group where the vault that should be updated is located.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * Name of fabric that should contains this replication.
     */
    readonly sourceRecoveryFabricName: pulumi.Input<string>;
    /**
     * Name of the protection container to use.
     */
    readonly sourceRecoveryProtectionContainerName: pulumi.Input<string>;
    /**
     * Id of the VM to replicate
     */
    readonly sourceVmId: pulumi.Input<string>;
    /**
     * Id of availability set that the new VM should belong to when a failover is done.
     */
    readonly targetAvailabilitySetId?: pulumi.Input<string>;
    /**
     * Id of fabric where the VM replication should be handled when a failover is done.
     */
    readonly targetRecoveryFabricId: pulumi.Input<string>;
    /**
     * Id of protection container where the VM replication should be created when a failover is done.
     */
    readonly targetRecoveryProtectionContainerId: pulumi.Input<string>;
    /**
     * Id of resource group where the VM should be created when a failover is done.
     */
    readonly targetResourceGroupId: pulumi.Input<string>;
}
