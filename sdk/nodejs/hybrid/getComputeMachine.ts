// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to access information about an existing Hybrid Compute.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.hybrid.getComputeMachine({
 *     name: "existing-hcmachine",
 *     resourceGroupName: "existing-rg",
 * });
 * export const id = example.then(example => example.id);
 * ```
 */
export function getComputeMachine(args: GetComputeMachineArgs, opts?: pulumi.InvokeOptions): Promise<GetComputeMachineResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure:hybrid/getComputeMachine:getComputeMachine", {
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

/**
 * A collection of arguments for invoking getComputeMachine.
 */
export interface GetComputeMachineArgs {
    /**
     * The name of this hybrid compute machine.
     */
    name: string;
    /**
     * The name of the Resource Group where the Hybrid Compute exists.
     */
    resourceGroupName: string;
}

/**
 * A collection of values returned by getComputeMachine.
 */
export interface GetComputeMachineResult {
    /**
     * Specifies the AD fully qualified display name.
     */
    readonly adFqdn: string;
    /**
     * A `agentConfiguration` block as defined below.
     */
    readonly agentConfigurations: outputs.hybrid.GetComputeMachineAgentConfiguration[];
    /**
     * The hybrid machine agent full version.
     */
    readonly agentVersion: string;
    /**
     * Public Key that the client provides to be used during initial resource onboarding.
     */
    readonly clientPublicKey: string;
    /**
     * A `cloudMetadata` block as defined below.
     */
    readonly cloudMetadatas: outputs.hybrid.GetComputeMachineCloudMetadata[];
    /**
     * A `detectedProperties` block as defined below.
     */
    readonly detectedProperties: {[key: string]: string};
    /**
     * Specifies the hybrid machine display name.
     */
    readonly displayName: string;
    /**
     * Specifies the DNS fully qualified display name.
     */
    readonly dnsFqdn: string;
    /**
     * Specifies the Windows domain name.
     */
    readonly domainName: string;
    /**
     * A `errorDetails` block as defined below.
     */
    readonly errorDetails: outputs.hybrid.GetComputeMachineErrorDetail[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A `identity` block as defined below.
     */
    readonly identities: outputs.hybrid.GetComputeMachineIdentity[];
    /**
     * The time of the last status change.
     */
    readonly lastStatusChange: string;
    /**
     * The Azure Region where the hybrid compute machine exists.
     */
    readonly location: string;
    /**
     * A `locationData` block as defined below.
     */
    readonly locationDatas: outputs.hybrid.GetComputeMachineLocationData[];
    /**
     * Specifies the hybrid machine fully qualified display name.
     */
    readonly machineFqdn: string;
    /**
     * Specifies whether any MS SQL instance is discovered on the machine.
     */
    readonly mssqlDiscovered: boolean;
    /**
     * A canonical name for the geographic or physical location.
     */
    readonly name: string;
    /**
     * The Operating System running on the hybrid machine.
     */
    readonly osName: string;
    /**
     * A `osProfile` block as defined below.
     */
    readonly osProfiles: outputs.hybrid.GetComputeMachineOsProfile[];
    /**
     * Specifies the Operating System product SKU.
     */
    readonly osSku: string;
    /**
     * The type of Operating System. Possible values are `windows` and `linux`.
     */
    readonly osType: string;
    /**
     * The version of Operating System running on the hybrid machine.
     */
    readonly osVersion: string;
    /**
     * The resource id of the parent cluster (Azure HCI) this machine is assigned to, if any.
     */
    readonly parentClusterResourceId: string;
    /**
     * The resource id of the parent cluster (Azure HCI) this machine is assigned to, if any.
     */
    readonly privateLinkScopeResourceId: string;
    readonly resourceGroupName: string;
    /**
     * A `serviceStatus` block as defined below.
     */
    readonly serviceStatuses: outputs.hybrid.GetComputeMachineServiceStatus[];
    /**
     * The current status of the service.
     */
    readonly status: string;
    /**
     * A mapping of tags assigned to the Hybrid Compute.
     */
    readonly tags: {[key: string]: string};
    /**
     * Specifies the hybrid machine unique ID.
     */
    readonly vmId: string;
    /**
     * Specifies the Arc Machine's unique SMBIOS ID.
     */
    readonly vmUuid: string;
}
/**
 * Use this data source to access information about an existing Hybrid Compute.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.hybrid.getComputeMachine({
 *     name: "existing-hcmachine",
 *     resourceGroupName: "existing-rg",
 * });
 * export const id = example.then(example => example.id);
 * ```
 */
export function getComputeMachineOutput(args: GetComputeMachineOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetComputeMachineResult> {
    return pulumi.output(args).apply((a: any) => getComputeMachine(a, opts))
}

/**
 * A collection of arguments for invoking getComputeMachine.
 */
export interface GetComputeMachineOutputArgs {
    /**
     * The name of this hybrid compute machine.
     */
    name: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Hybrid Compute exists.
     */
    resourceGroupName: pulumi.Input<string>;
}
