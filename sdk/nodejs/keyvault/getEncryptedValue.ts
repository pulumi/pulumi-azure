// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Encrypts or Decrypts a value using a Key Vault Key.
 */
export function getEncryptedValue(args: GetEncryptedValueArgs, opts?: pulumi.InvokeOptions): Promise<GetEncryptedValueResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("azure:keyvault/getEncryptedValue:getEncryptedValue", {
        "algorithm": args.algorithm,
        "encryptedData": args.encryptedData,
        "keyVaultKeyId": args.keyVaultKeyId,
        "plainTextValue": args.plainTextValue,
    }, opts);
}

/**
 * A collection of arguments for invoking getEncryptedValue.
 */
export interface GetEncryptedValueArgs {
    /**
     * The Algorithm which should be used to Decrypt/Encrypt this Value. Possible values are `RSA1_5`, `RSA-OAEP` and `RSA-OAEP-256`.
     */
    algorithm: string;
    /**
     * The Base64 URL Encoded Encrypted Data which should be decrypted into `plainTextValue`.
     */
    encryptedData?: string;
    /**
     * The ID of the Key Vault Key which should be used to Decrypt/Encrypt this Value.
     */
    keyVaultKeyId: string;
    /**
     * The plain-text value which should be Encrypted into `encryptedData`.
     */
    plainTextValue?: string;
}

/**
 * A collection of values returned by getEncryptedValue.
 */
export interface GetEncryptedValueResult {
    readonly algorithm: string;
    readonly encryptedData?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly keyVaultKeyId: string;
    readonly plainTextValue?: string;
}

export function getEncryptedValueOutput(args: GetEncryptedValueOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEncryptedValueResult> {
    return pulumi.output(args).apply(a => getEncryptedValue(a, opts))
}

/**
 * A collection of arguments for invoking getEncryptedValue.
 */
export interface GetEncryptedValueOutputArgs {
    /**
     * The Algorithm which should be used to Decrypt/Encrypt this Value. Possible values are `RSA1_5`, `RSA-OAEP` and `RSA-OAEP-256`.
     */
    algorithm: pulumi.Input<string>;
    /**
     * The Base64 URL Encoded Encrypted Data which should be decrypted into `plainTextValue`.
     */
    encryptedData?: pulumi.Input<string>;
    /**
     * The ID of the Key Vault Key which should be used to Decrypt/Encrypt this Value.
     */
    keyVaultKeyId: pulumi.Input<string>;
    /**
     * The plain-text value which should be Encrypted into `encryptedData`.
     */
    plainTextValue?: pulumi.Input<string>;
}
