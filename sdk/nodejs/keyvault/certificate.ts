// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Key Vault Certificate.
 *
 * <<<<<<< HEAD
 * > **Note:** The Azure Provider includes a Feature Toggle which will purge a Key Vault Certificate resource on destroy, rather than the default soft-delete. See `purgeSoftDeletedCertificatesOnDestroy` for more information.
 *
 * =======
 * > > > > > > > 8d78c87098 (Update-documentation)
 * ## Example Usage
 * ### Importing A PFX)
 *
 * > **Note:** this example assumed the PFX file is located in the same directory at `certificate-to-import.pfx`.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as fs from "fs";
 *
 * const current = azure.core.getClientConfig({});
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleKeyVault = new azure.keyvault.KeyVault("exampleKeyVault", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "premium",
 *     accessPolicies: [{
 *         tenantId: current.then(current => current.tenantId),
 *         objectId: current.then(current => current.objectId),
 *         certificatePermissions: [
 *             "Create",
 *             "Delete",
 *             "DeleteIssuers",
 *             "Get",
 *             "GetIssuers",
 *             "Import",
 *             "List",
 *             "ListIssuers",
 *             "ManageContacts",
 *             "ManageIssuers",
 *             "SetIssuers",
 *             "Update",
 *         ],
 *         keyPermissions: [
 *             "Backup",
 *             "Create",
 *             "Decrypt",
 *             "Delete",
 *             "Encrypt",
 *             "Get",
 *             "Import",
 *             "List",
 *             "Purge",
 *             "Recover",
 *             "Restore",
 *             "Sign",
 *             "UnwrapKey",
 *             "Update",
 *             "Verify",
 *             "WrapKey",
 *         ],
 *         secretPermissions: [
 *             "Backup",
 *             "Delete",
 *             "Get",
 *             "List",
 *             "Purge",
 *             "Recover",
 *             "Restore",
 *             "Set",
 *         ],
 *     }],
 * });
 * const exampleCertificate = new azure.keyvault.Certificate("exampleCertificate", {
 *     keyVaultId: exampleKeyVault.id,
 *     certificate: {
 *         contents: fs.readFileSync("certificate-to-import.pfx", { encoding: "base64" }),
 *         password: "",
 *     },
 * });
 * ```
 * ### Generating a new certificate
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleKeyVault = new azure.keyvault.KeyVault("exampleKeyVault", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "standard",
 *     softDeleteRetentionDays: 7,
 *     accessPolicies: [{
 *         tenantId: current.then(current => current.tenantId),
 *         objectId: current.then(current => current.objectId),
 *         certificatePermissions: [
 *             "Create",
 *             "Delete",
 *             "DeleteIssuers",
 *             "Get",
 *             "GetIssuers",
 *             "Import",
 *             "List",
 *             "ListIssuers",
 *             "ManageContacts",
 *             "ManageIssuers",
 *             "Purge",
 *             "SetIssuers",
 *             "Update",
 *         ],
 *         keyPermissions: [
 *             "Backup",
 *             "Create",
 *             "Decrypt",
 *             "Delete",
 *             "Encrypt",
 *             "Get",
 *             "Import",
 *             "List",
 *             "Purge",
 *             "Recover",
 *             "Restore",
 *             "Sign",
 *             "UnwrapKey",
 *             "Update",
 *             "Verify",
 *             "WrapKey",
 *         ],
 *         secretPermissions: [
 *             "Backup",
 *             "Delete",
 *             "Get",
 *             "List",
 *             "Purge",
 *             "Recover",
 *             "Restore",
 *             "Set",
 *         ],
 *     }],
 * });
 * const exampleCertificate = new azure.keyvault.Certificate("exampleCertificate", {
 *     keyVaultId: exampleKeyVault.id,
 *     certificatePolicy: {
 *         issuerParameters: {
 *             name: "Self",
 *         },
 *         keyProperties: {
 *             exportable: true,
 *             keySize: 2048,
 *             keyType: "RSA",
 *             reuseKey: true,
 *         },
 *         lifetimeActions: [{
 *             action: {
 *                 actionType: "AutoRenew",
 *             },
 *             trigger: {
 *                 daysBeforeExpiry: 30,
 *             },
 *         }],
 *         secretProperties: {
 *             contentType: "application/x-pkcs12",
 *         },
 *         x509CertificateProperties: {
 *             extendedKeyUsages: ["1.3.6.1.5.5.7.3.1"],
 *             keyUsages: [
 *                 "cRLSign",
 *                 "dataEncipherment",
 *                 "digitalSignature",
 *                 "keyAgreement",
 *                 "keyCertSign",
 *                 "keyEncipherment",
 *             ],
 *             subjectAlternativeNames: {
 *                 dnsNames: [
 *                     "internal.contoso.com",
 *                     "domain.hello.world",
 *                 ],
 *             },
 *             subject: "CN=hello-world",
 *             validityInMonths: 12,
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Key Vault Certificates can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:keyvault/certificate:Certificate example "https://example-keyvault.vault.azure.net/certificates/example/fdf067c93bbb4b22bff4d8b7a9a56217"
 * ```
 */
export class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateState, opts?: pulumi.CustomResourceOptions): Certificate {
        return new Certificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:keyvault/certificate:Certificate';

    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }

    /**
     * A `certificate` block as defined below, used to Import an existing certificate. Changing this will create a new version of the Key Vault Certificate.
     */
    public readonly certificate!: pulumi.Output<outputs.keyvault.CertificateCertificate | undefined>;
    /**
     * A `certificateAttribute` block as defined below.
     */
    public /*out*/ readonly certificateAttributes!: pulumi.Output<outputs.keyvault.CertificateCertificateAttribute[]>;
    /**
     * The raw Key Vault Certificate data represented as a hexadecimal string.
     */
    public /*out*/ readonly certificateData!: pulumi.Output<string>;
    /**
     * The Base64 encoded Key Vault Certificate data.
     */
    public /*out*/ readonly certificateDataBase64!: pulumi.Output<string>;
    /**
     * A `certificatePolicy` block as defined below. Changing this will create a new version of the Key Vault Certificate.
     *
     * > **NOTE:** When creating a Key Vault Certificate, at least one of `certificate` or `certificatePolicy` is required. Provide `certificate` to import an existing certificate, `certificatePolicy` to generate a new certificate.
     */
    public readonly certificatePolicy!: pulumi.Output<outputs.keyvault.CertificateCertificatePolicy>;
    /**
     * The ID of the Key Vault where the Certificate should be created. Changing this forces a new resource to be created.
     */
    public readonly keyVaultId!: pulumi.Output<string>;
    /**
     * Specifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The (Versioned) ID for this Key Vault Certificate. This property points to a specific version of a Key Vault Certificate, as such using this won't auto-rotate values if used in other Azure Services.
     */
    public /*out*/ readonly resourceManagerId!: pulumi.Output<string>;
    /**
     * The Versionless ID of the Key Vault Certificate. This property allows other Azure Services (that support it) to auto-rotate their value when the Key Vault Certificate is updated.
     */
    public /*out*/ readonly resourceManagerVersionlessId!: pulumi.Output<string>;
    /**
     * The ID of the associated Key Vault Secret.
     */
    public /*out*/ readonly secretId!: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The X509 Thumbprint of the Key Vault Certificate represented as a hexadecimal string.
     */
    public /*out*/ readonly thumbprint!: pulumi.Output<string>;
    /**
     * The current version of the Key Vault Certificate.
     */
    public /*out*/ readonly version!: pulumi.Output<string>;
    /**
     * The Base ID of the Key Vault Certificate.
     */
    public /*out*/ readonly versionlessId!: pulumi.Output<string>;
    /**
     * The Base ID of the Key Vault Secret.
     */
    public /*out*/ readonly versionlessSecretId!: pulumi.Output<string>;

    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateArgs | CertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateState | undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["certificateAttributes"] = state ? state.certificateAttributes : undefined;
            resourceInputs["certificateData"] = state ? state.certificateData : undefined;
            resourceInputs["certificateDataBase64"] = state ? state.certificateDataBase64 : undefined;
            resourceInputs["certificatePolicy"] = state ? state.certificatePolicy : undefined;
            resourceInputs["keyVaultId"] = state ? state.keyVaultId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceManagerId"] = state ? state.resourceManagerId : undefined;
            resourceInputs["resourceManagerVersionlessId"] = state ? state.resourceManagerVersionlessId : undefined;
            resourceInputs["secretId"] = state ? state.secretId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["thumbprint"] = state ? state.thumbprint : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["versionlessId"] = state ? state.versionlessId : undefined;
            resourceInputs["versionlessSecretId"] = state ? state.versionlessSecretId : undefined;
        } else {
            const args = argsOrState as CertificateArgs | undefined;
            if ((!args || args.keyVaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyVaultId'");
            }
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["certificatePolicy"] = args ? args.certificatePolicy : undefined;
            resourceInputs["keyVaultId"] = args ? args.keyVaultId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["certificateAttributes"] = undefined /*out*/;
            resourceInputs["certificateData"] = undefined /*out*/;
            resourceInputs["certificateDataBase64"] = undefined /*out*/;
            resourceInputs["resourceManagerId"] = undefined /*out*/;
            resourceInputs["resourceManagerVersionlessId"] = undefined /*out*/;
            resourceInputs["secretId"] = undefined /*out*/;
            resourceInputs["thumbprint"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
            resourceInputs["versionlessId"] = undefined /*out*/;
            resourceInputs["versionlessSecretId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure:keyvault/certifiate:Certifiate" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Certificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Certificate resources.
 */
export interface CertificateState {
    /**
     * A `certificate` block as defined below, used to Import an existing certificate. Changing this will create a new version of the Key Vault Certificate.
     */
    certificate?: pulumi.Input<inputs.keyvault.CertificateCertificate>;
    /**
     * A `certificateAttribute` block as defined below.
     */
    certificateAttributes?: pulumi.Input<pulumi.Input<inputs.keyvault.CertificateCertificateAttribute>[]>;
    /**
     * The raw Key Vault Certificate data represented as a hexadecimal string.
     */
    certificateData?: pulumi.Input<string>;
    /**
     * The Base64 encoded Key Vault Certificate data.
     */
    certificateDataBase64?: pulumi.Input<string>;
    /**
     * A `certificatePolicy` block as defined below. Changing this will create a new version of the Key Vault Certificate.
     *
     * > **NOTE:** When creating a Key Vault Certificate, at least one of `certificate` or `certificatePolicy` is required. Provide `certificate` to import an existing certificate, `certificatePolicy` to generate a new certificate.
     */
    certificatePolicy?: pulumi.Input<inputs.keyvault.CertificateCertificatePolicy>;
    /**
     * The ID of the Key Vault where the Certificate should be created. Changing this forces a new resource to be created.
     */
    keyVaultId?: pulumi.Input<string>;
    /**
     * Specifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The (Versioned) ID for this Key Vault Certificate. This property points to a specific version of a Key Vault Certificate, as such using this won't auto-rotate values if used in other Azure Services.
     */
    resourceManagerId?: pulumi.Input<string>;
    /**
     * The Versionless ID of the Key Vault Certificate. This property allows other Azure Services (that support it) to auto-rotate their value when the Key Vault Certificate is updated.
     */
    resourceManagerVersionlessId?: pulumi.Input<string>;
    /**
     * The ID of the associated Key Vault Secret.
     */
    secretId?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The X509 Thumbprint of the Key Vault Certificate represented as a hexadecimal string.
     */
    thumbprint?: pulumi.Input<string>;
    /**
     * The current version of the Key Vault Certificate.
     */
    version?: pulumi.Input<string>;
    /**
     * The Base ID of the Key Vault Certificate.
     */
    versionlessId?: pulumi.Input<string>;
    /**
     * The Base ID of the Key Vault Secret.
     */
    versionlessSecretId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    /**
     * A `certificate` block as defined below, used to Import an existing certificate. Changing this will create a new version of the Key Vault Certificate.
     */
    certificate?: pulumi.Input<inputs.keyvault.CertificateCertificate>;
    /**
     * A `certificatePolicy` block as defined below. Changing this will create a new version of the Key Vault Certificate.
     *
     * > **NOTE:** When creating a Key Vault Certificate, at least one of `certificate` or `certificatePolicy` is required. Provide `certificate` to import an existing certificate, `certificatePolicy` to generate a new certificate.
     */
    certificatePolicy?: pulumi.Input<inputs.keyvault.CertificateCertificatePolicy>;
    /**
     * The ID of the Key Vault where the Certificate should be created. Changing this forces a new resource to be created.
     */
    keyVaultId: pulumi.Input<string>;
    /**
     * Specifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
