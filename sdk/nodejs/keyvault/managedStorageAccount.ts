// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Key Vault Managed Storage Account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleKeyVault = new azure.keyvault.KeyVault("exampleKeyVault", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "standard",
 *     accessPolicies: [{
 *         tenantId: current.then(current => current.tenantId),
 *         objectId: current.then(current => current.objectId),
 *         secretPermissions: [
 *             "Get",
 *             "Delete",
 *         ],
 *         storagePermissions: [
 *             "Get",
 *             "List",
 *             "Set",
 *             "SetSAS",
 *             "GetSAS",
 *             "DeleteSAS",
 *             "Update",
 *             "RegenerateKey",
 *         ],
 *     }],
 * });
 * const exampleManagedStorageAccount = new azure.keyvault.ManagedStorageAccount("exampleManagedStorageAccount", {
 *     keyVaultId: exampleKeyVault.id,
 *     storageAccountId: exampleAccount.id,
 *     storageAccountKey: "key1",
 *     regenerateKeyAutomatically: false,
 *     regenerationPeriod: "P1D",
 * });
 * ```
 * ### Automatically Regenerate Storage Account Access Key)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as azuread from "@pulumi/azuread";
 *
 * const current = azure.core.getClientConfig({});
 * const test = azuread.getServicePrincipal({
 *     applicationId: "cfa8b339-82a2-471a-a3c9-0fc0be7a4093",
 * });
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleKeyVault = new azure.keyvault.KeyVault("exampleKeyVault", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "standard",
 *     accessPolicies: [{
 *         tenantId: current.then(current => current.tenantId),
 *         objectId: current.then(current => current.objectId),
 *         secretPermissions: [
 *             "Get",
 *             "Delete",
 *         ],
 *         storagePermissions: [
 *             "Get",
 *             "List",
 *             "Set",
 *             "SetSAS",
 *             "GetSAS",
 *             "DeleteSAS",
 *             "Update",
 *             "RegenerateKey",
 *         ],
 *     }],
 * });
 * const exampleAssignment = new azure.authorization.Assignment("exampleAssignment", {
 *     scope: exampleAccount.id,
 *     roleDefinitionName: "Storage Account Key Operator Service Role",
 *     principalId: test.then(test => test.id),
 * });
 * const exampleManagedStorageAccount = new azure.keyvault.ManagedStorageAccount("exampleManagedStorageAccount", {
 *     keyVaultId: exampleKeyVault.id,
 *     storageAccountId: exampleAccount.id,
 *     storageAccountKey: "key1",
 *     regenerateKeyAutomatically: true,
 *     regenerationPeriod: "P1D",
 * }, {
 *     dependsOn: [exampleAssignment],
 * });
 * ```
 *
 * ## Import
 *
 * Key Vault Managed Storage Accounts can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:keyvault/managedStorageAccount:ManagedStorageAccount example https://example-keyvault.vault.azure.net/storage/exampleStorageAcc01
 * ```
 */
export class ManagedStorageAccount extends pulumi.CustomResource {
    /**
     * Get an existing ManagedStorageAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagedStorageAccountState, opts?: pulumi.CustomResourceOptions): ManagedStorageAccount {
        return new ManagedStorageAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:keyvault/managedStorageAccount:ManagedStorageAccount';

    /**
     * Returns true if the given object is an instance of ManagedStorageAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagedStorageAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedStorageAccount.__pulumiType;
    }

    /**
     * The ID of the Key Vault where the Managed Storage Account should be created. Changing this forces a new resource to be created.
     */
    public readonly keyVaultId!: pulumi.Output<string>;
    /**
     * The name which should be used for this Key Vault Managed Storage Account. Changing this forces a new Key Vault Managed Storage Account to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Should Storage Account access key be regenerated periodically?
     */
    public readonly regenerateKeyAutomatically!: pulumi.Output<boolean | undefined>;
    /**
     * How often Storage Account access key should be regenerated. Value needs to be in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations).
     */
    public readonly regenerationPeriod!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Storage Account.
     */
    public readonly storageAccountId!: pulumi.Output<string>;
    /**
     * Which Storage Account access key that is managed by Key Vault. Possible values are `key1` and `key2`.
     */
    public readonly storageAccountKey!: pulumi.Output<string>;
    /**
     * A mapping of tags which should be assigned to the Key Vault Managed Storage Account.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a ManagedStorageAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagedStorageAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagedStorageAccountArgs | ManagedStorageAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagedStorageAccountState | undefined;
            resourceInputs["keyVaultId"] = state ? state.keyVaultId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["regenerateKeyAutomatically"] = state ? state.regenerateKeyAutomatically : undefined;
            resourceInputs["regenerationPeriod"] = state ? state.regenerationPeriod : undefined;
            resourceInputs["storageAccountId"] = state ? state.storageAccountId : undefined;
            resourceInputs["storageAccountKey"] = state ? state.storageAccountKey : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ManagedStorageAccountArgs | undefined;
            if ((!args || args.keyVaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyVaultId'");
            }
            if ((!args || args.storageAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageAccountId'");
            }
            if ((!args || args.storageAccountKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageAccountKey'");
            }
            resourceInputs["keyVaultId"] = args ? args.keyVaultId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["regenerateKeyAutomatically"] = args ? args.regenerateKeyAutomatically : undefined;
            resourceInputs["regenerationPeriod"] = args ? args.regenerationPeriod : undefined;
            resourceInputs["storageAccountId"] = args ? args.storageAccountId : undefined;
            resourceInputs["storageAccountKey"] = args ? args.storageAccountKey : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagedStorageAccount.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ManagedStorageAccount resources.
 */
export interface ManagedStorageAccountState {
    /**
     * The ID of the Key Vault where the Managed Storage Account should be created. Changing this forces a new resource to be created.
     */
    keyVaultId?: pulumi.Input<string>;
    /**
     * The name which should be used for this Key Vault Managed Storage Account. Changing this forces a new Key Vault Managed Storage Account to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Should Storage Account access key be regenerated periodically?
     */
    regenerateKeyAutomatically?: pulumi.Input<boolean>;
    /**
     * How often Storage Account access key should be regenerated. Value needs to be in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations).
     */
    regenerationPeriod?: pulumi.Input<string>;
    /**
     * The ID of the Storage Account.
     */
    storageAccountId?: pulumi.Input<string>;
    /**
     * Which Storage Account access key that is managed by Key Vault. Possible values are `key1` and `key2`.
     */
    storageAccountKey?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Key Vault Managed Storage Account.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a ManagedStorageAccount resource.
 */
export interface ManagedStorageAccountArgs {
    /**
     * The ID of the Key Vault where the Managed Storage Account should be created. Changing this forces a new resource to be created.
     */
    keyVaultId: pulumi.Input<string>;
    /**
     * The name which should be used for this Key Vault Managed Storage Account. Changing this forces a new Key Vault Managed Storage Account to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Should Storage Account access key be regenerated periodically?
     */
    regenerateKeyAutomatically?: pulumi.Input<boolean>;
    /**
     * How often Storage Account access key should be regenerated. Value needs to be in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations).
     */
    regenerationPeriod?: pulumi.Input<string>;
    /**
     * The ID of the Storage Account.
     */
    storageAccountId: pulumi.Input<string>;
    /**
     * Which Storage Account access key that is managed by Key Vault. Possible values are `key1` and `key2`.
     */
    storageAccountKey: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Key Vault Managed Storage Account.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
