// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages Key Vault Certificate Contacts.
 *
 * ## Disclaimers
 *
 * > **Note:** It's possible to define Key Vault Certificate Contacts both within the `azure.keyvault.KeyVault` resource via the `contact` block and by using the `azure.keyvault.CertificateContacts` resource. However it's not possible to use both methods to manage Certificate Contacts within a KeyVault, since there'll be conflicts.
 *
 * ## Import
 *
 * Key Vault Certificate Contacts can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:keyvault/certificateContacts:CertificateContacts example https://example-keyvault.vault.azure.net/certificates/contacts
 * ```
 */
export class CertificateContacts extends pulumi.CustomResource {
    /**
     * Get an existing CertificateContacts resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateContactsState, opts?: pulumi.CustomResourceOptions): CertificateContacts {
        return new CertificateContacts(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:keyvault/certificateContacts:CertificateContacts';

    /**
     * Returns true if the given object is an instance of CertificateContacts.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CertificateContacts {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CertificateContacts.__pulumiType;
    }

    /**
     * One or more `contact` blocks as defined below.
     */
    public readonly contacts!: pulumi.Output<outputs.keyvault.CertificateContactsContact[]>;
    /**
     * The ID of the Key Vault. Changing this forces a new resource to be created.
     */
    public readonly keyVaultId!: pulumi.Output<string>;

    /**
     * Create a CertificateContacts resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateContactsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateContactsArgs | CertificateContactsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateContactsState | undefined;
            resourceInputs["contacts"] = state ? state.contacts : undefined;
            resourceInputs["keyVaultId"] = state ? state.keyVaultId : undefined;
        } else {
            const args = argsOrState as CertificateContactsArgs | undefined;
            if ((!args || args.contacts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contacts'");
            }
            if ((!args || args.keyVaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyVaultId'");
            }
            resourceInputs["contacts"] = args ? args.contacts : undefined;
            resourceInputs["keyVaultId"] = args ? args.keyVaultId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CertificateContacts.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CertificateContacts resources.
 */
export interface CertificateContactsState {
    /**
     * One or more `contact` blocks as defined below.
     */
    contacts?: pulumi.Input<pulumi.Input<inputs.keyvault.CertificateContactsContact>[]>;
    /**
     * The ID of the Key Vault. Changing this forces a new resource to be created.
     */
    keyVaultId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CertificateContacts resource.
 */
export interface CertificateContactsArgs {
    /**
     * One or more `contact` blocks as defined below.
     */
    contacts: pulumi.Input<pulumi.Input<inputs.keyvault.CertificateContactsContact>[]>;
    /**
     * The ID of the Key Vault. Changing this forces a new resource to be created.
     */
    keyVaultId: pulumi.Input<string>;
}
