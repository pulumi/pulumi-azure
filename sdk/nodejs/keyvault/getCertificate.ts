// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to access information about an existing Key Vault Certificate.
 */
export function getCertificate(args: GetCertificateArgs, opts?: pulumi.InvokeOptions): Promise<GetCertificateResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure:keyvault/getCertificate:getCertificate", {
        "keyVaultId": args.keyVaultId,
        "name": args.name,
        "version": args.version,
    }, opts);
}

/**
 * A collection of arguments for invoking getCertificate.
 */
export interface GetCertificateArgs {
    /**
     * Specifies the ID of the Key Vault instance where the Secret resides, available on the `azure.keyvault.KeyVault` Data Source / Resource.
     */
    keyVaultId: string;
    /**
     * Specifies the name of the Key Vault Certificate.
     */
    name: string;
    /**
     * Specifies the version of the certificate to look up.  (Defaults to latest)
     *
     * **NOTE:** The vault must be in the same subscription as the provider. If the vault is in another subscription, you must create an aliased provider for that subscription.
     */
    version?: string;
}

/**
 * A collection of values returned by getCertificate.
 */
export interface GetCertificateResult {
    /**
     * The raw Key Vault Certificate data represented as a hexadecimal string.
     */
    readonly certificateData: string;
    /**
     * The raw Key Vault Certificate data represented as a base64 string.
     */
    readonly certificateDataBase64: string;
    /**
     * A `certificatePolicy` block as defined below.
     */
    readonly certificatePolicies: outputs.keyvault.GetCertificateCertificatePolicy[];
    /**
     * Expiry date of certificate in RFC3339 format.
     */
    readonly expires: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly keyVaultId: string;
    /**
     * The name of the Certificate Issuer.
     */
    readonly name: string;
    /**
     * Not Before date of certificate in RFC3339 format.
     */
    readonly notBefore: string;
    /**
     * The (Versioned) ID for this Key Vault Certificate. This property points to a specific version of a Key Vault Certificate, as such using this won't auto-rotate values if used in other Azure Services.
     */
    readonly resourceManagerId: string;
    /**
     * The Versionless ID of the Key Vault Certificate. This property allows other Azure Services (that support it) to auto-rotate their value when the Key Vault Certificate is updated.
     */
    readonly resourceManagerVersionlessId: string;
    /**
     * The ID of the associated Key Vault Secret.
     */
    readonly secretId: string;
    /**
     * A mapping of tags to assign to the resource.
     */
    readonly tags: {[key: string]: string};
    /**
     * The X509 Thumbprint of the Key Vault Certificate represented as a hexadecimal string.
     */
    readonly thumbprint: string;
    /**
     * The current version of the Key Vault Certificate.
     */
    readonly version: string;
    /**
     * The Base ID of the Key Vault Certificate.
     */
    readonly versionlessId: string;
    /**
     * The Base ID of the Key Vault Secret.
     */
    readonly versionlessSecretId: string;
}
/**
 * Use this data source to access information about an existing Key Vault Certificate.
 */
export function getCertificateOutput(args: GetCertificateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCertificateResult> {
    return pulumi.output(args).apply((a: any) => getCertificate(a, opts))
}

/**
 * A collection of arguments for invoking getCertificate.
 */
export interface GetCertificateOutputArgs {
    /**
     * Specifies the ID of the Key Vault instance where the Secret resides, available on the `azure.keyvault.KeyVault` Data Source / Resource.
     */
    keyVaultId: pulumi.Input<string>;
    /**
     * Specifies the name of the Key Vault Certificate.
     */
    name: pulumi.Input<string>;
    /**
     * Specifies the version of the certificate to look up.  (Defaults to latest)
     *
     * **NOTE:** The vault must be in the same subscription as the provider. If the vault is in another subscription, you must create an aliased provider for that subscription.
     */
    version?: pulumi.Input<string>;
}
