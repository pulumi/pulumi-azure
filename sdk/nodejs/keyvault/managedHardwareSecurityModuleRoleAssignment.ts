// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a KeyVault Role Assignment.
 *
 * ## Import
 *
 * KeyVaults can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:keyvault/managedHardwareSecurityModuleRoleAssignment:ManagedHardwareSecurityModuleRoleAssignment example https://0000.managedhsm.azure.net///RoleAssignment/00000000-0000-0000-0000-000000000000
 * ```
 */
export class ManagedHardwareSecurityModuleRoleAssignment extends pulumi.CustomResource {
    /**
     * Get an existing ManagedHardwareSecurityModuleRoleAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagedHardwareSecurityModuleRoleAssignmentState, opts?: pulumi.CustomResourceOptions): ManagedHardwareSecurityModuleRoleAssignment {
        return new ManagedHardwareSecurityModuleRoleAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:keyvault/managedHardwareSecurityModuleRoleAssignment:ManagedHardwareSecurityModuleRoleAssignment';

    /**
     * Returns true if the given object is an instance of ManagedHardwareSecurityModuleRoleAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagedHardwareSecurityModuleRoleAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedHardwareSecurityModuleRoleAssignment.__pulumiType;
    }

    /**
     * The name in GUID notation which should be used for this KeyVault Role Assignment. Changing this forces a new KeyVault to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The principal ID to be assigned to this role. It can point to a user, service principal, or security group. Changing this forces a new KeyVault to be created.
     */
    public readonly principalId!: pulumi.Output<string>;
    /**
     * The resource id of created assignment resource.
     */
    public /*out*/ readonly resourceId!: pulumi.Output<string>;
    /**
     * The resource ID of the role definition to assign. Changing this forces a new KeyVault to be created.
     */
    public readonly roleDefinitionId!: pulumi.Output<string>;
    /**
     * Specifies the scope to create the role assignment. Changing this forces a new KeyVault to be created.
     */
    public readonly scope!: pulumi.Output<string>;
    /**
     * The HSM URI of a Managed Hardware Security Module resource. Changing this forces a new KeyVault to be created.
     */
    public readonly vaultBaseUrl!: pulumi.Output<string>;

    /**
     * Create a ManagedHardwareSecurityModuleRoleAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagedHardwareSecurityModuleRoleAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagedHardwareSecurityModuleRoleAssignmentArgs | ManagedHardwareSecurityModuleRoleAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagedHardwareSecurityModuleRoleAssignmentState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["principalId"] = state ? state.principalId : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["roleDefinitionId"] = state ? state.roleDefinitionId : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["vaultBaseUrl"] = state ? state.vaultBaseUrl : undefined;
        } else {
            const args = argsOrState as ManagedHardwareSecurityModuleRoleAssignmentArgs | undefined;
            if ((!args || args.principalId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principalId'");
            }
            if ((!args || args.roleDefinitionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleDefinitionId'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            if ((!args || args.vaultBaseUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vaultBaseUrl'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["principalId"] = args ? args.principalId : undefined;
            resourceInputs["roleDefinitionId"] = args ? args.roleDefinitionId : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["vaultBaseUrl"] = args ? args.vaultBaseUrl : undefined;
            resourceInputs["resourceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagedHardwareSecurityModuleRoleAssignment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ManagedHardwareSecurityModuleRoleAssignment resources.
 */
export interface ManagedHardwareSecurityModuleRoleAssignmentState {
    /**
     * The name in GUID notation which should be used for this KeyVault Role Assignment. Changing this forces a new KeyVault to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The principal ID to be assigned to this role. It can point to a user, service principal, or security group. Changing this forces a new KeyVault to be created.
     */
    principalId?: pulumi.Input<string>;
    /**
     * The resource id of created assignment resource.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * The resource ID of the role definition to assign. Changing this forces a new KeyVault to be created.
     */
    roleDefinitionId?: pulumi.Input<string>;
    /**
     * Specifies the scope to create the role assignment. Changing this forces a new KeyVault to be created.
     */
    scope?: pulumi.Input<string>;
    /**
     * The HSM URI of a Managed Hardware Security Module resource. Changing this forces a new KeyVault to be created.
     */
    vaultBaseUrl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagedHardwareSecurityModuleRoleAssignment resource.
 */
export interface ManagedHardwareSecurityModuleRoleAssignmentArgs {
    /**
     * The name in GUID notation which should be used for this KeyVault Role Assignment. Changing this forces a new KeyVault to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The principal ID to be assigned to this role. It can point to a user, service principal, or security group. Changing this forces a new KeyVault to be created.
     */
    principalId: pulumi.Input<string>;
    /**
     * The resource ID of the role definition to assign. Changing this forces a new KeyVault to be created.
     */
    roleDefinitionId: pulumi.Input<string>;
    /**
     * Specifies the scope to create the role assignment. Changing this forces a new KeyVault to be created.
     */
    scope: pulumi.Input<string>;
    /**
     * The HSM URI of a Managed Hardware Security Module resource. Changing this forces a new KeyVault to be created.
     */
    vaultBaseUrl: pulumi.Input<string>;
}
