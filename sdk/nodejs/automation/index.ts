// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { BoolVariableArgs, BoolVariableState } from "./boolVariable";
export type BoolVariable = import("./boolVariable").BoolVariable;
export const BoolVariable: typeof import("./boolVariable").BoolVariable = null as any;
utilities.lazyLoad(exports, ["BoolVariable"], () => require("./boolVariable"));

export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { ConnectionArgs, ConnectionState } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { ConnectionCertificateArgs, ConnectionCertificateState } from "./connectionCertificate";
export type ConnectionCertificate = import("./connectionCertificate").ConnectionCertificate;
export const ConnectionCertificate: typeof import("./connectionCertificate").ConnectionCertificate = null as any;
utilities.lazyLoad(exports, ["ConnectionCertificate"], () => require("./connectionCertificate"));

export { ConnectionClassicCertificateArgs, ConnectionClassicCertificateState } from "./connectionClassicCertificate";
export type ConnectionClassicCertificate = import("./connectionClassicCertificate").ConnectionClassicCertificate;
export const ConnectionClassicCertificate: typeof import("./connectionClassicCertificate").ConnectionClassicCertificate = null as any;
utilities.lazyLoad(exports, ["ConnectionClassicCertificate"], () => require("./connectionClassicCertificate"));

export { ConnectionServicePrincipalArgs, ConnectionServicePrincipalState } from "./connectionServicePrincipal";
export type ConnectionServicePrincipal = import("./connectionServicePrincipal").ConnectionServicePrincipal;
export const ConnectionServicePrincipal: typeof import("./connectionServicePrincipal").ConnectionServicePrincipal = null as any;
utilities.lazyLoad(exports, ["ConnectionServicePrincipal"], () => require("./connectionServicePrincipal"));

export { ConnectionTypeArgs, ConnectionTypeState } from "./connectionType";
export type ConnectionType = import("./connectionType").ConnectionType;
export const ConnectionType: typeof import("./connectionType").ConnectionType = null as any;
utilities.lazyLoad(exports, ["ConnectionType"], () => require("./connectionType"));

export { CredentialArgs, CredentialState } from "./credential";
export type Credential = import("./credential").Credential;
export const Credential: typeof import("./credential").Credential = null as any;
utilities.lazyLoad(exports, ["Credential"], () => require("./credential"));

export { DateTimeVariableArgs, DateTimeVariableState } from "./dateTimeVariable";
export type DateTimeVariable = import("./dateTimeVariable").DateTimeVariable;
export const DateTimeVariable: typeof import("./dateTimeVariable").DateTimeVariable = null as any;
utilities.lazyLoad(exports, ["DateTimeVariable"], () => require("./dateTimeVariable"));

export { DscConfigurationArgs, DscConfigurationState } from "./dscConfiguration";
export type DscConfiguration = import("./dscConfiguration").DscConfiguration;
export const DscConfiguration: typeof import("./dscConfiguration").DscConfiguration = null as any;
utilities.lazyLoad(exports, ["DscConfiguration"], () => require("./dscConfiguration"));

export { DscNodeConfigurationArgs, DscNodeConfigurationState } from "./dscNodeConfiguration";
export type DscNodeConfiguration = import("./dscNodeConfiguration").DscNodeConfiguration;
export const DscNodeConfiguration: typeof import("./dscNodeConfiguration").DscNodeConfiguration = null as any;
utilities.lazyLoad(exports, ["DscNodeConfiguration"], () => require("./dscNodeConfiguration"));

export { GetAccountArgs, GetAccountResult, GetAccountOutputArgs } from "./getAccount";
export const getAccount: typeof import("./getAccount").getAccount = null as any;
export const getAccountOutput: typeof import("./getAccount").getAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAccount","getAccountOutput"], () => require("./getAccount"));

export { GetBoolVariableArgs, GetBoolVariableResult, GetBoolVariableOutputArgs } from "./getBoolVariable";
export const getBoolVariable: typeof import("./getBoolVariable").getBoolVariable = null as any;
export const getBoolVariableOutput: typeof import("./getBoolVariable").getBoolVariableOutput = null as any;
utilities.lazyLoad(exports, ["getBoolVariable","getBoolVariableOutput"], () => require("./getBoolVariable"));

export { GetDateTimeVariableArgs, GetDateTimeVariableResult, GetDateTimeVariableOutputArgs } from "./getDateTimeVariable";
export const getDateTimeVariable: typeof import("./getDateTimeVariable").getDateTimeVariable = null as any;
export const getDateTimeVariableOutput: typeof import("./getDateTimeVariable").getDateTimeVariableOutput = null as any;
utilities.lazyLoad(exports, ["getDateTimeVariable","getDateTimeVariableOutput"], () => require("./getDateTimeVariable"));

export { GetIntVariableArgs, GetIntVariableResult, GetIntVariableOutputArgs } from "./getIntVariable";
export const getIntVariable: typeof import("./getIntVariable").getIntVariable = null as any;
export const getIntVariableOutput: typeof import("./getIntVariable").getIntVariableOutput = null as any;
utilities.lazyLoad(exports, ["getIntVariable","getIntVariableOutput"], () => require("./getIntVariable"));

export { GetStringVariableArgs, GetStringVariableResult, GetStringVariableOutputArgs } from "./getStringVariable";
export const getStringVariable: typeof import("./getStringVariable").getStringVariable = null as any;
export const getStringVariableOutput: typeof import("./getStringVariable").getStringVariableOutput = null as any;
utilities.lazyLoad(exports, ["getStringVariable","getStringVariableOutput"], () => require("./getStringVariable"));

export { GetVariableObjectArgs, GetVariableObjectResult, GetVariableObjectOutputArgs } from "./getVariableObject";
export const getVariableObject: typeof import("./getVariableObject").getVariableObject = null as any;
export const getVariableObjectOutput: typeof import("./getVariableObject").getVariableObjectOutput = null as any;
utilities.lazyLoad(exports, ["getVariableObject","getVariableObjectOutput"], () => require("./getVariableObject"));

export { GetVariablesArgs, GetVariablesResult, GetVariablesOutputArgs } from "./getVariables";
export const getVariables: typeof import("./getVariables").getVariables = null as any;
export const getVariablesOutput: typeof import("./getVariables").getVariablesOutput = null as any;
utilities.lazyLoad(exports, ["getVariables","getVariablesOutput"], () => require("./getVariables"));

export { HybridRunbookWorkerArgs, HybridRunbookWorkerState } from "./hybridRunbookWorker";
export type HybridRunbookWorker = import("./hybridRunbookWorker").HybridRunbookWorker;
export const HybridRunbookWorker: typeof import("./hybridRunbookWorker").HybridRunbookWorker = null as any;
utilities.lazyLoad(exports, ["HybridRunbookWorker"], () => require("./hybridRunbookWorker"));

export { HybridRunbookWorkerGroupArgs, HybridRunbookWorkerGroupState } from "./hybridRunbookWorkerGroup";
export type HybridRunbookWorkerGroup = import("./hybridRunbookWorkerGroup").HybridRunbookWorkerGroup;
export const HybridRunbookWorkerGroup: typeof import("./hybridRunbookWorkerGroup").HybridRunbookWorkerGroup = null as any;
utilities.lazyLoad(exports, ["HybridRunbookWorkerGroup"], () => require("./hybridRunbookWorkerGroup"));

export { IntVariableArgs, IntVariableState } from "./intVariable";
export type IntVariable = import("./intVariable").IntVariable;
export const IntVariable: typeof import("./intVariable").IntVariable = null as any;
utilities.lazyLoad(exports, ["IntVariable"], () => require("./intVariable"));

export { JobScheduleArgs, JobScheduleState } from "./jobSchedule";
export type JobSchedule = import("./jobSchedule").JobSchedule;
export const JobSchedule: typeof import("./jobSchedule").JobSchedule = null as any;
utilities.lazyLoad(exports, ["JobSchedule"], () => require("./jobSchedule"));

export { ModuleArgs, ModuleState } from "./module";
export type Module = import("./module").Module;
export const Module: typeof import("./module").Module = null as any;
utilities.lazyLoad(exports, ["Module"], () => require("./module"));

export { Powershell72ModuleArgs, Powershell72ModuleState } from "./powershell72Module";
export type Powershell72Module = import("./powershell72Module").Powershell72Module;
export const Powershell72Module: typeof import("./powershell72Module").Powershell72Module = null as any;
utilities.lazyLoad(exports, ["Powershell72Module"], () => require("./powershell72Module"));

export { Python3PackageArgs, Python3PackageState } from "./python3Package";
export type Python3Package = import("./python3Package").Python3Package;
export const Python3Package: typeof import("./python3Package").Python3Package = null as any;
utilities.lazyLoad(exports, ["Python3Package"], () => require("./python3Package"));

export { RunBookArgs, RunBookState } from "./runBook";
export type RunBook = import("./runBook").RunBook;
export const RunBook: typeof import("./runBook").RunBook = null as any;
utilities.lazyLoad(exports, ["RunBook"], () => require("./runBook"));

export { ScheduleArgs, ScheduleState } from "./schedule";
export type Schedule = import("./schedule").Schedule;
export const Schedule: typeof import("./schedule").Schedule = null as any;
utilities.lazyLoad(exports, ["Schedule"], () => require("./schedule"));

export { SoftwareUpdateConfigurationArgs, SoftwareUpdateConfigurationState } from "./softwareUpdateConfiguration";
export type SoftwareUpdateConfiguration = import("./softwareUpdateConfiguration").SoftwareUpdateConfiguration;
export const SoftwareUpdateConfiguration: typeof import("./softwareUpdateConfiguration").SoftwareUpdateConfiguration = null as any;
utilities.lazyLoad(exports, ["SoftwareUpdateConfiguration"], () => require("./softwareUpdateConfiguration"));

export { SourceControlArgs, SourceControlState } from "./sourceControl";
export type SourceControl = import("./sourceControl").SourceControl;
export const SourceControl: typeof import("./sourceControl").SourceControl = null as any;
utilities.lazyLoad(exports, ["SourceControl"], () => require("./sourceControl"));

export { StringVariableArgs, StringVariableState } from "./stringVariable";
export type StringVariable = import("./stringVariable").StringVariable;
export const StringVariable: typeof import("./stringVariable").StringVariable = null as any;
utilities.lazyLoad(exports, ["StringVariable"], () => require("./stringVariable"));

export { VariableObjectArgs, VariableObjectState } from "./variableObject";
export type VariableObject = import("./variableObject").VariableObject;
export const VariableObject: typeof import("./variableObject").VariableObject = null as any;
utilities.lazyLoad(exports, ["VariableObject"], () => require("./variableObject"));

export { WatcherArgs, WatcherState } from "./watcher";
export type Watcher = import("./watcher").Watcher;
export const Watcher: typeof import("./watcher").Watcher = null as any;
utilities.lazyLoad(exports, ["Watcher"], () => require("./watcher"));

export { WebhookArgs, WebhookState } from "./webhook";
export type Webhook = import("./webhook").Webhook;
export const Webhook: typeof import("./webhook").Webhook = null as any;
utilities.lazyLoad(exports, ["Webhook"], () => require("./webhook"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:automation/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "azure:automation/boolVariable:BoolVariable":
                return new BoolVariable(name, <any>undefined, { urn })
            case "azure:automation/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "azure:automation/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "azure:automation/connectionCertificate:ConnectionCertificate":
                return new ConnectionCertificate(name, <any>undefined, { urn })
            case "azure:automation/connectionClassicCertificate:ConnectionClassicCertificate":
                return new ConnectionClassicCertificate(name, <any>undefined, { urn })
            case "azure:automation/connectionServicePrincipal:ConnectionServicePrincipal":
                return new ConnectionServicePrincipal(name, <any>undefined, { urn })
            case "azure:automation/connectionType:ConnectionType":
                return new ConnectionType(name, <any>undefined, { urn })
            case "azure:automation/credential:Credential":
                return new Credential(name, <any>undefined, { urn })
            case "azure:automation/dateTimeVariable:DateTimeVariable":
                return new DateTimeVariable(name, <any>undefined, { urn })
            case "azure:automation/dscConfiguration:DscConfiguration":
                return new DscConfiguration(name, <any>undefined, { urn })
            case "azure:automation/dscNodeConfiguration:DscNodeConfiguration":
                return new DscNodeConfiguration(name, <any>undefined, { urn })
            case "azure:automation/hybridRunbookWorker:HybridRunbookWorker":
                return new HybridRunbookWorker(name, <any>undefined, { urn })
            case "azure:automation/hybridRunbookWorkerGroup:HybridRunbookWorkerGroup":
                return new HybridRunbookWorkerGroup(name, <any>undefined, { urn })
            case "azure:automation/intVariable:IntVariable":
                return new IntVariable(name, <any>undefined, { urn })
            case "azure:automation/jobSchedule:JobSchedule":
                return new JobSchedule(name, <any>undefined, { urn })
            case "azure:automation/module:Module":
                return new Module(name, <any>undefined, { urn })
            case "azure:automation/powershell72Module:Powershell72Module":
                return new Powershell72Module(name, <any>undefined, { urn })
            case "azure:automation/python3Package:Python3Package":
                return new Python3Package(name, <any>undefined, { urn })
            case "azure:automation/runBook:RunBook":
                return new RunBook(name, <any>undefined, { urn })
            case "azure:automation/schedule:Schedule":
                return new Schedule(name, <any>undefined, { urn })
            case "azure:automation/softwareUpdateConfiguration:SoftwareUpdateConfiguration":
                return new SoftwareUpdateConfiguration(name, <any>undefined, { urn })
            case "azure:automation/sourceControl:SourceControl":
                return new SourceControl(name, <any>undefined, { urn })
            case "azure:automation/stringVariable:StringVariable":
                return new StringVariable(name, <any>undefined, { urn })
            case "azure:automation/variableObject:VariableObject":
                return new VariableObject(name, <any>undefined, { urn })
            case "azure:automation/watcher:Watcher":
                return new Watcher(name, <any>undefined, { urn })
            case "azure:automation/webhook:Webhook":
                return new Webhook(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "automation/account", _module)
pulumi.runtime.registerResourceModule("azure", "automation/boolVariable", _module)
pulumi.runtime.registerResourceModule("azure", "automation/certificate", _module)
pulumi.runtime.registerResourceModule("azure", "automation/connection", _module)
pulumi.runtime.registerResourceModule("azure", "automation/connectionCertificate", _module)
pulumi.runtime.registerResourceModule("azure", "automation/connectionClassicCertificate", _module)
pulumi.runtime.registerResourceModule("azure", "automation/connectionServicePrincipal", _module)
pulumi.runtime.registerResourceModule("azure", "automation/connectionType", _module)
pulumi.runtime.registerResourceModule("azure", "automation/credential", _module)
pulumi.runtime.registerResourceModule("azure", "automation/dateTimeVariable", _module)
pulumi.runtime.registerResourceModule("azure", "automation/dscConfiguration", _module)
pulumi.runtime.registerResourceModule("azure", "automation/dscNodeConfiguration", _module)
pulumi.runtime.registerResourceModule("azure", "automation/hybridRunbookWorker", _module)
pulumi.runtime.registerResourceModule("azure", "automation/hybridRunbookWorkerGroup", _module)
pulumi.runtime.registerResourceModule("azure", "automation/intVariable", _module)
pulumi.runtime.registerResourceModule("azure", "automation/jobSchedule", _module)
pulumi.runtime.registerResourceModule("azure", "automation/module", _module)
pulumi.runtime.registerResourceModule("azure", "automation/powershell72Module", _module)
pulumi.runtime.registerResourceModule("azure", "automation/python3Package", _module)
pulumi.runtime.registerResourceModule("azure", "automation/runBook", _module)
pulumi.runtime.registerResourceModule("azure", "automation/schedule", _module)
pulumi.runtime.registerResourceModule("azure", "automation/softwareUpdateConfiguration", _module)
pulumi.runtime.registerResourceModule("azure", "automation/sourceControl", _module)
pulumi.runtime.registerResourceModule("azure", "automation/stringVariable", _module)
pulumi.runtime.registerResourceModule("azure", "automation/variableObject", _module)
pulumi.runtime.registerResourceModule("azure", "automation/watcher", _module)
pulumi.runtime.registerResourceModule("azure", "automation/webhook", _module)
