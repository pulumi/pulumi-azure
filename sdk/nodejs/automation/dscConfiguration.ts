// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Automation DSC Configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleAccount = new azure.automation.Account("example", {
 *     name: "account1",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     skuName: "Basic",
 * });
 * const exampleDscConfiguration = new azure.automation.DscConfiguration("example", {
 *     name: "test",
 *     resourceGroupName: example.name,
 *     automationAccountName: exampleAccount.name,
 *     location: example.location,
 *     contentEmbedded: "configuration test {}",
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Automation` - 2023-11-01
 *
 * ## Import
 *
 * Automation DSC Configuration's can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:automation/dscConfiguration:DscConfiguration configuration1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Automation/automationAccounts/account1/configurations/configuration1
 * ```
 */
export class DscConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing DscConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DscConfigurationState, opts?: pulumi.CustomResourceOptions): DscConfiguration {
        return new DscConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:automation/dscConfiguration:DscConfiguration';

    /**
     * Returns true if the given object is an instance of DscConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DscConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DscConfiguration.__pulumiType;
    }

    /**
     * The name of the automation account in which the DSC Configuration is created. Changing this forces a new resource to be created.
     */
    declare public readonly automationAccountName: pulumi.Output<string>;
    /**
     * The PowerShell DSC Configuration script.
     */
    declare public readonly contentEmbedded: pulumi.Output<string>;
    /**
     * Description to go with DSC Configuration.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Must be the same location as the Automation Account. Changing this forces a new resource to be created.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * Verbose log option.
     */
    declare public readonly logVerbose: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the name of the DSC Configuration. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The name of the resource group in which the DSC Configuration is created. Changing this forces a new resource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a DscConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DscConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DscConfigurationArgs | DscConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DscConfigurationState | undefined;
            resourceInputs["automationAccountName"] = state?.automationAccountName;
            resourceInputs["contentEmbedded"] = state?.contentEmbedded;
            resourceInputs["description"] = state?.description;
            resourceInputs["location"] = state?.location;
            resourceInputs["logVerbose"] = state?.logVerbose;
            resourceInputs["name"] = state?.name;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["state"] = state?.state;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as DscConfigurationArgs | undefined;
            if (args?.automationAccountName === undefined && !opts.urn) {
                throw new Error("Missing required property 'automationAccountName'");
            }
            if (args?.contentEmbedded === undefined && !opts.urn) {
                throw new Error("Missing required property 'contentEmbedded'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["automationAccountName"] = args?.automationAccountName;
            resourceInputs["contentEmbedded"] = args?.contentEmbedded;
            resourceInputs["description"] = args?.description;
            resourceInputs["location"] = args?.location;
            resourceInputs["logVerbose"] = args?.logVerbose;
            resourceInputs["name"] = args?.name;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DscConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DscConfiguration resources.
 */
export interface DscConfigurationState {
    /**
     * The name of the automation account in which the DSC Configuration is created. Changing this forces a new resource to be created.
     */
    automationAccountName?: pulumi.Input<string>;
    /**
     * The PowerShell DSC Configuration script.
     */
    contentEmbedded?: pulumi.Input<string>;
    /**
     * Description to go with DSC Configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * Must be the same location as the Automation Account. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Verbose log option.
     */
    logVerbose?: pulumi.Input<boolean>;
    /**
     * Specifies the name of the DSC Configuration. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the resource group in which the DSC Configuration is created. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a DscConfiguration resource.
 */
export interface DscConfigurationArgs {
    /**
     * The name of the automation account in which the DSC Configuration is created. Changing this forces a new resource to be created.
     */
    automationAccountName: pulumi.Input<string>;
    /**
     * The PowerShell DSC Configuration script.
     */
    contentEmbedded: pulumi.Input<string>;
    /**
     * Description to go with DSC Configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * Must be the same location as the Automation Account. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Verbose log option.
     */
    logVerbose?: pulumi.Input<boolean>;
    /**
     * Specifies the name of the DSC Configuration. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the resource group in which the DSC Configuration is created. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
