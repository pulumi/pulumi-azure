// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages an Automation Source Control.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.automation.SourceControl("example", {
 *     automationAccountId: azurerm_automation_account.test.id,
 *     folderPath: "runbook",
 *     security: {
 *         token: "ghp_xxx",
 *         tokenType: "PersonalAccessToken",
 *     },
 *     repositoryUrl: "https://github.com/foo/bat.git",
 *     sourceControlType: "GitHub",
 *     branch: "main",
 * });
 * ```
 *
 * ## Import
 *
 * Automations can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:automation/sourceControl:SourceControl example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.Automation/automationAccounts/account1/sourceControls/sc1
 * ```
 */
export class SourceControl extends pulumi.CustomResource {
    /**
     * Get an existing SourceControl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SourceControlState, opts?: pulumi.CustomResourceOptions): SourceControl {
        return new SourceControl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:automation/sourceControl:SourceControl';

    /**
     * Returns true if the given object is an instance of SourceControl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SourceControl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SourceControl.__pulumiType;
    }

    /**
     * Whether auto async the Source Control.
     */
    public readonly automaticSync!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of Automation Account to manage this Source Control. Changing this forces a new Automation Source Control to be created.
     */
    public readonly automationAccountId!: pulumi.Output<string>;
    /**
     * Specify the repo branch of the Source Control. Empty value is valid only for `VsoTfvc`.
     */
    public readonly branch!: pulumi.Output<string | undefined>;
    /**
     * A short description of the Source Control.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The folder path of the source control. This Path must be relative.
     */
    public readonly folderPath!: pulumi.Output<string>;
    /**
     * The name which should be used for this Automation Source Control. Changing this forces a new Automation Source Control to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Whether auto publish the Source Control. Defaults to `true`.
     */
    public readonly publishRunbookEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The Repository URL of the source control.
     */
    public readonly repositoryUrl!: pulumi.Output<string>;
    /**
     * A `security` block as defined below.
     */
    public readonly security!: pulumi.Output<outputs.automation.SourceControlSecurity>;
    /**
     * The source type of Source Control, possible vaules are `VsoGit`, `VsoTfvc` and `GitHub`, and the value is case sensitive.
     */
    public readonly sourceControlType!: pulumi.Output<string>;

    /**
     * Create a SourceControl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SourceControlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SourceControlArgs | SourceControlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SourceControlState | undefined;
            resourceInputs["automaticSync"] = state ? state.automaticSync : undefined;
            resourceInputs["automationAccountId"] = state ? state.automationAccountId : undefined;
            resourceInputs["branch"] = state ? state.branch : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["folderPath"] = state ? state.folderPath : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publishRunbookEnabled"] = state ? state.publishRunbookEnabled : undefined;
            resourceInputs["repositoryUrl"] = state ? state.repositoryUrl : undefined;
            resourceInputs["security"] = state ? state.security : undefined;
            resourceInputs["sourceControlType"] = state ? state.sourceControlType : undefined;
        } else {
            const args = argsOrState as SourceControlArgs | undefined;
            if ((!args || args.automationAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'automationAccountId'");
            }
            if ((!args || args.folderPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'folderPath'");
            }
            if ((!args || args.repositoryUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repositoryUrl'");
            }
            if ((!args || args.security === undefined) && !opts.urn) {
                throw new Error("Missing required property 'security'");
            }
            if ((!args || args.sourceControlType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceControlType'");
            }
            resourceInputs["automaticSync"] = args ? args.automaticSync : undefined;
            resourceInputs["automationAccountId"] = args ? args.automationAccountId : undefined;
            resourceInputs["branch"] = args ? args.branch : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["folderPath"] = args ? args.folderPath : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publishRunbookEnabled"] = args ? args.publishRunbookEnabled : undefined;
            resourceInputs["repositoryUrl"] = args ? args.repositoryUrl : undefined;
            resourceInputs["security"] = args ? args.security : undefined;
            resourceInputs["sourceControlType"] = args ? args.sourceControlType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SourceControl.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SourceControl resources.
 */
export interface SourceControlState {
    /**
     * Whether auto async the Source Control.
     */
    automaticSync?: pulumi.Input<boolean>;
    /**
     * The ID of Automation Account to manage this Source Control. Changing this forces a new Automation Source Control to be created.
     */
    automationAccountId?: pulumi.Input<string>;
    /**
     * Specify the repo branch of the Source Control. Empty value is valid only for `VsoTfvc`.
     */
    branch?: pulumi.Input<string>;
    /**
     * A short description of the Source Control.
     */
    description?: pulumi.Input<string>;
    /**
     * The folder path of the source control. This Path must be relative.
     */
    folderPath?: pulumi.Input<string>;
    /**
     * The name which should be used for this Automation Source Control. Changing this forces a new Automation Source Control to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether auto publish the Source Control. Defaults to `true`.
     */
    publishRunbookEnabled?: pulumi.Input<boolean>;
    /**
     * The Repository URL of the source control.
     */
    repositoryUrl?: pulumi.Input<string>;
    /**
     * A `security` block as defined below.
     */
    security?: pulumi.Input<inputs.automation.SourceControlSecurity>;
    /**
     * The source type of Source Control, possible vaules are `VsoGit`, `VsoTfvc` and `GitHub`, and the value is case sensitive.
     */
    sourceControlType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SourceControl resource.
 */
export interface SourceControlArgs {
    /**
     * Whether auto async the Source Control.
     */
    automaticSync?: pulumi.Input<boolean>;
    /**
     * The ID of Automation Account to manage this Source Control. Changing this forces a new Automation Source Control to be created.
     */
    automationAccountId: pulumi.Input<string>;
    /**
     * Specify the repo branch of the Source Control. Empty value is valid only for `VsoTfvc`.
     */
    branch?: pulumi.Input<string>;
    /**
     * A short description of the Source Control.
     */
    description?: pulumi.Input<string>;
    /**
     * The folder path of the source control. This Path must be relative.
     */
    folderPath: pulumi.Input<string>;
    /**
     * The name which should be used for this Automation Source Control. Changing this forces a new Automation Source Control to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether auto publish the Source Control. Defaults to `true`.
     */
    publishRunbookEnabled?: pulumi.Input<boolean>;
    /**
     * The Repository URL of the source control.
     */
    repositoryUrl: pulumi.Input<string>;
    /**
     * A `security` block as defined below.
     */
    security: pulumi.Input<inputs.automation.SourceControlSecurity>;
    /**
     * The source type of Source Control, possible vaules are `VsoGit`, `VsoTfvc` and `GitHub`, and the value is case sensitive.
     */
    sourceControlType: pulumi.Input<string>;
}
