// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Certificate for an NGINX Deployment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as std from "@pulumi/std";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-rg",
 *     location: "West Europe",
 * });
 * const examplePublicIp = new azure.network.PublicIp("example", {
 *     name: "example",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     allocationMethod: "Static",
 *     sku: "Standard",
 *     tags: {
 *         environment: "Production",
 *     },
 * });
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
 *     name: "example-vnet",
 *     addressSpaces: ["10.0.0.0/16"],
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const exampleSubnet = new azure.network.Subnet("example", {
 *     name: "example-subnet",
 *     resourceGroupName: example.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.2.0/24"],
 *     delegations: [{
 *         name: "delegation",
 *         serviceDelegation: {
 *             name: "NGINX.NGINXPLUS/nginxDeployments",
 *             actions: ["Microsoft.Network/virtualNetworks/subnets/join/action"],
 *         },
 *     }],
 * });
 * const exampleDeployment = new azure.nginx.Deployment("example", {
 *     name: "example-nginx",
 *     resourceGroupName: example.name,
 *     sku: "publicpreview_Monthly_gmz7xq9ge3py",
 *     location: example.location,
 *     managedResourceGroup: "example",
 *     diagnoseSupportEnabled: true,
 *     frontendPublic: {
 *         ipAddresses: [examplePublicIp.id],
 *     },
 *     networkInterfaces: [{
 *         subnetId: exampleSubnet.id,
 *     }],
 * });
 * const current = azure.core.getClientConfig({});
 * const exampleKeyVault = new azure.keyvault.KeyVault("example", {
 *     name: "examplekeyvault",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "premium",
 *     accessPolicies: [{
 *         tenantId: current.then(current => current.tenantId),
 *         objectId: current.then(current => current.objectId),
 *         certificatePermissions: [
 *             "Create",
 *             "Delete",
 *             "DeleteIssuers",
 *             "Get",
 *             "GetIssuers",
 *             "Import",
 *             "List",
 *             "ListIssuers",
 *             "ManageContacts",
 *             "ManageIssuers",
 *             "SetIssuers",
 *             "Update",
 *         ],
 *     }],
 * });
 * const exampleCertificate = new azure.keyvault.Certificate("example", {
 *     name: "imported-cert",
 *     keyVaultId: exampleKeyVault.id,
 *     certificate: {
 *         contents: std.filebase64({
 *             input: "certificate-to-import.pfx",
 *         }).then(invoke => invoke.result),
 *         password: "",
 *     },
 * });
 * const exampleCertificate2 = new azure.nginx.Certificate("example", {
 *     name: "examplecert",
 *     nginxDeploymentId: exampleDeployment.id,
 *     keyVirtualPath: "/src/cert/soservermekey.key",
 *     certificateVirtualPath: "/src/cert/server.cert",
 *     keyVaultSecretId: exampleCertificate.secretId,
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Nginx.NginxPlus` - 2024-11-01-preview
 *
 * ## Import
 *
 * An NGINX Certificate can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:nginx/certificate:Certificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Nginx.NginxPlus/nginxDeployments/deploy1/certificates/cer1
 * ```
 */
export class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateState, opts?: pulumi.CustomResourceOptions): Certificate {
        return new Certificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:nginx/certificate:Certificate';

    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }

    /**
     * Specify the path to the certificate file of this certificate.
     */
    declare public readonly certificateVirtualPath: pulumi.Output<string>;
    /**
     * Specify the ID of the Key Vault Secret for this certificate.
     */
    declare public readonly keyVaultSecretId: pulumi.Output<string>;
    /**
     * Specify the path to the key file of this certificate.
     */
    declare public readonly keyVirtualPath: pulumi.Output<string>;
    /**
     * The name which should be used for this NGINX Certificate. Changing this forces a new NGINX Certificate to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID of the NGINX Deployment that this Certificate should be associated with. Changing this forces a new NGINX Certificate to be created.
     */
    declare public readonly nginxDeploymentId: pulumi.Output<string>;

    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateArgs | CertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateState | undefined;
            resourceInputs["certificateVirtualPath"] = state?.certificateVirtualPath;
            resourceInputs["keyVaultSecretId"] = state?.keyVaultSecretId;
            resourceInputs["keyVirtualPath"] = state?.keyVirtualPath;
            resourceInputs["name"] = state?.name;
            resourceInputs["nginxDeploymentId"] = state?.nginxDeploymentId;
        } else {
            const args = argsOrState as CertificateArgs | undefined;
            if (args?.certificateVirtualPath === undefined && !opts.urn) {
                throw new Error("Missing required property 'certificateVirtualPath'");
            }
            if (args?.keyVaultSecretId === undefined && !opts.urn) {
                throw new Error("Missing required property 'keyVaultSecretId'");
            }
            if (args?.keyVirtualPath === undefined && !opts.urn) {
                throw new Error("Missing required property 'keyVirtualPath'");
            }
            if (args?.nginxDeploymentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'nginxDeploymentId'");
            }
            resourceInputs["certificateVirtualPath"] = args?.certificateVirtualPath;
            resourceInputs["keyVaultSecretId"] = args?.keyVaultSecretId;
            resourceInputs["keyVirtualPath"] = args?.keyVirtualPath;
            resourceInputs["name"] = args?.name;
            resourceInputs["nginxDeploymentId"] = args?.nginxDeploymentId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Certificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Certificate resources.
 */
export interface CertificateState {
    /**
     * Specify the path to the certificate file of this certificate.
     */
    certificateVirtualPath?: pulumi.Input<string>;
    /**
     * Specify the ID of the Key Vault Secret for this certificate.
     */
    keyVaultSecretId?: pulumi.Input<string>;
    /**
     * Specify the path to the key file of this certificate.
     */
    keyVirtualPath?: pulumi.Input<string>;
    /**
     * The name which should be used for this NGINX Certificate. Changing this forces a new NGINX Certificate to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the NGINX Deployment that this Certificate should be associated with. Changing this forces a new NGINX Certificate to be created.
     */
    nginxDeploymentId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    /**
     * Specify the path to the certificate file of this certificate.
     */
    certificateVirtualPath: pulumi.Input<string>;
    /**
     * Specify the ID of the Key Vault Secret for this certificate.
     */
    keyVaultSecretId: pulumi.Input<string>;
    /**
     * Specify the path to the key file of this certificate.
     */
    keyVirtualPath: pulumi.Input<string>;
    /**
     * The name which should be used for this NGINX Certificate. Changing this forces a new NGINX Certificate to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the NGINX Deployment that this Certificate should be associated with. Changing this forces a new NGINX Certificate to be created.
     */
    nginxDeploymentId: pulumi.Input<string>;
}
