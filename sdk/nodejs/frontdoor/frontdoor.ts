// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Manages an Azure Front Door instance.
 *
 * Azure Front Door Service is Microsoft's highly available and scalable web application acceleration platform and global HTTP(s) load balancer. It provides built-in DDoS protection and application layer security and caching. Front Door enables you to build applications that maximize and automate high-availability and performance for your end-users. Use Front Door with Azure services including Web/Mobile Apps, Cloud Services and Virtual Machines â€“ or combine it with on-premises services for hybrid deployments and smooth cloud migration.
 *
 * Below are some of the key scenarios that Azure Front Door Service addresses:
 * * Use Front Door to improve application scale and availability with instant multi-region failover
 * * Use Front Door to improve application performance with SSL offload and routing requests to the fastest available application backend.
 * * Use Front Door for application layer security and DDoS protection for your application.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleFrontdoor = new azure.frontdoor.Frontdoor("exampleFrontdoor", {
 *     location: "EastUS2",
 *     resourceGroupName: exampleResourceGroup.name,
 *     enforceBackendPoolsCertificateNameCheck: false,
 *     routingRules: [{
 *         name: "exampleRoutingRule1",
 *         acceptedProtocols: [
 *             "Http",
 *             "Https",
 *         ],
 *         patternsToMatches: ["/*"],
 *         frontendEndpoints: ["exampleFrontendEndpoint1"],
 *         forwardingConfiguration: {
 *             forwardingProtocol: "MatchRequest",
 *             backendPoolName: "exampleBackendBing",
 *         },
 *     }],
 *     backendPoolLoadBalancings: [{
 *         name: "exampleLoadBalancingSettings1",
 *     }],
 *     backendPoolHealthProbes: [{
 *         name: "exampleHealthProbeSetting1",
 *     }],
 *     backendPools: [{
 *         name: "exampleBackendBing",
 *         backends: [{
 *             hostHeader: "www.bing.com",
 *             address: "www.bing.com",
 *             httpPort: 80,
 *             httpsPort: 443,
 *         }],
 *         loadBalancingName: "exampleLoadBalancingSettings1",
 *         healthProbeName: "exampleHealthProbeSetting1",
 *     }],
 *     frontendEndpoints: [{
 *         name: "exampleFrontendEndpoint1",
 *         hostName: "example-FrontDoor.azurefd.net",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Front Doors can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:frontdoor/frontdoor:Frontdoor example /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/mygroup1/providers/Microsoft.Network/frontDoors/frontdoor1
 * ```
 */
export class Frontdoor extends pulumi.CustomResource {
    /**
     * Get an existing Frontdoor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FrontdoorState, opts?: pulumi.CustomResourceOptions): Frontdoor {
        return new Frontdoor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:frontdoor/frontdoor:Frontdoor';

    /**
     * Returns true if the given object is an instance of Frontdoor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Frontdoor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Frontdoor.__pulumiType;
    }

    /**
     * A `backendPoolHealthProbe` block as defined below.
     */
    public readonly backendPoolHealthProbes!: pulumi.Output<outputs.frontdoor.FrontdoorBackendPoolHealthProbe[]>;
    /**
     * A map/dictionary of Backend Pool Health Probe Names (key) to the Backend Pool Health Probe ID (value)
     */
    public /*out*/ readonly backendPoolHealthProbesMap!: pulumi.Output<{[key: string]: string}>;
    /**
     * A map/dictionary of Backend Pool Load Balancing Setting Names (key) to the Backend Pool Load Balancing Setting ID (value)
     */
    public /*out*/ readonly backendPoolLoadBalancingSettingsMap!: pulumi.Output<{[key: string]: string}>;
    /**
     * A `backendPoolLoadBalancing` block as defined below.
     */
    public readonly backendPoolLoadBalancings!: pulumi.Output<outputs.frontdoor.FrontdoorBackendPoolLoadBalancing[]>;
    /**
     * A `backendPool` block as defined below.
     */
    public readonly backendPools!: pulumi.Output<outputs.frontdoor.FrontdoorBackendPool[]>;
    /**
     * A map/dictionary of Backend Pool Names (key) to the Backend Pool ID (value)
     */
    public /*out*/ readonly backendPoolsMap!: pulumi.Output<{[key: string]: string}>;
    /**
     * Specifies the send and receive timeout on forwarding request to the backend. When the timeout is reached, the request fails and returns. Possible values are between `0` - `240`. Defaults to `60`.
     */
    public readonly backendPoolsSendReceiveTimeoutSeconds!: pulumi.Output<number | undefined>;
    /**
     * The host that each frontendEndpoint must CNAME to.
     */
    public /*out*/ readonly cname!: pulumi.Output<string>;
    /**
     * Enforce certificate name check on `HTTPS` requests to all backend pools, this setting will have no effect on `HTTP` requests. Permitted values are `true` or `false`.
     */
    public readonly enforceBackendPoolsCertificateNameCheck!: pulumi.Output<boolean>;
    public /*out*/ readonly explicitResourceOrders!: pulumi.Output<outputs.frontdoor.FrontdoorExplicitResourceOrder[]>;
    /**
     * A friendly name for the Front Door service.
     */
    public readonly friendlyName!: pulumi.Output<string | undefined>;
    /**
     * A `frontendEndpoint` block as defined below.
     */
    public readonly frontendEndpoints!: pulumi.Output<outputs.frontdoor.FrontdoorFrontendEndpoint[]>;
    /**
     * The names of the `frontendEndpoint` blocks within this resource to associate with this `routingRule`.
     */
    public /*out*/ readonly frontendEndpointsMap!: pulumi.Output<{[key: string]: string}>;
    /**
     * The unique ID of the Front Door which is embedded into the incoming headers `X-Azure-FDID` attribute and maybe used to filter traffic sent by the Front Door to your backend.
     */
    public /*out*/ readonly headerFrontdoorId!: pulumi.Output<string>;
    /**
     * Should the Front Door Load Balancer be Enabled? Defaults to `true`.
     */
    public readonly loadBalancerEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created
     *
     * @deprecated Due to the service's API changing 'location' must now always be set to 'Global' for new resources, however if the Front Door service was created prior 2020/03/10 it may continue to exist in a specific current location
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Specifies the name of the Front Door service. Must be globally unique. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the name of the Resource Group in which the Front Door service should exist. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * A `routingRule` block as defined below.
     */
    public readonly routingRules!: pulumi.Output<outputs.frontdoor.FrontdoorRoutingRule[]>;
    /**
     * A map/dictionary of Routing Rule Names (key) to the Routing Rule ID (value)
     */
    public /*out*/ readonly routingRulesMap!: pulumi.Output<{[key: string]: string}>;
    /**
     * A mapping of tags to assign to the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Frontdoor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FrontdoorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FrontdoorArgs | FrontdoorState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FrontdoorState | undefined;
            inputs["backendPoolHealthProbes"] = state ? state.backendPoolHealthProbes : undefined;
            inputs["backendPoolHealthProbesMap"] = state ? state.backendPoolHealthProbesMap : undefined;
            inputs["backendPoolLoadBalancingSettingsMap"] = state ? state.backendPoolLoadBalancingSettingsMap : undefined;
            inputs["backendPoolLoadBalancings"] = state ? state.backendPoolLoadBalancings : undefined;
            inputs["backendPools"] = state ? state.backendPools : undefined;
            inputs["backendPoolsMap"] = state ? state.backendPoolsMap : undefined;
            inputs["backendPoolsSendReceiveTimeoutSeconds"] = state ? state.backendPoolsSendReceiveTimeoutSeconds : undefined;
            inputs["cname"] = state ? state.cname : undefined;
            inputs["enforceBackendPoolsCertificateNameCheck"] = state ? state.enforceBackendPoolsCertificateNameCheck : undefined;
            inputs["explicitResourceOrders"] = state ? state.explicitResourceOrders : undefined;
            inputs["friendlyName"] = state ? state.friendlyName : undefined;
            inputs["frontendEndpoints"] = state ? state.frontendEndpoints : undefined;
            inputs["frontendEndpointsMap"] = state ? state.frontendEndpointsMap : undefined;
            inputs["headerFrontdoorId"] = state ? state.headerFrontdoorId : undefined;
            inputs["loadBalancerEnabled"] = state ? state.loadBalancerEnabled : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["routingRules"] = state ? state.routingRules : undefined;
            inputs["routingRulesMap"] = state ? state.routingRulesMap : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as FrontdoorArgs | undefined;
            if ((!args || args.backendPoolHealthProbes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backendPoolHealthProbes'");
            }
            if ((!args || args.backendPoolLoadBalancings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backendPoolLoadBalancings'");
            }
            if ((!args || args.backendPools === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backendPools'");
            }
            if ((!args || args.enforceBackendPoolsCertificateNameCheck === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enforceBackendPoolsCertificateNameCheck'");
            }
            if ((!args || args.frontendEndpoints === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frontendEndpoints'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.routingRules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routingRules'");
            }
            inputs["backendPoolHealthProbes"] = args ? args.backendPoolHealthProbes : undefined;
            inputs["backendPoolLoadBalancings"] = args ? args.backendPoolLoadBalancings : undefined;
            inputs["backendPools"] = args ? args.backendPools : undefined;
            inputs["backendPoolsSendReceiveTimeoutSeconds"] = args ? args.backendPoolsSendReceiveTimeoutSeconds : undefined;
            inputs["enforceBackendPoolsCertificateNameCheck"] = args ? args.enforceBackendPoolsCertificateNameCheck : undefined;
            inputs["friendlyName"] = args ? args.friendlyName : undefined;
            inputs["frontendEndpoints"] = args ? args.frontendEndpoints : undefined;
            inputs["loadBalancerEnabled"] = args ? args.loadBalancerEnabled : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["routingRules"] = args ? args.routingRules : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["backendPoolHealthProbesMap"] = undefined /*out*/;
            inputs["backendPoolLoadBalancingSettingsMap"] = undefined /*out*/;
            inputs["backendPoolsMap"] = undefined /*out*/;
            inputs["cname"] = undefined /*out*/;
            inputs["explicitResourceOrders"] = undefined /*out*/;
            inputs["frontendEndpointsMap"] = undefined /*out*/;
            inputs["headerFrontdoorId"] = undefined /*out*/;
            inputs["routingRulesMap"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Frontdoor.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Frontdoor resources.
 */
export interface FrontdoorState {
    /**
     * A `backendPoolHealthProbe` block as defined below.
     */
    backendPoolHealthProbes?: pulumi.Input<pulumi.Input<inputs.frontdoor.FrontdoorBackendPoolHealthProbe>[]>;
    /**
     * A map/dictionary of Backend Pool Health Probe Names (key) to the Backend Pool Health Probe ID (value)
     */
    backendPoolHealthProbesMap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map/dictionary of Backend Pool Load Balancing Setting Names (key) to the Backend Pool Load Balancing Setting ID (value)
     */
    backendPoolLoadBalancingSettingsMap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A `backendPoolLoadBalancing` block as defined below.
     */
    backendPoolLoadBalancings?: pulumi.Input<pulumi.Input<inputs.frontdoor.FrontdoorBackendPoolLoadBalancing>[]>;
    /**
     * A `backendPool` block as defined below.
     */
    backendPools?: pulumi.Input<pulumi.Input<inputs.frontdoor.FrontdoorBackendPool>[]>;
    /**
     * A map/dictionary of Backend Pool Names (key) to the Backend Pool ID (value)
     */
    backendPoolsMap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the send and receive timeout on forwarding request to the backend. When the timeout is reached, the request fails and returns. Possible values are between `0` - `240`. Defaults to `60`.
     */
    backendPoolsSendReceiveTimeoutSeconds?: pulumi.Input<number>;
    /**
     * The host that each frontendEndpoint must CNAME to.
     */
    cname?: pulumi.Input<string>;
    /**
     * Enforce certificate name check on `HTTPS` requests to all backend pools, this setting will have no effect on `HTTP` requests. Permitted values are `true` or `false`.
     */
    enforceBackendPoolsCertificateNameCheck?: pulumi.Input<boolean>;
    explicitResourceOrders?: pulumi.Input<pulumi.Input<inputs.frontdoor.FrontdoorExplicitResourceOrder>[]>;
    /**
     * A friendly name for the Front Door service.
     */
    friendlyName?: pulumi.Input<string>;
    /**
     * A `frontendEndpoint` block as defined below.
     */
    frontendEndpoints?: pulumi.Input<pulumi.Input<inputs.frontdoor.FrontdoorFrontendEndpoint>[]>;
    /**
     * The names of the `frontendEndpoint` blocks within this resource to associate with this `routingRule`.
     */
    frontendEndpointsMap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The unique ID of the Front Door which is embedded into the incoming headers `X-Azure-FDID` attribute and maybe used to filter traffic sent by the Front Door to your backend.
     */
    headerFrontdoorId?: pulumi.Input<string>;
    /**
     * Should the Front Door Load Balancer be Enabled? Defaults to `true`.
     */
    loadBalancerEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created
     *
     * @deprecated Due to the service's API changing 'location' must now always be set to 'Global' for new resources, however if the Front Door service was created prior 2020/03/10 it may continue to exist in a specific current location
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of the Front Door service. Must be globally unique. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the name of the Resource Group in which the Front Door service should exist. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A `routingRule` block as defined below.
     */
    routingRules?: pulumi.Input<pulumi.Input<inputs.frontdoor.FrontdoorRoutingRule>[]>;
    /**
     * A map/dictionary of Routing Rule Names (key) to the Routing Rule ID (value)
     */
    routingRulesMap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Frontdoor resource.
 */
export interface FrontdoorArgs {
    /**
     * A `backendPoolHealthProbe` block as defined below.
     */
    backendPoolHealthProbes: pulumi.Input<pulumi.Input<inputs.frontdoor.FrontdoorBackendPoolHealthProbe>[]>;
    /**
     * A `backendPoolLoadBalancing` block as defined below.
     */
    backendPoolLoadBalancings: pulumi.Input<pulumi.Input<inputs.frontdoor.FrontdoorBackendPoolLoadBalancing>[]>;
    /**
     * A `backendPool` block as defined below.
     */
    backendPools: pulumi.Input<pulumi.Input<inputs.frontdoor.FrontdoorBackendPool>[]>;
    /**
     * Specifies the send and receive timeout on forwarding request to the backend. When the timeout is reached, the request fails and returns. Possible values are between `0` - `240`. Defaults to `60`.
     */
    backendPoolsSendReceiveTimeoutSeconds?: pulumi.Input<number>;
    /**
     * Enforce certificate name check on `HTTPS` requests to all backend pools, this setting will have no effect on `HTTP` requests. Permitted values are `true` or `false`.
     */
    enforceBackendPoolsCertificateNameCheck: pulumi.Input<boolean>;
    /**
     * A friendly name for the Front Door service.
     */
    friendlyName?: pulumi.Input<string>;
    /**
     * A `frontendEndpoint` block as defined below.
     */
    frontendEndpoints: pulumi.Input<pulumi.Input<inputs.frontdoor.FrontdoorFrontendEndpoint>[]>;
    /**
     * Should the Front Door Load Balancer be Enabled? Defaults to `true`.
     */
    loadBalancerEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created
     *
     * @deprecated Due to the service's API changing 'location' must now always be set to 'Global' for new resources, however if the Front Door service was created prior 2020/03/10 it may continue to exist in a specific current location
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of the Front Door service. Must be globally unique. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the name of the Resource Group in which the Front Door service should exist. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A `routingRule` block as defined below.
     */
    routingRules: pulumi.Input<pulumi.Input<inputs.frontdoor.FrontdoorRoutingRule>[]>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
