// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * !> **IMPORTANT** This deploys an Azure Front Door (classic) resource which has been deprecated and will receive security updates only. Please migrate your existing Azure Front Door (classic) deployments to the new Azure Front Door (standard/premium) resources. For your convenience, the service team has exposed a `Front Door Classic` to `Front Door Standard/Premium` [migration tool](https://learn.microsoft.com/azure/frontdoor/tier-migration) to allow you to migrate your existing `Front Door Classic` instances to the new `Front Door Standard/Premium` product tiers.
 *
 * Manages the Custom HTTPS Configuration for an Azure Front Door (classic) Frontend Endpoint.
 *
 * > **NOTE:** Defining custom HTTPS configurations using a separate `azure.frontdoor.CustomHttpsConfiguration` resource allows for parallel creation/update.
 *
 * !> **BREAKING CHANGE:** In order to address the ordering issue we have changed the design on how to retrieve existing sub resources such as frontend endpoints. Existing design will be deprecated and will result in an incorrect configuration. Please refer to the updated documentation below for more information.
 *
 * !> **BREAKING CHANGE:** The `resourceGroupName` field has been removed as of the `v2.58.0` provider release. If the `resourceGroupName` field has been defined in your current `azure.frontdoor.CustomHttpsConfiguration` resource configuration file please remove it else you will receive a `An argument named "resourceGroupName" is not expected here.` error. If your pre-existing Front Door instance contained inline `customHttpsConfiguration` blocks there are additional steps that will need to be completed to successfully migrate your Front Door onto the `v2.58.0` provider which can be found in this guide.
 *
 * !> **Be Aware:** Azure is rolling out a breaking change on Friday 9th April 2021 which may cause issues with the CDN/FrontDoor resources. More information is available in this GitHub issue as the necessary changes are identified.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const vault = azure.keyvault.getKeyVault({
 *     name: "example-vault",
 *     resourceGroupName: "example-vault-rg",
 * });
 * const exampleFrontdoor = new azure.frontdoor.Frontdoor("exampleFrontdoor", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     routingRules: [{
 *         name: "exampleRoutingRule1",
 *         acceptedProtocols: [
 *             "Http",
 *             "Https",
 *         ],
 *         patternsToMatches: ["/*"],
 *         frontendEndpoints: ["exampleFrontendEndpoint1"],
 *         forwardingConfiguration: {
 *             forwardingProtocol: "MatchRequest",
 *             backendPoolName: "exampleBackendBing",
 *         },
 *     }],
 *     backendPoolLoadBalancings: [{
 *         name: "exampleLoadBalancingSettings1",
 *     }],
 *     backendPoolHealthProbes: [{
 *         name: "exampleHealthProbeSetting1",
 *     }],
 *     backendPools: [{
 *         name: "exampleBackendBing",
 *         backends: [{
 *             hostHeader: "www.bing.com",
 *             address: "www.bing.com",
 *             httpPort: 80,
 *             httpsPort: 443,
 *         }],
 *         loadBalancingName: "exampleLoadBalancingSettings1",
 *         healthProbeName: "exampleHealthProbeSetting1",
 *     }],
 *     frontendEndpoints: [
 *         {
 *             name: "exampleFrontendEndpoint1",
 *             hostName: "example-FrontDoor.azurefd.net",
 *         },
 *         {
 *             name: "exampleFrontendEndpoint2",
 *             hostName: "examplefd1.examplefd.net",
 *         },
 *     ],
 * });
 * const exampleCustomHttps0 = new azure.frontdoor.CustomHttpsConfiguration("exampleCustomHttps0", {
 *     frontendEndpointId: exampleFrontdoor.frontendEndpointsMap.exampleFrontendEndpoint1,
 *     customHttpsProvisioningEnabled: false,
 * });
 * const exampleCustomHttps1 = new azure.frontdoor.CustomHttpsConfiguration("exampleCustomHttps1", {
 *     frontendEndpointId: exampleFrontdoor.frontendEndpointsMap.exampleFrontendEndpoint2,
 *     customHttpsProvisioningEnabled: true,
 *     customHttpsConfiguration: {
 *         certificateSource: "AzureKeyVault",
 *         azureKeyVaultCertificateSecretName: "examplefd1",
 *         azureKeyVaultCertificateVaultId: vault.then(vault => vault.id),
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Front Door Custom HTTPS Configurations can be imported using the `resource id` of the Front Door Custom HTTPS Configuration, e.g.
 *
 * ```sh
 *  $ pulumi import azure:frontdoor/customHttpsConfiguration:CustomHttpsConfiguration example_custom_https_1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/frontDoors/frontdoor1/customHttpsConfiguration/endpoint1
 * ```
 */
export class CustomHttpsConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing CustomHttpsConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomHttpsConfigurationState, opts?: pulumi.CustomResourceOptions): CustomHttpsConfiguration {
        return new CustomHttpsConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:frontdoor/customHttpsConfiguration:CustomHttpsConfiguration';

    /**
     * Returns true if the given object is an instance of CustomHttpsConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomHttpsConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomHttpsConfiguration.__pulumiType;
    }

    /**
     * A `customHttpsConfiguration` block as defined above.
     */
    public readonly customHttpsConfiguration!: pulumi.Output<outputs.frontdoor.CustomHttpsConfigurationCustomHttpsConfiguration | undefined>;
    /**
     * Should the HTTPS protocol be enabled for this custom domain associated with the Front Door?
     */
    public readonly customHttpsProvisioningEnabled!: pulumi.Output<boolean>;
    /**
     * The ID of the Front Door Frontend Endpoint which this configuration refers to. Changing this forces a new resource to be created.
     */
    public readonly frontendEndpointId!: pulumi.Output<string>;

    /**
     * Create a CustomHttpsConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomHttpsConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomHttpsConfigurationArgs | CustomHttpsConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomHttpsConfigurationState | undefined;
            resourceInputs["customHttpsConfiguration"] = state ? state.customHttpsConfiguration : undefined;
            resourceInputs["customHttpsProvisioningEnabled"] = state ? state.customHttpsProvisioningEnabled : undefined;
            resourceInputs["frontendEndpointId"] = state ? state.frontendEndpointId : undefined;
        } else {
            const args = argsOrState as CustomHttpsConfigurationArgs | undefined;
            if ((!args || args.customHttpsProvisioningEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'customHttpsProvisioningEnabled'");
            }
            if ((!args || args.frontendEndpointId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frontendEndpointId'");
            }
            resourceInputs["customHttpsConfiguration"] = args ? args.customHttpsConfiguration : undefined;
            resourceInputs["customHttpsProvisioningEnabled"] = args ? args.customHttpsProvisioningEnabled : undefined;
            resourceInputs["frontendEndpointId"] = args ? args.frontendEndpointId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomHttpsConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomHttpsConfiguration resources.
 */
export interface CustomHttpsConfigurationState {
    /**
     * A `customHttpsConfiguration` block as defined above.
     */
    customHttpsConfiguration?: pulumi.Input<inputs.frontdoor.CustomHttpsConfigurationCustomHttpsConfiguration>;
    /**
     * Should the HTTPS protocol be enabled for this custom domain associated with the Front Door?
     */
    customHttpsProvisioningEnabled?: pulumi.Input<boolean>;
    /**
     * The ID of the Front Door Frontend Endpoint which this configuration refers to. Changing this forces a new resource to be created.
     */
    frontendEndpointId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CustomHttpsConfiguration resource.
 */
export interface CustomHttpsConfigurationArgs {
    /**
     * A `customHttpsConfiguration` block as defined above.
     */
    customHttpsConfiguration?: pulumi.Input<inputs.frontdoor.CustomHttpsConfigurationCustomHttpsConfiguration>;
    /**
     * Should the HTTPS protocol be enabled for this custom domain associated with the Front Door?
     */
    customHttpsProvisioningEnabled: pulumi.Input<boolean>;
    /**
     * The ID of the Front Door Frontend Endpoint which this configuration refers to. Changing this forces a new resource to be created.
     */
    frontendEndpointId: pulumi.Input<string>;
}
