// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Threat Intelligence Data Connector.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-rg",
 *     location: "West Europe",
 * });
 * const exampleAnalyticsWorkspace = new azure.operationalinsights.AnalyticsWorkspace("example", {
 *     name: "example-workspace",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: "PerGB2018",
 * });
 * const exampleLogAnalyticsWorkspaceOnboarding = new azure.sentinel.LogAnalyticsWorkspaceOnboarding("example", {workspaceId: exampleAnalyticsWorkspace.id});
 * const exampleDataConnectorThreatIntelligence = new azure.sentinel.DataConnectorThreatIntelligence("example", {
 *     name: "example",
 *     logAnalyticsWorkspaceId: exampleLogAnalyticsWorkspaceOnboarding.workspaceId,
 * });
 * ```
 *
 * ## Import
 *
 * Threat Intelligence Data Connectors can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:sentinel/dataConnectorThreatIntelligence:DataConnectorThreatIntelligence example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.OperationalInsights/workspaces/workspace1/providers/Microsoft.SecurityInsights/dataConnectors/dc1
 * ```
 */
export class DataConnectorThreatIntelligence extends pulumi.CustomResource {
    /**
     * Get an existing DataConnectorThreatIntelligence resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataConnectorThreatIntelligenceState, opts?: pulumi.CustomResourceOptions): DataConnectorThreatIntelligence {
        return new DataConnectorThreatIntelligence(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:sentinel/dataConnectorThreatIntelligence:DataConnectorThreatIntelligence';

    /**
     * Returns true if the given object is an instance of DataConnectorThreatIntelligence.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataConnectorThreatIntelligence {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataConnectorThreatIntelligence.__pulumiType;
    }

    /**
     * The ID of the Log Analytics Workspace that this Threat Intelligence Data Connector resides in. Changing this forces a new Threat Intelligence Data Connector to be created.
     */
    declare public readonly logAnalyticsWorkspaceId: pulumi.Output<string>;
    /**
     * The lookback date for the this Threat Intelligence Data Connector in RFC3339. Defaults to `1970-01-01T00:00:00Z`. Changing this forces a new resource to be created.
     */
    declare public readonly lookbackDate: pulumi.Output<string | undefined>;
    /**
     * The name which should be used for this Threat Intelligence Data Connector. Changing this forces a new Threat Intelligence Data Connector to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID of the tenant that this Threat Intelligence Data Connector connects to. Changing this forces a new Threat Intelligence Data Connector to be created.
     *
     * > **Note:** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
     */
    declare public readonly tenantId: pulumi.Output<string>;

    /**
     * Create a DataConnectorThreatIntelligence resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataConnectorThreatIntelligenceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataConnectorThreatIntelligenceArgs | DataConnectorThreatIntelligenceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataConnectorThreatIntelligenceState | undefined;
            resourceInputs["logAnalyticsWorkspaceId"] = state?.logAnalyticsWorkspaceId;
            resourceInputs["lookbackDate"] = state?.lookbackDate;
            resourceInputs["name"] = state?.name;
            resourceInputs["tenantId"] = state?.tenantId;
        } else {
            const args = argsOrState as DataConnectorThreatIntelligenceArgs | undefined;
            if (args?.logAnalyticsWorkspaceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'logAnalyticsWorkspaceId'");
            }
            resourceInputs["logAnalyticsWorkspaceId"] = args?.logAnalyticsWorkspaceId;
            resourceInputs["lookbackDate"] = args?.lookbackDate;
            resourceInputs["name"] = args?.name;
            resourceInputs["tenantId"] = args?.tenantId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataConnectorThreatIntelligence.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DataConnectorThreatIntelligence resources.
 */
export interface DataConnectorThreatIntelligenceState {
    /**
     * The ID of the Log Analytics Workspace that this Threat Intelligence Data Connector resides in. Changing this forces a new Threat Intelligence Data Connector to be created.
     */
    logAnalyticsWorkspaceId?: pulumi.Input<string>;
    /**
     * The lookback date for the this Threat Intelligence Data Connector in RFC3339. Defaults to `1970-01-01T00:00:00Z`. Changing this forces a new resource to be created.
     */
    lookbackDate?: pulumi.Input<string>;
    /**
     * The name which should be used for this Threat Intelligence Data Connector. Changing this forces a new Threat Intelligence Data Connector to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the tenant that this Threat Intelligence Data Connector connects to. Changing this forces a new Threat Intelligence Data Connector to be created.
     *
     * > **Note:** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
     */
    tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DataConnectorThreatIntelligence resource.
 */
export interface DataConnectorThreatIntelligenceArgs {
    /**
     * The ID of the Log Analytics Workspace that this Threat Intelligence Data Connector resides in. Changing this forces a new Threat Intelligence Data Connector to be created.
     */
    logAnalyticsWorkspaceId: pulumi.Input<string>;
    /**
     * The lookback date for the this Threat Intelligence Data Connector in RFC3339. Defaults to `1970-01-01T00:00:00Z`. Changing this forces a new resource to be created.
     */
    lookbackDate?: pulumi.Input<string>;
    /**
     * The name which should be used for this Threat Intelligence Data Connector. Changing this forces a new Threat Intelligence Data Connector to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the tenant that this Threat Intelligence Data Connector connects to. Changing this forces a new Threat Intelligence Data Connector to be created.
     *
     * > **Note:** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
     */
    tenantId?: pulumi.Input<string>;
}
