// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Backup Policy Disk.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleBackupVault = new azure.dataprotection.BackupVault("exampleBackupVault", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     datastoreType: "VaultStore",
 *     redundancy: "LocallyRedundant",
 * });
 * const exampleBackupPolicyDisk = new azure.dataprotection.BackupPolicyDisk("exampleBackupPolicyDisk", {
 *     vaultId: exampleBackupVault.id,
 *     backupRepeatingTimeIntervals: ["R/2021-05-19T06:33:16+00:00/PT4H"],
 *     defaultRetentionDuration: "P7D",
 *     timeZone: "W. Europe Standard Time",
 *     retentionRules: [
 *         {
 *             name: "Daily",
 *             duration: "P7D",
 *             priority: 25,
 *             criteria: {
 *                 absoluteCriteria: "FirstOfDay",
 *             },
 *         },
 *         {
 *             name: "Weekly",
 *             duration: "P7D",
 *             priority: 20,
 *             criteria: {
 *                 absoluteCriteria: "FirstOfWeek",
 *             },
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Backup Policy Disks can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:dataprotection/backupPolicyDisk:BackupPolicyDisk example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataProtection/backupVaults/vault1/backupPolicies/backupPolicy1
 * ```
 */
export class BackupPolicyDisk extends pulumi.CustomResource {
    /**
     * Get an existing BackupPolicyDisk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackupPolicyDiskState, opts?: pulumi.CustomResourceOptions): BackupPolicyDisk {
        return new BackupPolicyDisk(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:dataprotection/backupPolicyDisk:BackupPolicyDisk';

    /**
     * Returns true if the given object is an instance of BackupPolicyDisk.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BackupPolicyDisk {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BackupPolicyDisk.__pulumiType;
    }

    /**
     * Specifies a list of repeating time interval. It should follow `ISO 8601` repeating time interval . Changing this forces a new Backup Policy Disk to be created.
     */
    public readonly backupRepeatingTimeIntervals!: pulumi.Output<string[]>;
    /**
     * The duration of default retention rule. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy Disk to be created.
     */
    public readonly defaultRetentionDuration!: pulumi.Output<string>;
    /**
     * The name which should be used for this Backup Policy Disk. Changing this forces a new Backup Policy Disk to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * One or more `retentionRule` blocks as defined below. Changing this forces a new Backup Policy Disk to be created.
     */
    public readonly retentionRules!: pulumi.Output<outputs.dataprotection.BackupPolicyDiskRetentionRule[] | undefined>;
    /**
     * Specifies the Time Zone which should be used by the backup schedule. Changing this forces a new Backup Policy Disk to be created.
     */
    public readonly timeZone!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Backup Vault within which the Backup Policy Disk should exist. Changing this forces a new Backup Policy Disk to be created.
     */
    public readonly vaultId!: pulumi.Output<string>;

    /**
     * Create a BackupPolicyDisk resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackupPolicyDiskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackupPolicyDiskArgs | BackupPolicyDiskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackupPolicyDiskState | undefined;
            resourceInputs["backupRepeatingTimeIntervals"] = state ? state.backupRepeatingTimeIntervals : undefined;
            resourceInputs["defaultRetentionDuration"] = state ? state.defaultRetentionDuration : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["retentionRules"] = state ? state.retentionRules : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
            resourceInputs["vaultId"] = state ? state.vaultId : undefined;
        } else {
            const args = argsOrState as BackupPolicyDiskArgs | undefined;
            if ((!args || args.backupRepeatingTimeIntervals === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backupRepeatingTimeIntervals'");
            }
            if ((!args || args.defaultRetentionDuration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultRetentionDuration'");
            }
            if ((!args || args.vaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vaultId'");
            }
            resourceInputs["backupRepeatingTimeIntervals"] = args ? args.backupRepeatingTimeIntervals : undefined;
            resourceInputs["defaultRetentionDuration"] = args ? args.defaultRetentionDuration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["retentionRules"] = args ? args.retentionRules : undefined;
            resourceInputs["timeZone"] = args ? args.timeZone : undefined;
            resourceInputs["vaultId"] = args ? args.vaultId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BackupPolicyDisk.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BackupPolicyDisk resources.
 */
export interface BackupPolicyDiskState {
    /**
     * Specifies a list of repeating time interval. It should follow `ISO 8601` repeating time interval . Changing this forces a new Backup Policy Disk to be created.
     */
    backupRepeatingTimeIntervals?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The duration of default retention rule. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy Disk to be created.
     */
    defaultRetentionDuration?: pulumi.Input<string>;
    /**
     * The name which should be used for this Backup Policy Disk. Changing this forces a new Backup Policy Disk to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * One or more `retentionRule` blocks as defined below. Changing this forces a new Backup Policy Disk to be created.
     */
    retentionRules?: pulumi.Input<pulumi.Input<inputs.dataprotection.BackupPolicyDiskRetentionRule>[]>;
    /**
     * Specifies the Time Zone which should be used by the backup schedule. Changing this forces a new Backup Policy Disk to be created.
     */
    timeZone?: pulumi.Input<string>;
    /**
     * The ID of the Backup Vault within which the Backup Policy Disk should exist. Changing this forces a new Backup Policy Disk to be created.
     */
    vaultId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BackupPolicyDisk resource.
 */
export interface BackupPolicyDiskArgs {
    /**
     * Specifies a list of repeating time interval. It should follow `ISO 8601` repeating time interval . Changing this forces a new Backup Policy Disk to be created.
     */
    backupRepeatingTimeIntervals: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The duration of default retention rule. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy Disk to be created.
     */
    defaultRetentionDuration: pulumi.Input<string>;
    /**
     * The name which should be used for this Backup Policy Disk. Changing this forces a new Backup Policy Disk to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * One or more `retentionRule` blocks as defined below. Changing this forces a new Backup Policy Disk to be created.
     */
    retentionRules?: pulumi.Input<pulumi.Input<inputs.dataprotection.BackupPolicyDiskRetentionRule>[]>;
    /**
     * Specifies the Time Zone which should be used by the backup schedule. Changing this forces a new Backup Policy Disk to be created.
     */
    timeZone?: pulumi.Input<string>;
    /**
     * The ID of the Backup Vault within which the Backup Policy Disk should exist. Changing this forces a new Backup Policy Disk to be created.
     */
    vaultId: pulumi.Input<string>;
}
