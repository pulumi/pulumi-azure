// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BackupInstanceBlogStorageArgs, BackupInstanceBlogStorageState } from "./backupInstanceBlogStorage";
export type BackupInstanceBlogStorage = import("./backupInstanceBlogStorage").BackupInstanceBlogStorage;
export const BackupInstanceBlogStorage: typeof import("./backupInstanceBlogStorage").BackupInstanceBlogStorage = null as any;
utilities.lazyLoad(exports, ["BackupInstanceBlogStorage"], () => require("./backupInstanceBlogStorage"));

export { BackupInstanceDiskArgs, BackupInstanceDiskState } from "./backupInstanceDisk";
export type BackupInstanceDisk = import("./backupInstanceDisk").BackupInstanceDisk;
export const BackupInstanceDisk: typeof import("./backupInstanceDisk").BackupInstanceDisk = null as any;
utilities.lazyLoad(exports, ["BackupInstanceDisk"], () => require("./backupInstanceDisk"));

export { BackupInstanceKubernetesClusterArgs, BackupInstanceKubernetesClusterState } from "./backupInstanceKubernetesCluster";
export type BackupInstanceKubernetesCluster = import("./backupInstanceKubernetesCluster").BackupInstanceKubernetesCluster;
export const BackupInstanceKubernetesCluster: typeof import("./backupInstanceKubernetesCluster").BackupInstanceKubernetesCluster = null as any;
utilities.lazyLoad(exports, ["BackupInstanceKubernetesCluster"], () => require("./backupInstanceKubernetesCluster"));

export { BackupInstanceMysqlFlexibleServerArgs, BackupInstanceMysqlFlexibleServerState } from "./backupInstanceMysqlFlexibleServer";
export type BackupInstanceMysqlFlexibleServer = import("./backupInstanceMysqlFlexibleServer").BackupInstanceMysqlFlexibleServer;
export const BackupInstanceMysqlFlexibleServer: typeof import("./backupInstanceMysqlFlexibleServer").BackupInstanceMysqlFlexibleServer = null as any;
utilities.lazyLoad(exports, ["BackupInstanceMysqlFlexibleServer"], () => require("./backupInstanceMysqlFlexibleServer"));

export { BackupInstancePostgresqlArgs, BackupInstancePostgresqlState } from "./backupInstancePostgresql";
export type BackupInstancePostgresql = import("./backupInstancePostgresql").BackupInstancePostgresql;
export const BackupInstancePostgresql: typeof import("./backupInstancePostgresql").BackupInstancePostgresql = null as any;
utilities.lazyLoad(exports, ["BackupInstancePostgresql"], () => require("./backupInstancePostgresql"));

export { BackupInstancePostgresqlFlexibleServerArgs, BackupInstancePostgresqlFlexibleServerState } from "./backupInstancePostgresqlFlexibleServer";
export type BackupInstancePostgresqlFlexibleServer = import("./backupInstancePostgresqlFlexibleServer").BackupInstancePostgresqlFlexibleServer;
export const BackupInstancePostgresqlFlexibleServer: typeof import("./backupInstancePostgresqlFlexibleServer").BackupInstancePostgresqlFlexibleServer = null as any;
utilities.lazyLoad(exports, ["BackupInstancePostgresqlFlexibleServer"], () => require("./backupInstancePostgresqlFlexibleServer"));

export { BackupPolicyBlobStorageArgs, BackupPolicyBlobStorageState } from "./backupPolicyBlobStorage";
export type BackupPolicyBlobStorage = import("./backupPolicyBlobStorage").BackupPolicyBlobStorage;
export const BackupPolicyBlobStorage: typeof import("./backupPolicyBlobStorage").BackupPolicyBlobStorage = null as any;
utilities.lazyLoad(exports, ["BackupPolicyBlobStorage"], () => require("./backupPolicyBlobStorage"));

export { BackupPolicyDiskArgs, BackupPolicyDiskState } from "./backupPolicyDisk";
export type BackupPolicyDisk = import("./backupPolicyDisk").BackupPolicyDisk;
export const BackupPolicyDisk: typeof import("./backupPolicyDisk").BackupPolicyDisk = null as any;
utilities.lazyLoad(exports, ["BackupPolicyDisk"], () => require("./backupPolicyDisk"));

export { BackupPolicyKubernetesClusterArgs, BackupPolicyKubernetesClusterState } from "./backupPolicyKubernetesCluster";
export type BackupPolicyKubernetesCluster = import("./backupPolicyKubernetesCluster").BackupPolicyKubernetesCluster;
export const BackupPolicyKubernetesCluster: typeof import("./backupPolicyKubernetesCluster").BackupPolicyKubernetesCluster = null as any;
utilities.lazyLoad(exports, ["BackupPolicyKubernetesCluster"], () => require("./backupPolicyKubernetesCluster"));

export { BackupPolicyMysqlFlexibleServerArgs, BackupPolicyMysqlFlexibleServerState } from "./backupPolicyMysqlFlexibleServer";
export type BackupPolicyMysqlFlexibleServer = import("./backupPolicyMysqlFlexibleServer").BackupPolicyMysqlFlexibleServer;
export const BackupPolicyMysqlFlexibleServer: typeof import("./backupPolicyMysqlFlexibleServer").BackupPolicyMysqlFlexibleServer = null as any;
utilities.lazyLoad(exports, ["BackupPolicyMysqlFlexibleServer"], () => require("./backupPolicyMysqlFlexibleServer"));

export { BackupPolicyPostgresqlArgs, BackupPolicyPostgresqlState } from "./backupPolicyPostgresql";
export type BackupPolicyPostgresql = import("./backupPolicyPostgresql").BackupPolicyPostgresql;
export const BackupPolicyPostgresql: typeof import("./backupPolicyPostgresql").BackupPolicyPostgresql = null as any;
utilities.lazyLoad(exports, ["BackupPolicyPostgresql"], () => require("./backupPolicyPostgresql"));

export { BackupPolicyPostgresqlFlexibleServerArgs, BackupPolicyPostgresqlFlexibleServerState } from "./backupPolicyPostgresqlFlexibleServer";
export type BackupPolicyPostgresqlFlexibleServer = import("./backupPolicyPostgresqlFlexibleServer").BackupPolicyPostgresqlFlexibleServer;
export const BackupPolicyPostgresqlFlexibleServer: typeof import("./backupPolicyPostgresqlFlexibleServer").BackupPolicyPostgresqlFlexibleServer = null as any;
utilities.lazyLoad(exports, ["BackupPolicyPostgresqlFlexibleServer"], () => require("./backupPolicyPostgresqlFlexibleServer"));

export { BackupVaultArgs, BackupVaultState } from "./backupVault";
export type BackupVault = import("./backupVault").BackupVault;
export const BackupVault: typeof import("./backupVault").BackupVault = null as any;
utilities.lazyLoad(exports, ["BackupVault"], () => require("./backupVault"));

export { BackupVaultCustomerManagedKeyArgs, BackupVaultCustomerManagedKeyState } from "./backupVaultCustomerManagedKey";
export type BackupVaultCustomerManagedKey = import("./backupVaultCustomerManagedKey").BackupVaultCustomerManagedKey;
export const BackupVaultCustomerManagedKey: typeof import("./backupVaultCustomerManagedKey").BackupVaultCustomerManagedKey = null as any;
utilities.lazyLoad(exports, ["BackupVaultCustomerManagedKey"], () => require("./backupVaultCustomerManagedKey"));

export { GetBackupVaultArgs, GetBackupVaultResult, GetBackupVaultOutputArgs } from "./getBackupVault";
export const getBackupVault: typeof import("./getBackupVault").getBackupVault = null as any;
export const getBackupVaultOutput: typeof import("./getBackupVault").getBackupVaultOutput = null as any;
utilities.lazyLoad(exports, ["getBackupVault","getBackupVaultOutput"], () => require("./getBackupVault"));

export { ResourceGuardArgs, ResourceGuardState } from "./resourceGuard";
export type ResourceGuard = import("./resourceGuard").ResourceGuard;
export const ResourceGuard: typeof import("./resourceGuard").ResourceGuard = null as any;
utilities.lazyLoad(exports, ["ResourceGuard"], () => require("./resourceGuard"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:dataprotection/backupInstanceBlogStorage:BackupInstanceBlogStorage":
                return new BackupInstanceBlogStorage(name, <any>undefined, { urn })
            case "azure:dataprotection/backupInstanceDisk:BackupInstanceDisk":
                return new BackupInstanceDisk(name, <any>undefined, { urn })
            case "azure:dataprotection/backupInstanceKubernetesCluster:BackupInstanceKubernetesCluster":
                return new BackupInstanceKubernetesCluster(name, <any>undefined, { urn })
            case "azure:dataprotection/backupInstanceMysqlFlexibleServer:BackupInstanceMysqlFlexibleServer":
                return new BackupInstanceMysqlFlexibleServer(name, <any>undefined, { urn })
            case "azure:dataprotection/backupInstancePostgresql:BackupInstancePostgresql":
                return new BackupInstancePostgresql(name, <any>undefined, { urn })
            case "azure:dataprotection/backupInstancePostgresqlFlexibleServer:BackupInstancePostgresqlFlexibleServer":
                return new BackupInstancePostgresqlFlexibleServer(name, <any>undefined, { urn })
            case "azure:dataprotection/backupPolicyBlobStorage:BackupPolicyBlobStorage":
                return new BackupPolicyBlobStorage(name, <any>undefined, { urn })
            case "azure:dataprotection/backupPolicyDisk:BackupPolicyDisk":
                return new BackupPolicyDisk(name, <any>undefined, { urn })
            case "azure:dataprotection/backupPolicyKubernetesCluster:BackupPolicyKubernetesCluster":
                return new BackupPolicyKubernetesCluster(name, <any>undefined, { urn })
            case "azure:dataprotection/backupPolicyMysqlFlexibleServer:BackupPolicyMysqlFlexibleServer":
                return new BackupPolicyMysqlFlexibleServer(name, <any>undefined, { urn })
            case "azure:dataprotection/backupPolicyPostgresql:BackupPolicyPostgresql":
                return new BackupPolicyPostgresql(name, <any>undefined, { urn })
            case "azure:dataprotection/backupPolicyPostgresqlFlexibleServer:BackupPolicyPostgresqlFlexibleServer":
                return new BackupPolicyPostgresqlFlexibleServer(name, <any>undefined, { urn })
            case "azure:dataprotection/backupVault:BackupVault":
                return new BackupVault(name, <any>undefined, { urn })
            case "azure:dataprotection/backupVaultCustomerManagedKey:BackupVaultCustomerManagedKey":
                return new BackupVaultCustomerManagedKey(name, <any>undefined, { urn })
            case "azure:dataprotection/resourceGuard:ResourceGuard":
                return new ResourceGuard(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "dataprotection/backupInstanceBlogStorage", _module)
pulumi.runtime.registerResourceModule("azure", "dataprotection/backupInstanceDisk", _module)
pulumi.runtime.registerResourceModule("azure", "dataprotection/backupInstanceKubernetesCluster", _module)
pulumi.runtime.registerResourceModule("azure", "dataprotection/backupInstanceMysqlFlexibleServer", _module)
pulumi.runtime.registerResourceModule("azure", "dataprotection/backupInstancePostgresql", _module)
pulumi.runtime.registerResourceModule("azure", "dataprotection/backupInstancePostgresqlFlexibleServer", _module)
pulumi.runtime.registerResourceModule("azure", "dataprotection/backupPolicyBlobStorage", _module)
pulumi.runtime.registerResourceModule("azure", "dataprotection/backupPolicyDisk", _module)
pulumi.runtime.registerResourceModule("azure", "dataprotection/backupPolicyKubernetesCluster", _module)
pulumi.runtime.registerResourceModule("azure", "dataprotection/backupPolicyMysqlFlexibleServer", _module)
pulumi.runtime.registerResourceModule("azure", "dataprotection/backupPolicyPostgresql", _module)
pulumi.runtime.registerResourceModule("azure", "dataprotection/backupPolicyPostgresqlFlexibleServer", _module)
pulumi.runtime.registerResourceModule("azure", "dataprotection/backupVault", _module)
pulumi.runtime.registerResourceModule("azure", "dataprotection/backupVaultCustomerManagedKey", _module)
pulumi.runtime.registerResourceModule("azure", "dataprotection/resourceGuard", _module)
