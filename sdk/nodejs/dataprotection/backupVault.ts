// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Backup Vault.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleBackupVault = new azure.dataprotection.BackupVault("example", {
 *     name: "example-backup-vault",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     datastoreType: "VaultStore",
 *     redundancy: "LocallyRedundant",
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.DataProtection`: 2024-04-01
 *
 * ## Import
 *
 * Backup Vaults can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:dataprotection/backupVault:BackupVault example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataProtection/backupVaults/vault1
 * ```
 */
export class BackupVault extends pulumi.CustomResource {
    /**
     * Get an existing BackupVault resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackupVaultState, opts?: pulumi.CustomResourceOptions): BackupVault {
        return new BackupVault(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:dataprotection/backupVault:BackupVault';

    /**
     * Returns true if the given object is an instance of BackupVault.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BackupVault {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BackupVault.__pulumiType;
    }

    /**
     * Whether to enable cross-region restore for the Backup Vault.
     *
     * > **Note:** The `crossRegionRestoreEnabled` can only be specified when `redundancy` is specified for `GeoRedundant`. Once `crossRegionRestoreEnabled` is enabled, it cannot be disabled.
     */
    public readonly crossRegionRestoreEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the type of the data store. Possible values are `ArchiveStore`, `OperationalStore`, `SnapshotStore` and `VaultStore`. Changing this forces a new resource to be created.
     *
     * > **Note:** The `SnapshotStore` will be removed in version 4.0 as it has been replaced by `OperationalStore`.
     */
    public readonly datastoreType!: pulumi.Output<string>;
    /**
     * An `identity` block as defined below.
     */
    public readonly identity!: pulumi.Output<outputs.dataprotection.BackupVaultIdentity | undefined>;
    /**
     * The state of immutability for this Backup Vault. Possible values are `Disabled`, `Locked`, and `Unlocked`. Defaults to `Disabled`. Changing this from `Locked` to anything else forces a new Backup Vault to be created.
     */
    public readonly immutability!: pulumi.Output<string | undefined>;
    /**
     * The Azure Region where the Backup Vault should exist. Changing this forces a new Backup Vault to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Specifies the name of the Backup Vault. Changing this forces a new Backup Vault to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the backup storage redundancy. Possible values are `GeoRedundant`, `LocallyRedundant` and `ZoneRedundant`. Changing this forces a new Backup Vault to be created.
     */
    public readonly redundancy!: pulumi.Output<string>;
    /**
     * The name of the Resource Group where the Backup Vault should exist. Changing this forces a new Backup Vault to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * The soft delete retention duration for this Backup Vault. Possible values are between `14` and `180`. Defaults to `14`.
     *
     * > **Note:** The `retentionDurationInDays` is the number of days for which deleted data is retained before being permanently deleted. Retention period till 14 days are free of cost, however, retention beyond 14 days may incur additional charges. The `retentionDurationInDays` is required when the `softDelete` is set to `On`.
     */
    public readonly retentionDurationInDays!: pulumi.Output<number | undefined>;
    /**
     * The state of soft delete for this Backup Vault. Possible values are `AlwaysOn`, `Off`, and `On`. Defaults to `On`.
     *
     * > **Note:** Once the `softDelete` is set to `AlwaysOn`, the setting cannot be changed.
     */
    public readonly softDelete!: pulumi.Output<string | undefined>;
    /**
     * A mapping of tags which should be assigned to the Backup Vault.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a BackupVault resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackupVaultArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackupVaultArgs | BackupVaultState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackupVaultState | undefined;
            resourceInputs["crossRegionRestoreEnabled"] = state ? state.crossRegionRestoreEnabled : undefined;
            resourceInputs["datastoreType"] = state ? state.datastoreType : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["immutability"] = state ? state.immutability : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["redundancy"] = state ? state.redundancy : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["retentionDurationInDays"] = state ? state.retentionDurationInDays : undefined;
            resourceInputs["softDelete"] = state ? state.softDelete : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as BackupVaultArgs | undefined;
            if ((!args || args.datastoreType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datastoreType'");
            }
            if ((!args || args.redundancy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'redundancy'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["crossRegionRestoreEnabled"] = args ? args.crossRegionRestoreEnabled : undefined;
            resourceInputs["datastoreType"] = args ? args.datastoreType : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["immutability"] = args ? args.immutability : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["redundancy"] = args ? args.redundancy : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["retentionDurationInDays"] = args ? args.retentionDurationInDays : undefined;
            resourceInputs["softDelete"] = args ? args.softDelete : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BackupVault.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BackupVault resources.
 */
export interface BackupVaultState {
    /**
     * Whether to enable cross-region restore for the Backup Vault.
     *
     * > **Note:** The `crossRegionRestoreEnabled` can only be specified when `redundancy` is specified for `GeoRedundant`. Once `crossRegionRestoreEnabled` is enabled, it cannot be disabled.
     */
    crossRegionRestoreEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the type of the data store. Possible values are `ArchiveStore`, `OperationalStore`, `SnapshotStore` and `VaultStore`. Changing this forces a new resource to be created.
     *
     * > **Note:** The `SnapshotStore` will be removed in version 4.0 as it has been replaced by `OperationalStore`.
     */
    datastoreType?: pulumi.Input<string>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.dataprotection.BackupVaultIdentity>;
    /**
     * The state of immutability for this Backup Vault. Possible values are `Disabled`, `Locked`, and `Unlocked`. Defaults to `Disabled`. Changing this from `Locked` to anything else forces a new Backup Vault to be created.
     */
    immutability?: pulumi.Input<string>;
    /**
     * The Azure Region where the Backup Vault should exist. Changing this forces a new Backup Vault to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of the Backup Vault. Changing this forces a new Backup Vault to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the backup storage redundancy. Possible values are `GeoRedundant`, `LocallyRedundant` and `ZoneRedundant`. Changing this forces a new Backup Vault to be created.
     */
    redundancy?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Backup Vault should exist. Changing this forces a new Backup Vault to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The soft delete retention duration for this Backup Vault. Possible values are between `14` and `180`. Defaults to `14`.
     *
     * > **Note:** The `retentionDurationInDays` is the number of days for which deleted data is retained before being permanently deleted. Retention period till 14 days are free of cost, however, retention beyond 14 days may incur additional charges. The `retentionDurationInDays` is required when the `softDelete` is set to `On`.
     */
    retentionDurationInDays?: pulumi.Input<number>;
    /**
     * The state of soft delete for this Backup Vault. Possible values are `AlwaysOn`, `Off`, and `On`. Defaults to `On`.
     *
     * > **Note:** Once the `softDelete` is set to `AlwaysOn`, the setting cannot be changed.
     */
    softDelete?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Backup Vault.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a BackupVault resource.
 */
export interface BackupVaultArgs {
    /**
     * Whether to enable cross-region restore for the Backup Vault.
     *
     * > **Note:** The `crossRegionRestoreEnabled` can only be specified when `redundancy` is specified for `GeoRedundant`. Once `crossRegionRestoreEnabled` is enabled, it cannot be disabled.
     */
    crossRegionRestoreEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the type of the data store. Possible values are `ArchiveStore`, `OperationalStore`, `SnapshotStore` and `VaultStore`. Changing this forces a new resource to be created.
     *
     * > **Note:** The `SnapshotStore` will be removed in version 4.0 as it has been replaced by `OperationalStore`.
     */
    datastoreType: pulumi.Input<string>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.dataprotection.BackupVaultIdentity>;
    /**
     * The state of immutability for this Backup Vault. Possible values are `Disabled`, `Locked`, and `Unlocked`. Defaults to `Disabled`. Changing this from `Locked` to anything else forces a new Backup Vault to be created.
     */
    immutability?: pulumi.Input<string>;
    /**
     * The Azure Region where the Backup Vault should exist. Changing this forces a new Backup Vault to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of the Backup Vault. Changing this forces a new Backup Vault to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the backup storage redundancy. Possible values are `GeoRedundant`, `LocallyRedundant` and `ZoneRedundant`. Changing this forces a new Backup Vault to be created.
     */
    redundancy: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Backup Vault should exist. Changing this forces a new Backup Vault to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The soft delete retention duration for this Backup Vault. Possible values are between `14` and `180`. Defaults to `14`.
     *
     * > **Note:** The `retentionDurationInDays` is the number of days for which deleted data is retained before being permanently deleted. Retention period till 14 days are free of cost, however, retention beyond 14 days may incur additional charges. The `retentionDurationInDays` is required when the `softDelete` is set to `On`.
     */
    retentionDurationInDays?: pulumi.Input<number>;
    /**
     * The state of soft delete for this Backup Vault. Possible values are `AlwaysOn`, `Off`, and `On`. Defaults to `On`.
     *
     * > **Note:** Once the `softDelete` is set to `AlwaysOn`, the setting cannot be changed.
     */
    softDelete?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Backup Vault.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
