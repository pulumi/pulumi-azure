// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Backup Instance to back up MySQL Flexible Server.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleFlexibleServer = new azure.mysql.FlexibleServer("example", {
 *     name: "example-mysqlfs",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     administratorLogin: "adminTerraform",
 *     administratorPassword: "QAZwsx123",
 *     version: "8.0.21",
 *     skuName: "B_Standard_B1ms",
 *     zone: "1",
 * });
 * const exampleBackupVault = new azure.dataprotection.BackupVault("example", {
 *     name: "example-backupvault",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     datastoreType: "VaultStore",
 *     redundancy: "LocallyRedundant",
 *     softDelete: "Off",
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * const exampleAssignment = new azure.authorization.Assignment("example", {
 *     scope: example.id,
 *     roleDefinitionName: "Reader",
 *     principalId: exampleBackupVault.identity.apply(identity => identity?.principalId),
 * });
 * const example2 = new azure.authorization.Assignment("example2", {
 *     scope: exampleFlexibleServer.id,
 *     roleDefinitionName: "MySQL Backup And Export Operator",
 *     principalId: exampleBackupVault.identity.apply(identity => identity?.principalId),
 * });
 * const exampleBackupPolicyMysqlFlexibleServer = new azure.dataprotection.BackupPolicyMysqlFlexibleServer("example", {
 *     name: "example-dp",
 *     vaultId: exampleBackupVault.id,
 *     backupRepeatingTimeIntervals: ["R/2021-05-23T02:30:00+00:00/P1W"],
 *     defaultRetentionRule: {
 *         lifeCycles: [{
 *             duration: "P4M",
 *             dataStoreType: "VaultStore",
 *         }],
 *     },
 * }, {
 *     dependsOn: [
 *         exampleAssignment,
 *         example2,
 *     ],
 * });
 * const exampleBackupInstanceMysqlFlexibleServer = new azure.dataprotection.BackupInstanceMysqlFlexibleServer("example", {
 *     name: "example-dbi",
 *     location: example.location,
 *     vaultId: exampleBackupVault.id,
 *     serverId: exampleFlexibleServer.id,
 *     backupPolicyId: exampleBackupPolicyMysqlFlexibleServer.id,
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.DataProtection` - 2024-04-01
 *
 * ## Import
 *
 * Backup Instance MySQL Flexible Servers can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:dataprotection/backupInstanceMysqlFlexibleServer:BackupInstanceMysqlFlexibleServer example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataProtection/backupVaults/vault1/backupInstances/backupInstance1
 * ```
 */
export class BackupInstanceMysqlFlexibleServer extends pulumi.CustomResource {
    /**
     * Get an existing BackupInstanceMysqlFlexibleServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackupInstanceMysqlFlexibleServerState, opts?: pulumi.CustomResourceOptions): BackupInstanceMysqlFlexibleServer {
        return new BackupInstanceMysqlFlexibleServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:dataprotection/backupInstanceMysqlFlexibleServer:BackupInstanceMysqlFlexibleServer';

    /**
     * Returns true if the given object is an instance of BackupInstanceMysqlFlexibleServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BackupInstanceMysqlFlexibleServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BackupInstanceMysqlFlexibleServer.__pulumiType;
    }

    /**
     * The ID of the Backup Policy.
     */
    public readonly backupPolicyId!: pulumi.Output<string>;
    /**
     * The location of the source database. Changing this forces a new resource to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Specifies the name of the Backup Instance for the MySQL Flexible Server. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the source server. Changing this forces a new resource to be created.
     */
    public readonly serverId!: pulumi.Output<string>;
    /**
     * The ID of the Backup Vault within which the MySQL Flexible Server Backup Instance should exist. Changing this forces a new resource to be created.
     */
    public readonly vaultId!: pulumi.Output<string>;

    /**
     * Create a BackupInstanceMysqlFlexibleServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackupInstanceMysqlFlexibleServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackupInstanceMysqlFlexibleServerArgs | BackupInstanceMysqlFlexibleServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackupInstanceMysqlFlexibleServerState | undefined;
            resourceInputs["backupPolicyId"] = state ? state.backupPolicyId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
            resourceInputs["vaultId"] = state ? state.vaultId : undefined;
        } else {
            const args = argsOrState as BackupInstanceMysqlFlexibleServerArgs | undefined;
            if ((!args || args.backupPolicyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backupPolicyId'");
            }
            if ((!args || args.serverId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverId'");
            }
            if ((!args || args.vaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vaultId'");
            }
            resourceInputs["backupPolicyId"] = args ? args.backupPolicyId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serverId"] = args ? args.serverId : undefined;
            resourceInputs["vaultId"] = args ? args.vaultId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BackupInstanceMysqlFlexibleServer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BackupInstanceMysqlFlexibleServer resources.
 */
export interface BackupInstanceMysqlFlexibleServerState {
    /**
     * The ID of the Backup Policy.
     */
    backupPolicyId?: pulumi.Input<string>;
    /**
     * The location of the source database. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of the Backup Instance for the MySQL Flexible Server. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the source server. Changing this forces a new resource to be created.
     */
    serverId?: pulumi.Input<string>;
    /**
     * The ID of the Backup Vault within which the MySQL Flexible Server Backup Instance should exist. Changing this forces a new resource to be created.
     */
    vaultId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BackupInstanceMysqlFlexibleServer resource.
 */
export interface BackupInstanceMysqlFlexibleServerArgs {
    /**
     * The ID of the Backup Policy.
     */
    backupPolicyId: pulumi.Input<string>;
    /**
     * The location of the source database. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of the Backup Instance for the MySQL Flexible Server. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the source server. Changing this forces a new resource to be created.
     */
    serverId: pulumi.Input<string>;
    /**
     * The ID of the Backup Vault within which the MySQL Flexible Server Backup Instance should exist. Changing this forces a new resource to be created.
     */
    vaultId: pulumi.Input<string>;
}
