// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Service Bus Namespace Customer Managed Key.
 *
 * !> **Note:** It is not possible to remove the Customer Managed Key from the Service Bus Namespace once it's been added. To remove the Customer Managed Key, the parent Service Bus Namespace must be deleted and recreated.
 *
 * > **Note:** This resource should only be used to create a Customer Managed Key for Service Bus Namespaces with System Assigned identities. The `customerManagedKey` block in `azure.servicebus.Namespace` should be used to create a Customer Managed Key for a Service Bus Namespace with a User Assigned identity.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resource-group",
 *     location: "West Europe",
 * });
 * const exampleNamespace = new azure.servicebus.Namespace("example", {
 *     name: "example-servicebus-namespace",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: "Premium",
 *     premiumMessagingPartitions: 1,
 *     capacity: 1,
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * const current = azure.core.getClientConfig({});
 * const exampleKeyVault = new azure.keyvault.KeyVault("example", {
 *     name: "example-key-vault",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     enabledForDiskEncryption: true,
 *     tenantId: current.then(current => current.tenantId),
 *     softDeleteRetentionDays: 7,
 *     purgeProtectionEnabled: true,
 *     skuName: "standard",
 *     accessPolicies: [
 *         {
 *             tenantId: current.then(current => current.tenantId),
 *             objectId: current.then(current => current.objectId),
 *             keyPermissions: [
 *                 "Create",
 *                 "Decrypt",
 *                 "Encrypt",
 *                 "Delete",
 *                 "Get",
 *                 "List",
 *                 "Purge",
 *                 "UnwrapKey",
 *                 "WrapKey",
 *                 "Verify",
 *                 "GetRotationPolicy",
 *             ],
 *             secretPermissions: ["Set"],
 *         },
 *         {
 *             tenantId: exampleNamespace.identity.apply(identity => identity?.tenantId),
 *             objectId: exampleNamespace.identity.apply(identity => identity?.principalId),
 *             keyPermissions: [
 *                 "Create",
 *                 "Decrypt",
 *                 "Encrypt",
 *                 "Delete",
 *                 "Get",
 *                 "List",
 *                 "Purge",
 *                 "UnwrapKey",
 *                 "WrapKey",
 *                 "Verify",
 *                 "GetRotationPolicy",
 *             ],
 *             secretPermissions: ["Set"],
 *         },
 *     ],
 * });
 * const exampleKey = new azure.keyvault.Key("example", {
 *     name: "example-key-vault-key",
 *     keyVaultId: exampleKeyVault.id,
 *     keyType: "RSA",
 *     keySize: 2048,
 *     keyOpts: [
 *         "decrypt",
 *         "encrypt",
 *         "sign",
 *         "unwrapKey",
 *         "verify",
 *         "wrapKey",
 *     ],
 * });
 * const exampleNamespaceCustomerManagedKey = new azure.servicebus.NamespaceCustomerManagedKey("example", {
 *     namespaceId: exampleNamespace.id,
 *     keyVaultKeyId: exampleKey.id,
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.ServiceBus`: 2022-10-01-preview
 *
 * ## Import
 *
 * Service Bus Namespace Customer Managed Key can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:servicebus/namespaceCustomerManagedKey:NamespaceCustomerManagedKey example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ServiceBus/namespaces/sbns1
 * ```
 */
export class NamespaceCustomerManagedKey extends pulumi.CustomResource {
    /**
     * Get an existing NamespaceCustomerManagedKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NamespaceCustomerManagedKeyState, opts?: pulumi.CustomResourceOptions): NamespaceCustomerManagedKey {
        return new NamespaceCustomerManagedKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:servicebus/namespaceCustomerManagedKey:NamespaceCustomerManagedKey';

    /**
     * Returns true if the given object is an instance of NamespaceCustomerManagedKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NamespaceCustomerManagedKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NamespaceCustomerManagedKey.__pulumiType;
    }

    /**
     * Used to specify whether enable Infrastructure Encryption. Changing this forces a new resource to be created.
     */
    public readonly infrastructureEncryptionEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the Key Vault Key which should be used to Encrypt the data in this Service Bus Namespace.
     */
    public readonly keyVaultKeyId!: pulumi.Output<string>;
    /**
     * The ID of the Service Bus namespace. Changing this forces a new resource to be created.
     */
    public readonly namespaceId!: pulumi.Output<string>;

    /**
     * Create a NamespaceCustomerManagedKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NamespaceCustomerManagedKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NamespaceCustomerManagedKeyArgs | NamespaceCustomerManagedKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NamespaceCustomerManagedKeyState | undefined;
            resourceInputs["infrastructureEncryptionEnabled"] = state ? state.infrastructureEncryptionEnabled : undefined;
            resourceInputs["keyVaultKeyId"] = state ? state.keyVaultKeyId : undefined;
            resourceInputs["namespaceId"] = state ? state.namespaceId : undefined;
        } else {
            const args = argsOrState as NamespaceCustomerManagedKeyArgs | undefined;
            if ((!args || args.keyVaultKeyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyVaultKeyId'");
            }
            if ((!args || args.namespaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespaceId'");
            }
            resourceInputs["infrastructureEncryptionEnabled"] = args ? args.infrastructureEncryptionEnabled : undefined;
            resourceInputs["keyVaultKeyId"] = args ? args.keyVaultKeyId : undefined;
            resourceInputs["namespaceId"] = args ? args.namespaceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NamespaceCustomerManagedKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NamespaceCustomerManagedKey resources.
 */
export interface NamespaceCustomerManagedKeyState {
    /**
     * Used to specify whether enable Infrastructure Encryption. Changing this forces a new resource to be created.
     */
    infrastructureEncryptionEnabled?: pulumi.Input<boolean>;
    /**
     * The ID of the Key Vault Key which should be used to Encrypt the data in this Service Bus Namespace.
     */
    keyVaultKeyId?: pulumi.Input<string>;
    /**
     * The ID of the Service Bus namespace. Changing this forces a new resource to be created.
     */
    namespaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NamespaceCustomerManagedKey resource.
 */
export interface NamespaceCustomerManagedKeyArgs {
    /**
     * Used to specify whether enable Infrastructure Encryption. Changing this forces a new resource to be created.
     */
    infrastructureEncryptionEnabled?: pulumi.Input<boolean>;
    /**
     * The ID of the Key Vault Key which should be used to Encrypt the data in this Service Bus Namespace.
     */
    keyVaultKeyId: pulumi.Input<string>;
    /**
     * The ID of the Service Bus namespace. Changing this forces a new resource to be created.
     */
    namespaceId: pulumi.Input<string>;
}
