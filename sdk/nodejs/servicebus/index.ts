// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetNamespaceArgs, GetNamespaceResult, GetNamespaceOutputArgs } from "./getNamespace";
export const getNamespace: typeof import("./getNamespace").getNamespace = null as any;
export const getNamespaceOutput: typeof import("./getNamespace").getNamespaceOutput = null as any;

export { GetNamespaceAuthorizationRuleArgs, GetNamespaceAuthorizationRuleResult, GetNamespaceAuthorizationRuleOutputArgs } from "./getNamespaceAuthorizationRule";
export const getNamespaceAuthorizationRule: typeof import("./getNamespaceAuthorizationRule").getNamespaceAuthorizationRule = null as any;
export const getNamespaceAuthorizationRuleOutput: typeof import("./getNamespaceAuthorizationRule").getNamespaceAuthorizationRuleOutput = null as any;

export { GetNamespaceDisasterRecoveryConfigArgs, GetNamespaceDisasterRecoveryConfigResult, GetNamespaceDisasterRecoveryConfigOutputArgs } from "./getNamespaceDisasterRecoveryConfig";
export const getNamespaceDisasterRecoveryConfig: typeof import("./getNamespaceDisasterRecoveryConfig").getNamespaceDisasterRecoveryConfig = null as any;
export const getNamespaceDisasterRecoveryConfigOutput: typeof import("./getNamespaceDisasterRecoveryConfig").getNamespaceDisasterRecoveryConfigOutput = null as any;

export { GetQueueArgs, GetQueueResult, GetQueueOutputArgs } from "./getQueue";
export const getQueue: typeof import("./getQueue").getQueue = null as any;
export const getQueueOutput: typeof import("./getQueue").getQueueOutput = null as any;

export { GetQueueAuthorizationRuleArgs, GetQueueAuthorizationRuleResult, GetQueueAuthorizationRuleOutputArgs } from "./getQueueAuthorizationRule";
export const getQueueAuthorizationRule: typeof import("./getQueueAuthorizationRule").getQueueAuthorizationRule = null as any;
export const getQueueAuthorizationRuleOutput: typeof import("./getQueueAuthorizationRule").getQueueAuthorizationRuleOutput = null as any;

export { GetSubscriptionArgs, GetSubscriptionResult, GetSubscriptionOutputArgs } from "./getSubscription";
export const getSubscription: typeof import("./getSubscription").getSubscription = null as any;
export const getSubscriptionOutput: typeof import("./getSubscription").getSubscriptionOutput = null as any;

export { GetTopicArgs, GetTopicResult, GetTopicOutputArgs } from "./getTopic";
export const getTopic: typeof import("./getTopic").getTopic = null as any;
export const getTopicOutput: typeof import("./getTopic").getTopicOutput = null as any;

export { GetTopicAuthorizationRuleArgs, GetTopicAuthorizationRuleResult, GetTopicAuthorizationRuleOutputArgs } from "./getTopicAuthorizationRule";
export const getTopicAuthorizationRule: typeof import("./getTopicAuthorizationRule").getTopicAuthorizationRule = null as any;
export const getTopicAuthorizationRuleOutput: typeof import("./getTopicAuthorizationRule").getTopicAuthorizationRuleOutput = null as any;

export { NamespaceArgs, NamespaceState } from "./namespace";
export type Namespace = import("./namespace").Namespace;
export const Namespace: typeof import("./namespace").Namespace = null as any;

export { NamespaceAuthorizationRuleArgs, NamespaceAuthorizationRuleState } from "./namespaceAuthorizationRule";
export type NamespaceAuthorizationRule = import("./namespaceAuthorizationRule").NamespaceAuthorizationRule;
export const NamespaceAuthorizationRule: typeof import("./namespaceAuthorizationRule").NamespaceAuthorizationRule = null as any;

export { NamespaceDisasterRecoveryConfigArgs, NamespaceDisasterRecoveryConfigState } from "./namespaceDisasterRecoveryConfig";
export type NamespaceDisasterRecoveryConfig = import("./namespaceDisasterRecoveryConfig").NamespaceDisasterRecoveryConfig;
export const NamespaceDisasterRecoveryConfig: typeof import("./namespaceDisasterRecoveryConfig").NamespaceDisasterRecoveryConfig = null as any;

export { NamespaceNetworkRuleSetArgs, NamespaceNetworkRuleSetState } from "./namespaceNetworkRuleSet";
export type NamespaceNetworkRuleSet = import("./namespaceNetworkRuleSet").NamespaceNetworkRuleSet;
export const NamespaceNetworkRuleSet: typeof import("./namespaceNetworkRuleSet").NamespaceNetworkRuleSet = null as any;

export { QueueArgs, QueueState } from "./queue";
export type Queue = import("./queue").Queue;
export const Queue: typeof import("./queue").Queue = null as any;

export { QueueAuthorizationRuleArgs, QueueAuthorizationRuleState } from "./queueAuthorizationRule";
export type QueueAuthorizationRule = import("./queueAuthorizationRule").QueueAuthorizationRule;
export const QueueAuthorizationRule: typeof import("./queueAuthorizationRule").QueueAuthorizationRule = null as any;

export { SubscriptionArgs, SubscriptionState } from "./subscription";
export type Subscription = import("./subscription").Subscription;
export const Subscription: typeof import("./subscription").Subscription = null as any;

export { SubscriptionRuleArgs, SubscriptionRuleState } from "./subscriptionRule";
export type SubscriptionRule = import("./subscriptionRule").SubscriptionRule;
export const SubscriptionRule: typeof import("./subscriptionRule").SubscriptionRule = null as any;

export { TopicArgs, TopicState } from "./topic";
export type Topic = import("./topic").Topic;
export const Topic: typeof import("./topic").Topic = null as any;

export { TopicAuthorizationRuleArgs, TopicAuthorizationRuleState } from "./topicAuthorizationRule";
export type TopicAuthorizationRule = import("./topicAuthorizationRule").TopicAuthorizationRule;
export const TopicAuthorizationRule: typeof import("./topicAuthorizationRule").TopicAuthorizationRule = null as any;

export * from "./zMixins";
utilities.lazyLoad(exports, ["getNamespace","getNamespaceOutput"], () => require("./getNamespace"));
utilities.lazyLoad(exports, ["getNamespaceAuthorizationRule","getNamespaceAuthorizationRuleOutput"], () => require("./getNamespaceAuthorizationRule"));
utilities.lazyLoad(exports, ["getNamespaceDisasterRecoveryConfig","getNamespaceDisasterRecoveryConfigOutput"], () => require("./getNamespaceDisasterRecoveryConfig"));
utilities.lazyLoad(exports, ["getQueue","getQueueOutput"], () => require("./getQueue"));
utilities.lazyLoad(exports, ["getQueueAuthorizationRule","getQueueAuthorizationRuleOutput"], () => require("./getQueueAuthorizationRule"));
utilities.lazyLoad(exports, ["getSubscription","getSubscriptionOutput"], () => require("./getSubscription"));
utilities.lazyLoad(exports, ["getTopic","getTopicOutput"], () => require("./getTopic"));
utilities.lazyLoad(exports, ["getTopicAuthorizationRule","getTopicAuthorizationRuleOutput"], () => require("./getTopicAuthorizationRule"));
utilities.lazyLoad(exports, ["Namespace"], () => require("./namespace"));
utilities.lazyLoad(exports, ["NamespaceAuthorizationRule"], () => require("./namespaceAuthorizationRule"));
utilities.lazyLoad(exports, ["NamespaceDisasterRecoveryConfig"], () => require("./namespaceDisasterRecoveryConfig"));
utilities.lazyLoad(exports, ["NamespaceNetworkRuleSet"], () => require("./namespaceNetworkRuleSet"));
utilities.lazyLoad(exports, ["Queue"], () => require("./queue"));
utilities.lazyLoad(exports, ["QueueAuthorizationRule"], () => require("./queueAuthorizationRule"));
utilities.lazyLoad(exports, ["Subscription"], () => require("./subscription"));
utilities.lazyLoad(exports, ["SubscriptionRule"], () => require("./subscriptionRule"));
utilities.lazyLoad(exports, ["Topic"], () => require("./topic"));
utilities.lazyLoad(exports, ["TopicAuthorizationRule"], () => require("./topicAuthorizationRule"));

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:servicebus/namespace:Namespace":
                return new Namespace(name, <any>undefined, { urn })
            case "azure:servicebus/namespaceAuthorizationRule:NamespaceAuthorizationRule":
                return new NamespaceAuthorizationRule(name, <any>undefined, { urn })
            case "azure:servicebus/namespaceDisasterRecoveryConfig:NamespaceDisasterRecoveryConfig":
                return new NamespaceDisasterRecoveryConfig(name, <any>undefined, { urn })
            case "azure:servicebus/namespaceNetworkRuleSet:NamespaceNetworkRuleSet":
                return new NamespaceNetworkRuleSet(name, <any>undefined, { urn })
            case "azure:servicebus/queue:Queue":
                return new Queue(name, <any>undefined, { urn })
            case "azure:servicebus/queueAuthorizationRule:QueueAuthorizationRule":
                return new QueueAuthorizationRule(name, <any>undefined, { urn })
            case "azure:servicebus/subscription:Subscription":
                return new Subscription(name, <any>undefined, { urn })
            case "azure:servicebus/subscriptionRule:SubscriptionRule":
                return new SubscriptionRule(name, <any>undefined, { urn })
            case "azure:servicebus/topic:Topic":
                return new Topic(name, <any>undefined, { urn })
            case "azure:servicebus/topicAuthorizationRule:TopicAuthorizationRule":
                return new TopicAuthorizationRule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "servicebus/namespace", _module)
pulumi.runtime.registerResourceModule("azure", "servicebus/namespaceAuthorizationRule", _module)
pulumi.runtime.registerResourceModule("azure", "servicebus/namespaceDisasterRecoveryConfig", _module)
pulumi.runtime.registerResourceModule("azure", "servicebus/namespaceNetworkRuleSet", _module)
pulumi.runtime.registerResourceModule("azure", "servicebus/queue", _module)
pulumi.runtime.registerResourceModule("azure", "servicebus/queueAuthorizationRule", _module)
pulumi.runtime.registerResourceModule("azure", "servicebus/subscription", _module)
pulumi.runtime.registerResourceModule("azure", "servicebus/subscriptionRule", _module)
pulumi.runtime.registerResourceModule("azure", "servicebus/topic", _module)
pulumi.runtime.registerResourceModule("azure", "servicebus/topicAuthorizationRule", _module)
