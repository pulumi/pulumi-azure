// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {location: "West Europe"});
 * const appconf = new azure.appconfiguration.ConfigurationStore("appconf", {
 *     resourceGroupName: example.name,
 *     location: example.location,
 * });
 * ```
 * ### Encryption)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleUserAssignedIdentity = new azure.authorization.UserAssignedIdentity("exampleUserAssignedIdentity", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * const current = azure.core.getClientConfig({});
 * const exampleKeyVault = new azure.keyvault.KeyVault("exampleKeyVault", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "standard",
 *     softDeleteRetentionDays: 7,
 *     purgeProtectionEnabled: true,
 * });
 * const server = new azure.keyvault.AccessPolicy("server", {
 *     keyVaultId: exampleKeyVault.id,
 *     tenantId: current.then(current => current.tenantId),
 *     objectId: exampleUserAssignedIdentity.principalId,
 *     keyPermissions: [
 *         "Get",
 *         "UnwrapKey",
 *         "WrapKey",
 *     ],
 *     secretPermissions: ["Get"],
 * });
 * const client = new azure.keyvault.AccessPolicy("client", {
 *     keyVaultId: exampleKeyVault.id,
 *     tenantId: current.then(current => current.tenantId),
 *     objectId: current.then(current => current.objectId),
 *     keyPermissions: [
 *         "Get",
 *         "Create",
 *         "Delete",
 *         "List",
 *         "Restore",
 *         "Recover",
 *         "UnwrapKey",
 *         "WrapKey",
 *         "Purge",
 *         "Encrypt",
 *         "Decrypt",
 *         "Sign",
 *         "Verify",
 *         "GetRotationPolicy",
 *     ],
 *     secretPermissions: ["Get"],
 * });
 * const exampleKey = new azure.keyvault.Key("exampleKey", {
 *     keyVaultId: exampleKeyVault.id,
 *     keyType: "RSA",
 *     keySize: 2048,
 *     keyOpts: [
 *         "decrypt",
 *         "encrypt",
 *         "sign",
 *         "unwrapKey",
 *         "verify",
 *         "wrapKey",
 *     ],
 * }, {
 *     dependsOn: [
 *         client,
 *         server,
 *     ],
 * });
 * const exampleConfigurationStore = new azure.appconfiguration.ConfigurationStore("exampleConfigurationStore", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     sku: "standard",
 *     localAuthEnabled: true,
 *     publicNetworkAccess: "Enabled",
 *     purgeProtectionEnabled: false,
 *     softDeleteRetentionDays: 1,
 *     identity: {
 *         type: "UserAssigned",
 *         identityIds: [exampleUserAssignedIdentity.id],
 *     },
 *     encryption: {
 *         keyVaultKeyIdentifier: exampleKey.id,
 *         identityClientId: exampleUserAssignedIdentity.clientId,
 *     },
 *     replicas: [{
 *         name: "replica1",
 *         location: "West US",
 *     }],
 *     tags: {
 *         environment: "development",
 *     },
 * }, {
 *     dependsOn: [
 *         client,
 *         server,
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * App Configurations can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:appconfiguration/configurationStore:ConfigurationStore appconf /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.AppConfiguration/configurationStores/appConf1
 * ```
 */
export class ConfigurationStore extends pulumi.CustomResource {
    /**
     * Get an existing ConfigurationStore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigurationStoreState, opts?: pulumi.CustomResourceOptions): ConfigurationStore {
        return new ConfigurationStore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:appconfiguration/configurationStore:ConfigurationStore';

    /**
     * Returns true if the given object is an instance of ConfigurationStore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigurationStore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigurationStore.__pulumiType;
    }

    /**
     * An `encryption` block as defined below.
     */
    public readonly encryption!: pulumi.Output<outputs.appconfiguration.ConfigurationStoreEncryption | undefined>;
    /**
     * The URL of the App Configuration Replica.
     */
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    /**
     * An `identity` block as defined below.
     *
     * > **NOTE:** Azure does not allow a downgrade from `standard` to `free`.
     */
    public readonly identity!: pulumi.Output<outputs.appconfiguration.ConfigurationStoreIdentity | undefined>;
    /**
     * Whether local authentication methods is enabled. Defaults to `true`.
     */
    public readonly localAuthEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Specifies the name of the App Configuration. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A `primaryReadKey` block as defined below containing the primary read access key.
     */
    public /*out*/ readonly primaryReadKeys!: pulumi.Output<outputs.appconfiguration.ConfigurationStorePrimaryReadKey[]>;
    /**
     * A `primaryWriteKey` block as defined below containing the primary write access key.
     */
    public /*out*/ readonly primaryWriteKeys!: pulumi.Output<outputs.appconfiguration.ConfigurationStorePrimaryWriteKey[]>;
    /**
     * The Public Network Access setting of the App Configuration. Possible values are `Enabled` and `Disabled`.
     *
     * > **NOTE:** If `publicNetworkAccess` is not specified, the App Configuration will be created as  `Automatic`. However, once a different value is defined, can not be set again as automatic.
     */
    public readonly publicNetworkAccess!: pulumi.Output<string | undefined>;
    /**
     * Whether Purge Protection is enabled. This field only works for `standard` sku. Defaults to `false`.
     *
     * !> **Note:** Once Purge Protection has been enabled it's not possible to disable it. Deleting the App Configuration with Purge Protection enabled will schedule the App Configuration to be deleted (which will happen by Azure in the configured number of days).
     */
    public readonly purgeProtectionEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * One or more `replica` blocks as defined below.
     */
    public readonly replicas!: pulumi.Output<outputs.appconfiguration.ConfigurationStoreReplica[] | undefined>;
    /**
     * The name of the resource group in which to create the App Configuration. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * A `secondaryReadKey` block as defined below containing the secondary read access key.
     */
    public /*out*/ readonly secondaryReadKeys!: pulumi.Output<outputs.appconfiguration.ConfigurationStoreSecondaryReadKey[]>;
    /**
     * A `secondaryWriteKey` block as defined below containing the secondary write access key.
     */
    public /*out*/ readonly secondaryWriteKeys!: pulumi.Output<outputs.appconfiguration.ConfigurationStoreSecondaryWriteKey[]>;
    /**
     * The SKU name of the App Configuration. Possible values are `free` and `standard`. Defaults to `free`.
     */
    public readonly sku!: pulumi.Output<string | undefined>;
    /**
     * The number of days that items should be retained for once soft-deleted. This field only works for `standard` sku. This value can be between `1` and `7` days. Defaults to `7`. Changing this forces a new resource to be created.
     *
     * > **Note:** If Purge Protection is enabled, this field can only be configured one time and cannot be updated.
     */
    public readonly softDeleteRetentionDays!: pulumi.Output<number | undefined>;
    /**
     * A mapping of tags to assign to the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a ConfigurationStore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigurationStoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigurationStoreArgs | ConfigurationStoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigurationStoreState | undefined;
            resourceInputs["encryption"] = state ? state.encryption : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["localAuthEnabled"] = state ? state.localAuthEnabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["primaryReadKeys"] = state ? state.primaryReadKeys : undefined;
            resourceInputs["primaryWriteKeys"] = state ? state.primaryWriteKeys : undefined;
            resourceInputs["publicNetworkAccess"] = state ? state.publicNetworkAccess : undefined;
            resourceInputs["purgeProtectionEnabled"] = state ? state.purgeProtectionEnabled : undefined;
            resourceInputs["replicas"] = state ? state.replicas : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["secondaryReadKeys"] = state ? state.secondaryReadKeys : undefined;
            resourceInputs["secondaryWriteKeys"] = state ? state.secondaryWriteKeys : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["softDeleteRetentionDays"] = state ? state.softDeleteRetentionDays : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ConfigurationStoreArgs | undefined;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["encryption"] = args ? args.encryption : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["localAuthEnabled"] = args ? args.localAuthEnabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicNetworkAccess"] = args ? args.publicNetworkAccess : undefined;
            resourceInputs["purgeProtectionEnabled"] = args ? args.purgeProtectionEnabled : undefined;
            resourceInputs["replicas"] = args ? args.replicas : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["softDeleteRetentionDays"] = args ? args.softDeleteRetentionDays : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["primaryReadKeys"] = undefined /*out*/;
            resourceInputs["primaryWriteKeys"] = undefined /*out*/;
            resourceInputs["secondaryReadKeys"] = undefined /*out*/;
            resourceInputs["secondaryWriteKeys"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConfigurationStore.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConfigurationStore resources.
 */
export interface ConfigurationStoreState {
    /**
     * An `encryption` block as defined below.
     */
    encryption?: pulumi.Input<inputs.appconfiguration.ConfigurationStoreEncryption>;
    /**
     * The URL of the App Configuration Replica.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * An `identity` block as defined below.
     *
     * > **NOTE:** Azure does not allow a downgrade from `standard` to `free`.
     */
    identity?: pulumi.Input<inputs.appconfiguration.ConfigurationStoreIdentity>;
    /**
     * Whether local authentication methods is enabled. Defaults to `true`.
     */
    localAuthEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of the App Configuration. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A `primaryReadKey` block as defined below containing the primary read access key.
     */
    primaryReadKeys?: pulumi.Input<pulumi.Input<inputs.appconfiguration.ConfigurationStorePrimaryReadKey>[]>;
    /**
     * A `primaryWriteKey` block as defined below containing the primary write access key.
     */
    primaryWriteKeys?: pulumi.Input<pulumi.Input<inputs.appconfiguration.ConfigurationStorePrimaryWriteKey>[]>;
    /**
     * The Public Network Access setting of the App Configuration. Possible values are `Enabled` and `Disabled`.
     *
     * > **NOTE:** If `publicNetworkAccess` is not specified, the App Configuration will be created as  `Automatic`. However, once a different value is defined, can not be set again as automatic.
     */
    publicNetworkAccess?: pulumi.Input<string>;
    /**
     * Whether Purge Protection is enabled. This field only works for `standard` sku. Defaults to `false`.
     *
     * !> **Note:** Once Purge Protection has been enabled it's not possible to disable it. Deleting the App Configuration with Purge Protection enabled will schedule the App Configuration to be deleted (which will happen by Azure in the configured number of days).
     */
    purgeProtectionEnabled?: pulumi.Input<boolean>;
    /**
     * One or more `replica` blocks as defined below.
     */
    replicas?: pulumi.Input<pulumi.Input<inputs.appconfiguration.ConfigurationStoreReplica>[]>;
    /**
     * The name of the resource group in which to create the App Configuration. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A `secondaryReadKey` block as defined below containing the secondary read access key.
     */
    secondaryReadKeys?: pulumi.Input<pulumi.Input<inputs.appconfiguration.ConfigurationStoreSecondaryReadKey>[]>;
    /**
     * A `secondaryWriteKey` block as defined below containing the secondary write access key.
     */
    secondaryWriteKeys?: pulumi.Input<pulumi.Input<inputs.appconfiguration.ConfigurationStoreSecondaryWriteKey>[]>;
    /**
     * The SKU name of the App Configuration. Possible values are `free` and `standard`. Defaults to `free`.
     */
    sku?: pulumi.Input<string>;
    /**
     * The number of days that items should be retained for once soft-deleted. This field only works for `standard` sku. This value can be between `1` and `7` days. Defaults to `7`. Changing this forces a new resource to be created.
     *
     * > **Note:** If Purge Protection is enabled, this field can only be configured one time and cannot be updated.
     */
    softDeleteRetentionDays?: pulumi.Input<number>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a ConfigurationStore resource.
 */
export interface ConfigurationStoreArgs {
    /**
     * An `encryption` block as defined below.
     */
    encryption?: pulumi.Input<inputs.appconfiguration.ConfigurationStoreEncryption>;
    /**
     * An `identity` block as defined below.
     *
     * > **NOTE:** Azure does not allow a downgrade from `standard` to `free`.
     */
    identity?: pulumi.Input<inputs.appconfiguration.ConfigurationStoreIdentity>;
    /**
     * Whether local authentication methods is enabled. Defaults to `true`.
     */
    localAuthEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of the App Configuration. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The Public Network Access setting of the App Configuration. Possible values are `Enabled` and `Disabled`.
     *
     * > **NOTE:** If `publicNetworkAccess` is not specified, the App Configuration will be created as  `Automatic`. However, once a different value is defined, can not be set again as automatic.
     */
    publicNetworkAccess?: pulumi.Input<string>;
    /**
     * Whether Purge Protection is enabled. This field only works for `standard` sku. Defaults to `false`.
     *
     * !> **Note:** Once Purge Protection has been enabled it's not possible to disable it. Deleting the App Configuration with Purge Protection enabled will schedule the App Configuration to be deleted (which will happen by Azure in the configured number of days).
     */
    purgeProtectionEnabled?: pulumi.Input<boolean>;
    /**
     * One or more `replica` blocks as defined below.
     */
    replicas?: pulumi.Input<pulumi.Input<inputs.appconfiguration.ConfigurationStoreReplica>[]>;
    /**
     * The name of the resource group in which to create the App Configuration. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The SKU name of the App Configuration. Possible values are `free` and `standard`. Defaults to `free`.
     */
    sku?: pulumi.Input<string>;
    /**
     * The number of days that items should be retained for once soft-deleted. This field only works for `standard` sku. This value can be between `1` and `7` days. Defaults to `7`. Changing this forces a new resource to be created.
     *
     * > **Note:** If Purge Protection is enabled, this field can only be configured one time and cannot be updated.
     */
    softDeleteRetentionDays?: pulumi.Input<number>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
