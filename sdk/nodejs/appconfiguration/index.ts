// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ConfigurationFeatureArgs, ConfigurationFeatureState } from "./configurationFeature";
export type ConfigurationFeature = import("./configurationFeature").ConfigurationFeature;
export const ConfigurationFeature: typeof import("./configurationFeature").ConfigurationFeature = null as any;
utilities.lazyLoad(exports, ["ConfigurationFeature"], () => require("./configurationFeature"));

export { ConfigurationKeyArgs, ConfigurationKeyState } from "./configurationKey";
export type ConfigurationKey = import("./configurationKey").ConfigurationKey;
export const ConfigurationKey: typeof import("./configurationKey").ConfigurationKey = null as any;
utilities.lazyLoad(exports, ["ConfigurationKey"], () => require("./configurationKey"));

export { ConfigurationStoreArgs, ConfigurationStoreState } from "./configurationStore";
export type ConfigurationStore = import("./configurationStore").ConfigurationStore;
export const ConfigurationStore: typeof import("./configurationStore").ConfigurationStore = null as any;
utilities.lazyLoad(exports, ["ConfigurationStore"], () => require("./configurationStore"));

export { GetConfigurationKeyArgs, GetConfigurationKeyResult, GetConfigurationKeyOutputArgs } from "./getConfigurationKey";
export const getConfigurationKey: typeof import("./getConfigurationKey").getConfigurationKey = null as any;
export const getConfigurationKeyOutput: typeof import("./getConfigurationKey").getConfigurationKeyOutput = null as any;
utilities.lazyLoad(exports, ["getConfigurationKey","getConfigurationKeyOutput"], () => require("./getConfigurationKey"));

export { GetConfigurationKeysArgs, GetConfigurationKeysResult, GetConfigurationKeysOutputArgs } from "./getConfigurationKeys";
export const getConfigurationKeys: typeof import("./getConfigurationKeys").getConfigurationKeys = null as any;
export const getConfigurationKeysOutput: typeof import("./getConfigurationKeys").getConfigurationKeysOutput = null as any;
utilities.lazyLoad(exports, ["getConfigurationKeys","getConfigurationKeysOutput"], () => require("./getConfigurationKeys"));

export { GetConfigurationStoreArgs, GetConfigurationStoreResult, GetConfigurationStoreOutputArgs } from "./getConfigurationStore";
export const getConfigurationStore: typeof import("./getConfigurationStore").getConfigurationStore = null as any;
export const getConfigurationStoreOutput: typeof import("./getConfigurationStore").getConfigurationStoreOutput = null as any;
utilities.lazyLoad(exports, ["getConfigurationStore","getConfigurationStoreOutput"], () => require("./getConfigurationStore"));

export { LicationLoadBalancerArgs, LicationLoadBalancerState } from "./licationLoadBalancer";
export type LicationLoadBalancer = import("./licationLoadBalancer").LicationLoadBalancer;
export const LicationLoadBalancer: typeof import("./licationLoadBalancer").LicationLoadBalancer = null as any;
utilities.lazyLoad(exports, ["LicationLoadBalancer"], () => require("./licationLoadBalancer"));

export { LicationLoadBalancerFrontendArgs, LicationLoadBalancerFrontendState } from "./licationLoadBalancerFrontend";
export type LicationLoadBalancerFrontend = import("./licationLoadBalancerFrontend").LicationLoadBalancerFrontend;
export const LicationLoadBalancerFrontend: typeof import("./licationLoadBalancerFrontend").LicationLoadBalancerFrontend = null as any;
utilities.lazyLoad(exports, ["LicationLoadBalancerFrontend"], () => require("./licationLoadBalancerFrontend"));

export { LicationLoadBalancerSubnetAssociationArgs, LicationLoadBalancerSubnetAssociationState } from "./licationLoadBalancerSubnetAssociation";
export type LicationLoadBalancerSubnetAssociation = import("./licationLoadBalancerSubnetAssociation").LicationLoadBalancerSubnetAssociation;
export const LicationLoadBalancerSubnetAssociation: typeof import("./licationLoadBalancerSubnetAssociation").LicationLoadBalancerSubnetAssociation = null as any;
utilities.lazyLoad(exports, ["LicationLoadBalancerSubnetAssociation"], () => require("./licationLoadBalancerSubnetAssociation"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:appconfiguration/configurationFeature:ConfigurationFeature":
                return new ConfigurationFeature(name, <any>undefined, { urn })
            case "azure:appconfiguration/configurationKey:ConfigurationKey":
                return new ConfigurationKey(name, <any>undefined, { urn })
            case "azure:appconfiguration/configurationStore:ConfigurationStore":
                return new ConfigurationStore(name, <any>undefined, { urn })
            case "azure:appconfiguration/licationLoadBalancer:LicationLoadBalancer":
                return new LicationLoadBalancer(name, <any>undefined, { urn })
            case "azure:appconfiguration/licationLoadBalancerFrontend:LicationLoadBalancerFrontend":
                return new LicationLoadBalancerFrontend(name, <any>undefined, { urn })
            case "azure:appconfiguration/licationLoadBalancerSubnetAssociation:LicationLoadBalancerSubnetAssociation":
                return new LicationLoadBalancerSubnetAssociation(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "appconfiguration/configurationFeature", _module)
pulumi.runtime.registerResourceModule("azure", "appconfiguration/configurationKey", _module)
pulumi.runtime.registerResourceModule("azure", "appconfiguration/configurationStore", _module)
pulumi.runtime.registerResourceModule("azure", "appconfiguration/licationLoadBalancer", _module)
pulumi.runtime.registerResourceModule("azure", "appconfiguration/licationLoadBalancerFrontend", _module)
pulumi.runtime.registerResourceModule("azure", "appconfiguration/licationLoadBalancerSubnetAssociation", _module)
