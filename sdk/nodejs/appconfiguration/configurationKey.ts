// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an Azure App Configuration Key.
 *
 * > **Note:** App Configuration Keys are provisioned using a Data Plane API which requires the role `App Configuration Data Owner` on either the App Configuration or a parent scope (such as the Resource Group/Subscription). [More information can be found in the Azure Documentation for App Configuration](https://docs.microsoft.com/azure/azure-app-configuration/concept-enable-rbac#azure-built-in-roles-for-azure-app-configuration).
 *
 * ## Example Usage
 * ### `Kv` Type
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {location: "West Europe"});
 * const appconf = new azure.appconfiguration.ConfigurationStore("appconf", {
 *     resourceGroupName: example.name,
 *     location: example.location,
 * });
 * const current = azure.core.getClientConfig({});
 * const appconfDataowner = new azure.authorization.Assignment("appconfDataowner", {
 *     scope: appconf.id,
 *     roleDefinitionName: "App Configuration Data Owner",
 *     principalId: current.then(current => current.objectId),
 * });
 * const test = new azure.appconfiguration.ConfigurationKey("test", {
 *     configurationStoreId: appconf.id,
 *     key: "appConfKey1",
 *     label: "somelabel",
 *     value: "a test",
 * }, {
 *     dependsOn: [appconfDataowner],
 * });
 * ```
 * ### `Vault` Type
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {location: "West Europe"});
 * const appconf = new azure.appconfiguration.ConfigurationStore("appconf", {
 *     resourceGroupName: example.name,
 *     location: example.location,
 * });
 * const current = azure.core.getClientConfig({});
 * const kv = new azure.keyvault.KeyVault("kv", {
 *     location: azurerm_resource_group.test.location,
 *     resourceGroupName: azurerm_resource_group.test.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "premium",
 *     softDeleteRetentionDays: 7,
 *     accessPolicies: [{
 *         tenantId: current.then(current => current.tenantId),
 *         objectId: current.then(current => current.objectId),
 *         keyPermissions: [
 *             "Create",
 *             "Get",
 *         ],
 *         secretPermissions: [
 *             "Set",
 *             "Get",
 *             "Delete",
 *             "Purge",
 *             "Recover",
 *         ],
 *     }],
 * });
 * const kvs = new azure.keyvault.Secret("kvs", {
 *     value: "szechuan",
 *     keyVaultId: kv.id,
 * });
 * const appconfDataowner = new azure.authorization.Assignment("appconfDataowner", {
 *     scope: appconf.id,
 *     roleDefinitionName: "App Configuration Data Owner",
 *     principalId: current.then(current => current.objectId),
 * });
 * const test = new azure.appconfiguration.ConfigurationKey("test", {
 *     configurationStoreId: azurerm_app_configuration.test.id,
 *     key: "key1",
 *     type: "vault",
 *     label: "label1",
 *     vaultKeyReference: kvs.versionlessId,
 * }, {
 *     dependsOn: [appconfDataowner],
 * });
 * ```
 *
 * ## Import
 *
 * App Configuration Keys can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:appconfiguration/configurationKey:ConfigurationKey test https://appconfname1.azconfig.io/kv/keyName?label=labelName
 * ```
 *
 *  If you wish to import a key with an empty label then simply leave label's name blank
 *
 * ```sh
 *  $ pulumi import azure:appconfiguration/configurationKey:ConfigurationKey test https://appconfname1.azconfig.io/kv/keyName?label=
 * ```
 */
export class ConfigurationKey extends pulumi.CustomResource {
    /**
     * Get an existing ConfigurationKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigurationKeyState, opts?: pulumi.CustomResourceOptions): ConfigurationKey {
        return new ConfigurationKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:appconfiguration/configurationKey:ConfigurationKey';

    /**
     * Returns true if the given object is an instance of ConfigurationKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigurationKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigurationKey.__pulumiType;
    }

    /**
     * Specifies the id of the App Configuration. Changing this forces a new resource to be created.
     */
    public readonly configurationStoreId!: pulumi.Output<string>;
    /**
     * The content type of the App Configuration Key. This should only be set when type is set to `kv`.
     */
    public readonly contentType!: pulumi.Output<string>;
    /**
     * (Optional) The ETag of the key.
     */
    public readonly etag!: pulumi.Output<string>;
    /**
     * The name of the App Configuration Key to create. Changing this forces a new resource to be created.
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * The label of the App Configuration Key. Changing this forces a new resource to be created.
     */
    public readonly label!: pulumi.Output<string | undefined>;
    /**
     * Should this App Configuration Key be Locked to prevent changes?
     */
    public readonly locked!: pulumi.Output<boolean | undefined>;
    /**
     * A mapping of tags to assign to the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The type of the App Configuration Key. It can either be `kv` (simple [key/value](https://docs.microsoft.com/azure/azure-app-configuration/concept-key-value)) or `vault` (where the value is a reference to a [Key Vault Secret](https://azure.microsoft.com/en-gb/services/key-vault/). Defaults to `kv`.
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * The value of the App Configuration Key. This should only be set when type is set to `kv`.
     */
    public readonly value!: pulumi.Output<string | undefined>;
    /**
     * The ID of the vault secret this App Configuration Key refers to, when `type` is set to `vault`.
     *
     * > **NOTE:** When setting the `vaultKeyReference` using the `id` will pin the value to specific version of the secret, to reference latest secret value use `versionlessId`
     */
    public readonly vaultKeyReference!: pulumi.Output<string | undefined>;

    /**
     * Create a ConfigurationKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigurationKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigurationKeyArgs | ConfigurationKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigurationKeyState | undefined;
            resourceInputs["configurationStoreId"] = state ? state.configurationStoreId : undefined;
            resourceInputs["contentType"] = state ? state.contentType : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["locked"] = state ? state.locked : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
            resourceInputs["vaultKeyReference"] = state ? state.vaultKeyReference : undefined;
        } else {
            const args = argsOrState as ConfigurationKeyArgs | undefined;
            if ((!args || args.configurationStoreId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configurationStoreId'");
            }
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["configurationStoreId"] = args ? args.configurationStoreId : undefined;
            resourceInputs["contentType"] = args ? args.contentType : undefined;
            resourceInputs["etag"] = args ? args.etag : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["locked"] = args ? args.locked : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["vaultKeyReference"] = args ? args.vaultKeyReference : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConfigurationKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConfigurationKey resources.
 */
export interface ConfigurationKeyState {
    /**
     * Specifies the id of the App Configuration. Changing this forces a new resource to be created.
     */
    configurationStoreId?: pulumi.Input<string>;
    /**
     * The content type of the App Configuration Key. This should only be set when type is set to `kv`.
     */
    contentType?: pulumi.Input<string>;
    /**
     * (Optional) The ETag of the key.
     */
    etag?: pulumi.Input<string>;
    /**
     * The name of the App Configuration Key to create. Changing this forces a new resource to be created.
     */
    key?: pulumi.Input<string>;
    /**
     * The label of the App Configuration Key. Changing this forces a new resource to be created.
     */
    label?: pulumi.Input<string>;
    /**
     * Should this App Configuration Key be Locked to prevent changes?
     */
    locked?: pulumi.Input<boolean>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The type of the App Configuration Key. It can either be `kv` (simple [key/value](https://docs.microsoft.com/azure/azure-app-configuration/concept-key-value)) or `vault` (where the value is a reference to a [Key Vault Secret](https://azure.microsoft.com/en-gb/services/key-vault/). Defaults to `kv`.
     */
    type?: pulumi.Input<string>;
    /**
     * The value of the App Configuration Key. This should only be set when type is set to `kv`.
     */
    value?: pulumi.Input<string>;
    /**
     * The ID of the vault secret this App Configuration Key refers to, when `type` is set to `vault`.
     *
     * > **NOTE:** When setting the `vaultKeyReference` using the `id` will pin the value to specific version of the secret, to reference latest secret value use `versionlessId`
     */
    vaultKeyReference?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConfigurationKey resource.
 */
export interface ConfigurationKeyArgs {
    /**
     * Specifies the id of the App Configuration. Changing this forces a new resource to be created.
     */
    configurationStoreId: pulumi.Input<string>;
    /**
     * The content type of the App Configuration Key. This should only be set when type is set to `kv`.
     */
    contentType?: pulumi.Input<string>;
    /**
     * (Optional) The ETag of the key.
     */
    etag?: pulumi.Input<string>;
    /**
     * The name of the App Configuration Key to create. Changing this forces a new resource to be created.
     */
    key: pulumi.Input<string>;
    /**
     * The label of the App Configuration Key. Changing this forces a new resource to be created.
     */
    label?: pulumi.Input<string>;
    /**
     * Should this App Configuration Key be Locked to prevent changes?
     */
    locked?: pulumi.Input<boolean>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The type of the App Configuration Key. It can either be `kv` (simple [key/value](https://docs.microsoft.com/azure/azure-app-configuration/concept-key-value)) or `vault` (where the value is a reference to a [Key Vault Secret](https://azure.microsoft.com/en-gb/services/key-vault/). Defaults to `kv`.
     */
    type?: pulumi.Input<string>;
    /**
     * The value of the App Configuration Key. This should only be set when type is set to `kv`.
     */
    value?: pulumi.Input<string>;
    /**
     * The ID of the vault secret this App Configuration Key refers to, when `type` is set to `vault`.
     *
     * > **NOTE:** When setting the `vaultKeyReference` using the `id` will pin the value to specific version of the secret, to reference latest secret value use `versionlessId`
     */
    vaultKeyReference?: pulumi.Input<string>;
}
