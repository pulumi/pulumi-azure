// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Chaos Studio Experiment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example",
 *     location: "westeurope",
 * });
 * const exampleUserAssignedIdentity = new azure.authorization.UserAssignedIdentity("example", {
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     name: "example",
 * });
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
 *     name: "example",
 *     addressSpaces: ["10.0.0.0/16"],
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const exampleSubnet = new azure.network.Subnet("example", {
 *     name: "internal",
 *     resourceGroupName: example.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.2.0/24"],
 * });
 * const exampleNetworkInterface = new azure.network.NetworkInterface("example", {
 *     name: "example",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     ipConfigurations: [{
 *         name: "example",
 *         subnetId: exampleSubnet.id,
 *         privateIpAddressAllocation: "Dynamic",
 *     }],
 * });
 * const exampleLinuxVirtualMachine = new azure.compute.LinuxVirtualMachine("example", {
 *     name: "example",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     size: "Standard_F2",
 *     adminUsername: "adminuser",
 *     adminPassword: "example",
 *     disablePasswordAuthentication: false,
 *     networkInterfaceIds: [exampleNetworkInterface.id],
 *     osDisk: {
 *         caching: "ReadWrite",
 *         storageAccountType: "Standard_LRS",
 *     },
 *     sourceImageReference: {
 *         publisher: "Canonical",
 *         offer: "0001-com-ubuntu-server-jammy",
 *         sku: "22_04-lts",
 *         version: "latest",
 *     },
 * });
 * const exampleTarget = new azure.chaosstudio.Target("example", {
 *     location: example.location,
 *     targetResourceId: exampleLinuxVirtualMachine.id,
 *     targetType: "Microsoft-VirtualMachine",
 * });
 * const exampleCapability = new azure.chaosstudio.Capability("example", {
 *     chaosStudioTargetId: exampleTarget.id,
 *     capabilityType: "Shutdown-1.0",
 * });
 * const exampleExperiment = new azure.chaosstudio.Experiment("example", {
 *     location: example.location,
 *     name: "example",
 *     resourceGroupName: example.name,
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 *     selectors: [{
 *         name: "Selector1",
 *         chaosStudioTargetIds: [exampleTarget.id],
 *     }],
 *     steps: [{
 *         name: "example",
 *         branches: [{
 *             name: "example",
 *             actions: [{
 *                 urn: exampleCapability.capabilityUrn,
 *                 selectorName: "Selector1",
 *                 parameters: {
 *                     abruptShutdown: "false",
 *                 },
 *                 actionType: "continuous",
 *                 duration: "PT10M",
 *             }],
 *         }],
 *     }],
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Chaos`: 2023-11-01
 *
 * ## Import
 *
 * Chaos Studio Experiments can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:chaosstudio/experiment:Experiment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Chaos/experiments/experiment1
 * ```
 */
export class Experiment extends pulumi.CustomResource {
    /**
     * Get an existing Experiment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExperimentState, opts?: pulumi.CustomResourceOptions): Experiment {
        return new Experiment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:chaosstudio/experiment:Experiment';

    /**
     * Returns true if the given object is an instance of Experiment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Experiment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Experiment.__pulumiType;
    }

    /**
     * A `identity` block as defined below.
     */
    public readonly identity!: pulumi.Output<outputs.chaosstudio.ExperimentIdentity | undefined>;
    /**
     * The Azure Region where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name which should be used for this Chaos Studio Experiment. Changing this forces a new Chaos Studio Experiment to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the Resource Group where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * One or more `selectors` blocks as defined below.
     */
    public readonly selectors!: pulumi.Output<outputs.chaosstudio.ExperimentSelector[]>;
    /**
     * One or more `steps` blocks as defined below.
     */
    public readonly steps!: pulumi.Output<outputs.chaosstudio.ExperimentStep[]>;

    /**
     * Create a Experiment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExperimentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExperimentArgs | ExperimentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExperimentState | undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["selectors"] = state ? state.selectors : undefined;
            resourceInputs["steps"] = state ? state.steps : undefined;
        } else {
            const args = argsOrState as ExperimentArgs | undefined;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.selectors === undefined) && !opts.urn) {
                throw new Error("Missing required property 'selectors'");
            }
            if ((!args || args.steps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'steps'");
            }
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["selectors"] = args ? args.selectors : undefined;
            resourceInputs["steps"] = args ? args.steps : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Experiment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Experiment resources.
 */
export interface ExperimentState {
    /**
     * A `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.chaosstudio.ExperimentIdentity>;
    /**
     * The Azure Region where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The name which should be used for this Chaos Studio Experiment. Changing this forces a new Chaos Studio Experiment to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * One or more `selectors` blocks as defined below.
     */
    selectors?: pulumi.Input<pulumi.Input<inputs.chaosstudio.ExperimentSelector>[]>;
    /**
     * One or more `steps` blocks as defined below.
     */
    steps?: pulumi.Input<pulumi.Input<inputs.chaosstudio.ExperimentStep>[]>;
}

/**
 * The set of arguments for constructing a Experiment resource.
 */
export interface ExperimentArgs {
    /**
     * A `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.chaosstudio.ExperimentIdentity>;
    /**
     * The Azure Region where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The name which should be used for this Chaos Studio Experiment. Changing this forces a new Chaos Studio Experiment to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * One or more `selectors` blocks as defined below.
     */
    selectors: pulumi.Input<pulumi.Input<inputs.chaosstudio.ExperimentSelector>[]>;
    /**
     * One or more `steps` blocks as defined below.
     */
    steps: pulumi.Input<pulumi.Input<inputs.chaosstudio.ExperimentStep>[]>;
}
