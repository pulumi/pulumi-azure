// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Database Vulnerability Assessment Rule Baseline.
 *
 * > **NOTE** Database Vulnerability Assessment is currently only available for MS SQL databases.
 *
 * ## Example Usage
 *
 *
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West US"});
 * const exampleSqlServer = new azure.sql.SqlServer("exampleSqlServer", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     version: "12.0",
 *     administratorLogin: "4dm1n157r470r",
 *     administratorLoginPassword: "4-v3ry-53cr37-p455w0rd",
 * });
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "GRS",
 * });
 * const exampleContainer = new azure.storage.Container("exampleContainer", {
 *     storageAccountName: exampleAccount.name,
 *     containerAccessType: "private",
 * });
 * const exampleServerSecurityAlertPolicy = new azure.mssql.ServerSecurityAlertPolicy("exampleServerSecurityAlertPolicy", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     serverName: exampleSqlServer.name,
 *     state: "Enabled",
 * });
 * const exampleDatabase = new azure.sql.Database("exampleDatabase", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     serverName: exampleSqlServer.name,
 *     location: exampleResourceGroup.location,
 *     edition: "Standard",
 * });
 * const exampleServerVulnerabilityAssessment = new azure.mssql.ServerVulnerabilityAssessment("exampleServerVulnerabilityAssessment", {
 *     serverSecurityAlertPolicyId: exampleServerSecurityAlertPolicy.id,
 *     storageContainerPath: pulumi.interpolate`${exampleAccount.primaryBlobEndpoint}${exampleContainer.name}/`,
 *     storageAccountAccessKey: exampleAccount.primaryAccessKey,
 * });
 * const exampleDatabaseVulnerabilityAssessmentRuleBaseline = new azure.mssql.DatabaseVulnerabilityAssessmentRuleBaseline("exampleDatabaseVulnerabilityAssessmentRuleBaseline", {
 *     serverVulnerabilityAssessmentId: exampleServerVulnerabilityAssessment.id,
 *     databaseName: exampleDatabase.name,
 *     ruleId: "VA2065",
 *     baselineName: "master",
 *     baseline_result: [
 *         {
 *             results: [
 *                 "allowedip1",
 *                 "123.123.123.123",
 *                 "123.123.123.123",
 *             ],
 *         },
 *         {
 *             results: [
 *                 "allowedip2",
 *                 "255.255.255.255",
 *                 "255.255.255.255",
 *             ],
 *         },
 *     ],
 * });
 * ```
 */
export class DatabaseVulnerabilityAssessmentRuleBaseline extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseVulnerabilityAssessmentRuleBaseline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseVulnerabilityAssessmentRuleBaselineState, opts?: pulumi.CustomResourceOptions): DatabaseVulnerabilityAssessmentRuleBaseline {
        return new DatabaseVulnerabilityAssessmentRuleBaseline(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:mssql/databaseVulnerabilityAssessmentRuleBaseline:DatabaseVulnerabilityAssessmentRuleBaseline';

    /**
     * Returns true if the given object is an instance of DatabaseVulnerabilityAssessmentRuleBaseline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseVulnerabilityAssessmentRuleBaseline {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseVulnerabilityAssessmentRuleBaseline.__pulumiType;
    }

    /**
     * The name of the vulnerability assessment rule baseline. Valid options are `default` and `master`. `default` implies a baseline on a database level rule and `master` for server level rule. Defaults to `default`. Changing this forces a new resource to be created.
     */
    public readonly baselineName!: pulumi.Output<string | undefined>;
    /**
     * A `baselineResult` block as documented below. Multiple blocks can be defined.
     */
    public readonly baselineResults!: pulumi.Output<outputs.mssql.DatabaseVulnerabilityAssessmentRuleBaselineBaselineResult[]>;
    /**
     * Specifies the name of the MS SQL Database. Changing this forces a new resource to be created.
     */
    public readonly databaseName!: pulumi.Output<string>;
    /**
     * The vulnerability assessment rule ID. Changing this forces a new resource to be created.
     */
    public readonly ruleId!: pulumi.Output<string>;
    /**
     * The Vulnerability Assessment ID of the MS SQL Server. Changing this forces a new resource to be created.
     */
    public readonly serverVulnerabilityAssessmentId!: pulumi.Output<string>;

    /**
     * Create a DatabaseVulnerabilityAssessmentRuleBaseline resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseVulnerabilityAssessmentRuleBaselineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseVulnerabilityAssessmentRuleBaselineArgs | DatabaseVulnerabilityAssessmentRuleBaselineState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as DatabaseVulnerabilityAssessmentRuleBaselineState | undefined;
            inputs["baselineName"] = state ? state.baselineName : undefined;
            inputs["baselineResults"] = state ? state.baselineResults : undefined;
            inputs["databaseName"] = state ? state.databaseName : undefined;
            inputs["ruleId"] = state ? state.ruleId : undefined;
            inputs["serverVulnerabilityAssessmentId"] = state ? state.serverVulnerabilityAssessmentId : undefined;
        } else {
            const args = argsOrState as DatabaseVulnerabilityAssessmentRuleBaselineArgs | undefined;
            if (!args || args.baselineResults === undefined) {
                throw new Error("Missing required property 'baselineResults'");
            }
            if (!args || args.databaseName === undefined) {
                throw new Error("Missing required property 'databaseName'");
            }
            if (!args || args.ruleId === undefined) {
                throw new Error("Missing required property 'ruleId'");
            }
            if (!args || args.serverVulnerabilityAssessmentId === undefined) {
                throw new Error("Missing required property 'serverVulnerabilityAssessmentId'");
            }
            inputs["baselineName"] = args ? args.baselineName : undefined;
            inputs["baselineResults"] = args ? args.baselineResults : undefined;
            inputs["databaseName"] = args ? args.databaseName : undefined;
            inputs["ruleId"] = args ? args.ruleId : undefined;
            inputs["serverVulnerabilityAssessmentId"] = args ? args.serverVulnerabilityAssessmentId : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(DatabaseVulnerabilityAssessmentRuleBaseline.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DatabaseVulnerabilityAssessmentRuleBaseline resources.
 */
export interface DatabaseVulnerabilityAssessmentRuleBaselineState {
    /**
     * The name of the vulnerability assessment rule baseline. Valid options are `default` and `master`. `default` implies a baseline on a database level rule and `master` for server level rule. Defaults to `default`. Changing this forces a new resource to be created.
     */
    readonly baselineName?: pulumi.Input<string>;
    /**
     * A `baselineResult` block as documented below. Multiple blocks can be defined.
     */
    readonly baselineResults?: pulumi.Input<pulumi.Input<inputs.mssql.DatabaseVulnerabilityAssessmentRuleBaselineBaselineResult>[]>;
    /**
     * Specifies the name of the MS SQL Database. Changing this forces a new resource to be created.
     */
    readonly databaseName?: pulumi.Input<string>;
    /**
     * The vulnerability assessment rule ID. Changing this forces a new resource to be created.
     */
    readonly ruleId?: pulumi.Input<string>;
    /**
     * The Vulnerability Assessment ID of the MS SQL Server. Changing this forces a new resource to be created.
     */
    readonly serverVulnerabilityAssessmentId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatabaseVulnerabilityAssessmentRuleBaseline resource.
 */
export interface DatabaseVulnerabilityAssessmentRuleBaselineArgs {
    /**
     * The name of the vulnerability assessment rule baseline. Valid options are `default` and `master`. `default` implies a baseline on a database level rule and `master` for server level rule. Defaults to `default`. Changing this forces a new resource to be created.
     */
    readonly baselineName?: pulumi.Input<string>;
    /**
     * A `baselineResult` block as documented below. Multiple blocks can be defined.
     */
    readonly baselineResults: pulumi.Input<pulumi.Input<inputs.mssql.DatabaseVulnerabilityAssessmentRuleBaselineBaselineResult>[]>;
    /**
     * Specifies the name of the MS SQL Database. Changing this forces a new resource to be created.
     */
    readonly databaseName: pulumi.Input<string>;
    /**
     * The vulnerability assessment rule ID. Changing this forces a new resource to be created.
     */
    readonly ruleId: pulumi.Input<string>;
    /**
     * The Vulnerability Assessment ID of the MS SQL Server. Changing this forces a new resource to be created.
     */
    readonly serverVulnerabilityAssessmentId: pulumi.Input<string>;
}
