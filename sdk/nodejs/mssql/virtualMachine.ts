// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Microsoft SQL Virtual Machine
 *
 * ## Example Usage
 *
 * This example provisions a brief Managed Microsoft SQL Virtual Machine.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.compute.getVirtualMachine({
 *     name: "example-vm",
 *     resourceGroupName: "example-resources",
 * });
 * const exampleVirtualMachine = new azure.mssql.VirtualMachine("example", {
 *     virtualMachineId: example.then(example => example.id),
 *     sqlLicenseType: "PAYG",
 *     rServicesEnabled: true,
 *     sqlConnectivityPort: 1433,
 *     sqlConnectivityType: "PRIVATE",
 *     sqlConnectivityUpdatePassword: "Password1234!",
 *     sqlConnectivityUpdateUsername: "sqllogin",
 *     autoPatching: {
 *         dayOfWeek: "Sunday",
 *         maintenanceWindowDurationInMinutes: 60,
 *         maintenanceWindowStartingHour: 2,
 *     },
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Compute` - 2024-03-01
 *
 * * `Microsoft.SqlVirtualMachine` - 2023-10-01
 *
 * ## Import
 *
 * Microsoft SQL Virtual Machines can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:mssql/virtualMachine:VirtualMachine example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/example1
 * ```
 */
export class VirtualMachine extends pulumi.CustomResource {
    /**
     * Get an existing VirtualMachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualMachineState, opts?: pulumi.CustomResourceOptions): VirtualMachine {
        return new VirtualMachine(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:mssql/virtualMachine:VirtualMachine';

    /**
     * Returns true if the given object is an instance of VirtualMachine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualMachine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualMachine.__pulumiType;
    }

    /**
     * An `assessment` block as defined below.
     */
    declare public readonly assessment: pulumi.Output<outputs.mssql.VirtualMachineAssessment | undefined>;
    /**
     * An `autoBackup` block as defined below. This block can be added to an existing resource, but removing this block forces a new resource to be created.
     */
    declare public readonly autoBackup: pulumi.Output<outputs.mssql.VirtualMachineAutoBackup | undefined>;
    /**
     * An `autoPatching` block as defined below.
     */
    declare public readonly autoPatching: pulumi.Output<outputs.mssql.VirtualMachineAutoPatching | undefined>;
    /**
     * An `keyVaultCredential` block as defined below.
     */
    declare public readonly keyVaultCredential: pulumi.Output<outputs.mssql.VirtualMachineKeyVaultCredential | undefined>;
    /**
     * Should R Services be enabled?
     */
    declare public readonly rServicesEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The SQL Server port. Defaults to `1433`.
     */
    declare public readonly sqlConnectivityPort: pulumi.Output<number | undefined>;
    /**
     * The connectivity type used for this SQL Server. Possible values are `LOCAL`, `PRIVATE` and `PUBLIC`. Defaults to `PRIVATE`.
     */
    declare public readonly sqlConnectivityType: pulumi.Output<string | undefined>;
    /**
     * The SQL Server sysadmin login password.
     */
    declare public readonly sqlConnectivityUpdatePassword: pulumi.Output<string | undefined>;
    /**
     * The SQL Server sysadmin login to create.
     */
    declare public readonly sqlConnectivityUpdateUsername: pulumi.Output<string | undefined>;
    /**
     * A `sqlInstance` block as defined below.
     */
    declare public readonly sqlInstance: pulumi.Output<outputs.mssql.VirtualMachineSqlInstance | undefined>;
    /**
     * The SQL Server license type. Possible values are `AHUB` (Azure Hybrid Benefit), `DR` (Disaster Recovery), and `PAYG` (Pay-As-You-Go). Changing this forces a new resource to be created.
     */
    declare public readonly sqlLicenseType: pulumi.Output<string | undefined>;
    /**
     * The ID of the SQL Virtual Machine Group that the SQL Virtual Machine belongs to.
     */
    declare public readonly sqlVirtualMachineGroupId: pulumi.Output<string | undefined>;
    /**
     * An `storageConfiguration` block as defined below.
     */
    declare public readonly storageConfiguration: pulumi.Output<outputs.mssql.VirtualMachineStorageConfiguration | undefined>;
    /**
     * A mapping of tags to assign to the resource.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The ID of the Virtual Machine. Changing this forces a new resource to be created.
     */
    declare public readonly virtualMachineId: pulumi.Output<string>;
    /**
     * A `wsfcDomainCredential` block as defined below
     */
    declare public readonly wsfcDomainCredential: pulumi.Output<outputs.mssql.VirtualMachineWsfcDomainCredential | undefined>;

    /**
     * Create a VirtualMachine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualMachineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualMachineArgs | VirtualMachineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualMachineState | undefined;
            resourceInputs["assessment"] = state?.assessment;
            resourceInputs["autoBackup"] = state?.autoBackup;
            resourceInputs["autoPatching"] = state?.autoPatching;
            resourceInputs["keyVaultCredential"] = state?.keyVaultCredential;
            resourceInputs["rServicesEnabled"] = state?.rServicesEnabled;
            resourceInputs["sqlConnectivityPort"] = state?.sqlConnectivityPort;
            resourceInputs["sqlConnectivityType"] = state?.sqlConnectivityType;
            resourceInputs["sqlConnectivityUpdatePassword"] = state?.sqlConnectivityUpdatePassword;
            resourceInputs["sqlConnectivityUpdateUsername"] = state?.sqlConnectivityUpdateUsername;
            resourceInputs["sqlInstance"] = state?.sqlInstance;
            resourceInputs["sqlLicenseType"] = state?.sqlLicenseType;
            resourceInputs["sqlVirtualMachineGroupId"] = state?.sqlVirtualMachineGroupId;
            resourceInputs["storageConfiguration"] = state?.storageConfiguration;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["virtualMachineId"] = state?.virtualMachineId;
            resourceInputs["wsfcDomainCredential"] = state?.wsfcDomainCredential;
        } else {
            const args = argsOrState as VirtualMachineArgs | undefined;
            if (args?.virtualMachineId === undefined && !opts.urn) {
                throw new Error("Missing required property 'virtualMachineId'");
            }
            resourceInputs["assessment"] = args?.assessment;
            resourceInputs["autoBackup"] = args?.autoBackup;
            resourceInputs["autoPatching"] = args?.autoPatching;
            resourceInputs["keyVaultCredential"] = args?.keyVaultCredential;
            resourceInputs["rServicesEnabled"] = args?.rServicesEnabled;
            resourceInputs["sqlConnectivityPort"] = args?.sqlConnectivityPort;
            resourceInputs["sqlConnectivityType"] = args?.sqlConnectivityType;
            resourceInputs["sqlConnectivityUpdatePassword"] = args?.sqlConnectivityUpdatePassword ? pulumi.secret(args.sqlConnectivityUpdatePassword) : undefined;
            resourceInputs["sqlConnectivityUpdateUsername"] = args?.sqlConnectivityUpdateUsername ? pulumi.secret(args.sqlConnectivityUpdateUsername) : undefined;
            resourceInputs["sqlInstance"] = args?.sqlInstance;
            resourceInputs["sqlLicenseType"] = args?.sqlLicenseType;
            resourceInputs["sqlVirtualMachineGroupId"] = args?.sqlVirtualMachineGroupId;
            resourceInputs["storageConfiguration"] = args?.storageConfiguration;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["virtualMachineId"] = args?.virtualMachineId;
            resourceInputs["wsfcDomainCredential"] = args?.wsfcDomainCredential;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sqlConnectivityUpdatePassword", "sqlConnectivityUpdateUsername"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(VirtualMachine.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VirtualMachine resources.
 */
export interface VirtualMachineState {
    /**
     * An `assessment` block as defined below.
     */
    assessment?: pulumi.Input<inputs.mssql.VirtualMachineAssessment>;
    /**
     * An `autoBackup` block as defined below. This block can be added to an existing resource, but removing this block forces a new resource to be created.
     */
    autoBackup?: pulumi.Input<inputs.mssql.VirtualMachineAutoBackup>;
    /**
     * An `autoPatching` block as defined below.
     */
    autoPatching?: pulumi.Input<inputs.mssql.VirtualMachineAutoPatching>;
    /**
     * An `keyVaultCredential` block as defined below.
     */
    keyVaultCredential?: pulumi.Input<inputs.mssql.VirtualMachineKeyVaultCredential>;
    /**
     * Should R Services be enabled?
     */
    rServicesEnabled?: pulumi.Input<boolean>;
    /**
     * The SQL Server port. Defaults to `1433`.
     */
    sqlConnectivityPort?: pulumi.Input<number>;
    /**
     * The connectivity type used for this SQL Server. Possible values are `LOCAL`, `PRIVATE` and `PUBLIC`. Defaults to `PRIVATE`.
     */
    sqlConnectivityType?: pulumi.Input<string>;
    /**
     * The SQL Server sysadmin login password.
     */
    sqlConnectivityUpdatePassword?: pulumi.Input<string>;
    /**
     * The SQL Server sysadmin login to create.
     */
    sqlConnectivityUpdateUsername?: pulumi.Input<string>;
    /**
     * A `sqlInstance` block as defined below.
     */
    sqlInstance?: pulumi.Input<inputs.mssql.VirtualMachineSqlInstance>;
    /**
     * The SQL Server license type. Possible values are `AHUB` (Azure Hybrid Benefit), `DR` (Disaster Recovery), and `PAYG` (Pay-As-You-Go). Changing this forces a new resource to be created.
     */
    sqlLicenseType?: pulumi.Input<string>;
    /**
     * The ID of the SQL Virtual Machine Group that the SQL Virtual Machine belongs to.
     */
    sqlVirtualMachineGroupId?: pulumi.Input<string>;
    /**
     * An `storageConfiguration` block as defined below.
     */
    storageConfiguration?: pulumi.Input<inputs.mssql.VirtualMachineStorageConfiguration>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the Virtual Machine. Changing this forces a new resource to be created.
     */
    virtualMachineId?: pulumi.Input<string>;
    /**
     * A `wsfcDomainCredential` block as defined below
     */
    wsfcDomainCredential?: pulumi.Input<inputs.mssql.VirtualMachineWsfcDomainCredential>;
}

/**
 * The set of arguments for constructing a VirtualMachine resource.
 */
export interface VirtualMachineArgs {
    /**
     * An `assessment` block as defined below.
     */
    assessment?: pulumi.Input<inputs.mssql.VirtualMachineAssessment>;
    /**
     * An `autoBackup` block as defined below. This block can be added to an existing resource, but removing this block forces a new resource to be created.
     */
    autoBackup?: pulumi.Input<inputs.mssql.VirtualMachineAutoBackup>;
    /**
     * An `autoPatching` block as defined below.
     */
    autoPatching?: pulumi.Input<inputs.mssql.VirtualMachineAutoPatching>;
    /**
     * An `keyVaultCredential` block as defined below.
     */
    keyVaultCredential?: pulumi.Input<inputs.mssql.VirtualMachineKeyVaultCredential>;
    /**
     * Should R Services be enabled?
     */
    rServicesEnabled?: pulumi.Input<boolean>;
    /**
     * The SQL Server port. Defaults to `1433`.
     */
    sqlConnectivityPort?: pulumi.Input<number>;
    /**
     * The connectivity type used for this SQL Server. Possible values are `LOCAL`, `PRIVATE` and `PUBLIC`. Defaults to `PRIVATE`.
     */
    sqlConnectivityType?: pulumi.Input<string>;
    /**
     * The SQL Server sysadmin login password.
     */
    sqlConnectivityUpdatePassword?: pulumi.Input<string>;
    /**
     * The SQL Server sysadmin login to create.
     */
    sqlConnectivityUpdateUsername?: pulumi.Input<string>;
    /**
     * A `sqlInstance` block as defined below.
     */
    sqlInstance?: pulumi.Input<inputs.mssql.VirtualMachineSqlInstance>;
    /**
     * The SQL Server license type. Possible values are `AHUB` (Azure Hybrid Benefit), `DR` (Disaster Recovery), and `PAYG` (Pay-As-You-Go). Changing this forces a new resource to be created.
     */
    sqlLicenseType?: pulumi.Input<string>;
    /**
     * The ID of the SQL Virtual Machine Group that the SQL Virtual Machine belongs to.
     */
    sqlVirtualMachineGroupId?: pulumi.Input<string>;
    /**
     * An `storageConfiguration` block as defined below.
     */
    storageConfiguration?: pulumi.Input<inputs.mssql.VirtualMachineStorageConfiguration>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the Virtual Machine. Changing this forces a new resource to be created.
     */
    virtualMachineId: pulumi.Input<string>;
    /**
     * A `wsfcDomainCredential` block as defined below
     */
    wsfcDomainCredential?: pulumi.Input<inputs.mssql.VirtualMachineWsfcDomainCredential>;
}
