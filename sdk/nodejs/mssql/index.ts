// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DatabaseArgs, DatabaseState } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { DatabaseExtendedAuditingPolicyArgs, DatabaseExtendedAuditingPolicyState } from "./databaseExtendedAuditingPolicy";
export type DatabaseExtendedAuditingPolicy = import("./databaseExtendedAuditingPolicy").DatabaseExtendedAuditingPolicy;
export const DatabaseExtendedAuditingPolicy: typeof import("./databaseExtendedAuditingPolicy").DatabaseExtendedAuditingPolicy = null as any;
utilities.lazyLoad(exports, ["DatabaseExtendedAuditingPolicy"], () => require("./databaseExtendedAuditingPolicy"));

export { DatabaseVulnerabilityAssessmentRuleBaselineArgs, DatabaseVulnerabilityAssessmentRuleBaselineState } from "./databaseVulnerabilityAssessmentRuleBaseline";
export type DatabaseVulnerabilityAssessmentRuleBaseline = import("./databaseVulnerabilityAssessmentRuleBaseline").DatabaseVulnerabilityAssessmentRuleBaseline;
export const DatabaseVulnerabilityAssessmentRuleBaseline: typeof import("./databaseVulnerabilityAssessmentRuleBaseline").DatabaseVulnerabilityAssessmentRuleBaseline = null as any;
utilities.lazyLoad(exports, ["DatabaseVulnerabilityAssessmentRuleBaseline"], () => require("./databaseVulnerabilityAssessmentRuleBaseline"));

export { ElasticPoolArgs, ElasticPoolState } from "./elasticPool";
export type ElasticPool = import("./elasticPool").ElasticPool;
export const ElasticPool: typeof import("./elasticPool").ElasticPool = null as any;
utilities.lazyLoad(exports, ["ElasticPool"], () => require("./elasticPool"));

export { FailoverGroupArgs, FailoverGroupState } from "./failoverGroup";
export type FailoverGroup = import("./failoverGroup").FailoverGroup;
export const FailoverGroup: typeof import("./failoverGroup").FailoverGroup = null as any;
utilities.lazyLoad(exports, ["FailoverGroup"], () => require("./failoverGroup"));

export { FirewallRuleArgs, FirewallRuleState } from "./firewallRule";
export type FirewallRule = import("./firewallRule").FirewallRule;
export const FirewallRule: typeof import("./firewallRule").FirewallRule = null as any;
utilities.lazyLoad(exports, ["FirewallRule"], () => require("./firewallRule"));

export { GetDatabaseArgs, GetDatabaseResult, GetDatabaseOutputArgs } from "./getDatabase";
export const getDatabase: typeof import("./getDatabase").getDatabase = null as any;
export const getDatabaseOutput: typeof import("./getDatabase").getDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabase","getDatabaseOutput"], () => require("./getDatabase"));

export { GetElasticPoolArgs, GetElasticPoolResult, GetElasticPoolOutputArgs } from "./getElasticPool";
export const getElasticPool: typeof import("./getElasticPool").getElasticPool = null as any;
export const getElasticPoolOutput: typeof import("./getElasticPool").getElasticPoolOutput = null as any;
utilities.lazyLoad(exports, ["getElasticPool","getElasticPoolOutput"], () => require("./getElasticPool"));

export { GetManagedInstanceArgs, GetManagedInstanceResult, GetManagedInstanceOutputArgs } from "./getManagedInstance";
export const getManagedInstance: typeof import("./getManagedInstance").getManagedInstance = null as any;
export const getManagedInstanceOutput: typeof import("./getManagedInstance").getManagedInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstance","getManagedInstanceOutput"], () => require("./getManagedInstance"));

export { GetServerArgs, GetServerResult, GetServerOutputArgs } from "./getServer";
export const getServer: typeof import("./getServer").getServer = null as any;
export const getServerOutput: typeof import("./getServer").getServerOutput = null as any;
utilities.lazyLoad(exports, ["getServer","getServerOutput"], () => require("./getServer"));

export { JobAgentArgs, JobAgentState } from "./jobAgent";
export type JobAgent = import("./jobAgent").JobAgent;
export const JobAgent: typeof import("./jobAgent").JobAgent = null as any;
utilities.lazyLoad(exports, ["JobAgent"], () => require("./jobAgent"));

export { JobCredentialArgs, JobCredentialState } from "./jobCredential";
export type JobCredential = import("./jobCredential").JobCredential;
export const JobCredential: typeof import("./jobCredential").JobCredential = null as any;
utilities.lazyLoad(exports, ["JobCredential"], () => require("./jobCredential"));

export { ManagedDatabaseArgs, ManagedDatabaseState } from "./managedDatabase";
export type ManagedDatabase = import("./managedDatabase").ManagedDatabase;
export const ManagedDatabase: typeof import("./managedDatabase").ManagedDatabase = null as any;
utilities.lazyLoad(exports, ["ManagedDatabase"], () => require("./managedDatabase"));

export { ManagedInstanceArgs, ManagedInstanceState } from "./managedInstance";
export type ManagedInstance = import("./managedInstance").ManagedInstance;
export const ManagedInstance: typeof import("./managedInstance").ManagedInstance = null as any;
utilities.lazyLoad(exports, ["ManagedInstance"], () => require("./managedInstance"));

export { ManagedInstanceActiveDirectoryAdministratorArgs, ManagedInstanceActiveDirectoryAdministratorState } from "./managedInstanceActiveDirectoryAdministrator";
export type ManagedInstanceActiveDirectoryAdministrator = import("./managedInstanceActiveDirectoryAdministrator").ManagedInstanceActiveDirectoryAdministrator;
export const ManagedInstanceActiveDirectoryAdministrator: typeof import("./managedInstanceActiveDirectoryAdministrator").ManagedInstanceActiveDirectoryAdministrator = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceActiveDirectoryAdministrator"], () => require("./managedInstanceActiveDirectoryAdministrator"));

export { ManagedInstanceFailoverGroupArgs, ManagedInstanceFailoverGroupState } from "./managedInstanceFailoverGroup";
export type ManagedInstanceFailoverGroup = import("./managedInstanceFailoverGroup").ManagedInstanceFailoverGroup;
export const ManagedInstanceFailoverGroup: typeof import("./managedInstanceFailoverGroup").ManagedInstanceFailoverGroup = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceFailoverGroup"], () => require("./managedInstanceFailoverGroup"));

export { ManagedInstanceVulnerabilityAssessmentArgs, ManagedInstanceVulnerabilityAssessmentState } from "./managedInstanceVulnerabilityAssessment";
export type ManagedInstanceVulnerabilityAssessment = import("./managedInstanceVulnerabilityAssessment").ManagedInstanceVulnerabilityAssessment;
export const ManagedInstanceVulnerabilityAssessment: typeof import("./managedInstanceVulnerabilityAssessment").ManagedInstanceVulnerabilityAssessment = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceVulnerabilityAssessment"], () => require("./managedInstanceVulnerabilityAssessment"));

export { OutboundFirewallRuleArgs, OutboundFirewallRuleState } from "./outboundFirewallRule";
export type OutboundFirewallRule = import("./outboundFirewallRule").OutboundFirewallRule;
export const OutboundFirewallRule: typeof import("./outboundFirewallRule").OutboundFirewallRule = null as any;
utilities.lazyLoad(exports, ["OutboundFirewallRule"], () => require("./outboundFirewallRule"));

export { ServerArgs, ServerState } from "./server";
export type Server = import("./server").Server;
export const Server: typeof import("./server").Server = null as any;
utilities.lazyLoad(exports, ["Server"], () => require("./server"));

export { ServerDnsAliasArgs, ServerDnsAliasState } from "./serverDnsAlias";
export type ServerDnsAlias = import("./serverDnsAlias").ServerDnsAlias;
export const ServerDnsAlias: typeof import("./serverDnsAlias").ServerDnsAlias = null as any;
utilities.lazyLoad(exports, ["ServerDnsAlias"], () => require("./serverDnsAlias"));

export { ServerExtendedAuditingPolicyArgs, ServerExtendedAuditingPolicyState } from "./serverExtendedAuditingPolicy";
export type ServerExtendedAuditingPolicy = import("./serverExtendedAuditingPolicy").ServerExtendedAuditingPolicy;
export const ServerExtendedAuditingPolicy: typeof import("./serverExtendedAuditingPolicy").ServerExtendedAuditingPolicy = null as any;
utilities.lazyLoad(exports, ["ServerExtendedAuditingPolicy"], () => require("./serverExtendedAuditingPolicy"));

export { ServerSecurityAlertPolicyArgs, ServerSecurityAlertPolicyState } from "./serverSecurityAlertPolicy";
export type ServerSecurityAlertPolicy = import("./serverSecurityAlertPolicy").ServerSecurityAlertPolicy;
export const ServerSecurityAlertPolicy: typeof import("./serverSecurityAlertPolicy").ServerSecurityAlertPolicy = null as any;
utilities.lazyLoad(exports, ["ServerSecurityAlertPolicy"], () => require("./serverSecurityAlertPolicy"));

export { ServerTransparentDataEncryptionArgs, ServerTransparentDataEncryptionState } from "./serverTransparentDataEncryption";
export type ServerTransparentDataEncryption = import("./serverTransparentDataEncryption").ServerTransparentDataEncryption;
export const ServerTransparentDataEncryption: typeof import("./serverTransparentDataEncryption").ServerTransparentDataEncryption = null as any;
utilities.lazyLoad(exports, ["ServerTransparentDataEncryption"], () => require("./serverTransparentDataEncryption"));

export { ServerVulnerabilityAssessmentArgs, ServerVulnerabilityAssessmentState } from "./serverVulnerabilityAssessment";
export type ServerVulnerabilityAssessment = import("./serverVulnerabilityAssessment").ServerVulnerabilityAssessment;
export const ServerVulnerabilityAssessment: typeof import("./serverVulnerabilityAssessment").ServerVulnerabilityAssessment = null as any;
utilities.lazyLoad(exports, ["ServerVulnerabilityAssessment"], () => require("./serverVulnerabilityAssessment"));

export { VirtualMachineArgs, VirtualMachineState } from "./virtualMachine";
export type VirtualMachine = import("./virtualMachine").VirtualMachine;
export const VirtualMachine: typeof import("./virtualMachine").VirtualMachine = null as any;
utilities.lazyLoad(exports, ["VirtualMachine"], () => require("./virtualMachine"));

export { VirtualNetworkRuleArgs, VirtualNetworkRuleState } from "./virtualNetworkRule";
export type VirtualNetworkRule = import("./virtualNetworkRule").VirtualNetworkRule;
export const VirtualNetworkRule: typeof import("./virtualNetworkRule").VirtualNetworkRule = null as any;
utilities.lazyLoad(exports, ["VirtualNetworkRule"], () => require("./virtualNetworkRule"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:mssql/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "azure:mssql/databaseExtendedAuditingPolicy:DatabaseExtendedAuditingPolicy":
                return new DatabaseExtendedAuditingPolicy(name, <any>undefined, { urn })
            case "azure:mssql/databaseVulnerabilityAssessmentRuleBaseline:DatabaseVulnerabilityAssessmentRuleBaseline":
                return new DatabaseVulnerabilityAssessmentRuleBaseline(name, <any>undefined, { urn })
            case "azure:mssql/elasticPool:ElasticPool":
                return new ElasticPool(name, <any>undefined, { urn })
            case "azure:mssql/failoverGroup:FailoverGroup":
                return new FailoverGroup(name, <any>undefined, { urn })
            case "azure:mssql/firewallRule:FirewallRule":
                return new FirewallRule(name, <any>undefined, { urn })
            case "azure:mssql/jobAgent:JobAgent":
                return new JobAgent(name, <any>undefined, { urn })
            case "azure:mssql/jobCredential:JobCredential":
                return new JobCredential(name, <any>undefined, { urn })
            case "azure:mssql/managedDatabase:ManagedDatabase":
                return new ManagedDatabase(name, <any>undefined, { urn })
            case "azure:mssql/managedInstance:ManagedInstance":
                return new ManagedInstance(name, <any>undefined, { urn })
            case "azure:mssql/managedInstanceActiveDirectoryAdministrator:ManagedInstanceActiveDirectoryAdministrator":
                return new ManagedInstanceActiveDirectoryAdministrator(name, <any>undefined, { urn })
            case "azure:mssql/managedInstanceFailoverGroup:ManagedInstanceFailoverGroup":
                return new ManagedInstanceFailoverGroup(name, <any>undefined, { urn })
            case "azure:mssql/managedInstanceVulnerabilityAssessment:ManagedInstanceVulnerabilityAssessment":
                return new ManagedInstanceVulnerabilityAssessment(name, <any>undefined, { urn })
            case "azure:mssql/outboundFirewallRule:OutboundFirewallRule":
                return new OutboundFirewallRule(name, <any>undefined, { urn })
            case "azure:mssql/server:Server":
                return new Server(name, <any>undefined, { urn })
            case "azure:mssql/serverDnsAlias:ServerDnsAlias":
                return new ServerDnsAlias(name, <any>undefined, { urn })
            case "azure:mssql/serverExtendedAuditingPolicy:ServerExtendedAuditingPolicy":
                return new ServerExtendedAuditingPolicy(name, <any>undefined, { urn })
            case "azure:mssql/serverSecurityAlertPolicy:ServerSecurityAlertPolicy":
                return new ServerSecurityAlertPolicy(name, <any>undefined, { urn })
            case "azure:mssql/serverTransparentDataEncryption:ServerTransparentDataEncryption":
                return new ServerTransparentDataEncryption(name, <any>undefined, { urn })
            case "azure:mssql/serverVulnerabilityAssessment:ServerVulnerabilityAssessment":
                return new ServerVulnerabilityAssessment(name, <any>undefined, { urn })
            case "azure:mssql/virtualMachine:VirtualMachine":
                return new VirtualMachine(name, <any>undefined, { urn })
            case "azure:mssql/virtualNetworkRule:VirtualNetworkRule":
                return new VirtualNetworkRule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "mssql/database", _module)
pulumi.runtime.registerResourceModule("azure", "mssql/databaseExtendedAuditingPolicy", _module)
pulumi.runtime.registerResourceModule("azure", "mssql/databaseVulnerabilityAssessmentRuleBaseline", _module)
pulumi.runtime.registerResourceModule("azure", "mssql/elasticPool", _module)
pulumi.runtime.registerResourceModule("azure", "mssql/failoverGroup", _module)
pulumi.runtime.registerResourceModule("azure", "mssql/firewallRule", _module)
pulumi.runtime.registerResourceModule("azure", "mssql/jobAgent", _module)
pulumi.runtime.registerResourceModule("azure", "mssql/jobCredential", _module)
pulumi.runtime.registerResourceModule("azure", "mssql/managedDatabase", _module)
pulumi.runtime.registerResourceModule("azure", "mssql/managedInstance", _module)
pulumi.runtime.registerResourceModule("azure", "mssql/managedInstanceActiveDirectoryAdministrator", _module)
pulumi.runtime.registerResourceModule("azure", "mssql/managedInstanceFailoverGroup", _module)
pulumi.runtime.registerResourceModule("azure", "mssql/managedInstanceVulnerabilityAssessment", _module)
pulumi.runtime.registerResourceModule("azure", "mssql/outboundFirewallRule", _module)
pulumi.runtime.registerResourceModule("azure", "mssql/server", _module)
pulumi.runtime.registerResourceModule("azure", "mssql/serverDnsAlias", _module)
pulumi.runtime.registerResourceModule("azure", "mssql/serverExtendedAuditingPolicy", _module)
pulumi.runtime.registerResourceModule("azure", "mssql/serverSecurityAlertPolicy", _module)
pulumi.runtime.registerResourceModule("azure", "mssql/serverTransparentDataEncryption", _module)
pulumi.runtime.registerResourceModule("azure", "mssql/serverVulnerabilityAssessment", _module)
pulumi.runtime.registerResourceModule("azure", "mssql/virtualMachine", _module)
pulumi.runtime.registerResourceModule("azure", "mssql/virtualNetworkRule", _module)
