// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Virtual Desktop Application.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {location: "West Europe"});
 * const pooledbreadthfirst = new azure.desktopvirtualization.HostPool("pooledbreadthfirst", {
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     type: "Pooled",
 *     loadBalancerType: "BreadthFirst",
 * });
 * const personalautomatic = new azure.desktopvirtualization.HostPool("personalautomatic", {
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     type: "Personal",
 *     personalDesktopAssignmentType: "Automatic",
 *     loadBalancerType: "BreadthFirst",
 * });
 * const remoteapp = new azure.desktopvirtualization.ApplicationGroup("remoteapp", {
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     type: "RemoteApp",
 *     hostPoolId: pooledbreadthfirst.id,
 *     friendlyName: "TestAppGroup",
 *     description: "Acceptance Test: An application group",
 * });
 * const chrome = new azure.desktopvirtualization.Application("chrome", {
 *     applicationGroupId: remoteapp.id,
 *     friendlyName: "Google Chrome",
 *     description: "Chromium based web browser",
 *     path: "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",
 *     commandLineArgumentPolicy: "DoNotAllow",
 *     commandLineArguments: "--incognito",
 *     showInPortal: false,
 *     iconPath: "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",
 *     iconIndex: 0,
 * });
 * ```
 *
 * ## Import
 *
 * Virtual Desktop Application can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:desktopvirtualization/application:Application example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup1/providers/Microsoft.DesktopVirtualization/applicationGroups/myapplicationgroup/applications/myapplication
 * ```
 */
export class Application extends pulumi.CustomResource {
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationState, opts?: pulumi.CustomResourceOptions): Application {
        return new Application(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:desktopvirtualization/application:Application';

    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Application {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Application.__pulumiType;
    }

    /**
     * Resource ID for a Virtual Desktop Application Group to associate with the Virtual Desktop Application. Changing this forces a new resource to be created.
     */
    public readonly applicationGroupId!: pulumi.Output<string>;
    /**
     * Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all. Possible values include: `DoNotAllow`, `Allow`, `Require`.
     */
    public readonly commandLineArgumentPolicy!: pulumi.Output<string>;
    /**
     * Command Line Arguments for Virtual Desktop Application.
     */
    public readonly commandLineArguments!: pulumi.Output<string | undefined>;
    /**
     * Option to set a description for the Virtual Desktop Application.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Option to set a friendly name for the Virtual Desktop Application.
     */
    public readonly friendlyName!: pulumi.Output<string>;
    /**
     * The index of the icon you wish to use.
     */
    public readonly iconIndex!: pulumi.Output<number | undefined>;
    /**
     * Specifies the path for an icon which will be used for this Virtual Desktop Application.
     */
    public readonly iconPath!: pulumi.Output<string>;
    /**
     * The name of the Virtual Desktop Application. Changing the name forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The file path location of the app on the Virtual Desktop OS.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Specifies whether to show the RemoteApp program in the RD Web Access server.
     */
    public readonly showInPortal!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Application resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationArgs | ApplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationState | undefined;
            resourceInputs["applicationGroupId"] = state ? state.applicationGroupId : undefined;
            resourceInputs["commandLineArgumentPolicy"] = state ? state.commandLineArgumentPolicy : undefined;
            resourceInputs["commandLineArguments"] = state ? state.commandLineArguments : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["friendlyName"] = state ? state.friendlyName : undefined;
            resourceInputs["iconIndex"] = state ? state.iconIndex : undefined;
            resourceInputs["iconPath"] = state ? state.iconPath : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["showInPortal"] = state ? state.showInPortal : undefined;
        } else {
            const args = argsOrState as ApplicationArgs | undefined;
            if ((!args || args.applicationGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationGroupId'");
            }
            if ((!args || args.commandLineArgumentPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commandLineArgumentPolicy'");
            }
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            resourceInputs["applicationGroupId"] = args ? args.applicationGroupId : undefined;
            resourceInputs["commandLineArgumentPolicy"] = args ? args.commandLineArgumentPolicy : undefined;
            resourceInputs["commandLineArguments"] = args ? args.commandLineArguments : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["friendlyName"] = args ? args.friendlyName : undefined;
            resourceInputs["iconIndex"] = args ? args.iconIndex : undefined;
            resourceInputs["iconPath"] = args ? args.iconPath : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["showInPortal"] = args ? args.showInPortal : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Application.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Application resources.
 */
export interface ApplicationState {
    /**
     * Resource ID for a Virtual Desktop Application Group to associate with the Virtual Desktop Application. Changing this forces a new resource to be created.
     */
    applicationGroupId?: pulumi.Input<string>;
    /**
     * Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all. Possible values include: `DoNotAllow`, `Allow`, `Require`.
     */
    commandLineArgumentPolicy?: pulumi.Input<string>;
    /**
     * Command Line Arguments for Virtual Desktop Application.
     */
    commandLineArguments?: pulumi.Input<string>;
    /**
     * Option to set a description for the Virtual Desktop Application.
     */
    description?: pulumi.Input<string>;
    /**
     * Option to set a friendly name for the Virtual Desktop Application.
     */
    friendlyName?: pulumi.Input<string>;
    /**
     * The index of the icon you wish to use.
     */
    iconIndex?: pulumi.Input<number>;
    /**
     * Specifies the path for an icon which will be used for this Virtual Desktop Application.
     */
    iconPath?: pulumi.Input<string>;
    /**
     * The name of the Virtual Desktop Application. Changing the name forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The file path location of the app on the Virtual Desktop OS.
     */
    path?: pulumi.Input<string>;
    /**
     * Specifies whether to show the RemoteApp program in the RD Web Access server.
     */
    showInPortal?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Application resource.
 */
export interface ApplicationArgs {
    /**
     * Resource ID for a Virtual Desktop Application Group to associate with the Virtual Desktop Application. Changing this forces a new resource to be created.
     */
    applicationGroupId: pulumi.Input<string>;
    /**
     * Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all. Possible values include: `DoNotAllow`, `Allow`, `Require`.
     */
    commandLineArgumentPolicy: pulumi.Input<string>;
    /**
     * Command Line Arguments for Virtual Desktop Application.
     */
    commandLineArguments?: pulumi.Input<string>;
    /**
     * Option to set a description for the Virtual Desktop Application.
     */
    description?: pulumi.Input<string>;
    /**
     * Option to set a friendly name for the Virtual Desktop Application.
     */
    friendlyName?: pulumi.Input<string>;
    /**
     * The index of the icon you wish to use.
     */
    iconIndex?: pulumi.Input<number>;
    /**
     * Specifies the path for an icon which will be used for this Virtual Desktop Application.
     */
    iconPath?: pulumi.Input<string>;
    /**
     * The name of the Virtual Desktop Application. Changing the name forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The file path location of the app on the Virtual Desktop OS.
     */
    path: pulumi.Input<string>;
    /**
     * Specifies whether to show the RemoteApp program in the RD Web Access server.
     */
    showInPortal?: pulumi.Input<boolean>;
}
