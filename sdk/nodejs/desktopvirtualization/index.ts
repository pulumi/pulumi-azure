// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ApplicationArgs, ApplicationState } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { ApplicationGroupArgs, ApplicationGroupState } from "./applicationGroup";
export type ApplicationGroup = import("./applicationGroup").ApplicationGroup;
export const ApplicationGroup: typeof import("./applicationGroup").ApplicationGroup = null as any;
utilities.lazyLoad(exports, ["ApplicationGroup"], () => require("./applicationGroup"));

export { GetHostPoolArgs, GetHostPoolResult, GetHostPoolOutputArgs } from "./getHostPool";
export const getHostPool: typeof import("./getHostPool").getHostPool = null as any;
export const getHostPoolOutput: typeof import("./getHostPool").getHostPoolOutput = null as any;
utilities.lazyLoad(exports, ["getHostPool","getHostPoolOutput"], () => require("./getHostPool"));

export { GetHostPoolRegistrationInfoArgs, GetHostPoolRegistrationInfoState } from "./getHostPoolRegistrationInfo";
export type GetHostPoolRegistrationInfo = import("./getHostPoolRegistrationInfo").GetHostPoolRegistrationInfo;
export const GetHostPoolRegistrationInfo: typeof import("./getHostPoolRegistrationInfo").GetHostPoolRegistrationInfo = null as any;
utilities.lazyLoad(exports, ["GetHostPoolRegistrationInfo"], () => require("./getHostPoolRegistrationInfo"));

export { HostPoolArgs, HostPoolState } from "./hostPool";
export type HostPool = import("./hostPool").HostPool;
export const HostPool: typeof import("./hostPool").HostPool = null as any;
utilities.lazyLoad(exports, ["HostPool"], () => require("./hostPool"));

export { ScalingPlanArgs, ScalingPlanState } from "./scalingPlan";
export type ScalingPlan = import("./scalingPlan").ScalingPlan;
export const ScalingPlan: typeof import("./scalingPlan").ScalingPlan = null as any;
utilities.lazyLoad(exports, ["ScalingPlan"], () => require("./scalingPlan"));

export { WorkspaceArgs, WorkspaceState } from "./workspace";
export type Workspace = import("./workspace").Workspace;
export const Workspace: typeof import("./workspace").Workspace = null as any;
utilities.lazyLoad(exports, ["Workspace"], () => require("./workspace"));

export { WorkspaceApplicationGroupAssociationArgs, WorkspaceApplicationGroupAssociationState } from "./workspaceApplicationGroupAssociation";
export type WorkspaceApplicationGroupAssociation = import("./workspaceApplicationGroupAssociation").WorkspaceApplicationGroupAssociation;
export const WorkspaceApplicationGroupAssociation: typeof import("./workspaceApplicationGroupAssociation").WorkspaceApplicationGroupAssociation = null as any;
utilities.lazyLoad(exports, ["WorkspaceApplicationGroupAssociation"], () => require("./workspaceApplicationGroupAssociation"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:desktopvirtualization/application:Application":
                return new Application(name, <any>undefined, { urn })
            case "azure:desktopvirtualization/applicationGroup:ApplicationGroup":
                return new ApplicationGroup(name, <any>undefined, { urn })
            case "azure:desktopvirtualization/getHostPoolRegistrationInfo:getHostPoolRegistrationInfo":
                return new GetHostPoolRegistrationInfo(name, <any>undefined, { urn })
            case "azure:desktopvirtualization/hostPool:HostPool":
                return new HostPool(name, <any>undefined, { urn })
            case "azure:desktopvirtualization/scalingPlan:ScalingPlan":
                return new ScalingPlan(name, <any>undefined, { urn })
            case "azure:desktopvirtualization/workspace:Workspace":
                return new Workspace(name, <any>undefined, { urn })
            case "azure:desktopvirtualization/workspaceApplicationGroupAssociation:WorkspaceApplicationGroupAssociation":
                return new WorkspaceApplicationGroupAssociation(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "desktopvirtualization/application", _module)
pulumi.runtime.registerResourceModule("azure", "desktopvirtualization/applicationGroup", _module)
pulumi.runtime.registerResourceModule("azure", "desktopvirtualization/getHostPoolRegistrationInfo", _module)
pulumi.runtime.registerResourceModule("azure", "desktopvirtualization/hostPool", _module)
pulumi.runtime.registerResourceModule("azure", "desktopvirtualization/scalingPlan", _module)
pulumi.runtime.registerResourceModule("azure", "desktopvirtualization/workspace", _module)
pulumi.runtime.registerResourceModule("azure", "desktopvirtualization/workspaceApplicationGroupAssociation", _module)
