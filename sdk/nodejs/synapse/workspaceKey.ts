// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages Synapse Workspace keys
 *
 * > **Note:** Keys that are actively protecting a workspace cannot be deleted. When the keys resource is deleted, if the key is inactive it will be deleted, if it is active it will not be deleted.
 *
 * ## Import
 *
 * Synapse Workspace Keys can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:synapse/workspaceKey:WorkspaceKey example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Synapse/workspaces/workspace1/keys/key1
 * ```
 */
export class WorkspaceKey extends pulumi.CustomResource {
    /**
     * Get an existing WorkspaceKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkspaceKeyState, opts?: pulumi.CustomResourceOptions): WorkspaceKey {
        return new WorkspaceKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:synapse/workspaceKey:WorkspaceKey';

    /**
     * Returns true if the given object is an instance of WorkspaceKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkspaceKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkspaceKey.__pulumiType;
    }

    /**
     * Specifies if the workspace should be encrypted with this key.
     *
     * > **Note:** Only one key can actively encrypt a workspace. When performing a key rotation, setting a new key as the active key will disable existing keys.
     */
    public readonly active!: pulumi.Output<boolean>;
    /**
     * Specifies the name of the workspace key. Should match the name of the key in the synapse workspace.
     */
    public readonly customerManagedKeyName!: pulumi.Output<string>;
    /**
     * The Azure Key Vault Key Versionless ID to be used as the Customer Managed Key (CMK) for double encryption
     */
    public readonly customerManagedKeyVersionlessId!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Synapse Workspace where the encryption key should be configured.
     */
    public readonly synapseWorkspaceId!: pulumi.Output<string>;

    /**
     * Create a WorkspaceKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkspaceKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkspaceKeyArgs | WorkspaceKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkspaceKeyState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["customerManagedKeyName"] = state ? state.customerManagedKeyName : undefined;
            resourceInputs["customerManagedKeyVersionlessId"] = state ? state.customerManagedKeyVersionlessId : undefined;
            resourceInputs["synapseWorkspaceId"] = state ? state.synapseWorkspaceId : undefined;
        } else {
            const args = argsOrState as WorkspaceKeyArgs | undefined;
            if ((!args || args.active === undefined) && !opts.urn) {
                throw new Error("Missing required property 'active'");
            }
            if ((!args || args.customerManagedKeyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'customerManagedKeyName'");
            }
            if ((!args || args.synapseWorkspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'synapseWorkspaceId'");
            }
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["customerManagedKeyName"] = args ? args.customerManagedKeyName : undefined;
            resourceInputs["customerManagedKeyVersionlessId"] = args ? args.customerManagedKeyVersionlessId : undefined;
            resourceInputs["synapseWorkspaceId"] = args ? args.synapseWorkspaceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WorkspaceKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WorkspaceKey resources.
 */
export interface WorkspaceKeyState {
    /**
     * Specifies if the workspace should be encrypted with this key.
     *
     * > **Note:** Only one key can actively encrypt a workspace. When performing a key rotation, setting a new key as the active key will disable existing keys.
     */
    active?: pulumi.Input<boolean>;
    /**
     * Specifies the name of the workspace key. Should match the name of the key in the synapse workspace.
     */
    customerManagedKeyName?: pulumi.Input<string>;
    /**
     * The Azure Key Vault Key Versionless ID to be used as the Customer Managed Key (CMK) for double encryption
     */
    customerManagedKeyVersionlessId?: pulumi.Input<string>;
    /**
     * The ID of the Synapse Workspace where the encryption key should be configured.
     */
    synapseWorkspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WorkspaceKey resource.
 */
export interface WorkspaceKeyArgs {
    /**
     * Specifies if the workspace should be encrypted with this key.
     *
     * > **Note:** Only one key can actively encrypt a workspace. When performing a key rotation, setting a new key as the active key will disable existing keys.
     */
    active: pulumi.Input<boolean>;
    /**
     * Specifies the name of the workspace key. Should match the name of the key in the synapse workspace.
     */
    customerManagedKeyName: pulumi.Input<string>;
    /**
     * The Azure Key Vault Key Versionless ID to be used as the Customer Managed Key (CMK) for double encryption
     */
    customerManagedKeyVersionlessId?: pulumi.Input<string>;
    /**
     * The ID of the Synapse Workspace where the encryption key should be configured.
     */
    synapseWorkspaceId: pulumi.Input<string>;
}
