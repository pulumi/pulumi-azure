// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Synapse SQL Pool.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "examplestorageacc",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 *     accountKind: "BlobStorage",
 * });
 * const exampleDataLakeGen2Filesystem = new azure.storage.DataLakeGen2Filesystem("example", {
 *     name: "example",
 *     storageAccountId: exampleAccount.id,
 * });
 * const exampleWorkspace = new azure.synapse.Workspace("example", {
 *     name: "example",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     storageDataLakeGen2FilesystemId: exampleDataLakeGen2Filesystem.id,
 *     sqlAdministratorLogin: "sqladminuser",
 *     sqlAdministratorLoginPassword: "H@Sh1CoR3!",
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * const exampleSqlPool = new azure.synapse.SqlPool("example", {
 *     name: "examplesqlpool",
 *     synapseWorkspaceId: exampleWorkspace.id,
 *     skuName: "DW100c",
 *     createMode: "Default",
 *     storageAccountType: "GRS",
 * });
 * ```
 *
 * ## Import
 *
 * Synapse SQL Pool can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:synapse/sqlPool:SqlPool example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Synapse/workspaces/workspace1/sqlPools/sqlPool1
 * ```
 */
export class SqlPool extends pulumi.CustomResource {
    /**
     * Get an existing SqlPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SqlPoolState, opts?: pulumi.CustomResourceOptions): SqlPool {
        return new SqlPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:synapse/sqlPool:SqlPool';

    /**
     * Returns true if the given object is an instance of SqlPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SqlPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SqlPool.__pulumiType;
    }

    /**
     * The name of the collation to use with this pool, only applicable when `createMode` is set to `Default`. Azure default is `SQL_LATIN1_GENERAL_CP1_CI_AS`. Changing this forces a new Synapse SQL Pool to be created.
     */
    declare public readonly collation: pulumi.Output<string>;
    /**
     * Specifies how to create the SQL Pool. Valid values are: `Default`, `Recovery` or `PointInTimeRestore`. Must be `Default` to create a new database. Defaults to `Default`. Changing this forces a new Synapse SQL Pool to be created.
     */
    declare public readonly createMode: pulumi.Output<string | undefined>;
    /**
     * Is transparent data encryption enabled?
     */
    declare public readonly dataEncrypted: pulumi.Output<boolean | undefined>;
    /**
     * Is geo-backup policy enabled? Defaults to `true`.
     */
    declare public readonly geoBackupPolicyEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The name which should be used for this Synapse SQL Pool. Changing this forces a new Synapse SQL Pool to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID of the Synapse SQL Pool or SQL Database which is to back up, only applicable when `createMode` is set to `Recovery`. Changing this forces a new Synapse SQL Pool to be created.
     */
    declare public readonly recoveryDatabaseId: pulumi.Output<string | undefined>;
    /**
     * A `restore` block as defined below. Only applicable when `createMode` is set to `PointInTimeRestore`. Changing this forces a new Synapse SQL Pool to be created.
     */
    declare public readonly restore: pulumi.Output<outputs.synapse.SqlPoolRestore | undefined>;
    /**
     * Specifies the SKU Name for this Synapse SQL Pool. Possible values are `DW100c`, `DW200c`, `DW300c`, `DW400c`, `DW500c`, `DW1000c`, `DW1500c`, `DW2000c`, `DW2500c`, `DW3000c`, `DW5000c`, `DW6000c`, `DW7500c`, `DW10000c`, `DW15000c` or `DW30000c`.
     */
    declare public readonly skuName: pulumi.Output<string>;
    /**
     * The storage account type that will be used to store backups for this Synapse SQL Pool. Possible values are `LRS` or `GRS`. Changing this forces a new Synapse SQL Pool to be created.
     */
    declare public readonly storageAccountType: pulumi.Output<string>;
    /**
     * The ID of Synapse Workspace within which this SQL Pool should be created. Changing this forces a new Synapse SQL Pool to be created.
     */
    declare public readonly synapseWorkspaceId: pulumi.Output<string>;
    /**
     * A mapping of tags which should be assigned to the Synapse SQL Pool.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a SqlPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SqlPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SqlPoolArgs | SqlPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SqlPoolState | undefined;
            resourceInputs["collation"] = state?.collation;
            resourceInputs["createMode"] = state?.createMode;
            resourceInputs["dataEncrypted"] = state?.dataEncrypted;
            resourceInputs["geoBackupPolicyEnabled"] = state?.geoBackupPolicyEnabled;
            resourceInputs["name"] = state?.name;
            resourceInputs["recoveryDatabaseId"] = state?.recoveryDatabaseId;
            resourceInputs["restore"] = state?.restore;
            resourceInputs["skuName"] = state?.skuName;
            resourceInputs["storageAccountType"] = state?.storageAccountType;
            resourceInputs["synapseWorkspaceId"] = state?.synapseWorkspaceId;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as SqlPoolArgs | undefined;
            if (args?.skuName === undefined && !opts.urn) {
                throw new Error("Missing required property 'skuName'");
            }
            if (args?.storageAccountType === undefined && !opts.urn) {
                throw new Error("Missing required property 'storageAccountType'");
            }
            if (args?.synapseWorkspaceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'synapseWorkspaceId'");
            }
            resourceInputs["collation"] = args?.collation;
            resourceInputs["createMode"] = args?.createMode;
            resourceInputs["dataEncrypted"] = args?.dataEncrypted;
            resourceInputs["geoBackupPolicyEnabled"] = args?.geoBackupPolicyEnabled;
            resourceInputs["name"] = args?.name;
            resourceInputs["recoveryDatabaseId"] = args?.recoveryDatabaseId;
            resourceInputs["restore"] = args?.restore;
            resourceInputs["skuName"] = args?.skuName;
            resourceInputs["storageAccountType"] = args?.storageAccountType;
            resourceInputs["synapseWorkspaceId"] = args?.synapseWorkspaceId;
            resourceInputs["tags"] = args?.tags;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SqlPool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SqlPool resources.
 */
export interface SqlPoolState {
    /**
     * The name of the collation to use with this pool, only applicable when `createMode` is set to `Default`. Azure default is `SQL_LATIN1_GENERAL_CP1_CI_AS`. Changing this forces a new Synapse SQL Pool to be created.
     */
    collation?: pulumi.Input<string>;
    /**
     * Specifies how to create the SQL Pool. Valid values are: `Default`, `Recovery` or `PointInTimeRestore`. Must be `Default` to create a new database. Defaults to `Default`. Changing this forces a new Synapse SQL Pool to be created.
     */
    createMode?: pulumi.Input<string>;
    /**
     * Is transparent data encryption enabled?
     */
    dataEncrypted?: pulumi.Input<boolean>;
    /**
     * Is geo-backup policy enabled? Defaults to `true`.
     */
    geoBackupPolicyEnabled?: pulumi.Input<boolean>;
    /**
     * The name which should be used for this Synapse SQL Pool. Changing this forces a new Synapse SQL Pool to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Synapse SQL Pool or SQL Database which is to back up, only applicable when `createMode` is set to `Recovery`. Changing this forces a new Synapse SQL Pool to be created.
     */
    recoveryDatabaseId?: pulumi.Input<string>;
    /**
     * A `restore` block as defined below. Only applicable when `createMode` is set to `PointInTimeRestore`. Changing this forces a new Synapse SQL Pool to be created.
     */
    restore?: pulumi.Input<inputs.synapse.SqlPoolRestore>;
    /**
     * Specifies the SKU Name for this Synapse SQL Pool. Possible values are `DW100c`, `DW200c`, `DW300c`, `DW400c`, `DW500c`, `DW1000c`, `DW1500c`, `DW2000c`, `DW2500c`, `DW3000c`, `DW5000c`, `DW6000c`, `DW7500c`, `DW10000c`, `DW15000c` or `DW30000c`.
     */
    skuName?: pulumi.Input<string>;
    /**
     * The storage account type that will be used to store backups for this Synapse SQL Pool. Possible values are `LRS` or `GRS`. Changing this forces a new Synapse SQL Pool to be created.
     */
    storageAccountType?: pulumi.Input<string>;
    /**
     * The ID of Synapse Workspace within which this SQL Pool should be created. Changing this forces a new Synapse SQL Pool to be created.
     */
    synapseWorkspaceId?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Synapse SQL Pool.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a SqlPool resource.
 */
export interface SqlPoolArgs {
    /**
     * The name of the collation to use with this pool, only applicable when `createMode` is set to `Default`. Azure default is `SQL_LATIN1_GENERAL_CP1_CI_AS`. Changing this forces a new Synapse SQL Pool to be created.
     */
    collation?: pulumi.Input<string>;
    /**
     * Specifies how to create the SQL Pool. Valid values are: `Default`, `Recovery` or `PointInTimeRestore`. Must be `Default` to create a new database. Defaults to `Default`. Changing this forces a new Synapse SQL Pool to be created.
     */
    createMode?: pulumi.Input<string>;
    /**
     * Is transparent data encryption enabled?
     */
    dataEncrypted?: pulumi.Input<boolean>;
    /**
     * Is geo-backup policy enabled? Defaults to `true`.
     */
    geoBackupPolicyEnabled?: pulumi.Input<boolean>;
    /**
     * The name which should be used for this Synapse SQL Pool. Changing this forces a new Synapse SQL Pool to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Synapse SQL Pool or SQL Database which is to back up, only applicable when `createMode` is set to `Recovery`. Changing this forces a new Synapse SQL Pool to be created.
     */
    recoveryDatabaseId?: pulumi.Input<string>;
    /**
     * A `restore` block as defined below. Only applicable when `createMode` is set to `PointInTimeRestore`. Changing this forces a new Synapse SQL Pool to be created.
     */
    restore?: pulumi.Input<inputs.synapse.SqlPoolRestore>;
    /**
     * Specifies the SKU Name for this Synapse SQL Pool. Possible values are `DW100c`, `DW200c`, `DW300c`, `DW400c`, `DW500c`, `DW1000c`, `DW1500c`, `DW2000c`, `DW2500c`, `DW3000c`, `DW5000c`, `DW6000c`, `DW7500c`, `DW10000c`, `DW15000c` or `DW30000c`.
     */
    skuName: pulumi.Input<string>;
    /**
     * The storage account type that will be used to store backups for this Synapse SQL Pool. Possible values are `LRS` or `GRS`. Changing this forces a new Synapse SQL Pool to be created.
     */
    storageAccountType: pulumi.Input<string>;
    /**
     * The ID of Synapse Workspace within which this SQL Pool should be created. Changing this forces a new Synapse SQL Pool to be created.
     */
    synapseWorkspaceId: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Synapse SQL Pool.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
