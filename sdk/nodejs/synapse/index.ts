// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { FirewallRuleArgs, FirewallRuleState } from "./firewallRule";
export type FirewallRule = import("./firewallRule").FirewallRule;
export const FirewallRule: typeof import("./firewallRule").FirewallRule = null as any;
utilities.lazyLoad(exports, ["FirewallRule"], () => require("./firewallRule"));

export { GetWorkspaceArgs, GetWorkspaceResult, GetWorkspaceOutputArgs } from "./getWorkspace";
export const getWorkspace: typeof import("./getWorkspace").getWorkspace = null as any;
export const getWorkspaceOutput: typeof import("./getWorkspace").getWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspace","getWorkspaceOutput"], () => require("./getWorkspace"));

export { IntegrationRuntimeAzureArgs, IntegrationRuntimeAzureState } from "./integrationRuntimeAzure";
export type IntegrationRuntimeAzure = import("./integrationRuntimeAzure").IntegrationRuntimeAzure;
export const IntegrationRuntimeAzure: typeof import("./integrationRuntimeAzure").IntegrationRuntimeAzure = null as any;
utilities.lazyLoad(exports, ["IntegrationRuntimeAzure"], () => require("./integrationRuntimeAzure"));

export { IntegrationRuntimeSelfHostedArgs, IntegrationRuntimeSelfHostedState } from "./integrationRuntimeSelfHosted";
export type IntegrationRuntimeSelfHosted = import("./integrationRuntimeSelfHosted").IntegrationRuntimeSelfHosted;
export const IntegrationRuntimeSelfHosted: typeof import("./integrationRuntimeSelfHosted").IntegrationRuntimeSelfHosted = null as any;
utilities.lazyLoad(exports, ["IntegrationRuntimeSelfHosted"], () => require("./integrationRuntimeSelfHosted"));

export { LinkedServiceArgs, LinkedServiceState } from "./linkedService";
export type LinkedService = import("./linkedService").LinkedService;
export const LinkedService: typeof import("./linkedService").LinkedService = null as any;
utilities.lazyLoad(exports, ["LinkedService"], () => require("./linkedService"));

export { ManagedPrivateEndpointArgs, ManagedPrivateEndpointState } from "./managedPrivateEndpoint";
export type ManagedPrivateEndpoint = import("./managedPrivateEndpoint").ManagedPrivateEndpoint;
export const ManagedPrivateEndpoint: typeof import("./managedPrivateEndpoint").ManagedPrivateEndpoint = null as any;
utilities.lazyLoad(exports, ["ManagedPrivateEndpoint"], () => require("./managedPrivateEndpoint"));

export { PrivateLinkHubArgs, PrivateLinkHubState } from "./privateLinkHub";
export type PrivateLinkHub = import("./privateLinkHub").PrivateLinkHub;
export const PrivateLinkHub: typeof import("./privateLinkHub").PrivateLinkHub = null as any;
utilities.lazyLoad(exports, ["PrivateLinkHub"], () => require("./privateLinkHub"));

export { RoleAssignmentArgs, RoleAssignmentState } from "./roleAssignment";
export type RoleAssignment = import("./roleAssignment").RoleAssignment;
export const RoleAssignment: typeof import("./roleAssignment").RoleAssignment = null as any;
utilities.lazyLoad(exports, ["RoleAssignment"], () => require("./roleAssignment"));

export { SparkPoolArgs, SparkPoolState } from "./sparkPool";
export type SparkPool = import("./sparkPool").SparkPool;
export const SparkPool: typeof import("./sparkPool").SparkPool = null as any;
utilities.lazyLoad(exports, ["SparkPool"], () => require("./sparkPool"));

export { SqlPoolArgs, SqlPoolState } from "./sqlPool";
export type SqlPool = import("./sqlPool").SqlPool;
export const SqlPool: typeof import("./sqlPool").SqlPool = null as any;
utilities.lazyLoad(exports, ["SqlPool"], () => require("./sqlPool"));

export { SqlPoolExtendedAuditingPolicyArgs, SqlPoolExtendedAuditingPolicyState } from "./sqlPoolExtendedAuditingPolicy";
export type SqlPoolExtendedAuditingPolicy = import("./sqlPoolExtendedAuditingPolicy").SqlPoolExtendedAuditingPolicy;
export const SqlPoolExtendedAuditingPolicy: typeof import("./sqlPoolExtendedAuditingPolicy").SqlPoolExtendedAuditingPolicy = null as any;
utilities.lazyLoad(exports, ["SqlPoolExtendedAuditingPolicy"], () => require("./sqlPoolExtendedAuditingPolicy"));

export { SqlPoolSecurityAlertPolicyArgs, SqlPoolSecurityAlertPolicyState } from "./sqlPoolSecurityAlertPolicy";
export type SqlPoolSecurityAlertPolicy = import("./sqlPoolSecurityAlertPolicy").SqlPoolSecurityAlertPolicy;
export const SqlPoolSecurityAlertPolicy: typeof import("./sqlPoolSecurityAlertPolicy").SqlPoolSecurityAlertPolicy = null as any;
utilities.lazyLoad(exports, ["SqlPoolSecurityAlertPolicy"], () => require("./sqlPoolSecurityAlertPolicy"));

export { SqlPoolVulnerabilityAssessmentArgs, SqlPoolVulnerabilityAssessmentState } from "./sqlPoolVulnerabilityAssessment";
export type SqlPoolVulnerabilityAssessment = import("./sqlPoolVulnerabilityAssessment").SqlPoolVulnerabilityAssessment;
export const SqlPoolVulnerabilityAssessment: typeof import("./sqlPoolVulnerabilityAssessment").SqlPoolVulnerabilityAssessment = null as any;
utilities.lazyLoad(exports, ["SqlPoolVulnerabilityAssessment"], () => require("./sqlPoolVulnerabilityAssessment"));

export { SqlPoolVulnerabilityAssessmentBaselineArgs, SqlPoolVulnerabilityAssessmentBaselineState } from "./sqlPoolVulnerabilityAssessmentBaseline";
export type SqlPoolVulnerabilityAssessmentBaseline = import("./sqlPoolVulnerabilityAssessmentBaseline").SqlPoolVulnerabilityAssessmentBaseline;
export const SqlPoolVulnerabilityAssessmentBaseline: typeof import("./sqlPoolVulnerabilityAssessmentBaseline").SqlPoolVulnerabilityAssessmentBaseline = null as any;
utilities.lazyLoad(exports, ["SqlPoolVulnerabilityAssessmentBaseline"], () => require("./sqlPoolVulnerabilityAssessmentBaseline"));

export { SqlPoolWorkloadClassifierArgs, SqlPoolWorkloadClassifierState } from "./sqlPoolWorkloadClassifier";
export type SqlPoolWorkloadClassifier = import("./sqlPoolWorkloadClassifier").SqlPoolWorkloadClassifier;
export const SqlPoolWorkloadClassifier: typeof import("./sqlPoolWorkloadClassifier").SqlPoolWorkloadClassifier = null as any;
utilities.lazyLoad(exports, ["SqlPoolWorkloadClassifier"], () => require("./sqlPoolWorkloadClassifier"));

export { SqlPoolWorkloadGroupArgs, SqlPoolWorkloadGroupState } from "./sqlPoolWorkloadGroup";
export type SqlPoolWorkloadGroup = import("./sqlPoolWorkloadGroup").SqlPoolWorkloadGroup;
export const SqlPoolWorkloadGroup: typeof import("./sqlPoolWorkloadGroup").SqlPoolWorkloadGroup = null as any;
utilities.lazyLoad(exports, ["SqlPoolWorkloadGroup"], () => require("./sqlPoolWorkloadGroup"));

export { WorkspaceArgs, WorkspaceState } from "./workspace";
export type Workspace = import("./workspace").Workspace;
export const Workspace: typeof import("./workspace").Workspace = null as any;
utilities.lazyLoad(exports, ["Workspace"], () => require("./workspace"));

export { WorkspaceAadAdminArgs, WorkspaceAadAdminState } from "./workspaceAadAdmin";
export type WorkspaceAadAdmin = import("./workspaceAadAdmin").WorkspaceAadAdmin;
export const WorkspaceAadAdmin: typeof import("./workspaceAadAdmin").WorkspaceAadAdmin = null as any;
utilities.lazyLoad(exports, ["WorkspaceAadAdmin"], () => require("./workspaceAadAdmin"));

export { WorkspaceExtendedAuditingPolicyArgs, WorkspaceExtendedAuditingPolicyState } from "./workspaceExtendedAuditingPolicy";
export type WorkspaceExtendedAuditingPolicy = import("./workspaceExtendedAuditingPolicy").WorkspaceExtendedAuditingPolicy;
export const WorkspaceExtendedAuditingPolicy: typeof import("./workspaceExtendedAuditingPolicy").WorkspaceExtendedAuditingPolicy = null as any;
utilities.lazyLoad(exports, ["WorkspaceExtendedAuditingPolicy"], () => require("./workspaceExtendedAuditingPolicy"));

export { WorkspaceKeyArgs, WorkspaceKeyState } from "./workspaceKey";
export type WorkspaceKey = import("./workspaceKey").WorkspaceKey;
export const WorkspaceKey: typeof import("./workspaceKey").WorkspaceKey = null as any;
utilities.lazyLoad(exports, ["WorkspaceKey"], () => require("./workspaceKey"));

export { WorkspaceSecurityAlertPolicyArgs, WorkspaceSecurityAlertPolicyState } from "./workspaceSecurityAlertPolicy";
export type WorkspaceSecurityAlertPolicy = import("./workspaceSecurityAlertPolicy").WorkspaceSecurityAlertPolicy;
export const WorkspaceSecurityAlertPolicy: typeof import("./workspaceSecurityAlertPolicy").WorkspaceSecurityAlertPolicy = null as any;
utilities.lazyLoad(exports, ["WorkspaceSecurityAlertPolicy"], () => require("./workspaceSecurityAlertPolicy"));

export { WorkspaceSqlAadAdminArgs, WorkspaceSqlAadAdminState } from "./workspaceSqlAadAdmin";
export type WorkspaceSqlAadAdmin = import("./workspaceSqlAadAdmin").WorkspaceSqlAadAdmin;
export const WorkspaceSqlAadAdmin: typeof import("./workspaceSqlAadAdmin").WorkspaceSqlAadAdmin = null as any;
utilities.lazyLoad(exports, ["WorkspaceSqlAadAdmin"], () => require("./workspaceSqlAadAdmin"));

export { WorkspaceVulnerabilityAssessmentArgs, WorkspaceVulnerabilityAssessmentState } from "./workspaceVulnerabilityAssessment";
export type WorkspaceVulnerabilityAssessment = import("./workspaceVulnerabilityAssessment").WorkspaceVulnerabilityAssessment;
export const WorkspaceVulnerabilityAssessment: typeof import("./workspaceVulnerabilityAssessment").WorkspaceVulnerabilityAssessment = null as any;
utilities.lazyLoad(exports, ["WorkspaceVulnerabilityAssessment"], () => require("./workspaceVulnerabilityAssessment"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:synapse/firewallRule:FirewallRule":
                return new FirewallRule(name, <any>undefined, { urn })
            case "azure:synapse/integrationRuntimeAzure:IntegrationRuntimeAzure":
                return new IntegrationRuntimeAzure(name, <any>undefined, { urn })
            case "azure:synapse/integrationRuntimeSelfHosted:IntegrationRuntimeSelfHosted":
                return new IntegrationRuntimeSelfHosted(name, <any>undefined, { urn })
            case "azure:synapse/linkedService:LinkedService":
                return new LinkedService(name, <any>undefined, { urn })
            case "azure:synapse/managedPrivateEndpoint:ManagedPrivateEndpoint":
                return new ManagedPrivateEndpoint(name, <any>undefined, { urn })
            case "azure:synapse/privateLinkHub:PrivateLinkHub":
                return new PrivateLinkHub(name, <any>undefined, { urn })
            case "azure:synapse/roleAssignment:RoleAssignment":
                return new RoleAssignment(name, <any>undefined, { urn })
            case "azure:synapse/sparkPool:SparkPool":
                return new SparkPool(name, <any>undefined, { urn })
            case "azure:synapse/sqlPool:SqlPool":
                return new SqlPool(name, <any>undefined, { urn })
            case "azure:synapse/sqlPoolExtendedAuditingPolicy:SqlPoolExtendedAuditingPolicy":
                return new SqlPoolExtendedAuditingPolicy(name, <any>undefined, { urn })
            case "azure:synapse/sqlPoolSecurityAlertPolicy:SqlPoolSecurityAlertPolicy":
                return new SqlPoolSecurityAlertPolicy(name, <any>undefined, { urn })
            case "azure:synapse/sqlPoolVulnerabilityAssessment:SqlPoolVulnerabilityAssessment":
                return new SqlPoolVulnerabilityAssessment(name, <any>undefined, { urn })
            case "azure:synapse/sqlPoolVulnerabilityAssessmentBaseline:SqlPoolVulnerabilityAssessmentBaseline":
                return new SqlPoolVulnerabilityAssessmentBaseline(name, <any>undefined, { urn })
            case "azure:synapse/sqlPoolWorkloadClassifier:SqlPoolWorkloadClassifier":
                return new SqlPoolWorkloadClassifier(name, <any>undefined, { urn })
            case "azure:synapse/sqlPoolWorkloadGroup:SqlPoolWorkloadGroup":
                return new SqlPoolWorkloadGroup(name, <any>undefined, { urn })
            case "azure:synapse/workspace:Workspace":
                return new Workspace(name, <any>undefined, { urn })
            case "azure:synapse/workspaceAadAdmin:WorkspaceAadAdmin":
                return new WorkspaceAadAdmin(name, <any>undefined, { urn })
            case "azure:synapse/workspaceExtendedAuditingPolicy:WorkspaceExtendedAuditingPolicy":
                return new WorkspaceExtendedAuditingPolicy(name, <any>undefined, { urn })
            case "azure:synapse/workspaceKey:WorkspaceKey":
                return new WorkspaceKey(name, <any>undefined, { urn })
            case "azure:synapse/workspaceSecurityAlertPolicy:WorkspaceSecurityAlertPolicy":
                return new WorkspaceSecurityAlertPolicy(name, <any>undefined, { urn })
            case "azure:synapse/workspaceSqlAadAdmin:WorkspaceSqlAadAdmin":
                return new WorkspaceSqlAadAdmin(name, <any>undefined, { urn })
            case "azure:synapse/workspaceVulnerabilityAssessment:WorkspaceVulnerabilityAssessment":
                return new WorkspaceVulnerabilityAssessment(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "synapse/firewallRule", _module)
pulumi.runtime.registerResourceModule("azure", "synapse/integrationRuntimeAzure", _module)
pulumi.runtime.registerResourceModule("azure", "synapse/integrationRuntimeSelfHosted", _module)
pulumi.runtime.registerResourceModule("azure", "synapse/linkedService", _module)
pulumi.runtime.registerResourceModule("azure", "synapse/managedPrivateEndpoint", _module)
pulumi.runtime.registerResourceModule("azure", "synapse/privateLinkHub", _module)
pulumi.runtime.registerResourceModule("azure", "synapse/roleAssignment", _module)
pulumi.runtime.registerResourceModule("azure", "synapse/sparkPool", _module)
pulumi.runtime.registerResourceModule("azure", "synapse/sqlPool", _module)
pulumi.runtime.registerResourceModule("azure", "synapse/sqlPoolExtendedAuditingPolicy", _module)
pulumi.runtime.registerResourceModule("azure", "synapse/sqlPoolSecurityAlertPolicy", _module)
pulumi.runtime.registerResourceModule("azure", "synapse/sqlPoolVulnerabilityAssessment", _module)
pulumi.runtime.registerResourceModule("azure", "synapse/sqlPoolVulnerabilityAssessmentBaseline", _module)
pulumi.runtime.registerResourceModule("azure", "synapse/sqlPoolWorkloadClassifier", _module)
pulumi.runtime.registerResourceModule("azure", "synapse/sqlPoolWorkloadGroup", _module)
pulumi.runtime.registerResourceModule("azure", "synapse/workspace", _module)
pulumi.runtime.registerResourceModule("azure", "synapse/workspaceAadAdmin", _module)
pulumi.runtime.registerResourceModule("azure", "synapse/workspaceExtendedAuditingPolicy", _module)
pulumi.runtime.registerResourceModule("azure", "synapse/workspaceKey", _module)
pulumi.runtime.registerResourceModule("azure", "synapse/workspaceSecurityAlertPolicy", _module)
pulumi.runtime.registerResourceModule("azure", "synapse/workspaceSqlAadAdmin", _module)
pulumi.runtime.registerResourceModule("azure", "synapse/workspaceVulnerabilityAssessment", _module)
