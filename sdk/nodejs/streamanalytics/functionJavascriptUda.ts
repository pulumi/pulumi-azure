// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a JavaScript UDA Function within a Stream Analytics Streaming Job.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.core.getResourceGroup({
 *     name: "example-resources",
 * });
 * const exampleGetJob = example.then(example => azure.streamanalytics.getJob({
 *     name: "example-job",
 *     resourceGroupName: example.name,
 * }));
 * const exampleFunctionJavascriptUda = new azure.streamanalytics.FunctionJavascriptUda("example", {
 *     name: "example-javascript-function",
 *     streamAnalyticsJobId: exampleGetJob.then(exampleGetJob => exampleGetJob.id),
 *     script: `function main() {
 *     this.init = function () {
 *         this.state = 0;
 *     }
 *
 *     this.accumulate = function (value, timestamp) {
 *         this.state += value;
 *     }
 *
 *     this.computeResult = function () {
 *         return this.state;
 *     }
 * }
 * `,
 *     inputs: [{
 *         type: "bigint",
 *     }],
 *     output: {
 *         type: "bigint",
 *     },
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.StreamAnalytics` - 2020-03-01
 *
 * ## Import
 *
 * Stream Analytics JavaScript UDA Functions can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:streamanalytics/functionJavascriptUda:FunctionJavascriptUda example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StreamAnalytics/streamingJobs/job1/functions/func1
 * ```
 */
export class FunctionJavascriptUda extends pulumi.CustomResource {
    /**
     * Get an existing FunctionJavascriptUda resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FunctionJavascriptUdaState, opts?: pulumi.CustomResourceOptions): FunctionJavascriptUda {
        return new FunctionJavascriptUda(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:streamanalytics/functionJavascriptUda:FunctionJavascriptUda';

    /**
     * Returns true if the given object is an instance of FunctionJavascriptUda.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FunctionJavascriptUda {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FunctionJavascriptUda.__pulumiType;
    }

    /**
     * One or more `input` blocks as defined below.
     */
    declare public readonly inputs: pulumi.Output<outputs.streamanalytics.FunctionJavascriptUdaInput[]>;
    /**
     * The name of the JavaScript UDA Function. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * An `output` block as defined below.
     */
    declare public readonly output: pulumi.Output<outputs.streamanalytics.FunctionJavascriptUdaOutput>;
    /**
     * The JavaScript of this UDA Function.
     */
    declare public readonly script: pulumi.Output<string>;
    /**
     * The resource ID of the Stream Analytics Job where this Function should be created. Changing this forces a new resource to be created.
     */
    declare public readonly streamAnalyticsJobId: pulumi.Output<string>;

    /**
     * Create a FunctionJavascriptUda resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FunctionJavascriptUdaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FunctionJavascriptUdaArgs | FunctionJavascriptUdaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FunctionJavascriptUdaState | undefined;
            resourceInputs["inputs"] = state?.inputs;
            resourceInputs["name"] = state?.name;
            resourceInputs["output"] = state?.output;
            resourceInputs["script"] = state?.script;
            resourceInputs["streamAnalyticsJobId"] = state?.streamAnalyticsJobId;
        } else {
            const args = argsOrState as FunctionJavascriptUdaArgs | undefined;
            if (args?.inputs === undefined && !opts.urn) {
                throw new Error("Missing required property 'inputs'");
            }
            if (args?.output === undefined && !opts.urn) {
                throw new Error("Missing required property 'output'");
            }
            if (args?.script === undefined && !opts.urn) {
                throw new Error("Missing required property 'script'");
            }
            if (args?.streamAnalyticsJobId === undefined && !opts.urn) {
                throw new Error("Missing required property 'streamAnalyticsJobId'");
            }
            resourceInputs["inputs"] = args?.inputs;
            resourceInputs["name"] = args?.name;
            resourceInputs["output"] = args?.output;
            resourceInputs["script"] = args?.script;
            resourceInputs["streamAnalyticsJobId"] = args?.streamAnalyticsJobId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FunctionJavascriptUda.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FunctionJavascriptUda resources.
 */
export interface FunctionJavascriptUdaState {
    /**
     * One or more `input` blocks as defined below.
     */
    inputs?: pulumi.Input<pulumi.Input<inputs.streamanalytics.FunctionJavascriptUdaInput>[]>;
    /**
     * The name of the JavaScript UDA Function. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * An `output` block as defined below.
     */
    output?: pulumi.Input<inputs.streamanalytics.FunctionJavascriptUdaOutput>;
    /**
     * The JavaScript of this UDA Function.
     */
    script?: pulumi.Input<string>;
    /**
     * The resource ID of the Stream Analytics Job where this Function should be created. Changing this forces a new resource to be created.
     */
    streamAnalyticsJobId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FunctionJavascriptUda resource.
 */
export interface FunctionJavascriptUdaArgs {
    /**
     * One or more `input` blocks as defined below.
     */
    inputs: pulumi.Input<pulumi.Input<inputs.streamanalytics.FunctionJavascriptUdaInput>[]>;
    /**
     * The name of the JavaScript UDA Function. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * An `output` block as defined below.
     */
    output: pulumi.Input<inputs.streamanalytics.FunctionJavascriptUdaOutput>;
    /**
     * The JavaScript of this UDA Function.
     */
    script: pulumi.Input<string>;
    /**
     * The resource ID of the Stream Analytics Job where this Function should be created. Changing this forces a new resource to be created.
     */
    streamAnalyticsJobId: pulumi.Input<string>;
}
