// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Stream Analytics Output to CosmosDB.
 *
 * ## Import
 *
 * Stream Analytics Outputs for CosmosDB can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:streamanalytics/outputCosmosdb:OutputCosmosdb example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StreamAnalytics/streamingJobs/job1/outputs/output1
 * ```
 */
export class OutputCosmosdb extends pulumi.CustomResource {
    /**
     * Get an existing OutputCosmosdb resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OutputCosmosdbState, opts?: pulumi.CustomResourceOptions): OutputCosmosdb {
        return new OutputCosmosdb(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:streamanalytics/outputCosmosdb:OutputCosmosdb';

    /**
     * Returns true if the given object is an instance of OutputCosmosdb.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OutputCosmosdb {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OutputCosmosdb.__pulumiType;
    }

    /**
     * The name of the CosmosDB container.
     */
    public readonly containerName!: pulumi.Output<string>;
    /**
     * The account key for the CosmosDB database.
     */
    public readonly cosmosdbAccountKey!: pulumi.Output<string>;
    /**
     * The ID of the CosmosDB database.
     */
    public readonly cosmosdbSqlDatabaseId!: pulumi.Output<string>;
    /**
     * The name of the field in output events used to specify the primary key which insert or update operations are based on.
     */
    public readonly documentId!: pulumi.Output<string | undefined>;
    /**
     * The name of the Stream Analytics Output. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the field in output events used to specify the key for partitioning output across collections. If `containerName` contains `{partition}` token, this property is required to be specified.
     */
    public readonly partitionKey!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Stream Analytics Job. Changing this forces a new resource to be created.
     */
    public readonly streamAnalyticsJobId!: pulumi.Output<string>;

    /**
     * Create a OutputCosmosdb resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OutputCosmosdbArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OutputCosmosdbArgs | OutputCosmosdbState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OutputCosmosdbState | undefined;
            resourceInputs["containerName"] = state ? state.containerName : undefined;
            resourceInputs["cosmosdbAccountKey"] = state ? state.cosmosdbAccountKey : undefined;
            resourceInputs["cosmosdbSqlDatabaseId"] = state ? state.cosmosdbSqlDatabaseId : undefined;
            resourceInputs["documentId"] = state ? state.documentId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["partitionKey"] = state ? state.partitionKey : undefined;
            resourceInputs["streamAnalyticsJobId"] = state ? state.streamAnalyticsJobId : undefined;
        } else {
            const args = argsOrState as OutputCosmosdbArgs | undefined;
            if ((!args || args.containerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerName'");
            }
            if ((!args || args.cosmosdbAccountKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cosmosdbAccountKey'");
            }
            if ((!args || args.cosmosdbSqlDatabaseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cosmosdbSqlDatabaseId'");
            }
            if ((!args || args.streamAnalyticsJobId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'streamAnalyticsJobId'");
            }
            resourceInputs["containerName"] = args ? args.containerName : undefined;
            resourceInputs["cosmosdbAccountKey"] = args?.cosmosdbAccountKey ? pulumi.secret(args.cosmosdbAccountKey) : undefined;
            resourceInputs["cosmosdbSqlDatabaseId"] = args ? args.cosmosdbSqlDatabaseId : undefined;
            resourceInputs["documentId"] = args ? args.documentId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["partitionKey"] = args ? args.partitionKey : undefined;
            resourceInputs["streamAnalyticsJobId"] = args ? args.streamAnalyticsJobId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["cosmosdbAccountKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(OutputCosmosdb.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OutputCosmosdb resources.
 */
export interface OutputCosmosdbState {
    /**
     * The name of the CosmosDB container.
     */
    containerName?: pulumi.Input<string>;
    /**
     * The account key for the CosmosDB database.
     */
    cosmosdbAccountKey?: pulumi.Input<string>;
    /**
     * The ID of the CosmosDB database.
     */
    cosmosdbSqlDatabaseId?: pulumi.Input<string>;
    /**
     * The name of the field in output events used to specify the primary key which insert or update operations are based on.
     */
    documentId?: pulumi.Input<string>;
    /**
     * The name of the Stream Analytics Output. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the field in output events used to specify the key for partitioning output across collections. If `containerName` contains `{partition}` token, this property is required to be specified.
     */
    partitionKey?: pulumi.Input<string>;
    /**
     * The ID of the Stream Analytics Job. Changing this forces a new resource to be created.
     */
    streamAnalyticsJobId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OutputCosmosdb resource.
 */
export interface OutputCosmosdbArgs {
    /**
     * The name of the CosmosDB container.
     */
    containerName: pulumi.Input<string>;
    /**
     * The account key for the CosmosDB database.
     */
    cosmosdbAccountKey: pulumi.Input<string>;
    /**
     * The ID of the CosmosDB database.
     */
    cosmosdbSqlDatabaseId: pulumi.Input<string>;
    /**
     * The name of the field in output events used to specify the primary key which insert or update operations are based on.
     */
    documentId?: pulumi.Input<string>;
    /**
     * The name of the Stream Analytics Output. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the field in output events used to specify the key for partitioning output across collections. If `containerName` contains `{partition}` token, this property is required to be specified.
     */
    partitionKey?: pulumi.Input<string>;
    /**
     * The ID of the Stream Analytics Job. Changing this forces a new resource to be created.
     */
    streamAnalyticsJobId: pulumi.Input<string>;
}
