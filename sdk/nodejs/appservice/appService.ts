// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Manages an App Service (within an App Service Plan).
 *
 * > **Note:** When using Slots - the `appSettings`, `connectionString` and `siteConfig` blocks on the `azure.appservice.AppService` resource will be overwritten when promoting a Slot using the `azure.appservice.ActiveSlot` resource.
 *
 * ## Example Usage
 *
 * This example provisions a Windows App Service.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const examplePlan = new azure.appservice.Plan("examplePlan", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     sku: {
 *         tier: "Standard",
 *         size: "S1",
 *     },
 * });
 * const exampleAppService = new azure.appservice.AppService("exampleAppService", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     appServicePlanId: examplePlan.id,
 *     siteConfig: {
 *         dotnetFrameworkVersion: "v4.0",
 *         scmType: "LocalGit",
 *     },
 *     appSettings: {
 *         SOME_KEY: "some-value",
 *     },
 *     connectionStrings: [{
 *         name: "Database",
 *         type: "SQLServer",
 *         value: "Server=some-server.mydomain.com;Integrated Security=SSPI",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * App Services can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:appservice/appService:AppService instance1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Web/sites/instance1
 * ```
 */
export class AppService extends pulumi.CustomResource {
    /**
     * Get an existing AppService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppServiceState, opts?: pulumi.CustomResourceOptions): AppService {
        return new AppService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:appservice/appService:AppService';

    /**
     * Returns true if the given object is an instance of AppService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppService.__pulumiType;
    }

    /**
     * The ID of the App Service Plan within which to create this App Service.
     */
    public readonly appServicePlanId!: pulumi.Output<string>;
    /**
     * A key-value pair of App Settings.
     */
    public readonly appSettings!: pulumi.Output<{[key: string]: string}>;
    /**
     * A `authSettings` block as defined below.
     */
    public readonly authSettings!: pulumi.Output<outputs.appservice.AppServiceAuthSettings>;
    /**
     * A `backup` block as defined below.
     */
    public readonly backup!: pulumi.Output<outputs.appservice.AppServiceBackup | undefined>;
    /**
     * Should the App Service send session affinity cookies, which route client requests in the same session to the same instance?
     */
    public readonly clientAffinityEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Does the App Service require client certificates for incoming requests? Defaults to `false`.
     */
    public readonly clientCertEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * One or more `connectionString` blocks as defined below.
     */
    public readonly connectionStrings!: pulumi.Output<outputs.appservice.AppServiceConnectionString[]>;
    /**
     * An identifier used by App Service to perform domain ownership verification via DNS TXT record.
     */
    public /*out*/ readonly customDomainVerificationId!: pulumi.Output<string>;
    /**
     * The Default Hostname associated with the App Service - such as `mysite.azurewebsites.net`
     */
    public /*out*/ readonly defaultSiteHostname!: pulumi.Output<string>;
    /**
     * Is the App Service Enabled?
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Can the App Service only be accessed via HTTPS? Defaults to `false`.
     */
    public readonly httpsOnly!: pulumi.Output<boolean | undefined>;
    /**
     * A Managed Service Identity block as defined below.
     */
    public readonly identity!: pulumi.Output<outputs.appservice.AppServiceIdentity>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * A `logs` block as defined below.
     */
    public readonly logs!: pulumi.Output<outputs.appservice.AppServiceLogs>;
    /**
     * Specifies the name of the App Service. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A list of outbound IP addresses - such as `["52.23.25.3", "52.143.43.12"]`
     */
    public /*out*/ readonly outboundIpAddressLists!: pulumi.Output<string[]>;
    /**
     * A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`
     */
    public /*out*/ readonly outboundIpAddresses!: pulumi.Output<string>;
    /**
     * A list of outbound IP addresses - such as `["52.23.25.3", "52.143.43.12", "52.143.43.17"]` - not all of which are necessarily in use. Superset of `outboundIpAddressList`.
     */
    public /*out*/ readonly possibleOutboundIpAddressLists!: pulumi.Output<string[]>;
    /**
     * A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
     */
    public /*out*/ readonly possibleOutboundIpAddresses!: pulumi.Output<string>;
    /**
     * The name of the resource group in which to create the App Service.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * A `siteConfig` block as defined below.
     */
    public readonly siteConfig!: pulumi.Output<outputs.appservice.AppServiceSiteConfig>;
    /**
     * A `siteCredential` block as defined below, which contains the site-level credentials used to publish to this App Service.
     */
    public /*out*/ readonly siteCredentials!: pulumi.Output<outputs.appservice.AppServiceSiteCredential[]>;
    /**
     * A Source Control block as defined below
     */
    public readonly sourceControl!: pulumi.Output<outputs.appservice.AppServiceSourceControl>;
    /**
     * One or more `storageAccount` blocks as defined below.
     */
    public readonly storageAccounts!: pulumi.Output<outputs.appservice.AppServiceStorageAccount[]>;
    /**
     * A mapping of tags to assign to the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a AppService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppServiceArgs | AppServiceState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppServiceState | undefined;
            inputs["appServicePlanId"] = state ? state.appServicePlanId : undefined;
            inputs["appSettings"] = state ? state.appSettings : undefined;
            inputs["authSettings"] = state ? state.authSettings : undefined;
            inputs["backup"] = state ? state.backup : undefined;
            inputs["clientAffinityEnabled"] = state ? state.clientAffinityEnabled : undefined;
            inputs["clientCertEnabled"] = state ? state.clientCertEnabled : undefined;
            inputs["connectionStrings"] = state ? state.connectionStrings : undefined;
            inputs["customDomainVerificationId"] = state ? state.customDomainVerificationId : undefined;
            inputs["defaultSiteHostname"] = state ? state.defaultSiteHostname : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["httpsOnly"] = state ? state.httpsOnly : undefined;
            inputs["identity"] = state ? state.identity : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["logs"] = state ? state.logs : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["outboundIpAddressLists"] = state ? state.outboundIpAddressLists : undefined;
            inputs["outboundIpAddresses"] = state ? state.outboundIpAddresses : undefined;
            inputs["possibleOutboundIpAddressLists"] = state ? state.possibleOutboundIpAddressLists : undefined;
            inputs["possibleOutboundIpAddresses"] = state ? state.possibleOutboundIpAddresses : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["siteConfig"] = state ? state.siteConfig : undefined;
            inputs["siteCredentials"] = state ? state.siteCredentials : undefined;
            inputs["sourceControl"] = state ? state.sourceControl : undefined;
            inputs["storageAccounts"] = state ? state.storageAccounts : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as AppServiceArgs | undefined;
            if ((!args || args.appServicePlanId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appServicePlanId'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["appServicePlanId"] = args ? args.appServicePlanId : undefined;
            inputs["appSettings"] = args ? args.appSettings : undefined;
            inputs["authSettings"] = args ? args.authSettings : undefined;
            inputs["backup"] = args ? args.backup : undefined;
            inputs["clientAffinityEnabled"] = args ? args.clientAffinityEnabled : undefined;
            inputs["clientCertEnabled"] = args ? args.clientCertEnabled : undefined;
            inputs["connectionStrings"] = args ? args.connectionStrings : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["httpsOnly"] = args ? args.httpsOnly : undefined;
            inputs["identity"] = args ? args.identity : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["logs"] = args ? args.logs : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["siteConfig"] = args ? args.siteConfig : undefined;
            inputs["sourceControl"] = args ? args.sourceControl : undefined;
            inputs["storageAccounts"] = args ? args.storageAccounts : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["customDomainVerificationId"] = undefined /*out*/;
            inputs["defaultSiteHostname"] = undefined /*out*/;
            inputs["outboundIpAddressLists"] = undefined /*out*/;
            inputs["outboundIpAddresses"] = undefined /*out*/;
            inputs["possibleOutboundIpAddressLists"] = undefined /*out*/;
            inputs["possibleOutboundIpAddresses"] = undefined /*out*/;
            inputs["siteCredentials"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(AppService.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppService resources.
 */
export interface AppServiceState {
    /**
     * The ID of the App Service Plan within which to create this App Service.
     */
    appServicePlanId?: pulumi.Input<string>;
    /**
     * A key-value pair of App Settings.
     */
    appSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A `authSettings` block as defined below.
     */
    authSettings?: pulumi.Input<inputs.appservice.AppServiceAuthSettings>;
    /**
     * A `backup` block as defined below.
     */
    backup?: pulumi.Input<inputs.appservice.AppServiceBackup>;
    /**
     * Should the App Service send session affinity cookies, which route client requests in the same session to the same instance?
     */
    clientAffinityEnabled?: pulumi.Input<boolean>;
    /**
     * Does the App Service require client certificates for incoming requests? Defaults to `false`.
     */
    clientCertEnabled?: pulumi.Input<boolean>;
    /**
     * One or more `connectionString` blocks as defined below.
     */
    connectionStrings?: pulumi.Input<pulumi.Input<inputs.appservice.AppServiceConnectionString>[]>;
    /**
     * An identifier used by App Service to perform domain ownership verification via DNS TXT record.
     */
    customDomainVerificationId?: pulumi.Input<string>;
    /**
     * The Default Hostname associated with the App Service - such as `mysite.azurewebsites.net`
     */
    defaultSiteHostname?: pulumi.Input<string>;
    /**
     * Is the App Service Enabled?
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Can the App Service only be accessed via HTTPS? Defaults to `false`.
     */
    httpsOnly?: pulumi.Input<boolean>;
    /**
     * A Managed Service Identity block as defined below.
     */
    identity?: pulumi.Input<inputs.appservice.AppServiceIdentity>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * A `logs` block as defined below.
     */
    logs?: pulumi.Input<inputs.appservice.AppServiceLogs>;
    /**
     * Specifies the name of the App Service. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of outbound IP addresses - such as `["52.23.25.3", "52.143.43.12"]`
     */
    outboundIpAddressLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`
     */
    outboundIpAddresses?: pulumi.Input<string>;
    /**
     * A list of outbound IP addresses - such as `["52.23.25.3", "52.143.43.12", "52.143.43.17"]` - not all of which are necessarily in use. Superset of `outboundIpAddressList`.
     */
    possibleOutboundIpAddressLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
     */
    possibleOutboundIpAddresses?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the App Service.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A `siteConfig` block as defined below.
     */
    siteConfig?: pulumi.Input<inputs.appservice.AppServiceSiteConfig>;
    /**
     * A `siteCredential` block as defined below, which contains the site-level credentials used to publish to this App Service.
     */
    siteCredentials?: pulumi.Input<pulumi.Input<inputs.appservice.AppServiceSiteCredential>[]>;
    /**
     * A Source Control block as defined below
     */
    sourceControl?: pulumi.Input<inputs.appservice.AppServiceSourceControl>;
    /**
     * One or more `storageAccount` blocks as defined below.
     */
    storageAccounts?: pulumi.Input<pulumi.Input<inputs.appservice.AppServiceStorageAccount>[]>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a AppService resource.
 */
export interface AppServiceArgs {
    /**
     * The ID of the App Service Plan within which to create this App Service.
     */
    appServicePlanId: pulumi.Input<string>;
    /**
     * A key-value pair of App Settings.
     */
    appSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A `authSettings` block as defined below.
     */
    authSettings?: pulumi.Input<inputs.appservice.AppServiceAuthSettings>;
    /**
     * A `backup` block as defined below.
     */
    backup?: pulumi.Input<inputs.appservice.AppServiceBackup>;
    /**
     * Should the App Service send session affinity cookies, which route client requests in the same session to the same instance?
     */
    clientAffinityEnabled?: pulumi.Input<boolean>;
    /**
     * Does the App Service require client certificates for incoming requests? Defaults to `false`.
     */
    clientCertEnabled?: pulumi.Input<boolean>;
    /**
     * One or more `connectionString` blocks as defined below.
     */
    connectionStrings?: pulumi.Input<pulumi.Input<inputs.appservice.AppServiceConnectionString>[]>;
    /**
     * Is the App Service Enabled?
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Can the App Service only be accessed via HTTPS? Defaults to `false`.
     */
    httpsOnly?: pulumi.Input<boolean>;
    /**
     * A Managed Service Identity block as defined below.
     */
    identity?: pulumi.Input<inputs.appservice.AppServiceIdentity>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * A `logs` block as defined below.
     */
    logs?: pulumi.Input<inputs.appservice.AppServiceLogs>;
    /**
     * Specifies the name of the App Service. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the App Service.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A `siteConfig` block as defined below.
     */
    siteConfig?: pulumi.Input<inputs.appservice.AppServiceSiteConfig>;
    /**
     * A Source Control block as defined below
     */
    sourceControl?: pulumi.Input<inputs.appservice.AppServiceSourceControl>;
    /**
     * One or more `storageAccount` blocks as defined below.
     */
    storageAccounts?: pulumi.Input<pulumi.Input<inputs.appservice.AppServiceStorageAccount>[]>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
