// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ActiveSlotArgs, ActiveSlotState } from "./activeSlot";
export type ActiveSlot = import("./activeSlot").ActiveSlot;
export const ActiveSlot: typeof import("./activeSlot").ActiveSlot = null as any;
utilities.lazyLoad(exports, ["ActiveSlot"], () => require("./activeSlot"));

export { AppConnectionArgs, AppConnectionState } from "./appConnection";
export type AppConnection = import("./appConnection").AppConnection;
export const AppConnection: typeof import("./appConnection").AppConnection = null as any;
utilities.lazyLoad(exports, ["AppConnection"], () => require("./appConnection"));

export { AppServiceArgs, AppServiceState } from "./appService";
export type AppService = import("./appService").AppService;
export const AppService: typeof import("./appService").AppService = null as any;
utilities.lazyLoad(exports, ["AppService"], () => require("./appService"));

export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { CertificateBindingArgs, CertificateBindingState } from "./certificateBinding";
export type CertificateBinding = import("./certificateBinding").CertificateBinding;
export const CertificateBinding: typeof import("./certificateBinding").CertificateBinding = null as any;
utilities.lazyLoad(exports, ["CertificateBinding"], () => require("./certificateBinding"));

export { CertificateOrderArgs, CertificateOrderState } from "./certificateOrder";
export type CertificateOrder = import("./certificateOrder").CertificateOrder;
export const CertificateOrder: typeof import("./certificateOrder").CertificateOrder = null as any;
utilities.lazyLoad(exports, ["CertificateOrder"], () => require("./certificateOrder"));

export { ConnectionArgs, ConnectionState } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { CustomHostnameBindingArgs, CustomHostnameBindingState } from "./customHostnameBinding";
export type CustomHostnameBinding = import("./customHostnameBinding").CustomHostnameBinding;
export const CustomHostnameBinding: typeof import("./customHostnameBinding").CustomHostnameBinding = null as any;
utilities.lazyLoad(exports, ["CustomHostnameBinding"], () => require("./customHostnameBinding"));

export { EnvironmentArgs, EnvironmentState } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));

export { EnvironmentV3Args, EnvironmentV3State } from "./environmentV3";
export type EnvironmentV3 = import("./environmentV3").EnvironmentV3;
export const EnvironmentV3: typeof import("./environmentV3").EnvironmentV3 = null as any;
utilities.lazyLoad(exports, ["EnvironmentV3"], () => require("./environmentV3"));

export { FunctionAppArgs, FunctionAppState } from "./functionApp";
export type FunctionApp = import("./functionApp").FunctionApp;
export const FunctionApp: typeof import("./functionApp").FunctionApp = null as any;
utilities.lazyLoad(exports, ["FunctionApp"], () => require("./functionApp"));

export { FunctionAppActiveSlotArgs, FunctionAppActiveSlotState } from "./functionAppActiveSlot";
export type FunctionAppActiveSlot = import("./functionAppActiveSlot").FunctionAppActiveSlot;
export const FunctionAppActiveSlot: typeof import("./functionAppActiveSlot").FunctionAppActiveSlot = null as any;
utilities.lazyLoad(exports, ["FunctionAppActiveSlot"], () => require("./functionAppActiveSlot"));

export { FunctionAppFunctionArgs, FunctionAppFunctionState } from "./functionAppFunction";
export type FunctionAppFunction = import("./functionAppFunction").FunctionAppFunction;
export const FunctionAppFunction: typeof import("./functionAppFunction").FunctionAppFunction = null as any;
utilities.lazyLoad(exports, ["FunctionAppFunction"], () => require("./functionAppFunction"));

export { FunctionAppHybridConnectionArgs, FunctionAppHybridConnectionState } from "./functionAppHybridConnection";
export type FunctionAppHybridConnection = import("./functionAppHybridConnection").FunctionAppHybridConnection;
export const FunctionAppHybridConnection: typeof import("./functionAppHybridConnection").FunctionAppHybridConnection = null as any;
utilities.lazyLoad(exports, ["FunctionAppHybridConnection"], () => require("./functionAppHybridConnection"));

export { FunctionAppSlotArgs, FunctionAppSlotState } from "./functionAppSlot";
export type FunctionAppSlot = import("./functionAppSlot").FunctionAppSlot;
export const FunctionAppSlot: typeof import("./functionAppSlot").FunctionAppSlot = null as any;
utilities.lazyLoad(exports, ["FunctionAppSlot"], () => require("./functionAppSlot"));

export { GetAppServiceArgs, GetAppServiceResult, GetAppServiceOutputArgs } from "./getAppService";
export const getAppService: typeof import("./getAppService").getAppService = null as any;
export const getAppServiceOutput: typeof import("./getAppService").getAppServiceOutput = null as any;
utilities.lazyLoad(exports, ["getAppService","getAppServiceOutput"], () => require("./getAppService"));

export { GetAppServiceEnvironmentArgs, GetAppServiceEnvironmentResult, GetAppServiceEnvironmentOutputArgs } from "./getAppServiceEnvironment";
export const getAppServiceEnvironment: typeof import("./getAppServiceEnvironment").getAppServiceEnvironment = null as any;
export const getAppServiceEnvironmentOutput: typeof import("./getAppServiceEnvironment").getAppServiceEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getAppServiceEnvironment","getAppServiceEnvironmentOutput"], () => require("./getAppServiceEnvironment"));

export { GetAppServicePlanArgs, GetAppServicePlanResult, GetAppServicePlanOutputArgs } from "./getAppServicePlan";
export const getAppServicePlan: typeof import("./getAppServicePlan").getAppServicePlan = null as any;
export const getAppServicePlanOutput: typeof import("./getAppServicePlan").getAppServicePlanOutput = null as any;
utilities.lazyLoad(exports, ["getAppServicePlan","getAppServicePlanOutput"], () => require("./getAppServicePlan"));

export { GetCertificateArgs, GetCertificateResult, GetCertificateOutputArgs } from "./getCertificate";
export const getCertificate: typeof import("./getCertificate").getCertificate = null as any;
export const getCertificateOutput: typeof import("./getCertificate").getCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getCertificate","getCertificateOutput"], () => require("./getCertificate"));

export { GetCertificateOrderArgs, GetCertificateOrderResult, GetCertificateOrderOutputArgs } from "./getCertificateOrder";
export const getCertificateOrder: typeof import("./getCertificateOrder").getCertificateOrder = null as any;
export const getCertificateOrderOutput: typeof import("./getCertificateOrder").getCertificateOrderOutput = null as any;
utilities.lazyLoad(exports, ["getCertificateOrder","getCertificateOrderOutput"], () => require("./getCertificateOrder"));

export { GetEnvironmentV3Args, GetEnvironmentV3Result, GetEnvironmentV3OutputArgs } from "./getEnvironmentV3";
export const getEnvironmentV3: typeof import("./getEnvironmentV3").getEnvironmentV3 = null as any;
export const getEnvironmentV3Output: typeof import("./getEnvironmentV3").getEnvironmentV3Output = null as any;
utilities.lazyLoad(exports, ["getEnvironmentV3","getEnvironmentV3Output"], () => require("./getEnvironmentV3"));

export { GetFunctionAppArgs, GetFunctionAppResult, GetFunctionAppOutputArgs } from "./getFunctionApp";
export const getFunctionApp: typeof import("./getFunctionApp").getFunctionApp = null as any;
export const getFunctionAppOutput: typeof import("./getFunctionApp").getFunctionAppOutput = null as any;
utilities.lazyLoad(exports, ["getFunctionApp","getFunctionAppOutput"], () => require("./getFunctionApp"));

export { GetFunctionAppHostKeysArgs, GetFunctionAppHostKeysResult, GetFunctionAppHostKeysOutputArgs } from "./getFunctionAppHostKeys";
export const getFunctionAppHostKeys: typeof import("./getFunctionAppHostKeys").getFunctionAppHostKeys = null as any;
export const getFunctionAppHostKeysOutput: typeof import("./getFunctionAppHostKeys").getFunctionAppHostKeysOutput = null as any;
utilities.lazyLoad(exports, ["getFunctionAppHostKeys","getFunctionAppHostKeysOutput"], () => require("./getFunctionAppHostKeys"));

export { GetLinuxFunctionAppArgs, GetLinuxFunctionAppResult, GetLinuxFunctionAppOutputArgs } from "./getLinuxFunctionApp";
export const getLinuxFunctionApp: typeof import("./getLinuxFunctionApp").getLinuxFunctionApp = null as any;
export const getLinuxFunctionAppOutput: typeof import("./getLinuxFunctionApp").getLinuxFunctionAppOutput = null as any;
utilities.lazyLoad(exports, ["getLinuxFunctionApp","getLinuxFunctionAppOutput"], () => require("./getLinuxFunctionApp"));

export { GetLinuxWebAppArgs, GetLinuxWebAppResult, GetLinuxWebAppOutputArgs } from "./getLinuxWebApp";
export const getLinuxWebApp: typeof import("./getLinuxWebApp").getLinuxWebApp = null as any;
export const getLinuxWebAppOutput: typeof import("./getLinuxWebApp").getLinuxWebAppOutput = null as any;
utilities.lazyLoad(exports, ["getLinuxWebApp","getLinuxWebAppOutput"], () => require("./getLinuxWebApp"));

export { GetServicePlanArgs, GetServicePlanResult, GetServicePlanOutputArgs } from "./getServicePlan";
export const getServicePlan: typeof import("./getServicePlan").getServicePlan = null as any;
export const getServicePlanOutput: typeof import("./getServicePlan").getServicePlanOutput = null as any;
utilities.lazyLoad(exports, ["getServicePlan","getServicePlanOutput"], () => require("./getServicePlan"));

export { GetSourceControlTokenArgs, GetSourceControlTokenResult, GetSourceControlTokenOutputArgs } from "./getSourceControlToken";
export const getSourceControlToken: typeof import("./getSourceControlToken").getSourceControlToken = null as any;
export const getSourceControlTokenOutput: typeof import("./getSourceControlToken").getSourceControlTokenOutput = null as any;
utilities.lazyLoad(exports, ["getSourceControlToken","getSourceControlTokenOutput"], () => require("./getSourceControlToken"));

export { GetWindowsFunctionAppArgs, GetWindowsFunctionAppResult, GetWindowsFunctionAppOutputArgs } from "./getWindowsFunctionApp";
export const getWindowsFunctionApp: typeof import("./getWindowsFunctionApp").getWindowsFunctionApp = null as any;
export const getWindowsFunctionAppOutput: typeof import("./getWindowsFunctionApp").getWindowsFunctionAppOutput = null as any;
utilities.lazyLoad(exports, ["getWindowsFunctionApp","getWindowsFunctionAppOutput"], () => require("./getWindowsFunctionApp"));

export { GetWindowsWebAppArgs, GetWindowsWebAppResult, GetWindowsWebAppOutputArgs } from "./getWindowsWebApp";
export const getWindowsWebApp: typeof import("./getWindowsWebApp").getWindowsWebApp = null as any;
export const getWindowsWebAppOutput: typeof import("./getWindowsWebApp").getWindowsWebAppOutput = null as any;
utilities.lazyLoad(exports, ["getWindowsWebApp","getWindowsWebAppOutput"], () => require("./getWindowsWebApp"));

export { HybridConnectionArgs, HybridConnectionState } from "./hybridConnection";
export type HybridConnection = import("./hybridConnection").HybridConnection;
export const HybridConnection: typeof import("./hybridConnection").HybridConnection = null as any;
utilities.lazyLoad(exports, ["HybridConnection"], () => require("./hybridConnection"));

export * from "./kind";
export { LinuxFunctionAppArgs, LinuxFunctionAppState } from "./linuxFunctionApp";
export type LinuxFunctionApp = import("./linuxFunctionApp").LinuxFunctionApp;
export const LinuxFunctionApp: typeof import("./linuxFunctionApp").LinuxFunctionApp = null as any;
utilities.lazyLoad(exports, ["LinuxFunctionApp"], () => require("./linuxFunctionApp"));

export { LinuxFunctionAppSlotArgs, LinuxFunctionAppSlotState } from "./linuxFunctionAppSlot";
export type LinuxFunctionAppSlot = import("./linuxFunctionAppSlot").LinuxFunctionAppSlot;
export const LinuxFunctionAppSlot: typeof import("./linuxFunctionAppSlot").LinuxFunctionAppSlot = null as any;
utilities.lazyLoad(exports, ["LinuxFunctionAppSlot"], () => require("./linuxFunctionAppSlot"));

export { LinuxWebAppArgs, LinuxWebAppState } from "./linuxWebApp";
export type LinuxWebApp = import("./linuxWebApp").LinuxWebApp;
export const LinuxWebApp: typeof import("./linuxWebApp").LinuxWebApp = null as any;
utilities.lazyLoad(exports, ["LinuxWebApp"], () => require("./linuxWebApp"));

export { LinuxWebAppSlotArgs, LinuxWebAppSlotState } from "./linuxWebAppSlot";
export type LinuxWebAppSlot = import("./linuxWebAppSlot").LinuxWebAppSlot;
export const LinuxWebAppSlot: typeof import("./linuxWebAppSlot").LinuxWebAppSlot = null as any;
utilities.lazyLoad(exports, ["LinuxWebAppSlot"], () => require("./linuxWebAppSlot"));

export { ManagedCertificateArgs, ManagedCertificateState } from "./managedCertificate";
export type ManagedCertificate = import("./managedCertificate").ManagedCertificate;
export const ManagedCertificate: typeof import("./managedCertificate").ManagedCertificate = null as any;
utilities.lazyLoad(exports, ["ManagedCertificate"], () => require("./managedCertificate"));

export { PlanArgs, PlanState } from "./plan";
export type Plan = import("./plan").Plan;
export const Plan: typeof import("./plan").Plan = null as any;
utilities.lazyLoad(exports, ["Plan"], () => require("./plan"));

export { PublicCertificateArgs, PublicCertificateState } from "./publicCertificate";
export type PublicCertificate = import("./publicCertificate").PublicCertificate;
export const PublicCertificate: typeof import("./publicCertificate").PublicCertificate = null as any;
utilities.lazyLoad(exports, ["PublicCertificate"], () => require("./publicCertificate"));

export { ServicePlanArgs, ServicePlanState } from "./servicePlan";
export type ServicePlan = import("./servicePlan").ServicePlan;
export const ServicePlan: typeof import("./servicePlan").ServicePlan = null as any;
utilities.lazyLoad(exports, ["ServicePlan"], () => require("./servicePlan"));

export { SlotArgs, SlotState } from "./slot";
export type Slot = import("./slot").Slot;
export const Slot: typeof import("./slot").Slot = null as any;
utilities.lazyLoad(exports, ["Slot"], () => require("./slot"));

export { SlotCustomHostnameBindingArgs, SlotCustomHostnameBindingState } from "./slotCustomHostnameBinding";
export type SlotCustomHostnameBinding = import("./slotCustomHostnameBinding").SlotCustomHostnameBinding;
export const SlotCustomHostnameBinding: typeof import("./slotCustomHostnameBinding").SlotCustomHostnameBinding = null as any;
utilities.lazyLoad(exports, ["SlotCustomHostnameBinding"], () => require("./slotCustomHostnameBinding"));

export { SlotVirtualNetworkSwiftConnectionArgs, SlotVirtualNetworkSwiftConnectionState } from "./slotVirtualNetworkSwiftConnection";
export type SlotVirtualNetworkSwiftConnection = import("./slotVirtualNetworkSwiftConnection").SlotVirtualNetworkSwiftConnection;
export const SlotVirtualNetworkSwiftConnection: typeof import("./slotVirtualNetworkSwiftConnection").SlotVirtualNetworkSwiftConnection = null as any;
utilities.lazyLoad(exports, ["SlotVirtualNetworkSwiftConnection"], () => require("./slotVirtualNetworkSwiftConnection"));

export { SourceCodeTokenArgs, SourceCodeTokenState } from "./sourceCodeToken";
export type SourceCodeToken = import("./sourceCodeToken").SourceCodeToken;
export const SourceCodeToken: typeof import("./sourceCodeToken").SourceCodeToken = null as any;
utilities.lazyLoad(exports, ["SourceCodeToken"], () => require("./sourceCodeToken"));

export { SourceControlArgs, SourceControlState } from "./sourceControl";
export type SourceControl = import("./sourceControl").SourceControl;
export const SourceControl: typeof import("./sourceControl").SourceControl = null as any;
utilities.lazyLoad(exports, ["SourceControl"], () => require("./sourceControl"));

export { SourceControlSlotArgs, SourceControlSlotState } from "./sourceControlSlot";
export type SourceControlSlot = import("./sourceControlSlot").SourceControlSlot;
export const SourceControlSlot: typeof import("./sourceControlSlot").SourceControlSlot = null as any;
utilities.lazyLoad(exports, ["SourceControlSlot"], () => require("./sourceControlSlot"));

export { SourceControlTokenArgs, SourceControlTokenState } from "./sourceControlToken";
export type SourceControlToken = import("./sourceControlToken").SourceControlToken;
export const SourceControlToken: typeof import("./sourceControlToken").SourceControlToken = null as any;
utilities.lazyLoad(exports, ["SourceControlToken"], () => require("./sourceControlToken"));

export { StaticSiteArgs, StaticSiteState } from "./staticSite";
export type StaticSite = import("./staticSite").StaticSite;
export const StaticSite: typeof import("./staticSite").StaticSite = null as any;
utilities.lazyLoad(exports, ["StaticSite"], () => require("./staticSite"));

export { StaticSiteCustomDomainArgs, StaticSiteCustomDomainState } from "./staticSiteCustomDomain";
export type StaticSiteCustomDomain = import("./staticSiteCustomDomain").StaticSiteCustomDomain;
export const StaticSiteCustomDomain: typeof import("./staticSiteCustomDomain").StaticSiteCustomDomain = null as any;
utilities.lazyLoad(exports, ["StaticSiteCustomDomain"], () => require("./staticSiteCustomDomain"));

export { VirtualNetworkSwiftConnectionArgs, VirtualNetworkSwiftConnectionState } from "./virtualNetworkSwiftConnection";
export type VirtualNetworkSwiftConnection = import("./virtualNetworkSwiftConnection").VirtualNetworkSwiftConnection;
export const VirtualNetworkSwiftConnection: typeof import("./virtualNetworkSwiftConnection").VirtualNetworkSwiftConnection = null as any;
utilities.lazyLoad(exports, ["VirtualNetworkSwiftConnection"], () => require("./virtualNetworkSwiftConnection"));

export { WebAppActiveSlotArgs, WebAppActiveSlotState } from "./webAppActiveSlot";
export type WebAppActiveSlot = import("./webAppActiveSlot").WebAppActiveSlot;
export const WebAppActiveSlot: typeof import("./webAppActiveSlot").WebAppActiveSlot = null as any;
utilities.lazyLoad(exports, ["WebAppActiveSlot"], () => require("./webAppActiveSlot"));

export { WebAppHybridConnectionArgs, WebAppHybridConnectionState } from "./webAppHybridConnection";
export type WebAppHybridConnection = import("./webAppHybridConnection").WebAppHybridConnection;
export const WebAppHybridConnection: typeof import("./webAppHybridConnection").WebAppHybridConnection = null as any;
utilities.lazyLoad(exports, ["WebAppHybridConnection"], () => require("./webAppHybridConnection"));

export { WindowsFunctionAppArgs, WindowsFunctionAppState } from "./windowsFunctionApp";
export type WindowsFunctionApp = import("./windowsFunctionApp").WindowsFunctionApp;
export const WindowsFunctionApp: typeof import("./windowsFunctionApp").WindowsFunctionApp = null as any;
utilities.lazyLoad(exports, ["WindowsFunctionApp"], () => require("./windowsFunctionApp"));

export { WindowsFunctionAppSlotArgs, WindowsFunctionAppSlotState } from "./windowsFunctionAppSlot";
export type WindowsFunctionAppSlot = import("./windowsFunctionAppSlot").WindowsFunctionAppSlot;
export const WindowsFunctionAppSlot: typeof import("./windowsFunctionAppSlot").WindowsFunctionAppSlot = null as any;
utilities.lazyLoad(exports, ["WindowsFunctionAppSlot"], () => require("./windowsFunctionAppSlot"));

export { WindowsWebAppArgs, WindowsWebAppState } from "./windowsWebApp";
export type WindowsWebApp = import("./windowsWebApp").WindowsWebApp;
export const WindowsWebApp: typeof import("./windowsWebApp").WindowsWebApp = null as any;
utilities.lazyLoad(exports, ["WindowsWebApp"], () => require("./windowsWebApp"));

export { WindowsWebAppSlotArgs, WindowsWebAppSlotState } from "./windowsWebAppSlot";
export type WindowsWebAppSlot = import("./windowsWebAppSlot").WindowsWebAppSlot;
export const WindowsWebAppSlot: typeof import("./windowsWebAppSlot").WindowsWebAppSlot = null as any;
utilities.lazyLoad(exports, ["WindowsWebAppSlot"], () => require("./windowsWebAppSlot"));

export * from "./zMixins";
export * from "./zMixins_durable";
export * from "./zMixins_http";
export * from "./zMixins_timer";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:appservice/activeSlot:ActiveSlot":
                return new ActiveSlot(name, <any>undefined, { urn })
            case "azure:appservice/appConnection:AppConnection":
                return new AppConnection(name, <any>undefined, { urn })
            case "azure:appservice/appService:AppService":
                return new AppService(name, <any>undefined, { urn })
            case "azure:appservice/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "azure:appservice/certificateBinding:CertificateBinding":
                return new CertificateBinding(name, <any>undefined, { urn })
            case "azure:appservice/certificateOrder:CertificateOrder":
                return new CertificateOrder(name, <any>undefined, { urn })
            case "azure:appservice/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "azure:appservice/customHostnameBinding:CustomHostnameBinding":
                return new CustomHostnameBinding(name, <any>undefined, { urn })
            case "azure:appservice/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "azure:appservice/environmentV3:EnvironmentV3":
                return new EnvironmentV3(name, <any>undefined, { urn })
            case "azure:appservice/functionApp:FunctionApp":
                return new FunctionApp(name, <any>undefined, { urn })
            case "azure:appservice/functionAppActiveSlot:FunctionAppActiveSlot":
                return new FunctionAppActiveSlot(name, <any>undefined, { urn })
            case "azure:appservice/functionAppFunction:FunctionAppFunction":
                return new FunctionAppFunction(name, <any>undefined, { urn })
            case "azure:appservice/functionAppHybridConnection:FunctionAppHybridConnection":
                return new FunctionAppHybridConnection(name, <any>undefined, { urn })
            case "azure:appservice/functionAppSlot:FunctionAppSlot":
                return new FunctionAppSlot(name, <any>undefined, { urn })
            case "azure:appservice/hybridConnection:HybridConnection":
                return new HybridConnection(name, <any>undefined, { urn })
            case "azure:appservice/linuxFunctionApp:LinuxFunctionApp":
                return new LinuxFunctionApp(name, <any>undefined, { urn })
            case "azure:appservice/linuxFunctionAppSlot:LinuxFunctionAppSlot":
                return new LinuxFunctionAppSlot(name, <any>undefined, { urn })
            case "azure:appservice/linuxWebApp:LinuxWebApp":
                return new LinuxWebApp(name, <any>undefined, { urn })
            case "azure:appservice/linuxWebAppSlot:LinuxWebAppSlot":
                return new LinuxWebAppSlot(name, <any>undefined, { urn })
            case "azure:appservice/managedCertificate:ManagedCertificate":
                return new ManagedCertificate(name, <any>undefined, { urn })
            case "azure:appservice/plan:Plan":
                return new Plan(name, <any>undefined, { urn })
            case "azure:appservice/publicCertificate:PublicCertificate":
                return new PublicCertificate(name, <any>undefined, { urn })
            case "azure:appservice/servicePlan:ServicePlan":
                return new ServicePlan(name, <any>undefined, { urn })
            case "azure:appservice/slot:Slot":
                return new Slot(name, <any>undefined, { urn })
            case "azure:appservice/slotCustomHostnameBinding:SlotCustomHostnameBinding":
                return new SlotCustomHostnameBinding(name, <any>undefined, { urn })
            case "azure:appservice/slotVirtualNetworkSwiftConnection:SlotVirtualNetworkSwiftConnection":
                return new SlotVirtualNetworkSwiftConnection(name, <any>undefined, { urn })
            case "azure:appservice/sourceCodeToken:SourceCodeToken":
                return new SourceCodeToken(name, <any>undefined, { urn })
            case "azure:appservice/sourceControl:SourceControl":
                return new SourceControl(name, <any>undefined, { urn })
            case "azure:appservice/sourceControlSlot:SourceControlSlot":
                return new SourceControlSlot(name, <any>undefined, { urn })
            case "azure:appservice/sourceControlToken:SourceControlToken":
                return new SourceControlToken(name, <any>undefined, { urn })
            case "azure:appservice/staticSite:StaticSite":
                return new StaticSite(name, <any>undefined, { urn })
            case "azure:appservice/staticSiteCustomDomain:StaticSiteCustomDomain":
                return new StaticSiteCustomDomain(name, <any>undefined, { urn })
            case "azure:appservice/virtualNetworkSwiftConnection:VirtualNetworkSwiftConnection":
                return new VirtualNetworkSwiftConnection(name, <any>undefined, { urn })
            case "azure:appservice/webAppActiveSlot:WebAppActiveSlot":
                return new WebAppActiveSlot(name, <any>undefined, { urn })
            case "azure:appservice/webAppHybridConnection:WebAppHybridConnection":
                return new WebAppHybridConnection(name, <any>undefined, { urn })
            case "azure:appservice/windowsFunctionApp:WindowsFunctionApp":
                return new WindowsFunctionApp(name, <any>undefined, { urn })
            case "azure:appservice/windowsFunctionAppSlot:WindowsFunctionAppSlot":
                return new WindowsFunctionAppSlot(name, <any>undefined, { urn })
            case "azure:appservice/windowsWebApp:WindowsWebApp":
                return new WindowsWebApp(name, <any>undefined, { urn })
            case "azure:appservice/windowsWebAppSlot:WindowsWebAppSlot":
                return new WindowsWebAppSlot(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "appservice/activeSlot", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/appConnection", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/appService", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/certificate", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/certificateBinding", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/certificateOrder", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/connection", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/customHostnameBinding", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/environment", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/environmentV3", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/functionApp", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/functionAppActiveSlot", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/functionAppFunction", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/functionAppHybridConnection", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/functionAppSlot", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/hybridConnection", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/linuxFunctionApp", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/linuxFunctionAppSlot", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/linuxWebApp", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/linuxWebAppSlot", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/managedCertificate", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/plan", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/publicCertificate", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/servicePlan", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/slot", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/slotCustomHostnameBinding", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/slotVirtualNetworkSwiftConnection", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/sourceCodeToken", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/sourceControl", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/sourceControlSlot", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/sourceControlToken", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/staticSite", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/staticSiteCustomDomain", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/virtualNetworkSwiftConnection", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/webAppActiveSlot", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/webAppHybridConnection", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/windowsFunctionApp", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/windowsFunctionAppSlot", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/windowsWebApp", _module)
pulumi.runtime.registerResourceModule("azure", "appservice/windowsWebAppSlot", _module)
