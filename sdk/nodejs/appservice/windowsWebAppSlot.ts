// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Windows Web App Slot.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleServicePlan = new azure.appservice.ServicePlan("example", {
 *     name: "example-plan",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     osType: "Windows",
 *     skuName: "P1v2",
 * });
 * const exampleWindowsWebApp = new azure.appservice.WindowsWebApp("example", {
 *     name: "example-windows-web-app",
 *     resourceGroupName: example.name,
 *     location: exampleServicePlan.location,
 *     servicePlanId: exampleServicePlan.id,
 *     siteConfig: {},
 * });
 * const exampleWindowsWebAppSlot = new azure.appservice.WindowsWebAppSlot("example", {
 *     name: "example-slot",
 *     appServiceId: exampleWindowsWebApp.id,
 *     siteConfig: {},
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Web` - 2023-12-01
 *
 * ## Import
 *
 * Windows Web Apps can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:appservice/windowsWebAppSlot:WindowsWebAppSlot example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1/slots/slot1
 * ```
 */
export class WindowsWebAppSlot extends pulumi.CustomResource {
    /**
     * Get an existing WindowsWebAppSlot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WindowsWebAppSlotState, opts?: pulumi.CustomResourceOptions): WindowsWebAppSlot {
        return new WindowsWebAppSlot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:appservice/windowsWebAppSlot:WindowsWebAppSlot';

    /**
     * Returns true if the given object is an instance of WindowsWebAppSlot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WindowsWebAppSlot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WindowsWebAppSlot.__pulumiType;
    }

    /**
     * The ID of the Windows Web App this Deployment Slot will be part of. Changing this forces a new Windows Web App to be created.
     */
    declare public readonly appServiceId: pulumi.Output<string>;
    /**
     * A map of key-value pairs of App Settings.
     */
    declare public readonly appSettings: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * An `authSettings` block as defined below.
     */
    declare public readonly authSettings: pulumi.Output<outputs.appservice.WindowsWebAppSlotAuthSettings | undefined>;
    /**
     * An `authSettingsV2` block as defined below.
     */
    declare public readonly authSettingsV2: pulumi.Output<outputs.appservice.WindowsWebAppSlotAuthSettingsV2 | undefined>;
    /**
     * A `backup` block as defined below.
     */
    declare public readonly backup: pulumi.Output<outputs.appservice.WindowsWebAppSlotBackup | undefined>;
    /**
     * Should Client Affinity be enabled?
     */
    declare public readonly clientAffinityEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Should Client Certificates be enabled?
     */
    declare public readonly clientCertificateEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Paths to exclude when using client certificates, separated by ;
     */
    declare public readonly clientCertificateExclusionPaths: pulumi.Output<string | undefined>;
    /**
     * The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertEnabled` is `false`. Defaults to `Required`.
     */
    declare public readonly clientCertificateMode: pulumi.Output<string | undefined>;
    /**
     * One or more `connectionString` blocks as defined below.
     */
    declare public readonly connectionStrings: pulumi.Output<outputs.appservice.WindowsWebAppSlotConnectionString[] | undefined>;
    /**
     * The identifier used by App Service to perform domain ownership verification via DNS TXT record.
     */
    declare public /*out*/ readonly customDomainVerificationId: pulumi.Output<string>;
    /**
     * The default hostname of the Windows Web App Slot.
     */
    declare public /*out*/ readonly defaultHostname: pulumi.Output<string>;
    /**
     * Should the Windows Web App Slot be enabled? Defaults to `true`.
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
     */
    declare public readonly ftpPublishBasicAuthenticationEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the App Service Environment used by App Service Slot.
     */
    declare public /*out*/ readonly hostingEnvironmentId: pulumi.Output<string>;
    /**
     * Should the Windows Web App Slot require HTTPS connections. Defaults to `false`.
     */
    declare public readonly httpsOnly: pulumi.Output<boolean | undefined>;
    /**
     * An `identity` block as defined below.
     */
    declare public readonly identity: pulumi.Output<outputs.appservice.WindowsWebAppSlotIdentity | undefined>;
    /**
     * The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
     */
    declare public readonly keyVaultReferenceIdentityId: pulumi.Output<string>;
    /**
     * The Kind value for this Windows Web App Slot.
     */
    declare public /*out*/ readonly kind: pulumi.Output<string>;
    /**
     * A `logs` block as defined below.
     */
    declare public readonly logs: pulumi.Output<outputs.appservice.WindowsWebAppSlotLogs | undefined>;
    declare public readonly name: pulumi.Output<string>;
    /**
     * A list of outbound IP addresses - such as `["52.23.25.3", "52.143.43.12"]`
     */
    declare public /*out*/ readonly outboundIpAddressLists: pulumi.Output<string[]>;
    /**
     * A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
     */
    declare public /*out*/ readonly outboundIpAddresses: pulumi.Output<string>;
    /**
     * A list of possible outbound ip address.
     */
    declare public /*out*/ readonly possibleOutboundIpAddressLists: pulumi.Output<string[]>;
    /**
     * A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
     */
    declare public /*out*/ readonly possibleOutboundIpAddresses: pulumi.Output<string>;
    /**
     * Should public network access be enabled for the Web App. Defaults to `true`.
     */
    declare public readonly publicNetworkAccessEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the Service Plan in which to run this slot. If not specified the same Service Plan as the Windows Web App will be used.
     *
     * > **Note:** `servicePlanId` should only be specified if it differs from the Service Plan of the associated Windows Web App.
     */
    declare public readonly servicePlanId: pulumi.Output<string | undefined>;
    /**
     * A `siteConfig` block as defined below.
     */
    declare public readonly siteConfig: pulumi.Output<outputs.appservice.WindowsWebAppSlotSiteConfig>;
    /**
     * A `siteCredential` block as defined below.
     */
    declare public /*out*/ readonly siteCredentials: pulumi.Output<outputs.appservice.WindowsWebAppSlotSiteCredential[]>;
    /**
     * One or more `storageAccount` blocks as defined below.
     *
     * > **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` to be set on the App in `appSettings`. Refer to the [Azure docs](https://docs.microsoft.com/en-us/azure/app-service/deploy-run-package) for further details.
     */
    declare public readonly storageAccounts: pulumi.Output<outputs.appservice.WindowsWebAppSlotStorageAccount[] | undefined>;
    /**
     * A mapping of tags which should be assigned to the Windows Web App Slot.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Whether backup and restore operations over the linked virtual network are enabled. Defaults to `false`.
     */
    declare public readonly virtualNetworkBackupRestoreEnabled: pulumi.Output<boolean | undefined>;
    declare public readonly virtualNetworkSubnetId: pulumi.Output<string | undefined>;
    /**
     * Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to `true`.
     *
     * > **Note:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
     */
    declare public readonly webdeployPublishBasicAuthenticationEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The local path and filename of the Zip packaged application to deploy to this Windows Web App.
     */
    declare public readonly zipDeployFile: pulumi.Output<string>;

    /**
     * Create a WindowsWebAppSlot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WindowsWebAppSlotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WindowsWebAppSlotArgs | WindowsWebAppSlotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WindowsWebAppSlotState | undefined;
            resourceInputs["appServiceId"] = state?.appServiceId;
            resourceInputs["appSettings"] = state?.appSettings;
            resourceInputs["authSettings"] = state?.authSettings;
            resourceInputs["authSettingsV2"] = state?.authSettingsV2;
            resourceInputs["backup"] = state?.backup;
            resourceInputs["clientAffinityEnabled"] = state?.clientAffinityEnabled;
            resourceInputs["clientCertificateEnabled"] = state?.clientCertificateEnabled;
            resourceInputs["clientCertificateExclusionPaths"] = state?.clientCertificateExclusionPaths;
            resourceInputs["clientCertificateMode"] = state?.clientCertificateMode;
            resourceInputs["connectionStrings"] = state?.connectionStrings;
            resourceInputs["customDomainVerificationId"] = state?.customDomainVerificationId;
            resourceInputs["defaultHostname"] = state?.defaultHostname;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["ftpPublishBasicAuthenticationEnabled"] = state?.ftpPublishBasicAuthenticationEnabled;
            resourceInputs["hostingEnvironmentId"] = state?.hostingEnvironmentId;
            resourceInputs["httpsOnly"] = state?.httpsOnly;
            resourceInputs["identity"] = state?.identity;
            resourceInputs["keyVaultReferenceIdentityId"] = state?.keyVaultReferenceIdentityId;
            resourceInputs["kind"] = state?.kind;
            resourceInputs["logs"] = state?.logs;
            resourceInputs["name"] = state?.name;
            resourceInputs["outboundIpAddressLists"] = state?.outboundIpAddressLists;
            resourceInputs["outboundIpAddresses"] = state?.outboundIpAddresses;
            resourceInputs["possibleOutboundIpAddressLists"] = state?.possibleOutboundIpAddressLists;
            resourceInputs["possibleOutboundIpAddresses"] = state?.possibleOutboundIpAddresses;
            resourceInputs["publicNetworkAccessEnabled"] = state?.publicNetworkAccessEnabled;
            resourceInputs["servicePlanId"] = state?.servicePlanId;
            resourceInputs["siteConfig"] = state?.siteConfig;
            resourceInputs["siteCredentials"] = state?.siteCredentials;
            resourceInputs["storageAccounts"] = state?.storageAccounts;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["virtualNetworkBackupRestoreEnabled"] = state?.virtualNetworkBackupRestoreEnabled;
            resourceInputs["virtualNetworkSubnetId"] = state?.virtualNetworkSubnetId;
            resourceInputs["webdeployPublishBasicAuthenticationEnabled"] = state?.webdeployPublishBasicAuthenticationEnabled;
            resourceInputs["zipDeployFile"] = state?.zipDeployFile;
        } else {
            const args = argsOrState as WindowsWebAppSlotArgs | undefined;
            if (args?.appServiceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'appServiceId'");
            }
            if (args?.siteConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'siteConfig'");
            }
            resourceInputs["appServiceId"] = args?.appServiceId;
            resourceInputs["appSettings"] = args?.appSettings;
            resourceInputs["authSettings"] = args?.authSettings;
            resourceInputs["authSettingsV2"] = args?.authSettingsV2;
            resourceInputs["backup"] = args?.backup;
            resourceInputs["clientAffinityEnabled"] = args?.clientAffinityEnabled;
            resourceInputs["clientCertificateEnabled"] = args?.clientCertificateEnabled;
            resourceInputs["clientCertificateExclusionPaths"] = args?.clientCertificateExclusionPaths;
            resourceInputs["clientCertificateMode"] = args?.clientCertificateMode;
            resourceInputs["connectionStrings"] = args?.connectionStrings;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["ftpPublishBasicAuthenticationEnabled"] = args?.ftpPublishBasicAuthenticationEnabled;
            resourceInputs["httpsOnly"] = args?.httpsOnly;
            resourceInputs["identity"] = args?.identity;
            resourceInputs["keyVaultReferenceIdentityId"] = args?.keyVaultReferenceIdentityId;
            resourceInputs["logs"] = args?.logs;
            resourceInputs["name"] = args?.name;
            resourceInputs["publicNetworkAccessEnabled"] = args?.publicNetworkAccessEnabled;
            resourceInputs["servicePlanId"] = args?.servicePlanId;
            resourceInputs["siteConfig"] = args?.siteConfig;
            resourceInputs["storageAccounts"] = args?.storageAccounts;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["virtualNetworkBackupRestoreEnabled"] = args?.virtualNetworkBackupRestoreEnabled;
            resourceInputs["virtualNetworkSubnetId"] = args?.virtualNetworkSubnetId;
            resourceInputs["webdeployPublishBasicAuthenticationEnabled"] = args?.webdeployPublishBasicAuthenticationEnabled;
            resourceInputs["zipDeployFile"] = args?.zipDeployFile;
            resourceInputs["customDomainVerificationId"] = undefined /*out*/;
            resourceInputs["defaultHostname"] = undefined /*out*/;
            resourceInputs["hostingEnvironmentId"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["outboundIpAddressLists"] = undefined /*out*/;
            resourceInputs["outboundIpAddresses"] = undefined /*out*/;
            resourceInputs["possibleOutboundIpAddressLists"] = undefined /*out*/;
            resourceInputs["possibleOutboundIpAddresses"] = undefined /*out*/;
            resourceInputs["siteCredentials"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["customDomainVerificationId", "siteCredentials"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(WindowsWebAppSlot.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WindowsWebAppSlot resources.
 */
export interface WindowsWebAppSlotState {
    /**
     * The ID of the Windows Web App this Deployment Slot will be part of. Changing this forces a new Windows Web App to be created.
     */
    appServiceId?: pulumi.Input<string>;
    /**
     * A map of key-value pairs of App Settings.
     */
    appSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * An `authSettings` block as defined below.
     */
    authSettings?: pulumi.Input<inputs.appservice.WindowsWebAppSlotAuthSettings>;
    /**
     * An `authSettingsV2` block as defined below.
     */
    authSettingsV2?: pulumi.Input<inputs.appservice.WindowsWebAppSlotAuthSettingsV2>;
    /**
     * A `backup` block as defined below.
     */
    backup?: pulumi.Input<inputs.appservice.WindowsWebAppSlotBackup>;
    /**
     * Should Client Affinity be enabled?
     */
    clientAffinityEnabled?: pulumi.Input<boolean>;
    /**
     * Should Client Certificates be enabled?
     */
    clientCertificateEnabled?: pulumi.Input<boolean>;
    /**
     * Paths to exclude when using client certificates, separated by ;
     */
    clientCertificateExclusionPaths?: pulumi.Input<string>;
    /**
     * The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertEnabled` is `false`. Defaults to `Required`.
     */
    clientCertificateMode?: pulumi.Input<string>;
    /**
     * One or more `connectionString` blocks as defined below.
     */
    connectionStrings?: pulumi.Input<pulumi.Input<inputs.appservice.WindowsWebAppSlotConnectionString>[]>;
    /**
     * The identifier used by App Service to perform domain ownership verification via DNS TXT record.
     */
    customDomainVerificationId?: pulumi.Input<string>;
    /**
     * The default hostname of the Windows Web App Slot.
     */
    defaultHostname?: pulumi.Input<string>;
    /**
     * Should the Windows Web App Slot be enabled? Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
     */
    ftpPublishBasicAuthenticationEnabled?: pulumi.Input<boolean>;
    /**
     * The ID of the App Service Environment used by App Service Slot.
     */
    hostingEnvironmentId?: pulumi.Input<string>;
    /**
     * Should the Windows Web App Slot require HTTPS connections. Defaults to `false`.
     */
    httpsOnly?: pulumi.Input<boolean>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.appservice.WindowsWebAppSlotIdentity>;
    /**
     * The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
     */
    keyVaultReferenceIdentityId?: pulumi.Input<string>;
    /**
     * The Kind value for this Windows Web App Slot.
     */
    kind?: pulumi.Input<string>;
    /**
     * A `logs` block as defined below.
     */
    logs?: pulumi.Input<inputs.appservice.WindowsWebAppSlotLogs>;
    name?: pulumi.Input<string>;
    /**
     * A list of outbound IP addresses - such as `["52.23.25.3", "52.143.43.12"]`
     */
    outboundIpAddressLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
     */
    outboundIpAddresses?: pulumi.Input<string>;
    /**
     * A list of possible outbound ip address.
     */
    possibleOutboundIpAddressLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
     */
    possibleOutboundIpAddresses?: pulumi.Input<string>;
    /**
     * Should public network access be enabled for the Web App. Defaults to `true`.
     */
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    /**
     * The ID of the Service Plan in which to run this slot. If not specified the same Service Plan as the Windows Web App will be used.
     *
     * > **Note:** `servicePlanId` should only be specified if it differs from the Service Plan of the associated Windows Web App.
     */
    servicePlanId?: pulumi.Input<string>;
    /**
     * A `siteConfig` block as defined below.
     */
    siteConfig?: pulumi.Input<inputs.appservice.WindowsWebAppSlotSiteConfig>;
    /**
     * A `siteCredential` block as defined below.
     */
    siteCredentials?: pulumi.Input<pulumi.Input<inputs.appservice.WindowsWebAppSlotSiteCredential>[]>;
    /**
     * One or more `storageAccount` blocks as defined below.
     *
     * > **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` to be set on the App in `appSettings`. Refer to the [Azure docs](https://docs.microsoft.com/en-us/azure/app-service/deploy-run-package) for further details.
     */
    storageAccounts?: pulumi.Input<pulumi.Input<inputs.appservice.WindowsWebAppSlotStorageAccount>[]>;
    /**
     * A mapping of tags which should be assigned to the Windows Web App Slot.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether backup and restore operations over the linked virtual network are enabled. Defaults to `false`.
     */
    virtualNetworkBackupRestoreEnabled?: pulumi.Input<boolean>;
    virtualNetworkSubnetId?: pulumi.Input<string>;
    /**
     * Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to `true`.
     *
     * > **Note:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
     */
    webdeployPublishBasicAuthenticationEnabled?: pulumi.Input<boolean>;
    /**
     * The local path and filename of the Zip packaged application to deploy to this Windows Web App.
     */
    zipDeployFile?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WindowsWebAppSlot resource.
 */
export interface WindowsWebAppSlotArgs {
    /**
     * The ID of the Windows Web App this Deployment Slot will be part of. Changing this forces a new Windows Web App to be created.
     */
    appServiceId: pulumi.Input<string>;
    /**
     * A map of key-value pairs of App Settings.
     */
    appSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * An `authSettings` block as defined below.
     */
    authSettings?: pulumi.Input<inputs.appservice.WindowsWebAppSlotAuthSettings>;
    /**
     * An `authSettingsV2` block as defined below.
     */
    authSettingsV2?: pulumi.Input<inputs.appservice.WindowsWebAppSlotAuthSettingsV2>;
    /**
     * A `backup` block as defined below.
     */
    backup?: pulumi.Input<inputs.appservice.WindowsWebAppSlotBackup>;
    /**
     * Should Client Affinity be enabled?
     */
    clientAffinityEnabled?: pulumi.Input<boolean>;
    /**
     * Should Client Certificates be enabled?
     */
    clientCertificateEnabled?: pulumi.Input<boolean>;
    /**
     * Paths to exclude when using client certificates, separated by ;
     */
    clientCertificateExclusionPaths?: pulumi.Input<string>;
    /**
     * The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertEnabled` is `false`. Defaults to `Required`.
     */
    clientCertificateMode?: pulumi.Input<string>;
    /**
     * One or more `connectionString` blocks as defined below.
     */
    connectionStrings?: pulumi.Input<pulumi.Input<inputs.appservice.WindowsWebAppSlotConnectionString>[]>;
    /**
     * Should the Windows Web App Slot be enabled? Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
     */
    ftpPublishBasicAuthenticationEnabled?: pulumi.Input<boolean>;
    /**
     * Should the Windows Web App Slot require HTTPS connections. Defaults to `false`.
     */
    httpsOnly?: pulumi.Input<boolean>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.appservice.WindowsWebAppSlotIdentity>;
    /**
     * The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
     */
    keyVaultReferenceIdentityId?: pulumi.Input<string>;
    /**
     * A `logs` block as defined below.
     */
    logs?: pulumi.Input<inputs.appservice.WindowsWebAppSlotLogs>;
    name?: pulumi.Input<string>;
    /**
     * Should public network access be enabled for the Web App. Defaults to `true`.
     */
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    /**
     * The ID of the Service Plan in which to run this slot. If not specified the same Service Plan as the Windows Web App will be used.
     *
     * > **Note:** `servicePlanId` should only be specified if it differs from the Service Plan of the associated Windows Web App.
     */
    servicePlanId?: pulumi.Input<string>;
    /**
     * A `siteConfig` block as defined below.
     */
    siteConfig: pulumi.Input<inputs.appservice.WindowsWebAppSlotSiteConfig>;
    /**
     * One or more `storageAccount` blocks as defined below.
     *
     * > **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` to be set on the App in `appSettings`. Refer to the [Azure docs](https://docs.microsoft.com/en-us/azure/app-service/deploy-run-package) for further details.
     */
    storageAccounts?: pulumi.Input<pulumi.Input<inputs.appservice.WindowsWebAppSlotStorageAccount>[]>;
    /**
     * A mapping of tags which should be assigned to the Windows Web App Slot.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether backup and restore operations over the linked virtual network are enabled. Defaults to `false`.
     */
    virtualNetworkBackupRestoreEnabled?: pulumi.Input<boolean>;
    virtualNetworkSubnetId?: pulumi.Input<string>;
    /**
     * Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to `true`.
     *
     * > **Note:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
     */
    webdeployPublishBasicAuthenticationEnabled?: pulumi.Input<boolean>;
    /**
     * The local path and filename of the Zip packaged application to deploy to this Windows Web App.
     */
    zipDeployFile?: pulumi.Input<string>;
}
