// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a service connector for function app.
 *
 * ## Example Usage
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.ServiceLinker` - 2024-04-01, 2022-05-01
 *
 * ## Import
 *
 * Service Connector for app service can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:appservice/appConnection:AppConnection example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Web/sites/webapp/providers/Microsoft.ServiceLinker/linkers/serviceconnector1
 * ```
 */
export class AppConnection extends pulumi.CustomResource {
    /**
     * Get an existing AppConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppConnectionState, opts?: pulumi.CustomResourceOptions): AppConnection {
        return new AppConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:appservice/appConnection:AppConnection';

    /**
     * Returns true if the given object is an instance of AppConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppConnection.__pulumiType;
    }

    /**
     * The authentication info. An `authentication` block as defined below.
     *
     * > **Note:** If a Managed Identity is used, this will need to be configured on the App Service.
     */
    declare public readonly authentication: pulumi.Output<outputs.appservice.AppConnectionAuthentication>;
    declare public readonly clientType: pulumi.Output<string | undefined>;
    /**
     * The ID of the data source function app. Changing this forces a new resource to be created.
     */
    declare public readonly functionAppId: pulumi.Output<string>;
    /**
     * The name of the service connection. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly secretStore: pulumi.Output<outputs.appservice.AppConnectionSecretStore | undefined>;
    /**
     * The ID of the target resource. Changing this forces a new resource to be created. Possible target resources are `Postgres`, `PostgresFlexible`, `Mysql`, `Sql`, `Redis`, `RedisEnterprise`, `CosmosCassandra`, `CosmosGremlin`, `CosmosMongo`, `CosmosSql`, `CosmosTable`, `StorageBlob`, `StorageQueue`, `StorageFile`, `StorageTable`, `AppConfig`, `EventHub`, `ServiceBus`, `SignalR`, `WebPubSub`, `ConfluentKafka`. The integration guide can be found [here](https://learn.microsoft.com/en-us/azure/service-connector/how-to-integrate-postgres).
     */
    declare public readonly targetResourceId: pulumi.Output<string>;
    declare public readonly vnetSolution: pulumi.Output<string | undefined>;

    /**
     * Create a AppConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppConnectionArgs | AppConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppConnectionState | undefined;
            resourceInputs["authentication"] = state?.authentication;
            resourceInputs["clientType"] = state?.clientType;
            resourceInputs["functionAppId"] = state?.functionAppId;
            resourceInputs["name"] = state?.name;
            resourceInputs["secretStore"] = state?.secretStore;
            resourceInputs["targetResourceId"] = state?.targetResourceId;
            resourceInputs["vnetSolution"] = state?.vnetSolution;
        } else {
            const args = argsOrState as AppConnectionArgs | undefined;
            if (args?.authentication === undefined && !opts.urn) {
                throw new Error("Missing required property 'authentication'");
            }
            if (args?.functionAppId === undefined && !opts.urn) {
                throw new Error("Missing required property 'functionAppId'");
            }
            if (args?.targetResourceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetResourceId'");
            }
            resourceInputs["authentication"] = args?.authentication;
            resourceInputs["clientType"] = args?.clientType;
            resourceInputs["functionAppId"] = args?.functionAppId;
            resourceInputs["name"] = args?.name;
            resourceInputs["secretStore"] = args?.secretStore;
            resourceInputs["targetResourceId"] = args?.targetResourceId;
            resourceInputs["vnetSolution"] = args?.vnetSolution;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppConnection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppConnection resources.
 */
export interface AppConnectionState {
    /**
     * The authentication info. An `authentication` block as defined below.
     *
     * > **Note:** If a Managed Identity is used, this will need to be configured on the App Service.
     */
    authentication?: pulumi.Input<inputs.appservice.AppConnectionAuthentication>;
    clientType?: pulumi.Input<string>;
    /**
     * The ID of the data source function app. Changing this forces a new resource to be created.
     */
    functionAppId?: pulumi.Input<string>;
    /**
     * The name of the service connection. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    secretStore?: pulumi.Input<inputs.appservice.AppConnectionSecretStore>;
    /**
     * The ID of the target resource. Changing this forces a new resource to be created. Possible target resources are `Postgres`, `PostgresFlexible`, `Mysql`, `Sql`, `Redis`, `RedisEnterprise`, `CosmosCassandra`, `CosmosGremlin`, `CosmosMongo`, `CosmosSql`, `CosmosTable`, `StorageBlob`, `StorageQueue`, `StorageFile`, `StorageTable`, `AppConfig`, `EventHub`, `ServiceBus`, `SignalR`, `WebPubSub`, `ConfluentKafka`. The integration guide can be found [here](https://learn.microsoft.com/en-us/azure/service-connector/how-to-integrate-postgres).
     */
    targetResourceId?: pulumi.Input<string>;
    vnetSolution?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppConnection resource.
 */
export interface AppConnectionArgs {
    /**
     * The authentication info. An `authentication` block as defined below.
     *
     * > **Note:** If a Managed Identity is used, this will need to be configured on the App Service.
     */
    authentication: pulumi.Input<inputs.appservice.AppConnectionAuthentication>;
    clientType?: pulumi.Input<string>;
    /**
     * The ID of the data source function app. Changing this forces a new resource to be created.
     */
    functionAppId: pulumi.Input<string>;
    /**
     * The name of the service connection. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    secretStore?: pulumi.Input<inputs.appservice.AppConnectionSecretStore>;
    /**
     * The ID of the target resource. Changing this forces a new resource to be created. Possible target resources are `Postgres`, `PostgresFlexible`, `Mysql`, `Sql`, `Redis`, `RedisEnterprise`, `CosmosCassandra`, `CosmosGremlin`, `CosmosMongo`, `CosmosSql`, `CosmosTable`, `StorageBlob`, `StorageQueue`, `StorageFile`, `StorageTable`, `AppConfig`, `EventHub`, `ServiceBus`, `SignalR`, `WebPubSub`, `ConfluentKafka`. The integration guide can be found [here](https://learn.microsoft.com/en-us/azure/service-connector/how-to-integrate-postgres).
     */
    targetResourceId: pulumi.Input<string>;
    vnetSolution?: pulumi.Input<string>;
}
