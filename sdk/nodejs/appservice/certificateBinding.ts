// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an App Service Certificate Binding.
 *
 * ## Import
 *
 * App Service Certificate Bindings can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:appservice/certificateBinding:CertificateBinding example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Web/sites/instance1/hostNameBindings/mywebsite.com
 * ```
 */
export class CertificateBinding extends pulumi.CustomResource {
    /**
     * Get an existing CertificateBinding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateBindingState, opts?: pulumi.CustomResourceOptions): CertificateBinding {
        return new CertificateBinding(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:appservice/certificateBinding:CertificateBinding';

    /**
     * Returns true if the given object is an instance of CertificateBinding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CertificateBinding {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CertificateBinding.__pulumiType;
    }

    /**
     * The name of the App Service to which the certificate was bound.
     */
    public /*out*/ readonly appServiceName!: pulumi.Output<string>;
    /**
     * The ID of the certificate to bind to the custom domain. Changing this forces a new App Service Certificate Binding to be created.
     */
    public readonly certificateId!: pulumi.Output<string>;
    /**
     * The hostname of the bound certificate.
     */
    public /*out*/ readonly hostname!: pulumi.Output<string>;
    /**
     * The ID of the Custom Domain/Hostname Binding. Changing this forces a new App Service Certificate Binding to be created.
     */
    public readonly hostnameBindingId!: pulumi.Output<string>;
    /**
     * The type of certificate binding. Allowed values are `IpBasedEnabled` or `SniEnabled`. Changing this forces a new App Service Certificate Binding to be created.
     */
    public readonly sslState!: pulumi.Output<string>;
    /**
     * The certificate thumbprint.
     */
    public /*out*/ readonly thumbprint!: pulumi.Output<string>;

    /**
     * Create a CertificateBinding resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateBindingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateBindingArgs | CertificateBindingState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateBindingState | undefined;
            inputs["appServiceName"] = state ? state.appServiceName : undefined;
            inputs["certificateId"] = state ? state.certificateId : undefined;
            inputs["hostname"] = state ? state.hostname : undefined;
            inputs["hostnameBindingId"] = state ? state.hostnameBindingId : undefined;
            inputs["sslState"] = state ? state.sslState : undefined;
            inputs["thumbprint"] = state ? state.thumbprint : undefined;
        } else {
            const args = argsOrState as CertificateBindingArgs | undefined;
            if ((!args || args.certificateId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateId'");
            }
            if ((!args || args.hostnameBindingId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostnameBindingId'");
            }
            if ((!args || args.sslState === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sslState'");
            }
            inputs["certificateId"] = args ? args.certificateId : undefined;
            inputs["hostnameBindingId"] = args ? args.hostnameBindingId : undefined;
            inputs["sslState"] = args ? args.sslState : undefined;
            inputs["appServiceName"] = undefined /*out*/;
            inputs["hostname"] = undefined /*out*/;
            inputs["thumbprint"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(CertificateBinding.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CertificateBinding resources.
 */
export interface CertificateBindingState {
    /**
     * The name of the App Service to which the certificate was bound.
     */
    appServiceName?: pulumi.Input<string>;
    /**
     * The ID of the certificate to bind to the custom domain. Changing this forces a new App Service Certificate Binding to be created.
     */
    certificateId?: pulumi.Input<string>;
    /**
     * The hostname of the bound certificate.
     */
    hostname?: pulumi.Input<string>;
    /**
     * The ID of the Custom Domain/Hostname Binding. Changing this forces a new App Service Certificate Binding to be created.
     */
    hostnameBindingId?: pulumi.Input<string>;
    /**
     * The type of certificate binding. Allowed values are `IpBasedEnabled` or `SniEnabled`. Changing this forces a new App Service Certificate Binding to be created.
     */
    sslState?: pulumi.Input<string>;
    /**
     * The certificate thumbprint.
     */
    thumbprint?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CertificateBinding resource.
 */
export interface CertificateBindingArgs {
    /**
     * The ID of the certificate to bind to the custom domain. Changing this forces a new App Service Certificate Binding to be created.
     */
    certificateId: pulumi.Input<string>;
    /**
     * The ID of the Custom Domain/Hostname Binding. Changing this forces a new App Service Certificate Binding to be created.
     */
    hostnameBindingId: pulumi.Input<string>;
    /**
     * The type of certificate binding. Allowed values are `IpBasedEnabled` or `SniEnabled`. Changing this forces a new App Service Certificate Binding to be created.
     */
    sslState: pulumi.Input<string>;
}
