// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to access information about an existing Windows Web App.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.appservice.getWindowsWebApp({
 *     name: "existing",
 *     resourceGroupName: "existing",
 * });
 * export const id = example.then(example => example.id);
 * ```
 */
export function getWindowsWebApp(args: GetWindowsWebAppArgs, opts?: pulumi.InvokeOptions): Promise<GetWindowsWebAppResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure:appservice/getWindowsWebApp:getWindowsWebApp", {
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

/**
 * A collection of arguments for invoking getWindowsWebApp.
 */
export interface GetWindowsWebAppArgs {
    /**
     * The name of this Windows Web App.
     */
    name: string;
    /**
     * The name of the Resource Group where the Windows Web App exists.
     */
    resourceGroupName: string;
}

/**
 * A collection of values returned by getWindowsWebApp.
 */
export interface GetWindowsWebAppResult {
    /**
     * A map of key-value pairs of App Settings.
     */
    readonly appSettings: {[key: string]: string};
    /**
     * A `authSettings` block as defined below.
     */
    readonly authSettings: outputs.appservice.GetWindowsWebAppAuthSetting[];
    /**
     * An `authSettingsV2` block as defined below.
     */
    readonly authSettingsV2s: outputs.appservice.GetWindowsWebAppAuthSettingsV2[];
    /**
     * A `backup` block as defined below.
     */
    readonly backups: outputs.appservice.GetWindowsWebAppBackup[];
    /**
     * Is Client Affinity enabled?
     */
    readonly clientAffinityEnabled: boolean;
    /**
     * Are Client Certificates enabled?
     */
    readonly clientCertificateEnabled: boolean;
    /**
     * Paths to exclude when using client certificates, separated by ;
     */
    readonly clientCertificateExclusionPaths: string;
    /**
     * The Client Certificate mode.
     */
    readonly clientCertificateMode: string;
    /**
     * A `connectionString` block as defined below.
     */
    readonly connectionStrings: outputs.appservice.GetWindowsWebAppConnectionString[];
    /**
     * The identifier used by App Service to perform domain ownership verification via DNS TXT record.
     */
    readonly customDomainVerificationId: string;
    /**
     * The Default Hostname of the Windows Web App.
     */
    readonly defaultHostname: string;
    /**
     * Is the Backup enabled?
     */
    readonly enabled: boolean;
    /**
     * Are the default FTP Basic Authentication publishing credentials enabled.
     */
    readonly ftpPublishBasicAuthenticationEnabled: boolean;
    /**
     * The ID of the App Service Environment used by App Service.
     */
    readonly hostingEnvironmentId: string;
    /**
     * Does the Windows Web App require HTTPS connections.
     */
    readonly httpsOnly: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A `identity` block as defined below.
     */
    readonly identities: outputs.appservice.GetWindowsWebAppIdentity[];
    /**
     * The string representation of the Windows Web App Kind.
     */
    readonly kind: string;
    /**
     * The Azure Region where the Windows Web App exists.
     */
    readonly location: string;
    /**
     * A `logs` block as defined below.
     */
    readonly logs: outputs.appservice.GetWindowsWebAppLog[];
    /**
     * The name of this Storage Account.
     */
    readonly name: string;
    /**
     * The list of Outbound IP Addresses for this Windows Web App.
     */
    readonly outboundIpAddressLists: string[];
    /**
     * A string representation of the list of Outbound IP Addresses for this Windows Web App.
     */
    readonly outboundIpAddresses: string;
    /**
     * The list of Possible Outbound IP Addresses that could be used by this Windows Web App.
     */
    readonly possibleOutboundIpAddressLists: string[];
    /**
     * The string representation of the list of Possible Outbound IP Addresses that could be used by this Windows Web App.
     */
    readonly possibleOutboundIpAddresses: string;
    /**
     * Is Public Network Access enabled for the Windows Web App.
     */
    readonly publicNetworkAccessEnabled: boolean;
    readonly resourceGroupName: string;
    /**
     * The ID of the Service Plan in which this Windows Web App resides.
     */
    readonly servicePlanId: string;
    /**
     * A `siteConfig` block as defined below.
     */
    readonly siteConfigs: outputs.appservice.GetWindowsWebAppSiteConfig[];
    /**
     * A `siteCredential` block as defined below.
     */
    readonly siteCredentials: outputs.appservice.GetWindowsWebAppSiteCredential[];
    /**
     * A `stickySettings` block as defined below.
     */
    readonly stickySettings: outputs.appservice.GetWindowsWebAppStickySetting[];
    /**
     * A `storageAccount` block as defined below.
     */
    readonly storageAccounts: outputs.appservice.GetWindowsWebAppStorageAccount[];
    /**
     * A mapping of tags assigned to the Windows Web App.
     */
    readonly tags: {[key: string]: string};
    /**
     * The subnet id which the Windows Web App is vNet Integrated with.
     */
    readonly virtualNetworkSubnetId: string;
    /**
     * Are the default WebDeploy Basic Authentication publishing credentials enabled.
     */
    readonly webdeployPublishBasicAuthenticationEnabled: boolean;
}
/**
 * Use this data source to access information about an existing Windows Web App.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.appservice.getWindowsWebApp({
 *     name: "existing",
 *     resourceGroupName: "existing",
 * });
 * export const id = example.then(example => example.id);
 * ```
 */
export function getWindowsWebAppOutput(args: GetWindowsWebAppOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWindowsWebAppResult> {
    return pulumi.output(args).apply((a: any) => getWindowsWebApp(a, opts))
}

/**
 * A collection of arguments for invoking getWindowsWebApp.
 */
export interface GetWindowsWebAppOutputArgs {
    /**
     * The name of this Windows Web App.
     */
    name: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Windows Web App exists.
     */
    resourceGroupName: pulumi.Input<string>;
}
