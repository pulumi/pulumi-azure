// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Function App deployment Slot.
 *
 * !> **NOTE:** This resource has been deprecated in version 5.0 of the provider and will be removed in version 6.0. Please use `azure.appservice.LinuxFunctionAppSlot` and `azure.appservice.WindowsFunctionAppSlot` resources instead.
 *
 * ## Example Usage
 *
 * ### With App Service Plan)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "azure-functions-test-rg",
 *     location: "West Europe",
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "functionsapptestsa",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const examplePlan = new azure.appservice.Plan("example", {
 *     name: "azure-functions-test-service-plan",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: {
 *         tier: "Standard",
 *         size: "S1",
 *     },
 * });
 * const exampleFunctionApp = new azure.appservice.FunctionApp("example", {
 *     name: "test-azure-functions",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     appServicePlanId: examplePlan.id,
 *     storageAccountName: exampleAccount.name,
 *     storageAccountAccessKey: exampleAccount.primaryAccessKey,
 * });
 * const exampleFunctionAppSlot = new azure.appservice.FunctionAppSlot("example", {
 *     name: "test-azure-functions_slot",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     appServicePlanId: examplePlan.id,
 *     functionAppName: exampleFunctionApp.name,
 *     storageAccountName: exampleAccount.name,
 *     storageAccountAccessKey: exampleAccount.primaryAccessKey,
 * });
 * ```
 *
 * ## Import
 *
 * Function Apps Deployment Slots can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:appservice/functionAppSlot:FunctionAppSlot functionapp1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Web/sites/functionapp1/slots/staging
 * ```
 */
export class FunctionAppSlot extends pulumi.CustomResource {
    /**
     * Get an existing FunctionAppSlot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FunctionAppSlotState, opts?: pulumi.CustomResourceOptions): FunctionAppSlot {
        return new FunctionAppSlot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:appservice/functionAppSlot:FunctionAppSlot';

    /**
     * Returns true if the given object is an instance of FunctionAppSlot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FunctionAppSlot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FunctionAppSlot.__pulumiType;
    }

    /**
     * The ID of the App Service Plan within which to create this Function App Slot. Changing this forces a new resource to be created.
     */
    declare public readonly appServicePlanId: pulumi.Output<string>;
    /**
     * A key-value pair of App Settings.
     *
     * > **Note:** When integrating a `CI/CD pipeline` and expecting to run from a deployed package in `Azure` you must seed your `app settings` as part of the application code for function app to be successfully deployed. `Important Default key pairs`: (`"WEBSITE_RUN_FROM_PACKAGE" = ""`, `"FUNCTIONS_WORKER_RUNTIME" = "node"` (or python, etc), `"WEBSITE_NODE_DEFAULT_VERSION" = "10.14.1"`, `"APPINSIGHTS_INSTRUMENTATIONKEY" = ""`).
     *
     * > **NOTE:** The values for `AzureWebJobsStorage` and `FUNCTIONS_EXTENSION_VERSION` will be filled by other input arguments and shouldn't be configured separately. `AzureWebJobsStorage` is filled based on `storageAccountName` and `storageAccountAccessKey`. `FUNCTIONS_EXTENSION_VERSION` is filled based on `version`.
     *
     * > **Note:**  When using an App Service Plan in the `Free` or `Shared` Tiers `use32BitWorkerProcess` must be set to `true`.
     */
    declare public readonly appSettings: pulumi.Output<{[key: string]: string}>;
    /**
     * An `authSettings` block as defined below.
     */
    declare public readonly authSettings: pulumi.Output<outputs.appservice.FunctionAppSlotAuthSettings>;
    /**
     * A `connectionString` block as defined below.
     */
    declare public readonly connectionStrings: pulumi.Output<outputs.appservice.FunctionAppSlotConnectionString[]>;
    /**
     * The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only affects function apps under the consumption plan.
     */
    declare public readonly dailyMemoryTimeQuota: pulumi.Output<number | undefined>;
    /**
     * The default hostname associated with the Function App - such as `mysite.azurewebsites.net`
     */
    declare public /*out*/ readonly defaultHostname: pulumi.Output<string>;
    /**
     * Should the built-in logging of the Function App be enabled? Defaults to `true`.
     */
    declare public readonly enableBuiltinLogging: pulumi.Output<boolean | undefined>;
    /**
     * Is the Function App enabled? Defaults to `true`.
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * The name of the Function App within which to create the Function App Slot. Changing this forces a new resource to be created.
     */
    declare public readonly functionAppName: pulumi.Output<string>;
    /**
     * Can the Function App only be accessed via HTTPS? Defaults to `false`.
     */
    declare public readonly httpsOnly: pulumi.Output<boolean | undefined>;
    /**
     * An `identity` block as defined below.
     */
    declare public readonly identity: pulumi.Output<outputs.appservice.FunctionAppSlotIdentity | undefined>;
    /**
     * The Function App kind - such as `functionapp,linux,container`
     */
    declare public /*out*/ readonly kind: pulumi.Output<string>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * Specifies the name of the Function App. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * A string indicating the Operating System type for this function app. The only possible value is `linux`. Changing this forces a new resource to be created.
     *
     * > **NOTE:** This value will be `linux` for Linux Derivatives or an empty string for Windows (default).
     */
    declare public readonly osType: pulumi.Output<string | undefined>;
    /**
     * A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`
     */
    declare public /*out*/ readonly outboundIpAddresses: pulumi.Output<string>;
    /**
     * A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
     */
    declare public /*out*/ readonly possibleOutboundIpAddresses: pulumi.Output<string>;
    /**
     * The name of the resource group in which to create the Function App Slot. Changing this forces a new resource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * A `siteConfig` object as defined below.
     */
    declare public readonly siteConfig: pulumi.Output<outputs.appservice.FunctionAppSlotSiteConfig>;
    /**
     * A `siteCredential` block as defined below, which contains the site-level credentials used to publish to this Function App Slot.
     */
    declare public /*out*/ readonly siteCredentials: pulumi.Output<outputs.appservice.FunctionAppSlotSiteCredential[]>;
    /**
     * The access key which will be used to access the backend storage account for the Function App.
     */
    declare public readonly storageAccountAccessKey: pulumi.Output<string>;
    /**
     * The backend storage account name which will be used by the Function App (such as the dashboard, logs). Changing this forces a new resource to be created.
     */
    declare public readonly storageAccountName: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The runtime version associated with the Function App. Defaults to `~1`.
     */
    declare public readonly version: pulumi.Output<string | undefined>;

    /**
     * Create a FunctionAppSlot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FunctionAppSlotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FunctionAppSlotArgs | FunctionAppSlotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FunctionAppSlotState | undefined;
            resourceInputs["appServicePlanId"] = state?.appServicePlanId;
            resourceInputs["appSettings"] = state?.appSettings;
            resourceInputs["authSettings"] = state?.authSettings;
            resourceInputs["connectionStrings"] = state?.connectionStrings;
            resourceInputs["dailyMemoryTimeQuota"] = state?.dailyMemoryTimeQuota;
            resourceInputs["defaultHostname"] = state?.defaultHostname;
            resourceInputs["enableBuiltinLogging"] = state?.enableBuiltinLogging;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["functionAppName"] = state?.functionAppName;
            resourceInputs["httpsOnly"] = state?.httpsOnly;
            resourceInputs["identity"] = state?.identity;
            resourceInputs["kind"] = state?.kind;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["osType"] = state?.osType;
            resourceInputs["outboundIpAddresses"] = state?.outboundIpAddresses;
            resourceInputs["possibleOutboundIpAddresses"] = state?.possibleOutboundIpAddresses;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["siteConfig"] = state?.siteConfig;
            resourceInputs["siteCredentials"] = state?.siteCredentials;
            resourceInputs["storageAccountAccessKey"] = state?.storageAccountAccessKey;
            resourceInputs["storageAccountName"] = state?.storageAccountName;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as FunctionAppSlotArgs | undefined;
            if (args?.appServicePlanId === undefined && !opts.urn) {
                throw new Error("Missing required property 'appServicePlanId'");
            }
            if (args?.functionAppName === undefined && !opts.urn) {
                throw new Error("Missing required property 'functionAppName'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.storageAccountAccessKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'storageAccountAccessKey'");
            }
            if (args?.storageAccountName === undefined && !opts.urn) {
                throw new Error("Missing required property 'storageAccountName'");
            }
            resourceInputs["appServicePlanId"] = args?.appServicePlanId;
            resourceInputs["appSettings"] = args?.appSettings;
            resourceInputs["authSettings"] = args?.authSettings;
            resourceInputs["connectionStrings"] = args?.connectionStrings;
            resourceInputs["dailyMemoryTimeQuota"] = args?.dailyMemoryTimeQuota;
            resourceInputs["enableBuiltinLogging"] = args?.enableBuiltinLogging;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["functionAppName"] = args?.functionAppName;
            resourceInputs["httpsOnly"] = args?.httpsOnly;
            resourceInputs["identity"] = args?.identity;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["osType"] = args?.osType;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["siteConfig"] = args?.siteConfig;
            resourceInputs["storageAccountAccessKey"] = args?.storageAccountAccessKey ? pulumi.secret(args.storageAccountAccessKey) : undefined;
            resourceInputs["storageAccountName"] = args?.storageAccountName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["version"] = args?.version;
            resourceInputs["defaultHostname"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["outboundIpAddresses"] = undefined /*out*/;
            resourceInputs["possibleOutboundIpAddresses"] = undefined /*out*/;
            resourceInputs["siteCredentials"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["storageAccountAccessKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(FunctionAppSlot.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FunctionAppSlot resources.
 */
export interface FunctionAppSlotState {
    /**
     * The ID of the App Service Plan within which to create this Function App Slot. Changing this forces a new resource to be created.
     */
    appServicePlanId?: pulumi.Input<string>;
    /**
     * A key-value pair of App Settings.
     *
     * > **Note:** When integrating a `CI/CD pipeline` and expecting to run from a deployed package in `Azure` you must seed your `app settings` as part of the application code for function app to be successfully deployed. `Important Default key pairs`: (`"WEBSITE_RUN_FROM_PACKAGE" = ""`, `"FUNCTIONS_WORKER_RUNTIME" = "node"` (or python, etc), `"WEBSITE_NODE_DEFAULT_VERSION" = "10.14.1"`, `"APPINSIGHTS_INSTRUMENTATIONKEY" = ""`).
     *
     * > **NOTE:** The values for `AzureWebJobsStorage` and `FUNCTIONS_EXTENSION_VERSION` will be filled by other input arguments and shouldn't be configured separately. `AzureWebJobsStorage` is filled based on `storageAccountName` and `storageAccountAccessKey`. `FUNCTIONS_EXTENSION_VERSION` is filled based on `version`.
     *
     * > **Note:**  When using an App Service Plan in the `Free` or `Shared` Tiers `use32BitWorkerProcess` must be set to `true`.
     */
    appSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * An `authSettings` block as defined below.
     */
    authSettings?: pulumi.Input<inputs.appservice.FunctionAppSlotAuthSettings>;
    /**
     * A `connectionString` block as defined below.
     */
    connectionStrings?: pulumi.Input<pulumi.Input<inputs.appservice.FunctionAppSlotConnectionString>[]>;
    /**
     * The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only affects function apps under the consumption plan.
     */
    dailyMemoryTimeQuota?: pulumi.Input<number>;
    /**
     * The default hostname associated with the Function App - such as `mysite.azurewebsites.net`
     */
    defaultHostname?: pulumi.Input<string>;
    /**
     * Should the built-in logging of the Function App be enabled? Defaults to `true`.
     */
    enableBuiltinLogging?: pulumi.Input<boolean>;
    /**
     * Is the Function App enabled? Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The name of the Function App within which to create the Function App Slot. Changing this forces a new resource to be created.
     */
    functionAppName?: pulumi.Input<string>;
    /**
     * Can the Function App only be accessed via HTTPS? Defaults to `false`.
     */
    httpsOnly?: pulumi.Input<boolean>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.appservice.FunctionAppSlotIdentity>;
    /**
     * The Function App kind - such as `functionapp,linux,container`
     */
    kind?: pulumi.Input<string>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of the Function App. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A string indicating the Operating System type for this function app. The only possible value is `linux`. Changing this forces a new resource to be created.
     *
     * > **NOTE:** This value will be `linux` for Linux Derivatives or an empty string for Windows (default).
     */
    osType?: pulumi.Input<string>;
    /**
     * A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`
     */
    outboundIpAddresses?: pulumi.Input<string>;
    /**
     * A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
     */
    possibleOutboundIpAddresses?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the Function App Slot. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A `siteConfig` object as defined below.
     */
    siteConfig?: pulumi.Input<inputs.appservice.FunctionAppSlotSiteConfig>;
    /**
     * A `siteCredential` block as defined below, which contains the site-level credentials used to publish to this Function App Slot.
     */
    siteCredentials?: pulumi.Input<pulumi.Input<inputs.appservice.FunctionAppSlotSiteCredential>[]>;
    /**
     * The access key which will be used to access the backend storage account for the Function App.
     */
    storageAccountAccessKey?: pulumi.Input<string>;
    /**
     * The backend storage account name which will be used by the Function App (such as the dashboard, logs). Changing this forces a new resource to be created.
     */
    storageAccountName?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The runtime version associated with the Function App. Defaults to `~1`.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FunctionAppSlot resource.
 */
export interface FunctionAppSlotArgs {
    /**
     * The ID of the App Service Plan within which to create this Function App Slot. Changing this forces a new resource to be created.
     */
    appServicePlanId: pulumi.Input<string>;
    /**
     * A key-value pair of App Settings.
     *
     * > **Note:** When integrating a `CI/CD pipeline` and expecting to run from a deployed package in `Azure` you must seed your `app settings` as part of the application code for function app to be successfully deployed. `Important Default key pairs`: (`"WEBSITE_RUN_FROM_PACKAGE" = ""`, `"FUNCTIONS_WORKER_RUNTIME" = "node"` (or python, etc), `"WEBSITE_NODE_DEFAULT_VERSION" = "10.14.1"`, `"APPINSIGHTS_INSTRUMENTATIONKEY" = ""`).
     *
     * > **NOTE:** The values for `AzureWebJobsStorage` and `FUNCTIONS_EXTENSION_VERSION` will be filled by other input arguments and shouldn't be configured separately. `AzureWebJobsStorage` is filled based on `storageAccountName` and `storageAccountAccessKey`. `FUNCTIONS_EXTENSION_VERSION` is filled based on `version`.
     *
     * > **Note:**  When using an App Service Plan in the `Free` or `Shared` Tiers `use32BitWorkerProcess` must be set to `true`.
     */
    appSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * An `authSettings` block as defined below.
     */
    authSettings?: pulumi.Input<inputs.appservice.FunctionAppSlotAuthSettings>;
    /**
     * A `connectionString` block as defined below.
     */
    connectionStrings?: pulumi.Input<pulumi.Input<inputs.appservice.FunctionAppSlotConnectionString>[]>;
    /**
     * The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only affects function apps under the consumption plan.
     */
    dailyMemoryTimeQuota?: pulumi.Input<number>;
    /**
     * Should the built-in logging of the Function App be enabled? Defaults to `true`.
     */
    enableBuiltinLogging?: pulumi.Input<boolean>;
    /**
     * Is the Function App enabled? Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The name of the Function App within which to create the Function App Slot. Changing this forces a new resource to be created.
     */
    functionAppName: pulumi.Input<string>;
    /**
     * Can the Function App only be accessed via HTTPS? Defaults to `false`.
     */
    httpsOnly?: pulumi.Input<boolean>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.appservice.FunctionAppSlotIdentity>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of the Function App. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A string indicating the Operating System type for this function app. The only possible value is `linux`. Changing this forces a new resource to be created.
     *
     * > **NOTE:** This value will be `linux` for Linux Derivatives or an empty string for Windows (default).
     */
    osType?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the Function App Slot. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A `siteConfig` object as defined below.
     */
    siteConfig?: pulumi.Input<inputs.appservice.FunctionAppSlotSiteConfig>;
    /**
     * The access key which will be used to access the backend storage account for the Function App.
     */
    storageAccountAccessKey: pulumi.Input<string>;
    /**
     * The backend storage account name which will be used by the Function App (such as the dashboard, logs). Changing this forces a new resource to be created.
     */
    storageAccountName: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The runtime version associated with the Function App. Defaults to `~1`.
     */
    version?: pulumi.Input<string>;
}
