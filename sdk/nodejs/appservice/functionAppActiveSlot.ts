// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Function App Active Slot.
 *
 * ## Example Usage
 * ### Windows Function App
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleServicePlan = new azure.appservice.ServicePlan("exampleServicePlan", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     osType: "Windows",
 *     skuName: "Y1",
 * });
 * const exampleWindowsFunctionApp = new azure.appservice.WindowsFunctionApp("exampleWindowsFunctionApp", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     storageAccountName: exampleAccount.name,
 *     servicePlanId: exampleServicePlan.id,
 *     siteConfig: {},
 * });
 * const exampleWindowsFunctionAppSlot = new azure.appservice.WindowsFunctionAppSlot("exampleWindowsFunctionAppSlot", {
 *     functionAppId: exampleWindowsFunctionApp.id,
 *     storageAccountName: exampleAccount.name,
 *     siteConfig: {},
 * });
 * const exampleFunctionAppActiveSlot = new azure.appservice.FunctionAppActiveSlot("exampleFunctionAppActiveSlot", {slotId: exampleWindowsFunctionAppSlot.id});
 * ```
 * ### Linux Function App
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleServicePlan = new azure.appservice.ServicePlan("exampleServicePlan", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     osType: "Linux",
 *     skuName: "Y1",
 * });
 * const exampleLinuxFunctionApp = new azure.appservice.LinuxFunctionApp("exampleLinuxFunctionApp", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     servicePlanId: exampleServicePlan.id,
 *     storageAccountName: exampleAccount.name,
 *     siteConfig: {},
 * });
 * const exampleLinuxFunctionAppSlot = new azure.appservice.LinuxFunctionAppSlot("exampleLinuxFunctionAppSlot", {
 *     functionAppId: exampleLinuxFunctionApp.name,
 *     storageAccountName: exampleAccount.name,
 *     siteConfig: {},
 * });
 * const exampleFunctionAppActiveSlot = new azure.appservice.FunctionAppActiveSlot("exampleFunctionAppActiveSlot", {slotId: exampleLinuxFunctionAppSlot.id});
 * ```
 *
 * ## Import
 *
 * a Function App Active Slot can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:appservice/functionAppActiveSlot:FunctionAppActiveSlot example "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1"
 * ```
 */
export class FunctionAppActiveSlot extends pulumi.CustomResource {
    /**
     * Get an existing FunctionAppActiveSlot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FunctionAppActiveSlotState, opts?: pulumi.CustomResourceOptions): FunctionAppActiveSlot {
        return new FunctionAppActiveSlot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:appservice/functionAppActiveSlot:FunctionAppActiveSlot';

    /**
     * Returns true if the given object is an instance of FunctionAppActiveSlot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FunctionAppActiveSlot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FunctionAppActiveSlot.__pulumiType;
    }

    /**
     * The timestamp of the last successful swap with `Production`
     */
    public /*out*/ readonly lastSuccessfulSwap!: pulumi.Output<string>;
    /**
     * The swap action should overwrite the Production slot's network configuration with the configuration from this slot. Defaults to `true`. Changing this forces a new resource to be created.
     */
    public readonly overwriteNetworkConfig!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the Slot to swap with `Production`.
     */
    public readonly slotId!: pulumi.Output<string>;

    /**
     * Create a FunctionAppActiveSlot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FunctionAppActiveSlotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FunctionAppActiveSlotArgs | FunctionAppActiveSlotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FunctionAppActiveSlotState | undefined;
            resourceInputs["lastSuccessfulSwap"] = state ? state.lastSuccessfulSwap : undefined;
            resourceInputs["overwriteNetworkConfig"] = state ? state.overwriteNetworkConfig : undefined;
            resourceInputs["slotId"] = state ? state.slotId : undefined;
        } else {
            const args = argsOrState as FunctionAppActiveSlotArgs | undefined;
            if ((!args || args.slotId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slotId'");
            }
            resourceInputs["overwriteNetworkConfig"] = args ? args.overwriteNetworkConfig : undefined;
            resourceInputs["slotId"] = args ? args.slotId : undefined;
            resourceInputs["lastSuccessfulSwap"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FunctionAppActiveSlot.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FunctionAppActiveSlot resources.
 */
export interface FunctionAppActiveSlotState {
    /**
     * The timestamp of the last successful swap with `Production`
     */
    lastSuccessfulSwap?: pulumi.Input<string>;
    /**
     * The swap action should overwrite the Production slot's network configuration with the configuration from this slot. Defaults to `true`. Changing this forces a new resource to be created.
     */
    overwriteNetworkConfig?: pulumi.Input<boolean>;
    /**
     * The ID of the Slot to swap with `Production`.
     */
    slotId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FunctionAppActiveSlot resource.
 */
export interface FunctionAppActiveSlotArgs {
    /**
     * The swap action should overwrite the Production slot's network configuration with the configuration from this slot. Defaults to `true`. Changing this forces a new resource to be created.
     */
    overwriteNetworkConfig?: pulumi.Input<boolean>;
    /**
     * The ID of the Slot to swap with `Production`.
     */
    slotId: pulumi.Input<string>;
}
