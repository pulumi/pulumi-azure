// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an App Service: Service Plan.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleServicePlan = new azure.appservice.ServicePlan("exampleServicePlan", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     osType: "Linux",
 *     skuName: "P1v2",
 * });
 * ```
 *
 * ## Import
 *
 * AppServices can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:appservice/servicePlan:ServicePlan example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/serverFarms/farm1
 * ```
 */
export class ServicePlan extends pulumi.CustomResource {
    /**
     * Get an existing ServicePlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServicePlanState, opts?: pulumi.CustomResourceOptions): ServicePlan {
        return new ServicePlan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:appservice/servicePlan:ServicePlan';

    /**
     * Returns true if the given object is an instance of ServicePlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServicePlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServicePlan.__pulumiType;
    }

    /**
     * The ID of the App Service Environment to create this Service Plan in.
     *
     * > **NOTE:** Requires an Isolated SKU. Use one of `I1`, `I2`, `I3` for `azure.appservice.Environment`, or `I1v2`, `I2v2`, `I3v2` for `azure.appservice.EnvironmentV3`
     */
    public readonly appServiceEnvironmentId!: pulumi.Output<string | undefined>;
    /**
     * A string representing the Kind of Service Plan.
     */
    public /*out*/ readonly kind!: pulumi.Output<string>;
    /**
     * The Azure Region where the Service Plan should exist. Changing this forces a new AppService to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The maximum number of workers to use in an Elastic SKU Plan. Cannot be set unless using an Elastic SKU.
     */
    public readonly maximumElasticWorkerCount!: pulumi.Output<number>;
    /**
     * The name which should be used for this Service Plan. Changing this forces a new AppService to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The O/S type for the App Services to be hosted in this plan. Possible values include `Windows`, `Linux`, and `WindowsContainer`. Changing this forces a new resource to be created.
     */
    public readonly osType!: pulumi.Output<string>;
    /**
     * Should Per Site Scaling be enabled. Defaults to `false`.
     */
    public readonly perSiteScalingEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Whether this is a reserved Service Plan Type. `true` if `osType` is `Linux`, otherwise `false`.
     */
    public /*out*/ readonly reserved!: pulumi.Output<boolean>;
    /**
     * The name of the Resource Group where the AppService should exist. Changing this forces a new AppService to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * The SKU for the plan. Possible values include `B1`, `B2`, `B3`, `D1`, `F1`, `I1`, `I2`, `I3`, `I1v2`, `I2v2`, `I3v2`, `I4v2`, `I5v2`, `I6v2`, `P1v2`, `P2v2`, `P3v2`, `P0v3`, `P1v3`, `P2v3`, `P3v3`, `P1mv3`, `P2mv3`, `P3mv3`, `P4mv3`, `P5mv3`, `S1`, `S2`, `S3`, `SHARED`, `EP1`, `EP2`, `EP3`, `WS1`, `WS2`, `WS3`, and `Y1`.
     *
     * > **NOTE:** Isolated SKUs (`I1`, `I2`, `I3`, `I1v2`, `I2v2`, and `I3v2`) can only be used with App Service Environments
     *
     * > **NOTE:** Elastic and Consumption SKUs (`Y1`, `EP1`, `EP2`, and `EP3`) are for use with Function Apps.
     */
    public readonly skuName!: pulumi.Output<string>;
    /**
     * A mapping of tags which should be assigned to the AppService.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The number of Workers (instances) to be allocated.
     */
    public readonly workerCount!: pulumi.Output<number>;
    /**
     * Should the Service Plan balance across Availability Zones in the region. Changing this forces a new resource to be created.
     *
     * > **NOTE:** If this setting is set to `true` and the `workerCount` value is specified, it should be set to a multiple of the number of availability zones in the region. Please see the Azure documentation for the number of Availability Zones in your region.
     */
    public readonly zoneBalancingEnabled!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ServicePlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServicePlanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServicePlanArgs | ServicePlanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServicePlanState | undefined;
            resourceInputs["appServiceEnvironmentId"] = state ? state.appServiceEnvironmentId : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["maximumElasticWorkerCount"] = state ? state.maximumElasticWorkerCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["osType"] = state ? state.osType : undefined;
            resourceInputs["perSiteScalingEnabled"] = state ? state.perSiteScalingEnabled : undefined;
            resourceInputs["reserved"] = state ? state.reserved : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["skuName"] = state ? state.skuName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["workerCount"] = state ? state.workerCount : undefined;
            resourceInputs["zoneBalancingEnabled"] = state ? state.zoneBalancingEnabled : undefined;
        } else {
            const args = argsOrState as ServicePlanArgs | undefined;
            if ((!args || args.osType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osType'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.skuName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'skuName'");
            }
            resourceInputs["appServiceEnvironmentId"] = args ? args.appServiceEnvironmentId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["maximumElasticWorkerCount"] = args ? args.maximumElasticWorkerCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["osType"] = args ? args.osType : undefined;
            resourceInputs["perSiteScalingEnabled"] = args ? args.perSiteScalingEnabled : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["skuName"] = args ? args.skuName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["workerCount"] = args ? args.workerCount : undefined;
            resourceInputs["zoneBalancingEnabled"] = args ? args.zoneBalancingEnabled : undefined;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["reserved"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServicePlan.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServicePlan resources.
 */
export interface ServicePlanState {
    /**
     * The ID of the App Service Environment to create this Service Plan in.
     *
     * > **NOTE:** Requires an Isolated SKU. Use one of `I1`, `I2`, `I3` for `azure.appservice.Environment`, or `I1v2`, `I2v2`, `I3v2` for `azure.appservice.EnvironmentV3`
     */
    appServiceEnvironmentId?: pulumi.Input<string>;
    /**
     * A string representing the Kind of Service Plan.
     */
    kind?: pulumi.Input<string>;
    /**
     * The Azure Region where the Service Plan should exist. Changing this forces a new AppService to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The maximum number of workers to use in an Elastic SKU Plan. Cannot be set unless using an Elastic SKU.
     */
    maximumElasticWorkerCount?: pulumi.Input<number>;
    /**
     * The name which should be used for this Service Plan. Changing this forces a new AppService to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The O/S type for the App Services to be hosted in this plan. Possible values include `Windows`, `Linux`, and `WindowsContainer`. Changing this forces a new resource to be created.
     */
    osType?: pulumi.Input<string>;
    /**
     * Should Per Site Scaling be enabled. Defaults to `false`.
     */
    perSiteScalingEnabled?: pulumi.Input<boolean>;
    /**
     * Whether this is a reserved Service Plan Type. `true` if `osType` is `Linux`, otherwise `false`.
     */
    reserved?: pulumi.Input<boolean>;
    /**
     * The name of the Resource Group where the AppService should exist. Changing this forces a new AppService to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The SKU for the plan. Possible values include `B1`, `B2`, `B3`, `D1`, `F1`, `I1`, `I2`, `I3`, `I1v2`, `I2v2`, `I3v2`, `I4v2`, `I5v2`, `I6v2`, `P1v2`, `P2v2`, `P3v2`, `P0v3`, `P1v3`, `P2v3`, `P3v3`, `P1mv3`, `P2mv3`, `P3mv3`, `P4mv3`, `P5mv3`, `S1`, `S2`, `S3`, `SHARED`, `EP1`, `EP2`, `EP3`, `WS1`, `WS2`, `WS3`, and `Y1`.
     *
     * > **NOTE:** Isolated SKUs (`I1`, `I2`, `I3`, `I1v2`, `I2v2`, and `I3v2`) can only be used with App Service Environments
     *
     * > **NOTE:** Elastic and Consumption SKUs (`Y1`, `EP1`, `EP2`, and `EP3`) are for use with Function Apps.
     */
    skuName?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the AppService.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The number of Workers (instances) to be allocated.
     */
    workerCount?: pulumi.Input<number>;
    /**
     * Should the Service Plan balance across Availability Zones in the region. Changing this forces a new resource to be created.
     *
     * > **NOTE:** If this setting is set to `true` and the `workerCount` value is specified, it should be set to a multiple of the number of availability zones in the region. Please see the Azure documentation for the number of Availability Zones in your region.
     */
    zoneBalancingEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ServicePlan resource.
 */
export interface ServicePlanArgs {
    /**
     * The ID of the App Service Environment to create this Service Plan in.
     *
     * > **NOTE:** Requires an Isolated SKU. Use one of `I1`, `I2`, `I3` for `azure.appservice.Environment`, or `I1v2`, `I2v2`, `I3v2` for `azure.appservice.EnvironmentV3`
     */
    appServiceEnvironmentId?: pulumi.Input<string>;
    /**
     * The Azure Region where the Service Plan should exist. Changing this forces a new AppService to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The maximum number of workers to use in an Elastic SKU Plan. Cannot be set unless using an Elastic SKU.
     */
    maximumElasticWorkerCount?: pulumi.Input<number>;
    /**
     * The name which should be used for this Service Plan. Changing this forces a new AppService to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The O/S type for the App Services to be hosted in this plan. Possible values include `Windows`, `Linux`, and `WindowsContainer`. Changing this forces a new resource to be created.
     */
    osType: pulumi.Input<string>;
    /**
     * Should Per Site Scaling be enabled. Defaults to `false`.
     */
    perSiteScalingEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the Resource Group where the AppService should exist. Changing this forces a new AppService to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The SKU for the plan. Possible values include `B1`, `B2`, `B3`, `D1`, `F1`, `I1`, `I2`, `I3`, `I1v2`, `I2v2`, `I3v2`, `I4v2`, `I5v2`, `I6v2`, `P1v2`, `P2v2`, `P3v2`, `P0v3`, `P1v3`, `P2v3`, `P3v3`, `P1mv3`, `P2mv3`, `P3mv3`, `P4mv3`, `P5mv3`, `S1`, `S2`, `S3`, `SHARED`, `EP1`, `EP2`, `EP3`, `WS1`, `WS2`, `WS3`, and `Y1`.
     *
     * > **NOTE:** Isolated SKUs (`I1`, `I2`, `I3`, `I1v2`, `I2v2`, and `I3v2`) can only be used with App Service Environments
     *
     * > **NOTE:** Elastic and Consumption SKUs (`Y1`, `EP1`, `EP2`, and `EP3`) are for use with Function Apps.
     */
    skuName: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the AppService.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The number of Workers (instances) to be allocated.
     */
    workerCount?: pulumi.Input<number>;
    /**
     * Should the Service Plan balance across Availability Zones in the region. Changing this forces a new resource to be created.
     *
     * > **NOTE:** If this setting is set to `true` and the `workerCount` value is specified, it should be set to a multiple of the number of availability zones in the region. Please see the Azure documentation for the number of Availability Zones in your region.
     */
    zoneBalancingEnabled?: pulumi.Input<boolean>;
}
