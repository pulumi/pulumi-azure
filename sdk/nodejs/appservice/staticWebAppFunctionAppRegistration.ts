// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an App Service Static Web App Function App Registration.
 *
 * > **Note:** This resource registers the specified Function App to the `Production` build of the Static Web App.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleStaticWebApp = new azure.appservice.StaticWebApp("example", {
 *     name: "example",
 *     resourceGroupName: example.name,
 *     location: example.location,
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "examplesstorageacc",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleServicePlan = new azure.appservice.ServicePlan("example", {
 *     name: "example-service-plan",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     osType: "Linux",
 *     skuName: "S1",
 * });
 * const exampleLinuxFunctionApp = new azure.appservice.LinuxFunctionApp("example", {
 *     name: "example-function-app",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     servicePlanId: exampleServicePlan.id,
 *     storageAccountName: exampleAccount.name,
 *     storageAccountAccessKey: exampleAccount.primaryAccessKey,
 *     siteConfig: {},
 * });
 * const exampleStaticWebAppFunctionAppRegistration = new azure.appservice.StaticWebAppFunctionAppRegistration("example", {
 *     staticWebAppId: exampleStaticWebApp.id,
 *     functionAppId: exampleLinuxFunctionApp.id,
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Web`: 2023-12-01, 2023-01-01
 *
 * ## Import
 *
 * Static Web App Function App Registration can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:appservice/staticWebAppFunctionAppRegistration:StaticWebAppFunctionAppRegistration example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.Web/staticSites/my-static-site1/userProvidedFunctionApps/myFunctionApp
 * ```
 */
export class StaticWebAppFunctionAppRegistration extends pulumi.CustomResource {
    /**
     * Get an existing StaticWebAppFunctionAppRegistration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StaticWebAppFunctionAppRegistrationState, opts?: pulumi.CustomResourceOptions): StaticWebAppFunctionAppRegistration {
        return new StaticWebAppFunctionAppRegistration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:appservice/staticWebAppFunctionAppRegistration:StaticWebAppFunctionAppRegistration';

    /**
     * Returns true if the given object is an instance of StaticWebAppFunctionAppRegistration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StaticWebAppFunctionAppRegistration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StaticWebAppFunctionAppRegistration.__pulumiType;
    }

    /**
     * The ID of a Linux or Windows Function App to connect to the Static Web App as a Backend. Changing this forces a new resource to be created. 
     *
     * > **Note:** Only one Function App can be connected to a Static Web App. Multiple Function Apps are not currently supported.
     *
     * > **Note:** Connecting a Function App resource to a Static Web App resource updates the Function App to use AuthV2 and configures the `azureStaticWebAppV2` which may need to be accounted for by the use of `ignoreChanges` depending on the existing `authSettingsV2` configuration of the target Function App.
     */
    public readonly functionAppId!: pulumi.Output<string>;
    /**
     * The ID of the Static Web App to register the Function App to as a backend. Changing this forces a new resource to be created.
     */
    public readonly staticWebAppId!: pulumi.Output<string>;

    /**
     * Create a StaticWebAppFunctionAppRegistration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StaticWebAppFunctionAppRegistrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StaticWebAppFunctionAppRegistrationArgs | StaticWebAppFunctionAppRegistrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StaticWebAppFunctionAppRegistrationState | undefined;
            resourceInputs["functionAppId"] = state ? state.functionAppId : undefined;
            resourceInputs["staticWebAppId"] = state ? state.staticWebAppId : undefined;
        } else {
            const args = argsOrState as StaticWebAppFunctionAppRegistrationArgs | undefined;
            if ((!args || args.functionAppId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionAppId'");
            }
            if ((!args || args.staticWebAppId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'staticWebAppId'");
            }
            resourceInputs["functionAppId"] = args ? args.functionAppId : undefined;
            resourceInputs["staticWebAppId"] = args ? args.staticWebAppId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StaticWebAppFunctionAppRegistration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StaticWebAppFunctionAppRegistration resources.
 */
export interface StaticWebAppFunctionAppRegistrationState {
    /**
     * The ID of a Linux or Windows Function App to connect to the Static Web App as a Backend. Changing this forces a new resource to be created. 
     *
     * > **Note:** Only one Function App can be connected to a Static Web App. Multiple Function Apps are not currently supported.
     *
     * > **Note:** Connecting a Function App resource to a Static Web App resource updates the Function App to use AuthV2 and configures the `azureStaticWebAppV2` which may need to be accounted for by the use of `ignoreChanges` depending on the existing `authSettingsV2` configuration of the target Function App.
     */
    functionAppId?: pulumi.Input<string>;
    /**
     * The ID of the Static Web App to register the Function App to as a backend. Changing this forces a new resource to be created.
     */
    staticWebAppId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StaticWebAppFunctionAppRegistration resource.
 */
export interface StaticWebAppFunctionAppRegistrationArgs {
    /**
     * The ID of a Linux or Windows Function App to connect to the Static Web App as a Backend. Changing this forces a new resource to be created. 
     *
     * > **Note:** Only one Function App can be connected to a Static Web App. Multiple Function Apps are not currently supported.
     *
     * > **Note:** Connecting a Function App resource to a Static Web App resource updates the Function App to use AuthV2 and configures the `azureStaticWebAppV2` which may need to be accounted for by the use of `ignoreChanges` depending on the existing `authSettingsV2` configuration of the target Function App.
     */
    functionAppId: pulumi.Input<string>;
    /**
     * The ID of the Static Web App to register the Function App to as a backend. Changing this forces a new resource to be created.
     */
    staticWebAppId: pulumi.Input<string>;
}
