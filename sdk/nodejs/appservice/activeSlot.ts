// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Promotes an App Service Slot to Production within an App Service.
 * 
 * > **Note:** When using Slots - the `app_settings`, `connection_string` and `site_config` blocks on the `azurerm_app_service` resource will be overwritten when promoting a Slot using the `azurerm_app_service_active_slot` resource.
 * 
 * ## Example Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as random from "@pulumi/random";
 * 
 * const testAppService = new azure.appservice.AppService("test", {});
 * const testPlan = new azure.appservice.Plan("test", {});
 * const testSlot = new azure.appservice.Slot("test", {});
 * const testResourceGroup = new azure.core.ResourceGroup("test", {});
 * const server = new random.RandomId("server", {});
 * const testActiveSlot = new azure.appservice.ActiveSlot("test", {
 *     appServiceName: testAppService.name,
 *     appServiceSlotName: testSlot.name,
 *     resourceGroupName: testResourceGroup.name,
 * });
 * ```
 */
export class ActiveSlot extends pulumi.CustomResource {
    /**
     * Get an existing ActiveSlot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ActiveSlotState, opts?: pulumi.CustomResourceOptions): ActiveSlot {
        return new ActiveSlot(name, <any>state, { ...opts, id: id });
    }

    /**
     * The name of the App Service within which the Slot exists.  Changing this forces a new resource to be created.
     */
    public readonly appServiceName: pulumi.Output<string>;
    /**
     * The name of the App Service Slot which should be promoted to the Production Slot within the App Service.
     */
    public readonly appServiceSlotName: pulumi.Output<string>;
    /**
     * The name of the resource group in which the App Service exists. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName: pulumi.Output<string>;

    /**
     * Create a ActiveSlot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ActiveSlotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ActiveSlotArgs | ActiveSlotState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: ActiveSlotState = argsOrState as ActiveSlotState | undefined;
            inputs["appServiceName"] = state ? state.appServiceName : undefined;
            inputs["appServiceSlotName"] = state ? state.appServiceSlotName : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
        } else {
            const args = argsOrState as ActiveSlotArgs | undefined;
            if (!args || args.appServiceName === undefined) {
                throw new Error("Missing required property 'appServiceName'");
            }
            if (!args || args.appServiceSlotName === undefined) {
                throw new Error("Missing required property 'appServiceSlotName'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["appServiceName"] = args ? args.appServiceName : undefined;
            inputs["appServiceSlotName"] = args ? args.appServiceSlotName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
        }
        super("azure:appservice/activeSlot:ActiveSlot", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ActiveSlot resources.
 */
export interface ActiveSlotState {
    /**
     * The name of the App Service within which the Slot exists.  Changing this forces a new resource to be created.
     */
    readonly appServiceName?: pulumi.Input<string>;
    /**
     * The name of the App Service Slot which should be promoted to the Production Slot within the App Service.
     */
    readonly appServiceSlotName?: pulumi.Input<string>;
    /**
     * The name of the resource group in which the App Service exists. Changing this forces a new resource to be created.
     */
    readonly resourceGroupName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ActiveSlot resource.
 */
export interface ActiveSlotArgs {
    /**
     * The name of the App Service within which the Slot exists.  Changing this forces a new resource to be created.
     */
    readonly appServiceName: pulumi.Input<string>;
    /**
     * The name of the App Service Slot which should be promoted to the Production Slot within the App Service.
     */
    readonly appServiceSlotName: pulumi.Input<string>;
    /**
     * The name of the resource group in which the App Service exists. Changing this forces a new resource to be created.
     */
    readonly resourceGroupName: pulumi.Input<string>;
}
