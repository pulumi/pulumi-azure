// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Management Group.
 *
 * !> **Note:** Configuring `subscriptionIds` is not supported when using the `azure.management.GroupSubscriptionAssociation` resource, results will be unpredictable.
 *
 * ## Import
 *
 * Management Groups can be imported using the `management group resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:management/group:Group example /providers/Microsoft.Management/managementGroups/group1
 * ```
 */
export class Group extends pulumi.CustomResource {
    /**
     * Get an existing Group resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupState, opts?: pulumi.CustomResourceOptions): Group {
        return new Group(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:management/group:Group';

    /**
     * Returns true if the given object is an instance of Group.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Group {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Group.__pulumiType;
    }

    /**
     * A friendly name for this Management Group. If not specified, this will be the same as the `name`.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The name or UUID for this Management Group, which needs to be unique across your tenant. A new UUID will be generated if not provided. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the Parent Management Group.
     */
    public readonly parentManagementGroupId!: pulumi.Output<string>;
    /**
     * A list of Subscription GUIDs which should be assigned to the Management Group.
     *
     * > **Note:** To clear all Subscriptions from the Management Group set `subscriptionIds` to an empty list
     */
    public readonly subscriptionIds!: pulumi.Output<string[]>;

    /**
     * Create a Group resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupArgs | GroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupState | undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentManagementGroupId"] = state ? state.parentManagementGroupId : undefined;
            resourceInputs["subscriptionIds"] = state ? state.subscriptionIds : undefined;
        } else {
            const args = argsOrState as GroupArgs | undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentManagementGroupId"] = args ? args.parentManagementGroupId : undefined;
            resourceInputs["subscriptionIds"] = args ? args.subscriptionIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure:managementgroups/managementGroup:ManagementGroup" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Group.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Group resources.
 */
export interface GroupState {
    /**
     * A friendly name for this Management Group. If not specified, this will be the same as the `name`.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The name or UUID for this Management Group, which needs to be unique across your tenant. A new UUID will be generated if not provided. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Parent Management Group.
     */
    parentManagementGroupId?: pulumi.Input<string>;
    /**
     * A list of Subscription GUIDs which should be assigned to the Management Group.
     *
     * > **Note:** To clear all Subscriptions from the Management Group set `subscriptionIds` to an empty list
     */
    subscriptionIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Group resource.
 */
export interface GroupArgs {
    /**
     * A friendly name for this Management Group. If not specified, this will be the same as the `name`.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The name or UUID for this Management Group, which needs to be unique across your tenant. A new UUID will be generated if not provided. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Parent Management Group.
     */
    parentManagementGroupId?: pulumi.Input<string>;
    /**
     * A list of Subscription GUIDs which should be assigned to the Management Group.
     *
     * > **Note:** To clear all Subscriptions from the Management Group set `subscriptionIds` to an empty list
     */
    subscriptionIds?: pulumi.Input<pulumi.Input<string>[]>;
}
