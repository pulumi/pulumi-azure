// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetGroupTemplateDeploymentArgs, GetGroupTemplateDeploymentResult, GetGroupTemplateDeploymentOutputArgs } from "./getGroupTemplateDeployment";
export const getGroupTemplateDeployment: typeof import("./getGroupTemplateDeployment").getGroupTemplateDeployment = null as any;
export const getGroupTemplateDeploymentOutput: typeof import("./getGroupTemplateDeployment").getGroupTemplateDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getGroupTemplateDeployment","getGroupTemplateDeploymentOutput"], () => require("./getGroupTemplateDeployment"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupPolicyAssignmentArgs, GroupPolicyAssignmentState } from "./groupPolicyAssignment";
export type GroupPolicyAssignment = import("./groupPolicyAssignment").GroupPolicyAssignment;
export const GroupPolicyAssignment: typeof import("./groupPolicyAssignment").GroupPolicyAssignment = null as any;
utilities.lazyLoad(exports, ["GroupPolicyAssignment"], () => require("./groupPolicyAssignment"));

export { GroupPolicyExemptionArgs, GroupPolicyExemptionState } from "./groupPolicyExemption";
export type GroupPolicyExemption = import("./groupPolicyExemption").GroupPolicyExemption;
export const GroupPolicyExemption: typeof import("./groupPolicyExemption").GroupPolicyExemption = null as any;
utilities.lazyLoad(exports, ["GroupPolicyExemption"], () => require("./groupPolicyExemption"));

export { GroupPolicyRemediationArgs, GroupPolicyRemediationState } from "./groupPolicyRemediation";
export type GroupPolicyRemediation = import("./groupPolicyRemediation").GroupPolicyRemediation;
export const GroupPolicyRemediation: typeof import("./groupPolicyRemediation").GroupPolicyRemediation = null as any;
utilities.lazyLoad(exports, ["GroupPolicyRemediation"], () => require("./groupPolicyRemediation"));

export { GroupSubscriptionAssociationArgs, GroupSubscriptionAssociationState } from "./groupSubscriptionAssociation";
export type GroupSubscriptionAssociation = import("./groupSubscriptionAssociation").GroupSubscriptionAssociation;
export const GroupSubscriptionAssociation: typeof import("./groupSubscriptionAssociation").GroupSubscriptionAssociation = null as any;
utilities.lazyLoad(exports, ["GroupSubscriptionAssociation"], () => require("./groupSubscriptionAssociation"));

export { GroupTemplateDeploymentArgs, GroupTemplateDeploymentState } from "./groupTemplateDeployment";
export type GroupTemplateDeployment = import("./groupTemplateDeployment").GroupTemplateDeployment;
export const GroupTemplateDeployment: typeof import("./groupTemplateDeployment").GroupTemplateDeployment = null as any;
utilities.lazyLoad(exports, ["GroupTemplateDeployment"], () => require("./groupTemplateDeployment"));

export { LockArgs, LockState } from "./lock";
export type Lock = import("./lock").Lock;
export const Lock: typeof import("./lock").Lock = null as any;
utilities.lazyLoad(exports, ["Lock"], () => require("./lock"));

export { PrivateLinkArgs, PrivateLinkState } from "./privateLink";
export type PrivateLink = import("./privateLink").PrivateLink;
export const PrivateLink: typeof import("./privateLink").PrivateLink = null as any;
utilities.lazyLoad(exports, ["PrivateLink"], () => require("./privateLink"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:management/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "azure:management/groupPolicyAssignment:GroupPolicyAssignment":
                return new GroupPolicyAssignment(name, <any>undefined, { urn })
            case "azure:management/groupPolicyExemption:GroupPolicyExemption":
                return new GroupPolicyExemption(name, <any>undefined, { urn })
            case "azure:management/groupPolicyRemediation:GroupPolicyRemediation":
                return new GroupPolicyRemediation(name, <any>undefined, { urn })
            case "azure:management/groupSubscriptionAssociation:GroupSubscriptionAssociation":
                return new GroupSubscriptionAssociation(name, <any>undefined, { urn })
            case "azure:management/groupTemplateDeployment:GroupTemplateDeployment":
                return new GroupTemplateDeployment(name, <any>undefined, { urn })
            case "azure:management/lock:Lock":
                return new Lock(name, <any>undefined, { urn })
            case "azure:management/privateLink:PrivateLink":
                return new PrivateLink(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "management/group", _module)
pulumi.runtime.registerResourceModule("azure", "management/groupPolicyAssignment", _module)
pulumi.runtime.registerResourceModule("azure", "management/groupPolicyExemption", _module)
pulumi.runtime.registerResourceModule("azure", "management/groupPolicyRemediation", _module)
pulumi.runtime.registerResourceModule("azure", "management/groupSubscriptionAssociation", _module)
pulumi.runtime.registerResourceModule("azure", "management/groupTemplateDeployment", _module)
pulumi.runtime.registerResourceModule("azure", "management/lock", _module)
pulumi.runtime.registerResourceModule("azure", "management/privateLink", _module)
