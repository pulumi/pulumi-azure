// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { HadoopClusterArgs, HadoopClusterState } from "./hadoopCluster";
export type HadoopCluster = import("./hadoopCluster").HadoopCluster;
export const HadoopCluster: typeof import("./hadoopCluster").HadoopCluster = null as any;
utilities.lazyLoad(exports, ["HadoopCluster"], () => require("./hadoopCluster"));

export { HBaseClusterArgs, HBaseClusterState } from "./hbaseCluster";
export type HBaseCluster = import("./hbaseCluster").HBaseCluster;
export const HBaseCluster: typeof import("./hbaseCluster").HBaseCluster = null as any;
utilities.lazyLoad(exports, ["HBaseCluster"], () => require("./hbaseCluster"));

export { InteractiveQueryClusterArgs, InteractiveQueryClusterState } from "./interactiveQueryCluster";
export type InteractiveQueryCluster = import("./interactiveQueryCluster").InteractiveQueryCluster;
export const InteractiveQueryCluster: typeof import("./interactiveQueryCluster").InteractiveQueryCluster = null as any;
utilities.lazyLoad(exports, ["InteractiveQueryCluster"], () => require("./interactiveQueryCluster"));

export { KafkaClusterArgs, KafkaClusterState } from "./kafkaCluster";
export type KafkaCluster = import("./kafkaCluster").KafkaCluster;
export const KafkaCluster: typeof import("./kafkaCluster").KafkaCluster = null as any;
utilities.lazyLoad(exports, ["KafkaCluster"], () => require("./kafkaCluster"));

export { SparkClusterArgs, SparkClusterState } from "./sparkCluster";
export type SparkCluster = import("./sparkCluster").SparkCluster;
export const SparkCluster: typeof import("./sparkCluster").SparkCluster = null as any;
utilities.lazyLoad(exports, ["SparkCluster"], () => require("./sparkCluster"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:hdinsight/hBaseCluster:HBaseCluster":
                return new HBaseCluster(name, <any>undefined, { urn })
            case "azure:hdinsight/hadoopCluster:HadoopCluster":
                return new HadoopCluster(name, <any>undefined, { urn })
            case "azure:hdinsight/interactiveQueryCluster:InteractiveQueryCluster":
                return new InteractiveQueryCluster(name, <any>undefined, { urn })
            case "azure:hdinsight/kafkaCluster:KafkaCluster":
                return new KafkaCluster(name, <any>undefined, { urn })
            case "azure:hdinsight/sparkCluster:SparkCluster":
                return new SparkCluster(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "hdinsight/hBaseCluster", _module)
pulumi.runtime.registerResourceModule("azure", "hdinsight/hadoopCluster", _module)
pulumi.runtime.registerResourceModule("azure", "hdinsight/interactiveQueryCluster", _module)
pulumi.runtime.registerResourceModule("azure", "hdinsight/kafkaCluster", _module)
pulumi.runtime.registerResourceModule("azure", "hdinsight/sparkCluster", _module)
