// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Log Analytics (formally Operational Insights) Windows Performance Counter DataSource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleAnalyticsWorkspace = new azure.operationalinsights.AnalyticsWorkspace("example", {
 *     name: "example-law",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: "PerGB2018",
 * });
 * const exampleDataSourceWindowsPerformanceCounter = new azure.loganalytics.DataSourceWindowsPerformanceCounter("example", {
 *     name: "example-lad-wpc",
 *     resourceGroupName: example.name,
 *     workspaceName: exampleAnalyticsWorkspace.name,
 *     objectName: "CPU",
 *     instanceName: "*",
 *     counterName: "CPU",
 *     intervalSeconds: 10,
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.OperationalInsights` - 2020-08-01
 *
 * ## Import
 *
 * Log Analytics Windows Performance Counter DataSources can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:loganalytics/dataSourceWindowsPerformanceCounter:DataSourceWindowsPerformanceCounter example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.OperationalInsights/workspaces/workspace1/dataSources/datasource1
 * ```
 */
export class DataSourceWindowsPerformanceCounter extends pulumi.CustomResource {
    /**
     * Get an existing DataSourceWindowsPerformanceCounter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataSourceWindowsPerformanceCounterState, opts?: pulumi.CustomResourceOptions): DataSourceWindowsPerformanceCounter {
        return new DataSourceWindowsPerformanceCounter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:loganalytics/dataSourceWindowsPerformanceCounter:DataSourceWindowsPerformanceCounter';

    /**
     * Returns true if the given object is an instance of DataSourceWindowsPerformanceCounter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataSourceWindowsPerformanceCounter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataSourceWindowsPerformanceCounter.__pulumiType;
    }

    /**
     * The friendly name of the performance counter.
     */
    declare public readonly counterName: pulumi.Output<string>;
    /**
     * The name of the virtual machine instance to which the Windows Performance Counter DataSource be applied. Specify a `*` will apply to all instances.
     */
    declare public readonly instanceName: pulumi.Output<string>;
    /**
     * The time of sample interval in seconds. Supports values between 10 and 2147483647.
     */
    declare public readonly intervalSeconds: pulumi.Output<number>;
    /**
     * The Name which should be used for this Log Analytics Windows Performance Counter DataSource. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The object name of the Log Analytics Windows Performance Counter DataSource.
     */
    declare public readonly objectName: pulumi.Output<string>;
    /**
     * The name of the Resource Group where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * The name of the Log Analytics Workspace where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
     */
    declare public readonly workspaceName: pulumi.Output<string>;

    /**
     * Create a DataSourceWindowsPerformanceCounter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataSourceWindowsPerformanceCounterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataSourceWindowsPerformanceCounterArgs | DataSourceWindowsPerformanceCounterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataSourceWindowsPerformanceCounterState | undefined;
            resourceInputs["counterName"] = state?.counterName;
            resourceInputs["instanceName"] = state?.instanceName;
            resourceInputs["intervalSeconds"] = state?.intervalSeconds;
            resourceInputs["name"] = state?.name;
            resourceInputs["objectName"] = state?.objectName;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["workspaceName"] = state?.workspaceName;
        } else {
            const args = argsOrState as DataSourceWindowsPerformanceCounterArgs | undefined;
            if (args?.counterName === undefined && !opts.urn) {
                throw new Error("Missing required property 'counterName'");
            }
            if (args?.instanceName === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceName'");
            }
            if (args?.intervalSeconds === undefined && !opts.urn) {
                throw new Error("Missing required property 'intervalSeconds'");
            }
            if (args?.objectName === undefined && !opts.urn) {
                throw new Error("Missing required property 'objectName'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.workspaceName === undefined && !opts.urn) {
                throw new Error("Missing required property 'workspaceName'");
            }
            resourceInputs["counterName"] = args?.counterName;
            resourceInputs["instanceName"] = args?.instanceName;
            resourceInputs["intervalSeconds"] = args?.intervalSeconds;
            resourceInputs["name"] = args?.name;
            resourceInputs["objectName"] = args?.objectName;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["workspaceName"] = args?.workspaceName;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataSourceWindowsPerformanceCounter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DataSourceWindowsPerformanceCounter resources.
 */
export interface DataSourceWindowsPerformanceCounterState {
    /**
     * The friendly name of the performance counter.
     */
    counterName?: pulumi.Input<string>;
    /**
     * The name of the virtual machine instance to which the Windows Performance Counter DataSource be applied. Specify a `*` will apply to all instances.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * The time of sample interval in seconds. Supports values between 10 and 2147483647.
     */
    intervalSeconds?: pulumi.Input<number>;
    /**
     * The Name which should be used for this Log Analytics Windows Performance Counter DataSource. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The object name of the Log Analytics Windows Performance Counter DataSource.
     */
    objectName?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The name of the Log Analytics Workspace where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
     */
    workspaceName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DataSourceWindowsPerformanceCounter resource.
 */
export interface DataSourceWindowsPerformanceCounterArgs {
    /**
     * The friendly name of the performance counter.
     */
    counterName: pulumi.Input<string>;
    /**
     * The name of the virtual machine instance to which the Windows Performance Counter DataSource be applied. Specify a `*` will apply to all instances.
     */
    instanceName: pulumi.Input<string>;
    /**
     * The time of sample interval in seconds. Supports values between 10 and 2147483647.
     */
    intervalSeconds: pulumi.Input<number>;
    /**
     * The Name which should be used for this Log Analytics Windows Performance Counter DataSource. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The object name of the Log Analytics Windows Performance Counter DataSource.
     */
    objectName: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The name of the Log Analytics Workspace where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
     */
    workspaceName: pulumi.Input<string>;
}
