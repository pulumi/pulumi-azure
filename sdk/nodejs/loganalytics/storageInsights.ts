// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Log Analytics Storage Insights resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleAnalyticsWorkspace = new azure.operationalinsights.AnalyticsWorkspace("example", {
 *     name: "exampleworkspace",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: "PerGB2018",
 *     retentionInDays: 30,
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "examplestoracc",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleStorageInsights = new azure.loganalytics.StorageInsights("example", {
 *     name: "example-storageinsightconfig",
 *     resourceGroupName: example.name,
 *     workspaceId: exampleAnalyticsWorkspace.id,
 *     storageAccountId: exampleAccount.id,
 *     storageAccountKey: exampleAccount.primaryAccessKey,
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.OperationalInsights` - 2020-08-01
 *
 * ## Import
 *
 * Log Analytics Storage Insight Configs can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:loganalytics/storageInsights:StorageInsights example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.OperationalInsights/workspaces/workspace1/storageInsightConfigs/storageInsight1
 * ```
 */
export class StorageInsights extends pulumi.CustomResource {
    /**
     * Get an existing StorageInsights resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageInsightsState, opts?: pulumi.CustomResourceOptions): StorageInsights {
        return new StorageInsights(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:loganalytics/storageInsights:StorageInsights';

    /**
     * Returns true if the given object is an instance of StorageInsights.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageInsights {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageInsights.__pulumiType;
    }

    /**
     * The names of the blob containers that the workspace should read.
     */
    declare public readonly blobContainerNames: pulumi.Output<string[] | undefined>;
    /**
     * The name which should be used for this Log Analytics Storage Insights. Changing this forces a new Log Analytics Storage Insights to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The name of the Resource Group where the Log Analytics Storage Insights should exist. Changing this forces a new Log Analytics Storage Insights to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * The ID of the Storage Account used by this Log Analytics Storage Insights.
     */
    declare public readonly storageAccountId: pulumi.Output<string>;
    /**
     * The storage access key to be used to connect to the storage account.
     */
    declare public readonly storageAccountKey: pulumi.Output<string>;
    /**
     * The names of the Azure tables that the workspace should read.
     */
    declare public readonly tableNames: pulumi.Output<string[] | undefined>;
    /**
     * The ID of the Log Analytics Workspace within which the Storage Insights should exist. Changing this forces a new Log Analytics Storage Insights to be created.
     */
    declare public readonly workspaceId: pulumi.Output<string>;

    /**
     * Create a StorageInsights resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageInsightsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageInsightsArgs | StorageInsightsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageInsightsState | undefined;
            resourceInputs["blobContainerNames"] = state?.blobContainerNames;
            resourceInputs["name"] = state?.name;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["storageAccountId"] = state?.storageAccountId;
            resourceInputs["storageAccountKey"] = state?.storageAccountKey;
            resourceInputs["tableNames"] = state?.tableNames;
            resourceInputs["workspaceId"] = state?.workspaceId;
        } else {
            const args = argsOrState as StorageInsightsArgs | undefined;
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.storageAccountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'storageAccountId'");
            }
            if (args?.storageAccountKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'storageAccountKey'");
            }
            if (args?.workspaceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["blobContainerNames"] = args?.blobContainerNames;
            resourceInputs["name"] = args?.name;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["storageAccountId"] = args?.storageAccountId;
            resourceInputs["storageAccountKey"] = args?.storageAccountKey ? pulumi.secret(args.storageAccountKey) : undefined;
            resourceInputs["tableNames"] = args?.tableNames;
            resourceInputs["workspaceId"] = args?.workspaceId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["storageAccountKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(StorageInsights.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StorageInsights resources.
 */
export interface StorageInsightsState {
    /**
     * The names of the blob containers that the workspace should read.
     */
    blobContainerNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name which should be used for this Log Analytics Storage Insights. Changing this forces a new Log Analytics Storage Insights to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Log Analytics Storage Insights should exist. Changing this forces a new Log Analytics Storage Insights to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The ID of the Storage Account used by this Log Analytics Storage Insights.
     */
    storageAccountId?: pulumi.Input<string>;
    /**
     * The storage access key to be used to connect to the storage account.
     */
    storageAccountKey?: pulumi.Input<string>;
    /**
     * The names of the Azure tables that the workspace should read.
     */
    tableNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the Log Analytics Workspace within which the Storage Insights should exist. Changing this forces a new Log Analytics Storage Insights to be created.
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StorageInsights resource.
 */
export interface StorageInsightsArgs {
    /**
     * The names of the blob containers that the workspace should read.
     */
    blobContainerNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name which should be used for this Log Analytics Storage Insights. Changing this forces a new Log Analytics Storage Insights to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Log Analytics Storage Insights should exist. Changing this forces a new Log Analytics Storage Insights to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The ID of the Storage Account used by this Log Analytics Storage Insights.
     */
    storageAccountId: pulumi.Input<string>;
    /**
     * The storage access key to be used to connect to the storage account.
     */
    storageAccountKey: pulumi.Input<string>;
    /**
     * The names of the Azure tables that the workspace should read.
     */
    tableNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the Log Analytics Workspace within which the Storage Insights should exist. Changing this forces a new Log Analytics Storage Insights to be created.
     */
    workspaceId: pulumi.Input<string>;
}
