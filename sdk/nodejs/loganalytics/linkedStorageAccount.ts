// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Log Analytics Linked Storage Account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "examplesa",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "GRS",
 * });
 * const exampleAnalyticsWorkspace = new azure.operationalinsights.AnalyticsWorkspace("example", {
 *     name: "exampleworkspace",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: "PerGB2018",
 * });
 * const exampleLinkedStorageAccount = new azure.loganalytics.LinkedStorageAccount("example", {
 *     dataSourceType: "CustomLogs",
 *     resourceGroupName: example.name,
 *     workspaceId: exampleAnalyticsWorkspace.id,
 *     storageAccountIds: [exampleAccount.id],
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.OperationalInsights` - 2020-08-01
 *
 * ## Import
 *
 * Log Analytics Linked Storage Accounts can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:loganalytics/linkedStorageAccount:LinkedStorageAccount example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.OperationalInsights/workspaces/workspace1/linkedStorageAccounts/{dataSourceType}
 * ```
 */
export class LinkedStorageAccount extends pulumi.CustomResource {
    /**
     * Get an existing LinkedStorageAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LinkedStorageAccountState, opts?: pulumi.CustomResourceOptions): LinkedStorageAccount {
        return new LinkedStorageAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:loganalytics/linkedStorageAccount:LinkedStorageAccount';

    /**
     * Returns true if the given object is an instance of LinkedStorageAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LinkedStorageAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LinkedStorageAccount.__pulumiType;
    }

    /**
     * The data source type which should be used for this Log Analytics Linked Storage Account. Possible values are `CustomLogs`, `AzureWatson`, `Query`, `Ingestion` and `Alerts`. Changing this forces a new Log Analytics Linked Storage Account to be created.
     */
    declare public readonly dataSourceType: pulumi.Output<string>;
    /**
     * The name of the Resource Group where the Log Analytics Linked Storage Account should exist. Changing this forces a new Log Analytics Linked Storage Account to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * The storage account resource ids to be linked.
     */
    declare public readonly storageAccountIds: pulumi.Output<string[]>;
    /**
     * The resource ID of the Log Analytics Workspace. Changing this forces a new Log Analytics Linked Storage Account to be created.
     */
    declare public readonly workspaceId: pulumi.Output<string>;
    declare public readonly workspaceResourceId: pulumi.Output<string>;

    /**
     * Create a LinkedStorageAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LinkedStorageAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LinkedStorageAccountArgs | LinkedStorageAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LinkedStorageAccountState | undefined;
            resourceInputs["dataSourceType"] = state?.dataSourceType;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["storageAccountIds"] = state?.storageAccountIds;
            resourceInputs["workspaceId"] = state?.workspaceId;
            resourceInputs["workspaceResourceId"] = state?.workspaceResourceId;
        } else {
            const args = argsOrState as LinkedStorageAccountArgs | undefined;
            if (args?.dataSourceType === undefined && !opts.urn) {
                throw new Error("Missing required property 'dataSourceType'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.storageAccountIds === undefined && !opts.urn) {
                throw new Error("Missing required property 'storageAccountIds'");
            }
            resourceInputs["dataSourceType"] = args?.dataSourceType;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["storageAccountIds"] = args?.storageAccountIds;
            resourceInputs["workspaceId"] = args?.workspaceId;
            resourceInputs["workspaceResourceId"] = args?.workspaceResourceId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LinkedStorageAccount.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LinkedStorageAccount resources.
 */
export interface LinkedStorageAccountState {
    /**
     * The data source type which should be used for this Log Analytics Linked Storage Account. Possible values are `CustomLogs`, `AzureWatson`, `Query`, `Ingestion` and `Alerts`. Changing this forces a new Log Analytics Linked Storage Account to be created.
     */
    dataSourceType?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Log Analytics Linked Storage Account should exist. Changing this forces a new Log Analytics Linked Storage Account to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The storage account resource ids to be linked.
     */
    storageAccountIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The resource ID of the Log Analytics Workspace. Changing this forces a new Log Analytics Linked Storage Account to be created.
     */
    workspaceId?: pulumi.Input<string>;
    workspaceResourceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LinkedStorageAccount resource.
 */
export interface LinkedStorageAccountArgs {
    /**
     * The data source type which should be used for this Log Analytics Linked Storage Account. Possible values are `CustomLogs`, `AzureWatson`, `Query`, `Ingestion` and `Alerts`. Changing this forces a new Log Analytics Linked Storage Account to be created.
     */
    dataSourceType: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Log Analytics Linked Storage Account should exist. Changing this forces a new Log Analytics Linked Storage Account to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The storage account resource ids to be linked.
     */
    storageAccountIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The resource ID of the Log Analytics Workspace. Changing this forces a new Log Analytics Linked Storage Account to be created.
     */
    workspaceId?: pulumi.Input<string>;
    workspaceResourceId?: pulumi.Input<string>;
}
