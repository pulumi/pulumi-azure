// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Resource Group.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.servicefabric.ManagedCluster("example", {
 *     name: "example",
 *     resourceGroupName: "example",
 *     location: "West Europe",
 *     httpGatewayPort: 4567,
 *     lbRules: [{
 *         backendPort: 38080,
 *         frontendPort: 80,
 *         probeProtocol: "http",
 *         probeRequestPath: "/test",
 *         protocol: "tcp",
 *     }],
 *     clientConnectionPort: 12345,
 *     nodeTypes: [{
 *         dataDiskSizeGb: 130,
 *         name: "test1",
 *         primary: true,
 *         applicationPortRange: "30000-49000",
 *         ephemeralPortRange: "10000-20000",
 *         vmSize: "Standard_DS1_v2",
 *         vmImagePublisher: "MicrosoftWindowsServer",
 *         vmImageSku: "2019-Datacenter-with-Containers",
 *         vmImageOffer: "WindowsServer",
 *         vmImageVersion: "latest",
 *         vmInstanceCount: 5,
 *     }],
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.ServiceFabric` - 2024-04-01
 *
 * ## Import
 *
 * Resource Groups can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:servicefabric/managedCluster:ManagedCluster example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.ServiceFabric/managedClusters/clusterName1
 * ```
 */
export class ManagedCluster extends pulumi.CustomResource {
    /**
     * Get an existing ManagedCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagedClusterState, opts?: pulumi.CustomResourceOptions): ManagedCluster {
        return new ManagedCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:servicefabric/managedCluster:ManagedCluster';

    /**
     * Returns true if the given object is an instance of ManagedCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagedCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedCluster.__pulumiType;
    }

    /**
     * Controls how connections to the cluster are authenticated. A `authentication` block as defined below.
     */
    declare public readonly authentication: pulumi.Output<outputs.servicefabric.ManagedClusterAuthentication | undefined>;
    /**
     * If true, backup service is enabled.
     */
    declare public readonly backupServiceEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Port to use when connecting to the cluster.
     */
    declare public readonly clientConnectionPort: pulumi.Output<number>;
    /**
     * One or more `customFabricSetting` blocks as defined below.
     */
    declare public readonly customFabricSettings: pulumi.Output<outputs.servicefabric.ManagedClusterCustomFabricSetting[] | undefined>;
    /**
     * Hostname for the cluster. If unset the cluster's name will be used..
     */
    declare public readonly dnsName: pulumi.Output<string>;
    /**
     * If true, DNS service is enabled.
     */
    declare public readonly dnsServiceEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Port that should be used by the Service Fabric Explorer to visualize applications and cluster status.
     */
    declare public readonly httpGatewayPort: pulumi.Output<number>;
    /**
     * One or more `lbRule` blocks as defined below.
     */
    declare public readonly lbRules: pulumi.Output<outputs.servicefabric.ManagedClusterLbRule[]>;
    /**
     * The Azure Region where the Resource Group should exist. Changing this forces a new Resource Group to be created.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * The name which should be used for this Resource Group. Changing this forces a new Resource Group to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * One or more `nodeType` blocks as defined below.
     */
    declare public readonly nodeTypes: pulumi.Output<outputs.servicefabric.ManagedClusterNodeType[] | undefined>;
    /**
     * Administrator password for the VMs that will be created as part of this cluster.
     */
    declare public readonly password: pulumi.Output<string | undefined>;
    /**
     * The name of the Resource Group where the Resource Group should exist. Changing this forces a new Resource Group to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * SKU for this cluster. Changing this forces a new resource to be created. Default is `Basic`, allowed values are either `Basic` or `Standard`.
     */
    declare public readonly sku: pulumi.Output<string | undefined>;
    /**
     * The resource ID of the Subnet. Changing this forces a new Resource Group to be created.
     */
    declare public readonly subnetId: pulumi.Output<string | undefined>;
    /**
     * A mapping of tags which should be assigned to the Resource Group.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Upgrade wave for the fabric runtime. Default is `Wave0`, allowed value must be one of `Wave0`, `Wave1`, or `Wave2`.
     */
    declare public readonly upgradeWave: pulumi.Output<string | undefined>;
    /**
     * Administrator password for the VMs that will be created as part of this cluster.
     */
    declare public readonly username: pulumi.Output<string | undefined>;

    /**
     * Create a ManagedCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagedClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagedClusterArgs | ManagedClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagedClusterState | undefined;
            resourceInputs["authentication"] = state?.authentication;
            resourceInputs["backupServiceEnabled"] = state?.backupServiceEnabled;
            resourceInputs["clientConnectionPort"] = state?.clientConnectionPort;
            resourceInputs["customFabricSettings"] = state?.customFabricSettings;
            resourceInputs["dnsName"] = state?.dnsName;
            resourceInputs["dnsServiceEnabled"] = state?.dnsServiceEnabled;
            resourceInputs["httpGatewayPort"] = state?.httpGatewayPort;
            resourceInputs["lbRules"] = state?.lbRules;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["nodeTypes"] = state?.nodeTypes;
            resourceInputs["password"] = state?.password;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["sku"] = state?.sku;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["upgradeWave"] = state?.upgradeWave;
            resourceInputs["username"] = state?.username;
        } else {
            const args = argsOrState as ManagedClusterArgs | undefined;
            if (args?.clientConnectionPort === undefined && !opts.urn) {
                throw new Error("Missing required property 'clientConnectionPort'");
            }
            if (args?.httpGatewayPort === undefined && !opts.urn) {
                throw new Error("Missing required property 'httpGatewayPort'");
            }
            if (args?.lbRules === undefined && !opts.urn) {
                throw new Error("Missing required property 'lbRules'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["authentication"] = args?.authentication;
            resourceInputs["backupServiceEnabled"] = args?.backupServiceEnabled;
            resourceInputs["clientConnectionPort"] = args?.clientConnectionPort;
            resourceInputs["customFabricSettings"] = args?.customFabricSettings;
            resourceInputs["dnsName"] = args?.dnsName;
            resourceInputs["dnsServiceEnabled"] = args?.dnsServiceEnabled;
            resourceInputs["httpGatewayPort"] = args?.httpGatewayPort;
            resourceInputs["lbRules"] = args?.lbRules;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["nodeTypes"] = args?.nodeTypes;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["sku"] = args?.sku;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["upgradeWave"] = args?.upgradeWave;
            resourceInputs["username"] = args?.username;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ManagedCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ManagedCluster resources.
 */
export interface ManagedClusterState {
    /**
     * Controls how connections to the cluster are authenticated. A `authentication` block as defined below.
     */
    authentication?: pulumi.Input<inputs.servicefabric.ManagedClusterAuthentication>;
    /**
     * If true, backup service is enabled.
     */
    backupServiceEnabled?: pulumi.Input<boolean>;
    /**
     * Port to use when connecting to the cluster.
     */
    clientConnectionPort?: pulumi.Input<number>;
    /**
     * One or more `customFabricSetting` blocks as defined below.
     */
    customFabricSettings?: pulumi.Input<pulumi.Input<inputs.servicefabric.ManagedClusterCustomFabricSetting>[]>;
    /**
     * Hostname for the cluster. If unset the cluster's name will be used..
     */
    dnsName?: pulumi.Input<string>;
    /**
     * If true, DNS service is enabled.
     */
    dnsServiceEnabled?: pulumi.Input<boolean>;
    /**
     * Port that should be used by the Service Fabric Explorer to visualize applications and cluster status.
     */
    httpGatewayPort?: pulumi.Input<number>;
    /**
     * One or more `lbRule` blocks as defined below.
     */
    lbRules?: pulumi.Input<pulumi.Input<inputs.servicefabric.ManagedClusterLbRule>[]>;
    /**
     * The Azure Region where the Resource Group should exist. Changing this forces a new Resource Group to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The name which should be used for this Resource Group. Changing this forces a new Resource Group to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * One or more `nodeType` blocks as defined below.
     */
    nodeTypes?: pulumi.Input<pulumi.Input<inputs.servicefabric.ManagedClusterNodeType>[]>;
    /**
     * Administrator password for the VMs that will be created as part of this cluster.
     */
    password?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Resource Group should exist. Changing this forces a new Resource Group to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * SKU for this cluster. Changing this forces a new resource to be created. Default is `Basic`, allowed values are either `Basic` or `Standard`.
     */
    sku?: pulumi.Input<string>;
    /**
     * The resource ID of the Subnet. Changing this forces a new Resource Group to be created.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Resource Group.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Upgrade wave for the fabric runtime. Default is `Wave0`, allowed value must be one of `Wave0`, `Wave1`, or `Wave2`.
     */
    upgradeWave?: pulumi.Input<string>;
    /**
     * Administrator password for the VMs that will be created as part of this cluster.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagedCluster resource.
 */
export interface ManagedClusterArgs {
    /**
     * Controls how connections to the cluster are authenticated. A `authentication` block as defined below.
     */
    authentication?: pulumi.Input<inputs.servicefabric.ManagedClusterAuthentication>;
    /**
     * If true, backup service is enabled.
     */
    backupServiceEnabled?: pulumi.Input<boolean>;
    /**
     * Port to use when connecting to the cluster.
     */
    clientConnectionPort: pulumi.Input<number>;
    /**
     * One or more `customFabricSetting` blocks as defined below.
     */
    customFabricSettings?: pulumi.Input<pulumi.Input<inputs.servicefabric.ManagedClusterCustomFabricSetting>[]>;
    /**
     * Hostname for the cluster. If unset the cluster's name will be used..
     */
    dnsName?: pulumi.Input<string>;
    /**
     * If true, DNS service is enabled.
     */
    dnsServiceEnabled?: pulumi.Input<boolean>;
    /**
     * Port that should be used by the Service Fabric Explorer to visualize applications and cluster status.
     */
    httpGatewayPort: pulumi.Input<number>;
    /**
     * One or more `lbRule` blocks as defined below.
     */
    lbRules: pulumi.Input<pulumi.Input<inputs.servicefabric.ManagedClusterLbRule>[]>;
    /**
     * The Azure Region where the Resource Group should exist. Changing this forces a new Resource Group to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The name which should be used for this Resource Group. Changing this forces a new Resource Group to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * One or more `nodeType` blocks as defined below.
     */
    nodeTypes?: pulumi.Input<pulumi.Input<inputs.servicefabric.ManagedClusterNodeType>[]>;
    /**
     * Administrator password for the VMs that will be created as part of this cluster.
     */
    password?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Resource Group should exist. Changing this forces a new Resource Group to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * SKU for this cluster. Changing this forces a new resource to be created. Default is `Basic`, allowed values are either `Basic` or `Standard`.
     */
    sku?: pulumi.Input<string>;
    /**
     * The resource ID of the Subnet. Changing this forces a new Resource Group to be created.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Resource Group.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Upgrade wave for the fabric runtime. Default is `Wave0`, allowed value must be one of `Wave0`, `Wave1`, or `Wave2`.
     */
    upgradeWave?: pulumi.Input<string>;
    /**
     * Administrator password for the VMs that will be created as part of this cluster.
     */
    username?: pulumi.Input<string>;
}
