// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Service Fabric Cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleCluster = new azure.servicefabric.Cluster("example", {
 *     name: "example-servicefabric",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     reliabilityLevel: "Bronze",
 *     upgradeMode: "Manual",
 *     clusterCodeVersion: "7.1.456.959",
 *     vmImage: "Windows",
 *     managementEndpoint: "https://example:80",
 *     nodeTypes: [{
 *         name: "first",
 *         instanceCount: 3,
 *         isPrimary: true,
 *         clientEndpointPort: 2020,
 *         httpEndpointPort: 80,
 *     }],
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.ServiceFabric` - 2021-06-01
 *
 * ## Import
 *
 * Service Fabric Clusters can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:servicefabric/cluster:Cluster cluster1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ServiceFabric/clusters/cluster1
 * ```
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:servicefabric/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * A List of one or more features which should be enabled, such as `DnsService`.
     */
    declare public readonly addOnFeatures: pulumi.Output<string[] | undefined>;
    /**
     * An `azureActiveDirectory` block as defined below.
     */
    declare public readonly azureActiveDirectory: pulumi.Output<outputs.servicefabric.ClusterAzureActiveDirectory | undefined>;
    /**
     * A `certificate` block as defined below. Conflicts with `certificateCommonNames`.
     */
    declare public readonly certificate: pulumi.Output<outputs.servicefabric.ClusterCertificate | undefined>;
    /**
     * A `certificateCommonNames` block as defined below. Conflicts with `certificate`.
     */
    declare public readonly certificateCommonNames: pulumi.Output<outputs.servicefabric.ClusterCertificateCommonNames | undefined>;
    /**
     * A `clientCertificateCommonName` block as defined below.
     *
     * > **Note:** If Client Certificates are enabled then at a Certificate must be configured on the cluster.
     */
    declare public readonly clientCertificateCommonNames: pulumi.Output<outputs.servicefabric.ClusterClientCertificateCommonName[] | undefined>;
    /**
     * One or more `clientCertificateThumbprint` blocks as defined below.
     */
    declare public readonly clientCertificateThumbprints: pulumi.Output<outputs.servicefabric.ClusterClientCertificateThumbprint[] | undefined>;
    /**
     * Required if Upgrade Mode set to `Manual`, Specifies the Version of the Cluster Code of the cluster.
     */
    declare public readonly clusterCodeVersion: pulumi.Output<string>;
    /**
     * The Cluster Endpoint for this Service Fabric Cluster.
     */
    declare public /*out*/ readonly clusterEndpoint: pulumi.Output<string>;
    /**
     * A `diagnosticsConfig` block as defined below.
     */
    declare public readonly diagnosticsConfig: pulumi.Output<outputs.servicefabric.ClusterDiagnosticsConfig | undefined>;
    /**
     * One or more `fabricSettings` blocks as defined below.
     */
    declare public readonly fabricSettings: pulumi.Output<outputs.servicefabric.ClusterFabricSetting[] | undefined>;
    /**
     * Specifies the Azure Region where the Service Fabric Cluster should exist. Changing this forces a new resource to be created.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * Specifies the Management Endpoint of the cluster such as `http://example.com`. Changing this forces a new resource to be created.
     */
    declare public readonly managementEndpoint: pulumi.Output<string>;
    /**
     * The name of the Service Fabric Cluster. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * One or more `nodeType` blocks as defined below.
     */
    declare public readonly nodeTypes: pulumi.Output<outputs.servicefabric.ClusterNodeType[]>;
    /**
     * Specifies the Reliability Level of the Cluster. Possible values include `None`, `Bronze`, `Silver`, `Gold` and `Platinum`.
     *
     * > **Note:** The Reliability Level of the Cluster depends on the number of nodes in the Cluster: `Platinum` requires at least 9 VM's, `Gold` requires at least 7 VM's, `Silver` requires at least 5 VM's, `Bronze` requires at least 3 VM's.
     */
    declare public readonly reliabilityLevel: pulumi.Output<string>;
    /**
     * The name of the Resource Group in which the Service Fabric Cluster exists. Changing this forces a new resource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * A `reverseProxyCertificate` block as defined below. Conflicts with `reverseProxyCertificateCommonNames`.
     */
    declare public readonly reverseProxyCertificate: pulumi.Output<outputs.servicefabric.ClusterReverseProxyCertificate | undefined>;
    /**
     * A `reverseProxyCertificateCommonNames` block as defined below. Conflicts with `reverseProxyCertificate`.
     */
    declare public readonly reverseProxyCertificateCommonNames: pulumi.Output<outputs.servicefabric.ClusterReverseProxyCertificateCommonNames | undefined>;
    /**
     * Specifies the logical grouping of VMs in upgrade domains. Possible values are `Hierarchical` or `Parallel`.
     */
    declare public readonly serviceFabricZonalUpgradeMode: pulumi.Output<string | undefined>;
    /**
     * A mapping of tags to assign to the resource.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the Upgrade Mode of the cluster. Possible values are `Automatic` or `Manual`.
     */
    declare public readonly upgradeMode: pulumi.Output<string>;
    /**
     * A `upgradePolicy` block as defined below.
     */
    declare public readonly upgradePolicy: pulumi.Output<outputs.servicefabric.ClusterUpgradePolicy | undefined>;
    /**
     * Specifies the Image expected for the Service Fabric Cluster, such as `Windows`. Changing this forces a new resource to be created.
     */
    declare public readonly vmImage: pulumi.Output<string>;
    /**
     * Specifies the upgrade mode for the virtual machine scale set updates that happen in all availability zones at once. Possible values are `Hierarchical` or `Parallel`.
     */
    declare public readonly vmssZonalUpgradeMode: pulumi.Output<string | undefined>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["addOnFeatures"] = state?.addOnFeatures;
            resourceInputs["azureActiveDirectory"] = state?.azureActiveDirectory;
            resourceInputs["certificate"] = state?.certificate;
            resourceInputs["certificateCommonNames"] = state?.certificateCommonNames;
            resourceInputs["clientCertificateCommonNames"] = state?.clientCertificateCommonNames;
            resourceInputs["clientCertificateThumbprints"] = state?.clientCertificateThumbprints;
            resourceInputs["clusterCodeVersion"] = state?.clusterCodeVersion;
            resourceInputs["clusterEndpoint"] = state?.clusterEndpoint;
            resourceInputs["diagnosticsConfig"] = state?.diagnosticsConfig;
            resourceInputs["fabricSettings"] = state?.fabricSettings;
            resourceInputs["location"] = state?.location;
            resourceInputs["managementEndpoint"] = state?.managementEndpoint;
            resourceInputs["name"] = state?.name;
            resourceInputs["nodeTypes"] = state?.nodeTypes;
            resourceInputs["reliabilityLevel"] = state?.reliabilityLevel;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["reverseProxyCertificate"] = state?.reverseProxyCertificate;
            resourceInputs["reverseProxyCertificateCommonNames"] = state?.reverseProxyCertificateCommonNames;
            resourceInputs["serviceFabricZonalUpgradeMode"] = state?.serviceFabricZonalUpgradeMode;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["upgradeMode"] = state?.upgradeMode;
            resourceInputs["upgradePolicy"] = state?.upgradePolicy;
            resourceInputs["vmImage"] = state?.vmImage;
            resourceInputs["vmssZonalUpgradeMode"] = state?.vmssZonalUpgradeMode;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if (args?.managementEndpoint === undefined && !opts.urn) {
                throw new Error("Missing required property 'managementEndpoint'");
            }
            if (args?.nodeTypes === undefined && !opts.urn) {
                throw new Error("Missing required property 'nodeTypes'");
            }
            if (args?.reliabilityLevel === undefined && !opts.urn) {
                throw new Error("Missing required property 'reliabilityLevel'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.upgradeMode === undefined && !opts.urn) {
                throw new Error("Missing required property 'upgradeMode'");
            }
            if (args?.vmImage === undefined && !opts.urn) {
                throw new Error("Missing required property 'vmImage'");
            }
            resourceInputs["addOnFeatures"] = args?.addOnFeatures;
            resourceInputs["azureActiveDirectory"] = args?.azureActiveDirectory;
            resourceInputs["certificate"] = args?.certificate;
            resourceInputs["certificateCommonNames"] = args?.certificateCommonNames;
            resourceInputs["clientCertificateCommonNames"] = args?.clientCertificateCommonNames;
            resourceInputs["clientCertificateThumbprints"] = args?.clientCertificateThumbprints;
            resourceInputs["clusterCodeVersion"] = args?.clusterCodeVersion;
            resourceInputs["diagnosticsConfig"] = args?.diagnosticsConfig;
            resourceInputs["fabricSettings"] = args?.fabricSettings;
            resourceInputs["location"] = args?.location;
            resourceInputs["managementEndpoint"] = args?.managementEndpoint;
            resourceInputs["name"] = args?.name;
            resourceInputs["nodeTypes"] = args?.nodeTypes;
            resourceInputs["reliabilityLevel"] = args?.reliabilityLevel;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["reverseProxyCertificate"] = args?.reverseProxyCertificate;
            resourceInputs["reverseProxyCertificateCommonNames"] = args?.reverseProxyCertificateCommonNames;
            resourceInputs["serviceFabricZonalUpgradeMode"] = args?.serviceFabricZonalUpgradeMode;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["upgradeMode"] = args?.upgradeMode;
            resourceInputs["upgradePolicy"] = args?.upgradePolicy;
            resourceInputs["vmImage"] = args?.vmImage;
            resourceInputs["vmssZonalUpgradeMode"] = args?.vmssZonalUpgradeMode;
            resourceInputs["clusterEndpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * A List of one or more features which should be enabled, such as `DnsService`.
     */
    addOnFeatures?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An `azureActiveDirectory` block as defined below.
     */
    azureActiveDirectory?: pulumi.Input<inputs.servicefabric.ClusterAzureActiveDirectory>;
    /**
     * A `certificate` block as defined below. Conflicts with `certificateCommonNames`.
     */
    certificate?: pulumi.Input<inputs.servicefabric.ClusterCertificate>;
    /**
     * A `certificateCommonNames` block as defined below. Conflicts with `certificate`.
     */
    certificateCommonNames?: pulumi.Input<inputs.servicefabric.ClusterCertificateCommonNames>;
    /**
     * A `clientCertificateCommonName` block as defined below.
     *
     * > **Note:** If Client Certificates are enabled then at a Certificate must be configured on the cluster.
     */
    clientCertificateCommonNames?: pulumi.Input<pulumi.Input<inputs.servicefabric.ClusterClientCertificateCommonName>[]>;
    /**
     * One or more `clientCertificateThumbprint` blocks as defined below.
     */
    clientCertificateThumbprints?: pulumi.Input<pulumi.Input<inputs.servicefabric.ClusterClientCertificateThumbprint>[]>;
    /**
     * Required if Upgrade Mode set to `Manual`, Specifies the Version of the Cluster Code of the cluster.
     */
    clusterCodeVersion?: pulumi.Input<string>;
    /**
     * The Cluster Endpoint for this Service Fabric Cluster.
     */
    clusterEndpoint?: pulumi.Input<string>;
    /**
     * A `diagnosticsConfig` block as defined below.
     */
    diagnosticsConfig?: pulumi.Input<inputs.servicefabric.ClusterDiagnosticsConfig>;
    /**
     * One or more `fabricSettings` blocks as defined below.
     */
    fabricSettings?: pulumi.Input<pulumi.Input<inputs.servicefabric.ClusterFabricSetting>[]>;
    /**
     * Specifies the Azure Region where the Service Fabric Cluster should exist. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the Management Endpoint of the cluster such as `http://example.com`. Changing this forces a new resource to be created.
     */
    managementEndpoint?: pulumi.Input<string>;
    /**
     * The name of the Service Fabric Cluster. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * One or more `nodeType` blocks as defined below.
     */
    nodeTypes?: pulumi.Input<pulumi.Input<inputs.servicefabric.ClusterNodeType>[]>;
    /**
     * Specifies the Reliability Level of the Cluster. Possible values include `None`, `Bronze`, `Silver`, `Gold` and `Platinum`.
     *
     * > **Note:** The Reliability Level of the Cluster depends on the number of nodes in the Cluster: `Platinum` requires at least 9 VM's, `Gold` requires at least 7 VM's, `Silver` requires at least 5 VM's, `Bronze` requires at least 3 VM's.
     */
    reliabilityLevel?: pulumi.Input<string>;
    /**
     * The name of the Resource Group in which the Service Fabric Cluster exists. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A `reverseProxyCertificate` block as defined below. Conflicts with `reverseProxyCertificateCommonNames`.
     */
    reverseProxyCertificate?: pulumi.Input<inputs.servicefabric.ClusterReverseProxyCertificate>;
    /**
     * A `reverseProxyCertificateCommonNames` block as defined below. Conflicts with `reverseProxyCertificate`.
     */
    reverseProxyCertificateCommonNames?: pulumi.Input<inputs.servicefabric.ClusterReverseProxyCertificateCommonNames>;
    /**
     * Specifies the logical grouping of VMs in upgrade domains. Possible values are `Hierarchical` or `Parallel`.
     */
    serviceFabricZonalUpgradeMode?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the Upgrade Mode of the cluster. Possible values are `Automatic` or `Manual`.
     */
    upgradeMode?: pulumi.Input<string>;
    /**
     * A `upgradePolicy` block as defined below.
     */
    upgradePolicy?: pulumi.Input<inputs.servicefabric.ClusterUpgradePolicy>;
    /**
     * Specifies the Image expected for the Service Fabric Cluster, such as `Windows`. Changing this forces a new resource to be created.
     */
    vmImage?: pulumi.Input<string>;
    /**
     * Specifies the upgrade mode for the virtual machine scale set updates that happen in all availability zones at once. Possible values are `Hierarchical` or `Parallel`.
     */
    vmssZonalUpgradeMode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * A List of one or more features which should be enabled, such as `DnsService`.
     */
    addOnFeatures?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An `azureActiveDirectory` block as defined below.
     */
    azureActiveDirectory?: pulumi.Input<inputs.servicefabric.ClusterAzureActiveDirectory>;
    /**
     * A `certificate` block as defined below. Conflicts with `certificateCommonNames`.
     */
    certificate?: pulumi.Input<inputs.servicefabric.ClusterCertificate>;
    /**
     * A `certificateCommonNames` block as defined below. Conflicts with `certificate`.
     */
    certificateCommonNames?: pulumi.Input<inputs.servicefabric.ClusterCertificateCommonNames>;
    /**
     * A `clientCertificateCommonName` block as defined below.
     *
     * > **Note:** If Client Certificates are enabled then at a Certificate must be configured on the cluster.
     */
    clientCertificateCommonNames?: pulumi.Input<pulumi.Input<inputs.servicefabric.ClusterClientCertificateCommonName>[]>;
    /**
     * One or more `clientCertificateThumbprint` blocks as defined below.
     */
    clientCertificateThumbprints?: pulumi.Input<pulumi.Input<inputs.servicefabric.ClusterClientCertificateThumbprint>[]>;
    /**
     * Required if Upgrade Mode set to `Manual`, Specifies the Version of the Cluster Code of the cluster.
     */
    clusterCodeVersion?: pulumi.Input<string>;
    /**
     * A `diagnosticsConfig` block as defined below.
     */
    diagnosticsConfig?: pulumi.Input<inputs.servicefabric.ClusterDiagnosticsConfig>;
    /**
     * One or more `fabricSettings` blocks as defined below.
     */
    fabricSettings?: pulumi.Input<pulumi.Input<inputs.servicefabric.ClusterFabricSetting>[]>;
    /**
     * Specifies the Azure Region where the Service Fabric Cluster should exist. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the Management Endpoint of the cluster such as `http://example.com`. Changing this forces a new resource to be created.
     */
    managementEndpoint: pulumi.Input<string>;
    /**
     * The name of the Service Fabric Cluster. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * One or more `nodeType` blocks as defined below.
     */
    nodeTypes: pulumi.Input<pulumi.Input<inputs.servicefabric.ClusterNodeType>[]>;
    /**
     * Specifies the Reliability Level of the Cluster. Possible values include `None`, `Bronze`, `Silver`, `Gold` and `Platinum`.
     *
     * > **Note:** The Reliability Level of the Cluster depends on the number of nodes in the Cluster: `Platinum` requires at least 9 VM's, `Gold` requires at least 7 VM's, `Silver` requires at least 5 VM's, `Bronze` requires at least 3 VM's.
     */
    reliabilityLevel: pulumi.Input<string>;
    /**
     * The name of the Resource Group in which the Service Fabric Cluster exists. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A `reverseProxyCertificate` block as defined below. Conflicts with `reverseProxyCertificateCommonNames`.
     */
    reverseProxyCertificate?: pulumi.Input<inputs.servicefabric.ClusterReverseProxyCertificate>;
    /**
     * A `reverseProxyCertificateCommonNames` block as defined below. Conflicts with `reverseProxyCertificate`.
     */
    reverseProxyCertificateCommonNames?: pulumi.Input<inputs.servicefabric.ClusterReverseProxyCertificateCommonNames>;
    /**
     * Specifies the logical grouping of VMs in upgrade domains. Possible values are `Hierarchical` or `Parallel`.
     */
    serviceFabricZonalUpgradeMode?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the Upgrade Mode of the cluster. Possible values are `Automatic` or `Manual`.
     */
    upgradeMode: pulumi.Input<string>;
    /**
     * A `upgradePolicy` block as defined below.
     */
    upgradePolicy?: pulumi.Input<inputs.servicefabric.ClusterUpgradePolicy>;
    /**
     * Specifies the Image expected for the Service Fabric Cluster, such as `Windows`. Changing this forces a new resource to be created.
     */
    vmImage: pulumi.Input<string>;
    /**
     * Specifies the upgrade mode for the virtual machine scale set updates that happen in all availability zones at once. Possible values are `Hierarchical` or `Parallel`.
     */
    vmssZonalUpgradeMode?: pulumi.Input<string>;
}
