// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The provider type for the azurerm package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'azure';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * The Azure DevOps Pipeline Service Connection ID.
     */
    public readonly adoPipelineServiceConnectionId!: pulumi.Output<string | undefined>;
    /**
     * Base64 encoded PKCS#12 certificate bundle to use when authenticating as a Service Principal using a Client Certificate
     */
    public readonly clientCertificate!: pulumi.Output<string | undefined>;
    /**
     * The password associated with the Client Certificate. For use when authenticating as a Service Principal using a Client
     * Certificate
     */
    public readonly clientCertificatePassword!: pulumi.Output<string | undefined>;
    /**
     * The path to the Client Certificate associated with the Service Principal for use when authenticating as a Service
     * Principal using a Client Certificate.
     */
    public readonly clientCertificatePath!: pulumi.Output<string | undefined>;
    /**
     * The Client ID which should be used.
     */
    public readonly clientId!: pulumi.Output<string | undefined>;
    /**
     * The path to a file containing the Client ID which should be used.
     */
    public readonly clientIdFilePath!: pulumi.Output<string | undefined>;
    /**
     * The Client Secret which should be used. For use When authenticating as a Service Principal using a Client Secret.
     */
    public readonly clientSecret!: pulumi.Output<string | undefined>;
    /**
     * The path to a file containing the Client Secret which should be used. For use When authenticating as a Service Principal
     * using a Client Secret.
     */
    public readonly clientSecretFilePath!: pulumi.Output<string | undefined>;
    /**
     * The Cloud Environment which should be used. Possible values are public, usgovernment, and china. Defaults to public. Not
     * used and should not be specified when `metadataHost` is specified.
     */
    public readonly environment!: pulumi.Output<string | undefined>;
    /**
     * The Hostname which should be used for the Azure Metadata Service.
     */
    public readonly metadataHost!: pulumi.Output<string | undefined>;
    /**
     * The path to a custom endpoint for Managed Service Identity - in most circumstances this should be detected
     * automatically.
     */
    public readonly msiEndpoint!: pulumi.Output<string | undefined>;
    /**
     * The bearer token for the request to the OIDC provider. For use when authenticating as a Service Principal using OpenID
     * Connect.
     */
    public readonly oidcRequestToken!: pulumi.Output<string | undefined>;
    /**
     * The URL for the OIDC provider from which to request an ID token. For use when authenticating as a Service Principal
     * using OpenID Connect.
     */
    public readonly oidcRequestUrl!: pulumi.Output<string | undefined>;
    /**
     * The OIDC ID token for use when authenticating as a Service Principal using OpenID Connect.
     */
    public readonly oidcToken!: pulumi.Output<string | undefined>;
    /**
     * The path to a file containing an OIDC ID token for use when authenticating as a Service Principal using OpenID Connect.
     */
    public readonly oidcTokenFilePath!: pulumi.Output<string | undefined>;
    /**
     * A GUID/UUID that is registered with Microsoft to facilitate partner resource usage attribution.
     */
    public readonly partnerId!: pulumi.Output<string | undefined>;
    /**
     * The set of Resource Providers which should be automatically registered for the subscription.
     */
    public readonly resourceProviderRegistrations!: pulumi.Output<string | undefined>;
    /**
     * The Subscription ID which should be used.
     */
    public readonly subscriptionId!: pulumi.Output<string | undefined>;
    /**
     * The Tenant ID which should be used.
     */
    public readonly tenantId!: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            resourceInputs["adoPipelineServiceConnectionId"] = args ? args.adoPipelineServiceConnectionId : undefined;
            resourceInputs["auxiliaryTenantIds"] = pulumi.output(args?.auxiliaryTenantIds ? pulumi.secret(args.auxiliaryTenantIds) : undefined).apply(JSON.stringify);
            resourceInputs["clientCertificate"] = args?.clientCertificate ? pulumi.secret(args.clientCertificate) : undefined;
            resourceInputs["clientCertificatePassword"] = args?.clientCertificatePassword ? pulumi.secret(args.clientCertificatePassword) : undefined;
            resourceInputs["clientCertificatePath"] = args?.clientCertificatePath ? pulumi.secret(args.clientCertificatePath) : undefined;
            resourceInputs["clientId"] = args?.clientId ? pulumi.secret(args.clientId) : undefined;
            resourceInputs["clientIdFilePath"] = args?.clientIdFilePath ? pulumi.secret(args.clientIdFilePath) : undefined;
            resourceInputs["clientSecret"] = args?.clientSecret ? pulumi.secret(args.clientSecret) : undefined;
            resourceInputs["clientSecretFilePath"] = args?.clientSecretFilePath ? pulumi.secret(args.clientSecretFilePath) : undefined;
            resourceInputs["disableCorrelationRequestId"] = pulumi.output(args ? args.disableCorrelationRequestId : undefined).apply(JSON.stringify);
            resourceInputs["disableTerraformPartnerId"] = pulumi.output(args ? args.disableTerraformPartnerId : undefined).apply(JSON.stringify);
            resourceInputs["environment"] = (args ? args.environment : undefined) ?? (utilities.getEnv("AZURE_ENVIRONMENT", "ARM_ENVIRONMENT") || "public");
            resourceInputs["features"] = pulumi.output(args ? args.features : undefined).apply(JSON.stringify);
            resourceInputs["metadataHost"] = (args ? args.metadataHost : undefined) ?? utilities.getEnv("ARM_METADATA_HOSTNAME");
            resourceInputs["msiEndpoint"] = args ? args.msiEndpoint : undefined;
            resourceInputs["oidcRequestToken"] = args?.oidcRequestToken ? pulumi.secret(args.oidcRequestToken) : undefined;
            resourceInputs["oidcRequestUrl"] = args ? args.oidcRequestUrl : undefined;
            resourceInputs["oidcToken"] = args?.oidcToken ? pulumi.secret(args.oidcToken) : undefined;
            resourceInputs["oidcTokenFilePath"] = args?.oidcTokenFilePath ? pulumi.secret(args.oidcTokenFilePath) : undefined;
            resourceInputs["partnerId"] = args ? args.partnerId : undefined;
            resourceInputs["resourceProviderRegistrations"] = args ? args.resourceProviderRegistrations : undefined;
            resourceInputs["resourceProvidersToRegisters"] = pulumi.output(args ? args.resourceProvidersToRegisters : undefined).apply(JSON.stringify);
            resourceInputs["skipProviderRegistration"] = pulumi.output((args ? args.skipProviderRegistration : undefined) ?? (utilities.getEnvBoolean("ARM_SKIP_PROVIDER_REGISTRATION") || false)).apply(JSON.stringify);
            resourceInputs["storageUseAzuread"] = pulumi.output((args ? args.storageUseAzuread : undefined) ?? (utilities.getEnvBoolean("ARM_STORAGE_USE_AZUREAD") || false)).apply(JSON.stringify);
            resourceInputs["subscriptionId"] = (args?.subscriptionId ? pulumi.secret(args.subscriptionId) : undefined) ?? (utilities.getEnv("ARM_SUBSCRIPTION_ID") || "");
            resourceInputs["tenantId"] = args?.tenantId ? pulumi.secret(args.tenantId) : undefined;
            resourceInputs["useAksWorkloadIdentity"] = pulumi.output(args ? args.useAksWorkloadIdentity : undefined).apply(JSON.stringify);
            resourceInputs["useCli"] = pulumi.output(args ? args.useCli : undefined).apply(JSON.stringify);
            resourceInputs["useMsi"] = pulumi.output(args ? args.useMsi : undefined).apply(JSON.stringify);
            resourceInputs["useOidc"] = pulumi.output(args ? args.useOidc : undefined).apply(JSON.stringify);
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientCertificate", "clientCertificatePassword", "clientCertificatePath", "clientId", "clientIdFilePath", "clientSecret", "clientSecretFilePath", "oidcRequestToken", "oidcToken", "oidcTokenFilePath", "subscriptionId", "tenantId"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts);
    }

    /**
     * This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
     */
    terraformConfig(): pulumi.Output<Provider.TerraformConfigResult> {
        return pulumi.runtime.call("pulumi:providers:azure/terraformConfig", {
            "__self__": this,
        }, this);
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * The Azure DevOps Pipeline Service Connection ID.
     */
    adoPipelineServiceConnectionId?: pulumi.Input<string>;
    auxiliaryTenantIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Base64 encoded PKCS#12 certificate bundle to use when authenticating as a Service Principal using a Client Certificate
     */
    clientCertificate?: pulumi.Input<string>;
    /**
     * The password associated with the Client Certificate. For use when authenticating as a Service Principal using a Client
     * Certificate
     */
    clientCertificatePassword?: pulumi.Input<string>;
    /**
     * The path to the Client Certificate associated with the Service Principal for use when authenticating as a Service
     * Principal using a Client Certificate.
     */
    clientCertificatePath?: pulumi.Input<string>;
    /**
     * The Client ID which should be used.
     */
    clientId?: pulumi.Input<string>;
    /**
     * The path to a file containing the Client ID which should be used.
     */
    clientIdFilePath?: pulumi.Input<string>;
    /**
     * The Client Secret which should be used. For use When authenticating as a Service Principal using a Client Secret.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * The path to a file containing the Client Secret which should be used. For use When authenticating as a Service Principal
     * using a Client Secret.
     */
    clientSecretFilePath?: pulumi.Input<string>;
    /**
     * This will disable the x-ms-correlation-request-id header.
     */
    disableCorrelationRequestId?: pulumi.Input<boolean>;
    disableTerraformPartnerId?: pulumi.Input<boolean>;
    /**
     * The Cloud Environment which should be used. Possible values are public, usgovernment, and china. Defaults to public. Not
     * used and should not be specified when `metadataHost` is specified.
     */
    environment?: pulumi.Input<string>;
    features?: pulumi.Input<inputs.ProviderFeatures>;
    /**
     * The Hostname which should be used for the Azure Metadata Service.
     */
    metadataHost?: pulumi.Input<string>;
    /**
     * The path to a custom endpoint for Managed Service Identity - in most circumstances this should be detected
     * automatically.
     */
    msiEndpoint?: pulumi.Input<string>;
    /**
     * The bearer token for the request to the OIDC provider. For use when authenticating as a Service Principal using OpenID
     * Connect.
     */
    oidcRequestToken?: pulumi.Input<string>;
    /**
     * The URL for the OIDC provider from which to request an ID token. For use when authenticating as a Service Principal
     * using OpenID Connect.
     */
    oidcRequestUrl?: pulumi.Input<string>;
    /**
     * The OIDC ID token for use when authenticating as a Service Principal using OpenID Connect.
     */
    oidcToken?: pulumi.Input<string>;
    /**
     * The path to a file containing an OIDC ID token for use when authenticating as a Service Principal using OpenID Connect.
     */
    oidcTokenFilePath?: pulumi.Input<string>;
    /**
     * A GUID/UUID that is registered with Microsoft to facilitate partner resource usage attribution.
     */
    partnerId?: pulumi.Input<string>;
    /**
     * The set of Resource Providers which should be automatically registered for the subscription.
     */
    resourceProviderRegistrations?: pulumi.Input<string>;
    /**
     * A list of Resource Providers to explicitly register for the subscription, in addition to those specified by the
     * `resourceProviderRegistrations` property.
     */
    resourceProvidersToRegisters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Should the AzureRM Provider skip registering all of the Resource Providers that it supports, if they're not already
     * registered?
     *
     * @deprecated This property is deprecated and will be removed in v5.0 of the AzureRM provider. Please use the `resourceProviderRegistrations` property instead.
     */
    skipProviderRegistration?: pulumi.Input<boolean>;
    /**
     * Should the AzureRM Provider use Azure AD Authentication when accessing the Storage Data Plane APIs?
     */
    storageUseAzuread?: pulumi.Input<boolean>;
    /**
     * The Subscription ID which should be used.
     */
    subscriptionId?: pulumi.Input<string>;
    /**
     * The Tenant ID which should be used.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Allow Azure AKS Workload Identity to be used for Authentication.
     */
    useAksWorkloadIdentity?: pulumi.Input<boolean>;
    /**
     * Allow Azure CLI to be used for Authentication.
     */
    useCli?: pulumi.Input<boolean>;
    /**
     * Allow Managed Service Identity to be used for Authentication.
     */
    useMsi?: pulumi.Input<boolean>;
    /**
     * Allow OpenID Connect to be used for authentication
     */
    useOidc?: pulumi.Input<boolean>;
}

export namespace Provider {
    /**
     * The results of the Provider.terraformConfig method.
     */
    export interface TerraformConfigResult {
        readonly result: {[key: string]: any};
    }

}
