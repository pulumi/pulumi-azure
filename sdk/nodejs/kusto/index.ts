// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AttachedDatabaseConfigurationArgs, AttachedDatabaseConfigurationState } from "./attachedDatabaseConfiguration";
export type AttachedDatabaseConfiguration = import("./attachedDatabaseConfiguration").AttachedDatabaseConfiguration;
export const AttachedDatabaseConfiguration: typeof import("./attachedDatabaseConfiguration").AttachedDatabaseConfiguration = null as any;
utilities.lazyLoad(exports, ["AttachedDatabaseConfiguration"], () => require("./attachedDatabaseConfiguration"));

export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { ClusterCustomerManagedKeyArgs, ClusterCustomerManagedKeyState } from "./clusterCustomerManagedKey";
export type ClusterCustomerManagedKey = import("./clusterCustomerManagedKey").ClusterCustomerManagedKey;
export const ClusterCustomerManagedKey: typeof import("./clusterCustomerManagedKey").ClusterCustomerManagedKey = null as any;
utilities.lazyLoad(exports, ["ClusterCustomerManagedKey"], () => require("./clusterCustomerManagedKey"));

export { ClusterManagedPrivateEndpointArgs, ClusterManagedPrivateEndpointState } from "./clusterManagedPrivateEndpoint";
export type ClusterManagedPrivateEndpoint = import("./clusterManagedPrivateEndpoint").ClusterManagedPrivateEndpoint;
export const ClusterManagedPrivateEndpoint: typeof import("./clusterManagedPrivateEndpoint").ClusterManagedPrivateEndpoint = null as any;
utilities.lazyLoad(exports, ["ClusterManagedPrivateEndpoint"], () => require("./clusterManagedPrivateEndpoint"));

export { ClusterPrincipalAssignmentArgs, ClusterPrincipalAssignmentState } from "./clusterPrincipalAssignment";
export type ClusterPrincipalAssignment = import("./clusterPrincipalAssignment").ClusterPrincipalAssignment;
export const ClusterPrincipalAssignment: typeof import("./clusterPrincipalAssignment").ClusterPrincipalAssignment = null as any;
utilities.lazyLoad(exports, ["ClusterPrincipalAssignment"], () => require("./clusterPrincipalAssignment"));

export { CosmosdbDataConnectionArgs, CosmosdbDataConnectionState } from "./cosmosdbDataConnection";
export type CosmosdbDataConnection = import("./cosmosdbDataConnection").CosmosdbDataConnection;
export const CosmosdbDataConnection: typeof import("./cosmosdbDataConnection").CosmosdbDataConnection = null as any;
utilities.lazyLoad(exports, ["CosmosdbDataConnection"], () => require("./cosmosdbDataConnection"));

export { DatabaseArgs, DatabaseState } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { DatabasePrincipalAssignmentArgs, DatabasePrincipalAssignmentState } from "./databasePrincipalAssignment";
export type DatabasePrincipalAssignment = import("./databasePrincipalAssignment").DatabasePrincipalAssignment;
export const DatabasePrincipalAssignment: typeof import("./databasePrincipalAssignment").DatabasePrincipalAssignment = null as any;
utilities.lazyLoad(exports, ["DatabasePrincipalAssignment"], () => require("./databasePrincipalAssignment"));

export { EventGridDataConnectionArgs, EventGridDataConnectionState } from "./eventGridDataConnection";
export type EventGridDataConnection = import("./eventGridDataConnection").EventGridDataConnection;
export const EventGridDataConnection: typeof import("./eventGridDataConnection").EventGridDataConnection = null as any;
utilities.lazyLoad(exports, ["EventGridDataConnection"], () => require("./eventGridDataConnection"));

export { EventhubDataConnectionArgs, EventhubDataConnectionState } from "./eventhubDataConnection";
export type EventhubDataConnection = import("./eventhubDataConnection").EventhubDataConnection;
export const EventhubDataConnection: typeof import("./eventhubDataConnection").EventhubDataConnection = null as any;
utilities.lazyLoad(exports, ["EventhubDataConnection"], () => require("./eventhubDataConnection"));

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetDatabaseArgs, GetDatabaseResult, GetDatabaseOutputArgs } from "./getDatabase";
export const getDatabase: typeof import("./getDatabase").getDatabase = null as any;
export const getDatabaseOutput: typeof import("./getDatabase").getDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabase","getDatabaseOutput"], () => require("./getDatabase"));

export { IotHubDataConnectionArgs, IotHubDataConnectionState } from "./iotHubDataConnection";
export type IotHubDataConnection = import("./iotHubDataConnection").IotHubDataConnection;
export const IotHubDataConnection: typeof import("./iotHubDataConnection").IotHubDataConnection = null as any;
utilities.lazyLoad(exports, ["IotHubDataConnection"], () => require("./iotHubDataConnection"));

export { ScriptArgs, ScriptState } from "./script";
export type Script = import("./script").Script;
export const Script: typeof import("./script").Script = null as any;
utilities.lazyLoad(exports, ["Script"], () => require("./script"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:kusto/attachedDatabaseConfiguration:AttachedDatabaseConfiguration":
                return new AttachedDatabaseConfiguration(name, <any>undefined, { urn })
            case "azure:kusto/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "azure:kusto/clusterCustomerManagedKey:ClusterCustomerManagedKey":
                return new ClusterCustomerManagedKey(name, <any>undefined, { urn })
            case "azure:kusto/clusterManagedPrivateEndpoint:ClusterManagedPrivateEndpoint":
                return new ClusterManagedPrivateEndpoint(name, <any>undefined, { urn })
            case "azure:kusto/clusterPrincipalAssignment:ClusterPrincipalAssignment":
                return new ClusterPrincipalAssignment(name, <any>undefined, { urn })
            case "azure:kusto/cosmosdbDataConnection:CosmosdbDataConnection":
                return new CosmosdbDataConnection(name, <any>undefined, { urn })
            case "azure:kusto/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "azure:kusto/databasePrincipalAssignment:DatabasePrincipalAssignment":
                return new DatabasePrincipalAssignment(name, <any>undefined, { urn })
            case "azure:kusto/eventGridDataConnection:EventGridDataConnection":
                return new EventGridDataConnection(name, <any>undefined, { urn })
            case "azure:kusto/eventhubDataConnection:EventhubDataConnection":
                return new EventhubDataConnection(name, <any>undefined, { urn })
            case "azure:kusto/iotHubDataConnection:IotHubDataConnection":
                return new IotHubDataConnection(name, <any>undefined, { urn })
            case "azure:kusto/script:Script":
                return new Script(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "kusto/attachedDatabaseConfiguration", _module)
pulumi.runtime.registerResourceModule("azure", "kusto/cluster", _module)
pulumi.runtime.registerResourceModule("azure", "kusto/clusterCustomerManagedKey", _module)
pulumi.runtime.registerResourceModule("azure", "kusto/clusterManagedPrivateEndpoint", _module)
pulumi.runtime.registerResourceModule("azure", "kusto/clusterPrincipalAssignment", _module)
pulumi.runtime.registerResourceModule("azure", "kusto/cosmosdbDataConnection", _module)
pulumi.runtime.registerResourceModule("azure", "kusto/database", _module)
pulumi.runtime.registerResourceModule("azure", "kusto/databasePrincipalAssignment", _module)
pulumi.runtime.registerResourceModule("azure", "kusto/eventGridDataConnection", _module)
pulumi.runtime.registerResourceModule("azure", "kusto/eventhubDataConnection", _module)
pulumi.runtime.registerResourceModule("azure", "kusto/iotHubDataConnection", _module)
pulumi.runtime.registerResourceModule("azure", "kusto/script", _module)
