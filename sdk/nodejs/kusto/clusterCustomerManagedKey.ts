// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Customer Managed Key for a Kusto Cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleKeyVault = new azure.keyvault.KeyVault("example", {
 *     name: "examplekv",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "standard",
 *     purgeProtectionEnabled: true,
 * });
 * const exampleCluster = new azure.kusto.Cluster("example", {
 *     name: "kustocluster",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: {
 *         name: "Standard_D13_v2",
 *         capacity: 2,
 *     },
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * const cluster = new azure.keyvault.AccessPolicy("cluster", {
 *     keyVaultId: exampleKeyVault.id,
 *     tenantId: current.then(current => current.tenantId),
 *     objectId: exampleCluster.identity.apply(identity => identity?.principalId),
 *     keyPermissions: [
 *         "Get",
 *         "UnwrapKey",
 *         "WrapKey",
 *     ],
 * });
 * const client = new azure.keyvault.AccessPolicy("client", {
 *     keyVaultId: exampleKeyVault.id,
 *     tenantId: current.then(current => current.tenantId),
 *     objectId: current.then(current => current.objectId),
 *     keyPermissions: [
 *         "Get",
 *         "List",
 *         "Create",
 *         "Delete",
 *         "Recover",
 *         "GetRotationPolicy",
 *     ],
 * });
 * const exampleKey = new azure.keyvault.Key("example", {
 *     name: "tfex-key",
 *     keyVaultId: exampleKeyVault.id,
 *     keyType: "RSA",
 *     keySize: 2048,
 *     keyOpts: [
 *         "decrypt",
 *         "encrypt",
 *         "sign",
 *         "unwrapKey",
 *         "verify",
 *         "wrapKey",
 *     ],
 * }, {
 *     dependsOn: [
 *         client,
 *         cluster,
 *     ],
 * });
 * const exampleClusterCustomerManagedKey = new azure.kusto.ClusterCustomerManagedKey("example", {
 *     clusterId: exampleCluster.id,
 *     keyVaultId: exampleKeyVault.id,
 *     keyName: exampleKey.name,
 *     keyVersion: exampleKey.version,
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Kusto` - 2024-04-13
 *
 * ## Import
 *
 * Customer Managed Keys for a Kusto Cluster can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:kusto/clusterCustomerManagedKey:ClusterCustomerManagedKey example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Kusto/clusters/cluster1
 * ```
 */
export class ClusterCustomerManagedKey extends pulumi.CustomResource {
    /**
     * Get an existing ClusterCustomerManagedKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterCustomerManagedKeyState, opts?: pulumi.CustomResourceOptions): ClusterCustomerManagedKey {
        return new ClusterCustomerManagedKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:kusto/clusterCustomerManagedKey:ClusterCustomerManagedKey';

    /**
     * Returns true if the given object is an instance of ClusterCustomerManagedKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterCustomerManagedKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterCustomerManagedKey.__pulumiType;
    }

    /**
     * The ID of the Kusto Cluster. Changing this forces a new resource to be created.
     */
    declare public readonly clusterId: pulumi.Output<string>;
    /**
     * The name of Key Vault Key.
     */
    declare public readonly keyName: pulumi.Output<string | undefined>;
    /**
     * The ID of the Key Vault for CMK encryption.
     */
    declare public readonly keyVaultId: pulumi.Output<string | undefined>;
    /**
     * The version of Key Vault Key.
     */
    declare public readonly keyVersion: pulumi.Output<string | undefined>;
    /**
     * The Managed HSM Key ID for CMK encryption.
     *
     * > **Note:** Exactly one of `managedHsmKeyId` or `keyVaultId` must be specified.
     */
    declare public readonly managedHsmKeyId: pulumi.Output<string | undefined>;
    /**
     * The user assigned identity that has access to the Key Vault Key. If not specified, system assigned identity will be used.
     */
    declare public readonly userIdentity: pulumi.Output<string | undefined>;

    /**
     * Create a ClusterCustomerManagedKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterCustomerManagedKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterCustomerManagedKeyArgs | ClusterCustomerManagedKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterCustomerManagedKeyState | undefined;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["keyName"] = state?.keyName;
            resourceInputs["keyVaultId"] = state?.keyVaultId;
            resourceInputs["keyVersion"] = state?.keyVersion;
            resourceInputs["managedHsmKeyId"] = state?.managedHsmKeyId;
            resourceInputs["userIdentity"] = state?.userIdentity;
        } else {
            const args = argsOrState as ClusterCustomerManagedKeyArgs | undefined;
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["keyName"] = args?.keyName;
            resourceInputs["keyVaultId"] = args?.keyVaultId;
            resourceInputs["keyVersion"] = args?.keyVersion;
            resourceInputs["managedHsmKeyId"] = args?.managedHsmKeyId;
            resourceInputs["userIdentity"] = args?.userIdentity;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterCustomerManagedKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClusterCustomerManagedKey resources.
 */
export interface ClusterCustomerManagedKeyState {
    /**
     * The ID of the Kusto Cluster. Changing this forces a new resource to be created.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The name of Key Vault Key.
     */
    keyName?: pulumi.Input<string>;
    /**
     * The ID of the Key Vault for CMK encryption.
     */
    keyVaultId?: pulumi.Input<string>;
    /**
     * The version of Key Vault Key.
     */
    keyVersion?: pulumi.Input<string>;
    /**
     * The Managed HSM Key ID for CMK encryption.
     *
     * > **Note:** Exactly one of `managedHsmKeyId` or `keyVaultId` must be specified.
     */
    managedHsmKeyId?: pulumi.Input<string>;
    /**
     * The user assigned identity that has access to the Key Vault Key. If not specified, system assigned identity will be used.
     */
    userIdentity?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ClusterCustomerManagedKey resource.
 */
export interface ClusterCustomerManagedKeyArgs {
    /**
     * The ID of the Kusto Cluster. Changing this forces a new resource to be created.
     */
    clusterId: pulumi.Input<string>;
    /**
     * The name of Key Vault Key.
     */
    keyName?: pulumi.Input<string>;
    /**
     * The ID of the Key Vault for CMK encryption.
     */
    keyVaultId?: pulumi.Input<string>;
    /**
     * The version of Key Vault Key.
     */
    keyVersion?: pulumi.Input<string>;
    /**
     * The Managed HSM Key ID for CMK encryption.
     *
     * > **Note:** Exactly one of `managedHsmKeyId` or `keyVaultId` must be specified.
     */
    managedHsmKeyId?: pulumi.Input<string>;
    /**
     * The user assigned identity that has access to the Key Vault Key. If not specified, system assigned identity will be used.
     */
    userIdentity?: pulumi.Input<string>;
}
