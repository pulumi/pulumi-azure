// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Kusto Cluster Principal Assignment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "KustoRG",
 *     location: "West Europe",
 * });
 * const exampleCluster = new azure.kusto.Cluster("example", {
 *     name: "kustocluster",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: {
 *         name: "Standard_D13_v2",
 *         capacity: 2,
 *     },
 * });
 * const exampleClusterPrincipalAssignment = new azure.kusto.ClusterPrincipalAssignment("example", {
 *     name: "KustoPrincipalAssignment",
 *     resourceGroupName: example.name,
 *     clusterName: exampleCluster.name,
 *     tenantId: current.then(current => current.tenantId),
 *     principalId: current.then(current => current.principalId),
 *     principalType: "App",
 *     role: "AllDatabasesAdmin",
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Kusto` - 2024-04-13
 *
 * ## Import
 *
 * Data Explorer Cluster Principal Assignments can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:kusto/clusterPrincipalAssignment:ClusterPrincipalAssignment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Kusto/clusters/cluster1/principalAssignments/assignment1
 * ```
 */
export class ClusterPrincipalAssignment extends pulumi.CustomResource {
    /**
     * Get an existing ClusterPrincipalAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterPrincipalAssignmentState, opts?: pulumi.CustomResourceOptions): ClusterPrincipalAssignment {
        return new ClusterPrincipalAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:kusto/clusterPrincipalAssignment:ClusterPrincipalAssignment';

    /**
     * Returns true if the given object is an instance of ClusterPrincipalAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterPrincipalAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterPrincipalAssignment.__pulumiType;
    }

    /**
     * The name of the cluster in which to create the resource. Changing this forces a new resource to be created.
     */
    declare public readonly clusterName: pulumi.Output<string>;
    /**
     * The name of the Kusto cluster principal assignment. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The object id of the principal. Changing this forces a new resource to be created.
     */
    declare public readonly principalId: pulumi.Output<string>;
    /**
     * The name of the principal.
     */
    declare public /*out*/ readonly principalName: pulumi.Output<string>;
    /**
     * The type of the principal. Valid values include `App`, `Group`, `User`. Changing this forces a new resource to be created.
     */
    declare public readonly principalType: pulumi.Output<string>;
    /**
     * The name of the resource group in which to create the resource. Changing this forces a new resource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * The cluster role assigned to the principal. Valid values include `AllDatabasesAdmin`, `AllDatabasesViewer`, and `AllDatabasesMonitor`. Changing this forces a new resource to be created.
     */
    declare public readonly role: pulumi.Output<string>;
    /**
     * The tenant id in which the principal resides. Changing this forces a new resource to be created.
     */
    declare public readonly tenantId: pulumi.Output<string>;
    /**
     * The name of the tenant.
     */
    declare public /*out*/ readonly tenantName: pulumi.Output<string>;

    /**
     * Create a ClusterPrincipalAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterPrincipalAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterPrincipalAssignmentArgs | ClusterPrincipalAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterPrincipalAssignmentState | undefined;
            resourceInputs["clusterName"] = state?.clusterName;
            resourceInputs["name"] = state?.name;
            resourceInputs["principalId"] = state?.principalId;
            resourceInputs["principalName"] = state?.principalName;
            resourceInputs["principalType"] = state?.principalType;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["role"] = state?.role;
            resourceInputs["tenantId"] = state?.tenantId;
            resourceInputs["tenantName"] = state?.tenantName;
        } else {
            const args = argsOrState as ClusterPrincipalAssignmentArgs | undefined;
            if (args?.clusterName === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if (args?.principalId === undefined && !opts.urn) {
                throw new Error("Missing required property 'principalId'");
            }
            if (args?.principalType === undefined && !opts.urn) {
                throw new Error("Missing required property 'principalType'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.role === undefined && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            if (args?.tenantId === undefined && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["clusterName"] = args?.clusterName;
            resourceInputs["name"] = args?.name;
            resourceInputs["principalId"] = args?.principalId;
            resourceInputs["principalType"] = args?.principalType;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["role"] = args?.role;
            resourceInputs["tenantId"] = args?.tenantId;
            resourceInputs["principalName"] = undefined /*out*/;
            resourceInputs["tenantName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterPrincipalAssignment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClusterPrincipalAssignment resources.
 */
export interface ClusterPrincipalAssignmentState {
    /**
     * The name of the cluster in which to create the resource. Changing this forces a new resource to be created.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The name of the Kusto cluster principal assignment. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The object id of the principal. Changing this forces a new resource to be created.
     */
    principalId?: pulumi.Input<string>;
    /**
     * The name of the principal.
     */
    principalName?: pulumi.Input<string>;
    /**
     * The type of the principal. Valid values include `App`, `Group`, `User`. Changing this forces a new resource to be created.
     */
    principalType?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the resource. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The cluster role assigned to the principal. Valid values include `AllDatabasesAdmin`, `AllDatabasesViewer`, and `AllDatabasesMonitor`. Changing this forces a new resource to be created.
     */
    role?: pulumi.Input<string>;
    /**
     * The tenant id in which the principal resides. Changing this forces a new resource to be created.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * The name of the tenant.
     */
    tenantName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ClusterPrincipalAssignment resource.
 */
export interface ClusterPrincipalAssignmentArgs {
    /**
     * The name of the cluster in which to create the resource. Changing this forces a new resource to be created.
     */
    clusterName: pulumi.Input<string>;
    /**
     * The name of the Kusto cluster principal assignment. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The object id of the principal. Changing this forces a new resource to be created.
     */
    principalId: pulumi.Input<string>;
    /**
     * The type of the principal. Valid values include `App`, `Group`, `User`. Changing this forces a new resource to be created.
     */
    principalType: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the resource. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The cluster role assigned to the principal. Valid values include `AllDatabasesAdmin`, `AllDatabasesViewer`, and `AllDatabasesMonitor`. Changing this forces a new resource to be created.
     */
    role: pulumi.Input<string>;
    /**
     * The tenant id in which the principal resides. Changing this forces a new resource to be created.
     */
    tenantId: pulumi.Input<string>;
}
