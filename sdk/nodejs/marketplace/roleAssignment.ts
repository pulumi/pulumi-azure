// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Assigns a given Principal (User or Group) to a given Role in a Private Azure Marketplace.
 *
 * ## Example Usage
 *
 * ### Using A Role Definition Name)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.core.getClientConfig({});
 * const exampleRoleAssignment = new azure.marketplace.RoleAssignment("example", {
 *     roleDefinitionName: "Marketplace Admin",
 *     principalId: example.then(example => example.objectId),
 * });
 * ```
 *
 * ### Using A Role Definition ID)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.core.getClientConfig({});
 * const exampleGetRoleDefinition = azure.authorization.getRoleDefinition({
 *     name: "Log Analytics Reader",
 * });
 * const exampleRoleAssignment = new azure.marketplace.RoleAssignment("example", {
 *     roleDefinitionId: exampleGetRoleDefinition.then(exampleGetRoleDefinition => exampleGetRoleDefinition.id),
 *     principalId: example.then(example => example.objectId),
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Authorization` - 2022-05-01-preview, 2022-04-01
 *
 * ## Import
 *
 * Role Assignments can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:marketplace/roleAssignment:RoleAssignment example /providers/Microsoft.Marketplace/providers/Microsoft.Authorization/roleAssignments/00000000-0000-0000-0000-000000000000
 * ```
 *
 * text
 *
 * /providers/Microsoft.Marketplace/providers/Microsoft.Authorization/roleAssignments/00000000-0000-0000-0000-000000000000|00000000-0000-0000-0000-000000000000
 */
export class RoleAssignment extends pulumi.CustomResource {
    /**
     * Get an existing RoleAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoleAssignmentState, opts?: pulumi.CustomResourceOptions): RoleAssignment {
        return new RoleAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:marketplace/roleAssignment:RoleAssignment';

    /**
     * Returns true if the given object is an instance of RoleAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RoleAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RoleAssignment.__pulumiType;
    }

    /**
     * The condition that limits the resources that the role can be assigned to. Changing this forces a new resource to be created.
     */
    declare public readonly condition: pulumi.Output<string | undefined>;
    /**
     * The version of the condition. Possible values are `1.0` or `2.0`. Changing this forces a new resource to be created.
     */
    declare public readonly conditionVersion: pulumi.Output<string | undefined>;
    /**
     * The delegated Azure Resource ID which contains a Managed Identity. Changing this forces a new resource to be created.
     *
     * > **Note:** This field is only used in cross tenant scenarios.
     */
    declare public readonly delegatedManagedIdentityResourceId: pulumi.Output<string | undefined>;
    /**
     * The description for this Role Assignment. Changing this forces a new resource to be created.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * A unique UUID/GUID for this Role Assignment - one will be generated if not specified. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID of the Principal (User, Group or Service Principal) to assign the Role Definition to. Changing this forces a new resource to be created.
     *
     * > **Note:** The Principal ID is also known as the Object ID (i.e. not the "Application ID" for applications). To assign Azure roles, the Principal must have `Microsoft.Authorization/roleAssignments/write` permissions. See [documentation](https://learn.microsoft.com/en-us/azure/role-based-access-control/role-assignments-portal) for more information.
     */
    declare public readonly principalId: pulumi.Output<string>;
    /**
     * The type of the `principalId`, e.g. User, Group, Service Principal, Application, etc.
     */
    declare public /*out*/ readonly principalType: pulumi.Output<string>;
    /**
     * The Scoped-ID of the Role Definition. Changing this forces a new resource to be created. Conflicts with `roleDefinitionName`.
     */
    declare public readonly roleDefinitionId: pulumi.Output<string | undefined>;
    /**
     * The name of a built-in Role. Changing this forces a new resource to be created. Conflicts with `roleDefinitionId`.
     *
     * > **Note:** To assign `Marketplace Admin` role, the calling Principal must first be assigned Privileged Role Administrator (like `Owner` role) or Global Administrator. See [documentation](https://learn.microsoft.com/en-us/marketplace/create-manage-private-azure-marketplace-new#prerequisites) for more information.
     */
    declare public readonly roleDefinitionName: pulumi.Output<string | undefined>;
    /**
     * If the `principalId` is a newly provisioned `Service Principal` set this value to `true` to skip the `Azure Active Directory` check which may fail due to replication lag. This argument is only valid if the `principalId` is a `Service Principal` identity. Defaults to `false`. Changing this forces a new resource to be created.
     *
     * > **Note:** This field takes effect only when `principalId` is a `Service Principal` identity.
     */
    declare public readonly skipServicePrincipalAadCheck: pulumi.Output<boolean | undefined>;

    /**
     * Create a RoleAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoleAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoleAssignmentArgs | RoleAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoleAssignmentState | undefined;
            resourceInputs["condition"] = state?.condition;
            resourceInputs["conditionVersion"] = state?.conditionVersion;
            resourceInputs["delegatedManagedIdentityResourceId"] = state?.delegatedManagedIdentityResourceId;
            resourceInputs["description"] = state?.description;
            resourceInputs["name"] = state?.name;
            resourceInputs["principalId"] = state?.principalId;
            resourceInputs["principalType"] = state?.principalType;
            resourceInputs["roleDefinitionId"] = state?.roleDefinitionId;
            resourceInputs["roleDefinitionName"] = state?.roleDefinitionName;
            resourceInputs["skipServicePrincipalAadCheck"] = state?.skipServicePrincipalAadCheck;
        } else {
            const args = argsOrState as RoleAssignmentArgs | undefined;
            if (args?.principalId === undefined && !opts.urn) {
                throw new Error("Missing required property 'principalId'");
            }
            resourceInputs["condition"] = args?.condition;
            resourceInputs["conditionVersion"] = args?.conditionVersion;
            resourceInputs["delegatedManagedIdentityResourceId"] = args?.delegatedManagedIdentityResourceId;
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["principalId"] = args?.principalId;
            resourceInputs["roleDefinitionId"] = args?.roleDefinitionId;
            resourceInputs["roleDefinitionName"] = args?.roleDefinitionName;
            resourceInputs["skipServicePrincipalAadCheck"] = args?.skipServicePrincipalAadCheck;
            resourceInputs["principalType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RoleAssignment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RoleAssignment resources.
 */
export interface RoleAssignmentState {
    /**
     * The condition that limits the resources that the role can be assigned to. Changing this forces a new resource to be created.
     */
    condition?: pulumi.Input<string>;
    /**
     * The version of the condition. Possible values are `1.0` or `2.0`. Changing this forces a new resource to be created.
     */
    conditionVersion?: pulumi.Input<string>;
    /**
     * The delegated Azure Resource ID which contains a Managed Identity. Changing this forces a new resource to be created.
     *
     * > **Note:** This field is only used in cross tenant scenarios.
     */
    delegatedManagedIdentityResourceId?: pulumi.Input<string>;
    /**
     * The description for this Role Assignment. Changing this forces a new resource to be created.
     */
    description?: pulumi.Input<string>;
    /**
     * A unique UUID/GUID for this Role Assignment - one will be generated if not specified. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Principal (User, Group or Service Principal) to assign the Role Definition to. Changing this forces a new resource to be created.
     *
     * > **Note:** The Principal ID is also known as the Object ID (i.e. not the "Application ID" for applications). To assign Azure roles, the Principal must have `Microsoft.Authorization/roleAssignments/write` permissions. See [documentation](https://learn.microsoft.com/en-us/azure/role-based-access-control/role-assignments-portal) for more information.
     */
    principalId?: pulumi.Input<string>;
    /**
     * The type of the `principalId`, e.g. User, Group, Service Principal, Application, etc.
     */
    principalType?: pulumi.Input<string>;
    /**
     * The Scoped-ID of the Role Definition. Changing this forces a new resource to be created. Conflicts with `roleDefinitionName`.
     */
    roleDefinitionId?: pulumi.Input<string>;
    /**
     * The name of a built-in Role. Changing this forces a new resource to be created. Conflicts with `roleDefinitionId`.
     *
     * > **Note:** To assign `Marketplace Admin` role, the calling Principal must first be assigned Privileged Role Administrator (like `Owner` role) or Global Administrator. See [documentation](https://learn.microsoft.com/en-us/marketplace/create-manage-private-azure-marketplace-new#prerequisites) for more information.
     */
    roleDefinitionName?: pulumi.Input<string>;
    /**
     * If the `principalId` is a newly provisioned `Service Principal` set this value to `true` to skip the `Azure Active Directory` check which may fail due to replication lag. This argument is only valid if the `principalId` is a `Service Principal` identity. Defaults to `false`. Changing this forces a new resource to be created.
     *
     * > **Note:** This field takes effect only when `principalId` is a `Service Principal` identity.
     */
    skipServicePrincipalAadCheck?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a RoleAssignment resource.
 */
export interface RoleAssignmentArgs {
    /**
     * The condition that limits the resources that the role can be assigned to. Changing this forces a new resource to be created.
     */
    condition?: pulumi.Input<string>;
    /**
     * The version of the condition. Possible values are `1.0` or `2.0`. Changing this forces a new resource to be created.
     */
    conditionVersion?: pulumi.Input<string>;
    /**
     * The delegated Azure Resource ID which contains a Managed Identity. Changing this forces a new resource to be created.
     *
     * > **Note:** This field is only used in cross tenant scenarios.
     */
    delegatedManagedIdentityResourceId?: pulumi.Input<string>;
    /**
     * The description for this Role Assignment. Changing this forces a new resource to be created.
     */
    description?: pulumi.Input<string>;
    /**
     * A unique UUID/GUID for this Role Assignment - one will be generated if not specified. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Principal (User, Group or Service Principal) to assign the Role Definition to. Changing this forces a new resource to be created.
     *
     * > **Note:** The Principal ID is also known as the Object ID (i.e. not the "Application ID" for applications). To assign Azure roles, the Principal must have `Microsoft.Authorization/roleAssignments/write` permissions. See [documentation](https://learn.microsoft.com/en-us/azure/role-based-access-control/role-assignments-portal) for more information.
     */
    principalId: pulumi.Input<string>;
    /**
     * The Scoped-ID of the Role Definition. Changing this forces a new resource to be created. Conflicts with `roleDefinitionName`.
     */
    roleDefinitionId?: pulumi.Input<string>;
    /**
     * The name of a built-in Role. Changing this forces a new resource to be created. Conflicts with `roleDefinitionId`.
     *
     * > **Note:** To assign `Marketplace Admin` role, the calling Principal must first be assigned Privileged Role Administrator (like `Owner` role) or Global Administrator. See [documentation](https://learn.microsoft.com/en-us/marketplace/create-manage-private-azure-marketplace-new#prerequisites) for more information.
     */
    roleDefinitionName?: pulumi.Input<string>;
    /**
     * If the `principalId` is a newly provisioned `Service Principal` set this value to `true` to skip the `Azure Active Directory` check which may fail due to replication lag. This argument is only valid if the `principalId` is a `Service Principal` identity. Defaults to `false`. Changing this forces a new resource to be created.
     *
     * > **Note:** This field takes effect only when `principalId` is a `Service Principal` identity.
     */
    skipServicePrincipalAadCheck?: pulumi.Input<boolean>;
}
