// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Search Service.
 */
export function getService(args: GetServiceArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure:search/getService:getService", {
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

/**
 * A collection of arguments for invoking getService.
 */
export interface GetServiceArgs {
    /**
     * The Name of the Search Service.
     */
    name: string;
    /**
     * The name of the Resource Group where the Search Service exists.
     */
    resourceGroupName: string;
}

/**
 * A collection of values returned by getService.
 */
export interface GetServiceResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * An `identity` block as defined below.
     */
    readonly identities: outputs.search.GetServiceIdentity[];
    /**
     * The name of this Query Key.
     */
    readonly name: string;
    /**
     * The number of partitions which have been created.
     */
    readonly partitionCount: number;
    /**
     * The Primary Key used for Search Service Administration.
     */
    readonly primaryKey: string;
    /**
     * Whether or not public network access is enabled for this resource.
     */
    readonly publicNetworkAccessEnabled: boolean;
    /**
     * A `queryKeys` block as defined below.
     */
    readonly queryKeys: outputs.search.GetServiceQueryKey[];
    /**
     * The number of replica's which have been created.
     */
    readonly replicaCount: number;
    readonly resourceGroupName: string;
    /**
     * The Secondary Key used for Search Service Administration.
     */
    readonly secondaryKey: string;
}
/**
 * Manages a Search Service.
 */
export function getServiceOutput(args: GetServiceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceResult> {
    return pulumi.output(args).apply((a: any) => getService(a, opts))
}

/**
 * A collection of arguments for invoking getService.
 */
export interface GetServiceOutputArgs {
    /**
     * The Name of the Search Service.
     */
    name: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Search Service exists.
     */
    resourceGroupName: pulumi.Input<string>;
}
