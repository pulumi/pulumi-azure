// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Purview Account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleAccount = new azure.purview.Account("example", {
 *     name: "example",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Purview` - 2021-12-01
 *
 * ## Import
 *
 * Purview Accounts can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:purview/account:Account example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Purview/accounts/account1
 * ```
 */
export class Account extends pulumi.CustomResource {
    /**
     * Get an existing Account resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountState, opts?: pulumi.CustomResourceOptions): Account {
        return new Account(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:purview/account:Account';

    /**
     * Returns true if the given object is an instance of Account.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Account {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Account.__pulumiType;
    }

    /**
     * Atlas Kafka endpoint primary connection string.
     */
    declare public /*out*/ readonly atlasKafkaEndpointPrimaryConnectionString: pulumi.Output<string>;
    /**
     * Atlas Kafka endpoint secondary connection string.
     */
    declare public /*out*/ readonly atlasKafkaEndpointSecondaryConnectionString: pulumi.Output<string>;
    /**
     * Configured in AWS to allow use of the role arn used for scanning
     */
    declare public /*out*/ readonly awsExternalId: pulumi.Output<string>;
    /**
     * Catalog endpoint.
     */
    declare public /*out*/ readonly catalogEndpoint: pulumi.Output<string>;
    /**
     * Guardian endpoint.
     */
    declare public /*out*/ readonly guardianEndpoint: pulumi.Output<string>;
    /**
     * An `identity` block as defined below.
     */
    declare public readonly identity: pulumi.Output<outputs.purview.AccountIdentity>;
    /**
     * The Azure Region where the Purview Account should exist. Changing this forces a new Purview Account to be created.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * Whether the Purview Account should create a managed Event Hub Namespace. Defaults to `true`.
     *
     * > **Note:** `managedEventHubEnabled` must be `false` in order to use a Kafka Configuration with the Purview Account.
     */
    declare public readonly managedEventHubEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The name which should be used for the new Resource Group where Purview Account creates the managed resources. Changing this forces a new Purview Account to be created.
     *
     * > **Note:** `managedResourceGroupName` must be a new Resource Group.
     */
    declare public readonly managedResourceGroupName: pulumi.Output<string>;
    /**
     * A `managedResources` block as defined below.
     */
    declare public /*out*/ readonly managedResources: pulumi.Output<outputs.purview.AccountManagedResource[]>;
    /**
     * The name which should be used for this Purview Account. Changing this forces a new Purview Account to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Should the Purview Account be visible to the public network? Defaults to `true`.
     */
    declare public readonly publicNetworkEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The name of the Resource Group where the Purview Account should exist. Changing this forces a new Purview Account to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * Scan endpoint.
     */
    declare public /*out*/ readonly scanEndpoint: pulumi.Output<string>;
    /**
     * A mapping of tags which should be assigned to the Purview Account.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Account resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccountArgs | AccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccountState | undefined;
            resourceInputs["atlasKafkaEndpointPrimaryConnectionString"] = state?.atlasKafkaEndpointPrimaryConnectionString;
            resourceInputs["atlasKafkaEndpointSecondaryConnectionString"] = state?.atlasKafkaEndpointSecondaryConnectionString;
            resourceInputs["awsExternalId"] = state?.awsExternalId;
            resourceInputs["catalogEndpoint"] = state?.catalogEndpoint;
            resourceInputs["guardianEndpoint"] = state?.guardianEndpoint;
            resourceInputs["identity"] = state?.identity;
            resourceInputs["location"] = state?.location;
            resourceInputs["managedEventHubEnabled"] = state?.managedEventHubEnabled;
            resourceInputs["managedResourceGroupName"] = state?.managedResourceGroupName;
            resourceInputs["managedResources"] = state?.managedResources;
            resourceInputs["name"] = state?.name;
            resourceInputs["publicNetworkEnabled"] = state?.publicNetworkEnabled;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["scanEndpoint"] = state?.scanEndpoint;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as AccountArgs | undefined;
            if (args?.identity === undefined && !opts.urn) {
                throw new Error("Missing required property 'identity'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["identity"] = args?.identity;
            resourceInputs["location"] = args?.location;
            resourceInputs["managedEventHubEnabled"] = args?.managedEventHubEnabled;
            resourceInputs["managedResourceGroupName"] = args?.managedResourceGroupName;
            resourceInputs["name"] = args?.name;
            resourceInputs["publicNetworkEnabled"] = args?.publicNetworkEnabled;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["atlasKafkaEndpointPrimaryConnectionString"] = undefined /*out*/;
            resourceInputs["atlasKafkaEndpointSecondaryConnectionString"] = undefined /*out*/;
            resourceInputs["awsExternalId"] = undefined /*out*/;
            resourceInputs["catalogEndpoint"] = undefined /*out*/;
            resourceInputs["guardianEndpoint"] = undefined /*out*/;
            resourceInputs["managedResources"] = undefined /*out*/;
            resourceInputs["scanEndpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["atlasKafkaEndpointPrimaryConnectionString", "atlasKafkaEndpointSecondaryConnectionString"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Account.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Account resources.
 */
export interface AccountState {
    /**
     * Atlas Kafka endpoint primary connection string.
     */
    atlasKafkaEndpointPrimaryConnectionString?: pulumi.Input<string>;
    /**
     * Atlas Kafka endpoint secondary connection string.
     */
    atlasKafkaEndpointSecondaryConnectionString?: pulumi.Input<string>;
    /**
     * Configured in AWS to allow use of the role arn used for scanning
     */
    awsExternalId?: pulumi.Input<string>;
    /**
     * Catalog endpoint.
     */
    catalogEndpoint?: pulumi.Input<string>;
    /**
     * Guardian endpoint.
     */
    guardianEndpoint?: pulumi.Input<string>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.purview.AccountIdentity>;
    /**
     * The Azure Region where the Purview Account should exist. Changing this forces a new Purview Account to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Whether the Purview Account should create a managed Event Hub Namespace. Defaults to `true`.
     *
     * > **Note:** `managedEventHubEnabled` must be `false` in order to use a Kafka Configuration with the Purview Account.
     */
    managedEventHubEnabled?: pulumi.Input<boolean>;
    /**
     * The name which should be used for the new Resource Group where Purview Account creates the managed resources. Changing this forces a new Purview Account to be created.
     *
     * > **Note:** `managedResourceGroupName` must be a new Resource Group.
     */
    managedResourceGroupName?: pulumi.Input<string>;
    /**
     * A `managedResources` block as defined below.
     */
    managedResources?: pulumi.Input<pulumi.Input<inputs.purview.AccountManagedResource>[]>;
    /**
     * The name which should be used for this Purview Account. Changing this forces a new Purview Account to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Should the Purview Account be visible to the public network? Defaults to `true`.
     */
    publicNetworkEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the Resource Group where the Purview Account should exist. Changing this forces a new Purview Account to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * Scan endpoint.
     */
    scanEndpoint?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Purview Account.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Account resource.
 */
export interface AccountArgs {
    /**
     * An `identity` block as defined below.
     */
    identity: pulumi.Input<inputs.purview.AccountIdentity>;
    /**
     * The Azure Region where the Purview Account should exist. Changing this forces a new Purview Account to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Whether the Purview Account should create a managed Event Hub Namespace. Defaults to `true`.
     *
     * > **Note:** `managedEventHubEnabled` must be `false` in order to use a Kafka Configuration with the Purview Account.
     */
    managedEventHubEnabled?: pulumi.Input<boolean>;
    /**
     * The name which should be used for the new Resource Group where Purview Account creates the managed resources. Changing this forces a new Purview Account to be created.
     *
     * > **Note:** `managedResourceGroupName` must be a new Resource Group.
     */
    managedResourceGroupName?: pulumi.Input<string>;
    /**
     * The name which should be used for this Purview Account. Changing this forces a new Purview Account to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Should the Purview Account be visible to the public network? Defaults to `true`.
     */
    publicNetworkEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the Resource Group where the Purview Account should exist. Changing this forces a new Purview Account to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Purview Account.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
