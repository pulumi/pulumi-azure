// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Manages a CDN FrontDoor Origin Group.
 *
 * ## Import
 *
 * CDN FrontDoor Origin Groups can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:cdn/frontdoorOriginGroup:FrontdoorOriginGroup example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Cdn/profiles/profile1/originGroups/originGroup1
 * ```
 */
export class FrontdoorOriginGroup extends pulumi.CustomResource {
    /**
     * Get an existing FrontdoorOriginGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FrontdoorOriginGroupState, opts?: pulumi.CustomResourceOptions): FrontdoorOriginGroup {
        return new FrontdoorOriginGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:cdn/frontdoorOriginGroup:FrontdoorOriginGroup';

    /**
     * Returns true if the given object is an instance of FrontdoorOriginGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FrontdoorOriginGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FrontdoorOriginGroup.__pulumiType;
    }

    /**
     * The ID of the CDN FrontDoor Profile within which this CDN FrontDoor Origin Group should exist. Changing this forces a new CDN FrontDoor Origin Group to be created.
     */
    public readonly cdnFrontdoorProfileId!: pulumi.Output<string>;
    /**
     * A `healthProbe` block as defined below.
     */
    public readonly healthProbe!: pulumi.Output<outputs.cdn.FrontdoorOriginGroupHealthProbe | undefined>;
    /**
     * A `loadBalancing` block as defined below.
     */
    public readonly loadBalancing!: pulumi.Output<outputs.cdn.FrontdoorOriginGroupLoadBalancing>;
    /**
     * The name which should be used for this CDN FrontDoor Origin Group. Changing this forces a new CDN FrontDoor Origin Group to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the amount of time which should elapse before shifting traffic to another endpoint when a healthy endpoint becomes unhealthy or a new endpoint is added. Possible values are between `0` and `50` minutes (inclusive). Default is `10` minutes.
     */
    public readonly restoreTrafficTimeToHealedOrNewEndpointInMinutes!: pulumi.Output<number | undefined>;
    /**
     * Specifies whether session affinity should be enabled on this host. Defaults to `true`.
     */
    public readonly sessionAffinityEnabled!: pulumi.Output<boolean | undefined>;

    /**
     * Create a FrontdoorOriginGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FrontdoorOriginGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FrontdoorOriginGroupArgs | FrontdoorOriginGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FrontdoorOriginGroupState | undefined;
            resourceInputs["cdnFrontdoorProfileId"] = state ? state.cdnFrontdoorProfileId : undefined;
            resourceInputs["healthProbe"] = state ? state.healthProbe : undefined;
            resourceInputs["loadBalancing"] = state ? state.loadBalancing : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["restoreTrafficTimeToHealedOrNewEndpointInMinutes"] = state ? state.restoreTrafficTimeToHealedOrNewEndpointInMinutes : undefined;
            resourceInputs["sessionAffinityEnabled"] = state ? state.sessionAffinityEnabled : undefined;
        } else {
            const args = argsOrState as FrontdoorOriginGroupArgs | undefined;
            if ((!args || args.cdnFrontdoorProfileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cdnFrontdoorProfileId'");
            }
            if ((!args || args.loadBalancing === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancing'");
            }
            resourceInputs["cdnFrontdoorProfileId"] = args ? args.cdnFrontdoorProfileId : undefined;
            resourceInputs["healthProbe"] = args ? args.healthProbe : undefined;
            resourceInputs["loadBalancing"] = args ? args.loadBalancing : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["restoreTrafficTimeToHealedOrNewEndpointInMinutes"] = args ? args.restoreTrafficTimeToHealedOrNewEndpointInMinutes : undefined;
            resourceInputs["sessionAffinityEnabled"] = args ? args.sessionAffinityEnabled : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FrontdoorOriginGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FrontdoorOriginGroup resources.
 */
export interface FrontdoorOriginGroupState {
    /**
     * The ID of the CDN FrontDoor Profile within which this CDN FrontDoor Origin Group should exist. Changing this forces a new CDN FrontDoor Origin Group to be created.
     */
    cdnFrontdoorProfileId?: pulumi.Input<string>;
    /**
     * A `healthProbe` block as defined below.
     */
    healthProbe?: pulumi.Input<inputs.cdn.FrontdoorOriginGroupHealthProbe>;
    /**
     * A `loadBalancing` block as defined below.
     */
    loadBalancing?: pulumi.Input<inputs.cdn.FrontdoorOriginGroupLoadBalancing>;
    /**
     * The name which should be used for this CDN FrontDoor Origin Group. Changing this forces a new CDN FrontDoor Origin Group to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the amount of time which should elapse before shifting traffic to another endpoint when a healthy endpoint becomes unhealthy or a new endpoint is added. Possible values are between `0` and `50` minutes (inclusive). Default is `10` minutes.
     */
    restoreTrafficTimeToHealedOrNewEndpointInMinutes?: pulumi.Input<number>;
    /**
     * Specifies whether session affinity should be enabled on this host. Defaults to `true`.
     */
    sessionAffinityEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a FrontdoorOriginGroup resource.
 */
export interface FrontdoorOriginGroupArgs {
    /**
     * The ID of the CDN FrontDoor Profile within which this CDN FrontDoor Origin Group should exist. Changing this forces a new CDN FrontDoor Origin Group to be created.
     */
    cdnFrontdoorProfileId: pulumi.Input<string>;
    /**
     * A `healthProbe` block as defined below.
     */
    healthProbe?: pulumi.Input<inputs.cdn.FrontdoorOriginGroupHealthProbe>;
    /**
     * A `loadBalancing` block as defined below.
     */
    loadBalancing: pulumi.Input<inputs.cdn.FrontdoorOriginGroupLoadBalancing>;
    /**
     * The name which should be used for this CDN FrontDoor Origin Group. Changing this forces a new CDN FrontDoor Origin Group to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the amount of time which should elapse before shifting traffic to another endpoint when a healthy endpoint becomes unhealthy or a new endpoint is added. Possible values are between `0` and `50` minutes (inclusive). Default is `10` minutes.
     */
    restoreTrafficTimeToHealedOrNewEndpointInMinutes?: pulumi.Input<number>;
    /**
     * Specifies whether session affinity should be enabled on this host. Defaults to `true`.
     */
    sessionAffinityEnabled?: pulumi.Input<boolean>;
}
