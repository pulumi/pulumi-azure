// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A CDN (classic) Endpoint is the entity within a CDN Profile containing configuration information regarding caching behaviours and origins. The CDN Endpoint is exposed using the URL format `<endpointname>.azureedge.net`.
 *
 * !> **Note:** Azure rolled out a breaking change on Friday 9th April 2021 which may cause issues with the CDN/FrontDoor resources. More information is available in this GitHub issue - unfortunately this may necessitate a breaking change to the CDN (classic) and FrontDoor (classic) resources, more information will be posted in the GitHub issue as the necessary changes are identified.
 *
 * !> **Note:** Support for the CDN (classic) `sku` `Standard_Akamai` was deprecated from Azure on `October 31, 2023` and is no longer available.
 *
 * !> **Note:** Support for the CDN (classic) `sku` `Standard_Verizon` and `Premium_Verizon` was deprecated from Azure on `January 15, 2025` and is no longer available.
 *
 * !> **Note:** Support for the CDN (classic) `sku` `Standard_Microsoft` and `Standard_ChinaCdn` will be deprecated from Azure on `October 1, 2025` and will no longer be available, however modifications to existing CDN (classic) resources will continue to be supported until the API reaches full retirement on `September 30, 2027`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleProfile = new azure.cdn.Profile("example", {
 *     name: "example-cdn",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: "Standard_Microsoft",
 * });
 * const exampleEndpoint = new azure.cdn.Endpoint("example", {
 *     name: "example",
 *     profileName: exampleProfile.name,
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     origins: [{
 *         name: "example",
 *         hostName: "www.contoso.com",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * CDN Endpoints can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:cdn/endpoint:Endpoint example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Cdn/profiles/myprofile1/endpoints/myendpoint1
 * ```
 */
export class Endpoint extends pulumi.CustomResource {
    /**
     * Get an existing Endpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EndpointState, opts?: pulumi.CustomResourceOptions): Endpoint {
        return new Endpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:cdn/endpoint:Endpoint';

    /**
     * Returns true if the given object is an instance of Endpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Endpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Endpoint.__pulumiType;
    }

    /**
     * An array of strings that indicates a content types on which compression will be applied. The value for the elements should be MIME types.
     */
    declare public readonly contentTypesToCompresses: pulumi.Output<string[] | undefined>;
    /**
     * Rules for the rules engine. An endpoint can contain up until 4 of those rules that consist of conditions and actions. A `deliveryRule` blocks as defined below.
     */
    declare public readonly deliveryRules: pulumi.Output<outputs.cdn.EndpointDeliveryRule[] | undefined>;
    /**
     * The Fully Qualified Domain Name of the CDN Endpoint.
     */
    declare public /*out*/ readonly fqdn: pulumi.Output<string>;
    /**
     * A set of Geo Filters for this CDN Endpoint. Each `geoFilter` block supports fields documented below.
     */
    declare public readonly geoFilters: pulumi.Output<outputs.cdn.EndpointGeoFilter[] | undefined>;
    /**
     * Actions that are valid for all resources regardless of any conditions. A `globalDeliveryRule` block as defined below.
     */
    declare public readonly globalDeliveryRule: pulumi.Output<outputs.cdn.EndpointGlobalDeliveryRule | undefined>;
    /**
     * Indicates whether compression is to be enabled.
     */
    declare public readonly isCompressionEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Specifies if http allowed. Defaults to `true`.
     */
    declare public readonly isHttpAllowed: pulumi.Output<boolean | undefined>;
    /**
     * Specifies if https allowed. Defaults to `true`.
     */
    declare public readonly isHttpsAllowed: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * Specifies the name of the CDN Endpoint. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * What types of optimization should this CDN Endpoint optimize for? Possible values include `DynamicSiteAcceleration`, `GeneralMediaStreaming`, `GeneralWebDelivery`, `LargeFileDownload` and `VideoOnDemandMediaStreaming`.
     */
    declare public readonly optimizationType: pulumi.Output<string | undefined>;
    /**
     * The host header CDN provider will send along with content requests to origins.
     */
    declare public readonly originHostHeader: pulumi.Output<string | undefined>;
    /**
     * The path used at for origin requests.
     */
    declare public readonly originPath: pulumi.Output<string | undefined>;
    /**
     * The set of origins of the CDN endpoint. When multiple origins exist, the first origin will be used as primary and rest will be used as failover options. Each `origin` block supports fields documented below. Changing this forces a new resource to be created.
     */
    declare public readonly origins: pulumi.Output<outputs.cdn.EndpointOrigin[]>;
    /**
     * the path to a file hosted on the origin which helps accelerate delivery of the dynamic content and calculate the most optimal routes for the CDN. This is relative to the `originPath`.
     *
     * > **Note:** `globalDeliveryRule` and `deliveryRule` are currently only available for `Microsoft_Standard` CDN profiles.
     */
    declare public readonly probePath: pulumi.Output<string | undefined>;
    /**
     * The CDN Profile to which to attach the CDN Endpoint. Changing this forces a new resource to be created.
     */
    declare public readonly profileName: pulumi.Output<string>;
    /**
     * Sets query string caching behavior. Allowed values are `IgnoreQueryString`, `BypassCaching` and `UseQueryString`. `NotSet` value can be used for `Premium Verizon` CDN profile. Defaults to `IgnoreQueryString`.
     */
    declare public readonly querystringCachingBehaviour: pulumi.Output<string | undefined>;
    /**
     * The name of the resource group in which to create the CDN Endpoint. Changing this forces a new resource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Endpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EndpointArgs | EndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EndpointState | undefined;
            resourceInputs["contentTypesToCompresses"] = state?.contentTypesToCompresses;
            resourceInputs["deliveryRules"] = state?.deliveryRules;
            resourceInputs["fqdn"] = state?.fqdn;
            resourceInputs["geoFilters"] = state?.geoFilters;
            resourceInputs["globalDeliveryRule"] = state?.globalDeliveryRule;
            resourceInputs["isCompressionEnabled"] = state?.isCompressionEnabled;
            resourceInputs["isHttpAllowed"] = state?.isHttpAllowed;
            resourceInputs["isHttpsAllowed"] = state?.isHttpsAllowed;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["optimizationType"] = state?.optimizationType;
            resourceInputs["originHostHeader"] = state?.originHostHeader;
            resourceInputs["originPath"] = state?.originPath;
            resourceInputs["origins"] = state?.origins;
            resourceInputs["probePath"] = state?.probePath;
            resourceInputs["profileName"] = state?.profileName;
            resourceInputs["querystringCachingBehaviour"] = state?.querystringCachingBehaviour;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as EndpointArgs | undefined;
            if (args?.origins === undefined && !opts.urn) {
                throw new Error("Missing required property 'origins'");
            }
            if (args?.profileName === undefined && !opts.urn) {
                throw new Error("Missing required property 'profileName'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["contentTypesToCompresses"] = args?.contentTypesToCompresses;
            resourceInputs["deliveryRules"] = args?.deliveryRules;
            resourceInputs["geoFilters"] = args?.geoFilters;
            resourceInputs["globalDeliveryRule"] = args?.globalDeliveryRule;
            resourceInputs["isCompressionEnabled"] = args?.isCompressionEnabled;
            resourceInputs["isHttpAllowed"] = args?.isHttpAllowed;
            resourceInputs["isHttpsAllowed"] = args?.isHttpsAllowed;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["optimizationType"] = args?.optimizationType;
            resourceInputs["originHostHeader"] = args?.originHostHeader;
            resourceInputs["originPath"] = args?.originPath;
            resourceInputs["origins"] = args?.origins;
            resourceInputs["probePath"] = args?.probePath;
            resourceInputs["profileName"] = args?.profileName;
            resourceInputs["querystringCachingBehaviour"] = args?.querystringCachingBehaviour;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["fqdn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Endpoint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Endpoint resources.
 */
export interface EndpointState {
    /**
     * An array of strings that indicates a content types on which compression will be applied. The value for the elements should be MIME types.
     */
    contentTypesToCompresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Rules for the rules engine. An endpoint can contain up until 4 of those rules that consist of conditions and actions. A `deliveryRule` blocks as defined below.
     */
    deliveryRules?: pulumi.Input<pulumi.Input<inputs.cdn.EndpointDeliveryRule>[]>;
    /**
     * The Fully Qualified Domain Name of the CDN Endpoint.
     */
    fqdn?: pulumi.Input<string>;
    /**
     * A set of Geo Filters for this CDN Endpoint. Each `geoFilter` block supports fields documented below.
     */
    geoFilters?: pulumi.Input<pulumi.Input<inputs.cdn.EndpointGeoFilter>[]>;
    /**
     * Actions that are valid for all resources regardless of any conditions. A `globalDeliveryRule` block as defined below.
     */
    globalDeliveryRule?: pulumi.Input<inputs.cdn.EndpointGlobalDeliveryRule>;
    /**
     * Indicates whether compression is to be enabled.
     */
    isCompressionEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies if http allowed. Defaults to `true`.
     */
    isHttpAllowed?: pulumi.Input<boolean>;
    /**
     * Specifies if https allowed. Defaults to `true`.
     */
    isHttpsAllowed?: pulumi.Input<boolean>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of the CDN Endpoint. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * What types of optimization should this CDN Endpoint optimize for? Possible values include `DynamicSiteAcceleration`, `GeneralMediaStreaming`, `GeneralWebDelivery`, `LargeFileDownload` and `VideoOnDemandMediaStreaming`.
     */
    optimizationType?: pulumi.Input<string>;
    /**
     * The host header CDN provider will send along with content requests to origins.
     */
    originHostHeader?: pulumi.Input<string>;
    /**
     * The path used at for origin requests.
     */
    originPath?: pulumi.Input<string>;
    /**
     * The set of origins of the CDN endpoint. When multiple origins exist, the first origin will be used as primary and rest will be used as failover options. Each `origin` block supports fields documented below. Changing this forces a new resource to be created.
     */
    origins?: pulumi.Input<pulumi.Input<inputs.cdn.EndpointOrigin>[]>;
    /**
     * the path to a file hosted on the origin which helps accelerate delivery of the dynamic content and calculate the most optimal routes for the CDN. This is relative to the `originPath`.
     *
     * > **Note:** `globalDeliveryRule` and `deliveryRule` are currently only available for `Microsoft_Standard` CDN profiles.
     */
    probePath?: pulumi.Input<string>;
    /**
     * The CDN Profile to which to attach the CDN Endpoint. Changing this forces a new resource to be created.
     */
    profileName?: pulumi.Input<string>;
    /**
     * Sets query string caching behavior. Allowed values are `IgnoreQueryString`, `BypassCaching` and `UseQueryString`. `NotSet` value can be used for `Premium Verizon` CDN profile. Defaults to `IgnoreQueryString`.
     */
    querystringCachingBehaviour?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the CDN Endpoint. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Endpoint resource.
 */
export interface EndpointArgs {
    /**
     * An array of strings that indicates a content types on which compression will be applied. The value for the elements should be MIME types.
     */
    contentTypesToCompresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Rules for the rules engine. An endpoint can contain up until 4 of those rules that consist of conditions and actions. A `deliveryRule` blocks as defined below.
     */
    deliveryRules?: pulumi.Input<pulumi.Input<inputs.cdn.EndpointDeliveryRule>[]>;
    /**
     * A set of Geo Filters for this CDN Endpoint. Each `geoFilter` block supports fields documented below.
     */
    geoFilters?: pulumi.Input<pulumi.Input<inputs.cdn.EndpointGeoFilter>[]>;
    /**
     * Actions that are valid for all resources regardless of any conditions. A `globalDeliveryRule` block as defined below.
     */
    globalDeliveryRule?: pulumi.Input<inputs.cdn.EndpointGlobalDeliveryRule>;
    /**
     * Indicates whether compression is to be enabled.
     */
    isCompressionEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies if http allowed. Defaults to `true`.
     */
    isHttpAllowed?: pulumi.Input<boolean>;
    /**
     * Specifies if https allowed. Defaults to `true`.
     */
    isHttpsAllowed?: pulumi.Input<boolean>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of the CDN Endpoint. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * What types of optimization should this CDN Endpoint optimize for? Possible values include `DynamicSiteAcceleration`, `GeneralMediaStreaming`, `GeneralWebDelivery`, `LargeFileDownload` and `VideoOnDemandMediaStreaming`.
     */
    optimizationType?: pulumi.Input<string>;
    /**
     * The host header CDN provider will send along with content requests to origins.
     */
    originHostHeader?: pulumi.Input<string>;
    /**
     * The path used at for origin requests.
     */
    originPath?: pulumi.Input<string>;
    /**
     * The set of origins of the CDN endpoint. When multiple origins exist, the first origin will be used as primary and rest will be used as failover options. Each `origin` block supports fields documented below. Changing this forces a new resource to be created.
     */
    origins: pulumi.Input<pulumi.Input<inputs.cdn.EndpointOrigin>[]>;
    /**
     * the path to a file hosted on the origin which helps accelerate delivery of the dynamic content and calculate the most optimal routes for the CDN. This is relative to the `originPath`.
     *
     * > **Note:** `globalDeliveryRule` and `deliveryRule` are currently only available for `Microsoft_Standard` CDN profiles.
     */
    probePath?: pulumi.Input<string>;
    /**
     * The CDN Profile to which to attach the CDN Endpoint. Changing this forces a new resource to be created.
     */
    profileName: pulumi.Input<string>;
    /**
     * Sets query string caching behavior. Allowed values are `IgnoreQueryString`, `BypassCaching` and `UseQueryString`. `NotSet` value can be used for `Premium Verizon` CDN profile. Defaults to `IgnoreQueryString`.
     */
    querystringCachingBehaviour?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the CDN Endpoint. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
