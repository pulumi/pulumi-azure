// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Front Door (standard/premium) Secret.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as azuread from "@pulumi/azuread";
 * import * as fs from "fs";
 *
 * const current = azure.core.getClientConfig({});
 * const frontdoor = azuread.getServicePrincipal({
 *     displayName: "Microsoft.Azure.Cdn",
 * });
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleKeyVault = new azure.keyvault.KeyVault("exampleKeyVault", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "premium",
 *     softDeleteRetentionDays: 7,
 *     networkAcls: {
 *         defaultAction: "Deny",
 *         bypass: "AzureServices",
 *         ipRules: ["10.0.0.0/24"],
 *     },
 *     accessPolicies: [
 *         {
 *             tenantId: current.then(current => current.tenantId),
 *             objectId: frontdoor.then(frontdoor => frontdoor.objectId),
 *             secretPermissions: ["Get"],
 *         },
 *         {
 *             tenantId: current.then(current => current.tenantId),
 *             objectId: current.then(current => current.objectId),
 *             certificatePermissions: [
 *                 "Get",
 *                 "Import",
 *                 "Delete",
 *                 "Purge",
 *             ],
 *             secretPermissions: ["Get"],
 *         },
 *     ],
 * });
 * const exampleCertificate = new azure.keyvault.Certificate("exampleCertificate", {
 *     keyVaultId: exampleKeyVault.id,
 *     certificate: {
 *         contents: Buffer.from(fs.readFileSync("my-certificate.pfx", 'binary')).toString('base64'),
 *     },
 * });
 * const exampleFrontdoorProfile = new azure.cdn.FrontdoorProfile("exampleFrontdoorProfile", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     skuName: "Standard_AzureFrontDoor",
 * });
 * const exampleFrontdoorSecret = new azure.cdn.FrontdoorSecret("exampleFrontdoorSecret", {
 *     cdnFrontdoorProfileId: exampleFrontdoorProfile.id,
 *     secret: {
 *         customerCertificates: [{
 *             keyVaultCertificateId: exampleCertificate.id,
 *         }],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Front Door Secrets can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:cdn/frontdoorSecret:FrontdoorSecret example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Cdn/profiles/profile1/secrets/secrets1
 * ```
 */
export class FrontdoorSecret extends pulumi.CustomResource {
    /**
     * Get an existing FrontdoorSecret resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FrontdoorSecretState, opts?: pulumi.CustomResourceOptions): FrontdoorSecret {
        return new FrontdoorSecret(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:cdn/frontdoorSecret:FrontdoorSecret';

    /**
     * Returns true if the given object is an instance of FrontdoorSecret.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FrontdoorSecret {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FrontdoorSecret.__pulumiType;
    }

    /**
     * The Resource ID of the Front Door Profile. Changing this forces a new Front Door Secret to be created.
     */
    public readonly cdnFrontdoorProfileId!: pulumi.Output<string>;
    /**
     * The name of the Front Door Profile containing this Front Door Secret.
     */
    public /*out*/ readonly cdnFrontdoorProfileName!: pulumi.Output<string>;
    /**
     * The name which should be used for this Front Door Secret. Possible values must start with a letter or a number, only contain letters, numbers and hyphens and have a length of between 2 and 260 characters. Changing this forces a new Front Door Secret to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A `secret` block as defined below. Changing this forces a new Front Door Secret to be created.
     */
    public readonly secret!: pulumi.Output<outputs.cdn.FrontdoorSecretSecret>;

    /**
     * Create a FrontdoorSecret resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FrontdoorSecretArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FrontdoorSecretArgs | FrontdoorSecretState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FrontdoorSecretState | undefined;
            resourceInputs["cdnFrontdoorProfileId"] = state ? state.cdnFrontdoorProfileId : undefined;
            resourceInputs["cdnFrontdoorProfileName"] = state ? state.cdnFrontdoorProfileName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
        } else {
            const args = argsOrState as FrontdoorSecretArgs | undefined;
            if ((!args || args.cdnFrontdoorProfileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cdnFrontdoorProfileId'");
            }
            if ((!args || args.secret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secret'");
            }
            resourceInputs["cdnFrontdoorProfileId"] = args ? args.cdnFrontdoorProfileId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["secret"] = args ? args.secret : undefined;
            resourceInputs["cdnFrontdoorProfileName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FrontdoorSecret.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FrontdoorSecret resources.
 */
export interface FrontdoorSecretState {
    /**
     * The Resource ID of the Front Door Profile. Changing this forces a new Front Door Secret to be created.
     */
    cdnFrontdoorProfileId?: pulumi.Input<string>;
    /**
     * The name of the Front Door Profile containing this Front Door Secret.
     */
    cdnFrontdoorProfileName?: pulumi.Input<string>;
    /**
     * The name which should be used for this Front Door Secret. Possible values must start with a letter or a number, only contain letters, numbers and hyphens and have a length of between 2 and 260 characters. Changing this forces a new Front Door Secret to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A `secret` block as defined below. Changing this forces a new Front Door Secret to be created.
     */
    secret?: pulumi.Input<inputs.cdn.FrontdoorSecretSecret>;
}

/**
 * The set of arguments for constructing a FrontdoorSecret resource.
 */
export interface FrontdoorSecretArgs {
    /**
     * The Resource ID of the Front Door Profile. Changing this forces a new Front Door Secret to be created.
     */
    cdnFrontdoorProfileId: pulumi.Input<string>;
    /**
     * The name which should be used for this Front Door Secret. Possible values must start with a letter or a number, only contain letters, numbers and hyphens and have a length of between 2 and 260 characters. Changing this forces a new Front Door Secret to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A `secret` block as defined below. Changing this forces a new Front Door Secret to be created.
     */
    secret: pulumi.Input<inputs.cdn.FrontdoorSecretSecret>;
}
