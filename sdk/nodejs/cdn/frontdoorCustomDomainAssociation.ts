// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages the association between a Front Door (standard/premium) Custom Domain and one or more Front Door (standard/premium) Routes.
 *
 * ## Import
 *
 * Front Door Custom Domain Associations can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:cdn/frontdoorCustomDomainAssociation:FrontdoorCustomDomainAssociation example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Cdn/profiles/profile1/associations/assoc1
 * ```
 */
export class FrontdoorCustomDomainAssociation extends pulumi.CustomResource {
    /**
     * Get an existing FrontdoorCustomDomainAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FrontdoorCustomDomainAssociationState, opts?: pulumi.CustomResourceOptions): FrontdoorCustomDomainAssociation {
        return new FrontdoorCustomDomainAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:cdn/frontdoorCustomDomainAssociation:FrontdoorCustomDomainAssociation';

    /**
     * Returns true if the given object is an instance of FrontdoorCustomDomainAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FrontdoorCustomDomainAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FrontdoorCustomDomainAssociation.__pulumiType;
    }

    /**
     * The ID of the Front Door Custom Domain that should be managed by the association resource. Changing this forces a new association resource to be created.
     */
    public readonly cdnFrontdoorCustomDomainId!: pulumi.Output<string>;
    /**
     * One or more IDs of the Front Door Route to which the Front Door Custom Domain is associated with.
     *
     * > **NOTE:** This should include all of the Front Door Route resources that the Front Door Custom Domain is associated with. If the list of Front Door Routes is not complete you will receive the service side error `This resource is still associated with a route. Please delete the association with the route first before deleting this resource` when you attempt to `destroy`/`delete` your Front Door Custom Domain.
     */
    public readonly cdnFrontdoorRouteIds!: pulumi.Output<string[]>;

    /**
     * Create a FrontdoorCustomDomainAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FrontdoorCustomDomainAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FrontdoorCustomDomainAssociationArgs | FrontdoorCustomDomainAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FrontdoorCustomDomainAssociationState | undefined;
            resourceInputs["cdnFrontdoorCustomDomainId"] = state ? state.cdnFrontdoorCustomDomainId : undefined;
            resourceInputs["cdnFrontdoorRouteIds"] = state ? state.cdnFrontdoorRouteIds : undefined;
        } else {
            const args = argsOrState as FrontdoorCustomDomainAssociationArgs | undefined;
            if ((!args || args.cdnFrontdoorCustomDomainId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cdnFrontdoorCustomDomainId'");
            }
            if ((!args || args.cdnFrontdoorRouteIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cdnFrontdoorRouteIds'");
            }
            resourceInputs["cdnFrontdoorCustomDomainId"] = args ? args.cdnFrontdoorCustomDomainId : undefined;
            resourceInputs["cdnFrontdoorRouteIds"] = args ? args.cdnFrontdoorRouteIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FrontdoorCustomDomainAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FrontdoorCustomDomainAssociation resources.
 */
export interface FrontdoorCustomDomainAssociationState {
    /**
     * The ID of the Front Door Custom Domain that should be managed by the association resource. Changing this forces a new association resource to be created.
     */
    cdnFrontdoorCustomDomainId?: pulumi.Input<string>;
    /**
     * One or more IDs of the Front Door Route to which the Front Door Custom Domain is associated with.
     *
     * > **NOTE:** This should include all of the Front Door Route resources that the Front Door Custom Domain is associated with. If the list of Front Door Routes is not complete you will receive the service side error `This resource is still associated with a route. Please delete the association with the route first before deleting this resource` when you attempt to `destroy`/`delete` your Front Door Custom Domain.
     */
    cdnFrontdoorRouteIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a FrontdoorCustomDomainAssociation resource.
 */
export interface FrontdoorCustomDomainAssociationArgs {
    /**
     * The ID of the Front Door Custom Domain that should be managed by the association resource. Changing this forces a new association resource to be created.
     */
    cdnFrontdoorCustomDomainId: pulumi.Input<string>;
    /**
     * One or more IDs of the Front Door Route to which the Front Door Custom Domain is associated with.
     *
     * > **NOTE:** This should include all of the Front Door Route resources that the Front Door Custom Domain is associated with. If the list of Front Door Routes is not complete you will receive the service side error `This resource is still associated with a route. Please delete the association with the route first before deleting this resource` when you attempt to `destroy`/`delete` your Front Door Custom Domain.
     */
    cdnFrontdoorRouteIds: pulumi.Input<pulumi.Input<string>[]>;
}
