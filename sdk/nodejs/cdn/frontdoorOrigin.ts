// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Front Door (standard/premium) Origin.
 *
 * !>**IMPORTANT:** If you are attempting to implement an Origin that uses its own Private Link Service with a Load Balancer the Profile resource in your configuration file **must** have a `dependsOn` meta-argument which references the `azure.privatedns.LinkService`, see `Example Usage With Private Link Service` below.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleFrontdoorProfile = new azure.cdn.FrontdoorProfile("exampleFrontdoorProfile", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     skuName: "Premium_AzureFrontDoor",
 * });
 * const exampleFrontdoorOriginGroup = new azure.cdn.FrontdoorOriginGroup("exampleFrontdoorOriginGroup", {
 *     cdnFrontdoorProfileId: exampleFrontdoorProfile.id,
 *     loadBalancing: {},
 * });
 * const exampleFrontdoorOrigin = new azure.cdn.FrontdoorOrigin("exampleFrontdoorOrigin", {
 *     cdnFrontdoorOriginGroupId: exampleFrontdoorOriginGroup.id,
 *     enabled: true,
 *     certificateNameCheckEnabled: false,
 *     hostName: "contoso.com",
 *     httpPort: 80,
 *     httpsPort: 443,
 *     originHostHeader: "www.contoso.com",
 *     priority: 1,
 *     weight: 1,
 * });
 * ```
 * ### With Private Link
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Premium",
 *     accountReplicationType: "LRS",
 *     allowNestedItemsToBePublic: false,
 *     networkRules: {
 *         defaultAction: "Deny",
 *     },
 *     tags: {
 *         environment: "Example",
 *     },
 * });
 * const exampleFrontdoorProfile = new azure.cdn.FrontdoorProfile("exampleFrontdoorProfile", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     skuName: "Premium_AzureFrontDoor",
 * });
 * const exampleFrontdoorOriginGroup = new azure.cdn.FrontdoorOriginGroup("exampleFrontdoorOriginGroup", {
 *     cdnFrontdoorProfileId: exampleFrontdoorProfile.id,
 *     loadBalancing: {},
 * });
 * const exampleFrontdoorOrigin = new azure.cdn.FrontdoorOrigin("exampleFrontdoorOrigin", {
 *     cdnFrontdoorOriginGroupId: exampleFrontdoorOriginGroup.id,
 *     enabled: true,
 *     certificateNameCheckEnabled: true,
 *     hostName: exampleAccount.primaryBlobHost,
 *     originHostHeader: exampleAccount.primaryBlobHost,
 *     priority: 1,
 *     weight: 500,
 *     privateLink: {
 *         requestMessage: "Request access for Private Link Origin CDN Frontdoor",
 *         targetType: "blob",
 *         location: exampleAccount.location,
 *         privateLinkTargetId: exampleAccount.id,
 *     },
 * });
 * ```
 * ### With Private Link Service
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("exampleVirtualNetwork", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     addressSpaces: ["10.5.0.0/16"],
 * });
 * const exampleSubnet = new azure.network.Subnet("exampleSubnet", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.5.1.0/24"],
 *     privateLinkServiceNetworkPoliciesEnabled: false,
 * });
 * const examplePublicIp = new azure.network.PublicIp("examplePublicIp", {
 *     sku: "Standard",
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     allocationMethod: "Static",
 * });
 * const exampleLoadBalancer = new azure.lb.LoadBalancer("exampleLoadBalancer", {
 *     sku: "Standard",
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     frontendIpConfigurations: [{
 *         name: examplePublicIp.name,
 *         publicIpAddressId: examplePublicIp.id,
 *     }],
 * });
 * const exampleLinkService = new azure.privatedns.LinkService("exampleLinkService", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     visibilitySubscriptionIds: [current.then(current => current.subscriptionId)],
 *     loadBalancerFrontendIpConfigurationIds: [exampleLoadBalancer.frontendIpConfigurations.apply(frontendIpConfigurations => frontendIpConfigurations?.[0]?.id)],
 *     natIpConfigurations: [{
 *         name: "primary",
 *         privateIpAddress: "10.5.1.17",
 *         privateIpAddressVersion: "IPv4",
 *         subnetId: exampleSubnet.id,
 *         primary: true,
 *     }],
 * });
 * const exampleFrontdoorProfile = new azure.cdn.FrontdoorProfile("exampleFrontdoorProfile", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     skuName: "Premium_AzureFrontDoor",
 * }, {
 *     dependsOn: [exampleLinkService],
 * });
 * const exampleFrontdoorOriginGroup = new azure.cdn.FrontdoorOriginGroup("exampleFrontdoorOriginGroup", {
 *     cdnFrontdoorProfileId: exampleFrontdoorProfile.id,
 *     loadBalancing: {
 *         additionalLatencyInMilliseconds: 0,
 *         sampleSize: 16,
 *         successfulSamplesRequired: 3,
 *     },
 * });
 * const exampleFrontdoorOrigin = new azure.cdn.FrontdoorOrigin("exampleFrontdoorOrigin", {
 *     cdnFrontdoorOriginGroupId: exampleFrontdoorOriginGroup.id,
 *     enabled: true,
 *     hostName: "example.com",
 *     originHostHeader: "example.com",
 *     priority: 1,
 *     weight: 1000,
 *     certificateNameCheckEnabled: false,
 *     privateLink: {
 *         requestMessage: "Request access for Private Link Origin CDN Frontdoor",
 *         location: exampleResourceGroup.location,
 *         privateLinkTargetId: exampleLinkService.id,
 *     },
 * });
 * ```
 * ## Example HCL Configurations
 *
 * * Private Link Origin with Storage Account Blob
 * * Private Link Origin with Storage Account Static Web Site
 * * Private Link Origin with Linux Web Application
 * * Private Link Origin with Internal Load Balancer
 *
 * ## Import
 *
 * Front Door Origins can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:cdn/frontdoorOrigin:FrontdoorOrigin example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Cdn/profiles/profile1/originGroups/originGroup1/origins/origin1
 * ```
 */
export class FrontdoorOrigin extends pulumi.CustomResource {
    /**
     * Get an existing FrontdoorOrigin resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FrontdoorOriginState, opts?: pulumi.CustomResourceOptions): FrontdoorOrigin {
        return new FrontdoorOrigin(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:cdn/frontdoorOrigin:FrontdoorOrigin';

    /**
     * Returns true if the given object is an instance of FrontdoorOrigin.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FrontdoorOrigin {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FrontdoorOrigin.__pulumiType;
    }

    /**
     * The ID of the Front Door Origin Group within which this Front Door Origin should exist. Changing this forces a new Front Door Origin to be created.
     */
    public readonly cdnFrontdoorOriginGroupId!: pulumi.Output<string>;
    /**
     * Specifies whether certificate name checks are enabled for this origin.
     */
    public readonly certificateNameCheckEnabled!: pulumi.Output<boolean>;
    /**
     * Should the origin be enabled? Possible values are `true` or `false`. Defaults to `true`.
     *
     * > **NOTE:** The `enabled` field will need to be explicitly set until the 4.0 provider is released due to the deprecation of the `healthProbesEnabled` property in version 3.x of the AzureRM Provider.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * @deprecated `health_probes_enabled` will be removed in favour of the `enabled` property in version 4.0 of the AzureRM Provider.
     */
    public readonly healthProbesEnabled!: pulumi.Output<boolean>;
    /**
     * The IPv4 address, IPv6 address or Domain name of the Origin.
     *
     * !> **IMPORTANT:** This must be unique across all Front Door Origins within a Front Door Endpoint.
     */
    public readonly hostName!: pulumi.Output<string>;
    /**
     * The value of the HTTP port. Must be between `1` and `65535`. Defaults to `80`.
     */
    public readonly httpPort!: pulumi.Output<number | undefined>;
    /**
     * The value of the HTTPS port. Must be between `1` and `65535`. Defaults to `443`.
     */
    public readonly httpsPort!: pulumi.Output<number | undefined>;
    /**
     * The name which should be used for this Front Door Origin. Changing this forces a new Front Door Origin to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The host header value (an IPv4 address, IPv6 address or Domain name) which is sent to the origin with each request. If unspecified the hostname from the request will be used.
     *
     * > Azure Front Door Origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin's hostname. This field's value overrides the host header defined in the Front Door Endpoint. For more information on how to properly set the origin host header value please see the [product documentation](https://docs.microsoft.com/azure/frontdoor/origin?pivots=front-door-standard-premium#origin-host-header).
     */
    public readonly originHostHeader!: pulumi.Output<string | undefined>;
    /**
     * Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy. Must be between `1` and `5` (inclusive). Defaults to `1`.
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    /**
     * A `privateLink` block as defined below.
     *
     * > **NOTE:** Private Link requires that the Front Door Profile this Origin is hosted within is using the SKU `Premium_AzureFrontDoor` and that the `certificateNameCheckEnabled` field is set to `true`.
     */
    public readonly privateLink!: pulumi.Output<outputs.cdn.FrontdoorOriginPrivateLink | undefined>;
    /**
     * The weight of the origin in a given origin group for load balancing. Must be between `1` and `1000`. Defaults to `500`.
     */
    public readonly weight!: pulumi.Output<number | undefined>;

    /**
     * Create a FrontdoorOrigin resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FrontdoorOriginArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FrontdoorOriginArgs | FrontdoorOriginState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FrontdoorOriginState | undefined;
            resourceInputs["cdnFrontdoorOriginGroupId"] = state ? state.cdnFrontdoorOriginGroupId : undefined;
            resourceInputs["certificateNameCheckEnabled"] = state ? state.certificateNameCheckEnabled : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["healthProbesEnabled"] = state ? state.healthProbesEnabled : undefined;
            resourceInputs["hostName"] = state ? state.hostName : undefined;
            resourceInputs["httpPort"] = state ? state.httpPort : undefined;
            resourceInputs["httpsPort"] = state ? state.httpsPort : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["originHostHeader"] = state ? state.originHostHeader : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["privateLink"] = state ? state.privateLink : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as FrontdoorOriginArgs | undefined;
            if ((!args || args.cdnFrontdoorOriginGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cdnFrontdoorOriginGroupId'");
            }
            if ((!args || args.certificateNameCheckEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateNameCheckEnabled'");
            }
            if ((!args || args.hostName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostName'");
            }
            resourceInputs["cdnFrontdoorOriginGroupId"] = args ? args.cdnFrontdoorOriginGroupId : undefined;
            resourceInputs["certificateNameCheckEnabled"] = args ? args.certificateNameCheckEnabled : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["healthProbesEnabled"] = args ? args.healthProbesEnabled : undefined;
            resourceInputs["hostName"] = args ? args.hostName : undefined;
            resourceInputs["httpPort"] = args ? args.httpPort : undefined;
            resourceInputs["httpsPort"] = args ? args.httpsPort : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["originHostHeader"] = args ? args.originHostHeader : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["privateLink"] = args ? args.privateLink : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FrontdoorOrigin.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FrontdoorOrigin resources.
 */
export interface FrontdoorOriginState {
    /**
     * The ID of the Front Door Origin Group within which this Front Door Origin should exist. Changing this forces a new Front Door Origin to be created.
     */
    cdnFrontdoorOriginGroupId?: pulumi.Input<string>;
    /**
     * Specifies whether certificate name checks are enabled for this origin.
     */
    certificateNameCheckEnabled?: pulumi.Input<boolean>;
    /**
     * Should the origin be enabled? Possible values are `true` or `false`. Defaults to `true`.
     *
     * > **NOTE:** The `enabled` field will need to be explicitly set until the 4.0 provider is released due to the deprecation of the `healthProbesEnabled` property in version 3.x of the AzureRM Provider.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * @deprecated `health_probes_enabled` will be removed in favour of the `enabled` property in version 4.0 of the AzureRM Provider.
     */
    healthProbesEnabled?: pulumi.Input<boolean>;
    /**
     * The IPv4 address, IPv6 address or Domain name of the Origin.
     *
     * !> **IMPORTANT:** This must be unique across all Front Door Origins within a Front Door Endpoint.
     */
    hostName?: pulumi.Input<string>;
    /**
     * The value of the HTTP port. Must be between `1` and `65535`. Defaults to `80`.
     */
    httpPort?: pulumi.Input<number>;
    /**
     * The value of the HTTPS port. Must be between `1` and `65535`. Defaults to `443`.
     */
    httpsPort?: pulumi.Input<number>;
    /**
     * The name which should be used for this Front Door Origin. Changing this forces a new Front Door Origin to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The host header value (an IPv4 address, IPv6 address or Domain name) which is sent to the origin with each request. If unspecified the hostname from the request will be used.
     *
     * > Azure Front Door Origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin's hostname. This field's value overrides the host header defined in the Front Door Endpoint. For more information on how to properly set the origin host header value please see the [product documentation](https://docs.microsoft.com/azure/frontdoor/origin?pivots=front-door-standard-premium#origin-host-header).
     */
    originHostHeader?: pulumi.Input<string>;
    /**
     * Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy. Must be between `1` and `5` (inclusive). Defaults to `1`.
     */
    priority?: pulumi.Input<number>;
    /**
     * A `privateLink` block as defined below.
     *
     * > **NOTE:** Private Link requires that the Front Door Profile this Origin is hosted within is using the SKU `Premium_AzureFrontDoor` and that the `certificateNameCheckEnabled` field is set to `true`.
     */
    privateLink?: pulumi.Input<inputs.cdn.FrontdoorOriginPrivateLink>;
    /**
     * The weight of the origin in a given origin group for load balancing. Must be between `1` and `1000`. Defaults to `500`.
     */
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a FrontdoorOrigin resource.
 */
export interface FrontdoorOriginArgs {
    /**
     * The ID of the Front Door Origin Group within which this Front Door Origin should exist. Changing this forces a new Front Door Origin to be created.
     */
    cdnFrontdoorOriginGroupId: pulumi.Input<string>;
    /**
     * Specifies whether certificate name checks are enabled for this origin.
     */
    certificateNameCheckEnabled: pulumi.Input<boolean>;
    /**
     * Should the origin be enabled? Possible values are `true` or `false`. Defaults to `true`.
     *
     * > **NOTE:** The `enabled` field will need to be explicitly set until the 4.0 provider is released due to the deprecation of the `healthProbesEnabled` property in version 3.x of the AzureRM Provider.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * @deprecated `health_probes_enabled` will be removed in favour of the `enabled` property in version 4.0 of the AzureRM Provider.
     */
    healthProbesEnabled?: pulumi.Input<boolean>;
    /**
     * The IPv4 address, IPv6 address or Domain name of the Origin.
     *
     * !> **IMPORTANT:** This must be unique across all Front Door Origins within a Front Door Endpoint.
     */
    hostName: pulumi.Input<string>;
    /**
     * The value of the HTTP port. Must be between `1` and `65535`. Defaults to `80`.
     */
    httpPort?: pulumi.Input<number>;
    /**
     * The value of the HTTPS port. Must be between `1` and `65535`. Defaults to `443`.
     */
    httpsPort?: pulumi.Input<number>;
    /**
     * The name which should be used for this Front Door Origin. Changing this forces a new Front Door Origin to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The host header value (an IPv4 address, IPv6 address or Domain name) which is sent to the origin with each request. If unspecified the hostname from the request will be used.
     *
     * > Azure Front Door Origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin's hostname. This field's value overrides the host header defined in the Front Door Endpoint. For more information on how to properly set the origin host header value please see the [product documentation](https://docs.microsoft.com/azure/frontdoor/origin?pivots=front-door-standard-premium#origin-host-header).
     */
    originHostHeader?: pulumi.Input<string>;
    /**
     * Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy. Must be between `1` and `5` (inclusive). Defaults to `1`.
     */
    priority?: pulumi.Input<number>;
    /**
     * A `privateLink` block as defined below.
     *
     * > **NOTE:** Private Link requires that the Front Door Profile this Origin is hosted within is using the SKU `Premium_AzureFrontDoor` and that the `certificateNameCheckEnabled` field is set to `true`.
     */
    privateLink?: pulumi.Input<inputs.cdn.FrontdoorOriginPrivateLink>;
    /**
     * The weight of the origin in a given origin group for load balancing. Must be between `1` and `1000`. Defaults to `500`.
     */
    weight?: pulumi.Input<number>;
}
