// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * CDN FrontDoor Origin can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:cdn/frontdoorOrigin:FrontdoorOrigin example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Cdn/profiles/profile1/originGroups/originGroup1/origins/origin1
 * ```
 */
export class FrontdoorOrigin extends pulumi.CustomResource {
    /**
     * Get an existing FrontdoorOrigin resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FrontdoorOriginState, opts?: pulumi.CustomResourceOptions): FrontdoorOrigin {
        return new FrontdoorOrigin(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:cdn/frontdoorOrigin:FrontdoorOrigin';

    /**
     * Returns true if the given object is an instance of FrontdoorOrigin.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FrontdoorOrigin {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FrontdoorOrigin.__pulumiType;
    }

    /**
     * The ID of the CDN FrontDoor Origin Group within which this CDN FrontDoor Origin should exist. Changing this forces a new CDN FrontDoor Origin to be created.
     */
    public readonly cdnFrontdoorOriginGroupId!: pulumi.Output<string>;
    /**
     * Specifies whether certificate name checks are enabled for this origin.
     */
    public readonly certificateNameCheckEnabled!: pulumi.Output<boolean>;
    /**
     * Should the health probes be enabled against the origins defined within the origin group? Possible values are `true` or `false`. Defaults to `true`.
     */
    public readonly healthProbesEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The IPv4 address, IPv6 address or Domain name of the Origin.
     */
    public readonly hostName!: pulumi.Output<string>;
    /**
     * The value of the HTTP port. Must be between `1` and `65535`. Defaults to `80`.
     */
    public readonly httpPort!: pulumi.Output<number | undefined>;
    /**
     * The value of the HTTPS port. Must be between `1` and `65535`. Defaults to `443`.
     */
    public readonly httpsPort!: pulumi.Output<number | undefined>;
    /**
     * The name which should be used for this CDN FrontDoor Origin. Changing this forces a new CDN FrontDoor Origin to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The host header value (an IPv4 address, IPv6 address or Domain name) which is sent to the origin with each request. If unspecified the hostname from the request will be used.
     */
    public readonly originHostHeader!: pulumi.Output<string | undefined>;
    /**
     * Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy. Must be between `1` and `5` (inclusive). Defaults to `1`.
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    /**
     * A `privateLink` block as defined below.
     */
    public readonly privateLink!: pulumi.Output<outputs.cdn.FrontdoorOriginPrivateLink | undefined>;
    /**
     * The weight of the origin in a given origin group for load balancing. Must be between `1` and `1000`. Defaults to `500`.
     */
    public readonly weight!: pulumi.Output<number | undefined>;

    /**
     * Create a FrontdoorOrigin resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FrontdoorOriginArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FrontdoorOriginArgs | FrontdoorOriginState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FrontdoorOriginState | undefined;
            resourceInputs["cdnFrontdoorOriginGroupId"] = state ? state.cdnFrontdoorOriginGroupId : undefined;
            resourceInputs["certificateNameCheckEnabled"] = state ? state.certificateNameCheckEnabled : undefined;
            resourceInputs["healthProbesEnabled"] = state ? state.healthProbesEnabled : undefined;
            resourceInputs["hostName"] = state ? state.hostName : undefined;
            resourceInputs["httpPort"] = state ? state.httpPort : undefined;
            resourceInputs["httpsPort"] = state ? state.httpsPort : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["originHostHeader"] = state ? state.originHostHeader : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["privateLink"] = state ? state.privateLink : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as FrontdoorOriginArgs | undefined;
            if ((!args || args.cdnFrontdoorOriginGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cdnFrontdoorOriginGroupId'");
            }
            if ((!args || args.certificateNameCheckEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateNameCheckEnabled'");
            }
            if ((!args || args.hostName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostName'");
            }
            resourceInputs["cdnFrontdoorOriginGroupId"] = args ? args.cdnFrontdoorOriginGroupId : undefined;
            resourceInputs["certificateNameCheckEnabled"] = args ? args.certificateNameCheckEnabled : undefined;
            resourceInputs["healthProbesEnabled"] = args ? args.healthProbesEnabled : undefined;
            resourceInputs["hostName"] = args ? args.hostName : undefined;
            resourceInputs["httpPort"] = args ? args.httpPort : undefined;
            resourceInputs["httpsPort"] = args ? args.httpsPort : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["originHostHeader"] = args ? args.originHostHeader : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["privateLink"] = args ? args.privateLink : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FrontdoorOrigin.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FrontdoorOrigin resources.
 */
export interface FrontdoorOriginState {
    /**
     * The ID of the CDN FrontDoor Origin Group within which this CDN FrontDoor Origin should exist. Changing this forces a new CDN FrontDoor Origin to be created.
     */
    cdnFrontdoorOriginGroupId?: pulumi.Input<string>;
    /**
     * Specifies whether certificate name checks are enabled for this origin.
     */
    certificateNameCheckEnabled?: pulumi.Input<boolean>;
    /**
     * Should the health probes be enabled against the origins defined within the origin group? Possible values are `true` or `false`. Defaults to `true`.
     */
    healthProbesEnabled?: pulumi.Input<boolean>;
    /**
     * The IPv4 address, IPv6 address or Domain name of the Origin.
     */
    hostName?: pulumi.Input<string>;
    /**
     * The value of the HTTP port. Must be between `1` and `65535`. Defaults to `80`.
     */
    httpPort?: pulumi.Input<number>;
    /**
     * The value of the HTTPS port. Must be between `1` and `65535`. Defaults to `443`.
     */
    httpsPort?: pulumi.Input<number>;
    /**
     * The name which should be used for this CDN FrontDoor Origin. Changing this forces a new CDN FrontDoor Origin to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The host header value (an IPv4 address, IPv6 address or Domain name) which is sent to the origin with each request. If unspecified the hostname from the request will be used.
     */
    originHostHeader?: pulumi.Input<string>;
    /**
     * Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy. Must be between `1` and `5` (inclusive). Defaults to `1`.
     */
    priority?: pulumi.Input<number>;
    /**
     * A `privateLink` block as defined below.
     */
    privateLink?: pulumi.Input<inputs.cdn.FrontdoorOriginPrivateLink>;
    /**
     * The weight of the origin in a given origin group for load balancing. Must be between `1` and `1000`. Defaults to `500`.
     */
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a FrontdoorOrigin resource.
 */
export interface FrontdoorOriginArgs {
    /**
     * The ID of the CDN FrontDoor Origin Group within which this CDN FrontDoor Origin should exist. Changing this forces a new CDN FrontDoor Origin to be created.
     */
    cdnFrontdoorOriginGroupId: pulumi.Input<string>;
    /**
     * Specifies whether certificate name checks are enabled for this origin.
     */
    certificateNameCheckEnabled: pulumi.Input<boolean>;
    /**
     * Should the health probes be enabled against the origins defined within the origin group? Possible values are `true` or `false`. Defaults to `true`.
     */
    healthProbesEnabled?: pulumi.Input<boolean>;
    /**
     * The IPv4 address, IPv6 address or Domain name of the Origin.
     */
    hostName: pulumi.Input<string>;
    /**
     * The value of the HTTP port. Must be between `1` and `65535`. Defaults to `80`.
     */
    httpPort?: pulumi.Input<number>;
    /**
     * The value of the HTTPS port. Must be between `1` and `65535`. Defaults to `443`.
     */
    httpsPort?: pulumi.Input<number>;
    /**
     * The name which should be used for this CDN FrontDoor Origin. Changing this forces a new CDN FrontDoor Origin to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The host header value (an IPv4 address, IPv6 address or Domain name) which is sent to the origin with each request. If unspecified the hostname from the request will be used.
     */
    originHostHeader?: pulumi.Input<string>;
    /**
     * Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy. Must be between `1` and `5` (inclusive). Defaults to `1`.
     */
    priority?: pulumi.Input<number>;
    /**
     * A `privateLink` block as defined below.
     */
    privateLink?: pulumi.Input<inputs.cdn.FrontdoorOriginPrivateLink>;
    /**
     * The weight of the origin in a given origin group for load balancing. Must be between `1` and `1000`. Defaults to `500`.
     */
    weight?: pulumi.Input<number>;
}
