// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages an Azure Container Registry.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const acr = new azure.containerservice.Registry("acr", {
 *     name: "containerRegistry1",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     sku: "Premium",
 *     adminEnabled: false,
 *     georeplications: [
 *         {
 *             location: "East US",
 *             zoneRedundancyEnabled: true,
 *             tags: {},
 *         },
 *         {
 *             location: "North Europe",
 *             zoneRedundancyEnabled: true,
 *             tags: {},
 *         },
 *     ],
 * });
 * ```
 *
 * ### Encryption)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleUserAssignedIdentity = new azure.authorization.UserAssignedIdentity("example", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     name: "registry-uai",
 * });
 * const example = azure.keyvault.getKey({
 *     name: "super-secret",
 *     keyVaultId: existing.id,
 * });
 * const acr = new azure.containerservice.Registry("acr", {
 *     name: "containerRegistry1",
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     sku: "Premium",
 *     identity: {
 *         type: "UserAssigned",
 *         identityIds: [exampleUserAssignedIdentity.id],
 *     },
 *     encryption: {
 *         keyVaultKeyId: example.then(example => example.id),
 *         identityClientId: exampleUserAssignedIdentity.clientId,
 *     },
 * });
 * ```
 *
 * ### Attaching A Container Registry To A Kubernetes Cluster)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleRegistry = new azure.containerservice.Registry("example", {
 *     name: "containerRegistry1",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     sku: "Premium",
 * });
 * const exampleKubernetesCluster = new azure.containerservice.KubernetesCluster("example", {
 *     name: "example-aks1",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     dnsPrefix: "exampleaks1",
 *     defaultNodePool: {
 *         name: "default",
 *         nodeCount: 1,
 *         vmSize: "Standard_D2_v2",
 *     },
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 *     tags: {
 *         Environment: "Production",
 *     },
 * });
 * const exampleAssignment = new azure.authorization.Assignment("example", {
 *     principalId: exampleKubernetesCluster.kubeletIdentity.apply(kubeletIdentity => kubeletIdentity.objectId),
 *     roleDefinitionName: "AcrPull",
 *     scope: exampleRegistry.id,
 *     skipServicePrincipalAadCheck: true,
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.ContainerRegistry` - 2023-11-01-preview
 *
 * ## Import
 *
 * Container Registries can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:containerservice/registry:Registry example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ContainerRegistry/registries/myregistry1
 * ```
 */
export class Registry extends pulumi.CustomResource {
    /**
     * Get an existing Registry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegistryState, opts?: pulumi.CustomResourceOptions): Registry {
        return new Registry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:containerservice/registry:Registry';

    /**
     * Returns true if the given object is an instance of Registry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Registry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Registry.__pulumiType;
    }

    /**
     * Specifies whether the admin user is enabled. Defaults to `false`.
     */
    declare public readonly adminEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The Password associated with the Container Registry Admin account - if the admin account is enabled.
     */
    declare public /*out*/ readonly adminPassword: pulumi.Output<string>;
    /**
     * The Username associated with the Container Registry Admin account - if the admin account is enabled.
     */
    declare public /*out*/ readonly adminUsername: pulumi.Output<string>;
    /**
     * Whether to allow anonymous (unauthenticated) pull access to this Container Registry. This is only supported on resources with the `Standard` or `Premium` SKU.
     */
    declare public readonly anonymousPullEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Whether to enable dedicated data endpoints for this Container Registry? This is only supported on resources with the `Premium` SKU.
     */
    declare public readonly dataEndpointEnabled: pulumi.Output<boolean | undefined>;
    /**
     * A set of data endpoint hostnames associated with the container registry if data endpoints are enabled.
     */
    declare public /*out*/ readonly dataEndpointHostNames: pulumi.Output<string[]>;
    /**
     * An `encryption` block as documented below.
     */
    declare public readonly encryption: pulumi.Output<outputs.containerservice.RegistryEncryption>;
    /**
     * Boolean value that indicates whether export policy is enabled. Defaults to `true`. In order to set it to `false`, make sure the `publicNetworkAccessEnabled` is also set to `false`.
     *
     * > **Note:** `quarantinePolicyEnabled`, `retentionPolicyInDays`, `trustPolicyEnabled`, `exportPolicyEnabled` and `zoneRedundancyEnabled` are only supported on resources with the `Premium` SKU.
     */
    declare public readonly exportPolicyEnabled: pulumi.Output<boolean | undefined>;
    /**
     * One or more `georeplications` blocks as documented below.
     *
     * > **Note:** The `georeplications` is only supported on new resources with the `Premium` SKU.
     *
     * > **Note:** The `georeplications` list cannot contain the location where the Container Registry exists.
     *
     * > **Note:** If more than one `georeplications` block is specified, they are expected to follow the alphabetic order on the `location` property.
     */
    declare public readonly georeplications: pulumi.Output<outputs.containerservice.RegistryGeoreplication[] | undefined>;
    /**
     * An `identity` block as defined below.
     */
    declare public readonly identity: pulumi.Output<outputs.containerservice.RegistryIdentity | undefined>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * The URL that can be used to log into the container registry.
     */
    declare public /*out*/ readonly loginServer: pulumi.Output<string>;
    /**
     * Specifies the name of the Container Registry. Only Alphanumeric characters allowed. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Whether to allow trusted Azure services to access a network-restricted Container Registry? Possible values are `None` and `AzureServices`. Defaults to `AzureServices`.
     */
    declare public readonly networkRuleBypassOption: pulumi.Output<string | undefined>;
    /**
     * A `networkRuleSet` block as documented below.
     */
    declare public readonly networkRuleSet: pulumi.Output<outputs.containerservice.RegistryNetworkRuleSet>;
    /**
     * Whether public network access is allowed for the container registry. Defaults to `true`.
     */
    declare public readonly publicNetworkAccessEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Boolean value that indicates whether quarantine policy is enabled.
     */
    declare public readonly quarantinePolicyEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The name of the resource group in which to create the Container Registry. Changing this forces a new resource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * The number of days to retain and untagged manifest after which it gets purged. Defaults to `7`.
     */
    declare public readonly retentionPolicyInDays: pulumi.Output<number | undefined>;
    /**
     * The SKU name of the container registry. Possible values are `Basic`, `Standard` and `Premium`.
     */
    declare public readonly sku: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Boolean value that indicated whether trust policy is enabled. Defaults to `false`.
     */
    declare public readonly trustPolicyEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Whether zone redundancy is enabled for this Container Registry? Changing this forces a new resource to be created. Defaults to `false`.
     */
    declare public readonly zoneRedundancyEnabled: pulumi.Output<boolean | undefined>;

    /**
     * Create a Registry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegistryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegistryArgs | RegistryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegistryState | undefined;
            resourceInputs["adminEnabled"] = state?.adminEnabled;
            resourceInputs["adminPassword"] = state?.adminPassword;
            resourceInputs["adminUsername"] = state?.adminUsername;
            resourceInputs["anonymousPullEnabled"] = state?.anonymousPullEnabled;
            resourceInputs["dataEndpointEnabled"] = state?.dataEndpointEnabled;
            resourceInputs["dataEndpointHostNames"] = state?.dataEndpointHostNames;
            resourceInputs["encryption"] = state?.encryption;
            resourceInputs["exportPolicyEnabled"] = state?.exportPolicyEnabled;
            resourceInputs["georeplications"] = state?.georeplications;
            resourceInputs["identity"] = state?.identity;
            resourceInputs["location"] = state?.location;
            resourceInputs["loginServer"] = state?.loginServer;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkRuleBypassOption"] = state?.networkRuleBypassOption;
            resourceInputs["networkRuleSet"] = state?.networkRuleSet;
            resourceInputs["publicNetworkAccessEnabled"] = state?.publicNetworkAccessEnabled;
            resourceInputs["quarantinePolicyEnabled"] = state?.quarantinePolicyEnabled;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["retentionPolicyInDays"] = state?.retentionPolicyInDays;
            resourceInputs["sku"] = state?.sku;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["trustPolicyEnabled"] = state?.trustPolicyEnabled;
            resourceInputs["zoneRedundancyEnabled"] = state?.zoneRedundancyEnabled;
        } else {
            const args = argsOrState as RegistryArgs | undefined;
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.sku === undefined && !opts.urn) {
                throw new Error("Missing required property 'sku'");
            }
            resourceInputs["adminEnabled"] = args?.adminEnabled;
            resourceInputs["anonymousPullEnabled"] = args?.anonymousPullEnabled;
            resourceInputs["dataEndpointEnabled"] = args?.dataEndpointEnabled;
            resourceInputs["encryption"] = args?.encryption;
            resourceInputs["exportPolicyEnabled"] = args?.exportPolicyEnabled;
            resourceInputs["georeplications"] = args?.georeplications;
            resourceInputs["identity"] = args?.identity;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkRuleBypassOption"] = args?.networkRuleBypassOption;
            resourceInputs["networkRuleSet"] = args?.networkRuleSet;
            resourceInputs["publicNetworkAccessEnabled"] = args?.publicNetworkAccessEnabled;
            resourceInputs["quarantinePolicyEnabled"] = args?.quarantinePolicyEnabled;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["retentionPolicyInDays"] = args?.retentionPolicyInDays;
            resourceInputs["sku"] = args?.sku;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["trustPolicyEnabled"] = args?.trustPolicyEnabled;
            resourceInputs["zoneRedundancyEnabled"] = args?.zoneRedundancyEnabled;
            resourceInputs["adminPassword"] = undefined /*out*/;
            resourceInputs["adminUsername"] = undefined /*out*/;
            resourceInputs["dataEndpointHostNames"] = undefined /*out*/;
            resourceInputs["loginServer"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["adminPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Registry.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Registry resources.
 */
export interface RegistryState {
    /**
     * Specifies whether the admin user is enabled. Defaults to `false`.
     */
    adminEnabled?: pulumi.Input<boolean>;
    /**
     * The Password associated with the Container Registry Admin account - if the admin account is enabled.
     */
    adminPassword?: pulumi.Input<string>;
    /**
     * The Username associated with the Container Registry Admin account - if the admin account is enabled.
     */
    adminUsername?: pulumi.Input<string>;
    /**
     * Whether to allow anonymous (unauthenticated) pull access to this Container Registry. This is only supported on resources with the `Standard` or `Premium` SKU.
     */
    anonymousPullEnabled?: pulumi.Input<boolean>;
    /**
     * Whether to enable dedicated data endpoints for this Container Registry? This is only supported on resources with the `Premium` SKU.
     */
    dataEndpointEnabled?: pulumi.Input<boolean>;
    /**
     * A set of data endpoint hostnames associated with the container registry if data endpoints are enabled.
     */
    dataEndpointHostNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An `encryption` block as documented below.
     */
    encryption?: pulumi.Input<inputs.containerservice.RegistryEncryption>;
    /**
     * Boolean value that indicates whether export policy is enabled. Defaults to `true`. In order to set it to `false`, make sure the `publicNetworkAccessEnabled` is also set to `false`.
     *
     * > **Note:** `quarantinePolicyEnabled`, `retentionPolicyInDays`, `trustPolicyEnabled`, `exportPolicyEnabled` and `zoneRedundancyEnabled` are only supported on resources with the `Premium` SKU.
     */
    exportPolicyEnabled?: pulumi.Input<boolean>;
    /**
     * One or more `georeplications` blocks as documented below.
     *
     * > **Note:** The `georeplications` is only supported on new resources with the `Premium` SKU.
     *
     * > **Note:** The `georeplications` list cannot contain the location where the Container Registry exists.
     *
     * > **Note:** If more than one `georeplications` block is specified, they are expected to follow the alphabetic order on the `location` property.
     */
    georeplications?: pulumi.Input<pulumi.Input<inputs.containerservice.RegistryGeoreplication>[]>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.containerservice.RegistryIdentity>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The URL that can be used to log into the container registry.
     */
    loginServer?: pulumi.Input<string>;
    /**
     * Specifies the name of the Container Registry. Only Alphanumeric characters allowed. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether to allow trusted Azure services to access a network-restricted Container Registry? Possible values are `None` and `AzureServices`. Defaults to `AzureServices`.
     */
    networkRuleBypassOption?: pulumi.Input<string>;
    /**
     * A `networkRuleSet` block as documented below.
     */
    networkRuleSet?: pulumi.Input<inputs.containerservice.RegistryNetworkRuleSet>;
    /**
     * Whether public network access is allowed for the container registry. Defaults to `true`.
     */
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    /**
     * Boolean value that indicates whether quarantine policy is enabled.
     */
    quarantinePolicyEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the resource group in which to create the Container Registry. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The number of days to retain and untagged manifest after which it gets purged. Defaults to `7`.
     */
    retentionPolicyInDays?: pulumi.Input<number>;
    /**
     * The SKU name of the container registry. Possible values are `Basic`, `Standard` and `Premium`.
     */
    sku?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Boolean value that indicated whether trust policy is enabled. Defaults to `false`.
     */
    trustPolicyEnabled?: pulumi.Input<boolean>;
    /**
     * Whether zone redundancy is enabled for this Container Registry? Changing this forces a new resource to be created. Defaults to `false`.
     */
    zoneRedundancyEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Registry resource.
 */
export interface RegistryArgs {
    /**
     * Specifies whether the admin user is enabled. Defaults to `false`.
     */
    adminEnabled?: pulumi.Input<boolean>;
    /**
     * Whether to allow anonymous (unauthenticated) pull access to this Container Registry. This is only supported on resources with the `Standard` or `Premium` SKU.
     */
    anonymousPullEnabled?: pulumi.Input<boolean>;
    /**
     * Whether to enable dedicated data endpoints for this Container Registry? This is only supported on resources with the `Premium` SKU.
     */
    dataEndpointEnabled?: pulumi.Input<boolean>;
    /**
     * An `encryption` block as documented below.
     */
    encryption?: pulumi.Input<inputs.containerservice.RegistryEncryption>;
    /**
     * Boolean value that indicates whether export policy is enabled. Defaults to `true`. In order to set it to `false`, make sure the `publicNetworkAccessEnabled` is also set to `false`.
     *
     * > **Note:** `quarantinePolicyEnabled`, `retentionPolicyInDays`, `trustPolicyEnabled`, `exportPolicyEnabled` and `zoneRedundancyEnabled` are only supported on resources with the `Premium` SKU.
     */
    exportPolicyEnabled?: pulumi.Input<boolean>;
    /**
     * One or more `georeplications` blocks as documented below.
     *
     * > **Note:** The `georeplications` is only supported on new resources with the `Premium` SKU.
     *
     * > **Note:** The `georeplications` list cannot contain the location where the Container Registry exists.
     *
     * > **Note:** If more than one `georeplications` block is specified, they are expected to follow the alphabetic order on the `location` property.
     */
    georeplications?: pulumi.Input<pulumi.Input<inputs.containerservice.RegistryGeoreplication>[]>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.containerservice.RegistryIdentity>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of the Container Registry. Only Alphanumeric characters allowed. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether to allow trusted Azure services to access a network-restricted Container Registry? Possible values are `None` and `AzureServices`. Defaults to `AzureServices`.
     */
    networkRuleBypassOption?: pulumi.Input<string>;
    /**
     * A `networkRuleSet` block as documented below.
     */
    networkRuleSet?: pulumi.Input<inputs.containerservice.RegistryNetworkRuleSet>;
    /**
     * Whether public network access is allowed for the container registry. Defaults to `true`.
     */
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    /**
     * Boolean value that indicates whether quarantine policy is enabled.
     */
    quarantinePolicyEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the resource group in which to create the Container Registry. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The number of days to retain and untagged manifest after which it gets purged. Defaults to `7`.
     */
    retentionPolicyInDays?: pulumi.Input<number>;
    /**
     * The SKU name of the container registry. Possible values are `Basic`, `Standard` and `Premium`.
     */
    sku: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Boolean value that indicated whether trust policy is enabled. Defaults to `false`.
     */
    trustPolicyEnabled?: pulumi.Input<boolean>;
    /**
     * Whether zone redundancy is enabled for this Container Registry? Changing this forces a new resource to be created. Defaults to `false`.
     */
    zoneRedundancyEnabled?: pulumi.Input<boolean>;
}
