// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an Azure Container Registry token. Tokens are a preview feature only available in Premium SKU Container registries.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleRegistry = new azure.containerservice.Registry("exampleRegistry", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     sku: "Premium",
 *     adminEnabled: false,
 *     georeplicationLocations: [
 *         "East US",
 *         "West Europe",
 *     ],
 * });
 * const exampleRegistryScopeMap = new azure.containerservice.RegistryScopeMap("exampleRegistryScopeMap", {
 *     containerRegistryName: azurerm_container_registry.acr.name,
 *     resourceGroupName: azurerm_resource_group.rg.name,
 *     actions: [
 *         "repositories/repo1/content/read",
 *         "repositories/repo1/content/create",
 *     ],
 * });
 * const exampleRegistryToken = new azure.containerservice.RegistryToken("exampleRegistryToken", {
 *     containerRegistryName: azurerm_container_registry.acr.name,
 *     resourceGroupName: azurerm_resource_group.rg.name,
 *     scopeMapId: azurerm_container_registry_scope_map.map.id,
 * });
 * ```
 *
 * ## Import
 *
 * Container Registries can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:containerservice/registryToken:RegistryToken example /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/mygroup1/providers/Microsoft.ContainerRegistry/registries/myregistry1/tokens/token1
 * ```
 */
export class RegistryToken extends pulumi.CustomResource {
    /**
     * Get an existing RegistryToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegistryTokenState, opts?: pulumi.CustomResourceOptions): RegistryToken {
        return new RegistryToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:containerservice/registryToken:RegistryToken';

    /**
     * Returns true if the given object is an instance of RegistryToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RegistryToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegistryToken.__pulumiType;
    }

    /**
     * The name of the Container Registry. Changing this forces a new resource to be created.
     */
    public readonly containerRegistryName!: pulumi.Output<string>;
    /**
     * Should the Container Registry token be enabled? Defaults to `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the name of the token. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * The ID of the Container Registry Scope Map associated with the token.
     */
    public readonly scopeMapId!: pulumi.Output<string>;

    /**
     * Create a RegistryToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegistryTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegistryTokenArgs | RegistryTokenState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegistryTokenState | undefined;
            inputs["containerRegistryName"] = state ? state.containerRegistryName : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["scopeMapId"] = state ? state.scopeMapId : undefined;
        } else {
            const args = argsOrState as RegistryTokenArgs | undefined;
            if ((!args || args.containerRegistryName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerRegistryName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.scopeMapId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopeMapId'");
            }
            inputs["containerRegistryName"] = args ? args.containerRegistryName : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["scopeMapId"] = args ? args.scopeMapId : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(RegistryToken.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RegistryToken resources.
 */
export interface RegistryTokenState {
    /**
     * The name of the Container Registry. Changing this forces a new resource to be created.
     */
    containerRegistryName?: pulumi.Input<string>;
    /**
     * Should the Container Registry token be enabled? Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the name of the token. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The ID of the Container Registry Scope Map associated with the token.
     */
    scopeMapId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RegistryToken resource.
 */
export interface RegistryTokenArgs {
    /**
     * The name of the Container Registry. Changing this forces a new resource to be created.
     */
    containerRegistryName: pulumi.Input<string>;
    /**
     * Should the Container Registry token be enabled? Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the name of the token. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The ID of the Container Registry Scope Map associated with the token.
     */
    scopeMapId: pulumi.Input<string>;
}
