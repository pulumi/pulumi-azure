// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Container Registry Token Password associated with a scope map.  For more information on scope maps and their tokens see the [product documentation](https://learn.microsoft.com/en-us/azure/container-registry/container-registry-repository-scoped-permissions).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resource-group",
 *     location: "West Europe",
 * });
 * const exampleRegistry = new azure.containerservice.Registry("example", {
 *     name: "example-registry",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     sku: "Basic",
 *     adminEnabled: false,
 *     georeplicationLocations: [
 *         "East US",
 *         "West Europe",
 *     ],
 * });
 * const exampleRegistryScopeMap = new azure.containerservice.RegistryScopeMap("example", {
 *     name: "example-scope-map",
 *     containerRegistryName: exampleRegistry.name,
 *     resourceGroupName: example.name,
 *     actions: [
 *         "repositories/repo1/content/read",
 *         "repositories/repo1/content/write",
 *     ],
 * });
 * const exampleRegistryToken = new azure.containerservice.RegistryToken("example", {
 *     name: "exampletoken",
 *     containerRegistryName: exampleRegistry.name,
 *     resourceGroupName: example.name,
 *     scopeMapId: exampleRegistryScopeMap.id,
 * });
 * const exampleTokenPassword = new azure.containerservice.TokenPassword("example", {
 *     containerRegistryTokenId: exampleRegistryToken.id,
 *     password1: {
 *         expiry: "2023-03-22T17:57:36+08:00",
 *     },
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.ContainerRegistry` - 2023-11-01-preview
 *
 * ## Import
 *
 * Container Registry Token Passwords can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:containerservice/tokenPassword:TokenPassword example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.ContainerRegistry/registries/registry1/tokens/token1/passwords/password
 * ```
 */
export class TokenPassword extends pulumi.CustomResource {
    /**
     * Get an existing TokenPassword resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TokenPasswordState, opts?: pulumi.CustomResourceOptions): TokenPassword {
        return new TokenPassword(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:containerservice/tokenPassword:TokenPassword';

    /**
     * Returns true if the given object is an instance of TokenPassword.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TokenPassword {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TokenPassword.__pulumiType;
    }

    /**
     * The ID of the Container Registry Token that this Container Registry Token Password resides in. Changing this forces a new Container Registry Token Password to be created.
     */
    declare public readonly containerRegistryTokenId: pulumi.Output<string>;
    /**
     * One `password` block as defined below.
     */
    declare public readonly password1: pulumi.Output<outputs.containerservice.TokenPasswordPassword1>;
    /**
     * One `password` block as defined below.
     */
    declare public readonly password2: pulumi.Output<outputs.containerservice.TokenPasswordPassword2 | undefined>;

    /**
     * Create a TokenPassword resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TokenPasswordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TokenPasswordArgs | TokenPasswordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TokenPasswordState | undefined;
            resourceInputs["containerRegistryTokenId"] = state?.containerRegistryTokenId;
            resourceInputs["password1"] = state?.password1;
            resourceInputs["password2"] = state?.password2;
        } else {
            const args = argsOrState as TokenPasswordArgs | undefined;
            if (args?.containerRegistryTokenId === undefined && !opts.urn) {
                throw new Error("Missing required property 'containerRegistryTokenId'");
            }
            if (args?.password1 === undefined && !opts.urn) {
                throw new Error("Missing required property 'password1'");
            }
            resourceInputs["containerRegistryTokenId"] = args?.containerRegistryTokenId;
            resourceInputs["password1"] = args?.password1;
            resourceInputs["password2"] = args?.password2;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TokenPassword.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TokenPassword resources.
 */
export interface TokenPasswordState {
    /**
     * The ID of the Container Registry Token that this Container Registry Token Password resides in. Changing this forces a new Container Registry Token Password to be created.
     */
    containerRegistryTokenId?: pulumi.Input<string>;
    /**
     * One `password` block as defined below.
     */
    password1?: pulumi.Input<inputs.containerservice.TokenPasswordPassword1>;
    /**
     * One `password` block as defined below.
     */
    password2?: pulumi.Input<inputs.containerservice.TokenPasswordPassword2>;
}

/**
 * The set of arguments for constructing a TokenPassword resource.
 */
export interface TokenPasswordArgs {
    /**
     * The ID of the Container Registry Token that this Container Registry Token Password resides in. Changing this forces a new Container Registry Token Password to be created.
     */
    containerRegistryTokenId: pulumi.Input<string>;
    /**
     * One `password` block as defined below.
     */
    password1: pulumi.Input<inputs.containerservice.TokenPasswordPassword1>;
    /**
     * One `password` block as defined below.
     */
    password2?: pulumi.Input<inputs.containerservice.TokenPasswordPassword2>;
}
