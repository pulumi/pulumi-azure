// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Container Connected Registry.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleRegistry = new azure.containerservice.Registry("exampleRegistry", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     sku: "Premium",
 *     dataEndpointEnabled: true,
 * });
 * const exampleRegistryScopeMap = new azure.containerservice.RegistryScopeMap("exampleRegistryScopeMap", {
 *     containerRegistryName: exampleRegistry.name,
 *     resourceGroupName: exampleRegistry.resourceGroupName,
 *     actions: [
 *         "repositories/hello-world/content/delete",
 *         "repositories/hello-world/content/read",
 *         "repositories/hello-world/content/write",
 *         "repositories/hello-world/metadata/read",
 *         "repositories/hello-world/metadata/write",
 *         "gateway/examplecr/config/read",
 *         "gateway/examplecr/config/write",
 *         "gateway/examplecr/message/read",
 *         "gateway/examplecr/message/write",
 *     ],
 * });
 * const exampleRegistryToken = new azure.containerservice.RegistryToken("exampleRegistryToken", {
 *     containerRegistryName: exampleRegistry.name,
 *     resourceGroupName: exampleRegistry.resourceGroupName,
 *     scopeMapId: exampleRegistryScopeMap.id,
 * });
 * const exampleConnectedRegistry = new azure.containerservice.ConnectedRegistry("exampleConnectedRegistry", {
 *     containerRegistryId: exampleRegistry.id,
 *     syncTokenId: exampleRegistryToken.id,
 * });
 * ```
 *
 * ## Import
 *
 * Container Connected Registries can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:containerservice/connectedRegistry:ConnectedRegistry example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.ContainerRegistry/registries/registry1/connectedRegistries/registry1
 * ```
 */
export class ConnectedRegistry extends pulumi.CustomResource {
    /**
     * Get an existing ConnectedRegistry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectedRegistryState, opts?: pulumi.CustomResourceOptions): ConnectedRegistry {
        return new ConnectedRegistry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:containerservice/connectedRegistry:ConnectedRegistry';

    /**
     * Returns true if the given object is an instance of ConnectedRegistry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectedRegistry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectedRegistry.__pulumiType;
    }

    /**
     * Should the log auditing be enabled?
     */
    public readonly auditLogEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies a list of IDs of Container Registry Tokens, which are meant to be used by the clients to connect to the Connected Registry.
     */
    public readonly clientTokenIds!: pulumi.Output<string[] | undefined>;
    /**
     * The ID of the Container Registry that this Connected Registry will reside in. Changing this forces a new Container Connected Registry to be created.
     *
     * > If `parentRegistryId` is not specified, the Connected Registry will be connected to the Container Registry identified by `containerRegistryId`.
     */
    public readonly containerRegistryId!: pulumi.Output<string>;
    /**
     * The verbosity of the logs. Possible values are `None`, `Debug`, `Information`, `Warning` and `Error`. Defaults to `None`.
     */
    public readonly logLevel!: pulumi.Output<string | undefined>;
    /**
     * The mode of the Connected Registry. Possible values are `Mirror`, `ReadOnly`, `ReadWrite` and `Registry`. Changing this forces a new Container Connected Registry to be created. Defaults to `ReadWrite`.
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * The name which should be used for this Container Connected Registry. Changing this forces a new Container Connected Registry to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * One or more `notification` blocks as defined below.
     */
    public readonly notifications!: pulumi.Output<outputs.containerservice.ConnectedRegistryNotification[] | undefined>;
    /**
     * The ID of the parent registry. This can be either a Container Registry ID or a Connected Registry ID. Changing this forces a new Container Connected Registry to be created.
     */
    public readonly parentRegistryId!: pulumi.Output<string | undefined>;
    /**
     * The period of time (in form of ISO8601) for which a message is available to sync before it is expired. Allowed range is from `P1D` to `P90D`. Defaults to `P1D`.
     */
    public readonly syncMessageTtl!: pulumi.Output<string | undefined>;
    /**
     * The cron expression indicating the schedule that the Connected Registry will sync with its parent. Defaults to `* * * * *`.
     */
    public readonly syncSchedule!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Container Registry Token which is used for synchronizing the Connected Registry. Changing this forces a new Container Connected Registry to be created.
     */
    public readonly syncTokenId!: pulumi.Output<string>;
    /**
     * The time window (in form of ISO8601) during which sync is enabled for each schedule occurrence. Allowed range is from `PT3H` to `P7D`.
     */
    public readonly syncWindow!: pulumi.Output<string | undefined>;

    /**
     * Create a ConnectedRegistry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectedRegistryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectedRegistryArgs | ConnectedRegistryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectedRegistryState | undefined;
            resourceInputs["auditLogEnabled"] = state ? state.auditLogEnabled : undefined;
            resourceInputs["clientTokenIds"] = state ? state.clientTokenIds : undefined;
            resourceInputs["containerRegistryId"] = state ? state.containerRegistryId : undefined;
            resourceInputs["logLevel"] = state ? state.logLevel : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["parentRegistryId"] = state ? state.parentRegistryId : undefined;
            resourceInputs["syncMessageTtl"] = state ? state.syncMessageTtl : undefined;
            resourceInputs["syncSchedule"] = state ? state.syncSchedule : undefined;
            resourceInputs["syncTokenId"] = state ? state.syncTokenId : undefined;
            resourceInputs["syncWindow"] = state ? state.syncWindow : undefined;
        } else {
            const args = argsOrState as ConnectedRegistryArgs | undefined;
            if ((!args || args.containerRegistryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerRegistryId'");
            }
            if ((!args || args.syncTokenId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'syncTokenId'");
            }
            resourceInputs["auditLogEnabled"] = args ? args.auditLogEnabled : undefined;
            resourceInputs["clientTokenIds"] = args ? args.clientTokenIds : undefined;
            resourceInputs["containerRegistryId"] = args ? args.containerRegistryId : undefined;
            resourceInputs["logLevel"] = args ? args.logLevel : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notifications"] = args ? args.notifications : undefined;
            resourceInputs["parentRegistryId"] = args ? args.parentRegistryId : undefined;
            resourceInputs["syncMessageTtl"] = args ? args.syncMessageTtl : undefined;
            resourceInputs["syncSchedule"] = args ? args.syncSchedule : undefined;
            resourceInputs["syncTokenId"] = args ? args.syncTokenId : undefined;
            resourceInputs["syncWindow"] = args ? args.syncWindow : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectedRegistry.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConnectedRegistry resources.
 */
export interface ConnectedRegistryState {
    /**
     * Should the log auditing be enabled?
     */
    auditLogEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies a list of IDs of Container Registry Tokens, which are meant to be used by the clients to connect to the Connected Registry.
     */
    clientTokenIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the Container Registry that this Connected Registry will reside in. Changing this forces a new Container Connected Registry to be created.
     *
     * > If `parentRegistryId` is not specified, the Connected Registry will be connected to the Container Registry identified by `containerRegistryId`.
     */
    containerRegistryId?: pulumi.Input<string>;
    /**
     * The verbosity of the logs. Possible values are `None`, `Debug`, `Information`, `Warning` and `Error`. Defaults to `None`.
     */
    logLevel?: pulumi.Input<string>;
    /**
     * The mode of the Connected Registry. Possible values are `Mirror`, `ReadOnly`, `ReadWrite` and `Registry`. Changing this forces a new Container Connected Registry to be created. Defaults to `ReadWrite`.
     */
    mode?: pulumi.Input<string>;
    /**
     * The name which should be used for this Container Connected Registry. Changing this forces a new Container Connected Registry to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * One or more `notification` blocks as defined below.
     */
    notifications?: pulumi.Input<pulumi.Input<inputs.containerservice.ConnectedRegistryNotification>[]>;
    /**
     * The ID of the parent registry. This can be either a Container Registry ID or a Connected Registry ID. Changing this forces a new Container Connected Registry to be created.
     */
    parentRegistryId?: pulumi.Input<string>;
    /**
     * The period of time (in form of ISO8601) for which a message is available to sync before it is expired. Allowed range is from `P1D` to `P90D`. Defaults to `P1D`.
     */
    syncMessageTtl?: pulumi.Input<string>;
    /**
     * The cron expression indicating the schedule that the Connected Registry will sync with its parent. Defaults to `* * * * *`.
     */
    syncSchedule?: pulumi.Input<string>;
    /**
     * The ID of the Container Registry Token which is used for synchronizing the Connected Registry. Changing this forces a new Container Connected Registry to be created.
     */
    syncTokenId?: pulumi.Input<string>;
    /**
     * The time window (in form of ISO8601) during which sync is enabled for each schedule occurrence. Allowed range is from `PT3H` to `P7D`.
     */
    syncWindow?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConnectedRegistry resource.
 */
export interface ConnectedRegistryArgs {
    /**
     * Should the log auditing be enabled?
     */
    auditLogEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies a list of IDs of Container Registry Tokens, which are meant to be used by the clients to connect to the Connected Registry.
     */
    clientTokenIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the Container Registry that this Connected Registry will reside in. Changing this forces a new Container Connected Registry to be created.
     *
     * > If `parentRegistryId` is not specified, the Connected Registry will be connected to the Container Registry identified by `containerRegistryId`.
     */
    containerRegistryId: pulumi.Input<string>;
    /**
     * The verbosity of the logs. Possible values are `None`, `Debug`, `Information`, `Warning` and `Error`. Defaults to `None`.
     */
    logLevel?: pulumi.Input<string>;
    /**
     * The mode of the Connected Registry. Possible values are `Mirror`, `ReadOnly`, `ReadWrite` and `Registry`. Changing this forces a new Container Connected Registry to be created. Defaults to `ReadWrite`.
     */
    mode?: pulumi.Input<string>;
    /**
     * The name which should be used for this Container Connected Registry. Changing this forces a new Container Connected Registry to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * One or more `notification` blocks as defined below.
     */
    notifications?: pulumi.Input<pulumi.Input<inputs.containerservice.ConnectedRegistryNotification>[]>;
    /**
     * The ID of the parent registry. This can be either a Container Registry ID or a Connected Registry ID. Changing this forces a new Container Connected Registry to be created.
     */
    parentRegistryId?: pulumi.Input<string>;
    /**
     * The period of time (in form of ISO8601) for which a message is available to sync before it is expired. Allowed range is from `P1D` to `P90D`. Defaults to `P1D`.
     */
    syncMessageTtl?: pulumi.Input<string>;
    /**
     * The cron expression indicating the schedule that the Connected Registry will sync with its parent. Defaults to `* * * * *`.
     */
    syncSchedule?: pulumi.Input<string>;
    /**
     * The ID of the Container Registry Token which is used for synchronizing the Connected Registry. Changing this forces a new Container Connected Registry to be created.
     */
    syncTokenId: pulumi.Input<string>;
    /**
     * The time window (in form of ISO8601) during which sync is enabled for each schedule occurrence. Allowed range is from `PT3H` to `P7D`.
     */
    syncWindow?: pulumi.Input<string>;
}
