// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ConnectedRegistryArgs, ConnectedRegistryState } from "./connectedRegistry";
export type ConnectedRegistry = import("./connectedRegistry").ConnectedRegistry;
export const ConnectedRegistry: typeof import("./connectedRegistry").ConnectedRegistry = null as any;
utilities.lazyLoad(exports, ["ConnectedRegistry"], () => require("./connectedRegistry"));

export { GetClusterNodePoolArgs, GetClusterNodePoolResult, GetClusterNodePoolOutputArgs } from "./getClusterNodePool";
export const getClusterNodePool: typeof import("./getClusterNodePool").getClusterNodePool = null as any;
export const getClusterNodePoolOutput: typeof import("./getClusterNodePool").getClusterNodePoolOutput = null as any;
utilities.lazyLoad(exports, ["getClusterNodePool","getClusterNodePoolOutput"], () => require("./getClusterNodePool"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetKubernetesClusterArgs, GetKubernetesClusterResult, GetKubernetesClusterOutputArgs } from "./getKubernetesCluster";
export const getKubernetesCluster: typeof import("./getKubernetesCluster").getKubernetesCluster = null as any;
export const getKubernetesClusterOutput: typeof import("./getKubernetesCluster").getKubernetesClusterOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesCluster","getKubernetesClusterOutput"], () => require("./getKubernetesCluster"));

export { GetKubernetesNodePoolSnapshotArgs, GetKubernetesNodePoolSnapshotResult, GetKubernetesNodePoolSnapshotOutputArgs } from "./getKubernetesNodePoolSnapshot";
export const getKubernetesNodePoolSnapshot: typeof import("./getKubernetesNodePoolSnapshot").getKubernetesNodePoolSnapshot = null as any;
export const getKubernetesNodePoolSnapshotOutput: typeof import("./getKubernetesNodePoolSnapshot").getKubernetesNodePoolSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesNodePoolSnapshot","getKubernetesNodePoolSnapshotOutput"], () => require("./getKubernetesNodePoolSnapshot"));

export { GetKubernetesServiceVersionsArgs, GetKubernetesServiceVersionsResult, GetKubernetesServiceVersionsOutputArgs } from "./getKubernetesServiceVersions";
export const getKubernetesServiceVersions: typeof import("./getKubernetesServiceVersions").getKubernetesServiceVersions = null as any;
export const getKubernetesServiceVersionsOutput: typeof import("./getKubernetesServiceVersions").getKubernetesServiceVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesServiceVersions","getKubernetesServiceVersionsOutput"], () => require("./getKubernetesServiceVersions"));

export { GetRegistryArgs, GetRegistryResult, GetRegistryOutputArgs } from "./getRegistry";
export const getRegistry: typeof import("./getRegistry").getRegistry = null as any;
export const getRegistryOutput: typeof import("./getRegistry").getRegistryOutput = null as any;
utilities.lazyLoad(exports, ["getRegistry","getRegistryOutput"], () => require("./getRegistry"));

export { GetRegistryScopeMapArgs, GetRegistryScopeMapResult, GetRegistryScopeMapOutputArgs } from "./getRegistryScopeMap";
export const getRegistryScopeMap: typeof import("./getRegistryScopeMap").getRegistryScopeMap = null as any;
export const getRegistryScopeMapOutput: typeof import("./getRegistryScopeMap").getRegistryScopeMapOutput = null as any;
utilities.lazyLoad(exports, ["getRegistryScopeMap","getRegistryScopeMapOutput"], () => require("./getRegistryScopeMap"));

export { GetRegistryTokenArgs, GetRegistryTokenResult, GetRegistryTokenOutputArgs } from "./getRegistryToken";
export const getRegistryToken: typeof import("./getRegistryToken").getRegistryToken = null as any;
export const getRegistryTokenOutput: typeof import("./getRegistryToken").getRegistryTokenOutput = null as any;
utilities.lazyLoad(exports, ["getRegistryToken","getRegistryTokenOutput"], () => require("./getRegistryToken"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { KubernetesClusterArgs, KubernetesClusterState } from "./kubernetesCluster";
export type KubernetesCluster = import("./kubernetesCluster").KubernetesCluster;
export const KubernetesCluster: typeof import("./kubernetesCluster").KubernetesCluster = null as any;
utilities.lazyLoad(exports, ["KubernetesCluster"], () => require("./kubernetesCluster"));

export { KubernetesClusterExtensionArgs, KubernetesClusterExtensionState } from "./kubernetesClusterExtension";
export type KubernetesClusterExtension = import("./kubernetesClusterExtension").KubernetesClusterExtension;
export const KubernetesClusterExtension: typeof import("./kubernetesClusterExtension").KubernetesClusterExtension = null as any;
utilities.lazyLoad(exports, ["KubernetesClusterExtension"], () => require("./kubernetesClusterExtension"));

export { KubernetesClusterNodePoolArgs, KubernetesClusterNodePoolState } from "./kubernetesClusterNodePool";
export type KubernetesClusterNodePool = import("./kubernetesClusterNodePool").KubernetesClusterNodePool;
export const KubernetesClusterNodePool: typeof import("./kubernetesClusterNodePool").KubernetesClusterNodePool = null as any;
utilities.lazyLoad(exports, ["KubernetesClusterNodePool"], () => require("./kubernetesClusterNodePool"));

export { KubernetesFleetManagerArgs, KubernetesFleetManagerState } from "./kubernetesFleetManager";
export type KubernetesFleetManager = import("./kubernetesFleetManager").KubernetesFleetManager;
export const KubernetesFleetManager: typeof import("./kubernetesFleetManager").KubernetesFleetManager = null as any;
utilities.lazyLoad(exports, ["KubernetesFleetManager"], () => require("./kubernetesFleetManager"));

export { RegistryArgs, RegistryState } from "./registry";
export type Registry = import("./registry").Registry;
export const Registry: typeof import("./registry").Registry = null as any;
utilities.lazyLoad(exports, ["Registry"], () => require("./registry"));

export { RegistryAgentPoolArgs, RegistryAgentPoolState } from "./registryAgentPool";
export type RegistryAgentPool = import("./registryAgentPool").RegistryAgentPool;
export const RegistryAgentPool: typeof import("./registryAgentPool").RegistryAgentPool = null as any;
utilities.lazyLoad(exports, ["RegistryAgentPool"], () => require("./registryAgentPool"));

export { RegistryScopeMapArgs, RegistryScopeMapState } from "./registryScopeMap";
export type RegistryScopeMap = import("./registryScopeMap").RegistryScopeMap;
export const RegistryScopeMap: typeof import("./registryScopeMap").RegistryScopeMap = null as any;
utilities.lazyLoad(exports, ["RegistryScopeMap"], () => require("./registryScopeMap"));

export { RegistryTaskArgs, RegistryTaskState } from "./registryTask";
export type RegistryTask = import("./registryTask").RegistryTask;
export const RegistryTask: typeof import("./registryTask").RegistryTask = null as any;
utilities.lazyLoad(exports, ["RegistryTask"], () => require("./registryTask"));

export { RegistryTaskScheduleRunNowArgs, RegistryTaskScheduleRunNowState } from "./registryTaskScheduleRunNow";
export type RegistryTaskScheduleRunNow = import("./registryTaskScheduleRunNow").RegistryTaskScheduleRunNow;
export const RegistryTaskScheduleRunNow: typeof import("./registryTaskScheduleRunNow").RegistryTaskScheduleRunNow = null as any;
utilities.lazyLoad(exports, ["RegistryTaskScheduleRunNow"], () => require("./registryTaskScheduleRunNow"));

export { RegistryTokenArgs, RegistryTokenState } from "./registryToken";
export type RegistryToken = import("./registryToken").RegistryToken;
export const RegistryToken: typeof import("./registryToken").RegistryToken = null as any;
utilities.lazyLoad(exports, ["RegistryToken"], () => require("./registryToken"));

export { RegistryWebhookArgs, RegistryWebhookState } from "./registryWebhook";
export type RegistryWebhook = import("./registryWebhook").RegistryWebhook;
export const RegistryWebhook: typeof import("./registryWebhook").RegistryWebhook = null as any;
utilities.lazyLoad(exports, ["RegistryWebhook"], () => require("./registryWebhook"));

export { RegistryWebookArgs, RegistryWebookState } from "./registryWebook";
export type RegistryWebook = import("./registryWebook").RegistryWebook;
export const RegistryWebook: typeof import("./registryWebook").RegistryWebook = null as any;
utilities.lazyLoad(exports, ["RegistryWebook"], () => require("./registryWebook"));

export { TokenPasswordArgs, TokenPasswordState } from "./tokenPassword";
export type TokenPassword = import("./tokenPassword").TokenPassword;
export const TokenPassword: typeof import("./tokenPassword").TokenPassword = null as any;
utilities.lazyLoad(exports, ["TokenPassword"], () => require("./tokenPassword"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:containerservice/connectedRegistry:ConnectedRegistry":
                return new ConnectedRegistry(name, <any>undefined, { urn })
            case "azure:containerservice/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "azure:containerservice/kubernetesCluster:KubernetesCluster":
                return new KubernetesCluster(name, <any>undefined, { urn })
            case "azure:containerservice/kubernetesClusterExtension:KubernetesClusterExtension":
                return new KubernetesClusterExtension(name, <any>undefined, { urn })
            case "azure:containerservice/kubernetesClusterNodePool:KubernetesClusterNodePool":
                return new KubernetesClusterNodePool(name, <any>undefined, { urn })
            case "azure:containerservice/kubernetesFleetManager:KubernetesFleetManager":
                return new KubernetesFleetManager(name, <any>undefined, { urn })
            case "azure:containerservice/registry:Registry":
                return new Registry(name, <any>undefined, { urn })
            case "azure:containerservice/registryAgentPool:RegistryAgentPool":
                return new RegistryAgentPool(name, <any>undefined, { urn })
            case "azure:containerservice/registryScopeMap:RegistryScopeMap":
                return new RegistryScopeMap(name, <any>undefined, { urn })
            case "azure:containerservice/registryTask:RegistryTask":
                return new RegistryTask(name, <any>undefined, { urn })
            case "azure:containerservice/registryTaskScheduleRunNow:RegistryTaskScheduleRunNow":
                return new RegistryTaskScheduleRunNow(name, <any>undefined, { urn })
            case "azure:containerservice/registryToken:RegistryToken":
                return new RegistryToken(name, <any>undefined, { urn })
            case "azure:containerservice/registryWebhook:RegistryWebhook":
                return new RegistryWebhook(name, <any>undefined, { urn })
            case "azure:containerservice/registryWebook:RegistryWebook":
                return new RegistryWebook(name, <any>undefined, { urn })
            case "azure:containerservice/tokenPassword:TokenPassword":
                return new TokenPassword(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "containerservice/connectedRegistry", _module)
pulumi.runtime.registerResourceModule("azure", "containerservice/group", _module)
pulumi.runtime.registerResourceModule("azure", "containerservice/kubernetesCluster", _module)
pulumi.runtime.registerResourceModule("azure", "containerservice/kubernetesClusterExtension", _module)
pulumi.runtime.registerResourceModule("azure", "containerservice/kubernetesClusterNodePool", _module)
pulumi.runtime.registerResourceModule("azure", "containerservice/kubernetesFleetManager", _module)
pulumi.runtime.registerResourceModule("azure", "containerservice/registry", _module)
pulumi.runtime.registerResourceModule("azure", "containerservice/registryAgentPool", _module)
pulumi.runtime.registerResourceModule("azure", "containerservice/registryScopeMap", _module)
pulumi.runtime.registerResourceModule("azure", "containerservice/registryTask", _module)
pulumi.runtime.registerResourceModule("azure", "containerservice/registryTaskScheduleRunNow", _module)
pulumi.runtime.registerResourceModule("azure", "containerservice/registryToken", _module)
pulumi.runtime.registerResourceModule("azure", "containerservice/registryWebhook", _module)
pulumi.runtime.registerResourceModule("azure", "containerservice/registryWebook", _module)
pulumi.runtime.registerResourceModule("azure", "containerservice/tokenPassword", _module)
