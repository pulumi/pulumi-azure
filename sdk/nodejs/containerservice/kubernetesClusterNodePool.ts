// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Node Pool within a Kubernetes Cluster
 *
 * > **NOTE:** Multiple Node Pools are only supported when the Kubernetes Cluster is using Virtual Machine Scale Sets.
 *
 * > **Note:** Changing certain properties is done by cycling the node pool. When cycling it, it doesnâ€™t perform cordon and drain, and it will disrupt rescheduling pods currently running on the previous node pool. `temporaryNameForRotation` must be specified when changing any of the following properties: `fipsEnabled`, `hostEncryptionEnabled`, `kubeletConfig`, `linuxOsConfig`, `maxPods`, `nodePublicIpEnabled`, `osDiskSizeGb`, `osDiskType`, `podSubnetId`, `snapshotId`, `ultraSsdEnabled`, `vmSize`, `vnetSubnetId`, `zones`.
 *
 * ## Example Usage
 *
 * This example provisions a basic Kubernetes Node Pool.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleKubernetesCluster = new azure.containerservice.KubernetesCluster("example", {
 *     name: "example-aks1",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     dnsPrefix: "exampleaks1",
 *     defaultNodePool: {
 *         name: "default",
 *         nodeCount: 1,
 *         vmSize: "Standard_D2_v2",
 *     },
 *     servicePrincipal: {
 *         clientId: "00000000-0000-0000-0000-000000000000",
 *         clientSecret: "00000000000000000000000000000000",
 *     },
 * });
 * const exampleKubernetesClusterNodePool = new azure.containerservice.KubernetesClusterNodePool("example", {
 *     name: "internal",
 *     kubernetesClusterId: exampleKubernetesCluster.id,
 *     vmSize: "Standard_DS2_v2",
 *     nodeCount: 1,
 *     tags: {
 *         Environment: "Production",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Kubernetes Cluster Node Pools can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:containerservice/kubernetesClusterNodePool:KubernetesClusterNodePool pool1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ContainerService/managedClusters/cluster1/agentPools/pool1
 * ```
 */
export class KubernetesClusterNodePool extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesClusterNodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesClusterNodePoolState, opts?: pulumi.CustomResourceOptions): KubernetesClusterNodePool {
        return new KubernetesClusterNodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:containerservice/kubernetesClusterNodePool:KubernetesClusterNodePool';

    /**
     * Returns true if the given object is an instance of KubernetesClusterNodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesClusterNodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesClusterNodePool.__pulumiType;
    }

    /**
     * Whether to enable [auto-scaler](https://docs.microsoft.com/azure/aks/cluster-autoscaler).
     */
    public readonly autoScalingEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the ID of the Capacity Reservation Group where this Node Pool should exist. Changing this forces a new resource to be created.
     */
    public readonly capacityReservationGroupId!: pulumi.Output<string | undefined>;
    /**
     * The Eviction Policy which should be used for Virtual Machines within the Virtual Machine Scale Set powering this Node Pool. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
     *
     * > **Note:** An Eviction Policy can only be configured when `priority` is set to `Spot` and will default to `Delete` unless otherwise specified.
     */
    public readonly evictionPolicy!: pulumi.Output<string | undefined>;
    /**
     * Should the nodes in this Node Pool have Federal Information Processing Standard enabled? Changing this property requires specifying `temporaryNameForRotation`.
     *
     * > **Note:** FIPS support is in Public Preview - more information and details on how to opt into the Preview can be found in [this article](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#add-a-fips-enabled-node-pool-preview).
     */
    public readonly fipsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the GPU MIG instance profile for supported GPU VM SKU. The allowed values are `MIG1g`, `MIG2g`, `MIG3g`, `MIG4g` and `MIG7g`. Changing this forces a new resource to be created.
     */
    public readonly gpuInstance!: pulumi.Output<string | undefined>;
    /**
     * Should the nodes in this Node Pool have host encryption enabled? Changing this property requires specifying `temporaryNameForRotation`.
     *
     * > **NOTE:** Additional fields must be configured depending on the value of this field - see below.
     */
    public readonly hostEncryptionEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The fully qualified resource ID of the Dedicated Host Group to provision virtual machines from. Changing this forces a new resource to be created.
     */
    public readonly hostGroupId!: pulumi.Output<string | undefined>;
    /**
     * A `kubeletConfig` block as defined below. Changing this requires specifying `temporaryNameForRotation`.
     */
    public readonly kubeletConfig!: pulumi.Output<outputs.containerservice.KubernetesClusterNodePoolKubeletConfig | undefined>;
    /**
     * The type of disk used by kubelet. Possible values are `OS` and `Temporary`.
     */
    public readonly kubeletDiskType!: pulumi.Output<string>;
    /**
     * The ID of the Kubernetes Cluster where this Node Pool should exist. Changing this forces a new resource to be created.
     *
     * > **NOTE:** The type of Default Node Pool for the Kubernetes Cluster must be `VirtualMachineScaleSets` to attach multiple node pools.
     */
    public readonly kubernetesClusterId!: pulumi.Output<string>;
    /**
     * A `linuxOsConfig` block as defined below. Changing this requires specifying `temporaryNameForRotation`.
     */
    public readonly linuxOsConfig!: pulumi.Output<outputs.containerservice.KubernetesClusterNodePoolLinuxOsConfig | undefined>;
    public readonly maxCount!: pulumi.Output<number | undefined>;
    /**
     * The maximum number of pods that can run on each agent. Changing this property requires specifying `temporaryNameForRotation`.
     */
    public readonly maxPods!: pulumi.Output<number>;
    public readonly minCount!: pulumi.Output<number | undefined>;
    /**
     * Should this Node Pool be used for System or User resources? Possible values are `System` and `User`. Defaults to `User`.
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * The name of the Node Pool which should be created within the Kubernetes Cluster. Changing this forces a new resource to be created.
     *
     * > **NOTE:** A Windows Node Pool cannot have a `name` longer than 6 characters.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly nodeCount!: pulumi.Output<number>;
    /**
     * A map of Kubernetes labels which should be applied to nodes in this Node Pool.
     */
    public readonly nodeLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * A `nodeNetworkProfile` block as documented below.
     */
    public readonly nodeNetworkProfile!: pulumi.Output<outputs.containerservice.KubernetesClusterNodePoolNodeNetworkProfile | undefined>;
    /**
     * Should each node have a Public IP Address? Changing this property requires specifying `temporaryNameForRotation`.
     */
    public readonly nodePublicIpEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Resource ID for the Public IP Addresses Prefix for the nodes in this Node Pool. `nodePublicIpEnabled` should be `true`. Changing this forces a new resource to be created.
     */
    public readonly nodePublicIpPrefixId!: pulumi.Output<string | undefined>;
    /**
     * A list of Kubernetes taints which should be applied to nodes in the agent pool (e.g `key=value:NoSchedule`).
     */
    public readonly nodeTaints!: pulumi.Output<string[] | undefined>;
    /**
     * Version of Kubernetes used for the Agents. If not specified, the latest recommended version will be used at provisioning time (but won't auto-upgrade). AKS does not require an exact patch version to be specified, minor version aliases such as `1.22` are also supported. - The minor version's latest GA patch is automatically chosen in that case. More details can be found in [the documentation](https://docs.microsoft.com/en-us/azure/aks/supported-kubernetes-versions?tabs=azure-cli#alias-minor-version).
     *
     * > **Note:** This version must be supported by the Kubernetes Cluster - as such the version of Kubernetes used on the Cluster/Control Plane may need to be upgraded first.
     */
    public readonly orchestratorVersion!: pulumi.Output<string>;
    /**
     * The Agent Operating System disk size in GB. Changing this property requires specifying `temporaryNameForRotation`.
     */
    public readonly osDiskSizeGb!: pulumi.Output<number>;
    /**
     * The type of disk which should be used for the Operating System. Possible values are `Ephemeral` and `Managed`. Defaults to `Managed`. Changing this property requires specifying `temporaryNameForRotation`.
     */
    public readonly osDiskType!: pulumi.Output<string | undefined>;
    /**
     * Specifies the OS SKU used by the agent pool. Possible values are `AzureLinux`, `Ubuntu`, `Windows2019` and `Windows2022`. If not specified, the default is `Ubuntu` if OSType=Linux or `Windows2019` if OSType=Windows. And the default Windows OSSKU will be changed to `Windows2022` after Windows2019 is deprecated. Changing this from `AzureLinux` or `Ubuntu` to `AzureLinux` or `Ubuntu` will not replace the resource, otherwise it forces a new resource to be created.
     */
    public readonly osSku!: pulumi.Output<string>;
    /**
     * The Operating System which should be used for this Node Pool. Changing this forces a new resource to be created. Possible values are `Linux` and `Windows`. Defaults to `Linux`.
     */
    public readonly osType!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Subnet where the pods in the Node Pool should exist. Changing this property requires specifying `temporaryNameForRotation`.
     */
    public readonly podSubnetId!: pulumi.Output<string | undefined>;
    /**
     * The Priority for Virtual Machines within the Virtual Machine Scale Set that powers this Node Pool. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this forces a new resource to be created.
     */
    public readonly priority!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Proximity Placement Group where the Virtual Machine Scale Set that powers this Node Pool will be placed. Changing this forces a new resource to be created.
     *
     * > **Note:** When setting `priority` to Spot - you must configure an `evictionPolicy`, `spotMaxPrice` and add the applicable `nodeLabels` and `nodeTaints` [as per the Azure Documentation](https://docs.microsoft.com/azure/aks/spot-node-pool).
     */
    public readonly proximityPlacementGroupId!: pulumi.Output<string | undefined>;
    /**
     * Specifies how the node pool should deal with scaled-down nodes. Allowed values are `Delete` and `Deallocate`. Defaults to `Delete`.
     */
    public readonly scaleDownMode!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Snapshot which should be used to create this Node Pool. Changing this property requires specifying `temporaryNameForRotation`.
     */
    public readonly snapshotId!: pulumi.Output<string | undefined>;
    /**
     * The maximum price you're willing to pay in USD per Virtual Machine. Valid values are `-1` (the current on-demand price for a Virtual Machine) or a positive value with up to five decimal places. Changing this forces a new resource to be created.
     *
     * > **Note:** This field can only be configured when `priority` is set to `Spot`.
     */
    public readonly spotMaxPrice!: pulumi.Output<number | undefined>;
    /**
     * A mapping of tags to assign to the resource.
     *
     * > At this time there's a bug in the AKS API where Tags for a Node Pool are not stored in the correct case - you may wish to use [`ignoreChanges`](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) functionality to ignore changes to the casing until this is fixed in the AKS API.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the name of the temporary node pool used to cycle the node pool when one of the relevant properties are updated.
     */
    public readonly temporaryNameForRotation!: pulumi.Output<string | undefined>;
    /**
     * Used to specify whether the UltraSSD is enabled in the Node Pool. Defaults to `false`. See [the documentation](https://docs.microsoft.com/azure/aks/use-ultra-disks) for more information. Changing this property requires specifying `temporaryNameForRotation`.
     */
    public readonly ultraSsdEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * A `upgradeSettings` block as documented below.
     */
    public readonly upgradeSettings!: pulumi.Output<outputs.containerservice.KubernetesClusterNodePoolUpgradeSettings | undefined>;
    /**
     * The SKU which should be used for the Virtual Machines used in this Node Pool. Changing this property requires specifying `temporaryNameForRotation`.
     */
    public readonly vmSize!: pulumi.Output<string>;
    /**
     * The ID of the Subnet where this Node Pool should exist. Changing this property requires specifying `temporaryNameForRotation`.
     *
     * > **NOTE:** A route table must be configured on this Subnet.
     */
    public readonly vnetSubnetId!: pulumi.Output<string | undefined>;
    /**
     * A `windowsProfile` block as documented below. Changing this forces a new resource to be created.
     */
    public readonly windowsProfile!: pulumi.Output<outputs.containerservice.KubernetesClusterNodePoolWindowsProfile | undefined>;
    /**
     * Used to specify the workload runtime. Allowed values are `OCIContainer` and `WasmWasi`.
     *
     * > **Note:** WebAssembly System Interface node pools are in Public Preview - more information and details on how to opt into the preview can be found in [this article](https://docs.microsoft.com/azure/aks/use-wasi-node-pools)
     */
    public readonly workloadRuntime!: pulumi.Output<string | undefined>;
    /**
     * Specifies a list of Availability Zones in which this Kubernetes Cluster Node Pool should be located. Changing this property requires specifying `temporaryNameForRotation`.
     */
    public readonly zones!: pulumi.Output<string[] | undefined>;

    /**
     * Create a KubernetesClusterNodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesClusterNodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesClusterNodePoolArgs | KubernetesClusterNodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesClusterNodePoolState | undefined;
            resourceInputs["autoScalingEnabled"] = state ? state.autoScalingEnabled : undefined;
            resourceInputs["capacityReservationGroupId"] = state ? state.capacityReservationGroupId : undefined;
            resourceInputs["evictionPolicy"] = state ? state.evictionPolicy : undefined;
            resourceInputs["fipsEnabled"] = state ? state.fipsEnabled : undefined;
            resourceInputs["gpuInstance"] = state ? state.gpuInstance : undefined;
            resourceInputs["hostEncryptionEnabled"] = state ? state.hostEncryptionEnabled : undefined;
            resourceInputs["hostGroupId"] = state ? state.hostGroupId : undefined;
            resourceInputs["kubeletConfig"] = state ? state.kubeletConfig : undefined;
            resourceInputs["kubeletDiskType"] = state ? state.kubeletDiskType : undefined;
            resourceInputs["kubernetesClusterId"] = state ? state.kubernetesClusterId : undefined;
            resourceInputs["linuxOsConfig"] = state ? state.linuxOsConfig : undefined;
            resourceInputs["maxCount"] = state ? state.maxCount : undefined;
            resourceInputs["maxPods"] = state ? state.maxPods : undefined;
            resourceInputs["minCount"] = state ? state.minCount : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeCount"] = state ? state.nodeCount : undefined;
            resourceInputs["nodeLabels"] = state ? state.nodeLabels : undefined;
            resourceInputs["nodeNetworkProfile"] = state ? state.nodeNetworkProfile : undefined;
            resourceInputs["nodePublicIpEnabled"] = state ? state.nodePublicIpEnabled : undefined;
            resourceInputs["nodePublicIpPrefixId"] = state ? state.nodePublicIpPrefixId : undefined;
            resourceInputs["nodeTaints"] = state ? state.nodeTaints : undefined;
            resourceInputs["orchestratorVersion"] = state ? state.orchestratorVersion : undefined;
            resourceInputs["osDiskSizeGb"] = state ? state.osDiskSizeGb : undefined;
            resourceInputs["osDiskType"] = state ? state.osDiskType : undefined;
            resourceInputs["osSku"] = state ? state.osSku : undefined;
            resourceInputs["osType"] = state ? state.osType : undefined;
            resourceInputs["podSubnetId"] = state ? state.podSubnetId : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["proximityPlacementGroupId"] = state ? state.proximityPlacementGroupId : undefined;
            resourceInputs["scaleDownMode"] = state ? state.scaleDownMode : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["spotMaxPrice"] = state ? state.spotMaxPrice : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["temporaryNameForRotation"] = state ? state.temporaryNameForRotation : undefined;
            resourceInputs["ultraSsdEnabled"] = state ? state.ultraSsdEnabled : undefined;
            resourceInputs["upgradeSettings"] = state ? state.upgradeSettings : undefined;
            resourceInputs["vmSize"] = state ? state.vmSize : undefined;
            resourceInputs["vnetSubnetId"] = state ? state.vnetSubnetId : undefined;
            resourceInputs["windowsProfile"] = state ? state.windowsProfile : undefined;
            resourceInputs["workloadRuntime"] = state ? state.workloadRuntime : undefined;
            resourceInputs["zones"] = state ? state.zones : undefined;
        } else {
            const args = argsOrState as KubernetesClusterNodePoolArgs | undefined;
            if ((!args || args.kubernetesClusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kubernetesClusterId'");
            }
            if ((!args || args.vmSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmSize'");
            }
            resourceInputs["autoScalingEnabled"] = args ? args.autoScalingEnabled : undefined;
            resourceInputs["capacityReservationGroupId"] = args ? args.capacityReservationGroupId : undefined;
            resourceInputs["evictionPolicy"] = args ? args.evictionPolicy : undefined;
            resourceInputs["fipsEnabled"] = args ? args.fipsEnabled : undefined;
            resourceInputs["gpuInstance"] = args ? args.gpuInstance : undefined;
            resourceInputs["hostEncryptionEnabled"] = args ? args.hostEncryptionEnabled : undefined;
            resourceInputs["hostGroupId"] = args ? args.hostGroupId : undefined;
            resourceInputs["kubeletConfig"] = args ? args.kubeletConfig : undefined;
            resourceInputs["kubeletDiskType"] = args ? args.kubeletDiskType : undefined;
            resourceInputs["kubernetesClusterId"] = args ? args.kubernetesClusterId : undefined;
            resourceInputs["linuxOsConfig"] = args ? args.linuxOsConfig : undefined;
            resourceInputs["maxCount"] = args ? args.maxCount : undefined;
            resourceInputs["maxPods"] = args ? args.maxPods : undefined;
            resourceInputs["minCount"] = args ? args.minCount : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeCount"] = args ? args.nodeCount : undefined;
            resourceInputs["nodeLabels"] = args ? args.nodeLabels : undefined;
            resourceInputs["nodeNetworkProfile"] = args ? args.nodeNetworkProfile : undefined;
            resourceInputs["nodePublicIpEnabled"] = args ? args.nodePublicIpEnabled : undefined;
            resourceInputs["nodePublicIpPrefixId"] = args ? args.nodePublicIpPrefixId : undefined;
            resourceInputs["nodeTaints"] = args ? args.nodeTaints : undefined;
            resourceInputs["orchestratorVersion"] = args ? args.orchestratorVersion : undefined;
            resourceInputs["osDiskSizeGb"] = args ? args.osDiskSizeGb : undefined;
            resourceInputs["osDiskType"] = args ? args.osDiskType : undefined;
            resourceInputs["osSku"] = args ? args.osSku : undefined;
            resourceInputs["osType"] = args ? args.osType : undefined;
            resourceInputs["podSubnetId"] = args ? args.podSubnetId : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["proximityPlacementGroupId"] = args ? args.proximityPlacementGroupId : undefined;
            resourceInputs["scaleDownMode"] = args ? args.scaleDownMode : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["spotMaxPrice"] = args ? args.spotMaxPrice : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["temporaryNameForRotation"] = args ? args.temporaryNameForRotation : undefined;
            resourceInputs["ultraSsdEnabled"] = args ? args.ultraSsdEnabled : undefined;
            resourceInputs["upgradeSettings"] = args ? args.upgradeSettings : undefined;
            resourceInputs["vmSize"] = args ? args.vmSize : undefined;
            resourceInputs["vnetSubnetId"] = args ? args.vnetSubnetId : undefined;
            resourceInputs["windowsProfile"] = args ? args.windowsProfile : undefined;
            resourceInputs["workloadRuntime"] = args ? args.workloadRuntime : undefined;
            resourceInputs["zones"] = args ? args.zones : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KubernetesClusterNodePool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KubernetesClusterNodePool resources.
 */
export interface KubernetesClusterNodePoolState {
    /**
     * Whether to enable [auto-scaler](https://docs.microsoft.com/azure/aks/cluster-autoscaler).
     */
    autoScalingEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the ID of the Capacity Reservation Group where this Node Pool should exist. Changing this forces a new resource to be created.
     */
    capacityReservationGroupId?: pulumi.Input<string>;
    /**
     * The Eviction Policy which should be used for Virtual Machines within the Virtual Machine Scale Set powering this Node Pool. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
     *
     * > **Note:** An Eviction Policy can only be configured when `priority` is set to `Spot` and will default to `Delete` unless otherwise specified.
     */
    evictionPolicy?: pulumi.Input<string>;
    /**
     * Should the nodes in this Node Pool have Federal Information Processing Standard enabled? Changing this property requires specifying `temporaryNameForRotation`.
     *
     * > **Note:** FIPS support is in Public Preview - more information and details on how to opt into the Preview can be found in [this article](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#add-a-fips-enabled-node-pool-preview).
     */
    fipsEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the GPU MIG instance profile for supported GPU VM SKU. The allowed values are `MIG1g`, `MIG2g`, `MIG3g`, `MIG4g` and `MIG7g`. Changing this forces a new resource to be created.
     */
    gpuInstance?: pulumi.Input<string>;
    /**
     * Should the nodes in this Node Pool have host encryption enabled? Changing this property requires specifying `temporaryNameForRotation`.
     *
     * > **NOTE:** Additional fields must be configured depending on the value of this field - see below.
     */
    hostEncryptionEnabled?: pulumi.Input<boolean>;
    /**
     * The fully qualified resource ID of the Dedicated Host Group to provision virtual machines from. Changing this forces a new resource to be created.
     */
    hostGroupId?: pulumi.Input<string>;
    /**
     * A `kubeletConfig` block as defined below. Changing this requires specifying `temporaryNameForRotation`.
     */
    kubeletConfig?: pulumi.Input<inputs.containerservice.KubernetesClusterNodePoolKubeletConfig>;
    /**
     * The type of disk used by kubelet. Possible values are `OS` and `Temporary`.
     */
    kubeletDiskType?: pulumi.Input<string>;
    /**
     * The ID of the Kubernetes Cluster where this Node Pool should exist. Changing this forces a new resource to be created.
     *
     * > **NOTE:** The type of Default Node Pool for the Kubernetes Cluster must be `VirtualMachineScaleSets` to attach multiple node pools.
     */
    kubernetesClusterId?: pulumi.Input<string>;
    /**
     * A `linuxOsConfig` block as defined below. Changing this requires specifying `temporaryNameForRotation`.
     */
    linuxOsConfig?: pulumi.Input<inputs.containerservice.KubernetesClusterNodePoolLinuxOsConfig>;
    maxCount?: pulumi.Input<number>;
    /**
     * The maximum number of pods that can run on each agent. Changing this property requires specifying `temporaryNameForRotation`.
     */
    maxPods?: pulumi.Input<number>;
    minCount?: pulumi.Input<number>;
    /**
     * Should this Node Pool be used for System or User resources? Possible values are `System` and `User`. Defaults to `User`.
     */
    mode?: pulumi.Input<string>;
    /**
     * The name of the Node Pool which should be created within the Kubernetes Cluster. Changing this forces a new resource to be created.
     *
     * > **NOTE:** A Windows Node Pool cannot have a `name` longer than 6 characters.
     */
    name?: pulumi.Input<string>;
    nodeCount?: pulumi.Input<number>;
    /**
     * A map of Kubernetes labels which should be applied to nodes in this Node Pool.
     */
    nodeLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A `nodeNetworkProfile` block as documented below.
     */
    nodeNetworkProfile?: pulumi.Input<inputs.containerservice.KubernetesClusterNodePoolNodeNetworkProfile>;
    /**
     * Should each node have a Public IP Address? Changing this property requires specifying `temporaryNameForRotation`.
     */
    nodePublicIpEnabled?: pulumi.Input<boolean>;
    /**
     * Resource ID for the Public IP Addresses Prefix for the nodes in this Node Pool. `nodePublicIpEnabled` should be `true`. Changing this forces a new resource to be created.
     */
    nodePublicIpPrefixId?: pulumi.Input<string>;
    /**
     * A list of Kubernetes taints which should be applied to nodes in the agent pool (e.g `key=value:NoSchedule`).
     */
    nodeTaints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Version of Kubernetes used for the Agents. If not specified, the latest recommended version will be used at provisioning time (but won't auto-upgrade). AKS does not require an exact patch version to be specified, minor version aliases such as `1.22` are also supported. - The minor version's latest GA patch is automatically chosen in that case. More details can be found in [the documentation](https://docs.microsoft.com/en-us/azure/aks/supported-kubernetes-versions?tabs=azure-cli#alias-minor-version).
     *
     * > **Note:** This version must be supported by the Kubernetes Cluster - as such the version of Kubernetes used on the Cluster/Control Plane may need to be upgraded first.
     */
    orchestratorVersion?: pulumi.Input<string>;
    /**
     * The Agent Operating System disk size in GB. Changing this property requires specifying `temporaryNameForRotation`.
     */
    osDiskSizeGb?: pulumi.Input<number>;
    /**
     * The type of disk which should be used for the Operating System. Possible values are `Ephemeral` and `Managed`. Defaults to `Managed`. Changing this property requires specifying `temporaryNameForRotation`.
     */
    osDiskType?: pulumi.Input<string>;
    /**
     * Specifies the OS SKU used by the agent pool. Possible values are `AzureLinux`, `Ubuntu`, `Windows2019` and `Windows2022`. If not specified, the default is `Ubuntu` if OSType=Linux or `Windows2019` if OSType=Windows. And the default Windows OSSKU will be changed to `Windows2022` after Windows2019 is deprecated. Changing this from `AzureLinux` or `Ubuntu` to `AzureLinux` or `Ubuntu` will not replace the resource, otherwise it forces a new resource to be created.
     */
    osSku?: pulumi.Input<string>;
    /**
     * The Operating System which should be used for this Node Pool. Changing this forces a new resource to be created. Possible values are `Linux` and `Windows`. Defaults to `Linux`.
     */
    osType?: pulumi.Input<string>;
    /**
     * The ID of the Subnet where the pods in the Node Pool should exist. Changing this property requires specifying `temporaryNameForRotation`.
     */
    podSubnetId?: pulumi.Input<string>;
    /**
     * The Priority for Virtual Machines within the Virtual Machine Scale Set that powers this Node Pool. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this forces a new resource to be created.
     */
    priority?: pulumi.Input<string>;
    /**
     * The ID of the Proximity Placement Group where the Virtual Machine Scale Set that powers this Node Pool will be placed. Changing this forces a new resource to be created.
     *
     * > **Note:** When setting `priority` to Spot - you must configure an `evictionPolicy`, `spotMaxPrice` and add the applicable `nodeLabels` and `nodeTaints` [as per the Azure Documentation](https://docs.microsoft.com/azure/aks/spot-node-pool).
     */
    proximityPlacementGroupId?: pulumi.Input<string>;
    /**
     * Specifies how the node pool should deal with scaled-down nodes. Allowed values are `Delete` and `Deallocate`. Defaults to `Delete`.
     */
    scaleDownMode?: pulumi.Input<string>;
    /**
     * The ID of the Snapshot which should be used to create this Node Pool. Changing this property requires specifying `temporaryNameForRotation`.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * The maximum price you're willing to pay in USD per Virtual Machine. Valid values are `-1` (the current on-demand price for a Virtual Machine) or a positive value with up to five decimal places. Changing this forces a new resource to be created.
     *
     * > **Note:** This field can only be configured when `priority` is set to `Spot`.
     */
    spotMaxPrice?: pulumi.Input<number>;
    /**
     * A mapping of tags to assign to the resource.
     *
     * > At this time there's a bug in the AKS API where Tags for a Node Pool are not stored in the correct case - you may wish to use [`ignoreChanges`](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) functionality to ignore changes to the casing until this is fixed in the AKS API.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the name of the temporary node pool used to cycle the node pool when one of the relevant properties are updated.
     */
    temporaryNameForRotation?: pulumi.Input<string>;
    /**
     * Used to specify whether the UltraSSD is enabled in the Node Pool. Defaults to `false`. See [the documentation](https://docs.microsoft.com/azure/aks/use-ultra-disks) for more information. Changing this property requires specifying `temporaryNameForRotation`.
     */
    ultraSsdEnabled?: pulumi.Input<boolean>;
    /**
     * A `upgradeSettings` block as documented below.
     */
    upgradeSettings?: pulumi.Input<inputs.containerservice.KubernetesClusterNodePoolUpgradeSettings>;
    /**
     * The SKU which should be used for the Virtual Machines used in this Node Pool. Changing this property requires specifying `temporaryNameForRotation`.
     */
    vmSize?: pulumi.Input<string>;
    /**
     * The ID of the Subnet where this Node Pool should exist. Changing this property requires specifying `temporaryNameForRotation`.
     *
     * > **NOTE:** A route table must be configured on this Subnet.
     */
    vnetSubnetId?: pulumi.Input<string>;
    /**
     * A `windowsProfile` block as documented below. Changing this forces a new resource to be created.
     */
    windowsProfile?: pulumi.Input<inputs.containerservice.KubernetesClusterNodePoolWindowsProfile>;
    /**
     * Used to specify the workload runtime. Allowed values are `OCIContainer` and `WasmWasi`.
     *
     * > **Note:** WebAssembly System Interface node pools are in Public Preview - more information and details on how to opt into the preview can be found in [this article](https://docs.microsoft.com/azure/aks/use-wasi-node-pools)
     */
    workloadRuntime?: pulumi.Input<string>;
    /**
     * Specifies a list of Availability Zones in which this Kubernetes Cluster Node Pool should be located. Changing this property requires specifying `temporaryNameForRotation`.
     */
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a KubernetesClusterNodePool resource.
 */
export interface KubernetesClusterNodePoolArgs {
    /**
     * Whether to enable [auto-scaler](https://docs.microsoft.com/azure/aks/cluster-autoscaler).
     */
    autoScalingEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the ID of the Capacity Reservation Group where this Node Pool should exist. Changing this forces a new resource to be created.
     */
    capacityReservationGroupId?: pulumi.Input<string>;
    /**
     * The Eviction Policy which should be used for Virtual Machines within the Virtual Machine Scale Set powering this Node Pool. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
     *
     * > **Note:** An Eviction Policy can only be configured when `priority` is set to `Spot` and will default to `Delete` unless otherwise specified.
     */
    evictionPolicy?: pulumi.Input<string>;
    /**
     * Should the nodes in this Node Pool have Federal Information Processing Standard enabled? Changing this property requires specifying `temporaryNameForRotation`.
     *
     * > **Note:** FIPS support is in Public Preview - more information and details on how to opt into the Preview can be found in [this article](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#add-a-fips-enabled-node-pool-preview).
     */
    fipsEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the GPU MIG instance profile for supported GPU VM SKU. The allowed values are `MIG1g`, `MIG2g`, `MIG3g`, `MIG4g` and `MIG7g`. Changing this forces a new resource to be created.
     */
    gpuInstance?: pulumi.Input<string>;
    /**
     * Should the nodes in this Node Pool have host encryption enabled? Changing this property requires specifying `temporaryNameForRotation`.
     *
     * > **NOTE:** Additional fields must be configured depending on the value of this field - see below.
     */
    hostEncryptionEnabled?: pulumi.Input<boolean>;
    /**
     * The fully qualified resource ID of the Dedicated Host Group to provision virtual machines from. Changing this forces a new resource to be created.
     */
    hostGroupId?: pulumi.Input<string>;
    /**
     * A `kubeletConfig` block as defined below. Changing this requires specifying `temporaryNameForRotation`.
     */
    kubeletConfig?: pulumi.Input<inputs.containerservice.KubernetesClusterNodePoolKubeletConfig>;
    /**
     * The type of disk used by kubelet. Possible values are `OS` and `Temporary`.
     */
    kubeletDiskType?: pulumi.Input<string>;
    /**
     * The ID of the Kubernetes Cluster where this Node Pool should exist. Changing this forces a new resource to be created.
     *
     * > **NOTE:** The type of Default Node Pool for the Kubernetes Cluster must be `VirtualMachineScaleSets` to attach multiple node pools.
     */
    kubernetesClusterId: pulumi.Input<string>;
    /**
     * A `linuxOsConfig` block as defined below. Changing this requires specifying `temporaryNameForRotation`.
     */
    linuxOsConfig?: pulumi.Input<inputs.containerservice.KubernetesClusterNodePoolLinuxOsConfig>;
    maxCount?: pulumi.Input<number>;
    /**
     * The maximum number of pods that can run on each agent. Changing this property requires specifying `temporaryNameForRotation`.
     */
    maxPods?: pulumi.Input<number>;
    minCount?: pulumi.Input<number>;
    /**
     * Should this Node Pool be used for System or User resources? Possible values are `System` and `User`. Defaults to `User`.
     */
    mode?: pulumi.Input<string>;
    /**
     * The name of the Node Pool which should be created within the Kubernetes Cluster. Changing this forces a new resource to be created.
     *
     * > **NOTE:** A Windows Node Pool cannot have a `name` longer than 6 characters.
     */
    name?: pulumi.Input<string>;
    nodeCount?: pulumi.Input<number>;
    /**
     * A map of Kubernetes labels which should be applied to nodes in this Node Pool.
     */
    nodeLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A `nodeNetworkProfile` block as documented below.
     */
    nodeNetworkProfile?: pulumi.Input<inputs.containerservice.KubernetesClusterNodePoolNodeNetworkProfile>;
    /**
     * Should each node have a Public IP Address? Changing this property requires specifying `temporaryNameForRotation`.
     */
    nodePublicIpEnabled?: pulumi.Input<boolean>;
    /**
     * Resource ID for the Public IP Addresses Prefix for the nodes in this Node Pool. `nodePublicIpEnabled` should be `true`. Changing this forces a new resource to be created.
     */
    nodePublicIpPrefixId?: pulumi.Input<string>;
    /**
     * A list of Kubernetes taints which should be applied to nodes in the agent pool (e.g `key=value:NoSchedule`).
     */
    nodeTaints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Version of Kubernetes used for the Agents. If not specified, the latest recommended version will be used at provisioning time (but won't auto-upgrade). AKS does not require an exact patch version to be specified, minor version aliases such as `1.22` are also supported. - The minor version's latest GA patch is automatically chosen in that case. More details can be found in [the documentation](https://docs.microsoft.com/en-us/azure/aks/supported-kubernetes-versions?tabs=azure-cli#alias-minor-version).
     *
     * > **Note:** This version must be supported by the Kubernetes Cluster - as such the version of Kubernetes used on the Cluster/Control Plane may need to be upgraded first.
     */
    orchestratorVersion?: pulumi.Input<string>;
    /**
     * The Agent Operating System disk size in GB. Changing this property requires specifying `temporaryNameForRotation`.
     */
    osDiskSizeGb?: pulumi.Input<number>;
    /**
     * The type of disk which should be used for the Operating System. Possible values are `Ephemeral` and `Managed`. Defaults to `Managed`. Changing this property requires specifying `temporaryNameForRotation`.
     */
    osDiskType?: pulumi.Input<string>;
    /**
     * Specifies the OS SKU used by the agent pool. Possible values are `AzureLinux`, `Ubuntu`, `Windows2019` and `Windows2022`. If not specified, the default is `Ubuntu` if OSType=Linux or `Windows2019` if OSType=Windows. And the default Windows OSSKU will be changed to `Windows2022` after Windows2019 is deprecated. Changing this from `AzureLinux` or `Ubuntu` to `AzureLinux` or `Ubuntu` will not replace the resource, otherwise it forces a new resource to be created.
     */
    osSku?: pulumi.Input<string>;
    /**
     * The Operating System which should be used for this Node Pool. Changing this forces a new resource to be created. Possible values are `Linux` and `Windows`. Defaults to `Linux`.
     */
    osType?: pulumi.Input<string>;
    /**
     * The ID of the Subnet where the pods in the Node Pool should exist. Changing this property requires specifying `temporaryNameForRotation`.
     */
    podSubnetId?: pulumi.Input<string>;
    /**
     * The Priority for Virtual Machines within the Virtual Machine Scale Set that powers this Node Pool. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this forces a new resource to be created.
     */
    priority?: pulumi.Input<string>;
    /**
     * The ID of the Proximity Placement Group where the Virtual Machine Scale Set that powers this Node Pool will be placed. Changing this forces a new resource to be created.
     *
     * > **Note:** When setting `priority` to Spot - you must configure an `evictionPolicy`, `spotMaxPrice` and add the applicable `nodeLabels` and `nodeTaints` [as per the Azure Documentation](https://docs.microsoft.com/azure/aks/spot-node-pool).
     */
    proximityPlacementGroupId?: pulumi.Input<string>;
    /**
     * Specifies how the node pool should deal with scaled-down nodes. Allowed values are `Delete` and `Deallocate`. Defaults to `Delete`.
     */
    scaleDownMode?: pulumi.Input<string>;
    /**
     * The ID of the Snapshot which should be used to create this Node Pool. Changing this property requires specifying `temporaryNameForRotation`.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * The maximum price you're willing to pay in USD per Virtual Machine. Valid values are `-1` (the current on-demand price for a Virtual Machine) or a positive value with up to five decimal places. Changing this forces a new resource to be created.
     *
     * > **Note:** This field can only be configured when `priority` is set to `Spot`.
     */
    spotMaxPrice?: pulumi.Input<number>;
    /**
     * A mapping of tags to assign to the resource.
     *
     * > At this time there's a bug in the AKS API where Tags for a Node Pool are not stored in the correct case - you may wish to use [`ignoreChanges`](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) functionality to ignore changes to the casing until this is fixed in the AKS API.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the name of the temporary node pool used to cycle the node pool when one of the relevant properties are updated.
     */
    temporaryNameForRotation?: pulumi.Input<string>;
    /**
     * Used to specify whether the UltraSSD is enabled in the Node Pool. Defaults to `false`. See [the documentation](https://docs.microsoft.com/azure/aks/use-ultra-disks) for more information. Changing this property requires specifying `temporaryNameForRotation`.
     */
    ultraSsdEnabled?: pulumi.Input<boolean>;
    /**
     * A `upgradeSettings` block as documented below.
     */
    upgradeSettings?: pulumi.Input<inputs.containerservice.KubernetesClusterNodePoolUpgradeSettings>;
    /**
     * The SKU which should be used for the Virtual Machines used in this Node Pool. Changing this property requires specifying `temporaryNameForRotation`.
     */
    vmSize: pulumi.Input<string>;
    /**
     * The ID of the Subnet where this Node Pool should exist. Changing this property requires specifying `temporaryNameForRotation`.
     *
     * > **NOTE:** A route table must be configured on this Subnet.
     */
    vnetSubnetId?: pulumi.Input<string>;
    /**
     * A `windowsProfile` block as documented below. Changing this forces a new resource to be created.
     */
    windowsProfile?: pulumi.Input<inputs.containerservice.KubernetesClusterNodePoolWindowsProfile>;
    /**
     * Used to specify the workload runtime. Allowed values are `OCIContainer` and `WasmWasi`.
     *
     * > **Note:** WebAssembly System Interface node pools are in Public Preview - more information and details on how to opt into the preview can be found in [this article](https://docs.microsoft.com/azure/aks/use-wasi-node-pools)
     */
    workloadRuntime?: pulumi.Input<string>;
    /**
     * Specifies a list of Availability Zones in which this Kubernetes Cluster Node Pool should be located. Changing this property requires specifying `temporaryNameForRotation`.
     */
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}
