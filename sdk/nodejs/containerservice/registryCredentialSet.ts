// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Container Registry Credential Set.
 *
 * ## Example Usage
 *
 * ### Minimal)
 *
 * > **Note:** Be aware that you will need to permit the Identity that is created for the Container Registry to have `get` on secrets to the Key Vault, e.g. using the `azure.keyvault.AccessPolicy` resource.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleRegistry = new azure.containerservice.Registry("example", {
 *     name: "exampleContainerRegistry",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     sku: "Basic",
 * });
 * const exampleRegistryCredentialSet = new azure.containerservice.RegistryCredentialSet("example", {
 *     name: "exampleCredentialSet",
 *     containerRegistryId: exampleRegistry.id,
 *     loginServer: "docker.io",
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 *     authenticationCredentials: {
 *         usernameSecretId: "https://example-keyvault.vault.azure.net/secrets/example-user-name",
 *         passwordSecretId: "https://example-keyvault.vault.azure.net/secrets/example-user-password",
 *     },
 * });
 * ```
 *
 * ### Full)
 *
 * This example provisions a key vault with two secrets, a container registry, a container registry credential set, and an access policy to allow the container registry to read the secrets from the key vault.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const current = azure.core.getClientConfig({});
 * const exampleKeyVault = new azure.keyvault.KeyVault("example", {
 *     name: "examplekeyvault",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "standard",
 *     softDeleteRetentionDays: 7,
 *     accessPolicies: [{
 *         tenantId: current.then(current => current.tenantId),
 *         objectId: current.then(current => current.objectId),
 *         certificatePermissions: [],
 *         keyPermissions: [],
 *         secretPermissions: [
 *             "Get",
 *             "Set",
 *             "Delete",
 *             "Purge",
 *         ],
 *     }],
 * });
 * const exampleUser = new azure.keyvault.Secret("example_user", {
 *     keyVaultId: exampleKeyVault.id,
 *     name: "example-user-name",
 *     value: "name",
 * });
 * const examplePassword = new azure.keyvault.Secret("example_password", {
 *     keyVaultId: exampleKeyVault.id,
 *     name: "example-user-password",
 *     value: "password",
 * });
 * const exampleRegistry = new azure.containerservice.Registry("example", {
 *     name: "exampleContainerRegistry",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     sku: "Basic",
 * });
 * const exampleRegistryCredentialSet = new azure.containerservice.RegistryCredentialSet("example", {
 *     name: "exampleCredentialSet",
 *     containerRegistryId: exampleRegistry.id,
 *     loginServer: "docker.io",
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 *     authenticationCredentials: {
 *         usernameSecretId: exampleUser.versionlessId,
 *         passwordSecretId: examplePassword.versionlessId,
 *     },
 * });
 * const readSecrets = new azure.keyvault.AccessPolicy("read_secrets", {
 *     keyVaultId: exampleKeyVault.id,
 *     tenantId: exampleRegistryCredentialSet.identity.apply(identity => identity.tenantId),
 *     objectId: exampleRegistryCredentialSet.identity.apply(identity => identity.principalId),
 *     secretPermissions: ["Get"],
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.ContainerRegistry`: 2023-07-01
 *
 * ## Import
 *
 * Container Registry Credential Sets can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:containerservice/registryCredentialSet:RegistryCredentialSet example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ContainerRegistry/registries/registry1/credentialSets/credentialSet1
 * ```
 */
export class RegistryCredentialSet extends pulumi.CustomResource {
    /**
     * Get an existing RegistryCredentialSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegistryCredentialSetState, opts?: pulumi.CustomResourceOptions): RegistryCredentialSet {
        return new RegistryCredentialSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:containerservice/registryCredentialSet:RegistryCredentialSet';

    /**
     * Returns true if the given object is an instance of RegistryCredentialSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RegistryCredentialSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegistryCredentialSet.__pulumiType;
    }

    /**
     * A `authenticationCredentials` block as defined below.
     */
    public readonly authenticationCredentials!: pulumi.Output<outputs.containerservice.RegistryCredentialSetAuthenticationCredentials>;
    /**
     * The ID of the Container Registry. Changing this forces a new Container Registry Credential Set to be created.
     */
    public readonly containerRegistryId!: pulumi.Output<string>;
    /**
     * An `identity` block as defined below.
     */
    public readonly identity!: pulumi.Output<outputs.containerservice.RegistryCredentialSetIdentity>;
    /**
     * The login server for the Credential Set. Changing this forces a new Container Registry Credential Set to be created.
     */
    public readonly loginServer!: pulumi.Output<string>;
    /**
     * The name which should be used for this Container Registry Credential Set. Changing this forces a new Container Registry Credential Set to be created.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a RegistryCredentialSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegistryCredentialSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegistryCredentialSetArgs | RegistryCredentialSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegistryCredentialSetState | undefined;
            resourceInputs["authenticationCredentials"] = state ? state.authenticationCredentials : undefined;
            resourceInputs["containerRegistryId"] = state ? state.containerRegistryId : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["loginServer"] = state ? state.loginServer : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as RegistryCredentialSetArgs | undefined;
            if ((!args || args.authenticationCredentials === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authenticationCredentials'");
            }
            if ((!args || args.containerRegistryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerRegistryId'");
            }
            if ((!args || args.identity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identity'");
            }
            if ((!args || args.loginServer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loginServer'");
            }
            resourceInputs["authenticationCredentials"] = args ? args.authenticationCredentials : undefined;
            resourceInputs["containerRegistryId"] = args ? args.containerRegistryId : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["loginServer"] = args ? args.loginServer : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RegistryCredentialSet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RegistryCredentialSet resources.
 */
export interface RegistryCredentialSetState {
    /**
     * A `authenticationCredentials` block as defined below.
     */
    authenticationCredentials?: pulumi.Input<inputs.containerservice.RegistryCredentialSetAuthenticationCredentials>;
    /**
     * The ID of the Container Registry. Changing this forces a new Container Registry Credential Set to be created.
     */
    containerRegistryId?: pulumi.Input<string>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.containerservice.RegistryCredentialSetIdentity>;
    /**
     * The login server for the Credential Set. Changing this forces a new Container Registry Credential Set to be created.
     */
    loginServer?: pulumi.Input<string>;
    /**
     * The name which should be used for this Container Registry Credential Set. Changing this forces a new Container Registry Credential Set to be created.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RegistryCredentialSet resource.
 */
export interface RegistryCredentialSetArgs {
    /**
     * A `authenticationCredentials` block as defined below.
     */
    authenticationCredentials: pulumi.Input<inputs.containerservice.RegistryCredentialSetAuthenticationCredentials>;
    /**
     * The ID of the Container Registry. Changing this forces a new Container Registry Credential Set to be created.
     */
    containerRegistryId: pulumi.Input<string>;
    /**
     * An `identity` block as defined below.
     */
    identity: pulumi.Input<inputs.containerservice.RegistryCredentialSetIdentity>;
    /**
     * The login server for the Credential Set. Changing this forces a new Container Registry Credential Set to be created.
     */
    loginServer: pulumi.Input<string>;
    /**
     * The name which should be used for this Container Registry Credential Set. Changing this forces a new Container Registry Credential Set to be created.
     */
    name?: pulumi.Input<string>;
}
