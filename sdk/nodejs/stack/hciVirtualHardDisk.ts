// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an Azure Stack HCI Virtual Hard Disk.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-rg",
 *     location: "West Europe",
 * });
 * const exampleHciStoragePath = new azure.stack.HciStoragePath("example", {
 *     name: "example-sp",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     customLocationId: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.ExtendedLocation/customLocations/cl1",
 *     path: "C:\\ClusterStorage\\UserStorage_2\\sp-example",
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 * const exampleHciVirtualHardDisk = new azure.stack.HciVirtualHardDisk("example", {
 *     name: "example-vhd",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     customLocationId: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.ExtendedLocation/customLocations/cl1",
 *     diskSizeInGb: 2,
 *     storagePathId: exampleHciStoragePath.id,
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.AzureStackHCI` - 2024-01-01
 *
 * ## Import
 *
 * Azure Stack HCI Virtual Hard Disks can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:stack/hciVirtualHardDisk:HciVirtualHardDisk example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.AzureStackHCI/virtualHardDisks/disk1
 * ```
 */
export class HciVirtualHardDisk extends pulumi.CustomResource {
    /**
     * Get an existing HciVirtualHardDisk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HciVirtualHardDiskState, opts?: pulumi.CustomResourceOptions): HciVirtualHardDisk {
        return new HciVirtualHardDisk(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:stack/hciVirtualHardDisk:HciVirtualHardDisk';

    /**
     * Returns true if the given object is an instance of HciVirtualHardDisk.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HciVirtualHardDisk {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HciVirtualHardDisk.__pulumiType;
    }

    /**
     * The block size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    declare public readonly blockSizeInBytes: pulumi.Output<number | undefined>;
    /**
     * The ID of the Custom Location where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    declare public readonly customLocationId: pulumi.Output<string>;
    /**
     * The format of the disk file. Possible values are `vhdx` and `vhd`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    declare public readonly diskFileFormat: pulumi.Output<string | undefined>;
    /**
     * The size of the disk in GB. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    declare public readonly diskSizeInGb: pulumi.Output<number>;
    /**
     * Whether to enable dynamic sizing for the Azure Stack HCI Virtual Hard Disk. Defaults to `false`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    declare public readonly dynamicEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The hypervisor generation of the Azure Stack HCI Virtual Hard Disk. Possible values are `V1` and `V2`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    declare public readonly hypervGeneration: pulumi.Output<string | undefined>;
    /**
     * The Azure Region where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * The logical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    declare public readonly logicalSectorInBytes: pulumi.Output<number | undefined>;
    /**
     * The name which should be used for this Azure Stack HCI Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The physical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    declare public readonly physicalSectorInBytes: pulumi.Output<number | undefined>;
    /**
     * The name of the Resource Group where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * The ID of the Azure Stack HCI Storage Path used for this Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     *
     * > **Note:** If `storagePathId` is not specified, the Virtual Hard Disk will be placed in a high availability Storage Path. If you experience a diff you may need to add this to `ignoreChanges`.
     */
    declare public readonly storagePathId: pulumi.Output<string | undefined>;
    /**
     * A mapping of tags which should be assigned to the Azure Stack HCI Virtual Hard Disk.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a HciVirtualHardDisk resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HciVirtualHardDiskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HciVirtualHardDiskArgs | HciVirtualHardDiskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HciVirtualHardDiskState | undefined;
            resourceInputs["blockSizeInBytes"] = state?.blockSizeInBytes;
            resourceInputs["customLocationId"] = state?.customLocationId;
            resourceInputs["diskFileFormat"] = state?.diskFileFormat;
            resourceInputs["diskSizeInGb"] = state?.diskSizeInGb;
            resourceInputs["dynamicEnabled"] = state?.dynamicEnabled;
            resourceInputs["hypervGeneration"] = state?.hypervGeneration;
            resourceInputs["location"] = state?.location;
            resourceInputs["logicalSectorInBytes"] = state?.logicalSectorInBytes;
            resourceInputs["name"] = state?.name;
            resourceInputs["physicalSectorInBytes"] = state?.physicalSectorInBytes;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["storagePathId"] = state?.storagePathId;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as HciVirtualHardDiskArgs | undefined;
            if (args?.customLocationId === undefined && !opts.urn) {
                throw new Error("Missing required property 'customLocationId'");
            }
            if (args?.diskSizeInGb === undefined && !opts.urn) {
                throw new Error("Missing required property 'diskSizeInGb'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["blockSizeInBytes"] = args?.blockSizeInBytes;
            resourceInputs["customLocationId"] = args?.customLocationId;
            resourceInputs["diskFileFormat"] = args?.diskFileFormat;
            resourceInputs["diskSizeInGb"] = args?.diskSizeInGb;
            resourceInputs["dynamicEnabled"] = args?.dynamicEnabled;
            resourceInputs["hypervGeneration"] = args?.hypervGeneration;
            resourceInputs["location"] = args?.location;
            resourceInputs["logicalSectorInBytes"] = args?.logicalSectorInBytes;
            resourceInputs["name"] = args?.name;
            resourceInputs["physicalSectorInBytes"] = args?.physicalSectorInBytes;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["storagePathId"] = args?.storagePathId;
            resourceInputs["tags"] = args?.tags;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HciVirtualHardDisk.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HciVirtualHardDisk resources.
 */
export interface HciVirtualHardDiskState {
    /**
     * The block size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    blockSizeInBytes?: pulumi.Input<number>;
    /**
     * The ID of the Custom Location where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    customLocationId?: pulumi.Input<string>;
    /**
     * The format of the disk file. Possible values are `vhdx` and `vhd`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    diskFileFormat?: pulumi.Input<string>;
    /**
     * The size of the disk in GB. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    diskSizeInGb?: pulumi.Input<number>;
    /**
     * Whether to enable dynamic sizing for the Azure Stack HCI Virtual Hard Disk. Defaults to `false`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    dynamicEnabled?: pulumi.Input<boolean>;
    /**
     * The hypervisor generation of the Azure Stack HCI Virtual Hard Disk. Possible values are `V1` and `V2`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    hypervGeneration?: pulumi.Input<string>;
    /**
     * The Azure Region where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The logical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    logicalSectorInBytes?: pulumi.Input<number>;
    /**
     * The name which should be used for this Azure Stack HCI Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The physical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    physicalSectorInBytes?: pulumi.Input<number>;
    /**
     * The name of the Resource Group where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The ID of the Azure Stack HCI Storage Path used for this Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     *
     * > **Note:** If `storagePathId` is not specified, the Virtual Hard Disk will be placed in a high availability Storage Path. If you experience a diff you may need to add this to `ignoreChanges`.
     */
    storagePathId?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Azure Stack HCI Virtual Hard Disk.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a HciVirtualHardDisk resource.
 */
export interface HciVirtualHardDiskArgs {
    /**
     * The block size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    blockSizeInBytes?: pulumi.Input<number>;
    /**
     * The ID of the Custom Location where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    customLocationId: pulumi.Input<string>;
    /**
     * The format of the disk file. Possible values are `vhdx` and `vhd`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    diskFileFormat?: pulumi.Input<string>;
    /**
     * The size of the disk in GB. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    diskSizeInGb: pulumi.Input<number>;
    /**
     * Whether to enable dynamic sizing for the Azure Stack HCI Virtual Hard Disk. Defaults to `false`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    dynamicEnabled?: pulumi.Input<boolean>;
    /**
     * The hypervisor generation of the Azure Stack HCI Virtual Hard Disk. Possible values are `V1` and `V2`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    hypervGeneration?: pulumi.Input<string>;
    /**
     * The Azure Region where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The logical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    logicalSectorInBytes?: pulumi.Input<number>;
    /**
     * The name which should be used for this Azure Stack HCI Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The physical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    physicalSectorInBytes?: pulumi.Input<number>;
    /**
     * The name of the Resource Group where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The ID of the Azure Stack HCI Storage Path used for this Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     *
     * > **Note:** If `storagePathId` is not specified, the Virtual Hard Disk will be placed in a high availability Storage Path. If you experience a diff you may need to add this to `ignoreChanges`.
     */
    storagePathId?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Azure Stack HCI Virtual Hard Disk.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
