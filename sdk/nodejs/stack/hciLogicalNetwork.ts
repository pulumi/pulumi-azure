// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages an Azure Stack HCI Logical Network.
 *
 * ## Example Usage
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.AzureStackHCI` - 2024-01-01
 *
 * ## Import
 *
 * Azure Stack HCI Logical Networks can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:stack/hciLogicalNetwork:HciLogicalNetwork example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.AzureStackHCI/logicalNetworks/ln1
 * ```
 */
export class HciLogicalNetwork extends pulumi.CustomResource {
    /**
     * Get an existing HciLogicalNetwork resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HciLogicalNetworkState, opts?: pulumi.CustomResourceOptions): HciLogicalNetwork {
        return new HciLogicalNetwork(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:stack/hciLogicalNetwork:HciLogicalNetwork';

    /**
     * Returns true if the given object is an instance of HciLogicalNetwork.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HciLogicalNetwork {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HciLogicalNetwork.__pulumiType;
    }

    /**
     * The ID of Custom Location where the Azure Stack HCI Logical Network should exist. Changing this forces a new resource to be created.
     */
    declare public readonly customLocationId: pulumi.Output<string>;
    /**
     * A list of IPv4 addresses of DNS servers available to VMs deployed in the Logical Networks. Changing this forces a new resource to be created.
     */
    declare public readonly dnsServers: pulumi.Output<string[] | undefined>;
    /**
     * The Azure Region where the Azure Stack HCI Logical Network should exist. Changing this forces a new resource to be created.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * The name which should be used for this Azure Stack HCI Logical Network. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The name of the Resource Group where the Azure Stack HCI Logical Network should exist. Changing this forces a new resource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * A `subnet` block as defined below. Changing this forces a new resource to be created.
     */
    declare public readonly subnet: pulumi.Output<outputs.stack.HciLogicalNetworkSubnet>;
    /**
     * A mapping of tags which should be assigned to the Azure Stack HCI Logical Network.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name of the virtual switch on the cluster used to associate with the Azure Stack HCI Logical Network. Possible switch names can be retrieved by following this [Azure guide](https://learn.microsoft.com/azure-stack/hci/manage/create-logical-networks?tabs=azurecli#prerequisites). Changing this forces a new resource to be created.
     */
    declare public readonly virtualSwitchName: pulumi.Output<string>;

    /**
     * Create a HciLogicalNetwork resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HciLogicalNetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HciLogicalNetworkArgs | HciLogicalNetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HciLogicalNetworkState | undefined;
            resourceInputs["customLocationId"] = state?.customLocationId;
            resourceInputs["dnsServers"] = state?.dnsServers;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["subnet"] = state?.subnet;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["virtualSwitchName"] = state?.virtualSwitchName;
        } else {
            const args = argsOrState as HciLogicalNetworkArgs | undefined;
            if (args?.customLocationId === undefined && !opts.urn) {
                throw new Error("Missing required property 'customLocationId'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.subnet === undefined && !opts.urn) {
                throw new Error("Missing required property 'subnet'");
            }
            if (args?.virtualSwitchName === undefined && !opts.urn) {
                throw new Error("Missing required property 'virtualSwitchName'");
            }
            resourceInputs["customLocationId"] = args?.customLocationId;
            resourceInputs["dnsServers"] = args?.dnsServers;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["subnet"] = args?.subnet;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["virtualSwitchName"] = args?.virtualSwitchName;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HciLogicalNetwork.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HciLogicalNetwork resources.
 */
export interface HciLogicalNetworkState {
    /**
     * The ID of Custom Location where the Azure Stack HCI Logical Network should exist. Changing this forces a new resource to be created.
     */
    customLocationId?: pulumi.Input<string>;
    /**
     * A list of IPv4 addresses of DNS servers available to VMs deployed in the Logical Networks. Changing this forces a new resource to be created.
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Azure Region where the Azure Stack HCI Logical Network should exist. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The name which should be used for this Azure Stack HCI Logical Network. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Azure Stack HCI Logical Network should exist. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A `subnet` block as defined below. Changing this forces a new resource to be created.
     */
    subnet?: pulumi.Input<inputs.stack.HciLogicalNetworkSubnet>;
    /**
     * A mapping of tags which should be assigned to the Azure Stack HCI Logical Network.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the virtual switch on the cluster used to associate with the Azure Stack HCI Logical Network. Possible switch names can be retrieved by following this [Azure guide](https://learn.microsoft.com/azure-stack/hci/manage/create-logical-networks?tabs=azurecli#prerequisites). Changing this forces a new resource to be created.
     */
    virtualSwitchName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HciLogicalNetwork resource.
 */
export interface HciLogicalNetworkArgs {
    /**
     * The ID of Custom Location where the Azure Stack HCI Logical Network should exist. Changing this forces a new resource to be created.
     */
    customLocationId: pulumi.Input<string>;
    /**
     * A list of IPv4 addresses of DNS servers available to VMs deployed in the Logical Networks. Changing this forces a new resource to be created.
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Azure Region where the Azure Stack HCI Logical Network should exist. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The name which should be used for this Azure Stack HCI Logical Network. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Azure Stack HCI Logical Network should exist. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A `subnet` block as defined below. Changing this forces a new resource to be created.
     */
    subnet: pulumi.Input<inputs.stack.HciLogicalNetworkSubnet>;
    /**
     * A mapping of tags which should be assigned to the Azure Stack HCI Logical Network.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the virtual switch on the cluster used to associate with the Azure Stack HCI Logical Network. Possible switch names can be retrieved by following this [Azure guide](https://learn.microsoft.com/azure-stack/hci/manage/create-logical-networks?tabs=azurecli#prerequisites). Changing this forces a new resource to be created.
     */
    virtualSwitchName: pulumi.Input<string>;
}
