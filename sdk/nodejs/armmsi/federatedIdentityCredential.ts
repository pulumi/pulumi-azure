// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Federated Identity Credential.
 *
 * ## Import
 *
 * An existing Federated Identity Credential can be imported into Terraform using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:armmsi/federatedIdentityCredential:FederatedIdentityCredential example /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{parentIdentityName}/federatedIdentityCredentials/{resourceName}
 * ```
 */
export class FederatedIdentityCredential extends pulumi.CustomResource {
    /**
     * Get an existing FederatedIdentityCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FederatedIdentityCredentialState, opts?: pulumi.CustomResourceOptions): FederatedIdentityCredential {
        return new FederatedIdentityCredential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:armmsi/federatedIdentityCredential:FederatedIdentityCredential';

    /**
     * Returns true if the given object is an instance of FederatedIdentityCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FederatedIdentityCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FederatedIdentityCredential.__pulumiType;
    }

    /**
     * Specifies the audience for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
     */
    public readonly audience!: pulumi.Output<string>;
    /**
     * Specifies the issuer of this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
     */
    public readonly issuer!: pulumi.Output<string>;
    /**
     * Specifies the name of this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies parent ID of User Assigned Identity for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
     */
    public readonly parentId!: pulumi.Output<string>;
    /**
     * Specifies the name of the Resource Group within which this Federated Identity Credential should exist. Changing this forces a new Federated Identity Credential to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * Specifies the subject for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
     */
    public readonly subject!: pulumi.Output<string>;

    /**
     * Create a FederatedIdentityCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FederatedIdentityCredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FederatedIdentityCredentialArgs | FederatedIdentityCredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FederatedIdentityCredentialState | undefined;
            resourceInputs["audience"] = state ? state.audience : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentId"] = state ? state.parentId : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["subject"] = state ? state.subject : undefined;
        } else {
            const args = argsOrState as FederatedIdentityCredentialArgs | undefined;
            if ((!args || args.audience === undefined) && !opts.urn) {
                throw new Error("Missing required property 'audience'");
            }
            if ((!args || args.issuer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issuer'");
            }
            if ((!args || args.parentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentId'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.subject === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subject'");
            }
            resourceInputs["audience"] = args ? args.audience : undefined;
            resourceInputs["issuer"] = args ? args.issuer : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentId"] = args ? args.parentId : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["subject"] = args ? args.subject : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FederatedIdentityCredential.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FederatedIdentityCredential resources.
 */
export interface FederatedIdentityCredentialState {
    /**
     * Specifies the audience for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
     */
    audience?: pulumi.Input<string>;
    /**
     * Specifies the issuer of this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
     */
    issuer?: pulumi.Input<string>;
    /**
     * Specifies the name of this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies parent ID of User Assigned Identity for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
     */
    parentId?: pulumi.Input<string>;
    /**
     * Specifies the name of the Resource Group within which this Federated Identity Credential should exist. Changing this forces a new Federated Identity Credential to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * Specifies the subject for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
     */
    subject?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FederatedIdentityCredential resource.
 */
export interface FederatedIdentityCredentialArgs {
    /**
     * Specifies the audience for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
     */
    audience: pulumi.Input<string>;
    /**
     * Specifies the issuer of this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
     */
    issuer: pulumi.Input<string>;
    /**
     * Specifies the name of this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies parent ID of User Assigned Identity for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
     */
    parentId: pulumi.Input<string>;
    /**
     * Specifies the name of the Resource Group within which this Federated Identity Credential should exist. Changing this forces a new Federated Identity Credential to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Specifies the subject for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
     */
    subject: pulumi.Input<string>;
}
