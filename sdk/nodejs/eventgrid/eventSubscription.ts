// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages an EventGrid Event Subscription
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "exampleasa",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 *     tags: {
 *         environment: "staging",
 *     },
 * });
 * const exampleQueue = new azure.storage.Queue("example", {
 *     name: "example-astq",
 *     storageAccountName: exampleAccount.name,
 * });
 * const exampleEventSubscription = new azure.eventgrid.EventSubscription("example", {
 *     name: "example-aees",
 *     scope: example.id,
 *     storageQueueEndpoint: {
 *         storageAccountId: exampleAccount.id,
 *         queueName: exampleQueue.name,
 *     },
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.EventGrid` - 2025-02-15
 *
 * ## Import
 *
 * EventGrid Event Subscription's can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:eventgrid/eventSubscription:EventSubscription eventSubscription1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.EventGrid/topics/topic1/providers/Microsoft.EventGrid/eventSubscriptions/eventSubscription1
 * ```
 */
export class EventSubscription extends pulumi.CustomResource {
    /**
     * Get an existing EventSubscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventSubscriptionState, opts?: pulumi.CustomResourceOptions): EventSubscription {
        return new EventSubscription(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:eventgrid/eventSubscription:EventSubscription';

    /**
     * Returns true if the given object is an instance of EventSubscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventSubscription {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventSubscription.__pulumiType;
    }

    /**
     * A `advancedFilter` block as defined below.
     */
    declare public readonly advancedFilter: pulumi.Output<outputs.eventgrid.EventSubscriptionAdvancedFilter | undefined>;
    /**
     * Specifies whether advanced filters should be evaluated against an array of values instead of expecting a singular value. Defaults to `false`.
     */
    declare public readonly advancedFilteringOnArraysEnabled: pulumi.Output<boolean | undefined>;
    /**
     * An `azureFunctionEndpoint` block as defined below.
     */
    declare public readonly azureFunctionEndpoint: pulumi.Output<outputs.eventgrid.EventSubscriptionAzureFunctionEndpoint | undefined>;
    /**
     * A `deadLetterIdentity` block as defined below.
     *
     * > **Note:** `storageBlobDeadLetterDestination` must be specified when a `deadLetterIdentity` is specified
     */
    declare public readonly deadLetterIdentity: pulumi.Output<outputs.eventgrid.EventSubscriptionDeadLetterIdentity | undefined>;
    /**
     * A `deliveryIdentity` block as defined below.
     */
    declare public readonly deliveryIdentity: pulumi.Output<outputs.eventgrid.EventSubscriptionDeliveryIdentity | undefined>;
    /**
     * One or more `deliveryProperty` blocks as defined below.
     */
    declare public readonly deliveryProperties: pulumi.Output<outputs.eventgrid.EventSubscriptionDeliveryProperty[] | undefined>;
    /**
     * Specifies the event delivery schema for the event subscription. Possible values include: `EventGridSchema`, `CloudEventSchemaV1_0`, `CustomInputSchema`. Defaults to `EventGridSchema`. Changing this forces a new resource to be created.
     */
    declare public readonly eventDeliverySchema: pulumi.Output<string | undefined>;
    /**
     * Specifies the id where the Event Hub is located.
     */
    declare public readonly eventhubEndpointId: pulumi.Output<string>;
    /**
     * Specifies the expiration time of the event subscription (Datetime Format `RFC 3339`).
     */
    declare public readonly expirationTimeUtc: pulumi.Output<string | undefined>;
    /**
     * Specifies the id where the Hybrid Connection is located.
     */
    declare public readonly hybridConnectionEndpointId: pulumi.Output<string>;
    /**
     * A list of applicable event types that need to be part of the event subscription.
     */
    declare public readonly includedEventTypes: pulumi.Output<string[]>;
    /**
     * A list of labels to assign to the event subscription.
     */
    declare public readonly labels: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the name of the EventGrid Event Subscription resource. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * A `retryPolicy` block as defined below.
     */
    declare public readonly retryPolicy: pulumi.Output<outputs.eventgrid.EventSubscriptionRetryPolicy>;
    /**
     * Specifies the scope at which the EventGrid Event Subscription should be created. Changing this forces a new resource to be created.
     */
    declare public readonly scope: pulumi.Output<string>;
    /**
     * Specifies the id where the Service Bus Queue is located.
     */
    declare public readonly serviceBusQueueEndpointId: pulumi.Output<string | undefined>;
    /**
     * Specifies the id where the Service Bus Topic is located.
     */
    declare public readonly serviceBusTopicEndpointId: pulumi.Output<string | undefined>;
    /**
     * A `storageBlobDeadLetterDestination` block as defined below.
     */
    declare public readonly storageBlobDeadLetterDestination: pulumi.Output<outputs.eventgrid.EventSubscriptionStorageBlobDeadLetterDestination | undefined>;
    /**
     * A `storageQueueEndpoint` block as defined below.
     */
    declare public readonly storageQueueEndpoint: pulumi.Output<outputs.eventgrid.EventSubscriptionStorageQueueEndpoint | undefined>;
    /**
     * A `subjectFilter` block as defined below.
     */
    declare public readonly subjectFilter: pulumi.Output<outputs.eventgrid.EventSubscriptionSubjectFilter | undefined>;
    /**
     * A `webhookEndpoint` block as defined below.
     *
     * > **Note:** One of `eventhubEndpointId`, `hybridConnectionEndpointId`, `serviceBusQueueEndpointId`, `serviceBusTopicEndpointId`, `storageQueueEndpoint`, `webhookEndpoint` or `azureFunctionEndpoint` must be specified.
     */
    declare public readonly webhookEndpoint: pulumi.Output<outputs.eventgrid.EventSubscriptionWebhookEndpoint | undefined>;

    /**
     * Create a EventSubscription resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventSubscriptionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventSubscriptionArgs | EventSubscriptionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EventSubscriptionState | undefined;
            resourceInputs["advancedFilter"] = state?.advancedFilter;
            resourceInputs["advancedFilteringOnArraysEnabled"] = state?.advancedFilteringOnArraysEnabled;
            resourceInputs["azureFunctionEndpoint"] = state?.azureFunctionEndpoint;
            resourceInputs["deadLetterIdentity"] = state?.deadLetterIdentity;
            resourceInputs["deliveryIdentity"] = state?.deliveryIdentity;
            resourceInputs["deliveryProperties"] = state?.deliveryProperties;
            resourceInputs["eventDeliverySchema"] = state?.eventDeliverySchema;
            resourceInputs["eventhubEndpointId"] = state?.eventhubEndpointId;
            resourceInputs["expirationTimeUtc"] = state?.expirationTimeUtc;
            resourceInputs["hybridConnectionEndpointId"] = state?.hybridConnectionEndpointId;
            resourceInputs["includedEventTypes"] = state?.includedEventTypes;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["retryPolicy"] = state?.retryPolicy;
            resourceInputs["scope"] = state?.scope;
            resourceInputs["serviceBusQueueEndpointId"] = state?.serviceBusQueueEndpointId;
            resourceInputs["serviceBusTopicEndpointId"] = state?.serviceBusTopicEndpointId;
            resourceInputs["storageBlobDeadLetterDestination"] = state?.storageBlobDeadLetterDestination;
            resourceInputs["storageQueueEndpoint"] = state?.storageQueueEndpoint;
            resourceInputs["subjectFilter"] = state?.subjectFilter;
            resourceInputs["webhookEndpoint"] = state?.webhookEndpoint;
        } else {
            const args = argsOrState as EventSubscriptionArgs | undefined;
            if (args?.scope === undefined && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            resourceInputs["advancedFilter"] = args?.advancedFilter;
            resourceInputs["advancedFilteringOnArraysEnabled"] = args?.advancedFilteringOnArraysEnabled;
            resourceInputs["azureFunctionEndpoint"] = args?.azureFunctionEndpoint;
            resourceInputs["deadLetterIdentity"] = args?.deadLetterIdentity;
            resourceInputs["deliveryIdentity"] = args?.deliveryIdentity;
            resourceInputs["deliveryProperties"] = args?.deliveryProperties;
            resourceInputs["eventDeliverySchema"] = args?.eventDeliverySchema;
            resourceInputs["eventhubEndpointId"] = args?.eventhubEndpointId;
            resourceInputs["expirationTimeUtc"] = args?.expirationTimeUtc;
            resourceInputs["hybridConnectionEndpointId"] = args?.hybridConnectionEndpointId;
            resourceInputs["includedEventTypes"] = args?.includedEventTypes;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["retryPolicy"] = args?.retryPolicy;
            resourceInputs["scope"] = args?.scope;
            resourceInputs["serviceBusQueueEndpointId"] = args?.serviceBusQueueEndpointId;
            resourceInputs["serviceBusTopicEndpointId"] = args?.serviceBusTopicEndpointId;
            resourceInputs["storageBlobDeadLetterDestination"] = args?.storageBlobDeadLetterDestination;
            resourceInputs["storageQueueEndpoint"] = args?.storageQueueEndpoint;
            resourceInputs["subjectFilter"] = args?.subjectFilter;
            resourceInputs["webhookEndpoint"] = args?.webhookEndpoint;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure:eventhub/eventSubscription:EventSubscription" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(EventSubscription.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EventSubscription resources.
 */
export interface EventSubscriptionState {
    /**
     * A `advancedFilter` block as defined below.
     */
    advancedFilter?: pulumi.Input<inputs.eventgrid.EventSubscriptionAdvancedFilter>;
    /**
     * Specifies whether advanced filters should be evaluated against an array of values instead of expecting a singular value. Defaults to `false`.
     */
    advancedFilteringOnArraysEnabled?: pulumi.Input<boolean>;
    /**
     * An `azureFunctionEndpoint` block as defined below.
     */
    azureFunctionEndpoint?: pulumi.Input<inputs.eventgrid.EventSubscriptionAzureFunctionEndpoint>;
    /**
     * A `deadLetterIdentity` block as defined below.
     *
     * > **Note:** `storageBlobDeadLetterDestination` must be specified when a `deadLetterIdentity` is specified
     */
    deadLetterIdentity?: pulumi.Input<inputs.eventgrid.EventSubscriptionDeadLetterIdentity>;
    /**
     * A `deliveryIdentity` block as defined below.
     */
    deliveryIdentity?: pulumi.Input<inputs.eventgrid.EventSubscriptionDeliveryIdentity>;
    /**
     * One or more `deliveryProperty` blocks as defined below.
     */
    deliveryProperties?: pulumi.Input<pulumi.Input<inputs.eventgrid.EventSubscriptionDeliveryProperty>[]>;
    /**
     * Specifies the event delivery schema for the event subscription. Possible values include: `EventGridSchema`, `CloudEventSchemaV1_0`, `CustomInputSchema`. Defaults to `EventGridSchema`. Changing this forces a new resource to be created.
     */
    eventDeliverySchema?: pulumi.Input<string>;
    /**
     * Specifies the id where the Event Hub is located.
     */
    eventhubEndpointId?: pulumi.Input<string>;
    /**
     * Specifies the expiration time of the event subscription (Datetime Format `RFC 3339`).
     */
    expirationTimeUtc?: pulumi.Input<string>;
    /**
     * Specifies the id where the Hybrid Connection is located.
     */
    hybridConnectionEndpointId?: pulumi.Input<string>;
    /**
     * A list of applicable event types that need to be part of the event subscription.
     */
    includedEventTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of labels to assign to the event subscription.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the name of the EventGrid Event Subscription resource. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A `retryPolicy` block as defined below.
     */
    retryPolicy?: pulumi.Input<inputs.eventgrid.EventSubscriptionRetryPolicy>;
    /**
     * Specifies the scope at which the EventGrid Event Subscription should be created. Changing this forces a new resource to be created.
     */
    scope?: pulumi.Input<string>;
    /**
     * Specifies the id where the Service Bus Queue is located.
     */
    serviceBusQueueEndpointId?: pulumi.Input<string>;
    /**
     * Specifies the id where the Service Bus Topic is located.
     */
    serviceBusTopicEndpointId?: pulumi.Input<string>;
    /**
     * A `storageBlobDeadLetterDestination` block as defined below.
     */
    storageBlobDeadLetterDestination?: pulumi.Input<inputs.eventgrid.EventSubscriptionStorageBlobDeadLetterDestination>;
    /**
     * A `storageQueueEndpoint` block as defined below.
     */
    storageQueueEndpoint?: pulumi.Input<inputs.eventgrid.EventSubscriptionStorageQueueEndpoint>;
    /**
     * A `subjectFilter` block as defined below.
     */
    subjectFilter?: pulumi.Input<inputs.eventgrid.EventSubscriptionSubjectFilter>;
    /**
     * A `webhookEndpoint` block as defined below.
     *
     * > **Note:** One of `eventhubEndpointId`, `hybridConnectionEndpointId`, `serviceBusQueueEndpointId`, `serviceBusTopicEndpointId`, `storageQueueEndpoint`, `webhookEndpoint` or `azureFunctionEndpoint` must be specified.
     */
    webhookEndpoint?: pulumi.Input<inputs.eventgrid.EventSubscriptionWebhookEndpoint>;
}

/**
 * The set of arguments for constructing a EventSubscription resource.
 */
export interface EventSubscriptionArgs {
    /**
     * A `advancedFilter` block as defined below.
     */
    advancedFilter?: pulumi.Input<inputs.eventgrid.EventSubscriptionAdvancedFilter>;
    /**
     * Specifies whether advanced filters should be evaluated against an array of values instead of expecting a singular value. Defaults to `false`.
     */
    advancedFilteringOnArraysEnabled?: pulumi.Input<boolean>;
    /**
     * An `azureFunctionEndpoint` block as defined below.
     */
    azureFunctionEndpoint?: pulumi.Input<inputs.eventgrid.EventSubscriptionAzureFunctionEndpoint>;
    /**
     * A `deadLetterIdentity` block as defined below.
     *
     * > **Note:** `storageBlobDeadLetterDestination` must be specified when a `deadLetterIdentity` is specified
     */
    deadLetterIdentity?: pulumi.Input<inputs.eventgrid.EventSubscriptionDeadLetterIdentity>;
    /**
     * A `deliveryIdentity` block as defined below.
     */
    deliveryIdentity?: pulumi.Input<inputs.eventgrid.EventSubscriptionDeliveryIdentity>;
    /**
     * One or more `deliveryProperty` blocks as defined below.
     */
    deliveryProperties?: pulumi.Input<pulumi.Input<inputs.eventgrid.EventSubscriptionDeliveryProperty>[]>;
    /**
     * Specifies the event delivery schema for the event subscription. Possible values include: `EventGridSchema`, `CloudEventSchemaV1_0`, `CustomInputSchema`. Defaults to `EventGridSchema`. Changing this forces a new resource to be created.
     */
    eventDeliverySchema?: pulumi.Input<string>;
    /**
     * Specifies the id where the Event Hub is located.
     */
    eventhubEndpointId?: pulumi.Input<string>;
    /**
     * Specifies the expiration time of the event subscription (Datetime Format `RFC 3339`).
     */
    expirationTimeUtc?: pulumi.Input<string>;
    /**
     * Specifies the id where the Hybrid Connection is located.
     */
    hybridConnectionEndpointId?: pulumi.Input<string>;
    /**
     * A list of applicable event types that need to be part of the event subscription.
     */
    includedEventTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of labels to assign to the event subscription.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the name of the EventGrid Event Subscription resource. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A `retryPolicy` block as defined below.
     */
    retryPolicy?: pulumi.Input<inputs.eventgrid.EventSubscriptionRetryPolicy>;
    /**
     * Specifies the scope at which the EventGrid Event Subscription should be created. Changing this forces a new resource to be created.
     */
    scope: pulumi.Input<string>;
    /**
     * Specifies the id where the Service Bus Queue is located.
     */
    serviceBusQueueEndpointId?: pulumi.Input<string>;
    /**
     * Specifies the id where the Service Bus Topic is located.
     */
    serviceBusTopicEndpointId?: pulumi.Input<string>;
    /**
     * A `storageBlobDeadLetterDestination` block as defined below.
     */
    storageBlobDeadLetterDestination?: pulumi.Input<inputs.eventgrid.EventSubscriptionStorageBlobDeadLetterDestination>;
    /**
     * A `storageQueueEndpoint` block as defined below.
     */
    storageQueueEndpoint?: pulumi.Input<inputs.eventgrid.EventSubscriptionStorageQueueEndpoint>;
    /**
     * A `subjectFilter` block as defined below.
     */
    subjectFilter?: pulumi.Input<inputs.eventgrid.EventSubscriptionSubjectFilter>;
    /**
     * A `webhookEndpoint` block as defined below.
     *
     * > **Note:** One of `eventhubEndpointId`, `hybridConnectionEndpointId`, `serviceBusQueueEndpointId`, `serviceBusTopicEndpointId`, `storageQueueEndpoint`, `webhookEndpoint` or `azureFunctionEndpoint` must be specified.
     */
    webhookEndpoint?: pulumi.Input<inputs.eventgrid.EventSubscriptionWebhookEndpoint>;
}
