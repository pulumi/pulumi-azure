// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an EventGrid Partner Registration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const examplePartnerRegistration = new azure.eventgrid.PartnerRegistration("example", {
 *     name: "example-partner-registration",
 *     resourceGroupName: example.name,
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.EventGrid` - 2022-06-15
 *
 * ## Import
 *
 * EventGrid Partner Registrations can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:eventgrid/partnerRegistration:PartnerRegistration example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.EventGrid/partnerRegistrations/example
 * ```
 */
export class PartnerRegistration extends pulumi.CustomResource {
    /**
     * Get an existing PartnerRegistration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PartnerRegistrationState, opts?: pulumi.CustomResourceOptions): PartnerRegistration {
        return new PartnerRegistration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:eventgrid/partnerRegistration:PartnerRegistration';

    /**
     * Returns true if the given object is an instance of PartnerRegistration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PartnerRegistration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PartnerRegistration.__pulumiType;
    }

    /**
     * The name which should be used for this EventGrid Partner Registration. Changing this forces a new EventGrid Partner Registration to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The immutable id of the corresponding partner registration.
     */
    declare public /*out*/ readonly partnerRegistrationId: pulumi.Output<string>;
    /**
     * The name of the Resource Group where the EventGrid Partner Registration should exist. Changing this forces a new EventGrid Partner Registration to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * A mapping of tags which should be assigned to the EventGrid Partner Registration.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a PartnerRegistration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PartnerRegistrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PartnerRegistrationArgs | PartnerRegistrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PartnerRegistrationState | undefined;
            resourceInputs["name"] = state?.name;
            resourceInputs["partnerRegistrationId"] = state?.partnerRegistrationId;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as PartnerRegistrationArgs | undefined;
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["name"] = args?.name;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["partnerRegistrationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PartnerRegistration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PartnerRegistration resources.
 */
export interface PartnerRegistrationState {
    /**
     * The name which should be used for this EventGrid Partner Registration. Changing this forces a new EventGrid Partner Registration to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The immutable id of the corresponding partner registration.
     */
    partnerRegistrationId?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the EventGrid Partner Registration should exist. Changing this forces a new EventGrid Partner Registration to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the EventGrid Partner Registration.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a PartnerRegistration resource.
 */
export interface PartnerRegistrationArgs {
    /**
     * The name which should be used for this EventGrid Partner Registration. Changing this forces a new EventGrid Partner Registration to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the EventGrid Partner Registration should exist. Changing this forces a new EventGrid Partner Registration to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the EventGrid Partner Registration.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
