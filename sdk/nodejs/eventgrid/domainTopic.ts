// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an EventGrid Domain Topic
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West US 2"});
 * const exampleDomain = new azure.eventgrid.Domain("exampleDomain", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     tags: {
 *         environment: "Production",
 *     },
 * });
 * const exampleDomainTopic = new azure.eventgrid.DomainTopic("exampleDomainTopic", {
 *     domainName: exampleDomain.name,
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * ```
 *
 * ## Import
 *
 * EventGrid Domain Topics can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:eventgrid/domainTopic:DomainTopic topic1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.EventGrid/domains/domain1/topics/topic1
 * ```
 */
export class DomainTopic extends pulumi.CustomResource {
    /**
     * Get an existing DomainTopic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainTopicState, opts?: pulumi.CustomResourceOptions): DomainTopic {
        return new DomainTopic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:eventgrid/domainTopic:DomainTopic';

    /**
     * Returns true if the given object is an instance of DomainTopic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DomainTopic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainTopic.__pulumiType;
    }

    /**
     * Specifies the name of the EventGrid Domain. Changing this forces a new resource to be created.
     */
    public readonly domainName!: pulumi.Output<string>;
    /**
     * Specifies the name of the EventGrid Domain Topic resource. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the resource group in which the EventGrid Domain exists. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;

    /**
     * Create a DomainTopic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainTopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainTopicArgs | DomainTopicState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as DomainTopicState | undefined;
            inputs["domainName"] = state ? state.domainName : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
        } else {
            const args = argsOrState as DomainTopicArgs | undefined;
            if ((!args || args.domainName === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'domainName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["domainName"] = args ? args.domainName : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(DomainTopic.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DomainTopic resources.
 */
export interface DomainTopicState {
    /**
     * Specifies the name of the EventGrid Domain. Changing this forces a new resource to be created.
     */
    readonly domainName?: pulumi.Input<string>;
    /**
     * Specifies the name of the EventGrid Domain Topic resource. Changing this forces a new resource to be created.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The name of the resource group in which the EventGrid Domain exists. Changing this forces a new resource to be created.
     */
    readonly resourceGroupName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DomainTopic resource.
 */
export interface DomainTopicArgs {
    /**
     * Specifies the name of the EventGrid Domain. Changing this forces a new resource to be created.
     */
    readonly domainName: pulumi.Input<string>;
    /**
     * Specifies the name of the EventGrid Domain Topic resource. Changing this forces a new resource to be created.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The name of the resource group in which the EventGrid Domain exists. Changing this forces a new resource to be created.
     */
    readonly resourceGroupName: pulumi.Input<string>;
}
