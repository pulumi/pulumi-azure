// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages an Event Grid Partner Namespace.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const examplePartnerRegistration = new azure.eventgrid.PartnerRegistration("example", {
 *     name: "example-partner-registration",
 *     resourceGroupName: example.name,
 * });
 * const examplePartnerNamespace = new azure.eventgrid.PartnerNamespace("example", {
 *     name: "example-partner-namespace",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     partnerRegistrationId: examplePartnerRegistration.id,
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.EventGrid` - 2022-06-15
 *
 * ## Import
 *
 * Event Grid Partner Namespaces can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:eventgrid/partnerNamespace:PartnerNamespace example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.EventGrid/partnerNamespaces/example
 * ```
 */
export class PartnerNamespace extends pulumi.CustomResource {
    /**
     * Get an existing PartnerNamespace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PartnerNamespaceState, opts?: pulumi.CustomResourceOptions): PartnerNamespace {
        return new PartnerNamespace(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:eventgrid/partnerNamespace:PartnerNamespace';

    /**
     * Returns true if the given object is an instance of PartnerNamespace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PartnerNamespace {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PartnerNamespace.__pulumiType;
    }

    /**
     * The endpoint for the Event Grid Partner Namespace.
     */
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    /**
     * One or more `inboundIpRule` blocks as defined below.
     */
    public readonly inboundIpRules!: pulumi.Output<outputs.eventgrid.PartnerNamespaceInboundIpRule[] | undefined>;
    /**
     * Whether local authentication methods are enabled for the Event Grid Partner Namespace. Defaults to `true`.
     */
    public readonly localAuthenticationEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the Azure Region where the Event Grid Partner Namespace exists. Changing this forces a new resource to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name which should be used for this Event Grid Partner Namespace. Changing this forces a new Event Grid Partner Namespace to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The resource Id of the Event Grid Partner Registration that this namespace is associated with. Changing this forces a new Event Grid Partner Namespace to be created.
     */
    public readonly partnerRegistrationId!: pulumi.Output<string>;
    /**
     * The partner topic routing mode. Possible values are `ChannelNameHeader` and `SourceEventAttribute`. Defaults to `ChannelNameHeader`. Changing this forces a new Event Grid Partner Namespace to be created.
     */
    public readonly partnerTopicRoutingMode!: pulumi.Output<string | undefined>;
    /**
     * Whether or not public network access is allowed for this server. Possible values are `Enabled` and `Disabled`. Defaults to `Enabled`.
     */
    public readonly publicNetworkAccess!: pulumi.Output<string | undefined>;
    /**
     * The name of the Resource Group where the Event Grid Partner Namespace should exist. Changing this forces a new Event Grid Partner Namespace to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * A mapping of tags which should be assigned to the Event Grid Partner Namespace.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a PartnerNamespace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PartnerNamespaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PartnerNamespaceArgs | PartnerNamespaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PartnerNamespaceState | undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["inboundIpRules"] = state ? state.inboundIpRules : undefined;
            resourceInputs["localAuthenticationEnabled"] = state ? state.localAuthenticationEnabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["partnerRegistrationId"] = state ? state.partnerRegistrationId : undefined;
            resourceInputs["partnerTopicRoutingMode"] = state ? state.partnerTopicRoutingMode : undefined;
            resourceInputs["publicNetworkAccess"] = state ? state.publicNetworkAccess : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as PartnerNamespaceArgs | undefined;
            if ((!args || args.partnerRegistrationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'partnerRegistrationId'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["inboundIpRules"] = args ? args.inboundIpRules : undefined;
            resourceInputs["localAuthenticationEnabled"] = args ? args.localAuthenticationEnabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["partnerRegistrationId"] = args ? args.partnerRegistrationId : undefined;
            resourceInputs["partnerTopicRoutingMode"] = args ? args.partnerTopicRoutingMode : undefined;
            resourceInputs["publicNetworkAccess"] = args ? args.publicNetworkAccess : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["endpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PartnerNamespace.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PartnerNamespace resources.
 */
export interface PartnerNamespaceState {
    /**
     * The endpoint for the Event Grid Partner Namespace.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * One or more `inboundIpRule` blocks as defined below.
     */
    inboundIpRules?: pulumi.Input<pulumi.Input<inputs.eventgrid.PartnerNamespaceInboundIpRule>[]>;
    /**
     * Whether local authentication methods are enabled for the Event Grid Partner Namespace. Defaults to `true`.
     */
    localAuthenticationEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the Azure Region where the Event Grid Partner Namespace exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The name which should be used for this Event Grid Partner Namespace. Changing this forces a new Event Grid Partner Namespace to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The resource Id of the Event Grid Partner Registration that this namespace is associated with. Changing this forces a new Event Grid Partner Namespace to be created.
     */
    partnerRegistrationId?: pulumi.Input<string>;
    /**
     * The partner topic routing mode. Possible values are `ChannelNameHeader` and `SourceEventAttribute`. Defaults to `ChannelNameHeader`. Changing this forces a new Event Grid Partner Namespace to be created.
     */
    partnerTopicRoutingMode?: pulumi.Input<string>;
    /**
     * Whether or not public network access is allowed for this server. Possible values are `Enabled` and `Disabled`. Defaults to `Enabled`.
     */
    publicNetworkAccess?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Event Grid Partner Namespace should exist. Changing this forces a new Event Grid Partner Namespace to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Event Grid Partner Namespace.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a PartnerNamespace resource.
 */
export interface PartnerNamespaceArgs {
    /**
     * One or more `inboundIpRule` blocks as defined below.
     */
    inboundIpRules?: pulumi.Input<pulumi.Input<inputs.eventgrid.PartnerNamespaceInboundIpRule>[]>;
    /**
     * Whether local authentication methods are enabled for the Event Grid Partner Namespace. Defaults to `true`.
     */
    localAuthenticationEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the Azure Region where the Event Grid Partner Namespace exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The name which should be used for this Event Grid Partner Namespace. Changing this forces a new Event Grid Partner Namespace to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The resource Id of the Event Grid Partner Registration that this namespace is associated with. Changing this forces a new Event Grid Partner Namespace to be created.
     */
    partnerRegistrationId: pulumi.Input<string>;
    /**
     * The partner topic routing mode. Possible values are `ChannelNameHeader` and `SourceEventAttribute`. Defaults to `ChannelNameHeader`. Changing this forces a new Event Grid Partner Namespace to be created.
     */
    partnerTopicRoutingMode?: pulumi.Input<string>;
    /**
     * Whether or not public network access is allowed for this server. Possible values are `Enabled` and `Disabled`. Defaults to `Enabled`.
     */
    publicNetworkAccess?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Event Grid Partner Namespace should exist. Changing this forces a new Event Grid Partner Namespace to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Event Grid Partner Namespace.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
