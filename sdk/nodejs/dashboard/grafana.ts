// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Dashboard Grafana.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleGrafana = new azure.dashboard.Grafana("example", {
 *     name: "example-dg",
 *     resourceGroupName: example.name,
 *     location: "West Europe",
 *     grafanaMajorVersion: "11",
 *     apiKeyEnabled: true,
 *     deterministicOutboundIpEnabled: true,
 *     publicNetworkAccessEnabled: false,
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 *     tags: {
 *         key: "value",
 *     },
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Dashboard` - 2023-09-01
 *
 * ## Import
 *
 * Dashboard Grafana can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:dashboard/grafana:Grafana example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Dashboard/grafana/workspace1
 * ```
 */
export class Grafana extends pulumi.CustomResource {
    /**
     * Get an existing Grafana resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GrafanaState, opts?: pulumi.CustomResourceOptions): Grafana {
        return new Grafana(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:dashboard/grafana:Grafana';

    /**
     * Returns true if the given object is an instance of Grafana.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Grafana {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Grafana.__pulumiType;
    }

    /**
     * Whether to enable the api key setting of the Grafana instance. Defaults to `false`.
     */
    declare public readonly apiKeyEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Scope for dns deterministic name hash calculation. The only possible value is `TenantReuse`. Defaults to `TenantReuse`.
     */
    declare public readonly autoGeneratedDomainNameLabelScope: pulumi.Output<string | undefined>;
    /**
     * A `azureMonitorWorkspaceIntegrations` block as defined below.
     */
    declare public readonly azureMonitorWorkspaceIntegrations: pulumi.Output<outputs.dashboard.GrafanaAzureMonitorWorkspaceIntegration[] | undefined>;
    /**
     * Whether to enable the Grafana instance to use deterministic outbound IPs. Defaults to `false`.
     */
    declare public readonly deterministicOutboundIpEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The endpoint of the Grafana instance.
     */
    declare public /*out*/ readonly endpoint: pulumi.Output<string>;
    /**
     * Which major version of Grafana to deploy. Possible values are `10`, `11`. Changing this forces a new resource to be created.
     */
    declare public readonly grafanaMajorVersion: pulumi.Output<string>;
    /**
     * The full Grafana software semantic version deployed.
     */
    declare public /*out*/ readonly grafanaVersion: pulumi.Output<string>;
    /**
     * An `identity` block as defined below. Changing this forces a new Dashboard Grafana to be created.
     */
    declare public readonly identity: pulumi.Output<outputs.dashboard.GrafanaIdentity | undefined>;
    /**
     * Specifies the Azure Region where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * Specifies the name which should be used for this Dashboard Grafana. Changing this forces a new Dashboard Grafana to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * List of outbound IPs if deterministicOutboundIP is enabled.
     */
    declare public /*out*/ readonly outboundIps: pulumi.Output<string[]>;
    /**
     * Whether to enable traffic over the public interface. Defaults to `true`.
     */
    declare public readonly publicNetworkAccessEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the name of the Resource Group where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * The name of the SKU used for the Grafana instance. Possible values are `Standard` and `Essential`. Defaults to `Standard`. Changing this forces a new Dashboard Grafana to be created.
     */
    declare public readonly sku: pulumi.Output<string | undefined>;
    /**
     * A `smtp` block as defined below.
     */
    declare public readonly smtp: pulumi.Output<outputs.dashboard.GrafanaSmtp | undefined>;
    /**
     * A mapping of tags which should be assigned to the Dashboard Grafana.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Whether to enable the zone redundancy setting of the Grafana instance. Defaults to `false`. Changing this forces a new Dashboard Grafana to be created.
     */
    declare public readonly zoneRedundancyEnabled: pulumi.Output<boolean | undefined>;

    /**
     * Create a Grafana resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GrafanaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GrafanaArgs | GrafanaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GrafanaState | undefined;
            resourceInputs["apiKeyEnabled"] = state?.apiKeyEnabled;
            resourceInputs["autoGeneratedDomainNameLabelScope"] = state?.autoGeneratedDomainNameLabelScope;
            resourceInputs["azureMonitorWorkspaceIntegrations"] = state?.azureMonitorWorkspaceIntegrations;
            resourceInputs["deterministicOutboundIpEnabled"] = state?.deterministicOutboundIpEnabled;
            resourceInputs["endpoint"] = state?.endpoint;
            resourceInputs["grafanaMajorVersion"] = state?.grafanaMajorVersion;
            resourceInputs["grafanaVersion"] = state?.grafanaVersion;
            resourceInputs["identity"] = state?.identity;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["outboundIps"] = state?.outboundIps;
            resourceInputs["publicNetworkAccessEnabled"] = state?.publicNetworkAccessEnabled;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["sku"] = state?.sku;
            resourceInputs["smtp"] = state?.smtp;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["zoneRedundancyEnabled"] = state?.zoneRedundancyEnabled;
        } else {
            const args = argsOrState as GrafanaArgs | undefined;
            if (args?.grafanaMajorVersion === undefined && !opts.urn) {
                throw new Error("Missing required property 'grafanaMajorVersion'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["apiKeyEnabled"] = args?.apiKeyEnabled;
            resourceInputs["autoGeneratedDomainNameLabelScope"] = args?.autoGeneratedDomainNameLabelScope;
            resourceInputs["azureMonitorWorkspaceIntegrations"] = args?.azureMonitorWorkspaceIntegrations;
            resourceInputs["deterministicOutboundIpEnabled"] = args?.deterministicOutboundIpEnabled;
            resourceInputs["grafanaMajorVersion"] = args?.grafanaMajorVersion;
            resourceInputs["identity"] = args?.identity;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["publicNetworkAccessEnabled"] = args?.publicNetworkAccessEnabled;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["sku"] = args?.sku;
            resourceInputs["smtp"] = args?.smtp;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["zoneRedundancyEnabled"] = args?.zoneRedundancyEnabled;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["grafanaVersion"] = undefined /*out*/;
            resourceInputs["outboundIps"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Grafana.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Grafana resources.
 */
export interface GrafanaState {
    /**
     * Whether to enable the api key setting of the Grafana instance. Defaults to `false`.
     */
    apiKeyEnabled?: pulumi.Input<boolean>;
    /**
     * Scope for dns deterministic name hash calculation. The only possible value is `TenantReuse`. Defaults to `TenantReuse`.
     */
    autoGeneratedDomainNameLabelScope?: pulumi.Input<string>;
    /**
     * A `azureMonitorWorkspaceIntegrations` block as defined below.
     */
    azureMonitorWorkspaceIntegrations?: pulumi.Input<pulumi.Input<inputs.dashboard.GrafanaAzureMonitorWorkspaceIntegration>[]>;
    /**
     * Whether to enable the Grafana instance to use deterministic outbound IPs. Defaults to `false`.
     */
    deterministicOutboundIpEnabled?: pulumi.Input<boolean>;
    /**
     * The endpoint of the Grafana instance.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * Which major version of Grafana to deploy. Possible values are `10`, `11`. Changing this forces a new resource to be created.
     */
    grafanaMajorVersion?: pulumi.Input<string>;
    /**
     * The full Grafana software semantic version deployed.
     */
    grafanaVersion?: pulumi.Input<string>;
    /**
     * An `identity` block as defined below. Changing this forces a new Dashboard Grafana to be created.
     */
    identity?: pulumi.Input<inputs.dashboard.GrafanaIdentity>;
    /**
     * Specifies the Azure Region where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name which should be used for this Dashboard Grafana. Changing this forces a new Dashboard Grafana to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * List of outbound IPs if deterministicOutboundIP is enabled.
     */
    outboundIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to enable traffic over the public interface. Defaults to `true`.
     */
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the name of the Resource Group where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The name of the SKU used for the Grafana instance. Possible values are `Standard` and `Essential`. Defaults to `Standard`. Changing this forces a new Dashboard Grafana to be created.
     */
    sku?: pulumi.Input<string>;
    /**
     * A `smtp` block as defined below.
     */
    smtp?: pulumi.Input<inputs.dashboard.GrafanaSmtp>;
    /**
     * A mapping of tags which should be assigned to the Dashboard Grafana.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether to enable the zone redundancy setting of the Grafana instance. Defaults to `false`. Changing this forces a new Dashboard Grafana to be created.
     */
    zoneRedundancyEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Grafana resource.
 */
export interface GrafanaArgs {
    /**
     * Whether to enable the api key setting of the Grafana instance. Defaults to `false`.
     */
    apiKeyEnabled?: pulumi.Input<boolean>;
    /**
     * Scope for dns deterministic name hash calculation. The only possible value is `TenantReuse`. Defaults to `TenantReuse`.
     */
    autoGeneratedDomainNameLabelScope?: pulumi.Input<string>;
    /**
     * A `azureMonitorWorkspaceIntegrations` block as defined below.
     */
    azureMonitorWorkspaceIntegrations?: pulumi.Input<pulumi.Input<inputs.dashboard.GrafanaAzureMonitorWorkspaceIntegration>[]>;
    /**
     * Whether to enable the Grafana instance to use deterministic outbound IPs. Defaults to `false`.
     */
    deterministicOutboundIpEnabled?: pulumi.Input<boolean>;
    /**
     * Which major version of Grafana to deploy. Possible values are `10`, `11`. Changing this forces a new resource to be created.
     */
    grafanaMajorVersion: pulumi.Input<string>;
    /**
     * An `identity` block as defined below. Changing this forces a new Dashboard Grafana to be created.
     */
    identity?: pulumi.Input<inputs.dashboard.GrafanaIdentity>;
    /**
     * Specifies the Azure Region where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name which should be used for this Dashboard Grafana. Changing this forces a new Dashboard Grafana to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether to enable traffic over the public interface. Defaults to `true`.
     */
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the name of the Resource Group where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The name of the SKU used for the Grafana instance. Possible values are `Standard` and `Essential`. Defaults to `Standard`. Changing this forces a new Dashboard Grafana to be created.
     */
    sku?: pulumi.Input<string>;
    /**
     * A `smtp` block as defined below.
     */
    smtp?: pulumi.Input<inputs.dashboard.GrafanaSmtp>;
    /**
     * A mapping of tags which should be assigned to the Dashboard Grafana.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether to enable the zone redundancy setting of the Grafana instance. Defaults to `false`. Changing this forces a new Dashboard Grafana to be created.
     */
    zoneRedundancyEnabled?: pulumi.Input<boolean>;
}
