// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this data source to access information about an existing Communication Service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.communication.getService({
 *     name: "existing",
 *     resourceGroupName: "existing",
 * });
 * export const id = example.then(example => example.id);
 * ```
 */
export function getService(args: GetServiceArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure:communication/getService:getService", {
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

/**
 * A collection of arguments for invoking getService.
 */
export interface GetServiceArgs {
    /**
     * The name of this Communication Service.
     * *
     */
    name: string;
    /**
     * The name of the Resource Group where the Communication Service exists.
     * *
     */
    resourceGroupName: string;
}

/**
 * A collection of values returned by getService.
 */
export interface GetServiceResult {
    /**
     * The location where the Communication service stores its data at rest.
     */
    readonly dataLocation: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name: string;
    /**
     * The primary connection string of the Communication Service.
     */
    readonly primaryConnectionString: string;
    /**
     * The primary key of the Communication Service.
     */
    readonly primaryKey: string;
    readonly resourceGroupName: string;
    /**
     * The secondary connection string of the Communication Service.
     */
    readonly secondaryConnectionString: string;
    /**
     * The secondary key of the Communication Service.
     */
    readonly secondaryKey: string;
    /**
     * A mapping of tags assigned to the Communication Service.
     */
    readonly tags: {[key: string]: string};
}
/**
 * Use this data source to access information about an existing Communication Service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.communication.getService({
 *     name: "existing",
 *     resourceGroupName: "existing",
 * });
 * export const id = example.then(example => example.id);
 * ```
 */
export function getServiceOutput(args: GetServiceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceResult> {
    return pulumi.output(args).apply((a: any) => getService(a, opts))
}

/**
 * A collection of arguments for invoking getService.
 */
export interface GetServiceOutputArgs {
    /**
     * The name of this Communication Service.
     * *
     */
    name: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Communication Service exists.
     * *
     */
    resourceGroupName: pulumi.Input<string>;
}
