// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccountFilterArgs, AccountFilterState } from "./accountFilter";
export type AccountFilter = import("./accountFilter").AccountFilter;
export const AccountFilter: typeof import("./accountFilter").AccountFilter = null as any;
utilities.lazyLoad(exports, ["AccountFilter"], () => require("./accountFilter"));

export { AssetArgs, AssetState } from "./asset";
export type Asset = import("./asset").Asset;
export const Asset: typeof import("./asset").Asset = null as any;
utilities.lazyLoad(exports, ["Asset"], () => require("./asset"));

export { AssetFilterArgs, AssetFilterState } from "./assetFilter";
export type AssetFilter = import("./assetFilter").AssetFilter;
export const AssetFilter: typeof import("./assetFilter").AssetFilter = null as any;
utilities.lazyLoad(exports, ["AssetFilter"], () => require("./assetFilter"));

export { ContentKeyPolicyArgs, ContentKeyPolicyState } from "./contentKeyPolicy";
export type ContentKeyPolicy = import("./contentKeyPolicy").ContentKeyPolicy;
export const ContentKeyPolicy: typeof import("./contentKeyPolicy").ContentKeyPolicy = null as any;
utilities.lazyLoad(exports, ["ContentKeyPolicy"], () => require("./contentKeyPolicy"));

export { JobArgs, JobState } from "./job";
export type Job = import("./job").Job;
export const Job: typeof import("./job").Job = null as any;
utilities.lazyLoad(exports, ["Job"], () => require("./job"));

export { LiveEventArgs, LiveEventState } from "./liveEvent";
export type LiveEvent = import("./liveEvent").LiveEvent;
export const LiveEvent: typeof import("./liveEvent").LiveEvent = null as any;
utilities.lazyLoad(exports, ["LiveEvent"], () => require("./liveEvent"));

export { LiveEventOutputArgs, LiveEventOutputState } from "./liveEventOutput";
export type LiveEventOutput = import("./liveEventOutput").LiveEventOutput;
export const LiveEventOutput: typeof import("./liveEventOutput").LiveEventOutput = null as any;
utilities.lazyLoad(exports, ["LiveEventOutput"], () => require("./liveEventOutput"));

export { ServiceAccountArgs, ServiceAccountState } from "./serviceAccount";
export type ServiceAccount = import("./serviceAccount").ServiceAccount;
export const ServiceAccount: typeof import("./serviceAccount").ServiceAccount = null as any;
utilities.lazyLoad(exports, ["ServiceAccount"], () => require("./serviceAccount"));

export { StreamingEndpointArgs, StreamingEndpointState } from "./streamingEndpoint";
export type StreamingEndpoint = import("./streamingEndpoint").StreamingEndpoint;
export const StreamingEndpoint: typeof import("./streamingEndpoint").StreamingEndpoint = null as any;
utilities.lazyLoad(exports, ["StreamingEndpoint"], () => require("./streamingEndpoint"));

export { StreamingLocatorArgs, StreamingLocatorState } from "./streamingLocator";
export type StreamingLocator = import("./streamingLocator").StreamingLocator;
export const StreamingLocator: typeof import("./streamingLocator").StreamingLocator = null as any;
utilities.lazyLoad(exports, ["StreamingLocator"], () => require("./streamingLocator"));

export { StreamingPolicyArgs, StreamingPolicyState } from "./streamingPolicy";
export type StreamingPolicy = import("./streamingPolicy").StreamingPolicy;
export const StreamingPolicy: typeof import("./streamingPolicy").StreamingPolicy = null as any;
utilities.lazyLoad(exports, ["StreamingPolicy"], () => require("./streamingPolicy"));

export { TransformArgs, TransformState } from "./transform";
export type Transform = import("./transform").Transform;
export const Transform: typeof import("./transform").Transform = null as any;
utilities.lazyLoad(exports, ["Transform"], () => require("./transform"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:media/accountFilter:AccountFilter":
                return new AccountFilter(name, <any>undefined, { urn })
            case "azure:media/asset:Asset":
                return new Asset(name, <any>undefined, { urn })
            case "azure:media/assetFilter:AssetFilter":
                return new AssetFilter(name, <any>undefined, { urn })
            case "azure:media/contentKeyPolicy:ContentKeyPolicy":
                return new ContentKeyPolicy(name, <any>undefined, { urn })
            case "azure:media/job:Job":
                return new Job(name, <any>undefined, { urn })
            case "azure:media/liveEvent:LiveEvent":
                return new LiveEvent(name, <any>undefined, { urn })
            case "azure:media/liveEventOutput:LiveEventOutput":
                return new LiveEventOutput(name, <any>undefined, { urn })
            case "azure:media/serviceAccount:ServiceAccount":
                return new ServiceAccount(name, <any>undefined, { urn })
            case "azure:media/streamingEndpoint:StreamingEndpoint":
                return new StreamingEndpoint(name, <any>undefined, { urn })
            case "azure:media/streamingLocator:StreamingLocator":
                return new StreamingLocator(name, <any>undefined, { urn })
            case "azure:media/streamingPolicy:StreamingPolicy":
                return new StreamingPolicy(name, <any>undefined, { urn })
            case "azure:media/transform:Transform":
                return new Transform(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "media/accountFilter", _module)
pulumi.runtime.registerResourceModule("azure", "media/asset", _module)
pulumi.runtime.registerResourceModule("azure", "media/assetFilter", _module)
pulumi.runtime.registerResourceModule("azure", "media/contentKeyPolicy", _module)
pulumi.runtime.registerResourceModule("azure", "media/job", _module)
pulumi.runtime.registerResourceModule("azure", "media/liveEvent", _module)
pulumi.runtime.registerResourceModule("azure", "media/liveEventOutput", _module)
pulumi.runtime.registerResourceModule("azure", "media/serviceAccount", _module)
pulumi.runtime.registerResourceModule("azure", "media/streamingEndpoint", _module)
pulumi.runtime.registerResourceModule("azure", "media/streamingLocator", _module)
pulumi.runtime.registerResourceModule("azure", "media/streamingPolicy", _module)
pulumi.runtime.registerResourceModule("azure", "media/transform", _module)
