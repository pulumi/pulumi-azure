// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Manages a Streaming Endpoint.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "GRS",
 * });
 * const exampleServiceAccount = new azure.media.ServiceAccount("exampleServiceAccount", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     storageAccounts: [{
 *         id: exampleAccount.id,
 *         isPrimary: true,
 *     }],
 * });
 * const exampleStreamingEndpoint = new azure.media.StreamingEndpoint("exampleStreamingEndpoint", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     mediaServicesAccountName: exampleServiceAccount.name,
 *     scaleUnits: 2,
 * });
 * ```
 * ### With Access Control
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "GRS",
 * });
 * const exampleServiceAccount = new azure.media.ServiceAccount("exampleServiceAccount", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     storageAccounts: [{
 *         id: exampleAccount.id,
 *         isPrimary: true,
 *     }],
 * });
 * const exampleStreamingEndpoint = new azure.media.StreamingEndpoint("exampleStreamingEndpoint", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     mediaServicesAccountName: exampleServiceAccount.name,
 *     scaleUnits: 2,
 *     accessControl: {
 *         ipAllows: [
 *             {
 *                 name: "AllowedIP",
 *                 address: "192.168.1.1",
 *             },
 *             {
 *                 name: "AnotherIp",
 *                 address: "192.168.1.2",
 *             },
 *         ],
 *         akamaiSignatureHeaderAuthenticationKeys: [
 *             {
 *                 identifier: "id1",
 *                 expiration: "2030-12-31T16:00:00Z",
 *                 base64Key: "dGVzdGlkMQ==",
 *             },
 *             {
 *                 identifier: "id2",
 *                 expiration: "2032-01-28T16:00:00Z",
 *                 base64Key: "dGVzdGlkMQ==",
 *             },
 *         ],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Streaming Endpoints can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:media/streamingEndpoint:StreamingEndpoint example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/mediaservices/service1/streamingendpoints/endpoint1
 * ```
 */
export class StreamingEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing StreamingEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamingEndpointState, opts?: pulumi.CustomResourceOptions): StreamingEndpoint {
        return new StreamingEndpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:media/streamingEndpoint:StreamingEndpoint';

    /**
     * Returns true if the given object is an instance of StreamingEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StreamingEndpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamingEndpoint.__pulumiType;
    }

    /**
     * A `accessControl` block as defined below.
     */
    public readonly accessControl!: pulumi.Output<outputs.media.StreamingEndpointAccessControl | undefined>;
    /**
     * The flag indicates if the resource should be automatically started on creation.
     */
    public readonly autoStartEnabled!: pulumi.Output<boolean>;
    /**
     * The CDN enabled flag.
     */
    public readonly cdnEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The CDN profile name.
     */
    public readonly cdnProfile!: pulumi.Output<string>;
    /**
     * The CDN provider name. Supported value are `StandardVerizon`,`PremiumVerizon` and `StandardAkamai`
     */
    public readonly cdnProvider!: pulumi.Output<string>;
    /**
     * A `crossSiteAccessPolicy` block as defined below.
     */
    public readonly crossSiteAccessPolicy!: pulumi.Output<outputs.media.StreamingEndpointCrossSiteAccessPolicy | undefined>;
    /**
     * The custom host names of the streaming endpoint.
     */
    public readonly customHostNames!: pulumi.Output<string[] | undefined>;
    /**
     * The streaming endpoint description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The host name of the Streaming Endpoint.
     */
    public /*out*/ readonly hostName!: pulumi.Output<string>;
    /**
     * The Azure Region where the Streaming Endpoint should exist. Changing this forces a new Streaming Endpoint to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Max cache age in seconds.
     */
    public readonly maxCacheAgeSeconds!: pulumi.Output<number | undefined>;
    /**
     * The Media Services account name. Changing this forces a new Streaming Endpoint to be created.
     */
    public readonly mediaServicesAccountName!: pulumi.Output<string>;
    /**
     * The name which should be used for this Streaming Endpoint maximum length is 24. Changing this forces a new Streaming Endpoint to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the Resource Group where the Streaming Endpoint should exist. Changing this forces a new Streaming Endpoint to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * The number of scale units.
     */
    public readonly scaleUnits!: pulumi.Output<number>;
    /**
     * A mapping of tags which should be assigned to the Streaming Endpoint.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a StreamingEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamingEndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StreamingEndpointArgs | StreamingEndpointState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StreamingEndpointState | undefined;
            inputs["accessControl"] = state ? state.accessControl : undefined;
            inputs["autoStartEnabled"] = state ? state.autoStartEnabled : undefined;
            inputs["cdnEnabled"] = state ? state.cdnEnabled : undefined;
            inputs["cdnProfile"] = state ? state.cdnProfile : undefined;
            inputs["cdnProvider"] = state ? state.cdnProvider : undefined;
            inputs["crossSiteAccessPolicy"] = state ? state.crossSiteAccessPolicy : undefined;
            inputs["customHostNames"] = state ? state.customHostNames : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["hostName"] = state ? state.hostName : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["maxCacheAgeSeconds"] = state ? state.maxCacheAgeSeconds : undefined;
            inputs["mediaServicesAccountName"] = state ? state.mediaServicesAccountName : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["scaleUnits"] = state ? state.scaleUnits : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as StreamingEndpointArgs | undefined;
            if ((!args || args.mediaServicesAccountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mediaServicesAccountName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.scaleUnits === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scaleUnits'");
            }
            inputs["accessControl"] = args ? args.accessControl : undefined;
            inputs["autoStartEnabled"] = args ? args.autoStartEnabled : undefined;
            inputs["cdnEnabled"] = args ? args.cdnEnabled : undefined;
            inputs["cdnProfile"] = args ? args.cdnProfile : undefined;
            inputs["cdnProvider"] = args ? args.cdnProvider : undefined;
            inputs["crossSiteAccessPolicy"] = args ? args.crossSiteAccessPolicy : undefined;
            inputs["customHostNames"] = args ? args.customHostNames : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["maxCacheAgeSeconds"] = args ? args.maxCacheAgeSeconds : undefined;
            inputs["mediaServicesAccountName"] = args ? args.mediaServicesAccountName : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["scaleUnits"] = args ? args.scaleUnits : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["hostName"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(StreamingEndpoint.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StreamingEndpoint resources.
 */
export interface StreamingEndpointState {
    /**
     * A `accessControl` block as defined below.
     */
    readonly accessControl?: pulumi.Input<inputs.media.StreamingEndpointAccessControl>;
    /**
     * The flag indicates if the resource should be automatically started on creation.
     */
    readonly autoStartEnabled?: pulumi.Input<boolean>;
    /**
     * The CDN enabled flag.
     */
    readonly cdnEnabled?: pulumi.Input<boolean>;
    /**
     * The CDN profile name.
     */
    readonly cdnProfile?: pulumi.Input<string>;
    /**
     * The CDN provider name. Supported value are `StandardVerizon`,`PremiumVerizon` and `StandardAkamai`
     */
    readonly cdnProvider?: pulumi.Input<string>;
    /**
     * A `crossSiteAccessPolicy` block as defined below.
     */
    readonly crossSiteAccessPolicy?: pulumi.Input<inputs.media.StreamingEndpointCrossSiteAccessPolicy>;
    /**
     * The custom host names of the streaming endpoint.
     */
    readonly customHostNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The streaming endpoint description.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The host name of the Streaming Endpoint.
     */
    readonly hostName?: pulumi.Input<string>;
    /**
     * The Azure Region where the Streaming Endpoint should exist. Changing this forces a new Streaming Endpoint to be created.
     */
    readonly location?: pulumi.Input<string>;
    /**
     * Max cache age in seconds.
     */
    readonly maxCacheAgeSeconds?: pulumi.Input<number>;
    /**
     * The Media Services account name. Changing this forces a new Streaming Endpoint to be created.
     */
    readonly mediaServicesAccountName?: pulumi.Input<string>;
    /**
     * The name which should be used for this Streaming Endpoint maximum length is 24. Changing this forces a new Streaming Endpoint to be created.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Streaming Endpoint should exist. Changing this forces a new Streaming Endpoint to be created.
     */
    readonly resourceGroupName?: pulumi.Input<string>;
    /**
     * The number of scale units.
     */
    readonly scaleUnits?: pulumi.Input<number>;
    /**
     * A mapping of tags which should be assigned to the Streaming Endpoint.
     */
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a StreamingEndpoint resource.
 */
export interface StreamingEndpointArgs {
    /**
     * A `accessControl` block as defined below.
     */
    readonly accessControl?: pulumi.Input<inputs.media.StreamingEndpointAccessControl>;
    /**
     * The flag indicates if the resource should be automatically started on creation.
     */
    readonly autoStartEnabled?: pulumi.Input<boolean>;
    /**
     * The CDN enabled flag.
     */
    readonly cdnEnabled?: pulumi.Input<boolean>;
    /**
     * The CDN profile name.
     */
    readonly cdnProfile?: pulumi.Input<string>;
    /**
     * The CDN provider name. Supported value are `StandardVerizon`,`PremiumVerizon` and `StandardAkamai`
     */
    readonly cdnProvider?: pulumi.Input<string>;
    /**
     * A `crossSiteAccessPolicy` block as defined below.
     */
    readonly crossSiteAccessPolicy?: pulumi.Input<inputs.media.StreamingEndpointCrossSiteAccessPolicy>;
    /**
     * The custom host names of the streaming endpoint.
     */
    readonly customHostNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The streaming endpoint description.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The Azure Region where the Streaming Endpoint should exist. Changing this forces a new Streaming Endpoint to be created.
     */
    readonly location?: pulumi.Input<string>;
    /**
     * Max cache age in seconds.
     */
    readonly maxCacheAgeSeconds?: pulumi.Input<number>;
    /**
     * The Media Services account name. Changing this forces a new Streaming Endpoint to be created.
     */
    readonly mediaServicesAccountName: pulumi.Input<string>;
    /**
     * The name which should be used for this Streaming Endpoint maximum length is 24. Changing this forces a new Streaming Endpoint to be created.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Streaming Endpoint should exist. Changing this forces a new Streaming Endpoint to be created.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * The number of scale units.
     */
    readonly scaleUnits: pulumi.Input<number>;
    /**
     * A mapping of tags which should be assigned to the Streaming Endpoint.
     */
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
