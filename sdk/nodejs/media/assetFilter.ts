// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Manages an Azure Media Asset Filter.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "GRS",
 * });
 * const exampleServiceAccount = new azure.media.ServiceAccount("exampleServiceAccount", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     storageAccounts: [{
 *         id: exampleAccount.id,
 *         isPrimary: true,
 *     }],
 * });
 * const exampleAsset = new azure.media.Asset("exampleAsset", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     mediaServicesAccountName: exampleServiceAccount.name,
 *     description: "Asset description",
 * });
 * const exampleAssetFilter = new azure.media.AssetFilter("exampleAssetFilter", {
 *     assetId: exampleAsset.id,
 *     firstQualityBitrate: 128000,
 *     presentationTimeRange: {
 *         startInUnits: 0,
 *         endInUnits: 15,
 *         presentationWindowInUnits: 90,
 *         liveBackoffInUnits: 0,
 *         unitTimescaleInMiliseconds: 1000,
 *         forceEnd: false,
 *     },
 *     trackSelections: [
 *         {
 *             conditions: [
 *                 {
 *                     property: "Type",
 *                     operation: "Equal",
 *                     value: "Audio",
 *                 },
 *                 {
 *                     property: "Language",
 *                     operation: "NotEqual",
 *                     value: "en",
 *                 },
 *                 {
 *                     property: "FourCC",
 *                     operation: "NotEqual",
 *                     value: "EC-3",
 *                 },
 *             ],
 *         },
 *         {
 *             conditions: [
 *                 {
 *                     property: "Type",
 *                     operation: "Equal",
 *                     value: "Video",
 *                 },
 *                 {
 *                     property: "Bitrate",
 *                     operation: "Equal",
 *                     value: "3000000-5000000",
 *                 },
 *             ],
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Asset Filters can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:media/assetFilter:AssetFilter example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaservices/account1/assets/asset1/assetFilters/filter1
 * ```
 */
export class AssetFilter extends pulumi.CustomResource {
    /**
     * Get an existing AssetFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AssetFilterState, opts?: pulumi.CustomResourceOptions): AssetFilter {
        return new AssetFilter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:media/assetFilter:AssetFilter';

    /**
     * Returns true if the given object is an instance of AssetFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AssetFilter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AssetFilter.__pulumiType;
    }

    /**
     * The Asset ID for which the Asset Filter should be created. Changing this forces a new Asset Filter to be created.
     */
    public readonly assetId!: pulumi.Output<string>;
    /**
     * The first quality bitrate. Sets the first video track to appear in the Live Streaming playlist to allow HLS native players to start downloading from this quality level at the beginning.
     */
    public readonly firstQualityBitrate!: pulumi.Output<number | undefined>;
    /**
     * The name which should be used for this Asset Filter. Changing this forces a new Asset Filter to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A `presentationTimeRange` block as defined below.
     */
    public readonly presentationTimeRange!: pulumi.Output<outputs.media.AssetFilterPresentationTimeRange | undefined>;
    /**
     * One or more `trackSelection` blocks as defined below.
     */
    public readonly trackSelections!: pulumi.Output<outputs.media.AssetFilterTrackSelection[] | undefined>;

    /**
     * Create a AssetFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AssetFilterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AssetFilterArgs | AssetFilterState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AssetFilterState | undefined;
            inputs["assetId"] = state ? state.assetId : undefined;
            inputs["firstQualityBitrate"] = state ? state.firstQualityBitrate : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["presentationTimeRange"] = state ? state.presentationTimeRange : undefined;
            inputs["trackSelections"] = state ? state.trackSelections : undefined;
        } else {
            const args = argsOrState as AssetFilterArgs | undefined;
            if ((!args || args.assetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'assetId'");
            }
            inputs["assetId"] = args ? args.assetId : undefined;
            inputs["firstQualityBitrate"] = args ? args.firstQualityBitrate : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["presentationTimeRange"] = args ? args.presentationTimeRange : undefined;
            inputs["trackSelections"] = args ? args.trackSelections : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(AssetFilter.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AssetFilter resources.
 */
export interface AssetFilterState {
    /**
     * The Asset ID for which the Asset Filter should be created. Changing this forces a new Asset Filter to be created.
     */
    assetId?: pulumi.Input<string>;
    /**
     * The first quality bitrate. Sets the first video track to appear in the Live Streaming playlist to allow HLS native players to start downloading from this quality level at the beginning.
     */
    firstQualityBitrate?: pulumi.Input<number>;
    /**
     * The name which should be used for this Asset Filter. Changing this forces a new Asset Filter to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A `presentationTimeRange` block as defined below.
     */
    presentationTimeRange?: pulumi.Input<inputs.media.AssetFilterPresentationTimeRange>;
    /**
     * One or more `trackSelection` blocks as defined below.
     */
    trackSelections?: pulumi.Input<pulumi.Input<inputs.media.AssetFilterTrackSelection>[]>;
}

/**
 * The set of arguments for constructing a AssetFilter resource.
 */
export interface AssetFilterArgs {
    /**
     * The Asset ID for which the Asset Filter should be created. Changing this forces a new Asset Filter to be created.
     */
    assetId: pulumi.Input<string>;
    /**
     * The first quality bitrate. Sets the first video track to appear in the Live Streaming playlist to allow HLS native players to start downloading from this quality level at the beginning.
     */
    firstQualityBitrate?: pulumi.Input<number>;
    /**
     * The name which should be used for this Asset Filter. Changing this forces a new Asset Filter to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A `presentationTimeRange` block as defined below.
     */
    presentationTimeRange?: pulumi.Input<inputs.media.AssetFilterPresentationTimeRange>;
    /**
     * One or more `trackSelection` blocks as defined below.
     */
    trackSelections?: pulumi.Input<pulumi.Input<inputs.media.AssetFilterTrackSelection>[]>;
}
