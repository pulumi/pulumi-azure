// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Media Asset.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "GRS",
 * });
 * const exampleServiceAccount = new azure.media.ServiceAccount("exampleServiceAccount", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     storageAccounts: [{
 *         id: exampleAccount.id,
 *         isPrimary: true,
 *     }],
 * });
 * const exampleAsset = new azure.media.Asset("exampleAsset", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     mediaServicesAccountName: exampleServiceAccount.name,
 *     description: "Asset description",
 * });
 * ```
 *
 * ## Import
 *
 * Media Assets can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:media/asset:Asset example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaservices/account1/assets/asset1
 * ```
 */
export class Asset extends pulumi.CustomResource {
    /**
     * Get an existing Asset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AssetState, opts?: pulumi.CustomResourceOptions): Asset {
        return new Asset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:media/asset:Asset';

    /**
     * Returns true if the given object is an instance of Asset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Asset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Asset.__pulumiType;
    }

    /**
     * The alternate ID of the Asset.
     */
    public readonly alternateId!: pulumi.Output<string | undefined>;
    /**
     * The name of the asset blob container. Changing this forces a new Media Asset to be created.
     */
    public readonly container!: pulumi.Output<string>;
    /**
     * The Asset description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of the Media Services Account. Changing this forces a new Media Asset to be created.
     */
    public readonly mediaServicesAccountName!: pulumi.Output<string>;
    /**
     * The name which should be used for this Media Asset. Changing this forces a new Media Asset to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the Resource Group where the Media Asset should exist. Changing this forces a new Media Asset to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * The name of the storage account where to store the media asset. Changing this forces a new Media Asset to be created.
     */
    public readonly storageAccountName!: pulumi.Output<string>;

    /**
     * Create a Asset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AssetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AssetArgs | AssetState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AssetState | undefined;
            inputs["alternateId"] = state ? state.alternateId : undefined;
            inputs["container"] = state ? state.container : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["mediaServicesAccountName"] = state ? state.mediaServicesAccountName : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["storageAccountName"] = state ? state.storageAccountName : undefined;
        } else {
            const args = argsOrState as AssetArgs | undefined;
            if ((!args || args.mediaServicesAccountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mediaServicesAccountName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["alternateId"] = args ? args.alternateId : undefined;
            inputs["container"] = args ? args.container : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["mediaServicesAccountName"] = args ? args.mediaServicesAccountName : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["storageAccountName"] = args ? args.storageAccountName : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Asset.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Asset resources.
 */
export interface AssetState {
    /**
     * The alternate ID of the Asset.
     */
    readonly alternateId?: pulumi.Input<string>;
    /**
     * The name of the asset blob container. Changing this forces a new Media Asset to be created.
     */
    readonly container?: pulumi.Input<string>;
    /**
     * The Asset description.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Specifies the name of the Media Services Account. Changing this forces a new Media Asset to be created.
     */
    readonly mediaServicesAccountName?: pulumi.Input<string>;
    /**
     * The name which should be used for this Media Asset. Changing this forces a new Media Asset to be created.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Media Asset should exist. Changing this forces a new Media Asset to be created.
     */
    readonly resourceGroupName?: pulumi.Input<string>;
    /**
     * The name of the storage account where to store the media asset. Changing this forces a new Media Asset to be created.
     */
    readonly storageAccountName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Asset resource.
 */
export interface AssetArgs {
    /**
     * The alternate ID of the Asset.
     */
    readonly alternateId?: pulumi.Input<string>;
    /**
     * The name of the asset blob container. Changing this forces a new Media Asset to be created.
     */
    readonly container?: pulumi.Input<string>;
    /**
     * The Asset description.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Specifies the name of the Media Services Account. Changing this forces a new Media Asset to be created.
     */
    readonly mediaServicesAccountName: pulumi.Input<string>;
    /**
     * The name which should be used for this Media Asset. Changing this forces a new Media Asset to be created.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Media Asset should exist. Changing this forces a new Media Asset to be created.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * The name of the storage account where to store the media asset. Changing this forces a new Media Asset to be created.
     */
    readonly storageAccountName?: pulumi.Input<string>;
}
