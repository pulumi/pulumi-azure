// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Transform.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "GRS",
 * });
 * const exampleServiceAccount = new azure.media.ServiceAccount("exampleServiceAccount", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     storageAccounts: [{
 *         id: exampleAccount.id,
 *         isPrimary: true,
 *     }],
 * });
 * const exampleTransform = new azure.media.Transform("exampleTransform", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     mediaServicesAccountName: exampleServiceAccount.name,
 *     description: "My transform description",
 *     outputs: [{
 *         relativePriority: "Normal",
 *         onErrorAction: "ContinueJob",
 *         builtinPreset: {
 *             presetName: "AACGoodQualityAudio",
 *         },
 *     }],
 * });
 * ```
 * ### With Multiple Outputs
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "GRS",
 * });
 * const exampleServiceAccount = new azure.media.ServiceAccount("exampleServiceAccount", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     storageAccounts: [{
 *         id: exampleAccount.id,
 *         isPrimary: true,
 *     }],
 * });
 * const exampleTransform = new azure.media.Transform("exampleTransform", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     mediaServicesAccountName: exampleServiceAccount.name,
 *     description: "My transform description",
 *     outputs: [
 *         {
 *             relativePriority: "Normal",
 *             onErrorAction: "ContinueJob",
 *             builtinPreset: {
 *                 presetName: "AACGoodQualityAudio",
 *                 presetConfiguration: {
 *                     complexity: "Balanced",
 *                     interleaveOutput: "NonInterleavedOutput",
 *                     keyFrameIntervalInSeconds: 123122.5,
 *                     maxBitrateBps: 300000,
 *                     maxHeight: 480,
 *                     maxLayers: 14,
 *                     minBitrateBps: 200000,
 *                     minHeight: 360,
 *                 },
 *             },
 *         },
 *         {
 *             relativePriority: "Low",
 *             onErrorAction: "ContinueJob",
 *             audioAnalyzerPreset: {
 *                 audioLanguage: "en-US",
 *                 audioAnalysisMode: "Basic",
 *                 experimentalOptions: {
 *                     env: "test",
 *                 },
 *             },
 *         },
 *         {
 *             relativePriority: "Low",
 *             onErrorAction: "StopProcessingJob",
 *             faceDetectorPreset: {
 *                 analysisResolution: "StandardDefinition",
 *                 blurType: "Med",
 *                 faceRedactorMode: "Combined",
 *                 experimentalOptions: {
 *                     env: "test",
 *                 },
 *             },
 *         },
 *         {
 *             relativePriority: "Normal",
 *             onErrorAction: "StopProcessingJob",
 *             videoAnalyzerPreset: {
 *                 audioLanguage: "en-US",
 *                 audioAnalysisMode: "Basic",
 *                 insightsType: "AllInsights",
 *                 experimentalOptions: {
 *                     env: "test",
 *                 },
 *             },
 *         },
 *         {
 *             relativePriority: "Low",
 *             onErrorAction: "ContinueJob",
 *             customPreset: {
 *                 codecs: [
 *                     {
 *                         aacAudio: {
 *                             bitrate: 128000,
 *                             channels: 2,
 *                             samplingRate: 48000,
 *                             profile: "AacLc",
 *                         },
 *                     },
 *                     {
 *                         copyAudio: {
 *                             label: "test",
 *                         },
 *                     },
 *                     {
 *                         copyVideo: {
 *                             label: "test",
 *                         },
 *                     },
 *                     {
 *                         h264Video: {
 *                             keyFrameInterval: "PT1S",
 *                             stretchMode: "AutoSize",
 *                             syncMode: "Auto",
 *                             sceneChangeDetectionEnabled: false,
 *                             rateControlMode: "ABR",
 *                             complexity: "Quality",
 *                             layers: [
 *                                 {
 *                                     width: "64",
 *                                     height: "64",
 *                                     bitrate: 1045000,
 *                                     maxBitrate: 1045000,
 *                                     bFrames: 3,
 *                                     slices: 0,
 *                                     adaptiveBFrameEnabled: true,
 *                                     profile: "Auto",
 *                                     level: "auto",
 *                                     bufferWindow: "PT5S",
 *                                     referenceFrames: 4,
 *                                     crf: 23,
 *                                     entropyMode: "Cabac",
 *                                 },
 *                                 {
 *                                     width: "64",
 *                                     height: "64",
 *                                     bitrate: 1000,
 *                                     maxBitrate: 1000,
 *                                     bFrames: 3,
 *                                     frameRate: "32",
 *                                     slices: 1,
 *                                     adaptiveBFrameEnabled: true,
 *                                     profile: "High444",
 *                                     level: "auto",
 *                                     bufferWindow: "PT5S",
 *                                     referenceFrames: 4,
 *                                     crf: 23,
 *                                     entropyMode: "Cavlc",
 *                                 },
 *                             ],
 *                         },
 *                     },
 *                     {
 *                         h265Video: {
 *                             keyFrameInterval: "PT2S",
 *                             stretchMode: "AutoSize",
 *                             syncMode: "Auto",
 *                             sceneChangeDetectionEnabled: false,
 *                             complexity: "Speed",
 *                             layers: [{
 *                                 width: "64",
 *                                 height: "64",
 *                                 bitrate: 1045000,
 *                                 maxBitrate: 1045000,
 *                                 bFrames: 3,
 *                                 slices: 5,
 *                                 adaptiveBFrameEnabled: true,
 *                                 profile: "Auto",
 *                                 label: "test",
 *                                 level: "auto",
 *                                 bufferWindow: "PT5S",
 *                                 frameRate: "32",
 *                                 referenceFrames: 4,
 *                                 crf: 23,
 *                             }],
 *                         },
 *                     },
 *                     {
 *                         jpgImage: {
 *                             stretchMode: "AutoSize",
 *                             syncMode: "Auto",
 *                             start: "10",
 *                             range: "100%%",
 *                             spriteColumn: 1,
 *                             step: "10",
 *                             layers: [{
 *                                 quality: 70,
 *                                 height: "180",
 *                                 label: "test",
 *                                 width: "120",
 *                             }],
 *                         },
 *                     },
 *                     {
 *                         pngImage: {
 *                             stretchMode: "AutoSize",
 *                             syncMode: "Auto",
 *                             start: "{Best}",
 *                             range: "80",
 *                             step: "10",
 *                             layers: [{
 *                                 height: "180",
 *                                 label: "test",
 *                                 width: "120",
 *                             }],
 *                         },
 *                     },
 *                 ],
 *                 formats: [
 *                     {
 *                         jpg: {
 *                             filenamePattern: "test{Basename}",
 *                         },
 *                     },
 *                     {
 *                         mp4: {
 *                             filenamePattern: "test{Bitrate}",
 *                             outputFiles: [{
 *                                 labels: [
 *                                     "test",
 *                                     "ppe",
 *                                 ],
 *                             }],
 *                         },
 *                     },
 *                     {
 *                         png: {
 *                             filenamePattern: "test{Basename}",
 *                         },
 *                     },
 *                     {
 *                         transportStream: {
 *                             filenamePattern: "test{Bitrate}",
 *                             outputFiles: [{
 *                                 labels: ["prod"],
 *                             }],
 *                         },
 *                     },
 *                 ],
 *                 filter: {
 *                     cropRectangle: {
 *                         height: "240",
 *                         left: "30",
 *                         top: "360",
 *                         width: "70",
 *                     },
 *                     deinterlace: {
 *                         parity: "TopFieldFirst",
 *                         mode: "AutoPixelAdaptive",
 *                     },
 *                     fadeIn: {
 *                         duration: "PT5S",
 *                         fadeColor: "0xFF0000",
 *                         start: "10",
 *                     },
 *                     fadeOut: {
 *                         duration: "90%%",
 *                         fadeColor: "#FF0C7B",
 *                         start: "10%%",
 *                     },
 *                     rotation: "Auto",
 *                     overlays: [
 *                         {
 *                             audio: {
 *                                 inputLabel: "label.jpg",
 *                                 start: "PT5S",
 *                                 end: "PT30S",
 *                                 fadeInDuration: "PT1S",
 *                                 fadeOutDuration: "PT2S",
 *                                 audioGainLevel: 1,
 *                             },
 *                         },
 *                         {
 *                             video: {
 *                                 inputLabel: "label.jpg",
 *                                 start: "PT5S",
 *                                 end: "PT30S",
 *                                 fadeInDuration: "PT1S",
 *                                 fadeOutDuration: "PT2S",
 *                                 audioGainLevel: 1,
 *                                 opacity: 1,
 *                                 position: {
 *                                     height: "180",
 *                                     left: "20",
 *                                     top: "240",
 *                                     width: "140",
 *                                 },
 *                                 cropRectangle: {
 *                                     height: "240",
 *                                     left: "30",
 *                                     top: "360",
 *                                     width: "70",
 *                                 },
 *                             },
 *                         },
 *                     ],
 *                 },
 *             },
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Transforms can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:media/transform:Transform example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaServices/media1/transforms/transform1
 * ```
 */
export class Transform extends pulumi.CustomResource {
    /**
     * Get an existing Transform resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TransformState, opts?: pulumi.CustomResourceOptions): Transform {
        return new Transform(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:media/transform:Transform';

    /**
     * Returns true if the given object is an instance of Transform.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Transform {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Transform.__pulumiType;
    }

    /**
     * An optional verbose description of the Transform.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The Media Services account name. Changing this forces a new Transform to be created.
     */
    public readonly mediaServicesAccountName!: pulumi.Output<string>;
    /**
     * The name which should be used for this Transform. Changing this forces a new Transform to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * One or more `output` blocks as defined below. At least one `output` must be defined.
     */
    public readonly outputs!: pulumi.Output<outputs.media.TransformOutput[] | undefined>;
    /**
     * The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;

    /**
     * Create a Transform resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TransformArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TransformArgs | TransformState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TransformState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["mediaServicesAccountName"] = state ? state.mediaServicesAccountName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outputs"] = state ? state.outputs : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
        } else {
            const args = argsOrState as TransformArgs | undefined;
            if ((!args || args.mediaServicesAccountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mediaServicesAccountName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["mediaServicesAccountName"] = args ? args.mediaServicesAccountName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["outputs"] = args ? args.outputs : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Transform.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Transform resources.
 */
export interface TransformState {
    /**
     * An optional verbose description of the Transform.
     */
    description?: pulumi.Input<string>;
    /**
     * The Media Services account name. Changing this forces a new Transform to be created.
     */
    mediaServicesAccountName?: pulumi.Input<string>;
    /**
     * The name which should be used for this Transform. Changing this forces a new Transform to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * One or more `output` blocks as defined below. At least one `output` must be defined.
     */
    outputs?: pulumi.Input<pulumi.Input<inputs.media.TransformOutput>[]>;
    /**
     * The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Transform resource.
 */
export interface TransformArgs {
    /**
     * An optional verbose description of the Transform.
     */
    description?: pulumi.Input<string>;
    /**
     * The Media Services account name. Changing this forces a new Transform to be created.
     */
    mediaServicesAccountName: pulumi.Input<string>;
    /**
     * The name which should be used for this Transform. Changing this forces a new Transform to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * One or more `output` blocks as defined below. At least one `output` must be defined.
     */
    outputs?: pulumi.Input<pulumi.Input<inputs.media.TransformOutput>[]>;
    /**
     * The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
     */
    resourceGroupName: pulumi.Input<string>;
}
