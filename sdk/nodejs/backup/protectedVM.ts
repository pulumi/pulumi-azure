// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an Azure Backup Protected Virtual Machine.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("example", {
 *     name: "tfex-recovery_vault",
 *     location: "West Europe",
 * });
 * const exampleVault = new azure.recoveryservices.Vault("example", {
 *     name: "tfex-recovery-vault",
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     sku: "Standard",
 * });
 * const examplePolicyVM = new azure.backup.PolicyVM("example", {
 *     name: "tfex-recovery-vault-policy",
 *     resourceGroupName: exampleResourceGroup.name,
 *     recoveryVaultName: exampleVault.name,
 *     backup: {
 *         frequency: "Daily",
 *         time: "23:00",
 *     },
 *     retentionDaily: {
 *         count: 10,
 *     },
 * });
 * const example = azure.compute.getVirtualMachineOutput({
 *     name: "example-vm",
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * const vm1 = new azure.backup.ProtectedVM("vm1", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     recoveryVaultName: exampleVault.name,
 *     sourceVmId: example.apply(example => example.id),
 *     backupPolicyId: examplePolicyVM.id,
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.RecoveryServices` - 2024-01-01
 *
 * ## Import
 *
 * Backup Protected Virtual Machines can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:backup/protectedVM:ProtectedVM item1 "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.RecoveryServices/vaults/example-recovery-vault/backupFabrics/Azure/protectionContainers/iaasvmcontainer;iaasvmcontainerv2;group1;vm1/protectedItems/vm;iaasvmcontainerv2;group1;vm1"
 * ```
 */
export class ProtectedVM extends pulumi.CustomResource {
    /**
     * Get an existing ProtectedVM resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProtectedVMState, opts?: pulumi.CustomResourceOptions): ProtectedVM {
        return new ProtectedVM(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:backup/protectedVM:ProtectedVM';

    /**
     * Returns true if the given object is an instance of ProtectedVM.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProtectedVM {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProtectedVM.__pulumiType;
    }

    declare public readonly backupPolicyId: pulumi.Output<string | undefined>;
    /**
     * A list of Disks' Logical Unit Numbers (LUN) to be excluded for VM Protection.
     */
    declare public readonly excludeDiskLuns: pulumi.Output<number[] | undefined>;
    /**
     * A list of Disks' Logical Unit Numbers (LUN) to be included for VM Protection.
     */
    declare public readonly includeDiskLuns: pulumi.Output<number[] | undefined>;
    /**
     * Specifies Protection state of the backup. Possible values are `Protected`, `BackupsSuspended`, and `ProtectionStopped`.
     *
     * > **Note:** `protectionState` cannot be set to `BackupsSuspended` unless the `azure.recoveryservices.Vault` has `immutability` set to `Unlocked` or `Locked`.
     */
    declare public readonly protectionState: pulumi.Output<string>;
    /**
     * Specifies the name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
     */
    declare public readonly recoveryVaultName: pulumi.Output<string>;
    /**
     * Specifies the name of the Resource Group **associated with** the Recovery Services Vault to use. Changing this forces a new resource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * Specifies the ID of the virtual machine to back up. Changing this forces a new resource to be created.
     *
     * > **Note:** After creation, the `sourceVmId` property can be removed without forcing a new resource to be created; however, setting it to a different ID will create a new resource. This allows the source virtual machine to be deleted without having to remove the backup.
     */
    declare public readonly sourceVmId: pulumi.Output<string>;

    /**
     * Create a ProtectedVM resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProtectedVMArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProtectedVMArgs | ProtectedVMState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProtectedVMState | undefined;
            resourceInputs["backupPolicyId"] = state?.backupPolicyId;
            resourceInputs["excludeDiskLuns"] = state?.excludeDiskLuns;
            resourceInputs["includeDiskLuns"] = state?.includeDiskLuns;
            resourceInputs["protectionState"] = state?.protectionState;
            resourceInputs["recoveryVaultName"] = state?.recoveryVaultName;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["sourceVmId"] = state?.sourceVmId;
        } else {
            const args = argsOrState as ProtectedVMArgs | undefined;
            if (args?.recoveryVaultName === undefined && !opts.urn) {
                throw new Error("Missing required property 'recoveryVaultName'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["backupPolicyId"] = args?.backupPolicyId;
            resourceInputs["excludeDiskLuns"] = args?.excludeDiskLuns;
            resourceInputs["includeDiskLuns"] = args?.includeDiskLuns;
            resourceInputs["protectionState"] = args?.protectionState;
            resourceInputs["recoveryVaultName"] = args?.recoveryVaultName;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["sourceVmId"] = args?.sourceVmId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProtectedVM.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProtectedVM resources.
 */
export interface ProtectedVMState {
    backupPolicyId?: pulumi.Input<string>;
    /**
     * A list of Disks' Logical Unit Numbers (LUN) to be excluded for VM Protection.
     */
    excludeDiskLuns?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A list of Disks' Logical Unit Numbers (LUN) to be included for VM Protection.
     */
    includeDiskLuns?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Specifies Protection state of the backup. Possible values are `Protected`, `BackupsSuspended`, and `ProtectionStopped`.
     *
     * > **Note:** `protectionState` cannot be set to `BackupsSuspended` unless the `azure.recoveryservices.Vault` has `immutability` set to `Unlocked` or `Locked`.
     */
    protectionState?: pulumi.Input<string>;
    /**
     * Specifies the name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
     */
    recoveryVaultName?: pulumi.Input<string>;
    /**
     * Specifies the name of the Resource Group **associated with** the Recovery Services Vault to use. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * Specifies the ID of the virtual machine to back up. Changing this forces a new resource to be created.
     *
     * > **Note:** After creation, the `sourceVmId` property can be removed without forcing a new resource to be created; however, setting it to a different ID will create a new resource. This allows the source virtual machine to be deleted without having to remove the backup.
     */
    sourceVmId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProtectedVM resource.
 */
export interface ProtectedVMArgs {
    backupPolicyId?: pulumi.Input<string>;
    /**
     * A list of Disks' Logical Unit Numbers (LUN) to be excluded for VM Protection.
     */
    excludeDiskLuns?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A list of Disks' Logical Unit Numbers (LUN) to be included for VM Protection.
     */
    includeDiskLuns?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Specifies Protection state of the backup. Possible values are `Protected`, `BackupsSuspended`, and `ProtectionStopped`.
     *
     * > **Note:** `protectionState` cannot be set to `BackupsSuspended` unless the `azure.recoveryservices.Vault` has `immutability` set to `Unlocked` or `Locked`.
     */
    protectionState?: pulumi.Input<string>;
    /**
     * Specifies the name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
     */
    recoveryVaultName: pulumi.Input<string>;
    /**
     * Specifies the name of the Resource Group **associated with** the Recovery Services Vault to use. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Specifies the ID of the virtual machine to back up. Changing this forces a new resource to be created.
     *
     * > **Note:** After creation, the `sourceVmId` property can be removed without forcing a new resource to be created; however, setting it to a different ID will create a new resource. This allows the source virtual machine to be deleted without having to remove the backup.
     */
    sourceVmId?: pulumi.Input<string>;
}
