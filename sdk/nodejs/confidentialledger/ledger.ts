// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Confidential Ledger.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {location: "West Europe"});
 * const ledger = new azure.confidentialledger.Ledger("ledger", {
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     ledgerType: "Private",
 *     azureadBasedServicePrincipals: [{
 *         principalId: current.then(current => current.objectId),
 *         tenantId: current.then(current => current.tenantId),
 *         ledgerRoleName: "Administrator",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Confidential Ledgers can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:confidentialledger/ledger:Ledger example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/example-group/providers/Microsoft.ConfidentialLedger/ledgers/example-ledger
 * ```
 */
export class Ledger extends pulumi.CustomResource {
    /**
     * Get an existing Ledger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LedgerState, opts?: pulumi.CustomResourceOptions): Ledger {
        return new Ledger(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:confidentialledger/ledger:Ledger';

    /**
     * Returns true if the given object is an instance of Ledger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ledger {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ledger.__pulumiType;
    }

    public readonly azureadBasedServicePrincipals!: pulumi.Output<outputs.confidentialledger.LedgerAzureadBasedServicePrincipal[]>;
    public readonly certificateBasedSecurityPrincipals!: pulumi.Output<outputs.confidentialledger.LedgerCertificateBasedSecurityPrincipal[] | undefined>;
    /**
     * The Identity Service Endpoint for this Confidential Ledger.
     */
    public /*out*/ readonly identityServiceEndpoint!: pulumi.Output<string>;
    /**
     * The Endpoint for this Confidential Ledger.
     */
    public /*out*/ readonly ledgerEndpoint!: pulumi.Output<string>;
    /**
     * Specifies the type of Confidential Ledger. Possible values are `Private` and `Public`. Changing this forces a new resource to be created.
     */
    public readonly ledgerType!: pulumi.Output<string>;
    /**
     * Specifies the supported Azure location where the Confidential Ledger exists. Changing this forces a new resource to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Specifies the name of the Confidential Ledger. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the Resource Group where the Confidential Ledger exists. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the Confidential Ledger.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Ledger resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LedgerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LedgerArgs | LedgerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LedgerState | undefined;
            resourceInputs["azureadBasedServicePrincipals"] = state ? state.azureadBasedServicePrincipals : undefined;
            resourceInputs["certificateBasedSecurityPrincipals"] = state ? state.certificateBasedSecurityPrincipals : undefined;
            resourceInputs["identityServiceEndpoint"] = state ? state.identityServiceEndpoint : undefined;
            resourceInputs["ledgerEndpoint"] = state ? state.ledgerEndpoint : undefined;
            resourceInputs["ledgerType"] = state ? state.ledgerType : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as LedgerArgs | undefined;
            if ((!args || args.azureadBasedServicePrincipals === undefined) && !opts.urn) {
                throw new Error("Missing required property 'azureadBasedServicePrincipals'");
            }
            if ((!args || args.ledgerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ledgerType'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["azureadBasedServicePrincipals"] = args ? args.azureadBasedServicePrincipals : undefined;
            resourceInputs["certificateBasedSecurityPrincipals"] = args ? args.certificateBasedSecurityPrincipals : undefined;
            resourceInputs["ledgerType"] = args ? args.ledgerType : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["identityServiceEndpoint"] = undefined /*out*/;
            resourceInputs["ledgerEndpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ledger.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Ledger resources.
 */
export interface LedgerState {
    azureadBasedServicePrincipals?: pulumi.Input<pulumi.Input<inputs.confidentialledger.LedgerAzureadBasedServicePrincipal>[]>;
    certificateBasedSecurityPrincipals?: pulumi.Input<pulumi.Input<inputs.confidentialledger.LedgerCertificateBasedSecurityPrincipal>[]>;
    /**
     * The Identity Service Endpoint for this Confidential Ledger.
     */
    identityServiceEndpoint?: pulumi.Input<string>;
    /**
     * The Endpoint for this Confidential Ledger.
     */
    ledgerEndpoint?: pulumi.Input<string>;
    /**
     * Specifies the type of Confidential Ledger. Possible values are `Private` and `Public`. Changing this forces a new resource to be created.
     */
    ledgerType?: pulumi.Input<string>;
    /**
     * Specifies the supported Azure location where the Confidential Ledger exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of the Confidential Ledger. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Confidential Ledger exists. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the Confidential Ledger.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Ledger resource.
 */
export interface LedgerArgs {
    azureadBasedServicePrincipals: pulumi.Input<pulumi.Input<inputs.confidentialledger.LedgerAzureadBasedServicePrincipal>[]>;
    certificateBasedSecurityPrincipals?: pulumi.Input<pulumi.Input<inputs.confidentialledger.LedgerCertificateBasedSecurityPrincipal>[]>;
    /**
     * Specifies the type of Confidential Ledger. Possible values are `Private` and `Public`. Changing this forces a new resource to be created.
     */
    ledgerType: pulumi.Input<string>;
    /**
     * Specifies the supported Azure location where the Confidential Ledger exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of the Confidential Ledger. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Confidential Ledger exists. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the Confidential Ledger.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
