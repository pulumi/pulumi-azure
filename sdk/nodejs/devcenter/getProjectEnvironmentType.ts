// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to access information about an existing Dev Center Project Environment Type.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.devcenter.getProjectEnvironmentType({
 *     name: exampleAzurermDevCenterProjectEnvironmentType.name,
 *     devCenterProjectId: exampleAzurermDevCenterProjectEnvironmentType.devCenterProjectId,
 * });
 * export const id = example.then(example => example.id);
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This data source uses the following Azure API Providers:
 *
 * * `Microsoft.DevCenter`: 2025-02-01
 */
export function getProjectEnvironmentType(args: GetProjectEnvironmentTypeArgs, opts?: pulumi.InvokeOptions): Promise<GetProjectEnvironmentTypeResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure:devcenter/getProjectEnvironmentType:getProjectEnvironmentType", {
        "devCenterProjectId": args.devCenterProjectId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getProjectEnvironmentType.
 */
export interface GetProjectEnvironmentTypeArgs {
    /**
     * The ID of the associated Dev Center Project.
     */
    devCenterProjectId: string;
    /**
     * The name of this Dev Center Project Environment Type.
     */
    name: string;
}

/**
 * A collection of values returned by getProjectEnvironmentType.
 */
export interface GetProjectEnvironmentTypeResult {
    /**
     * A list of roles assigned to the environment creator.
     */
    readonly creatorRoleAssignmentRoles: string[];
    /**
     * The ID of the subscription that the Environment Type is mapped to.
     */
    readonly deploymentTargetId: string;
    readonly devCenterProjectId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * An `identity` block as defined below.
     */
    readonly identities: outputs.devcenter.GetProjectEnvironmentTypeIdentity[];
    /**
     * The Azure Region where the Dev Center Project Environment Type exists.
     */
    readonly location: string;
    readonly name: string;
    /**
     * A mapping of tags assigned to the Dev Center Project Environment Type.
     */
    readonly tags: {[key: string]: string};
    /**
     * A `userRoleAssignment` block as defined below.
     */
    readonly userRoleAssignments: outputs.devcenter.GetProjectEnvironmentTypeUserRoleAssignment[];
}
/**
 * Use this data source to access information about an existing Dev Center Project Environment Type.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.devcenter.getProjectEnvironmentType({
 *     name: exampleAzurermDevCenterProjectEnvironmentType.name,
 *     devCenterProjectId: exampleAzurermDevCenterProjectEnvironmentType.devCenterProjectId,
 * });
 * export const id = example.then(example => example.id);
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This data source uses the following Azure API Providers:
 *
 * * `Microsoft.DevCenter`: 2025-02-01
 */
export function getProjectEnvironmentTypeOutput(args: GetProjectEnvironmentTypeOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetProjectEnvironmentTypeResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("azure:devcenter/getProjectEnvironmentType:getProjectEnvironmentType", {
        "devCenterProjectId": args.devCenterProjectId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getProjectEnvironmentType.
 */
export interface GetProjectEnvironmentTypeOutputArgs {
    /**
     * The ID of the associated Dev Center Project.
     */
    devCenterProjectId: pulumi.Input<string>;
    /**
     * The name of this Dev Center Project Environment Type.
     */
    name: pulumi.Input<string>;
}
