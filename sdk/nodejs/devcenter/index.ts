// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AttachedNetworkArgs, AttachedNetworkState } from "./attachedNetwork";
export type AttachedNetwork = import("./attachedNetwork").AttachedNetwork;
export const AttachedNetwork: typeof import("./attachedNetwork").AttachedNetwork = null as any;
utilities.lazyLoad(exports, ["AttachedNetwork"], () => require("./attachedNetwork"));

export { CatalogArgs, CatalogState } from "./catalog";
export type Catalog = import("./catalog").Catalog;
export const Catalog: typeof import("./catalog").Catalog = null as any;
utilities.lazyLoad(exports, ["Catalog"], () => require("./catalog"));

export { DevBoxDefinitionArgs, DevBoxDefinitionState } from "./devBoxDefinition";
export type DevBoxDefinition = import("./devBoxDefinition").DevBoxDefinition;
export const DevBoxDefinition: typeof import("./devBoxDefinition").DevBoxDefinition = null as any;
utilities.lazyLoad(exports, ["DevBoxDefinition"], () => require("./devBoxDefinition"));

export { DevCenterArgs, DevCenterState } from "./devCenter";
export type DevCenter = import("./devCenter").DevCenter;
export const DevCenter: typeof import("./devCenter").DevCenter = null as any;
utilities.lazyLoad(exports, ["DevCenter"], () => require("./devCenter"));

export { EnvironmentTypeArgs, EnvironmentTypeState } from "./environmentType";
export type EnvironmentType = import("./environmentType").EnvironmentType;
export const EnvironmentType: typeof import("./environmentType").EnvironmentType = null as any;
utilities.lazyLoad(exports, ["EnvironmentType"], () => require("./environmentType"));

export { GalleryArgs, GalleryState } from "./gallery";
export type Gallery = import("./gallery").Gallery;
export const Gallery: typeof import("./gallery").Gallery = null as any;
utilities.lazyLoad(exports, ["Gallery"], () => require("./gallery"));

export { GetArgs, GetResult, GetOutputArgs } from "./get";
export const get: typeof import("./get").get = null as any;
export const getOutput: typeof import("./get").getOutput = null as any;
utilities.lazyLoad(exports, ["get","getOutput"], () => require("./get"));

export { GetAttachedNetworkArgs, GetAttachedNetworkResult, GetAttachedNetworkOutputArgs } from "./getAttachedNetwork";
export const getAttachedNetwork: typeof import("./getAttachedNetwork").getAttachedNetwork = null as any;
export const getAttachedNetworkOutput: typeof import("./getAttachedNetwork").getAttachedNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getAttachedNetwork","getAttachedNetworkOutput"], () => require("./getAttachedNetwork"));

export { GetCatalogArgs, GetCatalogResult, GetCatalogOutputArgs } from "./getCatalog";
export const getCatalog: typeof import("./getCatalog").getCatalog = null as any;
export const getCatalogOutput: typeof import("./getCatalog").getCatalogOutput = null as any;
utilities.lazyLoad(exports, ["getCatalog","getCatalogOutput"], () => require("./getCatalog"));

export { GetDevBoxDefinitionArgs, GetDevBoxDefinitionResult, GetDevBoxDefinitionOutputArgs } from "./getDevBoxDefinition";
export const getDevBoxDefinition: typeof import("./getDevBoxDefinition").getDevBoxDefinition = null as any;
export const getDevBoxDefinitionOutput: typeof import("./getDevBoxDefinition").getDevBoxDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getDevBoxDefinition","getDevBoxDefinitionOutput"], () => require("./getDevBoxDefinition"));

export { GetEnvironmentTypeArgs, GetEnvironmentTypeResult, GetEnvironmentTypeOutputArgs } from "./getEnvironmentType";
export const getEnvironmentType: typeof import("./getEnvironmentType").getEnvironmentType = null as any;
export const getEnvironmentTypeOutput: typeof import("./getEnvironmentType").getEnvironmentTypeOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironmentType","getEnvironmentTypeOutput"], () => require("./getEnvironmentType"));

export { GetGalleryArgs, GetGalleryResult, GetGalleryOutputArgs } from "./getGallery";
export const getGallery: typeof import("./getGallery").getGallery = null as any;
export const getGalleryOutput: typeof import("./getGallery").getGalleryOutput = null as any;
utilities.lazyLoad(exports, ["getGallery","getGalleryOutput"], () => require("./getGallery"));

export { GetNetworkConnectionArgs, GetNetworkConnectionResult, GetNetworkConnectionOutputArgs } from "./getNetworkConnection";
export const getNetworkConnection: typeof import("./getNetworkConnection").getNetworkConnection = null as any;
export const getNetworkConnectionOutput: typeof import("./getNetworkConnection").getNetworkConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkConnection","getNetworkConnectionOutput"], () => require("./getNetworkConnection"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetProjectEnvironmentTypeArgs, GetProjectEnvironmentTypeResult, GetProjectEnvironmentTypeOutputArgs } from "./getProjectEnvironmentType";
export const getProjectEnvironmentType: typeof import("./getProjectEnvironmentType").getProjectEnvironmentType = null as any;
export const getProjectEnvironmentTypeOutput: typeof import("./getProjectEnvironmentType").getProjectEnvironmentTypeOutput = null as any;
utilities.lazyLoad(exports, ["getProjectEnvironmentType","getProjectEnvironmentTypeOutput"], () => require("./getProjectEnvironmentType"));

export { GetProjectPoolArgs, GetProjectPoolResult, GetProjectPoolOutputArgs } from "./getProjectPool";
export const getProjectPool: typeof import("./getProjectPool").getProjectPool = null as any;
export const getProjectPoolOutput: typeof import("./getProjectPool").getProjectPoolOutput = null as any;
utilities.lazyLoad(exports, ["getProjectPool","getProjectPoolOutput"], () => require("./getProjectPool"));

export { NetworkConnectionArgs, NetworkConnectionState } from "./networkConnection";
export type NetworkConnection = import("./networkConnection").NetworkConnection;
export const NetworkConnection: typeof import("./networkConnection").NetworkConnection = null as any;
utilities.lazyLoad(exports, ["NetworkConnection"], () => require("./networkConnection"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectEnvironmentTypeArgs, ProjectEnvironmentTypeState } from "./projectEnvironmentType";
export type ProjectEnvironmentType = import("./projectEnvironmentType").ProjectEnvironmentType;
export const ProjectEnvironmentType: typeof import("./projectEnvironmentType").ProjectEnvironmentType = null as any;
utilities.lazyLoad(exports, ["ProjectEnvironmentType"], () => require("./projectEnvironmentType"));

export { ProjectPoolArgs, ProjectPoolState } from "./projectPool";
export type ProjectPool = import("./projectPool").ProjectPool;
export const ProjectPool: typeof import("./projectPool").ProjectPool = null as any;
utilities.lazyLoad(exports, ["ProjectPool"], () => require("./projectPool"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:devcenter/attachedNetwork:AttachedNetwork":
                return new AttachedNetwork(name, <any>undefined, { urn })
            case "azure:devcenter/catalog:Catalog":
                return new Catalog(name, <any>undefined, { urn })
            case "azure:devcenter/devBoxDefinition:DevBoxDefinition":
                return new DevBoxDefinition(name, <any>undefined, { urn })
            case "azure:devcenter/devCenter:DevCenter":
                return new DevCenter(name, <any>undefined, { urn })
            case "azure:devcenter/environmentType:EnvironmentType":
                return new EnvironmentType(name, <any>undefined, { urn })
            case "azure:devcenter/gallery:Gallery":
                return new Gallery(name, <any>undefined, { urn })
            case "azure:devcenter/networkConnection:NetworkConnection":
                return new NetworkConnection(name, <any>undefined, { urn })
            case "azure:devcenter/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "azure:devcenter/projectEnvironmentType:ProjectEnvironmentType":
                return new ProjectEnvironmentType(name, <any>undefined, { urn })
            case "azure:devcenter/projectPool:ProjectPool":
                return new ProjectPool(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "devcenter/attachedNetwork", _module)
pulumi.runtime.registerResourceModule("azure", "devcenter/catalog", _module)
pulumi.runtime.registerResourceModule("azure", "devcenter/devBoxDefinition", _module)
pulumi.runtime.registerResourceModule("azure", "devcenter/devCenter", _module)
pulumi.runtime.registerResourceModule("azure", "devcenter/environmentType", _module)
pulumi.runtime.registerResourceModule("azure", "devcenter/gallery", _module)
pulumi.runtime.registerResourceModule("azure", "devcenter/networkConnection", _module)
pulumi.runtime.registerResourceModule("azure", "devcenter/project", _module)
pulumi.runtime.registerResourceModule("azure", "devcenter/projectEnvironmentType", _module)
pulumi.runtime.registerResourceModule("azure", "devcenter/projectPool", _module)
