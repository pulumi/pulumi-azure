// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * <!-- Note: This documentation is generated. Any manual changes will be overwritten -->
 *
 * Manages a Dev Center Project.
 *
 * ## Import
 *
 * An existing Dev Center Project can be imported into Terraform using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:devcenter/project:Project example /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}
 * ```
 *
 *  * Where `{subscriptionId}` is the ID of the Azure Subscription where the Dev Center Project exists. For example `12345678-1234-9876-4563-123456789012`. * Where `{resourceGroupName}` is the name of Resource Group where this Dev Center Project exists. For example `example-resource-group`. * Where `{projectName}` is the name of the Project. For example `projectValue`.
 */
export class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectState, opts?: pulumi.CustomResourceOptions): Project {
        return new Project(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:devcenter/project:Project';

    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Project {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }

    /**
     * Description of the project. Changing this forces a new Dev Center Project to be created.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Resource Id of an associated DevCenter. Changing this forces a new Dev Center Project to be created.
     */
    public readonly devCenterId!: pulumi.Output<string>;
    /**
     * The URI of the Dev Center resource this project is associated with.
     */
    public /*out*/ readonly devCenterUri!: pulumi.Output<string>;
    /**
     * The Azure Region where the Dev Center Project should exist. Changing this forces a new Dev Center Project to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * When specified, limits the maximum number of Dev Boxes a single user can create across all pools in the project.
     */
    public readonly maximumDevBoxesPerUser!: pulumi.Output<number | undefined>;
    /**
     * Specifies the name of this Dev Center Project. Changing this forces a new Dev Center Project to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the name of the Resource Group within which this Dev Center Project should exist. Changing this forces a new Dev Center Project to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * A mapping of tags which should be assigned to the Dev Center Project.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectArgs | ProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["devCenterId"] = state ? state.devCenterId : undefined;
            resourceInputs["devCenterUri"] = state ? state.devCenterUri : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["maximumDevBoxesPerUser"] = state ? state.maximumDevBoxesPerUser : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ProjectArgs | undefined;
            if ((!args || args.devCenterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'devCenterId'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["devCenterId"] = args ? args.devCenterId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["maximumDevBoxesPerUser"] = args ? args.maximumDevBoxesPerUser : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["devCenterUri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Project.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Project resources.
 */
export interface ProjectState {
    /**
     * Description of the project. Changing this forces a new Dev Center Project to be created.
     */
    description?: pulumi.Input<string>;
    /**
     * Resource Id of an associated DevCenter. Changing this forces a new Dev Center Project to be created.
     */
    devCenterId?: pulumi.Input<string>;
    /**
     * The URI of the Dev Center resource this project is associated with.
     */
    devCenterUri?: pulumi.Input<string>;
    /**
     * The Azure Region where the Dev Center Project should exist. Changing this forces a new Dev Center Project to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * When specified, limits the maximum number of Dev Boxes a single user can create across all pools in the project.
     */
    maximumDevBoxesPerUser?: pulumi.Input<number>;
    /**
     * Specifies the name of this Dev Center Project. Changing this forces a new Dev Center Project to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the name of the Resource Group within which this Dev Center Project should exist. Changing this forces a new Dev Center Project to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Dev Center Project.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    /**
     * Description of the project. Changing this forces a new Dev Center Project to be created.
     */
    description?: pulumi.Input<string>;
    /**
     * Resource Id of an associated DevCenter. Changing this forces a new Dev Center Project to be created.
     */
    devCenterId: pulumi.Input<string>;
    /**
     * The Azure Region where the Dev Center Project should exist. Changing this forces a new Dev Center Project to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * When specified, limits the maximum number of Dev Boxes a single user can create across all pools in the project.
     */
    maximumDevBoxesPerUser?: pulumi.Input<number>;
    /**
     * Specifies the name of this Dev Center Project. Changing this forces a new Dev Center Project to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the name of the Resource Group within which this Dev Center Project should exist. Changing this forces a new Dev Center Project to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Dev Center Project.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
