// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Dev Center Catalog.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleDevCenter = new azure.devcenter.DevCenter("example", {
 *     location: example.location,
 *     name: "example",
 *     resourceGroupName: example.name,
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * const exampleCatalog = new azure.devcenter.Catalog("example", {
 *     name: "example",
 *     resourceGroupName: testAzurermResourceGroup.name,
 *     devCenterId: test.id,
 *     catalogGithub: {
 *         branch: "foo",
 *         path: "",
 *         uri: "example URI",
 *         keyVaultKeyUrl: "secret",
 *     },
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.DevCenter` - 2025-02-01
 *
 * ## Import
 *
 * An existing Dev Center Catalog can be imported into Pulumi using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:devcenter/catalog:Catalog example /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devCenters/{devCenterName}/catalogs/{catalogName}
 * ```
 *
 * * Where `{subscriptionId}` is the ID of the Azure Subscription where the Dev Center exists. For example `12345678-1234-9876-4563-123456789012`.
 *
 * * Where `{resourceGroupName}` is the name of Resource Group where this Dev Center exists. For example `example-resource-group`.
 *
 * * Where `{devCenterName}` is the name of the Dev Center. For example `devCenterValue`.
 *
 * * Where `{catalogName}` is the name of the Dev Center Catalog. For example `catalogValue`.
 */
export class Catalog extends pulumi.CustomResource {
    /**
     * Get an existing Catalog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CatalogState, opts?: pulumi.CustomResourceOptions): Catalog {
        return new Catalog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:devcenter/catalog:Catalog';

    /**
     * Returns true if the given object is an instance of Catalog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Catalog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Catalog.__pulumiType;
    }

    /**
     * A `catalogAdogit` block as defined below.
     */
    declare public readonly catalogAdogit: pulumi.Output<outputs.devcenter.CatalogCatalogAdogit | undefined>;
    /**
     * A `catalogGithub` block as defined below.
     */
    declare public readonly catalogGithub: pulumi.Output<outputs.devcenter.CatalogCatalogGithub | undefined>;
    /**
     * Specifies the Dev Center Id within which this Dev Center Catalog should exist. Changing this forces a new Dev Center Catalog to be created.
     */
    declare public readonly devCenterId: pulumi.Output<string>;
    /**
     * Specifies the name of this Dev Center Catalog. Changing this forces a new Dev Center to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Specifies the name of the Resource Group within which this Dev Center Catalog should exist. Changing this forces a new Dev Center to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;

    /**
     * Create a Catalog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CatalogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CatalogArgs | CatalogState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CatalogState | undefined;
            resourceInputs["catalogAdogit"] = state?.catalogAdogit;
            resourceInputs["catalogGithub"] = state?.catalogGithub;
            resourceInputs["devCenterId"] = state?.devCenterId;
            resourceInputs["name"] = state?.name;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
        } else {
            const args = argsOrState as CatalogArgs | undefined;
            if (args?.devCenterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'devCenterId'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["catalogAdogit"] = args?.catalogAdogit;
            resourceInputs["catalogGithub"] = args?.catalogGithub;
            resourceInputs["devCenterId"] = args?.devCenterId;
            resourceInputs["name"] = args?.name;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Catalog.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Catalog resources.
 */
export interface CatalogState {
    /**
     * A `catalogAdogit` block as defined below.
     */
    catalogAdogit?: pulumi.Input<inputs.devcenter.CatalogCatalogAdogit>;
    /**
     * A `catalogGithub` block as defined below.
     */
    catalogGithub?: pulumi.Input<inputs.devcenter.CatalogCatalogGithub>;
    /**
     * Specifies the Dev Center Id within which this Dev Center Catalog should exist. Changing this forces a new Dev Center Catalog to be created.
     */
    devCenterId?: pulumi.Input<string>;
    /**
     * Specifies the name of this Dev Center Catalog. Changing this forces a new Dev Center to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the name of the Resource Group within which this Dev Center Catalog should exist. Changing this forces a new Dev Center to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Catalog resource.
 */
export interface CatalogArgs {
    /**
     * A `catalogAdogit` block as defined below.
     */
    catalogAdogit?: pulumi.Input<inputs.devcenter.CatalogCatalogAdogit>;
    /**
     * A `catalogGithub` block as defined below.
     */
    catalogGithub?: pulumi.Input<inputs.devcenter.CatalogCatalogGithub>;
    /**
     * Specifies the Dev Center Id within which this Dev Center Catalog should exist. Changing this forces a new Dev Center Catalog to be created.
     */
    devCenterId: pulumi.Input<string>;
    /**
     * Specifies the name of this Dev Center Catalog. Changing this forces a new Dev Center to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the name of the Resource Group within which this Dev Center Catalog should exist. Changing this forces a new Dev Center to be created.
     */
    resourceGroupName: pulumi.Input<string>;
}
