// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Dev Center Project Pool.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleDevCenter = new azure.devcenter.DevCenter("example", {
 *     name: "example-dc",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
 *     name: "example-vnet",
 *     addressSpaces: ["10.0.0.0/16"],
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const exampleSubnet = new azure.network.Subnet("example", {
 *     name: "internal",
 *     resourceGroupName: example.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.2.0/24"],
 * });
 * const exampleNetworkConnection = new azure.devcenter.NetworkConnection("example", {
 *     name: "example-dcnc",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     subnetId: exampleSubnet.id,
 *     domainJoinType: "AzureADJoin",
 * });
 * const exampleAttachedNetwork = new azure.devcenter.AttachedNetwork("example", {
 *     name: "example-dcet",
 *     devCenterId: exampleDevCenter.id,
 *     networkConnectionId: exampleNetworkConnection.id,
 * });
 * const exampleProject = new azure.devcenter.Project("example", {
 *     name: "example-dcp",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     devCenterId: exampleDevCenter.id,
 * });
 * const exampleDevBoxDefinition = new azure.devcenter.DevBoxDefinition("example", {
 *     name: "example-dcet",
 *     location: example.location,
 *     devCenterId: exampleDevCenter.id,
 *     imageReferenceId: pulumi.interpolate`${exampleDevCenter.id}/galleries/default/images/microsoftvisualstudio_visualstudioplustools_vs-2022-ent-general-win10-m365-gen2`,
 *     skuName: "general_i_8c32gb256ssd_v2",
 * });
 * const exampleProjectPool = new azure.devcenter.ProjectPool("example", {
 *     name: "example-dcpl",
 *     location: example.location,
 *     devCenterProjectId: exampleProject.id,
 *     devBoxDefinitionName: exampleDevBoxDefinition.name,
 *     localAdministratorEnabled: true,
 *     devCenterAttachedNetworkName: exampleAttachedNetwork.name,
 *     stopOnDisconnectGracePeriodMinutes: 60,
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.DevCenter` - 2025-02-01
 *
 * ## Import
 *
 * An existing Dev Center Project Pool can be imported into Pulumi using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:devcenter/projectPool:ProjectPool example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DevCenter/projects/project1/pools/pool1
 * ```
 */
export class ProjectPool extends pulumi.CustomResource {
    /**
     * Get an existing ProjectPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectPoolState, opts?: pulumi.CustomResourceOptions): ProjectPool {
        return new ProjectPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:devcenter/projectPool:ProjectPool';

    /**
     * Returns true if the given object is an instance of ProjectPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectPool.__pulumiType;
    }

    /**
     * The name of the Dev Center Dev Box Definition.
     */
    declare public readonly devBoxDefinitionName: pulumi.Output<string>;
    /**
     * The name of the Dev Center Attached Network in parent Project of the Dev Center Project Pool.
     */
    declare public readonly devCenterAttachedNetworkName: pulumi.Output<string>;
    /**
     * The ID of the associated Dev Center Project. Changing this forces a new resource to be created.
     */
    declare public readonly devCenterProjectId: pulumi.Output<string>;
    /**
     * Specifies whether owners of Dev Boxes in the Dev Center Project Pool are added as local administrators on the Dev Box.
     */
    declare public readonly localAdministratorEnabled: pulumi.Output<boolean>;
    /**
     * The Azure Region where the Dev Center Project Pool should exist. Changing this forces a new resource to be created.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * A list of the regions of the managed Virtual Network. When specified, the Dev Center Project Pool will use a Microsoft managed network.
     *
     * > **Note:** Currently only one region can be specified for `managedVirtualNetworkRegions`.
     */
    declare public readonly managedVirtualNetworkRegions: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of this Dev Center Project Pool. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The specified time in minutes to wait before stopping a Dev Center Dev Box once disconnect is detected. Possible values are between `60` and `480`.
     */
    declare public readonly stopOnDisconnectGracePeriodMinutes: pulumi.Output<number | undefined>;
    /**
     * A mapping of tags which should be assigned to the Dev Center Project Pool.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a ProjectPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectPoolArgs | ProjectPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectPoolState | undefined;
            resourceInputs["devBoxDefinitionName"] = state?.devBoxDefinitionName;
            resourceInputs["devCenterAttachedNetworkName"] = state?.devCenterAttachedNetworkName;
            resourceInputs["devCenterProjectId"] = state?.devCenterProjectId;
            resourceInputs["localAdministratorEnabled"] = state?.localAdministratorEnabled;
            resourceInputs["location"] = state?.location;
            resourceInputs["managedVirtualNetworkRegions"] = state?.managedVirtualNetworkRegions;
            resourceInputs["name"] = state?.name;
            resourceInputs["stopOnDisconnectGracePeriodMinutes"] = state?.stopOnDisconnectGracePeriodMinutes;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as ProjectPoolArgs | undefined;
            if (args?.devBoxDefinitionName === undefined && !opts.urn) {
                throw new Error("Missing required property 'devBoxDefinitionName'");
            }
            if (args?.devCenterAttachedNetworkName === undefined && !opts.urn) {
                throw new Error("Missing required property 'devCenterAttachedNetworkName'");
            }
            if (args?.devCenterProjectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'devCenterProjectId'");
            }
            if (args?.localAdministratorEnabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'localAdministratorEnabled'");
            }
            resourceInputs["devBoxDefinitionName"] = args?.devBoxDefinitionName;
            resourceInputs["devCenterAttachedNetworkName"] = args?.devCenterAttachedNetworkName;
            resourceInputs["devCenterProjectId"] = args?.devCenterProjectId;
            resourceInputs["localAdministratorEnabled"] = args?.localAdministratorEnabled;
            resourceInputs["location"] = args?.location;
            resourceInputs["managedVirtualNetworkRegions"] = args?.managedVirtualNetworkRegions;
            resourceInputs["name"] = args?.name;
            resourceInputs["stopOnDisconnectGracePeriodMinutes"] = args?.stopOnDisconnectGracePeriodMinutes;
            resourceInputs["tags"] = args?.tags;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectPool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectPool resources.
 */
export interface ProjectPoolState {
    /**
     * The name of the Dev Center Dev Box Definition.
     */
    devBoxDefinitionName?: pulumi.Input<string>;
    /**
     * The name of the Dev Center Attached Network in parent Project of the Dev Center Project Pool.
     */
    devCenterAttachedNetworkName?: pulumi.Input<string>;
    /**
     * The ID of the associated Dev Center Project. Changing this forces a new resource to be created.
     */
    devCenterProjectId?: pulumi.Input<string>;
    /**
     * Specifies whether owners of Dev Boxes in the Dev Center Project Pool are added as local administrators on the Dev Box.
     */
    localAdministratorEnabled?: pulumi.Input<boolean>;
    /**
     * The Azure Region where the Dev Center Project Pool should exist. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * A list of the regions of the managed Virtual Network. When specified, the Dev Center Project Pool will use a Microsoft managed network.
     *
     * > **Note:** Currently only one region can be specified for `managedVirtualNetworkRegions`.
     */
    managedVirtualNetworkRegions?: pulumi.Input<string>;
    /**
     * Specifies the name of this Dev Center Project Pool. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The specified time in minutes to wait before stopping a Dev Center Dev Box once disconnect is detected. Possible values are between `60` and `480`.
     */
    stopOnDisconnectGracePeriodMinutes?: pulumi.Input<number>;
    /**
     * A mapping of tags which should be assigned to the Dev Center Project Pool.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a ProjectPool resource.
 */
export interface ProjectPoolArgs {
    /**
     * The name of the Dev Center Dev Box Definition.
     */
    devBoxDefinitionName: pulumi.Input<string>;
    /**
     * The name of the Dev Center Attached Network in parent Project of the Dev Center Project Pool.
     */
    devCenterAttachedNetworkName: pulumi.Input<string>;
    /**
     * The ID of the associated Dev Center Project. Changing this forces a new resource to be created.
     */
    devCenterProjectId: pulumi.Input<string>;
    /**
     * Specifies whether owners of Dev Boxes in the Dev Center Project Pool are added as local administrators on the Dev Box.
     */
    localAdministratorEnabled: pulumi.Input<boolean>;
    /**
     * The Azure Region where the Dev Center Project Pool should exist. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * A list of the regions of the managed Virtual Network. When specified, the Dev Center Project Pool will use a Microsoft managed network.
     *
     * > **Note:** Currently only one region can be specified for `managedVirtualNetworkRegions`.
     */
    managedVirtualNetworkRegions?: pulumi.Input<string>;
    /**
     * Specifies the name of this Dev Center Project Pool. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The specified time in minutes to wait before stopping a Dev Center Dev Box once disconnect is detected. Possible values are between `60` and `480`.
     */
    stopOnDisconnectGracePeriodMinutes?: pulumi.Input<number>;
    /**
     * A mapping of tags which should be assigned to the Dev Center Project Pool.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
