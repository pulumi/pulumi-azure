// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Gallery Application Version.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-rg",
 *     location: "West Europe",
 * });
 * const exampleSharedImageGallery = new azure.compute.SharedImageGallery("example", {
 *     name: "examplegallery",
 *     resourceGroupName: example.name,
 *     location: example.location,
 * });
 * const exampleGalleryApplication = new azure.compute.GalleryApplication("example", {
 *     name: "example-app",
 *     galleryId: exampleSharedImageGallery.id,
 *     location: example.location,
 *     supportedOsType: "Linux",
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "examplestorage",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleContainer = new azure.storage.Container("example", {
 *     name: "example-container",
 *     storageAccountName: exampleAccount.name,
 *     containerAccessType: "blob",
 * });
 * const exampleBlob = new azure.storage.Blob("example", {
 *     name: "scripts",
 *     storageAccountName: exampleAccount.name,
 *     storageContainerName: exampleContainer.name,
 *     type: "Block",
 *     sourceContent: "[scripts file content]",
 * });
 * const exampleGalleryApplicationVersion = new azure.compute.GalleryApplicationVersion("example", {
 *     name: "0.0.1",
 *     galleryApplicationId: exampleGalleryApplication.id,
 *     location: exampleGalleryApplication.location,
 *     manageAction: {
 *         install: "[install command]",
 *         remove: "[remove command]",
 *     },
 *     source: {
 *         mediaLink: exampleBlob.id,
 *     },
 *     targetRegions: [{
 *         name: exampleGalleryApplication.location,
 *         regionalReplicaCount: 1,
 *     }],
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Compute` - 2022-03-03
 *
 * ## Import
 *
 * Gallery Application Versions can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:compute/galleryApplicationVersion:GalleryApplicationVersion example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Compute/galleries/gallery1/applications/galleryApplication1/versions/galleryApplicationVersion1
 * ```
 */
export class GalleryApplicationVersion extends pulumi.CustomResource {
    /**
     * Get an existing GalleryApplicationVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GalleryApplicationVersionState, opts?: pulumi.CustomResourceOptions): GalleryApplicationVersion {
        return new GalleryApplicationVersion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:compute/galleryApplicationVersion:GalleryApplicationVersion';

    /**
     * Returns true if the given object is an instance of GalleryApplicationVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GalleryApplicationVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GalleryApplicationVersion.__pulumiType;
    }

    /**
     * Specifies the name of the config file on the VM. Changing this forces a new resource to be created.
     */
    declare public readonly configFile: pulumi.Output<string | undefined>;
    /**
     * Should the Gallery Application reports health. Defaults to `false`.
     */
    declare public readonly enableHealthCheck: pulumi.Output<boolean | undefined>;
    /**
     * The end of life date in RFC3339 format of the Gallery Application Version.
     */
    declare public readonly endOfLifeDate: pulumi.Output<string | undefined>;
    /**
     * Should the Gallery Application Version be excluded from the `latest` filter? If set to `true` this Gallery Application Version won't be returned for the `latest` version. Defaults to `false`.
     */
    declare public readonly excludeFromLatest: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the Gallery Application. Changing this forces a new resource to be created.
     */
    declare public readonly galleryApplicationId: pulumi.Output<string>;
    /**
     * The Azure Region where the Gallery Application Version exists. Changing this forces a new resource to be created.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * A `manageAction` block as defined below.
     */
    declare public readonly manageAction: pulumi.Output<outputs.compute.GalleryApplicationVersionManageAction>;
    /**
     * The version name of the Gallery Application Version, such as `1.0.0`. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Specifies the name of the package file on the VM. Changing this forces a new resource to be created.
     */
    declare public readonly packageFile: pulumi.Output<string | undefined>;
    /**
     * A `source` block as defined below.
     */
    declare public readonly source: pulumi.Output<outputs.compute.GalleryApplicationVersionSource>;
    /**
     * A mapping of tags to assign to the Gallery Application Version.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * One or more `targetRegion` blocks as defined below.
     */
    declare public readonly targetRegions: pulumi.Output<outputs.compute.GalleryApplicationVersionTargetRegion[]>;

    /**
     * Create a GalleryApplicationVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GalleryApplicationVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GalleryApplicationVersionArgs | GalleryApplicationVersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GalleryApplicationVersionState | undefined;
            resourceInputs["configFile"] = state?.configFile;
            resourceInputs["enableHealthCheck"] = state?.enableHealthCheck;
            resourceInputs["endOfLifeDate"] = state?.endOfLifeDate;
            resourceInputs["excludeFromLatest"] = state?.excludeFromLatest;
            resourceInputs["galleryApplicationId"] = state?.galleryApplicationId;
            resourceInputs["location"] = state?.location;
            resourceInputs["manageAction"] = state?.manageAction;
            resourceInputs["name"] = state?.name;
            resourceInputs["packageFile"] = state?.packageFile;
            resourceInputs["source"] = state?.source;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["targetRegions"] = state?.targetRegions;
        } else {
            const args = argsOrState as GalleryApplicationVersionArgs | undefined;
            if (args?.galleryApplicationId === undefined && !opts.urn) {
                throw new Error("Missing required property 'galleryApplicationId'");
            }
            if (args?.manageAction === undefined && !opts.urn) {
                throw new Error("Missing required property 'manageAction'");
            }
            if (args?.source === undefined && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            if (args?.targetRegions === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetRegions'");
            }
            resourceInputs["configFile"] = args?.configFile;
            resourceInputs["enableHealthCheck"] = args?.enableHealthCheck;
            resourceInputs["endOfLifeDate"] = args?.endOfLifeDate;
            resourceInputs["excludeFromLatest"] = args?.excludeFromLatest;
            resourceInputs["galleryApplicationId"] = args?.galleryApplicationId;
            resourceInputs["location"] = args?.location;
            resourceInputs["manageAction"] = args?.manageAction;
            resourceInputs["name"] = args?.name;
            resourceInputs["packageFile"] = args?.packageFile;
            resourceInputs["source"] = args?.source;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["targetRegions"] = args?.targetRegions;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GalleryApplicationVersion.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GalleryApplicationVersion resources.
 */
export interface GalleryApplicationVersionState {
    /**
     * Specifies the name of the config file on the VM. Changing this forces a new resource to be created.
     */
    configFile?: pulumi.Input<string>;
    /**
     * Should the Gallery Application reports health. Defaults to `false`.
     */
    enableHealthCheck?: pulumi.Input<boolean>;
    /**
     * The end of life date in RFC3339 format of the Gallery Application Version.
     */
    endOfLifeDate?: pulumi.Input<string>;
    /**
     * Should the Gallery Application Version be excluded from the `latest` filter? If set to `true` this Gallery Application Version won't be returned for the `latest` version. Defaults to `false`.
     */
    excludeFromLatest?: pulumi.Input<boolean>;
    /**
     * The ID of the Gallery Application. Changing this forces a new resource to be created.
     */
    galleryApplicationId?: pulumi.Input<string>;
    /**
     * The Azure Region where the Gallery Application Version exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * A `manageAction` block as defined below.
     */
    manageAction?: pulumi.Input<inputs.compute.GalleryApplicationVersionManageAction>;
    /**
     * The version name of the Gallery Application Version, such as `1.0.0`. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the name of the package file on the VM. Changing this forces a new resource to be created.
     */
    packageFile?: pulumi.Input<string>;
    /**
     * A `source` block as defined below.
     */
    source?: pulumi.Input<inputs.compute.GalleryApplicationVersionSource>;
    /**
     * A mapping of tags to assign to the Gallery Application Version.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * One or more `targetRegion` blocks as defined below.
     */
    targetRegions?: pulumi.Input<pulumi.Input<inputs.compute.GalleryApplicationVersionTargetRegion>[]>;
}

/**
 * The set of arguments for constructing a GalleryApplicationVersion resource.
 */
export interface GalleryApplicationVersionArgs {
    /**
     * Specifies the name of the config file on the VM. Changing this forces a new resource to be created.
     */
    configFile?: pulumi.Input<string>;
    /**
     * Should the Gallery Application reports health. Defaults to `false`.
     */
    enableHealthCheck?: pulumi.Input<boolean>;
    /**
     * The end of life date in RFC3339 format of the Gallery Application Version.
     */
    endOfLifeDate?: pulumi.Input<string>;
    /**
     * Should the Gallery Application Version be excluded from the `latest` filter? If set to `true` this Gallery Application Version won't be returned for the `latest` version. Defaults to `false`.
     */
    excludeFromLatest?: pulumi.Input<boolean>;
    /**
     * The ID of the Gallery Application. Changing this forces a new resource to be created.
     */
    galleryApplicationId: pulumi.Input<string>;
    /**
     * The Azure Region where the Gallery Application Version exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * A `manageAction` block as defined below.
     */
    manageAction: pulumi.Input<inputs.compute.GalleryApplicationVersionManageAction>;
    /**
     * The version name of the Gallery Application Version, such as `1.0.0`. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the name of the package file on the VM. Changing this forces a new resource to be created.
     */
    packageFile?: pulumi.Input<string>;
    /**
     * A `source` block as defined below.
     */
    source: pulumi.Input<inputs.compute.GalleryApplicationVersionSource>;
    /**
     * A mapping of tags to assign to the Gallery Application Version.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * One or more `targetRegion` blocks as defined below.
     */
    targetRegions: pulumi.Input<pulumi.Input<inputs.compute.GalleryApplicationVersionTargetRegion>[]>;
}
