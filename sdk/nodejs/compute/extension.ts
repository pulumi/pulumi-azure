// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Virtual Machine Extension to provide post deployment configuration
 * and run automated tasks.
 *
 * > **Note:** Custom Script Extensions for Linux & Windows require that the `commandToExecute` returns a `0` exit code to be classified as successfully deployed. You can achieve this by appending `exit 0` to the end of your `commandToExecute`.
 *
 * > **Note:** Custom Script Extensions require that the Azure Virtual Machine Guest Agent is running on the Virtual Machine.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as std from "@pulumi/std";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
 *     name: "acctvn",
 *     addressSpaces: ["10.0.0.0/16"],
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const exampleSubnet = new azure.network.Subnet("example", {
 *     name: "acctsub",
 *     resourceGroupName: example.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.2.0/24"],
 * });
 * const exampleNetworkInterface = new azure.network.NetworkInterface("example", {
 *     name: "acctni",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     ipConfigurations: [{
 *         name: "testconfiguration1",
 *         subnetId: exampleSubnet.id,
 *         privateIpAddressAllocation: "Dynamic",
 *     }],
 * });
 * const exampleLinuxVirtualMachine = new azure.compute.LinuxVirtualMachine("example", {
 *     name: "example-machine",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     size: "Standard_F2",
 *     adminUsername: "adminuser",
 *     networkInterfaceIds: [exampleNetworkInterface.id],
 *     adminSshKeys: [{
 *         username: "adminuser",
 *         publicKey: std.file({
 *             input: "~/.ssh/id_rsa.pub",
 *         }).then(invoke => invoke.result),
 *     }],
 *     osDisk: {
 *         caching: "ReadWrite",
 *         storageAccountType: "Standard_LRS",
 *     },
 *     sourceImageReference: {
 *         publisher: "Canonical",
 *         offer: "0001-com-ubuntu-server-jammy",
 *         sku: "22_04-lts",
 *         version: "latest",
 *     },
 * });
 * const exampleExtension = new azure.compute.Extension("example", {
 *     name: "hostname",
 *     virtualMachineId: exampleLinuxVirtualMachine.id,
 *     publisher: "Microsoft.Azure.Extensions",
 *     type: "CustomScript",
 *     typeHandlerVersion: "2.0",
 *     settings: ` {
 *   "commandToExecute": "hostname && uptime"
 *  }
 * `,
 *     tags: {
 *         environment: "Production",
 *     },
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Compute` - 2024-03-01
 *
 * ## Import
 *
 * Virtual Machine Extensions can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:compute/extension:Extension example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/virtualMachines/myVM/extensions/extensionName
 * ```
 */
export class Extension extends pulumi.CustomResource {
    /**
     * Get an existing Extension resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExtensionState, opts?: pulumi.CustomResourceOptions): Extension {
        return new Extension(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:compute/extension:Extension';

    /**
     * Returns true if the given object is an instance of Extension.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Extension {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Extension.__pulumiType;
    }

    /**
     * Specifies if the platform deploys the latest minor version update to the `typeHandlerVersion` specified.
     */
    declare public readonly autoUpgradeMinorVersion: pulumi.Output<boolean | undefined>;
    /**
     * Should the Extension be automatically updated whenever the Publisher releases a new version of this VM Extension?
     */
    declare public readonly automaticUpgradeEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Should failures from the extension be suppressed? Possible values are `true` or `false`. Defaults to `false`.
     *
     * > **Note:** Operational failures such as not connecting to the VM will not be suppressed regardless of the `failureSuppressionEnabled` value.
     */
    declare public readonly failureSuppressionEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The name of the virtual machine extension peering. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The protectedSettings passed to the extension, like settings, these are specified as a JSON object in a string.
     *
     * > **Note:** Certain VM Extensions require that the keys in the `protectedSettings` block are case sensitive. If you're seeing unhelpful errors, please ensure the keys are consistent with how Azure is expecting them (for instance, for the `JsonADDomainExtension` extension, the keys are expected to be in `TitleCase`.)
     */
    declare public readonly protectedSettings: pulumi.Output<string | undefined>;
    /**
     * A `protectedSettingsFromKeyVault` block as defined below.
     *
     * > **Note:** `protectedSettingsFromKeyVault` cannot be used with `protectedSettings`
     */
    declare public readonly protectedSettingsFromKeyVault: pulumi.Output<outputs.compute.ExtensionProtectedSettingsFromKeyVault | undefined>;
    /**
     * Specifies the collection of extension names after which this extension needs to be provisioned.
     */
    declare public readonly provisionAfterExtensions: pulumi.Output<string[] | undefined>;
    /**
     * The publisher of the extension, available publishers can be found by using the Azure CLI. Changing this forces a new resource to be created.
     */
    declare public readonly publisher: pulumi.Output<string>;
    /**
     * The settings passed to the extension, these are specified as a JSON object in a string.
     *
     * > **Note:** Certain VM Extensions require that the keys in the `settings` block are case sensitive. If you're seeing unhelpful errors, please ensure the keys are consistent with how Azure is expecting them (for instance, for the `JsonADDomainExtension` extension, the keys are expected to be in `TitleCase`.)
     */
    declare public readonly settings: pulumi.Output<string | undefined>;
    /**
     * A mapping of tags to assign to the resource.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The type of extension, available types for a publisher can be found using the Azure CLI.
     *
     * > **Note:** The `Publisher` and `Type` of Virtual Machine Extensions can be found using the Azure CLI, via:
     *
     * ```shell
     * az vm extension image list --location westus -o table
     * ```
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * Specifies the version of the extension to use, available versions can be found using the Azure CLI.
     */
    declare public readonly typeHandlerVersion: pulumi.Output<string>;
    /**
     * The ID of the Virtual Machine. Changing this forces a new resource to be created
     */
    declare public readonly virtualMachineId: pulumi.Output<string>;

    /**
     * Create a Extension resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExtensionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExtensionArgs | ExtensionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExtensionState | undefined;
            resourceInputs["autoUpgradeMinorVersion"] = state?.autoUpgradeMinorVersion;
            resourceInputs["automaticUpgradeEnabled"] = state?.automaticUpgradeEnabled;
            resourceInputs["failureSuppressionEnabled"] = state?.failureSuppressionEnabled;
            resourceInputs["name"] = state?.name;
            resourceInputs["protectedSettings"] = state?.protectedSettings;
            resourceInputs["protectedSettingsFromKeyVault"] = state?.protectedSettingsFromKeyVault;
            resourceInputs["provisionAfterExtensions"] = state?.provisionAfterExtensions;
            resourceInputs["publisher"] = state?.publisher;
            resourceInputs["settings"] = state?.settings;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["type"] = state?.type;
            resourceInputs["typeHandlerVersion"] = state?.typeHandlerVersion;
            resourceInputs["virtualMachineId"] = state?.virtualMachineId;
        } else {
            const args = argsOrState as ExtensionArgs | undefined;
            if (args?.publisher === undefined && !opts.urn) {
                throw new Error("Missing required property 'publisher'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if (args?.typeHandlerVersion === undefined && !opts.urn) {
                throw new Error("Missing required property 'typeHandlerVersion'");
            }
            if (args?.virtualMachineId === undefined && !opts.urn) {
                throw new Error("Missing required property 'virtualMachineId'");
            }
            resourceInputs["autoUpgradeMinorVersion"] = args?.autoUpgradeMinorVersion;
            resourceInputs["automaticUpgradeEnabled"] = args?.automaticUpgradeEnabled;
            resourceInputs["failureSuppressionEnabled"] = args?.failureSuppressionEnabled;
            resourceInputs["name"] = args?.name;
            resourceInputs["protectedSettings"] = args?.protectedSettings ? pulumi.secret(args.protectedSettings) : undefined;
            resourceInputs["protectedSettingsFromKeyVault"] = args?.protectedSettingsFromKeyVault;
            resourceInputs["provisionAfterExtensions"] = args?.provisionAfterExtensions;
            resourceInputs["publisher"] = args?.publisher;
            resourceInputs["settings"] = args?.settings;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["type"] = args?.type;
            resourceInputs["typeHandlerVersion"] = args?.typeHandlerVersion;
            resourceInputs["virtualMachineId"] = args?.virtualMachineId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["protectedSettings"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Extension.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Extension resources.
 */
export interface ExtensionState {
    /**
     * Specifies if the platform deploys the latest minor version update to the `typeHandlerVersion` specified.
     */
    autoUpgradeMinorVersion?: pulumi.Input<boolean>;
    /**
     * Should the Extension be automatically updated whenever the Publisher releases a new version of this VM Extension?
     */
    automaticUpgradeEnabled?: pulumi.Input<boolean>;
    /**
     * Should failures from the extension be suppressed? Possible values are `true` or `false`. Defaults to `false`.
     *
     * > **Note:** Operational failures such as not connecting to the VM will not be suppressed regardless of the `failureSuppressionEnabled` value.
     */
    failureSuppressionEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the virtual machine extension peering. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The protectedSettings passed to the extension, like settings, these are specified as a JSON object in a string.
     *
     * > **Note:** Certain VM Extensions require that the keys in the `protectedSettings` block are case sensitive. If you're seeing unhelpful errors, please ensure the keys are consistent with how Azure is expecting them (for instance, for the `JsonADDomainExtension` extension, the keys are expected to be in `TitleCase`.)
     */
    protectedSettings?: pulumi.Input<string>;
    /**
     * A `protectedSettingsFromKeyVault` block as defined below.
     *
     * > **Note:** `protectedSettingsFromKeyVault` cannot be used with `protectedSettings`
     */
    protectedSettingsFromKeyVault?: pulumi.Input<inputs.compute.ExtensionProtectedSettingsFromKeyVault>;
    /**
     * Specifies the collection of extension names after which this extension needs to be provisioned.
     */
    provisionAfterExtensions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The publisher of the extension, available publishers can be found by using the Azure CLI. Changing this forces a new resource to be created.
     */
    publisher?: pulumi.Input<string>;
    /**
     * The settings passed to the extension, these are specified as a JSON object in a string.
     *
     * > **Note:** Certain VM Extensions require that the keys in the `settings` block are case sensitive. If you're seeing unhelpful errors, please ensure the keys are consistent with how Azure is expecting them (for instance, for the `JsonADDomainExtension` extension, the keys are expected to be in `TitleCase`.)
     */
    settings?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The type of extension, available types for a publisher can be found using the Azure CLI.
     *
     * > **Note:** The `Publisher` and `Type` of Virtual Machine Extensions can be found using the Azure CLI, via:
     *
     * ```shell
     * az vm extension image list --location westus -o table
     * ```
     */
    type?: pulumi.Input<string>;
    /**
     * Specifies the version of the extension to use, available versions can be found using the Azure CLI.
     */
    typeHandlerVersion?: pulumi.Input<string>;
    /**
     * The ID of the Virtual Machine. Changing this forces a new resource to be created
     */
    virtualMachineId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Extension resource.
 */
export interface ExtensionArgs {
    /**
     * Specifies if the platform deploys the latest minor version update to the `typeHandlerVersion` specified.
     */
    autoUpgradeMinorVersion?: pulumi.Input<boolean>;
    /**
     * Should the Extension be automatically updated whenever the Publisher releases a new version of this VM Extension?
     */
    automaticUpgradeEnabled?: pulumi.Input<boolean>;
    /**
     * Should failures from the extension be suppressed? Possible values are `true` or `false`. Defaults to `false`.
     *
     * > **Note:** Operational failures such as not connecting to the VM will not be suppressed regardless of the `failureSuppressionEnabled` value.
     */
    failureSuppressionEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the virtual machine extension peering. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The protectedSettings passed to the extension, like settings, these are specified as a JSON object in a string.
     *
     * > **Note:** Certain VM Extensions require that the keys in the `protectedSettings` block are case sensitive. If you're seeing unhelpful errors, please ensure the keys are consistent with how Azure is expecting them (for instance, for the `JsonADDomainExtension` extension, the keys are expected to be in `TitleCase`.)
     */
    protectedSettings?: pulumi.Input<string>;
    /**
     * A `protectedSettingsFromKeyVault` block as defined below.
     *
     * > **Note:** `protectedSettingsFromKeyVault` cannot be used with `protectedSettings`
     */
    protectedSettingsFromKeyVault?: pulumi.Input<inputs.compute.ExtensionProtectedSettingsFromKeyVault>;
    /**
     * Specifies the collection of extension names after which this extension needs to be provisioned.
     */
    provisionAfterExtensions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The publisher of the extension, available publishers can be found by using the Azure CLI. Changing this forces a new resource to be created.
     */
    publisher: pulumi.Input<string>;
    /**
     * The settings passed to the extension, these are specified as a JSON object in a string.
     *
     * > **Note:** Certain VM Extensions require that the keys in the `settings` block are case sensitive. If you're seeing unhelpful errors, please ensure the keys are consistent with how Azure is expecting them (for instance, for the `JsonADDomainExtension` extension, the keys are expected to be in `TitleCase`.)
     */
    settings?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The type of extension, available types for a publisher can be found using the Azure CLI.
     *
     * > **Note:** The `Publisher` and `Type` of Virtual Machine Extensions can be found using the Azure CLI, via:
     *
     * ```shell
     * az vm extension image list --location westus -o table
     * ```
     */
    type: pulumi.Input<string>;
    /**
     * Specifies the version of the extension to use, available versions can be found using the Azure CLI.
     */
    typeHandlerVersion: pulumi.Input<string>;
    /**
     * The ID of the Virtual Machine. Changing this forces a new resource to be created
     */
    virtualMachineId: pulumi.Input<string>;
}
