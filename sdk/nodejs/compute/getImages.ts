// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to access information about existing Images within a Resource Group.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.compute.getImages({
 *     resourceGroupName: "example-resources",
 * });
 * ```
 */
export function getImages(args: GetImagesArgs, opts?: pulumi.InvokeOptions): Promise<GetImagesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure:compute/getImages:getImages", {
        "resourceGroupName": args.resourceGroupName,
        "tagsFilter": args.tagsFilter,
    }, opts);
}

/**
 * A collection of arguments for invoking getImages.
 */
export interface GetImagesArgs {
    /**
     * The name of the Resource Group in which the Image exists.
     */
    resourceGroupName: string;
    /**
     * A mapping of tags to filter the list of images against.
     */
    tagsFilter?: {[key: string]: string};
}

/**
 * A collection of values returned by getImages.
 */
export interface GetImagesResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * One or more `images` blocks as defined below:
     */
    readonly images: outputs.compute.GetImagesImage[];
    readonly resourceGroupName: string;
    readonly tagsFilter?: {[key: string]: string};
}
/**
 * Use this data source to access information about existing Images within a Resource Group.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.compute.getImages({
 *     resourceGroupName: "example-resources",
 * });
 * ```
 */
export function getImagesOutput(args: GetImagesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetImagesResult> {
    return pulumi.output(args).apply((a: any) => getImages(a, opts))
}

/**
 * A collection of arguments for invoking getImages.
 */
export interface GetImagesOutputArgs {
    /**
     * The name of the Resource Group in which the Image exists.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A mapping of tags to filter the list of images against.
     */
    tagsFilter?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
