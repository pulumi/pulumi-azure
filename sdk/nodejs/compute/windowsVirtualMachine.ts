// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Windows Virtual Machine.
 *
 * ## Disclaimers
 *
 * > **Note** This provider will automatically remove the OS Disk by default - this behaviour can be configured using the `features` setting within the Provider block.
 *
 * > **Note** All arguments including the administrator login and password will be stored in the raw state as plain-text.
 *
 * > **Note** This resource does not support Unmanaged Disks. If you need to use Unmanaged Disks you can continue to use the `azure.compute.VirtualMachine` resource instead.
 *
 * > **Note** This resource does not support attaching existing OS Disks. You can instead capture an image of the OS Disk or continue to use the `azure.compute.VirtualMachine` resource instead.
 *
 * > In this release there's a known issue where the `publicIpAddress` and `publicIpAddresses` fields may not be fully populated for Dynamic Public IP's.
 *
 * ## Example Usage
 *
 * This example provisions a basic Windows Virtual Machine on an internal network.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
 *     name: "example-network",
 *     addressSpaces: ["10.0.0.0/16"],
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const exampleSubnet = new azure.network.Subnet("example", {
 *     name: "internal",
 *     resourceGroupName: example.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.2.0/24"],
 * });
 * const exampleNetworkInterface = new azure.network.NetworkInterface("example", {
 *     name: "example-nic",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     ipConfigurations: [{
 *         name: "internal",
 *         subnetId: exampleSubnet.id,
 *         privateIpAddressAllocation: "Dynamic",
 *     }],
 * });
 * const exampleWindowsVirtualMachine = new azure.compute.WindowsVirtualMachine("example", {
 *     name: "example-machine",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     size: "Standard_F2",
 *     adminUsername: "adminuser",
 *     adminPassword: "P@$$w0rd1234!",
 *     networkInterfaceIds: [exampleNetworkInterface.id],
 *     osDisk: {
 *         caching: "ReadWrite",
 *         storageAccountType: "Standard_LRS",
 *     },
 *     sourceImageReference: {
 *         publisher: "MicrosoftWindowsServer",
 *         offer: "WindowsServer",
 *         sku: "2016-Datacenter",
 *         version: "latest",
 *     },
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Compute` - 2024-03-01, 2023-04-02
 *
 * ## Import
 *
 * Windows Virtual Machines can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:compute/windowsVirtualMachine:WindowsVirtualMachine example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/virtualMachines/machine1
 * ```
 */
export class WindowsVirtualMachine extends pulumi.CustomResource {
    /**
     * Get an existing WindowsVirtualMachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WindowsVirtualMachineState, opts?: pulumi.CustomResourceOptions): WindowsVirtualMachine {
        return new WindowsVirtualMachine(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:compute/windowsVirtualMachine:WindowsVirtualMachine';

    /**
     * Returns true if the given object is an instance of WindowsVirtualMachine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WindowsVirtualMachine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WindowsVirtualMachine.__pulumiType;
    }

    /**
     * A `additionalCapabilities` block as defined below.
     */
    declare public readonly additionalCapabilities: pulumi.Output<outputs.compute.WindowsVirtualMachineAdditionalCapabilities | undefined>;
    /**
     * One or more `additionalUnattendContent` blocks as defined below. Changing this forces a new resource to be created.
     */
    declare public readonly additionalUnattendContents: pulumi.Output<outputs.compute.WindowsVirtualMachineAdditionalUnattendContent[] | undefined>;
    /**
     * The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
     *
     * > **Note:** This is required unless using an existing OS Managed Disk by specifying `osManagedDiskId`.
     */
    declare public readonly adminPassword: pulumi.Output<string | undefined>;
    /**
     * The username of the local administrator used for the Virtual Machine. Changing this forces a new resource to be created.
     *
     * > **Note:** This is required unless using an existing OS Managed Disk by specifying `osManagedDiskId`.
     */
    declare public readonly adminUsername: pulumi.Output<string | undefined>;
    /**
     * Should Extension Operations be allowed on this Virtual Machine? Defaults to `true`.
     */
    declare public readonly allowExtensionOperations: pulumi.Output<boolean>;
    declare public readonly automaticUpdatesEnabled: pulumi.Output<boolean>;
    /**
     * Specifies the ID of the Availability Set in which the Virtual Machine should exist. Changing this forces a new resource to be created.
     */
    declare public readonly availabilitySetId: pulumi.Output<string | undefined>;
    /**
     * A `bootDiagnostics` block as defined below.
     */
    declare public readonly bootDiagnostics: pulumi.Output<outputs.compute.WindowsVirtualMachineBootDiagnostics | undefined>;
    /**
     * Specifies whether to skip platform scheduled patching when a user schedule is associated with the VM. Defaults to `false`.
     *
     * > **NOTE:** `bypassPlatformSafetyChecksOnUserScheduleEnabled` can only be set to `true` when `patchMode` is set to `AutomaticByPlatform`.
     */
    declare public readonly bypassPlatformSafetyChecksOnUserScheduleEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the ID of the Capacity Reservation Group which the Virtual Machine should be allocated to.
     *
     * > **NOTE:** `capacityReservationGroupId` cannot be used with `availabilitySetId` or `proximityPlacementGroupId`
     */
    declare public readonly capacityReservationGroupId: pulumi.Output<string | undefined>;
    /**
     * Specifies the Hostname which should be used for this Virtual Machine. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computerName`, then you must specify `computerName`. Changing this forces a new resource to be created.
     */
    declare public readonly computerName: pulumi.Output<string>;
    /**
     * The Base64-Encoded Custom Data which should be used for this Virtual Machine. Changing this forces a new resource to be created.
     */
    declare public readonly customData: pulumi.Output<string | undefined>;
    /**
     * The ID of a Dedicated Host Group that this Windows Virtual Machine should be run within. Conflicts with `dedicatedHostId`.
     */
    declare public readonly dedicatedHostGroupId: pulumi.Output<string | undefined>;
    /**
     * The ID of a Dedicated Host where this machine should be run on. Conflicts with `dedicatedHostGroupId`.
     */
    declare public readonly dedicatedHostId: pulumi.Output<string | undefined>;
    /**
     * Specifies the Disk Controller Type used for this Virtual Machine. Possible values are `SCSI` and `NVMe`.
     */
    declare public readonly diskControllerType: pulumi.Output<string>;
    /**
     * Specifies the Edge Zone within the Azure Region where this Windows Virtual Machine should exist. Changing this forces a new Windows Virtual Machine to be created.
     */
    declare public readonly edgeZone: pulumi.Output<string | undefined>;
    /**
     * Specifies if Automatic Updates are Enabled for the Windows Virtual Machine. Changing this forces a new resource to be created. Defaults to `true`.
     *
     * @deprecated this property has been deprecated in favour of automaticUpdatesEnabled and will be removed in 5.0 of the provider.
     */
    declare public readonly enableAutomaticUpdates: pulumi.Output<boolean>;
    /**
     * Should all of the disks (including the temp disk) attached to this Virtual Machine be encrypted by enabling Encryption at Host?
     */
    declare public readonly encryptionAtHostEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Specifies what should happen when the Virtual Machine is evicted for price reasons when using a Spot instance. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
     *
     * > **NOTE:** This can only be configured when `priority` is set to `Spot`.
     */
    declare public readonly evictionPolicy: pulumi.Output<string | undefined>;
    /**
     * Specifies the duration allocated for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. Defaults to `PT1H30M`.
     */
    declare public readonly extensionsTimeBudget: pulumi.Output<string | undefined>;
    /**
     * One or more `galleryApplication` blocks as defined below.
     *
     * > **Note** Gallery Application Assignments can be defined either directly on `azure.compute.WindowsVirtualMachine` resource, or using the `azure.compute.GalleryApplicationAssignment` resource - but the two approaches cannot be used together. If both are used with the same Virtual Machine, spurious changes will occur. If `azure.compute.GalleryApplicationAssignment` is used, it's recommended to use `ignoreChanges` for the `galleryApplication` block on the corresponding `azure.compute.WindowsVirtualMachine` resource, to avoid a persistent diff when using this resource.
     */
    declare public readonly galleryApplications: pulumi.Output<outputs.compute.WindowsVirtualMachineGalleryApplication[] | undefined>;
    /**
     * Should the VM be patched without requiring a reboot? Possible values are `true` or `false`. Defaults to `false`. For more information about hot patching please see the [product documentation](https://docs.microsoft.com/azure/automanage/automanage-hotpatch).
     *
     * > **NOTE:** Hotpatching can only be enabled if the `patchMode` is set to `AutomaticByPlatform`, the `provisionVmAgent` is set to `true`, your `sourceImageReference` references a hotpatching enabled image, and the VM's `size` is set to a [Azure generation 2](https://docs.microsoft.com/azure/virtual-machines/generation-2#generation-2-vm-sizes) VM. An example of how to correctly configure a Windows Virtual Machine to use the `hotpatchingEnabled` field can be found in the `./examples/virtual-machines/windows/hotpatching-enabled` directory within the GitHub Repository.
     */
    declare public readonly hotpatchingEnabled: pulumi.Output<boolean>;
    /**
     * An `identity` block as defined below.
     */
    declare public readonly identity: pulumi.Output<outputs.compute.WindowsVirtualMachineIdentity | undefined>;
    /**
     * Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/windows-server/get-started/azure-hybrid-benefit)) which should be used for this Virtual Machine. Possible values are `None`, `Windows_Client` and `Windows_Server`.
     */
    declare public readonly licenseType: pulumi.Output<string | undefined>;
    /**
     * The Azure location where the Windows Virtual Machine should exist. Changing this forces a new resource to be created.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * The maximum price you're willing to pay for this Virtual Machine, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machine will be evicted using the `evictionPolicy`. Defaults to `-1`, which means that the Virtual Machine should not be evicted for price reasons.
     *
     * > **NOTE:** This can only be configured when `priority` is set to `Spot`.
     */
    declare public readonly maxBidPrice: pulumi.Output<number | undefined>;
    /**
     * The name of the Windows Virtual Machine. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * . A list of Network Interface IDs which should be attached to this Virtual Machine. The first Network Interface ID in this list will be the Primary Network Interface on the Virtual Machine.
     */
    declare public readonly networkInterfaceIds: pulumi.Output<string[]>;
    /**
     * An `osDisk` block as defined below.
     */
    declare public readonly osDisk: pulumi.Output<outputs.compute.WindowsVirtualMachineOsDisk>;
    /**
     * A `osImageNotification` block as defined below.
     */
    declare public readonly osImageNotification: pulumi.Output<outputs.compute.WindowsVirtualMachineOsImageNotification | undefined>;
    /**
     * The ID of an existing Managed Disk to use as the OS Disk for this Windows Virtual Machine.
     *
     * > **Note:** When specifying an existing Managed Disk it is not currently possible to subsequently manage the Operating System Profile properties: `adminUsername`, `adminPassword`, `bypassPlatformSafetyChecksOnUserScheduleEnabled`, `computerName`, `customData`, `provisionVmAgent`, `patchMode`, `patchAssessmentMode`, or `rebootSetting`.
     */
    declare public readonly osManagedDiskId: pulumi.Output<string>;
    /**
     * Specifies the mode of VM Guest Patching for the Virtual Machine. Possible values are `AutomaticByPlatform` or `ImageDefault`. Defaults to `ImageDefault`.
     *
     * > **NOTE:** If the `patchAssessmentMode` is set to `AutomaticByPlatform` then the `provisionVmAgent` field must be set to `true`.
     */
    declare public readonly patchAssessmentMode: pulumi.Output<string>;
    /**
     * Specifies the mode of in-guest patching to this Windows Virtual Machine. Possible values are `Manual`, `AutomaticByOS` and `AutomaticByPlatform`. Defaults to `AutomaticByOS`. For more information on patch modes please see the [product documentation](https://docs.microsoft.com/azure/virtual-machines/automatic-vm-guest-patching#patch-orchestration-modes).
     *
     * > **NOTE:** If `patchMode` is set to `AutomaticByPlatform` then `provisionVmAgent` must also be set to `true`. If the Virtual Machine is using a hotpatching enabled image the `patchMode` must always be set to `AutomaticByPlatform`.
     */
    declare public readonly patchMode: pulumi.Output<string>;
    /**
     * A `plan` block as defined below. Changing this forces a new resource to be created.
     */
    declare public readonly plan: pulumi.Output<outputs.compute.WindowsVirtualMachinePlan | undefined>;
    /**
     * Specifies the Platform Fault Domain in which this Windows Virtual Machine should be created. Defaults to `-1`, which means this will be automatically assigned to a fault domain that best maintains balance across the available fault domains. Changing this forces a new Windows Virtual Machine to be created.
     */
    declare public readonly platformFaultDomain: pulumi.Output<number | undefined>;
    /**
     * Specifies the priority of this Virtual Machine. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this forces a new resource to be created.
     */
    declare public readonly priority: pulumi.Output<string | undefined>;
    /**
     * The Primary Private IP Address assigned to this Virtual Machine.
     */
    declare public /*out*/ readonly privateIpAddress: pulumi.Output<string>;
    /**
     * A list of Private IP Addresses assigned to this Virtual Machine.
     */
    declare public /*out*/ readonly privateIpAddresses: pulumi.Output<string[]>;
    /**
     * Should the Azure VM Agent be provisioned on this Virtual Machine? Defaults to `true`. Changing this forces a new resource to be created.
     *
     * > **NOTE:** If `provisionVmAgent` is set to `false` then `allowExtensionOperations` must also be set to `false`.
     */
    declare public readonly provisionVmAgent: pulumi.Output<boolean>;
    /**
     * The ID of the Proximity Placement Group which the Virtual Machine should be assigned to.
     */
    declare public readonly proximityPlacementGroupId: pulumi.Output<string | undefined>;
    /**
     * The Primary Public IP Address assigned to this Virtual Machine.
     */
    declare public /*out*/ readonly publicIpAddress: pulumi.Output<string>;
    /**
     * A list of the Public IP Addresses assigned to this Virtual Machine.
     */
    declare public /*out*/ readonly publicIpAddresses: pulumi.Output<string[]>;
    /**
     * Specifies the reboot setting for platform scheduled patching. Possible values are `Always`, `IfRequired` and `Never`.
     *
     * > **NOTE:** `rebootSetting` can only be set when `patchMode` is set to `AutomaticByPlatform`.
     */
    declare public readonly rebootSetting: pulumi.Output<string | undefined>;
    /**
     * The name of the Resource Group in which the Windows Virtual Machine should be exist. Changing this forces a new resource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * One or more `secret` blocks as defined below.
     */
    declare public readonly secrets: pulumi.Output<outputs.compute.WindowsVirtualMachineSecret[] | undefined>;
    /**
     * Specifies if Secure Boot and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
     */
    declare public readonly secureBootEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The SKU which should be used for this Virtual Machine, such as `Standard_F2`.
     */
    declare public readonly size: pulumi.Output<string>;
    /**
     * The ID of the Image which this Virtual Machine should be created from. Changing this forces a new resource to be created. Possible Image ID types include `Image ID`s, `Shared Image ID`s, `Shared Image Version ID`s, `Community Gallery Image ID`s, `Community Gallery Image Version ID`s, `Shared Gallery Image ID`s and `Shared Gallery Image Version ID`s.
     *
     * > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
     */
    declare public readonly sourceImageId: pulumi.Output<string | undefined>;
    /**
     * A `sourceImageReference` block as defined below. Changing this forces a new resource to be created.
     *
     * > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
     */
    declare public readonly sourceImageReference: pulumi.Output<outputs.compute.WindowsVirtualMachineSourceImageReference | undefined>;
    /**
     * A mapping of tags which should be assigned to this Virtual Machine.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A `terminationNotification` block as defined below.
     */
    declare public readonly terminationNotification: pulumi.Output<outputs.compute.WindowsVirtualMachineTerminationNotification>;
    /**
     * Specifies the Time Zone which should be used by the Virtual Machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). Changing this forces a new resource to be created.
     */
    declare public readonly timezone: pulumi.Output<string | undefined>;
    /**
     * The Base64-Encoded User Data which should be used for this Virtual Machine.
     */
    declare public readonly userData: pulumi.Output<string | undefined>;
    /**
     * A 128-bit identifier which uniquely identifies this Virtual Machine.
     */
    declare public /*out*/ readonly virtualMachineId: pulumi.Output<string>;
    /**
     * Specifies the Orchestrated Virtual Machine Scale Set that this Virtual Machine should be created within.
     *
     * > **NOTE:** To update `virtualMachineScaleSetId` the Preview Feature `Microsoft.Compute/SingleFDAttachDetachVMToVmss` needs to be enabled, see [the documentation](https://review.learn.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-attach-detach-vm#enroll-in-the-preview) for more information.
     *
     * > **NOTE:** Orchestrated Virtual Machine Scale Sets can be provisioned using [the `azure.compute.OrchestratedVirtualMachineScaleSet` resource](https://www.terraform.io/docs/providers/azurerm/r/orchestrated_virtual_machine_scale_set.html).
     *
     * > **NOTE:** To attach an existing VM to a Virtual Machine Scale Set, the scale set must have `singlePlacementGroup` set to `false`, see [the documentation](https://learn.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-attach-detach-vm?tabs=portal-1%2Cportal-2%2Cportal-3#limitations-for-attaching-an-existing-vm-to-a-scale-set) for more information.
     */
    declare public readonly virtualMachineScaleSetId: pulumi.Output<string | undefined>;
    /**
     * Specifies whether VMAgent Platform Updates is enabled. Defaults to `false`.
     *
     * @deprecated this property has been deprecated due to a breaking change introduced by the Service team, which redefined it as a read-only field within the API
     */
    declare public readonly vmAgentPlatformUpdatesEnabled: pulumi.Output<boolean>;
    /**
     * Specifies if vTPM (virtual Trusted Platform Module) and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
     */
    declare public readonly vtpmEnabled: pulumi.Output<boolean | undefined>;
    /**
     * One or more `winrmListener` blocks as defined below. Changing this forces a new resource to be created.
     */
    declare public readonly winrmListeners: pulumi.Output<outputs.compute.WindowsVirtualMachineWinrmListener[] | undefined>;
    /**
     * * `zones` - (Optional) Specifies the Availability Zone in which this Windows Virtual Machine should be located. Changing this forces a new Windows Virtual Machine to be created.
     */
    declare public readonly zone: pulumi.Output<string | undefined>;

    /**
     * Create a WindowsVirtualMachine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WindowsVirtualMachineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WindowsVirtualMachineArgs | WindowsVirtualMachineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WindowsVirtualMachineState | undefined;
            resourceInputs["additionalCapabilities"] = state?.additionalCapabilities;
            resourceInputs["additionalUnattendContents"] = state?.additionalUnattendContents;
            resourceInputs["adminPassword"] = state?.adminPassword;
            resourceInputs["adminUsername"] = state?.adminUsername;
            resourceInputs["allowExtensionOperations"] = state?.allowExtensionOperations;
            resourceInputs["automaticUpdatesEnabled"] = state?.automaticUpdatesEnabled;
            resourceInputs["availabilitySetId"] = state?.availabilitySetId;
            resourceInputs["bootDiagnostics"] = state?.bootDiagnostics;
            resourceInputs["bypassPlatformSafetyChecksOnUserScheduleEnabled"] = state?.bypassPlatformSafetyChecksOnUserScheduleEnabled;
            resourceInputs["capacityReservationGroupId"] = state?.capacityReservationGroupId;
            resourceInputs["computerName"] = state?.computerName;
            resourceInputs["customData"] = state?.customData;
            resourceInputs["dedicatedHostGroupId"] = state?.dedicatedHostGroupId;
            resourceInputs["dedicatedHostId"] = state?.dedicatedHostId;
            resourceInputs["diskControllerType"] = state?.diskControllerType;
            resourceInputs["edgeZone"] = state?.edgeZone;
            resourceInputs["enableAutomaticUpdates"] = state?.enableAutomaticUpdates;
            resourceInputs["encryptionAtHostEnabled"] = state?.encryptionAtHostEnabled;
            resourceInputs["evictionPolicy"] = state?.evictionPolicy;
            resourceInputs["extensionsTimeBudget"] = state?.extensionsTimeBudget;
            resourceInputs["galleryApplications"] = state?.galleryApplications;
            resourceInputs["hotpatchingEnabled"] = state?.hotpatchingEnabled;
            resourceInputs["identity"] = state?.identity;
            resourceInputs["licenseType"] = state?.licenseType;
            resourceInputs["location"] = state?.location;
            resourceInputs["maxBidPrice"] = state?.maxBidPrice;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkInterfaceIds"] = state?.networkInterfaceIds;
            resourceInputs["osDisk"] = state?.osDisk;
            resourceInputs["osImageNotification"] = state?.osImageNotification;
            resourceInputs["osManagedDiskId"] = state?.osManagedDiskId;
            resourceInputs["patchAssessmentMode"] = state?.patchAssessmentMode;
            resourceInputs["patchMode"] = state?.patchMode;
            resourceInputs["plan"] = state?.plan;
            resourceInputs["platformFaultDomain"] = state?.platformFaultDomain;
            resourceInputs["priority"] = state?.priority;
            resourceInputs["privateIpAddress"] = state?.privateIpAddress;
            resourceInputs["privateIpAddresses"] = state?.privateIpAddresses;
            resourceInputs["provisionVmAgent"] = state?.provisionVmAgent;
            resourceInputs["proximityPlacementGroupId"] = state?.proximityPlacementGroupId;
            resourceInputs["publicIpAddress"] = state?.publicIpAddress;
            resourceInputs["publicIpAddresses"] = state?.publicIpAddresses;
            resourceInputs["rebootSetting"] = state?.rebootSetting;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["secrets"] = state?.secrets;
            resourceInputs["secureBootEnabled"] = state?.secureBootEnabled;
            resourceInputs["size"] = state?.size;
            resourceInputs["sourceImageId"] = state?.sourceImageId;
            resourceInputs["sourceImageReference"] = state?.sourceImageReference;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["terminationNotification"] = state?.terminationNotification;
            resourceInputs["timezone"] = state?.timezone;
            resourceInputs["userData"] = state?.userData;
            resourceInputs["virtualMachineId"] = state?.virtualMachineId;
            resourceInputs["virtualMachineScaleSetId"] = state?.virtualMachineScaleSetId;
            resourceInputs["vmAgentPlatformUpdatesEnabled"] = state?.vmAgentPlatformUpdatesEnabled;
            resourceInputs["vtpmEnabled"] = state?.vtpmEnabled;
            resourceInputs["winrmListeners"] = state?.winrmListeners;
            resourceInputs["zone"] = state?.zone;
        } else {
            const args = argsOrState as WindowsVirtualMachineArgs | undefined;
            if (args?.networkInterfaceIds === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkInterfaceIds'");
            }
            if (args?.osDisk === undefined && !opts.urn) {
                throw new Error("Missing required property 'osDisk'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.size === undefined && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["additionalCapabilities"] = args?.additionalCapabilities;
            resourceInputs["additionalUnattendContents"] = args?.additionalUnattendContents;
            resourceInputs["adminPassword"] = args?.adminPassword ? pulumi.secret(args.adminPassword) : undefined;
            resourceInputs["adminUsername"] = args?.adminUsername;
            resourceInputs["allowExtensionOperations"] = args?.allowExtensionOperations;
            resourceInputs["automaticUpdatesEnabled"] = args?.automaticUpdatesEnabled;
            resourceInputs["availabilitySetId"] = args?.availabilitySetId;
            resourceInputs["bootDiagnostics"] = args?.bootDiagnostics;
            resourceInputs["bypassPlatformSafetyChecksOnUserScheduleEnabled"] = args?.bypassPlatformSafetyChecksOnUserScheduleEnabled;
            resourceInputs["capacityReservationGroupId"] = args?.capacityReservationGroupId;
            resourceInputs["computerName"] = args?.computerName;
            resourceInputs["customData"] = args?.customData ? pulumi.secret(args.customData) : undefined;
            resourceInputs["dedicatedHostGroupId"] = args?.dedicatedHostGroupId;
            resourceInputs["dedicatedHostId"] = args?.dedicatedHostId;
            resourceInputs["diskControllerType"] = args?.diskControllerType;
            resourceInputs["edgeZone"] = args?.edgeZone;
            resourceInputs["enableAutomaticUpdates"] = args?.enableAutomaticUpdates;
            resourceInputs["encryptionAtHostEnabled"] = args?.encryptionAtHostEnabled;
            resourceInputs["evictionPolicy"] = args?.evictionPolicy;
            resourceInputs["extensionsTimeBudget"] = args?.extensionsTimeBudget;
            resourceInputs["galleryApplications"] = args?.galleryApplications;
            resourceInputs["hotpatchingEnabled"] = args?.hotpatchingEnabled;
            resourceInputs["identity"] = args?.identity;
            resourceInputs["licenseType"] = args?.licenseType;
            resourceInputs["location"] = args?.location;
            resourceInputs["maxBidPrice"] = args?.maxBidPrice;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkInterfaceIds"] = args?.networkInterfaceIds;
            resourceInputs["osDisk"] = args?.osDisk;
            resourceInputs["osImageNotification"] = args?.osImageNotification;
            resourceInputs["osManagedDiskId"] = args?.osManagedDiskId;
            resourceInputs["patchAssessmentMode"] = args?.patchAssessmentMode;
            resourceInputs["patchMode"] = args?.patchMode;
            resourceInputs["plan"] = args?.plan;
            resourceInputs["platformFaultDomain"] = args?.platformFaultDomain;
            resourceInputs["priority"] = args?.priority;
            resourceInputs["provisionVmAgent"] = args?.provisionVmAgent;
            resourceInputs["proximityPlacementGroupId"] = args?.proximityPlacementGroupId;
            resourceInputs["rebootSetting"] = args?.rebootSetting;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["secrets"] = args?.secrets;
            resourceInputs["secureBootEnabled"] = args?.secureBootEnabled;
            resourceInputs["size"] = args?.size;
            resourceInputs["sourceImageId"] = args?.sourceImageId;
            resourceInputs["sourceImageReference"] = args?.sourceImageReference;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["terminationNotification"] = args?.terminationNotification;
            resourceInputs["timezone"] = args?.timezone;
            resourceInputs["userData"] = args?.userData;
            resourceInputs["virtualMachineScaleSetId"] = args?.virtualMachineScaleSetId;
            resourceInputs["vmAgentPlatformUpdatesEnabled"] = args?.vmAgentPlatformUpdatesEnabled;
            resourceInputs["vtpmEnabled"] = args?.vtpmEnabled;
            resourceInputs["winrmListeners"] = args?.winrmListeners;
            resourceInputs["zone"] = args?.zone;
            resourceInputs["privateIpAddress"] = undefined /*out*/;
            resourceInputs["privateIpAddresses"] = undefined /*out*/;
            resourceInputs["publicIpAddress"] = undefined /*out*/;
            resourceInputs["publicIpAddresses"] = undefined /*out*/;
            resourceInputs["virtualMachineId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["adminPassword", "customData"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(WindowsVirtualMachine.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WindowsVirtualMachine resources.
 */
export interface WindowsVirtualMachineState {
    /**
     * A `additionalCapabilities` block as defined below.
     */
    additionalCapabilities?: pulumi.Input<inputs.compute.WindowsVirtualMachineAdditionalCapabilities>;
    /**
     * One or more `additionalUnattendContent` blocks as defined below. Changing this forces a new resource to be created.
     */
    additionalUnattendContents?: pulumi.Input<pulumi.Input<inputs.compute.WindowsVirtualMachineAdditionalUnattendContent>[]>;
    /**
     * The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
     *
     * > **Note:** This is required unless using an existing OS Managed Disk by specifying `osManagedDiskId`.
     */
    adminPassword?: pulumi.Input<string>;
    /**
     * The username of the local administrator used for the Virtual Machine. Changing this forces a new resource to be created.
     *
     * > **Note:** This is required unless using an existing OS Managed Disk by specifying `osManagedDiskId`.
     */
    adminUsername?: pulumi.Input<string>;
    /**
     * Should Extension Operations be allowed on this Virtual Machine? Defaults to `true`.
     */
    allowExtensionOperations?: pulumi.Input<boolean>;
    automaticUpdatesEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the ID of the Availability Set in which the Virtual Machine should exist. Changing this forces a new resource to be created.
     */
    availabilitySetId?: pulumi.Input<string>;
    /**
     * A `bootDiagnostics` block as defined below.
     */
    bootDiagnostics?: pulumi.Input<inputs.compute.WindowsVirtualMachineBootDiagnostics>;
    /**
     * Specifies whether to skip platform scheduled patching when a user schedule is associated with the VM. Defaults to `false`.
     *
     * > **NOTE:** `bypassPlatformSafetyChecksOnUserScheduleEnabled` can only be set to `true` when `patchMode` is set to `AutomaticByPlatform`.
     */
    bypassPlatformSafetyChecksOnUserScheduleEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the ID of the Capacity Reservation Group which the Virtual Machine should be allocated to.
     *
     * > **NOTE:** `capacityReservationGroupId` cannot be used with `availabilitySetId` or `proximityPlacementGroupId`
     */
    capacityReservationGroupId?: pulumi.Input<string>;
    /**
     * Specifies the Hostname which should be used for this Virtual Machine. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computerName`, then you must specify `computerName`. Changing this forces a new resource to be created.
     */
    computerName?: pulumi.Input<string>;
    /**
     * The Base64-Encoded Custom Data which should be used for this Virtual Machine. Changing this forces a new resource to be created.
     */
    customData?: pulumi.Input<string>;
    /**
     * The ID of a Dedicated Host Group that this Windows Virtual Machine should be run within. Conflicts with `dedicatedHostId`.
     */
    dedicatedHostGroupId?: pulumi.Input<string>;
    /**
     * The ID of a Dedicated Host where this machine should be run on. Conflicts with `dedicatedHostGroupId`.
     */
    dedicatedHostId?: pulumi.Input<string>;
    /**
     * Specifies the Disk Controller Type used for this Virtual Machine. Possible values are `SCSI` and `NVMe`.
     */
    diskControllerType?: pulumi.Input<string>;
    /**
     * Specifies the Edge Zone within the Azure Region where this Windows Virtual Machine should exist. Changing this forces a new Windows Virtual Machine to be created.
     */
    edgeZone?: pulumi.Input<string>;
    /**
     * Specifies if Automatic Updates are Enabled for the Windows Virtual Machine. Changing this forces a new resource to be created. Defaults to `true`.
     *
     * @deprecated this property has been deprecated in favour of automaticUpdatesEnabled and will be removed in 5.0 of the provider.
     */
    enableAutomaticUpdates?: pulumi.Input<boolean>;
    /**
     * Should all of the disks (including the temp disk) attached to this Virtual Machine be encrypted by enabling Encryption at Host?
     */
    encryptionAtHostEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies what should happen when the Virtual Machine is evicted for price reasons when using a Spot instance. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
     *
     * > **NOTE:** This can only be configured when `priority` is set to `Spot`.
     */
    evictionPolicy?: pulumi.Input<string>;
    /**
     * Specifies the duration allocated for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. Defaults to `PT1H30M`.
     */
    extensionsTimeBudget?: pulumi.Input<string>;
    /**
     * One or more `galleryApplication` blocks as defined below.
     *
     * > **Note** Gallery Application Assignments can be defined either directly on `azure.compute.WindowsVirtualMachine` resource, or using the `azure.compute.GalleryApplicationAssignment` resource - but the two approaches cannot be used together. If both are used with the same Virtual Machine, spurious changes will occur. If `azure.compute.GalleryApplicationAssignment` is used, it's recommended to use `ignoreChanges` for the `galleryApplication` block on the corresponding `azure.compute.WindowsVirtualMachine` resource, to avoid a persistent diff when using this resource.
     */
    galleryApplications?: pulumi.Input<pulumi.Input<inputs.compute.WindowsVirtualMachineGalleryApplication>[]>;
    /**
     * Should the VM be patched without requiring a reboot? Possible values are `true` or `false`. Defaults to `false`. For more information about hot patching please see the [product documentation](https://docs.microsoft.com/azure/automanage/automanage-hotpatch).
     *
     * > **NOTE:** Hotpatching can only be enabled if the `patchMode` is set to `AutomaticByPlatform`, the `provisionVmAgent` is set to `true`, your `sourceImageReference` references a hotpatching enabled image, and the VM's `size` is set to a [Azure generation 2](https://docs.microsoft.com/azure/virtual-machines/generation-2#generation-2-vm-sizes) VM. An example of how to correctly configure a Windows Virtual Machine to use the `hotpatchingEnabled` field can be found in the `./examples/virtual-machines/windows/hotpatching-enabled` directory within the GitHub Repository.
     */
    hotpatchingEnabled?: pulumi.Input<boolean>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.compute.WindowsVirtualMachineIdentity>;
    /**
     * Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/windows-server/get-started/azure-hybrid-benefit)) which should be used for this Virtual Machine. Possible values are `None`, `Windows_Client` and `Windows_Server`.
     */
    licenseType?: pulumi.Input<string>;
    /**
     * The Azure location where the Windows Virtual Machine should exist. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The maximum price you're willing to pay for this Virtual Machine, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machine will be evicted using the `evictionPolicy`. Defaults to `-1`, which means that the Virtual Machine should not be evicted for price reasons.
     *
     * > **NOTE:** This can only be configured when `priority` is set to `Spot`.
     */
    maxBidPrice?: pulumi.Input<number>;
    /**
     * The name of the Windows Virtual Machine. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * . A list of Network Interface IDs which should be attached to this Virtual Machine. The first Network Interface ID in this list will be the Primary Network Interface on the Virtual Machine.
     */
    networkInterfaceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An `osDisk` block as defined below.
     */
    osDisk?: pulumi.Input<inputs.compute.WindowsVirtualMachineOsDisk>;
    /**
     * A `osImageNotification` block as defined below.
     */
    osImageNotification?: pulumi.Input<inputs.compute.WindowsVirtualMachineOsImageNotification>;
    /**
     * The ID of an existing Managed Disk to use as the OS Disk for this Windows Virtual Machine.
     *
     * > **Note:** When specifying an existing Managed Disk it is not currently possible to subsequently manage the Operating System Profile properties: `adminUsername`, `adminPassword`, `bypassPlatformSafetyChecksOnUserScheduleEnabled`, `computerName`, `customData`, `provisionVmAgent`, `patchMode`, `patchAssessmentMode`, or `rebootSetting`.
     */
    osManagedDiskId?: pulumi.Input<string>;
    /**
     * Specifies the mode of VM Guest Patching for the Virtual Machine. Possible values are `AutomaticByPlatform` or `ImageDefault`. Defaults to `ImageDefault`.
     *
     * > **NOTE:** If the `patchAssessmentMode` is set to `AutomaticByPlatform` then the `provisionVmAgent` field must be set to `true`.
     */
    patchAssessmentMode?: pulumi.Input<string>;
    /**
     * Specifies the mode of in-guest patching to this Windows Virtual Machine. Possible values are `Manual`, `AutomaticByOS` and `AutomaticByPlatform`. Defaults to `AutomaticByOS`. For more information on patch modes please see the [product documentation](https://docs.microsoft.com/azure/virtual-machines/automatic-vm-guest-patching#patch-orchestration-modes).
     *
     * > **NOTE:** If `patchMode` is set to `AutomaticByPlatform` then `provisionVmAgent` must also be set to `true`. If the Virtual Machine is using a hotpatching enabled image the `patchMode` must always be set to `AutomaticByPlatform`.
     */
    patchMode?: pulumi.Input<string>;
    /**
     * A `plan` block as defined below. Changing this forces a new resource to be created.
     */
    plan?: pulumi.Input<inputs.compute.WindowsVirtualMachinePlan>;
    /**
     * Specifies the Platform Fault Domain in which this Windows Virtual Machine should be created. Defaults to `-1`, which means this will be automatically assigned to a fault domain that best maintains balance across the available fault domains. Changing this forces a new Windows Virtual Machine to be created.
     */
    platformFaultDomain?: pulumi.Input<number>;
    /**
     * Specifies the priority of this Virtual Machine. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this forces a new resource to be created.
     */
    priority?: pulumi.Input<string>;
    /**
     * The Primary Private IP Address assigned to this Virtual Machine.
     */
    privateIpAddress?: pulumi.Input<string>;
    /**
     * A list of Private IP Addresses assigned to this Virtual Machine.
     */
    privateIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Should the Azure VM Agent be provisioned on this Virtual Machine? Defaults to `true`. Changing this forces a new resource to be created.
     *
     * > **NOTE:** If `provisionVmAgent` is set to `false` then `allowExtensionOperations` must also be set to `false`.
     */
    provisionVmAgent?: pulumi.Input<boolean>;
    /**
     * The ID of the Proximity Placement Group which the Virtual Machine should be assigned to.
     */
    proximityPlacementGroupId?: pulumi.Input<string>;
    /**
     * The Primary Public IP Address assigned to this Virtual Machine.
     */
    publicIpAddress?: pulumi.Input<string>;
    /**
     * A list of the Public IP Addresses assigned to this Virtual Machine.
     */
    publicIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the reboot setting for platform scheduled patching. Possible values are `Always`, `IfRequired` and `Never`.
     *
     * > **NOTE:** `rebootSetting` can only be set when `patchMode` is set to `AutomaticByPlatform`.
     */
    rebootSetting?: pulumi.Input<string>;
    /**
     * The name of the Resource Group in which the Windows Virtual Machine should be exist. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * One or more `secret` blocks as defined below.
     */
    secrets?: pulumi.Input<pulumi.Input<inputs.compute.WindowsVirtualMachineSecret>[]>;
    /**
     * Specifies if Secure Boot and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
     */
    secureBootEnabled?: pulumi.Input<boolean>;
    /**
     * The SKU which should be used for this Virtual Machine, such as `Standard_F2`.
     */
    size?: pulumi.Input<string>;
    /**
     * The ID of the Image which this Virtual Machine should be created from. Changing this forces a new resource to be created. Possible Image ID types include `Image ID`s, `Shared Image ID`s, `Shared Image Version ID`s, `Community Gallery Image ID`s, `Community Gallery Image Version ID`s, `Shared Gallery Image ID`s and `Shared Gallery Image Version ID`s.
     *
     * > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
     */
    sourceImageId?: pulumi.Input<string>;
    /**
     * A `sourceImageReference` block as defined below. Changing this forces a new resource to be created.
     *
     * > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
     */
    sourceImageReference?: pulumi.Input<inputs.compute.WindowsVirtualMachineSourceImageReference>;
    /**
     * A mapping of tags which should be assigned to this Virtual Machine.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A `terminationNotification` block as defined below.
     */
    terminationNotification?: pulumi.Input<inputs.compute.WindowsVirtualMachineTerminationNotification>;
    /**
     * Specifies the Time Zone which should be used by the Virtual Machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). Changing this forces a new resource to be created.
     */
    timezone?: pulumi.Input<string>;
    /**
     * The Base64-Encoded User Data which should be used for this Virtual Machine.
     */
    userData?: pulumi.Input<string>;
    /**
     * A 128-bit identifier which uniquely identifies this Virtual Machine.
     */
    virtualMachineId?: pulumi.Input<string>;
    /**
     * Specifies the Orchestrated Virtual Machine Scale Set that this Virtual Machine should be created within.
     *
     * > **NOTE:** To update `virtualMachineScaleSetId` the Preview Feature `Microsoft.Compute/SingleFDAttachDetachVMToVmss` needs to be enabled, see [the documentation](https://review.learn.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-attach-detach-vm#enroll-in-the-preview) for more information.
     *
     * > **NOTE:** Orchestrated Virtual Machine Scale Sets can be provisioned using [the `azure.compute.OrchestratedVirtualMachineScaleSet` resource](https://www.terraform.io/docs/providers/azurerm/r/orchestrated_virtual_machine_scale_set.html).
     *
     * > **NOTE:** To attach an existing VM to a Virtual Machine Scale Set, the scale set must have `singlePlacementGroup` set to `false`, see [the documentation](https://learn.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-attach-detach-vm?tabs=portal-1%2Cportal-2%2Cportal-3#limitations-for-attaching-an-existing-vm-to-a-scale-set) for more information.
     */
    virtualMachineScaleSetId?: pulumi.Input<string>;
    /**
     * Specifies whether VMAgent Platform Updates is enabled. Defaults to `false`.
     *
     * @deprecated this property has been deprecated due to a breaking change introduced by the Service team, which redefined it as a read-only field within the API
     */
    vmAgentPlatformUpdatesEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies if vTPM (virtual Trusted Platform Module) and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
     */
    vtpmEnabled?: pulumi.Input<boolean>;
    /**
     * One or more `winrmListener` blocks as defined below. Changing this forces a new resource to be created.
     */
    winrmListeners?: pulumi.Input<pulumi.Input<inputs.compute.WindowsVirtualMachineWinrmListener>[]>;
    /**
     * * `zones` - (Optional) Specifies the Availability Zone in which this Windows Virtual Machine should be located. Changing this forces a new Windows Virtual Machine to be created.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WindowsVirtualMachine resource.
 */
export interface WindowsVirtualMachineArgs {
    /**
     * A `additionalCapabilities` block as defined below.
     */
    additionalCapabilities?: pulumi.Input<inputs.compute.WindowsVirtualMachineAdditionalCapabilities>;
    /**
     * One or more `additionalUnattendContent` blocks as defined below. Changing this forces a new resource to be created.
     */
    additionalUnattendContents?: pulumi.Input<pulumi.Input<inputs.compute.WindowsVirtualMachineAdditionalUnattendContent>[]>;
    /**
     * The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
     *
     * > **Note:** This is required unless using an existing OS Managed Disk by specifying `osManagedDiskId`.
     */
    adminPassword?: pulumi.Input<string>;
    /**
     * The username of the local administrator used for the Virtual Machine. Changing this forces a new resource to be created.
     *
     * > **Note:** This is required unless using an existing OS Managed Disk by specifying `osManagedDiskId`.
     */
    adminUsername?: pulumi.Input<string>;
    /**
     * Should Extension Operations be allowed on this Virtual Machine? Defaults to `true`.
     */
    allowExtensionOperations?: pulumi.Input<boolean>;
    automaticUpdatesEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the ID of the Availability Set in which the Virtual Machine should exist. Changing this forces a new resource to be created.
     */
    availabilitySetId?: pulumi.Input<string>;
    /**
     * A `bootDiagnostics` block as defined below.
     */
    bootDiagnostics?: pulumi.Input<inputs.compute.WindowsVirtualMachineBootDiagnostics>;
    /**
     * Specifies whether to skip platform scheduled patching when a user schedule is associated with the VM. Defaults to `false`.
     *
     * > **NOTE:** `bypassPlatformSafetyChecksOnUserScheduleEnabled` can only be set to `true` when `patchMode` is set to `AutomaticByPlatform`.
     */
    bypassPlatformSafetyChecksOnUserScheduleEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the ID of the Capacity Reservation Group which the Virtual Machine should be allocated to.
     *
     * > **NOTE:** `capacityReservationGroupId` cannot be used with `availabilitySetId` or `proximityPlacementGroupId`
     */
    capacityReservationGroupId?: pulumi.Input<string>;
    /**
     * Specifies the Hostname which should be used for this Virtual Machine. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computerName`, then you must specify `computerName`. Changing this forces a new resource to be created.
     */
    computerName?: pulumi.Input<string>;
    /**
     * The Base64-Encoded Custom Data which should be used for this Virtual Machine. Changing this forces a new resource to be created.
     */
    customData?: pulumi.Input<string>;
    /**
     * The ID of a Dedicated Host Group that this Windows Virtual Machine should be run within. Conflicts with `dedicatedHostId`.
     */
    dedicatedHostGroupId?: pulumi.Input<string>;
    /**
     * The ID of a Dedicated Host where this machine should be run on. Conflicts with `dedicatedHostGroupId`.
     */
    dedicatedHostId?: pulumi.Input<string>;
    /**
     * Specifies the Disk Controller Type used for this Virtual Machine. Possible values are `SCSI` and `NVMe`.
     */
    diskControllerType?: pulumi.Input<string>;
    /**
     * Specifies the Edge Zone within the Azure Region where this Windows Virtual Machine should exist. Changing this forces a new Windows Virtual Machine to be created.
     */
    edgeZone?: pulumi.Input<string>;
    /**
     * Specifies if Automatic Updates are Enabled for the Windows Virtual Machine. Changing this forces a new resource to be created. Defaults to `true`.
     *
     * @deprecated this property has been deprecated in favour of automaticUpdatesEnabled and will be removed in 5.0 of the provider.
     */
    enableAutomaticUpdates?: pulumi.Input<boolean>;
    /**
     * Should all of the disks (including the temp disk) attached to this Virtual Machine be encrypted by enabling Encryption at Host?
     */
    encryptionAtHostEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies what should happen when the Virtual Machine is evicted for price reasons when using a Spot instance. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
     *
     * > **NOTE:** This can only be configured when `priority` is set to `Spot`.
     */
    evictionPolicy?: pulumi.Input<string>;
    /**
     * Specifies the duration allocated for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. Defaults to `PT1H30M`.
     */
    extensionsTimeBudget?: pulumi.Input<string>;
    /**
     * One or more `galleryApplication` blocks as defined below.
     *
     * > **Note** Gallery Application Assignments can be defined either directly on `azure.compute.WindowsVirtualMachine` resource, or using the `azure.compute.GalleryApplicationAssignment` resource - but the two approaches cannot be used together. If both are used with the same Virtual Machine, spurious changes will occur. If `azure.compute.GalleryApplicationAssignment` is used, it's recommended to use `ignoreChanges` for the `galleryApplication` block on the corresponding `azure.compute.WindowsVirtualMachine` resource, to avoid a persistent diff when using this resource.
     */
    galleryApplications?: pulumi.Input<pulumi.Input<inputs.compute.WindowsVirtualMachineGalleryApplication>[]>;
    /**
     * Should the VM be patched without requiring a reboot? Possible values are `true` or `false`. Defaults to `false`. For more information about hot patching please see the [product documentation](https://docs.microsoft.com/azure/automanage/automanage-hotpatch).
     *
     * > **NOTE:** Hotpatching can only be enabled if the `patchMode` is set to `AutomaticByPlatform`, the `provisionVmAgent` is set to `true`, your `sourceImageReference` references a hotpatching enabled image, and the VM's `size` is set to a [Azure generation 2](https://docs.microsoft.com/azure/virtual-machines/generation-2#generation-2-vm-sizes) VM. An example of how to correctly configure a Windows Virtual Machine to use the `hotpatchingEnabled` field can be found in the `./examples/virtual-machines/windows/hotpatching-enabled` directory within the GitHub Repository.
     */
    hotpatchingEnabled?: pulumi.Input<boolean>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.compute.WindowsVirtualMachineIdentity>;
    /**
     * Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/windows-server/get-started/azure-hybrid-benefit)) which should be used for this Virtual Machine. Possible values are `None`, `Windows_Client` and `Windows_Server`.
     */
    licenseType?: pulumi.Input<string>;
    /**
     * The Azure location where the Windows Virtual Machine should exist. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The maximum price you're willing to pay for this Virtual Machine, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machine will be evicted using the `evictionPolicy`. Defaults to `-1`, which means that the Virtual Machine should not be evicted for price reasons.
     *
     * > **NOTE:** This can only be configured when `priority` is set to `Spot`.
     */
    maxBidPrice?: pulumi.Input<number>;
    /**
     * The name of the Windows Virtual Machine. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * . A list of Network Interface IDs which should be attached to this Virtual Machine. The first Network Interface ID in this list will be the Primary Network Interface on the Virtual Machine.
     */
    networkInterfaceIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An `osDisk` block as defined below.
     */
    osDisk: pulumi.Input<inputs.compute.WindowsVirtualMachineOsDisk>;
    /**
     * A `osImageNotification` block as defined below.
     */
    osImageNotification?: pulumi.Input<inputs.compute.WindowsVirtualMachineOsImageNotification>;
    /**
     * The ID of an existing Managed Disk to use as the OS Disk for this Windows Virtual Machine.
     *
     * > **Note:** When specifying an existing Managed Disk it is not currently possible to subsequently manage the Operating System Profile properties: `adminUsername`, `adminPassword`, `bypassPlatformSafetyChecksOnUserScheduleEnabled`, `computerName`, `customData`, `provisionVmAgent`, `patchMode`, `patchAssessmentMode`, or `rebootSetting`.
     */
    osManagedDiskId?: pulumi.Input<string>;
    /**
     * Specifies the mode of VM Guest Patching for the Virtual Machine. Possible values are `AutomaticByPlatform` or `ImageDefault`. Defaults to `ImageDefault`.
     *
     * > **NOTE:** If the `patchAssessmentMode` is set to `AutomaticByPlatform` then the `provisionVmAgent` field must be set to `true`.
     */
    patchAssessmentMode?: pulumi.Input<string>;
    /**
     * Specifies the mode of in-guest patching to this Windows Virtual Machine. Possible values are `Manual`, `AutomaticByOS` and `AutomaticByPlatform`. Defaults to `AutomaticByOS`. For more information on patch modes please see the [product documentation](https://docs.microsoft.com/azure/virtual-machines/automatic-vm-guest-patching#patch-orchestration-modes).
     *
     * > **NOTE:** If `patchMode` is set to `AutomaticByPlatform` then `provisionVmAgent` must also be set to `true`. If the Virtual Machine is using a hotpatching enabled image the `patchMode` must always be set to `AutomaticByPlatform`.
     */
    patchMode?: pulumi.Input<string>;
    /**
     * A `plan` block as defined below. Changing this forces a new resource to be created.
     */
    plan?: pulumi.Input<inputs.compute.WindowsVirtualMachinePlan>;
    /**
     * Specifies the Platform Fault Domain in which this Windows Virtual Machine should be created. Defaults to `-1`, which means this will be automatically assigned to a fault domain that best maintains balance across the available fault domains. Changing this forces a new Windows Virtual Machine to be created.
     */
    platformFaultDomain?: pulumi.Input<number>;
    /**
     * Specifies the priority of this Virtual Machine. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this forces a new resource to be created.
     */
    priority?: pulumi.Input<string>;
    /**
     * Should the Azure VM Agent be provisioned on this Virtual Machine? Defaults to `true`. Changing this forces a new resource to be created.
     *
     * > **NOTE:** If `provisionVmAgent` is set to `false` then `allowExtensionOperations` must also be set to `false`.
     */
    provisionVmAgent?: pulumi.Input<boolean>;
    /**
     * The ID of the Proximity Placement Group which the Virtual Machine should be assigned to.
     */
    proximityPlacementGroupId?: pulumi.Input<string>;
    /**
     * Specifies the reboot setting for platform scheduled patching. Possible values are `Always`, `IfRequired` and `Never`.
     *
     * > **NOTE:** `rebootSetting` can only be set when `patchMode` is set to `AutomaticByPlatform`.
     */
    rebootSetting?: pulumi.Input<string>;
    /**
     * The name of the Resource Group in which the Windows Virtual Machine should be exist. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * One or more `secret` blocks as defined below.
     */
    secrets?: pulumi.Input<pulumi.Input<inputs.compute.WindowsVirtualMachineSecret>[]>;
    /**
     * Specifies if Secure Boot and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
     */
    secureBootEnabled?: pulumi.Input<boolean>;
    /**
     * The SKU which should be used for this Virtual Machine, such as `Standard_F2`.
     */
    size: pulumi.Input<string>;
    /**
     * The ID of the Image which this Virtual Machine should be created from. Changing this forces a new resource to be created. Possible Image ID types include `Image ID`s, `Shared Image ID`s, `Shared Image Version ID`s, `Community Gallery Image ID`s, `Community Gallery Image Version ID`s, `Shared Gallery Image ID`s and `Shared Gallery Image Version ID`s.
     *
     * > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
     */
    sourceImageId?: pulumi.Input<string>;
    /**
     * A `sourceImageReference` block as defined below. Changing this forces a new resource to be created.
     *
     * > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
     */
    sourceImageReference?: pulumi.Input<inputs.compute.WindowsVirtualMachineSourceImageReference>;
    /**
     * A mapping of tags which should be assigned to this Virtual Machine.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A `terminationNotification` block as defined below.
     */
    terminationNotification?: pulumi.Input<inputs.compute.WindowsVirtualMachineTerminationNotification>;
    /**
     * Specifies the Time Zone which should be used by the Virtual Machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). Changing this forces a new resource to be created.
     */
    timezone?: pulumi.Input<string>;
    /**
     * The Base64-Encoded User Data which should be used for this Virtual Machine.
     */
    userData?: pulumi.Input<string>;
    /**
     * Specifies the Orchestrated Virtual Machine Scale Set that this Virtual Machine should be created within.
     *
     * > **NOTE:** To update `virtualMachineScaleSetId` the Preview Feature `Microsoft.Compute/SingleFDAttachDetachVMToVmss` needs to be enabled, see [the documentation](https://review.learn.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-attach-detach-vm#enroll-in-the-preview) for more information.
     *
     * > **NOTE:** Orchestrated Virtual Machine Scale Sets can be provisioned using [the `azure.compute.OrchestratedVirtualMachineScaleSet` resource](https://www.terraform.io/docs/providers/azurerm/r/orchestrated_virtual_machine_scale_set.html).
     *
     * > **NOTE:** To attach an existing VM to a Virtual Machine Scale Set, the scale set must have `singlePlacementGroup` set to `false`, see [the documentation](https://learn.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-attach-detach-vm?tabs=portal-1%2Cportal-2%2Cportal-3#limitations-for-attaching-an-existing-vm-to-a-scale-set) for more information.
     */
    virtualMachineScaleSetId?: pulumi.Input<string>;
    /**
     * Specifies whether VMAgent Platform Updates is enabled. Defaults to `false`.
     *
     * @deprecated this property has been deprecated due to a breaking change introduced by the Service team, which redefined it as a read-only field within the API
     */
    vmAgentPlatformUpdatesEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies if vTPM (virtual Trusted Platform Module) and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
     */
    vtpmEnabled?: pulumi.Input<boolean>;
    /**
     * One or more `winrmListener` blocks as defined below. Changing this forces a new resource to be created.
     */
    winrmListeners?: pulumi.Input<pulumi.Input<inputs.compute.WindowsVirtualMachineWinrmListener>[]>;
    /**
     * * `zones` - (Optional) Specifies the Availability Zone in which this Windows Virtual Machine should be located. Changing this forces a new Windows Virtual Machine to be created.
     */
    zone?: pulumi.Input<string>;
}
