// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Gets information about an existing Confidential Ledger.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.compute.getConfidentialLedger({
 *     name: "example-ledger",
 *     resourceGroupName: "example-resources",
 * });
 * export const ledgerEndpoint = current.then(current => current.ledgerEndpoint);
 * ```
 */
export function getConfidentialLedger(args: GetConfidentialLedgerArgs, opts?: pulumi.InvokeOptions): Promise<GetConfidentialLedgerResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("azure:compute/getConfidentialLedger:getConfidentialLedger", {
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

/**
 * A collection of arguments for invoking getConfidentialLedger.
 */
export interface GetConfidentialLedgerArgs {
    /**
     * Specifies the name of this Confidential Ledger.
     */
    name: string;
    /**
     * Specifies the name of the Resource Group where this Confidential Ledger exists.
     */
    resourceGroupName: string;
}

/**
 * A collection of values returned by getConfidentialLedger.
 */
export interface GetConfidentialLedgerResult {
    readonly azureadBasedServicePrincipals: outputs.compute.GetConfidentialLedgerAzureadBasedServicePrincipal[];
    readonly certificateBasedSecurityPrincipals: outputs.compute.GetConfidentialLedgerCertificateBasedSecurityPrincipal[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The Identity Service Endpoint for this Confidential Ledger.
     */
    readonly identityServiceEndpoint: string;
    /**
     * The Endpoint for this Confidential Ledger.
     */
    readonly ledgerEndpoint: string;
    /**
     * The type of Confidential Ledger.
     */
    readonly ledgerType: string;
    /**
     * The supported Azure location where the Confidential Ledger exists.
     */
    readonly location: string;
    readonly name: string;
    readonly resourceGroupName: string;
    /**
     * A mapping of tags to assign to the Confidential Ledger.
     */
    readonly tags: {[key: string]: string};
}

export function getConfidentialLedgerOutput(args: GetConfidentialLedgerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetConfidentialLedgerResult> {
    return pulumi.output(args).apply(a => getConfidentialLedger(a, opts))
}

/**
 * A collection of arguments for invoking getConfidentialLedger.
 */
export interface GetConfidentialLedgerOutputArgs {
    /**
     * Specifies the name of this Confidential Ledger.
     */
    name: pulumi.Input<string>;
    /**
     * Specifies the name of the Resource Group where this Confidential Ledger exists.
     */
    resourceGroupName: pulumi.Input<string>;
}
