// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a managed disk.
 *
 * ## Example Usage
 * ### With Create Empty
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleManagedDisk = new azure.compute.ManagedDisk("exampleManagedDisk", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     storageAccountType: "Standard_LRS",
 *     createOption: "Empty",
 *     diskSizeGb: 1,
 *     tags: {
 *         environment: "staging",
 *     },
 * });
 * ```
 * ### With Create Copy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {location: "West Europe"});
 * const source = new azure.compute.ManagedDisk("source", {
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     storageAccountType: "Standard_LRS",
 *     createOption: "Empty",
 *     diskSizeGb: 1,
 *     tags: {
 *         environment: "staging",
 *     },
 * });
 * const copy = new azure.compute.ManagedDisk("copy", {
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     storageAccountType: "Standard_LRS",
 *     createOption: "Copy",
 *     sourceResourceId: source.id,
 *     diskSizeGb: 1,
 *     tags: {
 *         environment: "staging",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Managed Disks can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:compute/managedDisk:ManagedDisk example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/disks/manageddisk1
 * ```
 */
export class ManagedDisk extends pulumi.CustomResource {
    /**
     * Get an existing ManagedDisk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagedDiskState, opts?: pulumi.CustomResourceOptions): ManagedDisk {
        return new ManagedDisk(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:compute/managedDisk:ManagedDisk';

    /**
     * Returns true if the given object is an instance of ManagedDisk.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagedDisk {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedDisk.__pulumiType;
    }

    /**
     * The method to use when creating the managed disk. Changing this forces a new resource to be created. Possible values include:
     */
    public readonly createOption!: pulumi.Output<string>;
    /**
     * The ID of the disk access resource for using private endpoints on disks.
     */
    public readonly diskAccessId!: pulumi.Output<string | undefined>;
    /**
     * The ID of a Disk Encryption Set which should be used to encrypt this Managed Disk. Conflicts with `secureVmDiskEncryptionSetId`.
     */
    public readonly diskEncryptionSetId!: pulumi.Output<string | undefined>;
    /**
     * The number of IOPS allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. One operation can transfer between 4k and 256k bytes.
     */
    public readonly diskIopsReadOnly!: pulumi.Output<number>;
    /**
     * The number of IOPS allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. One operation can transfer between 4k and 256k bytes.
     */
    public readonly diskIopsReadWrite!: pulumi.Output<number>;
    /**
     * The bandwidth allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. MBps means millions of bytes per second.
     */
    public readonly diskMbpsReadOnly!: pulumi.Output<number>;
    /**
     * The bandwidth allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. MBps means millions of bytes per second.
     */
    public readonly diskMbpsReadWrite!: pulumi.Output<number>;
    /**
     * (Optional, Required for a new managed disk) Specifies the size of the managed disk to create in gigabytes. If `createOption` is `Copy` or `FromImage`, then the value must be equal to or greater than the source's size. The size can only be increased.
     */
    public readonly diskSizeGb!: pulumi.Output<number>;
    /**
     * Specifies the Edge Zone within the Azure Region where this Managed Disk should exist. Changing this forces a new Managed Disk to be created.
     */
    public readonly edgeZone!: pulumi.Output<string | undefined>;
    /**
     * A `encryptionSettings` block as defined below.
     */
    public readonly encryptionSettings!: pulumi.Output<outputs.compute.ManagedDiskEncryptionSettings | undefined>;
    /**
     * ID of a Gallery Image Version to copy when `createOption` is `FromImage`. This field cannot be specified if imageReferenceId is specified. Changing this forces a new resource to be created.
     */
    public readonly galleryImageReferenceId!: pulumi.Output<string | undefined>;
    /**
     * The HyperV Generation of the Disk when the source of an `Import` or `Copy` operation targets a source that contains an operating system. Possible values are `V1` and `V2`. Changing this forces a new resource to be created.
     */
    public readonly hyperVGeneration!: pulumi.Output<string | undefined>;
    /**
     * ID of an existing platform/marketplace disk image to copy when `createOption` is `FromImage`. This field cannot be specified if galleryImageReferenceId is specified. Changing this forces a new resource to be created.
     */
    public readonly imageReferenceId!: pulumi.Output<string | undefined>;
    /**
     * Specified the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Logical Sector Size. Possible values are: `512` and `4096`. Defaults to `4096`. Changing this forces a new resource to be created.
     */
    public readonly logicalSectorSize!: pulumi.Output<number>;
    /**
     * The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
     */
    public readonly maxShares!: pulumi.Output<number>;
    /**
     * Specifies the name of the Managed Disk. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Policy for accessing the disk via network. Allowed values are `AllowAll`, `AllowPrivate`, and `DenyAll`.
     */
    public readonly networkAccessPolicy!: pulumi.Output<string | undefined>;
    /**
     * Specifies if On-Demand Bursting is enabled for the Managed Disk.
     */
    public readonly onDemandBurstingEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specify a value when the source of an `Import` or `Copy` operation targets a source that contains an operating system. Valid values are `Linux` or `Windows`.
     */
    public readonly osType!: pulumi.Output<string | undefined>;
    /**
     * Whether it is allowed to access the disk via public network. Defaults to `true`.
     */
    public readonly publicNetworkAccessEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the Resource Group where the Managed Disk should exist. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * The ID of the Disk Encryption Set which should be used to Encrypt this OS Disk when the Virtual Machine is a Confidential VM. Conflicts with `diskEncryptionSetId`. Changing this forces a new resource to be created.
     */
    public readonly secureVmDiskEncryptionSetId!: pulumi.Output<string | undefined>;
    /**
     * Security Type of the Managed Disk when it is used for a Confidential VM. Possible values are `ConfidentialVM_VMGuestStateOnlyEncryptedWithPlatformKey`, `ConfidentialVM_DiskEncryptedWithPlatformKey` and `ConfidentialVM_DiskEncryptedWithCustomerKey`. Changing this forces a new resource to be created.
     */
    public readonly securityType!: pulumi.Output<string | undefined>;
    /**
     * The ID of an existing Managed Disk or Snapshot to copy when `createOption` is `Copy` or the recovery point to restore when `createOption` is `Restore`. Changing this forces a new resource to be created.
     */
    public readonly sourceResourceId!: pulumi.Output<string | undefined>;
    /**
     * URI to a valid VHD file to be used when `createOption` is `Import`. Changing this forces a new resource to be created.
     */
    public readonly sourceUri!: pulumi.Output<string>;
    /**
     * The ID of the Storage Account where the `sourceUri` is located. Required when `createOption` is set to `Import`.  Changing this forces a new resource to be created.
     */
    public readonly storageAccountId!: pulumi.Output<string | undefined>;
    /**
     * The type of storage to use for the managed disk. Possible values are `Standard_LRS`, `StandardSSD_ZRS`, `Premium_LRS`, `PremiumV2_LRS`, `Premium_ZRS`, `StandardSSD_LRS` or `UltraSSD_LRS`.
     */
    public readonly storageAccountType!: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The disk performance tier to use. Possible values are documented [here](https://docs.microsoft.com/azure/virtual-machines/disks-change-performance). This feature is currently supported only for premium SSDs.
     */
    public readonly tier!: pulumi.Output<string>;
    /**
     * Specifies if Trusted Launch is enabled for the Managed Disk. Changing this forces a new resource to be created.
     */
    public readonly trustedLaunchEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the size of the managed disk to create in bytes. Required when `createOption` is `Upload`. The value must be equal to the source disk to be copied in bytes. Source disk size could be calculated with `ls -l` or `wc -c`. More information can be found at [Copy a managed disk](https://learn.microsoft.com/en-us/azure/virtual-machines/linux/disks-upload-vhd-to-managed-disk-cli#copy-a-managed-disk). Changing this forces a new resource to be created.
     */
    public readonly uploadSizeBytes!: pulumi.Output<number | undefined>;
    /**
     * Specifies the Availability Zone in which this Managed Disk should be located. Changing this property forces a new resource to be created.
     */
    public readonly zone!: pulumi.Output<string | undefined>;

    /**
     * Create a ManagedDisk resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagedDiskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagedDiskArgs | ManagedDiskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagedDiskState | undefined;
            resourceInputs["createOption"] = state ? state.createOption : undefined;
            resourceInputs["diskAccessId"] = state ? state.diskAccessId : undefined;
            resourceInputs["diskEncryptionSetId"] = state ? state.diskEncryptionSetId : undefined;
            resourceInputs["diskIopsReadOnly"] = state ? state.diskIopsReadOnly : undefined;
            resourceInputs["diskIopsReadWrite"] = state ? state.diskIopsReadWrite : undefined;
            resourceInputs["diskMbpsReadOnly"] = state ? state.diskMbpsReadOnly : undefined;
            resourceInputs["diskMbpsReadWrite"] = state ? state.diskMbpsReadWrite : undefined;
            resourceInputs["diskSizeGb"] = state ? state.diskSizeGb : undefined;
            resourceInputs["edgeZone"] = state ? state.edgeZone : undefined;
            resourceInputs["encryptionSettings"] = state ? state.encryptionSettings : undefined;
            resourceInputs["galleryImageReferenceId"] = state ? state.galleryImageReferenceId : undefined;
            resourceInputs["hyperVGeneration"] = state ? state.hyperVGeneration : undefined;
            resourceInputs["imageReferenceId"] = state ? state.imageReferenceId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["logicalSectorSize"] = state ? state.logicalSectorSize : undefined;
            resourceInputs["maxShares"] = state ? state.maxShares : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkAccessPolicy"] = state ? state.networkAccessPolicy : undefined;
            resourceInputs["onDemandBurstingEnabled"] = state ? state.onDemandBurstingEnabled : undefined;
            resourceInputs["osType"] = state ? state.osType : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["secureVmDiskEncryptionSetId"] = state ? state.secureVmDiskEncryptionSetId : undefined;
            resourceInputs["securityType"] = state ? state.securityType : undefined;
            resourceInputs["sourceResourceId"] = state ? state.sourceResourceId : undefined;
            resourceInputs["sourceUri"] = state ? state.sourceUri : undefined;
            resourceInputs["storageAccountId"] = state ? state.storageAccountId : undefined;
            resourceInputs["storageAccountType"] = state ? state.storageAccountType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tier"] = state ? state.tier : undefined;
            resourceInputs["trustedLaunchEnabled"] = state ? state.trustedLaunchEnabled : undefined;
            resourceInputs["uploadSizeBytes"] = state ? state.uploadSizeBytes : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as ManagedDiskArgs | undefined;
            if ((!args || args.createOption === undefined) && !opts.urn) {
                throw new Error("Missing required property 'createOption'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.storageAccountType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageAccountType'");
            }
            resourceInputs["createOption"] = args ? args.createOption : undefined;
            resourceInputs["diskAccessId"] = args ? args.diskAccessId : undefined;
            resourceInputs["diskEncryptionSetId"] = args ? args.diskEncryptionSetId : undefined;
            resourceInputs["diskIopsReadOnly"] = args ? args.diskIopsReadOnly : undefined;
            resourceInputs["diskIopsReadWrite"] = args ? args.diskIopsReadWrite : undefined;
            resourceInputs["diskMbpsReadOnly"] = args ? args.diskMbpsReadOnly : undefined;
            resourceInputs["diskMbpsReadWrite"] = args ? args.diskMbpsReadWrite : undefined;
            resourceInputs["diskSizeGb"] = args ? args.diskSizeGb : undefined;
            resourceInputs["edgeZone"] = args ? args.edgeZone : undefined;
            resourceInputs["encryptionSettings"] = args ? args.encryptionSettings : undefined;
            resourceInputs["galleryImageReferenceId"] = args ? args.galleryImageReferenceId : undefined;
            resourceInputs["hyperVGeneration"] = args ? args.hyperVGeneration : undefined;
            resourceInputs["imageReferenceId"] = args ? args.imageReferenceId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["logicalSectorSize"] = args ? args.logicalSectorSize : undefined;
            resourceInputs["maxShares"] = args ? args.maxShares : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkAccessPolicy"] = args ? args.networkAccessPolicy : undefined;
            resourceInputs["onDemandBurstingEnabled"] = args ? args.onDemandBurstingEnabled : undefined;
            resourceInputs["osType"] = args ? args.osType : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["secureVmDiskEncryptionSetId"] = args ? args.secureVmDiskEncryptionSetId : undefined;
            resourceInputs["securityType"] = args ? args.securityType : undefined;
            resourceInputs["sourceResourceId"] = args ? args.sourceResourceId : undefined;
            resourceInputs["sourceUri"] = args ? args.sourceUri : undefined;
            resourceInputs["storageAccountId"] = args ? args.storageAccountId : undefined;
            resourceInputs["storageAccountType"] = args ? args.storageAccountType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tier"] = args ? args.tier : undefined;
            resourceInputs["trustedLaunchEnabled"] = args ? args.trustedLaunchEnabled : undefined;
            resourceInputs["uploadSizeBytes"] = args ? args.uploadSizeBytes : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagedDisk.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ManagedDisk resources.
 */
export interface ManagedDiskState {
    /**
     * The method to use when creating the managed disk. Changing this forces a new resource to be created. Possible values include:
     */
    createOption?: pulumi.Input<string>;
    /**
     * The ID of the disk access resource for using private endpoints on disks.
     */
    diskAccessId?: pulumi.Input<string>;
    /**
     * The ID of a Disk Encryption Set which should be used to encrypt this Managed Disk. Conflicts with `secureVmDiskEncryptionSetId`.
     */
    diskEncryptionSetId?: pulumi.Input<string>;
    /**
     * The number of IOPS allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. One operation can transfer between 4k and 256k bytes.
     */
    diskIopsReadOnly?: pulumi.Input<number>;
    /**
     * The number of IOPS allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. One operation can transfer between 4k and 256k bytes.
     */
    diskIopsReadWrite?: pulumi.Input<number>;
    /**
     * The bandwidth allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. MBps means millions of bytes per second.
     */
    diskMbpsReadOnly?: pulumi.Input<number>;
    /**
     * The bandwidth allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. MBps means millions of bytes per second.
     */
    diskMbpsReadWrite?: pulumi.Input<number>;
    /**
     * (Optional, Required for a new managed disk) Specifies the size of the managed disk to create in gigabytes. If `createOption` is `Copy` or `FromImage`, then the value must be equal to or greater than the source's size. The size can only be increased.
     */
    diskSizeGb?: pulumi.Input<number>;
    /**
     * Specifies the Edge Zone within the Azure Region where this Managed Disk should exist. Changing this forces a new Managed Disk to be created.
     */
    edgeZone?: pulumi.Input<string>;
    /**
     * A `encryptionSettings` block as defined below.
     */
    encryptionSettings?: pulumi.Input<inputs.compute.ManagedDiskEncryptionSettings>;
    /**
     * ID of a Gallery Image Version to copy when `createOption` is `FromImage`. This field cannot be specified if imageReferenceId is specified. Changing this forces a new resource to be created.
     */
    galleryImageReferenceId?: pulumi.Input<string>;
    /**
     * The HyperV Generation of the Disk when the source of an `Import` or `Copy` operation targets a source that contains an operating system. Possible values are `V1` and `V2`. Changing this forces a new resource to be created.
     */
    hyperVGeneration?: pulumi.Input<string>;
    /**
     * ID of an existing platform/marketplace disk image to copy when `createOption` is `FromImage`. This field cannot be specified if galleryImageReferenceId is specified. Changing this forces a new resource to be created.
     */
    imageReferenceId?: pulumi.Input<string>;
    /**
     * Specified the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Logical Sector Size. Possible values are: `512` and `4096`. Defaults to `4096`. Changing this forces a new resource to be created.
     */
    logicalSectorSize?: pulumi.Input<number>;
    /**
     * The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
     */
    maxShares?: pulumi.Input<number>;
    /**
     * Specifies the name of the Managed Disk. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Policy for accessing the disk via network. Allowed values are `AllowAll`, `AllowPrivate`, and `DenyAll`.
     */
    networkAccessPolicy?: pulumi.Input<string>;
    /**
     * Specifies if On-Demand Bursting is enabled for the Managed Disk.
     */
    onDemandBurstingEnabled?: pulumi.Input<boolean>;
    /**
     * Specify a value when the source of an `Import` or `Copy` operation targets a source that contains an operating system. Valid values are `Linux` or `Windows`.
     */
    osType?: pulumi.Input<string>;
    /**
     * Whether it is allowed to access the disk via public network. Defaults to `true`.
     */
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the Resource Group where the Managed Disk should exist. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The ID of the Disk Encryption Set which should be used to Encrypt this OS Disk when the Virtual Machine is a Confidential VM. Conflicts with `diskEncryptionSetId`. Changing this forces a new resource to be created.
     */
    secureVmDiskEncryptionSetId?: pulumi.Input<string>;
    /**
     * Security Type of the Managed Disk when it is used for a Confidential VM. Possible values are `ConfidentialVM_VMGuestStateOnlyEncryptedWithPlatformKey`, `ConfidentialVM_DiskEncryptedWithPlatformKey` and `ConfidentialVM_DiskEncryptedWithCustomerKey`. Changing this forces a new resource to be created.
     */
    securityType?: pulumi.Input<string>;
    /**
     * The ID of an existing Managed Disk or Snapshot to copy when `createOption` is `Copy` or the recovery point to restore when `createOption` is `Restore`. Changing this forces a new resource to be created.
     */
    sourceResourceId?: pulumi.Input<string>;
    /**
     * URI to a valid VHD file to be used when `createOption` is `Import`. Changing this forces a new resource to be created.
     */
    sourceUri?: pulumi.Input<string>;
    /**
     * The ID of the Storage Account where the `sourceUri` is located. Required when `createOption` is set to `Import`.  Changing this forces a new resource to be created.
     */
    storageAccountId?: pulumi.Input<string>;
    /**
     * The type of storage to use for the managed disk. Possible values are `Standard_LRS`, `StandardSSD_ZRS`, `Premium_LRS`, `PremiumV2_LRS`, `Premium_ZRS`, `StandardSSD_LRS` or `UltraSSD_LRS`.
     */
    storageAccountType?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The disk performance tier to use. Possible values are documented [here](https://docs.microsoft.com/azure/virtual-machines/disks-change-performance). This feature is currently supported only for premium SSDs.
     */
    tier?: pulumi.Input<string>;
    /**
     * Specifies if Trusted Launch is enabled for the Managed Disk. Changing this forces a new resource to be created.
     */
    trustedLaunchEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the size of the managed disk to create in bytes. Required when `createOption` is `Upload`. The value must be equal to the source disk to be copied in bytes. Source disk size could be calculated with `ls -l` or `wc -c`. More information can be found at [Copy a managed disk](https://learn.microsoft.com/en-us/azure/virtual-machines/linux/disks-upload-vhd-to-managed-disk-cli#copy-a-managed-disk). Changing this forces a new resource to be created.
     */
    uploadSizeBytes?: pulumi.Input<number>;
    /**
     * Specifies the Availability Zone in which this Managed Disk should be located. Changing this property forces a new resource to be created.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagedDisk resource.
 */
export interface ManagedDiskArgs {
    /**
     * The method to use when creating the managed disk. Changing this forces a new resource to be created. Possible values include:
     */
    createOption: pulumi.Input<string>;
    /**
     * The ID of the disk access resource for using private endpoints on disks.
     */
    diskAccessId?: pulumi.Input<string>;
    /**
     * The ID of a Disk Encryption Set which should be used to encrypt this Managed Disk. Conflicts with `secureVmDiskEncryptionSetId`.
     */
    diskEncryptionSetId?: pulumi.Input<string>;
    /**
     * The number of IOPS allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. One operation can transfer between 4k and 256k bytes.
     */
    diskIopsReadOnly?: pulumi.Input<number>;
    /**
     * The number of IOPS allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. One operation can transfer between 4k and 256k bytes.
     */
    diskIopsReadWrite?: pulumi.Input<number>;
    /**
     * The bandwidth allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. MBps means millions of bytes per second.
     */
    diskMbpsReadOnly?: pulumi.Input<number>;
    /**
     * The bandwidth allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. MBps means millions of bytes per second.
     */
    diskMbpsReadWrite?: pulumi.Input<number>;
    /**
     * (Optional, Required for a new managed disk) Specifies the size of the managed disk to create in gigabytes. If `createOption` is `Copy` or `FromImage`, then the value must be equal to or greater than the source's size. The size can only be increased.
     */
    diskSizeGb?: pulumi.Input<number>;
    /**
     * Specifies the Edge Zone within the Azure Region where this Managed Disk should exist. Changing this forces a new Managed Disk to be created.
     */
    edgeZone?: pulumi.Input<string>;
    /**
     * A `encryptionSettings` block as defined below.
     */
    encryptionSettings?: pulumi.Input<inputs.compute.ManagedDiskEncryptionSettings>;
    /**
     * ID of a Gallery Image Version to copy when `createOption` is `FromImage`. This field cannot be specified if imageReferenceId is specified. Changing this forces a new resource to be created.
     */
    galleryImageReferenceId?: pulumi.Input<string>;
    /**
     * The HyperV Generation of the Disk when the source of an `Import` or `Copy` operation targets a source that contains an operating system. Possible values are `V1` and `V2`. Changing this forces a new resource to be created.
     */
    hyperVGeneration?: pulumi.Input<string>;
    /**
     * ID of an existing platform/marketplace disk image to copy when `createOption` is `FromImage`. This field cannot be specified if galleryImageReferenceId is specified. Changing this forces a new resource to be created.
     */
    imageReferenceId?: pulumi.Input<string>;
    /**
     * Specified the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Logical Sector Size. Possible values are: `512` and `4096`. Defaults to `4096`. Changing this forces a new resource to be created.
     */
    logicalSectorSize?: pulumi.Input<number>;
    /**
     * The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
     */
    maxShares?: pulumi.Input<number>;
    /**
     * Specifies the name of the Managed Disk. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Policy for accessing the disk via network. Allowed values are `AllowAll`, `AllowPrivate`, and `DenyAll`.
     */
    networkAccessPolicy?: pulumi.Input<string>;
    /**
     * Specifies if On-Demand Bursting is enabled for the Managed Disk.
     */
    onDemandBurstingEnabled?: pulumi.Input<boolean>;
    /**
     * Specify a value when the source of an `Import` or `Copy` operation targets a source that contains an operating system. Valid values are `Linux` or `Windows`.
     */
    osType?: pulumi.Input<string>;
    /**
     * Whether it is allowed to access the disk via public network. Defaults to `true`.
     */
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the Resource Group where the Managed Disk should exist. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The ID of the Disk Encryption Set which should be used to Encrypt this OS Disk when the Virtual Machine is a Confidential VM. Conflicts with `diskEncryptionSetId`. Changing this forces a new resource to be created.
     */
    secureVmDiskEncryptionSetId?: pulumi.Input<string>;
    /**
     * Security Type of the Managed Disk when it is used for a Confidential VM. Possible values are `ConfidentialVM_VMGuestStateOnlyEncryptedWithPlatformKey`, `ConfidentialVM_DiskEncryptedWithPlatformKey` and `ConfidentialVM_DiskEncryptedWithCustomerKey`. Changing this forces a new resource to be created.
     */
    securityType?: pulumi.Input<string>;
    /**
     * The ID of an existing Managed Disk or Snapshot to copy when `createOption` is `Copy` or the recovery point to restore when `createOption` is `Restore`. Changing this forces a new resource to be created.
     */
    sourceResourceId?: pulumi.Input<string>;
    /**
     * URI to a valid VHD file to be used when `createOption` is `Import`. Changing this forces a new resource to be created.
     */
    sourceUri?: pulumi.Input<string>;
    /**
     * The ID of the Storage Account where the `sourceUri` is located. Required when `createOption` is set to `Import`.  Changing this forces a new resource to be created.
     */
    storageAccountId?: pulumi.Input<string>;
    /**
     * The type of storage to use for the managed disk. Possible values are `Standard_LRS`, `StandardSSD_ZRS`, `Premium_LRS`, `PremiumV2_LRS`, `Premium_ZRS`, `StandardSSD_LRS` or `UltraSSD_LRS`.
     */
    storageAccountType: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The disk performance tier to use. Possible values are documented [here](https://docs.microsoft.com/azure/virtual-machines/disks-change-performance). This feature is currently supported only for premium SSDs.
     */
    tier?: pulumi.Input<string>;
    /**
     * Specifies if Trusted Launch is enabled for the Managed Disk. Changing this forces a new resource to be created.
     */
    trustedLaunchEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the size of the managed disk to create in bytes. Required when `createOption` is `Upload`. The value must be equal to the source disk to be copied in bytes. Source disk size could be calculated with `ls -l` or `wc -c`. More information can be found at [Copy a managed disk](https://learn.microsoft.com/en-us/azure/virtual-machines/linux/disks-upload-vhd-to-managed-disk-cli#copy-a-managed-disk). Changing this forces a new resource to be created.
     */
    uploadSizeBytes?: pulumi.Input<number>;
    /**
     * Specifies the Availability Zone in which this Managed Disk should be located. Changing this property forces a new resource to be created.
     */
    zone?: pulumi.Input<string>;
}
