// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to access information about an existing Managed Disk.
 *
 * ## Example Usage
 *
 *
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const existing = azure.compute.getManagedDisk({
 *     name: "example-datadisk",
 *     resourceGroupName: "example-resources",
 * });
 * export const id = existing.then(existing => existing.id);
 * ```
 */
export function getManagedDisk(args: GetManagedDiskArgs, opts?: pulumi.InvokeOptions): Promise<GetManagedDiskResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("azure:compute/getManagedDisk:getManagedDisk", {
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
        "tags": args.tags,
        "zones": args.zones,
    }, opts);
}

/**
 * A collection of arguments for invoking getManagedDisk.
 */
export interface GetManagedDiskArgs {
    /**
     * Specifies the name of the Managed Disk.
     */
    readonly name: string;
    /**
     * Specifies the name of the Resource Group where this Managed Disk exists.
     */
    readonly resourceGroupName: string;
    /**
     * A mapping of tags assigned to the resource.
     */
    readonly tags?: {[key: string]: string};
    /**
     * A list of Availability Zones where the Managed Disk exists.
     */
    readonly zones?: string[];
}

/**
 * A collection of values returned by getManagedDisk.
 */
export interface GetManagedDiskResult {
    readonly createOption: string;
    /**
     * The ID of the Disk Encryption Set used to encrypt this Managed Disk.
     */
    readonly diskEncryptionSetId: string;
    /**
     * The number of IOPS allowed for this disk, where one operation can transfer between 4k and 256k bytes.
     */
    readonly diskIopsReadWrite: number;
    /**
     * The bandwidth allowed for this disk.
     */
    readonly diskMbpsReadWrite: number;
    /**
     * The size of the Managed Disk in gigabytes.
     */
    readonly diskSizeGb: number;
    readonly name: string;
    /**
     * The operating system used for this Managed Disk.
     */
    readonly osType: string;
    readonly resourceGroupName: string;
    /**
     * The ID of an existing Managed Disk which this Disk was created from.
     */
    readonly sourceResourceId: string;
    /**
     * The Source URI for this Managed Disk.
     */
    readonly sourceUri: string;
    /**
     * The ID of the Storage Account where the `sourceUri` is located.
     */
    readonly storageAccountId: string;
    /**
     * The storage account type for the Managed Disk.
     */
    readonly storageAccountType: string;
    /**
     * A mapping of tags assigned to the resource.
     */
    readonly tags?: {[key: string]: string};
    /**
     * A list of Availability Zones where the Managed Disk exists.
     */
    readonly zones: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
}
