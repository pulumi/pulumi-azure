// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/linux_virtual_machine_scale_set.html.markdown.
 */
export class LinuxVirtualMachineScaleSet extends pulumi.CustomResource {
    /**
     * Get an existing LinuxVirtualMachineScaleSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LinuxVirtualMachineScaleSetState, opts?: pulumi.CustomResourceOptions): LinuxVirtualMachineScaleSet {
        return new LinuxVirtualMachineScaleSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:compute/linuxVirtualMachineScaleSet:LinuxVirtualMachineScaleSet';

    /**
     * Returns true if the given object is an instance of LinuxVirtualMachineScaleSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LinuxVirtualMachineScaleSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LinuxVirtualMachineScaleSet.__pulumiType;
    }

    /**
     * A `additionalCapabilities` block as defined below.
     */
    public readonly additionalCapabilities!: pulumi.Output<outputs.compute.LinuxVirtualMachineScaleSetAdditionalCapabilities | undefined>;
    /**
     * The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
     */
    public readonly adminPassword!: pulumi.Output<string | undefined>;
    /**
     * One or more `adminSshKey` blocks as defined below.
     */
    public readonly adminSshKeys!: pulumi.Output<outputs.compute.LinuxVirtualMachineScaleSetAdminSshKey[] | undefined>;
    /**
     * The username of the local administrator on each Virtual Machine Scale Set instance. Changing this forces a new resource to be created.
     */
    public readonly adminUsername!: pulumi.Output<string>;
    /**
     * A `automaticOsUpgradePolicy` block as defined below. This is Required and can only be specified when `upgradeMode` is set to `Automatic`.
     */
    public readonly automaticOsUpgradePolicy!: pulumi.Output<outputs.compute.LinuxVirtualMachineScaleSetAutomaticOsUpgradePolicy | undefined>;
    /**
     * A `bootDiagnostics` block as defined below.
     */
    public readonly bootDiagnostics!: pulumi.Output<outputs.compute.LinuxVirtualMachineScaleSetBootDiagnostics | undefined>;
    /**
     * The prefix which should be used for the name of the Virtual Machines in this Scale Set. If unspecified this defaults to the value for the `name` field.
     */
    public readonly computerNamePrefix!: pulumi.Output<string>;
    /**
     * The Base64-Encoded Custom Data which should be used for this Virtual Machine Scale Set.
     */
    public readonly customData!: pulumi.Output<string | undefined>;
    /**
     * One or more `dataDisk` blocks as defined below.
     */
    public readonly dataDisks!: pulumi.Output<outputs.compute.LinuxVirtualMachineScaleSetDataDisk[] | undefined>;
    /**
     * Should Password Authentication be disabled on this Virtual Machine Scale Set? Defaults to `true`.
     */
    public readonly disablePasswordAuthentication!: pulumi.Output<boolean | undefined>;
    /**
     * Should Virtual Machine Extensions be run on Overprovisioned Virtual Machines in the Scale Set? Defaults to `false`.
     */
    public readonly doNotRunExtensionsOnOverprovisionedMachines!: pulumi.Output<boolean | undefined>;
    /**
     * The Policy which should be used Virtual Machines are Evicted from the Scale Set. Changing this forces a new resource to be created.
     */
    public readonly evictionPolicy!: pulumi.Output<string | undefined>;
    /**
     * The ID of a Load Balancer Probe which should be used to determine the health of an instance. Changing this forces a new resource to be created. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
     */
    public readonly healthProbeId!: pulumi.Output<string | undefined>;
    /**
     * A `identity` block as defined below.
     */
    public readonly identity!: pulumi.Output<outputs.compute.LinuxVirtualMachineScaleSetIdentity | undefined>;
    /**
     * The number of Virtual Machines in the Scale Set.
     */
    public readonly instances!: pulumi.Output<number>;
    /**
     * The Azure location where the Linux Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The maximum price you're willing to pay for each Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the `evictionPolicy`. Defaults to `-1`, which means that each Virtual Machine in this Scale Set should not be evicted for price reasons.
     */
    public readonly maxBidPrice!: pulumi.Output<number | undefined>;
    /**
     * The name of the Linux Virtual Machine Scale Set. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * One or more `networkInterface` blocks as defined below.
     */
    public readonly networkInterfaces!: pulumi.Output<outputs.compute.LinuxVirtualMachineScaleSetNetworkInterface[]>;
    /**
     * An `osDisk` block as defined below.
     */
    public readonly osDisk!: pulumi.Output<outputs.compute.LinuxVirtualMachineScaleSetOsDisk>;
    /**
     * Should Azure over-provision Virtual Machines in this Scale Set? This means that multiple Virtual Machines will be provisioned and Azure will keep the instances which become available first - which improves provisioning success rates and improves deployment time. You're not billed for these over-provisioned VM's and they don't count towards the Subscription Quota. Defaults to `false`.
     */
    public readonly overprovision!: pulumi.Output<boolean | undefined>;
    public readonly plan!: pulumi.Output<outputs.compute.LinuxVirtualMachineScaleSetPlan | undefined>;
    /**
     * The Priority of this Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
     */
    public readonly priority!: pulumi.Output<string | undefined>;
    /**
     * Should the Azure VM Agent be provisioned on each Virtual Machine in the Scale Set? Defaults to `true`. Changing this value forces a new resource to be created.
     */
    public readonly provisionVmAgent!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the Proximity Placement Group in which the Virtual Machine Scale Set should be assigned to. Changing this forces a new resource to be created.
     */
    public readonly proximityPlacementGroupId!: pulumi.Output<string | undefined>;
    /**
     * The name of the Resource Group in which the Linux Virtual Machine Scale Set should be exist. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * A `rollingUpgradePolicy` block as defined below. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
     */
    public readonly rollingUpgradePolicy!: pulumi.Output<outputs.compute.LinuxVirtualMachineScaleSetRollingUpgradePolicy | undefined>;
    /**
     * One or more `secret` blocks as defined below.
     */
    public readonly secrets!: pulumi.Output<outputs.compute.LinuxVirtualMachineScaleSetSecret[] | undefined>;
    /**
     * Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Defaults to `true`.
     */
    public readonly singlePlacementGroup!: pulumi.Output<boolean | undefined>;
    /**
     * The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
     */
    public readonly sku!: pulumi.Output<string>;
    /**
     * The ID of an Image which each Virtual Machine in this Scale Set should be based on.
     */
    public readonly sourceImageId!: pulumi.Output<string | undefined>;
    /**
     * A `sourceImageReference` block as defined below.
     */
    public readonly sourceImageReference!: pulumi.Output<outputs.compute.LinuxVirtualMachineScaleSetSourceImageReference | undefined>;
    /**
     * A mapping of tags which should be assigned to this Virtual Machine Scale Set.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string}>;
    /**
     * The Unique ID for this Linux Virtual Machine Scale Set.
     */
    public /*out*/ readonly uniqueId!: pulumi.Output<string>;
    /**
     * Specifies how Upgrades (e.g. changing the Image/SKU) should be performed to Virtual Machine Instances. Possible values are `Automatic`, `Manual` and `Rolling`. Defaults to `Manual`.
     */
    public readonly upgradeMode!: pulumi.Output<string | undefined>;
    /**
     * Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
     */
    public readonly zoneBalance!: pulumi.Output<boolean | undefined>;
    /**
     * A list of Availability Zones in which the Virtual Machines in this Scale Set should be created in. Changing this forces a new resource to be created.
     */
    public readonly zones!: pulumi.Output<string[] | undefined>;

    /**
     * Create a LinuxVirtualMachineScaleSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LinuxVirtualMachineScaleSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LinuxVirtualMachineScaleSetArgs | LinuxVirtualMachineScaleSetState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as LinuxVirtualMachineScaleSetState | undefined;
            inputs["additionalCapabilities"] = state ? state.additionalCapabilities : undefined;
            inputs["adminPassword"] = state ? state.adminPassword : undefined;
            inputs["adminSshKeys"] = state ? state.adminSshKeys : undefined;
            inputs["adminUsername"] = state ? state.adminUsername : undefined;
            inputs["automaticOsUpgradePolicy"] = state ? state.automaticOsUpgradePolicy : undefined;
            inputs["bootDiagnostics"] = state ? state.bootDiagnostics : undefined;
            inputs["computerNamePrefix"] = state ? state.computerNamePrefix : undefined;
            inputs["customData"] = state ? state.customData : undefined;
            inputs["dataDisks"] = state ? state.dataDisks : undefined;
            inputs["disablePasswordAuthentication"] = state ? state.disablePasswordAuthentication : undefined;
            inputs["doNotRunExtensionsOnOverprovisionedMachines"] = state ? state.doNotRunExtensionsOnOverprovisionedMachines : undefined;
            inputs["evictionPolicy"] = state ? state.evictionPolicy : undefined;
            inputs["healthProbeId"] = state ? state.healthProbeId : undefined;
            inputs["identity"] = state ? state.identity : undefined;
            inputs["instances"] = state ? state.instances : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["maxBidPrice"] = state ? state.maxBidPrice : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            inputs["osDisk"] = state ? state.osDisk : undefined;
            inputs["overprovision"] = state ? state.overprovision : undefined;
            inputs["plan"] = state ? state.plan : undefined;
            inputs["priority"] = state ? state.priority : undefined;
            inputs["provisionVmAgent"] = state ? state.provisionVmAgent : undefined;
            inputs["proximityPlacementGroupId"] = state ? state.proximityPlacementGroupId : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["rollingUpgradePolicy"] = state ? state.rollingUpgradePolicy : undefined;
            inputs["secrets"] = state ? state.secrets : undefined;
            inputs["singlePlacementGroup"] = state ? state.singlePlacementGroup : undefined;
            inputs["sku"] = state ? state.sku : undefined;
            inputs["sourceImageId"] = state ? state.sourceImageId : undefined;
            inputs["sourceImageReference"] = state ? state.sourceImageReference : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["uniqueId"] = state ? state.uniqueId : undefined;
            inputs["upgradeMode"] = state ? state.upgradeMode : undefined;
            inputs["zoneBalance"] = state ? state.zoneBalance : undefined;
            inputs["zones"] = state ? state.zones : undefined;
        } else {
            const args = argsOrState as LinuxVirtualMachineScaleSetArgs | undefined;
            if (!args || args.adminUsername === undefined) {
                throw new Error("Missing required property 'adminUsername'");
            }
            if (!args || args.instances === undefined) {
                throw new Error("Missing required property 'instances'");
            }
            if (!args || args.networkInterfaces === undefined) {
                throw new Error("Missing required property 'networkInterfaces'");
            }
            if (!args || args.osDisk === undefined) {
                throw new Error("Missing required property 'osDisk'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.sku === undefined) {
                throw new Error("Missing required property 'sku'");
            }
            inputs["additionalCapabilities"] = args ? args.additionalCapabilities : undefined;
            inputs["adminPassword"] = args ? args.adminPassword : undefined;
            inputs["adminSshKeys"] = args ? args.adminSshKeys : undefined;
            inputs["adminUsername"] = args ? args.adminUsername : undefined;
            inputs["automaticOsUpgradePolicy"] = args ? args.automaticOsUpgradePolicy : undefined;
            inputs["bootDiagnostics"] = args ? args.bootDiagnostics : undefined;
            inputs["computerNamePrefix"] = args ? args.computerNamePrefix : undefined;
            inputs["customData"] = args ? args.customData : undefined;
            inputs["dataDisks"] = args ? args.dataDisks : undefined;
            inputs["disablePasswordAuthentication"] = args ? args.disablePasswordAuthentication : undefined;
            inputs["doNotRunExtensionsOnOverprovisionedMachines"] = args ? args.doNotRunExtensionsOnOverprovisionedMachines : undefined;
            inputs["evictionPolicy"] = args ? args.evictionPolicy : undefined;
            inputs["healthProbeId"] = args ? args.healthProbeId : undefined;
            inputs["identity"] = args ? args.identity : undefined;
            inputs["instances"] = args ? args.instances : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["maxBidPrice"] = args ? args.maxBidPrice : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            inputs["osDisk"] = args ? args.osDisk : undefined;
            inputs["overprovision"] = args ? args.overprovision : undefined;
            inputs["plan"] = args ? args.plan : undefined;
            inputs["priority"] = args ? args.priority : undefined;
            inputs["provisionVmAgent"] = args ? args.provisionVmAgent : undefined;
            inputs["proximityPlacementGroupId"] = args ? args.proximityPlacementGroupId : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["rollingUpgradePolicy"] = args ? args.rollingUpgradePolicy : undefined;
            inputs["secrets"] = args ? args.secrets : undefined;
            inputs["singlePlacementGroup"] = args ? args.singlePlacementGroup : undefined;
            inputs["sku"] = args ? args.sku : undefined;
            inputs["sourceImageId"] = args ? args.sourceImageId : undefined;
            inputs["sourceImageReference"] = args ? args.sourceImageReference : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["upgradeMode"] = args ? args.upgradeMode : undefined;
            inputs["zoneBalance"] = args ? args.zoneBalance : undefined;
            inputs["zones"] = args ? args.zones : undefined;
            inputs["uniqueId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(LinuxVirtualMachineScaleSet.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LinuxVirtualMachineScaleSet resources.
 */
export interface LinuxVirtualMachineScaleSetState {
    /**
     * A `additionalCapabilities` block as defined below.
     */
    readonly additionalCapabilities?: pulumi.Input<inputs.compute.LinuxVirtualMachineScaleSetAdditionalCapabilities>;
    /**
     * The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
     */
    readonly adminPassword?: pulumi.Input<string>;
    /**
     * One or more `adminSshKey` blocks as defined below.
     */
    readonly adminSshKeys?: pulumi.Input<pulumi.Input<inputs.compute.LinuxVirtualMachineScaleSetAdminSshKey>[]>;
    /**
     * The username of the local administrator on each Virtual Machine Scale Set instance. Changing this forces a new resource to be created.
     */
    readonly adminUsername?: pulumi.Input<string>;
    /**
     * A `automaticOsUpgradePolicy` block as defined below. This is Required and can only be specified when `upgradeMode` is set to `Automatic`.
     */
    readonly automaticOsUpgradePolicy?: pulumi.Input<inputs.compute.LinuxVirtualMachineScaleSetAutomaticOsUpgradePolicy>;
    /**
     * A `bootDiagnostics` block as defined below.
     */
    readonly bootDiagnostics?: pulumi.Input<inputs.compute.LinuxVirtualMachineScaleSetBootDiagnostics>;
    /**
     * The prefix which should be used for the name of the Virtual Machines in this Scale Set. If unspecified this defaults to the value for the `name` field.
     */
    readonly computerNamePrefix?: pulumi.Input<string>;
    /**
     * The Base64-Encoded Custom Data which should be used for this Virtual Machine Scale Set.
     */
    readonly customData?: pulumi.Input<string>;
    /**
     * One or more `dataDisk` blocks as defined below.
     */
    readonly dataDisks?: pulumi.Input<pulumi.Input<inputs.compute.LinuxVirtualMachineScaleSetDataDisk>[]>;
    /**
     * Should Password Authentication be disabled on this Virtual Machine Scale Set? Defaults to `true`.
     */
    readonly disablePasswordAuthentication?: pulumi.Input<boolean>;
    /**
     * Should Virtual Machine Extensions be run on Overprovisioned Virtual Machines in the Scale Set? Defaults to `false`.
     */
    readonly doNotRunExtensionsOnOverprovisionedMachines?: pulumi.Input<boolean>;
    /**
     * The Policy which should be used Virtual Machines are Evicted from the Scale Set. Changing this forces a new resource to be created.
     */
    readonly evictionPolicy?: pulumi.Input<string>;
    /**
     * The ID of a Load Balancer Probe which should be used to determine the health of an instance. Changing this forces a new resource to be created. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
     */
    readonly healthProbeId?: pulumi.Input<string>;
    /**
     * A `identity` block as defined below.
     */
    readonly identity?: pulumi.Input<inputs.compute.LinuxVirtualMachineScaleSetIdentity>;
    /**
     * The number of Virtual Machines in the Scale Set.
     */
    readonly instances?: pulumi.Input<number>;
    /**
     * The Azure location where the Linux Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
     */
    readonly location?: pulumi.Input<string>;
    /**
     * The maximum price you're willing to pay for each Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the `evictionPolicy`. Defaults to `-1`, which means that each Virtual Machine in this Scale Set should not be evicted for price reasons.
     */
    readonly maxBidPrice?: pulumi.Input<number>;
    /**
     * The name of the Linux Virtual Machine Scale Set. Changing this forces a new resource to be created.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * One or more `networkInterface` blocks as defined below.
     */
    readonly networkInterfaces?: pulumi.Input<pulumi.Input<inputs.compute.LinuxVirtualMachineScaleSetNetworkInterface>[]>;
    /**
     * An `osDisk` block as defined below.
     */
    readonly osDisk?: pulumi.Input<inputs.compute.LinuxVirtualMachineScaleSetOsDisk>;
    /**
     * Should Azure over-provision Virtual Machines in this Scale Set? This means that multiple Virtual Machines will be provisioned and Azure will keep the instances which become available first - which improves provisioning success rates and improves deployment time. You're not billed for these over-provisioned VM's and they don't count towards the Subscription Quota. Defaults to `false`.
     */
    readonly overprovision?: pulumi.Input<boolean>;
    readonly plan?: pulumi.Input<inputs.compute.LinuxVirtualMachineScaleSetPlan>;
    /**
     * The Priority of this Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
     */
    readonly priority?: pulumi.Input<string>;
    /**
     * Should the Azure VM Agent be provisioned on each Virtual Machine in the Scale Set? Defaults to `true`. Changing this value forces a new resource to be created.
     */
    readonly provisionVmAgent?: pulumi.Input<boolean>;
    /**
     * The ID of the Proximity Placement Group in which the Virtual Machine Scale Set should be assigned to. Changing this forces a new resource to be created.
     */
    readonly proximityPlacementGroupId?: pulumi.Input<string>;
    /**
     * The name of the Resource Group in which the Linux Virtual Machine Scale Set should be exist. Changing this forces a new resource to be created.
     */
    readonly resourceGroupName?: pulumi.Input<string>;
    /**
     * A `rollingUpgradePolicy` block as defined below. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
     */
    readonly rollingUpgradePolicy?: pulumi.Input<inputs.compute.LinuxVirtualMachineScaleSetRollingUpgradePolicy>;
    /**
     * One or more `secret` blocks as defined below.
     */
    readonly secrets?: pulumi.Input<pulumi.Input<inputs.compute.LinuxVirtualMachineScaleSetSecret>[]>;
    /**
     * Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Defaults to `true`.
     */
    readonly singlePlacementGroup?: pulumi.Input<boolean>;
    /**
     * The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
     */
    readonly sku?: pulumi.Input<string>;
    /**
     * The ID of an Image which each Virtual Machine in this Scale Set should be based on.
     */
    readonly sourceImageId?: pulumi.Input<string>;
    /**
     * A `sourceImageReference` block as defined below.
     */
    readonly sourceImageReference?: pulumi.Input<inputs.compute.LinuxVirtualMachineScaleSetSourceImageReference>;
    /**
     * A mapping of tags which should be assigned to this Virtual Machine Scale Set.
     */
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Unique ID for this Linux Virtual Machine Scale Set.
     */
    readonly uniqueId?: pulumi.Input<string>;
    /**
     * Specifies how Upgrades (e.g. changing the Image/SKU) should be performed to Virtual Machine Instances. Possible values are `Automatic`, `Manual` and `Rolling`. Defaults to `Manual`.
     */
    readonly upgradeMode?: pulumi.Input<string>;
    /**
     * Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
     */
    readonly zoneBalance?: pulumi.Input<boolean>;
    /**
     * A list of Availability Zones in which the Virtual Machines in this Scale Set should be created in. Changing this forces a new resource to be created.
     */
    readonly zones?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a LinuxVirtualMachineScaleSet resource.
 */
export interface LinuxVirtualMachineScaleSetArgs {
    /**
     * A `additionalCapabilities` block as defined below.
     */
    readonly additionalCapabilities?: pulumi.Input<inputs.compute.LinuxVirtualMachineScaleSetAdditionalCapabilities>;
    /**
     * The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
     */
    readonly adminPassword?: pulumi.Input<string>;
    /**
     * One or more `adminSshKey` blocks as defined below.
     */
    readonly adminSshKeys?: pulumi.Input<pulumi.Input<inputs.compute.LinuxVirtualMachineScaleSetAdminSshKey>[]>;
    /**
     * The username of the local administrator on each Virtual Machine Scale Set instance. Changing this forces a new resource to be created.
     */
    readonly adminUsername: pulumi.Input<string>;
    /**
     * A `automaticOsUpgradePolicy` block as defined below. This is Required and can only be specified when `upgradeMode` is set to `Automatic`.
     */
    readonly automaticOsUpgradePolicy?: pulumi.Input<inputs.compute.LinuxVirtualMachineScaleSetAutomaticOsUpgradePolicy>;
    /**
     * A `bootDiagnostics` block as defined below.
     */
    readonly bootDiagnostics?: pulumi.Input<inputs.compute.LinuxVirtualMachineScaleSetBootDiagnostics>;
    /**
     * The prefix which should be used for the name of the Virtual Machines in this Scale Set. If unspecified this defaults to the value for the `name` field.
     */
    readonly computerNamePrefix?: pulumi.Input<string>;
    /**
     * The Base64-Encoded Custom Data which should be used for this Virtual Machine Scale Set.
     */
    readonly customData?: pulumi.Input<string>;
    /**
     * One or more `dataDisk` blocks as defined below.
     */
    readonly dataDisks?: pulumi.Input<pulumi.Input<inputs.compute.LinuxVirtualMachineScaleSetDataDisk>[]>;
    /**
     * Should Password Authentication be disabled on this Virtual Machine Scale Set? Defaults to `true`.
     */
    readonly disablePasswordAuthentication?: pulumi.Input<boolean>;
    /**
     * Should Virtual Machine Extensions be run on Overprovisioned Virtual Machines in the Scale Set? Defaults to `false`.
     */
    readonly doNotRunExtensionsOnOverprovisionedMachines?: pulumi.Input<boolean>;
    /**
     * The Policy which should be used Virtual Machines are Evicted from the Scale Set. Changing this forces a new resource to be created.
     */
    readonly evictionPolicy?: pulumi.Input<string>;
    /**
     * The ID of a Load Balancer Probe which should be used to determine the health of an instance. Changing this forces a new resource to be created. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
     */
    readonly healthProbeId?: pulumi.Input<string>;
    /**
     * A `identity` block as defined below.
     */
    readonly identity?: pulumi.Input<inputs.compute.LinuxVirtualMachineScaleSetIdentity>;
    /**
     * The number of Virtual Machines in the Scale Set.
     */
    readonly instances: pulumi.Input<number>;
    /**
     * The Azure location where the Linux Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
     */
    readonly location?: pulumi.Input<string>;
    /**
     * The maximum price you're willing to pay for each Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the `evictionPolicy`. Defaults to `-1`, which means that each Virtual Machine in this Scale Set should not be evicted for price reasons.
     */
    readonly maxBidPrice?: pulumi.Input<number>;
    /**
     * The name of the Linux Virtual Machine Scale Set. Changing this forces a new resource to be created.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * One or more `networkInterface` blocks as defined below.
     */
    readonly networkInterfaces: pulumi.Input<pulumi.Input<inputs.compute.LinuxVirtualMachineScaleSetNetworkInterface>[]>;
    /**
     * An `osDisk` block as defined below.
     */
    readonly osDisk: pulumi.Input<inputs.compute.LinuxVirtualMachineScaleSetOsDisk>;
    /**
     * Should Azure over-provision Virtual Machines in this Scale Set? This means that multiple Virtual Machines will be provisioned and Azure will keep the instances which become available first - which improves provisioning success rates and improves deployment time. You're not billed for these over-provisioned VM's and they don't count towards the Subscription Quota. Defaults to `false`.
     */
    readonly overprovision?: pulumi.Input<boolean>;
    readonly plan?: pulumi.Input<inputs.compute.LinuxVirtualMachineScaleSetPlan>;
    /**
     * The Priority of this Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
     */
    readonly priority?: pulumi.Input<string>;
    /**
     * Should the Azure VM Agent be provisioned on each Virtual Machine in the Scale Set? Defaults to `true`. Changing this value forces a new resource to be created.
     */
    readonly provisionVmAgent?: pulumi.Input<boolean>;
    /**
     * The ID of the Proximity Placement Group in which the Virtual Machine Scale Set should be assigned to. Changing this forces a new resource to be created.
     */
    readonly proximityPlacementGroupId?: pulumi.Input<string>;
    /**
     * The name of the Resource Group in which the Linux Virtual Machine Scale Set should be exist. Changing this forces a new resource to be created.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * A `rollingUpgradePolicy` block as defined below. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
     */
    readonly rollingUpgradePolicy?: pulumi.Input<inputs.compute.LinuxVirtualMachineScaleSetRollingUpgradePolicy>;
    /**
     * One or more `secret` blocks as defined below.
     */
    readonly secrets?: pulumi.Input<pulumi.Input<inputs.compute.LinuxVirtualMachineScaleSetSecret>[]>;
    /**
     * Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Defaults to `true`.
     */
    readonly singlePlacementGroup?: pulumi.Input<boolean>;
    /**
     * The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
     */
    readonly sku: pulumi.Input<string>;
    /**
     * The ID of an Image which each Virtual Machine in this Scale Set should be based on.
     */
    readonly sourceImageId?: pulumi.Input<string>;
    /**
     * A `sourceImageReference` block as defined below.
     */
    readonly sourceImageReference?: pulumi.Input<inputs.compute.LinuxVirtualMachineScaleSetSourceImageReference>;
    /**
     * A mapping of tags which should be assigned to this Virtual Machine Scale Set.
     */
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies how Upgrades (e.g. changing the Image/SKU) should be performed to Virtual Machine Instances. Possible values are `Automatic`, `Manual` and `Rolling`. Defaults to `Manual`.
     */
    readonly upgradeMode?: pulumi.Input<string>;
    /**
     * Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
     */
    readonly zoneBalance?: pulumi.Input<boolean>;
    /**
     * A list of Availability Zones in which the Virtual Machines in this Scale Set should be created in. Changing this forces a new resource to be created.
     */
    readonly zones?: pulumi.Input<pulumi.Input<string>[]>;
}
