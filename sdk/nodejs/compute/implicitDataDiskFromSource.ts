// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an implicit Data Disk of a Virtual Machine.
 *
 * > **Note:** The Implicit Data Disk will be deleted instantly after this resource is destroyed. If you want to detach this disk only, you may set `detachImplicitDataDiskOnDeletion` field to `true` within the `virtualMachine` block in the provider `features` block.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const config = new pulumi.Config();
 * const prefix = config.get("prefix") || "example";
 * const vmName = `${prefix}-vm`;
 * const example = new azure.core.ResourceGroup("example", {
 *     name: `${prefix}-resources`,
 *     location: "West Europe",
 * });
 * const main = new azure.network.VirtualNetwork("main", {
 *     name: `${prefix}-network`,
 *     addressSpaces: ["10.0.0.0/16"],
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const internal = new azure.network.Subnet("internal", {
 *     name: "internal",
 *     resourceGroupName: example.name,
 *     virtualNetworkName: main.name,
 *     addressPrefixes: ["10.0.2.0/24"],
 * });
 * const mainNetworkInterface = new azure.network.NetworkInterface("main", {
 *     name: `${prefix}-nic`,
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     ipConfigurations: [{
 *         name: "internal",
 *         subnetId: internal.id,
 *         privateIpAddressAllocation: "Dynamic",
 *     }],
 * });
 * const exampleVirtualMachine = new azure.compute.VirtualMachine("example", {
 *     name: vmName,
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     networkInterfaceIds: [mainNetworkInterface.id],
 *     vmSize: "Standard_F2",
 *     storageImageReference: {
 *         publisher: "Canonical",
 *         offer: "0001-com-ubuntu-server-jammy",
 *         sku: "22_04-lts",
 *         version: "latest",
 *     },
 *     storageOsDisk: {
 *         name: "myosdisk1",
 *         caching: "ReadWrite",
 *         createOption: "FromImage",
 *         managedDiskType: "Standard_LRS",
 *     },
 *     osProfile: {
 *         computerName: vmName,
 *         adminUsername: "testadmin",
 *         adminPassword: "Password1234!",
 *     },
 *     osProfileLinuxConfig: {
 *         disablePasswordAuthentication: false,
 *     },
 * });
 * const exampleManagedDisk = new azure.compute.ManagedDisk("example", {
 *     name: `${vmName}-disk1`,
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     storageAccountType: "Standard_LRS",
 *     createOption: "Empty",
 *     diskSizeGb: 10,
 * });
 * const exampleSnapshot = new azure.compute.Snapshot("example", {
 *     name: `${vmName}-snapshot1`,
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     createOption: "Copy",
 *     sourceUri: exampleManagedDisk.id,
 * });
 * const exampleImplicitDataDiskFromSource = new azure.compute.ImplicitDataDiskFromSource("example", {
 *     name: `${vmName}-implicitdisk1`,
 *     virtualMachineId: testAzurermVirtualMachine.id,
 *     lun: 0,
 *     caching: "None",
 *     createOption: "Copy",
 *     diskSizeGb: 20,
 *     sourceResourceId: test.id,
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Compute` - 2024-03-01, 2023-04-02
 *
 * ## Import
 *
 * The implicit Data Disk of the Virtual Machine can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:compute/implicitDataDiskFromSource:ImplicitDataDiskFromSource example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/virtualMachines/machine1/dataDisks/disk1
 * ```
 */
export class ImplicitDataDiskFromSource extends pulumi.CustomResource {
    /**
     * Get an existing ImplicitDataDiskFromSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImplicitDataDiskFromSourceState, opts?: pulumi.CustomResourceOptions): ImplicitDataDiskFromSource {
        return new ImplicitDataDiskFromSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:compute/implicitDataDiskFromSource:ImplicitDataDiskFromSource';

    /**
     * Returns true if the given object is an instance of ImplicitDataDiskFromSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImplicitDataDiskFromSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImplicitDataDiskFromSource.__pulumiType;
    }

    /**
     * Specifies the caching requirements for this Data Disk. Possible values are `ReadOnly` and `ReadWrite`.
     */
    declare public readonly caching: pulumi.Output<string | undefined>;
    /**
     * Specifies the Create Option of the Data Disk. The only possible value is `Copy`. Changing this forces a new resource to be created.
     */
    declare public readonly createOption: pulumi.Output<string>;
    declare public readonly diskSizeGb: pulumi.Output<number>;
    /**
     * The Logical Unit Number of the Data Disk, which needs to be unique within the Virtual Machine. Changing this forces a new resource to be created.
     */
    declare public readonly lun: pulumi.Output<number>;
    /**
     * Specifies the name of this Data Disk. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID of the source resource which this Data Disk was created from. Changing this forces a new resource to be created.
     */
    declare public readonly sourceResourceId: pulumi.Output<string>;
    /**
     * The ID of the Virtual Machine to which the Data Disk should be attached. Changing this forces a new resource to be created.
     */
    declare public readonly virtualMachineId: pulumi.Output<string>;
    /**
     * Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
     */
    declare public readonly writeAcceleratorEnabled: pulumi.Output<boolean | undefined>;

    /**
     * Create a ImplicitDataDiskFromSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImplicitDataDiskFromSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImplicitDataDiskFromSourceArgs | ImplicitDataDiskFromSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImplicitDataDiskFromSourceState | undefined;
            resourceInputs["caching"] = state?.caching;
            resourceInputs["createOption"] = state?.createOption;
            resourceInputs["diskSizeGb"] = state?.diskSizeGb;
            resourceInputs["lun"] = state?.lun;
            resourceInputs["name"] = state?.name;
            resourceInputs["sourceResourceId"] = state?.sourceResourceId;
            resourceInputs["virtualMachineId"] = state?.virtualMachineId;
            resourceInputs["writeAcceleratorEnabled"] = state?.writeAcceleratorEnabled;
        } else {
            const args = argsOrState as ImplicitDataDiskFromSourceArgs | undefined;
            if (args?.createOption === undefined && !opts.urn) {
                throw new Error("Missing required property 'createOption'");
            }
            if (args?.diskSizeGb === undefined && !opts.urn) {
                throw new Error("Missing required property 'diskSizeGb'");
            }
            if (args?.lun === undefined && !opts.urn) {
                throw new Error("Missing required property 'lun'");
            }
            if (args?.sourceResourceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'sourceResourceId'");
            }
            if (args?.virtualMachineId === undefined && !opts.urn) {
                throw new Error("Missing required property 'virtualMachineId'");
            }
            resourceInputs["caching"] = args?.caching;
            resourceInputs["createOption"] = args?.createOption;
            resourceInputs["diskSizeGb"] = args?.diskSizeGb;
            resourceInputs["lun"] = args?.lun;
            resourceInputs["name"] = args?.name;
            resourceInputs["sourceResourceId"] = args?.sourceResourceId;
            resourceInputs["virtualMachineId"] = args?.virtualMachineId;
            resourceInputs["writeAcceleratorEnabled"] = args?.writeAcceleratorEnabled;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImplicitDataDiskFromSource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ImplicitDataDiskFromSource resources.
 */
export interface ImplicitDataDiskFromSourceState {
    /**
     * Specifies the caching requirements for this Data Disk. Possible values are `ReadOnly` and `ReadWrite`.
     */
    caching?: pulumi.Input<string>;
    /**
     * Specifies the Create Option of the Data Disk. The only possible value is `Copy`. Changing this forces a new resource to be created.
     */
    createOption?: pulumi.Input<string>;
    diskSizeGb?: pulumi.Input<number>;
    /**
     * The Logical Unit Number of the Data Disk, which needs to be unique within the Virtual Machine. Changing this forces a new resource to be created.
     */
    lun?: pulumi.Input<number>;
    /**
     * Specifies the name of this Data Disk. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the source resource which this Data Disk was created from. Changing this forces a new resource to be created.
     */
    sourceResourceId?: pulumi.Input<string>;
    /**
     * The ID of the Virtual Machine to which the Data Disk should be attached. Changing this forces a new resource to be created.
     */
    virtualMachineId?: pulumi.Input<string>;
    /**
     * Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
     */
    writeAcceleratorEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ImplicitDataDiskFromSource resource.
 */
export interface ImplicitDataDiskFromSourceArgs {
    /**
     * Specifies the caching requirements for this Data Disk. Possible values are `ReadOnly` and `ReadWrite`.
     */
    caching?: pulumi.Input<string>;
    /**
     * Specifies the Create Option of the Data Disk. The only possible value is `Copy`. Changing this forces a new resource to be created.
     */
    createOption: pulumi.Input<string>;
    diskSizeGb: pulumi.Input<number>;
    /**
     * The Logical Unit Number of the Data Disk, which needs to be unique within the Virtual Machine. Changing this forces a new resource to be created.
     */
    lun: pulumi.Input<number>;
    /**
     * Specifies the name of this Data Disk. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the source resource which this Data Disk was created from. Changing this forces a new resource to be created.
     */
    sourceResourceId: pulumi.Input<string>;
    /**
     * The ID of the Virtual Machine to which the Data Disk should be attached. Changing this forces a new resource to be created.
     */
    virtualMachineId: pulumi.Input<string>;
    /**
     * Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
     */
    writeAcceleratorEnabled?: pulumi.Input<boolean>;
}
