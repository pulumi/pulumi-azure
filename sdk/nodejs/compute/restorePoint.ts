// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Virtual Machine Restore Point.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as std from "@pulumi/std";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
 *     name: "example-network",
 *     addressSpaces: ["10.0.0.0/16"],
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const exampleSubnet = new azure.network.Subnet("example", {
 *     name: "internal",
 *     resourceGroupName: example.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.2.0/24"],
 * });
 * const exampleNetworkInterface = new azure.network.NetworkInterface("example", {
 *     name: "example-nic",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     ipConfigurations: [{
 *         name: "internal",
 *         subnetId: exampleSubnet.id,
 *         privateIpAddressAllocation: "Dynamic",
 *     }],
 * });
 * const exampleLinuxVirtualMachine = new azure.compute.LinuxVirtualMachine("example", {
 *     name: "example-machine",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     size: "Standard_F2",
 *     adminUsername: "adminuser",
 *     networkInterfaceIds: [exampleNetworkInterface.id],
 *     adminSshKeys: [{
 *         username: "adminuser",
 *         publicKey: std.file({
 *             input: "~/.ssh/id_rsa.pub",
 *         }).then(invoke => invoke.result),
 *     }],
 *     osDisk: {
 *         caching: "ReadWrite",
 *         storageAccountType: "Standard_LRS",
 *     },
 *     sourceImageReference: {
 *         publisher: "Canonical",
 *         offer: "0001-com-ubuntu-server-jammy",
 *         sku: "22_04-lts",
 *         version: "latest",
 *     },
 * });
 * const exampleRestorePointCollection = new azure.compute.RestorePointCollection("example", {
 *     name: "example-collection",
 *     resourceGroupName: example.name,
 *     location: exampleLinuxVirtualMachine.location,
 *     sourceVirtualMachineId: exampleLinuxVirtualMachine.id,
 * });
 * const exampleRestorePoint = new azure.compute.RestorePoint("example", {
 *     name: "example-restore-point",
 *     virtualMachineRestorePointCollectionId: exampleRestorePointCollection.id,
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Compute` - 2024-03-01
 *
 * ## Import
 *
 * Virtual Machine Restore Point can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:compute/restorePoint:RestorePoint example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/restorePointCollections/collection1/restorePoints/restorePoint1
 * ```
 */
export class RestorePoint extends pulumi.CustomResource {
    /**
     * Get an existing RestorePoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RestorePointState, opts?: pulumi.CustomResourceOptions): RestorePoint {
        return new RestorePoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:compute/restorePoint:RestorePoint';

    /**
     * Returns true if the given object is an instance of RestorePoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RestorePoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RestorePoint.__pulumiType;
    }

    /**
     * Whether the Consistency Mode of the Virtual Machine Restore Point is set to `CrashConsistent`. Defaults to `false`. Changing this forces a new resource to be created.
     */
    public readonly crashConsistencyModeEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * A list of disks that will be excluded from the Virtual Machine Restore Point. Changing this forces a new resource to be created.
     */
    public readonly excludedDisks!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the name of the Virtual Machine Restore Point. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the ID of the Virtual Machine Restore Point Collection the Virtual Machine Restore Point will be associated with. Changing this forces a new resource to be created.
     */
    public readonly virtualMachineRestorePointCollectionId!: pulumi.Output<string>;

    /**
     * Create a RestorePoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RestorePointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RestorePointArgs | RestorePointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RestorePointState | undefined;
            resourceInputs["crashConsistencyModeEnabled"] = state ? state.crashConsistencyModeEnabled : undefined;
            resourceInputs["excludedDisks"] = state ? state.excludedDisks : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["virtualMachineRestorePointCollectionId"] = state ? state.virtualMachineRestorePointCollectionId : undefined;
        } else {
            const args = argsOrState as RestorePointArgs | undefined;
            if ((!args || args.virtualMachineRestorePointCollectionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualMachineRestorePointCollectionId'");
            }
            resourceInputs["crashConsistencyModeEnabled"] = args ? args.crashConsistencyModeEnabled : undefined;
            resourceInputs["excludedDisks"] = args ? args.excludedDisks : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["virtualMachineRestorePointCollectionId"] = args ? args.virtualMachineRestorePointCollectionId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RestorePoint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RestorePoint resources.
 */
export interface RestorePointState {
    /**
     * Whether the Consistency Mode of the Virtual Machine Restore Point is set to `CrashConsistent`. Defaults to `false`. Changing this forces a new resource to be created.
     */
    crashConsistencyModeEnabled?: pulumi.Input<boolean>;
    /**
     * A list of disks that will be excluded from the Virtual Machine Restore Point. Changing this forces a new resource to be created.
     */
    excludedDisks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the name of the Virtual Machine Restore Point. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the ID of the Virtual Machine Restore Point Collection the Virtual Machine Restore Point will be associated with. Changing this forces a new resource to be created.
     */
    virtualMachineRestorePointCollectionId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RestorePoint resource.
 */
export interface RestorePointArgs {
    /**
     * Whether the Consistency Mode of the Virtual Machine Restore Point is set to `CrashConsistent`. Defaults to `false`. Changing this forces a new resource to be created.
     */
    crashConsistencyModeEnabled?: pulumi.Input<boolean>;
    /**
     * A list of disks that will be excluded from the Virtual Machine Restore Point. Changing this forces a new resource to be created.
     */
    excludedDisks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the name of the Virtual Machine Restore Point. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the ID of the Virtual Machine Restore Point Collection the Virtual Machine Restore Point will be associated with. Changing this forces a new resource to be created.
     */
    virtualMachineRestorePointCollectionId: pulumi.Input<string>;
}
