// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Configures Network Packet Capturing against a Virtual Machine using a Network Watcher.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleNetworkWatcher = new azure.network.NetworkWatcher("example", {
 *     name: "example-nw",
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
 *     name: "example-network",
 *     addressSpaces: ["10.0.0.0/16"],
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const exampleSubnet = new azure.network.Subnet("example", {
 *     name: "internal",
 *     resourceGroupName: example.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.2.0/24"],
 * });
 * const exampleNetworkInterface = new azure.network.NetworkInterface("example", {
 *     name: "example-nic",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     ipConfigurations: [{
 *         name: "testconfiguration1",
 *         subnetId: exampleSubnet.id,
 *         privateIpAddressAllocation: "Dynamic",
 *     }],
 * });
 * const exampleVirtualMachine = new azure.compute.VirtualMachine("example", {
 *     name: "example-vm",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     networkInterfaceIds: [exampleNetworkInterface.id],
 *     vmSize: "Standard_F2",
 *     storageImageReference: {
 *         publisher: "Canonical",
 *         offer: "0001-com-ubuntu-server-jammy",
 *         sku: "22_04-lts",
 *         version: "latest",
 *     },
 *     storageOsDisk: {
 *         name: "osdisk",
 *         caching: "ReadWrite",
 *         createOption: "FromImage",
 *         managedDiskType: "Standard_LRS",
 *     },
 *     osProfile: {
 *         computerName: "pctest-vm",
 *         adminUsername: "testadmin",
 *         adminPassword: "Password1234!",
 *     },
 *     osProfileLinuxConfig: {
 *         disablePasswordAuthentication: false,
 *     },
 * });
 * const exampleExtension = new azure.compute.Extension("example", {
 *     name: "network-watcher",
 *     virtualMachineId: exampleVirtualMachine.id,
 *     publisher: "Microsoft.Azure.NetworkWatcher",
 *     type: "NetworkWatcherAgentLinux",
 *     typeHandlerVersion: "1.4",
 *     autoUpgradeMinorVersion: true,
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "examplesa",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const examplePacketCapture = new azure.compute.PacketCapture("example", {
 *     name: "example-pc",
 *     networkWatcherId: exampleNetworkWatcher.id,
 *     virtualMachineId: exampleVirtualMachine.id,
 *     storageLocation: {
 *         storageAccountId: exampleAccount.id,
 *     },
 * }, {
 *     dependsOn: [exampleExtension],
 * });
 * ```
 *
 * > **Note:** This Resource requires that [the Network Watcher Virtual Machine Extension](https://docs.microsoft.com/azure/network-watcher/network-watcher-packet-capture-manage-portal#before-you-begin) is installed on the Virtual Machine before capturing can be enabled which can be installed via the `azure.compute.Extension` resource.
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.Network` - 2024-05-01
 *
 * ## Import
 *
 * Virtual Machine Packet Captures can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:compute/packetCapture:PacketCapture capture1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/networkWatchers/watcher1/packetCaptures/capture1
 * ```
 */
export class PacketCapture extends pulumi.CustomResource {
    /**
     * Get an existing PacketCapture resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PacketCaptureState, opts?: pulumi.CustomResourceOptions): PacketCapture {
        return new PacketCapture(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:compute/packetCapture:PacketCapture';

    /**
     * Returns true if the given object is an instance of PacketCapture.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PacketCapture {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PacketCapture.__pulumiType;
    }

    /**
     * One or more `filter` blocks as defined below. Changing this forces a new resource to be created.
     */
    declare public readonly filters: pulumi.Output<outputs.compute.PacketCaptureFilter[] | undefined>;
    /**
     * The number of bytes captured per packet. The remaining bytes are truncated. Defaults to `0` (Entire Packet Captured). Changing this forces a new resource to be created.
     */
    declare public readonly maximumBytesPerPacket: pulumi.Output<number | undefined>;
    /**
     * Maximum size of the capture in Bytes. Defaults to `1073741824` (1GB). Changing this forces a new resource to be created.
     */
    declare public readonly maximumBytesPerSession: pulumi.Output<number | undefined>;
    /**
     * The maximum duration of the capture session in seconds. Defaults to `18000` (5 hours). Changing this forces a new resource to be created.
     */
    declare public readonly maximumCaptureDurationInSeconds: pulumi.Output<number | undefined>;
    /**
     * The name to use for this Network Packet Capture. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The resource ID of the Network Watcher. Changing this forces a new resource to be created.
     */
    declare public readonly networkWatcherId: pulumi.Output<string>;
    /**
     * A `storageLocation` block as defined below. Changing this forces a new resource to be created.
     */
    declare public readonly storageLocation: pulumi.Output<outputs.compute.PacketCaptureStorageLocation>;
    /**
     * The resource ID of the target Virtual Machine to capture packets from. Changing this forces a new resource to be created.
     */
    declare public readonly virtualMachineId: pulumi.Output<string>;

    /**
     * Create a PacketCapture resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PacketCaptureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PacketCaptureArgs | PacketCaptureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PacketCaptureState | undefined;
            resourceInputs["filters"] = state?.filters;
            resourceInputs["maximumBytesPerPacket"] = state?.maximumBytesPerPacket;
            resourceInputs["maximumBytesPerSession"] = state?.maximumBytesPerSession;
            resourceInputs["maximumCaptureDurationInSeconds"] = state?.maximumCaptureDurationInSeconds;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkWatcherId"] = state?.networkWatcherId;
            resourceInputs["storageLocation"] = state?.storageLocation;
            resourceInputs["virtualMachineId"] = state?.virtualMachineId;
        } else {
            const args = argsOrState as PacketCaptureArgs | undefined;
            if (args?.networkWatcherId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkWatcherId'");
            }
            if (args?.storageLocation === undefined && !opts.urn) {
                throw new Error("Missing required property 'storageLocation'");
            }
            if (args?.virtualMachineId === undefined && !opts.urn) {
                throw new Error("Missing required property 'virtualMachineId'");
            }
            resourceInputs["filters"] = args?.filters;
            resourceInputs["maximumBytesPerPacket"] = args?.maximumBytesPerPacket;
            resourceInputs["maximumBytesPerSession"] = args?.maximumBytesPerSession;
            resourceInputs["maximumCaptureDurationInSeconds"] = args?.maximumCaptureDurationInSeconds;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkWatcherId"] = args?.networkWatcherId;
            resourceInputs["storageLocation"] = args?.storageLocation;
            resourceInputs["virtualMachineId"] = args?.virtualMachineId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PacketCapture.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PacketCapture resources.
 */
export interface PacketCaptureState {
    /**
     * One or more `filter` blocks as defined below. Changing this forces a new resource to be created.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.compute.PacketCaptureFilter>[]>;
    /**
     * The number of bytes captured per packet. The remaining bytes are truncated. Defaults to `0` (Entire Packet Captured). Changing this forces a new resource to be created.
     */
    maximumBytesPerPacket?: pulumi.Input<number>;
    /**
     * Maximum size of the capture in Bytes. Defaults to `1073741824` (1GB). Changing this forces a new resource to be created.
     */
    maximumBytesPerSession?: pulumi.Input<number>;
    /**
     * The maximum duration of the capture session in seconds. Defaults to `18000` (5 hours). Changing this forces a new resource to be created.
     */
    maximumCaptureDurationInSeconds?: pulumi.Input<number>;
    /**
     * The name to use for this Network Packet Capture. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The resource ID of the Network Watcher. Changing this forces a new resource to be created.
     */
    networkWatcherId?: pulumi.Input<string>;
    /**
     * A `storageLocation` block as defined below. Changing this forces a new resource to be created.
     */
    storageLocation?: pulumi.Input<inputs.compute.PacketCaptureStorageLocation>;
    /**
     * The resource ID of the target Virtual Machine to capture packets from. Changing this forces a new resource to be created.
     */
    virtualMachineId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PacketCapture resource.
 */
export interface PacketCaptureArgs {
    /**
     * One or more `filter` blocks as defined below. Changing this forces a new resource to be created.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.compute.PacketCaptureFilter>[]>;
    /**
     * The number of bytes captured per packet. The remaining bytes are truncated. Defaults to `0` (Entire Packet Captured). Changing this forces a new resource to be created.
     */
    maximumBytesPerPacket?: pulumi.Input<number>;
    /**
     * Maximum size of the capture in Bytes. Defaults to `1073741824` (1GB). Changing this forces a new resource to be created.
     */
    maximumBytesPerSession?: pulumi.Input<number>;
    /**
     * The maximum duration of the capture session in seconds. Defaults to `18000` (5 hours). Changing this forces a new resource to be created.
     */
    maximumCaptureDurationInSeconds?: pulumi.Input<number>;
    /**
     * The name to use for this Network Packet Capture. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The resource ID of the Network Watcher. Changing this forces a new resource to be created.
     */
    networkWatcherId: pulumi.Input<string>;
    /**
     * A `storageLocation` block as defined below. Changing this forces a new resource to be created.
     */
    storageLocation: pulumi.Input<inputs.compute.PacketCaptureStorageLocation>;
    /**
     * The resource ID of the target Virtual Machine to capture packets from. Changing this forces a new resource to be created.
     */
    virtualMachineId: pulumi.Input<string>;
}
