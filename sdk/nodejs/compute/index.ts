// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AvailabilitySetArgs, AvailabilitySetState } from "./availabilitySet";
export type AvailabilitySet = import("./availabilitySet").AvailabilitySet;
export const AvailabilitySet: typeof import("./availabilitySet").AvailabilitySet = null as any;
utilities.lazyLoad(exports, ["AvailabilitySet"], () => require("./availabilitySet"));

export { BastionHostArgs, BastionHostState } from "./bastionHost";
export type BastionHost = import("./bastionHost").BastionHost;
export const BastionHost: typeof import("./bastionHost").BastionHost = null as any;
utilities.lazyLoad(exports, ["BastionHost"], () => require("./bastionHost"));

export { CapacityReservationArgs, CapacityReservationState } from "./capacityReservation";
export type CapacityReservation = import("./capacityReservation").CapacityReservation;
export const CapacityReservation: typeof import("./capacityReservation").CapacityReservation = null as any;
utilities.lazyLoad(exports, ["CapacityReservation"], () => require("./capacityReservation"));

export { CapacityReservationGroupArgs, CapacityReservationGroupState } from "./capacityReservationGroup";
export type CapacityReservationGroup = import("./capacityReservationGroup").CapacityReservationGroup;
export const CapacityReservationGroup: typeof import("./capacityReservationGroup").CapacityReservationGroup = null as any;
utilities.lazyLoad(exports, ["CapacityReservationGroup"], () => require("./capacityReservationGroup"));

export { DataDiskAttachmentArgs, DataDiskAttachmentState } from "./dataDiskAttachment";
export type DataDiskAttachment = import("./dataDiskAttachment").DataDiskAttachment;
export const DataDiskAttachment: typeof import("./dataDiskAttachment").DataDiskAttachment = null as any;
utilities.lazyLoad(exports, ["DataDiskAttachment"], () => require("./dataDiskAttachment"));

export { DedicatedHostArgs, DedicatedHostState } from "./dedicatedHost";
export type DedicatedHost = import("./dedicatedHost").DedicatedHost;
export const DedicatedHost: typeof import("./dedicatedHost").DedicatedHost = null as any;
utilities.lazyLoad(exports, ["DedicatedHost"], () => require("./dedicatedHost"));

export { DedicatedHostGroupArgs, DedicatedHostGroupState } from "./dedicatedHostGroup";
export type DedicatedHostGroup = import("./dedicatedHostGroup").DedicatedHostGroup;
export const DedicatedHostGroup: typeof import("./dedicatedHostGroup").DedicatedHostGroup = null as any;
utilities.lazyLoad(exports, ["DedicatedHostGroup"], () => require("./dedicatedHostGroup"));

export { DiskAccessArgs, DiskAccessState } from "./diskAccess";
export type DiskAccess = import("./diskAccess").DiskAccess;
export const DiskAccess: typeof import("./diskAccess").DiskAccess = null as any;
utilities.lazyLoad(exports, ["DiskAccess"], () => require("./diskAccess"));

export { DiskEncryptionSetArgs, DiskEncryptionSetState } from "./diskEncryptionSet";
export type DiskEncryptionSet = import("./diskEncryptionSet").DiskEncryptionSet;
export const DiskEncryptionSet: typeof import("./diskEncryptionSet").DiskEncryptionSet = null as any;
utilities.lazyLoad(exports, ["DiskEncryptionSet"], () => require("./diskEncryptionSet"));

export { DiskPoolArgs, DiskPoolState } from "./diskPool";
export type DiskPool = import("./diskPool").DiskPool;
export const DiskPool: typeof import("./diskPool").DiskPool = null as any;
utilities.lazyLoad(exports, ["DiskPool"], () => require("./diskPool"));

export { DiskPoolIscsiTargetArgs, DiskPoolIscsiTargetState } from "./diskPoolIscsiTarget";
export type DiskPoolIscsiTarget = import("./diskPoolIscsiTarget").DiskPoolIscsiTarget;
export const DiskPoolIscsiTarget: typeof import("./diskPoolIscsiTarget").DiskPoolIscsiTarget = null as any;
utilities.lazyLoad(exports, ["DiskPoolIscsiTarget"], () => require("./diskPoolIscsiTarget"));

export { DiskPoolIscsiTargetLunArgs, DiskPoolIscsiTargetLunState } from "./diskPoolIscsiTargetLun";
export type DiskPoolIscsiTargetLun = import("./diskPoolIscsiTargetLun").DiskPoolIscsiTargetLun;
export const DiskPoolIscsiTargetLun: typeof import("./diskPoolIscsiTargetLun").DiskPoolIscsiTargetLun = null as any;
utilities.lazyLoad(exports, ["DiskPoolIscsiTargetLun"], () => require("./diskPoolIscsiTargetLun"));

export { DiskPoolManagedDiskAttachmentArgs, DiskPoolManagedDiskAttachmentState } from "./diskPoolManagedDiskAttachment";
export type DiskPoolManagedDiskAttachment = import("./diskPoolManagedDiskAttachment").DiskPoolManagedDiskAttachment;
export const DiskPoolManagedDiskAttachment: typeof import("./diskPoolManagedDiskAttachment").DiskPoolManagedDiskAttachment = null as any;
utilities.lazyLoad(exports, ["DiskPoolManagedDiskAttachment"], () => require("./diskPoolManagedDiskAttachment"));

export { ExtensionArgs, ExtensionState } from "./extension";
export type Extension = import("./extension").Extension;
export const Extension: typeof import("./extension").Extension = null as any;
utilities.lazyLoad(exports, ["Extension"], () => require("./extension"));

export { GalleryApplicationArgs, GalleryApplicationState } from "./galleryApplication";
export type GalleryApplication = import("./galleryApplication").GalleryApplication;
export const GalleryApplication: typeof import("./galleryApplication").GalleryApplication = null as any;
utilities.lazyLoad(exports, ["GalleryApplication"], () => require("./galleryApplication"));

export { GalleryApplicationVersionArgs, GalleryApplicationVersionState } from "./galleryApplicationVersion";
export type GalleryApplicationVersion = import("./galleryApplicationVersion").GalleryApplicationVersion;
export const GalleryApplicationVersion: typeof import("./galleryApplicationVersion").GalleryApplicationVersion = null as any;
utilities.lazyLoad(exports, ["GalleryApplicationVersion"], () => require("./galleryApplicationVersion"));

export { GetAvailabilitySetArgs, GetAvailabilitySetResult, GetAvailabilitySetOutputArgs } from "./getAvailabilitySet";
export const getAvailabilitySet: typeof import("./getAvailabilitySet").getAvailabilitySet = null as any;
export const getAvailabilitySetOutput: typeof import("./getAvailabilitySet").getAvailabilitySetOutput = null as any;
utilities.lazyLoad(exports, ["getAvailabilitySet","getAvailabilitySetOutput"], () => require("./getAvailabilitySet"));

export { GetBastionHostArgs, GetBastionHostResult, GetBastionHostOutputArgs } from "./getBastionHost";
export const getBastionHost: typeof import("./getBastionHost").getBastionHost = null as any;
export const getBastionHostOutput: typeof import("./getBastionHost").getBastionHostOutput = null as any;
utilities.lazyLoad(exports, ["getBastionHost","getBastionHostOutput"], () => require("./getBastionHost"));

export { GetConfidentialLedgerArgs, GetConfidentialLedgerResult, GetConfidentialLedgerOutputArgs } from "./getConfidentialLedger";
export const getConfidentialLedger: typeof import("./getConfidentialLedger").getConfidentialLedger = null as any;
export const getConfidentialLedgerOutput: typeof import("./getConfidentialLedger").getConfidentialLedgerOutput = null as any;
utilities.lazyLoad(exports, ["getConfidentialLedger","getConfidentialLedgerOutput"], () => require("./getConfidentialLedger"));

export { GetDedicatedHostArgs, GetDedicatedHostResult, GetDedicatedHostOutputArgs } from "./getDedicatedHost";
export const getDedicatedHost: typeof import("./getDedicatedHost").getDedicatedHost = null as any;
export const getDedicatedHostOutput: typeof import("./getDedicatedHost").getDedicatedHostOutput = null as any;
utilities.lazyLoad(exports, ["getDedicatedHost","getDedicatedHostOutput"], () => require("./getDedicatedHost"));

export { GetDedicatedHostGroupArgs, GetDedicatedHostGroupResult, GetDedicatedHostGroupOutputArgs } from "./getDedicatedHostGroup";
export const getDedicatedHostGroup: typeof import("./getDedicatedHostGroup").getDedicatedHostGroup = null as any;
export const getDedicatedHostGroupOutput: typeof import("./getDedicatedHostGroup").getDedicatedHostGroupOutput = null as any;
utilities.lazyLoad(exports, ["getDedicatedHostGroup","getDedicatedHostGroupOutput"], () => require("./getDedicatedHostGroup"));

export { GetDiskAccessArgs, GetDiskAccessResult, GetDiskAccessOutputArgs } from "./getDiskAccess";
export const getDiskAccess: typeof import("./getDiskAccess").getDiskAccess = null as any;
export const getDiskAccessOutput: typeof import("./getDiskAccess").getDiskAccessOutput = null as any;
utilities.lazyLoad(exports, ["getDiskAccess","getDiskAccessOutput"], () => require("./getDiskAccess"));

export { GetDiskEncryptionSetArgs, GetDiskEncryptionSetResult, GetDiskEncryptionSetOutputArgs } from "./getDiskEncryptionSet";
export const getDiskEncryptionSet: typeof import("./getDiskEncryptionSet").getDiskEncryptionSet = null as any;
export const getDiskEncryptionSetOutput: typeof import("./getDiskEncryptionSet").getDiskEncryptionSetOutput = null as any;
utilities.lazyLoad(exports, ["getDiskEncryptionSet","getDiskEncryptionSetOutput"], () => require("./getDiskEncryptionSet"));

export { GetImageArgs, GetImageResult, GetImageOutputArgs } from "./getImage";
export const getImage: typeof import("./getImage").getImage = null as any;
export const getImageOutput: typeof import("./getImage").getImageOutput = null as any;
utilities.lazyLoad(exports, ["getImage","getImageOutput"], () => require("./getImage"));

export { GetImagesArgs, GetImagesResult, GetImagesOutputArgs } from "./getImages";
export const getImages: typeof import("./getImages").getImages = null as any;
export const getImagesOutput: typeof import("./getImages").getImagesOutput = null as any;
utilities.lazyLoad(exports, ["getImages","getImagesOutput"], () => require("./getImages"));

export { GetManagedDiskArgs, GetManagedDiskResult, GetManagedDiskOutputArgs } from "./getManagedDisk";
export const getManagedDisk: typeof import("./getManagedDisk").getManagedDisk = null as any;
export const getManagedDiskOutput: typeof import("./getManagedDisk").getManagedDiskOutput = null as any;
utilities.lazyLoad(exports, ["getManagedDisk","getManagedDiskOutput"], () => require("./getManagedDisk"));

export { GetOrchestratedVirtualMachineScaleSetArgs, GetOrchestratedVirtualMachineScaleSetResult, GetOrchestratedVirtualMachineScaleSetOutputArgs } from "./getOrchestratedVirtualMachineScaleSet";
export const getOrchestratedVirtualMachineScaleSet: typeof import("./getOrchestratedVirtualMachineScaleSet").getOrchestratedVirtualMachineScaleSet = null as any;
export const getOrchestratedVirtualMachineScaleSetOutput: typeof import("./getOrchestratedVirtualMachineScaleSet").getOrchestratedVirtualMachineScaleSetOutput = null as any;
utilities.lazyLoad(exports, ["getOrchestratedVirtualMachineScaleSet","getOrchestratedVirtualMachineScaleSetOutput"], () => require("./getOrchestratedVirtualMachineScaleSet"));

export { GetPlatformImageArgs, GetPlatformImageResult, GetPlatformImageOutputArgs } from "./getPlatformImage";
export const getPlatformImage: typeof import("./getPlatformImage").getPlatformImage = null as any;
export const getPlatformImageOutput: typeof import("./getPlatformImage").getPlatformImageOutput = null as any;
utilities.lazyLoad(exports, ["getPlatformImage","getPlatformImageOutput"], () => require("./getPlatformImage"));

export { GetSharedImageArgs, GetSharedImageResult, GetSharedImageOutputArgs } from "./getSharedImage";
export const getSharedImage: typeof import("./getSharedImage").getSharedImage = null as any;
export const getSharedImageOutput: typeof import("./getSharedImage").getSharedImageOutput = null as any;
utilities.lazyLoad(exports, ["getSharedImage","getSharedImageOutput"], () => require("./getSharedImage"));

export { GetSharedImageGalleryArgs, GetSharedImageGalleryResult, GetSharedImageGalleryOutputArgs } from "./getSharedImageGallery";
export const getSharedImageGallery: typeof import("./getSharedImageGallery").getSharedImageGallery = null as any;
export const getSharedImageGalleryOutput: typeof import("./getSharedImageGallery").getSharedImageGalleryOutput = null as any;
utilities.lazyLoad(exports, ["getSharedImageGallery","getSharedImageGalleryOutput"], () => require("./getSharedImageGallery"));

export { GetSharedImageVersionArgs, GetSharedImageVersionResult, GetSharedImageVersionOutputArgs } from "./getSharedImageVersion";
export const getSharedImageVersion: typeof import("./getSharedImageVersion").getSharedImageVersion = null as any;
export const getSharedImageVersionOutput: typeof import("./getSharedImageVersion").getSharedImageVersionOutput = null as any;
utilities.lazyLoad(exports, ["getSharedImageVersion","getSharedImageVersionOutput"], () => require("./getSharedImageVersion"));

export { GetSharedImageVersionsArgs, GetSharedImageVersionsResult, GetSharedImageVersionsOutputArgs } from "./getSharedImageVersions";
export const getSharedImageVersions: typeof import("./getSharedImageVersions").getSharedImageVersions = null as any;
export const getSharedImageVersionsOutput: typeof import("./getSharedImageVersions").getSharedImageVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getSharedImageVersions","getSharedImageVersionsOutput"], () => require("./getSharedImageVersions"));

export { GetSnapshotArgs, GetSnapshotResult, GetSnapshotOutputArgs } from "./getSnapshot";
export const getSnapshot: typeof import("./getSnapshot").getSnapshot = null as any;
export const getSnapshotOutput: typeof import("./getSnapshot").getSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getSnapshot","getSnapshotOutput"], () => require("./getSnapshot"));

export { GetSshPublicKeyArgs, GetSshPublicKeyResult, GetSshPublicKeyOutputArgs } from "./getSshPublicKey";
export const getSshPublicKey: typeof import("./getSshPublicKey").getSshPublicKey = null as any;
export const getSshPublicKeyOutput: typeof import("./getSshPublicKey").getSshPublicKeyOutput = null as any;
utilities.lazyLoad(exports, ["getSshPublicKey","getSshPublicKeyOutput"], () => require("./getSshPublicKey"));

export { GetVirtualMachineArgs, GetVirtualMachineResult, GetVirtualMachineOutputArgs } from "./getVirtualMachine";
export const getVirtualMachine: typeof import("./getVirtualMachine").getVirtualMachine = null as any;
export const getVirtualMachineOutput: typeof import("./getVirtualMachine").getVirtualMachineOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualMachine","getVirtualMachineOutput"], () => require("./getVirtualMachine"));

export { GetVirtualMachineScaleSetArgs, GetVirtualMachineScaleSetResult, GetVirtualMachineScaleSetOutputArgs } from "./getVirtualMachineScaleSet";
export const getVirtualMachineScaleSet: typeof import("./getVirtualMachineScaleSet").getVirtualMachineScaleSet = null as any;
export const getVirtualMachineScaleSetOutput: typeof import("./getVirtualMachineScaleSet").getVirtualMachineScaleSetOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualMachineScaleSet","getVirtualMachineScaleSetOutput"], () => require("./getVirtualMachineScaleSet"));

export { ImageArgs, ImageState } from "./image";
export type Image = import("./image").Image;
export const Image: typeof import("./image").Image = null as any;
utilities.lazyLoad(exports, ["Image"], () => require("./image"));

export { LinuxVirtualMachineArgs, LinuxVirtualMachineState } from "./linuxVirtualMachine";
export type LinuxVirtualMachine = import("./linuxVirtualMachine").LinuxVirtualMachine;
export const LinuxVirtualMachine: typeof import("./linuxVirtualMachine").LinuxVirtualMachine = null as any;
utilities.lazyLoad(exports, ["LinuxVirtualMachine"], () => require("./linuxVirtualMachine"));

export { LinuxVirtualMachineScaleSetArgs, LinuxVirtualMachineScaleSetState } from "./linuxVirtualMachineScaleSet";
export type LinuxVirtualMachineScaleSet = import("./linuxVirtualMachineScaleSet").LinuxVirtualMachineScaleSet;
export const LinuxVirtualMachineScaleSet: typeof import("./linuxVirtualMachineScaleSet").LinuxVirtualMachineScaleSet = null as any;
utilities.lazyLoad(exports, ["LinuxVirtualMachineScaleSet"], () => require("./linuxVirtualMachineScaleSet"));

export { ManagedDiskArgs, ManagedDiskState } from "./managedDisk";
export type ManagedDisk = import("./managedDisk").ManagedDisk;
export const ManagedDisk: typeof import("./managedDisk").ManagedDisk = null as any;
utilities.lazyLoad(exports, ["ManagedDisk"], () => require("./managedDisk"));

export { ManagedDiskSasTokenArgs, ManagedDiskSasTokenState } from "./managedDiskSasToken";
export type ManagedDiskSasToken = import("./managedDiskSasToken").ManagedDiskSasToken;
export const ManagedDiskSasToken: typeof import("./managedDiskSasToken").ManagedDiskSasToken = null as any;
utilities.lazyLoad(exports, ["ManagedDiskSasToken"], () => require("./managedDiskSasToken"));

export { OrchestratedVirtualMachineScaleSetArgs, OrchestratedVirtualMachineScaleSetState } from "./orchestratedVirtualMachineScaleSet";
export type OrchestratedVirtualMachineScaleSet = import("./orchestratedVirtualMachineScaleSet").OrchestratedVirtualMachineScaleSet;
export const OrchestratedVirtualMachineScaleSet: typeof import("./orchestratedVirtualMachineScaleSet").OrchestratedVirtualMachineScaleSet = null as any;
utilities.lazyLoad(exports, ["OrchestratedVirtualMachineScaleSet"], () => require("./orchestratedVirtualMachineScaleSet"));

export { PacketCaptureArgs, PacketCaptureState } from "./packetCapture";
export type PacketCapture = import("./packetCapture").PacketCapture;
export const PacketCapture: typeof import("./packetCapture").PacketCapture = null as any;
utilities.lazyLoad(exports, ["PacketCapture"], () => require("./packetCapture"));

export { RunCommandArgs, RunCommandState } from "./runCommand";
export type RunCommand = import("./runCommand").RunCommand;
export const RunCommand: typeof import("./runCommand").RunCommand = null as any;
utilities.lazyLoad(exports, ["RunCommand"], () => require("./runCommand"));

export { ScaleSetArgs, ScaleSetState } from "./scaleSet";
export type ScaleSet = import("./scaleSet").ScaleSet;
export const ScaleSet: typeof import("./scaleSet").ScaleSet = null as any;
utilities.lazyLoad(exports, ["ScaleSet"], () => require("./scaleSet"));

export { ScaleSetPacketCaptureArgs, ScaleSetPacketCaptureState } from "./scaleSetPacketCapture";
export type ScaleSetPacketCapture = import("./scaleSetPacketCapture").ScaleSetPacketCapture;
export const ScaleSetPacketCapture: typeof import("./scaleSetPacketCapture").ScaleSetPacketCapture = null as any;
utilities.lazyLoad(exports, ["ScaleSetPacketCapture"], () => require("./scaleSetPacketCapture"));

export { SharedImageArgs, SharedImageState } from "./sharedImage";
export type SharedImage = import("./sharedImage").SharedImage;
export const SharedImage: typeof import("./sharedImage").SharedImage = null as any;
utilities.lazyLoad(exports, ["SharedImage"], () => require("./sharedImage"));

export { SharedImageGalleryArgs, SharedImageGalleryState } from "./sharedImageGallery";
export type SharedImageGallery = import("./sharedImageGallery").SharedImageGallery;
export const SharedImageGallery: typeof import("./sharedImageGallery").SharedImageGallery = null as any;
utilities.lazyLoad(exports, ["SharedImageGallery"], () => require("./sharedImageGallery"));

export { SharedImageVersionArgs, SharedImageVersionState } from "./sharedImageVersion";
export type SharedImageVersion = import("./sharedImageVersion").SharedImageVersion;
export const SharedImageVersion: typeof import("./sharedImageVersion").SharedImageVersion = null as any;
utilities.lazyLoad(exports, ["SharedImageVersion"], () => require("./sharedImageVersion"));

export { SnapshotArgs, SnapshotState } from "./snapshot";
export type Snapshot = import("./snapshot").Snapshot;
export const Snapshot: typeof import("./snapshot").Snapshot = null as any;
utilities.lazyLoad(exports, ["Snapshot"], () => require("./snapshot"));

export { SshPublicKeyArgs, SshPublicKeyState } from "./sshPublicKey";
export type SshPublicKey = import("./sshPublicKey").SshPublicKey;
export const SshPublicKey: typeof import("./sshPublicKey").SshPublicKey = null as any;
utilities.lazyLoad(exports, ["SshPublicKey"], () => require("./sshPublicKey"));

export { VirtualMachineArgs, VirtualMachineState } from "./virtualMachine";
export type VirtualMachine = import("./virtualMachine").VirtualMachine;
export const VirtualMachine: typeof import("./virtualMachine").VirtualMachine = null as any;
utilities.lazyLoad(exports, ["VirtualMachine"], () => require("./virtualMachine"));

export { VirtualMachineScaleSetExtensionArgs, VirtualMachineScaleSetExtensionState } from "./virtualMachineScaleSetExtension";
export type VirtualMachineScaleSetExtension = import("./virtualMachineScaleSetExtension").VirtualMachineScaleSetExtension;
export const VirtualMachineScaleSetExtension: typeof import("./virtualMachineScaleSetExtension").VirtualMachineScaleSetExtension = null as any;
utilities.lazyLoad(exports, ["VirtualMachineScaleSetExtension"], () => require("./virtualMachineScaleSetExtension"));

export { WindowsVirtualMachineArgs, WindowsVirtualMachineState } from "./windowsVirtualMachine";
export type WindowsVirtualMachine = import("./windowsVirtualMachine").WindowsVirtualMachine;
export const WindowsVirtualMachine: typeof import("./windowsVirtualMachine").WindowsVirtualMachine = null as any;
utilities.lazyLoad(exports, ["WindowsVirtualMachine"], () => require("./windowsVirtualMachine"));

export { WindowsVirtualMachineScaleSetArgs, WindowsVirtualMachineScaleSetState } from "./windowsVirtualMachineScaleSet";
export type WindowsVirtualMachineScaleSet = import("./windowsVirtualMachineScaleSet").WindowsVirtualMachineScaleSet;
export const WindowsVirtualMachineScaleSet: typeof import("./windowsVirtualMachineScaleSet").WindowsVirtualMachineScaleSet = null as any;
utilities.lazyLoad(exports, ["WindowsVirtualMachineScaleSet"], () => require("./windowsVirtualMachineScaleSet"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:compute/availabilitySet:AvailabilitySet":
                return new AvailabilitySet(name, <any>undefined, { urn })
            case "azure:compute/bastionHost:BastionHost":
                return new BastionHost(name, <any>undefined, { urn })
            case "azure:compute/capacityReservation:CapacityReservation":
                return new CapacityReservation(name, <any>undefined, { urn })
            case "azure:compute/capacityReservationGroup:CapacityReservationGroup":
                return new CapacityReservationGroup(name, <any>undefined, { urn })
            case "azure:compute/dataDiskAttachment:DataDiskAttachment":
                return new DataDiskAttachment(name, <any>undefined, { urn })
            case "azure:compute/dedicatedHost:DedicatedHost":
                return new DedicatedHost(name, <any>undefined, { urn })
            case "azure:compute/dedicatedHostGroup:DedicatedHostGroup":
                return new DedicatedHostGroup(name, <any>undefined, { urn })
            case "azure:compute/diskAccess:DiskAccess":
                return new DiskAccess(name, <any>undefined, { urn })
            case "azure:compute/diskEncryptionSet:DiskEncryptionSet":
                return new DiskEncryptionSet(name, <any>undefined, { urn })
            case "azure:compute/diskPool:DiskPool":
                return new DiskPool(name, <any>undefined, { urn })
            case "azure:compute/diskPoolIscsiTarget:DiskPoolIscsiTarget":
                return new DiskPoolIscsiTarget(name, <any>undefined, { urn })
            case "azure:compute/diskPoolIscsiTargetLun:DiskPoolIscsiTargetLun":
                return new DiskPoolIscsiTargetLun(name, <any>undefined, { urn })
            case "azure:compute/diskPoolManagedDiskAttachment:DiskPoolManagedDiskAttachment":
                return new DiskPoolManagedDiskAttachment(name, <any>undefined, { urn })
            case "azure:compute/extension:Extension":
                return new Extension(name, <any>undefined, { urn })
            case "azure:compute/galleryApplication:GalleryApplication":
                return new GalleryApplication(name, <any>undefined, { urn })
            case "azure:compute/galleryApplicationVersion:GalleryApplicationVersion":
                return new GalleryApplicationVersion(name, <any>undefined, { urn })
            case "azure:compute/image:Image":
                return new Image(name, <any>undefined, { urn })
            case "azure:compute/linuxVirtualMachine:LinuxVirtualMachine":
                return new LinuxVirtualMachine(name, <any>undefined, { urn })
            case "azure:compute/linuxVirtualMachineScaleSet:LinuxVirtualMachineScaleSet":
                return new LinuxVirtualMachineScaleSet(name, <any>undefined, { urn })
            case "azure:compute/managedDisk:ManagedDisk":
                return new ManagedDisk(name, <any>undefined, { urn })
            case "azure:compute/managedDiskSasToken:ManagedDiskSasToken":
                return new ManagedDiskSasToken(name, <any>undefined, { urn })
            case "azure:compute/orchestratedVirtualMachineScaleSet:OrchestratedVirtualMachineScaleSet":
                return new OrchestratedVirtualMachineScaleSet(name, <any>undefined, { urn })
            case "azure:compute/packetCapture:PacketCapture":
                return new PacketCapture(name, <any>undefined, { urn })
            case "azure:compute/runCommand:RunCommand":
                return new RunCommand(name, <any>undefined, { urn })
            case "azure:compute/scaleSet:ScaleSet":
                return new ScaleSet(name, <any>undefined, { urn })
            case "azure:compute/scaleSetPacketCapture:ScaleSetPacketCapture":
                return new ScaleSetPacketCapture(name, <any>undefined, { urn })
            case "azure:compute/sharedImage:SharedImage":
                return new SharedImage(name, <any>undefined, { urn })
            case "azure:compute/sharedImageGallery:SharedImageGallery":
                return new SharedImageGallery(name, <any>undefined, { urn })
            case "azure:compute/sharedImageVersion:SharedImageVersion":
                return new SharedImageVersion(name, <any>undefined, { urn })
            case "azure:compute/snapshot:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            case "azure:compute/sshPublicKey:SshPublicKey":
                return new SshPublicKey(name, <any>undefined, { urn })
            case "azure:compute/virtualMachine:VirtualMachine":
                return new VirtualMachine(name, <any>undefined, { urn })
            case "azure:compute/virtualMachineScaleSetExtension:VirtualMachineScaleSetExtension":
                return new VirtualMachineScaleSetExtension(name, <any>undefined, { urn })
            case "azure:compute/windowsVirtualMachine:WindowsVirtualMachine":
                return new WindowsVirtualMachine(name, <any>undefined, { urn })
            case "azure:compute/windowsVirtualMachineScaleSet:WindowsVirtualMachineScaleSet":
                return new WindowsVirtualMachineScaleSet(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "compute/availabilitySet", _module)
pulumi.runtime.registerResourceModule("azure", "compute/bastionHost", _module)
pulumi.runtime.registerResourceModule("azure", "compute/capacityReservation", _module)
pulumi.runtime.registerResourceModule("azure", "compute/capacityReservationGroup", _module)
pulumi.runtime.registerResourceModule("azure", "compute/dataDiskAttachment", _module)
pulumi.runtime.registerResourceModule("azure", "compute/dedicatedHost", _module)
pulumi.runtime.registerResourceModule("azure", "compute/dedicatedHostGroup", _module)
pulumi.runtime.registerResourceModule("azure", "compute/diskAccess", _module)
pulumi.runtime.registerResourceModule("azure", "compute/diskEncryptionSet", _module)
pulumi.runtime.registerResourceModule("azure", "compute/diskPool", _module)
pulumi.runtime.registerResourceModule("azure", "compute/diskPoolIscsiTarget", _module)
pulumi.runtime.registerResourceModule("azure", "compute/diskPoolIscsiTargetLun", _module)
pulumi.runtime.registerResourceModule("azure", "compute/diskPoolManagedDiskAttachment", _module)
pulumi.runtime.registerResourceModule("azure", "compute/extension", _module)
pulumi.runtime.registerResourceModule("azure", "compute/galleryApplication", _module)
pulumi.runtime.registerResourceModule("azure", "compute/galleryApplicationVersion", _module)
pulumi.runtime.registerResourceModule("azure", "compute/image", _module)
pulumi.runtime.registerResourceModule("azure", "compute/linuxVirtualMachine", _module)
pulumi.runtime.registerResourceModule("azure", "compute/linuxVirtualMachineScaleSet", _module)
pulumi.runtime.registerResourceModule("azure", "compute/managedDisk", _module)
pulumi.runtime.registerResourceModule("azure", "compute/managedDiskSasToken", _module)
pulumi.runtime.registerResourceModule("azure", "compute/orchestratedVirtualMachineScaleSet", _module)
pulumi.runtime.registerResourceModule("azure", "compute/packetCapture", _module)
pulumi.runtime.registerResourceModule("azure", "compute/runCommand", _module)
pulumi.runtime.registerResourceModule("azure", "compute/scaleSet", _module)
pulumi.runtime.registerResourceModule("azure", "compute/scaleSetPacketCapture", _module)
pulumi.runtime.registerResourceModule("azure", "compute/sharedImage", _module)
pulumi.runtime.registerResourceModule("azure", "compute/sharedImageGallery", _module)
pulumi.runtime.registerResourceModule("azure", "compute/sharedImageVersion", _module)
pulumi.runtime.registerResourceModule("azure", "compute/snapshot", _module)
pulumi.runtime.registerResourceModule("azure", "compute/sshPublicKey", _module)
pulumi.runtime.registerResourceModule("azure", "compute/virtualMachine", _module)
pulumi.runtime.registerResourceModule("azure", "compute/virtualMachineScaleSetExtension", _module)
pulumi.runtime.registerResourceModule("azure", "compute/windowsVirtualMachine", _module)
pulumi.runtime.registerResourceModule("azure", "compute/windowsVirtualMachineScaleSet", _module)
