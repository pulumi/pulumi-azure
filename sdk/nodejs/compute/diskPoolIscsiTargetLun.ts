// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an iSCSI Target lun.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as azuread from "@pulumi/azuread";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("exampleVirtualNetwork", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     addressSpaces: ["10.0.0.0/16"],
 * });
 * const exampleSubnet = new azure.network.Subnet("exampleSubnet", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.0.0/24"],
 *     delegations: [{
 *         name: "diskspool",
 *         serviceDelegation: {
 *             actions: ["Microsoft.Network/virtualNetworks/read"],
 *             name: "Microsoft.StoragePool/diskPools",
 *         },
 *     }],
 * });
 * const exampleDiskPool = new azure.compute.DiskPool("exampleDiskPool", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     subnetId: exampleSubnet.id,
 *     zones: ["1"],
 *     skuName: "Basic_B1",
 * });
 * const exampleManagedDisk = new azure.compute.ManagedDisk("exampleManagedDisk", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     createOption: "Empty",
 *     storageAccountType: "Premium_LRS",
 *     diskSizeGb: 4,
 *     maxShares: 2,
 *     zone: "1",
 * });
 * const exampleServicePrincipal = azuread.getServicePrincipal({
 *     displayName: "StoragePool Resource Provider",
 * });
 * const roles = [
 *     "Disk Pool Operator",
 *     "Virtual Machine Contributor",
 * ];
 * const exampleAssignment: azure.authorization.Assignment[];
 * for (const range = {value: 0}; range.value < roles.length; range.value++) {
 *     exampleAssignment.push(new azure.authorization.Assignment(`exampleAssignment-${range.value}`, {
 *         principalId: exampleServicePrincipal.then(exampleServicePrincipal => exampleServicePrincipal.id),
 *         roleDefinitionName: roles[range.value],
 *         scope: exampleManagedDisk.id,
 *     }));
 * }
 * const exampleDiskPoolManagedDiskAttachment = new azure.compute.DiskPoolManagedDiskAttachment("exampleDiskPoolManagedDiskAttachment", {
 *     diskPoolId: exampleDiskPool.id,
 *     managedDiskId: exampleManagedDisk.id,
 * }, {
 *     dependsOn: [exampleAssignment],
 * });
 * const exampleDiskPoolIscsiTarget = new azure.compute.DiskPoolIscsiTarget("exampleDiskPoolIscsiTarget", {
 *     aclMode: "Dynamic",
 *     disksPoolId: exampleDiskPool.id,
 *     targetIqn: "iqn.2021-11.com.microsoft:test",
 * }, {
 *     dependsOn: [exampleDiskPoolManagedDiskAttachment],
 * });
 * const exampleDiskPoolIscsiTargetLun = new azure.compute.DiskPoolIscsiTargetLun("exampleDiskPoolIscsiTargetLun", {
 *     iscsiTargetId: exampleDiskPoolIscsiTarget.id,
 *     diskPoolManagedDiskAttachmentId: exampleDiskPoolManagedDiskAttachment.id,
 * });
 * ```
 *
 * ## Import
 *
 * iSCSI Target Luns can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:compute/diskPoolIscsiTargetLun:DiskPoolIscsiTargetLun example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/example-resource-group/providers/Microsoft.StoragePool/diskPools/diskPoolValue/iscsiTargets/iscsiTargetValue/lun|/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Compute/disks/disk1
 * ```
 */
export class DiskPoolIscsiTargetLun extends pulumi.CustomResource {
    /**
     * Get an existing DiskPoolIscsiTargetLun resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DiskPoolIscsiTargetLunState, opts?: pulumi.CustomResourceOptions): DiskPoolIscsiTargetLun {
        return new DiskPoolIscsiTargetLun(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:compute/diskPoolIscsiTargetLun:DiskPoolIscsiTargetLun';

    /**
     * Returns true if the given object is an instance of DiskPoolIscsiTargetLun.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DiskPoolIscsiTargetLun {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DiskPoolIscsiTargetLun.__pulumiType;
    }

    /**
     * The ID of the `azure.compute.DiskPoolManagedDiskAttachment`. Changing this forces a new iSCSI Target LUN to be created.
     */
    public readonly diskPoolManagedDiskAttachmentId!: pulumi.Output<string>;
    /**
     * The ID of the iSCSI Target. Changing this forces a new iSCSI Target LUN to be created.
     */
    public readonly iscsiTargetId!: pulumi.Output<string>;
    /**
     * The Logical Unit Number of the iSCSI Target LUN.
     */
    public /*out*/ readonly lun!: pulumi.Output<number>;
    /**
     * User defined name for iSCSI LUN. Supported characters include uppercase letters, lowercase letters, numbers, periods, underscores or hyphens. Name should end with an alphanumeric character. The length must be between `1` and `90`. Changing this forces a new iSCSI Target LUN to be created.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a DiskPoolIscsiTargetLun resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DiskPoolIscsiTargetLunArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DiskPoolIscsiTargetLunArgs | DiskPoolIscsiTargetLunState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DiskPoolIscsiTargetLunState | undefined;
            resourceInputs["diskPoolManagedDiskAttachmentId"] = state ? state.diskPoolManagedDiskAttachmentId : undefined;
            resourceInputs["iscsiTargetId"] = state ? state.iscsiTargetId : undefined;
            resourceInputs["lun"] = state ? state.lun : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as DiskPoolIscsiTargetLunArgs | undefined;
            if ((!args || args.diskPoolManagedDiskAttachmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskPoolManagedDiskAttachmentId'");
            }
            if ((!args || args.iscsiTargetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'iscsiTargetId'");
            }
            resourceInputs["diskPoolManagedDiskAttachmentId"] = args ? args.diskPoolManagedDiskAttachmentId : undefined;
            resourceInputs["iscsiTargetId"] = args ? args.iscsiTargetId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["lun"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DiskPoolIscsiTargetLun.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DiskPoolIscsiTargetLun resources.
 */
export interface DiskPoolIscsiTargetLunState {
    /**
     * The ID of the `azure.compute.DiskPoolManagedDiskAttachment`. Changing this forces a new iSCSI Target LUN to be created.
     */
    diskPoolManagedDiskAttachmentId?: pulumi.Input<string>;
    /**
     * The ID of the iSCSI Target. Changing this forces a new iSCSI Target LUN to be created.
     */
    iscsiTargetId?: pulumi.Input<string>;
    /**
     * The Logical Unit Number of the iSCSI Target LUN.
     */
    lun?: pulumi.Input<number>;
    /**
     * User defined name for iSCSI LUN. Supported characters include uppercase letters, lowercase letters, numbers, periods, underscores or hyphens. Name should end with an alphanumeric character. The length must be between `1` and `90`. Changing this forces a new iSCSI Target LUN to be created.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DiskPoolIscsiTargetLun resource.
 */
export interface DiskPoolIscsiTargetLunArgs {
    /**
     * The ID of the `azure.compute.DiskPoolManagedDiskAttachment`. Changing this forces a new iSCSI Target LUN to be created.
     */
    diskPoolManagedDiskAttachmentId: pulumi.Input<string>;
    /**
     * The ID of the iSCSI Target. Changing this forces a new iSCSI Target LUN to be created.
     */
    iscsiTargetId: pulumi.Input<string>;
    /**
     * User defined name for iSCSI LUN. Supported characters include uppercase letters, lowercase letters, numbers, periods, underscores or hyphens. Name should end with an alphanumeric character. The length must be between `1` and `90`. Changing this forces a new iSCSI Target LUN to be created.
     */
    name?: pulumi.Input<string>;
}
