// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Windows Virtual Machine Scale Set.
 *
 * ## Disclaimers
 *
 * > **Note** This provider will automatically update & reimage the nodes in the Scale Set (if Required) during an Update - this behaviour can be configured using the `features` configuration within the Provider configuration block.
 *
 * > **Note:** This resource does not support Unmanaged Disks. If you need to use Unmanaged Disks you can continue to use the `azure.compute.ScaleSet` resource instead
 *
 * ## Example Usage
 *
 *
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("exampleVirtualNetwork", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     addressSpaces: ["10.0.0.0/16"],
 * });
 * const internal = new azure.network.Subnet("internal", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefix: "10.0.2.0/24",
 * });
 * const exampleWindowsVirtualMachineScaleSet = new azure.compute.WindowsVirtualMachineScaleSet("exampleWindowsVirtualMachineScaleSet", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     sku: "Standard_F2",
 *     instances: 1,
 *     adminPassword: "P@55w0rd1234!",
 *     adminUsername: "adminuser",
 *     source_image_reference: {
 *         publisher: "MicrosoftWindowsServer",
 *         offer: "WindowsServer",
 *         sku: "2016-Datacenter-Server-Core",
 *         version: "latest",
 *     },
 *     os_disk: {
 *         storageAccountType: "Standard_LRS",
 *         caching: "ReadWrite",
 *     },
 *     network_interface: [{
 *         name: "example",
 *         primary: true,
 *         ip_configuration: [{
 *             name: "internal",
 *             primary: true,
 *             subnetId: internal.id,
 *         }],
 *     }],
 * });
 * ```
 */
export class WindowsVirtualMachineScaleSet extends pulumi.CustomResource {
    /**
     * Get an existing WindowsVirtualMachineScaleSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WindowsVirtualMachineScaleSetState, opts?: pulumi.CustomResourceOptions): WindowsVirtualMachineScaleSet {
        return new WindowsVirtualMachineScaleSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:compute/windowsVirtualMachineScaleSet:WindowsVirtualMachineScaleSet';

    /**
     * Returns true if the given object is an instance of WindowsVirtualMachineScaleSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WindowsVirtualMachineScaleSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WindowsVirtualMachineScaleSet.__pulumiType;
    }

    /**
     * A `additionalCapabilities` block as defined below.
     */
    public readonly additionalCapabilities!: pulumi.Output<outputs.compute.WindowsVirtualMachineScaleSetAdditionalCapabilities | undefined>;
    /**
     * One or more `additionalUnattendContent` blocks as defined below.
     */
    public readonly additionalUnattendContents!: pulumi.Output<outputs.compute.WindowsVirtualMachineScaleSetAdditionalUnattendContent[] | undefined>;
    /**
     * The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
     */
    public readonly adminPassword!: pulumi.Output<string>;
    /**
     * The username of the local administrator on each Virtual Machine Scale Set instance. Changing this forces a new resource to be created.
     */
    public readonly adminUsername!: pulumi.Output<string>;
    /**
     * A `automaticInstanceRepair` block as defined below. To enable the automatic instance repair, this Virtual Machine Scale Set must have a valid `healthProbeId` or an [Application Health Extension](https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-health-extension).
     */
    public readonly automaticInstanceRepair!: pulumi.Output<outputs.compute.WindowsVirtualMachineScaleSetAutomaticInstanceRepair>;
    /**
     * A `automaticOsUpgradePolicy` block as defined below. This is Required and can only be specified when `upgradeMode` is set to `Automatic`.
     */
    public readonly automaticOsUpgradePolicy!: pulumi.Output<outputs.compute.WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicy | undefined>;
    /**
     * A `bootDiagnostics` block as defined below.
     */
    public readonly bootDiagnostics!: pulumi.Output<outputs.compute.WindowsVirtualMachineScaleSetBootDiagnostics | undefined>;
    /**
     * The prefix which should be used for the name of the Virtual Machines in this Scale Set. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computerNamePrefix`, then you must specify `computerNamePrefix`.
     */
    public readonly computerNamePrefix!: pulumi.Output<string>;
    /**
     * The Base64-Encoded Custom Data which should be used for this Virtual Machine Scale Set.
     */
    public readonly customData!: pulumi.Output<string | undefined>;
    /**
     * One or more `dataDisk` blocks as defined below.
     */
    public readonly dataDisks!: pulumi.Output<outputs.compute.WindowsVirtualMachineScaleSetDataDisk[] | undefined>;
    /**
     * Should Virtual Machine Extensions be run on Overprovisioned Virtual Machines in the Scale Set? Defaults to `false`.
     */
    public readonly doNotRunExtensionsOnOverprovisionedMachines!: pulumi.Output<boolean | undefined>;
    /**
     * Are automatic updates enabled for this Virtual Machine? Defaults to `true`.
     */
    public readonly enableAutomaticUpdates!: pulumi.Output<boolean | undefined>;
    /**
     * The Policy which should be used Virtual Machines are Evicted from the Scale Set. Changing this forces a new resource to be created.
     */
    public readonly evictionPolicy!: pulumi.Output<string | undefined>;
    /**
     * The ID of a Load Balancer Probe which should be used to determine the health of an instance. Changing this forces a new resource to be created. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
     */
    public readonly healthProbeId!: pulumi.Output<string | undefined>;
    /**
     * A `identity` block as defined below.
     */
    public readonly identity!: pulumi.Output<outputs.compute.WindowsVirtualMachineScaleSetIdentity | undefined>;
    /**
     * The number of Virtual Machines in the Scale Set.
     */
    public readonly instances!: pulumi.Output<number>;
    /**
     * Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing)) which should be used for this Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`. Changing this forces a new resource to be created.
     */
    public readonly licenseType!: pulumi.Output<string | undefined>;
    /**
     * The Azure location where the Windows Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The maximum price you're willing to pay for each Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the `evictionPolicy`. Defaults to `-1`, which means that each Virtual Machine in the Scale Set should not be evicted for price reasons.
     */
    public readonly maxBidPrice!: pulumi.Output<number | undefined>;
    /**
     * The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * One or more `networkInterface` blocks as defined below.
     */
    public readonly networkInterfaces!: pulumi.Output<outputs.compute.WindowsVirtualMachineScaleSetNetworkInterface[]>;
    /**
     * An `osDisk` block as defined below.
     */
    public readonly osDisk!: pulumi.Output<outputs.compute.WindowsVirtualMachineScaleSetOsDisk>;
    /**
     * Should Azure over-provision Virtual Machines in this Scale Set? This means that multiple Virtual Machines will be provisioned and Azure will keep the instances which become available first - which improves provisioning success rates and improves deployment time. You're not billed for these over-provisioned VM's and they don't count towards the Subscription Quota. Defaults to `false`.
     */
    public readonly overprovision!: pulumi.Output<boolean | undefined>;
    public readonly plan!: pulumi.Output<outputs.compute.WindowsVirtualMachineScaleSetPlan | undefined>;
    /**
     * The Priority of this Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
     */
    public readonly priority!: pulumi.Output<string | undefined>;
    /**
     * Should the Azure VM Agent be provisioned on each Virtual Machine in the Scale Set? Defaults to `true`. Changing this value forces a new resource to be created.
     */
    public readonly provisionVmAgent!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the Proximity Placement Group in which the Virtual Machine Scale Set should be assigned to. Changing this forces a new resource to be created.
     */
    public readonly proximityPlacementGroupId!: pulumi.Output<string | undefined>;
    /**
     * The name of the Resource Group in which the Windows Virtual Machine Scale Set should be exist. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * A `rollingUpgradePolicy` block as defined below. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
     */
    public readonly rollingUpgradePolicy!: pulumi.Output<outputs.compute.WindowsVirtualMachineScaleSetRollingUpgradePolicy | undefined>;
    /**
     * The scale-in policy rule that decides which virtual machines are chosen for removal when a Virtual Machine Scale Set is scaled in. Possible values for the scale-in policy rules are `Default`, `NewestVM` and `OldestVM`, defaults to `Default`. For more information about scale in policy, please [refer to this doc](https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-scale-in-policy).
     */
    public readonly scaleInPolicy!: pulumi.Output<string | undefined>;
    /**
     * One or more `secret` blocks as defined below.
     */
    public readonly secrets!: pulumi.Output<outputs.compute.WindowsVirtualMachineScaleSetSecret[] | undefined>;
    /**
     * Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Defaults to `true`.
     */
    public readonly singlePlacementGroup!: pulumi.Output<boolean | undefined>;
    /**
     * The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
     */
    public readonly sku!: pulumi.Output<string>;
    /**
     * The ID of an Image which each Virtual Machine in this Scale Set should be based on.
     */
    public readonly sourceImageId!: pulumi.Output<string | undefined>;
    /**
     * A `sourceImageReference` block as defined below.
     */
    public readonly sourceImageReference!: pulumi.Output<outputs.compute.WindowsVirtualMachineScaleSetSourceImageReference | undefined>;
    /**
     * A mapping of tags which should be assigned to this Virtual Machine Scale Set.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A `terminateNotification` block as defined below.
     */
    public readonly terminateNotification!: pulumi.Output<outputs.compute.WindowsVirtualMachineScaleSetTerminateNotification>;
    /**
     * Specifies the time zone of the virtual machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
     */
    public readonly timezone!: pulumi.Output<string | undefined>;
    /**
     * The Unique ID for this Windows Virtual Machine Scale Set.
     */
    public /*out*/ readonly uniqueId!: pulumi.Output<string>;
    /**
     * Specifies how Upgrades (e.g. changing the Image/SKU) should be performed to Virtual Machine Instances. Possible values are `Automatic`, `Manual` and `Rolling`. Defaults to `Manual`.
     */
    public readonly upgradeMode!: pulumi.Output<string | undefined>;
    /**
     * One or more `winrmListener` blocks as defined below.
     */
    public readonly winrmListeners!: pulumi.Output<outputs.compute.WindowsVirtualMachineScaleSetWinrmListener[] | undefined>;
    /**
     * Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
     */
    public readonly zoneBalance!: pulumi.Output<boolean | undefined>;
    /**
     * A list of Availability Zones in which the Virtual Machines in this Scale Set should be created in. Changing this forces a new resource to be created.
     */
    public readonly zones!: pulumi.Output<string[] | undefined>;

    /**
     * Create a WindowsVirtualMachineScaleSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WindowsVirtualMachineScaleSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WindowsVirtualMachineScaleSetArgs | WindowsVirtualMachineScaleSetState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as WindowsVirtualMachineScaleSetState | undefined;
            inputs["additionalCapabilities"] = state ? state.additionalCapabilities : undefined;
            inputs["additionalUnattendContents"] = state ? state.additionalUnattendContents : undefined;
            inputs["adminPassword"] = state ? state.adminPassword : undefined;
            inputs["adminUsername"] = state ? state.adminUsername : undefined;
            inputs["automaticInstanceRepair"] = state ? state.automaticInstanceRepair : undefined;
            inputs["automaticOsUpgradePolicy"] = state ? state.automaticOsUpgradePolicy : undefined;
            inputs["bootDiagnostics"] = state ? state.bootDiagnostics : undefined;
            inputs["computerNamePrefix"] = state ? state.computerNamePrefix : undefined;
            inputs["customData"] = state ? state.customData : undefined;
            inputs["dataDisks"] = state ? state.dataDisks : undefined;
            inputs["doNotRunExtensionsOnOverprovisionedMachines"] = state ? state.doNotRunExtensionsOnOverprovisionedMachines : undefined;
            inputs["enableAutomaticUpdates"] = state ? state.enableAutomaticUpdates : undefined;
            inputs["evictionPolicy"] = state ? state.evictionPolicy : undefined;
            inputs["healthProbeId"] = state ? state.healthProbeId : undefined;
            inputs["identity"] = state ? state.identity : undefined;
            inputs["instances"] = state ? state.instances : undefined;
            inputs["licenseType"] = state ? state.licenseType : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["maxBidPrice"] = state ? state.maxBidPrice : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            inputs["osDisk"] = state ? state.osDisk : undefined;
            inputs["overprovision"] = state ? state.overprovision : undefined;
            inputs["plan"] = state ? state.plan : undefined;
            inputs["priority"] = state ? state.priority : undefined;
            inputs["provisionVmAgent"] = state ? state.provisionVmAgent : undefined;
            inputs["proximityPlacementGroupId"] = state ? state.proximityPlacementGroupId : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["rollingUpgradePolicy"] = state ? state.rollingUpgradePolicy : undefined;
            inputs["scaleInPolicy"] = state ? state.scaleInPolicy : undefined;
            inputs["secrets"] = state ? state.secrets : undefined;
            inputs["singlePlacementGroup"] = state ? state.singlePlacementGroup : undefined;
            inputs["sku"] = state ? state.sku : undefined;
            inputs["sourceImageId"] = state ? state.sourceImageId : undefined;
            inputs["sourceImageReference"] = state ? state.sourceImageReference : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["terminateNotification"] = state ? state.terminateNotification : undefined;
            inputs["timezone"] = state ? state.timezone : undefined;
            inputs["uniqueId"] = state ? state.uniqueId : undefined;
            inputs["upgradeMode"] = state ? state.upgradeMode : undefined;
            inputs["winrmListeners"] = state ? state.winrmListeners : undefined;
            inputs["zoneBalance"] = state ? state.zoneBalance : undefined;
            inputs["zones"] = state ? state.zones : undefined;
        } else {
            const args = argsOrState as WindowsVirtualMachineScaleSetArgs | undefined;
            if (!args || args.adminPassword === undefined) {
                throw new Error("Missing required property 'adminPassword'");
            }
            if (!args || args.adminUsername === undefined) {
                throw new Error("Missing required property 'adminUsername'");
            }
            if (!args || args.instances === undefined) {
                throw new Error("Missing required property 'instances'");
            }
            if (!args || args.networkInterfaces === undefined) {
                throw new Error("Missing required property 'networkInterfaces'");
            }
            if (!args || args.osDisk === undefined) {
                throw new Error("Missing required property 'osDisk'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.sku === undefined) {
                throw new Error("Missing required property 'sku'");
            }
            inputs["additionalCapabilities"] = args ? args.additionalCapabilities : undefined;
            inputs["additionalUnattendContents"] = args ? args.additionalUnattendContents : undefined;
            inputs["adminPassword"] = args ? args.adminPassword : undefined;
            inputs["adminUsername"] = args ? args.adminUsername : undefined;
            inputs["automaticInstanceRepair"] = args ? args.automaticInstanceRepair : undefined;
            inputs["automaticOsUpgradePolicy"] = args ? args.automaticOsUpgradePolicy : undefined;
            inputs["bootDiagnostics"] = args ? args.bootDiagnostics : undefined;
            inputs["computerNamePrefix"] = args ? args.computerNamePrefix : undefined;
            inputs["customData"] = args ? args.customData : undefined;
            inputs["dataDisks"] = args ? args.dataDisks : undefined;
            inputs["doNotRunExtensionsOnOverprovisionedMachines"] = args ? args.doNotRunExtensionsOnOverprovisionedMachines : undefined;
            inputs["enableAutomaticUpdates"] = args ? args.enableAutomaticUpdates : undefined;
            inputs["evictionPolicy"] = args ? args.evictionPolicy : undefined;
            inputs["healthProbeId"] = args ? args.healthProbeId : undefined;
            inputs["identity"] = args ? args.identity : undefined;
            inputs["instances"] = args ? args.instances : undefined;
            inputs["licenseType"] = args ? args.licenseType : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["maxBidPrice"] = args ? args.maxBidPrice : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            inputs["osDisk"] = args ? args.osDisk : undefined;
            inputs["overprovision"] = args ? args.overprovision : undefined;
            inputs["plan"] = args ? args.plan : undefined;
            inputs["priority"] = args ? args.priority : undefined;
            inputs["provisionVmAgent"] = args ? args.provisionVmAgent : undefined;
            inputs["proximityPlacementGroupId"] = args ? args.proximityPlacementGroupId : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["rollingUpgradePolicy"] = args ? args.rollingUpgradePolicy : undefined;
            inputs["scaleInPolicy"] = args ? args.scaleInPolicy : undefined;
            inputs["secrets"] = args ? args.secrets : undefined;
            inputs["singlePlacementGroup"] = args ? args.singlePlacementGroup : undefined;
            inputs["sku"] = args ? args.sku : undefined;
            inputs["sourceImageId"] = args ? args.sourceImageId : undefined;
            inputs["sourceImageReference"] = args ? args.sourceImageReference : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["terminateNotification"] = args ? args.terminateNotification : undefined;
            inputs["timezone"] = args ? args.timezone : undefined;
            inputs["upgradeMode"] = args ? args.upgradeMode : undefined;
            inputs["winrmListeners"] = args ? args.winrmListeners : undefined;
            inputs["zoneBalance"] = args ? args.zoneBalance : undefined;
            inputs["zones"] = args ? args.zones : undefined;
            inputs["uniqueId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(WindowsVirtualMachineScaleSet.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WindowsVirtualMachineScaleSet resources.
 */
export interface WindowsVirtualMachineScaleSetState {
    /**
     * A `additionalCapabilities` block as defined below.
     */
    readonly additionalCapabilities?: pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetAdditionalCapabilities>;
    /**
     * One or more `additionalUnattendContent` blocks as defined below.
     */
    readonly additionalUnattendContents?: pulumi.Input<pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetAdditionalUnattendContent>[]>;
    /**
     * The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
     */
    readonly adminPassword?: pulumi.Input<string>;
    /**
     * The username of the local administrator on each Virtual Machine Scale Set instance. Changing this forces a new resource to be created.
     */
    readonly adminUsername?: pulumi.Input<string>;
    /**
     * A `automaticInstanceRepair` block as defined below. To enable the automatic instance repair, this Virtual Machine Scale Set must have a valid `healthProbeId` or an [Application Health Extension](https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-health-extension).
     */
    readonly automaticInstanceRepair?: pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetAutomaticInstanceRepair>;
    /**
     * A `automaticOsUpgradePolicy` block as defined below. This is Required and can only be specified when `upgradeMode` is set to `Automatic`.
     */
    readonly automaticOsUpgradePolicy?: pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicy>;
    /**
     * A `bootDiagnostics` block as defined below.
     */
    readonly bootDiagnostics?: pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetBootDiagnostics>;
    /**
     * The prefix which should be used for the name of the Virtual Machines in this Scale Set. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computerNamePrefix`, then you must specify `computerNamePrefix`.
     */
    readonly computerNamePrefix?: pulumi.Input<string>;
    /**
     * The Base64-Encoded Custom Data which should be used for this Virtual Machine Scale Set.
     */
    readonly customData?: pulumi.Input<string>;
    /**
     * One or more `dataDisk` blocks as defined below.
     */
    readonly dataDisks?: pulumi.Input<pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetDataDisk>[]>;
    /**
     * Should Virtual Machine Extensions be run on Overprovisioned Virtual Machines in the Scale Set? Defaults to `false`.
     */
    readonly doNotRunExtensionsOnOverprovisionedMachines?: pulumi.Input<boolean>;
    /**
     * Are automatic updates enabled for this Virtual Machine? Defaults to `true`.
     */
    readonly enableAutomaticUpdates?: pulumi.Input<boolean>;
    /**
     * The Policy which should be used Virtual Machines are Evicted from the Scale Set. Changing this forces a new resource to be created.
     */
    readonly evictionPolicy?: pulumi.Input<string>;
    /**
     * The ID of a Load Balancer Probe which should be used to determine the health of an instance. Changing this forces a new resource to be created. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
     */
    readonly healthProbeId?: pulumi.Input<string>;
    /**
     * A `identity` block as defined below.
     */
    readonly identity?: pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetIdentity>;
    /**
     * The number of Virtual Machines in the Scale Set.
     */
    readonly instances?: pulumi.Input<number>;
    /**
     * Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing)) which should be used for this Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`. Changing this forces a new resource to be created.
     */
    readonly licenseType?: pulumi.Input<string>;
    /**
     * The Azure location where the Windows Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
     */
    readonly location?: pulumi.Input<string>;
    /**
     * The maximum price you're willing to pay for each Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the `evictionPolicy`. Defaults to `-1`, which means that each Virtual Machine in the Scale Set should not be evicted for price reasons.
     */
    readonly maxBidPrice?: pulumi.Input<number>;
    /**
     * The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * One or more `networkInterface` blocks as defined below.
     */
    readonly networkInterfaces?: pulumi.Input<pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetNetworkInterface>[]>;
    /**
     * An `osDisk` block as defined below.
     */
    readonly osDisk?: pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetOsDisk>;
    /**
     * Should Azure over-provision Virtual Machines in this Scale Set? This means that multiple Virtual Machines will be provisioned and Azure will keep the instances which become available first - which improves provisioning success rates and improves deployment time. You're not billed for these over-provisioned VM's and they don't count towards the Subscription Quota. Defaults to `false`.
     */
    readonly overprovision?: pulumi.Input<boolean>;
    readonly plan?: pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetPlan>;
    /**
     * The Priority of this Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
     */
    readonly priority?: pulumi.Input<string>;
    /**
     * Should the Azure VM Agent be provisioned on each Virtual Machine in the Scale Set? Defaults to `true`. Changing this value forces a new resource to be created.
     */
    readonly provisionVmAgent?: pulumi.Input<boolean>;
    /**
     * The ID of the Proximity Placement Group in which the Virtual Machine Scale Set should be assigned to. Changing this forces a new resource to be created.
     */
    readonly proximityPlacementGroupId?: pulumi.Input<string>;
    /**
     * The name of the Resource Group in which the Windows Virtual Machine Scale Set should be exist. Changing this forces a new resource to be created.
     */
    readonly resourceGroupName?: pulumi.Input<string>;
    /**
     * A `rollingUpgradePolicy` block as defined below. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
     */
    readonly rollingUpgradePolicy?: pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetRollingUpgradePolicy>;
    /**
     * The scale-in policy rule that decides which virtual machines are chosen for removal when a Virtual Machine Scale Set is scaled in. Possible values for the scale-in policy rules are `Default`, `NewestVM` and `OldestVM`, defaults to `Default`. For more information about scale in policy, please [refer to this doc](https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-scale-in-policy).
     */
    readonly scaleInPolicy?: pulumi.Input<string>;
    /**
     * One or more `secret` blocks as defined below.
     */
    readonly secrets?: pulumi.Input<pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetSecret>[]>;
    /**
     * Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Defaults to `true`.
     */
    readonly singlePlacementGroup?: pulumi.Input<boolean>;
    /**
     * The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
     */
    readonly sku?: pulumi.Input<string>;
    /**
     * The ID of an Image which each Virtual Machine in this Scale Set should be based on.
     */
    readonly sourceImageId?: pulumi.Input<string>;
    /**
     * A `sourceImageReference` block as defined below.
     */
    readonly sourceImageReference?: pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetSourceImageReference>;
    /**
     * A mapping of tags which should be assigned to this Virtual Machine Scale Set.
     */
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A `terminateNotification` block as defined below.
     */
    readonly terminateNotification?: pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetTerminateNotification>;
    /**
     * Specifies the time zone of the virtual machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
     */
    readonly timezone?: pulumi.Input<string>;
    /**
     * The Unique ID for this Windows Virtual Machine Scale Set.
     */
    readonly uniqueId?: pulumi.Input<string>;
    /**
     * Specifies how Upgrades (e.g. changing the Image/SKU) should be performed to Virtual Machine Instances. Possible values are `Automatic`, `Manual` and `Rolling`. Defaults to `Manual`.
     */
    readonly upgradeMode?: pulumi.Input<string>;
    /**
     * One or more `winrmListener` blocks as defined below.
     */
    readonly winrmListeners?: pulumi.Input<pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetWinrmListener>[]>;
    /**
     * Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
     */
    readonly zoneBalance?: pulumi.Input<boolean>;
    /**
     * A list of Availability Zones in which the Virtual Machines in this Scale Set should be created in. Changing this forces a new resource to be created.
     */
    readonly zones?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a WindowsVirtualMachineScaleSet resource.
 */
export interface WindowsVirtualMachineScaleSetArgs {
    /**
     * A `additionalCapabilities` block as defined below.
     */
    readonly additionalCapabilities?: pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetAdditionalCapabilities>;
    /**
     * One or more `additionalUnattendContent` blocks as defined below.
     */
    readonly additionalUnattendContents?: pulumi.Input<pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetAdditionalUnattendContent>[]>;
    /**
     * The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
     */
    readonly adminPassword: pulumi.Input<string>;
    /**
     * The username of the local administrator on each Virtual Machine Scale Set instance. Changing this forces a new resource to be created.
     */
    readonly adminUsername: pulumi.Input<string>;
    /**
     * A `automaticInstanceRepair` block as defined below. To enable the automatic instance repair, this Virtual Machine Scale Set must have a valid `healthProbeId` or an [Application Health Extension](https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-health-extension).
     */
    readonly automaticInstanceRepair?: pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetAutomaticInstanceRepair>;
    /**
     * A `automaticOsUpgradePolicy` block as defined below. This is Required and can only be specified when `upgradeMode` is set to `Automatic`.
     */
    readonly automaticOsUpgradePolicy?: pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicy>;
    /**
     * A `bootDiagnostics` block as defined below.
     */
    readonly bootDiagnostics?: pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetBootDiagnostics>;
    /**
     * The prefix which should be used for the name of the Virtual Machines in this Scale Set. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computerNamePrefix`, then you must specify `computerNamePrefix`.
     */
    readonly computerNamePrefix?: pulumi.Input<string>;
    /**
     * The Base64-Encoded Custom Data which should be used for this Virtual Machine Scale Set.
     */
    readonly customData?: pulumi.Input<string>;
    /**
     * One or more `dataDisk` blocks as defined below.
     */
    readonly dataDisks?: pulumi.Input<pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetDataDisk>[]>;
    /**
     * Should Virtual Machine Extensions be run on Overprovisioned Virtual Machines in the Scale Set? Defaults to `false`.
     */
    readonly doNotRunExtensionsOnOverprovisionedMachines?: pulumi.Input<boolean>;
    /**
     * Are automatic updates enabled for this Virtual Machine? Defaults to `true`.
     */
    readonly enableAutomaticUpdates?: pulumi.Input<boolean>;
    /**
     * The Policy which should be used Virtual Machines are Evicted from the Scale Set. Changing this forces a new resource to be created.
     */
    readonly evictionPolicy?: pulumi.Input<string>;
    /**
     * The ID of a Load Balancer Probe which should be used to determine the health of an instance. Changing this forces a new resource to be created. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
     */
    readonly healthProbeId?: pulumi.Input<string>;
    /**
     * A `identity` block as defined below.
     */
    readonly identity?: pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetIdentity>;
    /**
     * The number of Virtual Machines in the Scale Set.
     */
    readonly instances: pulumi.Input<number>;
    /**
     * Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing)) which should be used for this Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`. Changing this forces a new resource to be created.
     */
    readonly licenseType?: pulumi.Input<string>;
    /**
     * The Azure location where the Windows Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
     */
    readonly location?: pulumi.Input<string>;
    /**
     * The maximum price you're willing to pay for each Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the `evictionPolicy`. Defaults to `-1`, which means that each Virtual Machine in the Scale Set should not be evicted for price reasons.
     */
    readonly maxBidPrice?: pulumi.Input<number>;
    /**
     * The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * One or more `networkInterface` blocks as defined below.
     */
    readonly networkInterfaces: pulumi.Input<pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetNetworkInterface>[]>;
    /**
     * An `osDisk` block as defined below.
     */
    readonly osDisk: pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetOsDisk>;
    /**
     * Should Azure over-provision Virtual Machines in this Scale Set? This means that multiple Virtual Machines will be provisioned and Azure will keep the instances which become available first - which improves provisioning success rates and improves deployment time. You're not billed for these over-provisioned VM's and they don't count towards the Subscription Quota. Defaults to `false`.
     */
    readonly overprovision?: pulumi.Input<boolean>;
    readonly plan?: pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetPlan>;
    /**
     * The Priority of this Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
     */
    readonly priority?: pulumi.Input<string>;
    /**
     * Should the Azure VM Agent be provisioned on each Virtual Machine in the Scale Set? Defaults to `true`. Changing this value forces a new resource to be created.
     */
    readonly provisionVmAgent?: pulumi.Input<boolean>;
    /**
     * The ID of the Proximity Placement Group in which the Virtual Machine Scale Set should be assigned to. Changing this forces a new resource to be created.
     */
    readonly proximityPlacementGroupId?: pulumi.Input<string>;
    /**
     * The name of the Resource Group in which the Windows Virtual Machine Scale Set should be exist. Changing this forces a new resource to be created.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * A `rollingUpgradePolicy` block as defined below. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
     */
    readonly rollingUpgradePolicy?: pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetRollingUpgradePolicy>;
    /**
     * The scale-in policy rule that decides which virtual machines are chosen for removal when a Virtual Machine Scale Set is scaled in. Possible values for the scale-in policy rules are `Default`, `NewestVM` and `OldestVM`, defaults to `Default`. For more information about scale in policy, please [refer to this doc](https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-scale-in-policy).
     */
    readonly scaleInPolicy?: pulumi.Input<string>;
    /**
     * One or more `secret` blocks as defined below.
     */
    readonly secrets?: pulumi.Input<pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetSecret>[]>;
    /**
     * Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Defaults to `true`.
     */
    readonly singlePlacementGroup?: pulumi.Input<boolean>;
    /**
     * The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
     */
    readonly sku: pulumi.Input<string>;
    /**
     * The ID of an Image which each Virtual Machine in this Scale Set should be based on.
     */
    readonly sourceImageId?: pulumi.Input<string>;
    /**
     * A `sourceImageReference` block as defined below.
     */
    readonly sourceImageReference?: pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetSourceImageReference>;
    /**
     * A mapping of tags which should be assigned to this Virtual Machine Scale Set.
     */
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A `terminateNotification` block as defined below.
     */
    readonly terminateNotification?: pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetTerminateNotification>;
    /**
     * Specifies the time zone of the virtual machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
     */
    readonly timezone?: pulumi.Input<string>;
    /**
     * Specifies how Upgrades (e.g. changing the Image/SKU) should be performed to Virtual Machine Instances. Possible values are `Automatic`, `Manual` and `Rolling`. Defaults to `Manual`.
     */
    readonly upgradeMode?: pulumi.Input<string>;
    /**
     * One or more `winrmListener` blocks as defined below.
     */
    readonly winrmListeners?: pulumi.Input<pulumi.Input<inputs.compute.WindowsVirtualMachineScaleSetWinrmListener>[]>;
    /**
     * Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
     */
    readonly zoneBalance?: pulumi.Input<boolean>;
    /**
     * A list of Availability Zones in which the Virtual Machines in this Scale Set should be created in. Changing this forces a new resource to be created.
     */
    readonly zones?: pulumi.Input<pulumi.Input<string>[]>;
}
