// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this data source to access information about an existing Disk Access.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.compute.getDiskAccess({
 *     name: "existing",
 *     resourceGroupName: "existing",
 * });
 * export const id = example.then(example => example.id);
 * ```
 */
export function getDiskAccess(args: GetDiskAccessArgs, opts?: pulumi.InvokeOptions): Promise<GetDiskAccessResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure:compute/getDiskAccess:getDiskAccess", {
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

/**
 * A collection of arguments for invoking getDiskAccess.
 */
export interface GetDiskAccessArgs {
    /**
     * The name of this Disk Access.
     */
    name: string;
    /**
     * The name of the Resource Group where the Disk Access exists.
     */
    resourceGroupName: string;
}

/**
 * A collection of values returned by getDiskAccess.
 */
export interface GetDiskAccessResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name: string;
    readonly resourceGroupName: string;
    readonly tags: {[key: string]: string};
}
/**
 * Use this data source to access information about an existing Disk Access.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.compute.getDiskAccess({
 *     name: "existing",
 *     resourceGroupName: "existing",
 * });
 * export const id = example.then(example => example.id);
 * ```
 */
export function getDiskAccessOutput(args: GetDiskAccessOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDiskAccessResult> {
    return pulumi.output(args).apply((a: any) => getDiskAccess(a, opts))
}

/**
 * A collection of arguments for invoking getDiskAccess.
 */
export interface GetDiskAccessOutputArgs {
    /**
     * The name of this Disk Access.
     */
    name: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Disk Access exists.
     */
    resourceGroupName: pulumi.Input<string>;
}
