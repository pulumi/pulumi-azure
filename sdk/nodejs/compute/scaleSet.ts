// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a virtual machine scale set.
 *
 * ## Example Usage
 * ### With Managed Disks (Recommended)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as fs from "fs";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("exampleVirtualNetwork", {
 *     addressSpaces: ["10.0.0.0/16"],
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * const exampleSubnet = new azure.network.Subnet("exampleSubnet", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.2.0/24"],
 * });
 * const examplePublicIp = new azure.network.PublicIp("examplePublicIp", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     allocationMethod: "Static",
 *     domainNameLabel: exampleResourceGroup.name,
 *     tags: {
 *         environment: "staging",
 *     },
 * });
 * const exampleLoadBalancer = new azure.lb.LoadBalancer("exampleLoadBalancer", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     frontendIpConfigurations: [{
 *         name: "PublicIPAddress",
 *         publicIpAddressId: examplePublicIp.id,
 *     }],
 * });
 * const bpepool = new azure.lb.BackendAddressPool("bpepool", {loadbalancerId: exampleLoadBalancer.id});
 * const lbnatpool = new azure.lb.NatPool("lbnatpool", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     loadbalancerId: exampleLoadBalancer.id,
 *     protocol: "Tcp",
 *     frontendPortStart: 50000,
 *     frontendPortEnd: 50119,
 *     backendPort: 22,
 *     frontendIpConfigurationName: "PublicIPAddress",
 * });
 * const exampleProbe = new azure.lb.Probe("exampleProbe", {
 *     loadbalancerId: exampleLoadBalancer.id,
 *     protocol: "Http",
 *     requestPath: "/health",
 *     port: 8080,
 * });
 * const exampleScaleSet = new azure.compute.ScaleSet("exampleScaleSet", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     automaticOsUpgrade: true,
 *     upgradePolicyMode: "Rolling",
 *     rollingUpgradePolicy: {
 *         maxBatchInstancePercent: 20,
 *         maxUnhealthyInstancePercent: 20,
 *         maxUnhealthyUpgradedInstancePercent: 5,
 *         pauseTimeBetweenBatches: "PT0S",
 *     },
 *     healthProbeId: exampleProbe.id,
 *     sku: {
 *         name: "Standard_F2",
 *         tier: "Standard",
 *         capacity: 2,
 *     },
 *     storageProfileImageReference: {
 *         publisher: "Canonical",
 *         offer: "0001-com-ubuntu-server-jammy",
 *         sku: "22_04-lts",
 *         version: "latest",
 *     },
 *     storageProfileOsDisk: {
 *         name: "",
 *         caching: "ReadWrite",
 *         createOption: "FromImage",
 *         managedDiskType: "Standard_LRS",
 *     },
 *     storageProfileDataDisks: [{
 *         lun: 0,
 *         caching: "ReadWrite",
 *         createOption: "Empty",
 *         diskSizeGb: 10,
 *     }],
 *     osProfile: {
 *         computerNamePrefix: "testvm",
 *         adminUsername: "myadmin",
 *     },
 *     osProfileLinuxConfig: {
 *         disablePasswordAuthentication: true,
 *         sshKeys: [{
 *             path: "/home/myadmin/.ssh/authorized_keys",
 *             keyData: fs.readFileSync("~/.ssh/demo_key.pub"),
 *         }],
 *     },
 *     networkProfiles: [{
 *         name: "mynetworkprofile",
 *         primary: true,
 *         ipConfigurations: [{
 *             name: "TestIPConfiguration",
 *             primary: true,
 *             subnetId: exampleSubnet.id,
 *             loadBalancerBackendAddressPoolIds: [bpepool.id],
 *             loadBalancerInboundNatRulesIds: [lbnatpool.id],
 *         }],
 *     }],
 *     tags: {
 *         environment: "staging",
 *     },
 * });
 * ```
 * ### With Unmanaged Disks
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as fs from "fs";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("exampleVirtualNetwork", {
 *     addressSpaces: ["10.0.0.0/16"],
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * const exampleSubnet = new azure.network.Subnet("exampleSubnet", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.2.0/24"],
 * });
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 *     tags: {
 *         environment: "staging",
 *     },
 * });
 * const exampleContainer = new azure.storage.Container("exampleContainer", {
 *     storageAccountName: exampleAccount.name,
 *     containerAccessType: "private",
 * });
 * const exampleScaleSet = new azure.compute.ScaleSet("exampleScaleSet", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     upgradePolicyMode: "Manual",
 *     sku: {
 *         name: "Standard_F2",
 *         tier: "Standard",
 *         capacity: 2,
 *     },
 *     osProfile: {
 *         computerNamePrefix: "testvm",
 *         adminUsername: "myadmin",
 *     },
 *     osProfileLinuxConfig: {
 *         disablePasswordAuthentication: true,
 *         sshKeys: [{
 *             path: "/home/myadmin/.ssh/authorized_keys",
 *             keyData: fs.readFileSync("~/.ssh/demo_key.pub"),
 *         }],
 *     },
 *     networkProfiles: [{
 *         name: "TestNetworkProfile",
 *         primary: true,
 *         ipConfigurations: [{
 *             name: "TestIPConfiguration",
 *             primary: true,
 *             subnetId: exampleSubnet.id,
 *         }],
 *     }],
 *     storageProfileOsDisk: {
 *         name: "osDiskProfile",
 *         caching: "ReadWrite",
 *         createOption: "FromImage",
 *         vhdContainers: [pulumi.interpolate`${exampleAccount.primaryBlobEndpoint}${exampleContainer.name}`],
 *     },
 *     storageProfileImageReference: {
 *         publisher: "Canonical",
 *         offer: "0001-com-ubuntu-server-jammy",
 *         sku: "22_04-lts",
 *         version: "latest",
 *     },
 * });
 * ```
 * ## Example of storageProfileImageReference with id
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleImage = new azure.compute.Image("exampleImage", {});
 * // ...
 * const exampleScaleSet = new azure.compute.ScaleSet("exampleScaleSet", {storageProfileImageReference: {
 *     id: exampleImage.id,
 * }});
 * // ...
 * ```
 *
 * ## Import
 *
 * Virtual Machine Scale Sets can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:compute/scaleSet:ScaleSet scaleset1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/virtualMachineScaleSets/scaleset1
 * ```
 */
export class ScaleSet extends pulumi.CustomResource {
    /**
     * Get an existing ScaleSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScaleSetState, opts?: pulumi.CustomResourceOptions): ScaleSet {
        return new ScaleSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:compute/scaleSet:ScaleSet';

    /**
     * Returns true if the given object is an instance of ScaleSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScaleSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScaleSet.__pulumiType;
    }

    /**
     * Automatic OS patches can be applied by Azure to your scaleset. This is particularly useful when `upgradePolicyMode` is set to `Rolling`. Defaults to `false`.
     */
    public readonly automaticOsUpgrade!: pulumi.Output<boolean | undefined>;
    /**
     * A `bootDiagnostics` block as referenced below.
     */
    public readonly bootDiagnostics!: pulumi.Output<outputs.compute.ScaleSetBootDiagnostics | undefined>;
    /**
     * Specifies the eviction policy for Virtual Machines in this Scale Set. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
     *
     * > **NOTE:** `evictionPolicy` can only be set when `priority` is set to `Low`.
     */
    public readonly evictionPolicy!: pulumi.Output<string | undefined>;
    /**
     * Can be specified multiple times to add extension profiles to the scale set. Each `extension` block supports the fields documented below.
     */
    public readonly extensions!: pulumi.Output<outputs.compute.ScaleSetExtension[] | undefined>;
    /**
     * Specifies the identifier for the load balancer health probe. Required when using `Rolling` as your `upgradePolicyMode`.
     */
    public readonly healthProbeId!: pulumi.Output<string | undefined>;
    /**
     * An `identity` block as defined below.
     */
    public readonly identity!: pulumi.Output<outputs.compute.ScaleSetIdentity>;
    /**
     * (Optional, when a Windows machine) Specifies the Windows OS license type. If supplied, the only allowed values are `Windows_Client` and `Windows_Server`.
     */
    public readonly licenseType!: pulumi.Output<string>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Specifies the name of the virtual machine scale set resource. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A collection of `networkProfile` blocks as documented below.
     */
    public readonly networkProfiles!: pulumi.Output<outputs.compute.ScaleSetNetworkProfile[]>;
    /**
     * A `osProfile` block as documented below.
     */
    public readonly osProfile!: pulumi.Output<outputs.compute.ScaleSetOsProfile>;
    /**
     * A `osProfileLinuxConfig` block as documented below.
     */
    public readonly osProfileLinuxConfig!: pulumi.Output<outputs.compute.ScaleSetOsProfileLinuxConfig>;
    /**
     * A collection of `osProfileSecrets` blocks as documented below.
     */
    public readonly osProfileSecrets!: pulumi.Output<outputs.compute.ScaleSetOsProfileSecret[] | undefined>;
    /**
     * A `osProfileWindowsConfig` block as documented below.
     */
    public readonly osProfileWindowsConfig!: pulumi.Output<outputs.compute.ScaleSetOsProfileWindowsConfig | undefined>;
    /**
     * Specifies whether the virtual machine scale set should be overprovisioned. Defaults to `true`.
     */
    public readonly overprovision!: pulumi.Output<boolean | undefined>;
    /**
     * A `plan` block as documented below.
     */
    public readonly plan!: pulumi.Output<outputs.compute.ScaleSetPlan | undefined>;
    /**
     * Specifies the priority for the Virtual Machines in the Scale Set. Possible values are `Low` and `Regular`. Changing this forces a new resource to be created.
     */
    public readonly priority!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Proximity Placement Group to which this Virtual Machine should be assigned. Changing this forces a new resource to be created
     */
    public readonly proximityPlacementGroupId!: pulumi.Output<string | undefined>;
    /**
     * The name of the resource group in which to create the virtual machine scale set. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * A `rollingUpgradePolicy` block as defined below. This is only applicable when the `upgradePolicyMode` is `Rolling`.
     */
    public readonly rollingUpgradePolicy!: pulumi.Output<outputs.compute.ScaleSetRollingUpgradePolicy | undefined>;
    /**
     * Specifies whether the scale set is limited to a single placement group with a maximum size of 100 virtual machines. If set to false, managed disks must be used. Changing this forces a new resource to be created. See [documentation](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-placement-groups) for more information. Defaults to `true`.
     */
    public readonly singlePlacementGroup!: pulumi.Output<boolean | undefined>;
    /**
     * A `sku` block as documented below.
     */
    public readonly sku!: pulumi.Output<outputs.compute.ScaleSetSku>;
    /**
     * A `storageProfileDataDisk` block as documented below.
     */
    public readonly storageProfileDataDisks!: pulumi.Output<outputs.compute.ScaleSetStorageProfileDataDisk[] | undefined>;
    /**
     * A `storageProfileImageReference` block as documented below.
     */
    public readonly storageProfileImageReference!: pulumi.Output<outputs.compute.ScaleSetStorageProfileImageReference>;
    /**
     * A `storageProfileOsDisk` block as documented below.
     */
    public readonly storageProfileOsDisk!: pulumi.Output<outputs.compute.ScaleSetStorageProfileOsDisk>;
    /**
     * A mapping of tags to assign to the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the mode of an upgrade to virtual machines in the scale set. Possible values, `Rolling`, `Manual`, or `Automatic`. When choosing `Rolling`, you will need to set a health probe.
     */
    public readonly upgradePolicyMode!: pulumi.Output<string>;
    /**
     * A collection of availability zones to spread the Virtual Machines over. Changing this forces a new resource to be created.
     *
     * > **Please Note**: Availability Zones are [only supported in several regions at this time](https://docs.microsoft.com/azure/availability-zones/az-overview).
     */
    public readonly zones!: pulumi.Output<string[] | undefined>;

    /**
     * Create a ScaleSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScaleSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScaleSetArgs | ScaleSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScaleSetState | undefined;
            resourceInputs["automaticOsUpgrade"] = state ? state.automaticOsUpgrade : undefined;
            resourceInputs["bootDiagnostics"] = state ? state.bootDiagnostics : undefined;
            resourceInputs["evictionPolicy"] = state ? state.evictionPolicy : undefined;
            resourceInputs["extensions"] = state ? state.extensions : undefined;
            resourceInputs["healthProbeId"] = state ? state.healthProbeId : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["licenseType"] = state ? state.licenseType : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkProfiles"] = state ? state.networkProfiles : undefined;
            resourceInputs["osProfile"] = state ? state.osProfile : undefined;
            resourceInputs["osProfileLinuxConfig"] = state ? state.osProfileLinuxConfig : undefined;
            resourceInputs["osProfileSecrets"] = state ? state.osProfileSecrets : undefined;
            resourceInputs["osProfileWindowsConfig"] = state ? state.osProfileWindowsConfig : undefined;
            resourceInputs["overprovision"] = state ? state.overprovision : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["proximityPlacementGroupId"] = state ? state.proximityPlacementGroupId : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["rollingUpgradePolicy"] = state ? state.rollingUpgradePolicy : undefined;
            resourceInputs["singlePlacementGroup"] = state ? state.singlePlacementGroup : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["storageProfileDataDisks"] = state ? state.storageProfileDataDisks : undefined;
            resourceInputs["storageProfileImageReference"] = state ? state.storageProfileImageReference : undefined;
            resourceInputs["storageProfileOsDisk"] = state ? state.storageProfileOsDisk : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["upgradePolicyMode"] = state ? state.upgradePolicyMode : undefined;
            resourceInputs["zones"] = state ? state.zones : undefined;
        } else {
            const args = argsOrState as ScaleSetArgs | undefined;
            if ((!args || args.networkProfiles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkProfiles'");
            }
            if ((!args || args.osProfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osProfile'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.sku === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sku'");
            }
            if ((!args || args.storageProfileOsDisk === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageProfileOsDisk'");
            }
            if ((!args || args.upgradePolicyMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'upgradePolicyMode'");
            }
            resourceInputs["automaticOsUpgrade"] = args ? args.automaticOsUpgrade : undefined;
            resourceInputs["bootDiagnostics"] = args ? args.bootDiagnostics : undefined;
            resourceInputs["evictionPolicy"] = args ? args.evictionPolicy : undefined;
            resourceInputs["extensions"] = args ? args.extensions : undefined;
            resourceInputs["healthProbeId"] = args ? args.healthProbeId : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["licenseType"] = args ? args.licenseType : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkProfiles"] = args ? args.networkProfiles : undefined;
            resourceInputs["osProfile"] = args ? args.osProfile : undefined;
            resourceInputs["osProfileLinuxConfig"] = args ? args.osProfileLinuxConfig : undefined;
            resourceInputs["osProfileSecrets"] = args ? args.osProfileSecrets : undefined;
            resourceInputs["osProfileWindowsConfig"] = args ? args.osProfileWindowsConfig : undefined;
            resourceInputs["overprovision"] = args ? args.overprovision : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["proximityPlacementGroupId"] = args ? args.proximityPlacementGroupId : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["rollingUpgradePolicy"] = args ? args.rollingUpgradePolicy : undefined;
            resourceInputs["singlePlacementGroup"] = args ? args.singlePlacementGroup : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["storageProfileDataDisks"] = args ? args.storageProfileDataDisks : undefined;
            resourceInputs["storageProfileImageReference"] = args ? args.storageProfileImageReference : undefined;
            resourceInputs["storageProfileOsDisk"] = args ? args.storageProfileOsDisk : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["upgradePolicyMode"] = args ? args.upgradePolicyMode : undefined;
            resourceInputs["zones"] = args ? args.zones : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScaleSet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ScaleSet resources.
 */
export interface ScaleSetState {
    /**
     * Automatic OS patches can be applied by Azure to your scaleset. This is particularly useful when `upgradePolicyMode` is set to `Rolling`. Defaults to `false`.
     */
    automaticOsUpgrade?: pulumi.Input<boolean>;
    /**
     * A `bootDiagnostics` block as referenced below.
     */
    bootDiagnostics?: pulumi.Input<inputs.compute.ScaleSetBootDiagnostics>;
    /**
     * Specifies the eviction policy for Virtual Machines in this Scale Set. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
     *
     * > **NOTE:** `evictionPolicy` can only be set when `priority` is set to `Low`.
     */
    evictionPolicy?: pulumi.Input<string>;
    /**
     * Can be specified multiple times to add extension profiles to the scale set. Each `extension` block supports the fields documented below.
     */
    extensions?: pulumi.Input<pulumi.Input<inputs.compute.ScaleSetExtension>[]>;
    /**
     * Specifies the identifier for the load balancer health probe. Required when using `Rolling` as your `upgradePolicyMode`.
     */
    healthProbeId?: pulumi.Input<string>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.compute.ScaleSetIdentity>;
    /**
     * (Optional, when a Windows machine) Specifies the Windows OS license type. If supplied, the only allowed values are `Windows_Client` and `Windows_Server`.
     */
    licenseType?: pulumi.Input<string>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of the virtual machine scale set resource. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A collection of `networkProfile` blocks as documented below.
     */
    networkProfiles?: pulumi.Input<pulumi.Input<inputs.compute.ScaleSetNetworkProfile>[]>;
    /**
     * A `osProfile` block as documented below.
     */
    osProfile?: pulumi.Input<inputs.compute.ScaleSetOsProfile>;
    /**
     * A `osProfileLinuxConfig` block as documented below.
     */
    osProfileLinuxConfig?: pulumi.Input<inputs.compute.ScaleSetOsProfileLinuxConfig>;
    /**
     * A collection of `osProfileSecrets` blocks as documented below.
     */
    osProfileSecrets?: pulumi.Input<pulumi.Input<inputs.compute.ScaleSetOsProfileSecret>[]>;
    /**
     * A `osProfileWindowsConfig` block as documented below.
     */
    osProfileWindowsConfig?: pulumi.Input<inputs.compute.ScaleSetOsProfileWindowsConfig>;
    /**
     * Specifies whether the virtual machine scale set should be overprovisioned. Defaults to `true`.
     */
    overprovision?: pulumi.Input<boolean>;
    /**
     * A `plan` block as documented below.
     */
    plan?: pulumi.Input<inputs.compute.ScaleSetPlan>;
    /**
     * Specifies the priority for the Virtual Machines in the Scale Set. Possible values are `Low` and `Regular`. Changing this forces a new resource to be created.
     */
    priority?: pulumi.Input<string>;
    /**
     * The ID of the Proximity Placement Group to which this Virtual Machine should be assigned. Changing this forces a new resource to be created
     */
    proximityPlacementGroupId?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the virtual machine scale set. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A `rollingUpgradePolicy` block as defined below. This is only applicable when the `upgradePolicyMode` is `Rolling`.
     */
    rollingUpgradePolicy?: pulumi.Input<inputs.compute.ScaleSetRollingUpgradePolicy>;
    /**
     * Specifies whether the scale set is limited to a single placement group with a maximum size of 100 virtual machines. If set to false, managed disks must be used. Changing this forces a new resource to be created. See [documentation](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-placement-groups) for more information. Defaults to `true`.
     */
    singlePlacementGroup?: pulumi.Input<boolean>;
    /**
     * A `sku` block as documented below.
     */
    sku?: pulumi.Input<inputs.compute.ScaleSetSku>;
    /**
     * A `storageProfileDataDisk` block as documented below.
     */
    storageProfileDataDisks?: pulumi.Input<pulumi.Input<inputs.compute.ScaleSetStorageProfileDataDisk>[]>;
    /**
     * A `storageProfileImageReference` block as documented below.
     */
    storageProfileImageReference?: pulumi.Input<inputs.compute.ScaleSetStorageProfileImageReference>;
    /**
     * A `storageProfileOsDisk` block as documented below.
     */
    storageProfileOsDisk?: pulumi.Input<inputs.compute.ScaleSetStorageProfileOsDisk>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the mode of an upgrade to virtual machines in the scale set. Possible values, `Rolling`, `Manual`, or `Automatic`. When choosing `Rolling`, you will need to set a health probe.
     */
    upgradePolicyMode?: pulumi.Input<string>;
    /**
     * A collection of availability zones to spread the Virtual Machines over. Changing this forces a new resource to be created.
     *
     * > **Please Note**: Availability Zones are [only supported in several regions at this time](https://docs.microsoft.com/azure/availability-zones/az-overview).
     */
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ScaleSet resource.
 */
export interface ScaleSetArgs {
    /**
     * Automatic OS patches can be applied by Azure to your scaleset. This is particularly useful when `upgradePolicyMode` is set to `Rolling`. Defaults to `false`.
     */
    automaticOsUpgrade?: pulumi.Input<boolean>;
    /**
     * A `bootDiagnostics` block as referenced below.
     */
    bootDiagnostics?: pulumi.Input<inputs.compute.ScaleSetBootDiagnostics>;
    /**
     * Specifies the eviction policy for Virtual Machines in this Scale Set. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
     *
     * > **NOTE:** `evictionPolicy` can only be set when `priority` is set to `Low`.
     */
    evictionPolicy?: pulumi.Input<string>;
    /**
     * Can be specified multiple times to add extension profiles to the scale set. Each `extension` block supports the fields documented below.
     */
    extensions?: pulumi.Input<pulumi.Input<inputs.compute.ScaleSetExtension>[]>;
    /**
     * Specifies the identifier for the load balancer health probe. Required when using `Rolling` as your `upgradePolicyMode`.
     */
    healthProbeId?: pulumi.Input<string>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.compute.ScaleSetIdentity>;
    /**
     * (Optional, when a Windows machine) Specifies the Windows OS license type. If supplied, the only allowed values are `Windows_Client` and `Windows_Server`.
     */
    licenseType?: pulumi.Input<string>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of the virtual machine scale set resource. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A collection of `networkProfile` blocks as documented below.
     */
    networkProfiles: pulumi.Input<pulumi.Input<inputs.compute.ScaleSetNetworkProfile>[]>;
    /**
     * A `osProfile` block as documented below.
     */
    osProfile: pulumi.Input<inputs.compute.ScaleSetOsProfile>;
    /**
     * A `osProfileLinuxConfig` block as documented below.
     */
    osProfileLinuxConfig?: pulumi.Input<inputs.compute.ScaleSetOsProfileLinuxConfig>;
    /**
     * A collection of `osProfileSecrets` blocks as documented below.
     */
    osProfileSecrets?: pulumi.Input<pulumi.Input<inputs.compute.ScaleSetOsProfileSecret>[]>;
    /**
     * A `osProfileWindowsConfig` block as documented below.
     */
    osProfileWindowsConfig?: pulumi.Input<inputs.compute.ScaleSetOsProfileWindowsConfig>;
    /**
     * Specifies whether the virtual machine scale set should be overprovisioned. Defaults to `true`.
     */
    overprovision?: pulumi.Input<boolean>;
    /**
     * A `plan` block as documented below.
     */
    plan?: pulumi.Input<inputs.compute.ScaleSetPlan>;
    /**
     * Specifies the priority for the Virtual Machines in the Scale Set. Possible values are `Low` and `Regular`. Changing this forces a new resource to be created.
     */
    priority?: pulumi.Input<string>;
    /**
     * The ID of the Proximity Placement Group to which this Virtual Machine should be assigned. Changing this forces a new resource to be created
     */
    proximityPlacementGroupId?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the virtual machine scale set. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A `rollingUpgradePolicy` block as defined below. This is only applicable when the `upgradePolicyMode` is `Rolling`.
     */
    rollingUpgradePolicy?: pulumi.Input<inputs.compute.ScaleSetRollingUpgradePolicy>;
    /**
     * Specifies whether the scale set is limited to a single placement group with a maximum size of 100 virtual machines. If set to false, managed disks must be used. Changing this forces a new resource to be created. See [documentation](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-placement-groups) for more information. Defaults to `true`.
     */
    singlePlacementGroup?: pulumi.Input<boolean>;
    /**
     * A `sku` block as documented below.
     */
    sku: pulumi.Input<inputs.compute.ScaleSetSku>;
    /**
     * A `storageProfileDataDisk` block as documented below.
     */
    storageProfileDataDisks?: pulumi.Input<pulumi.Input<inputs.compute.ScaleSetStorageProfileDataDisk>[]>;
    /**
     * A `storageProfileImageReference` block as documented below.
     */
    storageProfileImageReference?: pulumi.Input<inputs.compute.ScaleSetStorageProfileImageReference>;
    /**
     * A `storageProfileOsDisk` block as documented below.
     */
    storageProfileOsDisk: pulumi.Input<inputs.compute.ScaleSetStorageProfileOsDisk>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the mode of an upgrade to virtual machines in the scale set. Possible values, `Rolling`, `Manual`, or `Automatic`. When choosing `Rolling`, you will need to set a health probe.
     */
    upgradePolicyMode: pulumi.Input<string>;
    /**
     * A collection of availability zones to spread the Virtual Machines over. Changing this forces a new resource to be created.
     *
     * > **Please Note**: Availability Zones are [only supported in several regions at this time](https://docs.microsoft.com/azure/availability-zones/az-overview).
     */
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}
