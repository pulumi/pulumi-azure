// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to access information about an existing Dynatrace Monitor.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.dynatrace.getMonitor({
 *     name: "example-dynatracemonitor",
 *     resourceGroupName: "example-resources",
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This data source uses the following Azure API Providers:
 *
 * * `Dynatrace.Observability`: 2023-04-27
 */
export function getMonitor(args: GetMonitorArgs, opts?: pulumi.InvokeOptions): Promise<GetMonitorResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure:dynatrace/getMonitor:getMonitor", {
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

/**
 * A collection of arguments for invoking getMonitor.
 */
export interface GetMonitorArgs {
    /**
     * Name of the Dynatrace monitor.
     */
    name: string;
    /**
     * The name of the Resource Group where the Dynatrace monitor should exist.
     */
    resourceGroupName: string;
}

/**
 * A collection of values returned by getMonitor.
 */
export interface GetMonitorResult {
    readonly environmentProperties: outputs.dynatrace.GetMonitorEnvironmentProperty[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The kind of managed identity assigned to this resource.  A `identity` block as defined below.
     */
    readonly identities: outputs.dynatrace.GetMonitorIdentity[];
    /**
     * The Azure Region where the Dynatrace monitor should exist.
     */
    readonly location: string;
    /**
     * Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state.
     */
    readonly marketplaceSubscription: string;
    /**
     * Flag specifying if the resource monitoring is enabled or disabled.
     */
    readonly monitoringEnabled: boolean;
    readonly name: string;
    /**
     * Plan id as published by Dynatrace.
     */
    readonly plans: outputs.dynatrace.GetMonitorPlan[];
    readonly resourceGroupName: string;
    /**
     * A mapping of tags to assign to the resource.
     */
    readonly tags: {[key: string]: string};
    /**
     * User's information. A `user` block as defined below.
     */
    readonly users: outputs.dynatrace.GetMonitorUser[];
}
/**
 * Use this data source to access information about an existing Dynatrace Monitor.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.dynatrace.getMonitor({
 *     name: "example-dynatracemonitor",
 *     resourceGroupName: "example-resources",
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This data source uses the following Azure API Providers:
 *
 * * `Dynatrace.Observability`: 2023-04-27
 */
export function getMonitorOutput(args: GetMonitorOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetMonitorResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("azure:dynatrace/getMonitor:getMonitor", {
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

/**
 * A collection of arguments for invoking getMonitor.
 */
export interface GetMonitorOutputArgs {
    /**
     * Name of the Dynatrace monitor.
     */
    name: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Dynatrace monitor should exist.
     */
    resourceGroupName: pulumi.Input<string>;
}
