// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages Dynatrace monitors.
 *
 * ## Import
 *
 * Dynatrace monitor can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:dynatrace/monitor:Monitor example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Dynatrace.Observability/monitors/monitor1
 * ```
 */
export class Monitor extends pulumi.CustomResource {
    /**
     * Get an existing Monitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorState, opts?: pulumi.CustomResourceOptions): Monitor {
        return new Monitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:dynatrace/monitor:Monitor';

    /**
     * Returns true if the given object is an instance of Monitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Monitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Monitor.__pulumiType;
    }

    /**
     * The kind of managed identity assigned to this resource.  A `identity` block as defined below.
     */
    public readonly identity!: pulumi.Output<outputs.dynatrace.MonitorIdentity>;
    /**
     * The Azure Region where the Dynatrace monitor should exist. Changing this forces a new resource to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state. Possible values are `Active` and `Suspended`.
     */
    public readonly marketplaceSubscription!: pulumi.Output<string>;
    /**
     * Flag specifying if the resource monitoring is enabled or disabled. Default is `true`.
     */
    public readonly monitoringEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the Dynatrace monitor. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Billing plan information. A `plan` block as defined below. Changing this forces a new resource to be created.
     */
    public readonly plan!: pulumi.Output<outputs.dynatrace.MonitorPlan>;
    /**
     * The name of the Resource Group where the Dynatrace monitor should exist. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * User's information. A `user` block as defined below. Chainging this forces a new resource to be created.
     */
    public readonly user!: pulumi.Output<outputs.dynatrace.MonitorUser>;

    /**
     * Create a Monitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorArgs | MonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitorState | undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["marketplaceSubscription"] = state ? state.marketplaceSubscription : undefined;
            resourceInputs["monitoringEnabled"] = state ? state.monitoringEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        } else {
            const args = argsOrState as MonitorArgs | undefined;
            if ((!args || args.identity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identity'");
            }
            if ((!args || args.marketplaceSubscription === undefined) && !opts.urn) {
                throw new Error("Missing required property 'marketplaceSubscription'");
            }
            if ((!args || args.plan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plan'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.user === undefined) && !opts.urn) {
                throw new Error("Missing required property 'user'");
            }
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["marketplaceSubscription"] = args ? args.marketplaceSubscription : undefined;
            resourceInputs["monitoringEnabled"] = args ? args.monitoringEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Monitor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Monitor resources.
 */
export interface MonitorState {
    /**
     * The kind of managed identity assigned to this resource.  A `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.dynatrace.MonitorIdentity>;
    /**
     * The Azure Region where the Dynatrace monitor should exist. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state. Possible values are `Active` and `Suspended`.
     */
    marketplaceSubscription?: pulumi.Input<string>;
    /**
     * Flag specifying if the resource monitoring is enabled or disabled. Default is `true`.
     */
    monitoringEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the Dynatrace monitor. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Billing plan information. A `plan` block as defined below. Changing this forces a new resource to be created.
     */
    plan?: pulumi.Input<inputs.dynatrace.MonitorPlan>;
    /**
     * The name of the Resource Group where the Dynatrace monitor should exist. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * User's information. A `user` block as defined below. Chainging this forces a new resource to be created.
     */
    user?: pulumi.Input<inputs.dynatrace.MonitorUser>;
}

/**
 * The set of arguments for constructing a Monitor resource.
 */
export interface MonitorArgs {
    /**
     * The kind of managed identity assigned to this resource.  A `identity` block as defined below.
     */
    identity: pulumi.Input<inputs.dynatrace.MonitorIdentity>;
    /**
     * The Azure Region where the Dynatrace monitor should exist. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state. Possible values are `Active` and `Suspended`.
     */
    marketplaceSubscription: pulumi.Input<string>;
    /**
     * Flag specifying if the resource monitoring is enabled or disabled. Default is `true`.
     */
    monitoringEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the Dynatrace monitor. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Billing plan information. A `plan` block as defined below. Changing this forces a new resource to be created.
     */
    plan: pulumi.Input<inputs.dynatrace.MonitorPlan>;
    /**
     * The name of the Resource Group where the Dynatrace monitor should exist. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * User's information. A `user` block as defined below. Chainging this forces a new resource to be created.
     */
    user: pulumi.Input<inputs.dynatrace.MonitorUser>;
}
