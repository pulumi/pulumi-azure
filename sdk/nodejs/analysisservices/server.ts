// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages an Analysis Services Server.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "analysis-services-server-test",
 *     location: "West Europe",
 * });
 * const server = new azure.analysisservices.Server("server", {
 *     name: "analysisservicesserver",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: "S0",
 *     adminUsers: ["myuser@domain.tld"],
 *     powerBiServiceEnabled: true,
 *     ipv4FirewallRules: [{
 *         name: "myRule1",
 *         rangeStart: "210.117.252.0",
 *         rangeEnd: "210.117.252.255",
 *     }],
 *     tags: {
 *         abc: "123",
 *     },
 * });
 * ```
 *
 * > **Note:** The server resource will automatically be started and stopped during an update if it is in `paused` state.
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.AnalysisServices` - 2017-08-01
 *
 * ## Import
 *
 * Analysis Services Server can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:analysisservices/server:Server server /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourcegroup1/providers/Microsoft.AnalysisServices/servers/server1
 * ```
 */
export class Server extends pulumi.CustomResource {
    /**
     * Get an existing Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerState, opts?: pulumi.CustomResourceOptions): Server {
        return new Server(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:analysisservices/server:Server';

    /**
     * Returns true if the given object is an instance of Server.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Server {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Server.__pulumiType;
    }

    /**
     * List of email addresses of admin users.
     */
    declare public readonly adminUsers: pulumi.Output<string[] | undefined>;
    /**
     * URI and SAS token for a blob container to store backups.
     */
    declare public readonly backupBlobContainerUri: pulumi.Output<string | undefined>;
    /**
     * One or more `ipv4FirewallRule` block(s) as defined below.
     */
    declare public readonly ipv4FirewallRules: pulumi.Output<outputs.analysisservices.ServerIpv4FirewallRule[] | undefined>;
    /**
     * The Azure location where the Analysis Services Server exists. Changing this forces a new resource to be created.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * The name of the Analysis Services Server. Only lowercase Alphanumeric characters allowed, starting with a letter. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Indicates if the Power BI service is allowed to access or not.
     */
    declare public readonly powerBiServiceEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Controls how the read-write server is used in the query pool. If this value is set to `All` then read-write servers are also used for queries. Otherwise with `ReadOnly` these servers do not participate in query operations. Defaults to `All`.
     */
    declare public readonly querypoolConnectionMode: pulumi.Output<string | undefined>;
    /**
     * The name of the Resource Group in which the Analysis Services Server should be exist. Changing this forces a new resource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * The full name of the Analysis Services Server.
     */
    declare public /*out*/ readonly serverFullName: pulumi.Output<string>;
    /**
     * SKU for the Analysis Services Server. Possible values are: `D1`, `B1`, `B2`, `S0`, `S1`, `S2`, `S4`, `S8`, `S9`, `S8v2` and `S9v2`.
     */
    declare public readonly sku: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Server resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerArgs | ServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerState | undefined;
            resourceInputs["adminUsers"] = state?.adminUsers;
            resourceInputs["backupBlobContainerUri"] = state?.backupBlobContainerUri;
            resourceInputs["ipv4FirewallRules"] = state?.ipv4FirewallRules;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["powerBiServiceEnabled"] = state?.powerBiServiceEnabled;
            resourceInputs["querypoolConnectionMode"] = state?.querypoolConnectionMode;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["serverFullName"] = state?.serverFullName;
            resourceInputs["sku"] = state?.sku;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as ServerArgs | undefined;
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.sku === undefined && !opts.urn) {
                throw new Error("Missing required property 'sku'");
            }
            resourceInputs["adminUsers"] = args?.adminUsers;
            resourceInputs["backupBlobContainerUri"] = args?.backupBlobContainerUri ? pulumi.secret(args.backupBlobContainerUri) : undefined;
            resourceInputs["ipv4FirewallRules"] = args?.ipv4FirewallRules;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["powerBiServiceEnabled"] = args?.powerBiServiceEnabled;
            resourceInputs["querypoolConnectionMode"] = args?.querypoolConnectionMode;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["sku"] = args?.sku;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["serverFullName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["backupBlobContainerUri"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Server.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Server resources.
 */
export interface ServerState {
    /**
     * List of email addresses of admin users.
     */
    adminUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URI and SAS token for a blob container to store backups.
     */
    backupBlobContainerUri?: pulumi.Input<string>;
    /**
     * One or more `ipv4FirewallRule` block(s) as defined below.
     */
    ipv4FirewallRules?: pulumi.Input<pulumi.Input<inputs.analysisservices.ServerIpv4FirewallRule>[]>;
    /**
     * The Azure location where the Analysis Services Server exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the Analysis Services Server. Only lowercase Alphanumeric characters allowed, starting with a letter. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates if the Power BI service is allowed to access or not.
     */
    powerBiServiceEnabled?: pulumi.Input<boolean>;
    /**
     * Controls how the read-write server is used in the query pool. If this value is set to `All` then read-write servers are also used for queries. Otherwise with `ReadOnly` these servers do not participate in query operations. Defaults to `All`.
     */
    querypoolConnectionMode?: pulumi.Input<string>;
    /**
     * The name of the Resource Group in which the Analysis Services Server should be exist. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The full name of the Analysis Services Server.
     */
    serverFullName?: pulumi.Input<string>;
    /**
     * SKU for the Analysis Services Server. Possible values are: `D1`, `B1`, `B2`, `S0`, `S1`, `S2`, `S4`, `S8`, `S9`, `S8v2` and `S9v2`.
     */
    sku?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Server resource.
 */
export interface ServerArgs {
    /**
     * List of email addresses of admin users.
     */
    adminUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URI and SAS token for a blob container to store backups.
     */
    backupBlobContainerUri?: pulumi.Input<string>;
    /**
     * One or more `ipv4FirewallRule` block(s) as defined below.
     */
    ipv4FirewallRules?: pulumi.Input<pulumi.Input<inputs.analysisservices.ServerIpv4FirewallRule>[]>;
    /**
     * The Azure location where the Analysis Services Server exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the Analysis Services Server. Only lowercase Alphanumeric characters allowed, starting with a letter. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates if the Power BI service is allowed to access or not.
     */
    powerBiServiceEnabled?: pulumi.Input<boolean>;
    /**
     * Controls how the read-write server is used in the query pool. If this value is set to `All` then read-write servers are also used for queries. Otherwise with `ReadOnly` these servers do not participate in query operations. Defaults to `All`.
     */
    querypoolConnectionMode?: pulumi.Input<string>;
    /**
     * The name of the Resource Group in which the Analysis Services Server should be exist. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * SKU for the Analysis Services Server. Possible values are: `D1`, `B1`, `B2`, `S0`, `S1`, `S2`, `S4`, `S8`, `S9`, `S8v2` and `S9v2`.
     */
    sku: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
