// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this data source to access information about an existing API Connection.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.connections.getApiConnection({
 *     name: "example-connection",
 *     resourceGroupName: "example-resources",
 * });
 * export const connectionId = example.then(example => example.id);
 * export const connectionName = example.then(example => example.name);
 * export const managedApiId = example.then(example => example.managedApiId);
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This data source uses the following Azure API Providers:
 *
 * * `Microsoft.Web` - 2016-06-01
 */
export function getApiConnection(args: GetApiConnectionArgs, opts?: pulumi.InvokeOptions): Promise<GetApiConnectionResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure:connections/getApiConnection:getApiConnection", {
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

/**
 * A collection of arguments for invoking getApiConnection.
 */
export interface GetApiConnectionArgs {
    /**
     * The name of the API Connection.
     */
    name: string;
    /**
     * The name of the Resource Group where the API Connection exists.
     */
    resourceGroupName: string;
}

/**
 * A collection of values returned by getApiConnection.
 */
export interface GetApiConnectionResult {
    /**
     * The display name of the API Connection.
     */
    readonly displayName: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The Azure Region where the API Connection exists.
     */
    readonly location: string;
    /**
     * The ID of the Managed API that this connection is linked to.
     */
    readonly managedApiId: string;
    readonly name: string;
    /**
     * A mapping of parameter names to their values for the API Connection.
     */
    readonly parameterValues: {[key: string]: string};
    readonly resourceGroupName: string;
    /**
     * A mapping of tags assigned to the API Connection.
     */
    readonly tags: {[key: string]: string};
}
/**
 * Use this data source to access information about an existing API Connection.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.connections.getApiConnection({
 *     name: "example-connection",
 *     resourceGroupName: "example-resources",
 * });
 * export const connectionId = example.then(example => example.id);
 * export const connectionName = example.then(example => example.name);
 * export const managedApiId = example.then(example => example.managedApiId);
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This data source uses the following Azure API Providers:
 *
 * * `Microsoft.Web` - 2016-06-01
 */
export function getApiConnectionOutput(args: GetApiConnectionOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetApiConnectionResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("azure:connections/getApiConnection:getApiConnection", {
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

/**
 * A collection of arguments for invoking getApiConnection.
 */
export interface GetApiConnectionOutputArgs {
    /**
     * The name of the API Connection.
     */
    name: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the API Connection exists.
     */
    resourceGroupName: pulumi.Input<string>;
}
