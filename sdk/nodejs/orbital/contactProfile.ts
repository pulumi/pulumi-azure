// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Contact profile.
 *
 * ## Import
 *
 * Contact profile can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:orbital/contactProfile:ContactProfile example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Orbital/contactProfiles/contactProfile1
 * ```
 */
export class ContactProfile extends pulumi.CustomResource {
    /**
     * Get an existing ContactProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContactProfileState, opts?: pulumi.CustomResourceOptions): ContactProfile {
        return new ContactProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:orbital/contactProfile:ContactProfile';

    /**
     * Returns true if the given object is an instance of ContactProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContactProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContactProfile.__pulumiType;
    }

    /**
     * Auto-tracking configurations for a spacecraft. Possible values are `disabled`, `xBand` and `sBand`.
     */
    public readonly autoTracking!: pulumi.Output<string>;
    /**
     * ARM resource identifier of the Event Hub used for telemetry. Requires granting Orbital Resource Provider the rights to send telemetry into the hub.
     */
    public readonly eventHubUri!: pulumi.Output<string | undefined>;
    /**
     * A list of spacecraft links. A `links` block as defined below. Changing this forces a new resource to be created.
     */
    public readonly links!: pulumi.Output<outputs.orbital.ContactProfileLink[]>;
    /**
     * The location where the contact profile exists. Changing this forces a new resource to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Maximum elevation of the antenna during the contact in decimal degrees.
     */
    public readonly minimumElevationDegrees!: pulumi.Output<number | undefined>;
    /**
     * Minimum viable contact duration in ISO 8601 format. Used for listing the available contacts with a spacecraft at a given ground station.
     */
    public readonly minimumVariableContactDuration!: pulumi.Output<string>;
    /**
     * The name of the contact profile. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ARM resource identifier of the subnet delegated to the Microsoft.Orbital/orbitalGateways. Needs to be at least a class C subnet, and should not have any IP created in it. Changing this forces a new resource to be created.
     */
    public readonly networkConfigurationSubnetId!: pulumi.Output<string>;
    /**
     * The name of the Resource Group where the contact profile exists. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a ContactProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContactProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContactProfileArgs | ContactProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContactProfileState | undefined;
            resourceInputs["autoTracking"] = state ? state.autoTracking : undefined;
            resourceInputs["eventHubUri"] = state ? state.eventHubUri : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["minimumElevationDegrees"] = state ? state.minimumElevationDegrees : undefined;
            resourceInputs["minimumVariableContactDuration"] = state ? state.minimumVariableContactDuration : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkConfigurationSubnetId"] = state ? state.networkConfigurationSubnetId : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ContactProfileArgs | undefined;
            if ((!args || args.autoTracking === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autoTracking'");
            }
            if ((!args || args.links === undefined) && !opts.urn) {
                throw new Error("Missing required property 'links'");
            }
            if ((!args || args.minimumVariableContactDuration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'minimumVariableContactDuration'");
            }
            if ((!args || args.networkConfigurationSubnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkConfigurationSubnetId'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["autoTracking"] = args ? args.autoTracking : undefined;
            resourceInputs["eventHubUri"] = args ? args.eventHubUri : undefined;
            resourceInputs["links"] = args ? args.links : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["minimumElevationDegrees"] = args ? args.minimumElevationDegrees : undefined;
            resourceInputs["minimumVariableContactDuration"] = args ? args.minimumVariableContactDuration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkConfigurationSubnetId"] = args ? args.networkConfigurationSubnetId : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContactProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ContactProfile resources.
 */
export interface ContactProfileState {
    /**
     * Auto-tracking configurations for a spacecraft. Possible values are `disabled`, `xBand` and `sBand`.
     */
    autoTracking?: pulumi.Input<string>;
    /**
     * ARM resource identifier of the Event Hub used for telemetry. Requires granting Orbital Resource Provider the rights to send telemetry into the hub.
     */
    eventHubUri?: pulumi.Input<string>;
    /**
     * A list of spacecraft links. A `links` block as defined below. Changing this forces a new resource to be created.
     */
    links?: pulumi.Input<pulumi.Input<inputs.orbital.ContactProfileLink>[]>;
    /**
     * The location where the contact profile exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Maximum elevation of the antenna during the contact in decimal degrees.
     */
    minimumElevationDegrees?: pulumi.Input<number>;
    /**
     * Minimum viable contact duration in ISO 8601 format. Used for listing the available contacts with a spacecraft at a given ground station.
     */
    minimumVariableContactDuration?: pulumi.Input<string>;
    /**
     * The name of the contact profile. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * ARM resource identifier of the subnet delegated to the Microsoft.Orbital/orbitalGateways. Needs to be at least a class C subnet, and should not have any IP created in it. Changing this forces a new resource to be created.
     */
    networkConfigurationSubnetId?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the contact profile exists. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a ContactProfile resource.
 */
export interface ContactProfileArgs {
    /**
     * Auto-tracking configurations for a spacecraft. Possible values are `disabled`, `xBand` and `sBand`.
     */
    autoTracking: pulumi.Input<string>;
    /**
     * ARM resource identifier of the Event Hub used for telemetry. Requires granting Orbital Resource Provider the rights to send telemetry into the hub.
     */
    eventHubUri?: pulumi.Input<string>;
    /**
     * A list of spacecraft links. A `links` block as defined below. Changing this forces a new resource to be created.
     */
    links: pulumi.Input<pulumi.Input<inputs.orbital.ContactProfileLink>[]>;
    /**
     * The location where the contact profile exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Maximum elevation of the antenna during the contact in decimal degrees.
     */
    minimumElevationDegrees?: pulumi.Input<number>;
    /**
     * Minimum viable contact duration in ISO 8601 format. Used for listing the available contacts with a spacecraft at a given ground station.
     */
    minimumVariableContactDuration: pulumi.Input<string>;
    /**
     * The name of the contact profile. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * ARM resource identifier of the subnet delegated to the Microsoft.Orbital/orbitalGateways. Needs to be at least a class C subnet, and should not have any IP created in it. Changing this forces a new resource to be created.
     */
    networkConfigurationSubnetId: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the contact profile exists. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
