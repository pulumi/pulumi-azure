// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Manages a Spacecraft.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleSpacecraft = new azure.orbital.Spacecraft("exampleSpacecraft", {
 *     resourceGroupName: azurerm_resource_group.test.name,
 *     location: "westeurope",
 *     noradId: "12345",
 *     links: [{
 *         bandwidthMhz: 100,
 *         centerFrequencyMhz: 101,
 *         direction: "Uplink",
 *         polarization: "LHCP",
 *         name: "examplename",
 *     }],
 *     twoLineElements: [
 *         "1 23455U 94089A   97320.90946019  .00000140  00000-0  10191-3 0  2621",
 *         "2 23455  99.0090 272.6745 0008546 223.1686 136.8816 14.11711747148495",
 *     ],
 *     titleLine: "AQUA",
 *     tags: {
 *         "aks-managed-cluster-name": "9a57225d-a405-4d40-aa46-f13d2342abef",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Spacecraft can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:orbital/spacecraft:Spacecraft example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Orbital/spacecrafts/spacecraft1
 * ```
 */
export class Spacecraft extends pulumi.CustomResource {
    /**
     * Get an existing Spacecraft resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SpacecraftState, opts?: pulumi.CustomResourceOptions): Spacecraft {
        return new Spacecraft(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:orbital/spacecraft:Spacecraft';

    /**
     * Returns true if the given object is an instance of Spacecraft.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Spacecraft {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Spacecraft.__pulumiType;
    }

    /**
     * A `links` block as defined below.
     */
    public readonly links!: pulumi.Output<outputs.orbital.SpacecraftLink[]>;
    /**
     * The location where the Spacecraft exists.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Name of the link.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * NORAD ID of the Spacecraft.
     */
    public readonly noradId!: pulumi.Output<string>;
    /**
     * The name of the Resource Group where the Spacecraft exists.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Title of the two line elements(TLE).
     */
    public readonly titleLine!: pulumi.Output<string>;
    /**
     * A list of the two line elements(TLE), the first string in the list is the first line of TLE, the second one is the second line of TLE.
     */
    public readonly twoLineElements!: pulumi.Output<string[]>;

    /**
     * Create a Spacecraft resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SpacecraftArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SpacecraftArgs | SpacecraftState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SpacecraftState | undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["noradId"] = state ? state.noradId : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["titleLine"] = state ? state.titleLine : undefined;
            resourceInputs["twoLineElements"] = state ? state.twoLineElements : undefined;
        } else {
            const args = argsOrState as SpacecraftArgs | undefined;
            if ((!args || args.links === undefined) && !opts.urn) {
                throw new Error("Missing required property 'links'");
            }
            if ((!args || args.noradId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'noradId'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.titleLine === undefined) && !opts.urn) {
                throw new Error("Missing required property 'titleLine'");
            }
            if ((!args || args.twoLineElements === undefined) && !opts.urn) {
                throw new Error("Missing required property 'twoLineElements'");
            }
            resourceInputs["links"] = args ? args.links : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["noradId"] = args ? args.noradId : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["titleLine"] = args ? args.titleLine : undefined;
            resourceInputs["twoLineElements"] = args ? args.twoLineElements : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Spacecraft.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Spacecraft resources.
 */
export interface SpacecraftState {
    /**
     * A `links` block as defined below.
     */
    links?: pulumi.Input<pulumi.Input<inputs.orbital.SpacecraftLink>[]>;
    /**
     * The location where the Spacecraft exists.
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the link.
     */
    name?: pulumi.Input<string>;
    /**
     * NORAD ID of the Spacecraft.
     */
    noradId?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Spacecraft exists.
     */
    resourceGroupName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Title of the two line elements(TLE).
     */
    titleLine?: pulumi.Input<string>;
    /**
     * A list of the two line elements(TLE), the first string in the list is the first line of TLE, the second one is the second line of TLE.
     */
    twoLineElements?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Spacecraft resource.
 */
export interface SpacecraftArgs {
    /**
     * A `links` block as defined below.
     */
    links: pulumi.Input<pulumi.Input<inputs.orbital.SpacecraftLink>[]>;
    /**
     * The location where the Spacecraft exists.
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the link.
     */
    name?: pulumi.Input<string>;
    /**
     * NORAD ID of the Spacecraft.
     */
    noradId: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Spacecraft exists.
     */
    resourceGroupName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Title of the two line elements(TLE).
     */
    titleLine: pulumi.Input<string>;
    /**
     * A list of the two line elements(TLE), the first string in the list is the first line of TLE, the second one is the second line of TLE.
     */
    twoLineElements: pulumi.Input<pulumi.Input<string>[]>;
}
