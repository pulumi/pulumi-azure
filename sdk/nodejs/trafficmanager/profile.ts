// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";

/**
 * Manages a Traffic Manager Profile to which multiple endpoints can be attached.
 */
export class Profile extends pulumi.CustomResource {
    /**
     * Get an existing Profile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProfileState): Profile {
        return new Profile(name, <any>state, { id });
    }

    /**
     * This block specifies the DNS configuration of the
     * Profile, it supports the fields documented below.
     */
    public readonly dnsConfigs: pulumi.Output<{ relativeName: string, ttl: number }[]>;
    /**
     * The FQDN of the created Profile.
     */
    public /*out*/ readonly fqdn: pulumi.Output<string>;
    /**
     * This block specifies the Endpoint monitoring
     * configuration for the Profile, it supports the fields documented below.
     */
    public readonly monitorConfigs: pulumi.Output<{ path?: string, port: number, protocol: string }[]>;
    /**
     * The name of the virtual network. Changing this forces a
     * new resource to be created.
     */
    public readonly name: pulumi.Output<string>;
    /**
     * The status of the profile, can be set to either
     * `Enabled` or `Disabled`. Defaults to `Enabled`.
     */
    public readonly profileStatus: pulumi.Output<string>;
    /**
     * The name of the resource group in which to
     * create the virtual network.
     */
    public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    public readonly tags: pulumi.Output<{[key: string]: any}>;
    /**
     * Specifies the algorithm used to route
     * traffic, possible values are:
     * - `Geographic` - Traffic is routed based on Geographic regions specified in the Endpoint.
     * - `Performance` - Traffic is routed via the User's closest Endpoint
     * - `Weighted` - Traffic is spread across Endpoints proportional to their `weight` value.
     * - `Priority` - Traffic is routed to the Endpoint with the lowest `priority` value.
     */
    public readonly trafficRoutingMethod: pulumi.Output<string>;

    /**
     * Create a Profile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProfileArgs, opts?: pulumi.ResourceOptions)
    constructor(name: string, argsOrState?: ProfileArgs | ProfileState, opts?: pulumi.ResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: ProfileState = argsOrState as ProfileState | undefined;
            inputs["dnsConfigs"] = state ? state.dnsConfigs : undefined;
            inputs["fqdn"] = state ? state.fqdn : undefined;
            inputs["monitorConfigs"] = state ? state.monitorConfigs : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["profileStatus"] = state ? state.profileStatus : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["trafficRoutingMethod"] = state ? state.trafficRoutingMethod : undefined;
        } else {
            const args = argsOrState as ProfileArgs | undefined;
            if (!args || args.dnsConfigs === undefined) {
                throw new Error("Missing required property 'dnsConfigs'");
            }
            if (!args || args.monitorConfigs === undefined) {
                throw new Error("Missing required property 'monitorConfigs'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.trafficRoutingMethod === undefined) {
                throw new Error("Missing required property 'trafficRoutingMethod'");
            }
            inputs["dnsConfigs"] = args ? args.dnsConfigs : undefined;
            inputs["monitorConfigs"] = args ? args.monitorConfigs : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["profileStatus"] = args ? args.profileStatus : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["trafficRoutingMethod"] = args ? args.trafficRoutingMethod : undefined;
            inputs["fqdn"] = undefined /*out*/;
        }
        super("azure:trafficmanager/profile:Profile", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Profile resources.
 */
export interface ProfileState {
    /**
     * This block specifies the DNS configuration of the
     * Profile, it supports the fields documented below.
     */
    readonly dnsConfigs?: pulumi.Input<pulumi.Input<{ relativeName: pulumi.Input<string>, ttl: pulumi.Input<number> }>[]>;
    /**
     * The FQDN of the created Profile.
     */
    readonly fqdn?: pulumi.Input<string>;
    /**
     * This block specifies the Endpoint monitoring
     * configuration for the Profile, it supports the fields documented below.
     */
    readonly monitorConfigs?: pulumi.Input<pulumi.Input<{ path?: pulumi.Input<string>, port: pulumi.Input<number>, protocol: pulumi.Input<string> }>[]>;
    /**
     * The name of the virtual network. Changing this forces a
     * new resource to be created.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The status of the profile, can be set to either
     * `Enabled` or `Disabled`. Defaults to `Enabled`.
     */
    readonly profileStatus?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to
     * create the virtual network.
     */
    readonly resourceGroupName?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Specifies the algorithm used to route
     * traffic, possible values are:
     * - `Geographic` - Traffic is routed based on Geographic regions specified in the Endpoint.
     * - `Performance` - Traffic is routed via the User's closest Endpoint
     * - `Weighted` - Traffic is spread across Endpoints proportional to their `weight` value.
     * - `Priority` - Traffic is routed to the Endpoint with the lowest `priority` value.
     */
    readonly trafficRoutingMethod?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Profile resource.
 */
export interface ProfileArgs {
    /**
     * This block specifies the DNS configuration of the
     * Profile, it supports the fields documented below.
     */
    readonly dnsConfigs: pulumi.Input<pulumi.Input<{ relativeName: pulumi.Input<string>, ttl: pulumi.Input<number> }>[]>;
    /**
     * This block specifies the Endpoint monitoring
     * configuration for the Profile, it supports the fields documented below.
     */
    readonly monitorConfigs: pulumi.Input<pulumi.Input<{ path?: pulumi.Input<string>, port: pulumi.Input<number>, protocol: pulumi.Input<string> }>[]>;
    /**
     * The name of the virtual network. Changing this forces a
     * new resource to be created.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The status of the profile, can be set to either
     * `Enabled` or `Disabled`. Defaults to `Enabled`.
     */
    readonly profileStatus?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to
     * create the virtual network.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Specifies the algorithm used to route
     * traffic, possible values are:
     * - `Geographic` - Traffic is routed based on Geographic regions specified in the Endpoint.
     * - `Performance` - Traffic is routed via the User's closest Endpoint
     * - `Weighted` - Traffic is spread across Endpoints proportional to their `weight` value.
     * - `Priority` - Traffic is routed to the Endpoint with the lowest `priority` value.
     */
    readonly trafficRoutingMethod: pulumi.Input<string>;
}
