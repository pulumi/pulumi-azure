// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Policy within a Dev Test Policy Set.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleLab = new azure.devtest.Lab("example", {
 *     name: "example-devtestlab",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     tags: {
 *         Sydney: "Australia",
 *     },
 * });
 * const examplePolicy = new azure.devtest.Policy("example", {
 *     name: "LabVmCount",
 *     policySetName: "default",
 *     labName: exampleLab.name,
 *     resourceGroupName: example.name,
 *     factData: "",
 *     threshold: "999",
 *     evaluatorType: "MaxValuePolicy",
 *     tags: {
 *         Acceptance: "Test",
 *     },
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.DevTestLab` - 2018-09-15
 *
 * ## Import
 *
 * Dev Test Policies can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:devtest/policy:Policy policy1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DevTestLab/labs/lab1/policySets/default/policies/policy1
 * ```
 */
export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:devtest/policy:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    /**
     * A description for the Policy.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The Evaluation Type used for this Policy. Possible values include: 'AllowedValuesPolicy', 'MaxValuePolicy'. Changing this forces a new resource to be created.
     */
    declare public readonly evaluatorType: pulumi.Output<string>;
    /**
     * The Fact Data for this Policy.
     */
    declare public readonly factData: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of the Dev Test Lab in which the Policy should be created. Changing this forces a new resource to be created.
     */
    declare public readonly labName: pulumi.Output<string>;
    /**
     * Specifies the name of the Dev Test Policy. Possible values are `GalleryImage`, `LabPremiumVmCount`, `LabTargetCost`, `LabVmCount`, `LabVmSize`, `UserOwnedLabPremiumVmCount`, `UserOwnedLabVmCount` and `UserOwnedLabVmCountInSubnet`. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Specifies the name of the Policy Set within the Dev Test Lab where this policy should be created. Changing this forces a new resource to be created.
     */
    declare public readonly policySetName: pulumi.Output<string>;
    /**
     * The name of the resource group in which the Dev Test Lab resource exists. Changing this forces a new resource to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The Threshold for this Policy.
     */
    declare public readonly threshold: pulumi.Output<string>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyArgs | PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["evaluatorType"] = state?.evaluatorType;
            resourceInputs["factData"] = state?.factData;
            resourceInputs["labName"] = state?.labName;
            resourceInputs["name"] = state?.name;
            resourceInputs["policySetName"] = state?.policySetName;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["threshold"] = state?.threshold;
        } else {
            const args = argsOrState as PolicyArgs | undefined;
            if (args?.evaluatorType === undefined && !opts.urn) {
                throw new Error("Missing required property 'evaluatorType'");
            }
            if (args?.labName === undefined && !opts.urn) {
                throw new Error("Missing required property 'labName'");
            }
            if (args?.policySetName === undefined && !opts.urn) {
                throw new Error("Missing required property 'policySetName'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.threshold === undefined && !opts.urn) {
                throw new Error("Missing required property 'threshold'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["evaluatorType"] = args?.evaluatorType;
            resourceInputs["factData"] = args?.factData;
            resourceInputs["labName"] = args?.labName;
            resourceInputs["name"] = args?.name;
            resourceInputs["policySetName"] = args?.policySetName;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["threshold"] = args?.threshold;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    /**
     * A description for the Policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The Evaluation Type used for this Policy. Possible values include: 'AllowedValuesPolicy', 'MaxValuePolicy'. Changing this forces a new resource to be created.
     */
    evaluatorType?: pulumi.Input<string>;
    /**
     * The Fact Data for this Policy.
     */
    factData?: pulumi.Input<string>;
    /**
     * Specifies the name of the Dev Test Lab in which the Policy should be created. Changing this forces a new resource to be created.
     */
    labName?: pulumi.Input<string>;
    /**
     * Specifies the name of the Dev Test Policy. Possible values are `GalleryImage`, `LabPremiumVmCount`, `LabTargetCost`, `LabVmCount`, `LabVmSize`, `UserOwnedLabPremiumVmCount`, `UserOwnedLabVmCount` and `UserOwnedLabVmCountInSubnet`. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the name of the Policy Set within the Dev Test Lab where this policy should be created. Changing this forces a new resource to be created.
     */
    policySetName?: pulumi.Input<string>;
    /**
     * The name of the resource group in which the Dev Test Lab resource exists. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Threshold for this Policy.
     */
    threshold?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    /**
     * A description for the Policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The Evaluation Type used for this Policy. Possible values include: 'AllowedValuesPolicy', 'MaxValuePolicy'. Changing this forces a new resource to be created.
     */
    evaluatorType: pulumi.Input<string>;
    /**
     * The Fact Data for this Policy.
     */
    factData?: pulumi.Input<string>;
    /**
     * Specifies the name of the Dev Test Lab in which the Policy should be created. Changing this forces a new resource to be created.
     */
    labName: pulumi.Input<string>;
    /**
     * Specifies the name of the Dev Test Policy. Possible values are `GalleryImage`, `LabPremiumVmCount`, `LabTargetCost`, `LabVmCount`, `LabVmSize`, `UserOwnedLabPremiumVmCount`, `UserOwnedLabVmCount` and `UserOwnedLabVmCountInSubnet`. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the name of the Policy Set within the Dev Test Lab where this policy should be created. Changing this forces a new resource to be created.
     */
    policySetName: pulumi.Input<string>;
    /**
     * The name of the resource group in which the Dev Test Lab resource exists. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Threshold for this Policy.
     */
    threshold: pulumi.Input<string>;
}
