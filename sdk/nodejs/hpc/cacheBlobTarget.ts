// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Blob Target within a HPC Cache.
 *
 * ## Example Usage
 *
 *
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as azuread from "@pulumi/azuread";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("exampleVirtualNetwork", {
 *     addressSpaces: ["10.0.0.0/16"],
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * const exampleSubnet = new azure.network.Subnet("exampleSubnet", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefix: "10.0.1.0/24",
 * });
 * const exampleCache = new azure.hpc.Cache("exampleCache", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     cacheSizeInGb: 3072,
 *     subnetId: exampleSubnet.id,
 *     skuName: "Standard_2G",
 * });
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleContainer = new azure.storage.Container("exampleContainer", {storageAccountName: exampleAccount.name});
 * const exampleServicePrincipal = azuread.getServicePrincipal({
 *     displayName: "HPC Cache Resource Provider",
 * });
 * const exampleStorageAccountContrib = new azure.authorization.Assignment("exampleStorageAccountContrib", {
 *     scope: exampleAccount.id,
 *     roleDefinitionName: "Storage Account Contributor",
 *     principalId: exampleServicePrincipal.then(exampleServicePrincipal => exampleServicePrincipal.objectId),
 * });
 * const exampleStorageBlobDataContrib = new azure.authorization.Assignment("exampleStorageBlobDataContrib", {
 *     scope: exampleAccount.id,
 *     roleDefinitionName: "Storage Blob Data Contributor",
 *     principalId: exampleServicePrincipal.then(exampleServicePrincipal => exampleServicePrincipal.objectId),
 * });
 * const exampleCacheBlobTarget = new azure.hpc.CacheBlobTarget("exampleCacheBlobTarget", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     cacheName: exampleCache.name,
 *     storageContainerId: exampleContainer.resourceManagerId,
 *     namespacePath: "/blob_storage",
 * });
 * ```
 */
export class CacheBlobTarget extends pulumi.CustomResource {
    /**
     * Get an existing CacheBlobTarget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CacheBlobTargetState, opts?: pulumi.CustomResourceOptions): CacheBlobTarget {
        return new CacheBlobTarget(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:hpc/cacheBlobTarget:CacheBlobTarget';

    /**
     * Returns true if the given object is an instance of CacheBlobTarget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CacheBlobTarget {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CacheBlobTarget.__pulumiType;
    }

    /**
     * The name HPC Cache, which the HPC Cache Blob Target will be added to. Changing this forces a new resource to be created.
     */
    public readonly cacheName!: pulumi.Output<string>;
    /**
     * The name of the HPC Cache Blob Target. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The client-facing file path of the HPC Cache Blob Target.
     */
    public readonly namespacePath!: pulumi.Output<string>;
    /**
     * The name of the Resource Group in which to create the HPC Cache Blob Target. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * The Resource Manager ID of the Storage Container used as the HPC Cache Blob Target. Changing this forces a new resource to be created.
     */
    public readonly storageContainerId!: pulumi.Output<string>;

    /**
     * Create a CacheBlobTarget resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CacheBlobTargetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CacheBlobTargetArgs | CacheBlobTargetState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as CacheBlobTargetState | undefined;
            inputs["cacheName"] = state ? state.cacheName : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namespacePath"] = state ? state.namespacePath : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["storageContainerId"] = state ? state.storageContainerId : undefined;
        } else {
            const args = argsOrState as CacheBlobTargetArgs | undefined;
            if (!args || args.cacheName === undefined) {
                throw new Error("Missing required property 'cacheName'");
            }
            if (!args || args.namespacePath === undefined) {
                throw new Error("Missing required property 'namespacePath'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.storageContainerId === undefined) {
                throw new Error("Missing required property 'storageContainerId'");
            }
            inputs["cacheName"] = args ? args.cacheName : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namespacePath"] = args ? args.namespacePath : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["storageContainerId"] = args ? args.storageContainerId : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(CacheBlobTarget.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CacheBlobTarget resources.
 */
export interface CacheBlobTargetState {
    /**
     * The name HPC Cache, which the HPC Cache Blob Target will be added to. Changing this forces a new resource to be created.
     */
    readonly cacheName?: pulumi.Input<string>;
    /**
     * The name of the HPC Cache Blob Target. Changing this forces a new resource to be created.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The client-facing file path of the HPC Cache Blob Target.
     */
    readonly namespacePath?: pulumi.Input<string>;
    /**
     * The name of the Resource Group in which to create the HPC Cache Blob Target. Changing this forces a new resource to be created.
     */
    readonly resourceGroupName?: pulumi.Input<string>;
    /**
     * The Resource Manager ID of the Storage Container used as the HPC Cache Blob Target. Changing this forces a new resource to be created.
     */
    readonly storageContainerId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CacheBlobTarget resource.
 */
export interface CacheBlobTargetArgs {
    /**
     * The name HPC Cache, which the HPC Cache Blob Target will be added to. Changing this forces a new resource to be created.
     */
    readonly cacheName: pulumi.Input<string>;
    /**
     * The name of the HPC Cache Blob Target. Changing this forces a new resource to be created.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The client-facing file path of the HPC Cache Blob Target.
     */
    readonly namespacePath: pulumi.Input<string>;
    /**
     * The name of the Resource Group in which to create the HPC Cache Blob Target. Changing this forces a new resource to be created.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * The Resource Manager ID of the Storage Container used as the HPC Cache Blob Target. Changing this forces a new resource to be created.
     */
    readonly storageContainerId: pulumi.Input<string>;
}
