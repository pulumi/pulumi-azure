// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Blob NFSv3 Target within a HPC Cache.
 *
 * > **NOTE:**: By request of the service team the provider no longer automatically registering the `Microsoft.StorageCache` Resource Provider for this resource. To register it you can run `az provider register --namespace 'Microsoft.StorageCache'`.
 *
 * > **NOTE:**: This resource depends on the NFSv3 enabled Storage Account, which has some prerequisites need to meet. Please checkout: <https://docs.microsoft.com/azure/storage/blobs/network-file-system-protocol-support-how-to?tabs=azure-powershell>.
 *
 * ## Import
 *
 * HPC Cache Blob NFS Targets can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:hpc/cacheBlobNfsTarget:CacheBlobNfsTarget example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StorageCache/caches/cache1/storageTargets/target1
 * ```
 */
export class CacheBlobNfsTarget extends pulumi.CustomResource {
    /**
     * Get an existing CacheBlobNfsTarget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CacheBlobNfsTargetState, opts?: pulumi.CustomResourceOptions): CacheBlobNfsTarget {
        return new CacheBlobNfsTarget(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:hpc/cacheBlobNfsTarget:CacheBlobNfsTarget';

    /**
     * Returns true if the given object is an instance of CacheBlobNfsTarget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CacheBlobNfsTarget {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CacheBlobNfsTarget.__pulumiType;
    }

    /**
     * The name of the access policy applied to this target. Defaults to `default`.
     */
    public readonly accessPolicyName!: pulumi.Output<string | undefined>;
    /**
     * The name of the HPC Cache, which the HPC Cache Blob NFS Target will be added to. Changing this forces a new HPC Cache Blob NFS Target to be created.
     */
    public readonly cacheName!: pulumi.Output<string>;
    /**
     * The name which should be used for this HPC Cache Blob NFS Target. Changing this forces a new HPC Cache Blob NFS Target to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The client-facing file path of the HPC Cache Blob NFS Target.
     */
    public readonly namespacePath!: pulumi.Output<string>;
    /**
     * The name of the Resource Group where the HPC Cache Blob NFS Target should exist. Changing this forces a new HPC Cache Blob NFS Target to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * The Resource Manager ID of the Storage Container used as the HPC Cache Blob NFS Target. Changing this forces a new resource to be created.
     *
     * > **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `azure.storage.Container` Data Source/Resource as `resourceManagerId`.
     */
    public readonly storageContainerId!: pulumi.Output<string>;
    /**
     * The type of usage of the HPC Cache Blob NFS Target. Possible values are: `READ_HEAVY_INFREQ`, `READ_HEAVY_CHECK_180`, `READ_ONLY`, `READ_WRITE`, `WRITE_WORKLOAD_15`, `WRITE_AROUND`, `WRITE_WORKLOAD_CHECK_30`, `WRITE_WORKLOAD_CHECK_60` and `WRITE_WORKLOAD_CLOUDWS`.
     */
    public readonly usageModel!: pulumi.Output<string>;
    /**
     * The amount of time the cache waits before it checks the back-end storage for file updates. Possible values are between `1` and `31536000`.
     */
    public readonly verificationTimerInSeconds!: pulumi.Output<number | undefined>;
    /**
     * The amount of time the cache waits after the last file change before it copies the changed file to back-end storage. Possible values are between `1` and `31536000`.
     */
    public readonly writeBackTimerInSeconds!: pulumi.Output<number | undefined>;

    /**
     * Create a CacheBlobNfsTarget resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CacheBlobNfsTargetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CacheBlobNfsTargetArgs | CacheBlobNfsTargetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CacheBlobNfsTargetState | undefined;
            resourceInputs["accessPolicyName"] = state ? state.accessPolicyName : undefined;
            resourceInputs["cacheName"] = state ? state.cacheName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespacePath"] = state ? state.namespacePath : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["storageContainerId"] = state ? state.storageContainerId : undefined;
            resourceInputs["usageModel"] = state ? state.usageModel : undefined;
            resourceInputs["verificationTimerInSeconds"] = state ? state.verificationTimerInSeconds : undefined;
            resourceInputs["writeBackTimerInSeconds"] = state ? state.writeBackTimerInSeconds : undefined;
        } else {
            const args = argsOrState as CacheBlobNfsTargetArgs | undefined;
            if ((!args || args.cacheName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cacheName'");
            }
            if ((!args || args.namespacePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespacePath'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.storageContainerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageContainerId'");
            }
            if ((!args || args.usageModel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'usageModel'");
            }
            resourceInputs["accessPolicyName"] = args ? args.accessPolicyName : undefined;
            resourceInputs["cacheName"] = args ? args.cacheName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespacePath"] = args ? args.namespacePath : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["storageContainerId"] = args ? args.storageContainerId : undefined;
            resourceInputs["usageModel"] = args ? args.usageModel : undefined;
            resourceInputs["verificationTimerInSeconds"] = args ? args.verificationTimerInSeconds : undefined;
            resourceInputs["writeBackTimerInSeconds"] = args ? args.writeBackTimerInSeconds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CacheBlobNfsTarget.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CacheBlobNfsTarget resources.
 */
export interface CacheBlobNfsTargetState {
    /**
     * The name of the access policy applied to this target. Defaults to `default`.
     */
    accessPolicyName?: pulumi.Input<string>;
    /**
     * The name of the HPC Cache, which the HPC Cache Blob NFS Target will be added to. Changing this forces a new HPC Cache Blob NFS Target to be created.
     */
    cacheName?: pulumi.Input<string>;
    /**
     * The name which should be used for this HPC Cache Blob NFS Target. Changing this forces a new HPC Cache Blob NFS Target to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The client-facing file path of the HPC Cache Blob NFS Target.
     */
    namespacePath?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the HPC Cache Blob NFS Target should exist. Changing this forces a new HPC Cache Blob NFS Target to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The Resource Manager ID of the Storage Container used as the HPC Cache Blob NFS Target. Changing this forces a new resource to be created.
     *
     * > **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `azure.storage.Container` Data Source/Resource as `resourceManagerId`.
     */
    storageContainerId?: pulumi.Input<string>;
    /**
     * The type of usage of the HPC Cache Blob NFS Target. Possible values are: `READ_HEAVY_INFREQ`, `READ_HEAVY_CHECK_180`, `READ_ONLY`, `READ_WRITE`, `WRITE_WORKLOAD_15`, `WRITE_AROUND`, `WRITE_WORKLOAD_CHECK_30`, `WRITE_WORKLOAD_CHECK_60` and `WRITE_WORKLOAD_CLOUDWS`.
     */
    usageModel?: pulumi.Input<string>;
    /**
     * The amount of time the cache waits before it checks the back-end storage for file updates. Possible values are between `1` and `31536000`.
     */
    verificationTimerInSeconds?: pulumi.Input<number>;
    /**
     * The amount of time the cache waits after the last file change before it copies the changed file to back-end storage. Possible values are between `1` and `31536000`.
     */
    writeBackTimerInSeconds?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CacheBlobNfsTarget resource.
 */
export interface CacheBlobNfsTargetArgs {
    /**
     * The name of the access policy applied to this target. Defaults to `default`.
     */
    accessPolicyName?: pulumi.Input<string>;
    /**
     * The name of the HPC Cache, which the HPC Cache Blob NFS Target will be added to. Changing this forces a new HPC Cache Blob NFS Target to be created.
     */
    cacheName: pulumi.Input<string>;
    /**
     * The name which should be used for this HPC Cache Blob NFS Target. Changing this forces a new HPC Cache Blob NFS Target to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The client-facing file path of the HPC Cache Blob NFS Target.
     */
    namespacePath: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the HPC Cache Blob NFS Target should exist. Changing this forces a new HPC Cache Blob NFS Target to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The Resource Manager ID of the Storage Container used as the HPC Cache Blob NFS Target. Changing this forces a new resource to be created.
     *
     * > **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `azure.storage.Container` Data Source/Resource as `resourceManagerId`.
     */
    storageContainerId: pulumi.Input<string>;
    /**
     * The type of usage of the HPC Cache Blob NFS Target. Possible values are: `READ_HEAVY_INFREQ`, `READ_HEAVY_CHECK_180`, `READ_ONLY`, `READ_WRITE`, `WRITE_WORKLOAD_15`, `WRITE_AROUND`, `WRITE_WORKLOAD_CHECK_30`, `WRITE_WORKLOAD_CHECK_60` and `WRITE_WORKLOAD_CLOUDWS`.
     */
    usageModel: pulumi.Input<string>;
    /**
     * The amount of time the cache waits before it checks the back-end storage for file updates. Possible values are between `1` and `31536000`.
     */
    verificationTimerInSeconds?: pulumi.Input<number>;
    /**
     * The amount of time the cache waits after the last file change before it copies the changed file to back-end storage. Possible values are between `1` and `31536000`.
     */
    writeBackTimerInSeconds?: pulumi.Input<number>;
}
