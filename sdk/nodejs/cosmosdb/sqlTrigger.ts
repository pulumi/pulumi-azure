// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an SQL Trigger.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleAccount = azure.cosmosdb.getAccount({
 *     name: "tfex-cosmosdb-account",
 *     resourceGroupName: "tfex-cosmosdb-account-rg",
 * });
 * const exampleSqlDatabase = new azure.cosmosdb.SqlDatabase("exampleSqlDatabase", {
 *     resourceGroupName: exampleAccount.then(exampleAccount => exampleAccount.resourceGroupName),
 *     accountName: exampleAccount.then(exampleAccount => exampleAccount.name),
 *     throughput: 400,
 * });
 * const exampleSqlContainer = new azure.cosmosdb.SqlContainer("exampleSqlContainer", {
 *     resourceGroupName: azurerm_cosmosdb_account.example.resource_group_name,
 *     accountName: azurerm_cosmosdb_account.example.name,
 *     databaseName: exampleSqlDatabase.name,
 *     partitionKeyPath: "/id",
 * });
 * const exampleSqlTrigger = new azure.cosmosdb.SqlTrigger("exampleSqlTrigger", {
 *     containerId: exampleSqlContainer.id,
 *     body: "function trigger(){}",
 *     operation: "Delete",
 *     type: "Post",
 * });
 * ```
 *
 * ## Import
 *
 * SQL Triggers can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:cosmosdb/sqlTrigger:SqlTrigger example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DocumentDB/databaseAccounts/account1/sqlDatabases/database1/containers/container1/triggers/trigger1
 * ```
 */
export class SqlTrigger extends pulumi.CustomResource {
    /**
     * Get an existing SqlTrigger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SqlTriggerState, opts?: pulumi.CustomResourceOptions): SqlTrigger {
        return new SqlTrigger(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:cosmosdb/sqlTrigger:SqlTrigger';

    /**
     * Returns true if the given object is an instance of SqlTrigger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SqlTrigger {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SqlTrigger.__pulumiType;
    }

    /**
     * Body of the Trigger.
     */
    public readonly body!: pulumi.Output<string>;
    /**
     * The id of the Cosmos DB SQL Container to create the SQL Trigger within. Changing this forces a new SQL Trigger to be created.
     */
    public readonly containerId!: pulumi.Output<string>;
    /**
     * The name which should be used for this SQL Trigger. Changing this forces a new SQL Trigger to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The operation the trigger is associated with. Possible values are `All`, `Create`, `Update`, `Delete` and `Replace`.
     */
    public readonly operation!: pulumi.Output<string>;
    /**
     * Type of the Trigger. Possible values are `Pre` and `Post`.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a SqlTrigger resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SqlTriggerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SqlTriggerArgs | SqlTriggerState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SqlTriggerState | undefined;
            inputs["body"] = state ? state.body : undefined;
            inputs["containerId"] = state ? state.containerId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["operation"] = state ? state.operation : undefined;
            inputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as SqlTriggerArgs | undefined;
            if ((!args || args.body === undefined) && !opts.urn) {
                throw new Error("Missing required property 'body'");
            }
            if ((!args || args.containerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerId'");
            }
            if ((!args || args.operation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'operation'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            inputs["body"] = args ? args.body : undefined;
            inputs["containerId"] = args ? args.containerId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["operation"] = args ? args.operation : undefined;
            inputs["type"] = args ? args.type : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(SqlTrigger.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SqlTrigger resources.
 */
export interface SqlTriggerState {
    /**
     * Body of the Trigger.
     */
    body?: pulumi.Input<string>;
    /**
     * The id of the Cosmos DB SQL Container to create the SQL Trigger within. Changing this forces a new SQL Trigger to be created.
     */
    containerId?: pulumi.Input<string>;
    /**
     * The name which should be used for this SQL Trigger. Changing this forces a new SQL Trigger to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The operation the trigger is associated with. Possible values are `All`, `Create`, `Update`, `Delete` and `Replace`.
     */
    operation?: pulumi.Input<string>;
    /**
     * Type of the Trigger. Possible values are `Pre` and `Post`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SqlTrigger resource.
 */
export interface SqlTriggerArgs {
    /**
     * Body of the Trigger.
     */
    body: pulumi.Input<string>;
    /**
     * The id of the Cosmos DB SQL Container to create the SQL Trigger within. Changing this forces a new SQL Trigger to be created.
     */
    containerId: pulumi.Input<string>;
    /**
     * The name which should be used for this SQL Trigger. Changing this forces a new SQL Trigger to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The operation the trigger is associated with. Possible values are `All`, `Create`, `Update`, `Delete` and `Replace`.
     */
    operation: pulumi.Input<string>;
    /**
     * Type of the Trigger. Possible values are `Pre` and `Post`.
     */
    type: pulumi.Input<string>;
}
