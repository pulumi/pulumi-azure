// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an SQL Trigger.
 *
 * ## Import
 *
 * SQL Triggers can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:cosmosdb/sqlTrigger:SqlTrigger example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DocumentDB/databaseAccounts/account1/sqlDatabases/database1/containers/container1/triggers/trigger1
 * ```
 */
export class SqlTrigger extends pulumi.CustomResource {
    /**
     * Get an existing SqlTrigger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SqlTriggerState, opts?: pulumi.CustomResourceOptions): SqlTrigger {
        return new SqlTrigger(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:cosmosdb/sqlTrigger:SqlTrigger';

    /**
     * Returns true if the given object is an instance of SqlTrigger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SqlTrigger {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SqlTrigger.__pulumiType;
    }

    /**
     * Body of the Trigger.
     */
    declare public readonly body: pulumi.Output<string>;
    /**
     * The id of the Cosmos DB SQL Container to create the SQL Trigger within. Changing this forces a new SQL Trigger to be created.
     */
    declare public readonly containerId: pulumi.Output<string>;
    /**
     * The name which should be used for this SQL Trigger. Changing this forces a new SQL Trigger to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The operation the trigger is associated with. Possible values are `All`, `Create`, `Update`, `Delete` and `Replace`.
     */
    declare public readonly operation: pulumi.Output<string>;
    /**
     * Type of the Trigger. Possible values are `Pre` and `Post`.
     */
    declare public readonly type: pulumi.Output<string>;

    /**
     * Create a SqlTrigger resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SqlTriggerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SqlTriggerArgs | SqlTriggerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SqlTriggerState | undefined;
            resourceInputs["body"] = state?.body;
            resourceInputs["containerId"] = state?.containerId;
            resourceInputs["name"] = state?.name;
            resourceInputs["operation"] = state?.operation;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as SqlTriggerArgs | undefined;
            if (args?.body === undefined && !opts.urn) {
                throw new Error("Missing required property 'body'");
            }
            if (args?.containerId === undefined && !opts.urn) {
                throw new Error("Missing required property 'containerId'");
            }
            if (args?.operation === undefined && !opts.urn) {
                throw new Error("Missing required property 'operation'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["body"] = args?.body;
            resourceInputs["containerId"] = args?.containerId;
            resourceInputs["name"] = args?.name;
            resourceInputs["operation"] = args?.operation;
            resourceInputs["type"] = args?.type;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SqlTrigger.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SqlTrigger resources.
 */
export interface SqlTriggerState {
    /**
     * Body of the Trigger.
     */
    body?: pulumi.Input<string>;
    /**
     * The id of the Cosmos DB SQL Container to create the SQL Trigger within. Changing this forces a new SQL Trigger to be created.
     */
    containerId?: pulumi.Input<string>;
    /**
     * The name which should be used for this SQL Trigger. Changing this forces a new SQL Trigger to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The operation the trigger is associated with. Possible values are `All`, `Create`, `Update`, `Delete` and `Replace`.
     */
    operation?: pulumi.Input<string>;
    /**
     * Type of the Trigger. Possible values are `Pre` and `Post`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SqlTrigger resource.
 */
export interface SqlTriggerArgs {
    /**
     * Body of the Trigger.
     */
    body: pulumi.Input<string>;
    /**
     * The id of the Cosmos DB SQL Container to create the SQL Trigger within. Changing this forces a new SQL Trigger to be created.
     */
    containerId: pulumi.Input<string>;
    /**
     * The name which should be used for this SQL Trigger. Changing this forces a new SQL Trigger to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The operation the trigger is associated with. Possible values are `All`, `Create`, `Update`, `Delete` and `Replace`.
     */
    operation: pulumi.Input<string>;
    /**
     * Type of the Trigger. Possible values are `Pre` and `Post`.
     */
    type: pulumi.Input<string>;
}
