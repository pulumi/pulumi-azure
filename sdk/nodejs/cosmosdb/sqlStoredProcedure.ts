// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a SQL Stored Procedure within a Cosmos DB Account SQL Database.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleAccount = azure.cosmosdb.getAccount({
 *     name: "tfex-cosmosdb-account",
 *     resourceGroupName: "tfex-cosmosdb-account-rg",
 * });
 * const exampleSqlDatabase = new azure.cosmosdb.SqlDatabase("exampleSqlDatabase", {
 *     resourceGroupName: exampleAccount.then(exampleAccount => exampleAccount.resourceGroupName),
 *     accountName: exampleAccount.then(exampleAccount => exampleAccount.name),
 *     throughput: 400,
 * });
 * const exampleSqlContainer = new azure.cosmosdb.SqlContainer("exampleSqlContainer", {
 *     resourceGroupName: azurerm_cosmosdb_account.example.resource_group_name,
 *     accountName: azurerm_cosmosdb_account.example.name,
 *     databaseName: exampleSqlDatabase.name,
 *     partitionKeyPath: "/id",
 * });
 * const exampleSqlStoredProcedure = new azure.cosmosdb.SqlStoredProcedure("exampleSqlStoredProcedure", {
 *     resourceGroupName: azurerm_cosmosdb_account.example.resource_group_name,
 *     accountName: azurerm_cosmosdb_account.example.name,
 *     databaseName: exampleSqlDatabase.name,
 *     containerName: exampleSqlContainer.name,
 *     body: "  	function () { var context = getContext(); var response = context.getResponse(); response.setBody('Hello, World'); }\n",
 * });
 * ```
 *
 * ## Import
 *
 * CosmosDB SQL Stored Procedures can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:cosmosdb/sqlStoredProcedure:SqlStoredProcedure db1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/account1/sqlDatabases/db1/containers/c1/storedProcedures/sp1
 * ```
 */
export class SqlStoredProcedure extends pulumi.CustomResource {
    /**
     * Get an existing SqlStoredProcedure resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SqlStoredProcedureState, opts?: pulumi.CustomResourceOptions): SqlStoredProcedure {
        return new SqlStoredProcedure(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:cosmosdb/sqlStoredProcedure:SqlStoredProcedure';

    /**
     * Returns true if the given object is an instance of SqlStoredProcedure.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SqlStoredProcedure {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SqlStoredProcedure.__pulumiType;
    }

    /**
     * The name of the Cosmos DB Account to create the stored procedure within. Changing this forces a new resource to be created.
     */
    public readonly accountName!: pulumi.Output<string>;
    /**
     * The body of the stored procedure.
     */
    public readonly body!: pulumi.Output<string>;
    /**
     * The name of the Cosmos DB SQL Container to create the stored procedure within. Changing this forces a new resource to be created.
     */
    public readonly containerName!: pulumi.Output<string>;
    /**
     * The name of the Cosmos DB SQL Database to create the stored procedure within. Changing this forces a new resource to be created.
     */
    public readonly databaseName!: pulumi.Output<string>;
    /**
     * Specifies the name of the Cosmos DB SQL Stored Procedure. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the resource group in which the Cosmos DB SQL Database is created. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;

    /**
     * Create a SqlStoredProcedure resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SqlStoredProcedureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SqlStoredProcedureArgs | SqlStoredProcedureState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as SqlStoredProcedureState | undefined;
            inputs["accountName"] = state ? state.accountName : undefined;
            inputs["body"] = state ? state.body : undefined;
            inputs["containerName"] = state ? state.containerName : undefined;
            inputs["databaseName"] = state ? state.databaseName : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
        } else {
            const args = argsOrState as SqlStoredProcedureArgs | undefined;
            if ((!args || args.accountName === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.body === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'body'");
            }
            if ((!args || args.containerName === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'containerName'");
            }
            if ((!args || args.databaseName === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'databaseName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["accountName"] = args ? args.accountName : undefined;
            inputs["body"] = args ? args.body : undefined;
            inputs["containerName"] = args ? args.containerName : undefined;
            inputs["databaseName"] = args ? args.databaseName : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(SqlStoredProcedure.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SqlStoredProcedure resources.
 */
export interface SqlStoredProcedureState {
    /**
     * The name of the Cosmos DB Account to create the stored procedure within. Changing this forces a new resource to be created.
     */
    readonly accountName?: pulumi.Input<string>;
    /**
     * The body of the stored procedure.
     */
    readonly body?: pulumi.Input<string>;
    /**
     * The name of the Cosmos DB SQL Container to create the stored procedure within. Changing this forces a new resource to be created.
     */
    readonly containerName?: pulumi.Input<string>;
    /**
     * The name of the Cosmos DB SQL Database to create the stored procedure within. Changing this forces a new resource to be created.
     */
    readonly databaseName?: pulumi.Input<string>;
    /**
     * Specifies the name of the Cosmos DB SQL Stored Procedure. Changing this forces a new resource to be created.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The name of the resource group in which the Cosmos DB SQL Database is created. Changing this forces a new resource to be created.
     */
    readonly resourceGroupName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SqlStoredProcedure resource.
 */
export interface SqlStoredProcedureArgs {
    /**
     * The name of the Cosmos DB Account to create the stored procedure within. Changing this forces a new resource to be created.
     */
    readonly accountName: pulumi.Input<string>;
    /**
     * The body of the stored procedure.
     */
    readonly body: pulumi.Input<string>;
    /**
     * The name of the Cosmos DB SQL Container to create the stored procedure within. Changing this forces a new resource to be created.
     */
    readonly containerName: pulumi.Input<string>;
    /**
     * The name of the Cosmos DB SQL Database to create the stored procedure within. Changing this forces a new resource to be created.
     */
    readonly databaseName: pulumi.Input<string>;
    /**
     * Specifies the name of the Cosmos DB SQL Stored Procedure. Changing this forces a new resource to be created.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The name of the resource group in which the Cosmos DB SQL Database is created. Changing this forces a new resource to be created.
     */
    readonly resourceGroupName: pulumi.Input<string>;
}
