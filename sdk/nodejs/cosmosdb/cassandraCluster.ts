// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Cassandra Cluster.
 *
 * > **Note:** In order for the `Azure Managed Instances for Apache Cassandra` to work properly the product requires the `Azure Cosmos DB` Application ID to be present and working in your tenant. If the `Azure Cosmos DB` Application ID is missing in your environment you will need to have an administrator of your tenant run the following command to add the `Azure Cosmos DB` Application ID to your tenant:
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as azuread from "@pulumi/azuread";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("example", {
 *     name: "accexample-rg",
 *     location: "West Europe",
 * });
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
 *     name: "example-vnet",
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     addressSpaces: ["10.0.0.0/16"],
 * });
 * const exampleSubnet = new azure.network.Subnet("example", {
 *     name: "example-subnet",
 *     resourceGroupName: exampleResourceGroup.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.1.0/24"],
 * });
 * const example = azuread.getServicePrincipal({
 *     displayName: "Azure Cosmos DB",
 * });
 * const exampleAssignment = new azure.authorization.Assignment("example", {
 *     scope: exampleVirtualNetwork.id,
 *     roleDefinitionName: "Network Contributor",
 *     principalId: example.then(example => example.objectId),
 * });
 * const exampleCassandraCluster = new azure.cosmosdb.CassandraCluster("example", {
 *     name: "example-cluster",
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     delegatedManagementSubnetId: exampleSubnet.id,
 *     defaultAdminPassword: "Password1234",
 * }, {
 *     dependsOn: [exampleAssignment],
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.DocumentDB` - 2023-04-15
 *
 * ## Import
 *
 * Cassandra Clusters can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:cosmosdb/cassandraCluster:CassandraCluster example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DocumentDB/cassandraClusters/cluster1
 * ```
 */
export class CassandraCluster extends pulumi.CustomResource {
    /**
     * Get an existing CassandraCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CassandraClusterState, opts?: pulumi.CustomResourceOptions): CassandraCluster {
        return new CassandraCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:cosmosdb/cassandraCluster:CassandraCluster';

    /**
     * Returns true if the given object is an instance of CassandraCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CassandraCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CassandraCluster.__pulumiType;
    }

    /**
     * The authentication method that is used to authenticate clients. Possible values are `None` and `Cassandra`. Defaults to `Cassandra`.
     */
    declare public readonly authenticationMethod: pulumi.Output<string | undefined>;
    /**
     * A list of TLS certificates that is used to authorize client connecting to the Cassandra Cluster.
     */
    declare public readonly clientCertificatePems: pulumi.Output<string[] | undefined>;
    /**
     * The initial admin password for this Cassandra Cluster. Changing this forces a new resource to be created.
     */
    declare public readonly defaultAdminPassword: pulumi.Output<string>;
    /**
     * The ID of the delegated management subnet for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
     */
    declare public readonly delegatedManagementSubnetId: pulumi.Output<string>;
    /**
     * A list of TLS certificates that is used to authorize gossip from unmanaged Cassandra Data Center.
     */
    declare public readonly externalGossipCertificatePems: pulumi.Output<string[] | undefined>;
    /**
     * A list of IP Addresses of the seed nodes in unmanaged the Cassandra Data Center which will be added to the seed node lists of all managed nodes.
     */
    declare public readonly externalSeedNodeIpAddresses: pulumi.Output<string[] | undefined>;
    /**
     * The number of hours to wait between taking a backup of the Cassandra Cluster. Defaults to `24`.
     *
     * > **Note:** To disable this feature, set this property to `0`.
     */
    declare public readonly hoursBetweenBackups: pulumi.Output<number | undefined>;
    /**
     * An `identity` block as defined below.
     */
    declare public readonly identity: pulumi.Output<outputs.cosmosdb.CassandraClusterIdentity | undefined>;
    /**
     * The Azure Region where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * The name which should be used for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Is the automatic repair enabled on the Cassandra Cluster? Defaults to `true`.
     */
    declare public readonly repairEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The name of the Resource Group where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
     */
    declare public readonly resourceGroupName: pulumi.Output<string>;
    /**
     * A mapping of tags assigned to the resource.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The version of Cassandra what the Cluster converges to run. Possible values are `3.11` and `4.0`. Defaults to `3.11`. Changing this forces a new Cassandra Cluster to be created.
     */
    declare public readonly version: pulumi.Output<string | undefined>;

    /**
     * Create a CassandraCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CassandraClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CassandraClusterArgs | CassandraClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CassandraClusterState | undefined;
            resourceInputs["authenticationMethod"] = state?.authenticationMethod;
            resourceInputs["clientCertificatePems"] = state?.clientCertificatePems;
            resourceInputs["defaultAdminPassword"] = state?.defaultAdminPassword;
            resourceInputs["delegatedManagementSubnetId"] = state?.delegatedManagementSubnetId;
            resourceInputs["externalGossipCertificatePems"] = state?.externalGossipCertificatePems;
            resourceInputs["externalSeedNodeIpAddresses"] = state?.externalSeedNodeIpAddresses;
            resourceInputs["hoursBetweenBackups"] = state?.hoursBetweenBackups;
            resourceInputs["identity"] = state?.identity;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["repairEnabled"] = state?.repairEnabled;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as CassandraClusterArgs | undefined;
            if (args?.defaultAdminPassword === undefined && !opts.urn) {
                throw new Error("Missing required property 'defaultAdminPassword'");
            }
            if (args?.delegatedManagementSubnetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'delegatedManagementSubnetId'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["authenticationMethod"] = args?.authenticationMethod;
            resourceInputs["clientCertificatePems"] = args?.clientCertificatePems;
            resourceInputs["defaultAdminPassword"] = args?.defaultAdminPassword ? pulumi.secret(args.defaultAdminPassword) : undefined;
            resourceInputs["delegatedManagementSubnetId"] = args?.delegatedManagementSubnetId;
            resourceInputs["externalGossipCertificatePems"] = args?.externalGossipCertificatePems;
            resourceInputs["externalSeedNodeIpAddresses"] = args?.externalSeedNodeIpAddresses;
            resourceInputs["hoursBetweenBackups"] = args?.hoursBetweenBackups;
            resourceInputs["identity"] = args?.identity;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["repairEnabled"] = args?.repairEnabled;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["version"] = args?.version;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["defaultAdminPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CassandraCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CassandraCluster resources.
 */
export interface CassandraClusterState {
    /**
     * The authentication method that is used to authenticate clients. Possible values are `None` and `Cassandra`. Defaults to `Cassandra`.
     */
    authenticationMethod?: pulumi.Input<string>;
    /**
     * A list of TLS certificates that is used to authorize client connecting to the Cassandra Cluster.
     */
    clientCertificatePems?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The initial admin password for this Cassandra Cluster. Changing this forces a new resource to be created.
     */
    defaultAdminPassword?: pulumi.Input<string>;
    /**
     * The ID of the delegated management subnet for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
     */
    delegatedManagementSubnetId?: pulumi.Input<string>;
    /**
     * A list of TLS certificates that is used to authorize gossip from unmanaged Cassandra Data Center.
     */
    externalGossipCertificatePems?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of IP Addresses of the seed nodes in unmanaged the Cassandra Data Center which will be added to the seed node lists of all managed nodes.
     */
    externalSeedNodeIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of hours to wait between taking a backup of the Cassandra Cluster. Defaults to `24`.
     *
     * > **Note:** To disable this feature, set this property to `0`.
     */
    hoursBetweenBackups?: pulumi.Input<number>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.cosmosdb.CassandraClusterIdentity>;
    /**
     * The Azure Region where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The name which should be used for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Is the automatic repair enabled on the Cassandra Cluster? Defaults to `true`.
     */
    repairEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the Resource Group where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A mapping of tags assigned to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The version of Cassandra what the Cluster converges to run. Possible values are `3.11` and `4.0`. Defaults to `3.11`. Changing this forces a new Cassandra Cluster to be created.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CassandraCluster resource.
 */
export interface CassandraClusterArgs {
    /**
     * The authentication method that is used to authenticate clients. Possible values are `None` and `Cassandra`. Defaults to `Cassandra`.
     */
    authenticationMethod?: pulumi.Input<string>;
    /**
     * A list of TLS certificates that is used to authorize client connecting to the Cassandra Cluster.
     */
    clientCertificatePems?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The initial admin password for this Cassandra Cluster. Changing this forces a new resource to be created.
     */
    defaultAdminPassword: pulumi.Input<string>;
    /**
     * The ID of the delegated management subnet for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
     */
    delegatedManagementSubnetId: pulumi.Input<string>;
    /**
     * A list of TLS certificates that is used to authorize gossip from unmanaged Cassandra Data Center.
     */
    externalGossipCertificatePems?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of IP Addresses of the seed nodes in unmanaged the Cassandra Data Center which will be added to the seed node lists of all managed nodes.
     */
    externalSeedNodeIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of hours to wait between taking a backup of the Cassandra Cluster. Defaults to `24`.
     *
     * > **Note:** To disable this feature, set this property to `0`.
     */
    hoursBetweenBackups?: pulumi.Input<number>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.cosmosdb.CassandraClusterIdentity>;
    /**
     * The Azure Region where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The name which should be used for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Is the automatic repair enabled on the Cassandra Cluster? Defaults to `true`.
     */
    repairEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the Resource Group where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A mapping of tags assigned to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The version of Cassandra what the Cluster converges to run. Possible values are `3.11` and `4.0`. Defaults to `3.11`. Changing this forces a new Cassandra Cluster to be created.
     */
    version?: pulumi.Input<string>;
}
