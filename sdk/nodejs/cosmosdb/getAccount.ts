// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to access information about an existing CosmosDB (formally DocumentDB) Account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.cosmosdb.getAccount({
 *     name: "tfex-cosmosdb-account",
 *     resourceGroupName: "tfex-cosmosdb-account-rg",
 * });
 * export const cosmosdbAccountEndpoint = example.then(example => example.endpoint);
 * ```
 */
export function getAccount(args: GetAccountArgs, opts?: pulumi.InvokeOptions): Promise<GetAccountResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure:cosmosdb/getAccount:getAccount", {
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

/**
 * A collection of arguments for invoking getAccount.
 */
export interface GetAccountArgs {
    /**
     * Specifies the name of the CosmosDB Account.
     */
    name: string;
    /**
     * Specifies the name of the resource group in which the CosmosDB Account resides.
     */
    resourceGroupName: string;
}

/**
 * A collection of values returned by getAccount.
 */
export interface GetAccountResult {
    /**
     * Capabilities enabled on this Cosmos DB account.
     */
    readonly capabilities: outputs.cosmosdb.GetAccountCapability[];
    /**
     * A list of connection strings available for this CosmosDB account.
     */
    readonly connectionStrings: string[];
    readonly consistencyPolicies: outputs.cosmosdb.GetAccountConsistencyPolicy[];
    /**
     * If automatic failover is enabled for this CosmosDB Account.
     */
    readonly enableAutomaticFailover: boolean;
    /**
     * If Free Tier pricing option is enabled for this CosmosDB Account. You can have up to one free tier Azure Cosmos DB account per Azure subscription.
     */
    readonly enableFreeTier: boolean;
    /**
     * If multiple write locations are enabled for this Cosmos DB account.
     */
    readonly enableMultipleWriteLocations: boolean;
    /**
     * The endpoint used to connect to the CosmosDB account.
     */
    readonly endpoint: string;
    readonly geoLocations: outputs.cosmosdb.GetAccountGeoLocation[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The current IP Filter for this CosmosDB account
     */
    readonly ipRangeFilter: string;
    /**
     * If virtual network filtering is enabled for this Cosmos DB account.
     */
    readonly isVirtualNetworkFilterEnabled: boolean;
    /**
     * The Key Vault key URI for CMK encryption.
     */
    readonly keyVaultKeyId: string;
    /**
     * The Kind of the CosmosDB account.
     */
    readonly kind: string;
    /**
     * The name of the Azure region hosting replicated data.
     */
    readonly location: string;
    readonly name: string;
    /**
     * The Offer Type to used by this CosmosDB Account.
     */
    readonly offerType: string;
    /**
     * The primary key for the CosmosDB account.
     */
    readonly primaryKey: string;
    /**
     * The primary Mongodb connection string for the CosmosDB account.
     */
    readonly primaryMongodbConnectionString: string;
    /**
     * The primary read-only Key for the CosmosDB account.
     */
    readonly primaryReadonlyKey: string;
    /**
     * The primary readonly Mongodb connection string for the CosmosDB account.
     */
    readonly primaryReadonlyMongodbConnectionString: string;
    /**
     * The primary read-only SQL connection string for the CosmosDB account.
     */
    readonly primaryReadonlySqlConnectionString: string;
    /**
     * The primary SQL connection string for the CosmosDB Account.
     */
    readonly primarySqlConnectionString: string;
    /**
     * A list of read endpoints available for this CosmosDB account.
     */
    readonly readEndpoints: string[];
    readonly resourceGroupName: string;
    /**
     * The secondary key for the CosmosDB account.
     */
    readonly secondaryKey: string;
    /**
     * The secondary Mongodb connection string for the CosmosDB account.
     */
    readonly secondaryMongodbConnectionString: string;
    /**
     * The secondary read-only key for the CosmosDB account.
     */
    readonly secondaryReadonlyKey: string;
    /**
     * The secondary readonly Mongodb connection string for the CosmosDB account.
     */
    readonly secondaryReadonlyMongodbConnectionString: string;
    /**
     * The secondary read-only SQL connection string for the CosmosDB account.
     */
    readonly secondaryReadonlySqlConnectionString: string;
    /**
     * The secondary SQL connection string for the CosmosDB Account.
     */
    readonly secondarySqlConnectionString: string;
    /**
     * A mapping of tags assigned to the resource.
     */
    readonly tags: {[key: string]: string};
    /**
     * Subnets that are allowed to access this CosmosDB account.
     */
    readonly virtualNetworkRules: outputs.cosmosdb.GetAccountVirtualNetworkRule[];
    /**
     * A list of write endpoints available for this CosmosDB account.
     */
    readonly writeEndpoints: string[];
}
/**
 * Use this data source to access information about an existing CosmosDB (formally DocumentDB) Account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.cosmosdb.getAccount({
 *     name: "tfex-cosmosdb-account",
 *     resourceGroupName: "tfex-cosmosdb-account-rg",
 * });
 * export const cosmosdbAccountEndpoint = example.then(example => example.endpoint);
 * ```
 */
export function getAccountOutput(args: GetAccountOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAccountResult> {
    return pulumi.output(args).apply((a: any) => getAccount(a, opts))
}

/**
 * A collection of arguments for invoking getAccount.
 */
export interface GetAccountOutputArgs {
    /**
     * Specifies the name of the CosmosDB Account.
     */
    name: pulumi.Input<string>;
    /**
     * Specifies the name of the resource group in which the CosmosDB Account resides.
     */
    resourceGroupName: pulumi.Input<string>;
}
