// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Cosmos DB Mongo Role Definition.
 *
 * ## Import
 *
 * Cosmos DB Mongo Role Definitions can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:cosmosdb/mongoRoleDefinition:MongoRoleDefinition example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DocumentDB/databaseAccounts/account1/mongodbRoleDefinitions/dbname1.rolename1
 * ```
 */
export class MongoRoleDefinition extends pulumi.CustomResource {
    /**
     * Get an existing MongoRoleDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MongoRoleDefinitionState, opts?: pulumi.CustomResourceOptions): MongoRoleDefinition {
        return new MongoRoleDefinition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:cosmosdb/mongoRoleDefinition:MongoRoleDefinition';

    /**
     * Returns true if the given object is an instance of MongoRoleDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MongoRoleDefinition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MongoRoleDefinition.__pulumiType;
    }

    /**
     * The resource ID of the Mongo DB. Changing this forces a new resource to be created.
     */
    public readonly cosmosMongoDatabaseId!: pulumi.Output<string>;
    /**
     * A list of Mongo Roles which are inherited to the Mongo Role Definition.
     *
     * > **Note:** The role that needs to be inherited should exist in the Mongo DB of `cosmosMongoDatabaseId`.
     */
    public readonly inheritedRoleNames!: pulumi.Output<string[] | undefined>;
    /**
     * A `privilege` block as defined below.
     */
    public readonly privileges!: pulumi.Output<outputs.cosmosdb.MongoRoleDefinitionPrivilege[] | undefined>;
    /**
     * The user-friendly name for the Mongo Role Definition. It must be unique for the database account. Changing this forces a new resource to be created.
     */
    public readonly roleName!: pulumi.Output<string>;

    /**
     * Create a MongoRoleDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MongoRoleDefinitionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MongoRoleDefinitionArgs | MongoRoleDefinitionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MongoRoleDefinitionState | undefined;
            resourceInputs["cosmosMongoDatabaseId"] = state ? state.cosmosMongoDatabaseId : undefined;
            resourceInputs["inheritedRoleNames"] = state ? state.inheritedRoleNames : undefined;
            resourceInputs["privileges"] = state ? state.privileges : undefined;
            resourceInputs["roleName"] = state ? state.roleName : undefined;
        } else {
            const args = argsOrState as MongoRoleDefinitionArgs | undefined;
            if ((!args || args.cosmosMongoDatabaseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cosmosMongoDatabaseId'");
            }
            if ((!args || args.roleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleName'");
            }
            resourceInputs["cosmosMongoDatabaseId"] = args ? args.cosmosMongoDatabaseId : undefined;
            resourceInputs["inheritedRoleNames"] = args ? args.inheritedRoleNames : undefined;
            resourceInputs["privileges"] = args ? args.privileges : undefined;
            resourceInputs["roleName"] = args ? args.roleName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MongoRoleDefinition.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MongoRoleDefinition resources.
 */
export interface MongoRoleDefinitionState {
    /**
     * The resource ID of the Mongo DB. Changing this forces a new resource to be created.
     */
    cosmosMongoDatabaseId?: pulumi.Input<string>;
    /**
     * A list of Mongo Roles which are inherited to the Mongo Role Definition.
     *
     * > **Note:** The role that needs to be inherited should exist in the Mongo DB of `cosmosMongoDatabaseId`.
     */
    inheritedRoleNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A `privilege` block as defined below.
     */
    privileges?: pulumi.Input<pulumi.Input<inputs.cosmosdb.MongoRoleDefinitionPrivilege>[]>;
    /**
     * The user-friendly name for the Mongo Role Definition. It must be unique for the database account. Changing this forces a new resource to be created.
     */
    roleName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MongoRoleDefinition resource.
 */
export interface MongoRoleDefinitionArgs {
    /**
     * The resource ID of the Mongo DB. Changing this forces a new resource to be created.
     */
    cosmosMongoDatabaseId: pulumi.Input<string>;
    /**
     * A list of Mongo Roles which are inherited to the Mongo Role Definition.
     *
     * > **Note:** The role that needs to be inherited should exist in the Mongo DB of `cosmosMongoDatabaseId`.
     */
    inheritedRoleNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A `privilege` block as defined below.
     */
    privileges?: pulumi.Input<pulumi.Input<inputs.cosmosdb.MongoRoleDefinitionPrivilege>[]>;
    /**
     * The user-friendly name for the Mongo Role Definition. It must be unique for the database account. Changing this forces a new resource to be created.
     */
    roleName: pulumi.Input<string>;
}
