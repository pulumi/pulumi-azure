// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { CassandraClusterArgs, CassandraClusterState } from "./cassandraCluster";
export type CassandraCluster = import("./cassandraCluster").CassandraCluster;
export const CassandraCluster: typeof import("./cassandraCluster").CassandraCluster = null as any;
utilities.lazyLoad(exports, ["CassandraCluster"], () => require("./cassandraCluster"));

export { CassandraDatacenterArgs, CassandraDatacenterState } from "./cassandraDatacenter";
export type CassandraDatacenter = import("./cassandraDatacenter").CassandraDatacenter;
export const CassandraDatacenter: typeof import("./cassandraDatacenter").CassandraDatacenter = null as any;
utilities.lazyLoad(exports, ["CassandraDatacenter"], () => require("./cassandraDatacenter"));

export { CassandraKeyspaceArgs, CassandraKeyspaceState } from "./cassandraKeyspace";
export type CassandraKeyspace = import("./cassandraKeyspace").CassandraKeyspace;
export const CassandraKeyspace: typeof import("./cassandraKeyspace").CassandraKeyspace = null as any;
utilities.lazyLoad(exports, ["CassandraKeyspace"], () => require("./cassandraKeyspace"));

export { CassandraTableArgs, CassandraTableState } from "./cassandraTable";
export type CassandraTable = import("./cassandraTable").CassandraTable;
export const CassandraTable: typeof import("./cassandraTable").CassandraTable = null as any;
utilities.lazyLoad(exports, ["CassandraTable"], () => require("./cassandraTable"));

export { GetAccountArgs, GetAccountResult, GetAccountOutputArgs } from "./getAccount";
export const getAccount: typeof import("./getAccount").getAccount = null as any;
export const getAccountOutput: typeof import("./getAccount").getAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAccount","getAccountOutput"], () => require("./getAccount"));

export { GetMongoDatabaseArgs, GetMongoDatabaseResult, GetMongoDatabaseOutputArgs } from "./getMongoDatabase";
export const getMongoDatabase: typeof import("./getMongoDatabase").getMongoDatabase = null as any;
export const getMongoDatabaseOutput: typeof import("./getMongoDatabase").getMongoDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getMongoDatabase","getMongoDatabaseOutput"], () => require("./getMongoDatabase"));

export { GetRestorableDatabaseAccountsArgs, GetRestorableDatabaseAccountsResult, GetRestorableDatabaseAccountsOutputArgs } from "./getRestorableDatabaseAccounts";
export const getRestorableDatabaseAccounts: typeof import("./getRestorableDatabaseAccounts").getRestorableDatabaseAccounts = null as any;
export const getRestorableDatabaseAccountsOutput: typeof import("./getRestorableDatabaseAccounts").getRestorableDatabaseAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getRestorableDatabaseAccounts","getRestorableDatabaseAccountsOutput"], () => require("./getRestorableDatabaseAccounts"));

export { GetSqlDatabaseArgs, GetSqlDatabaseResult, GetSqlDatabaseOutputArgs } from "./getSqlDatabase";
export const getSqlDatabase: typeof import("./getSqlDatabase").getSqlDatabase = null as any;
export const getSqlDatabaseOutput: typeof import("./getSqlDatabase").getSqlDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getSqlDatabase","getSqlDatabaseOutput"], () => require("./getSqlDatabase"));

export { GetSqlRoleDefinitionArgs, GetSqlRoleDefinitionResult, GetSqlRoleDefinitionOutputArgs } from "./getSqlRoleDefinition";
export const getSqlRoleDefinition: typeof import("./getSqlRoleDefinition").getSqlRoleDefinition = null as any;
export const getSqlRoleDefinitionOutput: typeof import("./getSqlRoleDefinition").getSqlRoleDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getSqlRoleDefinition","getSqlRoleDefinitionOutput"], () => require("./getSqlRoleDefinition"));

export { GremlinDatabaseArgs, GremlinDatabaseState } from "./gremlinDatabase";
export type GremlinDatabase = import("./gremlinDatabase").GremlinDatabase;
export const GremlinDatabase: typeof import("./gremlinDatabase").GremlinDatabase = null as any;
utilities.lazyLoad(exports, ["GremlinDatabase"], () => require("./gremlinDatabase"));

export { GremlinGraphArgs, GremlinGraphState } from "./gremlinGraph";
export type GremlinGraph = import("./gremlinGraph").GremlinGraph;
export const GremlinGraph: typeof import("./gremlinGraph").GremlinGraph = null as any;
utilities.lazyLoad(exports, ["GremlinGraph"], () => require("./gremlinGraph"));

export { MongoCollectionArgs, MongoCollectionState } from "./mongoCollection";
export type MongoCollection = import("./mongoCollection").MongoCollection;
export const MongoCollection: typeof import("./mongoCollection").MongoCollection = null as any;
utilities.lazyLoad(exports, ["MongoCollection"], () => require("./mongoCollection"));

export { MongoDatabaseArgs, MongoDatabaseState } from "./mongoDatabase";
export type MongoDatabase = import("./mongoDatabase").MongoDatabase;
export const MongoDatabase: typeof import("./mongoDatabase").MongoDatabase = null as any;
utilities.lazyLoad(exports, ["MongoDatabase"], () => require("./mongoDatabase"));

export { MongoRoleDefinitionArgs, MongoRoleDefinitionState } from "./mongoRoleDefinition";
export type MongoRoleDefinition = import("./mongoRoleDefinition").MongoRoleDefinition;
export const MongoRoleDefinition: typeof import("./mongoRoleDefinition").MongoRoleDefinition = null as any;
utilities.lazyLoad(exports, ["MongoRoleDefinition"], () => require("./mongoRoleDefinition"));

export { MongoUserDefinitionArgs, MongoUserDefinitionState } from "./mongoUserDefinition";
export type MongoUserDefinition = import("./mongoUserDefinition").MongoUserDefinition;
export const MongoUserDefinition: typeof import("./mongoUserDefinition").MongoUserDefinition = null as any;
utilities.lazyLoad(exports, ["MongoUserDefinition"], () => require("./mongoUserDefinition"));

export { NotebookWorkspaceArgs, NotebookWorkspaceState } from "./notebookWorkspace";
export type NotebookWorkspace = import("./notebookWorkspace").NotebookWorkspace;
export const NotebookWorkspace: typeof import("./notebookWorkspace").NotebookWorkspace = null as any;
utilities.lazyLoad(exports, ["NotebookWorkspace"], () => require("./notebookWorkspace"));

export { PostgresqlClusterArgs, PostgresqlClusterState } from "./postgresqlCluster";
export type PostgresqlCluster = import("./postgresqlCluster").PostgresqlCluster;
export const PostgresqlCluster: typeof import("./postgresqlCluster").PostgresqlCluster = null as any;
utilities.lazyLoad(exports, ["PostgresqlCluster"], () => require("./postgresqlCluster"));

export { PostgresqlCoordinatorConfigurationArgs, PostgresqlCoordinatorConfigurationState } from "./postgresqlCoordinatorConfiguration";
export type PostgresqlCoordinatorConfiguration = import("./postgresqlCoordinatorConfiguration").PostgresqlCoordinatorConfiguration;
export const PostgresqlCoordinatorConfiguration: typeof import("./postgresqlCoordinatorConfiguration").PostgresqlCoordinatorConfiguration = null as any;
utilities.lazyLoad(exports, ["PostgresqlCoordinatorConfiguration"], () => require("./postgresqlCoordinatorConfiguration"));

export { PostgresqlFirewallRuleArgs, PostgresqlFirewallRuleState } from "./postgresqlFirewallRule";
export type PostgresqlFirewallRule = import("./postgresqlFirewallRule").PostgresqlFirewallRule;
export const PostgresqlFirewallRule: typeof import("./postgresqlFirewallRule").PostgresqlFirewallRule = null as any;
utilities.lazyLoad(exports, ["PostgresqlFirewallRule"], () => require("./postgresqlFirewallRule"));

export { PostgresqlNodeConfigurationArgs, PostgresqlNodeConfigurationState } from "./postgresqlNodeConfiguration";
export type PostgresqlNodeConfiguration = import("./postgresqlNodeConfiguration").PostgresqlNodeConfiguration;
export const PostgresqlNodeConfiguration: typeof import("./postgresqlNodeConfiguration").PostgresqlNodeConfiguration = null as any;
utilities.lazyLoad(exports, ["PostgresqlNodeConfiguration"], () => require("./postgresqlNodeConfiguration"));

export { PostgresqlRoleArgs, PostgresqlRoleState } from "./postgresqlRole";
export type PostgresqlRole = import("./postgresqlRole").PostgresqlRole;
export const PostgresqlRole: typeof import("./postgresqlRole").PostgresqlRole = null as any;
utilities.lazyLoad(exports, ["PostgresqlRole"], () => require("./postgresqlRole"));

export { SqlContainerArgs, SqlContainerState } from "./sqlContainer";
export type SqlContainer = import("./sqlContainer").SqlContainer;
export const SqlContainer: typeof import("./sqlContainer").SqlContainer = null as any;
utilities.lazyLoad(exports, ["SqlContainer"], () => require("./sqlContainer"));

export { SqlDatabaseArgs, SqlDatabaseState } from "./sqlDatabase";
export type SqlDatabase = import("./sqlDatabase").SqlDatabase;
export const SqlDatabase: typeof import("./sqlDatabase").SqlDatabase = null as any;
utilities.lazyLoad(exports, ["SqlDatabase"], () => require("./sqlDatabase"));

export { SqlDedicatedGatewayArgs, SqlDedicatedGatewayState } from "./sqlDedicatedGateway";
export type SqlDedicatedGateway = import("./sqlDedicatedGateway").SqlDedicatedGateway;
export const SqlDedicatedGateway: typeof import("./sqlDedicatedGateway").SqlDedicatedGateway = null as any;
utilities.lazyLoad(exports, ["SqlDedicatedGateway"], () => require("./sqlDedicatedGateway"));

export { SqlFunctionArgs, SqlFunctionState } from "./sqlFunction";
export type SqlFunction = import("./sqlFunction").SqlFunction;
export const SqlFunction: typeof import("./sqlFunction").SqlFunction = null as any;
utilities.lazyLoad(exports, ["SqlFunction"], () => require("./sqlFunction"));

export { SqlRoleAssignmentArgs, SqlRoleAssignmentState } from "./sqlRoleAssignment";
export type SqlRoleAssignment = import("./sqlRoleAssignment").SqlRoleAssignment;
export const SqlRoleAssignment: typeof import("./sqlRoleAssignment").SqlRoleAssignment = null as any;
utilities.lazyLoad(exports, ["SqlRoleAssignment"], () => require("./sqlRoleAssignment"));

export { SqlRoleDefinitionArgs, SqlRoleDefinitionState } from "./sqlRoleDefinition";
export type SqlRoleDefinition = import("./sqlRoleDefinition").SqlRoleDefinition;
export const SqlRoleDefinition: typeof import("./sqlRoleDefinition").SqlRoleDefinition = null as any;
utilities.lazyLoad(exports, ["SqlRoleDefinition"], () => require("./sqlRoleDefinition"));

export { SqlStoredProcedureArgs, SqlStoredProcedureState } from "./sqlStoredProcedure";
export type SqlStoredProcedure = import("./sqlStoredProcedure").SqlStoredProcedure;
export const SqlStoredProcedure: typeof import("./sqlStoredProcedure").SqlStoredProcedure = null as any;
utilities.lazyLoad(exports, ["SqlStoredProcedure"], () => require("./sqlStoredProcedure"));

export { SqlTriggerArgs, SqlTriggerState } from "./sqlTrigger";
export type SqlTrigger = import("./sqlTrigger").SqlTrigger;
export const SqlTrigger: typeof import("./sqlTrigger").SqlTrigger = null as any;
utilities.lazyLoad(exports, ["SqlTrigger"], () => require("./sqlTrigger"));

export { TableArgs, TableState } from "./table";
export type Table = import("./table").Table;
export const Table: typeof import("./table").Table = null as any;
utilities.lazyLoad(exports, ["Table"], () => require("./table"));

export * from "./zMixins";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure:cosmosdb/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "azure:cosmosdb/cassandraCluster:CassandraCluster":
                return new CassandraCluster(name, <any>undefined, { urn })
            case "azure:cosmosdb/cassandraDatacenter:CassandraDatacenter":
                return new CassandraDatacenter(name, <any>undefined, { urn })
            case "azure:cosmosdb/cassandraKeyspace:CassandraKeyspace":
                return new CassandraKeyspace(name, <any>undefined, { urn })
            case "azure:cosmosdb/cassandraTable:CassandraTable":
                return new CassandraTable(name, <any>undefined, { urn })
            case "azure:cosmosdb/gremlinDatabase:GremlinDatabase":
                return new GremlinDatabase(name, <any>undefined, { urn })
            case "azure:cosmosdb/gremlinGraph:GremlinGraph":
                return new GremlinGraph(name, <any>undefined, { urn })
            case "azure:cosmosdb/mongoCollection:MongoCollection":
                return new MongoCollection(name, <any>undefined, { urn })
            case "azure:cosmosdb/mongoDatabase:MongoDatabase":
                return new MongoDatabase(name, <any>undefined, { urn })
            case "azure:cosmosdb/mongoRoleDefinition:MongoRoleDefinition":
                return new MongoRoleDefinition(name, <any>undefined, { urn })
            case "azure:cosmosdb/mongoUserDefinition:MongoUserDefinition":
                return new MongoUserDefinition(name, <any>undefined, { urn })
            case "azure:cosmosdb/notebookWorkspace:NotebookWorkspace":
                return new NotebookWorkspace(name, <any>undefined, { urn })
            case "azure:cosmosdb/postgresqlCluster:PostgresqlCluster":
                return new PostgresqlCluster(name, <any>undefined, { urn })
            case "azure:cosmosdb/postgresqlCoordinatorConfiguration:PostgresqlCoordinatorConfiguration":
                return new PostgresqlCoordinatorConfiguration(name, <any>undefined, { urn })
            case "azure:cosmosdb/postgresqlFirewallRule:PostgresqlFirewallRule":
                return new PostgresqlFirewallRule(name, <any>undefined, { urn })
            case "azure:cosmosdb/postgresqlNodeConfiguration:PostgresqlNodeConfiguration":
                return new PostgresqlNodeConfiguration(name, <any>undefined, { urn })
            case "azure:cosmosdb/postgresqlRole:PostgresqlRole":
                return new PostgresqlRole(name, <any>undefined, { urn })
            case "azure:cosmosdb/sqlContainer:SqlContainer":
                return new SqlContainer(name, <any>undefined, { urn })
            case "azure:cosmosdb/sqlDatabase:SqlDatabase":
                return new SqlDatabase(name, <any>undefined, { urn })
            case "azure:cosmosdb/sqlDedicatedGateway:SqlDedicatedGateway":
                return new SqlDedicatedGateway(name, <any>undefined, { urn })
            case "azure:cosmosdb/sqlFunction:SqlFunction":
                return new SqlFunction(name, <any>undefined, { urn })
            case "azure:cosmosdb/sqlRoleAssignment:SqlRoleAssignment":
                return new SqlRoleAssignment(name, <any>undefined, { urn })
            case "azure:cosmosdb/sqlRoleDefinition:SqlRoleDefinition":
                return new SqlRoleDefinition(name, <any>undefined, { urn })
            case "azure:cosmosdb/sqlStoredProcedure:SqlStoredProcedure":
                return new SqlStoredProcedure(name, <any>undefined, { urn })
            case "azure:cosmosdb/sqlTrigger:SqlTrigger":
                return new SqlTrigger(name, <any>undefined, { urn })
            case "azure:cosmosdb/table:Table":
                return new Table(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "cosmosdb/account", _module)
pulumi.runtime.registerResourceModule("azure", "cosmosdb/cassandraCluster", _module)
pulumi.runtime.registerResourceModule("azure", "cosmosdb/cassandraDatacenter", _module)
pulumi.runtime.registerResourceModule("azure", "cosmosdb/cassandraKeyspace", _module)
pulumi.runtime.registerResourceModule("azure", "cosmosdb/cassandraTable", _module)
pulumi.runtime.registerResourceModule("azure", "cosmosdb/gremlinDatabase", _module)
pulumi.runtime.registerResourceModule("azure", "cosmosdb/gremlinGraph", _module)
pulumi.runtime.registerResourceModule("azure", "cosmosdb/mongoCollection", _module)
pulumi.runtime.registerResourceModule("azure", "cosmosdb/mongoDatabase", _module)
pulumi.runtime.registerResourceModule("azure", "cosmosdb/mongoRoleDefinition", _module)
pulumi.runtime.registerResourceModule("azure", "cosmosdb/mongoUserDefinition", _module)
pulumi.runtime.registerResourceModule("azure", "cosmosdb/notebookWorkspace", _module)
pulumi.runtime.registerResourceModule("azure", "cosmosdb/postgresqlCluster", _module)
pulumi.runtime.registerResourceModule("azure", "cosmosdb/postgresqlCoordinatorConfiguration", _module)
pulumi.runtime.registerResourceModule("azure", "cosmosdb/postgresqlFirewallRule", _module)
pulumi.runtime.registerResourceModule("azure", "cosmosdb/postgresqlNodeConfiguration", _module)
pulumi.runtime.registerResourceModule("azure", "cosmosdb/postgresqlRole", _module)
pulumi.runtime.registerResourceModule("azure", "cosmosdb/sqlContainer", _module)
pulumi.runtime.registerResourceModule("azure", "cosmosdb/sqlDatabase", _module)
pulumi.runtime.registerResourceModule("azure", "cosmosdb/sqlDedicatedGateway", _module)
pulumi.runtime.registerResourceModule("azure", "cosmosdb/sqlFunction", _module)
pulumi.runtime.registerResourceModule("azure", "cosmosdb/sqlRoleAssignment", _module)
pulumi.runtime.registerResourceModule("azure", "cosmosdb/sqlRoleDefinition", _module)
pulumi.runtime.registerResourceModule("azure", "cosmosdb/sqlStoredProcedure", _module)
pulumi.runtime.registerResourceModule("azure", "cosmosdb/sqlTrigger", _module)
pulumi.runtime.registerResourceModule("azure", "cosmosdb/table", _module)
