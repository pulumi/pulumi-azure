// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a MongoDB Cluster using vCore Architecture.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-rg",
 *     location: "East US",
 * });
 * const exampleMongoCluster = new azure.cosmosdb.MongoCluster("example", {
 *     name: "example-mc",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     administratorUsername: "adminTerraform",
 *     administratorPassword: "QAZwsx123",
 *     shardCount: 1,
 *     computeTier: "Free",
 *     highAvailabilityMode: "Disabled",
 *     storageSizeInGb: 32,
 * });
 * ```
 *
 * ### Preview Feature GeoReplicas)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-rg",
 *     location: "East US",
 * });
 * const exampleMongoCluster = new azure.cosmosdb.MongoCluster("example", {
 *     name: "example-mc",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     administratorUsername: "adminTerraform",
 *     administratorPassword: "QAZwsx123",
 *     shardCount: 1,
 *     computeTier: "M30",
 *     highAvailabilityMode: "ZoneRedundantPreferred",
 *     storageSizeInGb: 64,
 *     previewFeatures: ["GeoReplicas"],
 * });
 * const exampleGeoReplica = new azure.cosmosdb.MongoCluster("example_geo_replica", {
 *     name: "example-mc-geo",
 *     resourceGroupName: example.name,
 *     location: "Central US",
 *     sourceServerId: exampleMongoCluster.id,
 *     sourceLocation: exampleMongoCluster.location,
 *     createMode: "GeoReplica",
 * });
 * ```
 *
 * ## Import
 *
 * MongoDB Clusters can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:cosmosdb/mongoCluster:MongoCluster example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DocumentDB/mongoClusters/myMongoCluster
 * ```
 */
export class MongoCluster extends pulumi.CustomResource {
    /**
     * Get an existing MongoCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MongoClusterState, opts?: pulumi.CustomResourceOptions): MongoCluster {
        return new MongoCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:cosmosdb/mongoCluster:MongoCluster';

    /**
     * Returns true if the given object is an instance of MongoCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MongoCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MongoCluster.__pulumiType;
    }

    /**
     * The Password associated with the `administratorUsername` for the MongoDB Cluster.
     */
    public readonly administratorPassword!: pulumi.Output<string | undefined>;
    /**
     * The administrator username of the MongoDB Cluster. Changing this forces a new resource to be created.
     */
    public readonly administratorUsername!: pulumi.Output<string | undefined>;
    /**
     * The compute tier to assign to the MongoDB Cluster. Possible values are `Free`, `M10`, `M20`, `M25`, `M30`, `M40`, `M50`, `M60`, `M80`, and `M200`.
     */
    public readonly computeTier!: pulumi.Output<string | undefined>;
    /**
     * The list of `connectionStrings` blocks as defined below.
     */
    public /*out*/ readonly connectionStrings!: pulumi.Output<outputs.cosmosdb.MongoClusterConnectionString[]>;
    /**
     * The creation mode for the MongoDB Cluster. Possibles values are `Default` and `GeoReplica`. Defaults to `Default`. Changing this forces a new resource to be created.
     */
    public readonly createMode!: pulumi.Output<string | undefined>;
    /**
     * The high availability mode for the MongoDB Cluster. Possibles values are `Disabled` and `ZoneRedundantPreferred`.
     */
    public readonly highAvailabilityMode!: pulumi.Output<string | undefined>;
    /**
     * The supported Azure location where the MongoDB Cluster exists. Changing this forces a new resource to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name which should be used for the MongoDB Cluster. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The preview features that can be enabled on the MongoDB Cluster. Changing this forces a new resource to be created.
     */
    public readonly previewFeatures!: pulumi.Output<string[] | undefined>;
    /**
     * The Public Network Access setting for the MongoDB Cluster. Possibles values are `Disabled` and `Enabled`. Defaults to `Enabled`.
     */
    public readonly publicNetworkAccess!: pulumi.Output<string | undefined>;
    /**
     * The name of the resource group in which to create the MongoDB Cluster. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * The Number of shards to provision on the MongoDB Cluster. Changing this forces a new resource to be created.
     */
    public readonly shardCount!: pulumi.Output<number | undefined>;
    /**
     * The location of the source MongoDB Cluster. Changing this forces a new resource to be created.
     */
    public readonly sourceLocation!: pulumi.Output<string | undefined>;
    /**
     * The ID of the replication source MongoDB Cluster. Changing this forces a new resource to be created.
     */
    public readonly sourceServerId!: pulumi.Output<string | undefined>;
    /**
     * The size of the data disk space for the MongoDB Cluster.
     */
    public readonly storageSizeInGb!: pulumi.Output<number | undefined>;
    /**
     * A mapping of tags to assign to the MongoDB Cluster.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The version for the MongoDB Cluster. Possibles values are `5.0`, `6.0` and `7.0`.
     */
    public readonly version!: pulumi.Output<string | undefined>;

    /**
     * Create a MongoCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MongoClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MongoClusterArgs | MongoClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MongoClusterState | undefined;
            resourceInputs["administratorPassword"] = state ? state.administratorPassword : undefined;
            resourceInputs["administratorUsername"] = state ? state.administratorUsername : undefined;
            resourceInputs["computeTier"] = state ? state.computeTier : undefined;
            resourceInputs["connectionStrings"] = state ? state.connectionStrings : undefined;
            resourceInputs["createMode"] = state ? state.createMode : undefined;
            resourceInputs["highAvailabilityMode"] = state ? state.highAvailabilityMode : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["previewFeatures"] = state ? state.previewFeatures : undefined;
            resourceInputs["publicNetworkAccess"] = state ? state.publicNetworkAccess : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["shardCount"] = state ? state.shardCount : undefined;
            resourceInputs["sourceLocation"] = state ? state.sourceLocation : undefined;
            resourceInputs["sourceServerId"] = state ? state.sourceServerId : undefined;
            resourceInputs["storageSizeInGb"] = state ? state.storageSizeInGb : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as MongoClusterArgs | undefined;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["administratorPassword"] = args?.administratorPassword ? pulumi.secret(args.administratorPassword) : undefined;
            resourceInputs["administratorUsername"] = args ? args.administratorUsername : undefined;
            resourceInputs["computeTier"] = args ? args.computeTier : undefined;
            resourceInputs["createMode"] = args ? args.createMode : undefined;
            resourceInputs["highAvailabilityMode"] = args ? args.highAvailabilityMode : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["previewFeatures"] = args ? args.previewFeatures : undefined;
            resourceInputs["publicNetworkAccess"] = args ? args.publicNetworkAccess : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["shardCount"] = args ? args.shardCount : undefined;
            resourceInputs["sourceLocation"] = args ? args.sourceLocation : undefined;
            resourceInputs["sourceServerId"] = args ? args.sourceServerId : undefined;
            resourceInputs["storageSizeInGb"] = args ? args.storageSizeInGb : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["connectionStrings"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["administratorPassword", "connectionStrings"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MongoCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MongoCluster resources.
 */
export interface MongoClusterState {
    /**
     * The Password associated with the `administratorUsername` for the MongoDB Cluster.
     */
    administratorPassword?: pulumi.Input<string>;
    /**
     * The administrator username of the MongoDB Cluster. Changing this forces a new resource to be created.
     */
    administratorUsername?: pulumi.Input<string>;
    /**
     * The compute tier to assign to the MongoDB Cluster. Possible values are `Free`, `M10`, `M20`, `M25`, `M30`, `M40`, `M50`, `M60`, `M80`, and `M200`.
     */
    computeTier?: pulumi.Input<string>;
    /**
     * The list of `connectionStrings` blocks as defined below.
     */
    connectionStrings?: pulumi.Input<pulumi.Input<inputs.cosmosdb.MongoClusterConnectionString>[]>;
    /**
     * The creation mode for the MongoDB Cluster. Possibles values are `Default` and `GeoReplica`. Defaults to `Default`. Changing this forces a new resource to be created.
     */
    createMode?: pulumi.Input<string>;
    /**
     * The high availability mode for the MongoDB Cluster. Possibles values are `Disabled` and `ZoneRedundantPreferred`.
     */
    highAvailabilityMode?: pulumi.Input<string>;
    /**
     * The supported Azure location where the MongoDB Cluster exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The name which should be used for the MongoDB Cluster. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The preview features that can be enabled on the MongoDB Cluster. Changing this forces a new resource to be created.
     */
    previewFeatures?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Public Network Access setting for the MongoDB Cluster. Possibles values are `Disabled` and `Enabled`. Defaults to `Enabled`.
     */
    publicNetworkAccess?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the MongoDB Cluster. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The Number of shards to provision on the MongoDB Cluster. Changing this forces a new resource to be created.
     */
    shardCount?: pulumi.Input<number>;
    /**
     * The location of the source MongoDB Cluster. Changing this forces a new resource to be created.
     */
    sourceLocation?: pulumi.Input<string>;
    /**
     * The ID of the replication source MongoDB Cluster. Changing this forces a new resource to be created.
     */
    sourceServerId?: pulumi.Input<string>;
    /**
     * The size of the data disk space for the MongoDB Cluster.
     */
    storageSizeInGb?: pulumi.Input<number>;
    /**
     * A mapping of tags to assign to the MongoDB Cluster.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The version for the MongoDB Cluster. Possibles values are `5.0`, `6.0` and `7.0`.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MongoCluster resource.
 */
export interface MongoClusterArgs {
    /**
     * The Password associated with the `administratorUsername` for the MongoDB Cluster.
     */
    administratorPassword?: pulumi.Input<string>;
    /**
     * The administrator username of the MongoDB Cluster. Changing this forces a new resource to be created.
     */
    administratorUsername?: pulumi.Input<string>;
    /**
     * The compute tier to assign to the MongoDB Cluster. Possible values are `Free`, `M10`, `M20`, `M25`, `M30`, `M40`, `M50`, `M60`, `M80`, and `M200`.
     */
    computeTier?: pulumi.Input<string>;
    /**
     * The creation mode for the MongoDB Cluster. Possibles values are `Default` and `GeoReplica`. Defaults to `Default`. Changing this forces a new resource to be created.
     */
    createMode?: pulumi.Input<string>;
    /**
     * The high availability mode for the MongoDB Cluster. Possibles values are `Disabled` and `ZoneRedundantPreferred`.
     */
    highAvailabilityMode?: pulumi.Input<string>;
    /**
     * The supported Azure location where the MongoDB Cluster exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The name which should be used for the MongoDB Cluster. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The preview features that can be enabled on the MongoDB Cluster. Changing this forces a new resource to be created.
     */
    previewFeatures?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Public Network Access setting for the MongoDB Cluster. Possibles values are `Disabled` and `Enabled`. Defaults to `Enabled`.
     */
    publicNetworkAccess?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the MongoDB Cluster. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The Number of shards to provision on the MongoDB Cluster. Changing this forces a new resource to be created.
     */
    shardCount?: pulumi.Input<number>;
    /**
     * The location of the source MongoDB Cluster. Changing this forces a new resource to be created.
     */
    sourceLocation?: pulumi.Input<string>;
    /**
     * The ID of the replication source MongoDB Cluster. Changing this forces a new resource to be created.
     */
    sourceServerId?: pulumi.Input<string>;
    /**
     * The size of the data disk space for the MongoDB Cluster.
     */
    storageSizeInGb?: pulumi.Input<number>;
    /**
     * A mapping of tags to assign to the MongoDB Cluster.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The version for the MongoDB Cluster. Possibles values are `5.0`, `6.0` and `7.0`.
     */
    version?: pulumi.Input<string>;
}
