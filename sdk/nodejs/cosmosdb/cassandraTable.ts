// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Cassandra Table within a Cosmos DB Cassandra Keyspace.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "tflex-cosmosdb-account-rg",
 *     location: "West Europe",
 * });
 * const exampleAccount = new azure.cosmosdb.Account("example", {
 *     name: "tfex-cosmosdb-account",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     offerType: "Standard",
 *     capabilities: [{
 *         name: "EnableCassandra",
 *     }],
 *     consistencyPolicy: {
 *         consistencyLevel: "Strong",
 *     },
 *     geoLocations: [{
 *         location: example.location,
 *         failoverPriority: 0,
 *     }],
 * });
 * const exampleCassandraKeyspace = new azure.cosmosdb.CassandraKeyspace("example", {
 *     name: "tfex-cosmos-cassandra-keyspace",
 *     resourceGroupName: exampleAccount.resourceGroupName,
 *     accountName: exampleAccount.name,
 *     throughput: 400,
 * });
 * const exampleCassandraTable = new azure.cosmosdb.CassandraTable("example", {
 *     name: "testtable",
 *     cassandraKeyspaceId: exampleCassandraKeyspace.id,
 *     schema: {
 *         columns: [
 *             {
 *                 name: "test1",
 *                 type: "ascii",
 *             },
 *             {
 *                 name: "test2",
 *                 type: "int",
 *             },
 *         ],
 *         partitionKeys: [{
 *             name: "test1",
 *         }],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Cosmos Cassandra Table can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:cosmosdb/cassandraTable:CassandraTable ks1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/account1/cassandraKeyspaces/ks1/tables/table1
 * ```
 */
export class CassandraTable extends pulumi.CustomResource {
    /**
     * Get an existing CassandraTable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CassandraTableState, opts?: pulumi.CustomResourceOptions): CassandraTable {
        return new CassandraTable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:cosmosdb/cassandraTable:CassandraTable';

    /**
     * Returns true if the given object is an instance of CassandraTable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CassandraTable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CassandraTable.__pulumiType;
    }

    /**
     * Time to live of the Analytical Storage. Possible values are between `-1` and `2147483647` except `0`. `-1` means the Analytical Storage never expires. Changing this forces a new resource to be created.
     *
     * > **Note:** throughput has a maximum value of `1000000` unless a higher limit is requested via Azure Support
     */
    declare public readonly analyticalStorageTtl: pulumi.Output<number | undefined>;
    declare public readonly autoscaleSettings: pulumi.Output<outputs.cosmosdb.CassandraTableAutoscaleSettings | undefined>;
    /**
     * The ID of the Cosmos DB Cassandra Keyspace to create the table within. Changing this forces a new resource to be created.
     */
    declare public readonly cassandraKeyspaceId: pulumi.Output<string>;
    /**
     * Time to live of the Cosmos DB Cassandra table. Possible values are at least `-1`. `-1` means the Cassandra table never expires.
     */
    declare public readonly defaultTtl: pulumi.Output<number | undefined>;
    /**
     * Specifies the name of the Cosmos DB Cassandra Table. Changing this forces a new resource to be created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * A `schema` block as defined below.
     */
    declare public readonly schema: pulumi.Output<outputs.cosmosdb.CassandraTableSchema>;
    declare public readonly throughput: pulumi.Output<number>;

    /**
     * Create a CassandraTable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CassandraTableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CassandraTableArgs | CassandraTableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CassandraTableState | undefined;
            resourceInputs["analyticalStorageTtl"] = state?.analyticalStorageTtl;
            resourceInputs["autoscaleSettings"] = state?.autoscaleSettings;
            resourceInputs["cassandraKeyspaceId"] = state?.cassandraKeyspaceId;
            resourceInputs["defaultTtl"] = state?.defaultTtl;
            resourceInputs["name"] = state?.name;
            resourceInputs["schema"] = state?.schema;
            resourceInputs["throughput"] = state?.throughput;
        } else {
            const args = argsOrState as CassandraTableArgs | undefined;
            if (args?.cassandraKeyspaceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'cassandraKeyspaceId'");
            }
            if (args?.schema === undefined && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            resourceInputs["analyticalStorageTtl"] = args?.analyticalStorageTtl;
            resourceInputs["autoscaleSettings"] = args?.autoscaleSettings;
            resourceInputs["cassandraKeyspaceId"] = args?.cassandraKeyspaceId;
            resourceInputs["defaultTtl"] = args?.defaultTtl;
            resourceInputs["name"] = args?.name;
            resourceInputs["schema"] = args?.schema;
            resourceInputs["throughput"] = args?.throughput;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CassandraTable.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CassandraTable resources.
 */
export interface CassandraTableState {
    /**
     * Time to live of the Analytical Storage. Possible values are between `-1` and `2147483647` except `0`. `-1` means the Analytical Storage never expires. Changing this forces a new resource to be created.
     *
     * > **Note:** throughput has a maximum value of `1000000` unless a higher limit is requested via Azure Support
     */
    analyticalStorageTtl?: pulumi.Input<number>;
    autoscaleSettings?: pulumi.Input<inputs.cosmosdb.CassandraTableAutoscaleSettings>;
    /**
     * The ID of the Cosmos DB Cassandra Keyspace to create the table within. Changing this forces a new resource to be created.
     */
    cassandraKeyspaceId?: pulumi.Input<string>;
    /**
     * Time to live of the Cosmos DB Cassandra table. Possible values are at least `-1`. `-1` means the Cassandra table never expires.
     */
    defaultTtl?: pulumi.Input<number>;
    /**
     * Specifies the name of the Cosmos DB Cassandra Table. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A `schema` block as defined below.
     */
    schema?: pulumi.Input<inputs.cosmosdb.CassandraTableSchema>;
    throughput?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CassandraTable resource.
 */
export interface CassandraTableArgs {
    /**
     * Time to live of the Analytical Storage. Possible values are between `-1` and `2147483647` except `0`. `-1` means the Analytical Storage never expires. Changing this forces a new resource to be created.
     *
     * > **Note:** throughput has a maximum value of `1000000` unless a higher limit is requested via Azure Support
     */
    analyticalStorageTtl?: pulumi.Input<number>;
    autoscaleSettings?: pulumi.Input<inputs.cosmosdb.CassandraTableAutoscaleSettings>;
    /**
     * The ID of the Cosmos DB Cassandra Keyspace to create the table within. Changing this forces a new resource to be created.
     */
    cassandraKeyspaceId: pulumi.Input<string>;
    /**
     * Time to live of the Cosmos DB Cassandra table. Possible values are at least `-1`. `-1` means the Cassandra table never expires.
     */
    defaultTtl?: pulumi.Input<number>;
    /**
     * Specifies the name of the Cosmos DB Cassandra Table. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A `schema` block as defined below.
     */
    schema: pulumi.Input<inputs.cosmosdb.CassandraTableSchema>;
    throughput?: pulumi.Input<number>;
}
