// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Cassandra Datacenter.
 *
 * > **NOTE:** In order for the `Azure Managed Instances for Apache Cassandra` to work properly the product requires the `Azure Cosmos DB` Application ID to be present and working in your tenant. If the `Azure Cosmos DB` Application ID is missing in your environment you will need to have an administrator of your tenant run the following command to add the `Azure Cosmos DB` Application ID to your tenant:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as azuread from "@pulumi/azuread";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("exampleVirtualNetwork", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     addressSpaces: ["10.0.0.0/16"],
 * });
 * const exampleSubnet = new azure.network.Subnet("exampleSubnet", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.1.0/24"],
 * });
 * const exampleServicePrincipal = azuread.getServicePrincipal({
 *     displayName: "Azure Cosmos DB",
 * });
 * const exampleAssignment = new azure.authorization.Assignment("exampleAssignment", {
 *     scope: exampleVirtualNetwork.id,
 *     roleDefinitionName: "Network Contributor",
 *     principalId: exampleServicePrincipal.then(exampleServicePrincipal => exampleServicePrincipal.objectId),
 * });
 * const exampleCassandraCluster = new azure.cosmosdb.CassandraCluster("exampleCassandraCluster", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     delegatedManagementSubnetId: exampleSubnet.id,
 *     defaultAdminPassword: "Password1234",
 * }, {
 *     dependsOn: [exampleAssignment],
 * });
 * const exampleCassandraDatacenter = new azure.cosmosdb.CassandraDatacenter("exampleCassandraDatacenter", {
 *     location: exampleCassandraCluster.location,
 *     cassandraClusterId: exampleCassandraCluster.id,
 *     delegatedManagementSubnetId: exampleSubnet.id,
 *     nodeCount: 3,
 *     diskCount: 4,
 *     skuName: "Standard_DS14_v2",
 *     availabilityZonesEnabled: false,
 * });
 * ```
 *
 * ## Import
 *
 * Cassandra Datacenters can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:cosmosdb/cassandraDatacenter:CassandraDatacenter example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DocumentDB/cassandraClusters/cluster1/dataCenters/dc1
 * ```
 */
export class CassandraDatacenter extends pulumi.CustomResource {
    /**
     * Get an existing CassandraDatacenter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CassandraDatacenterState, opts?: pulumi.CustomResourceOptions): CassandraDatacenter {
        return new CassandraDatacenter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:cosmosdb/cassandraDatacenter:CassandraDatacenter';

    /**
     * Returns true if the given object is an instance of CassandraDatacenter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CassandraDatacenter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CassandraDatacenter.__pulumiType;
    }

    /**
     * Determines whether availability zones are enabled. Defaults to `true`.
     */
    public readonly availabilityZonesEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The key URI of the customer key to use for the encryption of the backup Storage Account.
     */
    public readonly backupStorageCustomerKeyUri!: pulumi.Output<string | undefined>;
    /**
     * The fragment of the cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this Cassandra Datacenter. The fragment should be Base64 encoded and only a subset of keys is allowed.
     */
    public readonly base64EncodedYamlFragment!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Cassandra Cluster. Changing this forces a new Cassandra Datacenter to be created.
     */
    public readonly cassandraClusterId!: pulumi.Output<string>;
    /**
     * The ID of the delegated management subnet for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
     */
    public readonly delegatedManagementSubnetId!: pulumi.Output<string>;
    /**
     * Determines the number of p30 disks that are attached to each node.
     */
    public readonly diskCount!: pulumi.Output<number | undefined>;
    /**
     * The Disk SKU that is used for this Cassandra Datacenter. Defaults to `P30`.
     */
    public readonly diskSku!: pulumi.Output<string | undefined>;
    /**
     * The Azure Region where the Cassandra Datacenter should exist. Changing this forces a new Cassandra Datacenter to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The key URI of the customer key to use for the encryption of the Managed Disk.
     */
    public readonly managedDiskCustomerKeyUri!: pulumi.Output<string | undefined>;
    /**
     * The name which should be used for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The number of nodes the Cassandra Datacenter should have. The number should be equal or greater than `3`. Defaults to `3`.
     */
    public readonly nodeCount!: pulumi.Output<number | undefined>;
    /**
     * A list of IP Address for the seed nodes in this Cassandra Datacenter.
     */
    public /*out*/ readonly seedNodeIpAddresses!: pulumi.Output<string[]>;
    /**
     * Determines the selected sku.
     *
     * > **NOTE:** In v4.0 of the provider the `skuName` will have a default value of `Standard_E16s_v5`.
     */
    public readonly skuName!: pulumi.Output<string>;

    /**
     * Create a CassandraDatacenter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CassandraDatacenterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CassandraDatacenterArgs | CassandraDatacenterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CassandraDatacenterState | undefined;
            resourceInputs["availabilityZonesEnabled"] = state ? state.availabilityZonesEnabled : undefined;
            resourceInputs["backupStorageCustomerKeyUri"] = state ? state.backupStorageCustomerKeyUri : undefined;
            resourceInputs["base64EncodedYamlFragment"] = state ? state.base64EncodedYamlFragment : undefined;
            resourceInputs["cassandraClusterId"] = state ? state.cassandraClusterId : undefined;
            resourceInputs["delegatedManagementSubnetId"] = state ? state.delegatedManagementSubnetId : undefined;
            resourceInputs["diskCount"] = state ? state.diskCount : undefined;
            resourceInputs["diskSku"] = state ? state.diskSku : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["managedDiskCustomerKeyUri"] = state ? state.managedDiskCustomerKeyUri : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeCount"] = state ? state.nodeCount : undefined;
            resourceInputs["seedNodeIpAddresses"] = state ? state.seedNodeIpAddresses : undefined;
            resourceInputs["skuName"] = state ? state.skuName : undefined;
        } else {
            const args = argsOrState as CassandraDatacenterArgs | undefined;
            if ((!args || args.cassandraClusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cassandraClusterId'");
            }
            if ((!args || args.delegatedManagementSubnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'delegatedManagementSubnetId'");
            }
            resourceInputs["availabilityZonesEnabled"] = args ? args.availabilityZonesEnabled : undefined;
            resourceInputs["backupStorageCustomerKeyUri"] = args ? args.backupStorageCustomerKeyUri : undefined;
            resourceInputs["base64EncodedYamlFragment"] = args ? args.base64EncodedYamlFragment : undefined;
            resourceInputs["cassandraClusterId"] = args ? args.cassandraClusterId : undefined;
            resourceInputs["delegatedManagementSubnetId"] = args ? args.delegatedManagementSubnetId : undefined;
            resourceInputs["diskCount"] = args ? args.diskCount : undefined;
            resourceInputs["diskSku"] = args ? args.diskSku : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["managedDiskCustomerKeyUri"] = args ? args.managedDiskCustomerKeyUri : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeCount"] = args ? args.nodeCount : undefined;
            resourceInputs["skuName"] = args ? args.skuName : undefined;
            resourceInputs["seedNodeIpAddresses"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CassandraDatacenter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CassandraDatacenter resources.
 */
export interface CassandraDatacenterState {
    /**
     * Determines whether availability zones are enabled. Defaults to `true`.
     */
    availabilityZonesEnabled?: pulumi.Input<boolean>;
    /**
     * The key URI of the customer key to use for the encryption of the backup Storage Account.
     */
    backupStorageCustomerKeyUri?: pulumi.Input<string>;
    /**
     * The fragment of the cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this Cassandra Datacenter. The fragment should be Base64 encoded and only a subset of keys is allowed.
     */
    base64EncodedYamlFragment?: pulumi.Input<string>;
    /**
     * The ID of the Cassandra Cluster. Changing this forces a new Cassandra Datacenter to be created.
     */
    cassandraClusterId?: pulumi.Input<string>;
    /**
     * The ID of the delegated management subnet for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
     */
    delegatedManagementSubnetId?: pulumi.Input<string>;
    /**
     * Determines the number of p30 disks that are attached to each node.
     */
    diskCount?: pulumi.Input<number>;
    /**
     * The Disk SKU that is used for this Cassandra Datacenter. Defaults to `P30`.
     */
    diskSku?: pulumi.Input<string>;
    /**
     * The Azure Region where the Cassandra Datacenter should exist. Changing this forces a new Cassandra Datacenter to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The key URI of the customer key to use for the encryption of the Managed Disk.
     */
    managedDiskCustomerKeyUri?: pulumi.Input<string>;
    /**
     * The name which should be used for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of nodes the Cassandra Datacenter should have. The number should be equal or greater than `3`. Defaults to `3`.
     */
    nodeCount?: pulumi.Input<number>;
    /**
     * A list of IP Address for the seed nodes in this Cassandra Datacenter.
     */
    seedNodeIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Determines the selected sku.
     *
     * > **NOTE:** In v4.0 of the provider the `skuName` will have a default value of `Standard_E16s_v5`.
     */
    skuName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CassandraDatacenter resource.
 */
export interface CassandraDatacenterArgs {
    /**
     * Determines whether availability zones are enabled. Defaults to `true`.
     */
    availabilityZonesEnabled?: pulumi.Input<boolean>;
    /**
     * The key URI of the customer key to use for the encryption of the backup Storage Account.
     */
    backupStorageCustomerKeyUri?: pulumi.Input<string>;
    /**
     * The fragment of the cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this Cassandra Datacenter. The fragment should be Base64 encoded and only a subset of keys is allowed.
     */
    base64EncodedYamlFragment?: pulumi.Input<string>;
    /**
     * The ID of the Cassandra Cluster. Changing this forces a new Cassandra Datacenter to be created.
     */
    cassandraClusterId: pulumi.Input<string>;
    /**
     * The ID of the delegated management subnet for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
     */
    delegatedManagementSubnetId: pulumi.Input<string>;
    /**
     * Determines the number of p30 disks that are attached to each node.
     */
    diskCount?: pulumi.Input<number>;
    /**
     * The Disk SKU that is used for this Cassandra Datacenter. Defaults to `P30`.
     */
    diskSku?: pulumi.Input<string>;
    /**
     * The Azure Region where the Cassandra Datacenter should exist. Changing this forces a new Cassandra Datacenter to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The key URI of the customer key to use for the encryption of the Managed Disk.
     */
    managedDiskCustomerKeyUri?: pulumi.Input<string>;
    /**
     * The name which should be used for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of nodes the Cassandra Datacenter should have. The number should be equal or greater than `3`. Defaults to `3`.
     */
    nodeCount?: pulumi.Input<number>;
    /**
     * Determines the selected sku.
     *
     * > **NOTE:** In v4.0 of the provider the `skuName` will have a default value of `Standard_E16s_v5`.
     */
    skuName?: pulumi.Input<string>;
}
