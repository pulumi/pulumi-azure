// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a CosmosDB (formally DocumentDB) Account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as random from "@pulumi/random";
 *
 * const rg = new azure.core.ResourceGroup("rg", {location: "westus"});
 * const ri = new random.RandomInteger("ri", {
 *     min: 10000,
 *     max: 99999,
 * });
 * const db = new azure.cosmosdb.Account("db", {
 *     location: azurerm_resource_group.example.location,
 *     resourceGroupName: azurerm_resource_group.example.name,
 *     offerType: "Standard",
 *     kind: "MongoDB",
 *     enableAutomaticFailover: true,
 *     capabilities: [
 *         {
 *             name: "EnableAggregationPipeline",
 *         },
 *         {
 *             name: "mongoEnableDocLevelTTL",
 *         },
 *         {
 *             name: "MongoDBv3.4",
 *         },
 *         {
 *             name: "EnableMongo",
 *         },
 *     ],
 *     consistencyPolicy: {
 *         consistencyLevel: "BoundedStaleness",
 *         maxIntervalInSeconds: 300,
 *         maxStalenessPrefix: 100000,
 *     },
 *     geoLocations: [
 *         {
 *             location: "eastus",
 *             failoverPriority: 1,
 *         },
 *         {
 *             location: "westus",
 *             failoverPriority: 0,
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * CosmosDB Accounts can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:cosmosdb/account:Account account1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DocumentDB/databaseAccounts/account1
 * ```
 */
export class Account extends pulumi.CustomResource {
    /**
     * Get an existing Account resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountState, opts?: pulumi.CustomResourceOptions): Account {
        return new Account(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:cosmosdb/account:Account';

    /**
     * Returns true if the given object is an instance of Account.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Account {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Account.__pulumiType;
    }

    /**
     * Is write operations on metadata resources (databases, containers, throughput) via account keys enabled? Defaults to `true`.
     */
    public readonly accessKeyMetadataWritesEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * An `analyticalStorage` block as defined below.
     */
    public readonly analyticalStorage!: pulumi.Output<outputs.cosmosdb.AccountAnalyticalStorage>;
    /**
     * Enable Analytical Storage option for this Cosmos DB account. Defaults to `false`. Enabling and then disabling analytical storage forces a new resource to be created.
     */
    public readonly analyticalStorageEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * A `backup` block as defined below.
     */
    public readonly backup!: pulumi.Output<outputs.cosmosdb.AccountBackup>;
    /**
     * The capabilities which should be enabled for this Cosmos DB account. Value is a `capabilities` block as defined below.
     */
    public readonly capabilities!: pulumi.Output<outputs.cosmosdb.AccountCapability[]>;
    /**
     * A `capacity` block as defined below.
     */
    public readonly capacity!: pulumi.Output<outputs.cosmosdb.AccountCapacity>;
    /**
     * A list of connection strings available for this CosmosDB account.
     */
    public /*out*/ readonly connectionStrings!: pulumi.Output<string[]>;
    /**
     * Specifies one `consistencyPolicy` block as defined below, used to define the consistency policy for this CosmosDB account.
     */
    public readonly consistencyPolicy!: pulumi.Output<outputs.cosmosdb.AccountConsistencyPolicy>;
    /**
     * A `corsRule` block as defined below.
     */
    public readonly corsRule!: pulumi.Output<outputs.cosmosdb.AccountCorsRule | undefined>;
    /**
     * The creation mode for the CosmosDB Account. Possible values are `Default` and `Restore`. Changing this forces a new resource to be created.
     *
     * > **NOTE:** `createMode` only works when `backup.type` is `Continuous`.
     */
    public readonly createMode!: pulumi.Output<string>;
    /**
     * The default identity for accessing Key Vault. Possible values are `FirstPartyIdentity`, `SystemAssignedIdentity` or `UserAssignedIdentity`. Defaults to `FirstPartyIdentity`.
     */
    public readonly defaultIdentityType!: pulumi.Output<string | undefined>;
    /**
     * Enable automatic failover for this Cosmos DB account.
     */
    public readonly enableAutomaticFailover!: pulumi.Output<boolean | undefined>;
    /**
     * Enable the Free Tier pricing option for this Cosmos DB account. Defaults to `false`. Changing this forces a new resource to be created.
     */
    public readonly enableFreeTier!: pulumi.Output<boolean | undefined>;
    /**
     * Enable multiple write locations for this Cosmos DB account.
     */
    public readonly enableMultipleWriteLocations!: pulumi.Output<boolean | undefined>;
    /**
     * The endpoint used to connect to the CosmosDB account.
     */
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    /**
     * Specifies a `geoLocation` resource, used to define where data should be replicated with the `failoverPriority` 0 specifying the primary location. Value is a `geoLocation` block as defined below.
     */
    public readonly geoLocations!: pulumi.Output<outputs.cosmosdb.AccountGeoLocation[]>;
    /**
     * An `identity` block as defined below.
     */
    public readonly identity!: pulumi.Output<outputs.cosmosdb.AccountIdentity | undefined>;
    /**
     * CosmosDB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.
     *
     * > **NOTE:** To enable the "Allow access from the Azure portal" behavior, you should add the IP addresses provided by the [documentation](https://docs.microsoft.com/azure/cosmos-db/how-to-configure-firewall#allow-requests-from-the-azure-portal) to this list.
     *
     * > **NOTE:** To enable the "Accept connections from within public Azure datacenters" behavior, you should add `0.0.0.0` to the list, see the [documentation](https://docs.microsoft.com/azure/cosmos-db/how-to-configure-firewall#allow-requests-from-global-azure-datacenters-or-other-sources-within-azure) for more details.
     */
    public readonly ipRangeFilter!: pulumi.Output<string | undefined>;
    /**
     * Enables virtual network filtering for this Cosmos DB account.
     */
    public readonly isVirtualNetworkFilterEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * A versionless Key Vault Key ID for CMK encryption. Changing this forces a new resource to be created.
     *
     * > **NOTE:** When referencing an `azure.keyvault.Key` resource, use `versionlessId` instead of `id`
     *
     * > **NOTE:** In order to use a `Custom Key` from Key Vault for encryption you must grant Azure Cosmos DB Service access to your key vault. For instructions on how to configure your Key Vault correctly please refer to the [product documentation](https://docs.microsoft.com/azure/cosmos-db/how-to-setup-cmk#add-an-access-policy-to-your-azure-key-vault-instance)
     */
    public readonly keyVaultKeyId!: pulumi.Output<string | undefined>;
    /**
     * Specifies the Kind of CosmosDB to create - possible values are `GlobalDocumentDB`, `MongoDB` and `Parse`. Defaults to `GlobalDocumentDB`. Changing this forces a new resource to be created.
     */
    public readonly kind!: pulumi.Output<string | undefined>;
    /**
     * Disable local authentication and ensure only MSI and AAD can be used exclusively for authentication. Defaults to `false`. Can be set only when using the SQL API.
     */
    public readonly localAuthenticationDisabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The Server Version of a MongoDB account. Possible values are `4.2`, `4.0`, `3.6`, and `3.2`.
     */
    public readonly mongoServerVersion!: pulumi.Output<string>;
    /**
     * Specifies the name of the CosmosDB Account. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * If Azure services can bypass ACLs. Defaults to `false`.
     */
    public readonly networkAclBypassForAzureServices!: pulumi.Output<boolean | undefined>;
    /**
     * The list of resource Ids for Network Acl Bypass for this Cosmos DB account.
     */
    public readonly networkAclBypassIds!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the Offer Type to use for this CosmosDB Account; currently, this can only be set to `Standard`.
     */
    public readonly offerType!: pulumi.Output<string>;
    /**
     * The Primary key for the CosmosDB Account.
     */
    public /*out*/ readonly primaryKey!: pulumi.Output<string>;
    /**
     * Primary Mongodb connection string for the CosmosDB Account.
     */
    public /*out*/ readonly primaryMongodbConnectionString!: pulumi.Output<string>;
    /**
     * The Primary read-only Key for the CosmosDB Account.
     */
    public /*out*/ readonly primaryReadonlyKey!: pulumi.Output<string>;
    /**
     * Primary readonly Mongodb connection string for the CosmosDB Account.
     */
    public /*out*/ readonly primaryReadonlyMongodbConnectionString!: pulumi.Output<string>;
    /**
     * Primary readonly SQL connection string for the CosmosDB Account.
     */
    public /*out*/ readonly primaryReadonlySqlConnectionString!: pulumi.Output<string>;
    /**
     * Primary SQL connection string for the CosmosDB Account.
     */
    public /*out*/ readonly primarySqlConnectionString!: pulumi.Output<string>;
    /**
     * Whether or not public network access is allowed for this CosmosDB account. Defaults to `true`.
     */
    public readonly publicNetworkAccessEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * A list of read endpoints available for this CosmosDB account.
     */
    public /*out*/ readonly readEndpoints!: pulumi.Output<string[]>;
    /**
     * The name of the resource group in which the CosmosDB Account is created. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * A `restore` block as defined below.
     *
     * > **NOTE:** `restore` should be set when `createMode` is `Restore`.
     */
    public readonly restore!: pulumi.Output<outputs.cosmosdb.AccountRestore | undefined>;
    /**
     * The Secondary key for the CosmosDB Account.
     */
    public /*out*/ readonly secondaryKey!: pulumi.Output<string>;
    /**
     * Secondary Mongodb connection string for the CosmosDB Account.
     */
    public /*out*/ readonly secondaryMongodbConnectionString!: pulumi.Output<string>;
    /**
     * The Secondary read-only key for the CosmosDB Account.
     */
    public /*out*/ readonly secondaryReadonlyKey!: pulumi.Output<string>;
    /**
     * Secondary readonly Mongodb connection string for the CosmosDB Account.
     */
    public /*out*/ readonly secondaryReadonlyMongodbConnectionString!: pulumi.Output<string>;
    /**
     * Secondary readonly SQL connection string for the CosmosDB Account.
     */
    public /*out*/ readonly secondaryReadonlySqlConnectionString!: pulumi.Output<string>;
    /**
     * Secondary SQL connection string for the CosmosDB Account.
     */
    public /*out*/ readonly secondarySqlConnectionString!: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies a `virtualNetworkRule` block as defined below, used to define which subnets are allowed to access this CosmosDB account.
     */
    public readonly virtualNetworkRules!: pulumi.Output<outputs.cosmosdb.AccountVirtualNetworkRule[] | undefined>;
    /**
     * A list of write endpoints available for this CosmosDB account.
     */
    public /*out*/ readonly writeEndpoints!: pulumi.Output<string[]>;

    /**
     * Create a Account resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccountArgs | AccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccountState | undefined;
            resourceInputs["accessKeyMetadataWritesEnabled"] = state ? state.accessKeyMetadataWritesEnabled : undefined;
            resourceInputs["analyticalStorage"] = state ? state.analyticalStorage : undefined;
            resourceInputs["analyticalStorageEnabled"] = state ? state.analyticalStorageEnabled : undefined;
            resourceInputs["backup"] = state ? state.backup : undefined;
            resourceInputs["capabilities"] = state ? state.capabilities : undefined;
            resourceInputs["capacity"] = state ? state.capacity : undefined;
            resourceInputs["connectionStrings"] = state ? state.connectionStrings : undefined;
            resourceInputs["consistencyPolicy"] = state ? state.consistencyPolicy : undefined;
            resourceInputs["corsRule"] = state ? state.corsRule : undefined;
            resourceInputs["createMode"] = state ? state.createMode : undefined;
            resourceInputs["defaultIdentityType"] = state ? state.defaultIdentityType : undefined;
            resourceInputs["enableAutomaticFailover"] = state ? state.enableAutomaticFailover : undefined;
            resourceInputs["enableFreeTier"] = state ? state.enableFreeTier : undefined;
            resourceInputs["enableMultipleWriteLocations"] = state ? state.enableMultipleWriteLocations : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["geoLocations"] = state ? state.geoLocations : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["ipRangeFilter"] = state ? state.ipRangeFilter : undefined;
            resourceInputs["isVirtualNetworkFilterEnabled"] = state ? state.isVirtualNetworkFilterEnabled : undefined;
            resourceInputs["keyVaultKeyId"] = state ? state.keyVaultKeyId : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["localAuthenticationDisabled"] = state ? state.localAuthenticationDisabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["mongoServerVersion"] = state ? state.mongoServerVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkAclBypassForAzureServices"] = state ? state.networkAclBypassForAzureServices : undefined;
            resourceInputs["networkAclBypassIds"] = state ? state.networkAclBypassIds : undefined;
            resourceInputs["offerType"] = state ? state.offerType : undefined;
            resourceInputs["primaryKey"] = state ? state.primaryKey : undefined;
            resourceInputs["primaryMongodbConnectionString"] = state ? state.primaryMongodbConnectionString : undefined;
            resourceInputs["primaryReadonlyKey"] = state ? state.primaryReadonlyKey : undefined;
            resourceInputs["primaryReadonlyMongodbConnectionString"] = state ? state.primaryReadonlyMongodbConnectionString : undefined;
            resourceInputs["primaryReadonlySqlConnectionString"] = state ? state.primaryReadonlySqlConnectionString : undefined;
            resourceInputs["primarySqlConnectionString"] = state ? state.primarySqlConnectionString : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["readEndpoints"] = state ? state.readEndpoints : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["restore"] = state ? state.restore : undefined;
            resourceInputs["secondaryKey"] = state ? state.secondaryKey : undefined;
            resourceInputs["secondaryMongodbConnectionString"] = state ? state.secondaryMongodbConnectionString : undefined;
            resourceInputs["secondaryReadonlyKey"] = state ? state.secondaryReadonlyKey : undefined;
            resourceInputs["secondaryReadonlyMongodbConnectionString"] = state ? state.secondaryReadonlyMongodbConnectionString : undefined;
            resourceInputs["secondaryReadonlySqlConnectionString"] = state ? state.secondaryReadonlySqlConnectionString : undefined;
            resourceInputs["secondarySqlConnectionString"] = state ? state.secondarySqlConnectionString : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["virtualNetworkRules"] = state ? state.virtualNetworkRules : undefined;
            resourceInputs["writeEndpoints"] = state ? state.writeEndpoints : undefined;
        } else {
            const args = argsOrState as AccountArgs | undefined;
            if ((!args || args.consistencyPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consistencyPolicy'");
            }
            if ((!args || args.geoLocations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'geoLocations'");
            }
            if ((!args || args.offerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'offerType'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["accessKeyMetadataWritesEnabled"] = args ? args.accessKeyMetadataWritesEnabled : undefined;
            resourceInputs["analyticalStorage"] = args ? args.analyticalStorage : undefined;
            resourceInputs["analyticalStorageEnabled"] = args ? args.analyticalStorageEnabled : undefined;
            resourceInputs["backup"] = args ? args.backup : undefined;
            resourceInputs["capabilities"] = args ? args.capabilities : undefined;
            resourceInputs["capacity"] = args ? args.capacity : undefined;
            resourceInputs["consistencyPolicy"] = args ? args.consistencyPolicy : undefined;
            resourceInputs["corsRule"] = args ? args.corsRule : undefined;
            resourceInputs["createMode"] = args ? args.createMode : undefined;
            resourceInputs["defaultIdentityType"] = args ? args.defaultIdentityType : undefined;
            resourceInputs["enableAutomaticFailover"] = args ? args.enableAutomaticFailover : undefined;
            resourceInputs["enableFreeTier"] = args ? args.enableFreeTier : undefined;
            resourceInputs["enableMultipleWriteLocations"] = args ? args.enableMultipleWriteLocations : undefined;
            resourceInputs["geoLocations"] = args ? args.geoLocations : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["ipRangeFilter"] = args ? args.ipRangeFilter : undefined;
            resourceInputs["isVirtualNetworkFilterEnabled"] = args ? args.isVirtualNetworkFilterEnabled : undefined;
            resourceInputs["keyVaultKeyId"] = args ? args.keyVaultKeyId : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["localAuthenticationDisabled"] = args ? args.localAuthenticationDisabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["mongoServerVersion"] = args ? args.mongoServerVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkAclBypassForAzureServices"] = args ? args.networkAclBypassForAzureServices : undefined;
            resourceInputs["networkAclBypassIds"] = args ? args.networkAclBypassIds : undefined;
            resourceInputs["offerType"] = args ? args.offerType : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["restore"] = args ? args.restore : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["virtualNetworkRules"] = args ? args.virtualNetworkRules : undefined;
            resourceInputs["connectionStrings"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["primaryKey"] = undefined /*out*/;
            resourceInputs["primaryMongodbConnectionString"] = undefined /*out*/;
            resourceInputs["primaryReadonlyKey"] = undefined /*out*/;
            resourceInputs["primaryReadonlyMongodbConnectionString"] = undefined /*out*/;
            resourceInputs["primaryReadonlySqlConnectionString"] = undefined /*out*/;
            resourceInputs["primarySqlConnectionString"] = undefined /*out*/;
            resourceInputs["readEndpoints"] = undefined /*out*/;
            resourceInputs["secondaryKey"] = undefined /*out*/;
            resourceInputs["secondaryMongodbConnectionString"] = undefined /*out*/;
            resourceInputs["secondaryReadonlyKey"] = undefined /*out*/;
            resourceInputs["secondaryReadonlyMongodbConnectionString"] = undefined /*out*/;
            resourceInputs["secondaryReadonlySqlConnectionString"] = undefined /*out*/;
            resourceInputs["secondarySqlConnectionString"] = undefined /*out*/;
            resourceInputs["writeEndpoints"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["connectionStrings", "primaryKey", "primaryMongodbConnectionString", "primaryReadonlyKey", "primaryReadonlyMongodbConnectionString", "primaryReadonlySqlConnectionString", "primarySqlConnectionString", "secondaryKey", "secondaryMongodbConnectionString", "secondaryReadonlyKey", "secondaryReadonlyMongodbConnectionString", "secondaryReadonlySqlConnectionString", "secondarySqlConnectionString"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Account.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Account resources.
 */
export interface AccountState {
    /**
     * Is write operations on metadata resources (databases, containers, throughput) via account keys enabled? Defaults to `true`.
     */
    accessKeyMetadataWritesEnabled?: pulumi.Input<boolean>;
    /**
     * An `analyticalStorage` block as defined below.
     */
    analyticalStorage?: pulumi.Input<inputs.cosmosdb.AccountAnalyticalStorage>;
    /**
     * Enable Analytical Storage option for this Cosmos DB account. Defaults to `false`. Enabling and then disabling analytical storage forces a new resource to be created.
     */
    analyticalStorageEnabled?: pulumi.Input<boolean>;
    /**
     * A `backup` block as defined below.
     */
    backup?: pulumi.Input<inputs.cosmosdb.AccountBackup>;
    /**
     * The capabilities which should be enabled for this Cosmos DB account. Value is a `capabilities` block as defined below.
     */
    capabilities?: pulumi.Input<pulumi.Input<inputs.cosmosdb.AccountCapability>[]>;
    /**
     * A `capacity` block as defined below.
     */
    capacity?: pulumi.Input<inputs.cosmosdb.AccountCapacity>;
    /**
     * A list of connection strings available for this CosmosDB account.
     */
    connectionStrings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies one `consistencyPolicy` block as defined below, used to define the consistency policy for this CosmosDB account.
     */
    consistencyPolicy?: pulumi.Input<inputs.cosmosdb.AccountConsistencyPolicy>;
    /**
     * A `corsRule` block as defined below.
     */
    corsRule?: pulumi.Input<inputs.cosmosdb.AccountCorsRule>;
    /**
     * The creation mode for the CosmosDB Account. Possible values are `Default` and `Restore`. Changing this forces a new resource to be created.
     *
     * > **NOTE:** `createMode` only works when `backup.type` is `Continuous`.
     */
    createMode?: pulumi.Input<string>;
    /**
     * The default identity for accessing Key Vault. Possible values are `FirstPartyIdentity`, `SystemAssignedIdentity` or `UserAssignedIdentity`. Defaults to `FirstPartyIdentity`.
     */
    defaultIdentityType?: pulumi.Input<string>;
    /**
     * Enable automatic failover for this Cosmos DB account.
     */
    enableAutomaticFailover?: pulumi.Input<boolean>;
    /**
     * Enable the Free Tier pricing option for this Cosmos DB account. Defaults to `false`. Changing this forces a new resource to be created.
     */
    enableFreeTier?: pulumi.Input<boolean>;
    /**
     * Enable multiple write locations for this Cosmos DB account.
     */
    enableMultipleWriteLocations?: pulumi.Input<boolean>;
    /**
     * The endpoint used to connect to the CosmosDB account.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * Specifies a `geoLocation` resource, used to define where data should be replicated with the `failoverPriority` 0 specifying the primary location. Value is a `geoLocation` block as defined below.
     */
    geoLocations?: pulumi.Input<pulumi.Input<inputs.cosmosdb.AccountGeoLocation>[]>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.cosmosdb.AccountIdentity>;
    /**
     * CosmosDB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.
     *
     * > **NOTE:** To enable the "Allow access from the Azure portal" behavior, you should add the IP addresses provided by the [documentation](https://docs.microsoft.com/azure/cosmos-db/how-to-configure-firewall#allow-requests-from-the-azure-portal) to this list.
     *
     * > **NOTE:** To enable the "Accept connections from within public Azure datacenters" behavior, you should add `0.0.0.0` to the list, see the [documentation](https://docs.microsoft.com/azure/cosmos-db/how-to-configure-firewall#allow-requests-from-global-azure-datacenters-or-other-sources-within-azure) for more details.
     */
    ipRangeFilter?: pulumi.Input<string>;
    /**
     * Enables virtual network filtering for this Cosmos DB account.
     */
    isVirtualNetworkFilterEnabled?: pulumi.Input<boolean>;
    /**
     * A versionless Key Vault Key ID for CMK encryption. Changing this forces a new resource to be created.
     *
     * > **NOTE:** When referencing an `azure.keyvault.Key` resource, use `versionlessId` instead of `id`
     *
     * > **NOTE:** In order to use a `Custom Key` from Key Vault for encryption you must grant Azure Cosmos DB Service access to your key vault. For instructions on how to configure your Key Vault correctly please refer to the [product documentation](https://docs.microsoft.com/azure/cosmos-db/how-to-setup-cmk#add-an-access-policy-to-your-azure-key-vault-instance)
     */
    keyVaultKeyId?: pulumi.Input<string>;
    /**
     * Specifies the Kind of CosmosDB to create - possible values are `GlobalDocumentDB`, `MongoDB` and `Parse`. Defaults to `GlobalDocumentDB`. Changing this forces a new resource to be created.
     */
    kind?: pulumi.Input<string>;
    /**
     * Disable local authentication and ensure only MSI and AAD can be used exclusively for authentication. Defaults to `false`. Can be set only when using the SQL API.
     */
    localAuthenticationDisabled?: pulumi.Input<boolean>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The Server Version of a MongoDB account. Possible values are `4.2`, `4.0`, `3.6`, and `3.2`.
     */
    mongoServerVersion?: pulumi.Input<string>;
    /**
     * Specifies the name of the CosmosDB Account. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * If Azure services can bypass ACLs. Defaults to `false`.
     */
    networkAclBypassForAzureServices?: pulumi.Input<boolean>;
    /**
     * The list of resource Ids for Network Acl Bypass for this Cosmos DB account.
     */
    networkAclBypassIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the Offer Type to use for this CosmosDB Account; currently, this can only be set to `Standard`.
     */
    offerType?: pulumi.Input<string>;
    /**
     * The Primary key for the CosmosDB Account.
     */
    primaryKey?: pulumi.Input<string>;
    /**
     * Primary Mongodb connection string for the CosmosDB Account.
     */
    primaryMongodbConnectionString?: pulumi.Input<string>;
    /**
     * The Primary read-only Key for the CosmosDB Account.
     */
    primaryReadonlyKey?: pulumi.Input<string>;
    /**
     * Primary readonly Mongodb connection string for the CosmosDB Account.
     */
    primaryReadonlyMongodbConnectionString?: pulumi.Input<string>;
    /**
     * Primary readonly SQL connection string for the CosmosDB Account.
     */
    primaryReadonlySqlConnectionString?: pulumi.Input<string>;
    /**
     * Primary SQL connection string for the CosmosDB Account.
     */
    primarySqlConnectionString?: pulumi.Input<string>;
    /**
     * Whether or not public network access is allowed for this CosmosDB account. Defaults to `true`.
     */
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    /**
     * A list of read endpoints available for this CosmosDB account.
     */
    readEndpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the resource group in which the CosmosDB Account is created. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A `restore` block as defined below.
     *
     * > **NOTE:** `restore` should be set when `createMode` is `Restore`.
     */
    restore?: pulumi.Input<inputs.cosmosdb.AccountRestore>;
    /**
     * The Secondary key for the CosmosDB Account.
     */
    secondaryKey?: pulumi.Input<string>;
    /**
     * Secondary Mongodb connection string for the CosmosDB Account.
     */
    secondaryMongodbConnectionString?: pulumi.Input<string>;
    /**
     * The Secondary read-only key for the CosmosDB Account.
     */
    secondaryReadonlyKey?: pulumi.Input<string>;
    /**
     * Secondary readonly Mongodb connection string for the CosmosDB Account.
     */
    secondaryReadonlyMongodbConnectionString?: pulumi.Input<string>;
    /**
     * Secondary readonly SQL connection string for the CosmosDB Account.
     */
    secondaryReadonlySqlConnectionString?: pulumi.Input<string>;
    /**
     * Secondary SQL connection string for the CosmosDB Account.
     */
    secondarySqlConnectionString?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies a `virtualNetworkRule` block as defined below, used to define which subnets are allowed to access this CosmosDB account.
     */
    virtualNetworkRules?: pulumi.Input<pulumi.Input<inputs.cosmosdb.AccountVirtualNetworkRule>[]>;
    /**
     * A list of write endpoints available for this CosmosDB account.
     */
    writeEndpoints?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Account resource.
 */
export interface AccountArgs {
    /**
     * Is write operations on metadata resources (databases, containers, throughput) via account keys enabled? Defaults to `true`.
     */
    accessKeyMetadataWritesEnabled?: pulumi.Input<boolean>;
    /**
     * An `analyticalStorage` block as defined below.
     */
    analyticalStorage?: pulumi.Input<inputs.cosmosdb.AccountAnalyticalStorage>;
    /**
     * Enable Analytical Storage option for this Cosmos DB account. Defaults to `false`. Enabling and then disabling analytical storage forces a new resource to be created.
     */
    analyticalStorageEnabled?: pulumi.Input<boolean>;
    /**
     * A `backup` block as defined below.
     */
    backup?: pulumi.Input<inputs.cosmosdb.AccountBackup>;
    /**
     * The capabilities which should be enabled for this Cosmos DB account. Value is a `capabilities` block as defined below.
     */
    capabilities?: pulumi.Input<pulumi.Input<inputs.cosmosdb.AccountCapability>[]>;
    /**
     * A `capacity` block as defined below.
     */
    capacity?: pulumi.Input<inputs.cosmosdb.AccountCapacity>;
    /**
     * Specifies one `consistencyPolicy` block as defined below, used to define the consistency policy for this CosmosDB account.
     */
    consistencyPolicy: pulumi.Input<inputs.cosmosdb.AccountConsistencyPolicy>;
    /**
     * A `corsRule` block as defined below.
     */
    corsRule?: pulumi.Input<inputs.cosmosdb.AccountCorsRule>;
    /**
     * The creation mode for the CosmosDB Account. Possible values are `Default` and `Restore`. Changing this forces a new resource to be created.
     *
     * > **NOTE:** `createMode` only works when `backup.type` is `Continuous`.
     */
    createMode?: pulumi.Input<string>;
    /**
     * The default identity for accessing Key Vault. Possible values are `FirstPartyIdentity`, `SystemAssignedIdentity` or `UserAssignedIdentity`. Defaults to `FirstPartyIdentity`.
     */
    defaultIdentityType?: pulumi.Input<string>;
    /**
     * Enable automatic failover for this Cosmos DB account.
     */
    enableAutomaticFailover?: pulumi.Input<boolean>;
    /**
     * Enable the Free Tier pricing option for this Cosmos DB account. Defaults to `false`. Changing this forces a new resource to be created.
     */
    enableFreeTier?: pulumi.Input<boolean>;
    /**
     * Enable multiple write locations for this Cosmos DB account.
     */
    enableMultipleWriteLocations?: pulumi.Input<boolean>;
    /**
     * Specifies a `geoLocation` resource, used to define where data should be replicated with the `failoverPriority` 0 specifying the primary location. Value is a `geoLocation` block as defined below.
     */
    geoLocations: pulumi.Input<pulumi.Input<inputs.cosmosdb.AccountGeoLocation>[]>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.cosmosdb.AccountIdentity>;
    /**
     * CosmosDB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.
     *
     * > **NOTE:** To enable the "Allow access from the Azure portal" behavior, you should add the IP addresses provided by the [documentation](https://docs.microsoft.com/azure/cosmos-db/how-to-configure-firewall#allow-requests-from-the-azure-portal) to this list.
     *
     * > **NOTE:** To enable the "Accept connections from within public Azure datacenters" behavior, you should add `0.0.0.0` to the list, see the [documentation](https://docs.microsoft.com/azure/cosmos-db/how-to-configure-firewall#allow-requests-from-global-azure-datacenters-or-other-sources-within-azure) for more details.
     */
    ipRangeFilter?: pulumi.Input<string>;
    /**
     * Enables virtual network filtering for this Cosmos DB account.
     */
    isVirtualNetworkFilterEnabled?: pulumi.Input<boolean>;
    /**
     * A versionless Key Vault Key ID for CMK encryption. Changing this forces a new resource to be created.
     *
     * > **NOTE:** When referencing an `azure.keyvault.Key` resource, use `versionlessId` instead of `id`
     *
     * > **NOTE:** In order to use a `Custom Key` from Key Vault for encryption you must grant Azure Cosmos DB Service access to your key vault. For instructions on how to configure your Key Vault correctly please refer to the [product documentation](https://docs.microsoft.com/azure/cosmos-db/how-to-setup-cmk#add-an-access-policy-to-your-azure-key-vault-instance)
     */
    keyVaultKeyId?: pulumi.Input<string>;
    /**
     * Specifies the Kind of CosmosDB to create - possible values are `GlobalDocumentDB`, `MongoDB` and `Parse`. Defaults to `GlobalDocumentDB`. Changing this forces a new resource to be created.
     */
    kind?: pulumi.Input<string>;
    /**
     * Disable local authentication and ensure only MSI and AAD can be used exclusively for authentication. Defaults to `false`. Can be set only when using the SQL API.
     */
    localAuthenticationDisabled?: pulumi.Input<boolean>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The Server Version of a MongoDB account. Possible values are `4.2`, `4.0`, `3.6`, and `3.2`.
     */
    mongoServerVersion?: pulumi.Input<string>;
    /**
     * Specifies the name of the CosmosDB Account. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * If Azure services can bypass ACLs. Defaults to `false`.
     */
    networkAclBypassForAzureServices?: pulumi.Input<boolean>;
    /**
     * The list of resource Ids for Network Acl Bypass for this Cosmos DB account.
     */
    networkAclBypassIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the Offer Type to use for this CosmosDB Account; currently, this can only be set to `Standard`.
     */
    offerType: pulumi.Input<string>;
    /**
     * Whether or not public network access is allowed for this CosmosDB account. Defaults to `true`.
     */
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the resource group in which the CosmosDB Account is created. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A `restore` block as defined below.
     *
     * > **NOTE:** `restore` should be set when `createMode` is `Restore`.
     */
    restore?: pulumi.Input<inputs.cosmosdb.AccountRestore>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies a `virtualNetworkRule` block as defined below, used to define which subnets are allowed to access this CosmosDB account.
     */
    virtualNetworkRules?: pulumi.Input<pulumi.Input<inputs.cosmosdb.AccountVirtualNetworkRule>[]>;
}
