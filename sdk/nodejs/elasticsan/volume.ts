// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages an Elastic SAN Volume resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-rg",
 *     location: "West Europe",
 * });
 * const exampleElasticSan = new azure.elasticsan.ElasticSan("example", {
 *     name: "example-es",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     baseSizeInTib: 1,
 *     sku: {
 *         name: "Premium_LRS",
 *     },
 * });
 * const exampleVolumeGroup = new azure.elasticsan.VolumeGroup("example", {
 *     name: "example-esvg",
 *     elasticSanId: exampleElasticSan.id,
 * });
 * const exampleVolume = new azure.elasticsan.Volume("example", {
 *     name: "example-esv",
 *     volumeGroupId: exampleVolumeGroup.id,
 *     sizeInGib: 1,
 * });
 * export const targetIqn = exampleVolume.targetIqn;
 * ```
 *
 * ## Example of creating an Elastic SAN Volume from a Disk Snapshot
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-rg",
 *     location: "West Europe",
 * });
 * const exampleElasticSan = new azure.elasticsan.ElasticSan("example", {
 *     name: "example-es",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     baseSizeInTib: 1,
 *     sku: {
 *         name: "Premium_LRS",
 *     },
 * });
 * const exampleVolumeGroup = new azure.elasticsan.VolumeGroup("example", {
 *     name: "example-esvg",
 *     elasticSanId: exampleElasticSan.id,
 * });
 * const exampleManagedDisk = new azure.compute.ManagedDisk("example", {
 *     name: "example-disk",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     createOption: "Empty",
 *     storageAccountType: "Standard_LRS",
 *     diskSizeGb: 2,
 * });
 * const exampleSnapshot = new azure.compute.Snapshot("example", {
 *     name: "example-ss",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     createOption: "Copy",
 *     sourceUri: exampleManagedDisk.id,
 * });
 * const example2 = new azure.elasticsan.Volume("example2", {
 *     name: "example-esv2",
 *     volumeGroupId: exampleVolumeGroup.id,
 *     sizeInGib: 2,
 *     createSource: {
 *         sourceType: "DiskSnapshot",
 *         sourceId: exampleSnapshot.id,
 *     },
 * });
 * ```
 *
 * ## API Providers
 *
 * <!-- This section is generated, changes will be overwritten -->
 * This resource uses the following Azure API Providers:
 *
 * * `Microsoft.ElasticSan` - 2023-01-01
 *
 * ## Import
 *
 * An existing Elastic SAN Volume can be imported into Pulumi using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:elasticsan/volume:Volume example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.ElasticSan/elasticSans/esan1/volumeGroups/vg1/volumes/vol1
 * ```
 */
export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState, opts?: pulumi.CustomResourceOptions): Volume {
        return new Volume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:elasticsan/volume:Volume';

    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Volume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }

    /**
     * A `createSource` block as defined below.
     */
    public readonly createSource!: pulumi.Output<outputs.elasticsan.VolumeCreateSource | undefined>;
    /**
     * Specifies the name of this Elastic SAN Volume. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the size of the Elastic SAN Volume in GiB. The size should be within the remaining capacity of the parent Elastic SAN. Possible values are between `1` and `65536` (16 TiB).
     *
     * > **Note:** The size can only be increased. If `createSource` is specified, then the size must be equal to or greater than the source's size.
     */
    public readonly sizeInGib!: pulumi.Output<number>;
    /**
     * The iSCSI Target IQN of the Elastic SAN Volume.
     */
    public /*out*/ readonly targetIqn!: pulumi.Output<string>;
    /**
     * The iSCSI Target Portal Host Name of the Elastic SAN Volume.
     */
    public /*out*/ readonly targetPortalHostname!: pulumi.Output<string>;
    /**
     * The iSCSI Target Portal Port of the Elastic SAN Volume.
     */
    public /*out*/ readonly targetPortalPort!: pulumi.Output<number>;
    /**
     * Specifies the Volume Group ID within which this Elastic SAN Volume should exist. Changing this forces a new resource to be created.
     */
    public readonly volumeGroupId!: pulumi.Output<string>;
    /**
     * The UUID of the Elastic SAN Volume.
     */
    public /*out*/ readonly volumeId!: pulumi.Output<string>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeArgs | VolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeState | undefined;
            resourceInputs["createSource"] = state ? state.createSource : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sizeInGib"] = state ? state.sizeInGib : undefined;
            resourceInputs["targetIqn"] = state ? state.targetIqn : undefined;
            resourceInputs["targetPortalHostname"] = state ? state.targetPortalHostname : undefined;
            resourceInputs["targetPortalPort"] = state ? state.targetPortalPort : undefined;
            resourceInputs["volumeGroupId"] = state ? state.volumeGroupId : undefined;
            resourceInputs["volumeId"] = state ? state.volumeId : undefined;
        } else {
            const args = argsOrState as VolumeArgs | undefined;
            if ((!args || args.sizeInGib === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sizeInGib'");
            }
            if ((!args || args.volumeGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeGroupId'");
            }
            resourceInputs["createSource"] = args ? args.createSource : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sizeInGib"] = args ? args.sizeInGib : undefined;
            resourceInputs["volumeGroupId"] = args ? args.volumeGroupId : undefined;
            resourceInputs["targetIqn"] = undefined /*out*/;
            resourceInputs["targetPortalHostname"] = undefined /*out*/;
            resourceInputs["targetPortalPort"] = undefined /*out*/;
            resourceInputs["volumeId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Volume.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    /**
     * A `createSource` block as defined below.
     */
    createSource?: pulumi.Input<inputs.elasticsan.VolumeCreateSource>;
    /**
     * Specifies the name of this Elastic SAN Volume. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the size of the Elastic SAN Volume in GiB. The size should be within the remaining capacity of the parent Elastic SAN. Possible values are between `1` and `65536` (16 TiB).
     *
     * > **Note:** The size can only be increased. If `createSource` is specified, then the size must be equal to or greater than the source's size.
     */
    sizeInGib?: pulumi.Input<number>;
    /**
     * The iSCSI Target IQN of the Elastic SAN Volume.
     */
    targetIqn?: pulumi.Input<string>;
    /**
     * The iSCSI Target Portal Host Name of the Elastic SAN Volume.
     */
    targetPortalHostname?: pulumi.Input<string>;
    /**
     * The iSCSI Target Portal Port of the Elastic SAN Volume.
     */
    targetPortalPort?: pulumi.Input<number>;
    /**
     * Specifies the Volume Group ID within which this Elastic SAN Volume should exist. Changing this forces a new resource to be created.
     */
    volumeGroupId?: pulumi.Input<string>;
    /**
     * The UUID of the Elastic SAN Volume.
     */
    volumeId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    /**
     * A `createSource` block as defined below.
     */
    createSource?: pulumi.Input<inputs.elasticsan.VolumeCreateSource>;
    /**
     * Specifies the name of this Elastic SAN Volume. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the size of the Elastic SAN Volume in GiB. The size should be within the remaining capacity of the parent Elastic SAN. Possible values are between `1` and `65536` (16 TiB).
     *
     * > **Note:** The size can only be increased. If `createSource` is specified, then the size must be equal to or greater than the source's size.
     */
    sizeInGib: pulumi.Input<number>;
    /**
     * Specifies the Volume Group ID within which this Elastic SAN Volume should exist. Changing this forces a new resource to be created.
     */
    volumeGroupId: pulumi.Input<string>;
}
