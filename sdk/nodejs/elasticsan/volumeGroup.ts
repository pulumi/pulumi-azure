// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages an Elastic SAN Volume Group resource.
 *
 * ## Import
 *
 * An existing Elastic SAN Volume Group can be imported into Terraform using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:elasticsan/volumeGroup:VolumeGroup example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.ElasticSan/elasticSans/esan1/volumeGroups/vg1
 * ```
 */
export class VolumeGroup extends pulumi.CustomResource {
    /**
     * Get an existing VolumeGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeGroupState, opts?: pulumi.CustomResourceOptions): VolumeGroup {
        return new VolumeGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:elasticsan/volumeGroup:VolumeGroup';

    /**
     * Returns true if the given object is an instance of VolumeGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VolumeGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VolumeGroup.__pulumiType;
    }

    /**
     * Specifies the Elastic SAN ID within which this Elastic SAN Volume Group should exist. Changing this forces a new resource to be created.
     */
    public readonly elasticSanId!: pulumi.Output<string>;
    /**
     * An `encryption` block as defined below.
     *
     * > **NOTE:** The `encryption` block can only be set when `encryptionType` is set to `EncryptionAtRestWithCustomerManagedKey`.
     */
    public readonly encryption!: pulumi.Output<outputs.elasticsan.VolumeGroupEncryption | undefined>;
    /**
     * Specifies the type of the key used to encrypt the data of the disk. Possible values are `EncryptionAtRestWithCustomerManagedKey` and `EncryptionAtRestWithPlatformKey`. Defaults to `EncryptionAtRestWithPlatformKey`.
     */
    public readonly encryptionType!: pulumi.Output<string | undefined>;
    /**
     * An `identity` block as defined below. Specifies the Managed Identity which should be assigned to this Elastic SAN Volume Group.
     */
    public readonly identity!: pulumi.Output<outputs.elasticsan.VolumeGroupIdentity | undefined>;
    /**
     * Specifies the name of this Elastic SAN Volume Group. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * One or more `networkRule` blocks as defined below.
     */
    public readonly networkRules!: pulumi.Output<outputs.elasticsan.VolumeGroupNetworkRule[] | undefined>;
    /**
     * Specifies the type of the storage target. The only possible value is `Iscsi`. Defaults to `Iscsi`.
     */
    public readonly protocolType!: pulumi.Output<string | undefined>;

    /**
     * Create a VolumeGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeGroupArgs | VolumeGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeGroupState | undefined;
            resourceInputs["elasticSanId"] = state ? state.elasticSanId : undefined;
            resourceInputs["encryption"] = state ? state.encryption : undefined;
            resourceInputs["encryptionType"] = state ? state.encryptionType : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkRules"] = state ? state.networkRules : undefined;
            resourceInputs["protocolType"] = state ? state.protocolType : undefined;
        } else {
            const args = argsOrState as VolumeGroupArgs | undefined;
            if ((!args || args.elasticSanId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'elasticSanId'");
            }
            resourceInputs["elasticSanId"] = args ? args.elasticSanId : undefined;
            resourceInputs["encryption"] = args ? args.encryption : undefined;
            resourceInputs["encryptionType"] = args ? args.encryptionType : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkRules"] = args ? args.networkRules : undefined;
            resourceInputs["protocolType"] = args ? args.protocolType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VolumeGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VolumeGroup resources.
 */
export interface VolumeGroupState {
    /**
     * Specifies the Elastic SAN ID within which this Elastic SAN Volume Group should exist. Changing this forces a new resource to be created.
     */
    elasticSanId?: pulumi.Input<string>;
    /**
     * An `encryption` block as defined below.
     *
     * > **NOTE:** The `encryption` block can only be set when `encryptionType` is set to `EncryptionAtRestWithCustomerManagedKey`.
     */
    encryption?: pulumi.Input<inputs.elasticsan.VolumeGroupEncryption>;
    /**
     * Specifies the type of the key used to encrypt the data of the disk. Possible values are `EncryptionAtRestWithCustomerManagedKey` and `EncryptionAtRestWithPlatformKey`. Defaults to `EncryptionAtRestWithPlatformKey`.
     */
    encryptionType?: pulumi.Input<string>;
    /**
     * An `identity` block as defined below. Specifies the Managed Identity which should be assigned to this Elastic SAN Volume Group.
     */
    identity?: pulumi.Input<inputs.elasticsan.VolumeGroupIdentity>;
    /**
     * Specifies the name of this Elastic SAN Volume Group. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * One or more `networkRule` blocks as defined below.
     */
    networkRules?: pulumi.Input<pulumi.Input<inputs.elasticsan.VolumeGroupNetworkRule>[]>;
    /**
     * Specifies the type of the storage target. The only possible value is `Iscsi`. Defaults to `Iscsi`.
     */
    protocolType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VolumeGroup resource.
 */
export interface VolumeGroupArgs {
    /**
     * Specifies the Elastic SAN ID within which this Elastic SAN Volume Group should exist. Changing this forces a new resource to be created.
     */
    elasticSanId: pulumi.Input<string>;
    /**
     * An `encryption` block as defined below.
     *
     * > **NOTE:** The `encryption` block can only be set when `encryptionType` is set to `EncryptionAtRestWithCustomerManagedKey`.
     */
    encryption?: pulumi.Input<inputs.elasticsan.VolumeGroupEncryption>;
    /**
     * Specifies the type of the key used to encrypt the data of the disk. Possible values are `EncryptionAtRestWithCustomerManagedKey` and `EncryptionAtRestWithPlatformKey`. Defaults to `EncryptionAtRestWithPlatformKey`.
     */
    encryptionType?: pulumi.Input<string>;
    /**
     * An `identity` block as defined below. Specifies the Managed Identity which should be assigned to this Elastic SAN Volume Group.
     */
    identity?: pulumi.Input<inputs.elasticsan.VolumeGroupIdentity>;
    /**
     * Specifies the name of this Elastic SAN Volume Group. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * One or more `networkRule` blocks as defined below.
     */
    networkRules?: pulumi.Input<pulumi.Input<inputs.elasticsan.VolumeGroupNetworkRule>[]>;
    /**
     * Specifies the type of the storage target. The only possible value is `Iscsi`. Defaults to `Iscsi`.
     */
    protocolType?: pulumi.Input<string>;
}
