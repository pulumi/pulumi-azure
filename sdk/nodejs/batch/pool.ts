// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages an Azure Batch pool.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as fs from "fs";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleBatch_accountAccount = new azure.batch.Account("exampleBatch/accountAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     poolAllocationMode: "BatchService",
 *     storageAccountId: exampleAccount.id,
 *     storageAccountAuthenticationMode: "StorageKeys",
 *     tags: {
 *         env: "test",
 *     },
 * });
 * const exampleCertificate = new azure.batch.Certificate("exampleCertificate", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     accountName: exampleBatch / accountAccount.name,
 *     certificate: fs.readFileSync("certificate.cer", { encoding: "base64" }),
 *     format: "Cer",
 *     thumbprint: "312d31a79fa0cef49c00f769afc2b73e9f4edf34",
 *     thumbprintAlgorithm: "SHA1",
 * });
 * const examplePool = new azure.batch.Pool("examplePool", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     accountName: exampleBatch / accountAccount.name,
 *     displayName: "Test Acc Pool Auto",
 *     vmSize: "Standard_A1",
 *     nodeAgentSkuId: "batch.node.ubuntu 20.04",
 *     autoScale: {
 *         evaluationInterval: "PT15M",
 *         formula: `      startingNumberOfVMs = 1;
 *       maxNumberofVMs = 25;
 *       pendingTaskSamplePercent = $PendingTasks.GetSamplePercent(180 * TimeInterval_Second);
 *       pendingTaskSamples = pendingTaskSamplePercent < 70 ? startingNumberOfVMs : avg($PendingTasks.GetSample(180 *   TimeInterval_Second));
 *       $TargetDedicatedNodes=min(maxNumberofVMs, pendingTaskSamples);
 * `,
 *     },
 *     storageImageReference: {
 *         publisher: "microsoft-azure-batch",
 *         offer: "ubuntu-server-container",
 *         sku: "20-04-lts",
 *         version: "latest",
 *     },
 *     containerConfiguration: {
 *         type: "DockerCompatible",
 *         containerRegistries: [{
 *             registryServer: "docker.io",
 *             userName: "login",
 *             password: "apassword",
 *         }],
 *     },
 *     startTask: {
 *         commandLine: "echo 'Hello World from $env'",
 *         taskRetryMaximum: 1,
 *         waitForSuccess: true,
 *         commonEnvironmentProperties: {
 *             env: "TEST",
 *         },
 *         userIdentity: {
 *             autoUser: {
 *                 elevationLevel: "NonAdmin",
 *                 scope: "Task",
 *             },
 *         },
 *     },
 *     certificates: [{
 *         id: exampleCertificate.id,
 *         storeLocation: "CurrentUser",
 *         visibilities: ["StartTask"],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Batch Pools can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:batch/pool:Pool example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup1/providers/Microsoft.Batch/batchAccounts/myBatchAccount1/pools/myBatchPool1
 * ```
 */
export class Pool extends pulumi.CustomResource {
    /**
     * Get an existing Pool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PoolState, opts?: pulumi.CustomResourceOptions): Pool {
        return new Pool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure:batch/pool:Pool';

    /**
     * Returns true if the given object is an instance of Pool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Pool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pool.__pulumiType;
    }

    /**
     * Specifies the name of the Batch account in which the pool will be created. Changing this forces a new resource to be created.
     */
    public readonly accountName!: pulumi.Output<string>;
    /**
     * A `autoScale` block that describes the scale settings when using auto scale as defined below.
     */
    public readonly autoScale!: pulumi.Output<outputs.batch.PoolAutoScale | undefined>;
    /**
     * One or more `certificate` blocks that describe the certificates to be installed on each compute node in the pool as defined below.
     */
    public readonly certificates!: pulumi.Output<outputs.batch.PoolCertificate[] | undefined>;
    /**
     * The container configuration used in the pool's VMs. One `containerConfiguration` block as defined below.
     */
    public readonly containerConfiguration!: pulumi.Output<outputs.batch.PoolContainerConfiguration | undefined>;
    /**
     * A `dataDisks` block describes the data disk settings as defined below.
     */
    public readonly dataDisks!: pulumi.Output<outputs.batch.PoolDataDisk[] | undefined>;
    /**
     * A `diskEncryption` block, as defined below, describes the disk encryption configuration applied on compute nodes in the pool. Disk encryption configuration is not supported on Linux pool created with Virtual Machine Image or Shared Image Gallery Image.
     */
    public readonly diskEncryptions!: pulumi.Output<outputs.batch.PoolDiskEncryption[] | undefined>;
    /**
     * Specifies the display name of the Batch pool. Changing this forces a new resource to be created.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * An `extensions` block as defined below.
     */
    public readonly extensions!: pulumi.Output<outputs.batch.PoolExtension[] | undefined>;
    /**
     * A `fixedScale` block that describes the scale settings when using fixed scale as defined below.
     */
    public readonly fixedScale!: pulumi.Output<outputs.batch.PoolFixedScale | undefined>;
    /**
     * An `identity` block as defined below.
     */
    public readonly identity!: pulumi.Output<outputs.batch.PoolIdentity | undefined>;
    /**
     * Whether the pool permits direct communication between nodes. This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. Values allowed are `Disabled` and `Enabled`. Defaults to `Enabled`.
     */
    public readonly interNodeCommunication!: pulumi.Output<string | undefined>;
    /**
     * The type of on-premises license to be used when deploying the operating system. This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are: "Windows_Server" - The on-premises license is for Windows Server. "Windows_Client" - The on-premises license is for Windows Client.
     */
    public readonly licenseType!: pulumi.Output<string | undefined>;
    /**
     * Specifies the maximum number of tasks that can run concurrently on a single compute node in the pool. Defaults to `1`. Changing this forces a new resource to be created.
     */
    public readonly maxTasksPerNode!: pulumi.Output<number | undefined>;
    /**
     * A map of custom batch pool metadata.
     */
    public readonly metadata!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A `mount` block defined as below.
     */
    public readonly mounts!: pulumi.Output<outputs.batch.PoolMount[] | undefined>;
    /**
     * Specifies the name of the Batch pool. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A `networkConfiguration` block that describes the network configurations for the Batch pool as defined below. Changing this forces a new resource to be created.
     */
    public readonly networkConfiguration!: pulumi.Output<outputs.batch.PoolNetworkConfiguration | undefined>;
    /**
     * Specifies the SKU of the node agents that will be created in the Batch pool. Changing this forces a new resource to be created.
     */
    public readonly nodeAgentSkuId!: pulumi.Output<string>;
    /**
     * A `nodePlacement` block that describes the placement policy for allocating nodes in the pool as defined below.
     */
    public readonly nodePlacements!: pulumi.Output<outputs.batch.PoolNodePlacement[] | undefined>;
    /**
     * Specifies the ephemeral disk placement for operating system disk for all VMs in the pool. This property can be used by user in the request to choose which location the operating system should be in. e.g., cache disk space for Ephemeral OS disk provisioning. For more information on Ephemeral OS disk size requirements, please refer to Ephemeral OS disk size requirements for Windows VMs at <https://docs.microsoft.com/en-us/azure/virtual-machines/windows/ephemeral-os-disks#size-requirements> and Linux VMs at <https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ephemeral-os-disks#size-requirements>. The only possible value is `CacheDisk`.
     */
    public readonly osDiskPlacement!: pulumi.Output<string | undefined>;
    /**
     * The name of the resource group in which to create the Batch pool. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * A `startTask` block that describes the start task settings for the Batch pool as defined below.
     */
    public readonly startTask!: pulumi.Output<outputs.batch.PoolStartTask | undefined>;
    /**
     * Whether to stop if there is a pending resize operation on this pool.
     */
    public readonly stopPendingResizeOperation!: pulumi.Output<boolean | undefined>;
    /**
     * A `storageImageReference` block for the virtual machines that will compose the Batch pool as defined below. Changing this forces a new resource to be created.
     */
    public readonly storageImageReference!: pulumi.Output<outputs.batch.PoolStorageImageReference>;
    /**
     * The desired node communication mode for the pool. Possible values are `Classic`, `Default` and `Simplified`.
     */
    public readonly targetNodeCommunicationMode!: pulumi.Output<string | undefined>;
    /**
     * A `taskSchedulingPolicy` block that describes how tasks are distributed across compute nodes in a pool as defined below. If not specified, the default is spread as defined below.
     */
    public readonly taskSchedulingPolicies!: pulumi.Output<outputs.batch.PoolTaskSchedulingPolicy[]>;
    /**
     * A `userAccounts` block that describes the list of user accounts to be created on each node in the pool as defined below.
     */
    public readonly userAccounts!: pulumi.Output<outputs.batch.PoolUserAccount[] | undefined>;
    /**
     * Specifies the size of the VM created in the Batch pool. Changing this forces a new resource to be created.
     */
    public readonly vmSize!: pulumi.Output<string>;
    /**
     * A `windows` block that describes the Windows configuration in the pool as defined below.
     *
     * > **NOTE:** For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable `AZ_BATCH_CERTIFICATES_DIR` is supplied to the task to query for this location. For certificates with visibility of `remoteUser`, a `certs` directory is created in the user's home directory (e.g., `/home/{user-name}/certs`) and certificates are placed in that directory.
     *
     * > **Please Note:** `fixedScale` and `autoScale` blocks cannot be used both at the same time.
     */
    public readonly windows!: pulumi.Output<outputs.batch.PoolWindow[] | undefined>;

    /**
     * Create a Pool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PoolArgs | PoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PoolState | undefined;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["autoScale"] = state ? state.autoScale : undefined;
            resourceInputs["certificates"] = state ? state.certificates : undefined;
            resourceInputs["containerConfiguration"] = state ? state.containerConfiguration : undefined;
            resourceInputs["dataDisks"] = state ? state.dataDisks : undefined;
            resourceInputs["diskEncryptions"] = state ? state.diskEncryptions : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["extensions"] = state ? state.extensions : undefined;
            resourceInputs["fixedScale"] = state ? state.fixedScale : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["interNodeCommunication"] = state ? state.interNodeCommunication : undefined;
            resourceInputs["licenseType"] = state ? state.licenseType : undefined;
            resourceInputs["maxTasksPerNode"] = state ? state.maxTasksPerNode : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["mounts"] = state ? state.mounts : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkConfiguration"] = state ? state.networkConfiguration : undefined;
            resourceInputs["nodeAgentSkuId"] = state ? state.nodeAgentSkuId : undefined;
            resourceInputs["nodePlacements"] = state ? state.nodePlacements : undefined;
            resourceInputs["osDiskPlacement"] = state ? state.osDiskPlacement : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["startTask"] = state ? state.startTask : undefined;
            resourceInputs["stopPendingResizeOperation"] = state ? state.stopPendingResizeOperation : undefined;
            resourceInputs["storageImageReference"] = state ? state.storageImageReference : undefined;
            resourceInputs["targetNodeCommunicationMode"] = state ? state.targetNodeCommunicationMode : undefined;
            resourceInputs["taskSchedulingPolicies"] = state ? state.taskSchedulingPolicies : undefined;
            resourceInputs["userAccounts"] = state ? state.userAccounts : undefined;
            resourceInputs["vmSize"] = state ? state.vmSize : undefined;
            resourceInputs["windows"] = state ? state.windows : undefined;
        } else {
            const args = argsOrState as PoolArgs | undefined;
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.nodeAgentSkuId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeAgentSkuId'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.storageImageReference === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageImageReference'");
            }
            if ((!args || args.vmSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmSize'");
            }
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["autoScale"] = args ? args.autoScale : undefined;
            resourceInputs["certificates"] = args ? args.certificates : undefined;
            resourceInputs["containerConfiguration"] = args ? args.containerConfiguration : undefined;
            resourceInputs["dataDisks"] = args ? args.dataDisks : undefined;
            resourceInputs["diskEncryptions"] = args ? args.diskEncryptions : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["extensions"] = args ? args.extensions : undefined;
            resourceInputs["fixedScale"] = args ? args.fixedScale : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["interNodeCommunication"] = args ? args.interNodeCommunication : undefined;
            resourceInputs["licenseType"] = args ? args.licenseType : undefined;
            resourceInputs["maxTasksPerNode"] = args ? args.maxTasksPerNode : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["mounts"] = args ? args.mounts : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkConfiguration"] = args ? args.networkConfiguration : undefined;
            resourceInputs["nodeAgentSkuId"] = args ? args.nodeAgentSkuId : undefined;
            resourceInputs["nodePlacements"] = args ? args.nodePlacements : undefined;
            resourceInputs["osDiskPlacement"] = args ? args.osDiskPlacement : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["startTask"] = args ? args.startTask : undefined;
            resourceInputs["stopPendingResizeOperation"] = args ? args.stopPendingResizeOperation : undefined;
            resourceInputs["storageImageReference"] = args ? args.storageImageReference : undefined;
            resourceInputs["targetNodeCommunicationMode"] = args ? args.targetNodeCommunicationMode : undefined;
            resourceInputs["taskSchedulingPolicies"] = args ? args.taskSchedulingPolicies : undefined;
            resourceInputs["userAccounts"] = args ? args.userAccounts : undefined;
            resourceInputs["vmSize"] = args ? args.vmSize : undefined;
            resourceInputs["windows"] = args ? args.windows : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Pool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Pool resources.
 */
export interface PoolState {
    /**
     * Specifies the name of the Batch account in which the pool will be created. Changing this forces a new resource to be created.
     */
    accountName?: pulumi.Input<string>;
    /**
     * A `autoScale` block that describes the scale settings when using auto scale as defined below.
     */
    autoScale?: pulumi.Input<inputs.batch.PoolAutoScale>;
    /**
     * One or more `certificate` blocks that describe the certificates to be installed on each compute node in the pool as defined below.
     */
    certificates?: pulumi.Input<pulumi.Input<inputs.batch.PoolCertificate>[]>;
    /**
     * The container configuration used in the pool's VMs. One `containerConfiguration` block as defined below.
     */
    containerConfiguration?: pulumi.Input<inputs.batch.PoolContainerConfiguration>;
    /**
     * A `dataDisks` block describes the data disk settings as defined below.
     */
    dataDisks?: pulumi.Input<pulumi.Input<inputs.batch.PoolDataDisk>[]>;
    /**
     * A `diskEncryption` block, as defined below, describes the disk encryption configuration applied on compute nodes in the pool. Disk encryption configuration is not supported on Linux pool created with Virtual Machine Image or Shared Image Gallery Image.
     */
    diskEncryptions?: pulumi.Input<pulumi.Input<inputs.batch.PoolDiskEncryption>[]>;
    /**
     * Specifies the display name of the Batch pool. Changing this forces a new resource to be created.
     */
    displayName?: pulumi.Input<string>;
    /**
     * An `extensions` block as defined below.
     */
    extensions?: pulumi.Input<pulumi.Input<inputs.batch.PoolExtension>[]>;
    /**
     * A `fixedScale` block that describes the scale settings when using fixed scale as defined below.
     */
    fixedScale?: pulumi.Input<inputs.batch.PoolFixedScale>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.batch.PoolIdentity>;
    /**
     * Whether the pool permits direct communication between nodes. This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. Values allowed are `Disabled` and `Enabled`. Defaults to `Enabled`.
     */
    interNodeCommunication?: pulumi.Input<string>;
    /**
     * The type of on-premises license to be used when deploying the operating system. This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are: "Windows_Server" - The on-premises license is for Windows Server. "Windows_Client" - The on-premises license is for Windows Client.
     */
    licenseType?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of tasks that can run concurrently on a single compute node in the pool. Defaults to `1`. Changing this forces a new resource to be created.
     */
    maxTasksPerNode?: pulumi.Input<number>;
    /**
     * A map of custom batch pool metadata.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A `mount` block defined as below.
     */
    mounts?: pulumi.Input<pulumi.Input<inputs.batch.PoolMount>[]>;
    /**
     * Specifies the name of the Batch pool. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A `networkConfiguration` block that describes the network configurations for the Batch pool as defined below. Changing this forces a new resource to be created.
     */
    networkConfiguration?: pulumi.Input<inputs.batch.PoolNetworkConfiguration>;
    /**
     * Specifies the SKU of the node agents that will be created in the Batch pool. Changing this forces a new resource to be created.
     */
    nodeAgentSkuId?: pulumi.Input<string>;
    /**
     * A `nodePlacement` block that describes the placement policy for allocating nodes in the pool as defined below.
     */
    nodePlacements?: pulumi.Input<pulumi.Input<inputs.batch.PoolNodePlacement>[]>;
    /**
     * Specifies the ephemeral disk placement for operating system disk for all VMs in the pool. This property can be used by user in the request to choose which location the operating system should be in. e.g., cache disk space for Ephemeral OS disk provisioning. For more information on Ephemeral OS disk size requirements, please refer to Ephemeral OS disk size requirements for Windows VMs at <https://docs.microsoft.com/en-us/azure/virtual-machines/windows/ephemeral-os-disks#size-requirements> and Linux VMs at <https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ephemeral-os-disks#size-requirements>. The only possible value is `CacheDisk`.
     */
    osDiskPlacement?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the Batch pool. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A `startTask` block that describes the start task settings for the Batch pool as defined below.
     */
    startTask?: pulumi.Input<inputs.batch.PoolStartTask>;
    /**
     * Whether to stop if there is a pending resize operation on this pool.
     */
    stopPendingResizeOperation?: pulumi.Input<boolean>;
    /**
     * A `storageImageReference` block for the virtual machines that will compose the Batch pool as defined below. Changing this forces a new resource to be created.
     */
    storageImageReference?: pulumi.Input<inputs.batch.PoolStorageImageReference>;
    /**
     * The desired node communication mode for the pool. Possible values are `Classic`, `Default` and `Simplified`.
     */
    targetNodeCommunicationMode?: pulumi.Input<string>;
    /**
     * A `taskSchedulingPolicy` block that describes how tasks are distributed across compute nodes in a pool as defined below. If not specified, the default is spread as defined below.
     */
    taskSchedulingPolicies?: pulumi.Input<pulumi.Input<inputs.batch.PoolTaskSchedulingPolicy>[]>;
    /**
     * A `userAccounts` block that describes the list of user accounts to be created on each node in the pool as defined below.
     */
    userAccounts?: pulumi.Input<pulumi.Input<inputs.batch.PoolUserAccount>[]>;
    /**
     * Specifies the size of the VM created in the Batch pool. Changing this forces a new resource to be created.
     */
    vmSize?: pulumi.Input<string>;
    /**
     * A `windows` block that describes the Windows configuration in the pool as defined below.
     *
     * > **NOTE:** For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable `AZ_BATCH_CERTIFICATES_DIR` is supplied to the task to query for this location. For certificates with visibility of `remoteUser`, a `certs` directory is created in the user's home directory (e.g., `/home/{user-name}/certs`) and certificates are placed in that directory.
     *
     * > **Please Note:** `fixedScale` and `autoScale` blocks cannot be used both at the same time.
     */
    windows?: pulumi.Input<pulumi.Input<inputs.batch.PoolWindow>[]>;
}

/**
 * The set of arguments for constructing a Pool resource.
 */
export interface PoolArgs {
    /**
     * Specifies the name of the Batch account in which the pool will be created. Changing this forces a new resource to be created.
     */
    accountName: pulumi.Input<string>;
    /**
     * A `autoScale` block that describes the scale settings when using auto scale as defined below.
     */
    autoScale?: pulumi.Input<inputs.batch.PoolAutoScale>;
    /**
     * One or more `certificate` blocks that describe the certificates to be installed on each compute node in the pool as defined below.
     */
    certificates?: pulumi.Input<pulumi.Input<inputs.batch.PoolCertificate>[]>;
    /**
     * The container configuration used in the pool's VMs. One `containerConfiguration` block as defined below.
     */
    containerConfiguration?: pulumi.Input<inputs.batch.PoolContainerConfiguration>;
    /**
     * A `dataDisks` block describes the data disk settings as defined below.
     */
    dataDisks?: pulumi.Input<pulumi.Input<inputs.batch.PoolDataDisk>[]>;
    /**
     * A `diskEncryption` block, as defined below, describes the disk encryption configuration applied on compute nodes in the pool. Disk encryption configuration is not supported on Linux pool created with Virtual Machine Image or Shared Image Gallery Image.
     */
    diskEncryptions?: pulumi.Input<pulumi.Input<inputs.batch.PoolDiskEncryption>[]>;
    /**
     * Specifies the display name of the Batch pool. Changing this forces a new resource to be created.
     */
    displayName?: pulumi.Input<string>;
    /**
     * An `extensions` block as defined below.
     */
    extensions?: pulumi.Input<pulumi.Input<inputs.batch.PoolExtension>[]>;
    /**
     * A `fixedScale` block that describes the scale settings when using fixed scale as defined below.
     */
    fixedScale?: pulumi.Input<inputs.batch.PoolFixedScale>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.batch.PoolIdentity>;
    /**
     * Whether the pool permits direct communication between nodes. This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. Values allowed are `Disabled` and `Enabled`. Defaults to `Enabled`.
     */
    interNodeCommunication?: pulumi.Input<string>;
    /**
     * The type of on-premises license to be used when deploying the operating system. This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are: "Windows_Server" - The on-premises license is for Windows Server. "Windows_Client" - The on-premises license is for Windows Client.
     */
    licenseType?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of tasks that can run concurrently on a single compute node in the pool. Defaults to `1`. Changing this forces a new resource to be created.
     */
    maxTasksPerNode?: pulumi.Input<number>;
    /**
     * A map of custom batch pool metadata.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A `mount` block defined as below.
     */
    mounts?: pulumi.Input<pulumi.Input<inputs.batch.PoolMount>[]>;
    /**
     * Specifies the name of the Batch pool. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A `networkConfiguration` block that describes the network configurations for the Batch pool as defined below. Changing this forces a new resource to be created.
     */
    networkConfiguration?: pulumi.Input<inputs.batch.PoolNetworkConfiguration>;
    /**
     * Specifies the SKU of the node agents that will be created in the Batch pool. Changing this forces a new resource to be created.
     */
    nodeAgentSkuId: pulumi.Input<string>;
    /**
     * A `nodePlacement` block that describes the placement policy for allocating nodes in the pool as defined below.
     */
    nodePlacements?: pulumi.Input<pulumi.Input<inputs.batch.PoolNodePlacement>[]>;
    /**
     * Specifies the ephemeral disk placement for operating system disk for all VMs in the pool. This property can be used by user in the request to choose which location the operating system should be in. e.g., cache disk space for Ephemeral OS disk provisioning. For more information on Ephemeral OS disk size requirements, please refer to Ephemeral OS disk size requirements for Windows VMs at <https://docs.microsoft.com/en-us/azure/virtual-machines/windows/ephemeral-os-disks#size-requirements> and Linux VMs at <https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ephemeral-os-disks#size-requirements>. The only possible value is `CacheDisk`.
     */
    osDiskPlacement?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to create the Batch pool. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A `startTask` block that describes the start task settings for the Batch pool as defined below.
     */
    startTask?: pulumi.Input<inputs.batch.PoolStartTask>;
    /**
     * Whether to stop if there is a pending resize operation on this pool.
     */
    stopPendingResizeOperation?: pulumi.Input<boolean>;
    /**
     * A `storageImageReference` block for the virtual machines that will compose the Batch pool as defined below. Changing this forces a new resource to be created.
     */
    storageImageReference: pulumi.Input<inputs.batch.PoolStorageImageReference>;
    /**
     * The desired node communication mode for the pool. Possible values are `Classic`, `Default` and `Simplified`.
     */
    targetNodeCommunicationMode?: pulumi.Input<string>;
    /**
     * A `taskSchedulingPolicy` block that describes how tasks are distributed across compute nodes in a pool as defined below. If not specified, the default is spread as defined below.
     */
    taskSchedulingPolicies?: pulumi.Input<pulumi.Input<inputs.batch.PoolTaskSchedulingPolicy>[]>;
    /**
     * A `userAccounts` block that describes the list of user accounts to be created on each node in the pool as defined below.
     */
    userAccounts?: pulumi.Input<pulumi.Input<inputs.batch.PoolUserAccount>[]>;
    /**
     * Specifies the size of the VM created in the Batch pool. Changing this forces a new resource to be created.
     */
    vmSize: pulumi.Input<string>;
    /**
     * A `windows` block that describes the Windows configuration in the pool as defined below.
     *
     * > **NOTE:** For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable `AZ_BATCH_CERTIFICATES_DIR` is supplied to the task to query for this location. For certificates with visibility of `remoteUser`, a `certs` directory is created in the user's home directory (e.g., `/home/{user-name}/certs`) and certificates are placed in that directory.
     *
     * > **Please Note:** `fixedScale` and `autoScale` blocks cannot be used both at the same time.
     */
    windows?: pulumi.Input<pulumi.Input<inputs.batch.PoolWindow>[]>;
}
