// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.inputs;

import com.pulumi.azure.appservice.inputs.WindowsWebAppSlotSiteConfigApplicationStackArgs;
import com.pulumi.azure.appservice.inputs.WindowsWebAppSlotSiteConfigAutoHealSettingArgs;
import com.pulumi.azure.appservice.inputs.WindowsWebAppSlotSiteConfigCorsArgs;
import com.pulumi.azure.appservice.inputs.WindowsWebAppSlotSiteConfigIpRestrictionArgs;
import com.pulumi.azure.appservice.inputs.WindowsWebAppSlotSiteConfigScmIpRestrictionArgs;
import com.pulumi.azure.appservice.inputs.WindowsWebAppSlotSiteConfigVirtualApplicationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WindowsWebAppSlotSiteConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final WindowsWebAppSlotSiteConfigArgs Empty = new WindowsWebAppSlotSiteConfigArgs();

    /**
     * If this Windows Web App Slot is Always On enabled. Defaults to `true`.
     * 
     */
    @Import(name="alwaysOn")
    private @Nullable Output<Boolean> alwaysOn;

    /**
     * @return If this Windows Web App Slot is Always On enabled. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> alwaysOn() {
        return Optional.ofNullable(this.alwaysOn);
    }

    /**
     * The URL to the API Definition for this Windows Web App Slot.
     * 
     */
    @Import(name="apiDefinitionUrl")
    private @Nullable Output<String> apiDefinitionUrl;

    /**
     * @return The URL to the API Definition for this Windows Web App Slot.
     * 
     */
    public Optional<Output<String>> apiDefinitionUrl() {
        return Optional.ofNullable(this.apiDefinitionUrl);
    }

    /**
     * The API Management API ID this Windows Web App Slot os associated with.
     * 
     */
    @Import(name="apiManagementApiId")
    private @Nullable Output<String> apiManagementApiId;

    /**
     * @return The API Management API ID this Windows Web App Slot os associated with.
     * 
     */
    public Optional<Output<String>> apiManagementApiId() {
        return Optional.ofNullable(this.apiManagementApiId);
    }

    /**
     * The App command line to launch.
     * 
     */
    @Import(name="appCommandLine")
    private @Nullable Output<String> appCommandLine;

    /**
     * @return The App command line to launch.
     * 
     */
    public Optional<Output<String>> appCommandLine() {
        return Optional.ofNullable(this.appCommandLine);
    }

    /**
     * A `application_stack` block as defined above.
     * 
     */
    @Import(name="applicationStack")
    private @Nullable Output<WindowsWebAppSlotSiteConfigApplicationStackArgs> applicationStack;

    /**
     * @return A `application_stack` block as defined above.
     * 
     */
    public Optional<Output<WindowsWebAppSlotSiteConfigApplicationStackArgs>> applicationStack() {
        return Optional.ofNullable(this.applicationStack);
    }

    /**
     * Should Auto heal rules be enabled. Required with `auto_heal_setting`.
     * 
     */
    @Import(name="autoHealEnabled")
    private @Nullable Output<Boolean> autoHealEnabled;

    /**
     * @return Should Auto heal rules be enabled. Required with `auto_heal_setting`.
     * 
     */
    public Optional<Output<Boolean>> autoHealEnabled() {
        return Optional.ofNullable(this.autoHealEnabled);
    }

    /**
     * A `auto_heal_setting` block as defined above. Required with `auto_heal`.
     * 
     */
    @Import(name="autoHealSetting")
    private @Nullable Output<WindowsWebAppSlotSiteConfigAutoHealSettingArgs> autoHealSetting;

    /**
     * @return A `auto_heal_setting` block as defined above. Required with `auto_heal`.
     * 
     */
    public Optional<Output<WindowsWebAppSlotSiteConfigAutoHealSettingArgs>> autoHealSetting() {
        return Optional.ofNullable(this.autoHealSetting);
    }

    /**
     * The Windows Web App Slot Name to automatically swap to when deployment to that slot is successfully completed.
     * 
     * &gt; **Note:** This must be a valid slot name on the target Windows Web App Slot.
     * 
     */
    @Import(name="autoSwapSlotName")
    private @Nullable Output<String> autoSwapSlotName;

    /**
     * @return The Windows Web App Slot Name to automatically swap to when deployment to that slot is successfully completed.
     * 
     * &gt; **Note:** This must be a valid slot name on the target Windows Web App Slot.
     * 
     */
    public Optional<Output<String>> autoSwapSlotName() {
        return Optional.ofNullable(this.autoSwapSlotName);
    }

    /**
     * The Client ID of the Managed Service Identity to use for connections to the Azure Container Registry.
     * 
     */
    @Import(name="containerRegistryManagedIdentityClientId")
    private @Nullable Output<String> containerRegistryManagedIdentityClientId;

    /**
     * @return The Client ID of the Managed Service Identity to use for connections to the Azure Container Registry.
     * 
     */
    public Optional<Output<String>> containerRegistryManagedIdentityClientId() {
        return Optional.ofNullable(this.containerRegistryManagedIdentityClientId);
    }

    /**
     * Should connections for Azure Container Registry use Managed Identity.
     * 
     */
    @Import(name="containerRegistryUseManagedIdentity")
    private @Nullable Output<Boolean> containerRegistryUseManagedIdentity;

    /**
     * @return Should connections for Azure Container Registry use Managed Identity.
     * 
     */
    public Optional<Output<Boolean>> containerRegistryUseManagedIdentity() {
        return Optional.ofNullable(this.containerRegistryUseManagedIdentity);
    }

    /**
     * A `cors` block as defined above.
     * 
     */
    @Import(name="cors")
    private @Nullable Output<WindowsWebAppSlotSiteConfigCorsArgs> cors;

    /**
     * @return A `cors` block as defined above.
     * 
     */
    public Optional<Output<WindowsWebAppSlotSiteConfigCorsArgs>> cors() {
        return Optional.ofNullable(this.cors);
    }

    /**
     * Specifies a list of Default Documents for the Windows Web App Slot.
     * 
     */
    @Import(name="defaultDocuments")
    private @Nullable Output<List<String>> defaultDocuments;

    /**
     * @return Specifies a list of Default Documents for the Windows Web App Slot.
     * 
     */
    public Optional<Output<List<String>>> defaultDocuments() {
        return Optional.ofNullable(this.defaultDocuments);
    }

    @Import(name="detailedErrorLoggingEnabled")
    private @Nullable Output<Boolean> detailedErrorLoggingEnabled;

    public Optional<Output<Boolean>> detailedErrorLoggingEnabled() {
        return Optional.ofNullable(this.detailedErrorLoggingEnabled);
    }

    @Import(name="ftpsState")
    private @Nullable Output<String> ftpsState;

    public Optional<Output<String>> ftpsState() {
        return Optional.ofNullable(this.ftpsState);
    }

    /**
     * The amount of time in minutes that a node can be unhealthy before being removed from the load balancer. Possible values are between `2` and `10`. Only valid in conjunction with `health_check_path`.
     * 
     */
    @Import(name="healthCheckEvictionTimeInMin")
    private @Nullable Output<Integer> healthCheckEvictionTimeInMin;

    /**
     * @return The amount of time in minutes that a node can be unhealthy before being removed from the load balancer. Possible values are between `2` and `10`. Only valid in conjunction with `health_check_path`.
     * 
     */
    public Optional<Output<Integer>> healthCheckEvictionTimeInMin() {
        return Optional.ofNullable(this.healthCheckEvictionTimeInMin);
    }

    /**
     * The path to the Health Check.
     * 
     */
    @Import(name="healthCheckPath")
    private @Nullable Output<String> healthCheckPath;

    /**
     * @return The path to the Health Check.
     * 
     */
    public Optional<Output<String>> healthCheckPath() {
        return Optional.ofNullable(this.healthCheckPath);
    }

    /**
     * Should the HTTP2 be enabled?
     * 
     */
    @Import(name="http2Enabled")
    private @Nullable Output<Boolean> http2Enabled;

    /**
     * @return Should the HTTP2 be enabled?
     * 
     */
    public Optional<Output<Boolean>> http2Enabled() {
        return Optional.ofNullable(this.http2Enabled);
    }

    /**
     * One or more `ip_restriction` blocks as defined above.
     * 
     */
    @Import(name="ipRestrictions")
    private @Nullable Output<List<WindowsWebAppSlotSiteConfigIpRestrictionArgs>> ipRestrictions;

    /**
     * @return One or more `ip_restriction` blocks as defined above.
     * 
     */
    public Optional<Output<List<WindowsWebAppSlotSiteConfigIpRestrictionArgs>>> ipRestrictions() {
        return Optional.ofNullable(this.ipRestrictions);
    }

    /**
     * The Site load balancing. Possible values include: `WeightedRoundRobin`, `LeastRequests`, `LeastResponseTime`, `WeightedTotalTraffic`, `RequestHash`, `PerSiteRoundRobin`. Defaults to `LeastRequests` if omitted.
     * 
     */
    @Import(name="loadBalancingMode")
    private @Nullable Output<String> loadBalancingMode;

    /**
     * @return The Site load balancing. Possible values include: `WeightedRoundRobin`, `LeastRequests`, `LeastResponseTime`, `WeightedTotalTraffic`, `RequestHash`, `PerSiteRoundRobin`. Defaults to `LeastRequests` if omitted.
     * 
     */
    public Optional<Output<String>> loadBalancingMode() {
        return Optional.ofNullable(this.loadBalancingMode);
    }

    /**
     * Use Local MySQL. Defaults to `false`.
     * 
     */
    @Import(name="localMysqlEnabled")
    private @Nullable Output<Boolean> localMysqlEnabled;

    /**
     * @return Use Local MySQL. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> localMysqlEnabled() {
        return Optional.ofNullable(this.localMysqlEnabled);
    }

    /**
     * Managed pipeline mode. Possible values include: `Integrated`, `Classic`. Defaults to `Integrated`.
     * 
     */
    @Import(name="managedPipelineMode")
    private @Nullable Output<String> managedPipelineMode;

    /**
     * @return Managed pipeline mode. Possible values include: `Integrated`, `Classic`. Defaults to `Integrated`.
     * 
     */
    public Optional<Output<String>> managedPipelineMode() {
        return Optional.ofNullable(this.managedPipelineMode);
    }

    /**
     * The configures the minimum version of TLS required for SSL requests. Possible values include: `1.0`, `1.1`, and `1.2`. Defaults to `1.2`.
     * 
     */
    @Import(name="minimumTlsVersion")
    private @Nullable Output<String> minimumTlsVersion;

    /**
     * @return The configures the minimum version of TLS required for SSL requests. Possible values include: `1.0`, `1.1`, and `1.2`. Defaults to `1.2`.
     * 
     */
    public Optional<Output<String>> minimumTlsVersion() {
        return Optional.ofNullable(this.minimumTlsVersion);
    }

    /**
     * Should Remote Debugging be enabled. Defaults to `false`.
     * 
     */
    @Import(name="remoteDebuggingEnabled")
    private @Nullable Output<Boolean> remoteDebuggingEnabled;

    /**
     * @return Should Remote Debugging be enabled. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> remoteDebuggingEnabled() {
        return Optional.ofNullable(this.remoteDebuggingEnabled);
    }

    /**
     * The Remote Debugging Version. Possible values include `VS2017` and `VS2019`
     * 
     */
    @Import(name="remoteDebuggingVersion")
    private @Nullable Output<String> remoteDebuggingVersion;

    /**
     * @return The Remote Debugging Version. Possible values include `VS2017` and `VS2019`
     * 
     */
    public Optional<Output<String>> remoteDebuggingVersion() {
        return Optional.ofNullable(this.remoteDebuggingVersion);
    }

    /**
     * One or more `scm_ip_restriction` blocks as defined above.
     * 
     */
    @Import(name="scmIpRestrictions")
    private @Nullable Output<List<WindowsWebAppSlotSiteConfigScmIpRestrictionArgs>> scmIpRestrictions;

    /**
     * @return One or more `scm_ip_restriction` blocks as defined above.
     * 
     */
    public Optional<Output<List<WindowsWebAppSlotSiteConfigScmIpRestrictionArgs>>> scmIpRestrictions() {
        return Optional.ofNullable(this.scmIpRestrictions);
    }

    /**
     * The configures the minimum version of TLS required for SSL requests to the SCM site Possible values include: `1.0`, `1.1`, and `1.2`. Defaults to `1.2`.
     * 
     */
    @Import(name="scmMinimumTlsVersion")
    private @Nullable Output<String> scmMinimumTlsVersion;

    /**
     * @return The configures the minimum version of TLS required for SSL requests to the SCM site Possible values include: `1.0`, `1.1`, and `1.2`. Defaults to `1.2`.
     * 
     */
    public Optional<Output<String>> scmMinimumTlsVersion() {
        return Optional.ofNullable(this.scmMinimumTlsVersion);
    }

    @Import(name="scmType")
    private @Nullable Output<String> scmType;

    public Optional<Output<String>> scmType() {
        return Optional.ofNullable(this.scmType);
    }

    /**
     * Should the Windows Web App Slot `ip_restriction` configuration be used for the SCM also.
     * 
     */
    @Import(name="scmUseMainIpRestriction")
    private @Nullable Output<Boolean> scmUseMainIpRestriction;

    /**
     * @return Should the Windows Web App Slot `ip_restriction` configuration be used for the SCM also.
     * 
     */
    public Optional<Output<Boolean>> scmUseMainIpRestriction() {
        return Optional.ofNullable(this.scmUseMainIpRestriction);
    }

    /**
     * Should the Windows Web App Slotuse a 32-bit worker. Defaults to `true`.
     * 
     */
    @Import(name="use32BitWorker")
    private @Nullable Output<Boolean> use32BitWorker;

    /**
     * @return Should the Windows Web App Slotuse a 32-bit worker. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> use32BitWorker() {
        return Optional.ofNullable(this.use32BitWorker);
    }

    /**
     * One or more `virtual_application` blocks as defined below.
     * 
     */
    @Import(name="virtualApplications")
    private @Nullable Output<List<WindowsWebAppSlotSiteConfigVirtualApplicationArgs>> virtualApplications;

    /**
     * @return One or more `virtual_application` blocks as defined below.
     * 
     */
    public Optional<Output<List<WindowsWebAppSlotSiteConfigVirtualApplicationArgs>>> virtualApplications() {
        return Optional.ofNullable(this.virtualApplications);
    }

    /**
     * Should all outbound traffic to have NAT Gateways, Network Security Groups and User Defined Routes applied? Defaults to `false`.
     * 
     */
    @Import(name="vnetRouteAllEnabled")
    private @Nullable Output<Boolean> vnetRouteAllEnabled;

    /**
     * @return Should all outbound traffic to have NAT Gateways, Network Security Groups and User Defined Routes applied? Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> vnetRouteAllEnabled() {
        return Optional.ofNullable(this.vnetRouteAllEnabled);
    }

    /**
     * Should Web Sockets be enabled. Defaults to `false`.
     * 
     */
    @Import(name="websocketsEnabled")
    private @Nullable Output<Boolean> websocketsEnabled;

    /**
     * @return Should Web Sockets be enabled. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> websocketsEnabled() {
        return Optional.ofNullable(this.websocketsEnabled);
    }

    @Import(name="windowsFxVersion")
    private @Nullable Output<String> windowsFxVersion;

    public Optional<Output<String>> windowsFxVersion() {
        return Optional.ofNullable(this.windowsFxVersion);
    }

    /**
     * The number of Workers for this Windows App Service Slot.
     * 
     */
    @Import(name="workerCount")
    private @Nullable Output<Integer> workerCount;

    /**
     * @return The number of Workers for this Windows App Service Slot.
     * 
     */
    public Optional<Output<Integer>> workerCount() {
        return Optional.ofNullable(this.workerCount);
    }

    private WindowsWebAppSlotSiteConfigArgs() {}

    private WindowsWebAppSlotSiteConfigArgs(WindowsWebAppSlotSiteConfigArgs $) {
        this.alwaysOn = $.alwaysOn;
        this.apiDefinitionUrl = $.apiDefinitionUrl;
        this.apiManagementApiId = $.apiManagementApiId;
        this.appCommandLine = $.appCommandLine;
        this.applicationStack = $.applicationStack;
        this.autoHealEnabled = $.autoHealEnabled;
        this.autoHealSetting = $.autoHealSetting;
        this.autoSwapSlotName = $.autoSwapSlotName;
        this.containerRegistryManagedIdentityClientId = $.containerRegistryManagedIdentityClientId;
        this.containerRegistryUseManagedIdentity = $.containerRegistryUseManagedIdentity;
        this.cors = $.cors;
        this.defaultDocuments = $.defaultDocuments;
        this.detailedErrorLoggingEnabled = $.detailedErrorLoggingEnabled;
        this.ftpsState = $.ftpsState;
        this.healthCheckEvictionTimeInMin = $.healthCheckEvictionTimeInMin;
        this.healthCheckPath = $.healthCheckPath;
        this.http2Enabled = $.http2Enabled;
        this.ipRestrictions = $.ipRestrictions;
        this.loadBalancingMode = $.loadBalancingMode;
        this.localMysqlEnabled = $.localMysqlEnabled;
        this.managedPipelineMode = $.managedPipelineMode;
        this.minimumTlsVersion = $.minimumTlsVersion;
        this.remoteDebuggingEnabled = $.remoteDebuggingEnabled;
        this.remoteDebuggingVersion = $.remoteDebuggingVersion;
        this.scmIpRestrictions = $.scmIpRestrictions;
        this.scmMinimumTlsVersion = $.scmMinimumTlsVersion;
        this.scmType = $.scmType;
        this.scmUseMainIpRestriction = $.scmUseMainIpRestriction;
        this.use32BitWorker = $.use32BitWorker;
        this.virtualApplications = $.virtualApplications;
        this.vnetRouteAllEnabled = $.vnetRouteAllEnabled;
        this.websocketsEnabled = $.websocketsEnabled;
        this.windowsFxVersion = $.windowsFxVersion;
        this.workerCount = $.workerCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WindowsWebAppSlotSiteConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WindowsWebAppSlotSiteConfigArgs $;

        public Builder() {
            $ = new WindowsWebAppSlotSiteConfigArgs();
        }

        public Builder(WindowsWebAppSlotSiteConfigArgs defaults) {
            $ = new WindowsWebAppSlotSiteConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alwaysOn If this Windows Web App Slot is Always On enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder alwaysOn(@Nullable Output<Boolean> alwaysOn) {
            $.alwaysOn = alwaysOn;
            return this;
        }

        /**
         * @param alwaysOn If this Windows Web App Slot is Always On enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder alwaysOn(Boolean alwaysOn) {
            return alwaysOn(Output.of(alwaysOn));
        }

        /**
         * @param apiDefinitionUrl The URL to the API Definition for this Windows Web App Slot.
         * 
         * @return builder
         * 
         */
        public Builder apiDefinitionUrl(@Nullable Output<String> apiDefinitionUrl) {
            $.apiDefinitionUrl = apiDefinitionUrl;
            return this;
        }

        /**
         * @param apiDefinitionUrl The URL to the API Definition for this Windows Web App Slot.
         * 
         * @return builder
         * 
         */
        public Builder apiDefinitionUrl(String apiDefinitionUrl) {
            return apiDefinitionUrl(Output.of(apiDefinitionUrl));
        }

        /**
         * @param apiManagementApiId The API Management API ID this Windows Web App Slot os associated with.
         * 
         * @return builder
         * 
         */
        public Builder apiManagementApiId(@Nullable Output<String> apiManagementApiId) {
            $.apiManagementApiId = apiManagementApiId;
            return this;
        }

        /**
         * @param apiManagementApiId The API Management API ID this Windows Web App Slot os associated with.
         * 
         * @return builder
         * 
         */
        public Builder apiManagementApiId(String apiManagementApiId) {
            return apiManagementApiId(Output.of(apiManagementApiId));
        }

        /**
         * @param appCommandLine The App command line to launch.
         * 
         * @return builder
         * 
         */
        public Builder appCommandLine(@Nullable Output<String> appCommandLine) {
            $.appCommandLine = appCommandLine;
            return this;
        }

        /**
         * @param appCommandLine The App command line to launch.
         * 
         * @return builder
         * 
         */
        public Builder appCommandLine(String appCommandLine) {
            return appCommandLine(Output.of(appCommandLine));
        }

        /**
         * @param applicationStack A `application_stack` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder applicationStack(@Nullable Output<WindowsWebAppSlotSiteConfigApplicationStackArgs> applicationStack) {
            $.applicationStack = applicationStack;
            return this;
        }

        /**
         * @param applicationStack A `application_stack` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder applicationStack(WindowsWebAppSlotSiteConfigApplicationStackArgs applicationStack) {
            return applicationStack(Output.of(applicationStack));
        }

        /**
         * @param autoHealEnabled Should Auto heal rules be enabled. Required with `auto_heal_setting`.
         * 
         * @return builder
         * 
         */
        public Builder autoHealEnabled(@Nullable Output<Boolean> autoHealEnabled) {
            $.autoHealEnabled = autoHealEnabled;
            return this;
        }

        /**
         * @param autoHealEnabled Should Auto heal rules be enabled. Required with `auto_heal_setting`.
         * 
         * @return builder
         * 
         */
        public Builder autoHealEnabled(Boolean autoHealEnabled) {
            return autoHealEnabled(Output.of(autoHealEnabled));
        }

        /**
         * @param autoHealSetting A `auto_heal_setting` block as defined above. Required with `auto_heal`.
         * 
         * @return builder
         * 
         */
        public Builder autoHealSetting(@Nullable Output<WindowsWebAppSlotSiteConfigAutoHealSettingArgs> autoHealSetting) {
            $.autoHealSetting = autoHealSetting;
            return this;
        }

        /**
         * @param autoHealSetting A `auto_heal_setting` block as defined above. Required with `auto_heal`.
         * 
         * @return builder
         * 
         */
        public Builder autoHealSetting(WindowsWebAppSlotSiteConfigAutoHealSettingArgs autoHealSetting) {
            return autoHealSetting(Output.of(autoHealSetting));
        }

        /**
         * @param autoSwapSlotName The Windows Web App Slot Name to automatically swap to when deployment to that slot is successfully completed.
         * 
         * &gt; **Note:** This must be a valid slot name on the target Windows Web App Slot.
         * 
         * @return builder
         * 
         */
        public Builder autoSwapSlotName(@Nullable Output<String> autoSwapSlotName) {
            $.autoSwapSlotName = autoSwapSlotName;
            return this;
        }

        /**
         * @param autoSwapSlotName The Windows Web App Slot Name to automatically swap to when deployment to that slot is successfully completed.
         * 
         * &gt; **Note:** This must be a valid slot name on the target Windows Web App Slot.
         * 
         * @return builder
         * 
         */
        public Builder autoSwapSlotName(String autoSwapSlotName) {
            return autoSwapSlotName(Output.of(autoSwapSlotName));
        }

        /**
         * @param containerRegistryManagedIdentityClientId The Client ID of the Managed Service Identity to use for connections to the Azure Container Registry.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryManagedIdentityClientId(@Nullable Output<String> containerRegistryManagedIdentityClientId) {
            $.containerRegistryManagedIdentityClientId = containerRegistryManagedIdentityClientId;
            return this;
        }

        /**
         * @param containerRegistryManagedIdentityClientId The Client ID of the Managed Service Identity to use for connections to the Azure Container Registry.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryManagedIdentityClientId(String containerRegistryManagedIdentityClientId) {
            return containerRegistryManagedIdentityClientId(Output.of(containerRegistryManagedIdentityClientId));
        }

        /**
         * @param containerRegistryUseManagedIdentity Should connections for Azure Container Registry use Managed Identity.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryUseManagedIdentity(@Nullable Output<Boolean> containerRegistryUseManagedIdentity) {
            $.containerRegistryUseManagedIdentity = containerRegistryUseManagedIdentity;
            return this;
        }

        /**
         * @param containerRegistryUseManagedIdentity Should connections for Azure Container Registry use Managed Identity.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryUseManagedIdentity(Boolean containerRegistryUseManagedIdentity) {
            return containerRegistryUseManagedIdentity(Output.of(containerRegistryUseManagedIdentity));
        }

        /**
         * @param cors A `cors` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder cors(@Nullable Output<WindowsWebAppSlotSiteConfigCorsArgs> cors) {
            $.cors = cors;
            return this;
        }

        /**
         * @param cors A `cors` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder cors(WindowsWebAppSlotSiteConfigCorsArgs cors) {
            return cors(Output.of(cors));
        }

        /**
         * @param defaultDocuments Specifies a list of Default Documents for the Windows Web App Slot.
         * 
         * @return builder
         * 
         */
        public Builder defaultDocuments(@Nullable Output<List<String>> defaultDocuments) {
            $.defaultDocuments = defaultDocuments;
            return this;
        }

        /**
         * @param defaultDocuments Specifies a list of Default Documents for the Windows Web App Slot.
         * 
         * @return builder
         * 
         */
        public Builder defaultDocuments(List<String> defaultDocuments) {
            return defaultDocuments(Output.of(defaultDocuments));
        }

        /**
         * @param defaultDocuments Specifies a list of Default Documents for the Windows Web App Slot.
         * 
         * @return builder
         * 
         */
        public Builder defaultDocuments(String... defaultDocuments) {
            return defaultDocuments(List.of(defaultDocuments));
        }

        public Builder detailedErrorLoggingEnabled(@Nullable Output<Boolean> detailedErrorLoggingEnabled) {
            $.detailedErrorLoggingEnabled = detailedErrorLoggingEnabled;
            return this;
        }

        public Builder detailedErrorLoggingEnabled(Boolean detailedErrorLoggingEnabled) {
            return detailedErrorLoggingEnabled(Output.of(detailedErrorLoggingEnabled));
        }

        public Builder ftpsState(@Nullable Output<String> ftpsState) {
            $.ftpsState = ftpsState;
            return this;
        }

        public Builder ftpsState(String ftpsState) {
            return ftpsState(Output.of(ftpsState));
        }

        /**
         * @param healthCheckEvictionTimeInMin The amount of time in minutes that a node can be unhealthy before being removed from the load balancer. Possible values are between `2` and `10`. Only valid in conjunction with `health_check_path`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckEvictionTimeInMin(@Nullable Output<Integer> healthCheckEvictionTimeInMin) {
            $.healthCheckEvictionTimeInMin = healthCheckEvictionTimeInMin;
            return this;
        }

        /**
         * @param healthCheckEvictionTimeInMin The amount of time in minutes that a node can be unhealthy before being removed from the load balancer. Possible values are between `2` and `10`. Only valid in conjunction with `health_check_path`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckEvictionTimeInMin(Integer healthCheckEvictionTimeInMin) {
            return healthCheckEvictionTimeInMin(Output.of(healthCheckEvictionTimeInMin));
        }

        /**
         * @param healthCheckPath The path to the Health Check.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckPath(@Nullable Output<String> healthCheckPath) {
            $.healthCheckPath = healthCheckPath;
            return this;
        }

        /**
         * @param healthCheckPath The path to the Health Check.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckPath(String healthCheckPath) {
            return healthCheckPath(Output.of(healthCheckPath));
        }

        /**
         * @param http2Enabled Should the HTTP2 be enabled?
         * 
         * @return builder
         * 
         */
        public Builder http2Enabled(@Nullable Output<Boolean> http2Enabled) {
            $.http2Enabled = http2Enabled;
            return this;
        }

        /**
         * @param http2Enabled Should the HTTP2 be enabled?
         * 
         * @return builder
         * 
         */
        public Builder http2Enabled(Boolean http2Enabled) {
            return http2Enabled(Output.of(http2Enabled));
        }

        /**
         * @param ipRestrictions One or more `ip_restriction` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder ipRestrictions(@Nullable Output<List<WindowsWebAppSlotSiteConfigIpRestrictionArgs>> ipRestrictions) {
            $.ipRestrictions = ipRestrictions;
            return this;
        }

        /**
         * @param ipRestrictions One or more `ip_restriction` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder ipRestrictions(List<WindowsWebAppSlotSiteConfigIpRestrictionArgs> ipRestrictions) {
            return ipRestrictions(Output.of(ipRestrictions));
        }

        /**
         * @param ipRestrictions One or more `ip_restriction` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder ipRestrictions(WindowsWebAppSlotSiteConfigIpRestrictionArgs... ipRestrictions) {
            return ipRestrictions(List.of(ipRestrictions));
        }

        /**
         * @param loadBalancingMode The Site load balancing. Possible values include: `WeightedRoundRobin`, `LeastRequests`, `LeastResponseTime`, `WeightedTotalTraffic`, `RequestHash`, `PerSiteRoundRobin`. Defaults to `LeastRequests` if omitted.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingMode(@Nullable Output<String> loadBalancingMode) {
            $.loadBalancingMode = loadBalancingMode;
            return this;
        }

        /**
         * @param loadBalancingMode The Site load balancing. Possible values include: `WeightedRoundRobin`, `LeastRequests`, `LeastResponseTime`, `WeightedTotalTraffic`, `RequestHash`, `PerSiteRoundRobin`. Defaults to `LeastRequests` if omitted.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingMode(String loadBalancingMode) {
            return loadBalancingMode(Output.of(loadBalancingMode));
        }

        /**
         * @param localMysqlEnabled Use Local MySQL. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder localMysqlEnabled(@Nullable Output<Boolean> localMysqlEnabled) {
            $.localMysqlEnabled = localMysqlEnabled;
            return this;
        }

        /**
         * @param localMysqlEnabled Use Local MySQL. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder localMysqlEnabled(Boolean localMysqlEnabled) {
            return localMysqlEnabled(Output.of(localMysqlEnabled));
        }

        /**
         * @param managedPipelineMode Managed pipeline mode. Possible values include: `Integrated`, `Classic`. Defaults to `Integrated`.
         * 
         * @return builder
         * 
         */
        public Builder managedPipelineMode(@Nullable Output<String> managedPipelineMode) {
            $.managedPipelineMode = managedPipelineMode;
            return this;
        }

        /**
         * @param managedPipelineMode Managed pipeline mode. Possible values include: `Integrated`, `Classic`. Defaults to `Integrated`.
         * 
         * @return builder
         * 
         */
        public Builder managedPipelineMode(String managedPipelineMode) {
            return managedPipelineMode(Output.of(managedPipelineMode));
        }

        /**
         * @param minimumTlsVersion The configures the minimum version of TLS required for SSL requests. Possible values include: `1.0`, `1.1`, and `1.2`. Defaults to `1.2`.
         * 
         * @return builder
         * 
         */
        public Builder minimumTlsVersion(@Nullable Output<String> minimumTlsVersion) {
            $.minimumTlsVersion = minimumTlsVersion;
            return this;
        }

        /**
         * @param minimumTlsVersion The configures the minimum version of TLS required for SSL requests. Possible values include: `1.0`, `1.1`, and `1.2`. Defaults to `1.2`.
         * 
         * @return builder
         * 
         */
        public Builder minimumTlsVersion(String minimumTlsVersion) {
            return minimumTlsVersion(Output.of(minimumTlsVersion));
        }

        /**
         * @param remoteDebuggingEnabled Should Remote Debugging be enabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder remoteDebuggingEnabled(@Nullable Output<Boolean> remoteDebuggingEnabled) {
            $.remoteDebuggingEnabled = remoteDebuggingEnabled;
            return this;
        }

        /**
         * @param remoteDebuggingEnabled Should Remote Debugging be enabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder remoteDebuggingEnabled(Boolean remoteDebuggingEnabled) {
            return remoteDebuggingEnabled(Output.of(remoteDebuggingEnabled));
        }

        /**
         * @param remoteDebuggingVersion The Remote Debugging Version. Possible values include `VS2017` and `VS2019`
         * 
         * @return builder
         * 
         */
        public Builder remoteDebuggingVersion(@Nullable Output<String> remoteDebuggingVersion) {
            $.remoteDebuggingVersion = remoteDebuggingVersion;
            return this;
        }

        /**
         * @param remoteDebuggingVersion The Remote Debugging Version. Possible values include `VS2017` and `VS2019`
         * 
         * @return builder
         * 
         */
        public Builder remoteDebuggingVersion(String remoteDebuggingVersion) {
            return remoteDebuggingVersion(Output.of(remoteDebuggingVersion));
        }

        /**
         * @param scmIpRestrictions One or more `scm_ip_restriction` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder scmIpRestrictions(@Nullable Output<List<WindowsWebAppSlotSiteConfigScmIpRestrictionArgs>> scmIpRestrictions) {
            $.scmIpRestrictions = scmIpRestrictions;
            return this;
        }

        /**
         * @param scmIpRestrictions One or more `scm_ip_restriction` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder scmIpRestrictions(List<WindowsWebAppSlotSiteConfigScmIpRestrictionArgs> scmIpRestrictions) {
            return scmIpRestrictions(Output.of(scmIpRestrictions));
        }

        /**
         * @param scmIpRestrictions One or more `scm_ip_restriction` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder scmIpRestrictions(WindowsWebAppSlotSiteConfigScmIpRestrictionArgs... scmIpRestrictions) {
            return scmIpRestrictions(List.of(scmIpRestrictions));
        }

        /**
         * @param scmMinimumTlsVersion The configures the minimum version of TLS required for SSL requests to the SCM site Possible values include: `1.0`, `1.1`, and `1.2`. Defaults to `1.2`.
         * 
         * @return builder
         * 
         */
        public Builder scmMinimumTlsVersion(@Nullable Output<String> scmMinimumTlsVersion) {
            $.scmMinimumTlsVersion = scmMinimumTlsVersion;
            return this;
        }

        /**
         * @param scmMinimumTlsVersion The configures the minimum version of TLS required for SSL requests to the SCM site Possible values include: `1.0`, `1.1`, and `1.2`. Defaults to `1.2`.
         * 
         * @return builder
         * 
         */
        public Builder scmMinimumTlsVersion(String scmMinimumTlsVersion) {
            return scmMinimumTlsVersion(Output.of(scmMinimumTlsVersion));
        }

        public Builder scmType(@Nullable Output<String> scmType) {
            $.scmType = scmType;
            return this;
        }

        public Builder scmType(String scmType) {
            return scmType(Output.of(scmType));
        }

        /**
         * @param scmUseMainIpRestriction Should the Windows Web App Slot `ip_restriction` configuration be used for the SCM also.
         * 
         * @return builder
         * 
         */
        public Builder scmUseMainIpRestriction(@Nullable Output<Boolean> scmUseMainIpRestriction) {
            $.scmUseMainIpRestriction = scmUseMainIpRestriction;
            return this;
        }

        /**
         * @param scmUseMainIpRestriction Should the Windows Web App Slot `ip_restriction` configuration be used for the SCM also.
         * 
         * @return builder
         * 
         */
        public Builder scmUseMainIpRestriction(Boolean scmUseMainIpRestriction) {
            return scmUseMainIpRestriction(Output.of(scmUseMainIpRestriction));
        }

        /**
         * @param use32BitWorker Should the Windows Web App Slotuse a 32-bit worker. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder use32BitWorker(@Nullable Output<Boolean> use32BitWorker) {
            $.use32BitWorker = use32BitWorker;
            return this;
        }

        /**
         * @param use32BitWorker Should the Windows Web App Slotuse a 32-bit worker. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder use32BitWorker(Boolean use32BitWorker) {
            return use32BitWorker(Output.of(use32BitWorker));
        }

        /**
         * @param virtualApplications One or more `virtual_application` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder virtualApplications(@Nullable Output<List<WindowsWebAppSlotSiteConfigVirtualApplicationArgs>> virtualApplications) {
            $.virtualApplications = virtualApplications;
            return this;
        }

        /**
         * @param virtualApplications One or more `virtual_application` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder virtualApplications(List<WindowsWebAppSlotSiteConfigVirtualApplicationArgs> virtualApplications) {
            return virtualApplications(Output.of(virtualApplications));
        }

        /**
         * @param virtualApplications One or more `virtual_application` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder virtualApplications(WindowsWebAppSlotSiteConfigVirtualApplicationArgs... virtualApplications) {
            return virtualApplications(List.of(virtualApplications));
        }

        /**
         * @param vnetRouteAllEnabled Should all outbound traffic to have NAT Gateways, Network Security Groups and User Defined Routes applied? Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder vnetRouteAllEnabled(@Nullable Output<Boolean> vnetRouteAllEnabled) {
            $.vnetRouteAllEnabled = vnetRouteAllEnabled;
            return this;
        }

        /**
         * @param vnetRouteAllEnabled Should all outbound traffic to have NAT Gateways, Network Security Groups and User Defined Routes applied? Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder vnetRouteAllEnabled(Boolean vnetRouteAllEnabled) {
            return vnetRouteAllEnabled(Output.of(vnetRouteAllEnabled));
        }

        /**
         * @param websocketsEnabled Should Web Sockets be enabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder websocketsEnabled(@Nullable Output<Boolean> websocketsEnabled) {
            $.websocketsEnabled = websocketsEnabled;
            return this;
        }

        /**
         * @param websocketsEnabled Should Web Sockets be enabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder websocketsEnabled(Boolean websocketsEnabled) {
            return websocketsEnabled(Output.of(websocketsEnabled));
        }

        public Builder windowsFxVersion(@Nullable Output<String> windowsFxVersion) {
            $.windowsFxVersion = windowsFxVersion;
            return this;
        }

        public Builder windowsFxVersion(String windowsFxVersion) {
            return windowsFxVersion(Output.of(windowsFxVersion));
        }

        /**
         * @param workerCount The number of Workers for this Windows App Service Slot.
         * 
         * @return builder
         * 
         */
        public Builder workerCount(@Nullable Output<Integer> workerCount) {
            $.workerCount = workerCount;
            return this;
        }

        /**
         * @param workerCount The number of Workers for this Windows App Service Slot.
         * 
         * @return builder
         * 
         */
        public Builder workerCount(Integer workerCount) {
            return workerCount(Output.of(workerCount));
        }

        public WindowsWebAppSlotSiteConfigArgs build() {
            return $;
        }
    }

}
