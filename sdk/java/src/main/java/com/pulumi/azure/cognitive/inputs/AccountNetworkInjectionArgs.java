// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cognitive.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class AccountNetworkInjectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccountNetworkInjectionArgs Empty = new AccountNetworkInjectionArgs();

    /**
     * Specifies what features network injection applies to. The only possible value is `agent`.
     * 
     */
    @Import(name="scenario", required=true)
    private Output<String> scenario;

    /**
     * @return Specifies what features network injection applies to. The only possible value is `agent`.
     * 
     */
    public Output<String> scenario() {
        return this.scenario;
    }

    /**
     * The ID of the subnet which the Agent Client is injected into.
     * 
     * &gt; **Note:** The agent subnet must use an address space in the 172.* or 192.* ranges.
     * 
     */
    @Import(name="subnetId", required=true)
    private Output<String> subnetId;

    /**
     * @return The ID of the subnet which the Agent Client is injected into.
     * 
     * &gt; **Note:** The agent subnet must use an address space in the 172.* or 192.* ranges.
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }

    private AccountNetworkInjectionArgs() {}

    private AccountNetworkInjectionArgs(AccountNetworkInjectionArgs $) {
        this.scenario = $.scenario;
        this.subnetId = $.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountNetworkInjectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountNetworkInjectionArgs $;

        public Builder() {
            $ = new AccountNetworkInjectionArgs();
        }

        public Builder(AccountNetworkInjectionArgs defaults) {
            $ = new AccountNetworkInjectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param scenario Specifies what features network injection applies to. The only possible value is `agent`.
         * 
         * @return builder
         * 
         */
        public Builder scenario(Output<String> scenario) {
            $.scenario = scenario;
            return this;
        }

        /**
         * @param scenario Specifies what features network injection applies to. The only possible value is `agent`.
         * 
         * @return builder
         * 
         */
        public Builder scenario(String scenario) {
            return scenario(Output.of(scenario));
        }

        /**
         * @param subnetId The ID of the subnet which the Agent Client is injected into.
         * 
         * &gt; **Note:** The agent subnet must use an address space in the 172.* or 192.* ranges.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The ID of the subnet which the Agent Client is injected into.
         * 
         * &gt; **Note:** The agent subnet must use an address space in the 172.* or 192.* ranges.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public AccountNetworkInjectionArgs build() {
            if ($.scenario == null) {
                throw new MissingRequiredPropertyException("AccountNetworkInjectionArgs", "scenario");
            }
            if ($.subnetId == null) {
                throw new MissingRequiredPropertyException("AccountNetworkInjectionArgs", "subnetId");
            }
            return $;
        }
    }

}
