// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.networkfunction.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class CollectorPolicyIpfxEmission {
    /**
     * @return A list of emission destination types. The only possible value is `AzureMonitor`. Changing this forces a new Network Function Collector Policy to be created.
     * 
     */
    private String destinationTypes;

    private CollectorPolicyIpfxEmission() {}
    /**
     * @return A list of emission destination types. The only possible value is `AzureMonitor`. Changing this forces a new Network Function Collector Policy to be created.
     * 
     */
    public String destinationTypes() {
        return this.destinationTypes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CollectorPolicyIpfxEmission defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String destinationTypes;
        public Builder() {}
        public Builder(CollectorPolicyIpfxEmission defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destinationTypes = defaults.destinationTypes;
        }

        @CustomType.Setter
        public Builder destinationTypes(String destinationTypes) {
            if (destinationTypes == null) {
              throw new MissingRequiredPropertyException("CollectorPolicyIpfxEmission", "destinationTypes");
            }
            this.destinationTypes = destinationTypes;
            return this;
        }
        public CollectorPolicyIpfxEmission build() {
            final var _resultValue = new CollectorPolicyIpfxEmission();
            _resultValue.destinationTypes = destinationTypes;
            return _resultValue;
        }
    }
}
