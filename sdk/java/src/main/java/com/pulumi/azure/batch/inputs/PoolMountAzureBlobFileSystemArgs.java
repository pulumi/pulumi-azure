// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.batch.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PoolMountAzureBlobFileSystemArgs extends com.pulumi.resources.ResourceArgs {

    public static final PoolMountAzureBlobFileSystemArgs Empty = new PoolMountAzureBlobFileSystemArgs();

    /**
     * The Azure Storage Account key. This property is mutually exclusive with both `sas_key` and `identity_id`; exactly one must be specified.
     * 
     */
    @Import(name="accountKey")
    private @Nullable Output<String> accountKey;

    /**
     * @return The Azure Storage Account key. This property is mutually exclusive with both `sas_key` and `identity_id`; exactly one must be specified.
     * 
     */
    public Optional<Output<String>> accountKey() {
        return Optional.ofNullable(this.accountKey);
    }

    /**
     * The Azure Storage Account name.
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    /**
     * @return The Azure Storage Account name.
     * 
     */
    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * Additional command line options to pass to the mount command. These are &#39;net use&#39; options in Windows and &#39;mount&#39; options in Linux.
     * 
     */
    @Import(name="blobfuseOptions")
    private @Nullable Output<String> blobfuseOptions;

    /**
     * @return Additional command line options to pass to the mount command. These are &#39;net use&#39; options in Windows and &#39;mount&#39; options in Linux.
     * 
     */
    public Optional<Output<String>> blobfuseOptions() {
        return Optional.ofNullable(this.blobfuseOptions);
    }

    /**
     * The Azure Blob Storage Container name.
     * 
     */
    @Import(name="containerName", required=true)
    private Output<String> containerName;

    /**
     * @return The Azure Blob Storage Container name.
     * 
     */
    public Output<String> containerName() {
        return this.containerName;
    }

    /**
     * The ARM resource id of the user assigned identity. This property is mutually exclusive with both `account_key` and `sas_key`; exactly one must be specified.
     * 
     */
    @Import(name="identityId")
    private @Nullable Output<String> identityId;

    /**
     * @return The ARM resource id of the user assigned identity. This property is mutually exclusive with both `account_key` and `sas_key`; exactly one must be specified.
     * 
     */
    public Optional<Output<String>> identityId() {
        return Optional.ofNullable(this.identityId);
    }

    /**
     * The relative path on compute node where the file system will be mounted All file systems are mounted relative to the Batch mounts directory, accessible via the `AZ_BATCH_NODE_MOUNTS_DIR` environment variable.
     * 
     */
    @Import(name="relativeMountPath", required=true)
    private Output<String> relativeMountPath;

    /**
     * @return The relative path on compute node where the file system will be mounted All file systems are mounted relative to the Batch mounts directory, accessible via the `AZ_BATCH_NODE_MOUNTS_DIR` environment variable.
     * 
     */
    public Output<String> relativeMountPath() {
        return this.relativeMountPath;
    }

    /**
     * The Azure Storage SAS token. This property is mutually exclusive with both `account_key` and `identity_id`; exactly one must be specified.
     * 
     */
    @Import(name="sasKey")
    private @Nullable Output<String> sasKey;

    /**
     * @return The Azure Storage SAS token. This property is mutually exclusive with both `account_key` and `identity_id`; exactly one must be specified.
     * 
     */
    public Optional<Output<String>> sasKey() {
        return Optional.ofNullable(this.sasKey);
    }

    private PoolMountAzureBlobFileSystemArgs() {}

    private PoolMountAzureBlobFileSystemArgs(PoolMountAzureBlobFileSystemArgs $) {
        this.accountKey = $.accountKey;
        this.accountName = $.accountName;
        this.blobfuseOptions = $.blobfuseOptions;
        this.containerName = $.containerName;
        this.identityId = $.identityId;
        this.relativeMountPath = $.relativeMountPath;
        this.sasKey = $.sasKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PoolMountAzureBlobFileSystemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PoolMountAzureBlobFileSystemArgs $;

        public Builder() {
            $ = new PoolMountAzureBlobFileSystemArgs();
        }

        public Builder(PoolMountAzureBlobFileSystemArgs defaults) {
            $ = new PoolMountAzureBlobFileSystemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountKey The Azure Storage Account key. This property is mutually exclusive with both `sas_key` and `identity_id`; exactly one must be specified.
         * 
         * @return builder
         * 
         */
        public Builder accountKey(@Nullable Output<String> accountKey) {
            $.accountKey = accountKey;
            return this;
        }

        /**
         * @param accountKey The Azure Storage Account key. This property is mutually exclusive with both `sas_key` and `identity_id`; exactly one must be specified.
         * 
         * @return builder
         * 
         */
        public Builder accountKey(String accountKey) {
            return accountKey(Output.of(accountKey));
        }

        /**
         * @param accountName The Azure Storage Account name.
         * 
         * @return builder
         * 
         */
        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName The Azure Storage Account name.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param blobfuseOptions Additional command line options to pass to the mount command. These are &#39;net use&#39; options in Windows and &#39;mount&#39; options in Linux.
         * 
         * @return builder
         * 
         */
        public Builder blobfuseOptions(@Nullable Output<String> blobfuseOptions) {
            $.blobfuseOptions = blobfuseOptions;
            return this;
        }

        /**
         * @param blobfuseOptions Additional command line options to pass to the mount command. These are &#39;net use&#39; options in Windows and &#39;mount&#39; options in Linux.
         * 
         * @return builder
         * 
         */
        public Builder blobfuseOptions(String blobfuseOptions) {
            return blobfuseOptions(Output.of(blobfuseOptions));
        }

        /**
         * @param containerName The Azure Blob Storage Container name.
         * 
         * @return builder
         * 
         */
        public Builder containerName(Output<String> containerName) {
            $.containerName = containerName;
            return this;
        }

        /**
         * @param containerName The Azure Blob Storage Container name.
         * 
         * @return builder
         * 
         */
        public Builder containerName(String containerName) {
            return containerName(Output.of(containerName));
        }

        /**
         * @param identityId The ARM resource id of the user assigned identity. This property is mutually exclusive with both `account_key` and `sas_key`; exactly one must be specified.
         * 
         * @return builder
         * 
         */
        public Builder identityId(@Nullable Output<String> identityId) {
            $.identityId = identityId;
            return this;
        }

        /**
         * @param identityId The ARM resource id of the user assigned identity. This property is mutually exclusive with both `account_key` and `sas_key`; exactly one must be specified.
         * 
         * @return builder
         * 
         */
        public Builder identityId(String identityId) {
            return identityId(Output.of(identityId));
        }

        /**
         * @param relativeMountPath The relative path on compute node where the file system will be mounted All file systems are mounted relative to the Batch mounts directory, accessible via the `AZ_BATCH_NODE_MOUNTS_DIR` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder relativeMountPath(Output<String> relativeMountPath) {
            $.relativeMountPath = relativeMountPath;
            return this;
        }

        /**
         * @param relativeMountPath The relative path on compute node where the file system will be mounted All file systems are mounted relative to the Batch mounts directory, accessible via the `AZ_BATCH_NODE_MOUNTS_DIR` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder relativeMountPath(String relativeMountPath) {
            return relativeMountPath(Output.of(relativeMountPath));
        }

        /**
         * @param sasKey The Azure Storage SAS token. This property is mutually exclusive with both `account_key` and `identity_id`; exactly one must be specified.
         * 
         * @return builder
         * 
         */
        public Builder sasKey(@Nullable Output<String> sasKey) {
            $.sasKey = sasKey;
            return this;
        }

        /**
         * @param sasKey The Azure Storage SAS token. This property is mutually exclusive with both `account_key` and `identity_id`; exactly one must be specified.
         * 
         * @return builder
         * 
         */
        public Builder sasKey(String sasKey) {
            return sasKey(Output.of(sasKey));
        }

        public PoolMountAzureBlobFileSystemArgs build() {
            if ($.accountName == null) {
                throw new MissingRequiredPropertyException("PoolMountAzureBlobFileSystemArgs", "accountName");
            }
            if ($.containerName == null) {
                throw new MissingRequiredPropertyException("PoolMountAzureBlobFileSystemArgs", "containerName");
            }
            if ($.relativeMountPath == null) {
                throw new MissingRequiredPropertyException("PoolMountAzureBlobFileSystemArgs", "relativeMountPath");
            }
            return $;
        }
    }

}
