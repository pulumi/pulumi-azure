// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cosmosdb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountBackupArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccountBackupArgs Empty = new AccountBackupArgs();

    /**
     * The interval in minutes between two backups. Possible values are between 60 and 1440. Defaults to `240`.
     * 
     */
    @Import(name="intervalInMinutes")
    private @Nullable Output<Integer> intervalInMinutes;

    /**
     * @return The interval in minutes between two backups. Possible values are between 60 and 1440. Defaults to `240`.
     * 
     */
    public Optional<Output<Integer>> intervalInMinutes() {
        return Optional.ofNullable(this.intervalInMinutes);
    }

    /**
     * The time in hours that each backup is retained. Possible values are between 8 and 720. Defaults to `8`.
     * 
     */
    @Import(name="retentionInHours")
    private @Nullable Output<Integer> retentionInHours;

    /**
     * @return The time in hours that each backup is retained. Possible values are between 8 and 720. Defaults to `8`.
     * 
     */
    public Optional<Output<Integer>> retentionInHours() {
        return Optional.ofNullable(this.retentionInHours);
    }

    /**
     * The storage redundancy is used to indicate the type of backup residency. Possible values are `Geo`, `Local` and `Zone`. Defaults to `Geo`.
     * 
     * &gt; **Note:** You can only configure `interval_in_minutes`, `retention_in_hours` and `storage_redundancy` when the `type` field is set to `Periodic`.
     * 
     */
    @Import(name="storageRedundancy")
    private @Nullable Output<String> storageRedundancy;

    /**
     * @return The storage redundancy is used to indicate the type of backup residency. Possible values are `Geo`, `Local` and `Zone`. Defaults to `Geo`.
     * 
     * &gt; **Note:** You can only configure `interval_in_minutes`, `retention_in_hours` and `storage_redundancy` when the `type` field is set to `Periodic`.
     * 
     */
    public Optional<Output<String>> storageRedundancy() {
        return Optional.ofNullable(this.storageRedundancy);
    }

    /**
     * The continuous backup tier. Possible values are `Continuous7Days` and `Continuous30Days`.
     * 
     */
    @Import(name="tier")
    private @Nullable Output<String> tier;

    /**
     * @return The continuous backup tier. Possible values are `Continuous7Days` and `Continuous30Days`.
     * 
     */
    public Optional<Output<String>> tier() {
        return Optional.ofNullable(this.tier);
    }

    /**
     * The type of the `backup`. Possible values are `Continuous` and `Periodic`.
     * 
     * &gt; **Note:** Migration of `Periodic` to `Continuous` is one-way, changing `Continuous` to `Periodic` forces a new resource to be created.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the `backup`. Possible values are `Continuous` and `Periodic`.
     * 
     * &gt; **Note:** Migration of `Periodic` to `Continuous` is one-way, changing `Continuous` to `Periodic` forces a new resource to be created.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private AccountBackupArgs() {}

    private AccountBackupArgs(AccountBackupArgs $) {
        this.intervalInMinutes = $.intervalInMinutes;
        this.retentionInHours = $.retentionInHours;
        this.storageRedundancy = $.storageRedundancy;
        this.tier = $.tier;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountBackupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountBackupArgs $;

        public Builder() {
            $ = new AccountBackupArgs();
        }

        public Builder(AccountBackupArgs defaults) {
            $ = new AccountBackupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param intervalInMinutes The interval in minutes between two backups. Possible values are between 60 and 1440. Defaults to `240`.
         * 
         * @return builder
         * 
         */
        public Builder intervalInMinutes(@Nullable Output<Integer> intervalInMinutes) {
            $.intervalInMinutes = intervalInMinutes;
            return this;
        }

        /**
         * @param intervalInMinutes The interval in minutes between two backups. Possible values are between 60 and 1440. Defaults to `240`.
         * 
         * @return builder
         * 
         */
        public Builder intervalInMinutes(Integer intervalInMinutes) {
            return intervalInMinutes(Output.of(intervalInMinutes));
        }

        /**
         * @param retentionInHours The time in hours that each backup is retained. Possible values are between 8 and 720. Defaults to `8`.
         * 
         * @return builder
         * 
         */
        public Builder retentionInHours(@Nullable Output<Integer> retentionInHours) {
            $.retentionInHours = retentionInHours;
            return this;
        }

        /**
         * @param retentionInHours The time in hours that each backup is retained. Possible values are between 8 and 720. Defaults to `8`.
         * 
         * @return builder
         * 
         */
        public Builder retentionInHours(Integer retentionInHours) {
            return retentionInHours(Output.of(retentionInHours));
        }

        /**
         * @param storageRedundancy The storage redundancy is used to indicate the type of backup residency. Possible values are `Geo`, `Local` and `Zone`. Defaults to `Geo`.
         * 
         * &gt; **Note:** You can only configure `interval_in_minutes`, `retention_in_hours` and `storage_redundancy` when the `type` field is set to `Periodic`.
         * 
         * @return builder
         * 
         */
        public Builder storageRedundancy(@Nullable Output<String> storageRedundancy) {
            $.storageRedundancy = storageRedundancy;
            return this;
        }

        /**
         * @param storageRedundancy The storage redundancy is used to indicate the type of backup residency. Possible values are `Geo`, `Local` and `Zone`. Defaults to `Geo`.
         * 
         * &gt; **Note:** You can only configure `interval_in_minutes`, `retention_in_hours` and `storage_redundancy` when the `type` field is set to `Periodic`.
         * 
         * @return builder
         * 
         */
        public Builder storageRedundancy(String storageRedundancy) {
            return storageRedundancy(Output.of(storageRedundancy));
        }

        /**
         * @param tier The continuous backup tier. Possible values are `Continuous7Days` and `Continuous30Days`.
         * 
         * @return builder
         * 
         */
        public Builder tier(@Nullable Output<String> tier) {
            $.tier = tier;
            return this;
        }

        /**
         * @param tier The continuous backup tier. Possible values are `Continuous7Days` and `Continuous30Days`.
         * 
         * @return builder
         * 
         */
        public Builder tier(String tier) {
            return tier(Output.of(tier));
        }

        /**
         * @param type The type of the `backup`. Possible values are `Continuous` and `Periodic`.
         * 
         * &gt; **Note:** Migration of `Periodic` to `Continuous` is one-way, changing `Continuous` to `Periodic` forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the `backup`. Possible values are `Continuous` and `Periodic`.
         * 
         * &gt; **Note:** Migration of `Periodic` to `Continuous` is one-way, changing `Continuous` to `Periodic` forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public AccountBackupArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("AccountBackupArgs", "type");
            }
            return $;
        }
    }

}
