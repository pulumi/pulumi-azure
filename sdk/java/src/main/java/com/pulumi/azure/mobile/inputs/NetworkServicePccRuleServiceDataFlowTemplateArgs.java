// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mobile.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkServicePccRuleServiceDataFlowTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkServicePccRuleServiceDataFlowTemplateArgs Empty = new NetworkServicePccRuleServiceDataFlowTemplateArgs();

    /**
     * Specifies the direction of this flow. Possible values are `Uplink`, `Downlink` and `Bidirectional`.
     * 
     */
    @Import(name="direction", required=true)
    private Output<String> direction;

    /**
     * @return Specifies the direction of this flow. Possible values are `Uplink`, `Downlink` and `Bidirectional`.
     * 
     */
    public Output<String> direction() {
        return this.direction;
    }

    /**
     * Specifies the name of the data flow template. This must be unique within the parent data flow policy rule. You must not use any of the following reserved strings - `default`, `requested` or `service`.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Specifies the name of the data flow template. This must be unique within the parent data flow policy rule. You must not use any of the following reserved strings - `default`, `requested` or `service`.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The port(s) to which UEs will connect for this flow. You can specify zero or more ports or port ranges. If you specify one or more ports or port ranges then you must specify a value other than `ip` in the `protocol` field. If it is not specified then connections will be allowed on all ports. Port ranges must be specified as &lt;FirstPort&gt;-&lt;LastPort&gt;. For example: [`8080`, `8082-8085`].
     * 
     */
    @Import(name="ports")
    private @Nullable Output<List<String>> ports;

    /**
     * @return The port(s) to which UEs will connect for this flow. You can specify zero or more ports or port ranges. If you specify one or more ports or port ranges then you must specify a value other than `ip` in the `protocol` field. If it is not specified then connections will be allowed on all ports. Port ranges must be specified as &lt;FirstPort&gt;-&lt;LastPort&gt;. For example: [`8080`, `8082-8085`].
     * 
     */
    public Optional<Output<List<String>>> ports() {
        return Optional.ofNullable(this.ports);
    }

    /**
     * A list of the allowed protocol(s) for this flow. If you want this flow to be able to use any protocol within the internet protocol suite, use the value `ip`. If you only want to allow a selection of protocols, you must use the corresponding IANA Assigned Internet Protocol Number for each protocol, as described in https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml. For example, for UDP, you must use 17. If you use the value `ip` then you must leave the field `port` unspecified.
     * 
     */
    @Import(name="protocols", required=true)
    private Output<List<String>> protocols;

    /**
     * @return A list of the allowed protocol(s) for this flow. If you want this flow to be able to use any protocol within the internet protocol suite, use the value `ip`. If you only want to allow a selection of protocols, you must use the corresponding IANA Assigned Internet Protocol Number for each protocol, as described in https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml. For example, for UDP, you must use 17. If you use the value `ip` then you must leave the field `port` unspecified.
     * 
     */
    public Output<List<String>> protocols() {
        return this.protocols;
    }

    /**
     * Specifies the remote IP address(es) to which UEs will connect for this flow. If you want to allow connections on any IP address, use the value `any`. Otherwise, you must provide each of the remote IP addresses to which the packet core instance will connect for this flow. You must provide each IP address in CIDR notation, including the netmask (for example, `192.0.2.54/24`).
     * 
     */
    @Import(name="remoteIpLists", required=true)
    private Output<List<String>> remoteIpLists;

    /**
     * @return Specifies the remote IP address(es) to which UEs will connect for this flow. If you want to allow connections on any IP address, use the value `any`. Otherwise, you must provide each of the remote IP addresses to which the packet core instance will connect for this flow. You must provide each IP address in CIDR notation, including the netmask (for example, `192.0.2.54/24`).
     * 
     */
    public Output<List<String>> remoteIpLists() {
        return this.remoteIpLists;
    }

    private NetworkServicePccRuleServiceDataFlowTemplateArgs() {}

    private NetworkServicePccRuleServiceDataFlowTemplateArgs(NetworkServicePccRuleServiceDataFlowTemplateArgs $) {
        this.direction = $.direction;
        this.name = $.name;
        this.ports = $.ports;
        this.protocols = $.protocols;
        this.remoteIpLists = $.remoteIpLists;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkServicePccRuleServiceDataFlowTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkServicePccRuleServiceDataFlowTemplateArgs $;

        public Builder() {
            $ = new NetworkServicePccRuleServiceDataFlowTemplateArgs();
        }

        public Builder(NetworkServicePccRuleServiceDataFlowTemplateArgs defaults) {
            $ = new NetworkServicePccRuleServiceDataFlowTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param direction Specifies the direction of this flow. Possible values are `Uplink`, `Downlink` and `Bidirectional`.
         * 
         * @return builder
         * 
         */
        public Builder direction(Output<String> direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param direction Specifies the direction of this flow. Possible values are `Uplink`, `Downlink` and `Bidirectional`.
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            return direction(Output.of(direction));
        }

        /**
         * @param name Specifies the name of the data flow template. This must be unique within the parent data flow policy rule. You must not use any of the following reserved strings - `default`, `requested` or `service`.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the data flow template. This must be unique within the parent data flow policy rule. You must not use any of the following reserved strings - `default`, `requested` or `service`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param ports The port(s) to which UEs will connect for this flow. You can specify zero or more ports or port ranges. If you specify one or more ports or port ranges then you must specify a value other than `ip` in the `protocol` field. If it is not specified then connections will be allowed on all ports. Port ranges must be specified as &lt;FirstPort&gt;-&lt;LastPort&gt;. For example: [`8080`, `8082-8085`].
         * 
         * @return builder
         * 
         */
        public Builder ports(@Nullable Output<List<String>> ports) {
            $.ports = ports;
            return this;
        }

        /**
         * @param ports The port(s) to which UEs will connect for this flow. You can specify zero or more ports or port ranges. If you specify one or more ports or port ranges then you must specify a value other than `ip` in the `protocol` field. If it is not specified then connections will be allowed on all ports. Port ranges must be specified as &lt;FirstPort&gt;-&lt;LastPort&gt;. For example: [`8080`, `8082-8085`].
         * 
         * @return builder
         * 
         */
        public Builder ports(List<String> ports) {
            return ports(Output.of(ports));
        }

        /**
         * @param ports The port(s) to which UEs will connect for this flow. You can specify zero or more ports or port ranges. If you specify one or more ports or port ranges then you must specify a value other than `ip` in the `protocol` field. If it is not specified then connections will be allowed on all ports. Port ranges must be specified as &lt;FirstPort&gt;-&lt;LastPort&gt;. For example: [`8080`, `8082-8085`].
         * 
         * @return builder
         * 
         */
        public Builder ports(String... ports) {
            return ports(List.of(ports));
        }

        /**
         * @param protocols A list of the allowed protocol(s) for this flow. If you want this flow to be able to use any protocol within the internet protocol suite, use the value `ip`. If you only want to allow a selection of protocols, you must use the corresponding IANA Assigned Internet Protocol Number for each protocol, as described in https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml. For example, for UDP, you must use 17. If you use the value `ip` then you must leave the field `port` unspecified.
         * 
         * @return builder
         * 
         */
        public Builder protocols(Output<List<String>> protocols) {
            $.protocols = protocols;
            return this;
        }

        /**
         * @param protocols A list of the allowed protocol(s) for this flow. If you want this flow to be able to use any protocol within the internet protocol suite, use the value `ip`. If you only want to allow a selection of protocols, you must use the corresponding IANA Assigned Internet Protocol Number for each protocol, as described in https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml. For example, for UDP, you must use 17. If you use the value `ip` then you must leave the field `port` unspecified.
         * 
         * @return builder
         * 
         */
        public Builder protocols(List<String> protocols) {
            return protocols(Output.of(protocols));
        }

        /**
         * @param protocols A list of the allowed protocol(s) for this flow. If you want this flow to be able to use any protocol within the internet protocol suite, use the value `ip`. If you only want to allow a selection of protocols, you must use the corresponding IANA Assigned Internet Protocol Number for each protocol, as described in https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml. For example, for UDP, you must use 17. If you use the value `ip` then you must leave the field `port` unspecified.
         * 
         * @return builder
         * 
         */
        public Builder protocols(String... protocols) {
            return protocols(List.of(protocols));
        }

        /**
         * @param remoteIpLists Specifies the remote IP address(es) to which UEs will connect for this flow. If you want to allow connections on any IP address, use the value `any`. Otherwise, you must provide each of the remote IP addresses to which the packet core instance will connect for this flow. You must provide each IP address in CIDR notation, including the netmask (for example, `192.0.2.54/24`).
         * 
         * @return builder
         * 
         */
        public Builder remoteIpLists(Output<List<String>> remoteIpLists) {
            $.remoteIpLists = remoteIpLists;
            return this;
        }

        /**
         * @param remoteIpLists Specifies the remote IP address(es) to which UEs will connect for this flow. If you want to allow connections on any IP address, use the value `any`. Otherwise, you must provide each of the remote IP addresses to which the packet core instance will connect for this flow. You must provide each IP address in CIDR notation, including the netmask (for example, `192.0.2.54/24`).
         * 
         * @return builder
         * 
         */
        public Builder remoteIpLists(List<String> remoteIpLists) {
            return remoteIpLists(Output.of(remoteIpLists));
        }

        /**
         * @param remoteIpLists Specifies the remote IP address(es) to which UEs will connect for this flow. If you want to allow connections on any IP address, use the value `any`. Otherwise, you must provide each of the remote IP addresses to which the packet core instance will connect for this flow. You must provide each IP address in CIDR notation, including the netmask (for example, `192.0.2.54/24`).
         * 
         * @return builder
         * 
         */
        public Builder remoteIpLists(String... remoteIpLists) {
            return remoteIpLists(List.of(remoteIpLists));
        }

        public NetworkServicePccRuleServiceDataFlowTemplateArgs build() {
            if ($.direction == null) {
                throw new MissingRequiredPropertyException("NetworkServicePccRuleServiceDataFlowTemplateArgs", "direction");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("NetworkServicePccRuleServiceDataFlowTemplateArgs", "name");
            }
            if ($.protocols == null) {
                throw new MissingRequiredPropertyException("NetworkServicePccRuleServiceDataFlowTemplateArgs", "protocols");
            }
            if ($.remoteIpLists == null) {
                throw new MissingRequiredPropertyException("NetworkServicePccRuleServiceDataFlowTemplateArgs", "remoteIpLists");
            }
            return $;
        }
    }

}
