// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.logicapps.inputs;

import com.pulumi.azure.logicapps.inputs.IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleMonthlyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleArgs Empty = new IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleArgs();

    /**
     * A list containing a single item, which specifies the Hour interval at which this recurrence should be triggered.
     * 
     */
    @Import(name="hours")
    private @Nullable Output<List<Integer>> hours;

    /**
     * @return A list containing a single item, which specifies the Hour interval at which this recurrence should be triggered.
     * 
     */
    public Optional<Output<List<Integer>>> hours() {
        return Optional.ofNullable(this.hours);
    }

    /**
     * A list containing a single item which specifies the Minute interval at which this recurrence should be triggered.
     * 
     */
    @Import(name="minutes")
    private @Nullable Output<List<Integer>> minutes;

    /**
     * @return A list containing a single item which specifies the Minute interval at which this recurrence should be triggered.
     * 
     */
    public Optional<Output<List<Integer>>> minutes() {
        return Optional.ofNullable(this.minutes);
    }

    /**
     * A list of days of the month that the job should execute on.
     * 
     */
    @Import(name="monthDays")
    private @Nullable Output<List<Integer>> monthDays;

    /**
     * @return A list of days of the month that the job should execute on.
     * 
     */
    public Optional<Output<List<Integer>>> monthDays() {
        return Optional.ofNullable(this.monthDays);
    }

    /**
     * A `monthly` block as documented below.
     * 
     */
    @Import(name="monthlies")
    private @Nullable Output<List<IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleMonthlyArgs>> monthlies;

    /**
     * @return A `monthly` block as documented below.
     * 
     */
    public Optional<Output<List<IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleMonthlyArgs>>> monthlies() {
        return Optional.ofNullable(this.monthlies);
    }

    /**
     * A list of days of the week that the job should execute on. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
     * 
     */
    @Import(name="weekDays")
    private @Nullable Output<List<String>> weekDays;

    /**
     * @return A list of days of the week that the job should execute on. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
     * 
     */
    public Optional<Output<List<String>>> weekDays() {
        return Optional.ofNullable(this.weekDays);
    }

    private IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleArgs() {}

    private IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleArgs(IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleArgs $) {
        this.hours = $.hours;
        this.minutes = $.minutes;
        this.monthDays = $.monthDays;
        this.monthlies = $.monthlies;
        this.weekDays = $.weekDays;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleArgs $;

        public Builder() {
            $ = new IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleArgs();
        }

        public Builder(IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleArgs defaults) {
            $ = new IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hours A list containing a single item, which specifies the Hour interval at which this recurrence should be triggered.
         * 
         * @return builder
         * 
         */
        public Builder hours(@Nullable Output<List<Integer>> hours) {
            $.hours = hours;
            return this;
        }

        /**
         * @param hours A list containing a single item, which specifies the Hour interval at which this recurrence should be triggered.
         * 
         * @return builder
         * 
         */
        public Builder hours(List<Integer> hours) {
            return hours(Output.of(hours));
        }

        /**
         * @param hours A list containing a single item, which specifies the Hour interval at which this recurrence should be triggered.
         * 
         * @return builder
         * 
         */
        public Builder hours(Integer... hours) {
            return hours(List.of(hours));
        }

        /**
         * @param minutes A list containing a single item which specifies the Minute interval at which this recurrence should be triggered.
         * 
         * @return builder
         * 
         */
        public Builder minutes(@Nullable Output<List<Integer>> minutes) {
            $.minutes = minutes;
            return this;
        }

        /**
         * @param minutes A list containing a single item which specifies the Minute interval at which this recurrence should be triggered.
         * 
         * @return builder
         * 
         */
        public Builder minutes(List<Integer> minutes) {
            return minutes(Output.of(minutes));
        }

        /**
         * @param minutes A list containing a single item which specifies the Minute interval at which this recurrence should be triggered.
         * 
         * @return builder
         * 
         */
        public Builder minutes(Integer... minutes) {
            return minutes(List.of(minutes));
        }

        /**
         * @param monthDays A list of days of the month that the job should execute on.
         * 
         * @return builder
         * 
         */
        public Builder monthDays(@Nullable Output<List<Integer>> monthDays) {
            $.monthDays = monthDays;
            return this;
        }

        /**
         * @param monthDays A list of days of the month that the job should execute on.
         * 
         * @return builder
         * 
         */
        public Builder monthDays(List<Integer> monthDays) {
            return monthDays(Output.of(monthDays));
        }

        /**
         * @param monthDays A list of days of the month that the job should execute on.
         * 
         * @return builder
         * 
         */
        public Builder monthDays(Integer... monthDays) {
            return monthDays(List.of(monthDays));
        }

        /**
         * @param monthlies A `monthly` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder monthlies(@Nullable Output<List<IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleMonthlyArgs>> monthlies) {
            $.monthlies = monthlies;
            return this;
        }

        /**
         * @param monthlies A `monthly` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder monthlies(List<IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleMonthlyArgs> monthlies) {
            return monthlies(Output.of(monthlies));
        }

        /**
         * @param monthlies A `monthly` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder monthlies(IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleMonthlyArgs... monthlies) {
            return monthlies(List.of(monthlies));
        }

        /**
         * @param weekDays A list of days of the week that the job should execute on. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
         * 
         * @return builder
         * 
         */
        public Builder weekDays(@Nullable Output<List<String>> weekDays) {
            $.weekDays = weekDays;
            return this;
        }

        /**
         * @param weekDays A list of days of the week that the job should execute on. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
         * 
         * @return builder
         * 
         */
        public Builder weekDays(List<String> weekDays) {
            return weekDays(Output.of(weekDays));
        }

        /**
         * @param weekDays A list of days of the week that the job should execute on. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
         * 
         * @return builder
         * 
         */
        public Builder weekDays(String... weekDays) {
            return weekDays(List.of(weekDays));
        }

        public IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleArgs build() {
            return $;
        }
    }

}
