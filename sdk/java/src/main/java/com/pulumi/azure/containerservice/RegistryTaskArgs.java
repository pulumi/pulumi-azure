// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice;

import com.pulumi.azure.containerservice.inputs.RegistryTaskAgentSettingArgs;
import com.pulumi.azure.containerservice.inputs.RegistryTaskBaseImageTriggerArgs;
import com.pulumi.azure.containerservice.inputs.RegistryTaskDockerStepArgs;
import com.pulumi.azure.containerservice.inputs.RegistryTaskEncodedStepArgs;
import com.pulumi.azure.containerservice.inputs.RegistryTaskFileStepArgs;
import com.pulumi.azure.containerservice.inputs.RegistryTaskIdentityArgs;
import com.pulumi.azure.containerservice.inputs.RegistryTaskPlatformArgs;
import com.pulumi.azure.containerservice.inputs.RegistryTaskRegistryCredentialArgs;
import com.pulumi.azure.containerservice.inputs.RegistryTaskSourceTriggerArgs;
import com.pulumi.azure.containerservice.inputs.RegistryTaskTimerTriggerArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistryTaskArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistryTaskArgs Empty = new RegistryTaskArgs();

    /**
     * The name of the dedicated Container Registry Agent Pool for this Container Registry Task.
     * 
     */
    @Import(name="agentPoolName")
    private @Nullable Output<String> agentPoolName;

    /**
     * @return The name of the dedicated Container Registry Agent Pool for this Container Registry Task.
     * 
     */
    public Optional<Output<String>> agentPoolName() {
        return Optional.ofNullable(this.agentPoolName);
    }

    /**
     * A `agent_setting` block as defined below.
     * 
     */
    @Import(name="agentSetting")
    private @Nullable Output<RegistryTaskAgentSettingArgs> agentSetting;

    /**
     * @return A `agent_setting` block as defined below.
     * 
     */
    public Optional<Output<RegistryTaskAgentSettingArgs>> agentSetting() {
        return Optional.ofNullable(this.agentSetting);
    }

    /**
     * A `base_image_trigger` block as defined below.
     * 
     */
    @Import(name="baseImageTrigger")
    private @Nullable Output<RegistryTaskBaseImageTriggerArgs> baseImageTrigger;

    /**
     * @return A `base_image_trigger` block as defined below.
     * 
     */
    public Optional<Output<RegistryTaskBaseImageTriggerArgs>> baseImageTrigger() {
        return Optional.ofNullable(this.baseImageTrigger);
    }

    /**
     * The ID of the Container Registry that this Container Registry Task resides in. Changing this forces a new Container Registry Task to be created.
     * 
     */
    @Import(name="containerRegistryId", required=true)
    private Output<String> containerRegistryId;

    /**
     * @return The ID of the Container Registry that this Container Registry Task resides in. Changing this forces a new Container Registry Task to be created.
     * 
     */
    public Output<String> containerRegistryId() {
        return this.containerRegistryId;
    }

    /**
     * A `docker_step` block as defined below.
     * 
     */
    @Import(name="dockerStep")
    private @Nullable Output<RegistryTaskDockerStepArgs> dockerStep;

    /**
     * @return A `docker_step` block as defined below.
     * 
     */
    public Optional<Output<RegistryTaskDockerStepArgs>> dockerStep() {
        return Optional.ofNullable(this.dockerStep);
    }

    /**
     * Should this Container Registry Task be enabled? Defaults to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Should this Container Registry Task be enabled? Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * A `encoded_step` block as defined below.
     * 
     */
    @Import(name="encodedStep")
    private @Nullable Output<RegistryTaskEncodedStepArgs> encodedStep;

    /**
     * @return A `encoded_step` block as defined below.
     * 
     */
    public Optional<Output<RegistryTaskEncodedStepArgs>> encodedStep() {
        return Optional.ofNullable(this.encodedStep);
    }

    /**
     * A `file_step` block as defined below.
     * 
     * &gt; **NOTE:** For non-system task (when `is_system_task` is set to `false`), one and only one of the `docker_step`, `encoded_step` and `file_step` should be specified.
     * 
     */
    @Import(name="fileStep")
    private @Nullable Output<RegistryTaskFileStepArgs> fileStep;

    /**
     * @return A `file_step` block as defined below.
     * 
     * &gt; **NOTE:** For non-system task (when `is_system_task` is set to `false`), one and only one of the `docker_step`, `encoded_step` and `file_step` should be specified.
     * 
     */
    public Optional<Output<RegistryTaskFileStepArgs>> fileStep() {
        return Optional.ofNullable(this.fileStep);
    }

    /**
     * An `identity` block as defined below.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<RegistryTaskIdentityArgs> identity;

    /**
     * @return An `identity` block as defined below.
     * 
     */
    public Optional<Output<RegistryTaskIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * Whether this Container Registry Task is a system task. Changing this forces a new Container Registry Task to be created. Defaults to `false`.
     * 
     */
    @Import(name="isSystemTask")
    private @Nullable Output<Boolean> isSystemTask;

    /**
     * @return Whether this Container Registry Task is a system task. Changing this forces a new Container Registry Task to be created. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> isSystemTask() {
        return Optional.ofNullable(this.isSystemTask);
    }

    /**
     * The template that describes the run log artifact.
     * 
     */
    @Import(name="logTemplate")
    private @Nullable Output<String> logTemplate;

    /**
     * @return The template that describes the run log artifact.
     * 
     */
    public Optional<Output<String>> logTemplate() {
        return Optional.ofNullable(this.logTemplate);
    }

    /**
     * The name which should be used for this Container Registry Task. Changing this forces a new Container Registry Task to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Container Registry Task. Changing this forces a new Container Registry Task to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A `platform` block as defined below.
     * 
     * &gt; **NOTE:** The `platform` is required for non-system task (when `is_system_task` is set to `false`).
     * 
     */
    @Import(name="platform")
    private @Nullable Output<RegistryTaskPlatformArgs> platform;

    /**
     * @return A `platform` block as defined below.
     * 
     * &gt; **NOTE:** The `platform` is required for non-system task (when `is_system_task` is set to `false`).
     * 
     */
    public Optional<Output<RegistryTaskPlatformArgs>> platform() {
        return Optional.ofNullable(this.platform);
    }

    /**
     * One `registry_credential` block as defined below.
     * 
     */
    @Import(name="registryCredential")
    private @Nullable Output<RegistryTaskRegistryCredentialArgs> registryCredential;

    /**
     * @return One `registry_credential` block as defined below.
     * 
     */
    public Optional<Output<RegistryTaskRegistryCredentialArgs>> registryCredential() {
        return Optional.ofNullable(this.registryCredential);
    }

    /**
     * One or more `source_trigger` blocks as defined below.
     * 
     */
    @Import(name="sourceTriggers")
    private @Nullable Output<List<RegistryTaskSourceTriggerArgs>> sourceTriggers;

    /**
     * @return One or more `source_trigger` blocks as defined below.
     * 
     */
    public Optional<Output<List<RegistryTaskSourceTriggerArgs>>> sourceTriggers() {
        return Optional.ofNullable(this.sourceTriggers);
    }

    /**
     * A mapping of tags which should be assigned to the Container Registry Task.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the Container Registry Task.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The timeout of this Container Registry Task in seconds. The valid range lies from 300 to 28800. Defaults to `3600`.
     * 
     */
    @Import(name="timeoutInSeconds")
    private @Nullable Output<Integer> timeoutInSeconds;

    /**
     * @return The timeout of this Container Registry Task in seconds. The valid range lies from 300 to 28800. Defaults to `3600`.
     * 
     */
    public Optional<Output<Integer>> timeoutInSeconds() {
        return Optional.ofNullable(this.timeoutInSeconds);
    }

    /**
     * One or more `timer_trigger` blocks as defined below.
     * 
     */
    @Import(name="timerTriggers")
    private @Nullable Output<List<RegistryTaskTimerTriggerArgs>> timerTriggers;

    /**
     * @return One or more `timer_trigger` blocks as defined below.
     * 
     */
    public Optional<Output<List<RegistryTaskTimerTriggerArgs>>> timerTriggers() {
        return Optional.ofNullable(this.timerTriggers);
    }

    private RegistryTaskArgs() {}

    private RegistryTaskArgs(RegistryTaskArgs $) {
        this.agentPoolName = $.agentPoolName;
        this.agentSetting = $.agentSetting;
        this.baseImageTrigger = $.baseImageTrigger;
        this.containerRegistryId = $.containerRegistryId;
        this.dockerStep = $.dockerStep;
        this.enabled = $.enabled;
        this.encodedStep = $.encodedStep;
        this.fileStep = $.fileStep;
        this.identity = $.identity;
        this.isSystemTask = $.isSystemTask;
        this.logTemplate = $.logTemplate;
        this.name = $.name;
        this.platform = $.platform;
        this.registryCredential = $.registryCredential;
        this.sourceTriggers = $.sourceTriggers;
        this.tags = $.tags;
        this.timeoutInSeconds = $.timeoutInSeconds;
        this.timerTriggers = $.timerTriggers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryTaskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryTaskArgs $;

        public Builder() {
            $ = new RegistryTaskArgs();
        }

        public Builder(RegistryTaskArgs defaults) {
            $ = new RegistryTaskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param agentPoolName The name of the dedicated Container Registry Agent Pool for this Container Registry Task.
         * 
         * @return builder
         * 
         */
        public Builder agentPoolName(@Nullable Output<String> agentPoolName) {
            $.agentPoolName = agentPoolName;
            return this;
        }

        /**
         * @param agentPoolName The name of the dedicated Container Registry Agent Pool for this Container Registry Task.
         * 
         * @return builder
         * 
         */
        public Builder agentPoolName(String agentPoolName) {
            return agentPoolName(Output.of(agentPoolName));
        }

        /**
         * @param agentSetting A `agent_setting` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder agentSetting(@Nullable Output<RegistryTaskAgentSettingArgs> agentSetting) {
            $.agentSetting = agentSetting;
            return this;
        }

        /**
         * @param agentSetting A `agent_setting` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder agentSetting(RegistryTaskAgentSettingArgs agentSetting) {
            return agentSetting(Output.of(agentSetting));
        }

        /**
         * @param baseImageTrigger A `base_image_trigger` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder baseImageTrigger(@Nullable Output<RegistryTaskBaseImageTriggerArgs> baseImageTrigger) {
            $.baseImageTrigger = baseImageTrigger;
            return this;
        }

        /**
         * @param baseImageTrigger A `base_image_trigger` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder baseImageTrigger(RegistryTaskBaseImageTriggerArgs baseImageTrigger) {
            return baseImageTrigger(Output.of(baseImageTrigger));
        }

        /**
         * @param containerRegistryId The ID of the Container Registry that this Container Registry Task resides in. Changing this forces a new Container Registry Task to be created.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryId(Output<String> containerRegistryId) {
            $.containerRegistryId = containerRegistryId;
            return this;
        }

        /**
         * @param containerRegistryId The ID of the Container Registry that this Container Registry Task resides in. Changing this forces a new Container Registry Task to be created.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryId(String containerRegistryId) {
            return containerRegistryId(Output.of(containerRegistryId));
        }

        /**
         * @param dockerStep A `docker_step` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder dockerStep(@Nullable Output<RegistryTaskDockerStepArgs> dockerStep) {
            $.dockerStep = dockerStep;
            return this;
        }

        /**
         * @param dockerStep A `docker_step` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder dockerStep(RegistryTaskDockerStepArgs dockerStep) {
            return dockerStep(Output.of(dockerStep));
        }

        /**
         * @param enabled Should this Container Registry Task be enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Should this Container Registry Task be enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param encodedStep A `encoded_step` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder encodedStep(@Nullable Output<RegistryTaskEncodedStepArgs> encodedStep) {
            $.encodedStep = encodedStep;
            return this;
        }

        /**
         * @param encodedStep A `encoded_step` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder encodedStep(RegistryTaskEncodedStepArgs encodedStep) {
            return encodedStep(Output.of(encodedStep));
        }

        /**
         * @param fileStep A `file_step` block as defined below.
         * 
         * &gt; **NOTE:** For non-system task (when `is_system_task` is set to `false`), one and only one of the `docker_step`, `encoded_step` and `file_step` should be specified.
         * 
         * @return builder
         * 
         */
        public Builder fileStep(@Nullable Output<RegistryTaskFileStepArgs> fileStep) {
            $.fileStep = fileStep;
            return this;
        }

        /**
         * @param fileStep A `file_step` block as defined below.
         * 
         * &gt; **NOTE:** For non-system task (when `is_system_task` is set to `false`), one and only one of the `docker_step`, `encoded_step` and `file_step` should be specified.
         * 
         * @return builder
         * 
         */
        public Builder fileStep(RegistryTaskFileStepArgs fileStep) {
            return fileStep(Output.of(fileStep));
        }

        /**
         * @param identity An `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<RegistryTaskIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity An `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(RegistryTaskIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param isSystemTask Whether this Container Registry Task is a system task. Changing this forces a new Container Registry Task to be created. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder isSystemTask(@Nullable Output<Boolean> isSystemTask) {
            $.isSystemTask = isSystemTask;
            return this;
        }

        /**
         * @param isSystemTask Whether this Container Registry Task is a system task. Changing this forces a new Container Registry Task to be created. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder isSystemTask(Boolean isSystemTask) {
            return isSystemTask(Output.of(isSystemTask));
        }

        /**
         * @param logTemplate The template that describes the run log artifact.
         * 
         * @return builder
         * 
         */
        public Builder logTemplate(@Nullable Output<String> logTemplate) {
            $.logTemplate = logTemplate;
            return this;
        }

        /**
         * @param logTemplate The template that describes the run log artifact.
         * 
         * @return builder
         * 
         */
        public Builder logTemplate(String logTemplate) {
            return logTemplate(Output.of(logTemplate));
        }

        /**
         * @param name The name which should be used for this Container Registry Task. Changing this forces a new Container Registry Task to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Container Registry Task. Changing this forces a new Container Registry Task to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param platform A `platform` block as defined below.
         * 
         * &gt; **NOTE:** The `platform` is required for non-system task (when `is_system_task` is set to `false`).
         * 
         * @return builder
         * 
         */
        public Builder platform(@Nullable Output<RegistryTaskPlatformArgs> platform) {
            $.platform = platform;
            return this;
        }

        /**
         * @param platform A `platform` block as defined below.
         * 
         * &gt; **NOTE:** The `platform` is required for non-system task (when `is_system_task` is set to `false`).
         * 
         * @return builder
         * 
         */
        public Builder platform(RegistryTaskPlatformArgs platform) {
            return platform(Output.of(platform));
        }

        /**
         * @param registryCredential One `registry_credential` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder registryCredential(@Nullable Output<RegistryTaskRegistryCredentialArgs> registryCredential) {
            $.registryCredential = registryCredential;
            return this;
        }

        /**
         * @param registryCredential One `registry_credential` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder registryCredential(RegistryTaskRegistryCredentialArgs registryCredential) {
            return registryCredential(Output.of(registryCredential));
        }

        /**
         * @param sourceTriggers One or more `source_trigger` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder sourceTriggers(@Nullable Output<List<RegistryTaskSourceTriggerArgs>> sourceTriggers) {
            $.sourceTriggers = sourceTriggers;
            return this;
        }

        /**
         * @param sourceTriggers One or more `source_trigger` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder sourceTriggers(List<RegistryTaskSourceTriggerArgs> sourceTriggers) {
            return sourceTriggers(Output.of(sourceTriggers));
        }

        /**
         * @param sourceTriggers One or more `source_trigger` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder sourceTriggers(RegistryTaskSourceTriggerArgs... sourceTriggers) {
            return sourceTriggers(List.of(sourceTriggers));
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Container Registry Task.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Container Registry Task.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param timeoutInSeconds The timeout of this Container Registry Task in seconds. The valid range lies from 300 to 28800. Defaults to `3600`.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInSeconds(@Nullable Output<Integer> timeoutInSeconds) {
            $.timeoutInSeconds = timeoutInSeconds;
            return this;
        }

        /**
         * @param timeoutInSeconds The timeout of this Container Registry Task in seconds. The valid range lies from 300 to 28800. Defaults to `3600`.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInSeconds(Integer timeoutInSeconds) {
            return timeoutInSeconds(Output.of(timeoutInSeconds));
        }

        /**
         * @param timerTriggers One or more `timer_trigger` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder timerTriggers(@Nullable Output<List<RegistryTaskTimerTriggerArgs>> timerTriggers) {
            $.timerTriggers = timerTriggers;
            return this;
        }

        /**
         * @param timerTriggers One or more `timer_trigger` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder timerTriggers(List<RegistryTaskTimerTriggerArgs> timerTriggers) {
            return timerTriggers(Output.of(timerTriggers));
        }

        /**
         * @param timerTriggers One or more `timer_trigger` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder timerTriggers(RegistryTaskTimerTriggerArgs... timerTriggers) {
            return timerTriggers(List.of(timerTriggers));
        }

        public RegistryTaskArgs build() {
            if ($.containerRegistryId == null) {
                throw new MissingRequiredPropertyException("RegistryTaskArgs", "containerRegistryId");
            }
            return $;
        }
    }

}
