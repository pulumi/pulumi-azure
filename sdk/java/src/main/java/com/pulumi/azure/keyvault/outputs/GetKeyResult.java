// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.keyvault.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetKeyResult {
    /**
     * @return The EC Curve name of this Key Vault Key.
     * 
     */
    private String curve;
    /**
     * @return The RSA public exponent of this Key Vault Key.
     * 
     */
    private String e;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A list of JSON web key operations assigned to this Key Vault Key
     * 
     */
    private List<String> keyOpts;
    /**
     * @return Specifies the Size of this Key Vault Key.
     * 
     */
    private Integer keySize;
    /**
     * @return Specifies the Key Type of this Key Vault Key
     * 
     */
    private String keyType;
    private String keyVaultId;
    /**
     * @return The RSA modulus of this Key Vault Key.
     * 
     */
    private String n;
    private String name;
    /**
     * @return The OpenSSH encoded public key of this Key Vault Key.
     * 
     */
    private String publicKeyOpenssh;
    /**
     * @return The PEM encoded public key of this Key Vault Key.
     * 
     */
    private String publicKeyPem;
    /**
     * @return The (Versioned) ID for this Key Vault Key. This property points to a specific version of a Key Vault Key, as such using this won&#39;t auto-rotate values if used in other Azure Services.
     * 
     */
    private String resourceId;
    /**
     * @return The Versionless ID of the Key Vault Key. This property allows other Azure Services (that support it) to auto-rotate their value when the Key Vault Key is updated.
     * 
     */
    private String resourceVersionlessId;
    /**
     * @return A mapping of tags assigned to this Key Vault Key.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The current version of the Key Vault Key.
     * 
     */
    private String version;
    /**
     * @return The Base ID of the Key Vault Key.
     * 
     */
    private String versionlessId;
    /**
     * @return The EC X component of this Key Vault Key.
     * 
     */
    private String x;
    /**
     * @return The EC Y component of this Key Vault Key.
     * 
     */
    private String y;

    private GetKeyResult() {}
    /**
     * @return The EC Curve name of this Key Vault Key.
     * 
     */
    public String curve() {
        return this.curve;
    }
    /**
     * @return The RSA public exponent of this Key Vault Key.
     * 
     */
    public String e() {
        return this.e;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A list of JSON web key operations assigned to this Key Vault Key
     * 
     */
    public List<String> keyOpts() {
        return this.keyOpts;
    }
    /**
     * @return Specifies the Size of this Key Vault Key.
     * 
     */
    public Integer keySize() {
        return this.keySize;
    }
    /**
     * @return Specifies the Key Type of this Key Vault Key
     * 
     */
    public String keyType() {
        return this.keyType;
    }
    public String keyVaultId() {
        return this.keyVaultId;
    }
    /**
     * @return The RSA modulus of this Key Vault Key.
     * 
     */
    public String n() {
        return this.n;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The OpenSSH encoded public key of this Key Vault Key.
     * 
     */
    public String publicKeyOpenssh() {
        return this.publicKeyOpenssh;
    }
    /**
     * @return The PEM encoded public key of this Key Vault Key.
     * 
     */
    public String publicKeyPem() {
        return this.publicKeyPem;
    }
    /**
     * @return The (Versioned) ID for this Key Vault Key. This property points to a specific version of a Key Vault Key, as such using this won&#39;t auto-rotate values if used in other Azure Services.
     * 
     */
    public String resourceId() {
        return this.resourceId;
    }
    /**
     * @return The Versionless ID of the Key Vault Key. This property allows other Azure Services (that support it) to auto-rotate their value when the Key Vault Key is updated.
     * 
     */
    public String resourceVersionlessId() {
        return this.resourceVersionlessId;
    }
    /**
     * @return A mapping of tags assigned to this Key Vault Key.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The current version of the Key Vault Key.
     * 
     */
    public String version() {
        return this.version;
    }
    /**
     * @return The Base ID of the Key Vault Key.
     * 
     */
    public String versionlessId() {
        return this.versionlessId;
    }
    /**
     * @return The EC X component of this Key Vault Key.
     * 
     */
    public String x() {
        return this.x;
    }
    /**
     * @return The EC Y component of this Key Vault Key.
     * 
     */
    public String y() {
        return this.y;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKeyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String curve;
        private String e;
        private String id;
        private List<String> keyOpts;
        private Integer keySize;
        private String keyType;
        private String keyVaultId;
        private String n;
        private String name;
        private String publicKeyOpenssh;
        private String publicKeyPem;
        private String resourceId;
        private String resourceVersionlessId;
        private Map<String,String> tags;
        private String version;
        private String versionlessId;
        private String x;
        private String y;
        public Builder() {}
        public Builder(GetKeyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.curve = defaults.curve;
    	      this.e = defaults.e;
    	      this.id = defaults.id;
    	      this.keyOpts = defaults.keyOpts;
    	      this.keySize = defaults.keySize;
    	      this.keyType = defaults.keyType;
    	      this.keyVaultId = defaults.keyVaultId;
    	      this.n = defaults.n;
    	      this.name = defaults.name;
    	      this.publicKeyOpenssh = defaults.publicKeyOpenssh;
    	      this.publicKeyPem = defaults.publicKeyPem;
    	      this.resourceId = defaults.resourceId;
    	      this.resourceVersionlessId = defaults.resourceVersionlessId;
    	      this.tags = defaults.tags;
    	      this.version = defaults.version;
    	      this.versionlessId = defaults.versionlessId;
    	      this.x = defaults.x;
    	      this.y = defaults.y;
        }

        @CustomType.Setter
        public Builder curve(String curve) {
            this.curve = Objects.requireNonNull(curve);
            return this;
        }
        @CustomType.Setter
        public Builder e(String e) {
            this.e = Objects.requireNonNull(e);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder keyOpts(List<String> keyOpts) {
            this.keyOpts = Objects.requireNonNull(keyOpts);
            return this;
        }
        public Builder keyOpts(String... keyOpts) {
            return keyOpts(List.of(keyOpts));
        }
        @CustomType.Setter
        public Builder keySize(Integer keySize) {
            this.keySize = Objects.requireNonNull(keySize);
            return this;
        }
        @CustomType.Setter
        public Builder keyType(String keyType) {
            this.keyType = Objects.requireNonNull(keyType);
            return this;
        }
        @CustomType.Setter
        public Builder keyVaultId(String keyVaultId) {
            this.keyVaultId = Objects.requireNonNull(keyVaultId);
            return this;
        }
        @CustomType.Setter
        public Builder n(String n) {
            this.n = Objects.requireNonNull(n);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder publicKeyOpenssh(String publicKeyOpenssh) {
            this.publicKeyOpenssh = Objects.requireNonNull(publicKeyOpenssh);
            return this;
        }
        @CustomType.Setter
        public Builder publicKeyPem(String publicKeyPem) {
            this.publicKeyPem = Objects.requireNonNull(publicKeyPem);
            return this;
        }
        @CustomType.Setter
        public Builder resourceId(String resourceId) {
            this.resourceId = Objects.requireNonNull(resourceId);
            return this;
        }
        @CustomType.Setter
        public Builder resourceVersionlessId(String resourceVersionlessId) {
            this.resourceVersionlessId = Objects.requireNonNull(resourceVersionlessId);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        @CustomType.Setter
        public Builder versionlessId(String versionlessId) {
            this.versionlessId = Objects.requireNonNull(versionlessId);
            return this;
        }
        @CustomType.Setter
        public Builder x(String x) {
            this.x = Objects.requireNonNull(x);
            return this;
        }
        @CustomType.Setter
        public Builder y(String y) {
            this.y = Objects.requireNonNull(y);
            return this;
        }
        public GetKeyResult build() {
            final var o = new GetKeyResult();
            o.curve = curve;
            o.e = e;
            o.id = id;
            o.keyOpts = keyOpts;
            o.keySize = keySize;
            o.keyType = keyType;
            o.keyVaultId = keyVaultId;
            o.n = n;
            o.name = name;
            o.publicKeyOpenssh = publicKeyOpenssh;
            o.publicKeyPem = publicKeyPem;
            o.resourceId = resourceId;
            o.resourceVersionlessId = resourceVersionlessId;
            o.tags = tags;
            o.version = version;
            o.versionlessId = versionlessId;
            o.x = x;
            o.y = y;
            return o;
        }
    }
}
