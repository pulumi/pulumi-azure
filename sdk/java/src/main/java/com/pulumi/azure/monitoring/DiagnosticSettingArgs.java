// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring;

import com.pulumi.azure.monitoring.inputs.DiagnosticSettingLogArgs;
import com.pulumi.azure.monitoring.inputs.DiagnosticSettingMetricArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiagnosticSettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiagnosticSettingArgs Empty = new DiagnosticSettingArgs();

    /**
     * Specifies the ID of an Event Hub Namespace Authorization Rule used to send Diagnostics Data. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="eventhubAuthorizationRuleId")
    private @Nullable Output<String> eventhubAuthorizationRuleId;

    /**
     * @return Specifies the ID of an Event Hub Namespace Authorization Rule used to send Diagnostics Data. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> eventhubAuthorizationRuleId() {
        return Optional.ofNullable(this.eventhubAuthorizationRuleId);
    }

    /**
     * Specifies the name of the Event Hub where Diagnostics Data should be sent. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="eventhubName")
    private @Nullable Output<String> eventhubName;

    /**
     * @return Specifies the name of the Event Hub where Diagnostics Data should be sent. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> eventhubName() {
        return Optional.ofNullable(this.eventhubName);
    }

    /**
     * When set to &#39;Dedicated&#39; logs sent to a Log Analytics workspace will go into resource specific tables, instead of the legacy AzureDiagnostics table.
     * 
     */
    @Import(name="logAnalyticsDestinationType")
    private @Nullable Output<String> logAnalyticsDestinationType;

    /**
     * @return When set to &#39;Dedicated&#39; logs sent to a Log Analytics workspace will go into resource specific tables, instead of the legacy AzureDiagnostics table.
     * 
     */
    public Optional<Output<String>> logAnalyticsDestinationType() {
        return Optional.ofNullable(this.logAnalyticsDestinationType);
    }

    /**
     * Specifies the ID of a Log Analytics Workspace where Diagnostics Data should be sent.
     * 
     */
    @Import(name="logAnalyticsWorkspaceId")
    private @Nullable Output<String> logAnalyticsWorkspaceId;

    /**
     * @return Specifies the ID of a Log Analytics Workspace where Diagnostics Data should be sent.
     * 
     */
    public Optional<Output<String>> logAnalyticsWorkspaceId() {
        return Optional.ofNullable(this.logAnalyticsWorkspaceId);
    }

    /**
     * One or more `log` blocks as defined below.
     * 
     */
    @Import(name="logs")
    private @Nullable Output<List<DiagnosticSettingLogArgs>> logs;

    /**
     * @return One or more `log` blocks as defined below.
     * 
     */
    public Optional<Output<List<DiagnosticSettingLogArgs>>> logs() {
        return Optional.ofNullable(this.logs);
    }

    /**
     * One or more `metric` blocks as defined below.
     * 
     */
    @Import(name="metrics")
    private @Nullable Output<List<DiagnosticSettingMetricArgs>> metrics;

    /**
     * @return One or more `metric` blocks as defined below.
     * 
     */
    public Optional<Output<List<DiagnosticSettingMetricArgs>>> metrics() {
        return Optional.ofNullable(this.metrics);
    }

    /**
     * Specifies the name of the Diagnostic Setting. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the Diagnostic Setting. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the Storage Account where logs should be sent. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="storageAccountId")
    private @Nullable Output<String> storageAccountId;

    /**
     * @return The ID of the Storage Account where logs should be sent. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> storageAccountId() {
        return Optional.ofNullable(this.storageAccountId);
    }

    /**
     * The ID of an existing Resource on which to configure Diagnostic Settings. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="targetResourceId", required=true)
    private Output<String> targetResourceId;

    /**
     * @return The ID of an existing Resource on which to configure Diagnostic Settings. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> targetResourceId() {
        return this.targetResourceId;
    }

    private DiagnosticSettingArgs() {}

    private DiagnosticSettingArgs(DiagnosticSettingArgs $) {
        this.eventhubAuthorizationRuleId = $.eventhubAuthorizationRuleId;
        this.eventhubName = $.eventhubName;
        this.logAnalyticsDestinationType = $.logAnalyticsDestinationType;
        this.logAnalyticsWorkspaceId = $.logAnalyticsWorkspaceId;
        this.logs = $.logs;
        this.metrics = $.metrics;
        this.name = $.name;
        this.storageAccountId = $.storageAccountId;
        this.targetResourceId = $.targetResourceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiagnosticSettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiagnosticSettingArgs $;

        public Builder() {
            $ = new DiagnosticSettingArgs();
        }

        public Builder(DiagnosticSettingArgs defaults) {
            $ = new DiagnosticSettingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param eventhubAuthorizationRuleId Specifies the ID of an Event Hub Namespace Authorization Rule used to send Diagnostics Data. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder eventhubAuthorizationRuleId(@Nullable Output<String> eventhubAuthorizationRuleId) {
            $.eventhubAuthorizationRuleId = eventhubAuthorizationRuleId;
            return this;
        }

        /**
         * @param eventhubAuthorizationRuleId Specifies the ID of an Event Hub Namespace Authorization Rule used to send Diagnostics Data. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder eventhubAuthorizationRuleId(String eventhubAuthorizationRuleId) {
            return eventhubAuthorizationRuleId(Output.of(eventhubAuthorizationRuleId));
        }

        /**
         * @param eventhubName Specifies the name of the Event Hub where Diagnostics Data should be sent. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder eventhubName(@Nullable Output<String> eventhubName) {
            $.eventhubName = eventhubName;
            return this;
        }

        /**
         * @param eventhubName Specifies the name of the Event Hub where Diagnostics Data should be sent. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder eventhubName(String eventhubName) {
            return eventhubName(Output.of(eventhubName));
        }

        /**
         * @param logAnalyticsDestinationType When set to &#39;Dedicated&#39; logs sent to a Log Analytics workspace will go into resource specific tables, instead of the legacy AzureDiagnostics table.
         * 
         * @return builder
         * 
         */
        public Builder logAnalyticsDestinationType(@Nullable Output<String> logAnalyticsDestinationType) {
            $.logAnalyticsDestinationType = logAnalyticsDestinationType;
            return this;
        }

        /**
         * @param logAnalyticsDestinationType When set to &#39;Dedicated&#39; logs sent to a Log Analytics workspace will go into resource specific tables, instead of the legacy AzureDiagnostics table.
         * 
         * @return builder
         * 
         */
        public Builder logAnalyticsDestinationType(String logAnalyticsDestinationType) {
            return logAnalyticsDestinationType(Output.of(logAnalyticsDestinationType));
        }

        /**
         * @param logAnalyticsWorkspaceId Specifies the ID of a Log Analytics Workspace where Diagnostics Data should be sent.
         * 
         * @return builder
         * 
         */
        public Builder logAnalyticsWorkspaceId(@Nullable Output<String> logAnalyticsWorkspaceId) {
            $.logAnalyticsWorkspaceId = logAnalyticsWorkspaceId;
            return this;
        }

        /**
         * @param logAnalyticsWorkspaceId Specifies the ID of a Log Analytics Workspace where Diagnostics Data should be sent.
         * 
         * @return builder
         * 
         */
        public Builder logAnalyticsWorkspaceId(String logAnalyticsWorkspaceId) {
            return logAnalyticsWorkspaceId(Output.of(logAnalyticsWorkspaceId));
        }

        /**
         * @param logs One or more `log` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder logs(@Nullable Output<List<DiagnosticSettingLogArgs>> logs) {
            $.logs = logs;
            return this;
        }

        /**
         * @param logs One or more `log` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder logs(List<DiagnosticSettingLogArgs> logs) {
            return logs(Output.of(logs));
        }

        /**
         * @param logs One or more `log` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder logs(DiagnosticSettingLogArgs... logs) {
            return logs(List.of(logs));
        }

        /**
         * @param metrics One or more `metric` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder metrics(@Nullable Output<List<DiagnosticSettingMetricArgs>> metrics) {
            $.metrics = metrics;
            return this;
        }

        /**
         * @param metrics One or more `metric` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder metrics(List<DiagnosticSettingMetricArgs> metrics) {
            return metrics(Output.of(metrics));
        }

        /**
         * @param metrics One or more `metric` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder metrics(DiagnosticSettingMetricArgs... metrics) {
            return metrics(List.of(metrics));
        }

        /**
         * @param name Specifies the name of the Diagnostic Setting. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Diagnostic Setting. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param storageAccountId The ID of the Storage Account where logs should be sent. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountId(@Nullable Output<String> storageAccountId) {
            $.storageAccountId = storageAccountId;
            return this;
        }

        /**
         * @param storageAccountId The ID of the Storage Account where logs should be sent. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountId(String storageAccountId) {
            return storageAccountId(Output.of(storageAccountId));
        }

        /**
         * @param targetResourceId The ID of an existing Resource on which to configure Diagnostic Settings. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceId(Output<String> targetResourceId) {
            $.targetResourceId = targetResourceId;
            return this;
        }

        /**
         * @param targetResourceId The ID of an existing Resource on which to configure Diagnostic Settings. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceId(String targetResourceId) {
            return targetResourceId(Output.of(targetResourceId));
        }

        public DiagnosticSettingArgs build() {
            $.targetResourceId = Objects.requireNonNull($.targetResourceId, "expected parameter 'targetResourceId' to be non-null");
            return $;
        }
    }

}
