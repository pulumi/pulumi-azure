// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.storage;

import com.pulumi.azure.storage.inputs.AccountNetworkRulesPrivateLinkAccessRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountNetworkRulesArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccountNetworkRulesArgs Empty = new AccountNetworkRulesArgs();

    /**
     * Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Valid options are any combination of `Logging`, `Metrics`, `AzureServices`, or `None`.
     * 
     * &gt; **NOTE** User has to explicitly set `bypass` to empty slice (`[]`) to remove it.
     * 
     */
    @Import(name="bypasses")
    private @Nullable Output<List<String>> bypasses;

    /**
     * @return Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Valid options are any combination of `Logging`, `Metrics`, `AzureServices`, or `None`.
     * 
     * &gt; **NOTE** User has to explicitly set `bypass` to empty slice (`[]`) to remove it.
     * 
     */
    public Optional<Output<List<String>>> bypasses() {
        return Optional.ofNullable(this.bypasses);
    }

    /**
     * Specifies the default action of allow or deny when no other rules match. Valid options are `Deny` or `Allow`.
     * 
     */
    @Import(name="defaultAction", required=true)
    private Output<String> defaultAction;

    /**
     * @return Specifies the default action of allow or deny when no other rules match. Valid options are `Deny` or `Allow`.
     * 
     */
    public Output<String> defaultAction() {
        return this.defaultAction;
    }

    /**
     * List of public IP or IP ranges in CIDR Format. Only IPv4 addresses are allowed. Private IP address ranges (as defined in [RFC 1918](https://tools.ietf.org/html/rfc1918#section-3)) are not allowed.
     * 
     * &gt; **NOTE** Small address ranges using &#34;/31&#34; or &#34;/32&#34; prefix sizes are not supported. These ranges should be configured using individual IP address rules without prefix specified.
     * 
     * &gt; **NOTE** IP network rules have no effect on requests originating from the same Azure region as the storage account. Use Virtual network rules to allow same-region requests. Services deployed in the same region as the storage account use private Azure IP addresses for communication. Thus, you cannot restrict access to specific Azure services based on their public outbound IP address range.
     * 
     * &gt; **NOTE** User has to explicitly set `ip_rules` to empty slice (`[]`) to remove it.
     * 
     */
    @Import(name="ipRules")
    private @Nullable Output<List<String>> ipRules;

    /**
     * @return List of public IP or IP ranges in CIDR Format. Only IPv4 addresses are allowed. Private IP address ranges (as defined in [RFC 1918](https://tools.ietf.org/html/rfc1918#section-3)) are not allowed.
     * 
     * &gt; **NOTE** Small address ranges using &#34;/31&#34; or &#34;/32&#34; prefix sizes are not supported. These ranges should be configured using individual IP address rules without prefix specified.
     * 
     * &gt; **NOTE** IP network rules have no effect on requests originating from the same Azure region as the storage account. Use Virtual network rules to allow same-region requests. Services deployed in the same region as the storage account use private Azure IP addresses for communication. Thus, you cannot restrict access to specific Azure services based on their public outbound IP address range.
     * 
     * &gt; **NOTE** User has to explicitly set `ip_rules` to empty slice (`[]`) to remove it.
     * 
     */
    public Optional<Output<List<String>>> ipRules() {
        return Optional.ofNullable(this.ipRules);
    }

    /**
     * One or more `private_link_access` block as defined below.
     * 
     */
    @Import(name="privateLinkAccessRules")
    private @Nullable Output<List<AccountNetworkRulesPrivateLinkAccessRuleArgs>> privateLinkAccessRules;

    /**
     * @return One or more `private_link_access` block as defined below.
     * 
     */
    public Optional<Output<List<AccountNetworkRulesPrivateLinkAccessRuleArgs>>> privateLinkAccessRules() {
        return Optional.ofNullable(this.privateLinkAccessRules);
    }

    /**
     * Specifies the ID of the storage account. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="storageAccountId", required=true)
    private Output<String> storageAccountId;

    /**
     * @return Specifies the ID of the storage account. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> storageAccountId() {
        return this.storageAccountId;
    }

    /**
     * A list of virtual network subnet ids to secure the storage account.
     * 
     * &gt; **NOTE** User has to explicitly set `virtual_network_subnet_ids` to empty slice (`[]`) to remove it.
     * 
     */
    @Import(name="virtualNetworkSubnetIds")
    private @Nullable Output<List<String>> virtualNetworkSubnetIds;

    /**
     * @return A list of virtual network subnet ids to secure the storage account.
     * 
     * &gt; **NOTE** User has to explicitly set `virtual_network_subnet_ids` to empty slice (`[]`) to remove it.
     * 
     */
    public Optional<Output<List<String>>> virtualNetworkSubnetIds() {
        return Optional.ofNullable(this.virtualNetworkSubnetIds);
    }

    private AccountNetworkRulesArgs() {}

    private AccountNetworkRulesArgs(AccountNetworkRulesArgs $) {
        this.bypasses = $.bypasses;
        this.defaultAction = $.defaultAction;
        this.ipRules = $.ipRules;
        this.privateLinkAccessRules = $.privateLinkAccessRules;
        this.storageAccountId = $.storageAccountId;
        this.virtualNetworkSubnetIds = $.virtualNetworkSubnetIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountNetworkRulesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountNetworkRulesArgs $;

        public Builder() {
            $ = new AccountNetworkRulesArgs();
        }

        public Builder(AccountNetworkRulesArgs defaults) {
            $ = new AccountNetworkRulesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bypasses Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Valid options are any combination of `Logging`, `Metrics`, `AzureServices`, or `None`.
         * 
         * &gt; **NOTE** User has to explicitly set `bypass` to empty slice (`[]`) to remove it.
         * 
         * @return builder
         * 
         */
        public Builder bypasses(@Nullable Output<List<String>> bypasses) {
            $.bypasses = bypasses;
            return this;
        }

        /**
         * @param bypasses Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Valid options are any combination of `Logging`, `Metrics`, `AzureServices`, or `None`.
         * 
         * &gt; **NOTE** User has to explicitly set `bypass` to empty slice (`[]`) to remove it.
         * 
         * @return builder
         * 
         */
        public Builder bypasses(List<String> bypasses) {
            return bypasses(Output.of(bypasses));
        }

        /**
         * @param bypasses Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Valid options are any combination of `Logging`, `Metrics`, `AzureServices`, or `None`.
         * 
         * &gt; **NOTE** User has to explicitly set `bypass` to empty slice (`[]`) to remove it.
         * 
         * @return builder
         * 
         */
        public Builder bypasses(String... bypasses) {
            return bypasses(List.of(bypasses));
        }

        /**
         * @param defaultAction Specifies the default action of allow or deny when no other rules match. Valid options are `Deny` or `Allow`.
         * 
         * @return builder
         * 
         */
        public Builder defaultAction(Output<String> defaultAction) {
            $.defaultAction = defaultAction;
            return this;
        }

        /**
         * @param defaultAction Specifies the default action of allow or deny when no other rules match. Valid options are `Deny` or `Allow`.
         * 
         * @return builder
         * 
         */
        public Builder defaultAction(String defaultAction) {
            return defaultAction(Output.of(defaultAction));
        }

        /**
         * @param ipRules List of public IP or IP ranges in CIDR Format. Only IPv4 addresses are allowed. Private IP address ranges (as defined in [RFC 1918](https://tools.ietf.org/html/rfc1918#section-3)) are not allowed.
         * 
         * &gt; **NOTE** Small address ranges using &#34;/31&#34; or &#34;/32&#34; prefix sizes are not supported. These ranges should be configured using individual IP address rules without prefix specified.
         * 
         * &gt; **NOTE** IP network rules have no effect on requests originating from the same Azure region as the storage account. Use Virtual network rules to allow same-region requests. Services deployed in the same region as the storage account use private Azure IP addresses for communication. Thus, you cannot restrict access to specific Azure services based on their public outbound IP address range.
         * 
         * &gt; **NOTE** User has to explicitly set `ip_rules` to empty slice (`[]`) to remove it.
         * 
         * @return builder
         * 
         */
        public Builder ipRules(@Nullable Output<List<String>> ipRules) {
            $.ipRules = ipRules;
            return this;
        }

        /**
         * @param ipRules List of public IP or IP ranges in CIDR Format. Only IPv4 addresses are allowed. Private IP address ranges (as defined in [RFC 1918](https://tools.ietf.org/html/rfc1918#section-3)) are not allowed.
         * 
         * &gt; **NOTE** Small address ranges using &#34;/31&#34; or &#34;/32&#34; prefix sizes are not supported. These ranges should be configured using individual IP address rules without prefix specified.
         * 
         * &gt; **NOTE** IP network rules have no effect on requests originating from the same Azure region as the storage account. Use Virtual network rules to allow same-region requests. Services deployed in the same region as the storage account use private Azure IP addresses for communication. Thus, you cannot restrict access to specific Azure services based on their public outbound IP address range.
         * 
         * &gt; **NOTE** User has to explicitly set `ip_rules` to empty slice (`[]`) to remove it.
         * 
         * @return builder
         * 
         */
        public Builder ipRules(List<String> ipRules) {
            return ipRules(Output.of(ipRules));
        }

        /**
         * @param ipRules List of public IP or IP ranges in CIDR Format. Only IPv4 addresses are allowed. Private IP address ranges (as defined in [RFC 1918](https://tools.ietf.org/html/rfc1918#section-3)) are not allowed.
         * 
         * &gt; **NOTE** Small address ranges using &#34;/31&#34; or &#34;/32&#34; prefix sizes are not supported. These ranges should be configured using individual IP address rules without prefix specified.
         * 
         * &gt; **NOTE** IP network rules have no effect on requests originating from the same Azure region as the storage account. Use Virtual network rules to allow same-region requests. Services deployed in the same region as the storage account use private Azure IP addresses for communication. Thus, you cannot restrict access to specific Azure services based on their public outbound IP address range.
         * 
         * &gt; **NOTE** User has to explicitly set `ip_rules` to empty slice (`[]`) to remove it.
         * 
         * @return builder
         * 
         */
        public Builder ipRules(String... ipRules) {
            return ipRules(List.of(ipRules));
        }

        /**
         * @param privateLinkAccessRules One or more `private_link_access` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder privateLinkAccessRules(@Nullable Output<List<AccountNetworkRulesPrivateLinkAccessRuleArgs>> privateLinkAccessRules) {
            $.privateLinkAccessRules = privateLinkAccessRules;
            return this;
        }

        /**
         * @param privateLinkAccessRules One or more `private_link_access` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder privateLinkAccessRules(List<AccountNetworkRulesPrivateLinkAccessRuleArgs> privateLinkAccessRules) {
            return privateLinkAccessRules(Output.of(privateLinkAccessRules));
        }

        /**
         * @param privateLinkAccessRules One or more `private_link_access` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder privateLinkAccessRules(AccountNetworkRulesPrivateLinkAccessRuleArgs... privateLinkAccessRules) {
            return privateLinkAccessRules(List.of(privateLinkAccessRules));
        }

        /**
         * @param storageAccountId Specifies the ID of the storage account. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountId(Output<String> storageAccountId) {
            $.storageAccountId = storageAccountId;
            return this;
        }

        /**
         * @param storageAccountId Specifies the ID of the storage account. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountId(String storageAccountId) {
            return storageAccountId(Output.of(storageAccountId));
        }

        /**
         * @param virtualNetworkSubnetIds A list of virtual network subnet ids to secure the storage account.
         * 
         * &gt; **NOTE** User has to explicitly set `virtual_network_subnet_ids` to empty slice (`[]`) to remove it.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkSubnetIds(@Nullable Output<List<String>> virtualNetworkSubnetIds) {
            $.virtualNetworkSubnetIds = virtualNetworkSubnetIds;
            return this;
        }

        /**
         * @param virtualNetworkSubnetIds A list of virtual network subnet ids to secure the storage account.
         * 
         * &gt; **NOTE** User has to explicitly set `virtual_network_subnet_ids` to empty slice (`[]`) to remove it.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkSubnetIds(List<String> virtualNetworkSubnetIds) {
            return virtualNetworkSubnetIds(Output.of(virtualNetworkSubnetIds));
        }

        /**
         * @param virtualNetworkSubnetIds A list of virtual network subnet ids to secure the storage account.
         * 
         * &gt; **NOTE** User has to explicitly set `virtual_network_subnet_ids` to empty slice (`[]`) to remove it.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkSubnetIds(String... virtualNetworkSubnetIds) {
            return virtualNetworkSubnetIds(List.of(virtualNetworkSubnetIds));
        }

        public AccountNetworkRulesArgs build() {
            $.defaultAction = Objects.requireNonNull($.defaultAction, "expected parameter 'defaultAction' to be non-null");
            $.storageAccountId = Objects.requireNonNull($.storageAccountId, "expected parameter 'storageAccountId' to be non-null");
            return $;
        }
    }

}
