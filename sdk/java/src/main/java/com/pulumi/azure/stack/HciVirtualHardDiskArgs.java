// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.stack;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HciVirtualHardDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final HciVirtualHardDiskArgs Empty = new HciVirtualHardDiskArgs();

    /**
     * The block size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     * 
     */
    @Import(name="blockSizeInBytes")
    private @Nullable Output<Integer> blockSizeInBytes;

    /**
     * @return The block size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     * 
     */
    public Optional<Output<Integer>> blockSizeInBytes() {
        return Optional.ofNullable(this.blockSizeInBytes);
    }

    /**
     * The ID of the Custom Location where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     * 
     */
    @Import(name="customLocationId", required=true)
    private Output<String> customLocationId;

    /**
     * @return The ID of the Custom Location where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     * 
     */
    public Output<String> customLocationId() {
        return this.customLocationId;
    }

    /**
     * The format of the disk file. Possible values are `vhdx` and `vhd`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     * 
     */
    @Import(name="diskFileFormat")
    private @Nullable Output<String> diskFileFormat;

    /**
     * @return The format of the disk file. Possible values are `vhdx` and `vhd`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     * 
     */
    public Optional<Output<String>> diskFileFormat() {
        return Optional.ofNullable(this.diskFileFormat);
    }

    /**
     * The size of the disk in GB. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     * 
     */
    @Import(name="diskSizeInGb", required=true)
    private Output<Integer> diskSizeInGb;

    /**
     * @return The size of the disk in GB. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     * 
     */
    public Output<Integer> diskSizeInGb() {
        return this.diskSizeInGb;
    }

    /**
     * Whether to enable dynamic sizing for the Azure Stack HCI Virtual Hard Disk. Defaults to `false`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     * 
     */
    @Import(name="dynamicEnabled")
    private @Nullable Output<Boolean> dynamicEnabled;

    /**
     * @return Whether to enable dynamic sizing for the Azure Stack HCI Virtual Hard Disk. Defaults to `false`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     * 
     */
    public Optional<Output<Boolean>> dynamicEnabled() {
        return Optional.ofNullable(this.dynamicEnabled);
    }

    /**
     * The hypervisor generation of the Azure Stack HCI Virtual Hard Disk. Possible values are `V1` and `V2`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     * 
     */
    @Import(name="hypervGeneration")
    private @Nullable Output<String> hypervGeneration;

    /**
     * @return The hypervisor generation of the Azure Stack HCI Virtual Hard Disk. Possible values are `V1` and `V2`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     * 
     */
    public Optional<Output<String>> hypervGeneration() {
        return Optional.ofNullable(this.hypervGeneration);
    }

    /**
     * The Azure Region where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The Azure Region where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The logical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     * 
     */
    @Import(name="logicalSectorInBytes")
    private @Nullable Output<Integer> logicalSectorInBytes;

    /**
     * @return The logical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     * 
     */
    public Optional<Output<Integer>> logicalSectorInBytes() {
        return Optional.ofNullable(this.logicalSectorInBytes);
    }

    /**
     * The name which should be used for this Azure Stack HCI Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Azure Stack HCI Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The physical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     * 
     */
    @Import(name="physicalSectorInBytes")
    private @Nullable Output<Integer> physicalSectorInBytes;

    /**
     * @return The physical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     * 
     */
    public Optional<Output<Integer>> physicalSectorInBytes() {
        return Optional.ofNullable(this.physicalSectorInBytes);
    }

    /**
     * The name of the Resource Group where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The ID of the Azure Stack HCI Storage Path used for this Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     * 
     * &gt; **Note:** If `storage_path_id` is not specified, the Virtual Hard Disk will be placed in a high availability Storage Path. If you experience a diff you may need to add this to `ignore_changes`.
     * 
     */
    @Import(name="storagePathId")
    private @Nullable Output<String> storagePathId;

    /**
     * @return The ID of the Azure Stack HCI Storage Path used for this Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
     * 
     * &gt; **Note:** If `storage_path_id` is not specified, the Virtual Hard Disk will be placed in a high availability Storage Path. If you experience a diff you may need to add this to `ignore_changes`.
     * 
     */
    public Optional<Output<String>> storagePathId() {
        return Optional.ofNullable(this.storagePathId);
    }

    /**
     * A mapping of tags which should be assigned to the Azure Stack HCI Virtual Hard Disk.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the Azure Stack HCI Virtual Hard Disk.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private HciVirtualHardDiskArgs() {}

    private HciVirtualHardDiskArgs(HciVirtualHardDiskArgs $) {
        this.blockSizeInBytes = $.blockSizeInBytes;
        this.customLocationId = $.customLocationId;
        this.diskFileFormat = $.diskFileFormat;
        this.diskSizeInGb = $.diskSizeInGb;
        this.dynamicEnabled = $.dynamicEnabled;
        this.hypervGeneration = $.hypervGeneration;
        this.location = $.location;
        this.logicalSectorInBytes = $.logicalSectorInBytes;
        this.name = $.name;
        this.physicalSectorInBytes = $.physicalSectorInBytes;
        this.resourceGroupName = $.resourceGroupName;
        this.storagePathId = $.storagePathId;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HciVirtualHardDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HciVirtualHardDiskArgs $;

        public Builder() {
            $ = new HciVirtualHardDiskArgs();
        }

        public Builder(HciVirtualHardDiskArgs defaults) {
            $ = new HciVirtualHardDiskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param blockSizeInBytes The block size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder blockSizeInBytes(@Nullable Output<Integer> blockSizeInBytes) {
            $.blockSizeInBytes = blockSizeInBytes;
            return this;
        }

        /**
         * @param blockSizeInBytes The block size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder blockSizeInBytes(Integer blockSizeInBytes) {
            return blockSizeInBytes(Output.of(blockSizeInBytes));
        }

        /**
         * @param customLocationId The ID of the Custom Location where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder customLocationId(Output<String> customLocationId) {
            $.customLocationId = customLocationId;
            return this;
        }

        /**
         * @param customLocationId The ID of the Custom Location where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder customLocationId(String customLocationId) {
            return customLocationId(Output.of(customLocationId));
        }

        /**
         * @param diskFileFormat The format of the disk file. Possible values are `vhdx` and `vhd`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder diskFileFormat(@Nullable Output<String> diskFileFormat) {
            $.diskFileFormat = diskFileFormat;
            return this;
        }

        /**
         * @param diskFileFormat The format of the disk file. Possible values are `vhdx` and `vhd`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder diskFileFormat(String diskFileFormat) {
            return diskFileFormat(Output.of(diskFileFormat));
        }

        /**
         * @param diskSizeInGb The size of the disk in GB. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder diskSizeInGb(Output<Integer> diskSizeInGb) {
            $.diskSizeInGb = diskSizeInGb;
            return this;
        }

        /**
         * @param diskSizeInGb The size of the disk in GB. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder diskSizeInGb(Integer diskSizeInGb) {
            return diskSizeInGb(Output.of(diskSizeInGb));
        }

        /**
         * @param dynamicEnabled Whether to enable dynamic sizing for the Azure Stack HCI Virtual Hard Disk. Defaults to `false`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder dynamicEnabled(@Nullable Output<Boolean> dynamicEnabled) {
            $.dynamicEnabled = dynamicEnabled;
            return this;
        }

        /**
         * @param dynamicEnabled Whether to enable dynamic sizing for the Azure Stack HCI Virtual Hard Disk. Defaults to `false`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder dynamicEnabled(Boolean dynamicEnabled) {
            return dynamicEnabled(Output.of(dynamicEnabled));
        }

        /**
         * @param hypervGeneration The hypervisor generation of the Azure Stack HCI Virtual Hard Disk. Possible values are `V1` and `V2`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder hypervGeneration(@Nullable Output<String> hypervGeneration) {
            $.hypervGeneration = hypervGeneration;
            return this;
        }

        /**
         * @param hypervGeneration The hypervisor generation of the Azure Stack HCI Virtual Hard Disk. Possible values are `V1` and `V2`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder hypervGeneration(String hypervGeneration) {
            return hypervGeneration(Output.of(hypervGeneration));
        }

        /**
         * @param location The Azure Region where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The Azure Region where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param logicalSectorInBytes The logical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder logicalSectorInBytes(@Nullable Output<Integer> logicalSectorInBytes) {
            $.logicalSectorInBytes = logicalSectorInBytes;
            return this;
        }

        /**
         * @param logicalSectorInBytes The logical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder logicalSectorInBytes(Integer logicalSectorInBytes) {
            return logicalSectorInBytes(Output.of(logicalSectorInBytes));
        }

        /**
         * @param name The name which should be used for this Azure Stack HCI Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Azure Stack HCI Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param physicalSectorInBytes The physical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder physicalSectorInBytes(@Nullable Output<Integer> physicalSectorInBytes) {
            $.physicalSectorInBytes = physicalSectorInBytes;
            return this;
        }

        /**
         * @param physicalSectorInBytes The physical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder physicalSectorInBytes(Integer physicalSectorInBytes) {
            return physicalSectorInBytes(Output.of(physicalSectorInBytes));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param storagePathId The ID of the Azure Stack HCI Storage Path used for this Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
         * 
         * &gt; **Note:** If `storage_path_id` is not specified, the Virtual Hard Disk will be placed in a high availability Storage Path. If you experience a diff you may need to add this to `ignore_changes`.
         * 
         * @return builder
         * 
         */
        public Builder storagePathId(@Nullable Output<String> storagePathId) {
            $.storagePathId = storagePathId;
            return this;
        }

        /**
         * @param storagePathId The ID of the Azure Stack HCI Storage Path used for this Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
         * 
         * &gt; **Note:** If `storage_path_id` is not specified, the Virtual Hard Disk will be placed in a high availability Storage Path. If you experience a diff you may need to add this to `ignore_changes`.
         * 
         * @return builder
         * 
         */
        public Builder storagePathId(String storagePathId) {
            return storagePathId(Output.of(storagePathId));
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Azure Stack HCI Virtual Hard Disk.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Azure Stack HCI Virtual Hard Disk.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public HciVirtualHardDiskArgs build() {
            if ($.customLocationId == null) {
                throw new MissingRequiredPropertyException("HciVirtualHardDiskArgs", "customLocationId");
            }
            if ($.diskSizeInGb == null) {
                throw new MissingRequiredPropertyException("HciVirtualHardDiskArgs", "diskSizeInGb");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("HciVirtualHardDiskArgs", "resourceGroupName");
            }
            return $;
        }
    }

}
