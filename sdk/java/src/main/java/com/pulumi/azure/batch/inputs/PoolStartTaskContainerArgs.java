// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.batch.inputs;

import com.pulumi.azure.batch.inputs.PoolStartTaskContainerRegistryArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PoolStartTaskContainerArgs extends com.pulumi.resources.ResourceArgs {

    public static final PoolStartTaskContainerArgs Empty = new PoolStartTaskContainerArgs();

    /**
     * The image to use to create the container in which the task will run. This is the full image reference, as would be specified to &#34;docker pull&#34;. If no tag is provided as part of the image name, the tag &#34;:latest&#34; is used as a default.
     * 
     */
    @Import(name="imageName", required=true)
    private Output<String> imageName;

    /**
     * @return The image to use to create the container in which the task will run. This is the full image reference, as would be specified to &#34;docker pull&#34;. If no tag is provided as part of the image name, the tag &#34;:latest&#34; is used as a default.
     * 
     */
    public Output<String> imageName() {
        return this.imageName;
    }

    /**
     * The `container_registries` block defined as below.
     * 
     */
    @Import(name="registries")
    private @Nullable Output<List<PoolStartTaskContainerRegistryArgs>> registries;

    /**
     * @return The `container_registries` block defined as below.
     * 
     */
    public Optional<Output<List<PoolStartTaskContainerRegistryArgs>>> registries() {
        return Optional.ofNullable(this.registries);
    }

    /**
     * Additional options to the container create command. These additional options are supplied as arguments to the &#34;docker create&#34; command, in addition to those controlled by the Batch Service.
     * 
     */
    @Import(name="runOptions")
    private @Nullable Output<String> runOptions;

    /**
     * @return Additional options to the container create command. These additional options are supplied as arguments to the &#34;docker create&#34; command, in addition to those controlled by the Batch Service.
     * 
     */
    public Optional<Output<String>> runOptions() {
        return Optional.ofNullable(this.runOptions);
    }

    /**
     * A flag to indicate where the container task working directory is. Possible values are `TaskWorkingDirectory` and `ContainerImageDefault`.
     * 
     */
    @Import(name="workingDirectory")
    private @Nullable Output<String> workingDirectory;

    /**
     * @return A flag to indicate where the container task working directory is. Possible values are `TaskWorkingDirectory` and `ContainerImageDefault`.
     * 
     */
    public Optional<Output<String>> workingDirectory() {
        return Optional.ofNullable(this.workingDirectory);
    }

    private PoolStartTaskContainerArgs() {}

    private PoolStartTaskContainerArgs(PoolStartTaskContainerArgs $) {
        this.imageName = $.imageName;
        this.registries = $.registries;
        this.runOptions = $.runOptions;
        this.workingDirectory = $.workingDirectory;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PoolStartTaskContainerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PoolStartTaskContainerArgs $;

        public Builder() {
            $ = new PoolStartTaskContainerArgs();
        }

        public Builder(PoolStartTaskContainerArgs defaults) {
            $ = new PoolStartTaskContainerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param imageName The image to use to create the container in which the task will run. This is the full image reference, as would be specified to &#34;docker pull&#34;. If no tag is provided as part of the image name, the tag &#34;:latest&#34; is used as a default.
         * 
         * @return builder
         * 
         */
        public Builder imageName(Output<String> imageName) {
            $.imageName = imageName;
            return this;
        }

        /**
         * @param imageName The image to use to create the container in which the task will run. This is the full image reference, as would be specified to &#34;docker pull&#34;. If no tag is provided as part of the image name, the tag &#34;:latest&#34; is used as a default.
         * 
         * @return builder
         * 
         */
        public Builder imageName(String imageName) {
            return imageName(Output.of(imageName));
        }

        /**
         * @param registries The `container_registries` block defined as below.
         * 
         * @return builder
         * 
         */
        public Builder registries(@Nullable Output<List<PoolStartTaskContainerRegistryArgs>> registries) {
            $.registries = registries;
            return this;
        }

        /**
         * @param registries The `container_registries` block defined as below.
         * 
         * @return builder
         * 
         */
        public Builder registries(List<PoolStartTaskContainerRegistryArgs> registries) {
            return registries(Output.of(registries));
        }

        /**
         * @param registries The `container_registries` block defined as below.
         * 
         * @return builder
         * 
         */
        public Builder registries(PoolStartTaskContainerRegistryArgs... registries) {
            return registries(List.of(registries));
        }

        /**
         * @param runOptions Additional options to the container create command. These additional options are supplied as arguments to the &#34;docker create&#34; command, in addition to those controlled by the Batch Service.
         * 
         * @return builder
         * 
         */
        public Builder runOptions(@Nullable Output<String> runOptions) {
            $.runOptions = runOptions;
            return this;
        }

        /**
         * @param runOptions Additional options to the container create command. These additional options are supplied as arguments to the &#34;docker create&#34; command, in addition to those controlled by the Batch Service.
         * 
         * @return builder
         * 
         */
        public Builder runOptions(String runOptions) {
            return runOptions(Output.of(runOptions));
        }

        /**
         * @param workingDirectory A flag to indicate where the container task working directory is. Possible values are `TaskWorkingDirectory` and `ContainerImageDefault`.
         * 
         * @return builder
         * 
         */
        public Builder workingDirectory(@Nullable Output<String> workingDirectory) {
            $.workingDirectory = workingDirectory;
            return this;
        }

        /**
         * @param workingDirectory A flag to indicate where the container task working directory is. Possible values are `TaskWorkingDirectory` and `ContainerImageDefault`.
         * 
         * @return builder
         * 
         */
        public Builder workingDirectory(String workingDirectory) {
            return workingDirectory(Output.of(workingDirectory));
        }

        public PoolStartTaskContainerArgs build() {
            $.imageName = Objects.requireNonNull($.imageName, "expected parameter 'imageName' to be non-null");
            return $;
        }
    }

}
