// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.batch.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PoolExtension {
    /**
     * @return Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
     * 
     */
    private @Nullable Boolean autoUpgradeMinorVersion;
    /**
     * @return Indicates whether the extension should be automatically upgraded by the platform if there is a newer version available. Supported values are `true` and `false`.
     * 
     * &gt; **NOTE:** When `automatic_upgrade_enabled` is set to `true`, the `type_handler_version` is automatically updated by the Azure platform when a new version is available and any change in `type_handler_version` should be manually ignored by user.
     * 
     */
    private @Nullable Boolean automaticUpgradeEnabled;
    /**
     * @return The name of the virtual machine extension.
     * 
     */
    private String name;
    /**
     * @return The extension can contain either `protected_settings` or `provision_after_extensions` or no protected settings at all.
     * 
     */
    private @Nullable String protectedSettings;
    /**
     * @return The collection of extension names. Collection of extension names after which this extension needs to be provisioned.
     * 
     */
    private @Nullable List<String> provisionAfterExtensions;
    /**
     * @return The name of the extension handler publisher.The name of the extension handler publisher.
     * 
     */
    private String publisher;
    /**
     * @return JSON formatted public settings for the extension.
     * 
     */
    private @Nullable String settingsJson;
    /**
     * @return The type of the extensions.
     * 
     */
    private String type;
    /**
     * @return The version of script handler.
     * 
     */
    private @Nullable String typeHandlerVersion;

    private PoolExtension() {}
    /**
     * @return Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
     * 
     */
    public Optional<Boolean> autoUpgradeMinorVersion() {
        return Optional.ofNullable(this.autoUpgradeMinorVersion);
    }
    /**
     * @return Indicates whether the extension should be automatically upgraded by the platform if there is a newer version available. Supported values are `true` and `false`.
     * 
     * &gt; **NOTE:** When `automatic_upgrade_enabled` is set to `true`, the `type_handler_version` is automatically updated by the Azure platform when a new version is available and any change in `type_handler_version` should be manually ignored by user.
     * 
     */
    public Optional<Boolean> automaticUpgradeEnabled() {
        return Optional.ofNullable(this.automaticUpgradeEnabled);
    }
    /**
     * @return The name of the virtual machine extension.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The extension can contain either `protected_settings` or `provision_after_extensions` or no protected settings at all.
     * 
     */
    public Optional<String> protectedSettings() {
        return Optional.ofNullable(this.protectedSettings);
    }
    /**
     * @return The collection of extension names. Collection of extension names after which this extension needs to be provisioned.
     * 
     */
    public List<String> provisionAfterExtensions() {
        return this.provisionAfterExtensions == null ? List.of() : this.provisionAfterExtensions;
    }
    /**
     * @return The name of the extension handler publisher.The name of the extension handler publisher.
     * 
     */
    public String publisher() {
        return this.publisher;
    }
    /**
     * @return JSON formatted public settings for the extension.
     * 
     */
    public Optional<String> settingsJson() {
        return Optional.ofNullable(this.settingsJson);
    }
    /**
     * @return The type of the extensions.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The version of script handler.
     * 
     */
    public Optional<String> typeHandlerVersion() {
        return Optional.ofNullable(this.typeHandlerVersion);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PoolExtension defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean autoUpgradeMinorVersion;
        private @Nullable Boolean automaticUpgradeEnabled;
        private String name;
        private @Nullable String protectedSettings;
        private @Nullable List<String> provisionAfterExtensions;
        private String publisher;
        private @Nullable String settingsJson;
        private String type;
        private @Nullable String typeHandlerVersion;
        public Builder() {}
        public Builder(PoolExtension defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoUpgradeMinorVersion = defaults.autoUpgradeMinorVersion;
    	      this.automaticUpgradeEnabled = defaults.automaticUpgradeEnabled;
    	      this.name = defaults.name;
    	      this.protectedSettings = defaults.protectedSettings;
    	      this.provisionAfterExtensions = defaults.provisionAfterExtensions;
    	      this.publisher = defaults.publisher;
    	      this.settingsJson = defaults.settingsJson;
    	      this.type = defaults.type;
    	      this.typeHandlerVersion = defaults.typeHandlerVersion;
        }

        @CustomType.Setter
        public Builder autoUpgradeMinorVersion(@Nullable Boolean autoUpgradeMinorVersion) {

            this.autoUpgradeMinorVersion = autoUpgradeMinorVersion;
            return this;
        }
        @CustomType.Setter
        public Builder automaticUpgradeEnabled(@Nullable Boolean automaticUpgradeEnabled) {

            this.automaticUpgradeEnabled = automaticUpgradeEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("PoolExtension", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder protectedSettings(@Nullable String protectedSettings) {

            this.protectedSettings = protectedSettings;
            return this;
        }
        @CustomType.Setter
        public Builder provisionAfterExtensions(@Nullable List<String> provisionAfterExtensions) {

            this.provisionAfterExtensions = provisionAfterExtensions;
            return this;
        }
        public Builder provisionAfterExtensions(String... provisionAfterExtensions) {
            return provisionAfterExtensions(List.of(provisionAfterExtensions));
        }
        @CustomType.Setter
        public Builder publisher(String publisher) {
            if (publisher == null) {
              throw new MissingRequiredPropertyException("PoolExtension", "publisher");
            }
            this.publisher = publisher;
            return this;
        }
        @CustomType.Setter
        public Builder settingsJson(@Nullable String settingsJson) {

            this.settingsJson = settingsJson;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("PoolExtension", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder typeHandlerVersion(@Nullable String typeHandlerVersion) {

            this.typeHandlerVersion = typeHandlerVersion;
            return this;
        }
        public PoolExtension build() {
            final var _resultValue = new PoolExtension();
            _resultValue.autoUpgradeMinorVersion = autoUpgradeMinorVersion;
            _resultValue.automaticUpgradeEnabled = automaticUpgradeEnabled;
            _resultValue.name = name;
            _resultValue.protectedSettings = protectedSettings;
            _resultValue.provisionAfterExtensions = provisionAfterExtensions;
            _resultValue.publisher = publisher;
            _resultValue.settingsJson = settingsJson;
            _resultValue.type = type;
            _resultValue.typeHandlerVersion = typeHandlerVersion;
            return _resultValue;
        }
    }
}
