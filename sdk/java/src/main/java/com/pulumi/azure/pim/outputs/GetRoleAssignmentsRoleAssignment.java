// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.pim.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRoleAssignmentsRoleAssignment {
    /**
     * @return The condition that limits the resource the role can be assigned to.
     * 
     */
    private String condition;
    /**
     * @return The version of the condition.
     * 
     */
    private String conditionVersion;
    /**
     * @return The ID of the delegated managed identity resource.
     * 
     */
    private String delegatedManagedIdentityResourceId;
    /**
     * @return The description for this Role Assignment.
     * 
     */
    private String description;
    /**
     * @return The principal ID to filter the list of Role Assignments against.
     * 
     */
    private String principalId;
    /**
     * @return The type of the `principalId`.
     * 
     */
    private String principalType;
    /**
     * @return The ID of the Role Assignment.
     * 
     */
    private String roleAssignmentId;
    /**
     * @return The name of the Role Assignment.
     * 
     */
    private String roleAssignmentName;
    /**
     * @return The scope of the Role Assignment.
     * 
     */
    private String roleAssignmentScope;
    /**
     * @return The ID of the Role Definition.
     * 
     */
    private String roleDefinitionId;

    private GetRoleAssignmentsRoleAssignment() {}
    /**
     * @return The condition that limits the resource the role can be assigned to.
     * 
     */
    public String condition() {
        return this.condition;
    }
    /**
     * @return The version of the condition.
     * 
     */
    public String conditionVersion() {
        return this.conditionVersion;
    }
    /**
     * @return The ID of the delegated managed identity resource.
     * 
     */
    public String delegatedManagedIdentityResourceId() {
        return this.delegatedManagedIdentityResourceId;
    }
    /**
     * @return The description for this Role Assignment.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The principal ID to filter the list of Role Assignments against.
     * 
     */
    public String principalId() {
        return this.principalId;
    }
    /**
     * @return The type of the `principalId`.
     * 
     */
    public String principalType() {
        return this.principalType;
    }
    /**
     * @return The ID of the Role Assignment.
     * 
     */
    public String roleAssignmentId() {
        return this.roleAssignmentId;
    }
    /**
     * @return The name of the Role Assignment.
     * 
     */
    public String roleAssignmentName() {
        return this.roleAssignmentName;
    }
    /**
     * @return The scope of the Role Assignment.
     * 
     */
    public String roleAssignmentScope() {
        return this.roleAssignmentScope;
    }
    /**
     * @return The ID of the Role Definition.
     * 
     */
    public String roleDefinitionId() {
        return this.roleDefinitionId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRoleAssignmentsRoleAssignment defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String condition;
        private String conditionVersion;
        private String delegatedManagedIdentityResourceId;
        private String description;
        private String principalId;
        private String principalType;
        private String roleAssignmentId;
        private String roleAssignmentName;
        private String roleAssignmentScope;
        private String roleDefinitionId;
        public Builder() {}
        public Builder(GetRoleAssignmentsRoleAssignment defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.condition = defaults.condition;
    	      this.conditionVersion = defaults.conditionVersion;
    	      this.delegatedManagedIdentityResourceId = defaults.delegatedManagedIdentityResourceId;
    	      this.description = defaults.description;
    	      this.principalId = defaults.principalId;
    	      this.principalType = defaults.principalType;
    	      this.roleAssignmentId = defaults.roleAssignmentId;
    	      this.roleAssignmentName = defaults.roleAssignmentName;
    	      this.roleAssignmentScope = defaults.roleAssignmentScope;
    	      this.roleDefinitionId = defaults.roleDefinitionId;
        }

        @CustomType.Setter
        public Builder condition(String condition) {
            if (condition == null) {
              throw new MissingRequiredPropertyException("GetRoleAssignmentsRoleAssignment", "condition");
            }
            this.condition = condition;
            return this;
        }
        @CustomType.Setter
        public Builder conditionVersion(String conditionVersion) {
            if (conditionVersion == null) {
              throw new MissingRequiredPropertyException("GetRoleAssignmentsRoleAssignment", "conditionVersion");
            }
            this.conditionVersion = conditionVersion;
            return this;
        }
        @CustomType.Setter
        public Builder delegatedManagedIdentityResourceId(String delegatedManagedIdentityResourceId) {
            if (delegatedManagedIdentityResourceId == null) {
              throw new MissingRequiredPropertyException("GetRoleAssignmentsRoleAssignment", "delegatedManagedIdentityResourceId");
            }
            this.delegatedManagedIdentityResourceId = delegatedManagedIdentityResourceId;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetRoleAssignmentsRoleAssignment", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder principalId(String principalId) {
            if (principalId == null) {
              throw new MissingRequiredPropertyException("GetRoleAssignmentsRoleAssignment", "principalId");
            }
            this.principalId = principalId;
            return this;
        }
        @CustomType.Setter
        public Builder principalType(String principalType) {
            if (principalType == null) {
              throw new MissingRequiredPropertyException("GetRoleAssignmentsRoleAssignment", "principalType");
            }
            this.principalType = principalType;
            return this;
        }
        @CustomType.Setter
        public Builder roleAssignmentId(String roleAssignmentId) {
            if (roleAssignmentId == null) {
              throw new MissingRequiredPropertyException("GetRoleAssignmentsRoleAssignment", "roleAssignmentId");
            }
            this.roleAssignmentId = roleAssignmentId;
            return this;
        }
        @CustomType.Setter
        public Builder roleAssignmentName(String roleAssignmentName) {
            if (roleAssignmentName == null) {
              throw new MissingRequiredPropertyException("GetRoleAssignmentsRoleAssignment", "roleAssignmentName");
            }
            this.roleAssignmentName = roleAssignmentName;
            return this;
        }
        @CustomType.Setter
        public Builder roleAssignmentScope(String roleAssignmentScope) {
            if (roleAssignmentScope == null) {
              throw new MissingRequiredPropertyException("GetRoleAssignmentsRoleAssignment", "roleAssignmentScope");
            }
            this.roleAssignmentScope = roleAssignmentScope;
            return this;
        }
        @CustomType.Setter
        public Builder roleDefinitionId(String roleDefinitionId) {
            if (roleDefinitionId == null) {
              throw new MissingRequiredPropertyException("GetRoleAssignmentsRoleAssignment", "roleDefinitionId");
            }
            this.roleDefinitionId = roleDefinitionId;
            return this;
        }
        public GetRoleAssignmentsRoleAssignment build() {
            final var _resultValue = new GetRoleAssignmentsRoleAssignment();
            _resultValue.condition = condition;
            _resultValue.conditionVersion = conditionVersion;
            _resultValue.delegatedManagedIdentityResourceId = delegatedManagedIdentityResourceId;
            _resultValue.description = description;
            _resultValue.principalId = principalId;
            _resultValue.principalType = principalType;
            _resultValue.roleAssignmentId = roleAssignmentId;
            _resultValue.roleAssignmentName = roleAssignmentName;
            _resultValue.roleAssignmentScope = roleAssignmentScope;
            _resultValue.roleDefinitionId = roleDefinitionId;
            return _resultValue;
        }
    }
}
