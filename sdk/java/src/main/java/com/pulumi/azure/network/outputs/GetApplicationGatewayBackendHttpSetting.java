// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.azure.network.outputs.GetApplicationGatewayBackendHttpSettingAuthenticationCertificate;
import com.pulumi.azure.network.outputs.GetApplicationGatewayBackendHttpSettingConnectionDraining;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetApplicationGatewayBackendHttpSetting {
    /**
     * @return The name of the affinity cookie.
     * 
     */
    private String affinityCookieName;
    /**
     * @return One or more `authentication_certificate` blocks as defined below.
     * 
     */
    private List<GetApplicationGatewayBackendHttpSettingAuthenticationCertificate> authenticationCertificates;
    /**
     * @return A `connection_draining` block as defined below.
     * 
     */
    private List<GetApplicationGatewayBackendHttpSettingConnectionDraining> connectionDrainings;
    /**
     * @return Is Cookie-Based Affinity enabled?
     * 
     */
    private String cookieBasedAffinity;
    /**
     * @return The Hostname which is used for this HTTP Listener.
     * 
     */
    private String hostName;
    /**
     * @return The ID of the Rewrite Rule Set
     * 
     */
    private String id;
    /**
     * @return The name of this Application Gateway.
     * 
     */
    private String name;
    /**
     * @return The URL path to rewrite.
     * 
     */
    private String path;
    /**
     * @return Whether host header will be picked from the host name of the backend server.
     * 
     */
    private Boolean pickHostNameFromBackendAddress;
    /**
     * @return Custom port which is used for probing the backend servers.
     * 
     */
    private Integer port;
    /**
     * @return The ID of the associated Probe.
     * 
     */
    private String probeId;
    /**
     * @return The name of the associated HTTP Probe.
     * 
     */
    private String probeName;
    /**
     * @return The Protocol used for this Probe.
     * 
     */
    private String protocol;
    /**
     * @return The request timeout in seconds.
     * 
     */
    private Integer requestTimeout;
    /**
     * @return A list of `trusted_root_certificate` names.
     * 
     */
    private List<String> trustedRootCertificateNames;

    private GetApplicationGatewayBackendHttpSetting() {}
    /**
     * @return The name of the affinity cookie.
     * 
     */
    public String affinityCookieName() {
        return this.affinityCookieName;
    }
    /**
     * @return One or more `authentication_certificate` blocks as defined below.
     * 
     */
    public List<GetApplicationGatewayBackendHttpSettingAuthenticationCertificate> authenticationCertificates() {
        return this.authenticationCertificates;
    }
    /**
     * @return A `connection_draining` block as defined below.
     * 
     */
    public List<GetApplicationGatewayBackendHttpSettingConnectionDraining> connectionDrainings() {
        return this.connectionDrainings;
    }
    /**
     * @return Is Cookie-Based Affinity enabled?
     * 
     */
    public String cookieBasedAffinity() {
        return this.cookieBasedAffinity;
    }
    /**
     * @return The Hostname which is used for this HTTP Listener.
     * 
     */
    public String hostName() {
        return this.hostName;
    }
    /**
     * @return The ID of the Rewrite Rule Set
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of this Application Gateway.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The URL path to rewrite.
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return Whether host header will be picked from the host name of the backend server.
     * 
     */
    public Boolean pickHostNameFromBackendAddress() {
        return this.pickHostNameFromBackendAddress;
    }
    /**
     * @return Custom port which is used for probing the backend servers.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The ID of the associated Probe.
     * 
     */
    public String probeId() {
        return this.probeId;
    }
    /**
     * @return The name of the associated HTTP Probe.
     * 
     */
    public String probeName() {
        return this.probeName;
    }
    /**
     * @return The Protocol used for this Probe.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return The request timeout in seconds.
     * 
     */
    public Integer requestTimeout() {
        return this.requestTimeout;
    }
    /**
     * @return A list of `trusted_root_certificate` names.
     * 
     */
    public List<String> trustedRootCertificateNames() {
        return this.trustedRootCertificateNames;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationGatewayBackendHttpSetting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String affinityCookieName;
        private List<GetApplicationGatewayBackendHttpSettingAuthenticationCertificate> authenticationCertificates;
        private List<GetApplicationGatewayBackendHttpSettingConnectionDraining> connectionDrainings;
        private String cookieBasedAffinity;
        private String hostName;
        private String id;
        private String name;
        private String path;
        private Boolean pickHostNameFromBackendAddress;
        private Integer port;
        private String probeId;
        private String probeName;
        private String protocol;
        private Integer requestTimeout;
        private List<String> trustedRootCertificateNames;
        public Builder() {}
        public Builder(GetApplicationGatewayBackendHttpSetting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.affinityCookieName = defaults.affinityCookieName;
    	      this.authenticationCertificates = defaults.authenticationCertificates;
    	      this.connectionDrainings = defaults.connectionDrainings;
    	      this.cookieBasedAffinity = defaults.cookieBasedAffinity;
    	      this.hostName = defaults.hostName;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.path = defaults.path;
    	      this.pickHostNameFromBackendAddress = defaults.pickHostNameFromBackendAddress;
    	      this.port = defaults.port;
    	      this.probeId = defaults.probeId;
    	      this.probeName = defaults.probeName;
    	      this.protocol = defaults.protocol;
    	      this.requestTimeout = defaults.requestTimeout;
    	      this.trustedRootCertificateNames = defaults.trustedRootCertificateNames;
        }

        @CustomType.Setter
        public Builder affinityCookieName(String affinityCookieName) {
            if (affinityCookieName == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayBackendHttpSetting", "affinityCookieName");
            }
            this.affinityCookieName = affinityCookieName;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationCertificates(List<GetApplicationGatewayBackendHttpSettingAuthenticationCertificate> authenticationCertificates) {
            if (authenticationCertificates == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayBackendHttpSetting", "authenticationCertificates");
            }
            this.authenticationCertificates = authenticationCertificates;
            return this;
        }
        public Builder authenticationCertificates(GetApplicationGatewayBackendHttpSettingAuthenticationCertificate... authenticationCertificates) {
            return authenticationCertificates(List.of(authenticationCertificates));
        }
        @CustomType.Setter
        public Builder connectionDrainings(List<GetApplicationGatewayBackendHttpSettingConnectionDraining> connectionDrainings) {
            if (connectionDrainings == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayBackendHttpSetting", "connectionDrainings");
            }
            this.connectionDrainings = connectionDrainings;
            return this;
        }
        public Builder connectionDrainings(GetApplicationGatewayBackendHttpSettingConnectionDraining... connectionDrainings) {
            return connectionDrainings(List.of(connectionDrainings));
        }
        @CustomType.Setter
        public Builder cookieBasedAffinity(String cookieBasedAffinity) {
            if (cookieBasedAffinity == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayBackendHttpSetting", "cookieBasedAffinity");
            }
            this.cookieBasedAffinity = cookieBasedAffinity;
            return this;
        }
        @CustomType.Setter
        public Builder hostName(String hostName) {
            if (hostName == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayBackendHttpSetting", "hostName");
            }
            this.hostName = hostName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayBackendHttpSetting", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayBackendHttpSetting", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayBackendHttpSetting", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder pickHostNameFromBackendAddress(Boolean pickHostNameFromBackendAddress) {
            if (pickHostNameFromBackendAddress == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayBackendHttpSetting", "pickHostNameFromBackendAddress");
            }
            this.pickHostNameFromBackendAddress = pickHostNameFromBackendAddress;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayBackendHttpSetting", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder probeId(String probeId) {
            if (probeId == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayBackendHttpSetting", "probeId");
            }
            this.probeId = probeId;
            return this;
        }
        @CustomType.Setter
        public Builder probeName(String probeName) {
            if (probeName == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayBackendHttpSetting", "probeName");
            }
            this.probeName = probeName;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayBackendHttpSetting", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder requestTimeout(Integer requestTimeout) {
            if (requestTimeout == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayBackendHttpSetting", "requestTimeout");
            }
            this.requestTimeout = requestTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder trustedRootCertificateNames(List<String> trustedRootCertificateNames) {
            if (trustedRootCertificateNames == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayBackendHttpSetting", "trustedRootCertificateNames");
            }
            this.trustedRootCertificateNames = trustedRootCertificateNames;
            return this;
        }
        public Builder trustedRootCertificateNames(String... trustedRootCertificateNames) {
            return trustedRootCertificateNames(List.of(trustedRootCertificateNames));
        }
        public GetApplicationGatewayBackendHttpSetting build() {
            final var _resultValue = new GetApplicationGatewayBackendHttpSetting();
            _resultValue.affinityCookieName = affinityCookieName;
            _resultValue.authenticationCertificates = authenticationCertificates;
            _resultValue.connectionDrainings = connectionDrainings;
            _resultValue.cookieBasedAffinity = cookieBasedAffinity;
            _resultValue.hostName = hostName;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.path = path;
            _resultValue.pickHostNameFromBackendAddress = pickHostNameFromBackendAddress;
            _resultValue.port = port;
            _resultValue.probeId = probeId;
            _resultValue.probeName = probeName;
            _resultValue.protocol = protocol;
            _resultValue.requestTimeout = requestTimeout;
            _resultValue.trustedRootCertificateNames = trustedRootCertificateNames;
            return _resultValue;
        }
    }
}
