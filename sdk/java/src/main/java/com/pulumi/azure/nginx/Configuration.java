// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.nginx;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.nginx.ConfigurationArgs;
import com.pulumi.azure.nginx.inputs.ConfigurationState;
import com.pulumi.azure.nginx.outputs.ConfigurationConfigFile;
import com.pulumi.azure.nginx.outputs.ConfigurationProtectedFile;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages the configuration for a Nginx Deployment.
 * 
 * ## Import
 * 
 * Nginxs can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:nginx/configuration:Configuration example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Nginx.NginxPlus/nginxDeployments/dep1/configurations/default
 * ```
 * 
 */
@ResourceType(type="azure:nginx/configuration:Configuration")
public class Configuration extends com.pulumi.resources.CustomResource {
    /**
     * One or more `config_file` blocks as defined below.
     * 
     */
    @Export(name="configFiles", refs={List.class,ConfigurationConfigFile.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ConfigurationConfigFile>> configFiles;

    /**
     * @return One or more `config_file` blocks as defined below.
     * 
     */
    public Output<Optional<List<ConfigurationConfigFile>>> configFiles() {
        return Codegen.optional(this.configFiles);
    }
    /**
     * The ID of the Nginx Deployment. Changing this forces a new Nginx Configuration to be created.
     * 
     */
    @Export(name="nginxDeploymentId", refs={String.class}, tree="[0]")
    private Output<String> nginxDeploymentId;

    /**
     * @return The ID of the Nginx Deployment. Changing this forces a new Nginx Configuration to be created.
     * 
     */
    public Output<String> nginxDeploymentId() {
        return this.nginxDeploymentId;
    }
    /**
     * Specify the package data for this configuration.
     * 
     */
    @Export(name="packageData", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> packageData;

    /**
     * @return Specify the package data for this configuration.
     * 
     */
    public Output<Optional<String>> packageData() {
        return Codegen.optional(this.packageData);
    }
    /**
     * One or more `protected_file` blocks with sensitive information as defined below. If specified `config_file` must also be specified.
     * 
     */
    @Export(name="protectedFiles", refs={List.class,ConfigurationProtectedFile.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ConfigurationProtectedFile>> protectedFiles;

    /**
     * @return One or more `protected_file` blocks with sensitive information as defined below. If specified `config_file` must also be specified.
     * 
     */
    public Output<Optional<List<ConfigurationProtectedFile>>> protectedFiles() {
        return Codegen.optional(this.protectedFiles);
    }
    /**
     * Specify the root file path of this Nginx Configuration.
     * 
     */
    @Export(name="rootFile", refs={String.class}, tree="[0]")
    private Output<String> rootFile;

    /**
     * @return Specify the root file path of this Nginx Configuration.
     * 
     */
    public Output<String> rootFile() {
        return this.rootFile;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Configuration(String name) {
        this(name, ConfigurationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Configuration(String name, ConfigurationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Configuration(String name, ConfigurationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:nginx/configuration:Configuration", name, args == null ? ConfigurationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Configuration(String name, Output<String> id, @Nullable ConfigurationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:nginx/configuration:Configuration", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Configuration get(String name, Output<String> id, @Nullable ConfigurationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Configuration(name, id, state, options);
    }
}
