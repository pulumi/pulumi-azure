// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.outputs;

import com.pulumi.azure.appservice.outputs.GetAppServicePlanSku;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetAppServicePlanResult {
    /**
     * @return The ID of the App Service Environment where the App Service Plan is located.
     * 
     */
    private final String appServiceEnvironmentId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return A flag that indicates if it&#39;s a xenon plan (support for Windows Container)
     * 
     */
    private final Boolean isXenon;
    /**
     * @return The Operating System type of the App Service Plan
     * 
     */
    private final String kind;
    /**
     * @return The Azure location where the App Service Plan exists
     * 
     */
    private final String location;
    /**
     * @return The maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan.
     * 
     */
    private final Integer maximumElasticWorkerCount;
    /**
     * @return The maximum number of workers supported with the App Service Plan&#39;s sku.
     * 
     */
    private final Integer maximumNumberOfWorkers;
    private final String name;
    /**
     * @return Can Apps assigned to this App Service Plan be scaled independently?
     * 
     */
    private final Boolean perSiteScaling;
    /**
     * @return Is this App Service Plan `Reserved`?
     * 
     */
    private final Boolean reserved;
    private final String resourceGroupName;
    /**
     * @return A `sku` block as documented below.
     * 
     */
    private final GetAppServicePlanSku sku;
    /**
     * @return A mapping of tags assigned to the resource.
     * 
     */
    private final Map<String,String> tags;
    /**
     * @return App Service Plan perform availability zone balancing.
     * 
     */
    private final Boolean zoneRedundant;

    @CustomType.Constructor
    private GetAppServicePlanResult(
        @CustomType.Parameter("appServiceEnvironmentId") String appServiceEnvironmentId,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("isXenon") Boolean isXenon,
        @CustomType.Parameter("kind") String kind,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("maximumElasticWorkerCount") Integer maximumElasticWorkerCount,
        @CustomType.Parameter("maximumNumberOfWorkers") Integer maximumNumberOfWorkers,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("perSiteScaling") Boolean perSiteScaling,
        @CustomType.Parameter("reserved") Boolean reserved,
        @CustomType.Parameter("resourceGroupName") String resourceGroupName,
        @CustomType.Parameter("sku") GetAppServicePlanSku sku,
        @CustomType.Parameter("tags") Map<String,String> tags,
        @CustomType.Parameter("zoneRedundant") Boolean zoneRedundant) {
        this.appServiceEnvironmentId = appServiceEnvironmentId;
        this.id = id;
        this.isXenon = isXenon;
        this.kind = kind;
        this.location = location;
        this.maximumElasticWorkerCount = maximumElasticWorkerCount;
        this.maximumNumberOfWorkers = maximumNumberOfWorkers;
        this.name = name;
        this.perSiteScaling = perSiteScaling;
        this.reserved = reserved;
        this.resourceGroupName = resourceGroupName;
        this.sku = sku;
        this.tags = tags;
        this.zoneRedundant = zoneRedundant;
    }

    /**
     * @return The ID of the App Service Environment where the App Service Plan is located.
     * 
     */
    public String appServiceEnvironmentId() {
        return this.appServiceEnvironmentId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A flag that indicates if it&#39;s a xenon plan (support for Windows Container)
     * 
     */
    public Boolean isXenon() {
        return this.isXenon;
    }
    /**
     * @return The Operating System type of the App Service Plan
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return The Azure location where the App Service Plan exists
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan.
     * 
     */
    public Integer maximumElasticWorkerCount() {
        return this.maximumElasticWorkerCount;
    }
    /**
     * @return The maximum number of workers supported with the App Service Plan&#39;s sku.
     * 
     */
    public Integer maximumNumberOfWorkers() {
        return this.maximumNumberOfWorkers;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return Can Apps assigned to this App Service Plan be scaled independently?
     * 
     */
    public Boolean perSiteScaling() {
        return this.perSiteScaling;
    }
    /**
     * @return Is this App Service Plan `Reserved`?
     * 
     */
    public Boolean reserved() {
        return this.reserved;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return A `sku` block as documented below.
     * 
     */
    public GetAppServicePlanSku sku() {
        return this.sku;
    }
    /**
     * @return A mapping of tags assigned to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return App Service Plan perform availability zone balancing.
     * 
     */
    public Boolean zoneRedundant() {
        return this.zoneRedundant;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAppServicePlanResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String appServiceEnvironmentId;
        private String id;
        private Boolean isXenon;
        private String kind;
        private String location;
        private Integer maximumElasticWorkerCount;
        private Integer maximumNumberOfWorkers;
        private String name;
        private Boolean perSiteScaling;
        private Boolean reserved;
        private String resourceGroupName;
        private GetAppServicePlanSku sku;
        private Map<String,String> tags;
        private Boolean zoneRedundant;

        public Builder() {
    	      // Empty
        }

        public Builder(GetAppServicePlanResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appServiceEnvironmentId = defaults.appServiceEnvironmentId;
    	      this.id = defaults.id;
    	      this.isXenon = defaults.isXenon;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.maximumElasticWorkerCount = defaults.maximumElasticWorkerCount;
    	      this.maximumNumberOfWorkers = defaults.maximumNumberOfWorkers;
    	      this.name = defaults.name;
    	      this.perSiteScaling = defaults.perSiteScaling;
    	      this.reserved = defaults.reserved;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
    	      this.zoneRedundant = defaults.zoneRedundant;
        }

        public Builder appServiceEnvironmentId(String appServiceEnvironmentId) {
            this.appServiceEnvironmentId = Objects.requireNonNull(appServiceEnvironmentId);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder isXenon(Boolean isXenon) {
            this.isXenon = Objects.requireNonNull(isXenon);
            return this;
        }
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder maximumElasticWorkerCount(Integer maximumElasticWorkerCount) {
            this.maximumElasticWorkerCount = Objects.requireNonNull(maximumElasticWorkerCount);
            return this;
        }
        public Builder maximumNumberOfWorkers(Integer maximumNumberOfWorkers) {
            this.maximumNumberOfWorkers = Objects.requireNonNull(maximumNumberOfWorkers);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder perSiteScaling(Boolean perSiteScaling) {
            this.perSiteScaling = Objects.requireNonNull(perSiteScaling);
            return this;
        }
        public Builder reserved(Boolean reserved) {
            this.reserved = Objects.requireNonNull(reserved);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder sku(GetAppServicePlanSku sku) {
            this.sku = Objects.requireNonNull(sku);
            return this;
        }
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder zoneRedundant(Boolean zoneRedundant) {
            this.zoneRedundant = Objects.requireNonNull(zoneRedundant);
            return this;
        }        public GetAppServicePlanResult build() {
            return new GetAppServicePlanResult(appServiceEnvironmentId, id, isXenon, kind, location, maximumElasticWorkerCount, maximumNumberOfWorkers, name, perSiteScaling, reserved, resourceGroupName, sku, tags, zoneRedundant);
        }
    }
}
