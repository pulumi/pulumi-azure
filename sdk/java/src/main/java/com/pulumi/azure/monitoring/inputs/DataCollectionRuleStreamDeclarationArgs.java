// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.inputs;

import com.pulumi.azure.monitoring.inputs.DataCollectionRuleStreamDeclarationColumnArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class DataCollectionRuleStreamDeclarationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataCollectionRuleStreamDeclarationArgs Empty = new DataCollectionRuleStreamDeclarationArgs();

    /**
     * One or more `column` blocks as defined above.
     * 
     */
    @Import(name="columns", required=true)
    private Output<List<DataCollectionRuleStreamDeclarationColumnArgs>> columns;

    /**
     * @return One or more `column` blocks as defined above.
     * 
     */
    public Output<List<DataCollectionRuleStreamDeclarationColumnArgs>> columns() {
        return this.columns;
    }

    /**
     * The name of the custom stream. This name should be unique across all `stream_declaration` blocks.
     * 
     */
    @Import(name="streamName", required=true)
    private Output<String> streamName;

    /**
     * @return The name of the custom stream. This name should be unique across all `stream_declaration` blocks.
     * 
     */
    public Output<String> streamName() {
        return this.streamName;
    }

    private DataCollectionRuleStreamDeclarationArgs() {}

    private DataCollectionRuleStreamDeclarationArgs(DataCollectionRuleStreamDeclarationArgs $) {
        this.columns = $.columns;
        this.streamName = $.streamName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataCollectionRuleStreamDeclarationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataCollectionRuleStreamDeclarationArgs $;

        public Builder() {
            $ = new DataCollectionRuleStreamDeclarationArgs();
        }

        public Builder(DataCollectionRuleStreamDeclarationArgs defaults) {
            $ = new DataCollectionRuleStreamDeclarationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param columns One or more `column` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder columns(Output<List<DataCollectionRuleStreamDeclarationColumnArgs>> columns) {
            $.columns = columns;
            return this;
        }

        /**
         * @param columns One or more `column` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder columns(List<DataCollectionRuleStreamDeclarationColumnArgs> columns) {
            return columns(Output.of(columns));
        }

        /**
         * @param columns One or more `column` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder columns(DataCollectionRuleStreamDeclarationColumnArgs... columns) {
            return columns(List.of(columns));
        }

        /**
         * @param streamName The name of the custom stream. This name should be unique across all `stream_declaration` blocks.
         * 
         * @return builder
         * 
         */
        public Builder streamName(Output<String> streamName) {
            $.streamName = streamName;
            return this;
        }

        /**
         * @param streamName The name of the custom stream. This name should be unique across all `stream_declaration` blocks.
         * 
         * @return builder
         * 
         */
        public Builder streamName(String streamName) {
            return streamName(Output.of(streamName));
        }

        public DataCollectionRuleStreamDeclarationArgs build() {
            if ($.columns == null) {
                throw new MissingRequiredPropertyException("DataCollectionRuleStreamDeclarationArgs", "columns");
            }
            if ($.streamName == null) {
                throw new MissingRequiredPropertyException("DataCollectionRuleStreamDeclarationArgs", "streamName");
            }
            return $;
        }
    }

}
