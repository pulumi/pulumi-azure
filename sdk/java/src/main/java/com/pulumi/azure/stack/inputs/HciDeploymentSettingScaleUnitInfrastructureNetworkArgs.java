// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.stack.inputs;

import com.pulumi.azure.stack.inputs.HciDeploymentSettingScaleUnitInfrastructureNetworkIpPoolArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HciDeploymentSettingScaleUnitInfrastructureNetworkArgs extends com.pulumi.resources.ResourceArgs {

    public static final HciDeploymentSettingScaleUnitInfrastructureNetworkArgs Empty = new HciDeploymentSettingScaleUnitInfrastructureNetworkArgs();

    /**
     * Whether DHCP is enabled for hosts and cluster IPs. Possible values are `true` and `false`. defaults to `false`. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     * &gt; **Note:** If `dhcp_enabled` is set to `false`, the deployment will use static IPs. If set to `true`, the gateway and DNS servers are not required.
     * 
     */
    @Import(name="dhcpEnabled")
    private @Nullable Output<Boolean> dhcpEnabled;

    /**
     * @return Whether DHCP is enabled for hosts and cluster IPs. Possible values are `true` and `false`. defaults to `false`. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     * &gt; **Note:** If `dhcp_enabled` is set to `false`, the deployment will use static IPs. If set to `true`, the gateway and DNS servers are not required.
     * 
     */
    public Optional<Output<Boolean>> dhcpEnabled() {
        return Optional.ofNullable(this.dhcpEnabled);
    }

    /**
     * Specifies a list of IPv4 addresses of the DNS servers in your environment. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     */
    @Import(name="dnsServers", required=true)
    private Output<List<String>> dnsServers;

    /**
     * @return Specifies a list of IPv4 addresses of the DNS servers in your environment. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     */
    public Output<List<String>> dnsServers() {
        return this.dnsServers;
    }

    /**
     * Specifies the default gateway that should be used for the provided IP address space. It should be in the format of an IPv4 IP address. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     */
    @Import(name="gateway", required=true)
    private Output<String> gateway;

    /**
     * @return Specifies the default gateway that should be used for the provided IP address space. It should be in the format of an IPv4 IP address. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     */
    public Output<String> gateway() {
        return this.gateway;
    }

    /**
     * One or more `ip_pool` blocks as defined below. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     */
    @Import(name="ipPools", required=true)
    private Output<List<HciDeploymentSettingScaleUnitInfrastructureNetworkIpPoolArgs>> ipPools;

    /**
     * @return One or more `ip_pool` blocks as defined below. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     */
    public Output<List<HciDeploymentSettingScaleUnitInfrastructureNetworkIpPoolArgs>> ipPools() {
        return this.ipPools;
    }

    /**
     * Specifies the subnet mask that matches the provided IP address space. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     */
    @Import(name="subnetMask", required=true)
    private Output<String> subnetMask;

    /**
     * @return Specifies the subnet mask that matches the provided IP address space. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     */
    public Output<String> subnetMask() {
        return this.subnetMask;
    }

    private HciDeploymentSettingScaleUnitInfrastructureNetworkArgs() {}

    private HciDeploymentSettingScaleUnitInfrastructureNetworkArgs(HciDeploymentSettingScaleUnitInfrastructureNetworkArgs $) {
        this.dhcpEnabled = $.dhcpEnabled;
        this.dnsServers = $.dnsServers;
        this.gateway = $.gateway;
        this.ipPools = $.ipPools;
        this.subnetMask = $.subnetMask;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HciDeploymentSettingScaleUnitInfrastructureNetworkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HciDeploymentSettingScaleUnitInfrastructureNetworkArgs $;

        public Builder() {
            $ = new HciDeploymentSettingScaleUnitInfrastructureNetworkArgs();
        }

        public Builder(HciDeploymentSettingScaleUnitInfrastructureNetworkArgs defaults) {
            $ = new HciDeploymentSettingScaleUnitInfrastructureNetworkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dhcpEnabled Whether DHCP is enabled for hosts and cluster IPs. Possible values are `true` and `false`. defaults to `false`. Changing this forces a new Stack HCI Deployment Setting to be created.
         * 
         * &gt; **Note:** If `dhcp_enabled` is set to `false`, the deployment will use static IPs. If set to `true`, the gateway and DNS servers are not required.
         * 
         * @return builder
         * 
         */
        public Builder dhcpEnabled(@Nullable Output<Boolean> dhcpEnabled) {
            $.dhcpEnabled = dhcpEnabled;
            return this;
        }

        /**
         * @param dhcpEnabled Whether DHCP is enabled for hosts and cluster IPs. Possible values are `true` and `false`. defaults to `false`. Changing this forces a new Stack HCI Deployment Setting to be created.
         * 
         * &gt; **Note:** If `dhcp_enabled` is set to `false`, the deployment will use static IPs. If set to `true`, the gateway and DNS servers are not required.
         * 
         * @return builder
         * 
         */
        public Builder dhcpEnabled(Boolean dhcpEnabled) {
            return dhcpEnabled(Output.of(dhcpEnabled));
        }

        /**
         * @param dnsServers Specifies a list of IPv4 addresses of the DNS servers in your environment. Changing this forces a new Stack HCI Deployment Setting to be created.
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(Output<List<String>> dnsServers) {
            $.dnsServers = dnsServers;
            return this;
        }

        /**
         * @param dnsServers Specifies a list of IPv4 addresses of the DNS servers in your environment. Changing this forces a new Stack HCI Deployment Setting to be created.
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(List<String> dnsServers) {
            return dnsServers(Output.of(dnsServers));
        }

        /**
         * @param dnsServers Specifies a list of IPv4 addresses of the DNS servers in your environment. Changing this forces a new Stack HCI Deployment Setting to be created.
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }

        /**
         * @param gateway Specifies the default gateway that should be used for the provided IP address space. It should be in the format of an IPv4 IP address. Changing this forces a new Stack HCI Deployment Setting to be created.
         * 
         * @return builder
         * 
         */
        public Builder gateway(Output<String> gateway) {
            $.gateway = gateway;
            return this;
        }

        /**
         * @param gateway Specifies the default gateway that should be used for the provided IP address space. It should be in the format of an IPv4 IP address. Changing this forces a new Stack HCI Deployment Setting to be created.
         * 
         * @return builder
         * 
         */
        public Builder gateway(String gateway) {
            return gateway(Output.of(gateway));
        }

        /**
         * @param ipPools One or more `ip_pool` blocks as defined below. Changing this forces a new Stack HCI Deployment Setting to be created.
         * 
         * @return builder
         * 
         */
        public Builder ipPools(Output<List<HciDeploymentSettingScaleUnitInfrastructureNetworkIpPoolArgs>> ipPools) {
            $.ipPools = ipPools;
            return this;
        }

        /**
         * @param ipPools One or more `ip_pool` blocks as defined below. Changing this forces a new Stack HCI Deployment Setting to be created.
         * 
         * @return builder
         * 
         */
        public Builder ipPools(List<HciDeploymentSettingScaleUnitInfrastructureNetworkIpPoolArgs> ipPools) {
            return ipPools(Output.of(ipPools));
        }

        /**
         * @param ipPools One or more `ip_pool` blocks as defined below. Changing this forces a new Stack HCI Deployment Setting to be created.
         * 
         * @return builder
         * 
         */
        public Builder ipPools(HciDeploymentSettingScaleUnitInfrastructureNetworkIpPoolArgs... ipPools) {
            return ipPools(List.of(ipPools));
        }

        /**
         * @param subnetMask Specifies the subnet mask that matches the provided IP address space. Changing this forces a new Stack HCI Deployment Setting to be created.
         * 
         * @return builder
         * 
         */
        public Builder subnetMask(Output<String> subnetMask) {
            $.subnetMask = subnetMask;
            return this;
        }

        /**
         * @param subnetMask Specifies the subnet mask that matches the provided IP address space. Changing this forces a new Stack HCI Deployment Setting to be created.
         * 
         * @return builder
         * 
         */
        public Builder subnetMask(String subnetMask) {
            return subnetMask(Output.of(subnetMask));
        }

        public HciDeploymentSettingScaleUnitInfrastructureNetworkArgs build() {
            if ($.dnsServers == null) {
                throw new MissingRequiredPropertyException("HciDeploymentSettingScaleUnitInfrastructureNetworkArgs", "dnsServers");
            }
            if ($.gateway == null) {
                throw new MissingRequiredPropertyException("HciDeploymentSettingScaleUnitInfrastructureNetworkArgs", "gateway");
            }
            if ($.ipPools == null) {
                throw new MissingRequiredPropertyException("HciDeploymentSettingScaleUnitInfrastructureNetworkArgs", "ipPools");
            }
            if ($.subnetMask == null) {
                throw new MissingRequiredPropertyException("HciDeploymentSettingScaleUnitInfrastructureNetworkArgs", "subnetMask");
            }
            return $;
        }
    }

}
