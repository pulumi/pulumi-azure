// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.waf.inputs;

import com.pulumi.azure.waf.inputs.PolicyManagedRulesExclusionExcludedRuleSetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyManagedRulesExclusionArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyManagedRulesExclusionArgs Empty = new PolicyManagedRulesExclusionArgs();

    /**
     * One or more `excluded_rule_set` block defined below.
     * 
     */
    @Import(name="excludedRuleSet")
    private @Nullable Output<PolicyManagedRulesExclusionExcludedRuleSetArgs> excludedRuleSet;

    /**
     * @return One or more `excluded_rule_set` block defined below.
     * 
     */
    public Optional<Output<PolicyManagedRulesExclusionExcludedRuleSetArgs>> excludedRuleSet() {
        return Optional.ofNullable(this.excludedRuleSet);
    }

    /**
     * The name of the Match Variable. Possible values: `RequestArgKeys`, `RequestArgNames`, `RequestArgValues`, `RequestCookieKeys`, `RequestCookieNames`, `RequestCookieValues`, `RequestHeaderKeys`, `RequestHeaderNames`, `RequestHeaderValues`.
     * 
     */
    @Import(name="matchVariable", required=true)
    private Output<String> matchVariable;

    /**
     * @return The name of the Match Variable. Possible values: `RequestArgKeys`, `RequestArgNames`, `RequestArgValues`, `RequestCookieKeys`, `RequestCookieNames`, `RequestCookieValues`, `RequestHeaderKeys`, `RequestHeaderNames`, `RequestHeaderValues`.
     * 
     */
    public Output<String> matchVariable() {
        return this.matchVariable;
    }

    /**
     * Describes field of the matchVariable collection.
     * 
     */
    @Import(name="selector", required=true)
    private Output<String> selector;

    /**
     * @return Describes field of the matchVariable collection.
     * 
     */
    public Output<String> selector() {
        return this.selector;
    }

    /**
     * Describes operator to be matched. Possible values: `Contains`, `EndsWith`, `Equals`, `EqualsAny`, `StartsWith`.
     * 
     */
    @Import(name="selectorMatchOperator", required=true)
    private Output<String> selectorMatchOperator;

    /**
     * @return Describes operator to be matched. Possible values: `Contains`, `EndsWith`, `Equals`, `EqualsAny`, `StartsWith`.
     * 
     */
    public Output<String> selectorMatchOperator() {
        return this.selectorMatchOperator;
    }

    private PolicyManagedRulesExclusionArgs() {}

    private PolicyManagedRulesExclusionArgs(PolicyManagedRulesExclusionArgs $) {
        this.excludedRuleSet = $.excludedRuleSet;
        this.matchVariable = $.matchVariable;
        this.selector = $.selector;
        this.selectorMatchOperator = $.selectorMatchOperator;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyManagedRulesExclusionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyManagedRulesExclusionArgs $;

        public Builder() {
            $ = new PolicyManagedRulesExclusionArgs();
        }

        public Builder(PolicyManagedRulesExclusionArgs defaults) {
            $ = new PolicyManagedRulesExclusionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param excludedRuleSet One or more `excluded_rule_set` block defined below.
         * 
         * @return builder
         * 
         */
        public Builder excludedRuleSet(@Nullable Output<PolicyManagedRulesExclusionExcludedRuleSetArgs> excludedRuleSet) {
            $.excludedRuleSet = excludedRuleSet;
            return this;
        }

        /**
         * @param excludedRuleSet One or more `excluded_rule_set` block defined below.
         * 
         * @return builder
         * 
         */
        public Builder excludedRuleSet(PolicyManagedRulesExclusionExcludedRuleSetArgs excludedRuleSet) {
            return excludedRuleSet(Output.of(excludedRuleSet));
        }

        /**
         * @param matchVariable The name of the Match Variable. Possible values: `RequestArgKeys`, `RequestArgNames`, `RequestArgValues`, `RequestCookieKeys`, `RequestCookieNames`, `RequestCookieValues`, `RequestHeaderKeys`, `RequestHeaderNames`, `RequestHeaderValues`.
         * 
         * @return builder
         * 
         */
        public Builder matchVariable(Output<String> matchVariable) {
            $.matchVariable = matchVariable;
            return this;
        }

        /**
         * @param matchVariable The name of the Match Variable. Possible values: `RequestArgKeys`, `RequestArgNames`, `RequestArgValues`, `RequestCookieKeys`, `RequestCookieNames`, `RequestCookieValues`, `RequestHeaderKeys`, `RequestHeaderNames`, `RequestHeaderValues`.
         * 
         * @return builder
         * 
         */
        public Builder matchVariable(String matchVariable) {
            return matchVariable(Output.of(matchVariable));
        }

        /**
         * @param selector Describes field of the matchVariable collection.
         * 
         * @return builder
         * 
         */
        public Builder selector(Output<String> selector) {
            $.selector = selector;
            return this;
        }

        /**
         * @param selector Describes field of the matchVariable collection.
         * 
         * @return builder
         * 
         */
        public Builder selector(String selector) {
            return selector(Output.of(selector));
        }

        /**
         * @param selectorMatchOperator Describes operator to be matched. Possible values: `Contains`, `EndsWith`, `Equals`, `EqualsAny`, `StartsWith`.
         * 
         * @return builder
         * 
         */
        public Builder selectorMatchOperator(Output<String> selectorMatchOperator) {
            $.selectorMatchOperator = selectorMatchOperator;
            return this;
        }

        /**
         * @param selectorMatchOperator Describes operator to be matched. Possible values: `Contains`, `EndsWith`, `Equals`, `EqualsAny`, `StartsWith`.
         * 
         * @return builder
         * 
         */
        public Builder selectorMatchOperator(String selectorMatchOperator) {
            return selectorMatchOperator(Output.of(selectorMatchOperator));
        }

        public PolicyManagedRulesExclusionArgs build() {
            if ($.matchVariable == null) {
                throw new MissingRequiredPropertyException("PolicyManagedRulesExclusionArgs", "matchVariable");
            }
            if ($.selector == null) {
                throw new MissingRequiredPropertyException("PolicyManagedRulesExclusionArgs", "selector");
            }
            if ($.selectorMatchOperator == null) {
                throw new MissingRequiredPropertyException("PolicyManagedRulesExclusionArgs", "selectorMatchOperator");
            }
            return $;
        }
    }

}
