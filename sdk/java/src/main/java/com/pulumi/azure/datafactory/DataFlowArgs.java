// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.datafactory;

import com.pulumi.azure.datafactory.inputs.DataFlowSinkArgs;
import com.pulumi.azure.datafactory.inputs.DataFlowSourceArgs;
import com.pulumi.azure.datafactory.inputs.DataFlowTransformationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataFlowArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataFlowArgs Empty = new DataFlowArgs();

    /**
     * List of tags that can be used for describing the Data Factory Data Flow.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<List<String>> annotations;

    /**
     * @return List of tags that can be used for describing the Data Factory Data Flow.
     * 
     */
    public Optional<Output<List<String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The ID of Data Factory in which to associate the Data Flow with. Changing this forces a new resource.
     * 
     */
    @Import(name="dataFactoryId", required=true)
    private Output<String> dataFactoryId;

    /**
     * @return The ID of Data Factory in which to associate the Data Flow with. Changing this forces a new resource.
     * 
     */
    public Output<String> dataFactoryId() {
        return this.dataFactoryId;
    }

    /**
     * The description for the Data Factory Data Flow.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description for the Data Factory Data Flow.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The folder that this Data Flow is in. If not specified, the Data Flow will appear at the root level.
     * 
     */
    @Import(name="folder")
    private @Nullable Output<String> folder;

    /**
     * @return The folder that this Data Flow is in. If not specified, the Data Flow will appear at the root level.
     * 
     */
    public Optional<Output<String>> folder() {
        return Optional.ofNullable(this.folder);
    }

    /**
     * Specifies the name of the Data Factory Data Flow. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the Data Factory Data Flow. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The script for the Data Factory Data Flow.
     * 
     */
    @Import(name="script")
    private @Nullable Output<String> script;

    /**
     * @return The script for the Data Factory Data Flow.
     * 
     */
    public Optional<Output<String>> script() {
        return Optional.ofNullable(this.script);
    }

    /**
     * The script lines for the Data Factory Data Flow.
     * 
     */
    @Import(name="scriptLines")
    private @Nullable Output<List<String>> scriptLines;

    /**
     * @return The script lines for the Data Factory Data Flow.
     * 
     */
    public Optional<Output<List<String>>> scriptLines() {
        return Optional.ofNullable(this.scriptLines);
    }

    /**
     * One or more `sink` blocks as defined below.
     * 
     */
    @Import(name="sinks", required=true)
    private Output<List<DataFlowSinkArgs>> sinks;

    /**
     * @return One or more `sink` blocks as defined below.
     * 
     */
    public Output<List<DataFlowSinkArgs>> sinks() {
        return this.sinks;
    }

    /**
     * One or more `source` blocks as defined below.
     * 
     */
    @Import(name="sources", required=true)
    private Output<List<DataFlowSourceArgs>> sources;

    /**
     * @return One or more `source` blocks as defined below.
     * 
     */
    public Output<List<DataFlowSourceArgs>> sources() {
        return this.sources;
    }

    /**
     * One or more `transformation` blocks as defined below.
     * 
     */
    @Import(name="transformations")
    private @Nullable Output<List<DataFlowTransformationArgs>> transformations;

    /**
     * @return One or more `transformation` blocks as defined below.
     * 
     */
    public Optional<Output<List<DataFlowTransformationArgs>>> transformations() {
        return Optional.ofNullable(this.transformations);
    }

    private DataFlowArgs() {}

    private DataFlowArgs(DataFlowArgs $) {
        this.annotations = $.annotations;
        this.dataFactoryId = $.dataFactoryId;
        this.description = $.description;
        this.folder = $.folder;
        this.name = $.name;
        this.script = $.script;
        this.scriptLines = $.scriptLines;
        this.sinks = $.sinks;
        this.sources = $.sources;
        this.transformations = $.transformations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataFlowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataFlowArgs $;

        public Builder() {
            $ = new DataFlowArgs();
        }

        public Builder(DataFlowArgs defaults) {
            $ = new DataFlowArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations List of tags that can be used for describing the Data Factory Data Flow.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<List<String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations List of tags that can be used for describing the Data Factory Data Flow.
         * 
         * @return builder
         * 
         */
        public Builder annotations(List<String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param annotations List of tags that can be used for describing the Data Factory Data Flow.
         * 
         * @return builder
         * 
         */
        public Builder annotations(String... annotations) {
            return annotations(List.of(annotations));
        }

        /**
         * @param dataFactoryId The ID of Data Factory in which to associate the Data Flow with. Changing this forces a new resource.
         * 
         * @return builder
         * 
         */
        public Builder dataFactoryId(Output<String> dataFactoryId) {
            $.dataFactoryId = dataFactoryId;
            return this;
        }

        /**
         * @param dataFactoryId The ID of Data Factory in which to associate the Data Flow with. Changing this forces a new resource.
         * 
         * @return builder
         * 
         */
        public Builder dataFactoryId(String dataFactoryId) {
            return dataFactoryId(Output.of(dataFactoryId));
        }

        /**
         * @param description The description for the Data Factory Data Flow.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description for the Data Factory Data Flow.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param folder The folder that this Data Flow is in. If not specified, the Data Flow will appear at the root level.
         * 
         * @return builder
         * 
         */
        public Builder folder(@Nullable Output<String> folder) {
            $.folder = folder;
            return this;
        }

        /**
         * @param folder The folder that this Data Flow is in. If not specified, the Data Flow will appear at the root level.
         * 
         * @return builder
         * 
         */
        public Builder folder(String folder) {
            return folder(Output.of(folder));
        }

        /**
         * @param name Specifies the name of the Data Factory Data Flow. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Data Factory Data Flow. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param script The script for the Data Factory Data Flow.
         * 
         * @return builder
         * 
         */
        public Builder script(@Nullable Output<String> script) {
            $.script = script;
            return this;
        }

        /**
         * @param script The script for the Data Factory Data Flow.
         * 
         * @return builder
         * 
         */
        public Builder script(String script) {
            return script(Output.of(script));
        }

        /**
         * @param scriptLines The script lines for the Data Factory Data Flow.
         * 
         * @return builder
         * 
         */
        public Builder scriptLines(@Nullable Output<List<String>> scriptLines) {
            $.scriptLines = scriptLines;
            return this;
        }

        /**
         * @param scriptLines The script lines for the Data Factory Data Flow.
         * 
         * @return builder
         * 
         */
        public Builder scriptLines(List<String> scriptLines) {
            return scriptLines(Output.of(scriptLines));
        }

        /**
         * @param scriptLines The script lines for the Data Factory Data Flow.
         * 
         * @return builder
         * 
         */
        public Builder scriptLines(String... scriptLines) {
            return scriptLines(List.of(scriptLines));
        }

        /**
         * @param sinks One or more `sink` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder sinks(Output<List<DataFlowSinkArgs>> sinks) {
            $.sinks = sinks;
            return this;
        }

        /**
         * @param sinks One or more `sink` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder sinks(List<DataFlowSinkArgs> sinks) {
            return sinks(Output.of(sinks));
        }

        /**
         * @param sinks One or more `sink` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder sinks(DataFlowSinkArgs... sinks) {
            return sinks(List.of(sinks));
        }

        /**
         * @param sources One or more `source` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder sources(Output<List<DataFlowSourceArgs>> sources) {
            $.sources = sources;
            return this;
        }

        /**
         * @param sources One or more `source` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder sources(List<DataFlowSourceArgs> sources) {
            return sources(Output.of(sources));
        }

        /**
         * @param sources One or more `source` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder sources(DataFlowSourceArgs... sources) {
            return sources(List.of(sources));
        }

        /**
         * @param transformations One or more `transformation` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder transformations(@Nullable Output<List<DataFlowTransformationArgs>> transformations) {
            $.transformations = transformations;
            return this;
        }

        /**
         * @param transformations One or more `transformation` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder transformations(List<DataFlowTransformationArgs> transformations) {
            return transformations(Output.of(transformations));
        }

        /**
         * @param transformations One or more `transformation` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder transformations(DataFlowTransformationArgs... transformations) {
            return transformations(List.of(transformations));
        }

        public DataFlowArgs build() {
            if ($.dataFactoryId == null) {
                throw new MissingRequiredPropertyException("DataFlowArgs", "dataFactoryId");
            }
            if ($.sinks == null) {
                throw new MissingRequiredPropertyException("DataFlowArgs", "sinks");
            }
            if ($.sources == null) {
                throw new MissingRequiredPropertyException("DataFlowArgs", "sources");
            }
            return $;
        }
    }

}
