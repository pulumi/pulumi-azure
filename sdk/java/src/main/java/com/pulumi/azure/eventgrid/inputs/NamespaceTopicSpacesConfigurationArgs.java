// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.eventgrid.inputs;

import com.pulumi.azure.eventgrid.inputs.NamespaceTopicSpacesConfigurationDynamicRoutingEnrichmentArgs;
import com.pulumi.azure.eventgrid.inputs.NamespaceTopicSpacesConfigurationStaticRoutingEnrichmentArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NamespaceTopicSpacesConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final NamespaceTopicSpacesConfigurationArgs Empty = new NamespaceTopicSpacesConfigurationArgs();

    /**
     * Specifies a list of alternative sources for the client authentication name from the client certificate. Possible values are `ClientCertificateDns`, `ClientCertificateEmail`, `ClientCertificateIp`, `ClientCertificateSubject` and `ClientCertificateUri`.
     * 
     */
    @Import(name="alternativeAuthenticationNameSources")
    private @Nullable Output<List<String>> alternativeAuthenticationNameSources;

    /**
     * @return Specifies a list of alternative sources for the client authentication name from the client certificate. Possible values are `ClientCertificateDns`, `ClientCertificateEmail`, `ClientCertificateIp`, `ClientCertificateSubject` and `ClientCertificateUri`.
     * 
     */
    public Optional<Output<List<String>>> alternativeAuthenticationNameSources() {
        return Optional.ofNullable(this.alternativeAuthenticationNameSources);
    }

    /**
     * One or more `dynamic_routing_enrichment` blocks as defined below.
     * 
     */
    @Import(name="dynamicRoutingEnrichments")
    private @Nullable Output<List<NamespaceTopicSpacesConfigurationDynamicRoutingEnrichmentArgs>> dynamicRoutingEnrichments;

    /**
     * @return One or more `dynamic_routing_enrichment` blocks as defined below.
     * 
     */
    public Optional<Output<List<NamespaceTopicSpacesConfigurationDynamicRoutingEnrichmentArgs>>> dynamicRoutingEnrichments() {
        return Optional.ofNullable(this.dynamicRoutingEnrichments);
    }

    /**
     * Specifies the maximum number of client sessions per authentication name. Valid values can be between `1` and `100`.
     * 
     */
    @Import(name="maximumClientSessionsPerAuthenticationName")
    private @Nullable Output<Integer> maximumClientSessionsPerAuthenticationName;

    /**
     * @return Specifies the maximum number of client sessions per authentication name. Valid values can be between `1` and `100`.
     * 
     */
    public Optional<Output<Integer>> maximumClientSessionsPerAuthenticationName() {
        return Optional.ofNullable(this.maximumClientSessionsPerAuthenticationName);
    }

    /**
     * Specifies the maximum session expiry interval allowed for all MQTT clients connecting to the Event Grid namespace. Valid values can be between `1` and `8`.
     * 
     */
    @Import(name="maximumSessionExpiryInHours")
    private @Nullable Output<Integer> maximumSessionExpiryInHours;

    /**
     * @return Specifies the maximum session expiry interval allowed for all MQTT clients connecting to the Event Grid namespace. Valid values can be between `1` and `8`.
     * 
     */
    public Optional<Output<Integer>> maximumSessionExpiryInHours() {
        return Optional.ofNullable(this.maximumSessionExpiryInHours);
    }

    /**
     * Specifies the Event Grid topic resource ID to route messages to.
     * 
     */
    @Import(name="routeTopicId")
    private @Nullable Output<String> routeTopicId;

    /**
     * @return Specifies the Event Grid topic resource ID to route messages to.
     * 
     */
    public Optional<Output<String>> routeTopicId() {
        return Optional.ofNullable(this.routeTopicId);
    }

    /**
     * One or more `static_routing_enrichment` blocks as defined below.
     * 
     */
    @Import(name="staticRoutingEnrichments")
    private @Nullable Output<List<NamespaceTopicSpacesConfigurationStaticRoutingEnrichmentArgs>> staticRoutingEnrichments;

    /**
     * @return One or more `static_routing_enrichment` blocks as defined below.
     * 
     */
    public Optional<Output<List<NamespaceTopicSpacesConfigurationStaticRoutingEnrichmentArgs>>> staticRoutingEnrichments() {
        return Optional.ofNullable(this.staticRoutingEnrichments);
    }

    private NamespaceTopicSpacesConfigurationArgs() {}

    private NamespaceTopicSpacesConfigurationArgs(NamespaceTopicSpacesConfigurationArgs $) {
        this.alternativeAuthenticationNameSources = $.alternativeAuthenticationNameSources;
        this.dynamicRoutingEnrichments = $.dynamicRoutingEnrichments;
        this.maximumClientSessionsPerAuthenticationName = $.maximumClientSessionsPerAuthenticationName;
        this.maximumSessionExpiryInHours = $.maximumSessionExpiryInHours;
        this.routeTopicId = $.routeTopicId;
        this.staticRoutingEnrichments = $.staticRoutingEnrichments;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NamespaceTopicSpacesConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NamespaceTopicSpacesConfigurationArgs $;

        public Builder() {
            $ = new NamespaceTopicSpacesConfigurationArgs();
        }

        public Builder(NamespaceTopicSpacesConfigurationArgs defaults) {
            $ = new NamespaceTopicSpacesConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alternativeAuthenticationNameSources Specifies a list of alternative sources for the client authentication name from the client certificate. Possible values are `ClientCertificateDns`, `ClientCertificateEmail`, `ClientCertificateIp`, `ClientCertificateSubject` and `ClientCertificateUri`.
         * 
         * @return builder
         * 
         */
        public Builder alternativeAuthenticationNameSources(@Nullable Output<List<String>> alternativeAuthenticationNameSources) {
            $.alternativeAuthenticationNameSources = alternativeAuthenticationNameSources;
            return this;
        }

        /**
         * @param alternativeAuthenticationNameSources Specifies a list of alternative sources for the client authentication name from the client certificate. Possible values are `ClientCertificateDns`, `ClientCertificateEmail`, `ClientCertificateIp`, `ClientCertificateSubject` and `ClientCertificateUri`.
         * 
         * @return builder
         * 
         */
        public Builder alternativeAuthenticationNameSources(List<String> alternativeAuthenticationNameSources) {
            return alternativeAuthenticationNameSources(Output.of(alternativeAuthenticationNameSources));
        }

        /**
         * @param alternativeAuthenticationNameSources Specifies a list of alternative sources for the client authentication name from the client certificate. Possible values are `ClientCertificateDns`, `ClientCertificateEmail`, `ClientCertificateIp`, `ClientCertificateSubject` and `ClientCertificateUri`.
         * 
         * @return builder
         * 
         */
        public Builder alternativeAuthenticationNameSources(String... alternativeAuthenticationNameSources) {
            return alternativeAuthenticationNameSources(List.of(alternativeAuthenticationNameSources));
        }

        /**
         * @param dynamicRoutingEnrichments One or more `dynamic_routing_enrichment` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder dynamicRoutingEnrichments(@Nullable Output<List<NamespaceTopicSpacesConfigurationDynamicRoutingEnrichmentArgs>> dynamicRoutingEnrichments) {
            $.dynamicRoutingEnrichments = dynamicRoutingEnrichments;
            return this;
        }

        /**
         * @param dynamicRoutingEnrichments One or more `dynamic_routing_enrichment` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder dynamicRoutingEnrichments(List<NamespaceTopicSpacesConfigurationDynamicRoutingEnrichmentArgs> dynamicRoutingEnrichments) {
            return dynamicRoutingEnrichments(Output.of(dynamicRoutingEnrichments));
        }

        /**
         * @param dynamicRoutingEnrichments One or more `dynamic_routing_enrichment` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder dynamicRoutingEnrichments(NamespaceTopicSpacesConfigurationDynamicRoutingEnrichmentArgs... dynamicRoutingEnrichments) {
            return dynamicRoutingEnrichments(List.of(dynamicRoutingEnrichments));
        }

        /**
         * @param maximumClientSessionsPerAuthenticationName Specifies the maximum number of client sessions per authentication name. Valid values can be between `1` and `100`.
         * 
         * @return builder
         * 
         */
        public Builder maximumClientSessionsPerAuthenticationName(@Nullable Output<Integer> maximumClientSessionsPerAuthenticationName) {
            $.maximumClientSessionsPerAuthenticationName = maximumClientSessionsPerAuthenticationName;
            return this;
        }

        /**
         * @param maximumClientSessionsPerAuthenticationName Specifies the maximum number of client sessions per authentication name. Valid values can be between `1` and `100`.
         * 
         * @return builder
         * 
         */
        public Builder maximumClientSessionsPerAuthenticationName(Integer maximumClientSessionsPerAuthenticationName) {
            return maximumClientSessionsPerAuthenticationName(Output.of(maximumClientSessionsPerAuthenticationName));
        }

        /**
         * @param maximumSessionExpiryInHours Specifies the maximum session expiry interval allowed for all MQTT clients connecting to the Event Grid namespace. Valid values can be between `1` and `8`.
         * 
         * @return builder
         * 
         */
        public Builder maximumSessionExpiryInHours(@Nullable Output<Integer> maximumSessionExpiryInHours) {
            $.maximumSessionExpiryInHours = maximumSessionExpiryInHours;
            return this;
        }

        /**
         * @param maximumSessionExpiryInHours Specifies the maximum session expiry interval allowed for all MQTT clients connecting to the Event Grid namespace. Valid values can be between `1` and `8`.
         * 
         * @return builder
         * 
         */
        public Builder maximumSessionExpiryInHours(Integer maximumSessionExpiryInHours) {
            return maximumSessionExpiryInHours(Output.of(maximumSessionExpiryInHours));
        }

        /**
         * @param routeTopicId Specifies the Event Grid topic resource ID to route messages to.
         * 
         * @return builder
         * 
         */
        public Builder routeTopicId(@Nullable Output<String> routeTopicId) {
            $.routeTopicId = routeTopicId;
            return this;
        }

        /**
         * @param routeTopicId Specifies the Event Grid topic resource ID to route messages to.
         * 
         * @return builder
         * 
         */
        public Builder routeTopicId(String routeTopicId) {
            return routeTopicId(Output.of(routeTopicId));
        }

        /**
         * @param staticRoutingEnrichments One or more `static_routing_enrichment` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder staticRoutingEnrichments(@Nullable Output<List<NamespaceTopicSpacesConfigurationStaticRoutingEnrichmentArgs>> staticRoutingEnrichments) {
            $.staticRoutingEnrichments = staticRoutingEnrichments;
            return this;
        }

        /**
         * @param staticRoutingEnrichments One or more `static_routing_enrichment` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder staticRoutingEnrichments(List<NamespaceTopicSpacesConfigurationStaticRoutingEnrichmentArgs> staticRoutingEnrichments) {
            return staticRoutingEnrichments(Output.of(staticRoutingEnrichments));
        }

        /**
         * @param staticRoutingEnrichments One or more `static_routing_enrichment` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder staticRoutingEnrichments(NamespaceTopicSpacesConfigurationStaticRoutingEnrichmentArgs... staticRoutingEnrichments) {
            return staticRoutingEnrichments(List.of(staticRoutingEnrichments));
        }

        public NamespaceTopicSpacesConfigurationArgs build() {
            return $;
        }
    }

}
