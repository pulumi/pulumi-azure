// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.role;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AssignmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final AssignmentArgs Empty = new AssignmentArgs();

    /**
     * The condition that limits the resources that the role can be assigned to. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="condition")
    private @Nullable Output<String> condition;

    /**
     * @return The condition that limits the resources that the role can be assigned to. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> condition() {
        return Optional.ofNullable(this.condition);
    }

    /**
     * The version of the condition. Possible values are `1.0` or `2.0`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="conditionVersion")
    private @Nullable Output<String> conditionVersion;

    /**
     * @return The version of the condition. Possible values are `1.0` or `2.0`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> conditionVersion() {
        return Optional.ofNullable(this.conditionVersion);
    }

    /**
     * The delegated Azure Resource Id which contains a Managed Identity. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** this field is only used in cross tenant scenario.
     * 
     */
    @Import(name="delegatedManagedIdentityResourceId")
    private @Nullable Output<String> delegatedManagedIdentityResourceId;

    /**
     * @return The delegated Azure Resource Id which contains a Managed Identity. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** this field is only used in cross tenant scenario.
     * 
     */
    public Optional<Output<String>> delegatedManagedIdentityResourceId() {
        return Optional.ofNullable(this.delegatedManagedIdentityResourceId);
    }

    /**
     * The description for this Role Assignment. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description for this Role Assignment. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A unique UUID/GUID for this Role Assignment - one will be generated if not specified. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A unique UUID/GUID for this Role Assignment - one will be generated if not specified. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the Principal (User, Group or Service Principal) to assign the Role Definition to. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** The Principal ID is also known as the Object ID (ie not the &#34;Application ID&#34; for applications).
     * 
     */
    @Import(name="principalId", required=true)
    private Output<String> principalId;

    /**
     * @return The ID of the Principal (User, Group or Service Principal) to assign the Role Definition to. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** The Principal ID is also known as the Object ID (ie not the &#34;Application ID&#34; for applications).
     * 
     */
    public Output<String> principalId() {
        return this.principalId;
    }

    /**
     * The Scoped-ID of the Role Definition. Changing this forces a new resource to be created. Conflicts with `role_definition_name`.
     * 
     */
    @Import(name="roleDefinitionId")
    private @Nullable Output<String> roleDefinitionId;

    /**
     * @return The Scoped-ID of the Role Definition. Changing this forces a new resource to be created. Conflicts with `role_definition_name`.
     * 
     */
    public Optional<Output<String>> roleDefinitionId() {
        return Optional.ofNullable(this.roleDefinitionId);
    }

    /**
     * The name of a built-in Role. Changing this forces a new resource to be created. Conflicts with `role_definition_id`.
     * 
     */
    @Import(name="roleDefinitionName")
    private @Nullable Output<String> roleDefinitionName;

    /**
     * @return The name of a built-in Role. Changing this forces a new resource to be created. Conflicts with `role_definition_id`.
     * 
     */
    public Optional<Output<String>> roleDefinitionName() {
        return Optional.ofNullable(this.roleDefinitionName);
    }

    /**
     * The scope at which the Role Assignment applies to, such as `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333`, `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333/resourceGroups/myGroup`, or `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333/resourceGroups/myGroup/providers/Microsoft.Compute/virtualMachines/myVM`, or `/providers/Microsoft.Management/managementGroups/myMG`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    /**
     * @return The scope at which the Role Assignment applies to, such as `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333`, `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333/resourceGroups/myGroup`, or `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333/resourceGroups/myGroup/providers/Microsoft.Compute/virtualMachines/myVM`, or `/providers/Microsoft.Management/managementGroups/myMG`. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    /**
     * If the `principal_id` is a newly provisioned `Service Principal` set this value to `true` to skip the `Azure Active Directory` check which may fail due to replication lag. This argument is only valid if the `principal_id` is a `Service Principal` identity. Defaults to `false`.
     * 
     * &gt; **NOTE:** If it is not a `Service Principal` identity it will cause the role assignment to fail.
     * 
     */
    @Import(name="skipServicePrincipalAadCheck")
    private @Nullable Output<Boolean> skipServicePrincipalAadCheck;

    /**
     * @return If the `principal_id` is a newly provisioned `Service Principal` set this value to `true` to skip the `Azure Active Directory` check which may fail due to replication lag. This argument is only valid if the `principal_id` is a `Service Principal` identity. Defaults to `false`.
     * 
     * &gt; **NOTE:** If it is not a `Service Principal` identity it will cause the role assignment to fail.
     * 
     */
    public Optional<Output<Boolean>> skipServicePrincipalAadCheck() {
        return Optional.ofNullable(this.skipServicePrincipalAadCheck);
    }

    private AssignmentArgs() {}

    private AssignmentArgs(AssignmentArgs $) {
        this.condition = $.condition;
        this.conditionVersion = $.conditionVersion;
        this.delegatedManagedIdentityResourceId = $.delegatedManagedIdentityResourceId;
        this.description = $.description;
        this.name = $.name;
        this.principalId = $.principalId;
        this.roleDefinitionId = $.roleDefinitionId;
        this.roleDefinitionName = $.roleDefinitionName;
        this.scope = $.scope;
        this.skipServicePrincipalAadCheck = $.skipServicePrincipalAadCheck;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AssignmentArgs $;

        public Builder() {
            $ = new AssignmentArgs();
        }

        public Builder(AssignmentArgs defaults) {
            $ = new AssignmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param condition The condition that limits the resources that the role can be assigned to. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder condition(@Nullable Output<String> condition) {
            $.condition = condition;
            return this;
        }

        /**
         * @param condition The condition that limits the resources that the role can be assigned to. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder condition(String condition) {
            return condition(Output.of(condition));
        }

        /**
         * @param conditionVersion The version of the condition. Possible values are `1.0` or `2.0`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder conditionVersion(@Nullable Output<String> conditionVersion) {
            $.conditionVersion = conditionVersion;
            return this;
        }

        /**
         * @param conditionVersion The version of the condition. Possible values are `1.0` or `2.0`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder conditionVersion(String conditionVersion) {
            return conditionVersion(Output.of(conditionVersion));
        }

        /**
         * @param delegatedManagedIdentityResourceId The delegated Azure Resource Id which contains a Managed Identity. Changing this forces a new resource to be created.
         * 
         * &gt; **NOTE:** this field is only used in cross tenant scenario.
         * 
         * @return builder
         * 
         */
        public Builder delegatedManagedIdentityResourceId(@Nullable Output<String> delegatedManagedIdentityResourceId) {
            $.delegatedManagedIdentityResourceId = delegatedManagedIdentityResourceId;
            return this;
        }

        /**
         * @param delegatedManagedIdentityResourceId The delegated Azure Resource Id which contains a Managed Identity. Changing this forces a new resource to be created.
         * 
         * &gt; **NOTE:** this field is only used in cross tenant scenario.
         * 
         * @return builder
         * 
         */
        public Builder delegatedManagedIdentityResourceId(String delegatedManagedIdentityResourceId) {
            return delegatedManagedIdentityResourceId(Output.of(delegatedManagedIdentityResourceId));
        }

        /**
         * @param description The description for this Role Assignment. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description for this Role Assignment. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name A unique UUID/GUID for this Role Assignment - one will be generated if not specified. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A unique UUID/GUID for this Role Assignment - one will be generated if not specified. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param principalId The ID of the Principal (User, Group or Service Principal) to assign the Role Definition to. Changing this forces a new resource to be created.
         * 
         * &gt; **NOTE:** The Principal ID is also known as the Object ID (ie not the &#34;Application ID&#34; for applications).
         * 
         * @return builder
         * 
         */
        public Builder principalId(Output<String> principalId) {
            $.principalId = principalId;
            return this;
        }

        /**
         * @param principalId The ID of the Principal (User, Group or Service Principal) to assign the Role Definition to. Changing this forces a new resource to be created.
         * 
         * &gt; **NOTE:** The Principal ID is also known as the Object ID (ie not the &#34;Application ID&#34; for applications).
         * 
         * @return builder
         * 
         */
        public Builder principalId(String principalId) {
            return principalId(Output.of(principalId));
        }

        /**
         * @param roleDefinitionId The Scoped-ID of the Role Definition. Changing this forces a new resource to be created. Conflicts with `role_definition_name`.
         * 
         * @return builder
         * 
         */
        public Builder roleDefinitionId(@Nullable Output<String> roleDefinitionId) {
            $.roleDefinitionId = roleDefinitionId;
            return this;
        }

        /**
         * @param roleDefinitionId The Scoped-ID of the Role Definition. Changing this forces a new resource to be created. Conflicts with `role_definition_name`.
         * 
         * @return builder
         * 
         */
        public Builder roleDefinitionId(String roleDefinitionId) {
            return roleDefinitionId(Output.of(roleDefinitionId));
        }

        /**
         * @param roleDefinitionName The name of a built-in Role. Changing this forces a new resource to be created. Conflicts with `role_definition_id`.
         * 
         * @return builder
         * 
         */
        public Builder roleDefinitionName(@Nullable Output<String> roleDefinitionName) {
            $.roleDefinitionName = roleDefinitionName;
            return this;
        }

        /**
         * @param roleDefinitionName The name of a built-in Role. Changing this forces a new resource to be created. Conflicts with `role_definition_id`.
         * 
         * @return builder
         * 
         */
        public Builder roleDefinitionName(String roleDefinitionName) {
            return roleDefinitionName(Output.of(roleDefinitionName));
        }

        /**
         * @param scope The scope at which the Role Assignment applies to, such as `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333`, `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333/resourceGroups/myGroup`, or `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333/resourceGroups/myGroup/providers/Microsoft.Compute/virtualMachines/myVM`, or `/providers/Microsoft.Management/managementGroups/myMG`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope at which the Role Assignment applies to, such as `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333`, `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333/resourceGroups/myGroup`, or `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333/resourceGroups/myGroup/providers/Microsoft.Compute/virtualMachines/myVM`, or `/providers/Microsoft.Management/managementGroups/myMG`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param skipServicePrincipalAadCheck If the `principal_id` is a newly provisioned `Service Principal` set this value to `true` to skip the `Azure Active Directory` check which may fail due to replication lag. This argument is only valid if the `principal_id` is a `Service Principal` identity. Defaults to `false`.
         * 
         * &gt; **NOTE:** If it is not a `Service Principal` identity it will cause the role assignment to fail.
         * 
         * @return builder
         * 
         */
        public Builder skipServicePrincipalAadCheck(@Nullable Output<Boolean> skipServicePrincipalAadCheck) {
            $.skipServicePrincipalAadCheck = skipServicePrincipalAadCheck;
            return this;
        }

        /**
         * @param skipServicePrincipalAadCheck If the `principal_id` is a newly provisioned `Service Principal` set this value to `true` to skip the `Azure Active Directory` check which may fail due to replication lag. This argument is only valid if the `principal_id` is a `Service Principal` identity. Defaults to `false`.
         * 
         * &gt; **NOTE:** If it is not a `Service Principal` identity it will cause the role assignment to fail.
         * 
         * @return builder
         * 
         */
        public Builder skipServicePrincipalAadCheck(Boolean skipServicePrincipalAadCheck) {
            return skipServicePrincipalAadCheck(Output.of(skipServicePrincipalAadCheck));
        }

        public AssignmentArgs build() {
            if ($.principalId == null) {
                throw new MissingRequiredPropertyException("AssignmentArgs", "principalId");
            }
            if ($.scope == null) {
                throw new MissingRequiredPropertyException("AssignmentArgs", "scope");
            }
            return $;
        }
    }

}
