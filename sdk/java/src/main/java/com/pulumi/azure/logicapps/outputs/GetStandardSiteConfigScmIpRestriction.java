// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.logicapps.outputs;

import com.pulumi.azure.logicapps.outputs.GetStandardSiteConfigScmIpRestrictionHeaders;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetStandardSiteConfigScmIpRestriction {
    /**
     * @return Does this restriction `Allow` or `Deny` access for this IP range.
     * 
     */
    private @Nullable String action;
    /**
     * @return The `headers` block for this specific `ipRestriction` as defined below.
     * 
     */
    private GetStandardSiteConfigScmIpRestrictionHeaders headers;
    /**
     * @return The IP Address used for this IP Restriction in CIDR notation.
     * 
     */
    private String ipAddress;
    /**
     * @return The name of the Logic App.
     * 
     */
    private String name;
    /**
     * @return The priority for this IP Restriction. Restrictions are enforced in priority order.
     * 
     */
    private @Nullable Integer priority;
    /**
     * @return The Service Tag used for this IP Restriction.
     * 
     */
    private String serviceTag;
    /**
     * @return The Virtual Network Subnet ID used for this IP Restriction.
     * 
     */
    private String virtualNetworkSubnetId;

    private GetStandardSiteConfigScmIpRestriction() {}
    /**
     * @return Does this restriction `Allow` or `Deny` access for this IP range.
     * 
     */
    public Optional<String> action() {
        return Optional.ofNullable(this.action);
    }
    /**
     * @return The `headers` block for this specific `ipRestriction` as defined below.
     * 
     */
    public GetStandardSiteConfigScmIpRestrictionHeaders headers() {
        return this.headers;
    }
    /**
     * @return The IP Address used for this IP Restriction in CIDR notation.
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return The name of the Logic App.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The priority for this IP Restriction. Restrictions are enforced in priority order.
     * 
     */
    public Optional<Integer> priority() {
        return Optional.ofNullable(this.priority);
    }
    /**
     * @return The Service Tag used for this IP Restriction.
     * 
     */
    public String serviceTag() {
        return this.serviceTag;
    }
    /**
     * @return The Virtual Network Subnet ID used for this IP Restriction.
     * 
     */
    public String virtualNetworkSubnetId() {
        return this.virtualNetworkSubnetId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStandardSiteConfigScmIpRestriction defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String action;
        private GetStandardSiteConfigScmIpRestrictionHeaders headers;
        private String ipAddress;
        private String name;
        private @Nullable Integer priority;
        private String serviceTag;
        private String virtualNetworkSubnetId;
        public Builder() {}
        public Builder(GetStandardSiteConfigScmIpRestriction defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.headers = defaults.headers;
    	      this.ipAddress = defaults.ipAddress;
    	      this.name = defaults.name;
    	      this.priority = defaults.priority;
    	      this.serviceTag = defaults.serviceTag;
    	      this.virtualNetworkSubnetId = defaults.virtualNetworkSubnetId;
        }

        @CustomType.Setter
        public Builder action(@Nullable String action) {

            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder headers(GetStandardSiteConfigScmIpRestrictionHeaders headers) {
            if (headers == null) {
              throw new MissingRequiredPropertyException("GetStandardSiteConfigScmIpRestriction", "headers");
            }
            this.headers = headers;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            if (ipAddress == null) {
              throw new MissingRequiredPropertyException("GetStandardSiteConfigScmIpRestriction", "ipAddress");
            }
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetStandardSiteConfigScmIpRestriction", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder priority(@Nullable Integer priority) {

            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTag(String serviceTag) {
            if (serviceTag == null) {
              throw new MissingRequiredPropertyException("GetStandardSiteConfigScmIpRestriction", "serviceTag");
            }
            this.serviceTag = serviceTag;
            return this;
        }
        @CustomType.Setter
        public Builder virtualNetworkSubnetId(String virtualNetworkSubnetId) {
            if (virtualNetworkSubnetId == null) {
              throw new MissingRequiredPropertyException("GetStandardSiteConfigScmIpRestriction", "virtualNetworkSubnetId");
            }
            this.virtualNetworkSubnetId = virtualNetworkSubnetId;
            return this;
        }
        public GetStandardSiteConfigScmIpRestriction build() {
            final var _resultValue = new GetStandardSiteConfigScmIpRestriction();
            _resultValue.action = action;
            _resultValue.headers = headers;
            _resultValue.ipAddress = ipAddress;
            _resultValue.name = name;
            _resultValue.priority = priority;
            _resultValue.serviceTag = serviceTag;
            _resultValue.virtualNetworkSubnetId = virtualNetworkSubnetId;
            return _resultValue;
        }
    }
}
