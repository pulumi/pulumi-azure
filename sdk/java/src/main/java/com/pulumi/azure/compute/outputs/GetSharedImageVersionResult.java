// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.outputs;

import com.pulumi.azure.compute.outputs.GetSharedImageVersionTargetRegion;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSharedImageVersionResult {
    /**
     * @return Is this Image Version excluded from the `latest` filter?
     * 
     */
    private Boolean excludeFromLatest;
    private String galleryName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String imageName;
    /**
     * @return The supported Azure location where the Shared Image Gallery exists.
     * 
     */
    private String location;
    /**
     * @return The ID of the Managed Image which was the source of this Shared Image Version.
     * 
     */
    private String managedImageId;
    /**
     * @return The Azure Region in which this Image Version exists.
     * 
     */
    private String name;
    /**
     * @return The size of the OS disk snapshot (in Gigabytes) which was the source of this Shared Image Version.
     * 
     */
    private Integer osDiskImageSizeGb;
    /**
     * @return The ID of the OS disk snapshot which was the source of this Shared Image Version.
     * 
     */
    private String osDiskSnapshotId;
    private String resourceGroupName;
    private @Nullable Boolean sortVersionsBySemver;
    /**
     * @return A mapping of tags assigned to the Shared Image.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return One or more `target_region` blocks as documented below.
     * 
     */
    private List<GetSharedImageVersionTargetRegion> targetRegions;

    private GetSharedImageVersionResult() {}
    /**
     * @return Is this Image Version excluded from the `latest` filter?
     * 
     */
    public Boolean excludeFromLatest() {
        return this.excludeFromLatest;
    }
    public String galleryName() {
        return this.galleryName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String imageName() {
        return this.imageName;
    }
    /**
     * @return The supported Azure location where the Shared Image Gallery exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The ID of the Managed Image which was the source of this Shared Image Version.
     * 
     */
    public String managedImageId() {
        return this.managedImageId;
    }
    /**
     * @return The Azure Region in which this Image Version exists.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The size of the OS disk snapshot (in Gigabytes) which was the source of this Shared Image Version.
     * 
     */
    public Integer osDiskImageSizeGb() {
        return this.osDiskImageSizeGb;
    }
    /**
     * @return The ID of the OS disk snapshot which was the source of this Shared Image Version.
     * 
     */
    public String osDiskSnapshotId() {
        return this.osDiskSnapshotId;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    public Optional<Boolean> sortVersionsBySemver() {
        return Optional.ofNullable(this.sortVersionsBySemver);
    }
    /**
     * @return A mapping of tags assigned to the Shared Image.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return One or more `target_region` blocks as documented below.
     * 
     */
    public List<GetSharedImageVersionTargetRegion> targetRegions() {
        return this.targetRegions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSharedImageVersionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean excludeFromLatest;
        private String galleryName;
        private String id;
        private String imageName;
        private String location;
        private String managedImageId;
        private String name;
        private Integer osDiskImageSizeGb;
        private String osDiskSnapshotId;
        private String resourceGroupName;
        private @Nullable Boolean sortVersionsBySemver;
        private Map<String,String> tags;
        private List<GetSharedImageVersionTargetRegion> targetRegions;
        public Builder() {}
        public Builder(GetSharedImageVersionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.excludeFromLatest = defaults.excludeFromLatest;
    	      this.galleryName = defaults.galleryName;
    	      this.id = defaults.id;
    	      this.imageName = defaults.imageName;
    	      this.location = defaults.location;
    	      this.managedImageId = defaults.managedImageId;
    	      this.name = defaults.name;
    	      this.osDiskImageSizeGb = defaults.osDiskImageSizeGb;
    	      this.osDiskSnapshotId = defaults.osDiskSnapshotId;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sortVersionsBySemver = defaults.sortVersionsBySemver;
    	      this.tags = defaults.tags;
    	      this.targetRegions = defaults.targetRegions;
        }

        @CustomType.Setter
        public Builder excludeFromLatest(Boolean excludeFromLatest) {
            if (excludeFromLatest == null) {
              throw new MissingRequiredPropertyException("GetSharedImageVersionResult", "excludeFromLatest");
            }
            this.excludeFromLatest = excludeFromLatest;
            return this;
        }
        @CustomType.Setter
        public Builder galleryName(String galleryName) {
            if (galleryName == null) {
              throw new MissingRequiredPropertyException("GetSharedImageVersionResult", "galleryName");
            }
            this.galleryName = galleryName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSharedImageVersionResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageName(String imageName) {
            if (imageName == null) {
              throw new MissingRequiredPropertyException("GetSharedImageVersionResult", "imageName");
            }
            this.imageName = imageName;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetSharedImageVersionResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder managedImageId(String managedImageId) {
            if (managedImageId == null) {
              throw new MissingRequiredPropertyException("GetSharedImageVersionResult", "managedImageId");
            }
            this.managedImageId = managedImageId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSharedImageVersionResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder osDiskImageSizeGb(Integer osDiskImageSizeGb) {
            if (osDiskImageSizeGb == null) {
              throw new MissingRequiredPropertyException("GetSharedImageVersionResult", "osDiskImageSizeGb");
            }
            this.osDiskImageSizeGb = osDiskImageSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder osDiskSnapshotId(String osDiskSnapshotId) {
            if (osDiskSnapshotId == null) {
              throw new MissingRequiredPropertyException("GetSharedImageVersionResult", "osDiskSnapshotId");
            }
            this.osDiskSnapshotId = osDiskSnapshotId;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetSharedImageVersionResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder sortVersionsBySemver(@Nullable Boolean sortVersionsBySemver) {

            this.sortVersionsBySemver = sortVersionsBySemver;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetSharedImageVersionResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder targetRegions(List<GetSharedImageVersionTargetRegion> targetRegions) {
            if (targetRegions == null) {
              throw new MissingRequiredPropertyException("GetSharedImageVersionResult", "targetRegions");
            }
            this.targetRegions = targetRegions;
            return this;
        }
        public Builder targetRegions(GetSharedImageVersionTargetRegion... targetRegions) {
            return targetRegions(List.of(targetRegions));
        }
        public GetSharedImageVersionResult build() {
            final var _resultValue = new GetSharedImageVersionResult();
            _resultValue.excludeFromLatest = excludeFromLatest;
            _resultValue.galleryName = galleryName;
            _resultValue.id = id;
            _resultValue.imageName = imageName;
            _resultValue.location = location;
            _resultValue.managedImageId = managedImageId;
            _resultValue.name = name;
            _resultValue.osDiskImageSizeGb = osDiskImageSizeGb;
            _resultValue.osDiskSnapshotId = osDiskSnapshotId;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.sortVersionsBySemver = sortVersionsBySemver;
            _resultValue.tags = tags;
            _resultValue.targetRegions = targetRegions;
            return _resultValue;
        }
    }
}
