// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.consumption.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BudgetResourceGroupNotificationArgs extends com.pulumi.resources.ResourceArgs {

    public static final BudgetResourceGroupNotificationArgs Empty = new BudgetResourceGroupNotificationArgs();

    /**
     * Specifies a list of email addresses to send the budget notification to when the threshold is exceeded.
     * 
     */
    @Import(name="contactEmails")
    private @Nullable Output<List<String>> contactEmails;

    /**
     * @return Specifies a list of email addresses to send the budget notification to when the threshold is exceeded.
     * 
     */
    public Optional<Output<List<String>>> contactEmails() {
        return Optional.ofNullable(this.contactEmails);
    }

    /**
     * Specifies a list of Action Group IDs to send the budget notification to when the threshold is exceeded.
     * 
     */
    @Import(name="contactGroups")
    private @Nullable Output<List<String>> contactGroups;

    /**
     * @return Specifies a list of Action Group IDs to send the budget notification to when the threshold is exceeded.
     * 
     */
    public Optional<Output<List<String>>> contactGroups() {
        return Optional.ofNullable(this.contactGroups);
    }

    /**
     * Specifies a list of contact roles to send the budget notification to when the threshold is exceeded.
     * 
     */
    @Import(name="contactRoles")
    private @Nullable Output<List<String>> contactRoles;

    /**
     * @return Specifies a list of contact roles to send the budget notification to when the threshold is exceeded.
     * 
     */
    public Optional<Output<List<String>>> contactRoles() {
        return Optional.ofNullable(this.contactRoles);
    }

    /**
     * Should the notification be enabled? Defaults to `true`.
     * 
     * &gt; **NOTE:** A `notification` block cannot have all of `contact_emails`, `contact_roles`, and `contact_groups` empty. This means that at least one of the three must be specified.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Should the notification be enabled? Defaults to `true`.
     * 
     * &gt; **NOTE:** A `notification` block cannot have all of `contact_emails`, `contact_roles`, and `contact_groups` empty. This means that at least one of the three must be specified.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The comparison operator for the notification. Must be one of `EqualTo`, `GreaterThan`, or `GreaterThanOrEqualTo`.
     * 
     */
    @Import(name="operator", required=true)
    private Output<String> operator;

    /**
     * @return The comparison operator for the notification. Must be one of `EqualTo`, `GreaterThan`, or `GreaterThanOrEqualTo`.
     * 
     */
    public Output<String> operator() {
        return this.operator;
    }

    /**
     * Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.
     * 
     */
    @Import(name="threshold", required=true)
    private Output<Integer> threshold;

    /**
     * @return Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.
     * 
     */
    public Output<Integer> threshold() {
        return this.threshold;
    }

    /**
     * The type of threshold for the notification. This determines whether the notification is triggered by forecasted costs or actual costs. The allowed values are `Actual` and `Forecasted`. Default is `Actual`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="thresholdType")
    private @Nullable Output<String> thresholdType;

    /**
     * @return The type of threshold for the notification. This determines whether the notification is triggered by forecasted costs or actual costs. The allowed values are `Actual` and `Forecasted`. Default is `Actual`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> thresholdType() {
        return Optional.ofNullable(this.thresholdType);
    }

    private BudgetResourceGroupNotificationArgs() {}

    private BudgetResourceGroupNotificationArgs(BudgetResourceGroupNotificationArgs $) {
        this.contactEmails = $.contactEmails;
        this.contactGroups = $.contactGroups;
        this.contactRoles = $.contactRoles;
        this.enabled = $.enabled;
        this.operator = $.operator;
        this.threshold = $.threshold;
        this.thresholdType = $.thresholdType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BudgetResourceGroupNotificationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BudgetResourceGroupNotificationArgs $;

        public Builder() {
            $ = new BudgetResourceGroupNotificationArgs();
        }

        public Builder(BudgetResourceGroupNotificationArgs defaults) {
            $ = new BudgetResourceGroupNotificationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contactEmails Specifies a list of email addresses to send the budget notification to when the threshold is exceeded.
         * 
         * @return builder
         * 
         */
        public Builder contactEmails(@Nullable Output<List<String>> contactEmails) {
            $.contactEmails = contactEmails;
            return this;
        }

        /**
         * @param contactEmails Specifies a list of email addresses to send the budget notification to when the threshold is exceeded.
         * 
         * @return builder
         * 
         */
        public Builder contactEmails(List<String> contactEmails) {
            return contactEmails(Output.of(contactEmails));
        }

        /**
         * @param contactEmails Specifies a list of email addresses to send the budget notification to when the threshold is exceeded.
         * 
         * @return builder
         * 
         */
        public Builder contactEmails(String... contactEmails) {
            return contactEmails(List.of(contactEmails));
        }

        /**
         * @param contactGroups Specifies a list of Action Group IDs to send the budget notification to when the threshold is exceeded.
         * 
         * @return builder
         * 
         */
        public Builder contactGroups(@Nullable Output<List<String>> contactGroups) {
            $.contactGroups = contactGroups;
            return this;
        }

        /**
         * @param contactGroups Specifies a list of Action Group IDs to send the budget notification to when the threshold is exceeded.
         * 
         * @return builder
         * 
         */
        public Builder contactGroups(List<String> contactGroups) {
            return contactGroups(Output.of(contactGroups));
        }

        /**
         * @param contactGroups Specifies a list of Action Group IDs to send the budget notification to when the threshold is exceeded.
         * 
         * @return builder
         * 
         */
        public Builder contactGroups(String... contactGroups) {
            return contactGroups(List.of(contactGroups));
        }

        /**
         * @param contactRoles Specifies a list of contact roles to send the budget notification to when the threshold is exceeded.
         * 
         * @return builder
         * 
         */
        public Builder contactRoles(@Nullable Output<List<String>> contactRoles) {
            $.contactRoles = contactRoles;
            return this;
        }

        /**
         * @param contactRoles Specifies a list of contact roles to send the budget notification to when the threshold is exceeded.
         * 
         * @return builder
         * 
         */
        public Builder contactRoles(List<String> contactRoles) {
            return contactRoles(Output.of(contactRoles));
        }

        /**
         * @param contactRoles Specifies a list of contact roles to send the budget notification to when the threshold is exceeded.
         * 
         * @return builder
         * 
         */
        public Builder contactRoles(String... contactRoles) {
            return contactRoles(List.of(contactRoles));
        }

        /**
         * @param enabled Should the notification be enabled? Defaults to `true`.
         * 
         * &gt; **NOTE:** A `notification` block cannot have all of `contact_emails`, `contact_roles`, and `contact_groups` empty. This means that at least one of the three must be specified.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Should the notification be enabled? Defaults to `true`.
         * 
         * &gt; **NOTE:** A `notification` block cannot have all of `contact_emails`, `contact_roles`, and `contact_groups` empty. This means that at least one of the three must be specified.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param operator The comparison operator for the notification. Must be one of `EqualTo`, `GreaterThan`, or `GreaterThanOrEqualTo`.
         * 
         * @return builder
         * 
         */
        public Builder operator(Output<String> operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param operator The comparison operator for the notification. Must be one of `EqualTo`, `GreaterThan`, or `GreaterThanOrEqualTo`.
         * 
         * @return builder
         * 
         */
        public Builder operator(String operator) {
            return operator(Output.of(operator));
        }

        /**
         * @param threshold Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Output<Integer> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Integer threshold) {
            return threshold(Output.of(threshold));
        }

        /**
         * @param thresholdType The type of threshold for the notification. This determines whether the notification is triggered by forecasted costs or actual costs. The allowed values are `Actual` and `Forecasted`. Default is `Actual`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder thresholdType(@Nullable Output<String> thresholdType) {
            $.thresholdType = thresholdType;
            return this;
        }

        /**
         * @param thresholdType The type of threshold for the notification. This determines whether the notification is triggered by forecasted costs or actual costs. The allowed values are `Actual` and `Forecasted`. Default is `Actual`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder thresholdType(String thresholdType) {
            return thresholdType(Output.of(thresholdType));
        }

        public BudgetResourceGroupNotificationArgs build() {
            if ($.operator == null) {
                throw new MissingRequiredPropertyException("BudgetResourceGroupNotificationArgs", "operator");
            }
            if ($.threshold == null) {
                throw new MissingRequiredPropertyException("BudgetResourceGroupNotificationArgs", "threshold");
            }
            return $;
        }
    }

}
