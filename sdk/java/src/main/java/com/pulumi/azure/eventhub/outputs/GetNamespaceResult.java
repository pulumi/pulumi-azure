// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.eventhub.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetNamespaceResult {
    /**
     * @return Is Auto Inflate enabled for the EventHub Namespace?
     * 
     */
    private Boolean autoInflateEnabled;
    /**
     * @return The Capacity / Throughput Units for a `Standard` SKU namespace.
     * 
     */
    private Integer capacity;
    /**
     * @return The ID of the EventHub Dedicated Cluster where this Namespace exists.
     * 
     */
    private String dedicatedClusterId;
    /**
     * @return The primary connection string for the authorization
     * rule `RootManageSharedAccessKey`.
     * 
     */
    private String defaultPrimaryConnectionString;
    /**
     * @return The alias of the primary connection string for the authorization
     * rule `RootManageSharedAccessKey`.
     * 
     */
    private String defaultPrimaryConnectionStringAlias;
    /**
     * @return The primary access key for the authorization rule `RootManageSharedAccessKey`.
     * 
     */
    private String defaultPrimaryKey;
    /**
     * @return The secondary connection string for the
     * authorization rule `RootManageSharedAccessKey`.
     * 
     */
    private String defaultSecondaryConnectionString;
    /**
     * @return The alias of the secondary connection string for the
     * authorization rule `RootManageSharedAccessKey`.
     * 
     */
    private String defaultSecondaryConnectionStringAlias;
    /**
     * @return The secondary access key for the authorization rule `RootManageSharedAccessKey`.
     * 
     */
    private String defaultSecondaryKey;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Boolean kafkaEnabled;
    /**
     * @return The Azure location where the EventHub Namespace exists
     * 
     */
    private String location;
    /**
     * @return Specifies the maximum number of throughput units when Auto Inflate is Enabled.
     * 
     */
    private Integer maximumThroughputUnits;
    private String name;
    private String resourceGroupName;
    /**
     * @return Defines which tier to use.
     * 
     */
    private String sku;
    /**
     * @return A mapping of tags to assign to the EventHub Namespace.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return Is this EventHub Namespace deployed across Availability Zones?
     * 
     */
    private Boolean zoneRedundant;

    private GetNamespaceResult() {}
    /**
     * @return Is Auto Inflate enabled for the EventHub Namespace?
     * 
     */
    public Boolean autoInflateEnabled() {
        return this.autoInflateEnabled;
    }
    /**
     * @return The Capacity / Throughput Units for a `Standard` SKU namespace.
     * 
     */
    public Integer capacity() {
        return this.capacity;
    }
    /**
     * @return The ID of the EventHub Dedicated Cluster where this Namespace exists.
     * 
     */
    public String dedicatedClusterId() {
        return this.dedicatedClusterId;
    }
    /**
     * @return The primary connection string for the authorization
     * rule `RootManageSharedAccessKey`.
     * 
     */
    public String defaultPrimaryConnectionString() {
        return this.defaultPrimaryConnectionString;
    }
    /**
     * @return The alias of the primary connection string for the authorization
     * rule `RootManageSharedAccessKey`.
     * 
     */
    public String defaultPrimaryConnectionStringAlias() {
        return this.defaultPrimaryConnectionStringAlias;
    }
    /**
     * @return The primary access key for the authorization rule `RootManageSharedAccessKey`.
     * 
     */
    public String defaultPrimaryKey() {
        return this.defaultPrimaryKey;
    }
    /**
     * @return The secondary connection string for the
     * authorization rule `RootManageSharedAccessKey`.
     * 
     */
    public String defaultSecondaryConnectionString() {
        return this.defaultSecondaryConnectionString;
    }
    /**
     * @return The alias of the secondary connection string for the
     * authorization rule `RootManageSharedAccessKey`.
     * 
     */
    public String defaultSecondaryConnectionStringAlias() {
        return this.defaultSecondaryConnectionStringAlias;
    }
    /**
     * @return The secondary access key for the authorization rule `RootManageSharedAccessKey`.
     * 
     */
    public String defaultSecondaryKey() {
        return this.defaultSecondaryKey;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Boolean kafkaEnabled() {
        return this.kafkaEnabled;
    }
    /**
     * @return The Azure location where the EventHub Namespace exists
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Specifies the maximum number of throughput units when Auto Inflate is Enabled.
     * 
     */
    public Integer maximumThroughputUnits() {
        return this.maximumThroughputUnits;
    }
    public String name() {
        return this.name;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return Defines which tier to use.
     * 
     */
    public String sku() {
        return this.sku;
    }
    /**
     * @return A mapping of tags to assign to the EventHub Namespace.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return Is this EventHub Namespace deployed across Availability Zones?
     * 
     */
    public Boolean zoneRedundant() {
        return this.zoneRedundant;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNamespaceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean autoInflateEnabled;
        private Integer capacity;
        private String dedicatedClusterId;
        private String defaultPrimaryConnectionString;
        private String defaultPrimaryConnectionStringAlias;
        private String defaultPrimaryKey;
        private String defaultSecondaryConnectionString;
        private String defaultSecondaryConnectionStringAlias;
        private String defaultSecondaryKey;
        private String id;
        private Boolean kafkaEnabled;
        private String location;
        private Integer maximumThroughputUnits;
        private String name;
        private String resourceGroupName;
        private String sku;
        private Map<String,String> tags;
        private Boolean zoneRedundant;
        public Builder() {}
        public Builder(GetNamespaceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoInflateEnabled = defaults.autoInflateEnabled;
    	      this.capacity = defaults.capacity;
    	      this.dedicatedClusterId = defaults.dedicatedClusterId;
    	      this.defaultPrimaryConnectionString = defaults.defaultPrimaryConnectionString;
    	      this.defaultPrimaryConnectionStringAlias = defaults.defaultPrimaryConnectionStringAlias;
    	      this.defaultPrimaryKey = defaults.defaultPrimaryKey;
    	      this.defaultSecondaryConnectionString = defaults.defaultSecondaryConnectionString;
    	      this.defaultSecondaryConnectionStringAlias = defaults.defaultSecondaryConnectionStringAlias;
    	      this.defaultSecondaryKey = defaults.defaultSecondaryKey;
    	      this.id = defaults.id;
    	      this.kafkaEnabled = defaults.kafkaEnabled;
    	      this.location = defaults.location;
    	      this.maximumThroughputUnits = defaults.maximumThroughputUnits;
    	      this.name = defaults.name;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
    	      this.zoneRedundant = defaults.zoneRedundant;
        }

        @CustomType.Setter
        public Builder autoInflateEnabled(Boolean autoInflateEnabled) {
            this.autoInflateEnabled = Objects.requireNonNull(autoInflateEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder capacity(Integer capacity) {
            this.capacity = Objects.requireNonNull(capacity);
            return this;
        }
        @CustomType.Setter
        public Builder dedicatedClusterId(String dedicatedClusterId) {
            this.dedicatedClusterId = Objects.requireNonNull(dedicatedClusterId);
            return this;
        }
        @CustomType.Setter
        public Builder defaultPrimaryConnectionString(String defaultPrimaryConnectionString) {
            this.defaultPrimaryConnectionString = Objects.requireNonNull(defaultPrimaryConnectionString);
            return this;
        }
        @CustomType.Setter
        public Builder defaultPrimaryConnectionStringAlias(String defaultPrimaryConnectionStringAlias) {
            this.defaultPrimaryConnectionStringAlias = Objects.requireNonNull(defaultPrimaryConnectionStringAlias);
            return this;
        }
        @CustomType.Setter
        public Builder defaultPrimaryKey(String defaultPrimaryKey) {
            this.defaultPrimaryKey = Objects.requireNonNull(defaultPrimaryKey);
            return this;
        }
        @CustomType.Setter
        public Builder defaultSecondaryConnectionString(String defaultSecondaryConnectionString) {
            this.defaultSecondaryConnectionString = Objects.requireNonNull(defaultSecondaryConnectionString);
            return this;
        }
        @CustomType.Setter
        public Builder defaultSecondaryConnectionStringAlias(String defaultSecondaryConnectionStringAlias) {
            this.defaultSecondaryConnectionStringAlias = Objects.requireNonNull(defaultSecondaryConnectionStringAlias);
            return this;
        }
        @CustomType.Setter
        public Builder defaultSecondaryKey(String defaultSecondaryKey) {
            this.defaultSecondaryKey = Objects.requireNonNull(defaultSecondaryKey);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder kafkaEnabled(Boolean kafkaEnabled) {
            this.kafkaEnabled = Objects.requireNonNull(kafkaEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder maximumThroughputUnits(Integer maximumThroughputUnits) {
            this.maximumThroughputUnits = Objects.requireNonNull(maximumThroughputUnits);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        @CustomType.Setter
        public Builder sku(String sku) {
            this.sku = Objects.requireNonNull(sku);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder zoneRedundant(Boolean zoneRedundant) {
            this.zoneRedundant = Objects.requireNonNull(zoneRedundant);
            return this;
        }
        public GetNamespaceResult build() {
            final var o = new GetNamespaceResult();
            o.autoInflateEnabled = autoInflateEnabled;
            o.capacity = capacity;
            o.dedicatedClusterId = dedicatedClusterId;
            o.defaultPrimaryConnectionString = defaultPrimaryConnectionString;
            o.defaultPrimaryConnectionStringAlias = defaultPrimaryConnectionStringAlias;
            o.defaultPrimaryKey = defaultPrimaryKey;
            o.defaultSecondaryConnectionString = defaultSecondaryConnectionString;
            o.defaultSecondaryConnectionStringAlias = defaultSecondaryConnectionStringAlias;
            o.defaultSecondaryKey = defaultSecondaryKey;
            o.id = id;
            o.kafkaEnabled = kafkaEnabled;
            o.location = location;
            o.maximumThroughputUnits = maximumThroughputUnits;
            o.name = name;
            o.resourceGroupName = resourceGroupName;
            o.sku = sku;
            o.tags = tags;
            o.zoneRedundant = zoneRedundant;
            return o;
        }
    }
}
