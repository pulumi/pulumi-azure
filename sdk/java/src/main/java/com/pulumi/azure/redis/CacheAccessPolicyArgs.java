// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.redis;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CacheAccessPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final CacheAccessPolicyArgs Empty = new CacheAccessPolicyArgs();

    /**
     * The name of the Redis Cache Access Policy. Changing this forces a new Redis Cache Access Policy to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Redis Cache Access Policy. Changing this forces a new Redis Cache Access Policy to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Permissions that are going to be assigned to this Redis Cache Access Policy. Changing this forces a new Redis Cache Access Policy to be created.
     * 
     */
    @Import(name="permissions", required=true)
    private Output<String> permissions;

    /**
     * @return Permissions that are going to be assigned to this Redis Cache Access Policy. Changing this forces a new Redis Cache Access Policy to be created.
     * 
     */
    public Output<String> permissions() {
        return this.permissions;
    }

    /**
     * The ID of the Redis Cache. Changing this forces a new Redis Cache Access Policy to be created.
     * 
     */
    @Import(name="redisCacheId", required=true)
    private Output<String> redisCacheId;

    /**
     * @return The ID of the Redis Cache. Changing this forces a new Redis Cache Access Policy to be created.
     * 
     */
    public Output<String> redisCacheId() {
        return this.redisCacheId;
    }

    private CacheAccessPolicyArgs() {}

    private CacheAccessPolicyArgs(CacheAccessPolicyArgs $) {
        this.name = $.name;
        this.permissions = $.permissions;
        this.redisCacheId = $.redisCacheId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CacheAccessPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CacheAccessPolicyArgs $;

        public Builder() {
            $ = new CacheAccessPolicyArgs();
        }

        public Builder(CacheAccessPolicyArgs defaults) {
            $ = new CacheAccessPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name The name of the Redis Cache Access Policy. Changing this forces a new Redis Cache Access Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Redis Cache Access Policy. Changing this forces a new Redis Cache Access Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param permissions Permissions that are going to be assigned to this Redis Cache Access Policy. Changing this forces a new Redis Cache Access Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder permissions(Output<String> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions Permissions that are going to be assigned to this Redis Cache Access Policy. Changing this forces a new Redis Cache Access Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder permissions(String permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param redisCacheId The ID of the Redis Cache. Changing this forces a new Redis Cache Access Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder redisCacheId(Output<String> redisCacheId) {
            $.redisCacheId = redisCacheId;
            return this;
        }

        /**
         * @param redisCacheId The ID of the Redis Cache. Changing this forces a new Redis Cache Access Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder redisCacheId(String redisCacheId) {
            return redisCacheId(Output.of(redisCacheId));
        }

        public CacheAccessPolicyArgs build() {
            if ($.permissions == null) {
                throw new MissingRequiredPropertyException("CacheAccessPolicyArgs", "permissions");
            }
            if ($.redisCacheId == null) {
                throw new MissingRequiredPropertyException("CacheAccessPolicyArgs", "redisCacheId");
            }
            return $;
        }
    }

}
