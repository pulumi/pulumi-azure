// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appplatform;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.appplatform.SpringCloudAppCosmosDBAssociationArgs;
import com.pulumi.azure.appplatform.inputs.SpringCloudAppCosmosDBAssociationState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Associates a Spring Cloud Application with a CosmosDB Account.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.appplatform.SpringCloudService;
 * import com.pulumi.azure.appplatform.SpringCloudServiceArgs;
 * import com.pulumi.azure.appplatform.SpringCloudApp;
 * import com.pulumi.azure.appplatform.SpringCloudAppArgs;
 * import com.pulumi.azure.cosmosdb.Account;
 * import com.pulumi.azure.cosmosdb.AccountArgs;
 * import com.pulumi.azure.cosmosdb.inputs.AccountConsistencyPolicyArgs;
 * import com.pulumi.azure.cosmosdb.inputs.AccountGeoLocationArgs;
 * import com.pulumi.azure.appplatform.SpringCloudAppCosmosDBAssociation;
 * import com.pulumi.azure.appplatform.SpringCloudAppCosmosDBAssociationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var exampleSpringCloudService = new SpringCloudService(&#34;exampleSpringCloudService&#34;, SpringCloudServiceArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .build());
 * 
 *         var exampleSpringCloudApp = new SpringCloudApp(&#34;exampleSpringCloudApp&#34;, SpringCloudAppArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .serviceName(exampleSpringCloudService.name())
 *             .build());
 * 
 *         var exampleAccount = new Account(&#34;exampleAccount&#34;, AccountArgs.builder()        
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .offerType(&#34;Standard&#34;)
 *             .kind(&#34;GlobalDocumentDB&#34;)
 *             .consistencyPolicy(AccountConsistencyPolicyArgs.builder()
 *                 .consistencyLevel(&#34;Strong&#34;)
 *                 .build())
 *             .geoLocations(AccountGeoLocationArgs.builder()
 *                 .location(exampleResourceGroup.location())
 *                 .failoverPriority(0)
 *                 .build())
 *             .build());
 * 
 *         var exampleSpringCloudAppCosmosDBAssociation = new SpringCloudAppCosmosDBAssociation(&#34;exampleSpringCloudAppCosmosDBAssociation&#34;, SpringCloudAppCosmosDBAssociationArgs.builder()        
 *             .springCloudAppId(exampleSpringCloudApp.id())
 *             .cosmosdbAccountId(exampleAccount.id())
 *             .apiType(&#34;table&#34;)
 *             .cosmosdbAccessKey(exampleAccount.primaryKey())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Spring Cloud Application CosmosDB Association can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:appplatform/springCloudAppCosmosDBAssociation:SpringCloudAppCosmosDBAssociation example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourcegroup1/providers/Microsoft.AppPlatform/spring/service1/apps/app1/bindings/bind1
 * ```
 * 
 */
@ResourceType(type="azure:appplatform/springCloudAppCosmosDBAssociation:SpringCloudAppCosmosDBAssociation")
public class SpringCloudAppCosmosDBAssociation extends com.pulumi.resources.CustomResource {
    /**
     * Specifies the API type which should be used when connecting to the CosmosDB Account. Possible values are `cassandra`, `gremlin`, `mongo`, `sql` or `table`. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="apiType", type=String.class, parameters={})
    private Output<String> apiType;

    /**
     * @return Specifies the API type which should be used when connecting to the CosmosDB Account. Possible values are `cassandra`, `gremlin`, `mongo`, `sql` or `table`. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> apiType() {
        return this.apiType;
    }
    /**
     * Specifies the CosmosDB Account access key.
     * 
     */
    @Export(name="cosmosdbAccessKey", type=String.class, parameters={})
    private Output<String> cosmosdbAccessKey;

    /**
     * @return Specifies the CosmosDB Account access key.
     * 
     */
    public Output<String> cosmosdbAccessKey() {
        return this.cosmosdbAccessKey;
    }
    /**
     * Specifies the ID of the CosmosDB Account. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="cosmosdbAccountId", type=String.class, parameters={})
    private Output<String> cosmosdbAccountId;

    /**
     * @return Specifies the ID of the CosmosDB Account. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> cosmosdbAccountId() {
        return this.cosmosdbAccountId;
    }
    /**
     * Specifies the name of the Cassandra Keyspace which the Spring Cloud App should be associated with. Should only be set when `api_type` is `cassandra`.
     * 
     */
    @Export(name="cosmosdbCassandraKeyspaceName", type=String.class, parameters={})
    private Output</* @Nullable */ String> cosmosdbCassandraKeyspaceName;

    /**
     * @return Specifies the name of the Cassandra Keyspace which the Spring Cloud App should be associated with. Should only be set when `api_type` is `cassandra`.
     * 
     */
    public Output<Optional<String>> cosmosdbCassandraKeyspaceName() {
        return Codegen.optional(this.cosmosdbCassandraKeyspaceName);
    }
    /**
     * Specifies the name of the Gremlin Database which the Spring Cloud App should be associated with. Should only be set when `api_type` is `gremlin`.
     * 
     */
    @Export(name="cosmosdbGremlinDatabaseName", type=String.class, parameters={})
    private Output</* @Nullable */ String> cosmosdbGremlinDatabaseName;

    /**
     * @return Specifies the name of the Gremlin Database which the Spring Cloud App should be associated with. Should only be set when `api_type` is `gremlin`.
     * 
     */
    public Output<Optional<String>> cosmosdbGremlinDatabaseName() {
        return Codegen.optional(this.cosmosdbGremlinDatabaseName);
    }
    /**
     * Specifies the name of the Gremlin Graph which the Spring Cloud App should be associated with. Should only be set when `api_type` is `gremlin`.
     * 
     */
    @Export(name="cosmosdbGremlinGraphName", type=String.class, parameters={})
    private Output</* @Nullable */ String> cosmosdbGremlinGraphName;

    /**
     * @return Specifies the name of the Gremlin Graph which the Spring Cloud App should be associated with. Should only be set when `api_type` is `gremlin`.
     * 
     */
    public Output<Optional<String>> cosmosdbGremlinGraphName() {
        return Codegen.optional(this.cosmosdbGremlinGraphName);
    }
    /**
     * Specifies the name of the Mongo Database which the Spring Cloud App should be associated with. Should only be set when `api_type` is `mongo`.
     * 
     */
    @Export(name="cosmosdbMongoDatabaseName", type=String.class, parameters={})
    private Output</* @Nullable */ String> cosmosdbMongoDatabaseName;

    /**
     * @return Specifies the name of the Mongo Database which the Spring Cloud App should be associated with. Should only be set when `api_type` is `mongo`.
     * 
     */
    public Output<Optional<String>> cosmosdbMongoDatabaseName() {
        return Codegen.optional(this.cosmosdbMongoDatabaseName);
    }
    /**
     * Specifies the name of the SQL Database which the Spring Cloud App should be associated with. Should only be set when `api_type` is `sql`.
     * 
     */
    @Export(name="cosmosdbSqlDatabaseName", type=String.class, parameters={})
    private Output</* @Nullable */ String> cosmosdbSqlDatabaseName;

    /**
     * @return Specifies the name of the SQL Database which the Spring Cloud App should be associated with. Should only be set when `api_type` is `sql`.
     * 
     */
    public Output<Optional<String>> cosmosdbSqlDatabaseName() {
        return Codegen.optional(this.cosmosdbSqlDatabaseName);
    }
    /**
     * Specifies the name of the Spring Cloud Application Association. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Specifies the name of the Spring Cloud Application Association. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Specifies the ID of the Spring Cloud Application where this Association is created. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="springCloudAppId", type=String.class, parameters={})
    private Output<String> springCloudAppId;

    /**
     * @return Specifies the ID of the Spring Cloud Application where this Association is created. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> springCloudAppId() {
        return this.springCloudAppId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SpringCloudAppCosmosDBAssociation(String name) {
        this(name, SpringCloudAppCosmosDBAssociationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SpringCloudAppCosmosDBAssociation(String name, SpringCloudAppCosmosDBAssociationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SpringCloudAppCosmosDBAssociation(String name, SpringCloudAppCosmosDBAssociationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:appplatform/springCloudAppCosmosDBAssociation:SpringCloudAppCosmosDBAssociation", name, args == null ? SpringCloudAppCosmosDBAssociationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SpringCloudAppCosmosDBAssociation(String name, Output<String> id, @Nullable SpringCloudAppCosmosDBAssociationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:appplatform/springCloudAppCosmosDBAssociation:SpringCloudAppCosmosDBAssociation", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SpringCloudAppCosmosDBAssociation get(String name, Output<String> id, @Nullable SpringCloudAppCosmosDBAssociationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SpringCloudAppCosmosDBAssociation(name, id, state, options);
    }
}
