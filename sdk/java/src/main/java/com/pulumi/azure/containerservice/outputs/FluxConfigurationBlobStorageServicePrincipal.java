// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FluxConfigurationBlobStorageServicePrincipal {
    /**
     * @return Base64-encoded certificate used to authenticate a Service Principal .
     * 
     */
    private @Nullable String clientCertificateBase64;
    /**
     * @return Specifies the password for the certificate used to authenticate a Service Principal .
     * 
     */
    private @Nullable String clientCertificatePassword;
    /**
     * @return Specifies whether to include x5c header in client claims when acquiring a token to enable subject name / issuer based authentication for the client certificate.
     * 
     */
    private @Nullable Boolean clientCertificateSendChain;
    /**
     * @return Specifies the client ID for authenticating a Service Principal.
     * 
     */
    private String clientId;
    /**
     * @return Specifies the client secret for authenticating a Service Principal.
     * 
     */
    private @Nullable String clientSecret;
    /**
     * @return Specifies the tenant ID for authenticating a Service Principal.
     * 
     */
    private String tenantId;

    private FluxConfigurationBlobStorageServicePrincipal() {}
    /**
     * @return Base64-encoded certificate used to authenticate a Service Principal .
     * 
     */
    public Optional<String> clientCertificateBase64() {
        return Optional.ofNullable(this.clientCertificateBase64);
    }
    /**
     * @return Specifies the password for the certificate used to authenticate a Service Principal .
     * 
     */
    public Optional<String> clientCertificatePassword() {
        return Optional.ofNullable(this.clientCertificatePassword);
    }
    /**
     * @return Specifies whether to include x5c header in client claims when acquiring a token to enable subject name / issuer based authentication for the client certificate.
     * 
     */
    public Optional<Boolean> clientCertificateSendChain() {
        return Optional.ofNullable(this.clientCertificateSendChain);
    }
    /**
     * @return Specifies the client ID for authenticating a Service Principal.
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return Specifies the client secret for authenticating a Service Principal.
     * 
     */
    public Optional<String> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }
    /**
     * @return Specifies the tenant ID for authenticating a Service Principal.
     * 
     */
    public String tenantId() {
        return this.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FluxConfigurationBlobStorageServicePrincipal defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String clientCertificateBase64;
        private @Nullable String clientCertificatePassword;
        private @Nullable Boolean clientCertificateSendChain;
        private String clientId;
        private @Nullable String clientSecret;
        private String tenantId;
        public Builder() {}
        public Builder(FluxConfigurationBlobStorageServicePrincipal defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientCertificateBase64 = defaults.clientCertificateBase64;
    	      this.clientCertificatePassword = defaults.clientCertificatePassword;
    	      this.clientCertificateSendChain = defaults.clientCertificateSendChain;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.tenantId = defaults.tenantId;
        }

        @CustomType.Setter
        public Builder clientCertificateBase64(@Nullable String clientCertificateBase64) {

            this.clientCertificateBase64 = clientCertificateBase64;
            return this;
        }
        @CustomType.Setter
        public Builder clientCertificatePassword(@Nullable String clientCertificatePassword) {

            this.clientCertificatePassword = clientCertificatePassword;
            return this;
        }
        @CustomType.Setter
        public Builder clientCertificateSendChain(@Nullable Boolean clientCertificateSendChain) {

            this.clientCertificateSendChain = clientCertificateSendChain;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("FluxConfigurationBlobStorageServicePrincipal", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(@Nullable String clientSecret) {

            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder tenantId(String tenantId) {
            if (tenantId == null) {
              throw new MissingRequiredPropertyException("FluxConfigurationBlobStorageServicePrincipal", "tenantId");
            }
            this.tenantId = tenantId;
            return this;
        }
        public FluxConfigurationBlobStorageServicePrincipal build() {
            final var _resultValue = new FluxConfigurationBlobStorageServicePrincipal();
            _resultValue.clientCertificateBase64 = clientCertificateBase64;
            _resultValue.clientCertificatePassword = clientCertificatePassword;
            _resultValue.clientCertificateSendChain = clientCertificateSendChain;
            _resultValue.clientId = clientId;
            _resultValue.clientSecret = clientSecret;
            _resultValue.tenantId = tenantId;
            return _resultValue;
        }
    }
}
