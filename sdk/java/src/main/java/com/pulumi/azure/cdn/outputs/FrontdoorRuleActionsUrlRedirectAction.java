// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cdn.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FrontdoorRuleActionsUrlRedirectAction {
    /**
     * @return The fragment to use in the redirect. Leave blank to preserve the incoming fragment.
     * 
     */
    private @Nullable String destinationFragment;
    /**
     * @return The host name you want the request to be redirected to. Leave blank to preserve the incoming host.
     * 
     */
    private String destinationHostname;
    /**
     * @return The path to use in the redirect. Include the leading `/`. Leave blank to preserve the incoming path.
     * 
     */
    private @Nullable String destinationPath;
    /**
     * @return The query string used in the redirect URL. Don&#39;t include the leading `?`. Leave blank to preserve the incoming query string.
     * 
     */
    private @Nullable String queryString;
    /**
     * @return The protocol the request will be redirected as. Possible values include `MatchRequest`, `Http` or `Https`. Defaults to `MatchRequest`.
     * 
     */
    private @Nullable String redirectProtocol;
    /**
     * @return The response type to return to the requestor. Possible values include `Moved`, `Found` , `TemporaryRedirect` or `PermanentRedirect`.
     * 
     */
    private String redirectType;

    private FrontdoorRuleActionsUrlRedirectAction() {}
    /**
     * @return The fragment to use in the redirect. Leave blank to preserve the incoming fragment.
     * 
     */
    public Optional<String> destinationFragment() {
        return Optional.ofNullable(this.destinationFragment);
    }
    /**
     * @return The host name you want the request to be redirected to. Leave blank to preserve the incoming host.
     * 
     */
    public String destinationHostname() {
        return this.destinationHostname;
    }
    /**
     * @return The path to use in the redirect. Include the leading `/`. Leave blank to preserve the incoming path.
     * 
     */
    public Optional<String> destinationPath() {
        return Optional.ofNullable(this.destinationPath);
    }
    /**
     * @return The query string used in the redirect URL. Don&#39;t include the leading `?`. Leave blank to preserve the incoming query string.
     * 
     */
    public Optional<String> queryString() {
        return Optional.ofNullable(this.queryString);
    }
    /**
     * @return The protocol the request will be redirected as. Possible values include `MatchRequest`, `Http` or `Https`. Defaults to `MatchRequest`.
     * 
     */
    public Optional<String> redirectProtocol() {
        return Optional.ofNullable(this.redirectProtocol);
    }
    /**
     * @return The response type to return to the requestor. Possible values include `Moved`, `Found` , `TemporaryRedirect` or `PermanentRedirect`.
     * 
     */
    public String redirectType() {
        return this.redirectType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FrontdoorRuleActionsUrlRedirectAction defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String destinationFragment;
        private String destinationHostname;
        private @Nullable String destinationPath;
        private @Nullable String queryString;
        private @Nullable String redirectProtocol;
        private String redirectType;
        public Builder() {}
        public Builder(FrontdoorRuleActionsUrlRedirectAction defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destinationFragment = defaults.destinationFragment;
    	      this.destinationHostname = defaults.destinationHostname;
    	      this.destinationPath = defaults.destinationPath;
    	      this.queryString = defaults.queryString;
    	      this.redirectProtocol = defaults.redirectProtocol;
    	      this.redirectType = defaults.redirectType;
        }

        @CustomType.Setter
        public Builder destinationFragment(@Nullable String destinationFragment) {
            this.destinationFragment = destinationFragment;
            return this;
        }
        @CustomType.Setter
        public Builder destinationHostname(String destinationHostname) {
            this.destinationHostname = Objects.requireNonNull(destinationHostname);
            return this;
        }
        @CustomType.Setter
        public Builder destinationPath(@Nullable String destinationPath) {
            this.destinationPath = destinationPath;
            return this;
        }
        @CustomType.Setter
        public Builder queryString(@Nullable String queryString) {
            this.queryString = queryString;
            return this;
        }
        @CustomType.Setter
        public Builder redirectProtocol(@Nullable String redirectProtocol) {
            this.redirectProtocol = redirectProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder redirectType(String redirectType) {
            this.redirectType = Objects.requireNonNull(redirectType);
            return this;
        }
        public FrontdoorRuleActionsUrlRedirectAction build() {
            final var o = new FrontdoorRuleActionsUrlRedirectAction();
            o.destinationFragment = destinationFragment;
            o.destinationHostname = destinationHostname;
            o.destinationPath = destinationPath;
            o.queryString = queryString;
            o.redirectProtocol = redirectProtocol;
            o.redirectType = redirectType;
            return o;
        }
    }
}
