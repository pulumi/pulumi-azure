// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.securitycenter.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AssessmentPolicyState extends com.pulumi.resources.ResourceArgs {

    public static final AssessmentPolicyState Empty = new AssessmentPolicyState();

    /**
     * A list of the categories of resource that is at risk when the Security Center Assessment is unhealthy. Possible values are `Unknown`, `Compute`, `Data`, `IdentityAndAccess`, `IoT` and `Networking`.
     * 
     */
    @Import(name="categories")
    private @Nullable Output<List<String>> categories;

    /**
     * @return A list of the categories of resource that is at risk when the Security Center Assessment is unhealthy. Possible values are `Unknown`, `Compute`, `Data`, `IdentityAndAccess`, `IoT` and `Networking`.
     * 
     */
    public Optional<Output<List<String>>> categories() {
        return Optional.ofNullable(this.categories);
    }

    /**
     * The description of the Security Center Assessment.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the Security Center Assessment.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The user-friendly display name of the Security Center Assessment.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The user-friendly display name of the Security Center Assessment.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The implementation effort which is used to remediate the Security Center Assessment. Possible values are `Low`, `Moderate` and `High`.
     * 
     */
    @Import(name="implementationEffort")
    private @Nullable Output<String> implementationEffort;

    /**
     * @return The implementation effort which is used to remediate the Security Center Assessment. Possible values are `Low`, `Moderate` and `High`.
     * 
     */
    public Optional<Output<String>> implementationEffort() {
        return Optional.ofNullable(this.implementationEffort);
    }

    /**
     * The GUID as the name of the Security Center Assessment Policy.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The GUID as the name of the Security Center Assessment Policy.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The description which is used to mitigate the security issue.
     * 
     */
    @Import(name="remediationDescription")
    private @Nullable Output<String> remediationDescription;

    /**
     * @return The description which is used to mitigate the security issue.
     * 
     */
    public Optional<Output<String>> remediationDescription() {
        return Optional.ofNullable(this.remediationDescription);
    }

    /**
     * The severity level of the Security Center Assessment. Possible values are `Low`, `Medium` and `High`. Defaults to `Medium`.
     * 
     */
    @Import(name="severity")
    private @Nullable Output<String> severity;

    /**
     * @return The severity level of the Security Center Assessment. Possible values are `Low`, `Medium` and `High`. Defaults to `Medium`.
     * 
     */
    public Optional<Output<String>> severity() {
        return Optional.ofNullable(this.severity);
    }

    /**
     * A list of the threat impacts for the Security Center Assessment. Possible values are `AccountBreach`, `DataExfiltration`, `DataSpillage`, `DenialOfService`, `ElevationOfPrivilege`, `MaliciousInsider`, `MissingCoverage` and `ThreatResistance`.
     * 
     */
    @Import(name="threats")
    private @Nullable Output<List<String>> threats;

    /**
     * @return A list of the threat impacts for the Security Center Assessment. Possible values are `AccountBreach`, `DataExfiltration`, `DataSpillage`, `DenialOfService`, `ElevationOfPrivilege`, `MaliciousInsider`, `MissingCoverage` and `ThreatResistance`.
     * 
     */
    public Optional<Output<List<String>>> threats() {
        return Optional.ofNullable(this.threats);
    }

    /**
     * The user impact of the Security Center Assessment. Possible values are `Low`, `Moderate` and `High`.
     * 
     */
    @Import(name="userImpact")
    private @Nullable Output<String> userImpact;

    /**
     * @return The user impact of the Security Center Assessment. Possible values are `Low`, `Moderate` and `High`.
     * 
     */
    public Optional<Output<String>> userImpact() {
        return Optional.ofNullable(this.userImpact);
    }

    private AssessmentPolicyState() {}

    private AssessmentPolicyState(AssessmentPolicyState $) {
        this.categories = $.categories;
        this.description = $.description;
        this.displayName = $.displayName;
        this.implementationEffort = $.implementationEffort;
        this.name = $.name;
        this.remediationDescription = $.remediationDescription;
        this.severity = $.severity;
        this.threats = $.threats;
        this.userImpact = $.userImpact;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AssessmentPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AssessmentPolicyState $;

        public Builder() {
            $ = new AssessmentPolicyState();
        }

        public Builder(AssessmentPolicyState defaults) {
            $ = new AssessmentPolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param categories A list of the categories of resource that is at risk when the Security Center Assessment is unhealthy. Possible values are `Unknown`, `Compute`, `Data`, `IdentityAndAccess`, `IoT` and `Networking`.
         * 
         * @return builder
         * 
         */
        public Builder categories(@Nullable Output<List<String>> categories) {
            $.categories = categories;
            return this;
        }

        /**
         * @param categories A list of the categories of resource that is at risk when the Security Center Assessment is unhealthy. Possible values are `Unknown`, `Compute`, `Data`, `IdentityAndAccess`, `IoT` and `Networking`.
         * 
         * @return builder
         * 
         */
        public Builder categories(List<String> categories) {
            return categories(Output.of(categories));
        }

        /**
         * @param categories A list of the categories of resource that is at risk when the Security Center Assessment is unhealthy. Possible values are `Unknown`, `Compute`, `Data`, `IdentityAndAccess`, `IoT` and `Networking`.
         * 
         * @return builder
         * 
         */
        public Builder categories(String... categories) {
            return categories(List.of(categories));
        }

        /**
         * @param description The description of the Security Center Assessment.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the Security Center Assessment.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The user-friendly display name of the Security Center Assessment.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The user-friendly display name of the Security Center Assessment.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param implementationEffort The implementation effort which is used to remediate the Security Center Assessment. Possible values are `Low`, `Moderate` and `High`.
         * 
         * @return builder
         * 
         */
        public Builder implementationEffort(@Nullable Output<String> implementationEffort) {
            $.implementationEffort = implementationEffort;
            return this;
        }

        /**
         * @param implementationEffort The implementation effort which is used to remediate the Security Center Assessment. Possible values are `Low`, `Moderate` and `High`.
         * 
         * @return builder
         * 
         */
        public Builder implementationEffort(String implementationEffort) {
            return implementationEffort(Output.of(implementationEffort));
        }

        /**
         * @param name The GUID as the name of the Security Center Assessment Policy.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The GUID as the name of the Security Center Assessment Policy.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param remediationDescription The description which is used to mitigate the security issue.
         * 
         * @return builder
         * 
         */
        public Builder remediationDescription(@Nullable Output<String> remediationDescription) {
            $.remediationDescription = remediationDescription;
            return this;
        }

        /**
         * @param remediationDescription The description which is used to mitigate the security issue.
         * 
         * @return builder
         * 
         */
        public Builder remediationDescription(String remediationDescription) {
            return remediationDescription(Output.of(remediationDescription));
        }

        /**
         * @param severity The severity level of the Security Center Assessment. Possible values are `Low`, `Medium` and `High`. Defaults to `Medium`.
         * 
         * @return builder
         * 
         */
        public Builder severity(@Nullable Output<String> severity) {
            $.severity = severity;
            return this;
        }

        /**
         * @param severity The severity level of the Security Center Assessment. Possible values are `Low`, `Medium` and `High`. Defaults to `Medium`.
         * 
         * @return builder
         * 
         */
        public Builder severity(String severity) {
            return severity(Output.of(severity));
        }

        /**
         * @param threats A list of the threat impacts for the Security Center Assessment. Possible values are `AccountBreach`, `DataExfiltration`, `DataSpillage`, `DenialOfService`, `ElevationOfPrivilege`, `MaliciousInsider`, `MissingCoverage` and `ThreatResistance`.
         * 
         * @return builder
         * 
         */
        public Builder threats(@Nullable Output<List<String>> threats) {
            $.threats = threats;
            return this;
        }

        /**
         * @param threats A list of the threat impacts for the Security Center Assessment. Possible values are `AccountBreach`, `DataExfiltration`, `DataSpillage`, `DenialOfService`, `ElevationOfPrivilege`, `MaliciousInsider`, `MissingCoverage` and `ThreatResistance`.
         * 
         * @return builder
         * 
         */
        public Builder threats(List<String> threats) {
            return threats(Output.of(threats));
        }

        /**
         * @param threats A list of the threat impacts for the Security Center Assessment. Possible values are `AccountBreach`, `DataExfiltration`, `DataSpillage`, `DenialOfService`, `ElevationOfPrivilege`, `MaliciousInsider`, `MissingCoverage` and `ThreatResistance`.
         * 
         * @return builder
         * 
         */
        public Builder threats(String... threats) {
            return threats(List.of(threats));
        }

        /**
         * @param userImpact The user impact of the Security Center Assessment. Possible values are `Low`, `Moderate` and `High`.
         * 
         * @return builder
         * 
         */
        public Builder userImpact(@Nullable Output<String> userImpact) {
            $.userImpact = userImpact;
            return this;
        }

        /**
         * @param userImpact The user impact of the Security Center Assessment. Possible values are `Low`, `Moderate` and `High`.
         * 
         * @return builder
         * 
         */
        public Builder userImpact(String userImpact) {
            return userImpact(Output.of(userImpact));
        }

        public AssessmentPolicyState build() {
            return $;
        }
    }

}
