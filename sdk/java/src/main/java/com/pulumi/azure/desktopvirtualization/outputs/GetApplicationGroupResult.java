// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.desktopvirtualization.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetApplicationGroupResult {
    /**
     * @return The description of the Application Group.
     * 
     */
    private String description;
    /**
     * @return The friendly name of the Application Group.
     * 
     */
    private String friendlyName;
    /**
     * @return The Virtual Desktop Host Pool ID the Application Group is associated to.
     * 
     */
    private String hostPoolId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The Azure Region where the Application Group exists.
     * 
     */
    private String location;
    private String name;
    private String resourceGroupName;
    /**
     * @return A mapping of tags assigned to the Application Group.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The type of Application Group (`RemoteApp` or `Desktop`).
     * 
     */
    private String type;
    /**
     * @return The Virtual Desktop Workspace ID the Application Group is associated to.
     * 
     */
    private String workspaceId;

    private GetApplicationGroupResult() {}
    /**
     * @return The description of the Application Group.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The friendly name of the Application Group.
     * 
     */
    public String friendlyName() {
        return this.friendlyName;
    }
    /**
     * @return The Virtual Desktop Host Pool ID the Application Group is associated to.
     * 
     */
    public String hostPoolId() {
        return this.hostPoolId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Azure Region where the Application Group exists.
     * 
     */
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return A mapping of tags assigned to the Application Group.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The type of Application Group (`RemoteApp` or `Desktop`).
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The Virtual Desktop Workspace ID the Application Group is associated to.
     * 
     */
    public String workspaceId() {
        return this.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationGroupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private String friendlyName;
        private String hostPoolId;
        private String id;
        private String location;
        private String name;
        private String resourceGroupName;
        private Map<String,String> tags;
        private String type;
        private String workspaceId;
        public Builder() {}
        public Builder(GetApplicationGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.friendlyName = defaults.friendlyName;
    	      this.hostPoolId = defaults.hostPoolId;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.workspaceId = defaults.workspaceId;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetApplicationGroupResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder friendlyName(String friendlyName) {
            if (friendlyName == null) {
              throw new MissingRequiredPropertyException("GetApplicationGroupResult", "friendlyName");
            }
            this.friendlyName = friendlyName;
            return this;
        }
        @CustomType.Setter
        public Builder hostPoolId(String hostPoolId) {
            if (hostPoolId == null) {
              throw new MissingRequiredPropertyException("GetApplicationGroupResult", "hostPoolId");
            }
            this.hostPoolId = hostPoolId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetApplicationGroupResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetApplicationGroupResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetApplicationGroupResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetApplicationGroupResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetApplicationGroupResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetApplicationGroupResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder workspaceId(String workspaceId) {
            if (workspaceId == null) {
              throw new MissingRequiredPropertyException("GetApplicationGroupResult", "workspaceId");
            }
            this.workspaceId = workspaceId;
            return this;
        }
        public GetApplicationGroupResult build() {
            final var _resultValue = new GetApplicationGroupResult();
            _resultValue.description = description;
            _resultValue.friendlyName = friendlyName;
            _resultValue.hostPoolId = hostPoolId;
            _resultValue.id = id;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.tags = tags;
            _resultValue.type = type;
            _resultValue.workspaceId = workspaceId;
            return _resultValue;
        }
    }
}
