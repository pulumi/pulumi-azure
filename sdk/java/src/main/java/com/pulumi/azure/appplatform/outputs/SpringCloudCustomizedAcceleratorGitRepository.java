// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appplatform.outputs;

import com.pulumi.azure.appplatform.outputs.SpringCloudCustomizedAcceleratorGitRepositoryBasicAuth;
import com.pulumi.azure.appplatform.outputs.SpringCloudCustomizedAcceleratorGitRepositorySshAuth;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SpringCloudCustomizedAcceleratorGitRepository {
    /**
     * @return A `basic_auth` block as defined below. Conflicts with `git_repository.0.ssh_auth`. Changing this forces a new Spring Cloud Customized Accelerator to be created.
     * 
     */
    private @Nullable SpringCloudCustomizedAcceleratorGitRepositoryBasicAuth basicAuth;
    /**
     * @return Specifies the Git repository branch to be used.
     * 
     */
    private @Nullable String branch;
    /**
     * @return Specifies the ID of the CA Spring Cloud Certificate for https URL of Git repository.
     * 
     */
    private @Nullable String caCertificateId;
    /**
     * @return Specifies the Git repository commit to be used.
     * 
     */
    private @Nullable String commit;
    /**
     * @return Specifies the Git repository tag to be used.
     * 
     */
    private @Nullable String gitTag;
    /**
     * @return Specifies the interval for checking for updates to Git or image repository. It should be greater than 10.
     * 
     */
    private @Nullable Integer intervalInSeconds;
    /**
     * @return Specifies the path under the git repository to be treated as the root directory of the accelerator or the fragment (depending on `accelerator_type`).
     * 
     */
    private @Nullable String path;
    /**
     * @return A `ssh_auth` block as defined below. Conflicts with `git_repository.0.basic_auth`. Changing this forces a new Spring Cloud Customized Accelerator to be created.
     * 
     */
    private @Nullable SpringCloudCustomizedAcceleratorGitRepositorySshAuth sshAuth;
    /**
     * @return Specifies Git repository URL for the accelerator.
     * 
     */
    private String url;

    private SpringCloudCustomizedAcceleratorGitRepository() {}
    /**
     * @return A `basic_auth` block as defined below. Conflicts with `git_repository.0.ssh_auth`. Changing this forces a new Spring Cloud Customized Accelerator to be created.
     * 
     */
    public Optional<SpringCloudCustomizedAcceleratorGitRepositoryBasicAuth> basicAuth() {
        return Optional.ofNullable(this.basicAuth);
    }
    /**
     * @return Specifies the Git repository branch to be used.
     * 
     */
    public Optional<String> branch() {
        return Optional.ofNullable(this.branch);
    }
    /**
     * @return Specifies the ID of the CA Spring Cloud Certificate for https URL of Git repository.
     * 
     */
    public Optional<String> caCertificateId() {
        return Optional.ofNullable(this.caCertificateId);
    }
    /**
     * @return Specifies the Git repository commit to be used.
     * 
     */
    public Optional<String> commit() {
        return Optional.ofNullable(this.commit);
    }
    /**
     * @return Specifies the Git repository tag to be used.
     * 
     */
    public Optional<String> gitTag() {
        return Optional.ofNullable(this.gitTag);
    }
    /**
     * @return Specifies the interval for checking for updates to Git or image repository. It should be greater than 10.
     * 
     */
    public Optional<Integer> intervalInSeconds() {
        return Optional.ofNullable(this.intervalInSeconds);
    }
    /**
     * @return Specifies the path under the git repository to be treated as the root directory of the accelerator or the fragment (depending on `accelerator_type`).
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return A `ssh_auth` block as defined below. Conflicts with `git_repository.0.basic_auth`. Changing this forces a new Spring Cloud Customized Accelerator to be created.
     * 
     */
    public Optional<SpringCloudCustomizedAcceleratorGitRepositorySshAuth> sshAuth() {
        return Optional.ofNullable(this.sshAuth);
    }
    /**
     * @return Specifies Git repository URL for the accelerator.
     * 
     */
    public String url() {
        return this.url;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SpringCloudCustomizedAcceleratorGitRepository defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable SpringCloudCustomizedAcceleratorGitRepositoryBasicAuth basicAuth;
        private @Nullable String branch;
        private @Nullable String caCertificateId;
        private @Nullable String commit;
        private @Nullable String gitTag;
        private @Nullable Integer intervalInSeconds;
        private @Nullable String path;
        private @Nullable SpringCloudCustomizedAcceleratorGitRepositorySshAuth sshAuth;
        private String url;
        public Builder() {}
        public Builder(SpringCloudCustomizedAcceleratorGitRepository defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.basicAuth = defaults.basicAuth;
    	      this.branch = defaults.branch;
    	      this.caCertificateId = defaults.caCertificateId;
    	      this.commit = defaults.commit;
    	      this.gitTag = defaults.gitTag;
    	      this.intervalInSeconds = defaults.intervalInSeconds;
    	      this.path = defaults.path;
    	      this.sshAuth = defaults.sshAuth;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder basicAuth(@Nullable SpringCloudCustomizedAcceleratorGitRepositoryBasicAuth basicAuth) {

            this.basicAuth = basicAuth;
            return this;
        }
        @CustomType.Setter
        public Builder branch(@Nullable String branch) {

            this.branch = branch;
            return this;
        }
        @CustomType.Setter
        public Builder caCertificateId(@Nullable String caCertificateId) {

            this.caCertificateId = caCertificateId;
            return this;
        }
        @CustomType.Setter
        public Builder commit(@Nullable String commit) {

            this.commit = commit;
            return this;
        }
        @CustomType.Setter
        public Builder gitTag(@Nullable String gitTag) {

            this.gitTag = gitTag;
            return this;
        }
        @CustomType.Setter
        public Builder intervalInSeconds(@Nullable Integer intervalInSeconds) {

            this.intervalInSeconds = intervalInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {

            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder sshAuth(@Nullable SpringCloudCustomizedAcceleratorGitRepositorySshAuth sshAuth) {

            this.sshAuth = sshAuth;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("SpringCloudCustomizedAcceleratorGitRepository", "url");
            }
            this.url = url;
            return this;
        }
        public SpringCloudCustomizedAcceleratorGitRepository build() {
            final var _resultValue = new SpringCloudCustomizedAcceleratorGitRepository();
            _resultValue.basicAuth = basicAuth;
            _resultValue.branch = branch;
            _resultValue.caCertificateId = caCertificateId;
            _resultValue.commit = commit;
            _resultValue.gitTag = gitTag;
            _resultValue.intervalInSeconds = intervalInSeconds;
            _resultValue.path = path;
            _resultValue.sshAuth = sshAuth;
            _resultValue.url = url;
            return _resultValue;
        }
    }
}
