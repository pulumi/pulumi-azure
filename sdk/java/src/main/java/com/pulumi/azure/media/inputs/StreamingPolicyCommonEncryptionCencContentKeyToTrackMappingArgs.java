// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.inputs;

import com.pulumi.azure.media.inputs.StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArgs Empty = new StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArgs();

    /**
     * Specifies the content key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return Specifies the content key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * The policy used by the default key. Changing this forces a new Streaming Policy to be created.
     * 
     */
    @Import(name="policyName")
    private @Nullable Output<String> policyName;

    /**
     * @return The policy used by the default key. Changing this forces a new Streaming Policy to be created.
     * 
     */
    public Optional<Output<String>> policyName() {
        return Optional.ofNullable(this.policyName);
    }

    /**
     * One or more `track` blocks as defined below. Changing this forces a new Streaming Policy to be created.
     * 
     */
    @Import(name="tracks", required=true)
    private Output<List<StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArgs>> tracks;

    /**
     * @return One or more `track` blocks as defined below. Changing this forces a new Streaming Policy to be created.
     * 
     */
    public Output<List<StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArgs>> tracks() {
        return this.tracks;
    }

    private StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArgs() {}

    private StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArgs(StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArgs $) {
        this.label = $.label;
        this.policyName = $.policyName;
        this.tracks = $.tracks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArgs $;

        public Builder() {
            $ = new StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArgs();
        }

        public Builder(StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArgs defaults) {
            $ = new StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param label Specifies the content key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label Specifies the content key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param policyName The policy used by the default key. Changing this forces a new Streaming Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder policyName(@Nullable Output<String> policyName) {
            $.policyName = policyName;
            return this;
        }

        /**
         * @param policyName The policy used by the default key. Changing this forces a new Streaming Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder policyName(String policyName) {
            return policyName(Output.of(policyName));
        }

        /**
         * @param tracks One or more `track` blocks as defined below. Changing this forces a new Streaming Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder tracks(Output<List<StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArgs>> tracks) {
            $.tracks = tracks;
            return this;
        }

        /**
         * @param tracks One or more `track` blocks as defined below. Changing this forces a new Streaming Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder tracks(List<StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArgs> tracks) {
            return tracks(Output.of(tracks));
        }

        /**
         * @param tracks One or more `track` blocks as defined below. Changing this forces a new Streaming Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder tracks(StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArgs... tracks) {
            return tracks(List.of(tracks));
        }

        public StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArgs build() {
            if ($.tracks == null) {
                throw new MissingRequiredPropertyException("StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArgs", "tracks");
            }
            return $;
        }
    }

}
