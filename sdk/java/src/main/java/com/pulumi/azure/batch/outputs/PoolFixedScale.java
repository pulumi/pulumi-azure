// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.batch.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PoolFixedScale {
    /**
     * @return It determines what to do with a node and its running task(s) if the pool size is decreasing. Values are `Requeue`, `RetainedData`, `TaskCompletion` and `Terminate`.
     * 
     */
    private @Nullable String nodeDeallocationMethod;
    /**
     * @return The timeout for resize operations. Defaults to `PT15M`.
     * 
     */
    private @Nullable String resizeTimeout;
    /**
     * @return The number of nodes in the Batch pool. Defaults to `1`.
     * 
     */
    private @Nullable Integer targetDedicatedNodes;
    /**
     * @return The number of low priority nodes in the Batch pool. Defaults to `0`.
     * 
     */
    private @Nullable Integer targetLowPriorityNodes;

    private PoolFixedScale() {}
    /**
     * @return It determines what to do with a node and its running task(s) if the pool size is decreasing. Values are `Requeue`, `RetainedData`, `TaskCompletion` and `Terminate`.
     * 
     */
    public Optional<String> nodeDeallocationMethod() {
        return Optional.ofNullable(this.nodeDeallocationMethod);
    }
    /**
     * @return The timeout for resize operations. Defaults to `PT15M`.
     * 
     */
    public Optional<String> resizeTimeout() {
        return Optional.ofNullable(this.resizeTimeout);
    }
    /**
     * @return The number of nodes in the Batch pool. Defaults to `1`.
     * 
     */
    public Optional<Integer> targetDedicatedNodes() {
        return Optional.ofNullable(this.targetDedicatedNodes);
    }
    /**
     * @return The number of low priority nodes in the Batch pool. Defaults to `0`.
     * 
     */
    public Optional<Integer> targetLowPriorityNodes() {
        return Optional.ofNullable(this.targetLowPriorityNodes);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PoolFixedScale defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String nodeDeallocationMethod;
        private @Nullable String resizeTimeout;
        private @Nullable Integer targetDedicatedNodes;
        private @Nullable Integer targetLowPriorityNodes;
        public Builder() {}
        public Builder(PoolFixedScale defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.nodeDeallocationMethod = defaults.nodeDeallocationMethod;
    	      this.resizeTimeout = defaults.resizeTimeout;
    	      this.targetDedicatedNodes = defaults.targetDedicatedNodes;
    	      this.targetLowPriorityNodes = defaults.targetLowPriorityNodes;
        }

        @CustomType.Setter
        public Builder nodeDeallocationMethod(@Nullable String nodeDeallocationMethod) {

            this.nodeDeallocationMethod = nodeDeallocationMethod;
            return this;
        }
        @CustomType.Setter
        public Builder resizeTimeout(@Nullable String resizeTimeout) {

            this.resizeTimeout = resizeTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder targetDedicatedNodes(@Nullable Integer targetDedicatedNodes) {

            this.targetDedicatedNodes = targetDedicatedNodes;
            return this;
        }
        @CustomType.Setter
        public Builder targetLowPriorityNodes(@Nullable Integer targetLowPriorityNodes) {

            this.targetLowPriorityNodes = targetLowPriorityNodes;
            return this;
        }
        public PoolFixedScale build() {
            final var _resultValue = new PoolFixedScale();
            _resultValue.nodeDeallocationMethod = nodeDeallocationMethod;
            _resultValue.resizeTimeout = resizeTimeout;
            _resultValue.targetDedicatedNodes = targetDedicatedNodes;
            _resultValue.targetLowPriorityNodes = targetLowPriorityNodes;
            return _resultValue;
        }
    }
}
