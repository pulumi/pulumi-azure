// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appinsights.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class StandardWebTestValidationRulesContent {
    /**
     * @return A string value containing the content to match on.
     * 
     */
    private String contentMatch;
    /**
     * @return Ignore the casing in the `content_match` value.
     * 
     */
    private @Nullable Boolean ignoreCase;
    /**
     * @return If the content of `content_match` is found, pass the test. If set to `false`, the WebTest is failing if the content of `content_match` is found.
     * 
     */
    private @Nullable Boolean passIfTextFound;

    private StandardWebTestValidationRulesContent() {}
    /**
     * @return A string value containing the content to match on.
     * 
     */
    public String contentMatch() {
        return this.contentMatch;
    }
    /**
     * @return Ignore the casing in the `content_match` value.
     * 
     */
    public Optional<Boolean> ignoreCase() {
        return Optional.ofNullable(this.ignoreCase);
    }
    /**
     * @return If the content of `content_match` is found, pass the test. If set to `false`, the WebTest is failing if the content of `content_match` is found.
     * 
     */
    public Optional<Boolean> passIfTextFound() {
        return Optional.ofNullable(this.passIfTextFound);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StandardWebTestValidationRulesContent defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String contentMatch;
        private @Nullable Boolean ignoreCase;
        private @Nullable Boolean passIfTextFound;
        public Builder() {}
        public Builder(StandardWebTestValidationRulesContent defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contentMatch = defaults.contentMatch;
    	      this.ignoreCase = defaults.ignoreCase;
    	      this.passIfTextFound = defaults.passIfTextFound;
        }

        @CustomType.Setter
        public Builder contentMatch(String contentMatch) {
            if (contentMatch == null) {
              throw new MissingRequiredPropertyException("StandardWebTestValidationRulesContent", "contentMatch");
            }
            this.contentMatch = contentMatch;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreCase(@Nullable Boolean ignoreCase) {

            this.ignoreCase = ignoreCase;
            return this;
        }
        @CustomType.Setter
        public Builder passIfTextFound(@Nullable Boolean passIfTextFound) {

            this.passIfTextFound = passIfTextFound;
            return this;
        }
        public StandardWebTestValidationRulesContent build() {
            final var _resultValue = new StandardWebTestValidationRulesContent();
            _resultValue.contentMatch = contentMatch;
            _resultValue.ignoreCase = ignoreCase;
            _resultValue.passIfTextFound = passIfTextFound;
            return _resultValue;
        }
    }
}
