// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.lb.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetLBFrontendIpConfiguration {
    /**
     * @return The id of the Frontend IP Configuration.
     * 
     */
    private final String id;
    /**
     * @return Specifies the name of the Load Balancer.
     * 
     */
    private final String name;
    /**
     * @return Private IP Address to assign to the Load Balancer.
     * 
     */
    private final String privateIpAddress;
    /**
     * @return The allocation method for the Private IP Address used by this Load Balancer.
     * 
     */
    private final String privateIpAddressAllocation;
    /**
     * @return The Private IP Address Version, either `IPv4` or `IPv6`.
     * 
     */
    private final String privateIpAddressVersion;
    /**
     * @return The ID of a  Public IP Address which is associated with this Load Balancer.
     * 
     */
    private final String publicIpAddressId;
    /**
     * @return The ID of the Subnet which is associated with the IP Configuration.
     * 
     */
    private final String subnetId;
    /**
     * @return A list of Availability Zones which the Load Balancer&#39;s IP Addresses should be created in.
     * 
     */
    private final List<String> zones;

    @CustomType.Constructor
    private GetLBFrontendIpConfiguration(
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("privateIpAddress") String privateIpAddress,
        @CustomType.Parameter("privateIpAddressAllocation") String privateIpAddressAllocation,
        @CustomType.Parameter("privateIpAddressVersion") String privateIpAddressVersion,
        @CustomType.Parameter("publicIpAddressId") String publicIpAddressId,
        @CustomType.Parameter("subnetId") String subnetId,
        @CustomType.Parameter("zones") List<String> zones) {
        this.id = id;
        this.name = name;
        this.privateIpAddress = privateIpAddress;
        this.privateIpAddressAllocation = privateIpAddressAllocation;
        this.privateIpAddressVersion = privateIpAddressVersion;
        this.publicIpAddressId = publicIpAddressId;
        this.subnetId = subnetId;
        this.zones = zones;
    }

    /**
     * @return The id of the Frontend IP Configuration.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Specifies the name of the Load Balancer.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Private IP Address to assign to the Load Balancer.
     * 
     */
    public String privateIpAddress() {
        return this.privateIpAddress;
    }
    /**
     * @return The allocation method for the Private IP Address used by this Load Balancer.
     * 
     */
    public String privateIpAddressAllocation() {
        return this.privateIpAddressAllocation;
    }
    /**
     * @return The Private IP Address Version, either `IPv4` or `IPv6`.
     * 
     */
    public String privateIpAddressVersion() {
        return this.privateIpAddressVersion;
    }
    /**
     * @return The ID of a  Public IP Address which is associated with this Load Balancer.
     * 
     */
    public String publicIpAddressId() {
        return this.publicIpAddressId;
    }
    /**
     * @return The ID of the Subnet which is associated with the IP Configuration.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return A list of Availability Zones which the Load Balancer&#39;s IP Addresses should be created in.
     * 
     */
    public List<String> zones() {
        return this.zones;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLBFrontendIpConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String id;
        private String name;
        private String privateIpAddress;
        private String privateIpAddressAllocation;
        private String privateIpAddressVersion;
        private String publicIpAddressId;
        private String subnetId;
        private List<String> zones;

        public Builder() {
    	      // Empty
        }

        public Builder(GetLBFrontendIpConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.privateIpAddressAllocation = defaults.privateIpAddressAllocation;
    	      this.privateIpAddressVersion = defaults.privateIpAddressVersion;
    	      this.publicIpAddressId = defaults.publicIpAddressId;
    	      this.subnetId = defaults.subnetId;
    	      this.zones = defaults.zones;
        }

        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder privateIpAddress(String privateIpAddress) {
            this.privateIpAddress = Objects.requireNonNull(privateIpAddress);
            return this;
        }
        public Builder privateIpAddressAllocation(String privateIpAddressAllocation) {
            this.privateIpAddressAllocation = Objects.requireNonNull(privateIpAddressAllocation);
            return this;
        }
        public Builder privateIpAddressVersion(String privateIpAddressVersion) {
            this.privateIpAddressVersion = Objects.requireNonNull(privateIpAddressVersion);
            return this;
        }
        public Builder publicIpAddressId(String publicIpAddressId) {
            this.publicIpAddressId = Objects.requireNonNull(publicIpAddressId);
            return this;
        }
        public Builder subnetId(String subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }
        public Builder zones(List<String> zones) {
            this.zones = Objects.requireNonNull(zones);
            return this;
        }
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }        public GetLBFrontendIpConfiguration build() {
            return new GetLBFrontendIpConfiguration(id, name, privateIpAddress, privateIpAddressAllocation, privateIpAddressVersion, publicIpAddressId, subnetId, zones);
        }
    }
}
