// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.keyvault.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSecretPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSecretPlainArgs Empty = new GetSecretPlainArgs();

    /**
     * Specifies the ID of the Key Vault instance to fetch secret names from, available on the `azure.keyvault.KeyVault` Data Source / Resource.
     * 
     */
    @Import(name="keyVaultId", required=true)
    private String keyVaultId;

    /**
     * @return Specifies the ID of the Key Vault instance to fetch secret names from, available on the `azure.keyvault.KeyVault` Data Source / Resource.
     * 
     */
    public String keyVaultId() {
        return this.keyVaultId;
    }

    /**
     * Specifies the name of the Key Vault Secret.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Specifies the name of the Key Vault Secret.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Specifies the version of the Key Vault Secret. Defaults to the current version of the Key Vault Secret.
     * 
     * **NOTE:** The vault must be in the same subscription as the provider. If the vault is in another subscription, you must create an aliased provider for that subscription.
     * 
     */
    @Import(name="version")
    private @Nullable String version;

    /**
     * @return Specifies the version of the Key Vault Secret. Defaults to the current version of the Key Vault Secret.
     * 
     * **NOTE:** The vault must be in the same subscription as the provider. If the vault is in another subscription, you must create an aliased provider for that subscription.
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    private GetSecretPlainArgs() {}

    private GetSecretPlainArgs(GetSecretPlainArgs $) {
        this.keyVaultId = $.keyVaultId;
        this.name = $.name;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSecretPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSecretPlainArgs $;

        public Builder() {
            $ = new GetSecretPlainArgs();
        }

        public Builder(GetSecretPlainArgs defaults) {
            $ = new GetSecretPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param keyVaultId Specifies the ID of the Key Vault instance to fetch secret names from, available on the `azure.keyvault.KeyVault` Data Source / Resource.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultId(String keyVaultId) {
            $.keyVaultId = keyVaultId;
            return this;
        }

        /**
         * @param name Specifies the name of the Key Vault Secret.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param version Specifies the version of the Key Vault Secret. Defaults to the current version of the Key Vault Secret.
         * 
         * **NOTE:** The vault must be in the same subscription as the provider. If the vault is in another subscription, you must create an aliased provider for that subscription.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable String version) {
            $.version = version;
            return this;
        }

        public GetSecretPlainArgs build() {
            if ($.keyVaultId == null) {
                throw new MissingRequiredPropertyException("GetSecretPlainArgs", "keyVaultId");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetSecretPlainArgs", "name");
            }
            return $;
        }
    }

}
