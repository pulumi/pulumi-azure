// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.signalr;

import com.pulumi.azure.signalr.inputs.ServiceCorArgs;
import com.pulumi.azure.signalr.inputs.ServiceIdentityArgs;
import com.pulumi.azure.signalr.inputs.ServiceLiveTraceArgs;
import com.pulumi.azure.signalr.inputs.ServiceSkuArgs;
import com.pulumi.azure.signalr.inputs.ServiceUpstreamEndpointArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceArgs Empty = new ServiceArgs();

    /**
     * Whether to enable AAD auth? Defaults to `true`.
     * 
     */
    @Import(name="aadAuthEnabled")
    private @Nullable Output<Boolean> aadAuthEnabled;

    /**
     * @return Whether to enable AAD auth? Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> aadAuthEnabled() {
        return Optional.ofNullable(this.aadAuthEnabled);
    }

    /**
     * Specifies if Connectivity Logs are enabled or not. Defaults to `false`.
     * 
     */
    @Import(name="connectivityLogsEnabled")
    private @Nullable Output<Boolean> connectivityLogsEnabled;

    /**
     * @return Specifies if Connectivity Logs are enabled or not. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> connectivityLogsEnabled() {
        return Optional.ofNullable(this.connectivityLogsEnabled);
    }

    /**
     * A `cors` block as documented below.
     * 
     */
    @Import(name="cors")
    private @Nullable Output<List<ServiceCorArgs>> cors;

    /**
     * @return A `cors` block as documented below.
     * 
     */
    public Optional<Output<List<ServiceCorArgs>>> cors() {
        return Optional.ofNullable(this.cors);
    }

    /**
     * Specifies if Http Request Logs are enabled or not. Defaults to `false`.
     * 
     */
    @Import(name="httpRequestLogsEnabled")
    private @Nullable Output<Boolean> httpRequestLogsEnabled;

    /**
     * @return Specifies if Http Request Logs are enabled or not. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> httpRequestLogsEnabled() {
        return Optional.ofNullable(this.httpRequestLogsEnabled);
    }

    /**
     * An `identity` block as defined below.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<ServiceIdentityArgs> identity;

    /**
     * @return An `identity` block as defined below.
     * 
     */
    public Optional<Output<ServiceIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * A `live_trace` block as defined below.
     * 
     */
    @Import(name="liveTrace")
    private @Nullable Output<ServiceLiveTraceArgs> liveTrace;

    /**
     * @return A `live_trace` block as defined below.
     * 
     */
    public Optional<Output<ServiceLiveTraceArgs>> liveTrace() {
        return Optional.ofNullable(this.liveTrace);
    }

    /**
     * Specifies if Live Trace is enabled or not. Defaults to `false`.
     * 
     * @deprecated
     * `live_trace_enabled` has been deprecated in favor of `live_trace` and will be removed in 4.0.
     * 
     */
    @Deprecated /* `live_trace_enabled` has been deprecated in favor of `live_trace` and will be removed in 4.0. */
    @Import(name="liveTraceEnabled")
    private @Nullable Output<Boolean> liveTraceEnabled;

    /**
     * @return Specifies if Live Trace is enabled or not. Defaults to `false`.
     * 
     * @deprecated
     * `live_trace_enabled` has been deprecated in favor of `live_trace` and will be removed in 4.0.
     * 
     */
    @Deprecated /* `live_trace_enabled` has been deprecated in favor of `live_trace` and will be removed in 4.0. */
    public Optional<Output<Boolean>> liveTraceEnabled() {
        return Optional.ofNullable(this.liveTraceEnabled);
    }

    /**
     * Whether to enable local auth? Defaults to `true`.
     * 
     */
    @Import(name="localAuthEnabled")
    private @Nullable Output<Boolean> localAuthEnabled;

    /**
     * @return Whether to enable local auth? Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> localAuthEnabled() {
        return Optional.ofNullable(this.localAuthEnabled);
    }

    /**
     * Specifies the supported Azure location where the SignalR service exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Specifies the supported Azure location where the SignalR service exists. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Specifies if Messaging Logs are enabled or not. Defaults to `false`.
     * 
     */
    @Import(name="messagingLogsEnabled")
    private @Nullable Output<Boolean> messagingLogsEnabled;

    /**
     * @return Specifies if Messaging Logs are enabled or not. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> messagingLogsEnabled() {
        return Optional.ofNullable(this.messagingLogsEnabled);
    }

    /**
     * The name of the SignalR service. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the SignalR service. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Whether to enable public network access? Defaults to `true`.
     * 
     * &gt; **Note:** `public_network_access_enabled` cannot be set to `false` in `Free` sku tier.
     * 
     */
    @Import(name="publicNetworkAccessEnabled")
    private @Nullable Output<Boolean> publicNetworkAccessEnabled;

    /**
     * @return Whether to enable public network access? Defaults to `true`.
     * 
     * &gt; **Note:** `public_network_access_enabled` cannot be set to `false` in `Free` sku tier.
     * 
     */
    public Optional<Output<Boolean>> publicNetworkAccessEnabled() {
        return Optional.ofNullable(this.publicNetworkAccessEnabled);
    }

    /**
     * The name of the resource group in which to create the SignalR service. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the SignalR service. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Specifies the client connection timeout. Defaults to `30`.
     * 
     */
    @Import(name="serverlessConnectionTimeoutInSeconds")
    private @Nullable Output<Integer> serverlessConnectionTimeoutInSeconds;

    /**
     * @return Specifies the client connection timeout. Defaults to `30`.
     * 
     */
    public Optional<Output<Integer>> serverlessConnectionTimeoutInSeconds() {
        return Optional.ofNullable(this.serverlessConnectionTimeoutInSeconds);
    }

    /**
     * Specifies the service mode. Possible values are `Classic`, `Default` and `Serverless`. Defaults to `Default`.
     * 
     */
    @Import(name="serviceMode")
    private @Nullable Output<String> serviceMode;

    /**
     * @return Specifies the service mode. Possible values are `Classic`, `Default` and `Serverless`. Defaults to `Default`.
     * 
     */
    public Optional<Output<String>> serviceMode() {
        return Optional.ofNullable(this.serviceMode);
    }

    /**
     * A `sku` block as documented below.
     * 
     */
    @Import(name="sku", required=true)
    private Output<ServiceSkuArgs> sku;

    /**
     * @return A `sku` block as documented below.
     * 
     */
    public Output<ServiceSkuArgs> sku() {
        return this.sku;
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Whether to request client certificate during TLS handshake? Defaults to `false`.
     * 
     * &gt; **Note:** `tls_client_cert_enabled` cannot be set to `true` in `Free` sku tier.
     * 
     */
    @Import(name="tlsClientCertEnabled")
    private @Nullable Output<Boolean> tlsClientCertEnabled;

    /**
     * @return Whether to request client certificate during TLS handshake? Defaults to `false`.
     * 
     * &gt; **Note:** `tls_client_cert_enabled` cannot be set to `true` in `Free` sku tier.
     * 
     */
    public Optional<Output<Boolean>> tlsClientCertEnabled() {
        return Optional.ofNullable(this.tlsClientCertEnabled);
    }

    /**
     * An `upstream_endpoint` block as documented below. Using this block requires the SignalR service to be Serverless. When creating multiple blocks they will be processed in the order they are defined in.
     * 
     */
    @Import(name="upstreamEndpoints")
    private @Nullable Output<List<ServiceUpstreamEndpointArgs>> upstreamEndpoints;

    /**
     * @return An `upstream_endpoint` block as documented below. Using this block requires the SignalR service to be Serverless. When creating multiple blocks they will be processed in the order they are defined in.
     * 
     */
    public Optional<Output<List<ServiceUpstreamEndpointArgs>>> upstreamEndpoints() {
        return Optional.ofNullable(this.upstreamEndpoints);
    }

    private ServiceArgs() {}

    private ServiceArgs(ServiceArgs $) {
        this.aadAuthEnabled = $.aadAuthEnabled;
        this.connectivityLogsEnabled = $.connectivityLogsEnabled;
        this.cors = $.cors;
        this.httpRequestLogsEnabled = $.httpRequestLogsEnabled;
        this.identity = $.identity;
        this.liveTrace = $.liveTrace;
        this.liveTraceEnabled = $.liveTraceEnabled;
        this.localAuthEnabled = $.localAuthEnabled;
        this.location = $.location;
        this.messagingLogsEnabled = $.messagingLogsEnabled;
        this.name = $.name;
        this.publicNetworkAccessEnabled = $.publicNetworkAccessEnabled;
        this.resourceGroupName = $.resourceGroupName;
        this.serverlessConnectionTimeoutInSeconds = $.serverlessConnectionTimeoutInSeconds;
        this.serviceMode = $.serviceMode;
        this.sku = $.sku;
        this.tags = $.tags;
        this.tlsClientCertEnabled = $.tlsClientCertEnabled;
        this.upstreamEndpoints = $.upstreamEndpoints;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceArgs $;

        public Builder() {
            $ = new ServiceArgs();
        }

        public Builder(ServiceArgs defaults) {
            $ = new ServiceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aadAuthEnabled Whether to enable AAD auth? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder aadAuthEnabled(@Nullable Output<Boolean> aadAuthEnabled) {
            $.aadAuthEnabled = aadAuthEnabled;
            return this;
        }

        /**
         * @param aadAuthEnabled Whether to enable AAD auth? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder aadAuthEnabled(Boolean aadAuthEnabled) {
            return aadAuthEnabled(Output.of(aadAuthEnabled));
        }

        /**
         * @param connectivityLogsEnabled Specifies if Connectivity Logs are enabled or not. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder connectivityLogsEnabled(@Nullable Output<Boolean> connectivityLogsEnabled) {
            $.connectivityLogsEnabled = connectivityLogsEnabled;
            return this;
        }

        /**
         * @param connectivityLogsEnabled Specifies if Connectivity Logs are enabled or not. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder connectivityLogsEnabled(Boolean connectivityLogsEnabled) {
            return connectivityLogsEnabled(Output.of(connectivityLogsEnabled));
        }

        /**
         * @param cors A `cors` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder cors(@Nullable Output<List<ServiceCorArgs>> cors) {
            $.cors = cors;
            return this;
        }

        /**
         * @param cors A `cors` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder cors(List<ServiceCorArgs> cors) {
            return cors(Output.of(cors));
        }

        /**
         * @param cors A `cors` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder cors(ServiceCorArgs... cors) {
            return cors(List.of(cors));
        }

        /**
         * @param httpRequestLogsEnabled Specifies if Http Request Logs are enabled or not. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder httpRequestLogsEnabled(@Nullable Output<Boolean> httpRequestLogsEnabled) {
            $.httpRequestLogsEnabled = httpRequestLogsEnabled;
            return this;
        }

        /**
         * @param httpRequestLogsEnabled Specifies if Http Request Logs are enabled or not. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder httpRequestLogsEnabled(Boolean httpRequestLogsEnabled) {
            return httpRequestLogsEnabled(Output.of(httpRequestLogsEnabled));
        }

        /**
         * @param identity An `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<ServiceIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity An `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(ServiceIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param liveTrace A `live_trace` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder liveTrace(@Nullable Output<ServiceLiveTraceArgs> liveTrace) {
            $.liveTrace = liveTrace;
            return this;
        }

        /**
         * @param liveTrace A `live_trace` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder liveTrace(ServiceLiveTraceArgs liveTrace) {
            return liveTrace(Output.of(liveTrace));
        }

        /**
         * @param liveTraceEnabled Specifies if Live Trace is enabled or not. Defaults to `false`.
         * 
         * @return builder
         * 
         * @deprecated
         * `live_trace_enabled` has been deprecated in favor of `live_trace` and will be removed in 4.0.
         * 
         */
        @Deprecated /* `live_trace_enabled` has been deprecated in favor of `live_trace` and will be removed in 4.0. */
        public Builder liveTraceEnabled(@Nullable Output<Boolean> liveTraceEnabled) {
            $.liveTraceEnabled = liveTraceEnabled;
            return this;
        }

        /**
         * @param liveTraceEnabled Specifies if Live Trace is enabled or not. Defaults to `false`.
         * 
         * @return builder
         * 
         * @deprecated
         * `live_trace_enabled` has been deprecated in favor of `live_trace` and will be removed in 4.0.
         * 
         */
        @Deprecated /* `live_trace_enabled` has been deprecated in favor of `live_trace` and will be removed in 4.0. */
        public Builder liveTraceEnabled(Boolean liveTraceEnabled) {
            return liveTraceEnabled(Output.of(liveTraceEnabled));
        }

        /**
         * @param localAuthEnabled Whether to enable local auth? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder localAuthEnabled(@Nullable Output<Boolean> localAuthEnabled) {
            $.localAuthEnabled = localAuthEnabled;
            return this;
        }

        /**
         * @param localAuthEnabled Whether to enable local auth? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder localAuthEnabled(Boolean localAuthEnabled) {
            return localAuthEnabled(Output.of(localAuthEnabled));
        }

        /**
         * @param location Specifies the supported Azure location where the SignalR service exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Specifies the supported Azure location where the SignalR service exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param messagingLogsEnabled Specifies if Messaging Logs are enabled or not. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder messagingLogsEnabled(@Nullable Output<Boolean> messagingLogsEnabled) {
            $.messagingLogsEnabled = messagingLogsEnabled;
            return this;
        }

        /**
         * @param messagingLogsEnabled Specifies if Messaging Logs are enabled or not. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder messagingLogsEnabled(Boolean messagingLogsEnabled) {
            return messagingLogsEnabled(Output.of(messagingLogsEnabled));
        }

        /**
         * @param name The name of the SignalR service. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the SignalR service. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param publicNetworkAccessEnabled Whether to enable public network access? Defaults to `true`.
         * 
         * &gt; **Note:** `public_network_access_enabled` cannot be set to `false` in `Free` sku tier.
         * 
         * @return builder
         * 
         */
        public Builder publicNetworkAccessEnabled(@Nullable Output<Boolean> publicNetworkAccessEnabled) {
            $.publicNetworkAccessEnabled = publicNetworkAccessEnabled;
            return this;
        }

        /**
         * @param publicNetworkAccessEnabled Whether to enable public network access? Defaults to `true`.
         * 
         * &gt; **Note:** `public_network_access_enabled` cannot be set to `false` in `Free` sku tier.
         * 
         * @return builder
         * 
         */
        public Builder publicNetworkAccessEnabled(Boolean publicNetworkAccessEnabled) {
            return publicNetworkAccessEnabled(Output.of(publicNetworkAccessEnabled));
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the SignalR service. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the SignalR service. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param serverlessConnectionTimeoutInSeconds Specifies the client connection timeout. Defaults to `30`.
         * 
         * @return builder
         * 
         */
        public Builder serverlessConnectionTimeoutInSeconds(@Nullable Output<Integer> serverlessConnectionTimeoutInSeconds) {
            $.serverlessConnectionTimeoutInSeconds = serverlessConnectionTimeoutInSeconds;
            return this;
        }

        /**
         * @param serverlessConnectionTimeoutInSeconds Specifies the client connection timeout. Defaults to `30`.
         * 
         * @return builder
         * 
         */
        public Builder serverlessConnectionTimeoutInSeconds(Integer serverlessConnectionTimeoutInSeconds) {
            return serverlessConnectionTimeoutInSeconds(Output.of(serverlessConnectionTimeoutInSeconds));
        }

        /**
         * @param serviceMode Specifies the service mode. Possible values are `Classic`, `Default` and `Serverless`. Defaults to `Default`.
         * 
         * @return builder
         * 
         */
        public Builder serviceMode(@Nullable Output<String> serviceMode) {
            $.serviceMode = serviceMode;
            return this;
        }

        /**
         * @param serviceMode Specifies the service mode. Possible values are `Classic`, `Default` and `Serverless`. Defaults to `Default`.
         * 
         * @return builder
         * 
         */
        public Builder serviceMode(String serviceMode) {
            return serviceMode(Output.of(serviceMode));
        }

        /**
         * @param sku A `sku` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder sku(Output<ServiceSkuArgs> sku) {
            $.sku = sku;
            return this;
        }

        /**
         * @param sku A `sku` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder sku(ServiceSkuArgs sku) {
            return sku(Output.of(sku));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tlsClientCertEnabled Whether to request client certificate during TLS handshake? Defaults to `false`.
         * 
         * &gt; **Note:** `tls_client_cert_enabled` cannot be set to `true` in `Free` sku tier.
         * 
         * @return builder
         * 
         */
        public Builder tlsClientCertEnabled(@Nullable Output<Boolean> tlsClientCertEnabled) {
            $.tlsClientCertEnabled = tlsClientCertEnabled;
            return this;
        }

        /**
         * @param tlsClientCertEnabled Whether to request client certificate during TLS handshake? Defaults to `false`.
         * 
         * &gt; **Note:** `tls_client_cert_enabled` cannot be set to `true` in `Free` sku tier.
         * 
         * @return builder
         * 
         */
        public Builder tlsClientCertEnabled(Boolean tlsClientCertEnabled) {
            return tlsClientCertEnabled(Output.of(tlsClientCertEnabled));
        }

        /**
         * @param upstreamEndpoints An `upstream_endpoint` block as documented below. Using this block requires the SignalR service to be Serverless. When creating multiple blocks they will be processed in the order they are defined in.
         * 
         * @return builder
         * 
         */
        public Builder upstreamEndpoints(@Nullable Output<List<ServiceUpstreamEndpointArgs>> upstreamEndpoints) {
            $.upstreamEndpoints = upstreamEndpoints;
            return this;
        }

        /**
         * @param upstreamEndpoints An `upstream_endpoint` block as documented below. Using this block requires the SignalR service to be Serverless. When creating multiple blocks they will be processed in the order they are defined in.
         * 
         * @return builder
         * 
         */
        public Builder upstreamEndpoints(List<ServiceUpstreamEndpointArgs> upstreamEndpoints) {
            return upstreamEndpoints(Output.of(upstreamEndpoints));
        }

        /**
         * @param upstreamEndpoints An `upstream_endpoint` block as documented below. Using this block requires the SignalR service to be Serverless. When creating multiple blocks they will be processed in the order they are defined in.
         * 
         * @return builder
         * 
         */
        public Builder upstreamEndpoints(ServiceUpstreamEndpointArgs... upstreamEndpoints) {
            return upstreamEndpoints(List.of(upstreamEndpoints));
        }

        public ServiceArgs build() {
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("ServiceArgs", "resourceGroupName");
            }
            if ($.sku == null) {
                throw new MissingRequiredPropertyException("ServiceArgs", "sku");
            }
            return $;
        }
    }

}
