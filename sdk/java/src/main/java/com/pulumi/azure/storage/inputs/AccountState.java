// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.storage.inputs;

import com.pulumi.azure.storage.inputs.AccountAzureFilesAuthenticationArgs;
import com.pulumi.azure.storage.inputs.AccountBlobPropertiesArgs;
import com.pulumi.azure.storage.inputs.AccountCustomDomainArgs;
import com.pulumi.azure.storage.inputs.AccountCustomerManagedKeyArgs;
import com.pulumi.azure.storage.inputs.AccountIdentityArgs;
import com.pulumi.azure.storage.inputs.AccountImmutabilityPolicyArgs;
import com.pulumi.azure.storage.inputs.AccountNetworkRulesArgs;
import com.pulumi.azure.storage.inputs.AccountQueuePropertiesArgs;
import com.pulumi.azure.storage.inputs.AccountRoutingArgs;
import com.pulumi.azure.storage.inputs.AccountSasPolicyArgs;
import com.pulumi.azure.storage.inputs.AccountSharePropertiesArgs;
import com.pulumi.azure.storage.inputs.AccountStaticWebsiteArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountState extends com.pulumi.resources.ResourceArgs {

    public static final AccountState Empty = new AccountState();

    /**
     * Defines the access tier for `BlobStorage`, `FileStorage` and `StorageV2` accounts. Valid options are `Hot` and `Cool`, defaults to `Hot`.
     * 
     */
    @Import(name="accessTier")
    private @Nullable Output<String> accessTier;

    /**
     * @return Defines the access tier for `BlobStorage`, `FileStorage` and `StorageV2` accounts. Valid options are `Hot` and `Cool`, defaults to `Hot`.
     * 
     */
    public Optional<Output<String>> accessTier() {
        return Optional.ofNullable(this.accessTier);
    }

    /**
     * Defines the Kind of account. Valid options are `BlobStorage`, `BlockBlobStorage`, `FileStorage`, `Storage` and `StorageV2`. Defaults to `StorageV2`.
     * 
     * &gt; **NOTE:** Changing the `account_kind` value from `Storage` to `StorageV2` will not trigger a force new on the storage account, it will only upgrade the existing storage account from `Storage` to `StorageV2` keeping the existing storage account in place.
     * 
     */
    @Import(name="accountKind")
    private @Nullable Output<String> accountKind;

    /**
     * @return Defines the Kind of account. Valid options are `BlobStorage`, `BlockBlobStorage`, `FileStorage`, `Storage` and `StorageV2`. Defaults to `StorageV2`.
     * 
     * &gt; **NOTE:** Changing the `account_kind` value from `Storage` to `StorageV2` will not trigger a force new on the storage account, it will only upgrade the existing storage account from `Storage` to `StorageV2` keeping the existing storage account in place.
     * 
     */
    public Optional<Output<String>> accountKind() {
        return Optional.ofNullable(this.accountKind);
    }

    /**
     * Defines the type of replication to use for this storage account. Valid options are `LRS`, `GRS`, `RAGRS`, `ZRS`, `GZRS` and `RAGZRS`.
     * 
     */
    @Import(name="accountReplicationType")
    private @Nullable Output<String> accountReplicationType;

    /**
     * @return Defines the type of replication to use for this storage account. Valid options are `LRS`, `GRS`, `RAGRS`, `ZRS`, `GZRS` and `RAGZRS`.
     * 
     */
    public Optional<Output<String>> accountReplicationType() {
        return Optional.ofNullable(this.accountReplicationType);
    }

    /**
     * Defines the Tier to use for this storage account. Valid options are `Standard` and `Premium`. For `BlockBlobStorage` and `FileStorage` accounts only `Premium` is valid. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** Blobs with a tier of `Premium` are of account kind `StorageV2`.
     * 
     */
    @Import(name="accountTier")
    private @Nullable Output<String> accountTier;

    /**
     * @return Defines the Tier to use for this storage account. Valid options are `Standard` and `Premium`. For `BlockBlobStorage` and `FileStorage` accounts only `Premium` is valid. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** Blobs with a tier of `Premium` are of account kind `StorageV2`.
     * 
     */
    public Optional<Output<String>> accountTier() {
        return Optional.ofNullable(this.accountTier);
    }

    /**
     * Allow or disallow nested items within this Account to opt into being public. Defaults to `true`.
     * 
     * &gt; **NOTE:** At this time `allow_nested_items_to_be_public` is only supported in the Public Cloud, China Cloud, and US Government Cloud.
     * 
     */
    @Import(name="allowNestedItemsToBePublic")
    private @Nullable Output<Boolean> allowNestedItemsToBePublic;

    /**
     * @return Allow or disallow nested items within this Account to opt into being public. Defaults to `true`.
     * 
     * &gt; **NOTE:** At this time `allow_nested_items_to_be_public` is only supported in the Public Cloud, China Cloud, and US Government Cloud.
     * 
     */
    public Optional<Output<Boolean>> allowNestedItemsToBePublic() {
        return Optional.ofNullable(this.allowNestedItemsToBePublic);
    }

    /**
     * Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet. Possible values are `AAD` and `PrivateLink`.
     * 
     */
    @Import(name="allowedCopyScope")
    private @Nullable Output<String> allowedCopyScope;

    /**
     * @return Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet. Possible values are `AAD` and `PrivateLink`.
     * 
     */
    public Optional<Output<String>> allowedCopyScope() {
        return Optional.ofNullable(this.allowedCopyScope);
    }

    /**
     * A `azure_files_authentication` block as defined below.
     * 
     */
    @Import(name="azureFilesAuthentication")
    private @Nullable Output<AccountAzureFilesAuthenticationArgs> azureFilesAuthentication;

    /**
     * @return A `azure_files_authentication` block as defined below.
     * 
     */
    public Optional<Output<AccountAzureFilesAuthenticationArgs>> azureFilesAuthentication() {
        return Optional.ofNullable(this.azureFilesAuthentication);
    }

    /**
     * A `blob_properties` block as defined below.
     * 
     */
    @Import(name="blobProperties")
    private @Nullable Output<AccountBlobPropertiesArgs> blobProperties;

    /**
     * @return A `blob_properties` block as defined below.
     * 
     */
    public Optional<Output<AccountBlobPropertiesArgs>> blobProperties() {
        return Optional.ofNullable(this.blobProperties);
    }

    /**
     * Should cross Tenant replication be enabled? Defaults to `true`.
     * 
     */
    @Import(name="crossTenantReplicationEnabled")
    private @Nullable Output<Boolean> crossTenantReplicationEnabled;

    /**
     * @return Should cross Tenant replication be enabled? Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> crossTenantReplicationEnabled() {
        return Optional.ofNullable(this.crossTenantReplicationEnabled);
    }

    /**
     * A `custom_domain` block as documented below.
     * 
     */
    @Import(name="customDomain")
    private @Nullable Output<AccountCustomDomainArgs> customDomain;

    /**
     * @return A `custom_domain` block as documented below.
     * 
     */
    public Optional<Output<AccountCustomDomainArgs>> customDomain() {
        return Optional.ofNullable(this.customDomain);
    }

    /**
     * A `customer_managed_key` block as documented below.
     * 
     */
    @Import(name="customerManagedKey")
    private @Nullable Output<AccountCustomerManagedKeyArgs> customerManagedKey;

    /**
     * @return A `customer_managed_key` block as documented below.
     * 
     */
    public Optional<Output<AccountCustomerManagedKeyArgs>> customerManagedKey() {
        return Optional.ofNullable(this.customerManagedKey);
    }

    /**
     * Default to Azure Active Directory authorization in the Azure portal when accessing the Storage Account. The default value is `false`
     * 
     */
    @Import(name="defaultToOauthAuthentication")
    private @Nullable Output<Boolean> defaultToOauthAuthentication;

    /**
     * @return Default to Azure Active Directory authorization in the Azure portal when accessing the Storage Account. The default value is `false`
     * 
     */
    public Optional<Output<Boolean>> defaultToOauthAuthentication() {
        return Optional.ofNullable(this.defaultToOauthAuthentication);
    }

    /**
     * Specifies the Edge Zone within the Azure Region where this Storage Account should exist. Changing this forces a new Storage Account to be created.
     * 
     */
    @Import(name="edgeZone")
    private @Nullable Output<String> edgeZone;

    /**
     * @return Specifies the Edge Zone within the Azure Region where this Storage Account should exist. Changing this forces a new Storage Account to be created.
     * 
     */
    public Optional<Output<String>> edgeZone() {
        return Optional.ofNullable(this.edgeZone);
    }

    /**
     * Boolean flag which forces HTTPS if enabled, see [here](https://docs.microsoft.com/azure/storage/storage-require-secure-transfer/) for more information. Defaults to `true`.
     * 
     */
    @Import(name="enableHttpsTrafficOnly")
    private @Nullable Output<Boolean> enableHttpsTrafficOnly;

    /**
     * @return Boolean flag which forces HTTPS if enabled, see [here](https://docs.microsoft.com/azure/storage/storage-require-secure-transfer/) for more information. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enableHttpsTrafficOnly() {
        return Optional.ofNullable(this.enableHttpsTrafficOnly);
    }

    /**
     * An `identity` block as defined below.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<AccountIdentityArgs> identity;

    /**
     * @return An `identity` block as defined below.
     * 
     */
    public Optional<Output<AccountIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * An `immutability_policy` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="immutabilityPolicy")
    private @Nullable Output<AccountImmutabilityPolicyArgs> immutabilityPolicy;

    /**
     * @return An `immutability_policy` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<AccountImmutabilityPolicyArgs>> immutabilityPolicy() {
        return Optional.ofNullable(this.immutabilityPolicy);
    }

    /**
     * Is infrastructure encryption enabled? Changing this forces a new resource to be created. Defaults to `false`.
     * 
     * &gt; **NOTE:** This can only be `true` when `account_kind` is `StorageV2` or when `account_tier` is `Premium` *and* `account_kind` is one of `BlockBlobStorage` or `FileStorage`.
     * 
     */
    @Import(name="infrastructureEncryptionEnabled")
    private @Nullable Output<Boolean> infrastructureEncryptionEnabled;

    /**
     * @return Is infrastructure encryption enabled? Changing this forces a new resource to be created. Defaults to `false`.
     * 
     * &gt; **NOTE:** This can only be `true` when `account_kind` is `StorageV2` or when `account_tier` is `Premium` *and* `account_kind` is one of `BlockBlobStorage` or `FileStorage`.
     * 
     */
    public Optional<Output<Boolean>> infrastructureEncryptionEnabled() {
        return Optional.ofNullable(this.infrastructureEncryptionEnabled);
    }

    /**
     * Is Hierarchical Namespace enabled? This can be used with Azure Data Lake Storage Gen 2 ([see here for more information](https://docs.microsoft.com/azure/storage/blobs/data-lake-storage-quickstart-create-account/)). Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** This can only be `true` when `account_tier` is `Standard` or when `account_tier` is `Premium` *and* `account_kind` is `BlockBlobStorage`
     * 
     */
    @Import(name="isHnsEnabled")
    private @Nullable Output<Boolean> isHnsEnabled;

    /**
     * @return Is Hierarchical Namespace enabled? This can be used with Azure Data Lake Storage Gen 2 ([see here for more information](https://docs.microsoft.com/azure/storage/blobs/data-lake-storage-quickstart-create-account/)). Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** This can only be `true` when `account_tier` is `Standard` or when `account_tier` is `Premium` *and* `account_kind` is `BlockBlobStorage`
     * 
     */
    public Optional<Output<Boolean>> isHnsEnabled() {
        return Optional.ofNullable(this.isHnsEnabled);
    }

    /**
     * Is Large File Share Enabled?
     * 
     */
    @Import(name="largeFileShareEnabled")
    private @Nullable Output<Boolean> largeFileShareEnabled;

    /**
     * @return Is Large File Share Enabled?
     * 
     */
    public Optional<Output<Boolean>> largeFileShareEnabled() {
        return Optional.ofNullable(this.largeFileShareEnabled);
    }

    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The minimum supported TLS version for the storage account. Possible values are `TLS1_0`, `TLS1_1`, and `TLS1_2`. Defaults to `TLS1_2` for new storage accounts.
     * 
     * &gt; **NOTE:** At this time `min_tls_version` is only supported in the Public Cloud, China Cloud, and US Government Cloud.
     * 
     */
    @Import(name="minTlsVersion")
    private @Nullable Output<String> minTlsVersion;

    /**
     * @return The minimum supported TLS version for the storage account. Possible values are `TLS1_0`, `TLS1_1`, and `TLS1_2`. Defaults to `TLS1_2` for new storage accounts.
     * 
     * &gt; **NOTE:** At this time `min_tls_version` is only supported in the Public Cloud, China Cloud, and US Government Cloud.
     * 
     */
    public Optional<Output<String>> minTlsVersion() {
        return Optional.ofNullable(this.minTlsVersion);
    }

    /**
     * Specifies the name of the storage account. Only lowercase Alphanumeric characters allowed. Changing this forces a new resource to be created. This must be unique across the entire Azure service, not just within the resource group.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the storage account. Only lowercase Alphanumeric characters allowed. Changing this forces a new resource to be created. This must be unique across the entire Azure service, not just within the resource group.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A `network_rules` block as documented below.
     * 
     */
    @Import(name="networkRules")
    private @Nullable Output<AccountNetworkRulesArgs> networkRules;

    /**
     * @return A `network_rules` block as documented below.
     * 
     */
    public Optional<Output<AccountNetworkRulesArgs>> networkRules() {
        return Optional.ofNullable(this.networkRules);
    }

    /**
     * Is NFSv3 protocol enabled? Changing this forces a new resource to be created. Defaults to `false`.
     * 
     * &gt; **NOTE:** This can only be `true` when `account_tier` is `Standard` and `account_kind` is `StorageV2`, or `account_tier` is `Premium` and `account_kind` is `BlockBlobStorage`. Additionally, the `is_hns_enabled` is `true` and `account_replication_type` must be `LRS` or `RAGRS`.
     * 
     */
    @Import(name="nfsv3Enabled")
    private @Nullable Output<Boolean> nfsv3Enabled;

    /**
     * @return Is NFSv3 protocol enabled? Changing this forces a new resource to be created. Defaults to `false`.
     * 
     * &gt; **NOTE:** This can only be `true` when `account_tier` is `Standard` and `account_kind` is `StorageV2`, or `account_tier` is `Premium` and `account_kind` is `BlockBlobStorage`. Additionally, the `is_hns_enabled` is `true` and `account_replication_type` must be `LRS` or `RAGRS`.
     * 
     */
    public Optional<Output<Boolean>> nfsv3Enabled() {
        return Optional.ofNullable(this.nfsv3Enabled);
    }

    /**
     * The primary access key for the storage account.
     * 
     */
    @Import(name="primaryAccessKey")
    private @Nullable Output<String> primaryAccessKey;

    /**
     * @return The primary access key for the storage account.
     * 
     */
    public Optional<Output<String>> primaryAccessKey() {
        return Optional.ofNullable(this.primaryAccessKey);
    }

    /**
     * The connection string associated with the primary blob location.
     * 
     */
    @Import(name="primaryBlobConnectionString")
    private @Nullable Output<String> primaryBlobConnectionString;

    /**
     * @return The connection string associated with the primary blob location.
     * 
     */
    public Optional<Output<String>> primaryBlobConnectionString() {
        return Optional.ofNullable(this.primaryBlobConnectionString);
    }

    /**
     * The endpoint URL for blob storage in the primary location.
     * 
     */
    @Import(name="primaryBlobEndpoint")
    private @Nullable Output<String> primaryBlobEndpoint;

    /**
     * @return The endpoint URL for blob storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryBlobEndpoint() {
        return Optional.ofNullable(this.primaryBlobEndpoint);
    }

    /**
     * The hostname with port if applicable for blob storage in the primary location.
     * 
     */
    @Import(name="primaryBlobHost")
    private @Nullable Output<String> primaryBlobHost;

    /**
     * @return The hostname with port if applicable for blob storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryBlobHost() {
        return Optional.ofNullable(this.primaryBlobHost);
    }

    /**
     * The internet routing endpoint URL for blob storage in the primary location.
     * 
     */
    @Import(name="primaryBlobInternetEndpoint")
    private @Nullable Output<String> primaryBlobInternetEndpoint;

    /**
     * @return The internet routing endpoint URL for blob storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryBlobInternetEndpoint() {
        return Optional.ofNullable(this.primaryBlobInternetEndpoint);
    }

    /**
     * The internet routing hostname with port if applicable for blob storage in the primary location.
     * 
     */
    @Import(name="primaryBlobInternetHost")
    private @Nullable Output<String> primaryBlobInternetHost;

    /**
     * @return The internet routing hostname with port if applicable for blob storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryBlobInternetHost() {
        return Optional.ofNullable(this.primaryBlobInternetHost);
    }

    /**
     * The microsoft routing endpoint URL for blob storage in the primary location.
     * 
     */
    @Import(name="primaryBlobMicrosoftEndpoint")
    private @Nullable Output<String> primaryBlobMicrosoftEndpoint;

    /**
     * @return The microsoft routing endpoint URL for blob storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryBlobMicrosoftEndpoint() {
        return Optional.ofNullable(this.primaryBlobMicrosoftEndpoint);
    }

    /**
     * The microsoft routing hostname with port if applicable for blob storage in the primary location.
     * 
     */
    @Import(name="primaryBlobMicrosoftHost")
    private @Nullable Output<String> primaryBlobMicrosoftHost;

    /**
     * @return The microsoft routing hostname with port if applicable for blob storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryBlobMicrosoftHost() {
        return Optional.ofNullable(this.primaryBlobMicrosoftHost);
    }

    /**
     * The connection string associated with the primary location.
     * 
     */
    @Import(name="primaryConnectionString")
    private @Nullable Output<String> primaryConnectionString;

    /**
     * @return The connection string associated with the primary location.
     * 
     */
    public Optional<Output<String>> primaryConnectionString() {
        return Optional.ofNullable(this.primaryConnectionString);
    }

    /**
     * The endpoint URL for DFS storage in the primary location.
     * 
     */
    @Import(name="primaryDfsEndpoint")
    private @Nullable Output<String> primaryDfsEndpoint;

    /**
     * @return The endpoint URL for DFS storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryDfsEndpoint() {
        return Optional.ofNullable(this.primaryDfsEndpoint);
    }

    /**
     * The hostname with port if applicable for DFS storage in the primary location.
     * 
     */
    @Import(name="primaryDfsHost")
    private @Nullable Output<String> primaryDfsHost;

    /**
     * @return The hostname with port if applicable for DFS storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryDfsHost() {
        return Optional.ofNullable(this.primaryDfsHost);
    }

    /**
     * The internet routing endpoint URL for DFS storage in the primary location.
     * 
     */
    @Import(name="primaryDfsInternetEndpoint")
    private @Nullable Output<String> primaryDfsInternetEndpoint;

    /**
     * @return The internet routing endpoint URL for DFS storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryDfsInternetEndpoint() {
        return Optional.ofNullable(this.primaryDfsInternetEndpoint);
    }

    /**
     * The internet routing hostname with port if applicable for DFS storage in the primary location.
     * 
     */
    @Import(name="primaryDfsInternetHost")
    private @Nullable Output<String> primaryDfsInternetHost;

    /**
     * @return The internet routing hostname with port if applicable for DFS storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryDfsInternetHost() {
        return Optional.ofNullable(this.primaryDfsInternetHost);
    }

    /**
     * The microsoft routing endpoint URL for DFS storage in the primary location.
     * 
     */
    @Import(name="primaryDfsMicrosoftEndpoint")
    private @Nullable Output<String> primaryDfsMicrosoftEndpoint;

    /**
     * @return The microsoft routing endpoint URL for DFS storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryDfsMicrosoftEndpoint() {
        return Optional.ofNullable(this.primaryDfsMicrosoftEndpoint);
    }

    /**
     * The microsoft routing hostname with port if applicable for DFS storage in the primary location.
     * 
     */
    @Import(name="primaryDfsMicrosoftHost")
    private @Nullable Output<String> primaryDfsMicrosoftHost;

    /**
     * @return The microsoft routing hostname with port if applicable for DFS storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryDfsMicrosoftHost() {
        return Optional.ofNullable(this.primaryDfsMicrosoftHost);
    }

    /**
     * The endpoint URL for file storage in the primary location.
     * 
     */
    @Import(name="primaryFileEndpoint")
    private @Nullable Output<String> primaryFileEndpoint;

    /**
     * @return The endpoint URL for file storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryFileEndpoint() {
        return Optional.ofNullable(this.primaryFileEndpoint);
    }

    /**
     * The hostname with port if applicable for file storage in the primary location.
     * 
     */
    @Import(name="primaryFileHost")
    private @Nullable Output<String> primaryFileHost;

    /**
     * @return The hostname with port if applicable for file storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryFileHost() {
        return Optional.ofNullable(this.primaryFileHost);
    }

    /**
     * The internet routing endpoint URL for file storage in the primary location.
     * 
     */
    @Import(name="primaryFileInternetEndpoint")
    private @Nullable Output<String> primaryFileInternetEndpoint;

    /**
     * @return The internet routing endpoint URL for file storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryFileInternetEndpoint() {
        return Optional.ofNullable(this.primaryFileInternetEndpoint);
    }

    /**
     * The internet routing hostname with port if applicable for file storage in the primary location.
     * 
     */
    @Import(name="primaryFileInternetHost")
    private @Nullable Output<String> primaryFileInternetHost;

    /**
     * @return The internet routing hostname with port if applicable for file storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryFileInternetHost() {
        return Optional.ofNullable(this.primaryFileInternetHost);
    }

    /**
     * The microsoft routing endpoint URL for file storage in the primary location.
     * 
     */
    @Import(name="primaryFileMicrosoftEndpoint")
    private @Nullable Output<String> primaryFileMicrosoftEndpoint;

    /**
     * @return The microsoft routing endpoint URL for file storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryFileMicrosoftEndpoint() {
        return Optional.ofNullable(this.primaryFileMicrosoftEndpoint);
    }

    /**
     * The microsoft routing hostname with port if applicable for file storage in the primary location.
     * 
     */
    @Import(name="primaryFileMicrosoftHost")
    private @Nullable Output<String> primaryFileMicrosoftHost;

    /**
     * @return The microsoft routing hostname with port if applicable for file storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryFileMicrosoftHost() {
        return Optional.ofNullable(this.primaryFileMicrosoftHost);
    }

    /**
     * The primary location of the storage account.
     * 
     */
    @Import(name="primaryLocation")
    private @Nullable Output<String> primaryLocation;

    /**
     * @return The primary location of the storage account.
     * 
     */
    public Optional<Output<String>> primaryLocation() {
        return Optional.ofNullable(this.primaryLocation);
    }

    /**
     * The endpoint URL for queue storage in the primary location.
     * 
     */
    @Import(name="primaryQueueEndpoint")
    private @Nullable Output<String> primaryQueueEndpoint;

    /**
     * @return The endpoint URL for queue storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryQueueEndpoint() {
        return Optional.ofNullable(this.primaryQueueEndpoint);
    }

    /**
     * The hostname with port if applicable for queue storage in the primary location.
     * 
     */
    @Import(name="primaryQueueHost")
    private @Nullable Output<String> primaryQueueHost;

    /**
     * @return The hostname with port if applicable for queue storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryQueueHost() {
        return Optional.ofNullable(this.primaryQueueHost);
    }

    /**
     * The microsoft routing endpoint URL for queue storage in the primary location.
     * 
     */
    @Import(name="primaryQueueMicrosoftEndpoint")
    private @Nullable Output<String> primaryQueueMicrosoftEndpoint;

    /**
     * @return The microsoft routing endpoint URL for queue storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryQueueMicrosoftEndpoint() {
        return Optional.ofNullable(this.primaryQueueMicrosoftEndpoint);
    }

    /**
     * The microsoft routing hostname with port if applicable for queue storage in the primary location.
     * 
     */
    @Import(name="primaryQueueMicrosoftHost")
    private @Nullable Output<String> primaryQueueMicrosoftHost;

    /**
     * @return The microsoft routing hostname with port if applicable for queue storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryQueueMicrosoftHost() {
        return Optional.ofNullable(this.primaryQueueMicrosoftHost);
    }

    /**
     * The endpoint URL for table storage in the primary location.
     * 
     */
    @Import(name="primaryTableEndpoint")
    private @Nullable Output<String> primaryTableEndpoint;

    /**
     * @return The endpoint URL for table storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryTableEndpoint() {
        return Optional.ofNullable(this.primaryTableEndpoint);
    }

    /**
     * The hostname with port if applicable for table storage in the primary location.
     * 
     */
    @Import(name="primaryTableHost")
    private @Nullable Output<String> primaryTableHost;

    /**
     * @return The hostname with port if applicable for table storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryTableHost() {
        return Optional.ofNullable(this.primaryTableHost);
    }

    /**
     * The microsoft routing endpoint URL for table storage in the primary location.
     * 
     */
    @Import(name="primaryTableMicrosoftEndpoint")
    private @Nullable Output<String> primaryTableMicrosoftEndpoint;

    /**
     * @return The microsoft routing endpoint URL for table storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryTableMicrosoftEndpoint() {
        return Optional.ofNullable(this.primaryTableMicrosoftEndpoint);
    }

    /**
     * The microsoft routing hostname with port if applicable for table storage in the primary location.
     * 
     */
    @Import(name="primaryTableMicrosoftHost")
    private @Nullable Output<String> primaryTableMicrosoftHost;

    /**
     * @return The microsoft routing hostname with port if applicable for table storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryTableMicrosoftHost() {
        return Optional.ofNullable(this.primaryTableMicrosoftHost);
    }

    /**
     * The endpoint URL for web storage in the primary location.
     * 
     */
    @Import(name="primaryWebEndpoint")
    private @Nullable Output<String> primaryWebEndpoint;

    /**
     * @return The endpoint URL for web storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryWebEndpoint() {
        return Optional.ofNullable(this.primaryWebEndpoint);
    }

    /**
     * The hostname with port if applicable for web storage in the primary location.
     * 
     */
    @Import(name="primaryWebHost")
    private @Nullable Output<String> primaryWebHost;

    /**
     * @return The hostname with port if applicable for web storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryWebHost() {
        return Optional.ofNullable(this.primaryWebHost);
    }

    /**
     * The internet routing endpoint URL for web storage in the primary location.
     * 
     */
    @Import(name="primaryWebInternetEndpoint")
    private @Nullable Output<String> primaryWebInternetEndpoint;

    /**
     * @return The internet routing endpoint URL for web storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryWebInternetEndpoint() {
        return Optional.ofNullable(this.primaryWebInternetEndpoint);
    }

    /**
     * The internet routing hostname with port if applicable for web storage in the primary location.
     * 
     */
    @Import(name="primaryWebInternetHost")
    private @Nullable Output<String> primaryWebInternetHost;

    /**
     * @return The internet routing hostname with port if applicable for web storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryWebInternetHost() {
        return Optional.ofNullable(this.primaryWebInternetHost);
    }

    /**
     * The microsoft routing endpoint URL for web storage in the primary location.
     * 
     */
    @Import(name="primaryWebMicrosoftEndpoint")
    private @Nullable Output<String> primaryWebMicrosoftEndpoint;

    /**
     * @return The microsoft routing endpoint URL for web storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryWebMicrosoftEndpoint() {
        return Optional.ofNullable(this.primaryWebMicrosoftEndpoint);
    }

    /**
     * The microsoft routing hostname with port if applicable for web storage in the primary location.
     * 
     */
    @Import(name="primaryWebMicrosoftHost")
    private @Nullable Output<String> primaryWebMicrosoftHost;

    /**
     * @return The microsoft routing hostname with port if applicable for web storage in the primary location.
     * 
     */
    public Optional<Output<String>> primaryWebMicrosoftHost() {
        return Optional.ofNullable(this.primaryWebMicrosoftHost);
    }

    /**
     * Whether the public network access is enabled? Defaults to `true`.
     * 
     */
    @Import(name="publicNetworkAccessEnabled")
    private @Nullable Output<Boolean> publicNetworkAccessEnabled;

    /**
     * @return Whether the public network access is enabled? Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> publicNetworkAccessEnabled() {
        return Optional.ofNullable(this.publicNetworkAccessEnabled);
    }

    /**
     * The encryption type of the queue service. Possible values are `Service` and `Account`. Changing this forces a new resource to be created. Default value is `Service`.
     * 
     */
    @Import(name="queueEncryptionKeyType")
    private @Nullable Output<String> queueEncryptionKeyType;

    /**
     * @return The encryption type of the queue service. Possible values are `Service` and `Account`. Changing this forces a new resource to be created. Default value is `Service`.
     * 
     */
    public Optional<Output<String>> queueEncryptionKeyType() {
        return Optional.ofNullable(this.queueEncryptionKeyType);
    }

    /**
     * A `queue_properties` block as defined below.
     * 
     * &gt; **NOTE:** `queue_properties` cannot be set when the `account_kind` is set to `BlobStorage`
     * 
     */
    @Import(name="queueProperties")
    private @Nullable Output<AccountQueuePropertiesArgs> queueProperties;

    /**
     * @return A `queue_properties` block as defined below.
     * 
     * &gt; **NOTE:** `queue_properties` cannot be set when the `account_kind` is set to `BlobStorage`
     * 
     */
    public Optional<Output<AccountQueuePropertiesArgs>> queueProperties() {
        return Optional.ofNullable(this.queueProperties);
    }

    /**
     * The name of the resource group in which to create the storage account. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the storage account. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * A `routing` block as defined below.
     * 
     */
    @Import(name="routing")
    private @Nullable Output<AccountRoutingArgs> routing;

    /**
     * @return A `routing` block as defined below.
     * 
     */
    public Optional<Output<AccountRoutingArgs>> routing() {
        return Optional.ofNullable(this.routing);
    }

    /**
     * A `sas_policy` block as defined below.
     * 
     */
    @Import(name="sasPolicy")
    private @Nullable Output<AccountSasPolicyArgs> sasPolicy;

    /**
     * @return A `sas_policy` block as defined below.
     * 
     */
    public Optional<Output<AccountSasPolicyArgs>> sasPolicy() {
        return Optional.ofNullable(this.sasPolicy);
    }

    /**
     * The secondary access key for the storage account.
     * 
     */
    @Import(name="secondaryAccessKey")
    private @Nullable Output<String> secondaryAccessKey;

    /**
     * @return The secondary access key for the storage account.
     * 
     */
    public Optional<Output<String>> secondaryAccessKey() {
        return Optional.ofNullable(this.secondaryAccessKey);
    }

    /**
     * The connection string associated with the secondary blob location.
     * 
     */
    @Import(name="secondaryBlobConnectionString")
    private @Nullable Output<String> secondaryBlobConnectionString;

    /**
     * @return The connection string associated with the secondary blob location.
     * 
     */
    public Optional<Output<String>> secondaryBlobConnectionString() {
        return Optional.ofNullable(this.secondaryBlobConnectionString);
    }

    /**
     * The endpoint URL for blob storage in the secondary location.
     * 
     */
    @Import(name="secondaryBlobEndpoint")
    private @Nullable Output<String> secondaryBlobEndpoint;

    /**
     * @return The endpoint URL for blob storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryBlobEndpoint() {
        return Optional.ofNullable(this.secondaryBlobEndpoint);
    }

    /**
     * The hostname with port if applicable for blob storage in the secondary location.
     * 
     */
    @Import(name="secondaryBlobHost")
    private @Nullable Output<String> secondaryBlobHost;

    /**
     * @return The hostname with port if applicable for blob storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryBlobHost() {
        return Optional.ofNullable(this.secondaryBlobHost);
    }

    /**
     * The internet routing endpoint URL for blob storage in the secondary location.
     * 
     */
    @Import(name="secondaryBlobInternetEndpoint")
    private @Nullable Output<String> secondaryBlobInternetEndpoint;

    /**
     * @return The internet routing endpoint URL for blob storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryBlobInternetEndpoint() {
        return Optional.ofNullable(this.secondaryBlobInternetEndpoint);
    }

    /**
     * The internet routing hostname with port if applicable for blob storage in the secondary location.
     * 
     */
    @Import(name="secondaryBlobInternetHost")
    private @Nullable Output<String> secondaryBlobInternetHost;

    /**
     * @return The internet routing hostname with port if applicable for blob storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryBlobInternetHost() {
        return Optional.ofNullable(this.secondaryBlobInternetHost);
    }

    /**
     * The microsoft routing endpoint URL for blob storage in the secondary location.
     * 
     */
    @Import(name="secondaryBlobMicrosoftEndpoint")
    private @Nullable Output<String> secondaryBlobMicrosoftEndpoint;

    /**
     * @return The microsoft routing endpoint URL for blob storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryBlobMicrosoftEndpoint() {
        return Optional.ofNullable(this.secondaryBlobMicrosoftEndpoint);
    }

    /**
     * The microsoft routing hostname with port if applicable for blob storage in the secondary location.
     * 
     */
    @Import(name="secondaryBlobMicrosoftHost")
    private @Nullable Output<String> secondaryBlobMicrosoftHost;

    /**
     * @return The microsoft routing hostname with port if applicable for blob storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryBlobMicrosoftHost() {
        return Optional.ofNullable(this.secondaryBlobMicrosoftHost);
    }

    /**
     * The connection string associated with the secondary location.
     * 
     */
    @Import(name="secondaryConnectionString")
    private @Nullable Output<String> secondaryConnectionString;

    /**
     * @return The connection string associated with the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryConnectionString() {
        return Optional.ofNullable(this.secondaryConnectionString);
    }

    /**
     * The endpoint URL for DFS storage in the secondary location.
     * 
     */
    @Import(name="secondaryDfsEndpoint")
    private @Nullable Output<String> secondaryDfsEndpoint;

    /**
     * @return The endpoint URL for DFS storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryDfsEndpoint() {
        return Optional.ofNullable(this.secondaryDfsEndpoint);
    }

    /**
     * The hostname with port if applicable for DFS storage in the secondary location.
     * 
     */
    @Import(name="secondaryDfsHost")
    private @Nullable Output<String> secondaryDfsHost;

    /**
     * @return The hostname with port if applicable for DFS storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryDfsHost() {
        return Optional.ofNullable(this.secondaryDfsHost);
    }

    /**
     * The internet routing endpoint URL for DFS storage in the secondary location.
     * 
     */
    @Import(name="secondaryDfsInternetEndpoint")
    private @Nullable Output<String> secondaryDfsInternetEndpoint;

    /**
     * @return The internet routing endpoint URL for DFS storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryDfsInternetEndpoint() {
        return Optional.ofNullable(this.secondaryDfsInternetEndpoint);
    }

    /**
     * The internet routing hostname with port if applicable for DFS storage in the secondary location.
     * 
     */
    @Import(name="secondaryDfsInternetHost")
    private @Nullable Output<String> secondaryDfsInternetHost;

    /**
     * @return The internet routing hostname with port if applicable for DFS storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryDfsInternetHost() {
        return Optional.ofNullable(this.secondaryDfsInternetHost);
    }

    /**
     * The microsoft routing endpoint URL for DFS storage in the secondary location.
     * 
     */
    @Import(name="secondaryDfsMicrosoftEndpoint")
    private @Nullable Output<String> secondaryDfsMicrosoftEndpoint;

    /**
     * @return The microsoft routing endpoint URL for DFS storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryDfsMicrosoftEndpoint() {
        return Optional.ofNullable(this.secondaryDfsMicrosoftEndpoint);
    }

    /**
     * The microsoft routing hostname with port if applicable for DFS storage in the secondary location.
     * 
     */
    @Import(name="secondaryDfsMicrosoftHost")
    private @Nullable Output<String> secondaryDfsMicrosoftHost;

    /**
     * @return The microsoft routing hostname with port if applicable for DFS storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryDfsMicrosoftHost() {
        return Optional.ofNullable(this.secondaryDfsMicrosoftHost);
    }

    /**
     * The endpoint URL for file storage in the secondary location.
     * 
     */
    @Import(name="secondaryFileEndpoint")
    private @Nullable Output<String> secondaryFileEndpoint;

    /**
     * @return The endpoint URL for file storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryFileEndpoint() {
        return Optional.ofNullable(this.secondaryFileEndpoint);
    }

    /**
     * The hostname with port if applicable for file storage in the secondary location.
     * 
     */
    @Import(name="secondaryFileHost")
    private @Nullable Output<String> secondaryFileHost;

    /**
     * @return The hostname with port if applicable for file storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryFileHost() {
        return Optional.ofNullable(this.secondaryFileHost);
    }

    /**
     * The internet routing endpoint URL for file storage in the secondary location.
     * 
     */
    @Import(name="secondaryFileInternetEndpoint")
    private @Nullable Output<String> secondaryFileInternetEndpoint;

    /**
     * @return The internet routing endpoint URL for file storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryFileInternetEndpoint() {
        return Optional.ofNullable(this.secondaryFileInternetEndpoint);
    }

    /**
     * The internet routing hostname with port if applicable for file storage in the secondary location.
     * 
     */
    @Import(name="secondaryFileInternetHost")
    private @Nullable Output<String> secondaryFileInternetHost;

    /**
     * @return The internet routing hostname with port if applicable for file storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryFileInternetHost() {
        return Optional.ofNullable(this.secondaryFileInternetHost);
    }

    /**
     * The microsoft routing endpoint URL for file storage in the secondary location.
     * 
     */
    @Import(name="secondaryFileMicrosoftEndpoint")
    private @Nullable Output<String> secondaryFileMicrosoftEndpoint;

    /**
     * @return The microsoft routing endpoint URL for file storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryFileMicrosoftEndpoint() {
        return Optional.ofNullable(this.secondaryFileMicrosoftEndpoint);
    }

    /**
     * The microsoft routing hostname with port if applicable for file storage in the secondary location.
     * 
     */
    @Import(name="secondaryFileMicrosoftHost")
    private @Nullable Output<String> secondaryFileMicrosoftHost;

    /**
     * @return The microsoft routing hostname with port if applicable for file storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryFileMicrosoftHost() {
        return Optional.ofNullable(this.secondaryFileMicrosoftHost);
    }

    /**
     * The secondary location of the storage account.
     * 
     */
    @Import(name="secondaryLocation")
    private @Nullable Output<String> secondaryLocation;

    /**
     * @return The secondary location of the storage account.
     * 
     */
    public Optional<Output<String>> secondaryLocation() {
        return Optional.ofNullable(this.secondaryLocation);
    }

    /**
     * The endpoint URL for queue storage in the secondary location.
     * 
     */
    @Import(name="secondaryQueueEndpoint")
    private @Nullable Output<String> secondaryQueueEndpoint;

    /**
     * @return The endpoint URL for queue storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryQueueEndpoint() {
        return Optional.ofNullable(this.secondaryQueueEndpoint);
    }

    /**
     * The hostname with port if applicable for queue storage in the secondary location.
     * 
     */
    @Import(name="secondaryQueueHost")
    private @Nullable Output<String> secondaryQueueHost;

    /**
     * @return The hostname with port if applicable for queue storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryQueueHost() {
        return Optional.ofNullable(this.secondaryQueueHost);
    }

    /**
     * The microsoft routing endpoint URL for queue storage in the secondary location.
     * 
     */
    @Import(name="secondaryQueueMicrosoftEndpoint")
    private @Nullable Output<String> secondaryQueueMicrosoftEndpoint;

    /**
     * @return The microsoft routing endpoint URL for queue storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryQueueMicrosoftEndpoint() {
        return Optional.ofNullable(this.secondaryQueueMicrosoftEndpoint);
    }

    /**
     * The microsoft routing hostname with port if applicable for queue storage in the secondary location.
     * 
     */
    @Import(name="secondaryQueueMicrosoftHost")
    private @Nullable Output<String> secondaryQueueMicrosoftHost;

    /**
     * @return The microsoft routing hostname with port if applicable for queue storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryQueueMicrosoftHost() {
        return Optional.ofNullable(this.secondaryQueueMicrosoftHost);
    }

    /**
     * The endpoint URL for table storage in the secondary location.
     * 
     */
    @Import(name="secondaryTableEndpoint")
    private @Nullable Output<String> secondaryTableEndpoint;

    /**
     * @return The endpoint URL for table storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryTableEndpoint() {
        return Optional.ofNullable(this.secondaryTableEndpoint);
    }

    /**
     * The hostname with port if applicable for table storage in the secondary location.
     * 
     */
    @Import(name="secondaryTableHost")
    private @Nullable Output<String> secondaryTableHost;

    /**
     * @return The hostname with port if applicable for table storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryTableHost() {
        return Optional.ofNullable(this.secondaryTableHost);
    }

    /**
     * The microsoft routing endpoint URL for table storage in the secondary location.
     * 
     */
    @Import(name="secondaryTableMicrosoftEndpoint")
    private @Nullable Output<String> secondaryTableMicrosoftEndpoint;

    /**
     * @return The microsoft routing endpoint URL for table storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryTableMicrosoftEndpoint() {
        return Optional.ofNullable(this.secondaryTableMicrosoftEndpoint);
    }

    /**
     * The microsoft routing hostname with port if applicable for table storage in the secondary location.
     * 
     */
    @Import(name="secondaryTableMicrosoftHost")
    private @Nullable Output<String> secondaryTableMicrosoftHost;

    /**
     * @return The microsoft routing hostname with port if applicable for table storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryTableMicrosoftHost() {
        return Optional.ofNullable(this.secondaryTableMicrosoftHost);
    }

    /**
     * The endpoint URL for web storage in the secondary location.
     * 
     */
    @Import(name="secondaryWebEndpoint")
    private @Nullable Output<String> secondaryWebEndpoint;

    /**
     * @return The endpoint URL for web storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryWebEndpoint() {
        return Optional.ofNullable(this.secondaryWebEndpoint);
    }

    /**
     * The hostname with port if applicable for web storage in the secondary location.
     * 
     */
    @Import(name="secondaryWebHost")
    private @Nullable Output<String> secondaryWebHost;

    /**
     * @return The hostname with port if applicable for web storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryWebHost() {
        return Optional.ofNullable(this.secondaryWebHost);
    }

    /**
     * The internet routing endpoint URL for web storage in the secondary location.
     * 
     */
    @Import(name="secondaryWebInternetEndpoint")
    private @Nullable Output<String> secondaryWebInternetEndpoint;

    /**
     * @return The internet routing endpoint URL for web storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryWebInternetEndpoint() {
        return Optional.ofNullable(this.secondaryWebInternetEndpoint);
    }

    /**
     * The internet routing hostname with port if applicable for web storage in the secondary location.
     * 
     */
    @Import(name="secondaryWebInternetHost")
    private @Nullable Output<String> secondaryWebInternetHost;

    /**
     * @return The internet routing hostname with port if applicable for web storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryWebInternetHost() {
        return Optional.ofNullable(this.secondaryWebInternetHost);
    }

    /**
     * The microsoft routing endpoint URL for web storage in the secondary location.
     * 
     */
    @Import(name="secondaryWebMicrosoftEndpoint")
    private @Nullable Output<String> secondaryWebMicrosoftEndpoint;

    /**
     * @return The microsoft routing endpoint URL for web storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryWebMicrosoftEndpoint() {
        return Optional.ofNullable(this.secondaryWebMicrosoftEndpoint);
    }

    /**
     * The microsoft routing hostname with port if applicable for web storage in the secondary location.
     * 
     */
    @Import(name="secondaryWebMicrosoftHost")
    private @Nullable Output<String> secondaryWebMicrosoftHost;

    /**
     * @return The microsoft routing hostname with port if applicable for web storage in the secondary location.
     * 
     */
    public Optional<Output<String>> secondaryWebMicrosoftHost() {
        return Optional.ofNullable(this.secondaryWebMicrosoftHost);
    }

    /**
     * Boolean, enable SFTP for the storage account
     * 
     * &gt; **NOTE:** SFTP support requires `is_hns_enabled` set to `true`. [More information on SFTP support can be found here](https://learn.microsoft.com/azure/storage/blobs/secure-file-transfer-protocol-support). Defaults to `false`
     * 
     */
    @Import(name="sftpEnabled")
    private @Nullable Output<Boolean> sftpEnabled;

    /**
     * @return Boolean, enable SFTP for the storage account
     * 
     * &gt; **NOTE:** SFTP support requires `is_hns_enabled` set to `true`. [More information on SFTP support can be found here](https://learn.microsoft.com/azure/storage/blobs/secure-file-transfer-protocol-support). Defaults to `false`
     * 
     */
    public Optional<Output<Boolean>> sftpEnabled() {
        return Optional.ofNullable(this.sftpEnabled);
    }

    /**
     * A `share_properties` block as defined below.
     * 
     */
    @Import(name="shareProperties")
    private @Nullable Output<AccountSharePropertiesArgs> shareProperties;

    /**
     * @return A `share_properties` block as defined below.
     * 
     */
    public Optional<Output<AccountSharePropertiesArgs>> shareProperties() {
        return Optional.ofNullable(this.shareProperties);
    }

    @Import(name="sharedAccessKeyEnabled")
    private @Nullable Output<Boolean> sharedAccessKeyEnabled;

    public Optional<Output<Boolean>> sharedAccessKeyEnabled() {
        return Optional.ofNullable(this.sharedAccessKeyEnabled);
    }

    /**
     * A `static_website` block as defined below.
     * 
     * &gt; **NOTE:** `static_website` can only be set when the `account_kind` is set to `StorageV2` or `BlockBlobStorage`.
     * 
     */
    @Import(name="staticWebsite")
    private @Nullable Output<AccountStaticWebsiteArgs> staticWebsite;

    /**
     * @return A `static_website` block as defined below.
     * 
     * &gt; **NOTE:** `static_website` can only be set when the `account_kind` is set to `StorageV2` or `BlockBlobStorage`.
     * 
     */
    public Optional<Output<AccountStaticWebsiteArgs>> staticWebsite() {
        return Optional.ofNullable(this.staticWebsite);
    }

    /**
     * The encryption type of the table service. Possible values are `Service` and `Account`. Changing this forces a new resource to be created. Default value is `Service`.
     * 
     * &gt; **NOTE:** For the `queue_encryption_key_type` and `table_encryption_key_type`, the `Account` key type is only allowed when the `account_kind` is set to `StorageV2`
     * 
     */
    @Import(name="tableEncryptionKeyType")
    private @Nullable Output<String> tableEncryptionKeyType;

    /**
     * @return The encryption type of the table service. Possible values are `Service` and `Account`. Changing this forces a new resource to be created. Default value is `Service`.
     * 
     * &gt; **NOTE:** For the `queue_encryption_key_type` and `table_encryption_key_type`, the `Account` key type is only allowed when the `account_kind` is set to `StorageV2`
     * 
     */
    public Optional<Output<String>> tableEncryptionKeyType() {
        return Optional.ofNullable(this.tableEncryptionKeyType);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private AccountState() {}

    private AccountState(AccountState $) {
        this.accessTier = $.accessTier;
        this.accountKind = $.accountKind;
        this.accountReplicationType = $.accountReplicationType;
        this.accountTier = $.accountTier;
        this.allowNestedItemsToBePublic = $.allowNestedItemsToBePublic;
        this.allowedCopyScope = $.allowedCopyScope;
        this.azureFilesAuthentication = $.azureFilesAuthentication;
        this.blobProperties = $.blobProperties;
        this.crossTenantReplicationEnabled = $.crossTenantReplicationEnabled;
        this.customDomain = $.customDomain;
        this.customerManagedKey = $.customerManagedKey;
        this.defaultToOauthAuthentication = $.defaultToOauthAuthentication;
        this.edgeZone = $.edgeZone;
        this.enableHttpsTrafficOnly = $.enableHttpsTrafficOnly;
        this.identity = $.identity;
        this.immutabilityPolicy = $.immutabilityPolicy;
        this.infrastructureEncryptionEnabled = $.infrastructureEncryptionEnabled;
        this.isHnsEnabled = $.isHnsEnabled;
        this.largeFileShareEnabled = $.largeFileShareEnabled;
        this.location = $.location;
        this.minTlsVersion = $.minTlsVersion;
        this.name = $.name;
        this.networkRules = $.networkRules;
        this.nfsv3Enabled = $.nfsv3Enabled;
        this.primaryAccessKey = $.primaryAccessKey;
        this.primaryBlobConnectionString = $.primaryBlobConnectionString;
        this.primaryBlobEndpoint = $.primaryBlobEndpoint;
        this.primaryBlobHost = $.primaryBlobHost;
        this.primaryBlobInternetEndpoint = $.primaryBlobInternetEndpoint;
        this.primaryBlobInternetHost = $.primaryBlobInternetHost;
        this.primaryBlobMicrosoftEndpoint = $.primaryBlobMicrosoftEndpoint;
        this.primaryBlobMicrosoftHost = $.primaryBlobMicrosoftHost;
        this.primaryConnectionString = $.primaryConnectionString;
        this.primaryDfsEndpoint = $.primaryDfsEndpoint;
        this.primaryDfsHost = $.primaryDfsHost;
        this.primaryDfsInternetEndpoint = $.primaryDfsInternetEndpoint;
        this.primaryDfsInternetHost = $.primaryDfsInternetHost;
        this.primaryDfsMicrosoftEndpoint = $.primaryDfsMicrosoftEndpoint;
        this.primaryDfsMicrosoftHost = $.primaryDfsMicrosoftHost;
        this.primaryFileEndpoint = $.primaryFileEndpoint;
        this.primaryFileHost = $.primaryFileHost;
        this.primaryFileInternetEndpoint = $.primaryFileInternetEndpoint;
        this.primaryFileInternetHost = $.primaryFileInternetHost;
        this.primaryFileMicrosoftEndpoint = $.primaryFileMicrosoftEndpoint;
        this.primaryFileMicrosoftHost = $.primaryFileMicrosoftHost;
        this.primaryLocation = $.primaryLocation;
        this.primaryQueueEndpoint = $.primaryQueueEndpoint;
        this.primaryQueueHost = $.primaryQueueHost;
        this.primaryQueueMicrosoftEndpoint = $.primaryQueueMicrosoftEndpoint;
        this.primaryQueueMicrosoftHost = $.primaryQueueMicrosoftHost;
        this.primaryTableEndpoint = $.primaryTableEndpoint;
        this.primaryTableHost = $.primaryTableHost;
        this.primaryTableMicrosoftEndpoint = $.primaryTableMicrosoftEndpoint;
        this.primaryTableMicrosoftHost = $.primaryTableMicrosoftHost;
        this.primaryWebEndpoint = $.primaryWebEndpoint;
        this.primaryWebHost = $.primaryWebHost;
        this.primaryWebInternetEndpoint = $.primaryWebInternetEndpoint;
        this.primaryWebInternetHost = $.primaryWebInternetHost;
        this.primaryWebMicrosoftEndpoint = $.primaryWebMicrosoftEndpoint;
        this.primaryWebMicrosoftHost = $.primaryWebMicrosoftHost;
        this.publicNetworkAccessEnabled = $.publicNetworkAccessEnabled;
        this.queueEncryptionKeyType = $.queueEncryptionKeyType;
        this.queueProperties = $.queueProperties;
        this.resourceGroupName = $.resourceGroupName;
        this.routing = $.routing;
        this.sasPolicy = $.sasPolicy;
        this.secondaryAccessKey = $.secondaryAccessKey;
        this.secondaryBlobConnectionString = $.secondaryBlobConnectionString;
        this.secondaryBlobEndpoint = $.secondaryBlobEndpoint;
        this.secondaryBlobHost = $.secondaryBlobHost;
        this.secondaryBlobInternetEndpoint = $.secondaryBlobInternetEndpoint;
        this.secondaryBlobInternetHost = $.secondaryBlobInternetHost;
        this.secondaryBlobMicrosoftEndpoint = $.secondaryBlobMicrosoftEndpoint;
        this.secondaryBlobMicrosoftHost = $.secondaryBlobMicrosoftHost;
        this.secondaryConnectionString = $.secondaryConnectionString;
        this.secondaryDfsEndpoint = $.secondaryDfsEndpoint;
        this.secondaryDfsHost = $.secondaryDfsHost;
        this.secondaryDfsInternetEndpoint = $.secondaryDfsInternetEndpoint;
        this.secondaryDfsInternetHost = $.secondaryDfsInternetHost;
        this.secondaryDfsMicrosoftEndpoint = $.secondaryDfsMicrosoftEndpoint;
        this.secondaryDfsMicrosoftHost = $.secondaryDfsMicrosoftHost;
        this.secondaryFileEndpoint = $.secondaryFileEndpoint;
        this.secondaryFileHost = $.secondaryFileHost;
        this.secondaryFileInternetEndpoint = $.secondaryFileInternetEndpoint;
        this.secondaryFileInternetHost = $.secondaryFileInternetHost;
        this.secondaryFileMicrosoftEndpoint = $.secondaryFileMicrosoftEndpoint;
        this.secondaryFileMicrosoftHost = $.secondaryFileMicrosoftHost;
        this.secondaryLocation = $.secondaryLocation;
        this.secondaryQueueEndpoint = $.secondaryQueueEndpoint;
        this.secondaryQueueHost = $.secondaryQueueHost;
        this.secondaryQueueMicrosoftEndpoint = $.secondaryQueueMicrosoftEndpoint;
        this.secondaryQueueMicrosoftHost = $.secondaryQueueMicrosoftHost;
        this.secondaryTableEndpoint = $.secondaryTableEndpoint;
        this.secondaryTableHost = $.secondaryTableHost;
        this.secondaryTableMicrosoftEndpoint = $.secondaryTableMicrosoftEndpoint;
        this.secondaryTableMicrosoftHost = $.secondaryTableMicrosoftHost;
        this.secondaryWebEndpoint = $.secondaryWebEndpoint;
        this.secondaryWebHost = $.secondaryWebHost;
        this.secondaryWebInternetEndpoint = $.secondaryWebInternetEndpoint;
        this.secondaryWebInternetHost = $.secondaryWebInternetHost;
        this.secondaryWebMicrosoftEndpoint = $.secondaryWebMicrosoftEndpoint;
        this.secondaryWebMicrosoftHost = $.secondaryWebMicrosoftHost;
        this.sftpEnabled = $.sftpEnabled;
        this.shareProperties = $.shareProperties;
        this.sharedAccessKeyEnabled = $.sharedAccessKeyEnabled;
        this.staticWebsite = $.staticWebsite;
        this.tableEncryptionKeyType = $.tableEncryptionKeyType;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountState $;

        public Builder() {
            $ = new AccountState();
        }

        public Builder(AccountState defaults) {
            $ = new AccountState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessTier Defines the access tier for `BlobStorage`, `FileStorage` and `StorageV2` accounts. Valid options are `Hot` and `Cool`, defaults to `Hot`.
         * 
         * @return builder
         * 
         */
        public Builder accessTier(@Nullable Output<String> accessTier) {
            $.accessTier = accessTier;
            return this;
        }

        /**
         * @param accessTier Defines the access tier for `BlobStorage`, `FileStorage` and `StorageV2` accounts. Valid options are `Hot` and `Cool`, defaults to `Hot`.
         * 
         * @return builder
         * 
         */
        public Builder accessTier(String accessTier) {
            return accessTier(Output.of(accessTier));
        }

        /**
         * @param accountKind Defines the Kind of account. Valid options are `BlobStorage`, `BlockBlobStorage`, `FileStorage`, `Storage` and `StorageV2`. Defaults to `StorageV2`.
         * 
         * &gt; **NOTE:** Changing the `account_kind` value from `Storage` to `StorageV2` will not trigger a force new on the storage account, it will only upgrade the existing storage account from `Storage` to `StorageV2` keeping the existing storage account in place.
         * 
         * @return builder
         * 
         */
        public Builder accountKind(@Nullable Output<String> accountKind) {
            $.accountKind = accountKind;
            return this;
        }

        /**
         * @param accountKind Defines the Kind of account. Valid options are `BlobStorage`, `BlockBlobStorage`, `FileStorage`, `Storage` and `StorageV2`. Defaults to `StorageV2`.
         * 
         * &gt; **NOTE:** Changing the `account_kind` value from `Storage` to `StorageV2` will not trigger a force new on the storage account, it will only upgrade the existing storage account from `Storage` to `StorageV2` keeping the existing storage account in place.
         * 
         * @return builder
         * 
         */
        public Builder accountKind(String accountKind) {
            return accountKind(Output.of(accountKind));
        }

        /**
         * @param accountReplicationType Defines the type of replication to use for this storage account. Valid options are `LRS`, `GRS`, `RAGRS`, `ZRS`, `GZRS` and `RAGZRS`.
         * 
         * @return builder
         * 
         */
        public Builder accountReplicationType(@Nullable Output<String> accountReplicationType) {
            $.accountReplicationType = accountReplicationType;
            return this;
        }

        /**
         * @param accountReplicationType Defines the type of replication to use for this storage account. Valid options are `LRS`, `GRS`, `RAGRS`, `ZRS`, `GZRS` and `RAGZRS`.
         * 
         * @return builder
         * 
         */
        public Builder accountReplicationType(String accountReplicationType) {
            return accountReplicationType(Output.of(accountReplicationType));
        }

        /**
         * @param accountTier Defines the Tier to use for this storage account. Valid options are `Standard` and `Premium`. For `BlockBlobStorage` and `FileStorage` accounts only `Premium` is valid. Changing this forces a new resource to be created.
         * 
         * &gt; **NOTE:** Blobs with a tier of `Premium` are of account kind `StorageV2`.
         * 
         * @return builder
         * 
         */
        public Builder accountTier(@Nullable Output<String> accountTier) {
            $.accountTier = accountTier;
            return this;
        }

        /**
         * @param accountTier Defines the Tier to use for this storage account. Valid options are `Standard` and `Premium`. For `BlockBlobStorage` and `FileStorage` accounts only `Premium` is valid. Changing this forces a new resource to be created.
         * 
         * &gt; **NOTE:** Blobs with a tier of `Premium` are of account kind `StorageV2`.
         * 
         * @return builder
         * 
         */
        public Builder accountTier(String accountTier) {
            return accountTier(Output.of(accountTier));
        }

        /**
         * @param allowNestedItemsToBePublic Allow or disallow nested items within this Account to opt into being public. Defaults to `true`.
         * 
         * &gt; **NOTE:** At this time `allow_nested_items_to_be_public` is only supported in the Public Cloud, China Cloud, and US Government Cloud.
         * 
         * @return builder
         * 
         */
        public Builder allowNestedItemsToBePublic(@Nullable Output<Boolean> allowNestedItemsToBePublic) {
            $.allowNestedItemsToBePublic = allowNestedItemsToBePublic;
            return this;
        }

        /**
         * @param allowNestedItemsToBePublic Allow or disallow nested items within this Account to opt into being public. Defaults to `true`.
         * 
         * &gt; **NOTE:** At this time `allow_nested_items_to_be_public` is only supported in the Public Cloud, China Cloud, and US Government Cloud.
         * 
         * @return builder
         * 
         */
        public Builder allowNestedItemsToBePublic(Boolean allowNestedItemsToBePublic) {
            return allowNestedItemsToBePublic(Output.of(allowNestedItemsToBePublic));
        }

        /**
         * @param allowedCopyScope Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet. Possible values are `AAD` and `PrivateLink`.
         * 
         * @return builder
         * 
         */
        public Builder allowedCopyScope(@Nullable Output<String> allowedCopyScope) {
            $.allowedCopyScope = allowedCopyScope;
            return this;
        }

        /**
         * @param allowedCopyScope Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet. Possible values are `AAD` and `PrivateLink`.
         * 
         * @return builder
         * 
         */
        public Builder allowedCopyScope(String allowedCopyScope) {
            return allowedCopyScope(Output.of(allowedCopyScope));
        }

        /**
         * @param azureFilesAuthentication A `azure_files_authentication` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder azureFilesAuthentication(@Nullable Output<AccountAzureFilesAuthenticationArgs> azureFilesAuthentication) {
            $.azureFilesAuthentication = azureFilesAuthentication;
            return this;
        }

        /**
         * @param azureFilesAuthentication A `azure_files_authentication` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder azureFilesAuthentication(AccountAzureFilesAuthenticationArgs azureFilesAuthentication) {
            return azureFilesAuthentication(Output.of(azureFilesAuthentication));
        }

        /**
         * @param blobProperties A `blob_properties` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder blobProperties(@Nullable Output<AccountBlobPropertiesArgs> blobProperties) {
            $.blobProperties = blobProperties;
            return this;
        }

        /**
         * @param blobProperties A `blob_properties` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder blobProperties(AccountBlobPropertiesArgs blobProperties) {
            return blobProperties(Output.of(blobProperties));
        }

        /**
         * @param crossTenantReplicationEnabled Should cross Tenant replication be enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder crossTenantReplicationEnabled(@Nullable Output<Boolean> crossTenantReplicationEnabled) {
            $.crossTenantReplicationEnabled = crossTenantReplicationEnabled;
            return this;
        }

        /**
         * @param crossTenantReplicationEnabled Should cross Tenant replication be enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder crossTenantReplicationEnabled(Boolean crossTenantReplicationEnabled) {
            return crossTenantReplicationEnabled(Output.of(crossTenantReplicationEnabled));
        }

        /**
         * @param customDomain A `custom_domain` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder customDomain(@Nullable Output<AccountCustomDomainArgs> customDomain) {
            $.customDomain = customDomain;
            return this;
        }

        /**
         * @param customDomain A `custom_domain` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder customDomain(AccountCustomDomainArgs customDomain) {
            return customDomain(Output.of(customDomain));
        }

        /**
         * @param customerManagedKey A `customer_managed_key` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder customerManagedKey(@Nullable Output<AccountCustomerManagedKeyArgs> customerManagedKey) {
            $.customerManagedKey = customerManagedKey;
            return this;
        }

        /**
         * @param customerManagedKey A `customer_managed_key` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder customerManagedKey(AccountCustomerManagedKeyArgs customerManagedKey) {
            return customerManagedKey(Output.of(customerManagedKey));
        }

        /**
         * @param defaultToOauthAuthentication Default to Azure Active Directory authorization in the Azure portal when accessing the Storage Account. The default value is `false`
         * 
         * @return builder
         * 
         */
        public Builder defaultToOauthAuthentication(@Nullable Output<Boolean> defaultToOauthAuthentication) {
            $.defaultToOauthAuthentication = defaultToOauthAuthentication;
            return this;
        }

        /**
         * @param defaultToOauthAuthentication Default to Azure Active Directory authorization in the Azure portal when accessing the Storage Account. The default value is `false`
         * 
         * @return builder
         * 
         */
        public Builder defaultToOauthAuthentication(Boolean defaultToOauthAuthentication) {
            return defaultToOauthAuthentication(Output.of(defaultToOauthAuthentication));
        }

        /**
         * @param edgeZone Specifies the Edge Zone within the Azure Region where this Storage Account should exist. Changing this forces a new Storage Account to be created.
         * 
         * @return builder
         * 
         */
        public Builder edgeZone(@Nullable Output<String> edgeZone) {
            $.edgeZone = edgeZone;
            return this;
        }

        /**
         * @param edgeZone Specifies the Edge Zone within the Azure Region where this Storage Account should exist. Changing this forces a new Storage Account to be created.
         * 
         * @return builder
         * 
         */
        public Builder edgeZone(String edgeZone) {
            return edgeZone(Output.of(edgeZone));
        }

        /**
         * @param enableHttpsTrafficOnly Boolean flag which forces HTTPS if enabled, see [here](https://docs.microsoft.com/azure/storage/storage-require-secure-transfer/) for more information. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enableHttpsTrafficOnly(@Nullable Output<Boolean> enableHttpsTrafficOnly) {
            $.enableHttpsTrafficOnly = enableHttpsTrafficOnly;
            return this;
        }

        /**
         * @param enableHttpsTrafficOnly Boolean flag which forces HTTPS if enabled, see [here](https://docs.microsoft.com/azure/storage/storage-require-secure-transfer/) for more information. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enableHttpsTrafficOnly(Boolean enableHttpsTrafficOnly) {
            return enableHttpsTrafficOnly(Output.of(enableHttpsTrafficOnly));
        }

        /**
         * @param identity An `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<AccountIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity An `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(AccountIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param immutabilityPolicy An `immutability_policy` block as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder immutabilityPolicy(@Nullable Output<AccountImmutabilityPolicyArgs> immutabilityPolicy) {
            $.immutabilityPolicy = immutabilityPolicy;
            return this;
        }

        /**
         * @param immutabilityPolicy An `immutability_policy` block as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder immutabilityPolicy(AccountImmutabilityPolicyArgs immutabilityPolicy) {
            return immutabilityPolicy(Output.of(immutabilityPolicy));
        }

        /**
         * @param infrastructureEncryptionEnabled Is infrastructure encryption enabled? Changing this forces a new resource to be created. Defaults to `false`.
         * 
         * &gt; **NOTE:** This can only be `true` when `account_kind` is `StorageV2` or when `account_tier` is `Premium` *and* `account_kind` is one of `BlockBlobStorage` or `FileStorage`.
         * 
         * @return builder
         * 
         */
        public Builder infrastructureEncryptionEnabled(@Nullable Output<Boolean> infrastructureEncryptionEnabled) {
            $.infrastructureEncryptionEnabled = infrastructureEncryptionEnabled;
            return this;
        }

        /**
         * @param infrastructureEncryptionEnabled Is infrastructure encryption enabled? Changing this forces a new resource to be created. Defaults to `false`.
         * 
         * &gt; **NOTE:** This can only be `true` when `account_kind` is `StorageV2` or when `account_tier` is `Premium` *and* `account_kind` is one of `BlockBlobStorage` or `FileStorage`.
         * 
         * @return builder
         * 
         */
        public Builder infrastructureEncryptionEnabled(Boolean infrastructureEncryptionEnabled) {
            return infrastructureEncryptionEnabled(Output.of(infrastructureEncryptionEnabled));
        }

        /**
         * @param isHnsEnabled Is Hierarchical Namespace enabled? This can be used with Azure Data Lake Storage Gen 2 ([see here for more information](https://docs.microsoft.com/azure/storage/blobs/data-lake-storage-quickstart-create-account/)). Changing this forces a new resource to be created.
         * 
         * &gt; **NOTE:** This can only be `true` when `account_tier` is `Standard` or when `account_tier` is `Premium` *and* `account_kind` is `BlockBlobStorage`
         * 
         * @return builder
         * 
         */
        public Builder isHnsEnabled(@Nullable Output<Boolean> isHnsEnabled) {
            $.isHnsEnabled = isHnsEnabled;
            return this;
        }

        /**
         * @param isHnsEnabled Is Hierarchical Namespace enabled? This can be used with Azure Data Lake Storage Gen 2 ([see here for more information](https://docs.microsoft.com/azure/storage/blobs/data-lake-storage-quickstart-create-account/)). Changing this forces a new resource to be created.
         * 
         * &gt; **NOTE:** This can only be `true` when `account_tier` is `Standard` or when `account_tier` is `Premium` *and* `account_kind` is `BlockBlobStorage`
         * 
         * @return builder
         * 
         */
        public Builder isHnsEnabled(Boolean isHnsEnabled) {
            return isHnsEnabled(Output.of(isHnsEnabled));
        }

        /**
         * @param largeFileShareEnabled Is Large File Share Enabled?
         * 
         * @return builder
         * 
         */
        public Builder largeFileShareEnabled(@Nullable Output<Boolean> largeFileShareEnabled) {
            $.largeFileShareEnabled = largeFileShareEnabled;
            return this;
        }

        /**
         * @param largeFileShareEnabled Is Large File Share Enabled?
         * 
         * @return builder
         * 
         */
        public Builder largeFileShareEnabled(Boolean largeFileShareEnabled) {
            return largeFileShareEnabled(Output.of(largeFileShareEnabled));
        }

        /**
         * @param location Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param minTlsVersion The minimum supported TLS version for the storage account. Possible values are `TLS1_0`, `TLS1_1`, and `TLS1_2`. Defaults to `TLS1_2` for new storage accounts.
         * 
         * &gt; **NOTE:** At this time `min_tls_version` is only supported in the Public Cloud, China Cloud, and US Government Cloud.
         * 
         * @return builder
         * 
         */
        public Builder minTlsVersion(@Nullable Output<String> minTlsVersion) {
            $.minTlsVersion = minTlsVersion;
            return this;
        }

        /**
         * @param minTlsVersion The minimum supported TLS version for the storage account. Possible values are `TLS1_0`, `TLS1_1`, and `TLS1_2`. Defaults to `TLS1_2` for new storage accounts.
         * 
         * &gt; **NOTE:** At this time `min_tls_version` is only supported in the Public Cloud, China Cloud, and US Government Cloud.
         * 
         * @return builder
         * 
         */
        public Builder minTlsVersion(String minTlsVersion) {
            return minTlsVersion(Output.of(minTlsVersion));
        }

        /**
         * @param name Specifies the name of the storage account. Only lowercase Alphanumeric characters allowed. Changing this forces a new resource to be created. This must be unique across the entire Azure service, not just within the resource group.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the storage account. Only lowercase Alphanumeric characters allowed. Changing this forces a new resource to be created. This must be unique across the entire Azure service, not just within the resource group.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkRules A `network_rules` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder networkRules(@Nullable Output<AccountNetworkRulesArgs> networkRules) {
            $.networkRules = networkRules;
            return this;
        }

        /**
         * @param networkRules A `network_rules` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder networkRules(AccountNetworkRulesArgs networkRules) {
            return networkRules(Output.of(networkRules));
        }

        /**
         * @param nfsv3Enabled Is NFSv3 protocol enabled? Changing this forces a new resource to be created. Defaults to `false`.
         * 
         * &gt; **NOTE:** This can only be `true` when `account_tier` is `Standard` and `account_kind` is `StorageV2`, or `account_tier` is `Premium` and `account_kind` is `BlockBlobStorage`. Additionally, the `is_hns_enabled` is `true` and `account_replication_type` must be `LRS` or `RAGRS`.
         * 
         * @return builder
         * 
         */
        public Builder nfsv3Enabled(@Nullable Output<Boolean> nfsv3Enabled) {
            $.nfsv3Enabled = nfsv3Enabled;
            return this;
        }

        /**
         * @param nfsv3Enabled Is NFSv3 protocol enabled? Changing this forces a new resource to be created. Defaults to `false`.
         * 
         * &gt; **NOTE:** This can only be `true` when `account_tier` is `Standard` and `account_kind` is `StorageV2`, or `account_tier` is `Premium` and `account_kind` is `BlockBlobStorage`. Additionally, the `is_hns_enabled` is `true` and `account_replication_type` must be `LRS` or `RAGRS`.
         * 
         * @return builder
         * 
         */
        public Builder nfsv3Enabled(Boolean nfsv3Enabled) {
            return nfsv3Enabled(Output.of(nfsv3Enabled));
        }

        /**
         * @param primaryAccessKey The primary access key for the storage account.
         * 
         * @return builder
         * 
         */
        public Builder primaryAccessKey(@Nullable Output<String> primaryAccessKey) {
            $.primaryAccessKey = primaryAccessKey;
            return this;
        }

        /**
         * @param primaryAccessKey The primary access key for the storage account.
         * 
         * @return builder
         * 
         */
        public Builder primaryAccessKey(String primaryAccessKey) {
            return primaryAccessKey(Output.of(primaryAccessKey));
        }

        /**
         * @param primaryBlobConnectionString The connection string associated with the primary blob location.
         * 
         * @return builder
         * 
         */
        public Builder primaryBlobConnectionString(@Nullable Output<String> primaryBlobConnectionString) {
            $.primaryBlobConnectionString = primaryBlobConnectionString;
            return this;
        }

        /**
         * @param primaryBlobConnectionString The connection string associated with the primary blob location.
         * 
         * @return builder
         * 
         */
        public Builder primaryBlobConnectionString(String primaryBlobConnectionString) {
            return primaryBlobConnectionString(Output.of(primaryBlobConnectionString));
        }

        /**
         * @param primaryBlobEndpoint The endpoint URL for blob storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryBlobEndpoint(@Nullable Output<String> primaryBlobEndpoint) {
            $.primaryBlobEndpoint = primaryBlobEndpoint;
            return this;
        }

        /**
         * @param primaryBlobEndpoint The endpoint URL for blob storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryBlobEndpoint(String primaryBlobEndpoint) {
            return primaryBlobEndpoint(Output.of(primaryBlobEndpoint));
        }

        /**
         * @param primaryBlobHost The hostname with port if applicable for blob storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryBlobHost(@Nullable Output<String> primaryBlobHost) {
            $.primaryBlobHost = primaryBlobHost;
            return this;
        }

        /**
         * @param primaryBlobHost The hostname with port if applicable for blob storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryBlobHost(String primaryBlobHost) {
            return primaryBlobHost(Output.of(primaryBlobHost));
        }

        /**
         * @param primaryBlobInternetEndpoint The internet routing endpoint URL for blob storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryBlobInternetEndpoint(@Nullable Output<String> primaryBlobInternetEndpoint) {
            $.primaryBlobInternetEndpoint = primaryBlobInternetEndpoint;
            return this;
        }

        /**
         * @param primaryBlobInternetEndpoint The internet routing endpoint URL for blob storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryBlobInternetEndpoint(String primaryBlobInternetEndpoint) {
            return primaryBlobInternetEndpoint(Output.of(primaryBlobInternetEndpoint));
        }

        /**
         * @param primaryBlobInternetHost The internet routing hostname with port if applicable for blob storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryBlobInternetHost(@Nullable Output<String> primaryBlobInternetHost) {
            $.primaryBlobInternetHost = primaryBlobInternetHost;
            return this;
        }

        /**
         * @param primaryBlobInternetHost The internet routing hostname with port if applicable for blob storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryBlobInternetHost(String primaryBlobInternetHost) {
            return primaryBlobInternetHost(Output.of(primaryBlobInternetHost));
        }

        /**
         * @param primaryBlobMicrosoftEndpoint The microsoft routing endpoint URL for blob storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryBlobMicrosoftEndpoint(@Nullable Output<String> primaryBlobMicrosoftEndpoint) {
            $.primaryBlobMicrosoftEndpoint = primaryBlobMicrosoftEndpoint;
            return this;
        }

        /**
         * @param primaryBlobMicrosoftEndpoint The microsoft routing endpoint URL for blob storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryBlobMicrosoftEndpoint(String primaryBlobMicrosoftEndpoint) {
            return primaryBlobMicrosoftEndpoint(Output.of(primaryBlobMicrosoftEndpoint));
        }

        /**
         * @param primaryBlobMicrosoftHost The microsoft routing hostname with port if applicable for blob storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryBlobMicrosoftHost(@Nullable Output<String> primaryBlobMicrosoftHost) {
            $.primaryBlobMicrosoftHost = primaryBlobMicrosoftHost;
            return this;
        }

        /**
         * @param primaryBlobMicrosoftHost The microsoft routing hostname with port if applicable for blob storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryBlobMicrosoftHost(String primaryBlobMicrosoftHost) {
            return primaryBlobMicrosoftHost(Output.of(primaryBlobMicrosoftHost));
        }

        /**
         * @param primaryConnectionString The connection string associated with the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryConnectionString(@Nullable Output<String> primaryConnectionString) {
            $.primaryConnectionString = primaryConnectionString;
            return this;
        }

        /**
         * @param primaryConnectionString The connection string associated with the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryConnectionString(String primaryConnectionString) {
            return primaryConnectionString(Output.of(primaryConnectionString));
        }

        /**
         * @param primaryDfsEndpoint The endpoint URL for DFS storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryDfsEndpoint(@Nullable Output<String> primaryDfsEndpoint) {
            $.primaryDfsEndpoint = primaryDfsEndpoint;
            return this;
        }

        /**
         * @param primaryDfsEndpoint The endpoint URL for DFS storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryDfsEndpoint(String primaryDfsEndpoint) {
            return primaryDfsEndpoint(Output.of(primaryDfsEndpoint));
        }

        /**
         * @param primaryDfsHost The hostname with port if applicable for DFS storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryDfsHost(@Nullable Output<String> primaryDfsHost) {
            $.primaryDfsHost = primaryDfsHost;
            return this;
        }

        /**
         * @param primaryDfsHost The hostname with port if applicable for DFS storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryDfsHost(String primaryDfsHost) {
            return primaryDfsHost(Output.of(primaryDfsHost));
        }

        /**
         * @param primaryDfsInternetEndpoint The internet routing endpoint URL for DFS storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryDfsInternetEndpoint(@Nullable Output<String> primaryDfsInternetEndpoint) {
            $.primaryDfsInternetEndpoint = primaryDfsInternetEndpoint;
            return this;
        }

        /**
         * @param primaryDfsInternetEndpoint The internet routing endpoint URL for DFS storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryDfsInternetEndpoint(String primaryDfsInternetEndpoint) {
            return primaryDfsInternetEndpoint(Output.of(primaryDfsInternetEndpoint));
        }

        /**
         * @param primaryDfsInternetHost The internet routing hostname with port if applicable for DFS storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryDfsInternetHost(@Nullable Output<String> primaryDfsInternetHost) {
            $.primaryDfsInternetHost = primaryDfsInternetHost;
            return this;
        }

        /**
         * @param primaryDfsInternetHost The internet routing hostname with port if applicable for DFS storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryDfsInternetHost(String primaryDfsInternetHost) {
            return primaryDfsInternetHost(Output.of(primaryDfsInternetHost));
        }

        /**
         * @param primaryDfsMicrosoftEndpoint The microsoft routing endpoint URL for DFS storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryDfsMicrosoftEndpoint(@Nullable Output<String> primaryDfsMicrosoftEndpoint) {
            $.primaryDfsMicrosoftEndpoint = primaryDfsMicrosoftEndpoint;
            return this;
        }

        /**
         * @param primaryDfsMicrosoftEndpoint The microsoft routing endpoint URL for DFS storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryDfsMicrosoftEndpoint(String primaryDfsMicrosoftEndpoint) {
            return primaryDfsMicrosoftEndpoint(Output.of(primaryDfsMicrosoftEndpoint));
        }

        /**
         * @param primaryDfsMicrosoftHost The microsoft routing hostname with port if applicable for DFS storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryDfsMicrosoftHost(@Nullable Output<String> primaryDfsMicrosoftHost) {
            $.primaryDfsMicrosoftHost = primaryDfsMicrosoftHost;
            return this;
        }

        /**
         * @param primaryDfsMicrosoftHost The microsoft routing hostname with port if applicable for DFS storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryDfsMicrosoftHost(String primaryDfsMicrosoftHost) {
            return primaryDfsMicrosoftHost(Output.of(primaryDfsMicrosoftHost));
        }

        /**
         * @param primaryFileEndpoint The endpoint URL for file storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryFileEndpoint(@Nullable Output<String> primaryFileEndpoint) {
            $.primaryFileEndpoint = primaryFileEndpoint;
            return this;
        }

        /**
         * @param primaryFileEndpoint The endpoint URL for file storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryFileEndpoint(String primaryFileEndpoint) {
            return primaryFileEndpoint(Output.of(primaryFileEndpoint));
        }

        /**
         * @param primaryFileHost The hostname with port if applicable for file storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryFileHost(@Nullable Output<String> primaryFileHost) {
            $.primaryFileHost = primaryFileHost;
            return this;
        }

        /**
         * @param primaryFileHost The hostname with port if applicable for file storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryFileHost(String primaryFileHost) {
            return primaryFileHost(Output.of(primaryFileHost));
        }

        /**
         * @param primaryFileInternetEndpoint The internet routing endpoint URL for file storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryFileInternetEndpoint(@Nullable Output<String> primaryFileInternetEndpoint) {
            $.primaryFileInternetEndpoint = primaryFileInternetEndpoint;
            return this;
        }

        /**
         * @param primaryFileInternetEndpoint The internet routing endpoint URL for file storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryFileInternetEndpoint(String primaryFileInternetEndpoint) {
            return primaryFileInternetEndpoint(Output.of(primaryFileInternetEndpoint));
        }

        /**
         * @param primaryFileInternetHost The internet routing hostname with port if applicable for file storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryFileInternetHost(@Nullable Output<String> primaryFileInternetHost) {
            $.primaryFileInternetHost = primaryFileInternetHost;
            return this;
        }

        /**
         * @param primaryFileInternetHost The internet routing hostname with port if applicable for file storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryFileInternetHost(String primaryFileInternetHost) {
            return primaryFileInternetHost(Output.of(primaryFileInternetHost));
        }

        /**
         * @param primaryFileMicrosoftEndpoint The microsoft routing endpoint URL for file storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryFileMicrosoftEndpoint(@Nullable Output<String> primaryFileMicrosoftEndpoint) {
            $.primaryFileMicrosoftEndpoint = primaryFileMicrosoftEndpoint;
            return this;
        }

        /**
         * @param primaryFileMicrosoftEndpoint The microsoft routing endpoint URL for file storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryFileMicrosoftEndpoint(String primaryFileMicrosoftEndpoint) {
            return primaryFileMicrosoftEndpoint(Output.of(primaryFileMicrosoftEndpoint));
        }

        /**
         * @param primaryFileMicrosoftHost The microsoft routing hostname with port if applicable for file storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryFileMicrosoftHost(@Nullable Output<String> primaryFileMicrosoftHost) {
            $.primaryFileMicrosoftHost = primaryFileMicrosoftHost;
            return this;
        }

        /**
         * @param primaryFileMicrosoftHost The microsoft routing hostname with port if applicable for file storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryFileMicrosoftHost(String primaryFileMicrosoftHost) {
            return primaryFileMicrosoftHost(Output.of(primaryFileMicrosoftHost));
        }

        /**
         * @param primaryLocation The primary location of the storage account.
         * 
         * @return builder
         * 
         */
        public Builder primaryLocation(@Nullable Output<String> primaryLocation) {
            $.primaryLocation = primaryLocation;
            return this;
        }

        /**
         * @param primaryLocation The primary location of the storage account.
         * 
         * @return builder
         * 
         */
        public Builder primaryLocation(String primaryLocation) {
            return primaryLocation(Output.of(primaryLocation));
        }

        /**
         * @param primaryQueueEndpoint The endpoint URL for queue storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryQueueEndpoint(@Nullable Output<String> primaryQueueEndpoint) {
            $.primaryQueueEndpoint = primaryQueueEndpoint;
            return this;
        }

        /**
         * @param primaryQueueEndpoint The endpoint URL for queue storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryQueueEndpoint(String primaryQueueEndpoint) {
            return primaryQueueEndpoint(Output.of(primaryQueueEndpoint));
        }

        /**
         * @param primaryQueueHost The hostname with port if applicable for queue storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryQueueHost(@Nullable Output<String> primaryQueueHost) {
            $.primaryQueueHost = primaryQueueHost;
            return this;
        }

        /**
         * @param primaryQueueHost The hostname with port if applicable for queue storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryQueueHost(String primaryQueueHost) {
            return primaryQueueHost(Output.of(primaryQueueHost));
        }

        /**
         * @param primaryQueueMicrosoftEndpoint The microsoft routing endpoint URL for queue storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryQueueMicrosoftEndpoint(@Nullable Output<String> primaryQueueMicrosoftEndpoint) {
            $.primaryQueueMicrosoftEndpoint = primaryQueueMicrosoftEndpoint;
            return this;
        }

        /**
         * @param primaryQueueMicrosoftEndpoint The microsoft routing endpoint URL for queue storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryQueueMicrosoftEndpoint(String primaryQueueMicrosoftEndpoint) {
            return primaryQueueMicrosoftEndpoint(Output.of(primaryQueueMicrosoftEndpoint));
        }

        /**
         * @param primaryQueueMicrosoftHost The microsoft routing hostname with port if applicable for queue storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryQueueMicrosoftHost(@Nullable Output<String> primaryQueueMicrosoftHost) {
            $.primaryQueueMicrosoftHost = primaryQueueMicrosoftHost;
            return this;
        }

        /**
         * @param primaryQueueMicrosoftHost The microsoft routing hostname with port if applicable for queue storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryQueueMicrosoftHost(String primaryQueueMicrosoftHost) {
            return primaryQueueMicrosoftHost(Output.of(primaryQueueMicrosoftHost));
        }

        /**
         * @param primaryTableEndpoint The endpoint URL for table storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryTableEndpoint(@Nullable Output<String> primaryTableEndpoint) {
            $.primaryTableEndpoint = primaryTableEndpoint;
            return this;
        }

        /**
         * @param primaryTableEndpoint The endpoint URL for table storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryTableEndpoint(String primaryTableEndpoint) {
            return primaryTableEndpoint(Output.of(primaryTableEndpoint));
        }

        /**
         * @param primaryTableHost The hostname with port if applicable for table storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryTableHost(@Nullable Output<String> primaryTableHost) {
            $.primaryTableHost = primaryTableHost;
            return this;
        }

        /**
         * @param primaryTableHost The hostname with port if applicable for table storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryTableHost(String primaryTableHost) {
            return primaryTableHost(Output.of(primaryTableHost));
        }

        /**
         * @param primaryTableMicrosoftEndpoint The microsoft routing endpoint URL for table storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryTableMicrosoftEndpoint(@Nullable Output<String> primaryTableMicrosoftEndpoint) {
            $.primaryTableMicrosoftEndpoint = primaryTableMicrosoftEndpoint;
            return this;
        }

        /**
         * @param primaryTableMicrosoftEndpoint The microsoft routing endpoint URL for table storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryTableMicrosoftEndpoint(String primaryTableMicrosoftEndpoint) {
            return primaryTableMicrosoftEndpoint(Output.of(primaryTableMicrosoftEndpoint));
        }

        /**
         * @param primaryTableMicrosoftHost The microsoft routing hostname with port if applicable for table storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryTableMicrosoftHost(@Nullable Output<String> primaryTableMicrosoftHost) {
            $.primaryTableMicrosoftHost = primaryTableMicrosoftHost;
            return this;
        }

        /**
         * @param primaryTableMicrosoftHost The microsoft routing hostname with port if applicable for table storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryTableMicrosoftHost(String primaryTableMicrosoftHost) {
            return primaryTableMicrosoftHost(Output.of(primaryTableMicrosoftHost));
        }

        /**
         * @param primaryWebEndpoint The endpoint URL for web storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryWebEndpoint(@Nullable Output<String> primaryWebEndpoint) {
            $.primaryWebEndpoint = primaryWebEndpoint;
            return this;
        }

        /**
         * @param primaryWebEndpoint The endpoint URL for web storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryWebEndpoint(String primaryWebEndpoint) {
            return primaryWebEndpoint(Output.of(primaryWebEndpoint));
        }

        /**
         * @param primaryWebHost The hostname with port if applicable for web storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryWebHost(@Nullable Output<String> primaryWebHost) {
            $.primaryWebHost = primaryWebHost;
            return this;
        }

        /**
         * @param primaryWebHost The hostname with port if applicable for web storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryWebHost(String primaryWebHost) {
            return primaryWebHost(Output.of(primaryWebHost));
        }

        /**
         * @param primaryWebInternetEndpoint The internet routing endpoint URL for web storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryWebInternetEndpoint(@Nullable Output<String> primaryWebInternetEndpoint) {
            $.primaryWebInternetEndpoint = primaryWebInternetEndpoint;
            return this;
        }

        /**
         * @param primaryWebInternetEndpoint The internet routing endpoint URL for web storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryWebInternetEndpoint(String primaryWebInternetEndpoint) {
            return primaryWebInternetEndpoint(Output.of(primaryWebInternetEndpoint));
        }

        /**
         * @param primaryWebInternetHost The internet routing hostname with port if applicable for web storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryWebInternetHost(@Nullable Output<String> primaryWebInternetHost) {
            $.primaryWebInternetHost = primaryWebInternetHost;
            return this;
        }

        /**
         * @param primaryWebInternetHost The internet routing hostname with port if applicable for web storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryWebInternetHost(String primaryWebInternetHost) {
            return primaryWebInternetHost(Output.of(primaryWebInternetHost));
        }

        /**
         * @param primaryWebMicrosoftEndpoint The microsoft routing endpoint URL for web storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryWebMicrosoftEndpoint(@Nullable Output<String> primaryWebMicrosoftEndpoint) {
            $.primaryWebMicrosoftEndpoint = primaryWebMicrosoftEndpoint;
            return this;
        }

        /**
         * @param primaryWebMicrosoftEndpoint The microsoft routing endpoint URL for web storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryWebMicrosoftEndpoint(String primaryWebMicrosoftEndpoint) {
            return primaryWebMicrosoftEndpoint(Output.of(primaryWebMicrosoftEndpoint));
        }

        /**
         * @param primaryWebMicrosoftHost The microsoft routing hostname with port if applicable for web storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryWebMicrosoftHost(@Nullable Output<String> primaryWebMicrosoftHost) {
            $.primaryWebMicrosoftHost = primaryWebMicrosoftHost;
            return this;
        }

        /**
         * @param primaryWebMicrosoftHost The microsoft routing hostname with port if applicable for web storage in the primary location.
         * 
         * @return builder
         * 
         */
        public Builder primaryWebMicrosoftHost(String primaryWebMicrosoftHost) {
            return primaryWebMicrosoftHost(Output.of(primaryWebMicrosoftHost));
        }

        /**
         * @param publicNetworkAccessEnabled Whether the public network access is enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder publicNetworkAccessEnabled(@Nullable Output<Boolean> publicNetworkAccessEnabled) {
            $.publicNetworkAccessEnabled = publicNetworkAccessEnabled;
            return this;
        }

        /**
         * @param publicNetworkAccessEnabled Whether the public network access is enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder publicNetworkAccessEnabled(Boolean publicNetworkAccessEnabled) {
            return publicNetworkAccessEnabled(Output.of(publicNetworkAccessEnabled));
        }

        /**
         * @param queueEncryptionKeyType The encryption type of the queue service. Possible values are `Service` and `Account`. Changing this forces a new resource to be created. Default value is `Service`.
         * 
         * @return builder
         * 
         */
        public Builder queueEncryptionKeyType(@Nullable Output<String> queueEncryptionKeyType) {
            $.queueEncryptionKeyType = queueEncryptionKeyType;
            return this;
        }

        /**
         * @param queueEncryptionKeyType The encryption type of the queue service. Possible values are `Service` and `Account`. Changing this forces a new resource to be created. Default value is `Service`.
         * 
         * @return builder
         * 
         */
        public Builder queueEncryptionKeyType(String queueEncryptionKeyType) {
            return queueEncryptionKeyType(Output.of(queueEncryptionKeyType));
        }

        /**
         * @param queueProperties A `queue_properties` block as defined below.
         * 
         * &gt; **NOTE:** `queue_properties` cannot be set when the `account_kind` is set to `BlobStorage`
         * 
         * @return builder
         * 
         */
        public Builder queueProperties(@Nullable Output<AccountQueuePropertiesArgs> queueProperties) {
            $.queueProperties = queueProperties;
            return this;
        }

        /**
         * @param queueProperties A `queue_properties` block as defined below.
         * 
         * &gt; **NOTE:** `queue_properties` cannot be set when the `account_kind` is set to `BlobStorage`
         * 
         * @return builder
         * 
         */
        public Builder queueProperties(AccountQueuePropertiesArgs queueProperties) {
            return queueProperties(Output.of(queueProperties));
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the storage account. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the storage account. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param routing A `routing` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder routing(@Nullable Output<AccountRoutingArgs> routing) {
            $.routing = routing;
            return this;
        }

        /**
         * @param routing A `routing` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder routing(AccountRoutingArgs routing) {
            return routing(Output.of(routing));
        }

        /**
         * @param sasPolicy A `sas_policy` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder sasPolicy(@Nullable Output<AccountSasPolicyArgs> sasPolicy) {
            $.sasPolicy = sasPolicy;
            return this;
        }

        /**
         * @param sasPolicy A `sas_policy` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder sasPolicy(AccountSasPolicyArgs sasPolicy) {
            return sasPolicy(Output.of(sasPolicy));
        }

        /**
         * @param secondaryAccessKey The secondary access key for the storage account.
         * 
         * @return builder
         * 
         */
        public Builder secondaryAccessKey(@Nullable Output<String> secondaryAccessKey) {
            $.secondaryAccessKey = secondaryAccessKey;
            return this;
        }

        /**
         * @param secondaryAccessKey The secondary access key for the storage account.
         * 
         * @return builder
         * 
         */
        public Builder secondaryAccessKey(String secondaryAccessKey) {
            return secondaryAccessKey(Output.of(secondaryAccessKey));
        }

        /**
         * @param secondaryBlobConnectionString The connection string associated with the secondary blob location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryBlobConnectionString(@Nullable Output<String> secondaryBlobConnectionString) {
            $.secondaryBlobConnectionString = secondaryBlobConnectionString;
            return this;
        }

        /**
         * @param secondaryBlobConnectionString The connection string associated with the secondary blob location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryBlobConnectionString(String secondaryBlobConnectionString) {
            return secondaryBlobConnectionString(Output.of(secondaryBlobConnectionString));
        }

        /**
         * @param secondaryBlobEndpoint The endpoint URL for blob storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryBlobEndpoint(@Nullable Output<String> secondaryBlobEndpoint) {
            $.secondaryBlobEndpoint = secondaryBlobEndpoint;
            return this;
        }

        /**
         * @param secondaryBlobEndpoint The endpoint URL for blob storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryBlobEndpoint(String secondaryBlobEndpoint) {
            return secondaryBlobEndpoint(Output.of(secondaryBlobEndpoint));
        }

        /**
         * @param secondaryBlobHost The hostname with port if applicable for blob storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryBlobHost(@Nullable Output<String> secondaryBlobHost) {
            $.secondaryBlobHost = secondaryBlobHost;
            return this;
        }

        /**
         * @param secondaryBlobHost The hostname with port if applicable for blob storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryBlobHost(String secondaryBlobHost) {
            return secondaryBlobHost(Output.of(secondaryBlobHost));
        }

        /**
         * @param secondaryBlobInternetEndpoint The internet routing endpoint URL for blob storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryBlobInternetEndpoint(@Nullable Output<String> secondaryBlobInternetEndpoint) {
            $.secondaryBlobInternetEndpoint = secondaryBlobInternetEndpoint;
            return this;
        }

        /**
         * @param secondaryBlobInternetEndpoint The internet routing endpoint URL for blob storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryBlobInternetEndpoint(String secondaryBlobInternetEndpoint) {
            return secondaryBlobInternetEndpoint(Output.of(secondaryBlobInternetEndpoint));
        }

        /**
         * @param secondaryBlobInternetHost The internet routing hostname with port if applicable for blob storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryBlobInternetHost(@Nullable Output<String> secondaryBlobInternetHost) {
            $.secondaryBlobInternetHost = secondaryBlobInternetHost;
            return this;
        }

        /**
         * @param secondaryBlobInternetHost The internet routing hostname with port if applicable for blob storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryBlobInternetHost(String secondaryBlobInternetHost) {
            return secondaryBlobInternetHost(Output.of(secondaryBlobInternetHost));
        }

        /**
         * @param secondaryBlobMicrosoftEndpoint The microsoft routing endpoint URL for blob storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryBlobMicrosoftEndpoint(@Nullable Output<String> secondaryBlobMicrosoftEndpoint) {
            $.secondaryBlobMicrosoftEndpoint = secondaryBlobMicrosoftEndpoint;
            return this;
        }

        /**
         * @param secondaryBlobMicrosoftEndpoint The microsoft routing endpoint URL for blob storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryBlobMicrosoftEndpoint(String secondaryBlobMicrosoftEndpoint) {
            return secondaryBlobMicrosoftEndpoint(Output.of(secondaryBlobMicrosoftEndpoint));
        }

        /**
         * @param secondaryBlobMicrosoftHost The microsoft routing hostname with port if applicable for blob storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryBlobMicrosoftHost(@Nullable Output<String> secondaryBlobMicrosoftHost) {
            $.secondaryBlobMicrosoftHost = secondaryBlobMicrosoftHost;
            return this;
        }

        /**
         * @param secondaryBlobMicrosoftHost The microsoft routing hostname with port if applicable for blob storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryBlobMicrosoftHost(String secondaryBlobMicrosoftHost) {
            return secondaryBlobMicrosoftHost(Output.of(secondaryBlobMicrosoftHost));
        }

        /**
         * @param secondaryConnectionString The connection string associated with the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryConnectionString(@Nullable Output<String> secondaryConnectionString) {
            $.secondaryConnectionString = secondaryConnectionString;
            return this;
        }

        /**
         * @param secondaryConnectionString The connection string associated with the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryConnectionString(String secondaryConnectionString) {
            return secondaryConnectionString(Output.of(secondaryConnectionString));
        }

        /**
         * @param secondaryDfsEndpoint The endpoint URL for DFS storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryDfsEndpoint(@Nullable Output<String> secondaryDfsEndpoint) {
            $.secondaryDfsEndpoint = secondaryDfsEndpoint;
            return this;
        }

        /**
         * @param secondaryDfsEndpoint The endpoint URL for DFS storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryDfsEndpoint(String secondaryDfsEndpoint) {
            return secondaryDfsEndpoint(Output.of(secondaryDfsEndpoint));
        }

        /**
         * @param secondaryDfsHost The hostname with port if applicable for DFS storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryDfsHost(@Nullable Output<String> secondaryDfsHost) {
            $.secondaryDfsHost = secondaryDfsHost;
            return this;
        }

        /**
         * @param secondaryDfsHost The hostname with port if applicable for DFS storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryDfsHost(String secondaryDfsHost) {
            return secondaryDfsHost(Output.of(secondaryDfsHost));
        }

        /**
         * @param secondaryDfsInternetEndpoint The internet routing endpoint URL for DFS storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryDfsInternetEndpoint(@Nullable Output<String> secondaryDfsInternetEndpoint) {
            $.secondaryDfsInternetEndpoint = secondaryDfsInternetEndpoint;
            return this;
        }

        /**
         * @param secondaryDfsInternetEndpoint The internet routing endpoint URL for DFS storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryDfsInternetEndpoint(String secondaryDfsInternetEndpoint) {
            return secondaryDfsInternetEndpoint(Output.of(secondaryDfsInternetEndpoint));
        }

        /**
         * @param secondaryDfsInternetHost The internet routing hostname with port if applicable for DFS storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryDfsInternetHost(@Nullable Output<String> secondaryDfsInternetHost) {
            $.secondaryDfsInternetHost = secondaryDfsInternetHost;
            return this;
        }

        /**
         * @param secondaryDfsInternetHost The internet routing hostname with port if applicable for DFS storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryDfsInternetHost(String secondaryDfsInternetHost) {
            return secondaryDfsInternetHost(Output.of(secondaryDfsInternetHost));
        }

        /**
         * @param secondaryDfsMicrosoftEndpoint The microsoft routing endpoint URL for DFS storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryDfsMicrosoftEndpoint(@Nullable Output<String> secondaryDfsMicrosoftEndpoint) {
            $.secondaryDfsMicrosoftEndpoint = secondaryDfsMicrosoftEndpoint;
            return this;
        }

        /**
         * @param secondaryDfsMicrosoftEndpoint The microsoft routing endpoint URL for DFS storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryDfsMicrosoftEndpoint(String secondaryDfsMicrosoftEndpoint) {
            return secondaryDfsMicrosoftEndpoint(Output.of(secondaryDfsMicrosoftEndpoint));
        }

        /**
         * @param secondaryDfsMicrosoftHost The microsoft routing hostname with port if applicable for DFS storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryDfsMicrosoftHost(@Nullable Output<String> secondaryDfsMicrosoftHost) {
            $.secondaryDfsMicrosoftHost = secondaryDfsMicrosoftHost;
            return this;
        }

        /**
         * @param secondaryDfsMicrosoftHost The microsoft routing hostname with port if applicable for DFS storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryDfsMicrosoftHost(String secondaryDfsMicrosoftHost) {
            return secondaryDfsMicrosoftHost(Output.of(secondaryDfsMicrosoftHost));
        }

        /**
         * @param secondaryFileEndpoint The endpoint URL for file storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryFileEndpoint(@Nullable Output<String> secondaryFileEndpoint) {
            $.secondaryFileEndpoint = secondaryFileEndpoint;
            return this;
        }

        /**
         * @param secondaryFileEndpoint The endpoint URL for file storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryFileEndpoint(String secondaryFileEndpoint) {
            return secondaryFileEndpoint(Output.of(secondaryFileEndpoint));
        }

        /**
         * @param secondaryFileHost The hostname with port if applicable for file storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryFileHost(@Nullable Output<String> secondaryFileHost) {
            $.secondaryFileHost = secondaryFileHost;
            return this;
        }

        /**
         * @param secondaryFileHost The hostname with port if applicable for file storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryFileHost(String secondaryFileHost) {
            return secondaryFileHost(Output.of(secondaryFileHost));
        }

        /**
         * @param secondaryFileInternetEndpoint The internet routing endpoint URL for file storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryFileInternetEndpoint(@Nullable Output<String> secondaryFileInternetEndpoint) {
            $.secondaryFileInternetEndpoint = secondaryFileInternetEndpoint;
            return this;
        }

        /**
         * @param secondaryFileInternetEndpoint The internet routing endpoint URL for file storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryFileInternetEndpoint(String secondaryFileInternetEndpoint) {
            return secondaryFileInternetEndpoint(Output.of(secondaryFileInternetEndpoint));
        }

        /**
         * @param secondaryFileInternetHost The internet routing hostname with port if applicable for file storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryFileInternetHost(@Nullable Output<String> secondaryFileInternetHost) {
            $.secondaryFileInternetHost = secondaryFileInternetHost;
            return this;
        }

        /**
         * @param secondaryFileInternetHost The internet routing hostname with port if applicable for file storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryFileInternetHost(String secondaryFileInternetHost) {
            return secondaryFileInternetHost(Output.of(secondaryFileInternetHost));
        }

        /**
         * @param secondaryFileMicrosoftEndpoint The microsoft routing endpoint URL for file storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryFileMicrosoftEndpoint(@Nullable Output<String> secondaryFileMicrosoftEndpoint) {
            $.secondaryFileMicrosoftEndpoint = secondaryFileMicrosoftEndpoint;
            return this;
        }

        /**
         * @param secondaryFileMicrosoftEndpoint The microsoft routing endpoint URL for file storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryFileMicrosoftEndpoint(String secondaryFileMicrosoftEndpoint) {
            return secondaryFileMicrosoftEndpoint(Output.of(secondaryFileMicrosoftEndpoint));
        }

        /**
         * @param secondaryFileMicrosoftHost The microsoft routing hostname with port if applicable for file storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryFileMicrosoftHost(@Nullable Output<String> secondaryFileMicrosoftHost) {
            $.secondaryFileMicrosoftHost = secondaryFileMicrosoftHost;
            return this;
        }

        /**
         * @param secondaryFileMicrosoftHost The microsoft routing hostname with port if applicable for file storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryFileMicrosoftHost(String secondaryFileMicrosoftHost) {
            return secondaryFileMicrosoftHost(Output.of(secondaryFileMicrosoftHost));
        }

        /**
         * @param secondaryLocation The secondary location of the storage account.
         * 
         * @return builder
         * 
         */
        public Builder secondaryLocation(@Nullable Output<String> secondaryLocation) {
            $.secondaryLocation = secondaryLocation;
            return this;
        }

        /**
         * @param secondaryLocation The secondary location of the storage account.
         * 
         * @return builder
         * 
         */
        public Builder secondaryLocation(String secondaryLocation) {
            return secondaryLocation(Output.of(secondaryLocation));
        }

        /**
         * @param secondaryQueueEndpoint The endpoint URL for queue storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryQueueEndpoint(@Nullable Output<String> secondaryQueueEndpoint) {
            $.secondaryQueueEndpoint = secondaryQueueEndpoint;
            return this;
        }

        /**
         * @param secondaryQueueEndpoint The endpoint URL for queue storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryQueueEndpoint(String secondaryQueueEndpoint) {
            return secondaryQueueEndpoint(Output.of(secondaryQueueEndpoint));
        }

        /**
         * @param secondaryQueueHost The hostname with port if applicable for queue storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryQueueHost(@Nullable Output<String> secondaryQueueHost) {
            $.secondaryQueueHost = secondaryQueueHost;
            return this;
        }

        /**
         * @param secondaryQueueHost The hostname with port if applicable for queue storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryQueueHost(String secondaryQueueHost) {
            return secondaryQueueHost(Output.of(secondaryQueueHost));
        }

        /**
         * @param secondaryQueueMicrosoftEndpoint The microsoft routing endpoint URL for queue storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryQueueMicrosoftEndpoint(@Nullable Output<String> secondaryQueueMicrosoftEndpoint) {
            $.secondaryQueueMicrosoftEndpoint = secondaryQueueMicrosoftEndpoint;
            return this;
        }

        /**
         * @param secondaryQueueMicrosoftEndpoint The microsoft routing endpoint URL for queue storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryQueueMicrosoftEndpoint(String secondaryQueueMicrosoftEndpoint) {
            return secondaryQueueMicrosoftEndpoint(Output.of(secondaryQueueMicrosoftEndpoint));
        }

        /**
         * @param secondaryQueueMicrosoftHost The microsoft routing hostname with port if applicable for queue storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryQueueMicrosoftHost(@Nullable Output<String> secondaryQueueMicrosoftHost) {
            $.secondaryQueueMicrosoftHost = secondaryQueueMicrosoftHost;
            return this;
        }

        /**
         * @param secondaryQueueMicrosoftHost The microsoft routing hostname with port if applicable for queue storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryQueueMicrosoftHost(String secondaryQueueMicrosoftHost) {
            return secondaryQueueMicrosoftHost(Output.of(secondaryQueueMicrosoftHost));
        }

        /**
         * @param secondaryTableEndpoint The endpoint URL for table storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryTableEndpoint(@Nullable Output<String> secondaryTableEndpoint) {
            $.secondaryTableEndpoint = secondaryTableEndpoint;
            return this;
        }

        /**
         * @param secondaryTableEndpoint The endpoint URL for table storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryTableEndpoint(String secondaryTableEndpoint) {
            return secondaryTableEndpoint(Output.of(secondaryTableEndpoint));
        }

        /**
         * @param secondaryTableHost The hostname with port if applicable for table storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryTableHost(@Nullable Output<String> secondaryTableHost) {
            $.secondaryTableHost = secondaryTableHost;
            return this;
        }

        /**
         * @param secondaryTableHost The hostname with port if applicable for table storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryTableHost(String secondaryTableHost) {
            return secondaryTableHost(Output.of(secondaryTableHost));
        }

        /**
         * @param secondaryTableMicrosoftEndpoint The microsoft routing endpoint URL for table storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryTableMicrosoftEndpoint(@Nullable Output<String> secondaryTableMicrosoftEndpoint) {
            $.secondaryTableMicrosoftEndpoint = secondaryTableMicrosoftEndpoint;
            return this;
        }

        /**
         * @param secondaryTableMicrosoftEndpoint The microsoft routing endpoint URL for table storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryTableMicrosoftEndpoint(String secondaryTableMicrosoftEndpoint) {
            return secondaryTableMicrosoftEndpoint(Output.of(secondaryTableMicrosoftEndpoint));
        }

        /**
         * @param secondaryTableMicrosoftHost The microsoft routing hostname with port if applicable for table storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryTableMicrosoftHost(@Nullable Output<String> secondaryTableMicrosoftHost) {
            $.secondaryTableMicrosoftHost = secondaryTableMicrosoftHost;
            return this;
        }

        /**
         * @param secondaryTableMicrosoftHost The microsoft routing hostname with port if applicable for table storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryTableMicrosoftHost(String secondaryTableMicrosoftHost) {
            return secondaryTableMicrosoftHost(Output.of(secondaryTableMicrosoftHost));
        }

        /**
         * @param secondaryWebEndpoint The endpoint URL for web storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryWebEndpoint(@Nullable Output<String> secondaryWebEndpoint) {
            $.secondaryWebEndpoint = secondaryWebEndpoint;
            return this;
        }

        /**
         * @param secondaryWebEndpoint The endpoint URL for web storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryWebEndpoint(String secondaryWebEndpoint) {
            return secondaryWebEndpoint(Output.of(secondaryWebEndpoint));
        }

        /**
         * @param secondaryWebHost The hostname with port if applicable for web storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryWebHost(@Nullable Output<String> secondaryWebHost) {
            $.secondaryWebHost = secondaryWebHost;
            return this;
        }

        /**
         * @param secondaryWebHost The hostname with port if applicable for web storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryWebHost(String secondaryWebHost) {
            return secondaryWebHost(Output.of(secondaryWebHost));
        }

        /**
         * @param secondaryWebInternetEndpoint The internet routing endpoint URL for web storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryWebInternetEndpoint(@Nullable Output<String> secondaryWebInternetEndpoint) {
            $.secondaryWebInternetEndpoint = secondaryWebInternetEndpoint;
            return this;
        }

        /**
         * @param secondaryWebInternetEndpoint The internet routing endpoint URL for web storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryWebInternetEndpoint(String secondaryWebInternetEndpoint) {
            return secondaryWebInternetEndpoint(Output.of(secondaryWebInternetEndpoint));
        }

        /**
         * @param secondaryWebInternetHost The internet routing hostname with port if applicable for web storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryWebInternetHost(@Nullable Output<String> secondaryWebInternetHost) {
            $.secondaryWebInternetHost = secondaryWebInternetHost;
            return this;
        }

        /**
         * @param secondaryWebInternetHost The internet routing hostname with port if applicable for web storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryWebInternetHost(String secondaryWebInternetHost) {
            return secondaryWebInternetHost(Output.of(secondaryWebInternetHost));
        }

        /**
         * @param secondaryWebMicrosoftEndpoint The microsoft routing endpoint URL for web storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryWebMicrosoftEndpoint(@Nullable Output<String> secondaryWebMicrosoftEndpoint) {
            $.secondaryWebMicrosoftEndpoint = secondaryWebMicrosoftEndpoint;
            return this;
        }

        /**
         * @param secondaryWebMicrosoftEndpoint The microsoft routing endpoint URL for web storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryWebMicrosoftEndpoint(String secondaryWebMicrosoftEndpoint) {
            return secondaryWebMicrosoftEndpoint(Output.of(secondaryWebMicrosoftEndpoint));
        }

        /**
         * @param secondaryWebMicrosoftHost The microsoft routing hostname with port if applicable for web storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryWebMicrosoftHost(@Nullable Output<String> secondaryWebMicrosoftHost) {
            $.secondaryWebMicrosoftHost = secondaryWebMicrosoftHost;
            return this;
        }

        /**
         * @param secondaryWebMicrosoftHost The microsoft routing hostname with port if applicable for web storage in the secondary location.
         * 
         * @return builder
         * 
         */
        public Builder secondaryWebMicrosoftHost(String secondaryWebMicrosoftHost) {
            return secondaryWebMicrosoftHost(Output.of(secondaryWebMicrosoftHost));
        }

        /**
         * @param sftpEnabled Boolean, enable SFTP for the storage account
         * 
         * &gt; **NOTE:** SFTP support requires `is_hns_enabled` set to `true`. [More information on SFTP support can be found here](https://learn.microsoft.com/azure/storage/blobs/secure-file-transfer-protocol-support). Defaults to `false`
         * 
         * @return builder
         * 
         */
        public Builder sftpEnabled(@Nullable Output<Boolean> sftpEnabled) {
            $.sftpEnabled = sftpEnabled;
            return this;
        }

        /**
         * @param sftpEnabled Boolean, enable SFTP for the storage account
         * 
         * &gt; **NOTE:** SFTP support requires `is_hns_enabled` set to `true`. [More information on SFTP support can be found here](https://learn.microsoft.com/azure/storage/blobs/secure-file-transfer-protocol-support). Defaults to `false`
         * 
         * @return builder
         * 
         */
        public Builder sftpEnabled(Boolean sftpEnabled) {
            return sftpEnabled(Output.of(sftpEnabled));
        }

        /**
         * @param shareProperties A `share_properties` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder shareProperties(@Nullable Output<AccountSharePropertiesArgs> shareProperties) {
            $.shareProperties = shareProperties;
            return this;
        }

        /**
         * @param shareProperties A `share_properties` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder shareProperties(AccountSharePropertiesArgs shareProperties) {
            return shareProperties(Output.of(shareProperties));
        }

        public Builder sharedAccessKeyEnabled(@Nullable Output<Boolean> sharedAccessKeyEnabled) {
            $.sharedAccessKeyEnabled = sharedAccessKeyEnabled;
            return this;
        }

        public Builder sharedAccessKeyEnabled(Boolean sharedAccessKeyEnabled) {
            return sharedAccessKeyEnabled(Output.of(sharedAccessKeyEnabled));
        }

        /**
         * @param staticWebsite A `static_website` block as defined below.
         * 
         * &gt; **NOTE:** `static_website` can only be set when the `account_kind` is set to `StorageV2` or `BlockBlobStorage`.
         * 
         * @return builder
         * 
         */
        public Builder staticWebsite(@Nullable Output<AccountStaticWebsiteArgs> staticWebsite) {
            $.staticWebsite = staticWebsite;
            return this;
        }

        /**
         * @param staticWebsite A `static_website` block as defined below.
         * 
         * &gt; **NOTE:** `static_website` can only be set when the `account_kind` is set to `StorageV2` or `BlockBlobStorage`.
         * 
         * @return builder
         * 
         */
        public Builder staticWebsite(AccountStaticWebsiteArgs staticWebsite) {
            return staticWebsite(Output.of(staticWebsite));
        }

        /**
         * @param tableEncryptionKeyType The encryption type of the table service. Possible values are `Service` and `Account`. Changing this forces a new resource to be created. Default value is `Service`.
         * 
         * &gt; **NOTE:** For the `queue_encryption_key_type` and `table_encryption_key_type`, the `Account` key type is only allowed when the `account_kind` is set to `StorageV2`
         * 
         * @return builder
         * 
         */
        public Builder tableEncryptionKeyType(@Nullable Output<String> tableEncryptionKeyType) {
            $.tableEncryptionKeyType = tableEncryptionKeyType;
            return this;
        }

        /**
         * @param tableEncryptionKeyType The encryption type of the table service. Possible values are `Service` and `Account`. Changing this forces a new resource to be created. Default value is `Service`.
         * 
         * &gt; **NOTE:** For the `queue_encryption_key_type` and `table_encryption_key_type`, the `Account` key type is only allowed when the `account_kind` is set to `StorageV2`
         * 
         * @return builder
         * 
         */
        public Builder tableEncryptionKeyType(String tableEncryptionKeyType) {
            return tableEncryptionKeyType(Output.of(tableEncryptionKeyType));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public AccountState build() {
            return $;
        }
    }

}
