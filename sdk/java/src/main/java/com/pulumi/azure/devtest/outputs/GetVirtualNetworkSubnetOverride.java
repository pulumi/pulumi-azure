// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.devtest.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetVirtualNetworkSubnetOverride {
    /**
     * @return The name of the subnet.
     * 
     */
    private String labSubnetName;
    /**
     * @return The resource identifier for the subnet.
     * 
     */
    private String resourceId;
    /**
     * @return Indicates if the subnet can be used for VM creation.  Possible values are `Allow`, `Default` and `Deny`.
     * 
     */
    private String useInVmCreationPermission;
    private String usePublicIpAddressPermission;
    /**
     * @return The virtual network pool associated with this subnet.
     * 
     */
    private String virtualNetworkPoolName;

    private GetVirtualNetworkSubnetOverride() {}
    /**
     * @return The name of the subnet.
     * 
     */
    public String labSubnetName() {
        return this.labSubnetName;
    }
    /**
     * @return The resource identifier for the subnet.
     * 
     */
    public String resourceId() {
        return this.resourceId;
    }
    /**
     * @return Indicates if the subnet can be used for VM creation.  Possible values are `Allow`, `Default` and `Deny`.
     * 
     */
    public String useInVmCreationPermission() {
        return this.useInVmCreationPermission;
    }
    public String usePublicIpAddressPermission() {
        return this.usePublicIpAddressPermission;
    }
    /**
     * @return The virtual network pool associated with this subnet.
     * 
     */
    public String virtualNetworkPoolName() {
        return this.virtualNetworkPoolName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualNetworkSubnetOverride defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String labSubnetName;
        private String resourceId;
        private String useInVmCreationPermission;
        private String usePublicIpAddressPermission;
        private String virtualNetworkPoolName;
        public Builder() {}
        public Builder(GetVirtualNetworkSubnetOverride defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.labSubnetName = defaults.labSubnetName;
    	      this.resourceId = defaults.resourceId;
    	      this.useInVmCreationPermission = defaults.useInVmCreationPermission;
    	      this.usePublicIpAddressPermission = defaults.usePublicIpAddressPermission;
    	      this.virtualNetworkPoolName = defaults.virtualNetworkPoolName;
        }

        @CustomType.Setter
        public Builder labSubnetName(String labSubnetName) {
            if (labSubnetName == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkSubnetOverride", "labSubnetName");
            }
            this.labSubnetName = labSubnetName;
            return this;
        }
        @CustomType.Setter
        public Builder resourceId(String resourceId) {
            if (resourceId == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkSubnetOverride", "resourceId");
            }
            this.resourceId = resourceId;
            return this;
        }
        @CustomType.Setter
        public Builder useInVmCreationPermission(String useInVmCreationPermission) {
            if (useInVmCreationPermission == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkSubnetOverride", "useInVmCreationPermission");
            }
            this.useInVmCreationPermission = useInVmCreationPermission;
            return this;
        }
        @CustomType.Setter
        public Builder usePublicIpAddressPermission(String usePublicIpAddressPermission) {
            if (usePublicIpAddressPermission == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkSubnetOverride", "usePublicIpAddressPermission");
            }
            this.usePublicIpAddressPermission = usePublicIpAddressPermission;
            return this;
        }
        @CustomType.Setter
        public Builder virtualNetworkPoolName(String virtualNetworkPoolName) {
            if (virtualNetworkPoolName == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkSubnetOverride", "virtualNetworkPoolName");
            }
            this.virtualNetworkPoolName = virtualNetworkPoolName;
            return this;
        }
        public GetVirtualNetworkSubnetOverride build() {
            final var _resultValue = new GetVirtualNetworkSubnetOverride();
            _resultValue.labSubnetName = labSubnetName;
            _resultValue.resourceId = resourceId;
            _resultValue.useInVmCreationPermission = useInVmCreationPermission;
            _resultValue.usePublicIpAddressPermission = usePublicIpAddressPermission;
            _resultValue.virtualNetworkPoolName = virtualNetworkPoolName;
            return _resultValue;
        }
    }
}
