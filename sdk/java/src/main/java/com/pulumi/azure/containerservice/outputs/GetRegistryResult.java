// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetRegistryResult {
    /**
     * @return Is the Administrator account enabled for this Container Registry.
     * 
     */
    private Boolean adminEnabled;
    /**
     * @return The Password associated with the Container Registry Admin account - if the admin account is enabled.
     * 
     */
    private String adminPassword;
    /**
     * @return The Username associated with the Container Registry Admin account - if the admin account is enabled.
     * 
     */
    private String adminUsername;
    /**
     * @return Whether dedicated data endpoints for this Container Registry are enabled?
     * 
     */
    private Boolean dataEndpointEnabled;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The Azure Region in which this Container Registry exists.
     * 
     */
    private String location;
    /**
     * @return The URL that can be used to log into the container registry.
     * 
     */
    private String loginServer;
    private String name;
    private String resourceGroupName;
    /**
     * @return The SKU of this Container Registry, such as `Basic`.
     * 
     */
    private String sku;
    /**
     * @return A map of tags assigned to the Container Registry.
     * 
     */
    private Map<String,String> tags;

    private GetRegistryResult() {}
    /**
     * @return Is the Administrator account enabled for this Container Registry.
     * 
     */
    public Boolean adminEnabled() {
        return this.adminEnabled;
    }
    /**
     * @return The Password associated with the Container Registry Admin account - if the admin account is enabled.
     * 
     */
    public String adminPassword() {
        return this.adminPassword;
    }
    /**
     * @return The Username associated with the Container Registry Admin account - if the admin account is enabled.
     * 
     */
    public String adminUsername() {
        return this.adminUsername;
    }
    /**
     * @return Whether dedicated data endpoints for this Container Registry are enabled?
     * 
     */
    public Boolean dataEndpointEnabled() {
        return this.dataEndpointEnabled;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Azure Region in which this Container Registry exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The URL that can be used to log into the container registry.
     * 
     */
    public String loginServer() {
        return this.loginServer;
    }
    public String name() {
        return this.name;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The SKU of this Container Registry, such as `Basic`.
     * 
     */
    public String sku() {
        return this.sku;
    }
    /**
     * @return A map of tags assigned to the Container Registry.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegistryResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean adminEnabled;
        private String adminPassword;
        private String adminUsername;
        private Boolean dataEndpointEnabled;
        private String id;
        private String location;
        private String loginServer;
        private String name;
        private String resourceGroupName;
        private String sku;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetRegistryResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminEnabled = defaults.adminEnabled;
    	      this.adminPassword = defaults.adminPassword;
    	      this.adminUsername = defaults.adminUsername;
    	      this.dataEndpointEnabled = defaults.dataEndpointEnabled;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.loginServer = defaults.loginServer;
    	      this.name = defaults.name;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder adminEnabled(Boolean adminEnabled) {
            this.adminEnabled = Objects.requireNonNull(adminEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder adminPassword(String adminPassword) {
            this.adminPassword = Objects.requireNonNull(adminPassword);
            return this;
        }
        @CustomType.Setter
        public Builder adminUsername(String adminUsername) {
            this.adminUsername = Objects.requireNonNull(adminUsername);
            return this;
        }
        @CustomType.Setter
        public Builder dataEndpointEnabled(Boolean dataEndpointEnabled) {
            this.dataEndpointEnabled = Objects.requireNonNull(dataEndpointEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder loginServer(String loginServer) {
            this.loginServer = Objects.requireNonNull(loginServer);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        @CustomType.Setter
        public Builder sku(String sku) {
            this.sku = Objects.requireNonNull(sku);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public GetRegistryResult build() {
            final var _resultValue = new GetRegistryResult();
            _resultValue.adminEnabled = adminEnabled;
            _resultValue.adminPassword = adminPassword;
            _resultValue.adminUsername = adminUsername;
            _resultValue.dataEndpointEnabled = dataEndpointEnabled;
            _resultValue.id = id;
            _resultValue.location = location;
            _resultValue.loginServer = loginServer;
            _resultValue.name = name;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.sku = sku;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
