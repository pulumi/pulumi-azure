// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkConnectionMonitorTestGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkConnectionMonitorTestGroupArgs Empty = new NetworkConnectionMonitorTestGroupArgs();

    /**
     * A list of destination endpoint names.
     * 
     */
    @Import(name="destinationEndpoints", required=true)
    private Output<List<String>> destinationEndpoints;

    /**
     * @return A list of destination endpoint names.
     * 
     */
    public Output<List<String>> destinationEndpoints() {
        return this.destinationEndpoints;
    }

    /**
     * Should the test group be enabled? Defaults to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Should the test group be enabled? Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The name of the test group for the Network Connection Monitor.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the test group for the Network Connection Monitor.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * A list of source endpoint names.
     * 
     */
    @Import(name="sourceEndpoints", required=true)
    private Output<List<String>> sourceEndpoints;

    /**
     * @return A list of source endpoint names.
     * 
     */
    public Output<List<String>> sourceEndpoints() {
        return this.sourceEndpoints;
    }

    /**
     * A list of test configuration names.
     * 
     */
    @Import(name="testConfigurationNames", required=true)
    private Output<List<String>> testConfigurationNames;

    /**
     * @return A list of test configuration names.
     * 
     */
    public Output<List<String>> testConfigurationNames() {
        return this.testConfigurationNames;
    }

    private NetworkConnectionMonitorTestGroupArgs() {}

    private NetworkConnectionMonitorTestGroupArgs(NetworkConnectionMonitorTestGroupArgs $) {
        this.destinationEndpoints = $.destinationEndpoints;
        this.enabled = $.enabled;
        this.name = $.name;
        this.sourceEndpoints = $.sourceEndpoints;
        this.testConfigurationNames = $.testConfigurationNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkConnectionMonitorTestGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkConnectionMonitorTestGroupArgs $;

        public Builder() {
            $ = new NetworkConnectionMonitorTestGroupArgs();
        }

        public Builder(NetworkConnectionMonitorTestGroupArgs defaults) {
            $ = new NetworkConnectionMonitorTestGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinationEndpoints A list of destination endpoint names.
         * 
         * @return builder
         * 
         */
        public Builder destinationEndpoints(Output<List<String>> destinationEndpoints) {
            $.destinationEndpoints = destinationEndpoints;
            return this;
        }

        /**
         * @param destinationEndpoints A list of destination endpoint names.
         * 
         * @return builder
         * 
         */
        public Builder destinationEndpoints(List<String> destinationEndpoints) {
            return destinationEndpoints(Output.of(destinationEndpoints));
        }

        /**
         * @param destinationEndpoints A list of destination endpoint names.
         * 
         * @return builder
         * 
         */
        public Builder destinationEndpoints(String... destinationEndpoints) {
            return destinationEndpoints(List.of(destinationEndpoints));
        }

        /**
         * @param enabled Should the test group be enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Should the test group be enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param name The name of the test group for the Network Connection Monitor.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the test group for the Network Connection Monitor.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param sourceEndpoints A list of source endpoint names.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpoints(Output<List<String>> sourceEndpoints) {
            $.sourceEndpoints = sourceEndpoints;
            return this;
        }

        /**
         * @param sourceEndpoints A list of source endpoint names.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpoints(List<String> sourceEndpoints) {
            return sourceEndpoints(Output.of(sourceEndpoints));
        }

        /**
         * @param sourceEndpoints A list of source endpoint names.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpoints(String... sourceEndpoints) {
            return sourceEndpoints(List.of(sourceEndpoints));
        }

        /**
         * @param testConfigurationNames A list of test configuration names.
         * 
         * @return builder
         * 
         */
        public Builder testConfigurationNames(Output<List<String>> testConfigurationNames) {
            $.testConfigurationNames = testConfigurationNames;
            return this;
        }

        /**
         * @param testConfigurationNames A list of test configuration names.
         * 
         * @return builder
         * 
         */
        public Builder testConfigurationNames(List<String> testConfigurationNames) {
            return testConfigurationNames(Output.of(testConfigurationNames));
        }

        /**
         * @param testConfigurationNames A list of test configuration names.
         * 
         * @return builder
         * 
         */
        public Builder testConfigurationNames(String... testConfigurationNames) {
            return testConfigurationNames(List.of(testConfigurationNames));
        }

        public NetworkConnectionMonitorTestGroupArgs build() {
            if ($.destinationEndpoints == null) {
                throw new MissingRequiredPropertyException("NetworkConnectionMonitorTestGroupArgs", "destinationEndpoints");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("NetworkConnectionMonitorTestGroupArgs", "name");
            }
            if ($.sourceEndpoints == null) {
                throw new MissingRequiredPropertyException("NetworkConnectionMonitorTestGroupArgs", "sourceEndpoints");
            }
            if ($.testConfigurationNames == null) {
                throw new MissingRequiredPropertyException("NetworkConnectionMonitorTestGroupArgs", "testConfigurationNames");
            }
            return $;
        }
    }

}
