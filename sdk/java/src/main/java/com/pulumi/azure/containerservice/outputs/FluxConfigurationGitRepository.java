// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FluxConfigurationGitRepository {
    /**
     * @return Specifies the Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS.
     * 
     */
    private @Nullable String httpsCaCertBase64;
    /**
     * @return Specifies the Base64-encoded HTTPS personal access token or password that will be used to access the repository.
     * 
     */
    private @Nullable String httpsKeyBase64;
    /**
     * @return Specifies the plaintext HTTPS username used to access private git repositories over HTTPS.
     * 
     */
    private @Nullable String httpsUser;
    /**
     * @return Specifies the name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets. It must be between 1 and 63 characters. It can contain only lowercase letters, numbers, and hyphens (-). It must start and end with a lowercase letter or number.
     * 
     */
    private @Nullable String localAuthReference;
    /**
     * @return Specifies the source reference type for the GitRepository object. Possible values are `branch`, `commit`, `semver` and `tag`.
     * 
     */
    private String referenceType;
    /**
     * @return Specifies the source reference value for the GitRepository object.
     * 
     */
    private String referenceValue;
    /**
     * @return Specifies the Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH.
     * 
     */
    private @Nullable String sshKnownHostsBase64;
    /**
     * @return Specifies the Base64-encoded SSH private key in PEM format.
     * 
     */
    private @Nullable String sshPrivateKeyBase64;
    /**
     * @return Specifies the interval at which to re-reconcile the cluster git repository source with the remote. Defaults to `600`.
     * 
     */
    private @Nullable Integer syncIntervalInSeconds;
    /**
     * @return Specifies the maximum time to attempt to reconcile the cluster git repository source with the remote. Defaults to `600`.
     * 
     */
    private @Nullable Integer timeoutInSeconds;
    /**
     * @return Specifies the URL to sync for the flux configuration git repository. It must start with `http://`, `https://`, `git@` or `ssh://`.
     * 
     */
    private String url;

    private FluxConfigurationGitRepository() {}
    /**
     * @return Specifies the Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS.
     * 
     */
    public Optional<String> httpsCaCertBase64() {
        return Optional.ofNullable(this.httpsCaCertBase64);
    }
    /**
     * @return Specifies the Base64-encoded HTTPS personal access token or password that will be used to access the repository.
     * 
     */
    public Optional<String> httpsKeyBase64() {
        return Optional.ofNullable(this.httpsKeyBase64);
    }
    /**
     * @return Specifies the plaintext HTTPS username used to access private git repositories over HTTPS.
     * 
     */
    public Optional<String> httpsUser() {
        return Optional.ofNullable(this.httpsUser);
    }
    /**
     * @return Specifies the name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets. It must be between 1 and 63 characters. It can contain only lowercase letters, numbers, and hyphens (-). It must start and end with a lowercase letter or number.
     * 
     */
    public Optional<String> localAuthReference() {
        return Optional.ofNullable(this.localAuthReference);
    }
    /**
     * @return Specifies the source reference type for the GitRepository object. Possible values are `branch`, `commit`, `semver` and `tag`.
     * 
     */
    public String referenceType() {
        return this.referenceType;
    }
    /**
     * @return Specifies the source reference value for the GitRepository object.
     * 
     */
    public String referenceValue() {
        return this.referenceValue;
    }
    /**
     * @return Specifies the Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH.
     * 
     */
    public Optional<String> sshKnownHostsBase64() {
        return Optional.ofNullable(this.sshKnownHostsBase64);
    }
    /**
     * @return Specifies the Base64-encoded SSH private key in PEM format.
     * 
     */
    public Optional<String> sshPrivateKeyBase64() {
        return Optional.ofNullable(this.sshPrivateKeyBase64);
    }
    /**
     * @return Specifies the interval at which to re-reconcile the cluster git repository source with the remote. Defaults to `600`.
     * 
     */
    public Optional<Integer> syncIntervalInSeconds() {
        return Optional.ofNullable(this.syncIntervalInSeconds);
    }
    /**
     * @return Specifies the maximum time to attempt to reconcile the cluster git repository source with the remote. Defaults to `600`.
     * 
     */
    public Optional<Integer> timeoutInSeconds() {
        return Optional.ofNullable(this.timeoutInSeconds);
    }
    /**
     * @return Specifies the URL to sync for the flux configuration git repository. It must start with `http://`, `https://`, `git@` or `ssh://`.
     * 
     */
    public String url() {
        return this.url;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FluxConfigurationGitRepository defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String httpsCaCertBase64;
        private @Nullable String httpsKeyBase64;
        private @Nullable String httpsUser;
        private @Nullable String localAuthReference;
        private String referenceType;
        private String referenceValue;
        private @Nullable String sshKnownHostsBase64;
        private @Nullable String sshPrivateKeyBase64;
        private @Nullable Integer syncIntervalInSeconds;
        private @Nullable Integer timeoutInSeconds;
        private String url;
        public Builder() {}
        public Builder(FluxConfigurationGitRepository defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.httpsCaCertBase64 = defaults.httpsCaCertBase64;
    	      this.httpsKeyBase64 = defaults.httpsKeyBase64;
    	      this.httpsUser = defaults.httpsUser;
    	      this.localAuthReference = defaults.localAuthReference;
    	      this.referenceType = defaults.referenceType;
    	      this.referenceValue = defaults.referenceValue;
    	      this.sshKnownHostsBase64 = defaults.sshKnownHostsBase64;
    	      this.sshPrivateKeyBase64 = defaults.sshPrivateKeyBase64;
    	      this.syncIntervalInSeconds = defaults.syncIntervalInSeconds;
    	      this.timeoutInSeconds = defaults.timeoutInSeconds;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder httpsCaCertBase64(@Nullable String httpsCaCertBase64) {

            this.httpsCaCertBase64 = httpsCaCertBase64;
            return this;
        }
        @CustomType.Setter
        public Builder httpsKeyBase64(@Nullable String httpsKeyBase64) {

            this.httpsKeyBase64 = httpsKeyBase64;
            return this;
        }
        @CustomType.Setter
        public Builder httpsUser(@Nullable String httpsUser) {

            this.httpsUser = httpsUser;
            return this;
        }
        @CustomType.Setter
        public Builder localAuthReference(@Nullable String localAuthReference) {

            this.localAuthReference = localAuthReference;
            return this;
        }
        @CustomType.Setter
        public Builder referenceType(String referenceType) {
            if (referenceType == null) {
              throw new MissingRequiredPropertyException("FluxConfigurationGitRepository", "referenceType");
            }
            this.referenceType = referenceType;
            return this;
        }
        @CustomType.Setter
        public Builder referenceValue(String referenceValue) {
            if (referenceValue == null) {
              throw new MissingRequiredPropertyException("FluxConfigurationGitRepository", "referenceValue");
            }
            this.referenceValue = referenceValue;
            return this;
        }
        @CustomType.Setter
        public Builder sshKnownHostsBase64(@Nullable String sshKnownHostsBase64) {

            this.sshKnownHostsBase64 = sshKnownHostsBase64;
            return this;
        }
        @CustomType.Setter
        public Builder sshPrivateKeyBase64(@Nullable String sshPrivateKeyBase64) {

            this.sshPrivateKeyBase64 = sshPrivateKeyBase64;
            return this;
        }
        @CustomType.Setter
        public Builder syncIntervalInSeconds(@Nullable Integer syncIntervalInSeconds) {

            this.syncIntervalInSeconds = syncIntervalInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutInSeconds(@Nullable Integer timeoutInSeconds) {

            this.timeoutInSeconds = timeoutInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("FluxConfigurationGitRepository", "url");
            }
            this.url = url;
            return this;
        }
        public FluxConfigurationGitRepository build() {
            final var _resultValue = new FluxConfigurationGitRepository();
            _resultValue.httpsCaCertBase64 = httpsCaCertBase64;
            _resultValue.httpsKeyBase64 = httpsKeyBase64;
            _resultValue.httpsUser = httpsUser;
            _resultValue.localAuthReference = localAuthReference;
            _resultValue.referenceType = referenceType;
            _resultValue.referenceValue = referenceValue;
            _resultValue.sshKnownHostsBase64 = sshKnownHostsBase64;
            _resultValue.sshPrivateKeyBase64 = sshPrivateKeyBase64;
            _resultValue.syncIntervalInSeconds = syncIntervalInSeconds;
            _resultValue.timeoutInSeconds = timeoutInSeconds;
            _resultValue.url = url;
            return _resultValue;
        }
    }
}
