// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.newrelic;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.newrelic.MonitorArgs;
import com.pulumi.azure.newrelic.inputs.MonitorState;
import com.pulumi.azure.newrelic.outputs.MonitorIdentity;
import com.pulumi.azure.newrelic.outputs.MonitorPlan;
import com.pulumi.azure.newrelic.outputs.MonitorUser;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages an Azure Native New Relic Monitor.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.newrelic.Monitor;
 * import com.pulumi.azure.newrelic.MonitorArgs;
 * import com.pulumi.azure.newrelic.inputs.MonitorPlanArgs;
 * import com.pulumi.azure.newrelic.inputs.MonitorUserArgs;
 * import com.pulumi.azure.newrelic.inputs.MonitorIdentityArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()
 *             .name("example-resources")
 *             .location("East US")
 *             .build());
 * 
 *         var exampleMonitor = new Monitor("exampleMonitor", MonitorArgs.builder()
 *             .name("example-nrm")
 *             .resourceGroupName(example.name())
 *             .location(example.location())
 *             .plan(MonitorPlanArgs.builder()
 *                 .effectiveDate("2023-06-06T00:00:00Z")
 *                 .build())
 *             .user(MonitorUserArgs.builder()
 *                 .email("user}{@literal @}{@code example.com")
 *                 .firstName("Example")
 *                 .lastName("User")
 *                 .phoneNumber("+12313803556")
 *                 .build())
 *             .identity(MonitorIdentityArgs.builder()
 *                 .type("SystemAssigned")
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Role Assignment
 * 
 * To enable metrics flow, perform role assignment on the identity created above. `Monitoring reader(43d0d8ad-25c7-4714-9337-8ba259a9fe05)` role is required .
 * 
 * ### Role assignment on the monitor created
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.CoreFunctions;
 * import com.pulumi.azure.core.inputs.GetSubscriptionArgs;
 * import com.pulumi.azure.authorization.AuthorizationFunctions;
 * import com.pulumi.azure.authorization.inputs.GetRoleDefinitionArgs;
 * import com.pulumi.azure.authorization.Assignment;
 * import com.pulumi.azure.authorization.AssignmentArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var primary = CoreFunctions.getSubscription(GetSubscriptionArgs.builder()
 *             .build());
 * 
 *         final var monitoringReader = AuthorizationFunctions.getRoleDefinition(GetRoleDefinitionArgs.builder()
 *             .name("Monitoring Reader")
 *             .build());
 * 
 *         var example = new Assignment("example", AssignmentArgs.builder()
 *             .scope(primary.id())
 *             .roleDefinitionId(String.format("%s%s", primary.id(),monitoringReader.id()))
 *             .principalId(exampleAzurermNewRelicMonitor.identity()[0].principalId())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Azure Native New Relic Monitor can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:newrelic/monitor:Monitor example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/NewRelic.Observability/monitors/monitor1
 * ```
 * 
 */
@ResourceType(type="azure:newrelic/monitor:Monitor")
public class Monitor extends com.pulumi.resources.CustomResource {
    /**
     * Specifies the source of account creation. Possible values are `LIFTR` and `NEWRELIC`. Defaults to `LIFTR`. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    @Export(name="accountCreationSource", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> accountCreationSource;

    /**
     * @return Specifies the source of account creation. Possible values are `LIFTR` and `NEWRELIC`. Defaults to `LIFTR`. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    public Output<Optional<String>> accountCreationSource() {
        return Codegen.optional(this.accountCreationSource);
    }
    /**
     * Specifies the account id. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     * &gt; **NOTE:** The value of `account_id` must come from an Azure Native New Relic Monitor instance of another different subscription.
     * 
     */
    @Export(name="accountId", refs={String.class}, tree="[0]")
    private Output<String> accountId;

    /**
     * @return Specifies the account id. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     * &gt; **NOTE:** The value of `account_id` must come from an Azure Native New Relic Monitor instance of another different subscription.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }
    /**
     * An `identity` block as defined below. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    @Export(name="identity", refs={MonitorIdentity.class}, tree="[0]")
    private Output</* @Nullable */ MonitorIdentity> identity;

    /**
     * @return An `identity` block as defined below. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    public Output<Optional<MonitorIdentity>> identity() {
        return Codegen.optional(this.identity);
    }
    /**
     * Specifies the ingestion key of account. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    @Export(name="ingestionKey", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ingestionKey;

    /**
     * @return Specifies the ingestion key of account. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    public Output<Optional<String>> ingestionKey() {
        return Codegen.optional(this.ingestionKey);
    }
    /**
     * Specifies the Azure Region where the Azure Native New Relic Monitor should exist. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Specifies the Azure Region where the Azure Native New Relic Monitor should exist. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Specifies the name which should be used for this Azure Native New Relic Monitor. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Specifies the name which should be used for this Azure Native New Relic Monitor. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Specifies the source of org creation. Possible values are `LIFTR` and `NEWRELIC`. Defaults to `LIFTR`. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    @Export(name="orgCreationSource", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> orgCreationSource;

    /**
     * @return Specifies the source of org creation. Possible values are `LIFTR` and `NEWRELIC`. Defaults to `LIFTR`. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    public Output<Optional<String>> orgCreationSource() {
        return Codegen.optional(this.orgCreationSource);
    }
    /**
     * Specifies the organization id. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     * &gt; **NOTE:** The value of `organization_id` must come from an Azure Native New Relic Monitor instance of another different subscription.
     * 
     */
    @Export(name="organizationId", refs={String.class}, tree="[0]")
    private Output<String> organizationId;

    /**
     * @return Specifies the organization id. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     * &gt; **NOTE:** The value of `organization_id` must come from an Azure Native New Relic Monitor instance of another different subscription.
     * 
     */
    public Output<String> organizationId() {
        return this.organizationId;
    }
    /**
     * A `plan` block as defined below. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    @Export(name="plan", refs={MonitorPlan.class}, tree="[0]")
    private Output<MonitorPlan> plan;

    /**
     * @return A `plan` block as defined below. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    public Output<MonitorPlan> plan() {
        return this.plan;
    }
    /**
     * Specifies the name of the Resource Group where the Azure Native New Relic Monitor should exist. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return Specifies the name of the Resource Group where the Azure Native New Relic Monitor should exist. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * A `user` block as defined below. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    @Export(name="user", refs={MonitorUser.class}, tree="[0]")
    private Output<MonitorUser> user;

    /**
     * @return A `user` block as defined below. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    public Output<MonitorUser> user() {
        return this.user;
    }
    /**
     * Specifies the user id. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    @Export(name="userId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> userId;

    /**
     * @return Specifies the user id. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    public Output<Optional<String>> userId() {
        return Codegen.optional(this.userId);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Monitor(java.lang.String name) {
        this(name, MonitorArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Monitor(java.lang.String name, MonitorArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Monitor(java.lang.String name, MonitorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:newrelic/monitor:Monitor", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Monitor(java.lang.String name, Output<java.lang.String> id, @Nullable MonitorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:newrelic/monitor:Monitor", name, state, makeResourceOptions(options, id), false);
    }

    private static MonitorArgs makeArgs(MonitorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? MonitorArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "ingestionKey"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Monitor get(java.lang.String name, Output<java.lang.String> id, @Nullable MonitorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Monitor(name, id, state, options);
    }
}
