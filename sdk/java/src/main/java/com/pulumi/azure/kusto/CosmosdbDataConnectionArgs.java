// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.kusto;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CosmosdbDataConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final CosmosdbDataConnectionArgs Empty = new CosmosdbDataConnectionArgs();

    /**
     * The name of an existing container in the Cosmos DB database. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    @Import(name="cosmosdbContainerId", required=true)
    private Output<String> cosmosdbContainerId;

    /**
     * @return The name of an existing container in the Cosmos DB database. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    public Output<String> cosmosdbContainerId() {
        return this.cosmosdbContainerId;
    }

    /**
     * The name of the database in the Kusto cluster. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    @Import(name="kustoDatabaseId", required=true)
    private Output<String> kustoDatabaseId;

    /**
     * @return The name of the database in the Kusto cluster. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    public Output<String> kustoDatabaseId() {
        return this.kustoDatabaseId;
    }

    /**
     * The Azure Region where the Data Explorer should exist. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The Azure Region where the Data Explorer should exist. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The resource ID of a managed system or user-assigned identity. The identity is used to authenticate with Cosmos DB. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    @Import(name="managedIdentityId", required=true)
    private Output<String> managedIdentityId;

    /**
     * @return The resource ID of a managed system or user-assigned identity. The identity is used to authenticate with Cosmos DB. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    public Output<String> managedIdentityId() {
        return this.managedIdentityId;
    }

    /**
     * The name of an existing mapping rule to use when ingesting the retrieved data. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    @Import(name="mappingRuleName")
    private @Nullable Output<String> mappingRuleName;

    /**
     * @return The name of an existing mapping rule to use when ingesting the retrieved data. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    public Optional<Output<String>> mappingRuleName() {
        return Optional.ofNullable(this.mappingRuleName);
    }

    /**
     * The name of the data connection. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the data connection. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * If defined, the data connection retrieves Cosmos DB documents created or updated after the specified retrieval start date. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    @Import(name="retrievalStartDate")
    private @Nullable Output<String> retrievalStartDate;

    /**
     * @return If defined, the data connection retrieves Cosmos DB documents created or updated after the specified retrieval start date. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    public Optional<Output<String>> retrievalStartDate() {
        return Optional.ofNullable(this.retrievalStartDate);
    }

    /**
     * The case-sensitive name of the existing target table in your cluster. Retrieved data is ingested into this table. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    @Import(name="tableName", required=true)
    private Output<String> tableName;

    /**
     * @return The case-sensitive name of the existing target table in your cluster. Retrieved data is ingested into this table. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    public Output<String> tableName() {
        return this.tableName;
    }

    private CosmosdbDataConnectionArgs() {}

    private CosmosdbDataConnectionArgs(CosmosdbDataConnectionArgs $) {
        this.cosmosdbContainerId = $.cosmosdbContainerId;
        this.kustoDatabaseId = $.kustoDatabaseId;
        this.location = $.location;
        this.managedIdentityId = $.managedIdentityId;
        this.mappingRuleName = $.mappingRuleName;
        this.name = $.name;
        this.retrievalStartDate = $.retrievalStartDate;
        this.tableName = $.tableName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CosmosdbDataConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CosmosdbDataConnectionArgs $;

        public Builder() {
            $ = new CosmosdbDataConnectionArgs();
        }

        public Builder(CosmosdbDataConnectionArgs defaults) {
            $ = new CosmosdbDataConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cosmosdbContainerId The name of an existing container in the Cosmos DB database. Changing this forces a new Kusto Cosmos DB Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder cosmosdbContainerId(Output<String> cosmosdbContainerId) {
            $.cosmosdbContainerId = cosmosdbContainerId;
            return this;
        }

        /**
         * @param cosmosdbContainerId The name of an existing container in the Cosmos DB database. Changing this forces a new Kusto Cosmos DB Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder cosmosdbContainerId(String cosmosdbContainerId) {
            return cosmosdbContainerId(Output.of(cosmosdbContainerId));
        }

        /**
         * @param kustoDatabaseId The name of the database in the Kusto cluster. Changing this forces a new Kusto Cosmos DB Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder kustoDatabaseId(Output<String> kustoDatabaseId) {
            $.kustoDatabaseId = kustoDatabaseId;
            return this;
        }

        /**
         * @param kustoDatabaseId The name of the database in the Kusto cluster. Changing this forces a new Kusto Cosmos DB Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder kustoDatabaseId(String kustoDatabaseId) {
            return kustoDatabaseId(Output.of(kustoDatabaseId));
        }

        /**
         * @param location The Azure Region where the Data Explorer should exist. Changing this forces a new Kusto Cosmos DB Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The Azure Region where the Data Explorer should exist. Changing this forces a new Kusto Cosmos DB Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param managedIdentityId The resource ID of a managed system or user-assigned identity. The identity is used to authenticate with Cosmos DB. Changing this forces a new Kusto Cosmos DB Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder managedIdentityId(Output<String> managedIdentityId) {
            $.managedIdentityId = managedIdentityId;
            return this;
        }

        /**
         * @param managedIdentityId The resource ID of a managed system or user-assigned identity. The identity is used to authenticate with Cosmos DB. Changing this forces a new Kusto Cosmos DB Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder managedIdentityId(String managedIdentityId) {
            return managedIdentityId(Output.of(managedIdentityId));
        }

        /**
         * @param mappingRuleName The name of an existing mapping rule to use when ingesting the retrieved data. Changing this forces a new Kusto Cosmos DB Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder mappingRuleName(@Nullable Output<String> mappingRuleName) {
            $.mappingRuleName = mappingRuleName;
            return this;
        }

        /**
         * @param mappingRuleName The name of an existing mapping rule to use when ingesting the retrieved data. Changing this forces a new Kusto Cosmos DB Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder mappingRuleName(String mappingRuleName) {
            return mappingRuleName(Output.of(mappingRuleName));
        }

        /**
         * @param name The name of the data connection. Changing this forces a new Kusto Cosmos DB Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the data connection. Changing this forces a new Kusto Cosmos DB Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param retrievalStartDate If defined, the data connection retrieves Cosmos DB documents created or updated after the specified retrieval start date. Changing this forces a new Kusto Cosmos DB Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder retrievalStartDate(@Nullable Output<String> retrievalStartDate) {
            $.retrievalStartDate = retrievalStartDate;
            return this;
        }

        /**
         * @param retrievalStartDate If defined, the data connection retrieves Cosmos DB documents created or updated after the specified retrieval start date. Changing this forces a new Kusto Cosmos DB Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder retrievalStartDate(String retrievalStartDate) {
            return retrievalStartDate(Output.of(retrievalStartDate));
        }

        /**
         * @param tableName The case-sensitive name of the existing target table in your cluster. Retrieved data is ingested into this table. Changing this forces a new Kusto Cosmos DB Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder tableName(Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        /**
         * @param tableName The case-sensitive name of the existing target table in your cluster. Retrieved data is ingested into this table. Changing this forces a new Kusto Cosmos DB Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        public CosmosdbDataConnectionArgs build() {
            if ($.cosmosdbContainerId == null) {
                throw new MissingRequiredPropertyException("CosmosdbDataConnectionArgs", "cosmosdbContainerId");
            }
            if ($.kustoDatabaseId == null) {
                throw new MissingRequiredPropertyException("CosmosdbDataConnectionArgs", "kustoDatabaseId");
            }
            if ($.managedIdentityId == null) {
                throw new MissingRequiredPropertyException("CosmosdbDataConnectionArgs", "managedIdentityId");
            }
            if ($.tableName == null) {
                throw new MissingRequiredPropertyException("CosmosdbDataConnectionArgs", "tableName");
            }
            return $;
        }
    }

}
