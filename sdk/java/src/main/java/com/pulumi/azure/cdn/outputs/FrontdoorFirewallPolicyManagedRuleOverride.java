// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cdn.outputs;

import com.pulumi.azure.cdn.outputs.FrontdoorFirewallPolicyManagedRuleOverrideExclusion;
import com.pulumi.azure.cdn.outputs.FrontdoorFirewallPolicyManagedRuleOverrideRule;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class FrontdoorFirewallPolicyManagedRuleOverride {
    /**
     * @return One or more `exclusion` blocks as defined below.
     * 
     */
    private @Nullable List<FrontdoorFirewallPolicyManagedRuleOverrideExclusion> exclusions;
    /**
     * @return The managed rule group to override.
     * 
     */
    private String ruleGroupName;
    /**
     * @return One or more `rule` blocks as defined below. If none are specified, all of the rules in the group will be disabled.
     * 
     */
    private @Nullable List<FrontdoorFirewallPolicyManagedRuleOverrideRule> rules;

    private FrontdoorFirewallPolicyManagedRuleOverride() {}
    /**
     * @return One or more `exclusion` blocks as defined below.
     * 
     */
    public List<FrontdoorFirewallPolicyManagedRuleOverrideExclusion> exclusions() {
        return this.exclusions == null ? List.of() : this.exclusions;
    }
    /**
     * @return The managed rule group to override.
     * 
     */
    public String ruleGroupName() {
        return this.ruleGroupName;
    }
    /**
     * @return One or more `rule` blocks as defined below. If none are specified, all of the rules in the group will be disabled.
     * 
     */
    public List<FrontdoorFirewallPolicyManagedRuleOverrideRule> rules() {
        return this.rules == null ? List.of() : this.rules;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FrontdoorFirewallPolicyManagedRuleOverride defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<FrontdoorFirewallPolicyManagedRuleOverrideExclusion> exclusions;
        private String ruleGroupName;
        private @Nullable List<FrontdoorFirewallPolicyManagedRuleOverrideRule> rules;
        public Builder() {}
        public Builder(FrontdoorFirewallPolicyManagedRuleOverride defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.exclusions = defaults.exclusions;
    	      this.ruleGroupName = defaults.ruleGroupName;
    	      this.rules = defaults.rules;
        }

        @CustomType.Setter
        public Builder exclusions(@Nullable List<FrontdoorFirewallPolicyManagedRuleOverrideExclusion> exclusions) {

            this.exclusions = exclusions;
            return this;
        }
        public Builder exclusions(FrontdoorFirewallPolicyManagedRuleOverrideExclusion... exclusions) {
            return exclusions(List.of(exclusions));
        }
        @CustomType.Setter
        public Builder ruleGroupName(String ruleGroupName) {
            if (ruleGroupName == null) {
              throw new MissingRequiredPropertyException("FrontdoorFirewallPolicyManagedRuleOverride", "ruleGroupName");
            }
            this.ruleGroupName = ruleGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder rules(@Nullable List<FrontdoorFirewallPolicyManagedRuleOverrideRule> rules) {

            this.rules = rules;
            return this;
        }
        public Builder rules(FrontdoorFirewallPolicyManagedRuleOverrideRule... rules) {
            return rules(List.of(rules));
        }
        public FrontdoorFirewallPolicyManagedRuleOverride build() {
            final var _resultValue = new FrontdoorFirewallPolicyManagedRuleOverride();
            _resultValue.exclusions = exclusions;
            _resultValue.ruleGroupName = ruleGroupName;
            _resultValue.rules = rules;
            return _resultValue;
        }
    }
}
