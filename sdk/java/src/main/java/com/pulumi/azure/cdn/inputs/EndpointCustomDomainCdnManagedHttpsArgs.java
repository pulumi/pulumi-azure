// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cdn.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EndpointCustomDomainCdnManagedHttpsArgs extends com.pulumi.resources.ResourceArgs {

    public static final EndpointCustomDomainCdnManagedHttpsArgs Empty = new EndpointCustomDomainCdnManagedHttpsArgs();

    /**
     * The type of HTTPS certificate. Possible values are `Shared` and `Dedicated`.
     * 
     */
    @Import(name="certificateType", required=true)
    private Output<String> certificateType;

    /**
     * @return The type of HTTPS certificate. Possible values are `Shared` and `Dedicated`.
     * 
     */
    public Output<String> certificateType() {
        return this.certificateType;
    }

    /**
     * The type of protocol. Possible values are `ServerNameIndication` and `IPBased`.
     * 
     */
    @Import(name="protocolType", required=true)
    private Output<String> protocolType;

    /**
     * @return The type of protocol. Possible values are `ServerNameIndication` and `IPBased`.
     * 
     */
    public Output<String> protocolType() {
        return this.protocolType;
    }

    /**
     * The minimum TLS protocol version that is used for HTTPS. Possible values are `TLS10` (representing TLS 1.0/1.1), `TLS12` (representing TLS 1.2) and `None` (representing no minimums). Defaults to `TLS12`.
     * 
     */
    @Import(name="tlsVersion")
    private @Nullable Output<String> tlsVersion;

    /**
     * @return The minimum TLS protocol version that is used for HTTPS. Possible values are `TLS10` (representing TLS 1.0/1.1), `TLS12` (representing TLS 1.2) and `None` (representing no minimums). Defaults to `TLS12`.
     * 
     */
    public Optional<Output<String>> tlsVersion() {
        return Optional.ofNullable(this.tlsVersion);
    }

    private EndpointCustomDomainCdnManagedHttpsArgs() {}

    private EndpointCustomDomainCdnManagedHttpsArgs(EndpointCustomDomainCdnManagedHttpsArgs $) {
        this.certificateType = $.certificateType;
        this.protocolType = $.protocolType;
        this.tlsVersion = $.tlsVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EndpointCustomDomainCdnManagedHttpsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EndpointCustomDomainCdnManagedHttpsArgs $;

        public Builder() {
            $ = new EndpointCustomDomainCdnManagedHttpsArgs();
        }

        public Builder(EndpointCustomDomainCdnManagedHttpsArgs defaults) {
            $ = new EndpointCustomDomainCdnManagedHttpsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateType The type of HTTPS certificate. Possible values are `Shared` and `Dedicated`.
         * 
         * @return builder
         * 
         */
        public Builder certificateType(Output<String> certificateType) {
            $.certificateType = certificateType;
            return this;
        }

        /**
         * @param certificateType The type of HTTPS certificate. Possible values are `Shared` and `Dedicated`.
         * 
         * @return builder
         * 
         */
        public Builder certificateType(String certificateType) {
            return certificateType(Output.of(certificateType));
        }

        /**
         * @param protocolType The type of protocol. Possible values are `ServerNameIndication` and `IPBased`.
         * 
         * @return builder
         * 
         */
        public Builder protocolType(Output<String> protocolType) {
            $.protocolType = protocolType;
            return this;
        }

        /**
         * @param protocolType The type of protocol. Possible values are `ServerNameIndication` and `IPBased`.
         * 
         * @return builder
         * 
         */
        public Builder protocolType(String protocolType) {
            return protocolType(Output.of(protocolType));
        }

        /**
         * @param tlsVersion The minimum TLS protocol version that is used for HTTPS. Possible values are `TLS10` (representing TLS 1.0/1.1), `TLS12` (representing TLS 1.2) and `None` (representing no minimums). Defaults to `TLS12`.
         * 
         * @return builder
         * 
         */
        public Builder tlsVersion(@Nullable Output<String> tlsVersion) {
            $.tlsVersion = tlsVersion;
            return this;
        }

        /**
         * @param tlsVersion The minimum TLS protocol version that is used for HTTPS. Possible values are `TLS10` (representing TLS 1.0/1.1), `TLS12` (representing TLS 1.2) and `None` (representing no minimums). Defaults to `TLS12`.
         * 
         * @return builder
         * 
         */
        public Builder tlsVersion(String tlsVersion) {
            return tlsVersion(Output.of(tlsVersion));
        }

        public EndpointCustomDomainCdnManagedHttpsArgs build() {
            if ($.certificateType == null) {
                throw new MissingRequiredPropertyException("EndpointCustomDomainCdnManagedHttpsArgs", "certificateType");
            }
            if ($.protocolType == null) {
                throw new MissingRequiredPropertyException("EndpointCustomDomainCdnManagedHttpsArgs", "protocolType");
            }
            return $;
        }
    }

}
