// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VirtualNetworkGatewayConnectionIpsecPolicy {
    /**
     * @return The DH group used in IKE phase 1 for initial SA. Valid options are `DHGroup1`, `DHGroup14`, `DHGroup2`, `DHGroup2048`, `DHGroup24`, `ECP256`, `ECP384`, or `None`.
     * 
     */
    private String dhGroup;
    /**
     * @return The IKE encryption algorithm. Valid options are `AES128`, `AES192`, `AES256`, `DES`, `DES3`, `GCMAES128`, or `GCMAES256`.
     * 
     */
    private String ikeEncryption;
    /**
     * @return The IKE integrity algorithm. Valid options are `GCMAES128`, `GCMAES256`, `MD5`, `SHA1`, `SHA256`, or `SHA384`.
     * 
     */
    private String ikeIntegrity;
    /**
     * @return The IPSec encryption algorithm. Valid options are `AES128`, `AES192`, `AES256`, `DES`, `DES3`, `GCMAES128`, `GCMAES192`, `GCMAES256`, or `None`.
     * 
     */
    private String ipsecEncryption;
    /**
     * @return The IPSec integrity algorithm. Valid options are `GCMAES128`, `GCMAES192`, `GCMAES256`, `MD5`, `SHA1`, or `SHA256`.
     * 
     */
    private String ipsecIntegrity;
    /**
     * @return The DH group used in IKE phase 2 for new child SA.
     * Valid options are `ECP256`, `ECP384`, `PFS1`, `PFS14`, `PFS2`, `PFS2048`, `PFS24`, `PFSMM`,
     * or `None`.
     * 
     */
    private String pfsGroup;
    /**
     * @return The IPSec SA payload size in KB. Must be at least `1024` KB. Defaults to `102400000` KB.
     * 
     */
    private @Nullable Integer saDatasize;
    /**
     * @return The IPSec SA lifetime in seconds. Must be at least `300` seconds. Defaults to `27000` seconds.
     * 
     */
    private @Nullable Integer saLifetime;

    private VirtualNetworkGatewayConnectionIpsecPolicy() {}
    /**
     * @return The DH group used in IKE phase 1 for initial SA. Valid options are `DHGroup1`, `DHGroup14`, `DHGroup2`, `DHGroup2048`, `DHGroup24`, `ECP256`, `ECP384`, or `None`.
     * 
     */
    public String dhGroup() {
        return this.dhGroup;
    }
    /**
     * @return The IKE encryption algorithm. Valid options are `AES128`, `AES192`, `AES256`, `DES`, `DES3`, `GCMAES128`, or `GCMAES256`.
     * 
     */
    public String ikeEncryption() {
        return this.ikeEncryption;
    }
    /**
     * @return The IKE integrity algorithm. Valid options are `GCMAES128`, `GCMAES256`, `MD5`, `SHA1`, `SHA256`, or `SHA384`.
     * 
     */
    public String ikeIntegrity() {
        return this.ikeIntegrity;
    }
    /**
     * @return The IPSec encryption algorithm. Valid options are `AES128`, `AES192`, `AES256`, `DES`, `DES3`, `GCMAES128`, `GCMAES192`, `GCMAES256`, or `None`.
     * 
     */
    public String ipsecEncryption() {
        return this.ipsecEncryption;
    }
    /**
     * @return The IPSec integrity algorithm. Valid options are `GCMAES128`, `GCMAES192`, `GCMAES256`, `MD5`, `SHA1`, or `SHA256`.
     * 
     */
    public String ipsecIntegrity() {
        return this.ipsecIntegrity;
    }
    /**
     * @return The DH group used in IKE phase 2 for new child SA.
     * Valid options are `ECP256`, `ECP384`, `PFS1`, `PFS14`, `PFS2`, `PFS2048`, `PFS24`, `PFSMM`,
     * or `None`.
     * 
     */
    public String pfsGroup() {
        return this.pfsGroup;
    }
    /**
     * @return The IPSec SA payload size in KB. Must be at least `1024` KB. Defaults to `102400000` KB.
     * 
     */
    public Optional<Integer> saDatasize() {
        return Optional.ofNullable(this.saDatasize);
    }
    /**
     * @return The IPSec SA lifetime in seconds. Must be at least `300` seconds. Defaults to `27000` seconds.
     * 
     */
    public Optional<Integer> saLifetime() {
        return Optional.ofNullable(this.saLifetime);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualNetworkGatewayConnectionIpsecPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String dhGroup;
        private String ikeEncryption;
        private String ikeIntegrity;
        private String ipsecEncryption;
        private String ipsecIntegrity;
        private String pfsGroup;
        private @Nullable Integer saDatasize;
        private @Nullable Integer saLifetime;
        public Builder() {}
        public Builder(VirtualNetworkGatewayConnectionIpsecPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dhGroup = defaults.dhGroup;
    	      this.ikeEncryption = defaults.ikeEncryption;
    	      this.ikeIntegrity = defaults.ikeIntegrity;
    	      this.ipsecEncryption = defaults.ipsecEncryption;
    	      this.ipsecIntegrity = defaults.ipsecIntegrity;
    	      this.pfsGroup = defaults.pfsGroup;
    	      this.saDatasize = defaults.saDatasize;
    	      this.saLifetime = defaults.saLifetime;
        }

        @CustomType.Setter
        public Builder dhGroup(String dhGroup) {
            if (dhGroup == null) {
              throw new MissingRequiredPropertyException("VirtualNetworkGatewayConnectionIpsecPolicy", "dhGroup");
            }
            this.dhGroup = dhGroup;
            return this;
        }
        @CustomType.Setter
        public Builder ikeEncryption(String ikeEncryption) {
            if (ikeEncryption == null) {
              throw new MissingRequiredPropertyException("VirtualNetworkGatewayConnectionIpsecPolicy", "ikeEncryption");
            }
            this.ikeEncryption = ikeEncryption;
            return this;
        }
        @CustomType.Setter
        public Builder ikeIntegrity(String ikeIntegrity) {
            if (ikeIntegrity == null) {
              throw new MissingRequiredPropertyException("VirtualNetworkGatewayConnectionIpsecPolicy", "ikeIntegrity");
            }
            this.ikeIntegrity = ikeIntegrity;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecEncryption(String ipsecEncryption) {
            if (ipsecEncryption == null) {
              throw new MissingRequiredPropertyException("VirtualNetworkGatewayConnectionIpsecPolicy", "ipsecEncryption");
            }
            this.ipsecEncryption = ipsecEncryption;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecIntegrity(String ipsecIntegrity) {
            if (ipsecIntegrity == null) {
              throw new MissingRequiredPropertyException("VirtualNetworkGatewayConnectionIpsecPolicy", "ipsecIntegrity");
            }
            this.ipsecIntegrity = ipsecIntegrity;
            return this;
        }
        @CustomType.Setter
        public Builder pfsGroup(String pfsGroup) {
            if (pfsGroup == null) {
              throw new MissingRequiredPropertyException("VirtualNetworkGatewayConnectionIpsecPolicy", "pfsGroup");
            }
            this.pfsGroup = pfsGroup;
            return this;
        }
        @CustomType.Setter
        public Builder saDatasize(@Nullable Integer saDatasize) {

            this.saDatasize = saDatasize;
            return this;
        }
        @CustomType.Setter
        public Builder saLifetime(@Nullable Integer saLifetime) {

            this.saLifetime = saLifetime;
            return this;
        }
        public VirtualNetworkGatewayConnectionIpsecPolicy build() {
            final var _resultValue = new VirtualNetworkGatewayConnectionIpsecPolicy();
            _resultValue.dhGroup = dhGroup;
            _resultValue.ikeEncryption = ikeEncryption;
            _resultValue.ikeIntegrity = ikeIntegrity;
            _resultValue.ipsecEncryption = ipsecEncryption;
            _resultValue.ipsecIntegrity = ipsecIntegrity;
            _resultValue.pfsGroup = pfsGroup;
            _resultValue.saDatasize = saDatasize;
            _resultValue.saLifetime = saLifetime;
            return _resultValue;
        }
    }
}
