// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransformOutputCustomPresetCodecJpgImageLayerArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransformOutputCustomPresetCodecJpgImageLayerArgs Empty = new TransformOutputCustomPresetCodecJpgImageLayerArgs();

    /**
     * The height of the rectangular region in pixels. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
     * 
     */
    @Import(name="height")
    private @Nullable Output<String> height;

    /**
     * @return The height of the rectangular region in pixels. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
     * 
     */
    public Optional<Output<String>> height() {
        return Optional.ofNullable(this.height);
    }

    /**
     * Specifies the label for the codec. The label can be used to control muxing behavior.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return Specifies the label for the codec. The label can be used to control muxing behavior.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * The compression quality of the JPEG output. Range is from `0` to `100` and the default is `70`.
     * 
     */
    @Import(name="quality")
    private @Nullable Output<Integer> quality;

    /**
     * @return The compression quality of the JPEG output. Range is from `0` to `100` and the default is `70`.
     * 
     */
    public Optional<Output<Integer>> quality() {
        return Optional.ofNullable(this.quality);
    }

    /**
     * The width of the rectangular region in pixels. This can be absolute pixel value (e.g`  100 `), or relative to the size of the video (For example, `50%`).
     * 
     */
    @Import(name="width")
    private @Nullable Output<String> width;

    /**
     * @return The width of the rectangular region in pixels. This can be absolute pixel value (e.g`  100 `), or relative to the size of the video (For example, `50%`).
     * 
     */
    public Optional<Output<String>> width() {
        return Optional.ofNullable(this.width);
    }

    private TransformOutputCustomPresetCodecJpgImageLayerArgs() {}

    private TransformOutputCustomPresetCodecJpgImageLayerArgs(TransformOutputCustomPresetCodecJpgImageLayerArgs $) {
        this.height = $.height;
        this.label = $.label;
        this.quality = $.quality;
        this.width = $.width;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransformOutputCustomPresetCodecJpgImageLayerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransformOutputCustomPresetCodecJpgImageLayerArgs $;

        public Builder() {
            $ = new TransformOutputCustomPresetCodecJpgImageLayerArgs();
        }

        public Builder(TransformOutputCustomPresetCodecJpgImageLayerArgs defaults) {
            $ = new TransformOutputCustomPresetCodecJpgImageLayerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param height The height of the rectangular region in pixels. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
         * 
         * @return builder
         * 
         */
        public Builder height(@Nullable Output<String> height) {
            $.height = height;
            return this;
        }

        /**
         * @param height The height of the rectangular region in pixels. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
         * 
         * @return builder
         * 
         */
        public Builder height(String height) {
            return height(Output.of(height));
        }

        /**
         * @param label Specifies the label for the codec. The label can be used to control muxing behavior.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label Specifies the label for the codec. The label can be used to control muxing behavior.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param quality The compression quality of the JPEG output. Range is from `0` to `100` and the default is `70`.
         * 
         * @return builder
         * 
         */
        public Builder quality(@Nullable Output<Integer> quality) {
            $.quality = quality;
            return this;
        }

        /**
         * @param quality The compression quality of the JPEG output. Range is from `0` to `100` and the default is `70`.
         * 
         * @return builder
         * 
         */
        public Builder quality(Integer quality) {
            return quality(Output.of(quality));
        }

        /**
         * @param width The width of the rectangular region in pixels. This can be absolute pixel value (e.g`  100 `), or relative to the size of the video (For example, `50%`).
         * 
         * @return builder
         * 
         */
        public Builder width(@Nullable Output<String> width) {
            $.width = width;
            return this;
        }

        /**
         * @param width The width of the rectangular region in pixels. This can be absolute pixel value (e.g`  100 `), or relative to the size of the video (For example, `50%`).
         * 
         * @return builder
         * 
         */
        public Builder width(String width) {
            return width(Output.of(width));
        }

        public TransformOutputCustomPresetCodecJpgImageLayerArgs build() {
            return $;
        }
    }

}
