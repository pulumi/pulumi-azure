// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.inputs;

import com.pulumi.azure.media.inputs.ContentKeyPolicyPolicyOptionFairplayConfigurationArgs;
import com.pulumi.azure.media.inputs.ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs;
import com.pulumi.azure.media.inputs.ContentKeyPolicyPolicyOptionTokenRestrictionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContentKeyPolicyPolicyOptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContentKeyPolicyPolicyOptionArgs Empty = new ContentKeyPolicyPolicyOptionArgs();

    /**
     * Enable a configuration for non-DRM keys.
     * 
     */
    @Import(name="clearKeyConfigurationEnabled")
    private @Nullable Output<Boolean> clearKeyConfigurationEnabled;

    /**
     * @return Enable a configuration for non-DRM keys.
     * 
     */
    public Optional<Output<Boolean>> clearKeyConfigurationEnabled() {
        return Optional.ofNullable(this.clearKeyConfigurationEnabled);
    }

    /**
     * A `fairplay_configuration` block as defined above. Check license requirements here &lt;https://docs.microsoft.com/azure/media-services/latest/fairplay-license-overview&gt;.
     * 
     */
    @Import(name="fairplayConfiguration")
    private @Nullable Output<ContentKeyPolicyPolicyOptionFairplayConfigurationArgs> fairplayConfiguration;

    /**
     * @return A `fairplay_configuration` block as defined above. Check license requirements here &lt;https://docs.microsoft.com/azure/media-services/latest/fairplay-license-overview&gt;.
     * 
     */
    public Optional<Output<ContentKeyPolicyPolicyOptionFairplayConfigurationArgs>> fairplayConfiguration() {
        return Optional.ofNullable(this.fairplayConfiguration);
    }

    /**
     * The name which should be used for this Policy Option.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name which should be used for this Policy Option.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Enable an open restriction. License or key will be delivered on every request.
     * 
     */
    @Import(name="openRestrictionEnabled")
    private @Nullable Output<Boolean> openRestrictionEnabled;

    /**
     * @return Enable an open restriction. License or key will be delivered on every request.
     * 
     */
    public Optional<Output<Boolean>> openRestrictionEnabled() {
        return Optional.ofNullable(this.openRestrictionEnabled);
    }

    /**
     * One or more `playready_configuration_license` blocks as defined above.
     * 
     */
    @Import(name="playreadyConfigurationLicenses")
    private @Nullable Output<List<ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs>> playreadyConfigurationLicenses;

    /**
     * @return One or more `playready_configuration_license` blocks as defined above.
     * 
     */
    public Optional<Output<List<ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs>>> playreadyConfigurationLicenses() {
        return Optional.ofNullable(this.playreadyConfigurationLicenses);
    }

    /**
     * The custom response data of the PlayReady configuration. This only applies when `playready_configuration_license` is specified.
     * 
     */
    @Import(name="playreadyResponseCustomData")
    private @Nullable Output<String> playreadyResponseCustomData;

    /**
     * @return The custom response data of the PlayReady configuration. This only applies when `playready_configuration_license` is specified.
     * 
     */
    public Optional<Output<String>> playreadyResponseCustomData() {
        return Optional.ofNullable(this.playreadyResponseCustomData);
    }

    /**
     * A `token_restriction` block as defined below.
     * 
     */
    @Import(name="tokenRestriction")
    private @Nullable Output<ContentKeyPolicyPolicyOptionTokenRestrictionArgs> tokenRestriction;

    /**
     * @return A `token_restriction` block as defined below.
     * 
     */
    public Optional<Output<ContentKeyPolicyPolicyOptionTokenRestrictionArgs>> tokenRestriction() {
        return Optional.ofNullable(this.tokenRestriction);
    }

    /**
     * The Widevine template.
     * 
     * &gt; **NOTE:** Each policy_option can only have one type of configuration: `fairplay_configuration`, `clear_key_configuration_enabled`, `playready_configuration_license` or `widevine_configuration_template`. And is possible to assign only one type of restriction: `open_restriction_enabled` or `token_restriction`.
     * 
     */
    @Import(name="widevineConfigurationTemplate")
    private @Nullable Output<String> widevineConfigurationTemplate;

    /**
     * @return The Widevine template.
     * 
     * &gt; **NOTE:** Each policy_option can only have one type of configuration: `fairplay_configuration`, `clear_key_configuration_enabled`, `playready_configuration_license` or `widevine_configuration_template`. And is possible to assign only one type of restriction: `open_restriction_enabled` or `token_restriction`.
     * 
     */
    public Optional<Output<String>> widevineConfigurationTemplate() {
        return Optional.ofNullable(this.widevineConfigurationTemplate);
    }

    private ContentKeyPolicyPolicyOptionArgs() {}

    private ContentKeyPolicyPolicyOptionArgs(ContentKeyPolicyPolicyOptionArgs $) {
        this.clearKeyConfigurationEnabled = $.clearKeyConfigurationEnabled;
        this.fairplayConfiguration = $.fairplayConfiguration;
        this.name = $.name;
        this.openRestrictionEnabled = $.openRestrictionEnabled;
        this.playreadyConfigurationLicenses = $.playreadyConfigurationLicenses;
        this.playreadyResponseCustomData = $.playreadyResponseCustomData;
        this.tokenRestriction = $.tokenRestriction;
        this.widevineConfigurationTemplate = $.widevineConfigurationTemplate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContentKeyPolicyPolicyOptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContentKeyPolicyPolicyOptionArgs $;

        public Builder() {
            $ = new ContentKeyPolicyPolicyOptionArgs();
        }

        public Builder(ContentKeyPolicyPolicyOptionArgs defaults) {
            $ = new ContentKeyPolicyPolicyOptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clearKeyConfigurationEnabled Enable a configuration for non-DRM keys.
         * 
         * @return builder
         * 
         */
        public Builder clearKeyConfigurationEnabled(@Nullable Output<Boolean> clearKeyConfigurationEnabled) {
            $.clearKeyConfigurationEnabled = clearKeyConfigurationEnabled;
            return this;
        }

        /**
         * @param clearKeyConfigurationEnabled Enable a configuration for non-DRM keys.
         * 
         * @return builder
         * 
         */
        public Builder clearKeyConfigurationEnabled(Boolean clearKeyConfigurationEnabled) {
            return clearKeyConfigurationEnabled(Output.of(clearKeyConfigurationEnabled));
        }

        /**
         * @param fairplayConfiguration A `fairplay_configuration` block as defined above. Check license requirements here &lt;https://docs.microsoft.com/azure/media-services/latest/fairplay-license-overview&gt;.
         * 
         * @return builder
         * 
         */
        public Builder fairplayConfiguration(@Nullable Output<ContentKeyPolicyPolicyOptionFairplayConfigurationArgs> fairplayConfiguration) {
            $.fairplayConfiguration = fairplayConfiguration;
            return this;
        }

        /**
         * @param fairplayConfiguration A `fairplay_configuration` block as defined above. Check license requirements here &lt;https://docs.microsoft.com/azure/media-services/latest/fairplay-license-overview&gt;.
         * 
         * @return builder
         * 
         */
        public Builder fairplayConfiguration(ContentKeyPolicyPolicyOptionFairplayConfigurationArgs fairplayConfiguration) {
            return fairplayConfiguration(Output.of(fairplayConfiguration));
        }

        /**
         * @param name The name which should be used for this Policy Option.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Policy Option.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param openRestrictionEnabled Enable an open restriction. License or key will be delivered on every request.
         * 
         * @return builder
         * 
         */
        public Builder openRestrictionEnabled(@Nullable Output<Boolean> openRestrictionEnabled) {
            $.openRestrictionEnabled = openRestrictionEnabled;
            return this;
        }

        /**
         * @param openRestrictionEnabled Enable an open restriction. License or key will be delivered on every request.
         * 
         * @return builder
         * 
         */
        public Builder openRestrictionEnabled(Boolean openRestrictionEnabled) {
            return openRestrictionEnabled(Output.of(openRestrictionEnabled));
        }

        /**
         * @param playreadyConfigurationLicenses One or more `playready_configuration_license` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder playreadyConfigurationLicenses(@Nullable Output<List<ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs>> playreadyConfigurationLicenses) {
            $.playreadyConfigurationLicenses = playreadyConfigurationLicenses;
            return this;
        }

        /**
         * @param playreadyConfigurationLicenses One or more `playready_configuration_license` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder playreadyConfigurationLicenses(List<ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs> playreadyConfigurationLicenses) {
            return playreadyConfigurationLicenses(Output.of(playreadyConfigurationLicenses));
        }

        /**
         * @param playreadyConfigurationLicenses One or more `playready_configuration_license` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder playreadyConfigurationLicenses(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs... playreadyConfigurationLicenses) {
            return playreadyConfigurationLicenses(List.of(playreadyConfigurationLicenses));
        }

        /**
         * @param playreadyResponseCustomData The custom response data of the PlayReady configuration. This only applies when `playready_configuration_license` is specified.
         * 
         * @return builder
         * 
         */
        public Builder playreadyResponseCustomData(@Nullable Output<String> playreadyResponseCustomData) {
            $.playreadyResponseCustomData = playreadyResponseCustomData;
            return this;
        }

        /**
         * @param playreadyResponseCustomData The custom response data of the PlayReady configuration. This only applies when `playready_configuration_license` is specified.
         * 
         * @return builder
         * 
         */
        public Builder playreadyResponseCustomData(String playreadyResponseCustomData) {
            return playreadyResponseCustomData(Output.of(playreadyResponseCustomData));
        }

        /**
         * @param tokenRestriction A `token_restriction` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder tokenRestriction(@Nullable Output<ContentKeyPolicyPolicyOptionTokenRestrictionArgs> tokenRestriction) {
            $.tokenRestriction = tokenRestriction;
            return this;
        }

        /**
         * @param tokenRestriction A `token_restriction` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder tokenRestriction(ContentKeyPolicyPolicyOptionTokenRestrictionArgs tokenRestriction) {
            return tokenRestriction(Output.of(tokenRestriction));
        }

        /**
         * @param widevineConfigurationTemplate The Widevine template.
         * 
         * &gt; **NOTE:** Each policy_option can only have one type of configuration: `fairplay_configuration`, `clear_key_configuration_enabled`, `playready_configuration_license` or `widevine_configuration_template`. And is possible to assign only one type of restriction: `open_restriction_enabled` or `token_restriction`.
         * 
         * @return builder
         * 
         */
        public Builder widevineConfigurationTemplate(@Nullable Output<String> widevineConfigurationTemplate) {
            $.widevineConfigurationTemplate = widevineConfigurationTemplate;
            return this;
        }

        /**
         * @param widevineConfigurationTemplate The Widevine template.
         * 
         * &gt; **NOTE:** Each policy_option can only have one type of configuration: `fairplay_configuration`, `clear_key_configuration_enabled`, `playready_configuration_license` or `widevine_configuration_template`. And is possible to assign only one type of restriction: `open_restriction_enabled` or `token_restriction`.
         * 
         * @return builder
         * 
         */
        public Builder widevineConfigurationTemplate(String widevineConfigurationTemplate) {
            return widevineConfigurationTemplate(Output.of(widevineConfigurationTemplate));
        }

        public ContentKeyPolicyPolicyOptionArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ContentKeyPolicyPolicyOptionArgs", "name");
            }
            return $;
        }
    }

}
