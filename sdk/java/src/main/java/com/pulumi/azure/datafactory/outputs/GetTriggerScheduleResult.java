// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.datafactory.outputs;

import com.pulumi.azure.datafactory.outputs.GetTriggerScheduleSchedule;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTriggerScheduleResult {
    /**
     * @return Specifies if the Data Factory Schedule Trigger is activated.
     * 
     */
    private Boolean activated;
    /**
     * @return List of tags that can be used for describing the Data Factory Schedule Trigger.
     * 
     */
    private List<String> annotations;
    private String dataFactoryId;
    /**
     * @return The Schedule Trigger&#39;s description.
     * 
     */
    private String description;
    /**
     * @return The time the Schedule Trigger should end. The time will be represented in UTC.
     * 
     */
    private String endTime;
    /**
     * @return The trigger frequency.
     * 
     */
    private String frequency;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The interval for how often the trigger occurs.
     * 
     */
    private Integer interval;
    private String name;
    /**
     * @return The Data Factory Pipeline name that the trigger will act on.
     * 
     */
    private String pipelineName;
    /**
     * @return A `schedule` block as described below, which further specifies the recurrence schedule for the trigger.
     * 
     */
    private List<GetTriggerScheduleSchedule> schedules;
    /**
     * @return The time the Schedule Trigger will start. The time will be represented in UTC.
     * 
     */
    private String startTime;
    /**
     * @return The timezone of the start/end time.
     * 
     */
    private String timeZone;

    private GetTriggerScheduleResult() {}
    /**
     * @return Specifies if the Data Factory Schedule Trigger is activated.
     * 
     */
    public Boolean activated() {
        return this.activated;
    }
    /**
     * @return List of tags that can be used for describing the Data Factory Schedule Trigger.
     * 
     */
    public List<String> annotations() {
        return this.annotations;
    }
    public String dataFactoryId() {
        return this.dataFactoryId;
    }
    /**
     * @return The Schedule Trigger&#39;s description.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The time the Schedule Trigger should end. The time will be represented in UTC.
     * 
     */
    public String endTime() {
        return this.endTime;
    }
    /**
     * @return The trigger frequency.
     * 
     */
    public String frequency() {
        return this.frequency;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The interval for how often the trigger occurs.
     * 
     */
    public Integer interval() {
        return this.interval;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The Data Factory Pipeline name that the trigger will act on.
     * 
     */
    public String pipelineName() {
        return this.pipelineName;
    }
    /**
     * @return A `schedule` block as described below, which further specifies the recurrence schedule for the trigger.
     * 
     */
    public List<GetTriggerScheduleSchedule> schedules() {
        return this.schedules;
    }
    /**
     * @return The time the Schedule Trigger will start. The time will be represented in UTC.
     * 
     */
    public String startTime() {
        return this.startTime;
    }
    /**
     * @return The timezone of the start/end time.
     * 
     */
    public String timeZone() {
        return this.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTriggerScheduleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean activated;
        private List<String> annotations;
        private String dataFactoryId;
        private String description;
        private String endTime;
        private String frequency;
        private String id;
        private Integer interval;
        private String name;
        private String pipelineName;
        private List<GetTriggerScheduleSchedule> schedules;
        private String startTime;
        private String timeZone;
        public Builder() {}
        public Builder(GetTriggerScheduleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activated = defaults.activated;
    	      this.annotations = defaults.annotations;
    	      this.dataFactoryId = defaults.dataFactoryId;
    	      this.description = defaults.description;
    	      this.endTime = defaults.endTime;
    	      this.frequency = defaults.frequency;
    	      this.id = defaults.id;
    	      this.interval = defaults.interval;
    	      this.name = defaults.name;
    	      this.pipelineName = defaults.pipelineName;
    	      this.schedules = defaults.schedules;
    	      this.startTime = defaults.startTime;
    	      this.timeZone = defaults.timeZone;
        }

        @CustomType.Setter
        public Builder activated(Boolean activated) {
            if (activated == null) {
              throw new MissingRequiredPropertyException("GetTriggerScheduleResult", "activated");
            }
            this.activated = activated;
            return this;
        }
        @CustomType.Setter
        public Builder annotations(List<String> annotations) {
            if (annotations == null) {
              throw new MissingRequiredPropertyException("GetTriggerScheduleResult", "annotations");
            }
            this.annotations = annotations;
            return this;
        }
        public Builder annotations(String... annotations) {
            return annotations(List.of(annotations));
        }
        @CustomType.Setter
        public Builder dataFactoryId(String dataFactoryId) {
            if (dataFactoryId == null) {
              throw new MissingRequiredPropertyException("GetTriggerScheduleResult", "dataFactoryId");
            }
            this.dataFactoryId = dataFactoryId;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetTriggerScheduleResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder endTime(String endTime) {
            if (endTime == null) {
              throw new MissingRequiredPropertyException("GetTriggerScheduleResult", "endTime");
            }
            this.endTime = endTime;
            return this;
        }
        @CustomType.Setter
        public Builder frequency(String frequency) {
            if (frequency == null) {
              throw new MissingRequiredPropertyException("GetTriggerScheduleResult", "frequency");
            }
            this.frequency = frequency;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTriggerScheduleResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder interval(Integer interval) {
            if (interval == null) {
              throw new MissingRequiredPropertyException("GetTriggerScheduleResult", "interval");
            }
            this.interval = interval;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetTriggerScheduleResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder pipelineName(String pipelineName) {
            if (pipelineName == null) {
              throw new MissingRequiredPropertyException("GetTriggerScheduleResult", "pipelineName");
            }
            this.pipelineName = pipelineName;
            return this;
        }
        @CustomType.Setter
        public Builder schedules(List<GetTriggerScheduleSchedule> schedules) {
            if (schedules == null) {
              throw new MissingRequiredPropertyException("GetTriggerScheduleResult", "schedules");
            }
            this.schedules = schedules;
            return this;
        }
        public Builder schedules(GetTriggerScheduleSchedule... schedules) {
            return schedules(List.of(schedules));
        }
        @CustomType.Setter
        public Builder startTime(String startTime) {
            if (startTime == null) {
              throw new MissingRequiredPropertyException("GetTriggerScheduleResult", "startTime");
            }
            this.startTime = startTime;
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(String timeZone) {
            if (timeZone == null) {
              throw new MissingRequiredPropertyException("GetTriggerScheduleResult", "timeZone");
            }
            this.timeZone = timeZone;
            return this;
        }
        public GetTriggerScheduleResult build() {
            final var _resultValue = new GetTriggerScheduleResult();
            _resultValue.activated = activated;
            _resultValue.annotations = annotations;
            _resultValue.dataFactoryId = dataFactoryId;
            _resultValue.description = description;
            _resultValue.endTime = endTime;
            _resultValue.frequency = frequency;
            _resultValue.id = id;
            _resultValue.interval = interval;
            _resultValue.name = name;
            _resultValue.pipelineName = pipelineName;
            _resultValue.schedules = schedules;
            _resultValue.startTime = startTime;
            _resultValue.timeZone = timeZone;
            return _resultValue;
        }
    }
}
