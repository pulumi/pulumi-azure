// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.signalr;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.signalr.ServiceCustomCertificateArgs;
import com.pulumi.azure.signalr.inputs.ServiceCustomCertificateState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Manages an Azure SignalR Custom Certificate.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.CoreFunctions;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.signalr.Service;
 * import com.pulumi.azure.signalr.ServiceArgs;
 * import com.pulumi.azure.signalr.inputs.ServiceSkuArgs;
 * import com.pulumi.azure.signalr.inputs.ServiceIdentityArgs;
 * import com.pulumi.azure.keyvault.KeyVault;
 * import com.pulumi.azure.keyvault.KeyVaultArgs;
 * import com.pulumi.azure.keyvault.inputs.KeyVaultAccessPolicyArgs;
 * import com.pulumi.azure.keyvault.Certificate;
 * import com.pulumi.azure.keyvault.CertificateArgs;
 * import com.pulumi.azure.keyvault.inputs.CertificateCertificateArgs;
 * import com.pulumi.std.StdFunctions;
 * import com.pulumi.std.inputs.Filebase64Args;
 * import com.pulumi.azure.signalr.ServiceCustomCertificate;
 * import com.pulumi.azure.signalr.ServiceCustomCertificateArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var current = CoreFunctions.getClientConfig(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
 * 
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()
 *             .name("example-resources")
 *             .location("West Europe")
 *             .build());
 * 
 *         var exampleService = new Service("exampleService", ServiceArgs.builder()
 *             .name("example-signalr")
 *             .location(testAzurermResourceGroup.location())
 *             .resourceGroupName(testAzurermResourceGroup.name())
 *             .sku(ServiceSkuArgs.builder()
 *                 .name("Premium_P1")
 *                 .capacity(1)
 *                 .build())
 *             .identity(ServiceIdentityArgs.builder()
 *                 .type("SystemAssigned")
 *                 .build())
 *             .build());
 * 
 *         var exampleKeyVault = new KeyVault("exampleKeyVault", KeyVaultArgs.builder()
 *             .name("example-keyvault")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .tenantId(current.tenantId())
 *             .skuName("premium")
 *             .accessPolicies(            
 *                 KeyVaultAccessPolicyArgs.builder()
 *                     .tenantId(current.tenantId())
 *                     .objectId(current.objectId())
 *                     .certificatePermissions(                    
 *                         "Create",
 *                         "Get",
 *                         "List")
 *                     .secretPermissions(                    
 *                         "Get",
 *                         "List")
 *                     .build(),
 *                 KeyVaultAccessPolicyArgs.builder()
 *                     .tenantId(current.tenantId())
 *                     .objectId(testAzurermSignalrService.identity()[0].principalId())
 *                     .certificatePermissions(                    
 *                         "Create",
 *                         "Get",
 *                         "List")
 *                     .secretPermissions(                    
 *                         "Get",
 *                         "List")
 *                     .build())
 *             .build());
 * 
 *         var exampleCertificate = new Certificate("exampleCertificate", CertificateArgs.builder()
 *             .name("imported-cert")
 *             .keyVaultId(exampleKeyVault.id())
 *             .certificate(CertificateCertificateArgs.builder()
 *                 .contents(StdFunctions.filebase64(Filebase64Args.builder()
 *                     .input("certificate-to-import.pfx")
 *                     .build()).result())
 *                 .password("")
 *                 .build())
 *             .build());
 * 
 *         var test = new ServiceCustomCertificate("test", ServiceCustomCertificateArgs.builder()
 *             .name("example-cert")
 *             .signalrServiceId(exampleService.id())
 *             .customCertificateId(exampleCertificate.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(exampleAzurermKeyVaultAccessPolicy)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## API Providers
 * 
 * &lt;!-- This section is generated, changes will be overwritten --&gt;
 * This resource uses the following Azure API Providers:
 * 
 * * `Microsoft.SignalRService` - 2024-03-01
 * 
 * ## Import
 * 
 * Custom Certificate for a SignalR service can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:signalr/serviceCustomCertificate:ServiceCustomCertificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.SignalRService/signalR/signalr1/customCertificates/cert1
 * ```
 * 
 */
@ResourceType(type="azure:signalr/serviceCustomCertificate:ServiceCustomCertificate")
public class ServiceCustomCertificate extends com.pulumi.resources.CustomResource {
    /**
     * The certificate version of the SignalR Custom Certificate service.
     * 
     */
    @Export(name="certificateVersion", refs={String.class}, tree="[0]")
    private Output<String> certificateVersion;

    /**
     * @return The certificate version of the SignalR Custom Certificate service.
     * 
     */
    public Output<String> certificateVersion() {
        return this.certificateVersion;
    }
    /**
     * The certificate id of the SignalR Custom Certificate service. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:** Self assigned certificate is not supported and the provisioning status will fail.
     * 
     */
    @Export(name="customCertificateId", refs={String.class}, tree="[0]")
    private Output<String> customCertificateId;

    /**
     * @return The certificate id of the SignalR Custom Certificate service. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:** Self assigned certificate is not supported and the provisioning status will fail.
     * 
     */
    public Output<String> customCertificateId() {
        return this.customCertificateId;
    }
    /**
     * The name of the SignalR Custom Certificate. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the SignalR Custom Certificate. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The SignalR ID of the SignalR Custom Certificate. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:** Custom Certificate is only available for SignalR Premium tier. Please enable managed identity in the corresponding SignalR Service and give the managed identity access to the key vault, the required permission is Get Certificate and Secret.
     * 
     */
    @Export(name="signalrServiceId", refs={String.class}, tree="[0]")
    private Output<String> signalrServiceId;

    /**
     * @return The SignalR ID of the SignalR Custom Certificate. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:** Custom Certificate is only available for SignalR Premium tier. Please enable managed identity in the corresponding SignalR Service and give the managed identity access to the key vault, the required permission is Get Certificate and Secret.
     * 
     */
    public Output<String> signalrServiceId() {
        return this.signalrServiceId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ServiceCustomCertificate(java.lang.String name) {
        this(name, ServiceCustomCertificateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ServiceCustomCertificate(java.lang.String name, ServiceCustomCertificateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ServiceCustomCertificate(java.lang.String name, ServiceCustomCertificateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:signalr/serviceCustomCertificate:ServiceCustomCertificate", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ServiceCustomCertificate(java.lang.String name, Output<java.lang.String> id, @Nullable ServiceCustomCertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:signalr/serviceCustomCertificate:ServiceCustomCertificate", name, state, makeResourceOptions(options, id), false);
    }

    private static ServiceCustomCertificateArgs makeArgs(ServiceCustomCertificateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ServiceCustomCertificateArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ServiceCustomCertificate get(java.lang.String name, Output<java.lang.String> id, @Nullable ServiceCustomCertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ServiceCustomCertificate(name, id, state, options);
    }
}
