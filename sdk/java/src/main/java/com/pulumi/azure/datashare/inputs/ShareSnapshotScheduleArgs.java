// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.datashare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class ShareSnapshotScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ShareSnapshotScheduleArgs Empty = new ShareSnapshotScheduleArgs();

    /**
     * The name of the snapshot schedule.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the snapshot schedule.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The interval of the synchronization with the source data. Possible values are `Hour` and `Day`.
     * 
     */
    @Import(name="recurrence", required=true)
    private Output<String> recurrence;

    /**
     * @return The interval of the synchronization with the source data. Possible values are `Hour` and `Day`.
     * 
     */
    public Output<String> recurrence() {
        return this.recurrence;
    }

    /**
     * The synchronization with the source data&#39;s start time.
     * 
     */
    @Import(name="startTime", required=true)
    private Output<String> startTime;

    /**
     * @return The synchronization with the source data&#39;s start time.
     * 
     */
    public Output<String> startTime() {
        return this.startTime;
    }

    private ShareSnapshotScheduleArgs() {}

    private ShareSnapshotScheduleArgs(ShareSnapshotScheduleArgs $) {
        this.name = $.name;
        this.recurrence = $.recurrence;
        this.startTime = $.startTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ShareSnapshotScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ShareSnapshotScheduleArgs $;

        public Builder() {
            $ = new ShareSnapshotScheduleArgs();
        }

        public Builder(ShareSnapshotScheduleArgs defaults) {
            $ = new ShareSnapshotScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name The name of the snapshot schedule.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the snapshot schedule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param recurrence The interval of the synchronization with the source data. Possible values are `Hour` and `Day`.
         * 
         * @return builder
         * 
         */
        public Builder recurrence(Output<String> recurrence) {
            $.recurrence = recurrence;
            return this;
        }

        /**
         * @param recurrence The interval of the synchronization with the source data. Possible values are `Hour` and `Day`.
         * 
         * @return builder
         * 
         */
        public Builder recurrence(String recurrence) {
            return recurrence(Output.of(recurrence));
        }

        /**
         * @param startTime The synchronization with the source data&#39;s start time.
         * 
         * @return builder
         * 
         */
        public Builder startTime(Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime The synchronization with the source data&#39;s start time.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        public ShareSnapshotScheduleArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ShareSnapshotScheduleArgs", "name");
            }
            if ($.recurrence == null) {
                throw new MissingRequiredPropertyException("ShareSnapshotScheduleArgs", "recurrence");
            }
            if ($.startTime == null) {
                throw new MissingRequiredPropertyException("ShareSnapshotScheduleArgs", "startTime");
            }
            return $;
        }
    }

}
