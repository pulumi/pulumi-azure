// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.postgresql;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.postgresql.inputs.GetFlexibleServerArgs;
import com.pulumi.azure.postgresql.inputs.GetFlexibleServerPlainArgs;
import com.pulumi.azure.postgresql.inputs.GetServerArgs;
import com.pulumi.azure.postgresql.inputs.GetServerPlainArgs;
import com.pulumi.azure.postgresql.outputs.GetFlexibleServerResult;
import com.pulumi.azure.postgresql.outputs.GetServerResult;
import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import java.util.concurrent.CompletableFuture;

public final class PostgresqlFunctions {
    /**
     * Use this data source to access information about an existing PostgreSQL Flexible Server.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.postgresql.PostgresqlFunctions;
     * import com.pulumi.azure.postgresql.inputs.GetFlexibleServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PostgresqlFunctions.getFlexibleServer(GetFlexibleServerArgs.builder()
     *             .name("existing-postgresql-fs")
     *             .resourceGroupName("existing-postgresql-resgroup")
     *             .build());
     * 
     *         ctx.export("id", example.applyValue(getFlexibleServerResult -> getFlexibleServerResult.id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFlexibleServerResult> getFlexibleServer(GetFlexibleServerArgs args) {
        return getFlexibleServer(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about an existing PostgreSQL Flexible Server.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.postgresql.PostgresqlFunctions;
     * import com.pulumi.azure.postgresql.inputs.GetFlexibleServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PostgresqlFunctions.getFlexibleServer(GetFlexibleServerArgs.builder()
     *             .name("existing-postgresql-fs")
     *             .resourceGroupName("existing-postgresql-resgroup")
     *             .build());
     * 
     *         ctx.export("id", example.applyValue(getFlexibleServerResult -> getFlexibleServerResult.id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFlexibleServerResult> getFlexibleServerPlain(GetFlexibleServerPlainArgs args) {
        return getFlexibleServerPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about an existing PostgreSQL Flexible Server.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.postgresql.PostgresqlFunctions;
     * import com.pulumi.azure.postgresql.inputs.GetFlexibleServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PostgresqlFunctions.getFlexibleServer(GetFlexibleServerArgs.builder()
     *             .name("existing-postgresql-fs")
     *             .resourceGroupName("existing-postgresql-resgroup")
     *             .build());
     * 
     *         ctx.export("id", example.applyValue(getFlexibleServerResult -> getFlexibleServerResult.id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFlexibleServerResult> getFlexibleServer(GetFlexibleServerArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azure:postgresql/getFlexibleServer:getFlexibleServer", TypeShape.of(GetFlexibleServerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about an existing PostgreSQL Flexible Server.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.postgresql.PostgresqlFunctions;
     * import com.pulumi.azure.postgresql.inputs.GetFlexibleServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PostgresqlFunctions.getFlexibleServer(GetFlexibleServerArgs.builder()
     *             .name("existing-postgresql-fs")
     *             .resourceGroupName("existing-postgresql-resgroup")
     *             .build());
     * 
     *         ctx.export("id", example.applyValue(getFlexibleServerResult -> getFlexibleServerResult.id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFlexibleServerResult> getFlexibleServer(GetFlexibleServerArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("azure:postgresql/getFlexibleServer:getFlexibleServer", TypeShape.of(GetFlexibleServerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about an existing PostgreSQL Flexible Server.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.postgresql.PostgresqlFunctions;
     * import com.pulumi.azure.postgresql.inputs.GetFlexibleServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PostgresqlFunctions.getFlexibleServer(GetFlexibleServerArgs.builder()
     *             .name("existing-postgresql-fs")
     *             .resourceGroupName("existing-postgresql-resgroup")
     *             .build());
     * 
     *         ctx.export("id", example.applyValue(getFlexibleServerResult -> getFlexibleServerResult.id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFlexibleServerResult> getFlexibleServerPlain(GetFlexibleServerPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azure:postgresql/getFlexibleServer:getFlexibleServer", TypeShape.of(GetFlexibleServerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about an existing PostgreSQL Azure Database Server.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.postgresql.PostgresqlFunctions;
     * import com.pulumi.azure.postgresql.inputs.GetServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PostgresqlFunctions.getServer(GetServerArgs.builder()
     *             .name("postgresql-server-1")
     *             .resourceGroupName("api-rg-pro")
     *             .build());
     * 
     *         ctx.export("postgresqlServerId", example.applyValue(getServerResult -> getServerResult.id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServerResult> getServer(GetServerArgs args) {
        return getServer(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about an existing PostgreSQL Azure Database Server.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.postgresql.PostgresqlFunctions;
     * import com.pulumi.azure.postgresql.inputs.GetServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PostgresqlFunctions.getServer(GetServerArgs.builder()
     *             .name("postgresql-server-1")
     *             .resourceGroupName("api-rg-pro")
     *             .build());
     * 
     *         ctx.export("postgresqlServerId", example.applyValue(getServerResult -> getServerResult.id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServerResult> getServerPlain(GetServerPlainArgs args) {
        return getServerPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about an existing PostgreSQL Azure Database Server.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.postgresql.PostgresqlFunctions;
     * import com.pulumi.azure.postgresql.inputs.GetServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PostgresqlFunctions.getServer(GetServerArgs.builder()
     *             .name("postgresql-server-1")
     *             .resourceGroupName("api-rg-pro")
     *             .build());
     * 
     *         ctx.export("postgresqlServerId", example.applyValue(getServerResult -> getServerResult.id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServerResult> getServer(GetServerArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azure:postgresql/getServer:getServer", TypeShape.of(GetServerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about an existing PostgreSQL Azure Database Server.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.postgresql.PostgresqlFunctions;
     * import com.pulumi.azure.postgresql.inputs.GetServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PostgresqlFunctions.getServer(GetServerArgs.builder()
     *             .name("postgresql-server-1")
     *             .resourceGroupName("api-rg-pro")
     *             .build());
     * 
     *         ctx.export("postgresqlServerId", example.applyValue(getServerResult -> getServerResult.id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServerResult> getServer(GetServerArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("azure:postgresql/getServer:getServer", TypeShape.of(GetServerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about an existing PostgreSQL Azure Database Server.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.postgresql.PostgresqlFunctions;
     * import com.pulumi.azure.postgresql.inputs.GetServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = PostgresqlFunctions.getServer(GetServerArgs.builder()
     *             .name("postgresql-server-1")
     *             .resourceGroupName("api-rg-pro")
     *             .build());
     * 
     *         ctx.export("postgresqlServerId", example.applyValue(getServerResult -> getServerResult.id()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServerResult> getServerPlain(GetServerPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azure:postgresql/getServer:getServer", TypeShape.of(GetServerResult.class), args, Utilities.withVersion(options));
    }
}
