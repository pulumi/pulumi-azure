// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mysql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlexibleServerActiveDirectoryAdministratoryState extends com.pulumi.resources.ResourceArgs {

    public static final FlexibleServerActiveDirectoryAdministratoryState Empty = new FlexibleServerActiveDirectoryAdministratoryState();

    /**
     * The resource ID of the identity used for AAD Authentication.
     * 
     */
    @Import(name="identityId")
    private @Nullable Output<String> identityId;

    /**
     * @return The resource ID of the identity used for AAD Authentication.
     * 
     */
    public Optional<Output<String>> identityId() {
        return Optional.ofNullable(this.identityId);
    }

    /**
     * The login name of the principal to set as the server administrator
     * 
     */
    @Import(name="login")
    private @Nullable Output<String> login;

    /**
     * @return The login name of the principal to set as the server administrator
     * 
     */
    public Optional<Output<String>> login() {
        return Optional.ofNullable(this.login);
    }

    /**
     * The ID of the principal to set as the server administrator. For a managed identity this should be the Client ID of the identity.
     * 
     */
    @Import(name="objectId")
    private @Nullable Output<String> objectId;

    /**
     * @return The ID of the principal to set as the server administrator. For a managed identity this should be the Client ID of the identity.
     * 
     */
    public Optional<Output<String>> objectId() {
        return Optional.ofNullable(this.objectId);
    }

    /**
     * The resource ID of the MySQL Flexible Server. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="serverId")
    private @Nullable Output<String> serverId;

    /**
     * @return The resource ID of the MySQL Flexible Server. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> serverId() {
        return Optional.ofNullable(this.serverId);
    }

    /**
     * The Azure Tenant ID.
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return The Azure Tenant ID.
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    private FlexibleServerActiveDirectoryAdministratoryState() {}

    private FlexibleServerActiveDirectoryAdministratoryState(FlexibleServerActiveDirectoryAdministratoryState $) {
        this.identityId = $.identityId;
        this.login = $.login;
        this.objectId = $.objectId;
        this.serverId = $.serverId;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlexibleServerActiveDirectoryAdministratoryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlexibleServerActiveDirectoryAdministratoryState $;

        public Builder() {
            $ = new FlexibleServerActiveDirectoryAdministratoryState();
        }

        public Builder(FlexibleServerActiveDirectoryAdministratoryState defaults) {
            $ = new FlexibleServerActiveDirectoryAdministratoryState(Objects.requireNonNull(defaults));
        }

        /**
         * @param identityId The resource ID of the identity used for AAD Authentication.
         * 
         * @return builder
         * 
         */
        public Builder identityId(@Nullable Output<String> identityId) {
            $.identityId = identityId;
            return this;
        }

        /**
         * @param identityId The resource ID of the identity used for AAD Authentication.
         * 
         * @return builder
         * 
         */
        public Builder identityId(String identityId) {
            return identityId(Output.of(identityId));
        }

        /**
         * @param login The login name of the principal to set as the server administrator
         * 
         * @return builder
         * 
         */
        public Builder login(@Nullable Output<String> login) {
            $.login = login;
            return this;
        }

        /**
         * @param login The login name of the principal to set as the server administrator
         * 
         * @return builder
         * 
         */
        public Builder login(String login) {
            return login(Output.of(login));
        }

        /**
         * @param objectId The ID of the principal to set as the server administrator. For a managed identity this should be the Client ID of the identity.
         * 
         * @return builder
         * 
         */
        public Builder objectId(@Nullable Output<String> objectId) {
            $.objectId = objectId;
            return this;
        }

        /**
         * @param objectId The ID of the principal to set as the server administrator. For a managed identity this should be the Client ID of the identity.
         * 
         * @return builder
         * 
         */
        public Builder objectId(String objectId) {
            return objectId(Output.of(objectId));
        }

        /**
         * @param serverId The resource ID of the MySQL Flexible Server. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder serverId(@Nullable Output<String> serverId) {
            $.serverId = serverId;
            return this;
        }

        /**
         * @param serverId The resource ID of the MySQL Flexible Server. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder serverId(String serverId) {
            return serverId(Output.of(serverId));
        }

        /**
         * @param tenantId The Azure Tenant ID.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId The Azure Tenant ID.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public FlexibleServerActiveDirectoryAdministratoryState build() {
            return $;
        }
    }

}
