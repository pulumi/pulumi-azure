// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.dataprotection.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackupPolicyBlobStorageRetentionRuleCriteriaArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackupPolicyBlobStorageRetentionRuleCriteriaArgs Empty = new BackupPolicyBlobStorageRetentionRuleCriteriaArgs();

    /**
     * Possible values are `AllBackup`, `FirstOfDay`, `FirstOfWeek`, `FirstOfMonth` and `FirstOfYear`. These values mean the first successful backup of the day/week/month/year. Changing this forces a new Backup Policy Blob Storage to be created.
     * 
     */
    @Import(name="absoluteCriteria")
    private @Nullable Output<String> absoluteCriteria;

    /**
     * @return Possible values are `AllBackup`, `FirstOfDay`, `FirstOfWeek`, `FirstOfMonth` and `FirstOfYear`. These values mean the first successful backup of the day/week/month/year. Changing this forces a new Backup Policy Blob Storage to be created.
     * 
     */
    public Optional<Output<String>> absoluteCriteria() {
        return Optional.ofNullable(this.absoluteCriteria);
    }

    /**
     * Must be between `0` and `28`. `0` for last day within the month. Changing this forces a new Backup Policy Blob Storage to be created.
     * 
     */
    @Import(name="daysOfMonths")
    private @Nullable Output<List<Integer>> daysOfMonths;

    /**
     * @return Must be between `0` and `28`. `0` for last day within the month. Changing this forces a new Backup Policy Blob Storage to be created.
     * 
     */
    public Optional<Output<List<Integer>>> daysOfMonths() {
        return Optional.ofNullable(this.daysOfMonths);
    }

    /**
     * Possible values are `Monday`, `Tuesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`. Changing this forces a new Backup Policy Blob Storage to be created.
     * 
     */
    @Import(name="daysOfWeeks")
    private @Nullable Output<List<String>> daysOfWeeks;

    /**
     * @return Possible values are `Monday`, `Tuesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`. Changing this forces a new Backup Policy Blob Storage to be created.
     * 
     */
    public Optional<Output<List<String>>> daysOfWeeks() {
        return Optional.ofNullable(this.daysOfWeeks);
    }

    /**
     * Possible values are `January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`, `October`, `November` and `December`. Changing this forces a new Backup Policy Blob Storage to be created. When this property is specified, exactly one of the following must also be set: `daysOfMonth`, `daysOfWeek`
     * 
     */
    @Import(name="monthsOfYears")
    private @Nullable Output<List<String>> monthsOfYears;

    /**
     * @return Possible values are `January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`, `October`, `November` and `December`. Changing this forces a new Backup Policy Blob Storage to be created. When this property is specified, exactly one of the following must also be set: `daysOfMonth`, `daysOfWeek`
     * 
     */
    public Optional<Output<List<String>>> monthsOfYears() {
        return Optional.ofNullable(this.monthsOfYears);
    }

    /**
     * Specifies a list of backup times for backup in the `RFC3339` format. Changing this forces a new Backup Policy Blob Storage to be created.
     * 
     */
    @Import(name="scheduledBackupTimes")
    private @Nullable Output<List<String>> scheduledBackupTimes;

    /**
     * @return Specifies a list of backup times for backup in the `RFC3339` format. Changing this forces a new Backup Policy Blob Storage to be created.
     * 
     */
    public Optional<Output<List<String>>> scheduledBackupTimes() {
        return Optional.ofNullable(this.scheduledBackupTimes);
    }

    /**
     * Possible values are `First`, `Second`, `Third`, `Fourth` and `Last`. Changing this forces a new Backup Policy Blob Storage to be created. When this property is specified, exactly one of the following must also be set: `daysOfMonth`, `daysOfWeek`
     * 
     * &gt; **Note:** When not using `absoluteCriteria`, you must use exactly one of `daysOfMonth` or `daysOfWeek`. Regarding the remaining two properties, `weeksOfMonth` and `monthsOfYear`, you may use either, both, or neither. If you would like to set multiple intervals, you may do so by using multiple `retentionRule` blocks.
     * 
     */
    @Import(name="weeksOfMonths")
    private @Nullable Output<List<String>> weeksOfMonths;

    /**
     * @return Possible values are `First`, `Second`, `Third`, `Fourth` and `Last`. Changing this forces a new Backup Policy Blob Storage to be created. When this property is specified, exactly one of the following must also be set: `daysOfMonth`, `daysOfWeek`
     * 
     * &gt; **Note:** When not using `absoluteCriteria`, you must use exactly one of `daysOfMonth` or `daysOfWeek`. Regarding the remaining two properties, `weeksOfMonth` and `monthsOfYear`, you may use either, both, or neither. If you would like to set multiple intervals, you may do so by using multiple `retentionRule` blocks.
     * 
     */
    public Optional<Output<List<String>>> weeksOfMonths() {
        return Optional.ofNullable(this.weeksOfMonths);
    }

    private BackupPolicyBlobStorageRetentionRuleCriteriaArgs() {}

    private BackupPolicyBlobStorageRetentionRuleCriteriaArgs(BackupPolicyBlobStorageRetentionRuleCriteriaArgs $) {
        this.absoluteCriteria = $.absoluteCriteria;
        this.daysOfMonths = $.daysOfMonths;
        this.daysOfWeeks = $.daysOfWeeks;
        this.monthsOfYears = $.monthsOfYears;
        this.scheduledBackupTimes = $.scheduledBackupTimes;
        this.weeksOfMonths = $.weeksOfMonths;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupPolicyBlobStorageRetentionRuleCriteriaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupPolicyBlobStorageRetentionRuleCriteriaArgs $;

        public Builder() {
            $ = new BackupPolicyBlobStorageRetentionRuleCriteriaArgs();
        }

        public Builder(BackupPolicyBlobStorageRetentionRuleCriteriaArgs defaults) {
            $ = new BackupPolicyBlobStorageRetentionRuleCriteriaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param absoluteCriteria Possible values are `AllBackup`, `FirstOfDay`, `FirstOfWeek`, `FirstOfMonth` and `FirstOfYear`. These values mean the first successful backup of the day/week/month/year. Changing this forces a new Backup Policy Blob Storage to be created.
         * 
         * @return builder
         * 
         */
        public Builder absoluteCriteria(@Nullable Output<String> absoluteCriteria) {
            $.absoluteCriteria = absoluteCriteria;
            return this;
        }

        /**
         * @param absoluteCriteria Possible values are `AllBackup`, `FirstOfDay`, `FirstOfWeek`, `FirstOfMonth` and `FirstOfYear`. These values mean the first successful backup of the day/week/month/year. Changing this forces a new Backup Policy Blob Storage to be created.
         * 
         * @return builder
         * 
         */
        public Builder absoluteCriteria(String absoluteCriteria) {
            return absoluteCriteria(Output.of(absoluteCriteria));
        }

        /**
         * @param daysOfMonths Must be between `0` and `28`. `0` for last day within the month. Changing this forces a new Backup Policy Blob Storage to be created.
         * 
         * @return builder
         * 
         */
        public Builder daysOfMonths(@Nullable Output<List<Integer>> daysOfMonths) {
            $.daysOfMonths = daysOfMonths;
            return this;
        }

        /**
         * @param daysOfMonths Must be between `0` and `28`. `0` for last day within the month. Changing this forces a new Backup Policy Blob Storage to be created.
         * 
         * @return builder
         * 
         */
        public Builder daysOfMonths(List<Integer> daysOfMonths) {
            return daysOfMonths(Output.of(daysOfMonths));
        }

        /**
         * @param daysOfMonths Must be between `0` and `28`. `0` for last day within the month. Changing this forces a new Backup Policy Blob Storage to be created.
         * 
         * @return builder
         * 
         */
        public Builder daysOfMonths(Integer... daysOfMonths) {
            return daysOfMonths(List.of(daysOfMonths));
        }

        /**
         * @param daysOfWeeks Possible values are `Monday`, `Tuesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`. Changing this forces a new Backup Policy Blob Storage to be created.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeeks(@Nullable Output<List<String>> daysOfWeeks) {
            $.daysOfWeeks = daysOfWeeks;
            return this;
        }

        /**
         * @param daysOfWeeks Possible values are `Monday`, `Tuesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`. Changing this forces a new Backup Policy Blob Storage to be created.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeeks(List<String> daysOfWeeks) {
            return daysOfWeeks(Output.of(daysOfWeeks));
        }

        /**
         * @param daysOfWeeks Possible values are `Monday`, `Tuesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`. Changing this forces a new Backup Policy Blob Storage to be created.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeeks(String... daysOfWeeks) {
            return daysOfWeeks(List.of(daysOfWeeks));
        }

        /**
         * @param monthsOfYears Possible values are `January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`, `October`, `November` and `December`. Changing this forces a new Backup Policy Blob Storage to be created. When this property is specified, exactly one of the following must also be set: `daysOfMonth`, `daysOfWeek`
         * 
         * @return builder
         * 
         */
        public Builder monthsOfYears(@Nullable Output<List<String>> monthsOfYears) {
            $.monthsOfYears = monthsOfYears;
            return this;
        }

        /**
         * @param monthsOfYears Possible values are `January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`, `October`, `November` and `December`. Changing this forces a new Backup Policy Blob Storage to be created. When this property is specified, exactly one of the following must also be set: `daysOfMonth`, `daysOfWeek`
         * 
         * @return builder
         * 
         */
        public Builder monthsOfYears(List<String> monthsOfYears) {
            return monthsOfYears(Output.of(monthsOfYears));
        }

        /**
         * @param monthsOfYears Possible values are `January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`, `October`, `November` and `December`. Changing this forces a new Backup Policy Blob Storage to be created. When this property is specified, exactly one of the following must also be set: `daysOfMonth`, `daysOfWeek`
         * 
         * @return builder
         * 
         */
        public Builder monthsOfYears(String... monthsOfYears) {
            return monthsOfYears(List.of(monthsOfYears));
        }

        /**
         * @param scheduledBackupTimes Specifies a list of backup times for backup in the `RFC3339` format. Changing this forces a new Backup Policy Blob Storage to be created.
         * 
         * @return builder
         * 
         */
        public Builder scheduledBackupTimes(@Nullable Output<List<String>> scheduledBackupTimes) {
            $.scheduledBackupTimes = scheduledBackupTimes;
            return this;
        }

        /**
         * @param scheduledBackupTimes Specifies a list of backup times for backup in the `RFC3339` format. Changing this forces a new Backup Policy Blob Storage to be created.
         * 
         * @return builder
         * 
         */
        public Builder scheduledBackupTimes(List<String> scheduledBackupTimes) {
            return scheduledBackupTimes(Output.of(scheduledBackupTimes));
        }

        /**
         * @param scheduledBackupTimes Specifies a list of backup times for backup in the `RFC3339` format. Changing this forces a new Backup Policy Blob Storage to be created.
         * 
         * @return builder
         * 
         */
        public Builder scheduledBackupTimes(String... scheduledBackupTimes) {
            return scheduledBackupTimes(List.of(scheduledBackupTimes));
        }

        /**
         * @param weeksOfMonths Possible values are `First`, `Second`, `Third`, `Fourth` and `Last`. Changing this forces a new Backup Policy Blob Storage to be created. When this property is specified, exactly one of the following must also be set: `daysOfMonth`, `daysOfWeek`
         * 
         * &gt; **Note:** When not using `absoluteCriteria`, you must use exactly one of `daysOfMonth` or `daysOfWeek`. Regarding the remaining two properties, `weeksOfMonth` and `monthsOfYear`, you may use either, both, or neither. If you would like to set multiple intervals, you may do so by using multiple `retentionRule` blocks.
         * 
         * @return builder
         * 
         */
        public Builder weeksOfMonths(@Nullable Output<List<String>> weeksOfMonths) {
            $.weeksOfMonths = weeksOfMonths;
            return this;
        }

        /**
         * @param weeksOfMonths Possible values are `First`, `Second`, `Third`, `Fourth` and `Last`. Changing this forces a new Backup Policy Blob Storage to be created. When this property is specified, exactly one of the following must also be set: `daysOfMonth`, `daysOfWeek`
         * 
         * &gt; **Note:** When not using `absoluteCriteria`, you must use exactly one of `daysOfMonth` or `daysOfWeek`. Regarding the remaining two properties, `weeksOfMonth` and `monthsOfYear`, you may use either, both, or neither. If you would like to set multiple intervals, you may do so by using multiple `retentionRule` blocks.
         * 
         * @return builder
         * 
         */
        public Builder weeksOfMonths(List<String> weeksOfMonths) {
            return weeksOfMonths(Output.of(weeksOfMonths));
        }

        /**
         * @param weeksOfMonths Possible values are `First`, `Second`, `Third`, `Fourth` and `Last`. Changing this forces a new Backup Policy Blob Storage to be created. When this property is specified, exactly one of the following must also be set: `daysOfMonth`, `daysOfWeek`
         * 
         * &gt; **Note:** When not using `absoluteCriteria`, you must use exactly one of `daysOfMonth` or `daysOfWeek`. Regarding the remaining two properties, `weeksOfMonth` and `monthsOfYear`, you may use either, both, or neither. If you would like to set multiple intervals, you may do so by using multiple `retentionRule` blocks.
         * 
         * @return builder
         * 
         */
        public Builder weeksOfMonths(String... weeksOfMonths) {
            return weeksOfMonths(List.of(weeksOfMonths));
        }

        public BackupPolicyBlobStorageRetentionRuleCriteriaArgs build() {
            return $;
        }
    }

}
