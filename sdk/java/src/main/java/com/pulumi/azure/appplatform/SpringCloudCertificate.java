// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appplatform;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.appplatform.SpringCloudCertificateArgs;
import com.pulumi.azure.appplatform.inputs.SpringCloudCertificateState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages an Azure Spring Cloud Certificate.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         final var current = Output.of(CoreFunctions.getClientConfig());
 * 
 *         final var exampleServicePrincipal = Output.of(AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
 *             .displayName(&#34;Azure Spring Cloud Domain-Management&#34;)
 *             .build()));
 * 
 *         var exampleKeyVault = new KeyVault(&#34;exampleKeyVault&#34;, KeyVaultArgs.builder()        
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .tenantId(current.apply(getClientConfigResult -&gt; getClientConfigResult.tenantId()))
 *             .skuName(&#34;standard&#34;)
 *             .accessPolicies(            
 *                 KeyVaultAccessPolicyArgs.builder()
 *                     .tenantId(current.apply(getClientConfigResult -&gt; getClientConfigResult.tenantId()))
 *                     .objectId(current.apply(getClientConfigResult -&gt; getClientConfigResult.objectId()))
 *                     .secretPermissions(&#34;set&#34;)
 *                     .certificatePermissions(                    
 *                         &#34;create&#34;,
 *                         &#34;delete&#34;,
 *                         &#34;get&#34;,
 *                         &#34;update&#34;)
 *                     .build(),
 *                 KeyVaultAccessPolicyArgs.builder()
 *                     .tenantId(current.apply(getClientConfigResult -&gt; getClientConfigResult.tenantId()))
 *                     .objectId(exampleServicePrincipal.apply(getServicePrincipalResult -&gt; getServicePrincipalResult.objectId()))
 *                     .secretPermissions(                    
 *                         &#34;get&#34;,
 *                         &#34;list&#34;)
 *                     .certificatePermissions(                    
 *                         &#34;get&#34;,
 *                         &#34;list&#34;)
 *                     .build())
 *             .build());
 * 
 *         var exampleCertificate = new Certificate(&#34;exampleCertificate&#34;, CertificateArgs.builder()        
 *             .keyVaultId(exampleKeyVault.id())
 *             .certificatePolicy(CertificateCertificatePolicyArgs.builder()
 *                 .issuerParameters(CertificateCertificatePolicyIssuerParametersArgs.builder()
 *                     .name(&#34;Self&#34;)
 *                     .build())
 *                 .keyProperties(CertificateCertificatePolicyKeyPropertiesArgs.builder()
 *                     .exportable(true)
 *                     .keySize(2048)
 *                     .keyType(&#34;RSA&#34;)
 *                     .reuseKey(true)
 *                     .build())
 *                 .lifetimeActions(CertificateCertificatePolicyLifetimeActionArgs.builder()
 *                     .action(CertificateCertificatePolicyLifetimeActionActionArgs.builder()
 *                         .actionType(&#34;AutoRenew&#34;)
 *                         .build())
 *                     .trigger(CertificateCertificatePolicyLifetimeActionTriggerArgs.builder()
 *                         .daysBeforeExpiry(30)
 *                         .build())
 *                     .build())
 *                 .secretProperties(CertificateCertificatePolicySecretPropertiesArgs.builder()
 *                     .contentType(&#34;application/x-pkcs12&#34;)
 *                     .build())
 *                 .x509CertificateProperties(CertificateCertificatePolicyX509CertificatePropertiesArgs.builder()
 *                     .keyUsages(                    
 *                         &#34;cRLSign&#34;,
 *                         &#34;dataEncipherment&#34;,
 *                         &#34;digitalSignature&#34;,
 *                         &#34;keyAgreement&#34;,
 *                         &#34;keyCertSign&#34;,
 *                         &#34;keyEncipherment&#34;)
 *                     .subject(&#34;CN=contoso.com&#34;)
 *                     .validityInMonths(12)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var exampleSpringCloudService = new SpringCloudService(&#34;exampleSpringCloudService&#34;, SpringCloudServiceArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .build());
 * 
 *         var exampleSpringCloudCertificate = new SpringCloudCertificate(&#34;exampleSpringCloudCertificate&#34;, SpringCloudCertificateArgs.builder()        
 *             .resourceGroupName(exampleSpringCloudService.resourceGroupName())
 *             .serviceName(exampleSpringCloudService.name())
 *             .keyVaultCertificateId(exampleCertificate.id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Spring Cloud Certificate can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:appplatform/springCloudCertificate:SpringCloudCertificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourcegroup1/providers/Microsoft.AppPlatform/Spring/spring1/certificates/cert1
 * ```
 * 
 */
@ResourceType(type="azure:appplatform/springCloudCertificate:SpringCloudCertificate")
public class SpringCloudCertificate extends com.pulumi.resources.CustomResource {
    /**
     * The content of uploaded certificate. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="certificateContent", type=String.class, parameters={})
    private Output</* @Nullable */ String> certificateContent;

    /**
     * @return The content of uploaded certificate. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<String>> certificateContent() {
        return Codegen.optional(this.certificateContent);
    }
    /**
     * Specifies the ID of the Key Vault Certificate resource. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="keyVaultCertificateId", type=String.class, parameters={})
    private Output</* @Nullable */ String> keyVaultCertificateId;

    /**
     * @return Specifies the ID of the Key Vault Certificate resource. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<String>> keyVaultCertificateId() {
        return Codegen.optional(this.keyVaultCertificateId);
    }
    /**
     * Specifies the name of the Spring Cloud Certificate. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Specifies the name of the Spring Cloud Certificate. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Specifies the name of the resource group in which to create the Spring Cloud Certificate. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="resourceGroupName", type=String.class, parameters={})
    private Output<String> resourceGroupName;

    /**
     * @return Specifies the name of the resource group in which to create the Spring Cloud Certificate. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * Specifies the name of the Spring Cloud Service resource. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="serviceName", type=String.class, parameters={})
    private Output<String> serviceName;

    /**
     * @return Specifies the name of the Spring Cloud Service resource. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }
    /**
     * The thumbprint of the Spring Cloud certificate.
     * 
     */
    @Export(name="thumbprint", type=String.class, parameters={})
    private Output<String> thumbprint;

    /**
     * @return The thumbprint of the Spring Cloud certificate.
     * 
     */
    public Output<String> thumbprint() {
        return this.thumbprint;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SpringCloudCertificate(String name) {
        this(name, SpringCloudCertificateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SpringCloudCertificate(String name, SpringCloudCertificateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SpringCloudCertificate(String name, SpringCloudCertificateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:appplatform/springCloudCertificate:SpringCloudCertificate", name, args == null ? SpringCloudCertificateArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SpringCloudCertificate(String name, Output<String> id, @Nullable SpringCloudCertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:appplatform/springCloudCertificate:SpringCloudCertificate", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SpringCloudCertificate get(String name, Output<String> id, @Nullable SpringCloudCertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SpringCloudCertificate(name, id, state, options);
    }
}
