// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.batch;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobArgs Empty = new JobArgs();

    /**
     * The ID of the Batch Pool. Changing this forces a new Batch Job to be created.
     * 
     */
    @Import(name="batchPoolId", required=true)
    private Output<String> batchPoolId;

    /**
     * @return The ID of the Batch Pool. Changing this forces a new Batch Job to be created.
     * 
     */
    public Output<String> batchPoolId() {
        return this.batchPoolId;
    }

    /**
     * Specifies a map of common environment settings applied to this Batch Job. Changing this forces a new Batch Job to be created.
     * 
     */
    @Import(name="commonEnvironmentProperties")
    private @Nullable Output<Map<String,String>> commonEnvironmentProperties;

    /**
     * @return Specifies a map of common environment settings applied to this Batch Job. Changing this forces a new Batch Job to be created.
     * 
     */
    public Optional<Output<Map<String,String>>> commonEnvironmentProperties() {
        return Optional.ofNullable(this.commonEnvironmentProperties);
    }

    /**
     * The display name of this Batch Job. Changing this forces a new Batch Job to be created.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The display name of this Batch Job. Changing this forces a new Batch Job to be created.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The name which should be used for this Batch Job. Changing this forces a new Batch Job to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Batch Job. Changing this forces a new Batch Job to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The priority of this Batch Job, possible values can range from -1000 (lowest) to 1000 (highest). Defaults to `0`.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return The priority of this Batch Job, possible values can range from -1000 (lowest) to 1000 (highest). Defaults to `0`.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The number of retries to each Batch Task belongs to this Batch Job. If this is set to `0`, the Batch service does not retry Tasks. If this is set to `-1`, the Batch service retries Batch Tasks without limit.
     * 
     */
    @Import(name="taskRetryMaximum")
    private @Nullable Output<Integer> taskRetryMaximum;

    /**
     * @return The number of retries to each Batch Task belongs to this Batch Job. If this is set to `0`, the Batch service does not retry Tasks. If this is set to `-1`, the Batch service retries Batch Tasks without limit.
     * 
     */
    public Optional<Output<Integer>> taskRetryMaximum() {
        return Optional.ofNullable(this.taskRetryMaximum);
    }

    private JobArgs() {}

    private JobArgs(JobArgs $) {
        this.batchPoolId = $.batchPoolId;
        this.commonEnvironmentProperties = $.commonEnvironmentProperties;
        this.displayName = $.displayName;
        this.name = $.name;
        this.priority = $.priority;
        this.taskRetryMaximum = $.taskRetryMaximum;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobArgs $;

        public Builder() {
            $ = new JobArgs();
        }

        public Builder(JobArgs defaults) {
            $ = new JobArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param batchPoolId The ID of the Batch Pool. Changing this forces a new Batch Job to be created.
         * 
         * @return builder
         * 
         */
        public Builder batchPoolId(Output<String> batchPoolId) {
            $.batchPoolId = batchPoolId;
            return this;
        }

        /**
         * @param batchPoolId The ID of the Batch Pool. Changing this forces a new Batch Job to be created.
         * 
         * @return builder
         * 
         */
        public Builder batchPoolId(String batchPoolId) {
            return batchPoolId(Output.of(batchPoolId));
        }

        /**
         * @param commonEnvironmentProperties Specifies a map of common environment settings applied to this Batch Job. Changing this forces a new Batch Job to be created.
         * 
         * @return builder
         * 
         */
        public Builder commonEnvironmentProperties(@Nullable Output<Map<String,String>> commonEnvironmentProperties) {
            $.commonEnvironmentProperties = commonEnvironmentProperties;
            return this;
        }

        /**
         * @param commonEnvironmentProperties Specifies a map of common environment settings applied to this Batch Job. Changing this forces a new Batch Job to be created.
         * 
         * @return builder
         * 
         */
        public Builder commonEnvironmentProperties(Map<String,String> commonEnvironmentProperties) {
            return commonEnvironmentProperties(Output.of(commonEnvironmentProperties));
        }

        /**
         * @param displayName The display name of this Batch Job. Changing this forces a new Batch Job to be created.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name of this Batch Job. Changing this forces a new Batch Job to be created.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param name The name which should be used for this Batch Job. Changing this forces a new Batch Job to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Batch Job. Changing this forces a new Batch Job to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param priority The priority of this Batch Job, possible values can range from -1000 (lowest) to 1000 (highest). Defaults to `0`.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The priority of this Batch Job, possible values can range from -1000 (lowest) to 1000 (highest). Defaults to `0`.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param taskRetryMaximum The number of retries to each Batch Task belongs to this Batch Job. If this is set to `0`, the Batch service does not retry Tasks. If this is set to `-1`, the Batch service retries Batch Tasks without limit.
         * 
         * @return builder
         * 
         */
        public Builder taskRetryMaximum(@Nullable Output<Integer> taskRetryMaximum) {
            $.taskRetryMaximum = taskRetryMaximum;
            return this;
        }

        /**
         * @param taskRetryMaximum The number of retries to each Batch Task belongs to this Batch Job. If this is set to `0`, the Batch service does not retry Tasks. If this is set to `-1`, the Batch service retries Batch Tasks without limit.
         * 
         * @return builder
         * 
         */
        public Builder taskRetryMaximum(Integer taskRetryMaximum) {
            return taskRetryMaximum(Output.of(taskRetryMaximum));
        }

        public JobArgs build() {
            if ($.batchPoolId == null) {
                throw new MissingRequiredPropertyException("JobArgs", "batchPoolId");
            }
            return $;
        }
    }

}
