// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mssql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ManagedInstanceAzureActiveDirectoryAdministrator {
    /**
     * @return Specifies whether only Azure AD authentication can be used to log in to this SQL Managed Instance. When `true`, the `administratorLogin` and `administratorLoginPassword` properties can be omitted. Defaults to `false`.
     * 
     */
    private @Nullable Boolean azureadAuthenticationOnlyEnabled;
    /**
     * @return The login username of the Azure AD Administrator of this SQL Managed Instance.
     * 
     */
    private String loginUsername;
    /**
     * @return The object id of the Azure AD Administrator of this SQL Managed Instance.
     * 
     */
    private String objectId;
    /**
     * @return The principal type of the Azure AD Administrator of this SQL Managed Instance. Possible values are `Application`, `Group`, `User`.
     * 
     */
    private String principalType;
    /**
     * @return The tenant id of the Azure AD Administrator of this SQL Managed Instance. Should be specified if the Azure AD Administrator is homed in a different tenant to the SQL Managed Instance.
     * 
     */
    private @Nullable String tenantId;

    private ManagedInstanceAzureActiveDirectoryAdministrator() {}
    /**
     * @return Specifies whether only Azure AD authentication can be used to log in to this SQL Managed Instance. When `true`, the `administratorLogin` and `administratorLoginPassword` properties can be omitted. Defaults to `false`.
     * 
     */
    public Optional<Boolean> azureadAuthenticationOnlyEnabled() {
        return Optional.ofNullable(this.azureadAuthenticationOnlyEnabled);
    }
    /**
     * @return The login username of the Azure AD Administrator of this SQL Managed Instance.
     * 
     */
    public String loginUsername() {
        return this.loginUsername;
    }
    /**
     * @return The object id of the Azure AD Administrator of this SQL Managed Instance.
     * 
     */
    public String objectId() {
        return this.objectId;
    }
    /**
     * @return The principal type of the Azure AD Administrator of this SQL Managed Instance. Possible values are `Application`, `Group`, `User`.
     * 
     */
    public String principalType() {
        return this.principalType;
    }
    /**
     * @return The tenant id of the Azure AD Administrator of this SQL Managed Instance. Should be specified if the Azure AD Administrator is homed in a different tenant to the SQL Managed Instance.
     * 
     */
    public Optional<String> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagedInstanceAzureActiveDirectoryAdministrator defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean azureadAuthenticationOnlyEnabled;
        private String loginUsername;
        private String objectId;
        private String principalType;
        private @Nullable String tenantId;
        public Builder() {}
        public Builder(ManagedInstanceAzureActiveDirectoryAdministrator defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.azureadAuthenticationOnlyEnabled = defaults.azureadAuthenticationOnlyEnabled;
    	      this.loginUsername = defaults.loginUsername;
    	      this.objectId = defaults.objectId;
    	      this.principalType = defaults.principalType;
    	      this.tenantId = defaults.tenantId;
        }

        @CustomType.Setter
        public Builder azureadAuthenticationOnlyEnabled(@Nullable Boolean azureadAuthenticationOnlyEnabled) {

            this.azureadAuthenticationOnlyEnabled = azureadAuthenticationOnlyEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder loginUsername(String loginUsername) {
            if (loginUsername == null) {
              throw new MissingRequiredPropertyException("ManagedInstanceAzureActiveDirectoryAdministrator", "loginUsername");
            }
            this.loginUsername = loginUsername;
            return this;
        }
        @CustomType.Setter
        public Builder objectId(String objectId) {
            if (objectId == null) {
              throw new MissingRequiredPropertyException("ManagedInstanceAzureActiveDirectoryAdministrator", "objectId");
            }
            this.objectId = objectId;
            return this;
        }
        @CustomType.Setter
        public Builder principalType(String principalType) {
            if (principalType == null) {
              throw new MissingRequiredPropertyException("ManagedInstanceAzureActiveDirectoryAdministrator", "principalType");
            }
            this.principalType = principalType;
            return this;
        }
        @CustomType.Setter
        public Builder tenantId(@Nullable String tenantId) {

            this.tenantId = tenantId;
            return this;
        }
        public ManagedInstanceAzureActiveDirectoryAdministrator build() {
            final var _resultValue = new ManagedInstanceAzureActiveDirectoryAdministrator();
            _resultValue.azureadAuthenticationOnlyEnabled = azureadAuthenticationOnlyEnabled;
            _resultValue.loginUsername = loginUsername;
            _resultValue.objectId = objectId;
            _resultValue.principalType = principalType;
            _resultValue.tenantId = tenantId;
            return _resultValue;
        }
    }
}
