// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.backup;

import com.pulumi.azure.backup.inputs.PolicyFileShareBackupArgs;
import com.pulumi.azure.backup.inputs.PolicyFileShareRetentionDailyArgs;
import com.pulumi.azure.backup.inputs.PolicyFileShareRetentionMonthlyArgs;
import com.pulumi.azure.backup.inputs.PolicyFileShareRetentionWeeklyArgs;
import com.pulumi.azure.backup.inputs.PolicyFileShareRetentionYearlyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyFileShareArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyFileShareArgs Empty = new PolicyFileShareArgs();

    /**
     * Configures the Policy backup frequency and times as documented in the `backup` block below.
     * 
     */
    @Import(name="backup", required=true)
    private Output<PolicyFileShareBackupArgs> backup;

    /**
     * @return Configures the Policy backup frequency and times as documented in the `backup` block below.
     * 
     */
    public Output<PolicyFileShareBackupArgs> backup() {
        return this.backup;
    }

    /**
     * Specifies the name of the policy. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the policy. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="recoveryVaultName", required=true)
    private Output<String> recoveryVaultName;

    /**
     * @return Specifies the name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> recoveryVaultName() {
        return this.recoveryVaultName;
    }

    /**
     * The name of the resource group in which to create the policy. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the policy. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Configures the policy daily retention as documented in the `retention_daily` block below.
     * 
     */
    @Import(name="retentionDaily", required=true)
    private Output<PolicyFileShareRetentionDailyArgs> retentionDaily;

    /**
     * @return Configures the policy daily retention as documented in the `retention_daily` block below.
     * 
     */
    public Output<PolicyFileShareRetentionDailyArgs> retentionDaily() {
        return this.retentionDaily;
    }

    /**
     * Configures the policy monthly retention as documented in the `retention_monthly` block below.
     * 
     */
    @Import(name="retentionMonthly")
    private @Nullable Output<PolicyFileShareRetentionMonthlyArgs> retentionMonthly;

    /**
     * @return Configures the policy monthly retention as documented in the `retention_monthly` block below.
     * 
     */
    public Optional<Output<PolicyFileShareRetentionMonthlyArgs>> retentionMonthly() {
        return Optional.ofNullable(this.retentionMonthly);
    }

    /**
     * Configures the policy weekly retention as documented in the `retention_weekly` block below.
     * 
     */
    @Import(name="retentionWeekly")
    private @Nullable Output<PolicyFileShareRetentionWeeklyArgs> retentionWeekly;

    /**
     * @return Configures the policy weekly retention as documented in the `retention_weekly` block below.
     * 
     */
    public Optional<Output<PolicyFileShareRetentionWeeklyArgs>> retentionWeekly() {
        return Optional.ofNullable(this.retentionWeekly);
    }

    /**
     * Configures the policy yearly retention as documented in the `retention_yearly` block below.
     * 
     */
    @Import(name="retentionYearly")
    private @Nullable Output<PolicyFileShareRetentionYearlyArgs> retentionYearly;

    /**
     * @return Configures the policy yearly retention as documented in the `retention_yearly` block below.
     * 
     */
    public Optional<Output<PolicyFileShareRetentionYearlyArgs>> retentionYearly() {
        return Optional.ofNullable(this.retentionYearly);
    }

    /**
     * Specifies the timezone. [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). Defaults to `UTC`
     * 
     * &gt; **NOTE:** The maximum number of snapshots that Azure Files can retain is 200. If your combined snapshot count exceeds 200 based on your retention policies, it will result in an error. See [this](https://docs.microsoft.com/azure/backup/backup-azure-files-faq#what-is-the-maximum-retention-i-can-configure-for-backups) article for more information.
     * 
     */
    @Import(name="timezone")
    private @Nullable Output<String> timezone;

    /**
     * @return Specifies the timezone. [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). Defaults to `UTC`
     * 
     * &gt; **NOTE:** The maximum number of snapshots that Azure Files can retain is 200. If your combined snapshot count exceeds 200 based on your retention policies, it will result in an error. See [this](https://docs.microsoft.com/azure/backup/backup-azure-files-faq#what-is-the-maximum-retention-i-can-configure-for-backups) article for more information.
     * 
     */
    public Optional<Output<String>> timezone() {
        return Optional.ofNullable(this.timezone);
    }

    private PolicyFileShareArgs() {}

    private PolicyFileShareArgs(PolicyFileShareArgs $) {
        this.backup = $.backup;
        this.name = $.name;
        this.recoveryVaultName = $.recoveryVaultName;
        this.resourceGroupName = $.resourceGroupName;
        this.retentionDaily = $.retentionDaily;
        this.retentionMonthly = $.retentionMonthly;
        this.retentionWeekly = $.retentionWeekly;
        this.retentionYearly = $.retentionYearly;
        this.timezone = $.timezone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyFileShareArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyFileShareArgs $;

        public Builder() {
            $ = new PolicyFileShareArgs();
        }

        public Builder(PolicyFileShareArgs defaults) {
            $ = new PolicyFileShareArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backup Configures the Policy backup frequency and times as documented in the `backup` block below.
         * 
         * @return builder
         * 
         */
        public Builder backup(Output<PolicyFileShareBackupArgs> backup) {
            $.backup = backup;
            return this;
        }

        /**
         * @param backup Configures the Policy backup frequency and times as documented in the `backup` block below.
         * 
         * @return builder
         * 
         */
        public Builder backup(PolicyFileShareBackupArgs backup) {
            return backup(Output.of(backup));
        }

        /**
         * @param name Specifies the name of the policy. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the policy. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param recoveryVaultName Specifies the name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder recoveryVaultName(Output<String> recoveryVaultName) {
            $.recoveryVaultName = recoveryVaultName;
            return this;
        }

        /**
         * @param recoveryVaultName Specifies the name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder recoveryVaultName(String recoveryVaultName) {
            return recoveryVaultName(Output.of(recoveryVaultName));
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the policy. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the policy. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param retentionDaily Configures the policy daily retention as documented in the `retention_daily` block below.
         * 
         * @return builder
         * 
         */
        public Builder retentionDaily(Output<PolicyFileShareRetentionDailyArgs> retentionDaily) {
            $.retentionDaily = retentionDaily;
            return this;
        }

        /**
         * @param retentionDaily Configures the policy daily retention as documented in the `retention_daily` block below.
         * 
         * @return builder
         * 
         */
        public Builder retentionDaily(PolicyFileShareRetentionDailyArgs retentionDaily) {
            return retentionDaily(Output.of(retentionDaily));
        }

        /**
         * @param retentionMonthly Configures the policy monthly retention as documented in the `retention_monthly` block below.
         * 
         * @return builder
         * 
         */
        public Builder retentionMonthly(@Nullable Output<PolicyFileShareRetentionMonthlyArgs> retentionMonthly) {
            $.retentionMonthly = retentionMonthly;
            return this;
        }

        /**
         * @param retentionMonthly Configures the policy monthly retention as documented in the `retention_monthly` block below.
         * 
         * @return builder
         * 
         */
        public Builder retentionMonthly(PolicyFileShareRetentionMonthlyArgs retentionMonthly) {
            return retentionMonthly(Output.of(retentionMonthly));
        }

        /**
         * @param retentionWeekly Configures the policy weekly retention as documented in the `retention_weekly` block below.
         * 
         * @return builder
         * 
         */
        public Builder retentionWeekly(@Nullable Output<PolicyFileShareRetentionWeeklyArgs> retentionWeekly) {
            $.retentionWeekly = retentionWeekly;
            return this;
        }

        /**
         * @param retentionWeekly Configures the policy weekly retention as documented in the `retention_weekly` block below.
         * 
         * @return builder
         * 
         */
        public Builder retentionWeekly(PolicyFileShareRetentionWeeklyArgs retentionWeekly) {
            return retentionWeekly(Output.of(retentionWeekly));
        }

        /**
         * @param retentionYearly Configures the policy yearly retention as documented in the `retention_yearly` block below.
         * 
         * @return builder
         * 
         */
        public Builder retentionYearly(@Nullable Output<PolicyFileShareRetentionYearlyArgs> retentionYearly) {
            $.retentionYearly = retentionYearly;
            return this;
        }

        /**
         * @param retentionYearly Configures the policy yearly retention as documented in the `retention_yearly` block below.
         * 
         * @return builder
         * 
         */
        public Builder retentionYearly(PolicyFileShareRetentionYearlyArgs retentionYearly) {
            return retentionYearly(Output.of(retentionYearly));
        }

        /**
         * @param timezone Specifies the timezone. [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). Defaults to `UTC`
         * 
         * &gt; **NOTE:** The maximum number of snapshots that Azure Files can retain is 200. If your combined snapshot count exceeds 200 based on your retention policies, it will result in an error. See [this](https://docs.microsoft.com/azure/backup/backup-azure-files-faq#what-is-the-maximum-retention-i-can-configure-for-backups) article for more information.
         * 
         * @return builder
         * 
         */
        public Builder timezone(@Nullable Output<String> timezone) {
            $.timezone = timezone;
            return this;
        }

        /**
         * @param timezone Specifies the timezone. [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). Defaults to `UTC`
         * 
         * &gt; **NOTE:** The maximum number of snapshots that Azure Files can retain is 200. If your combined snapshot count exceeds 200 based on your retention policies, it will result in an error. See [this](https://docs.microsoft.com/azure/backup/backup-azure-files-faq#what-is-the-maximum-retention-i-can-configure-for-backups) article for more information.
         * 
         * @return builder
         * 
         */
        public Builder timezone(String timezone) {
            return timezone(Output.of(timezone));
        }

        public PolicyFileShareArgs build() {
            if ($.backup == null) {
                throw new MissingRequiredPropertyException("PolicyFileShareArgs", "backup");
            }
            if ($.recoveryVaultName == null) {
                throw new MissingRequiredPropertyException("PolicyFileShareArgs", "recoveryVaultName");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("PolicyFileShareArgs", "resourceGroupName");
            }
            if ($.retentionDaily == null) {
                throw new MissingRequiredPropertyException("PolicyFileShareArgs", "retentionDaily");
            }
            return $;
        }
    }

}
