// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.batch.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PoolMountNfsMount {
    /**
     * @return Additional command line options to pass to the mount command. These are &#39;net use&#39; options in Windows and &#39;mount&#39; options in Linux.
     * 
     */
    private @Nullable String mountOptions;
    /**
     * @return The relative path on compute node where the file system will be mounted All file systems are mounted relative to the Batch mounts directory, accessible via the `AZ_BATCH_NODE_MOUNTS_DIR` environment variable.
     * 
     */
    private String relativeMountPath;
    /**
     * @return The URI of the file system to mount.
     * 
     */
    private String source;

    private PoolMountNfsMount() {}
    /**
     * @return Additional command line options to pass to the mount command. These are &#39;net use&#39; options in Windows and &#39;mount&#39; options in Linux.
     * 
     */
    public Optional<String> mountOptions() {
        return Optional.ofNullable(this.mountOptions);
    }
    /**
     * @return The relative path on compute node where the file system will be mounted All file systems are mounted relative to the Batch mounts directory, accessible via the `AZ_BATCH_NODE_MOUNTS_DIR` environment variable.
     * 
     */
    public String relativeMountPath() {
        return this.relativeMountPath;
    }
    /**
     * @return The URI of the file system to mount.
     * 
     */
    public String source() {
        return this.source;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PoolMountNfsMount defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String mountOptions;
        private String relativeMountPath;
        private String source;
        public Builder() {}
        public Builder(PoolMountNfsMount defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.mountOptions = defaults.mountOptions;
    	      this.relativeMountPath = defaults.relativeMountPath;
    	      this.source = defaults.source;
        }

        @CustomType.Setter
        public Builder mountOptions(@Nullable String mountOptions) {

            this.mountOptions = mountOptions;
            return this;
        }
        @CustomType.Setter
        public Builder relativeMountPath(String relativeMountPath) {
            if (relativeMountPath == null) {
              throw new MissingRequiredPropertyException("PoolMountNfsMount", "relativeMountPath");
            }
            this.relativeMountPath = relativeMountPath;
            return this;
        }
        @CustomType.Setter
        public Builder source(String source) {
            if (source == null) {
              throw new MissingRequiredPropertyException("PoolMountNfsMount", "source");
            }
            this.source = source;
            return this;
        }
        public PoolMountNfsMount build() {
            final var _resultValue = new PoolMountNfsMount();
            _resultValue.mountOptions = mountOptions;
            _resultValue.relativeMountPath = relativeMountPath;
            _resultValue.source = source;
            return _resultValue;
        }
    }
}
