// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.dashboard;

import com.pulumi.azure.dashboard.inputs.GrafanaAzureMonitorWorkspaceIntegrationArgs;
import com.pulumi.azure.dashboard.inputs.GrafanaIdentityArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GrafanaArgs extends com.pulumi.resources.ResourceArgs {

    public static final GrafanaArgs Empty = new GrafanaArgs();

    /**
     * Whether to enable the api key setting of the Grafana instance. Defaults to `false`.
     * 
     */
    @Import(name="apiKeyEnabled")
    private @Nullable Output<Boolean> apiKeyEnabled;

    /**
     * @return Whether to enable the api key setting of the Grafana instance. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> apiKeyEnabled() {
        return Optional.ofNullable(this.apiKeyEnabled);
    }

    /**
     * Scope for dns deterministic name hash calculation. The only possible value is `TenantReuse`. Defaults to `TenantReuse`.
     * 
     */
    @Import(name="autoGeneratedDomainNameLabelScope")
    private @Nullable Output<String> autoGeneratedDomainNameLabelScope;

    /**
     * @return Scope for dns deterministic name hash calculation. The only possible value is `TenantReuse`. Defaults to `TenantReuse`.
     * 
     */
    public Optional<Output<String>> autoGeneratedDomainNameLabelScope() {
        return Optional.ofNullable(this.autoGeneratedDomainNameLabelScope);
    }

    /**
     * A `azure_monitor_workspace_integrations` block as defined below.
     * 
     */
    @Import(name="azureMonitorWorkspaceIntegrations")
    private @Nullable Output<List<GrafanaAzureMonitorWorkspaceIntegrationArgs>> azureMonitorWorkspaceIntegrations;

    /**
     * @return A `azure_monitor_workspace_integrations` block as defined below.
     * 
     */
    public Optional<Output<List<GrafanaAzureMonitorWorkspaceIntegrationArgs>>> azureMonitorWorkspaceIntegrations() {
        return Optional.ofNullable(this.azureMonitorWorkspaceIntegrations);
    }

    /**
     * Whether to enable the Grafana instance to use deterministic outbound IPs. Defaults to `false`.
     * 
     */
    @Import(name="deterministicOutboundIpEnabled")
    private @Nullable Output<Boolean> deterministicOutboundIpEnabled;

    /**
     * @return Whether to enable the Grafana instance to use deterministic outbound IPs. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> deterministicOutboundIpEnabled() {
        return Optional.ofNullable(this.deterministicOutboundIpEnabled);
    }

    /**
     * Which major version of Grafana to deploy. Defaults to `9`. Possible values are `9`, `10`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="grafanaMajorVersion")
    private @Nullable Output<String> grafanaMajorVersion;

    /**
     * @return Which major version of Grafana to deploy. Defaults to `9`. Possible values are `9`, `10`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> grafanaMajorVersion() {
        return Optional.ofNullable(this.grafanaMajorVersion);
    }

    /**
     * An `identity` block as defined below. Changing this forces a new Dashboard Grafana to be created.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<GrafanaIdentityArgs> identity;

    /**
     * @return An `identity` block as defined below. Changing this forces a new Dashboard Grafana to be created.
     * 
     */
    public Optional<Output<GrafanaIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * Specifies the Azure Region where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Specifies the Azure Region where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Specifies the name which should be used for this Dashboard Grafana. Changing this forces a new Dashboard Grafana to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name which should be used for this Dashboard Grafana. Changing this forces a new Dashboard Grafana to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Whether to enable traffic over the public interface. Defaults to `true`.
     * 
     */
    @Import(name="publicNetworkAccessEnabled")
    private @Nullable Output<Boolean> publicNetworkAccessEnabled;

    /**
     * @return Whether to enable traffic over the public interface. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> publicNetworkAccessEnabled() {
        return Optional.ofNullable(this.publicNetworkAccessEnabled);
    }

    /**
     * Specifies the name of the Resource Group where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return Specifies the name of the Resource Group where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the SKU used for the Grafana instance. Possible values are `Standard` and `Essential`. Defaults to `Standard`. Changing this forces a new Dashboard Grafana to be created.
     * 
     */
    @Import(name="sku")
    private @Nullable Output<String> sku;

    /**
     * @return The name of the SKU used for the Grafana instance. Possible values are `Standard` and `Essential`. Defaults to `Standard`. Changing this forces a new Dashboard Grafana to be created.
     * 
     */
    public Optional<Output<String>> sku() {
        return Optional.ofNullable(this.sku);
    }

    /**
     * A mapping of tags which should be assigned to the Dashboard Grafana.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the Dashboard Grafana.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Whether to enable the zone redundancy setting of the Grafana instance. Defaults to `false`. Changing this forces a new Dashboard Grafana to be created.
     * 
     */
    @Import(name="zoneRedundancyEnabled")
    private @Nullable Output<Boolean> zoneRedundancyEnabled;

    /**
     * @return Whether to enable the zone redundancy setting of the Grafana instance. Defaults to `false`. Changing this forces a new Dashboard Grafana to be created.
     * 
     */
    public Optional<Output<Boolean>> zoneRedundancyEnabled() {
        return Optional.ofNullable(this.zoneRedundancyEnabled);
    }

    private GrafanaArgs() {}

    private GrafanaArgs(GrafanaArgs $) {
        this.apiKeyEnabled = $.apiKeyEnabled;
        this.autoGeneratedDomainNameLabelScope = $.autoGeneratedDomainNameLabelScope;
        this.azureMonitorWorkspaceIntegrations = $.azureMonitorWorkspaceIntegrations;
        this.deterministicOutboundIpEnabled = $.deterministicOutboundIpEnabled;
        this.grafanaMajorVersion = $.grafanaMajorVersion;
        this.identity = $.identity;
        this.location = $.location;
        this.name = $.name;
        this.publicNetworkAccessEnabled = $.publicNetworkAccessEnabled;
        this.resourceGroupName = $.resourceGroupName;
        this.sku = $.sku;
        this.tags = $.tags;
        this.zoneRedundancyEnabled = $.zoneRedundancyEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GrafanaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GrafanaArgs $;

        public Builder() {
            $ = new GrafanaArgs();
        }

        public Builder(GrafanaArgs defaults) {
            $ = new GrafanaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiKeyEnabled Whether to enable the api key setting of the Grafana instance. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder apiKeyEnabled(@Nullable Output<Boolean> apiKeyEnabled) {
            $.apiKeyEnabled = apiKeyEnabled;
            return this;
        }

        /**
         * @param apiKeyEnabled Whether to enable the api key setting of the Grafana instance. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder apiKeyEnabled(Boolean apiKeyEnabled) {
            return apiKeyEnabled(Output.of(apiKeyEnabled));
        }

        /**
         * @param autoGeneratedDomainNameLabelScope Scope for dns deterministic name hash calculation. The only possible value is `TenantReuse`. Defaults to `TenantReuse`.
         * 
         * @return builder
         * 
         */
        public Builder autoGeneratedDomainNameLabelScope(@Nullable Output<String> autoGeneratedDomainNameLabelScope) {
            $.autoGeneratedDomainNameLabelScope = autoGeneratedDomainNameLabelScope;
            return this;
        }

        /**
         * @param autoGeneratedDomainNameLabelScope Scope for dns deterministic name hash calculation. The only possible value is `TenantReuse`. Defaults to `TenantReuse`.
         * 
         * @return builder
         * 
         */
        public Builder autoGeneratedDomainNameLabelScope(String autoGeneratedDomainNameLabelScope) {
            return autoGeneratedDomainNameLabelScope(Output.of(autoGeneratedDomainNameLabelScope));
        }

        /**
         * @param azureMonitorWorkspaceIntegrations A `azure_monitor_workspace_integrations` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder azureMonitorWorkspaceIntegrations(@Nullable Output<List<GrafanaAzureMonitorWorkspaceIntegrationArgs>> azureMonitorWorkspaceIntegrations) {
            $.azureMonitorWorkspaceIntegrations = azureMonitorWorkspaceIntegrations;
            return this;
        }

        /**
         * @param azureMonitorWorkspaceIntegrations A `azure_monitor_workspace_integrations` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder azureMonitorWorkspaceIntegrations(List<GrafanaAzureMonitorWorkspaceIntegrationArgs> azureMonitorWorkspaceIntegrations) {
            return azureMonitorWorkspaceIntegrations(Output.of(azureMonitorWorkspaceIntegrations));
        }

        /**
         * @param azureMonitorWorkspaceIntegrations A `azure_monitor_workspace_integrations` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder azureMonitorWorkspaceIntegrations(GrafanaAzureMonitorWorkspaceIntegrationArgs... azureMonitorWorkspaceIntegrations) {
            return azureMonitorWorkspaceIntegrations(List.of(azureMonitorWorkspaceIntegrations));
        }

        /**
         * @param deterministicOutboundIpEnabled Whether to enable the Grafana instance to use deterministic outbound IPs. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder deterministicOutboundIpEnabled(@Nullable Output<Boolean> deterministicOutboundIpEnabled) {
            $.deterministicOutboundIpEnabled = deterministicOutboundIpEnabled;
            return this;
        }

        /**
         * @param deterministicOutboundIpEnabled Whether to enable the Grafana instance to use deterministic outbound IPs. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder deterministicOutboundIpEnabled(Boolean deterministicOutboundIpEnabled) {
            return deterministicOutboundIpEnabled(Output.of(deterministicOutboundIpEnabled));
        }

        /**
         * @param grafanaMajorVersion Which major version of Grafana to deploy. Defaults to `9`. Possible values are `9`, `10`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder grafanaMajorVersion(@Nullable Output<String> grafanaMajorVersion) {
            $.grafanaMajorVersion = grafanaMajorVersion;
            return this;
        }

        /**
         * @param grafanaMajorVersion Which major version of Grafana to deploy. Defaults to `9`. Possible values are `9`, `10`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder grafanaMajorVersion(String grafanaMajorVersion) {
            return grafanaMajorVersion(Output.of(grafanaMajorVersion));
        }

        /**
         * @param identity An `identity` block as defined below. Changing this forces a new Dashboard Grafana to be created.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<GrafanaIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity An `identity` block as defined below. Changing this forces a new Dashboard Grafana to be created.
         * 
         * @return builder
         * 
         */
        public Builder identity(GrafanaIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param location Specifies the Azure Region where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Specifies the Azure Region where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Specifies the name which should be used for this Dashboard Grafana. Changing this forces a new Dashboard Grafana to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name which should be used for this Dashboard Grafana. Changing this forces a new Dashboard Grafana to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param publicNetworkAccessEnabled Whether to enable traffic over the public interface. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder publicNetworkAccessEnabled(@Nullable Output<Boolean> publicNetworkAccessEnabled) {
            $.publicNetworkAccessEnabled = publicNetworkAccessEnabled;
            return this;
        }

        /**
         * @param publicNetworkAccessEnabled Whether to enable traffic over the public interface. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder publicNetworkAccessEnabled(Boolean publicNetworkAccessEnabled) {
            return publicNetworkAccessEnabled(Output.of(publicNetworkAccessEnabled));
        }

        /**
         * @param resourceGroupName Specifies the name of the Resource Group where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName Specifies the name of the Resource Group where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param sku The name of the SKU used for the Grafana instance. Possible values are `Standard` and `Essential`. Defaults to `Standard`. Changing this forces a new Dashboard Grafana to be created.
         * 
         * @return builder
         * 
         */
        public Builder sku(@Nullable Output<String> sku) {
            $.sku = sku;
            return this;
        }

        /**
         * @param sku The name of the SKU used for the Grafana instance. Possible values are `Standard` and `Essential`. Defaults to `Standard`. Changing this forces a new Dashboard Grafana to be created.
         * 
         * @return builder
         * 
         */
        public Builder sku(String sku) {
            return sku(Output.of(sku));
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Dashboard Grafana.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Dashboard Grafana.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param zoneRedundancyEnabled Whether to enable the zone redundancy setting of the Grafana instance. Defaults to `false`. Changing this forces a new Dashboard Grafana to be created.
         * 
         * @return builder
         * 
         */
        public Builder zoneRedundancyEnabled(@Nullable Output<Boolean> zoneRedundancyEnabled) {
            $.zoneRedundancyEnabled = zoneRedundancyEnabled;
            return this;
        }

        /**
         * @param zoneRedundancyEnabled Whether to enable the zone redundancy setting of the Grafana instance. Defaults to `false`. Changing this forces a new Dashboard Grafana to be created.
         * 
         * @return builder
         * 
         */
        public Builder zoneRedundancyEnabled(Boolean zoneRedundancyEnabled) {
            return zoneRedundancyEnabled(Output.of(zoneRedundancyEnabled));
        }

        public GrafanaArgs build() {
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("GrafanaArgs", "resourceGroupName");
            }
            return $;
        }
    }

}
