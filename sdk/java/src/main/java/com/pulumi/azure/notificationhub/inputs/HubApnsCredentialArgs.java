// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.notificationhub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class HubApnsCredentialArgs extends com.pulumi.resources.ResourceArgs {

    public static final HubApnsCredentialArgs Empty = new HubApnsCredentialArgs();

    /**
     * The Application Mode which defines which server the APNS Messages should be sent to. Possible values are `Production` and `Sandbox`.
     * 
     */
    @Import(name="applicationMode", required=true)
    private Output<String> applicationMode;

    /**
     * @return The Application Mode which defines which server the APNS Messages should be sent to. Possible values are `Production` and `Sandbox`.
     * 
     */
    public Output<String> applicationMode() {
        return this.applicationMode;
    }

    /**
     * The Bundle ID of the iOS/macOS application to send push notifications for, such as `com.org.example`.
     * 
     */
    @Import(name="bundleId", required=true)
    private Output<String> bundleId;

    /**
     * @return The Bundle ID of the iOS/macOS application to send push notifications for, such as `com.org.example`.
     * 
     */
    public Output<String> bundleId() {
        return this.bundleId;
    }

    /**
     * The Apple Push Notifications Service (APNS) Key.
     * 
     */
    @Import(name="keyId", required=true)
    private Output<String> keyId;

    /**
     * @return The Apple Push Notifications Service (APNS) Key.
     * 
     */
    public Output<String> keyId() {
        return this.keyId;
    }

    /**
     * The ID of the team the Token.
     * 
     */
    @Import(name="teamId", required=true)
    private Output<String> teamId;

    /**
     * @return The ID of the team the Token.
     * 
     */
    public Output<String> teamId() {
        return this.teamId;
    }

    /**
     * The Push Token associated with the Apple Developer Account. This is the contents of the `key` downloaded from [the Apple Developer Portal](https://developer.apple.com/account/ios/authkey/) between the `-----BEGIN PRIVATE KEY-----` and `-----END PRIVATE KEY-----` blocks.
     * 
     */
    @Import(name="token", required=true)
    private Output<String> token;

    /**
     * @return The Push Token associated with the Apple Developer Account. This is the contents of the `key` downloaded from [the Apple Developer Portal](https://developer.apple.com/account/ios/authkey/) between the `-----BEGIN PRIVATE KEY-----` and `-----END PRIVATE KEY-----` blocks.
     * 
     */
    public Output<String> token() {
        return this.token;
    }

    private HubApnsCredentialArgs() {}

    private HubApnsCredentialArgs(HubApnsCredentialArgs $) {
        this.applicationMode = $.applicationMode;
        this.bundleId = $.bundleId;
        this.keyId = $.keyId;
        this.teamId = $.teamId;
        this.token = $.token;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HubApnsCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HubApnsCredentialArgs $;

        public Builder() {
            $ = new HubApnsCredentialArgs();
        }

        public Builder(HubApnsCredentialArgs defaults) {
            $ = new HubApnsCredentialArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationMode The Application Mode which defines which server the APNS Messages should be sent to. Possible values are `Production` and `Sandbox`.
         * 
         * @return builder
         * 
         */
        public Builder applicationMode(Output<String> applicationMode) {
            $.applicationMode = applicationMode;
            return this;
        }

        /**
         * @param applicationMode The Application Mode which defines which server the APNS Messages should be sent to. Possible values are `Production` and `Sandbox`.
         * 
         * @return builder
         * 
         */
        public Builder applicationMode(String applicationMode) {
            return applicationMode(Output.of(applicationMode));
        }

        /**
         * @param bundleId The Bundle ID of the iOS/macOS application to send push notifications for, such as `com.org.example`.
         * 
         * @return builder
         * 
         */
        public Builder bundleId(Output<String> bundleId) {
            $.bundleId = bundleId;
            return this;
        }

        /**
         * @param bundleId The Bundle ID of the iOS/macOS application to send push notifications for, such as `com.org.example`.
         * 
         * @return builder
         * 
         */
        public Builder bundleId(String bundleId) {
            return bundleId(Output.of(bundleId));
        }

        /**
         * @param keyId The Apple Push Notifications Service (APNS) Key.
         * 
         * @return builder
         * 
         */
        public Builder keyId(Output<String> keyId) {
            $.keyId = keyId;
            return this;
        }

        /**
         * @param keyId The Apple Push Notifications Service (APNS) Key.
         * 
         * @return builder
         * 
         */
        public Builder keyId(String keyId) {
            return keyId(Output.of(keyId));
        }

        /**
         * @param teamId The ID of the team the Token.
         * 
         * @return builder
         * 
         */
        public Builder teamId(Output<String> teamId) {
            $.teamId = teamId;
            return this;
        }

        /**
         * @param teamId The ID of the team the Token.
         * 
         * @return builder
         * 
         */
        public Builder teamId(String teamId) {
            return teamId(Output.of(teamId));
        }

        /**
         * @param token The Push Token associated with the Apple Developer Account. This is the contents of the `key` downloaded from [the Apple Developer Portal](https://developer.apple.com/account/ios/authkey/) between the `-----BEGIN PRIVATE KEY-----` and `-----END PRIVATE KEY-----` blocks.
         * 
         * @return builder
         * 
         */
        public Builder token(Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token The Push Token associated with the Apple Developer Account. This is the contents of the `key` downloaded from [the Apple Developer Portal](https://developer.apple.com/account/ios/authkey/) between the `-----BEGIN PRIVATE KEY-----` and `-----END PRIVATE KEY-----` blocks.
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        public HubApnsCredentialArgs build() {
            if ($.applicationMode == null) {
                throw new MissingRequiredPropertyException("HubApnsCredentialArgs", "applicationMode");
            }
            if ($.bundleId == null) {
                throw new MissingRequiredPropertyException("HubApnsCredentialArgs", "bundleId");
            }
            if ($.keyId == null) {
                throw new MissingRequiredPropertyException("HubApnsCredentialArgs", "keyId");
            }
            if ($.teamId == null) {
                throw new MissingRequiredPropertyException("HubApnsCredentialArgs", "teamId");
            }
            if ($.token == null) {
                throw new MissingRequiredPropertyException("HubApnsCredentialArgs", "token");
            }
            return $;
        }
    }

}
