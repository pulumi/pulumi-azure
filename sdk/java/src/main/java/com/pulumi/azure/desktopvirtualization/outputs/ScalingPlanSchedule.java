// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.desktopvirtualization.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ScalingPlanSchedule {
    /**
     * @return A list of Days of the Week on which this schedule will be used. Possible values are `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, and `Sunday`
     * 
     */
    private List<String> daysOfWeeks;
    /**
     * @return The name of the schedule.
     * 
     */
    private String name;
    /**
     * @return The load Balancing Algorithm to use during Off-Peak Hours. Possible values are `DepthFirst` and `BreadthFirst`.
     * 
     */
    private String offPeakLoadBalancingAlgorithm;
    /**
     * @return The time at which Off-Peak scaling will begin. This is also the end-time for the Ramp-Down period. The time must be specified in &#34;HH:MM&#34; format.
     * 
     */
    private String offPeakStartTime;
    /**
     * @return The load Balancing Algorithm to use during Peak Hours. Possible values are `DepthFirst` and `BreadthFirst`.
     * 
     */
    private String peakLoadBalancingAlgorithm;
    /**
     * @return The time at which Peak scaling will begin. This is also the end-time for the Ramp-Up period. The time must be specified in &#34;HH:MM&#34; format.
     * 
     */
    private String peakStartTime;
    /**
     * @return This is the value in percentage of used host pool capacity that will be considered to evaluate whether to turn on/off virtual machines during the ramp-down and off-peak hours. For example, if capacity threshold is specified as 60% and your total host pool capacity is 100 sessions, autoscale will turn on additional session hosts once the host pool exceeds a load of 60 sessions.
     * 
     */
    private Integer rampDownCapacityThresholdPercent;
    /**
     * @return Whether users will be forced to log-off session hosts once the `ramp_down_wait_time_minutes` value has been exceeded during the Ramp-Down period. Possible
     * 
     */
    private Boolean rampDownForceLogoffUsers;
    /**
     * @return The load Balancing Algorithm to use during the Ramp-Down period. Possible values are `DepthFirst` and `BreadthFirst`.
     * 
     */
    private String rampDownLoadBalancingAlgorithm;
    /**
     * @return The minimum percentage of session host virtual machines that you would like to get to for ramp-down and off-peak hours. For example, if Minimum percentage of hosts is specified as 10% and total number of session hosts in your host pool is 10, autoscale will ensure a minimum of 1 session host is available to take user connections.
     * 
     */
    private Integer rampDownMinimumHostsPercent;
    /**
     * @return The notification message to send to users during Ramp-Down period when they are required to log-off.
     * 
     */
    private String rampDownNotificationMessage;
    /**
     * @return The time at which Ramp-Down scaling will begin. This is also the end-time for the Ramp-Up period. The time must be specified in &#34;HH:MM&#34; format.
     * 
     */
    private String rampDownStartTime;
    /**
     * @return Controls Session Host shutdown behaviour during Ramp-Down period. Session Hosts can either be shutdown when all sessions on the Session Host have ended, or when there are no Active sessions left on the Session Host. Possible values are `ZeroSessions` and `ZeroActiveSessions`.
     * 
     */
    private String rampDownStopHostsWhen;
    /**
     * @return The number of minutes during Ramp-Down period that autoscale will wait after setting the session host VMs to drain mode, notifying any currently signed in users to save their work before forcing the users to logoff. Once all user sessions on the session host VM have been logged off, Autoscale will shut down the VM.
     * 
     */
    private Integer rampDownWaitTimeMinutes;
    /**
     * @return This is the value of percentage of used host pool capacity that will be considered to evaluate whether to turn on/off virtual machines during the ramp-up and peak hours. For example, if capacity threshold is specified as `60%` and your total host pool capacity is `100` sessions, autoscale will turn on additional session hosts once the host pool exceeds a load of `60` sessions.
     * 
     */
    private @Nullable Integer rampUpCapacityThresholdPercent;
    /**
     * @return The load Balancing Algorithm to use during the Ramp-Up period. Possible values are `DepthFirst` and `BreadthFirst`.
     * 
     */
    private String rampUpLoadBalancingAlgorithm;
    /**
     * @return Specifies the minimum percentage of session host virtual machines to start during ramp-up for peak hours. For example, if Minimum percentage of hosts is specified as `10%` and total number of session hosts in your host pool is `10`, autoscale will ensure a minimum of `1` session host is available to take user connections.
     * 
     */
    private @Nullable Integer rampUpMinimumHostsPercent;
    /**
     * @return The time at which Ramp-Up scaling will begin. This is also the end-time for the Ramp-Up period. The time must be specified in &#34;HH:MM&#34; format.
     * 
     */
    private String rampUpStartTime;

    private ScalingPlanSchedule() {}
    /**
     * @return A list of Days of the Week on which this schedule will be used. Possible values are `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, and `Sunday`
     * 
     */
    public List<String> daysOfWeeks() {
        return this.daysOfWeeks;
    }
    /**
     * @return The name of the schedule.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The load Balancing Algorithm to use during Off-Peak Hours. Possible values are `DepthFirst` and `BreadthFirst`.
     * 
     */
    public String offPeakLoadBalancingAlgorithm() {
        return this.offPeakLoadBalancingAlgorithm;
    }
    /**
     * @return The time at which Off-Peak scaling will begin. This is also the end-time for the Ramp-Down period. The time must be specified in &#34;HH:MM&#34; format.
     * 
     */
    public String offPeakStartTime() {
        return this.offPeakStartTime;
    }
    /**
     * @return The load Balancing Algorithm to use during Peak Hours. Possible values are `DepthFirst` and `BreadthFirst`.
     * 
     */
    public String peakLoadBalancingAlgorithm() {
        return this.peakLoadBalancingAlgorithm;
    }
    /**
     * @return The time at which Peak scaling will begin. This is also the end-time for the Ramp-Up period. The time must be specified in &#34;HH:MM&#34; format.
     * 
     */
    public String peakStartTime() {
        return this.peakStartTime;
    }
    /**
     * @return This is the value in percentage of used host pool capacity that will be considered to evaluate whether to turn on/off virtual machines during the ramp-down and off-peak hours. For example, if capacity threshold is specified as 60% and your total host pool capacity is 100 sessions, autoscale will turn on additional session hosts once the host pool exceeds a load of 60 sessions.
     * 
     */
    public Integer rampDownCapacityThresholdPercent() {
        return this.rampDownCapacityThresholdPercent;
    }
    /**
     * @return Whether users will be forced to log-off session hosts once the `ramp_down_wait_time_minutes` value has been exceeded during the Ramp-Down period. Possible
     * 
     */
    public Boolean rampDownForceLogoffUsers() {
        return this.rampDownForceLogoffUsers;
    }
    /**
     * @return The load Balancing Algorithm to use during the Ramp-Down period. Possible values are `DepthFirst` and `BreadthFirst`.
     * 
     */
    public String rampDownLoadBalancingAlgorithm() {
        return this.rampDownLoadBalancingAlgorithm;
    }
    /**
     * @return The minimum percentage of session host virtual machines that you would like to get to for ramp-down and off-peak hours. For example, if Minimum percentage of hosts is specified as 10% and total number of session hosts in your host pool is 10, autoscale will ensure a minimum of 1 session host is available to take user connections.
     * 
     */
    public Integer rampDownMinimumHostsPercent() {
        return this.rampDownMinimumHostsPercent;
    }
    /**
     * @return The notification message to send to users during Ramp-Down period when they are required to log-off.
     * 
     */
    public String rampDownNotificationMessage() {
        return this.rampDownNotificationMessage;
    }
    /**
     * @return The time at which Ramp-Down scaling will begin. This is also the end-time for the Ramp-Up period. The time must be specified in &#34;HH:MM&#34; format.
     * 
     */
    public String rampDownStartTime() {
        return this.rampDownStartTime;
    }
    /**
     * @return Controls Session Host shutdown behaviour during Ramp-Down period. Session Hosts can either be shutdown when all sessions on the Session Host have ended, or when there are no Active sessions left on the Session Host. Possible values are `ZeroSessions` and `ZeroActiveSessions`.
     * 
     */
    public String rampDownStopHostsWhen() {
        return this.rampDownStopHostsWhen;
    }
    /**
     * @return The number of minutes during Ramp-Down period that autoscale will wait after setting the session host VMs to drain mode, notifying any currently signed in users to save their work before forcing the users to logoff. Once all user sessions on the session host VM have been logged off, Autoscale will shut down the VM.
     * 
     */
    public Integer rampDownWaitTimeMinutes() {
        return this.rampDownWaitTimeMinutes;
    }
    /**
     * @return This is the value of percentage of used host pool capacity that will be considered to evaluate whether to turn on/off virtual machines during the ramp-up and peak hours. For example, if capacity threshold is specified as `60%` and your total host pool capacity is `100` sessions, autoscale will turn on additional session hosts once the host pool exceeds a load of `60` sessions.
     * 
     */
    public Optional<Integer> rampUpCapacityThresholdPercent() {
        return Optional.ofNullable(this.rampUpCapacityThresholdPercent);
    }
    /**
     * @return The load Balancing Algorithm to use during the Ramp-Up period. Possible values are `DepthFirst` and `BreadthFirst`.
     * 
     */
    public String rampUpLoadBalancingAlgorithm() {
        return this.rampUpLoadBalancingAlgorithm;
    }
    /**
     * @return Specifies the minimum percentage of session host virtual machines to start during ramp-up for peak hours. For example, if Minimum percentage of hosts is specified as `10%` and total number of session hosts in your host pool is `10`, autoscale will ensure a minimum of `1` session host is available to take user connections.
     * 
     */
    public Optional<Integer> rampUpMinimumHostsPercent() {
        return Optional.ofNullable(this.rampUpMinimumHostsPercent);
    }
    /**
     * @return The time at which Ramp-Up scaling will begin. This is also the end-time for the Ramp-Up period. The time must be specified in &#34;HH:MM&#34; format.
     * 
     */
    public String rampUpStartTime() {
        return this.rampUpStartTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScalingPlanSchedule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> daysOfWeeks;
        private String name;
        private String offPeakLoadBalancingAlgorithm;
        private String offPeakStartTime;
        private String peakLoadBalancingAlgorithm;
        private String peakStartTime;
        private Integer rampDownCapacityThresholdPercent;
        private Boolean rampDownForceLogoffUsers;
        private String rampDownLoadBalancingAlgorithm;
        private Integer rampDownMinimumHostsPercent;
        private String rampDownNotificationMessage;
        private String rampDownStartTime;
        private String rampDownStopHostsWhen;
        private Integer rampDownWaitTimeMinutes;
        private @Nullable Integer rampUpCapacityThresholdPercent;
        private String rampUpLoadBalancingAlgorithm;
        private @Nullable Integer rampUpMinimumHostsPercent;
        private String rampUpStartTime;
        public Builder() {}
        public Builder(ScalingPlanSchedule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.daysOfWeeks = defaults.daysOfWeeks;
    	      this.name = defaults.name;
    	      this.offPeakLoadBalancingAlgorithm = defaults.offPeakLoadBalancingAlgorithm;
    	      this.offPeakStartTime = defaults.offPeakStartTime;
    	      this.peakLoadBalancingAlgorithm = defaults.peakLoadBalancingAlgorithm;
    	      this.peakStartTime = defaults.peakStartTime;
    	      this.rampDownCapacityThresholdPercent = defaults.rampDownCapacityThresholdPercent;
    	      this.rampDownForceLogoffUsers = defaults.rampDownForceLogoffUsers;
    	      this.rampDownLoadBalancingAlgorithm = defaults.rampDownLoadBalancingAlgorithm;
    	      this.rampDownMinimumHostsPercent = defaults.rampDownMinimumHostsPercent;
    	      this.rampDownNotificationMessage = defaults.rampDownNotificationMessage;
    	      this.rampDownStartTime = defaults.rampDownStartTime;
    	      this.rampDownStopHostsWhen = defaults.rampDownStopHostsWhen;
    	      this.rampDownWaitTimeMinutes = defaults.rampDownWaitTimeMinutes;
    	      this.rampUpCapacityThresholdPercent = defaults.rampUpCapacityThresholdPercent;
    	      this.rampUpLoadBalancingAlgorithm = defaults.rampUpLoadBalancingAlgorithm;
    	      this.rampUpMinimumHostsPercent = defaults.rampUpMinimumHostsPercent;
    	      this.rampUpStartTime = defaults.rampUpStartTime;
        }

        @CustomType.Setter
        public Builder daysOfWeeks(List<String> daysOfWeeks) {
            if (daysOfWeeks == null) {
              throw new MissingRequiredPropertyException("ScalingPlanSchedule", "daysOfWeeks");
            }
            this.daysOfWeeks = daysOfWeeks;
            return this;
        }
        public Builder daysOfWeeks(String... daysOfWeeks) {
            return daysOfWeeks(List.of(daysOfWeeks));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ScalingPlanSchedule", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder offPeakLoadBalancingAlgorithm(String offPeakLoadBalancingAlgorithm) {
            if (offPeakLoadBalancingAlgorithm == null) {
              throw new MissingRequiredPropertyException("ScalingPlanSchedule", "offPeakLoadBalancingAlgorithm");
            }
            this.offPeakLoadBalancingAlgorithm = offPeakLoadBalancingAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder offPeakStartTime(String offPeakStartTime) {
            if (offPeakStartTime == null) {
              throw new MissingRequiredPropertyException("ScalingPlanSchedule", "offPeakStartTime");
            }
            this.offPeakStartTime = offPeakStartTime;
            return this;
        }
        @CustomType.Setter
        public Builder peakLoadBalancingAlgorithm(String peakLoadBalancingAlgorithm) {
            if (peakLoadBalancingAlgorithm == null) {
              throw new MissingRequiredPropertyException("ScalingPlanSchedule", "peakLoadBalancingAlgorithm");
            }
            this.peakLoadBalancingAlgorithm = peakLoadBalancingAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder peakStartTime(String peakStartTime) {
            if (peakStartTime == null) {
              throw new MissingRequiredPropertyException("ScalingPlanSchedule", "peakStartTime");
            }
            this.peakStartTime = peakStartTime;
            return this;
        }
        @CustomType.Setter
        public Builder rampDownCapacityThresholdPercent(Integer rampDownCapacityThresholdPercent) {
            if (rampDownCapacityThresholdPercent == null) {
              throw new MissingRequiredPropertyException("ScalingPlanSchedule", "rampDownCapacityThresholdPercent");
            }
            this.rampDownCapacityThresholdPercent = rampDownCapacityThresholdPercent;
            return this;
        }
        @CustomType.Setter
        public Builder rampDownForceLogoffUsers(Boolean rampDownForceLogoffUsers) {
            if (rampDownForceLogoffUsers == null) {
              throw new MissingRequiredPropertyException("ScalingPlanSchedule", "rampDownForceLogoffUsers");
            }
            this.rampDownForceLogoffUsers = rampDownForceLogoffUsers;
            return this;
        }
        @CustomType.Setter
        public Builder rampDownLoadBalancingAlgorithm(String rampDownLoadBalancingAlgorithm) {
            if (rampDownLoadBalancingAlgorithm == null) {
              throw new MissingRequiredPropertyException("ScalingPlanSchedule", "rampDownLoadBalancingAlgorithm");
            }
            this.rampDownLoadBalancingAlgorithm = rampDownLoadBalancingAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder rampDownMinimumHostsPercent(Integer rampDownMinimumHostsPercent) {
            if (rampDownMinimumHostsPercent == null) {
              throw new MissingRequiredPropertyException("ScalingPlanSchedule", "rampDownMinimumHostsPercent");
            }
            this.rampDownMinimumHostsPercent = rampDownMinimumHostsPercent;
            return this;
        }
        @CustomType.Setter
        public Builder rampDownNotificationMessage(String rampDownNotificationMessage) {
            if (rampDownNotificationMessage == null) {
              throw new MissingRequiredPropertyException("ScalingPlanSchedule", "rampDownNotificationMessage");
            }
            this.rampDownNotificationMessage = rampDownNotificationMessage;
            return this;
        }
        @CustomType.Setter
        public Builder rampDownStartTime(String rampDownStartTime) {
            if (rampDownStartTime == null) {
              throw new MissingRequiredPropertyException("ScalingPlanSchedule", "rampDownStartTime");
            }
            this.rampDownStartTime = rampDownStartTime;
            return this;
        }
        @CustomType.Setter
        public Builder rampDownStopHostsWhen(String rampDownStopHostsWhen) {
            if (rampDownStopHostsWhen == null) {
              throw new MissingRequiredPropertyException("ScalingPlanSchedule", "rampDownStopHostsWhen");
            }
            this.rampDownStopHostsWhen = rampDownStopHostsWhen;
            return this;
        }
        @CustomType.Setter
        public Builder rampDownWaitTimeMinutes(Integer rampDownWaitTimeMinutes) {
            if (rampDownWaitTimeMinutes == null) {
              throw new MissingRequiredPropertyException("ScalingPlanSchedule", "rampDownWaitTimeMinutes");
            }
            this.rampDownWaitTimeMinutes = rampDownWaitTimeMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder rampUpCapacityThresholdPercent(@Nullable Integer rampUpCapacityThresholdPercent) {

            this.rampUpCapacityThresholdPercent = rampUpCapacityThresholdPercent;
            return this;
        }
        @CustomType.Setter
        public Builder rampUpLoadBalancingAlgorithm(String rampUpLoadBalancingAlgorithm) {
            if (rampUpLoadBalancingAlgorithm == null) {
              throw new MissingRequiredPropertyException("ScalingPlanSchedule", "rampUpLoadBalancingAlgorithm");
            }
            this.rampUpLoadBalancingAlgorithm = rampUpLoadBalancingAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder rampUpMinimumHostsPercent(@Nullable Integer rampUpMinimumHostsPercent) {

            this.rampUpMinimumHostsPercent = rampUpMinimumHostsPercent;
            return this;
        }
        @CustomType.Setter
        public Builder rampUpStartTime(String rampUpStartTime) {
            if (rampUpStartTime == null) {
              throw new MissingRequiredPropertyException("ScalingPlanSchedule", "rampUpStartTime");
            }
            this.rampUpStartTime = rampUpStartTime;
            return this;
        }
        public ScalingPlanSchedule build() {
            final var _resultValue = new ScalingPlanSchedule();
            _resultValue.daysOfWeeks = daysOfWeeks;
            _resultValue.name = name;
            _resultValue.offPeakLoadBalancingAlgorithm = offPeakLoadBalancingAlgorithm;
            _resultValue.offPeakStartTime = offPeakStartTime;
            _resultValue.peakLoadBalancingAlgorithm = peakLoadBalancingAlgorithm;
            _resultValue.peakStartTime = peakStartTime;
            _resultValue.rampDownCapacityThresholdPercent = rampDownCapacityThresholdPercent;
            _resultValue.rampDownForceLogoffUsers = rampDownForceLogoffUsers;
            _resultValue.rampDownLoadBalancingAlgorithm = rampDownLoadBalancingAlgorithm;
            _resultValue.rampDownMinimumHostsPercent = rampDownMinimumHostsPercent;
            _resultValue.rampDownNotificationMessage = rampDownNotificationMessage;
            _resultValue.rampDownStartTime = rampDownStartTime;
            _resultValue.rampDownStopHostsWhen = rampDownStopHostsWhen;
            _resultValue.rampDownWaitTimeMinutes = rampDownWaitTimeMinutes;
            _resultValue.rampUpCapacityThresholdPercent = rampUpCapacityThresholdPercent;
            _resultValue.rampUpLoadBalancingAlgorithm = rampUpLoadBalancingAlgorithm;
            _resultValue.rampUpMinimumHostsPercent = rampUpMinimumHostsPercent;
            _resultValue.rampUpStartTime = rampUpStartTime;
            return _resultValue;
        }
    }
}
