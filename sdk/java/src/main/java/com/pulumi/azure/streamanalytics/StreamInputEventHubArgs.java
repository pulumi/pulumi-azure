// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.streamanalytics;

import com.pulumi.azure.streamanalytics.inputs.StreamInputEventHubSerializationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamInputEventHubArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamInputEventHubArgs Empty = new StreamInputEventHubArgs();

    /**
     * The authentication mode for the Stream Output. Possible values are `Msi` and `ConnectionString`. Defaults to `ConnectionString`.
     * 
     */
    @Import(name="authenticationMode")
    private @Nullable Output<String> authenticationMode;

    /**
     * @return The authentication mode for the Stream Output. Possible values are `Msi` and `ConnectionString`. Defaults to `ConnectionString`.
     * 
     */
    public Optional<Output<String>> authenticationMode() {
        return Optional.ofNullable(this.authenticationMode);
    }

    /**
     * The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not set the input will use the Event Hub&#39;s default consumer group.
     * 
     */
    @Import(name="eventhubConsumerGroupName")
    private @Nullable Output<String> eventhubConsumerGroupName;

    /**
     * @return The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not set the input will use the Event Hub&#39;s default consumer group.
     * 
     */
    public Optional<Output<String>> eventhubConsumerGroupName() {
        return Optional.ofNullable(this.eventhubConsumerGroupName);
    }

    /**
     * The name of the Event Hub.
     * 
     */
    @Import(name="eventhubName", required=true)
    private Output<String> eventhubName;

    /**
     * @return The name of the Event Hub.
     * 
     */
    public Output<String> eventhubName() {
        return this.eventhubName;
    }

    /**
     * The name of the Stream Input EventHub. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Stream Input EventHub. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The property the input Event Hub has been partitioned by.
     * 
     */
    @Import(name="partitionKey")
    private @Nullable Output<String> partitionKey;

    /**
     * @return The property the input Event Hub has been partitioned by.
     * 
     */
    public Optional<Output<String>> partitionKey() {
        return Optional.ofNullable(this.partitionKey);
    }

    /**
     * The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * A `serialization` block as defined below.
     * 
     */
    @Import(name="serialization", required=true)
    private Output<StreamInputEventHubSerializationArgs> serialization;

    /**
     * @return A `serialization` block as defined below.
     * 
     */
    public Output<StreamInputEventHubSerializationArgs> serialization() {
        return this.serialization;
    }

    /**
     * The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc.
     * 
     */
    @Import(name="servicebusNamespace", required=true)
    private Output<String> servicebusNamespace;

    /**
     * @return The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc.
     * 
     */
    public Output<String> servicebusNamespace() {
        return this.servicebusNamespace;
    }

    /**
     * The shared access policy key for the specified shared access policy.
     * 
     */
    @Import(name="sharedAccessPolicyKey")
    private @Nullable Output<String> sharedAccessPolicyKey;

    /**
     * @return The shared access policy key for the specified shared access policy.
     * 
     */
    public Optional<Output<String>> sharedAccessPolicyKey() {
        return Optional.ofNullable(this.sharedAccessPolicyKey);
    }

    /**
     * The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc.
     * 
     */
    @Import(name="sharedAccessPolicyName")
    private @Nullable Output<String> sharedAccessPolicyName;

    /**
     * @return The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc.
     * 
     */
    public Optional<Output<String>> sharedAccessPolicyName() {
        return Optional.ofNullable(this.sharedAccessPolicyName);
    }

    /**
     * The name of the Stream Analytics Job. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="streamAnalyticsJobName", required=true)
    private Output<String> streamAnalyticsJobName;

    /**
     * @return The name of the Stream Analytics Job. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> streamAnalyticsJobName() {
        return this.streamAnalyticsJobName;
    }

    private StreamInputEventHubArgs() {}

    private StreamInputEventHubArgs(StreamInputEventHubArgs $) {
        this.authenticationMode = $.authenticationMode;
        this.eventhubConsumerGroupName = $.eventhubConsumerGroupName;
        this.eventhubName = $.eventhubName;
        this.name = $.name;
        this.partitionKey = $.partitionKey;
        this.resourceGroupName = $.resourceGroupName;
        this.serialization = $.serialization;
        this.servicebusNamespace = $.servicebusNamespace;
        this.sharedAccessPolicyKey = $.sharedAccessPolicyKey;
        this.sharedAccessPolicyName = $.sharedAccessPolicyName;
        this.streamAnalyticsJobName = $.streamAnalyticsJobName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamInputEventHubArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamInputEventHubArgs $;

        public Builder() {
            $ = new StreamInputEventHubArgs();
        }

        public Builder(StreamInputEventHubArgs defaults) {
            $ = new StreamInputEventHubArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authenticationMode The authentication mode for the Stream Output. Possible values are `Msi` and `ConnectionString`. Defaults to `ConnectionString`.
         * 
         * @return builder
         * 
         */
        public Builder authenticationMode(@Nullable Output<String> authenticationMode) {
            $.authenticationMode = authenticationMode;
            return this;
        }

        /**
         * @param authenticationMode The authentication mode for the Stream Output. Possible values are `Msi` and `ConnectionString`. Defaults to `ConnectionString`.
         * 
         * @return builder
         * 
         */
        public Builder authenticationMode(String authenticationMode) {
            return authenticationMode(Output.of(authenticationMode));
        }

        /**
         * @param eventhubConsumerGroupName The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not set the input will use the Event Hub&#39;s default consumer group.
         * 
         * @return builder
         * 
         */
        public Builder eventhubConsumerGroupName(@Nullable Output<String> eventhubConsumerGroupName) {
            $.eventhubConsumerGroupName = eventhubConsumerGroupName;
            return this;
        }

        /**
         * @param eventhubConsumerGroupName The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not set the input will use the Event Hub&#39;s default consumer group.
         * 
         * @return builder
         * 
         */
        public Builder eventhubConsumerGroupName(String eventhubConsumerGroupName) {
            return eventhubConsumerGroupName(Output.of(eventhubConsumerGroupName));
        }

        /**
         * @param eventhubName The name of the Event Hub.
         * 
         * @return builder
         * 
         */
        public Builder eventhubName(Output<String> eventhubName) {
            $.eventhubName = eventhubName;
            return this;
        }

        /**
         * @param eventhubName The name of the Event Hub.
         * 
         * @return builder
         * 
         */
        public Builder eventhubName(String eventhubName) {
            return eventhubName(Output.of(eventhubName));
        }

        /**
         * @param name The name of the Stream Input EventHub. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Stream Input EventHub. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param partitionKey The property the input Event Hub has been partitioned by.
         * 
         * @return builder
         * 
         */
        public Builder partitionKey(@Nullable Output<String> partitionKey) {
            $.partitionKey = partitionKey;
            return this;
        }

        /**
         * @param partitionKey The property the input Event Hub has been partitioned by.
         * 
         * @return builder
         * 
         */
        public Builder partitionKey(String partitionKey) {
            return partitionKey(Output.of(partitionKey));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param serialization A `serialization` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder serialization(Output<StreamInputEventHubSerializationArgs> serialization) {
            $.serialization = serialization;
            return this;
        }

        /**
         * @param serialization A `serialization` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder serialization(StreamInputEventHubSerializationArgs serialization) {
            return serialization(Output.of(serialization));
        }

        /**
         * @param servicebusNamespace The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc.
         * 
         * @return builder
         * 
         */
        public Builder servicebusNamespace(Output<String> servicebusNamespace) {
            $.servicebusNamespace = servicebusNamespace;
            return this;
        }

        /**
         * @param servicebusNamespace The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc.
         * 
         * @return builder
         * 
         */
        public Builder servicebusNamespace(String servicebusNamespace) {
            return servicebusNamespace(Output.of(servicebusNamespace));
        }

        /**
         * @param sharedAccessPolicyKey The shared access policy key for the specified shared access policy.
         * 
         * @return builder
         * 
         */
        public Builder sharedAccessPolicyKey(@Nullable Output<String> sharedAccessPolicyKey) {
            $.sharedAccessPolicyKey = sharedAccessPolicyKey;
            return this;
        }

        /**
         * @param sharedAccessPolicyKey The shared access policy key for the specified shared access policy.
         * 
         * @return builder
         * 
         */
        public Builder sharedAccessPolicyKey(String sharedAccessPolicyKey) {
            return sharedAccessPolicyKey(Output.of(sharedAccessPolicyKey));
        }

        /**
         * @param sharedAccessPolicyName The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc.
         * 
         * @return builder
         * 
         */
        public Builder sharedAccessPolicyName(@Nullable Output<String> sharedAccessPolicyName) {
            $.sharedAccessPolicyName = sharedAccessPolicyName;
            return this;
        }

        /**
         * @param sharedAccessPolicyName The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc.
         * 
         * @return builder
         * 
         */
        public Builder sharedAccessPolicyName(String sharedAccessPolicyName) {
            return sharedAccessPolicyName(Output.of(sharedAccessPolicyName));
        }

        /**
         * @param streamAnalyticsJobName The name of the Stream Analytics Job. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder streamAnalyticsJobName(Output<String> streamAnalyticsJobName) {
            $.streamAnalyticsJobName = streamAnalyticsJobName;
            return this;
        }

        /**
         * @param streamAnalyticsJobName The name of the Stream Analytics Job. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder streamAnalyticsJobName(String streamAnalyticsJobName) {
            return streamAnalyticsJobName(Output.of(streamAnalyticsJobName));
        }

        public StreamInputEventHubArgs build() {
            if ($.eventhubName == null) {
                throw new MissingRequiredPropertyException("StreamInputEventHubArgs", "eventhubName");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("StreamInputEventHubArgs", "resourceGroupName");
            }
            if ($.serialization == null) {
                throw new MissingRequiredPropertyException("StreamInputEventHubArgs", "serialization");
            }
            if ($.servicebusNamespace == null) {
                throw new MissingRequiredPropertyException("StreamInputEventHubArgs", "servicebusNamespace");
            }
            if ($.streamAnalyticsJobName == null) {
                throw new MissingRequiredPropertyException("StreamInputEventHubArgs", "streamAnalyticsJobName");
            }
            return $;
        }
    }

}
