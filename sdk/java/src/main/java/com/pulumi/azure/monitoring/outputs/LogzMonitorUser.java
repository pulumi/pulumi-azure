// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class LogzMonitorUser {
    /**
     * @return Email of the user used by Logz for contacting them if needed. Changing this forces a new logz Monitor to be created.
     * 
     * &gt; **NOTE** If you use the Azure CLI to authenticate to Azure, the Email of your Azure account needs to be granted the admin permission in your Logz.io account. Otherwise, you may not be able to delete this resource. There is no such limitation for the Service Principal authentication.
     * 
     */
    private String email;
    /**
     * @return First Name of the user. Changing this forces a new logz Monitor to be created.
     * 
     */
    private String firstName;
    /**
     * @return Last Name of the user. Changing this forces a new logz Monitor to be created.
     * 
     */
    private String lastName;
    /**
     * @return Phone number of the user used by Logz for contacting them if needed. Changing this forces a new logz Monitor to be created.
     * 
     */
    private String phoneNumber;

    private LogzMonitorUser() {}
    /**
     * @return Email of the user used by Logz for contacting them if needed. Changing this forces a new logz Monitor to be created.
     * 
     * &gt; **NOTE** If you use the Azure CLI to authenticate to Azure, the Email of your Azure account needs to be granted the admin permission in your Logz.io account. Otherwise, you may not be able to delete this resource. There is no such limitation for the Service Principal authentication.
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return First Name of the user. Changing this forces a new logz Monitor to be created.
     * 
     */
    public String firstName() {
        return this.firstName;
    }
    /**
     * @return Last Name of the user. Changing this forces a new logz Monitor to be created.
     * 
     */
    public String lastName() {
        return this.lastName;
    }
    /**
     * @return Phone number of the user used by Logz for contacting them if needed. Changing this forces a new logz Monitor to be created.
     * 
     */
    public String phoneNumber() {
        return this.phoneNumber;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LogzMonitorUser defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String email;
        private String firstName;
        private String lastName;
        private String phoneNumber;
        public Builder() {}
        public Builder(LogzMonitorUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.email = defaults.email;
    	      this.firstName = defaults.firstName;
    	      this.lastName = defaults.lastName;
    	      this.phoneNumber = defaults.phoneNumber;
        }

        @CustomType.Setter
        public Builder email(String email) {
            if (email == null) {
              throw new MissingRequiredPropertyException("LogzMonitorUser", "email");
            }
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder firstName(String firstName) {
            if (firstName == null) {
              throw new MissingRequiredPropertyException("LogzMonitorUser", "firstName");
            }
            this.firstName = firstName;
            return this;
        }
        @CustomType.Setter
        public Builder lastName(String lastName) {
            if (lastName == null) {
              throw new MissingRequiredPropertyException("LogzMonitorUser", "lastName");
            }
            this.lastName = lastName;
            return this;
        }
        @CustomType.Setter
        public Builder phoneNumber(String phoneNumber) {
            if (phoneNumber == null) {
              throw new MissingRequiredPropertyException("LogzMonitorUser", "phoneNumber");
            }
            this.phoneNumber = phoneNumber;
            return this;
        }
        public LogzMonitorUser build() {
            final var _resultValue = new LogzMonitorUser();
            _resultValue.email = email;
            _resultValue.firstName = firstName;
            _resultValue.lastName = lastName;
            _resultValue.phoneNumber = phoneNumber;
            return _resultValue;
        }
    }
}
