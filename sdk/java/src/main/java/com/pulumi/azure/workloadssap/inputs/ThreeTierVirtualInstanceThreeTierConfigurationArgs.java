// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.workloadssap.inputs;

import com.pulumi.azure.workloadssap.inputs.ThreeTierVirtualInstanceThreeTierConfigurationApplicationServerConfigurationArgs;
import com.pulumi.azure.workloadssap.inputs.ThreeTierVirtualInstanceThreeTierConfigurationCentralServerConfigurationArgs;
import com.pulumi.azure.workloadssap.inputs.ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfigurationArgs;
import com.pulumi.azure.workloadssap.inputs.ThreeTierVirtualInstanceThreeTierConfigurationResourceNamesArgs;
import com.pulumi.azure.workloadssap.inputs.ThreeTierVirtualInstanceThreeTierConfigurationTransportCreateAndMountArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ThreeTierVirtualInstanceThreeTierConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ThreeTierVirtualInstanceThreeTierConfigurationArgs Empty = new ThreeTierVirtualInstanceThreeTierConfigurationArgs();

    @Import(name="appResourceGroupName", required=true)
    private Output<String> appResourceGroupName;

    public Output<String> appResourceGroupName() {
        return this.appResourceGroupName;
    }

    /**
     * An `applicationServerConfiguration` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="applicationServerConfiguration", required=true)
    private Output<ThreeTierVirtualInstanceThreeTierConfigurationApplicationServerConfigurationArgs> applicationServerConfiguration;

    /**
     * @return An `applicationServerConfiguration` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    public Output<ThreeTierVirtualInstanceThreeTierConfigurationApplicationServerConfigurationArgs> applicationServerConfiguration() {
        return this.applicationServerConfiguration;
    }

    /**
     * A `centralServerConfiguration` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="centralServerConfiguration", required=true)
    private Output<ThreeTierVirtualInstanceThreeTierConfigurationCentralServerConfigurationArgs> centralServerConfiguration;

    /**
     * @return A `centralServerConfiguration` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    public Output<ThreeTierVirtualInstanceThreeTierConfigurationCentralServerConfigurationArgs> centralServerConfiguration() {
        return this.centralServerConfiguration;
    }

    /**
     * A `databaseServerConfiguration` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="databaseServerConfiguration", required=true)
    private Output<ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfigurationArgs> databaseServerConfiguration;

    /**
     * @return A `databaseServerConfiguration` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    public Output<ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfigurationArgs> databaseServerConfiguration() {
        return this.databaseServerConfiguration;
    }

    /**
     * The high availability type for the three tier configuration. Possible values are `AvailabilitySet` and `AvailabilityZone`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="highAvailabilityType")
    private @Nullable Output<String> highAvailabilityType;

    /**
     * @return The high availability type for the three tier configuration. Possible values are `AvailabilitySet` and `AvailabilityZone`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> highAvailabilityType() {
        return Optional.ofNullable(this.highAvailabilityType);
    }

    /**
     * A `resourceNames` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceNames")
    private @Nullable Output<ThreeTierVirtualInstanceThreeTierConfigurationResourceNamesArgs> resourceNames;

    /**
     * @return A `resourceNames` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<ThreeTierVirtualInstanceThreeTierConfigurationResourceNamesArgs>> resourceNames() {
        return Optional.ofNullable(this.resourceNames);
    }

    /**
     * Specifies whether a secondary IP address should be added to the network interface on all VMs of the SAP system being deployed. Defaults to `false`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="secondaryIpEnabled")
    private @Nullable Output<Boolean> secondaryIpEnabled;

    /**
     * @return Specifies whether a secondary IP address should be added to the network interface on all VMs of the SAP system being deployed. Defaults to `false`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<Boolean>> secondaryIpEnabled() {
        return Optional.ofNullable(this.secondaryIpEnabled);
    }

    /**
     * A `transportCreateAndMount` block as defined below. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:** The file share configuration uses `skip` by default when `transportCreateAndMount` isn&#39;t set.
     * 
     * &gt; **Note:** Due to [a bug in the Azure API](https://github.com/Azure/azure-rest-api-specs/issues/25209) where the Storage File Share Id is not defined correctly, it is not currently possible to support using Transport Mount.
     * 
     */
    @Import(name="transportCreateAndMount")
    private @Nullable Output<ThreeTierVirtualInstanceThreeTierConfigurationTransportCreateAndMountArgs> transportCreateAndMount;

    /**
     * @return A `transportCreateAndMount` block as defined below. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:** The file share configuration uses `skip` by default when `transportCreateAndMount` isn&#39;t set.
     * 
     * &gt; **Note:** Due to [a bug in the Azure API](https://github.com/Azure/azure-rest-api-specs/issues/25209) where the Storage File Share Id is not defined correctly, it is not currently possible to support using Transport Mount.
     * 
     */
    public Optional<Output<ThreeTierVirtualInstanceThreeTierConfigurationTransportCreateAndMountArgs>> transportCreateAndMount() {
        return Optional.ofNullable(this.transportCreateAndMount);
    }

    private ThreeTierVirtualInstanceThreeTierConfigurationArgs() {}

    private ThreeTierVirtualInstanceThreeTierConfigurationArgs(ThreeTierVirtualInstanceThreeTierConfigurationArgs $) {
        this.appResourceGroupName = $.appResourceGroupName;
        this.applicationServerConfiguration = $.applicationServerConfiguration;
        this.centralServerConfiguration = $.centralServerConfiguration;
        this.databaseServerConfiguration = $.databaseServerConfiguration;
        this.highAvailabilityType = $.highAvailabilityType;
        this.resourceNames = $.resourceNames;
        this.secondaryIpEnabled = $.secondaryIpEnabled;
        this.transportCreateAndMount = $.transportCreateAndMount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ThreeTierVirtualInstanceThreeTierConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ThreeTierVirtualInstanceThreeTierConfigurationArgs $;

        public Builder() {
            $ = new ThreeTierVirtualInstanceThreeTierConfigurationArgs();
        }

        public Builder(ThreeTierVirtualInstanceThreeTierConfigurationArgs defaults) {
            $ = new ThreeTierVirtualInstanceThreeTierConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder appResourceGroupName(Output<String> appResourceGroupName) {
            $.appResourceGroupName = appResourceGroupName;
            return this;
        }

        public Builder appResourceGroupName(String appResourceGroupName) {
            return appResourceGroupName(Output.of(appResourceGroupName));
        }

        /**
         * @param applicationServerConfiguration An `applicationServerConfiguration` block as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder applicationServerConfiguration(Output<ThreeTierVirtualInstanceThreeTierConfigurationApplicationServerConfigurationArgs> applicationServerConfiguration) {
            $.applicationServerConfiguration = applicationServerConfiguration;
            return this;
        }

        /**
         * @param applicationServerConfiguration An `applicationServerConfiguration` block as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder applicationServerConfiguration(ThreeTierVirtualInstanceThreeTierConfigurationApplicationServerConfigurationArgs applicationServerConfiguration) {
            return applicationServerConfiguration(Output.of(applicationServerConfiguration));
        }

        /**
         * @param centralServerConfiguration A `centralServerConfiguration` block as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder centralServerConfiguration(Output<ThreeTierVirtualInstanceThreeTierConfigurationCentralServerConfigurationArgs> centralServerConfiguration) {
            $.centralServerConfiguration = centralServerConfiguration;
            return this;
        }

        /**
         * @param centralServerConfiguration A `centralServerConfiguration` block as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder centralServerConfiguration(ThreeTierVirtualInstanceThreeTierConfigurationCentralServerConfigurationArgs centralServerConfiguration) {
            return centralServerConfiguration(Output.of(centralServerConfiguration));
        }

        /**
         * @param databaseServerConfiguration A `databaseServerConfiguration` block as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder databaseServerConfiguration(Output<ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfigurationArgs> databaseServerConfiguration) {
            $.databaseServerConfiguration = databaseServerConfiguration;
            return this;
        }

        /**
         * @param databaseServerConfiguration A `databaseServerConfiguration` block as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder databaseServerConfiguration(ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfigurationArgs databaseServerConfiguration) {
            return databaseServerConfiguration(Output.of(databaseServerConfiguration));
        }

        /**
         * @param highAvailabilityType The high availability type for the three tier configuration. Possible values are `AvailabilitySet` and `AvailabilityZone`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder highAvailabilityType(@Nullable Output<String> highAvailabilityType) {
            $.highAvailabilityType = highAvailabilityType;
            return this;
        }

        /**
         * @param highAvailabilityType The high availability type for the three tier configuration. Possible values are `AvailabilitySet` and `AvailabilityZone`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder highAvailabilityType(String highAvailabilityType) {
            return highAvailabilityType(Output.of(highAvailabilityType));
        }

        /**
         * @param resourceNames A `resourceNames` block as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceNames(@Nullable Output<ThreeTierVirtualInstanceThreeTierConfigurationResourceNamesArgs> resourceNames) {
            $.resourceNames = resourceNames;
            return this;
        }

        /**
         * @param resourceNames A `resourceNames` block as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceNames(ThreeTierVirtualInstanceThreeTierConfigurationResourceNamesArgs resourceNames) {
            return resourceNames(Output.of(resourceNames));
        }

        /**
         * @param secondaryIpEnabled Specifies whether a secondary IP address should be added to the network interface on all VMs of the SAP system being deployed. Defaults to `false`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder secondaryIpEnabled(@Nullable Output<Boolean> secondaryIpEnabled) {
            $.secondaryIpEnabled = secondaryIpEnabled;
            return this;
        }

        /**
         * @param secondaryIpEnabled Specifies whether a secondary IP address should be added to the network interface on all VMs of the SAP system being deployed. Defaults to `false`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder secondaryIpEnabled(Boolean secondaryIpEnabled) {
            return secondaryIpEnabled(Output.of(secondaryIpEnabled));
        }

        /**
         * @param transportCreateAndMount A `transportCreateAndMount` block as defined below. Changing this forces a new resource to be created.
         * 
         * &gt; **Note:** The file share configuration uses `skip` by default when `transportCreateAndMount` isn&#39;t set.
         * 
         * &gt; **Note:** Due to [a bug in the Azure API](https://github.com/Azure/azure-rest-api-specs/issues/25209) where the Storage File Share Id is not defined correctly, it is not currently possible to support using Transport Mount.
         * 
         * @return builder
         * 
         */
        public Builder transportCreateAndMount(@Nullable Output<ThreeTierVirtualInstanceThreeTierConfigurationTransportCreateAndMountArgs> transportCreateAndMount) {
            $.transportCreateAndMount = transportCreateAndMount;
            return this;
        }

        /**
         * @param transportCreateAndMount A `transportCreateAndMount` block as defined below. Changing this forces a new resource to be created.
         * 
         * &gt; **Note:** The file share configuration uses `skip` by default when `transportCreateAndMount` isn&#39;t set.
         * 
         * &gt; **Note:** Due to [a bug in the Azure API](https://github.com/Azure/azure-rest-api-specs/issues/25209) where the Storage File Share Id is not defined correctly, it is not currently possible to support using Transport Mount.
         * 
         * @return builder
         * 
         */
        public Builder transportCreateAndMount(ThreeTierVirtualInstanceThreeTierConfigurationTransportCreateAndMountArgs transportCreateAndMount) {
            return transportCreateAndMount(Output.of(transportCreateAndMount));
        }

        public ThreeTierVirtualInstanceThreeTierConfigurationArgs build() {
            if ($.appResourceGroupName == null) {
                throw new MissingRequiredPropertyException("ThreeTierVirtualInstanceThreeTierConfigurationArgs", "appResourceGroupName");
            }
            if ($.applicationServerConfiguration == null) {
                throw new MissingRequiredPropertyException("ThreeTierVirtualInstanceThreeTierConfigurationArgs", "applicationServerConfiguration");
            }
            if ($.centralServerConfiguration == null) {
                throw new MissingRequiredPropertyException("ThreeTierVirtualInstanceThreeTierConfigurationArgs", "centralServerConfiguration");
            }
            if ($.databaseServerConfiguration == null) {
                throw new MissingRequiredPropertyException("ThreeTierVirtualInstanceThreeTierConfigurationArgs", "databaseServerConfiguration");
            }
            return $;
        }
    }

}
