// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetApplicationGatewayUrlPathMapPathRule {
    /**
     * @return The ID of the associated Backend Address Pool.
     * 
     */
    private String backendAddressPoolId;
    /**
     * @return The Name of the Backend Address Pool which is used for this Routing Rule.
     * 
     */
    private String backendAddressPoolName;
    /**
     * @return The ID of the associated Backend HTTP Settings Configuration.
     * 
     */
    private String backendHttpSettingsId;
    /**
     * @return The Name of the Backend HTTP Settings Collection which is used for this Routing Rule.
     * 
     */
    private String backendHttpSettingsName;
    /**
     * @return The ID of the Web Application Firewall Policy which is used as an HTTP Listener for this Path Rule.
     * 
     */
    private String firewallPolicyId;
    /**
     * @return The ID of the Rewrite Rule Set
     * 
     */
    private String id;
    /**
     * @return The name of this Application Gateway.
     * 
     */
    private String name;
    /**
     * @return A list of Paths used in this Path Rule.
     * 
     */
    private List<String> paths;
    /**
     * @return The ID of the associated Redirect Configuration.
     * 
     */
    private String redirectConfigurationId;
    /**
     * @return The Name of the Redirect Configuration which is used for this Routing Rule.
     * 
     */
    private String redirectConfigurationName;
    /**
     * @return The ID of the associated Rewrite Rule Set.
     * 
     */
    private String rewriteRuleSetId;
    /**
     * @return The Name of the Rewrite Rule Set which is used for this Routing Rule.
     * 
     */
    private String rewriteRuleSetName;

    private GetApplicationGatewayUrlPathMapPathRule() {}
    /**
     * @return The ID of the associated Backend Address Pool.
     * 
     */
    public String backendAddressPoolId() {
        return this.backendAddressPoolId;
    }
    /**
     * @return The Name of the Backend Address Pool which is used for this Routing Rule.
     * 
     */
    public String backendAddressPoolName() {
        return this.backendAddressPoolName;
    }
    /**
     * @return The ID of the associated Backend HTTP Settings Configuration.
     * 
     */
    public String backendHttpSettingsId() {
        return this.backendHttpSettingsId;
    }
    /**
     * @return The Name of the Backend HTTP Settings Collection which is used for this Routing Rule.
     * 
     */
    public String backendHttpSettingsName() {
        return this.backendHttpSettingsName;
    }
    /**
     * @return The ID of the Web Application Firewall Policy which is used as an HTTP Listener for this Path Rule.
     * 
     */
    public String firewallPolicyId() {
        return this.firewallPolicyId;
    }
    /**
     * @return The ID of the Rewrite Rule Set
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of this Application Gateway.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A list of Paths used in this Path Rule.
     * 
     */
    public List<String> paths() {
        return this.paths;
    }
    /**
     * @return The ID of the associated Redirect Configuration.
     * 
     */
    public String redirectConfigurationId() {
        return this.redirectConfigurationId;
    }
    /**
     * @return The Name of the Redirect Configuration which is used for this Routing Rule.
     * 
     */
    public String redirectConfigurationName() {
        return this.redirectConfigurationName;
    }
    /**
     * @return The ID of the associated Rewrite Rule Set.
     * 
     */
    public String rewriteRuleSetId() {
        return this.rewriteRuleSetId;
    }
    /**
     * @return The Name of the Rewrite Rule Set which is used for this Routing Rule.
     * 
     */
    public String rewriteRuleSetName() {
        return this.rewriteRuleSetName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationGatewayUrlPathMapPathRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backendAddressPoolId;
        private String backendAddressPoolName;
        private String backendHttpSettingsId;
        private String backendHttpSettingsName;
        private String firewallPolicyId;
        private String id;
        private String name;
        private List<String> paths;
        private String redirectConfigurationId;
        private String redirectConfigurationName;
        private String rewriteRuleSetId;
        private String rewriteRuleSetName;
        public Builder() {}
        public Builder(GetApplicationGatewayUrlPathMapPathRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendAddressPoolId = defaults.backendAddressPoolId;
    	      this.backendAddressPoolName = defaults.backendAddressPoolName;
    	      this.backendHttpSettingsId = defaults.backendHttpSettingsId;
    	      this.backendHttpSettingsName = defaults.backendHttpSettingsName;
    	      this.firewallPolicyId = defaults.firewallPolicyId;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.paths = defaults.paths;
    	      this.redirectConfigurationId = defaults.redirectConfigurationId;
    	      this.redirectConfigurationName = defaults.redirectConfigurationName;
    	      this.rewriteRuleSetId = defaults.rewriteRuleSetId;
    	      this.rewriteRuleSetName = defaults.rewriteRuleSetName;
        }

        @CustomType.Setter
        public Builder backendAddressPoolId(String backendAddressPoolId) {
            if (backendAddressPoolId == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayUrlPathMapPathRule", "backendAddressPoolId");
            }
            this.backendAddressPoolId = backendAddressPoolId;
            return this;
        }
        @CustomType.Setter
        public Builder backendAddressPoolName(String backendAddressPoolName) {
            if (backendAddressPoolName == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayUrlPathMapPathRule", "backendAddressPoolName");
            }
            this.backendAddressPoolName = backendAddressPoolName;
            return this;
        }
        @CustomType.Setter
        public Builder backendHttpSettingsId(String backendHttpSettingsId) {
            if (backendHttpSettingsId == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayUrlPathMapPathRule", "backendHttpSettingsId");
            }
            this.backendHttpSettingsId = backendHttpSettingsId;
            return this;
        }
        @CustomType.Setter
        public Builder backendHttpSettingsName(String backendHttpSettingsName) {
            if (backendHttpSettingsName == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayUrlPathMapPathRule", "backendHttpSettingsName");
            }
            this.backendHttpSettingsName = backendHttpSettingsName;
            return this;
        }
        @CustomType.Setter
        public Builder firewallPolicyId(String firewallPolicyId) {
            if (firewallPolicyId == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayUrlPathMapPathRule", "firewallPolicyId");
            }
            this.firewallPolicyId = firewallPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayUrlPathMapPathRule", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayUrlPathMapPathRule", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder paths(List<String> paths) {
            if (paths == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayUrlPathMapPathRule", "paths");
            }
            this.paths = paths;
            return this;
        }
        public Builder paths(String... paths) {
            return paths(List.of(paths));
        }
        @CustomType.Setter
        public Builder redirectConfigurationId(String redirectConfigurationId) {
            if (redirectConfigurationId == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayUrlPathMapPathRule", "redirectConfigurationId");
            }
            this.redirectConfigurationId = redirectConfigurationId;
            return this;
        }
        @CustomType.Setter
        public Builder redirectConfigurationName(String redirectConfigurationName) {
            if (redirectConfigurationName == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayUrlPathMapPathRule", "redirectConfigurationName");
            }
            this.redirectConfigurationName = redirectConfigurationName;
            return this;
        }
        @CustomType.Setter
        public Builder rewriteRuleSetId(String rewriteRuleSetId) {
            if (rewriteRuleSetId == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayUrlPathMapPathRule", "rewriteRuleSetId");
            }
            this.rewriteRuleSetId = rewriteRuleSetId;
            return this;
        }
        @CustomType.Setter
        public Builder rewriteRuleSetName(String rewriteRuleSetName) {
            if (rewriteRuleSetName == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayUrlPathMapPathRule", "rewriteRuleSetName");
            }
            this.rewriteRuleSetName = rewriteRuleSetName;
            return this;
        }
        public GetApplicationGatewayUrlPathMapPathRule build() {
            final var _resultValue = new GetApplicationGatewayUrlPathMapPathRule();
            _resultValue.backendAddressPoolId = backendAddressPoolId;
            _resultValue.backendAddressPoolName = backendAddressPoolName;
            _resultValue.backendHttpSettingsId = backendHttpSettingsId;
            _resultValue.backendHttpSettingsName = backendHttpSettingsName;
            _resultValue.firewallPolicyId = firewallPolicyId;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.paths = paths;
            _resultValue.redirectConfigurationId = redirectConfigurationId;
            _resultValue.redirectConfigurationName = redirectConfigurationName;
            _resultValue.rewriteRuleSetId = rewriteRuleSetId;
            _resultValue.rewriteRuleSetName = rewriteRuleSetName;
            return _resultValue;
        }
    }
}
