// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataCollectionRuleDataSourcesDataImportEventHubDataSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataCollectionRuleDataSourcesDataImportEventHubDataSourceArgs Empty = new DataCollectionRuleDataSourcesDataImportEventHubDataSourceArgs();

    /**
     * The Event Hub consumer group name.
     * 
     */
    @Import(name="consumerGroup")
    private @Nullable Output<String> consumerGroup;

    /**
     * @return The Event Hub consumer group name.
     * 
     */
    public Optional<Output<String>> consumerGroup() {
        return Optional.ofNullable(this.consumerGroup);
    }

    /**
     * The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The stream to collect from Event Hub. Possible value should be a custom stream name.
     * 
     */
    @Import(name="stream", required=true)
    private Output<String> stream;

    /**
     * @return The stream to collect from Event Hub. Possible value should be a custom stream name.
     * 
     */
    public Output<String> stream() {
        return this.stream;
    }

    private DataCollectionRuleDataSourcesDataImportEventHubDataSourceArgs() {}

    private DataCollectionRuleDataSourcesDataImportEventHubDataSourceArgs(DataCollectionRuleDataSourcesDataImportEventHubDataSourceArgs $) {
        this.consumerGroup = $.consumerGroup;
        this.name = $.name;
        this.stream = $.stream;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataCollectionRuleDataSourcesDataImportEventHubDataSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataCollectionRuleDataSourcesDataImportEventHubDataSourceArgs $;

        public Builder() {
            $ = new DataCollectionRuleDataSourcesDataImportEventHubDataSourceArgs();
        }

        public Builder(DataCollectionRuleDataSourcesDataImportEventHubDataSourceArgs defaults) {
            $ = new DataCollectionRuleDataSourcesDataImportEventHubDataSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param consumerGroup The Event Hub consumer group name.
         * 
         * @return builder
         * 
         */
        public Builder consumerGroup(@Nullable Output<String> consumerGroup) {
            $.consumerGroup = consumerGroup;
            return this;
        }

        /**
         * @param consumerGroup The Event Hub consumer group name.
         * 
         * @return builder
         * 
         */
        public Builder consumerGroup(String consumerGroup) {
            return consumerGroup(Output.of(consumerGroup));
        }

        /**
         * @param name The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param stream The stream to collect from Event Hub. Possible value should be a custom stream name.
         * 
         * @return builder
         * 
         */
        public Builder stream(Output<String> stream) {
            $.stream = stream;
            return this;
        }

        /**
         * @param stream The stream to collect from Event Hub. Possible value should be a custom stream name.
         * 
         * @return builder
         * 
         */
        public Builder stream(String stream) {
            return stream(Output.of(stream));
        }

        public DataCollectionRuleDataSourcesDataImportEventHubDataSourceArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("DataCollectionRuleDataSourcesDataImportEventHubDataSourceArgs", "name");
            }
            if ($.stream == null) {
                throw new MissingRequiredPropertyException("DataCollectionRuleDataSourcesDataImportEventHubDataSourceArgs", "stream");
            }
            return $;
        }
    }

}
