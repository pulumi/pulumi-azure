// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class DataCollectionRuleDataSourcesPerformanceCounter {
    /**
     * @return Specifies a list of specifier names of the performance counters you want to collect. To get a list of performance counters on Windows, run the command `typeperf`. Please see [this document](https://learn.microsoft.com/en-us/azure/azure-monitor/agents/data-sources-performance-counters#configure-performance-counters) for more information.
     * 
     */
    private List<String> counterSpecifiers;
    /**
     * @return The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
     * 
     */
    private String name;
    /**
     * @return The number of seconds between consecutive counter measurements (samples). The value should be integer between `1` and `300` inclusive. `sampling_frequency_in_seconds` must be equal to `60` seconds for counters collected with `Microsoft-InsightsMetrics` stream.
     * 
     */
    private Integer samplingFrequencyInSeconds;
    /**
     * @return Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-InsightsMetrics`,and `Microsoft-Perf`.
     * 
     */
    private List<String> streams;

    private DataCollectionRuleDataSourcesPerformanceCounter() {}
    /**
     * @return Specifies a list of specifier names of the performance counters you want to collect. To get a list of performance counters on Windows, run the command `typeperf`. Please see [this document](https://learn.microsoft.com/en-us/azure/azure-monitor/agents/data-sources-performance-counters#configure-performance-counters) for more information.
     * 
     */
    public List<String> counterSpecifiers() {
        return this.counterSpecifiers;
    }
    /**
     * @return The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The number of seconds between consecutive counter measurements (samples). The value should be integer between `1` and `300` inclusive. `sampling_frequency_in_seconds` must be equal to `60` seconds for counters collected with `Microsoft-InsightsMetrics` stream.
     * 
     */
    public Integer samplingFrequencyInSeconds() {
        return this.samplingFrequencyInSeconds;
    }
    /**
     * @return Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-InsightsMetrics`,and `Microsoft-Perf`.
     * 
     */
    public List<String> streams() {
        return this.streams;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataCollectionRuleDataSourcesPerformanceCounter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> counterSpecifiers;
        private String name;
        private Integer samplingFrequencyInSeconds;
        private List<String> streams;
        public Builder() {}
        public Builder(DataCollectionRuleDataSourcesPerformanceCounter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.counterSpecifiers = defaults.counterSpecifiers;
    	      this.name = defaults.name;
    	      this.samplingFrequencyInSeconds = defaults.samplingFrequencyInSeconds;
    	      this.streams = defaults.streams;
        }

        @CustomType.Setter
        public Builder counterSpecifiers(List<String> counterSpecifiers) {
            if (counterSpecifiers == null) {
              throw new MissingRequiredPropertyException("DataCollectionRuleDataSourcesPerformanceCounter", "counterSpecifiers");
            }
            this.counterSpecifiers = counterSpecifiers;
            return this;
        }
        public Builder counterSpecifiers(String... counterSpecifiers) {
            return counterSpecifiers(List.of(counterSpecifiers));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("DataCollectionRuleDataSourcesPerformanceCounter", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder samplingFrequencyInSeconds(Integer samplingFrequencyInSeconds) {
            if (samplingFrequencyInSeconds == null) {
              throw new MissingRequiredPropertyException("DataCollectionRuleDataSourcesPerformanceCounter", "samplingFrequencyInSeconds");
            }
            this.samplingFrequencyInSeconds = samplingFrequencyInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder streams(List<String> streams) {
            if (streams == null) {
              throw new MissingRequiredPropertyException("DataCollectionRuleDataSourcesPerformanceCounter", "streams");
            }
            this.streams = streams;
            return this;
        }
        public Builder streams(String... streams) {
            return streams(List.of(streams));
        }
        public DataCollectionRuleDataSourcesPerformanceCounter build() {
            final var _resultValue = new DataCollectionRuleDataSourcesPerformanceCounter();
            _resultValue.counterSpecifiers = counterSpecifiers;
            _resultValue.name = name;
            _resultValue.samplingFrequencyInSeconds = samplingFrequencyInSeconds;
            _resultValue.streams = streams;
            return _resultValue;
        }
    }
}
