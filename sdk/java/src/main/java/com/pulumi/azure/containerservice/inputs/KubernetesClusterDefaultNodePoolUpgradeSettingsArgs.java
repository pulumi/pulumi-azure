// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KubernetesClusterDefaultNodePoolUpgradeSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final KubernetesClusterDefaultNodePoolUpgradeSettingsArgs Empty = new KubernetesClusterDefaultNodePoolUpgradeSettingsArgs();

    /**
     * The amount of time in minutes to wait on eviction of pods and graceful termination per node. This eviction wait time honors pod disruption budgets for upgrades. If this time is exceeded, the upgrade fails. Unsetting this after configuring it will force a new resource to be created.
     * 
     */
    @Import(name="drainTimeoutInMinutes")
    private @Nullable Output<Integer> drainTimeoutInMinutes;

    /**
     * @return The amount of time in minutes to wait on eviction of pods and graceful termination per node. This eviction wait time honors pod disruption budgets for upgrades. If this time is exceeded, the upgrade fails. Unsetting this after configuring it will force a new resource to be created.
     * 
     */
    public Optional<Output<Integer>> drainTimeoutInMinutes() {
        return Optional.ofNullable(this.drainTimeoutInMinutes);
    }

    /**
     * The maximum number or percentage of nodes which will be added to the Node Pool size during an upgrade.
     * 
     * &gt; **Note:** If a percentage is provided, the number of surge nodes is calculated from the `nodeCount` value on the current cluster. Node surge can allow a cluster to have more nodes than `maxCount` during an upgrade. Ensure that your cluster has enough [IP space](https://docs.microsoft.com/azure/aks/upgrade-cluster#customize-node-surge-upgrade) during an upgrade.
     * 
     */
    @Import(name="maxSurge", required=true)
    private Output<String> maxSurge;

    /**
     * @return The maximum number or percentage of nodes which will be added to the Node Pool size during an upgrade.
     * 
     * &gt; **Note:** If a percentage is provided, the number of surge nodes is calculated from the `nodeCount` value on the current cluster. Node surge can allow a cluster to have more nodes than `maxCount` during an upgrade. Ensure that your cluster has enough [IP space](https://docs.microsoft.com/azure/aks/upgrade-cluster#customize-node-surge-upgrade) during an upgrade.
     * 
     */
    public Output<String> maxSurge() {
        return this.maxSurge;
    }

    /**
     * The amount of time in minutes to wait after draining a node and before reimaging and moving on to next node. Defaults to `0`. &lt;!-- The 0 default happens in code, not in Schema --&gt;
     * 
     */
    @Import(name="nodeSoakDurationInMinutes")
    private @Nullable Output<Integer> nodeSoakDurationInMinutes;

    /**
     * @return The amount of time in minutes to wait after draining a node and before reimaging and moving on to next node. Defaults to `0`. &lt;!-- The 0 default happens in code, not in Schema --&gt;
     * 
     */
    public Optional<Output<Integer>> nodeSoakDurationInMinutes() {
        return Optional.ofNullable(this.nodeSoakDurationInMinutes);
    }

    private KubernetesClusterDefaultNodePoolUpgradeSettingsArgs() {}

    private KubernetesClusterDefaultNodePoolUpgradeSettingsArgs(KubernetesClusterDefaultNodePoolUpgradeSettingsArgs $) {
        this.drainTimeoutInMinutes = $.drainTimeoutInMinutes;
        this.maxSurge = $.maxSurge;
        this.nodeSoakDurationInMinutes = $.nodeSoakDurationInMinutes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KubernetesClusterDefaultNodePoolUpgradeSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KubernetesClusterDefaultNodePoolUpgradeSettingsArgs $;

        public Builder() {
            $ = new KubernetesClusterDefaultNodePoolUpgradeSettingsArgs();
        }

        public Builder(KubernetesClusterDefaultNodePoolUpgradeSettingsArgs defaults) {
            $ = new KubernetesClusterDefaultNodePoolUpgradeSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param drainTimeoutInMinutes The amount of time in minutes to wait on eviction of pods and graceful termination per node. This eviction wait time honors pod disruption budgets for upgrades. If this time is exceeded, the upgrade fails. Unsetting this after configuring it will force a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder drainTimeoutInMinutes(@Nullable Output<Integer> drainTimeoutInMinutes) {
            $.drainTimeoutInMinutes = drainTimeoutInMinutes;
            return this;
        }

        /**
         * @param drainTimeoutInMinutes The amount of time in minutes to wait on eviction of pods and graceful termination per node. This eviction wait time honors pod disruption budgets for upgrades. If this time is exceeded, the upgrade fails. Unsetting this after configuring it will force a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder drainTimeoutInMinutes(Integer drainTimeoutInMinutes) {
            return drainTimeoutInMinutes(Output.of(drainTimeoutInMinutes));
        }

        /**
         * @param maxSurge The maximum number or percentage of nodes which will be added to the Node Pool size during an upgrade.
         * 
         * &gt; **Note:** If a percentage is provided, the number of surge nodes is calculated from the `nodeCount` value on the current cluster. Node surge can allow a cluster to have more nodes than `maxCount` during an upgrade. Ensure that your cluster has enough [IP space](https://docs.microsoft.com/azure/aks/upgrade-cluster#customize-node-surge-upgrade) during an upgrade.
         * 
         * @return builder
         * 
         */
        public Builder maxSurge(Output<String> maxSurge) {
            $.maxSurge = maxSurge;
            return this;
        }

        /**
         * @param maxSurge The maximum number or percentage of nodes which will be added to the Node Pool size during an upgrade.
         * 
         * &gt; **Note:** If a percentage is provided, the number of surge nodes is calculated from the `nodeCount` value on the current cluster. Node surge can allow a cluster to have more nodes than `maxCount` during an upgrade. Ensure that your cluster has enough [IP space](https://docs.microsoft.com/azure/aks/upgrade-cluster#customize-node-surge-upgrade) during an upgrade.
         * 
         * @return builder
         * 
         */
        public Builder maxSurge(String maxSurge) {
            return maxSurge(Output.of(maxSurge));
        }

        /**
         * @param nodeSoakDurationInMinutes The amount of time in minutes to wait after draining a node and before reimaging and moving on to next node. Defaults to `0`. &lt;!-- The 0 default happens in code, not in Schema --&gt;
         * 
         * @return builder
         * 
         */
        public Builder nodeSoakDurationInMinutes(@Nullable Output<Integer> nodeSoakDurationInMinutes) {
            $.nodeSoakDurationInMinutes = nodeSoakDurationInMinutes;
            return this;
        }

        /**
         * @param nodeSoakDurationInMinutes The amount of time in minutes to wait after draining a node and before reimaging and moving on to next node. Defaults to `0`. &lt;!-- The 0 default happens in code, not in Schema --&gt;
         * 
         * @return builder
         * 
         */
        public Builder nodeSoakDurationInMinutes(Integer nodeSoakDurationInMinutes) {
            return nodeSoakDurationInMinutes(Output.of(nodeSoakDurationInMinutes));
        }

        public KubernetesClusterDefaultNodePoolUpgradeSettingsArgs build() {
            if ($.maxSurge == null) {
                throw new MissingRequiredPropertyException("KubernetesClusterDefaultNodePoolUpgradeSettingsArgs", "maxSurge");
            }
            return $;
        }
    }

}
