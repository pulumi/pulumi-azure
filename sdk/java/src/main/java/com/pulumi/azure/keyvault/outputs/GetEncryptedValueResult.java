// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.keyvault.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetEncryptedValueResult {
    private String algorithm;
    /**
     * @return The Base64URL decoded string of `plain_text_value`. Because the API would remove padding characters of `plain_text_value` when encrypting, this attribute is useful to get the original value.
     * 
     */
    private String decodedPlainTextValue;
    private @Nullable String encryptedData;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String keyVaultKeyId;
    private @Nullable String plainTextValue;

    private GetEncryptedValueResult() {}
    public String algorithm() {
        return this.algorithm;
    }
    /**
     * @return The Base64URL decoded string of `plain_text_value`. Because the API would remove padding characters of `plain_text_value` when encrypting, this attribute is useful to get the original value.
     * 
     */
    public String decodedPlainTextValue() {
        return this.decodedPlainTextValue;
    }
    public Optional<String> encryptedData() {
        return Optional.ofNullable(this.encryptedData);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String keyVaultKeyId() {
        return this.keyVaultKeyId;
    }
    public Optional<String> plainTextValue() {
        return Optional.ofNullable(this.plainTextValue);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEncryptedValueResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String algorithm;
        private String decodedPlainTextValue;
        private @Nullable String encryptedData;
        private String id;
        private String keyVaultKeyId;
        private @Nullable String plainTextValue;
        public Builder() {}
        public Builder(GetEncryptedValueResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.algorithm = defaults.algorithm;
    	      this.decodedPlainTextValue = defaults.decodedPlainTextValue;
    	      this.encryptedData = defaults.encryptedData;
    	      this.id = defaults.id;
    	      this.keyVaultKeyId = defaults.keyVaultKeyId;
    	      this.plainTextValue = defaults.plainTextValue;
        }

        @CustomType.Setter
        public Builder algorithm(String algorithm) {
            if (algorithm == null) {
              throw new MissingRequiredPropertyException("GetEncryptedValueResult", "algorithm");
            }
            this.algorithm = algorithm;
            return this;
        }
        @CustomType.Setter
        public Builder decodedPlainTextValue(String decodedPlainTextValue) {
            if (decodedPlainTextValue == null) {
              throw new MissingRequiredPropertyException("GetEncryptedValueResult", "decodedPlainTextValue");
            }
            this.decodedPlainTextValue = decodedPlainTextValue;
            return this;
        }
        @CustomType.Setter
        public Builder encryptedData(@Nullable String encryptedData) {

            this.encryptedData = encryptedData;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetEncryptedValueResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder keyVaultKeyId(String keyVaultKeyId) {
            if (keyVaultKeyId == null) {
              throw new MissingRequiredPropertyException("GetEncryptedValueResult", "keyVaultKeyId");
            }
            this.keyVaultKeyId = keyVaultKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder plainTextValue(@Nullable String plainTextValue) {

            this.plainTextValue = plainTextValue;
            return this;
        }
        public GetEncryptedValueResult build() {
            final var _resultValue = new GetEncryptedValueResult();
            _resultValue.algorithm = algorithm;
            _resultValue.decodedPlainTextValue = decodedPlainTextValue;
            _resultValue.encryptedData = encryptedData;
            _resultValue.id = id;
            _resultValue.keyVaultKeyId = keyVaultKeyId;
            _resultValue.plainTextValue = plainTextValue;
            return _resultValue;
        }
    }
}
