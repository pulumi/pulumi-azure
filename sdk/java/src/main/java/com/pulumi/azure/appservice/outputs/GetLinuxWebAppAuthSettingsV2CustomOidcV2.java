// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetLinuxWebAppAuthSettingsV2CustomOidcV2 {
    /**
     * @return The endpoint to make the Authorisation Request as supplied by `openid_configuration_endpoint` response.
     * 
     */
    private String authorisationEndpoint;
    /**
     * @return The endpoint that provides the keys necessary to validate the token as supplied by `openid_configuration_endpoint` response.
     * 
     */
    private String certificationUri;
    /**
     * @return The Client Credential Method used.
     * 
     */
    private String clientCredentialMethod;
    /**
     * @return The OAuth 2.0 client ID used by the app for authentication.
     * 
     */
    private String clientId;
    /**
     * @return The app setting name containing the OAuth 2.0 client secret used by the app for authentication.
     * 
     */
    private String clientSecretSettingName;
    /**
     * @return The endpoint that issued the Token as supplied by `openid_configuration_endpoint` response.
     * 
     */
    private String issuerEndpoint;
    /**
     * @return The name of this Linux Web App.
     * 
     */
    private String name;
    /**
     * @return The name of the claim that contains the users name.
     * 
     */
    private String nameClaimType;
    /**
     * @return The app setting name that contains the `client_secret` value used for the Custom OIDC Login.
     * 
     */
    private String openidConfigurationEndpoint;
    /**
     * @return The list of the scopes that are requested while authenticating.
     * 
     */
    private List<String> scopes;
    /**
     * @return The endpoint used to request a Token as supplied by `openid_configuration_endpoint` response.
     * 
     */
    private String tokenEndpoint;

    private GetLinuxWebAppAuthSettingsV2CustomOidcV2() {}
    /**
     * @return The endpoint to make the Authorisation Request as supplied by `openid_configuration_endpoint` response.
     * 
     */
    public String authorisationEndpoint() {
        return this.authorisationEndpoint;
    }
    /**
     * @return The endpoint that provides the keys necessary to validate the token as supplied by `openid_configuration_endpoint` response.
     * 
     */
    public String certificationUri() {
        return this.certificationUri;
    }
    /**
     * @return The Client Credential Method used.
     * 
     */
    public String clientCredentialMethod() {
        return this.clientCredentialMethod;
    }
    /**
     * @return The OAuth 2.0 client ID used by the app for authentication.
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return The app setting name containing the OAuth 2.0 client secret used by the app for authentication.
     * 
     */
    public String clientSecretSettingName() {
        return this.clientSecretSettingName;
    }
    /**
     * @return The endpoint that issued the Token as supplied by `openid_configuration_endpoint` response.
     * 
     */
    public String issuerEndpoint() {
        return this.issuerEndpoint;
    }
    /**
     * @return The name of this Linux Web App.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The name of the claim that contains the users name.
     * 
     */
    public String nameClaimType() {
        return this.nameClaimType;
    }
    /**
     * @return The app setting name that contains the `client_secret` value used for the Custom OIDC Login.
     * 
     */
    public String openidConfigurationEndpoint() {
        return this.openidConfigurationEndpoint;
    }
    /**
     * @return The list of the scopes that are requested while authenticating.
     * 
     */
    public List<String> scopes() {
        return this.scopes;
    }
    /**
     * @return The endpoint used to request a Token as supplied by `openid_configuration_endpoint` response.
     * 
     */
    public String tokenEndpoint() {
        return this.tokenEndpoint;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLinuxWebAppAuthSettingsV2CustomOidcV2 defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String authorisationEndpoint;
        private String certificationUri;
        private String clientCredentialMethod;
        private String clientId;
        private String clientSecretSettingName;
        private String issuerEndpoint;
        private String name;
        private String nameClaimType;
        private String openidConfigurationEndpoint;
        private List<String> scopes;
        private String tokenEndpoint;
        public Builder() {}
        public Builder(GetLinuxWebAppAuthSettingsV2CustomOidcV2 defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorisationEndpoint = defaults.authorisationEndpoint;
    	      this.certificationUri = defaults.certificationUri;
    	      this.clientCredentialMethod = defaults.clientCredentialMethod;
    	      this.clientId = defaults.clientId;
    	      this.clientSecretSettingName = defaults.clientSecretSettingName;
    	      this.issuerEndpoint = defaults.issuerEndpoint;
    	      this.name = defaults.name;
    	      this.nameClaimType = defaults.nameClaimType;
    	      this.openidConfigurationEndpoint = defaults.openidConfigurationEndpoint;
    	      this.scopes = defaults.scopes;
    	      this.tokenEndpoint = defaults.tokenEndpoint;
        }

        @CustomType.Setter
        public Builder authorisationEndpoint(String authorisationEndpoint) {
            if (authorisationEndpoint == null) {
              throw new MissingRequiredPropertyException("GetLinuxWebAppAuthSettingsV2CustomOidcV2", "authorisationEndpoint");
            }
            this.authorisationEndpoint = authorisationEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder certificationUri(String certificationUri) {
            if (certificationUri == null) {
              throw new MissingRequiredPropertyException("GetLinuxWebAppAuthSettingsV2CustomOidcV2", "certificationUri");
            }
            this.certificationUri = certificationUri;
            return this;
        }
        @CustomType.Setter
        public Builder clientCredentialMethod(String clientCredentialMethod) {
            if (clientCredentialMethod == null) {
              throw new MissingRequiredPropertyException("GetLinuxWebAppAuthSettingsV2CustomOidcV2", "clientCredentialMethod");
            }
            this.clientCredentialMethod = clientCredentialMethod;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("GetLinuxWebAppAuthSettingsV2CustomOidcV2", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecretSettingName(String clientSecretSettingName) {
            if (clientSecretSettingName == null) {
              throw new MissingRequiredPropertyException("GetLinuxWebAppAuthSettingsV2CustomOidcV2", "clientSecretSettingName");
            }
            this.clientSecretSettingName = clientSecretSettingName;
            return this;
        }
        @CustomType.Setter
        public Builder issuerEndpoint(String issuerEndpoint) {
            if (issuerEndpoint == null) {
              throw new MissingRequiredPropertyException("GetLinuxWebAppAuthSettingsV2CustomOidcV2", "issuerEndpoint");
            }
            this.issuerEndpoint = issuerEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetLinuxWebAppAuthSettingsV2CustomOidcV2", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nameClaimType(String nameClaimType) {
            if (nameClaimType == null) {
              throw new MissingRequiredPropertyException("GetLinuxWebAppAuthSettingsV2CustomOidcV2", "nameClaimType");
            }
            this.nameClaimType = nameClaimType;
            return this;
        }
        @CustomType.Setter
        public Builder openidConfigurationEndpoint(String openidConfigurationEndpoint) {
            if (openidConfigurationEndpoint == null) {
              throw new MissingRequiredPropertyException("GetLinuxWebAppAuthSettingsV2CustomOidcV2", "openidConfigurationEndpoint");
            }
            this.openidConfigurationEndpoint = openidConfigurationEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder scopes(List<String> scopes) {
            if (scopes == null) {
              throw new MissingRequiredPropertyException("GetLinuxWebAppAuthSettingsV2CustomOidcV2", "scopes");
            }
            this.scopes = scopes;
            return this;
        }
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }
        @CustomType.Setter
        public Builder tokenEndpoint(String tokenEndpoint) {
            if (tokenEndpoint == null) {
              throw new MissingRequiredPropertyException("GetLinuxWebAppAuthSettingsV2CustomOidcV2", "tokenEndpoint");
            }
            this.tokenEndpoint = tokenEndpoint;
            return this;
        }
        public GetLinuxWebAppAuthSettingsV2CustomOidcV2 build() {
            final var _resultValue = new GetLinuxWebAppAuthSettingsV2CustomOidcV2();
            _resultValue.authorisationEndpoint = authorisationEndpoint;
            _resultValue.certificationUri = certificationUri;
            _resultValue.clientCredentialMethod = clientCredentialMethod;
            _resultValue.clientId = clientId;
            _resultValue.clientSecretSettingName = clientSecretSettingName;
            _resultValue.issuerEndpoint = issuerEndpoint;
            _resultValue.name = name;
            _resultValue.nameClaimType = nameClaimType;
            _resultValue.openidConfigurationEndpoint = openidConfigurationEndpoint;
            _resultValue.scopes = scopes;
            _resultValue.tokenEndpoint = tokenEndpoint;
            return _resultValue;
        }
    }
}
