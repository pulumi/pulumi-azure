// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.apimanagement;

import com.pulumi.azure.apimanagement.inputs.BackendCredentialsArgs;
import com.pulumi.azure.apimanagement.inputs.BackendProxyArgs;
import com.pulumi.azure.apimanagement.inputs.BackendServiceFabricClusterArgs;
import com.pulumi.azure.apimanagement.inputs.BackendTlsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackendArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackendArgs Empty = new BackendArgs();

    /**
     * The Name of the API Management Service where this backend should be created. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="apiManagementName", required=true)
    private Output<String> apiManagementName;

    /**
     * @return The Name of the API Management Service where this backend should be created. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> apiManagementName() {
        return this.apiManagementName;
    }

    /**
     * A `credentials` block as documented below.
     * 
     */
    @Import(name="credentials")
    private @Nullable Output<BackendCredentialsArgs> credentials;

    /**
     * @return A `credentials` block as documented below.
     * 
     */
    public Optional<Output<BackendCredentialsArgs>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * The description of the backend.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the backend.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the API Management backend. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the API Management backend. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The protocol used by the backend host. Possible values are `http` or `soap`.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return The protocol used by the backend host. Possible values are `http` or `soap`.
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * A `proxy` block as documented below.
     * 
     */
    @Import(name="proxy")
    private @Nullable Output<BackendProxyArgs> proxy;

    /**
     * @return A `proxy` block as documented below.
     * 
     */
    public Optional<Output<BackendProxyArgs>> proxy() {
        return Optional.ofNullable(this.proxy);
    }

    /**
     * The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The management URI of the backend host in an external system. This URI can be the ARM Resource ID of Logic Apps, Function Apps or API Apps, or the management endpoint of a Service Fabric cluster.
     * 
     */
    @Import(name="resourceId")
    private @Nullable Output<String> resourceId;

    /**
     * @return The management URI of the backend host in an external system. This URI can be the ARM Resource ID of Logic Apps, Function Apps or API Apps, or the management endpoint of a Service Fabric cluster.
     * 
     */
    public Optional<Output<String>> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    /**
     * A `service_fabric_cluster` block as documented below.
     * 
     */
    @Import(name="serviceFabricCluster")
    private @Nullable Output<BackendServiceFabricClusterArgs> serviceFabricCluster;

    /**
     * @return A `service_fabric_cluster` block as documented below.
     * 
     */
    public Optional<Output<BackendServiceFabricClusterArgs>> serviceFabricCluster() {
        return Optional.ofNullable(this.serviceFabricCluster);
    }

    /**
     * The title of the backend.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return The title of the backend.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    /**
     * A `tls` block as documented below.
     * 
     */
    @Import(name="tls")
    private @Nullable Output<BackendTlsArgs> tls;

    /**
     * @return A `tls` block as documented below.
     * 
     */
    public Optional<Output<BackendTlsArgs>> tls() {
        return Optional.ofNullable(this.tls);
    }

    /**
     * The URL of the backend host.
     * 
     */
    @Import(name="url", required=true)
    private Output<String> url;

    /**
     * @return The URL of the backend host.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    private BackendArgs() {}

    private BackendArgs(BackendArgs $) {
        this.apiManagementName = $.apiManagementName;
        this.credentials = $.credentials;
        this.description = $.description;
        this.name = $.name;
        this.protocol = $.protocol;
        this.proxy = $.proxy;
        this.resourceGroupName = $.resourceGroupName;
        this.resourceId = $.resourceId;
        this.serviceFabricCluster = $.serviceFabricCluster;
        this.title = $.title;
        this.tls = $.tls;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendArgs $;

        public Builder() {
            $ = new BackendArgs();
        }

        public Builder(BackendArgs defaults) {
            $ = new BackendArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiManagementName The Name of the API Management Service where this backend should be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder apiManagementName(Output<String> apiManagementName) {
            $.apiManagementName = apiManagementName;
            return this;
        }

        /**
         * @param apiManagementName The Name of the API Management Service where this backend should be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder apiManagementName(String apiManagementName) {
            return apiManagementName(Output.of(apiManagementName));
        }

        /**
         * @param credentials A `credentials` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder credentials(@Nullable Output<BackendCredentialsArgs> credentials) {
            $.credentials = credentials;
            return this;
        }

        /**
         * @param credentials A `credentials` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder credentials(BackendCredentialsArgs credentials) {
            return credentials(Output.of(credentials));
        }

        /**
         * @param description The description of the backend.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the backend.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The name of the API Management backend. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the API Management backend. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param protocol The protocol used by the backend host. Possible values are `http` or `soap`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The protocol used by the backend host. Possible values are `http` or `soap`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param proxy A `proxy` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder proxy(@Nullable Output<BackendProxyArgs> proxy) {
            $.proxy = proxy;
            return this;
        }

        /**
         * @param proxy A `proxy` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder proxy(BackendProxyArgs proxy) {
            return proxy(Output.of(proxy));
        }

        /**
         * @param resourceGroupName The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param resourceId The management URI of the backend host in an external system. This URI can be the ARM Resource ID of Logic Apps, Function Apps or API Apps, or the management endpoint of a Service Fabric cluster.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId The management URI of the backend host in an external system. This URI can be the ARM Resource ID of Logic Apps, Function Apps or API Apps, or the management endpoint of a Service Fabric cluster.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        /**
         * @param serviceFabricCluster A `service_fabric_cluster` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder serviceFabricCluster(@Nullable Output<BackendServiceFabricClusterArgs> serviceFabricCluster) {
            $.serviceFabricCluster = serviceFabricCluster;
            return this;
        }

        /**
         * @param serviceFabricCluster A `service_fabric_cluster` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder serviceFabricCluster(BackendServiceFabricClusterArgs serviceFabricCluster) {
            return serviceFabricCluster(Output.of(serviceFabricCluster));
        }

        /**
         * @param title The title of the backend.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title The title of the backend.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param tls A `tls` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder tls(@Nullable Output<BackendTlsArgs> tls) {
            $.tls = tls;
            return this;
        }

        /**
         * @param tls A `tls` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder tls(BackendTlsArgs tls) {
            return tls(Output.of(tls));
        }

        /**
         * @param url The URL of the backend host.
         * 
         * @return builder
         * 
         */
        public Builder url(Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL of the backend host.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public BackendArgs build() {
            if ($.apiManagementName == null) {
                throw new MissingRequiredPropertyException("BackendArgs", "apiManagementName");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("BackendArgs", "protocol");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("BackendArgs", "resourceGroupName");
            }
            if ($.url == null) {
                throw new MissingRequiredPropertyException("BackendArgs", "url");
            }
            return $;
        }
    }

}
