// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.storage.outputs;

import com.pulumi.azure.storage.outputs.BlobInventoryPolicyRuleFilter;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BlobInventoryPolicyRule {
    /**
     * @return A `filter` block as defined above. Can only be set when the `scope` is `Blob`.
     * 
     */
    private @Nullable BlobInventoryPolicyRuleFilter filter;
    /**
     * @return The format of the inventory files. Possible values are `Csv` and `Parquet`.
     * 
     */
    private String format;
    /**
     * @return The name which should be used for this Blob Inventory Policy Rule.
     * 
     */
    private String name;
    /**
     * @return The inventory schedule applied by this rule. Possible values are `Daily` and `Weekly`.
     * 
     */
    private String schedule;
    /**
     * @return A list of fields to be included in the inventory. See the [Azure API reference](https://docs.microsoft.com/rest/api/storagerp/blob-inventory-policies/create-or-update#blobinventorypolicydefinition) for all the supported fields.
     * 
     */
    private List<String> schemaFields;
    /**
     * @return The scope of the inventory for this rule. Possible values are `Blob` and `Container`.
     * 
     */
    private String scope;
    /**
     * @return The storage container name to store the blob inventory files for this rule.
     * 
     */
    private String storageContainerName;

    private BlobInventoryPolicyRule() {}
    /**
     * @return A `filter` block as defined above. Can only be set when the `scope` is `Blob`.
     * 
     */
    public Optional<BlobInventoryPolicyRuleFilter> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return The format of the inventory files. Possible values are `Csv` and `Parquet`.
     * 
     */
    public String format() {
        return this.format;
    }
    /**
     * @return The name which should be used for this Blob Inventory Policy Rule.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The inventory schedule applied by this rule. Possible values are `Daily` and `Weekly`.
     * 
     */
    public String schedule() {
        return this.schedule;
    }
    /**
     * @return A list of fields to be included in the inventory. See the [Azure API reference](https://docs.microsoft.com/rest/api/storagerp/blob-inventory-policies/create-or-update#blobinventorypolicydefinition) for all the supported fields.
     * 
     */
    public List<String> schemaFields() {
        return this.schemaFields;
    }
    /**
     * @return The scope of the inventory for this rule. Possible values are `Blob` and `Container`.
     * 
     */
    public String scope() {
        return this.scope;
    }
    /**
     * @return The storage container name to store the blob inventory files for this rule.
     * 
     */
    public String storageContainerName() {
        return this.storageContainerName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BlobInventoryPolicyRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable BlobInventoryPolicyRuleFilter filter;
        private String format;
        private String name;
        private String schedule;
        private List<String> schemaFields;
        private String scope;
        private String storageContainerName;
        public Builder() {}
        public Builder(BlobInventoryPolicyRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filter = defaults.filter;
    	      this.format = defaults.format;
    	      this.name = defaults.name;
    	      this.schedule = defaults.schedule;
    	      this.schemaFields = defaults.schemaFields;
    	      this.scope = defaults.scope;
    	      this.storageContainerName = defaults.storageContainerName;
        }

        @CustomType.Setter
        public Builder filter(@Nullable BlobInventoryPolicyRuleFilter filter) {

            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder format(String format) {
            if (format == null) {
              throw new MissingRequiredPropertyException("BlobInventoryPolicyRule", "format");
            }
            this.format = format;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("BlobInventoryPolicyRule", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder schedule(String schedule) {
            if (schedule == null) {
              throw new MissingRequiredPropertyException("BlobInventoryPolicyRule", "schedule");
            }
            this.schedule = schedule;
            return this;
        }
        @CustomType.Setter
        public Builder schemaFields(List<String> schemaFields) {
            if (schemaFields == null) {
              throw new MissingRequiredPropertyException("BlobInventoryPolicyRule", "schemaFields");
            }
            this.schemaFields = schemaFields;
            return this;
        }
        public Builder schemaFields(String... schemaFields) {
            return schemaFields(List.of(schemaFields));
        }
        @CustomType.Setter
        public Builder scope(String scope) {
            if (scope == null) {
              throw new MissingRequiredPropertyException("BlobInventoryPolicyRule", "scope");
            }
            this.scope = scope;
            return this;
        }
        @CustomType.Setter
        public Builder storageContainerName(String storageContainerName) {
            if (storageContainerName == null) {
              throw new MissingRequiredPropertyException("BlobInventoryPolicyRule", "storageContainerName");
            }
            this.storageContainerName = storageContainerName;
            return this;
        }
        public BlobInventoryPolicyRule build() {
            final var _resultValue = new BlobInventoryPolicyRule();
            _resultValue.filter = filter;
            _resultValue.format = format;
            _resultValue.name = name;
            _resultValue.schedule = schedule;
            _resultValue.schemaFields = schemaFields;
            _resultValue.scope = scope;
            _resultValue.storageContainerName = storageContainerName;
            return _resultValue;
        }
    }
}
