// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.dashboard.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GrafanaSmtp {
    /**
     * @return Whether to enable the smtp setting of the Grafana instance. Defaults to `false`.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return Address used when sending emails.
     * 
     */
    private String fromAddress;
    /**
     * @return Name used when sending emails. Defaults to `Azure Managed Grafana Notification`.
     * 
     */
    private @Nullable String fromName;
    /**
     * @return SMTP server hostname with port, e.g. test.email.net:587
     * 
     */
    private String host;
    /**
     * @return Password of SMTP authentication.
     * 
     */
    private String password;
    /**
     * @return Whether to use TLS when connecting to SMTP server. Possible values are `OpportunisticStartTLS`, `NoStartTLS`, `MandatoryStartTLS`.
     * 
     */
    private String startTlsPolicy;
    /**
     * @return User of SMTP authentication.
     * 
     */
    private String user;
    /**
     * @return Whether verify SSL for SMTP server. Defaults to `false`.
     * 
     */
    private @Nullable Boolean verificationSkipEnabled;

    private GrafanaSmtp() {}
    /**
     * @return Whether to enable the smtp setting of the Grafana instance. Defaults to `false`.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return Address used when sending emails.
     * 
     */
    public String fromAddress() {
        return this.fromAddress;
    }
    /**
     * @return Name used when sending emails. Defaults to `Azure Managed Grafana Notification`.
     * 
     */
    public Optional<String> fromName() {
        return Optional.ofNullable(this.fromName);
    }
    /**
     * @return SMTP server hostname with port, e.g. test.email.net:587
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return Password of SMTP authentication.
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return Whether to use TLS when connecting to SMTP server. Possible values are `OpportunisticStartTLS`, `NoStartTLS`, `MandatoryStartTLS`.
     * 
     */
    public String startTlsPolicy() {
        return this.startTlsPolicy;
    }
    /**
     * @return User of SMTP authentication.
     * 
     */
    public String user() {
        return this.user;
    }
    /**
     * @return Whether verify SSL for SMTP server. Defaults to `false`.
     * 
     */
    public Optional<Boolean> verificationSkipEnabled() {
        return Optional.ofNullable(this.verificationSkipEnabled);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GrafanaSmtp defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean enabled;
        private String fromAddress;
        private @Nullable String fromName;
        private String host;
        private String password;
        private String startTlsPolicy;
        private String user;
        private @Nullable Boolean verificationSkipEnabled;
        public Builder() {}
        public Builder(GrafanaSmtp defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enabled = defaults.enabled;
    	      this.fromAddress = defaults.fromAddress;
    	      this.fromName = defaults.fromName;
    	      this.host = defaults.host;
    	      this.password = defaults.password;
    	      this.startTlsPolicy = defaults.startTlsPolicy;
    	      this.user = defaults.user;
    	      this.verificationSkipEnabled = defaults.verificationSkipEnabled;
        }

        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder fromAddress(String fromAddress) {
            if (fromAddress == null) {
              throw new MissingRequiredPropertyException("GrafanaSmtp", "fromAddress");
            }
            this.fromAddress = fromAddress;
            return this;
        }
        @CustomType.Setter
        public Builder fromName(@Nullable String fromName) {

            this.fromName = fromName;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("GrafanaSmtp", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("GrafanaSmtp", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder startTlsPolicy(String startTlsPolicy) {
            if (startTlsPolicy == null) {
              throw new MissingRequiredPropertyException("GrafanaSmtp", "startTlsPolicy");
            }
            this.startTlsPolicy = startTlsPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder user(String user) {
            if (user == null) {
              throw new MissingRequiredPropertyException("GrafanaSmtp", "user");
            }
            this.user = user;
            return this;
        }
        @CustomType.Setter
        public Builder verificationSkipEnabled(@Nullable Boolean verificationSkipEnabled) {

            this.verificationSkipEnabled = verificationSkipEnabled;
            return this;
        }
        public GrafanaSmtp build() {
            final var _resultValue = new GrafanaSmtp();
            _resultValue.enabled = enabled;
            _resultValue.fromAddress = fromAddress;
            _resultValue.fromName = fromName;
            _resultValue.host = host;
            _resultValue.password = password;
            _resultValue.startTlsPolicy = startTlsPolicy;
            _resultValue.user = user;
            _resultValue.verificationSkipEnabled = verificationSkipEnabled;
            return _resultValue;
        }
    }
}
