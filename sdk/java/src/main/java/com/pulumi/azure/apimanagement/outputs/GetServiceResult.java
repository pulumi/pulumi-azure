// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.apimanagement.outputs;

import com.pulumi.azure.apimanagement.outputs.GetServiceAdditionalLocation;
import com.pulumi.azure.apimanagement.outputs.GetServiceHostnameConfiguration;
import com.pulumi.azure.apimanagement.outputs.GetServiceIdentity;
import com.pulumi.azure.apimanagement.outputs.GetServiceTenantAccess;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetServiceResult {
    /**
     * @return Zero or more `additional_location` blocks as defined below
     * 
     */
    private List<GetServiceAdditionalLocation> additionalLocations;
    /**
     * @return The URL for the Developer Portal associated with this API Management service.
     * 
     */
    private String developerPortalUrl;
    /**
     * @return Gateway URL of the API Management service in the Region.
     * 
     */
    private String gatewayRegionalUrl;
    /**
     * @return The URL for the API Management Service&#39;s Gateway.
     * 
     */
    private String gatewayUrl;
    /**
     * @return A `hostname_configuration` block as defined below.
     * 
     */
    private List<GetServiceHostnameConfiguration> hostnameConfigurations;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return (Optional) An `identity` block as defined below.
     * 
     */
    private List<GetServiceIdentity> identities;
    /**
     * @return The location name of the additional region among Azure Data center regions.
     * 
     */
    private String location;
    /**
     * @return The URL for the Management API.
     * 
     */
    private String managementApiUrl;
    /**
     * @return Specifies the plan&#39;s pricing tier.
     * 
     */
    private String name;
    /**
     * @return The email address from which the notification will be sent.
     * 
     */
    private String notificationSenderEmail;
    /**
     * @return The URL of the Publisher Portal.
     * 
     */
    private String portalUrl;
    /**
     * @return Private IP addresses of the API Management service in the additional location, for instances using virtual network mode.
     * 
     */
    private List<String> privateIpAddresses;
    /**
     * @return ID of the standard SKU IPv4 Public IP. Available only for Premium SKU deployed in a virtual network.
     * 
     */
    private String publicIpAddressId;
    /**
     * @return Public Static Load Balanced IP addresses of the API Management service in the additional location. Available only for Basic, Standard and Premium SKU.
     * 
     */
    private List<String> publicIpAddresses;
    /**
     * @return The email of Publisher/Company of the API Management Service.
     * 
     */
    private String publisherEmail;
    /**
     * @return The name of the Publisher/Company of the API Management Service.
     * 
     */
    private String publisherName;
    private String resourceGroupName;
    /**
     * @return The SCM (Source Code Management) endpoint.
     * 
     */
    private String scmUrl;
    private String skuName;
    /**
     * @return A mapping of tags assigned to the resource.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return A `tenant_access` block as defined below.
     * 
     */
    private List<GetServiceTenantAccess> tenantAccesses;

    private GetServiceResult() {}
    /**
     * @return Zero or more `additional_location` blocks as defined below
     * 
     */
    public List<GetServiceAdditionalLocation> additionalLocations() {
        return this.additionalLocations;
    }
    /**
     * @return The URL for the Developer Portal associated with this API Management service.
     * 
     */
    public String developerPortalUrl() {
        return this.developerPortalUrl;
    }
    /**
     * @return Gateway URL of the API Management service in the Region.
     * 
     */
    public String gatewayRegionalUrl() {
        return this.gatewayRegionalUrl;
    }
    /**
     * @return The URL for the API Management Service&#39;s Gateway.
     * 
     */
    public String gatewayUrl() {
        return this.gatewayUrl;
    }
    /**
     * @return A `hostname_configuration` block as defined below.
     * 
     */
    public List<GetServiceHostnameConfiguration> hostnameConfigurations() {
        return this.hostnameConfigurations;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (Optional) An `identity` block as defined below.
     * 
     */
    public List<GetServiceIdentity> identities() {
        return this.identities;
    }
    /**
     * @return The location name of the additional region among Azure Data center regions.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The URL for the Management API.
     * 
     */
    public String managementApiUrl() {
        return this.managementApiUrl;
    }
    /**
     * @return Specifies the plan&#39;s pricing tier.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The email address from which the notification will be sent.
     * 
     */
    public String notificationSenderEmail() {
        return this.notificationSenderEmail;
    }
    /**
     * @return The URL of the Publisher Portal.
     * 
     */
    public String portalUrl() {
        return this.portalUrl;
    }
    /**
     * @return Private IP addresses of the API Management service in the additional location, for instances using virtual network mode.
     * 
     */
    public List<String> privateIpAddresses() {
        return this.privateIpAddresses;
    }
    /**
     * @return ID of the standard SKU IPv4 Public IP. Available only for Premium SKU deployed in a virtual network.
     * 
     */
    public String publicIpAddressId() {
        return this.publicIpAddressId;
    }
    /**
     * @return Public Static Load Balanced IP addresses of the API Management service in the additional location. Available only for Basic, Standard and Premium SKU.
     * 
     */
    public List<String> publicIpAddresses() {
        return this.publicIpAddresses;
    }
    /**
     * @return The email of Publisher/Company of the API Management Service.
     * 
     */
    public String publisherEmail() {
        return this.publisherEmail;
    }
    /**
     * @return The name of the Publisher/Company of the API Management Service.
     * 
     */
    public String publisherName() {
        return this.publisherName;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The SCM (Source Code Management) endpoint.
     * 
     */
    public String scmUrl() {
        return this.scmUrl;
    }
    public String skuName() {
        return this.skuName;
    }
    /**
     * @return A mapping of tags assigned to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return A `tenant_access` block as defined below.
     * 
     */
    public List<GetServiceTenantAccess> tenantAccesses() {
        return this.tenantAccesses;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetServiceAdditionalLocation> additionalLocations;
        private String developerPortalUrl;
        private String gatewayRegionalUrl;
        private String gatewayUrl;
        private List<GetServiceHostnameConfiguration> hostnameConfigurations;
        private String id;
        private List<GetServiceIdentity> identities;
        private String location;
        private String managementApiUrl;
        private String name;
        private String notificationSenderEmail;
        private String portalUrl;
        private List<String> privateIpAddresses;
        private String publicIpAddressId;
        private List<String> publicIpAddresses;
        private String publisherEmail;
        private String publisherName;
        private String resourceGroupName;
        private String scmUrl;
        private String skuName;
        private @Nullable Map<String,String> tags;
        private List<GetServiceTenantAccess> tenantAccesses;
        public Builder() {}
        public Builder(GetServiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalLocations = defaults.additionalLocations;
    	      this.developerPortalUrl = defaults.developerPortalUrl;
    	      this.gatewayRegionalUrl = defaults.gatewayRegionalUrl;
    	      this.gatewayUrl = defaults.gatewayUrl;
    	      this.hostnameConfigurations = defaults.hostnameConfigurations;
    	      this.id = defaults.id;
    	      this.identities = defaults.identities;
    	      this.location = defaults.location;
    	      this.managementApiUrl = defaults.managementApiUrl;
    	      this.name = defaults.name;
    	      this.notificationSenderEmail = defaults.notificationSenderEmail;
    	      this.portalUrl = defaults.portalUrl;
    	      this.privateIpAddresses = defaults.privateIpAddresses;
    	      this.publicIpAddressId = defaults.publicIpAddressId;
    	      this.publicIpAddresses = defaults.publicIpAddresses;
    	      this.publisherEmail = defaults.publisherEmail;
    	      this.publisherName = defaults.publisherName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.scmUrl = defaults.scmUrl;
    	      this.skuName = defaults.skuName;
    	      this.tags = defaults.tags;
    	      this.tenantAccesses = defaults.tenantAccesses;
        }

        @CustomType.Setter
        public Builder additionalLocations(List<GetServiceAdditionalLocation> additionalLocations) {
            if (additionalLocations == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "additionalLocations");
            }
            this.additionalLocations = additionalLocations;
            return this;
        }
        public Builder additionalLocations(GetServiceAdditionalLocation... additionalLocations) {
            return additionalLocations(List.of(additionalLocations));
        }
        @CustomType.Setter
        public Builder developerPortalUrl(String developerPortalUrl) {
            if (developerPortalUrl == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "developerPortalUrl");
            }
            this.developerPortalUrl = developerPortalUrl;
            return this;
        }
        @CustomType.Setter
        public Builder gatewayRegionalUrl(String gatewayRegionalUrl) {
            if (gatewayRegionalUrl == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "gatewayRegionalUrl");
            }
            this.gatewayRegionalUrl = gatewayRegionalUrl;
            return this;
        }
        @CustomType.Setter
        public Builder gatewayUrl(String gatewayUrl) {
            if (gatewayUrl == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "gatewayUrl");
            }
            this.gatewayUrl = gatewayUrl;
            return this;
        }
        @CustomType.Setter
        public Builder hostnameConfigurations(List<GetServiceHostnameConfiguration> hostnameConfigurations) {
            if (hostnameConfigurations == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "hostnameConfigurations");
            }
            this.hostnameConfigurations = hostnameConfigurations;
            return this;
        }
        public Builder hostnameConfigurations(GetServiceHostnameConfiguration... hostnameConfigurations) {
            return hostnameConfigurations(List.of(hostnameConfigurations));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identities(List<GetServiceIdentity> identities) {
            if (identities == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "identities");
            }
            this.identities = identities;
            return this;
        }
        public Builder identities(GetServiceIdentity... identities) {
            return identities(List.of(identities));
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder managementApiUrl(String managementApiUrl) {
            if (managementApiUrl == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "managementApiUrl");
            }
            this.managementApiUrl = managementApiUrl;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder notificationSenderEmail(String notificationSenderEmail) {
            if (notificationSenderEmail == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "notificationSenderEmail");
            }
            this.notificationSenderEmail = notificationSenderEmail;
            return this;
        }
        @CustomType.Setter
        public Builder portalUrl(String portalUrl) {
            if (portalUrl == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "portalUrl");
            }
            this.portalUrl = portalUrl;
            return this;
        }
        @CustomType.Setter
        public Builder privateIpAddresses(List<String> privateIpAddresses) {
            if (privateIpAddresses == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "privateIpAddresses");
            }
            this.privateIpAddresses = privateIpAddresses;
            return this;
        }
        public Builder privateIpAddresses(String... privateIpAddresses) {
            return privateIpAddresses(List.of(privateIpAddresses));
        }
        @CustomType.Setter
        public Builder publicIpAddressId(String publicIpAddressId) {
            if (publicIpAddressId == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "publicIpAddressId");
            }
            this.publicIpAddressId = publicIpAddressId;
            return this;
        }
        @CustomType.Setter
        public Builder publicIpAddresses(List<String> publicIpAddresses) {
            if (publicIpAddresses == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "publicIpAddresses");
            }
            this.publicIpAddresses = publicIpAddresses;
            return this;
        }
        public Builder publicIpAddresses(String... publicIpAddresses) {
            return publicIpAddresses(List.of(publicIpAddresses));
        }
        @CustomType.Setter
        public Builder publisherEmail(String publisherEmail) {
            if (publisherEmail == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "publisherEmail");
            }
            this.publisherEmail = publisherEmail;
            return this;
        }
        @CustomType.Setter
        public Builder publisherName(String publisherName) {
            if (publisherName == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "publisherName");
            }
            this.publisherName = publisherName;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder scmUrl(String scmUrl) {
            if (scmUrl == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "scmUrl");
            }
            this.scmUrl = scmUrl;
            return this;
        }
        @CustomType.Setter
        public Builder skuName(String skuName) {
            if (skuName == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "skuName");
            }
            this.skuName = skuName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {

            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder tenantAccesses(List<GetServiceTenantAccess> tenantAccesses) {
            if (tenantAccesses == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "tenantAccesses");
            }
            this.tenantAccesses = tenantAccesses;
            return this;
        }
        public Builder tenantAccesses(GetServiceTenantAccess... tenantAccesses) {
            return tenantAccesses(List.of(tenantAccesses));
        }
        public GetServiceResult build() {
            final var _resultValue = new GetServiceResult();
            _resultValue.additionalLocations = additionalLocations;
            _resultValue.developerPortalUrl = developerPortalUrl;
            _resultValue.gatewayRegionalUrl = gatewayRegionalUrl;
            _resultValue.gatewayUrl = gatewayUrl;
            _resultValue.hostnameConfigurations = hostnameConfigurations;
            _resultValue.id = id;
            _resultValue.identities = identities;
            _resultValue.location = location;
            _resultValue.managementApiUrl = managementApiUrl;
            _resultValue.name = name;
            _resultValue.notificationSenderEmail = notificationSenderEmail;
            _resultValue.portalUrl = portalUrl;
            _resultValue.privateIpAddresses = privateIpAddresses;
            _resultValue.publicIpAddressId = publicIpAddressId;
            _resultValue.publicIpAddresses = publicIpAddresses;
            _resultValue.publisherEmail = publisherEmail;
            _resultValue.publisherName = publisherName;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.scmUrl = scmUrl;
            _resultValue.skuName = skuName;
            _resultValue.tags = tags;
            _resultValue.tenantAccesses = tenantAccesses;
            return _resultValue;
        }
    }
}
