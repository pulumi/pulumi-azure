// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.nginx.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class ConfigurationConfigFileArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigurationConfigFileArgs Empty = new ConfigurationConfigFileArgs();

    /**
     * Specifies the base-64 encoded contents of this config file.
     * 
     */
    @Import(name="content", required=true)
    private Output<String> content;

    /**
     * @return Specifies the base-64 encoded contents of this config file.
     * 
     */
    public Output<String> content() {
        return this.content;
    }

    /**
     * Specify the path of this config file.
     * 
     */
    @Import(name="virtualPath", required=true)
    private Output<String> virtualPath;

    /**
     * @return Specify the path of this config file.
     * 
     */
    public Output<String> virtualPath() {
        return this.virtualPath;
    }

    private ConfigurationConfigFileArgs() {}

    private ConfigurationConfigFileArgs(ConfigurationConfigFileArgs $) {
        this.content = $.content;
        this.virtualPath = $.virtualPath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigurationConfigFileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigurationConfigFileArgs $;

        public Builder() {
            $ = new ConfigurationConfigFileArgs();
        }

        public Builder(ConfigurationConfigFileArgs defaults) {
            $ = new ConfigurationConfigFileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param content Specifies the base-64 encoded contents of this config file.
         * 
         * @return builder
         * 
         */
        public Builder content(Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content Specifies the base-64 encoded contents of this config file.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param virtualPath Specify the path of this config file.
         * 
         * @return builder
         * 
         */
        public Builder virtualPath(Output<String> virtualPath) {
            $.virtualPath = virtualPath;
            return this;
        }

        /**
         * @param virtualPath Specify the path of this config file.
         * 
         * @return builder
         * 
         */
        public Builder virtualPath(String virtualPath) {
            return virtualPath(Output.of(virtualPath));
        }

        public ConfigurationConfigFileArgs build() {
            if ($.content == null) {
                throw new MissingRequiredPropertyException("ConfigurationConfigFileArgs", "content");
            }
            if ($.virtualPath == null) {
                throw new MissingRequiredPropertyException("ConfigurationConfigFileArgs", "virtualPath");
            }
            return $;
        }
    }

}
