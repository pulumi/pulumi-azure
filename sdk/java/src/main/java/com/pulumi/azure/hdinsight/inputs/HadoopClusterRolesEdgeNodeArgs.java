// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.hdinsight.inputs;

import com.pulumi.azure.hdinsight.inputs.HadoopClusterRolesEdgeNodeHttpsEndpointArgs;
import com.pulumi.azure.hdinsight.inputs.HadoopClusterRolesEdgeNodeInstallScriptActionArgs;
import com.pulumi.azure.hdinsight.inputs.HadoopClusterRolesEdgeNodeUninstallScriptActionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HadoopClusterRolesEdgeNodeArgs extends com.pulumi.resources.ResourceArgs {

    public static final HadoopClusterRolesEdgeNodeArgs Empty = new HadoopClusterRolesEdgeNodeArgs();

    /**
     * The HTTPS Connectivity Endpoint for this HDInsight Hadoop Cluster. One or more `https_endpoints` blocks as defined below.
     * 
     */
    @Import(name="httpsEndpoints")
    private @Nullable Output<List<HadoopClusterRolesEdgeNodeHttpsEndpointArgs>> httpsEndpoints;

    /**
     * @return The HTTPS Connectivity Endpoint for this HDInsight Hadoop Cluster. One or more `https_endpoints` blocks as defined below.
     * 
     */
    public Optional<Output<List<HadoopClusterRolesEdgeNodeHttpsEndpointArgs>>> httpsEndpoints() {
        return Optional.ofNullable(this.httpsEndpoints);
    }

    /**
     * A `install_script_action` block as defined below.
     * 
     */
    @Import(name="installScriptActions", required=true)
    private Output<List<HadoopClusterRolesEdgeNodeInstallScriptActionArgs>> installScriptActions;

    /**
     * @return A `install_script_action` block as defined below.
     * 
     */
    public Output<List<HadoopClusterRolesEdgeNodeInstallScriptActionArgs>> installScriptActions() {
        return this.installScriptActions;
    }

    /**
     * The number of instances which should be run for the Worker Nodes.
     * 
     */
    @Import(name="targetInstanceCount", required=true)
    private Output<Integer> targetInstanceCount;

    /**
     * @return The number of instances which should be run for the Worker Nodes.
     * 
     */
    public Output<Integer> targetInstanceCount() {
        return this.targetInstanceCount;
    }

    /**
     * A `uninstall_script_actions` block as defined below.
     * 
     */
    @Import(name="uninstallScriptActions")
    private @Nullable Output<List<HadoopClusterRolesEdgeNodeUninstallScriptActionArgs>> uninstallScriptActions;

    /**
     * @return A `uninstall_script_actions` block as defined below.
     * 
     */
    public Optional<Output<List<HadoopClusterRolesEdgeNodeUninstallScriptActionArgs>>> uninstallScriptActions() {
        return Optional.ofNullable(this.uninstallScriptActions);
    }

    /**
     * The Size of the Virtual Machine which should be used as the Edge Nodes. Possible values are `ExtraSmall`, `Small`, `Medium`, `Large`, `ExtraLarge`, `A5`, `A6`, `A7`, `A8`, `A9`, `A10`, `A11`, `Standard_A1_V2`, `Standard_A2_V2`, `Standard_A2m_V2`, `Standard_A3`, `Standard_A4_V2`, `Standard_A4m_V2`, `Standard_A8_V2`, `Standard_A8m_V2`, `Standard_D1`, `Standard_D2`, `Standard_D3`, `Standard_D4`, `Standard_D11`, `Standard_D12`, `Standard_D13`, `Standard_D14`, `Standard_D1_V2`, `Standard_D2_V2`, `Standard_D3_V2`, `Standard_D4_V2`, `Standard_D5_V2`, `Standard_D11_V2`, `Standard_D12_V2`, `Standard_D13_V2`, `Standard_D14_V2`, `Standard_DS1_V2`, `Standard_DS2_V2`, `Standard_DS3_V2`, `Standard_DS4_V2`, `Standard_DS5_V2`, `Standard_DS11_V2`, `Standard_DS12_V2`, `Standard_DS13_V2`, `Standard_DS14_V2`, `Standard_E2_V3`, `Standard_E4_V3`, `Standard_E8_V3`, `Standard_E16_V3`, `Standard_E20_V3`, `Standard_E32_V3`, `Standard_E64_V3`, `Standard_E64i_V3`, `Standard_E2s_V3`, `Standard_E4s_V3`, `Standard_E8s_V3`, `Standard_E16s_V3`, `Standard_E20s_V3`, `Standard_E32s_V3`, `Standard_E64s_V3`, `Standard_E64is_V3`, `Standard_D2a_V4`, `Standard_D4a_V4`, `Standard_D8a_V4`, `Standard_D16a_V4`, `Standard_D32a_V4`, `Standard_D48a_V4`, `Standard_D64a_V4`, `Standard_D96a_V4`, `Standard_E2a_V4`, `Standard_E4a_V4`, `Standard_E8a_V4`, `Standard_E16a_V4`, `Standard_E20a_V4`, `Standard_E32a_V4`, `Standard_E48a_V4`, `Standard_E64a_V4`, `Standard_E96a_V4`, `Standard_G1`, `Standard_G2`, `Standard_G3`, `Standard_G4`, `Standard_G5`, `Standard_F2s_V2`, `Standard_F4s_V2`, `Standard_F8s_V2`, `Standard_F16s_V2`, `Standard_F32s_V2`, `Standard_F64s_V2`, `Standard_F72s_V2`, `Standard_GS1`, `Standard_GS2`, `Standard_GS3`, `Standard_GS4`, `Standard_GS5` and `Standard_NC24`.
     * 
     */
    @Import(name="vmSize", required=true)
    private Output<String> vmSize;

    /**
     * @return The Size of the Virtual Machine which should be used as the Edge Nodes. Possible values are `ExtraSmall`, `Small`, `Medium`, `Large`, `ExtraLarge`, `A5`, `A6`, `A7`, `A8`, `A9`, `A10`, `A11`, `Standard_A1_V2`, `Standard_A2_V2`, `Standard_A2m_V2`, `Standard_A3`, `Standard_A4_V2`, `Standard_A4m_V2`, `Standard_A8_V2`, `Standard_A8m_V2`, `Standard_D1`, `Standard_D2`, `Standard_D3`, `Standard_D4`, `Standard_D11`, `Standard_D12`, `Standard_D13`, `Standard_D14`, `Standard_D1_V2`, `Standard_D2_V2`, `Standard_D3_V2`, `Standard_D4_V2`, `Standard_D5_V2`, `Standard_D11_V2`, `Standard_D12_V2`, `Standard_D13_V2`, `Standard_D14_V2`, `Standard_DS1_V2`, `Standard_DS2_V2`, `Standard_DS3_V2`, `Standard_DS4_V2`, `Standard_DS5_V2`, `Standard_DS11_V2`, `Standard_DS12_V2`, `Standard_DS13_V2`, `Standard_DS14_V2`, `Standard_E2_V3`, `Standard_E4_V3`, `Standard_E8_V3`, `Standard_E16_V3`, `Standard_E20_V3`, `Standard_E32_V3`, `Standard_E64_V3`, `Standard_E64i_V3`, `Standard_E2s_V3`, `Standard_E4s_V3`, `Standard_E8s_V3`, `Standard_E16s_V3`, `Standard_E20s_V3`, `Standard_E32s_V3`, `Standard_E64s_V3`, `Standard_E64is_V3`, `Standard_D2a_V4`, `Standard_D4a_V4`, `Standard_D8a_V4`, `Standard_D16a_V4`, `Standard_D32a_V4`, `Standard_D48a_V4`, `Standard_D64a_V4`, `Standard_D96a_V4`, `Standard_E2a_V4`, `Standard_E4a_V4`, `Standard_E8a_V4`, `Standard_E16a_V4`, `Standard_E20a_V4`, `Standard_E32a_V4`, `Standard_E48a_V4`, `Standard_E64a_V4`, `Standard_E96a_V4`, `Standard_G1`, `Standard_G2`, `Standard_G3`, `Standard_G4`, `Standard_G5`, `Standard_F2s_V2`, `Standard_F4s_V2`, `Standard_F8s_V2`, `Standard_F16s_V2`, `Standard_F32s_V2`, `Standard_F64s_V2`, `Standard_F72s_V2`, `Standard_GS1`, `Standard_GS2`, `Standard_GS3`, `Standard_GS4`, `Standard_GS5` and `Standard_NC24`.
     * 
     */
    public Output<String> vmSize() {
        return this.vmSize;
    }

    private HadoopClusterRolesEdgeNodeArgs() {}

    private HadoopClusterRolesEdgeNodeArgs(HadoopClusterRolesEdgeNodeArgs $) {
        this.httpsEndpoints = $.httpsEndpoints;
        this.installScriptActions = $.installScriptActions;
        this.targetInstanceCount = $.targetInstanceCount;
        this.uninstallScriptActions = $.uninstallScriptActions;
        this.vmSize = $.vmSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HadoopClusterRolesEdgeNodeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HadoopClusterRolesEdgeNodeArgs $;

        public Builder() {
            $ = new HadoopClusterRolesEdgeNodeArgs();
        }

        public Builder(HadoopClusterRolesEdgeNodeArgs defaults) {
            $ = new HadoopClusterRolesEdgeNodeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param httpsEndpoints The HTTPS Connectivity Endpoint for this HDInsight Hadoop Cluster. One or more `https_endpoints` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder httpsEndpoints(@Nullable Output<List<HadoopClusterRolesEdgeNodeHttpsEndpointArgs>> httpsEndpoints) {
            $.httpsEndpoints = httpsEndpoints;
            return this;
        }

        /**
         * @param httpsEndpoints The HTTPS Connectivity Endpoint for this HDInsight Hadoop Cluster. One or more `https_endpoints` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder httpsEndpoints(List<HadoopClusterRolesEdgeNodeHttpsEndpointArgs> httpsEndpoints) {
            return httpsEndpoints(Output.of(httpsEndpoints));
        }

        /**
         * @param httpsEndpoints The HTTPS Connectivity Endpoint for this HDInsight Hadoop Cluster. One or more `https_endpoints` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder httpsEndpoints(HadoopClusterRolesEdgeNodeHttpsEndpointArgs... httpsEndpoints) {
            return httpsEndpoints(List.of(httpsEndpoints));
        }

        /**
         * @param installScriptActions A `install_script_action` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder installScriptActions(Output<List<HadoopClusterRolesEdgeNodeInstallScriptActionArgs>> installScriptActions) {
            $.installScriptActions = installScriptActions;
            return this;
        }

        /**
         * @param installScriptActions A `install_script_action` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder installScriptActions(List<HadoopClusterRolesEdgeNodeInstallScriptActionArgs> installScriptActions) {
            return installScriptActions(Output.of(installScriptActions));
        }

        /**
         * @param installScriptActions A `install_script_action` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder installScriptActions(HadoopClusterRolesEdgeNodeInstallScriptActionArgs... installScriptActions) {
            return installScriptActions(List.of(installScriptActions));
        }

        /**
         * @param targetInstanceCount The number of instances which should be run for the Worker Nodes.
         * 
         * @return builder
         * 
         */
        public Builder targetInstanceCount(Output<Integer> targetInstanceCount) {
            $.targetInstanceCount = targetInstanceCount;
            return this;
        }

        /**
         * @param targetInstanceCount The number of instances which should be run for the Worker Nodes.
         * 
         * @return builder
         * 
         */
        public Builder targetInstanceCount(Integer targetInstanceCount) {
            return targetInstanceCount(Output.of(targetInstanceCount));
        }

        /**
         * @param uninstallScriptActions A `uninstall_script_actions` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder uninstallScriptActions(@Nullable Output<List<HadoopClusterRolesEdgeNodeUninstallScriptActionArgs>> uninstallScriptActions) {
            $.uninstallScriptActions = uninstallScriptActions;
            return this;
        }

        /**
         * @param uninstallScriptActions A `uninstall_script_actions` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder uninstallScriptActions(List<HadoopClusterRolesEdgeNodeUninstallScriptActionArgs> uninstallScriptActions) {
            return uninstallScriptActions(Output.of(uninstallScriptActions));
        }

        /**
         * @param uninstallScriptActions A `uninstall_script_actions` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder uninstallScriptActions(HadoopClusterRolesEdgeNodeUninstallScriptActionArgs... uninstallScriptActions) {
            return uninstallScriptActions(List.of(uninstallScriptActions));
        }

        /**
         * @param vmSize The Size of the Virtual Machine which should be used as the Edge Nodes. Possible values are `ExtraSmall`, `Small`, `Medium`, `Large`, `ExtraLarge`, `A5`, `A6`, `A7`, `A8`, `A9`, `A10`, `A11`, `Standard_A1_V2`, `Standard_A2_V2`, `Standard_A2m_V2`, `Standard_A3`, `Standard_A4_V2`, `Standard_A4m_V2`, `Standard_A8_V2`, `Standard_A8m_V2`, `Standard_D1`, `Standard_D2`, `Standard_D3`, `Standard_D4`, `Standard_D11`, `Standard_D12`, `Standard_D13`, `Standard_D14`, `Standard_D1_V2`, `Standard_D2_V2`, `Standard_D3_V2`, `Standard_D4_V2`, `Standard_D5_V2`, `Standard_D11_V2`, `Standard_D12_V2`, `Standard_D13_V2`, `Standard_D14_V2`, `Standard_DS1_V2`, `Standard_DS2_V2`, `Standard_DS3_V2`, `Standard_DS4_V2`, `Standard_DS5_V2`, `Standard_DS11_V2`, `Standard_DS12_V2`, `Standard_DS13_V2`, `Standard_DS14_V2`, `Standard_E2_V3`, `Standard_E4_V3`, `Standard_E8_V3`, `Standard_E16_V3`, `Standard_E20_V3`, `Standard_E32_V3`, `Standard_E64_V3`, `Standard_E64i_V3`, `Standard_E2s_V3`, `Standard_E4s_V3`, `Standard_E8s_V3`, `Standard_E16s_V3`, `Standard_E20s_V3`, `Standard_E32s_V3`, `Standard_E64s_V3`, `Standard_E64is_V3`, `Standard_D2a_V4`, `Standard_D4a_V4`, `Standard_D8a_V4`, `Standard_D16a_V4`, `Standard_D32a_V4`, `Standard_D48a_V4`, `Standard_D64a_V4`, `Standard_D96a_V4`, `Standard_E2a_V4`, `Standard_E4a_V4`, `Standard_E8a_V4`, `Standard_E16a_V4`, `Standard_E20a_V4`, `Standard_E32a_V4`, `Standard_E48a_V4`, `Standard_E64a_V4`, `Standard_E96a_V4`, `Standard_G1`, `Standard_G2`, `Standard_G3`, `Standard_G4`, `Standard_G5`, `Standard_F2s_V2`, `Standard_F4s_V2`, `Standard_F8s_V2`, `Standard_F16s_V2`, `Standard_F32s_V2`, `Standard_F64s_V2`, `Standard_F72s_V2`, `Standard_GS1`, `Standard_GS2`, `Standard_GS3`, `Standard_GS4`, `Standard_GS5` and `Standard_NC24`.
         * 
         * @return builder
         * 
         */
        public Builder vmSize(Output<String> vmSize) {
            $.vmSize = vmSize;
            return this;
        }

        /**
         * @param vmSize The Size of the Virtual Machine which should be used as the Edge Nodes. Possible values are `ExtraSmall`, `Small`, `Medium`, `Large`, `ExtraLarge`, `A5`, `A6`, `A7`, `A8`, `A9`, `A10`, `A11`, `Standard_A1_V2`, `Standard_A2_V2`, `Standard_A2m_V2`, `Standard_A3`, `Standard_A4_V2`, `Standard_A4m_V2`, `Standard_A8_V2`, `Standard_A8m_V2`, `Standard_D1`, `Standard_D2`, `Standard_D3`, `Standard_D4`, `Standard_D11`, `Standard_D12`, `Standard_D13`, `Standard_D14`, `Standard_D1_V2`, `Standard_D2_V2`, `Standard_D3_V2`, `Standard_D4_V2`, `Standard_D5_V2`, `Standard_D11_V2`, `Standard_D12_V2`, `Standard_D13_V2`, `Standard_D14_V2`, `Standard_DS1_V2`, `Standard_DS2_V2`, `Standard_DS3_V2`, `Standard_DS4_V2`, `Standard_DS5_V2`, `Standard_DS11_V2`, `Standard_DS12_V2`, `Standard_DS13_V2`, `Standard_DS14_V2`, `Standard_E2_V3`, `Standard_E4_V3`, `Standard_E8_V3`, `Standard_E16_V3`, `Standard_E20_V3`, `Standard_E32_V3`, `Standard_E64_V3`, `Standard_E64i_V3`, `Standard_E2s_V3`, `Standard_E4s_V3`, `Standard_E8s_V3`, `Standard_E16s_V3`, `Standard_E20s_V3`, `Standard_E32s_V3`, `Standard_E64s_V3`, `Standard_E64is_V3`, `Standard_D2a_V4`, `Standard_D4a_V4`, `Standard_D8a_V4`, `Standard_D16a_V4`, `Standard_D32a_V4`, `Standard_D48a_V4`, `Standard_D64a_V4`, `Standard_D96a_V4`, `Standard_E2a_V4`, `Standard_E4a_V4`, `Standard_E8a_V4`, `Standard_E16a_V4`, `Standard_E20a_V4`, `Standard_E32a_V4`, `Standard_E48a_V4`, `Standard_E64a_V4`, `Standard_E96a_V4`, `Standard_G1`, `Standard_G2`, `Standard_G3`, `Standard_G4`, `Standard_G5`, `Standard_F2s_V2`, `Standard_F4s_V2`, `Standard_F8s_V2`, `Standard_F16s_V2`, `Standard_F32s_V2`, `Standard_F64s_V2`, `Standard_F72s_V2`, `Standard_GS1`, `Standard_GS2`, `Standard_GS3`, `Standard_GS4`, `Standard_GS5` and `Standard_NC24`.
         * 
         * @return builder
         * 
         */
        public Builder vmSize(String vmSize) {
            return vmSize(Output.of(vmSize));
        }

        public HadoopClusterRolesEdgeNodeArgs build() {
            if ($.installScriptActions == null) {
                throw new MissingRequiredPropertyException("HadoopClusterRolesEdgeNodeArgs", "installScriptActions");
            }
            if ($.targetInstanceCount == null) {
                throw new MissingRequiredPropertyException("HadoopClusterRolesEdgeNodeArgs", "targetInstanceCount");
            }
            if ($.vmSize == null) {
                throw new MissingRequiredPropertyException("HadoopClusterRolesEdgeNodeArgs", "vmSize");
            }
            return $;
        }
    }

}
