// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.pim.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetRoleManagementPolicyArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRoleManagementPolicyArgs Empty = new GetRoleManagementPolicyArgs();

    /**
     * The scoped Role Definition ID of the role for which this policy applies.
     * 
     */
    @Import(name="roleDefinitionId", required=true)
    private Output<String> roleDefinitionId;

    /**
     * @return The scoped Role Definition ID of the role for which this policy applies.
     * 
     */
    public Output<String> roleDefinitionId() {
        return this.roleDefinitionId;
    }

    /**
     * The scope to which this Role Management Policy applies. Can refer to a management group, a subscription or a resource group.
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    /**
     * @return The scope to which this Role Management Policy applies. Can refer to a management group, a subscription or a resource group.
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    private GetRoleManagementPolicyArgs() {}

    private GetRoleManagementPolicyArgs(GetRoleManagementPolicyArgs $) {
        this.roleDefinitionId = $.roleDefinitionId;
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRoleManagementPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRoleManagementPolicyArgs $;

        public Builder() {
            $ = new GetRoleManagementPolicyArgs();
        }

        public Builder(GetRoleManagementPolicyArgs defaults) {
            $ = new GetRoleManagementPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param roleDefinitionId The scoped Role Definition ID of the role for which this policy applies.
         * 
         * @return builder
         * 
         */
        public Builder roleDefinitionId(Output<String> roleDefinitionId) {
            $.roleDefinitionId = roleDefinitionId;
            return this;
        }

        /**
         * @param roleDefinitionId The scoped Role Definition ID of the role for which this policy applies.
         * 
         * @return builder
         * 
         */
        public Builder roleDefinitionId(String roleDefinitionId) {
            return roleDefinitionId(Output.of(roleDefinitionId));
        }

        /**
         * @param scope The scope to which this Role Management Policy applies. Can refer to a management group, a subscription or a resource group.
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope to which this Role Management Policy applies. Can refer to a management group, a subscription or a resource group.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public GetRoleManagementPolicyArgs build() {
            if ($.roleDefinitionId == null) {
                throw new MissingRequiredPropertyException("GetRoleManagementPolicyArgs", "roleDefinitionId");
            }
            if ($.scope == null) {
                throw new MissingRequiredPropertyException("GetRoleManagementPolicyArgs", "scope");
            }
            return $;
        }
    }

}
