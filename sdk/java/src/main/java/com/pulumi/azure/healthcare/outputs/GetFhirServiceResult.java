// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.healthcare.outputs;

import com.pulumi.azure.healthcare.outputs.GetFhirServiceAuthentication;
import com.pulumi.azure.healthcare.outputs.GetFhirServiceCor;
import com.pulumi.azure.healthcare.outputs.GetFhirServiceIdentity;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetFhirServiceResult {
    /**
     * @return The list of the access policies of the service instance.
     * 
     */
    private List<String> accessPolicyObjectIds;
    /**
     * @return The `authentication` block as defined below.
     * 
     */
    private List<GetFhirServiceAuthentication> authentications;
    /**
     * @return The name of the storage account which the operation configuration information is exported to.
     * 
     */
    private String configurationExportStorageAccountName;
    /**
     * @return The list of azure container registry settings used for convert data operation of the service instance.
     * 
     */
    private List<String> containerRegistryLoginServerUrls;
    /**
     * @return The `cors` block as defined below.
     * 
     */
    private List<GetFhirServiceCor> cors;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The `identity` block as defined below.
     * 
     */
    private List<GetFhirServiceIdentity> identities;
    /**
     * @return The kind of the Healthcare FHIR Service.
     * 
     */
    private String kind;
    /**
     * @return The Azure Region where the Healthcare FHIR Service is located.
     * 
     */
    private String location;
    private String name;
    /**
     * @return The map of tags assigned to the Healthcare FHIR Service.
     * 
     */
    private @Nullable Map<String,String> tags;
    private String workspaceId;

    private GetFhirServiceResult() {}
    /**
     * @return The list of the access policies of the service instance.
     * 
     */
    public List<String> accessPolicyObjectIds() {
        return this.accessPolicyObjectIds;
    }
    /**
     * @return The `authentication` block as defined below.
     * 
     */
    public List<GetFhirServiceAuthentication> authentications() {
        return this.authentications;
    }
    /**
     * @return The name of the storage account which the operation configuration information is exported to.
     * 
     */
    public String configurationExportStorageAccountName() {
        return this.configurationExportStorageAccountName;
    }
    /**
     * @return The list of azure container registry settings used for convert data operation of the service instance.
     * 
     */
    public List<String> containerRegistryLoginServerUrls() {
        return this.containerRegistryLoginServerUrls;
    }
    /**
     * @return The `cors` block as defined below.
     * 
     */
    public List<GetFhirServiceCor> cors() {
        return this.cors;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The `identity` block as defined below.
     * 
     */
    public List<GetFhirServiceIdentity> identities() {
        return this.identities;
    }
    /**
     * @return The kind of the Healthcare FHIR Service.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return The Azure Region where the Healthcare FHIR Service is located.
     * 
     */
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The map of tags assigned to the Healthcare FHIR Service.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    public String workspaceId() {
        return this.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFhirServiceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> accessPolicyObjectIds;
        private List<GetFhirServiceAuthentication> authentications;
        private String configurationExportStorageAccountName;
        private List<String> containerRegistryLoginServerUrls;
        private List<GetFhirServiceCor> cors;
        private String id;
        private List<GetFhirServiceIdentity> identities;
        private String kind;
        private String location;
        private String name;
        private @Nullable Map<String,String> tags;
        private String workspaceId;
        public Builder() {}
        public Builder(GetFhirServiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessPolicyObjectIds = defaults.accessPolicyObjectIds;
    	      this.authentications = defaults.authentications;
    	      this.configurationExportStorageAccountName = defaults.configurationExportStorageAccountName;
    	      this.containerRegistryLoginServerUrls = defaults.containerRegistryLoginServerUrls;
    	      this.cors = defaults.cors;
    	      this.id = defaults.id;
    	      this.identities = defaults.identities;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.tags = defaults.tags;
    	      this.workspaceId = defaults.workspaceId;
        }

        @CustomType.Setter
        public Builder accessPolicyObjectIds(List<String> accessPolicyObjectIds) {
            if (accessPolicyObjectIds == null) {
              throw new MissingRequiredPropertyException("GetFhirServiceResult", "accessPolicyObjectIds");
            }
            this.accessPolicyObjectIds = accessPolicyObjectIds;
            return this;
        }
        public Builder accessPolicyObjectIds(String... accessPolicyObjectIds) {
            return accessPolicyObjectIds(List.of(accessPolicyObjectIds));
        }
        @CustomType.Setter
        public Builder authentications(List<GetFhirServiceAuthentication> authentications) {
            if (authentications == null) {
              throw new MissingRequiredPropertyException("GetFhirServiceResult", "authentications");
            }
            this.authentications = authentications;
            return this;
        }
        public Builder authentications(GetFhirServiceAuthentication... authentications) {
            return authentications(List.of(authentications));
        }
        @CustomType.Setter
        public Builder configurationExportStorageAccountName(String configurationExportStorageAccountName) {
            if (configurationExportStorageAccountName == null) {
              throw new MissingRequiredPropertyException("GetFhirServiceResult", "configurationExportStorageAccountName");
            }
            this.configurationExportStorageAccountName = configurationExportStorageAccountName;
            return this;
        }
        @CustomType.Setter
        public Builder containerRegistryLoginServerUrls(List<String> containerRegistryLoginServerUrls) {
            if (containerRegistryLoginServerUrls == null) {
              throw new MissingRequiredPropertyException("GetFhirServiceResult", "containerRegistryLoginServerUrls");
            }
            this.containerRegistryLoginServerUrls = containerRegistryLoginServerUrls;
            return this;
        }
        public Builder containerRegistryLoginServerUrls(String... containerRegistryLoginServerUrls) {
            return containerRegistryLoginServerUrls(List.of(containerRegistryLoginServerUrls));
        }
        @CustomType.Setter
        public Builder cors(List<GetFhirServiceCor> cors) {
            if (cors == null) {
              throw new MissingRequiredPropertyException("GetFhirServiceResult", "cors");
            }
            this.cors = cors;
            return this;
        }
        public Builder cors(GetFhirServiceCor... cors) {
            return cors(List.of(cors));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetFhirServiceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identities(List<GetFhirServiceIdentity> identities) {
            if (identities == null) {
              throw new MissingRequiredPropertyException("GetFhirServiceResult", "identities");
            }
            this.identities = identities;
            return this;
        }
        public Builder identities(GetFhirServiceIdentity... identities) {
            return identities(List.of(identities));
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            if (kind == null) {
              throw new MissingRequiredPropertyException("GetFhirServiceResult", "kind");
            }
            this.kind = kind;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetFhirServiceResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetFhirServiceResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {

            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder workspaceId(String workspaceId) {
            if (workspaceId == null) {
              throw new MissingRequiredPropertyException("GetFhirServiceResult", "workspaceId");
            }
            this.workspaceId = workspaceId;
            return this;
        }
        public GetFhirServiceResult build() {
            final var _resultValue = new GetFhirServiceResult();
            _resultValue.accessPolicyObjectIds = accessPolicyObjectIds;
            _resultValue.authentications = authentications;
            _resultValue.configurationExportStorageAccountName = configurationExportStorageAccountName;
            _resultValue.containerRegistryLoginServerUrls = containerRegistryLoginServerUrls;
            _resultValue.cors = cors;
            _resultValue.id = id;
            _resultValue.identities = identities;
            _resultValue.kind = kind;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.tags = tags;
            _resultValue.workspaceId = workspaceId;
            return _resultValue;
        }
    }
}
