// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.dns.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZoneSoaRecordArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZoneSoaRecordArgs Empty = new ZoneSoaRecordArgs();

    /**
     * The email contact for the SOA record.
     * 
     */
    @Import(name="email", required=true)
    private Output<String> email;

    /**
     * @return The email contact for the SOA record.
     * 
     */
    public Output<String> email() {
        return this.email;
    }

    /**
     * The expire time for the SOA record. Defaults to `2419200`.
     * 
     */
    @Import(name="expireTime")
    private @Nullable Output<Integer> expireTime;

    /**
     * @return The expire time for the SOA record. Defaults to `2419200`.
     * 
     */
    public Optional<Output<Integer>> expireTime() {
        return Optional.ofNullable(this.expireTime);
    }

    @Import(name="fqdn")
    private @Nullable Output<String> fqdn;

    public Optional<Output<String>> fqdn() {
        return Optional.ofNullable(this.fqdn);
    }

    /**
     * The domain name of the authoritative name server for the SOA record. If not set, computed value from Azure will be used.
     * 
     */
    @Import(name="hostName")
    private @Nullable Output<String> hostName;

    /**
     * @return The domain name of the authoritative name server for the SOA record. If not set, computed value from Azure will be used.
     * 
     */
    public Optional<Output<String>> hostName() {
        return Optional.ofNullable(this.hostName);
    }

    /**
     * The minimum Time To Live for the SOA record. By convention, it is used to determine the negative caching duration. Defaults to `300`.
     * 
     */
    @Import(name="minimumTtl")
    private @Nullable Output<Integer> minimumTtl;

    /**
     * @return The minimum Time To Live for the SOA record. By convention, it is used to determine the negative caching duration. Defaults to `300`.
     * 
     */
    public Optional<Output<Integer>> minimumTtl() {
        return Optional.ofNullable(this.minimumTtl);
    }

    /**
     * The refresh time for the SOA record. Defaults to `3600`.
     * 
     */
    @Import(name="refreshTime")
    private @Nullable Output<Integer> refreshTime;

    /**
     * @return The refresh time for the SOA record. Defaults to `3600`.
     * 
     */
    public Optional<Output<Integer>> refreshTime() {
        return Optional.ofNullable(this.refreshTime);
    }

    /**
     * The retry time for the SOA record. Defaults to `300`.
     * 
     */
    @Import(name="retryTime")
    private @Nullable Output<Integer> retryTime;

    /**
     * @return The retry time for the SOA record. Defaults to `300`.
     * 
     */
    public Optional<Output<Integer>> retryTime() {
        return Optional.ofNullable(this.retryTime);
    }

    /**
     * The serial number for the SOA record. Defaults to `1`.
     * 
     */
    @Import(name="serialNumber")
    private @Nullable Output<Integer> serialNumber;

    /**
     * @return The serial number for the SOA record. Defaults to `1`.
     * 
     */
    public Optional<Output<Integer>> serialNumber() {
        return Optional.ofNullable(this.serialNumber);
    }

    /**
     * A mapping of tags to assign to the Record Set.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the Record Set.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The Time To Live of the SOA Record in seconds. Defaults to `3600`.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<Integer> ttl;

    /**
     * @return The Time To Live of the SOA Record in seconds. Defaults to `3600`.
     * 
     */
    public Optional<Output<Integer>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    private ZoneSoaRecordArgs() {}

    private ZoneSoaRecordArgs(ZoneSoaRecordArgs $) {
        this.email = $.email;
        this.expireTime = $.expireTime;
        this.fqdn = $.fqdn;
        this.hostName = $.hostName;
        this.minimumTtl = $.minimumTtl;
        this.refreshTime = $.refreshTime;
        this.retryTime = $.retryTime;
        this.serialNumber = $.serialNumber;
        this.tags = $.tags;
        this.ttl = $.ttl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZoneSoaRecordArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZoneSoaRecordArgs $;

        public Builder() {
            $ = new ZoneSoaRecordArgs();
        }

        public Builder(ZoneSoaRecordArgs defaults) {
            $ = new ZoneSoaRecordArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param email The email contact for the SOA record.
         * 
         * @return builder
         * 
         */
        public Builder email(Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email The email contact for the SOA record.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param expireTime The expire time for the SOA record. Defaults to `2419200`.
         * 
         * @return builder
         * 
         */
        public Builder expireTime(@Nullable Output<Integer> expireTime) {
            $.expireTime = expireTime;
            return this;
        }

        /**
         * @param expireTime The expire time for the SOA record. Defaults to `2419200`.
         * 
         * @return builder
         * 
         */
        public Builder expireTime(Integer expireTime) {
            return expireTime(Output.of(expireTime));
        }

        public Builder fqdn(@Nullable Output<String> fqdn) {
            $.fqdn = fqdn;
            return this;
        }

        public Builder fqdn(String fqdn) {
            return fqdn(Output.of(fqdn));
        }

        /**
         * @param hostName The domain name of the authoritative name server for the SOA record. If not set, computed value from Azure will be used.
         * 
         * @return builder
         * 
         */
        public Builder hostName(@Nullable Output<String> hostName) {
            $.hostName = hostName;
            return this;
        }

        /**
         * @param hostName The domain name of the authoritative name server for the SOA record. If not set, computed value from Azure will be used.
         * 
         * @return builder
         * 
         */
        public Builder hostName(String hostName) {
            return hostName(Output.of(hostName));
        }

        /**
         * @param minimumTtl The minimum Time To Live for the SOA record. By convention, it is used to determine the negative caching duration. Defaults to `300`.
         * 
         * @return builder
         * 
         */
        public Builder minimumTtl(@Nullable Output<Integer> minimumTtl) {
            $.minimumTtl = minimumTtl;
            return this;
        }

        /**
         * @param minimumTtl The minimum Time To Live for the SOA record. By convention, it is used to determine the negative caching duration. Defaults to `300`.
         * 
         * @return builder
         * 
         */
        public Builder minimumTtl(Integer minimumTtl) {
            return minimumTtl(Output.of(minimumTtl));
        }

        /**
         * @param refreshTime The refresh time for the SOA record. Defaults to `3600`.
         * 
         * @return builder
         * 
         */
        public Builder refreshTime(@Nullable Output<Integer> refreshTime) {
            $.refreshTime = refreshTime;
            return this;
        }

        /**
         * @param refreshTime The refresh time for the SOA record. Defaults to `3600`.
         * 
         * @return builder
         * 
         */
        public Builder refreshTime(Integer refreshTime) {
            return refreshTime(Output.of(refreshTime));
        }

        /**
         * @param retryTime The retry time for the SOA record. Defaults to `300`.
         * 
         * @return builder
         * 
         */
        public Builder retryTime(@Nullable Output<Integer> retryTime) {
            $.retryTime = retryTime;
            return this;
        }

        /**
         * @param retryTime The retry time for the SOA record. Defaults to `300`.
         * 
         * @return builder
         * 
         */
        public Builder retryTime(Integer retryTime) {
            return retryTime(Output.of(retryTime));
        }

        /**
         * @param serialNumber The serial number for the SOA record. Defaults to `1`.
         * 
         * @return builder
         * 
         */
        public Builder serialNumber(@Nullable Output<Integer> serialNumber) {
            $.serialNumber = serialNumber;
            return this;
        }

        /**
         * @param serialNumber The serial number for the SOA record. Defaults to `1`.
         * 
         * @return builder
         * 
         */
        public Builder serialNumber(Integer serialNumber) {
            return serialNumber(Output.of(serialNumber));
        }

        /**
         * @param tags A mapping of tags to assign to the Record Set.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the Record Set.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param ttl The Time To Live of the SOA Record in seconds. Defaults to `3600`.
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<Integer> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl The Time To Live of the SOA Record in seconds. Defaults to `3600`.
         * 
         * @return builder
         * 
         */
        public Builder ttl(Integer ttl) {
            return ttl(Output.of(ttl));
        }

        public ZoneSoaRecordArgs build() {
            if ($.email == null) {
                throw new MissingRequiredPropertyException("ZoneSoaRecordArgs", "email");
            }
            return $;
        }
    }

}
