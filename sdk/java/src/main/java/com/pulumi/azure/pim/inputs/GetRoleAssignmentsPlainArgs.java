// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.pim.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRoleAssignmentsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRoleAssignmentsPlainArgs Empty = new GetRoleAssignmentsPlainArgs();

    /**
     * Whether to limit the result exactly at the specified scope and not above or below it. Defaults to `false`.
     * 
     */
    @Import(name="limitAtScope")
    private @Nullable Boolean limitAtScope;

    /**
     * @return Whether to limit the result exactly at the specified scope and not above or below it. Defaults to `false`.
     * 
     */
    public Optional<Boolean> limitAtScope() {
        return Optional.ofNullable(this.limitAtScope);
    }

    /**
     * The principal ID to filter the list of Role Assignments against.
     * 
     */
    @Import(name="principalId")
    private @Nullable String principalId;

    /**
     * @return The principal ID to filter the list of Role Assignments against.
     * 
     */
    public Optional<String> principalId() {
        return Optional.ofNullable(this.principalId);
    }

    /**
     * The scope at which to list Role Assignments.
     * 
     */
    @Import(name="scope", required=true)
    private String scope;

    /**
     * @return The scope at which to list Role Assignments.
     * 
     */
    public String scope() {
        return this.scope;
    }

    /**
     * The tenant ID for cross-tenant requests.
     * 
     */
    @Import(name="tenantId")
    private @Nullable String tenantId;

    /**
     * @return The tenant ID for cross-tenant requests.
     * 
     */
    public Optional<String> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    private GetRoleAssignmentsPlainArgs() {}

    private GetRoleAssignmentsPlainArgs(GetRoleAssignmentsPlainArgs $) {
        this.limitAtScope = $.limitAtScope;
        this.principalId = $.principalId;
        this.scope = $.scope;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRoleAssignmentsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRoleAssignmentsPlainArgs $;

        public Builder() {
            $ = new GetRoleAssignmentsPlainArgs();
        }

        public Builder(GetRoleAssignmentsPlainArgs defaults) {
            $ = new GetRoleAssignmentsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param limitAtScope Whether to limit the result exactly at the specified scope and not above or below it. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder limitAtScope(@Nullable Boolean limitAtScope) {
            $.limitAtScope = limitAtScope;
            return this;
        }

        /**
         * @param principalId The principal ID to filter the list of Role Assignments against.
         * 
         * @return builder
         * 
         */
        public Builder principalId(@Nullable String principalId) {
            $.principalId = principalId;
            return this;
        }

        /**
         * @param scope The scope at which to list Role Assignments.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param tenantId The tenant ID for cross-tenant requests.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable String tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        public GetRoleAssignmentsPlainArgs build() {
            if ($.scope == null) {
                throw new MissingRequiredPropertyException("GetRoleAssignmentsPlainArgs", "scope");
            }
            return $;
        }
    }

}
