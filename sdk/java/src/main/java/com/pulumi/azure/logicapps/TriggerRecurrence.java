// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.logicapps;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.logicapps.TriggerRecurrenceArgs;
import com.pulumi.azure.logicapps.inputs.TriggerRecurrenceState;
import com.pulumi.azure.logicapps.outputs.TriggerRecurrenceSchedule;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Recurrence Trigger within a Logic App Workflow
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var exampleWorkflow = new Workflow(&#34;exampleWorkflow&#34;, WorkflowArgs.builder()        
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .build());
 * 
 *         var exampleTriggerRecurrence = new TriggerRecurrence(&#34;exampleTriggerRecurrence&#34;, TriggerRecurrenceArgs.builder()        
 *             .logicAppId(exampleWorkflow.id())
 *             .frequency(&#34;Day&#34;)
 *             .interval(1)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Logic App Recurrence Triggers can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:logicapps/triggerRecurrence:TriggerRecurrence daily /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Logic/workflows/workflow1/triggers/daily
 * ```
 * 
 */
@ResourceType(type="azure:logicapps/triggerRecurrence:TriggerRecurrence")
public class TriggerRecurrence extends com.pulumi.resources.CustomResource {
    /**
     * Specifies the Frequency at which this Trigger should be run. Possible values include `Month`, `Week`, `Day`, `Hour`, `Minute` and `Second`.
     * 
     */
    @Export(name="frequency", type=String.class, parameters={})
    private Output<String> frequency;

    /**
     * @return Specifies the Frequency at which this Trigger should be run. Possible values include `Month`, `Week`, `Day`, `Hour`, `Minute` and `Second`.
     * 
     */
    public Output<String> frequency() {
        return this.frequency;
    }
    /**
     * Specifies interval used for the Frequency, for example a value of `4` for `interval` and `hour` for `frequency` would run the Trigger every 4 hours.
     * 
     */
    @Export(name="interval", type=Integer.class, parameters={})
    private Output<Integer> interval;

    /**
     * @return Specifies interval used for the Frequency, for example a value of `4` for `interval` and `hour` for `frequency` would run the Trigger every 4 hours.
     * 
     */
    public Output<Integer> interval() {
        return this.interval;
    }
    /**
     * Specifies the ID of the Logic App Workflow. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="logicAppId", type=String.class, parameters={})
    private Output<String> logicAppId;

    /**
     * @return Specifies the ID of the Logic App Workflow. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> logicAppId() {
        return this.logicAppId;
    }
    /**
     * Specifies the name of the Recurrence Triggers to be created within the Logic App Workflow. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Specifies the name of the Recurrence Triggers to be created within the Logic App Workflow. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * A `schedule` block as specified below.
     * 
     */
    @Export(name="schedule", type=TriggerRecurrenceSchedule.class, parameters={})
    private Output</* @Nullable */ TriggerRecurrenceSchedule> schedule;

    /**
     * @return A `schedule` block as specified below.
     * 
     */
    public Output<Optional<TriggerRecurrenceSchedule>> schedule() {
        return Codegen.optional(this.schedule);
    }
    /**
     * Specifies the start date and time for this trigger in RFC3339 format: `2000-01-02T03:04:05Z`.
     * 
     */
    @Export(name="startTime", type=String.class, parameters={})
    private Output</* @Nullable */ String> startTime;

    /**
     * @return Specifies the start date and time for this trigger in RFC3339 format: `2000-01-02T03:04:05Z`.
     * 
     */
    public Output<Optional<String>> startTime() {
        return Codegen.optional(this.startTime);
    }
    /**
     * Specifies the time zone for this trigger.  Supported time zone options are listed [here](https://support.microsoft.com/en-us/help/973627/microsoft-time-zone-index-values)
     * 
     */
    @Export(name="timeZone", type=String.class, parameters={})
    private Output<String> timeZone;

    /**
     * @return Specifies the time zone for this trigger.  Supported time zone options are listed [here](https://support.microsoft.com/en-us/help/973627/microsoft-time-zone-index-values)
     * 
     */
    public Output<String> timeZone() {
        return this.timeZone;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public TriggerRecurrence(String name) {
        this(name, TriggerRecurrenceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public TriggerRecurrence(String name, TriggerRecurrenceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public TriggerRecurrence(String name, TriggerRecurrenceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:logicapps/triggerRecurrence:TriggerRecurrence", name, args == null ? TriggerRecurrenceArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private TriggerRecurrence(String name, Output<String> id, @Nullable TriggerRecurrenceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:logicapps/triggerRecurrence:TriggerRecurrence", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static TriggerRecurrence get(String name, Output<String> id, @Nullable TriggerRecurrenceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new TriggerRecurrence(name, id, state, options);
    }
}
