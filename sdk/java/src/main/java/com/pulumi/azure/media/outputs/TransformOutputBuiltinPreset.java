// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class TransformOutputBuiltinPreset {
    /**
     * @return The built-in preset to be used for encoding videos. The Possible values are `AACGoodQualityAudio`, `AdaptiveStreaming`, `ContentAwareEncoding`, `ContentAwareEncodingExperimental`, `CopyAllBitrateNonInterleaved`, `H265AdaptiveStreaming`, `H265ContentAwareEncoding`, `H265SingleBitrate4K`, `H265SingleBitrate1080p`, `H265SingleBitrate720p`, `H264MultipleBitrate1080p`, `H264MultipleBitrateSD`, `H264MultipleBitrate720p`, `H264SingleBitrate1080p`, `H264SingleBitrateSD` and `H264SingleBitrate720p`.
     * 
     */
    private String presetName;

    private TransformOutputBuiltinPreset() {}
    /**
     * @return The built-in preset to be used for encoding videos. The Possible values are `AACGoodQualityAudio`, `AdaptiveStreaming`, `ContentAwareEncoding`, `ContentAwareEncodingExperimental`, `CopyAllBitrateNonInterleaved`, `H265AdaptiveStreaming`, `H265ContentAwareEncoding`, `H265SingleBitrate4K`, `H265SingleBitrate1080p`, `H265SingleBitrate720p`, `H264MultipleBitrate1080p`, `H264MultipleBitrateSD`, `H264MultipleBitrate720p`, `H264SingleBitrate1080p`, `H264SingleBitrateSD` and `H264SingleBitrate720p`.
     * 
     */
    public String presetName() {
        return this.presetName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TransformOutputBuiltinPreset defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String presetName;
        public Builder() {}
        public Builder(TransformOutputBuiltinPreset defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.presetName = defaults.presetName;
        }

        @CustomType.Setter
        public Builder presetName(String presetName) {
            this.presetName = Objects.requireNonNull(presetName);
            return this;
        }
        public TransformOutputBuiltinPreset build() {
            final var o = new TransformOutputBuiltinPreset();
            o.presetName = presetName;
            return o;
        }
    }
}
