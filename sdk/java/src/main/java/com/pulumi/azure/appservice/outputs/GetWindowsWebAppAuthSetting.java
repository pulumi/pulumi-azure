// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.outputs;

import com.pulumi.azure.appservice.outputs.GetWindowsWebAppAuthSettingActiveDirectory;
import com.pulumi.azure.appservice.outputs.GetWindowsWebAppAuthSettingFacebook;
import com.pulumi.azure.appservice.outputs.GetWindowsWebAppAuthSettingGithub;
import com.pulumi.azure.appservice.outputs.GetWindowsWebAppAuthSettingGoogle;
import com.pulumi.azure.appservice.outputs.GetWindowsWebAppAuthSettingMicrosoft;
import com.pulumi.azure.appservice.outputs.GetWindowsWebAppAuthSettingTwitter;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetWindowsWebAppAuthSetting {
    /**
     * @return A `active_directory` block as defined above.
     * 
     */
    private List<GetWindowsWebAppAuthSettingActiveDirectory> activeDirectories;
    /**
     * @return A `additional_login_parameters` block as defined above.
     * 
     */
    private Map<String,String> additionalLoginParameters;
    /**
     * @return A `allowed_external_redirect_urls` block as defined above.
     * 
     */
    private List<String> allowedExternalRedirectUrls;
    /**
     * @return The default authentication provider in use when multiple providers are configured.
     * 
     */
    private String defaultProvider;
    /**
     * @return Is the Backup enabled?
     * 
     */
    private Boolean enabled;
    /**
     * @return A `facebook` block as defined below.
     * 
     */
    private List<GetWindowsWebAppAuthSettingFacebook> facebooks;
    /**
     * @return A `github` block as defined below.
     * 
     */
    private List<GetWindowsWebAppAuthSettingGithub> githubs;
    /**
     * @return A `google` block as defined below.
     * 
     */
    private List<GetWindowsWebAppAuthSettingGoogle> googles;
    /**
     * @return The OpenID Connect Issuer URI that represents the entity which issues access tokens for this Windows Web App.
     * 
     */
    private String issuer;
    /**
     * @return A `microsoft` block as defined below.
     * 
     */
    private List<GetWindowsWebAppAuthSettingMicrosoft> microsofts;
    /**
     * @return The RuntimeVersion of the Authentication / Authorization feature in use for the Windows Web App.
     * 
     */
    private String runtimeVersion;
    /**
     * @return The number of hours after session token expiration that a session token can be used to call the token refresh API.
     * 
     */
    private Double tokenRefreshExtensionHours;
    /**
     * @return Does Windows Web App durably store platform-specific security tokens that are obtained during login flows enabled?
     * 
     */
    private Boolean tokenStoreEnabled;
    /**
     * @return A `twitter` block as defined below.
     * 
     */
    private List<GetWindowsWebAppAuthSettingTwitter> twitters;
    /**
     * @return The action to take when an unauthenticated client attempts to access the app.
     * 
     */
    private String unauthenticatedClientAction;

    private GetWindowsWebAppAuthSetting() {}
    /**
     * @return A `active_directory` block as defined above.
     * 
     */
    public List<GetWindowsWebAppAuthSettingActiveDirectory> activeDirectories() {
        return this.activeDirectories;
    }
    /**
     * @return A `additional_login_parameters` block as defined above.
     * 
     */
    public Map<String,String> additionalLoginParameters() {
        return this.additionalLoginParameters;
    }
    /**
     * @return A `allowed_external_redirect_urls` block as defined above.
     * 
     */
    public List<String> allowedExternalRedirectUrls() {
        return this.allowedExternalRedirectUrls;
    }
    /**
     * @return The default authentication provider in use when multiple providers are configured.
     * 
     */
    public String defaultProvider() {
        return this.defaultProvider;
    }
    /**
     * @return Is the Backup enabled?
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return A `facebook` block as defined below.
     * 
     */
    public List<GetWindowsWebAppAuthSettingFacebook> facebooks() {
        return this.facebooks;
    }
    /**
     * @return A `github` block as defined below.
     * 
     */
    public List<GetWindowsWebAppAuthSettingGithub> githubs() {
        return this.githubs;
    }
    /**
     * @return A `google` block as defined below.
     * 
     */
    public List<GetWindowsWebAppAuthSettingGoogle> googles() {
        return this.googles;
    }
    /**
     * @return The OpenID Connect Issuer URI that represents the entity which issues access tokens for this Windows Web App.
     * 
     */
    public String issuer() {
        return this.issuer;
    }
    /**
     * @return A `microsoft` block as defined below.
     * 
     */
    public List<GetWindowsWebAppAuthSettingMicrosoft> microsofts() {
        return this.microsofts;
    }
    /**
     * @return The RuntimeVersion of the Authentication / Authorization feature in use for the Windows Web App.
     * 
     */
    public String runtimeVersion() {
        return this.runtimeVersion;
    }
    /**
     * @return The number of hours after session token expiration that a session token can be used to call the token refresh API.
     * 
     */
    public Double tokenRefreshExtensionHours() {
        return this.tokenRefreshExtensionHours;
    }
    /**
     * @return Does Windows Web App durably store platform-specific security tokens that are obtained during login flows enabled?
     * 
     */
    public Boolean tokenStoreEnabled() {
        return this.tokenStoreEnabled;
    }
    /**
     * @return A `twitter` block as defined below.
     * 
     */
    public List<GetWindowsWebAppAuthSettingTwitter> twitters() {
        return this.twitters;
    }
    /**
     * @return The action to take when an unauthenticated client attempts to access the app.
     * 
     */
    public String unauthenticatedClientAction() {
        return this.unauthenticatedClientAction;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWindowsWebAppAuthSetting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetWindowsWebAppAuthSettingActiveDirectory> activeDirectories;
        private Map<String,String> additionalLoginParameters;
        private List<String> allowedExternalRedirectUrls;
        private String defaultProvider;
        private Boolean enabled;
        private List<GetWindowsWebAppAuthSettingFacebook> facebooks;
        private List<GetWindowsWebAppAuthSettingGithub> githubs;
        private List<GetWindowsWebAppAuthSettingGoogle> googles;
        private String issuer;
        private List<GetWindowsWebAppAuthSettingMicrosoft> microsofts;
        private String runtimeVersion;
        private Double tokenRefreshExtensionHours;
        private Boolean tokenStoreEnabled;
        private List<GetWindowsWebAppAuthSettingTwitter> twitters;
        private String unauthenticatedClientAction;
        public Builder() {}
        public Builder(GetWindowsWebAppAuthSetting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeDirectories = defaults.activeDirectories;
    	      this.additionalLoginParameters = defaults.additionalLoginParameters;
    	      this.allowedExternalRedirectUrls = defaults.allowedExternalRedirectUrls;
    	      this.defaultProvider = defaults.defaultProvider;
    	      this.enabled = defaults.enabled;
    	      this.facebooks = defaults.facebooks;
    	      this.githubs = defaults.githubs;
    	      this.googles = defaults.googles;
    	      this.issuer = defaults.issuer;
    	      this.microsofts = defaults.microsofts;
    	      this.runtimeVersion = defaults.runtimeVersion;
    	      this.tokenRefreshExtensionHours = defaults.tokenRefreshExtensionHours;
    	      this.tokenStoreEnabled = defaults.tokenStoreEnabled;
    	      this.twitters = defaults.twitters;
    	      this.unauthenticatedClientAction = defaults.unauthenticatedClientAction;
        }

        @CustomType.Setter
        public Builder activeDirectories(List<GetWindowsWebAppAuthSettingActiveDirectory> activeDirectories) {
            this.activeDirectories = Objects.requireNonNull(activeDirectories);
            return this;
        }
        public Builder activeDirectories(GetWindowsWebAppAuthSettingActiveDirectory... activeDirectories) {
            return activeDirectories(List.of(activeDirectories));
        }
        @CustomType.Setter
        public Builder additionalLoginParameters(Map<String,String> additionalLoginParameters) {
            this.additionalLoginParameters = Objects.requireNonNull(additionalLoginParameters);
            return this;
        }
        @CustomType.Setter
        public Builder allowedExternalRedirectUrls(List<String> allowedExternalRedirectUrls) {
            this.allowedExternalRedirectUrls = Objects.requireNonNull(allowedExternalRedirectUrls);
            return this;
        }
        public Builder allowedExternalRedirectUrls(String... allowedExternalRedirectUrls) {
            return allowedExternalRedirectUrls(List.of(allowedExternalRedirectUrls));
        }
        @CustomType.Setter
        public Builder defaultProvider(String defaultProvider) {
            this.defaultProvider = Objects.requireNonNull(defaultProvider);
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        @CustomType.Setter
        public Builder facebooks(List<GetWindowsWebAppAuthSettingFacebook> facebooks) {
            this.facebooks = Objects.requireNonNull(facebooks);
            return this;
        }
        public Builder facebooks(GetWindowsWebAppAuthSettingFacebook... facebooks) {
            return facebooks(List.of(facebooks));
        }
        @CustomType.Setter
        public Builder githubs(List<GetWindowsWebAppAuthSettingGithub> githubs) {
            this.githubs = Objects.requireNonNull(githubs);
            return this;
        }
        public Builder githubs(GetWindowsWebAppAuthSettingGithub... githubs) {
            return githubs(List.of(githubs));
        }
        @CustomType.Setter
        public Builder googles(List<GetWindowsWebAppAuthSettingGoogle> googles) {
            this.googles = Objects.requireNonNull(googles);
            return this;
        }
        public Builder googles(GetWindowsWebAppAuthSettingGoogle... googles) {
            return googles(List.of(googles));
        }
        @CustomType.Setter
        public Builder issuer(String issuer) {
            this.issuer = Objects.requireNonNull(issuer);
            return this;
        }
        @CustomType.Setter
        public Builder microsofts(List<GetWindowsWebAppAuthSettingMicrosoft> microsofts) {
            this.microsofts = Objects.requireNonNull(microsofts);
            return this;
        }
        public Builder microsofts(GetWindowsWebAppAuthSettingMicrosoft... microsofts) {
            return microsofts(List.of(microsofts));
        }
        @CustomType.Setter
        public Builder runtimeVersion(String runtimeVersion) {
            this.runtimeVersion = Objects.requireNonNull(runtimeVersion);
            return this;
        }
        @CustomType.Setter
        public Builder tokenRefreshExtensionHours(Double tokenRefreshExtensionHours) {
            this.tokenRefreshExtensionHours = Objects.requireNonNull(tokenRefreshExtensionHours);
            return this;
        }
        @CustomType.Setter
        public Builder tokenStoreEnabled(Boolean tokenStoreEnabled) {
            this.tokenStoreEnabled = Objects.requireNonNull(tokenStoreEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder twitters(List<GetWindowsWebAppAuthSettingTwitter> twitters) {
            this.twitters = Objects.requireNonNull(twitters);
            return this;
        }
        public Builder twitters(GetWindowsWebAppAuthSettingTwitter... twitters) {
            return twitters(List.of(twitters));
        }
        @CustomType.Setter
        public Builder unauthenticatedClientAction(String unauthenticatedClientAction) {
            this.unauthenticatedClientAction = Objects.requireNonNull(unauthenticatedClientAction);
            return this;
        }
        public GetWindowsWebAppAuthSetting build() {
            final var o = new GetWindowsWebAppAuthSetting();
            o.activeDirectories = activeDirectories;
            o.additionalLoginParameters = additionalLoginParameters;
            o.allowedExternalRedirectUrls = allowedExternalRedirectUrls;
            o.defaultProvider = defaultProvider;
            o.enabled = enabled;
            o.facebooks = facebooks;
            o.githubs = githubs;
            o.googles = googles;
            o.issuer = issuer;
            o.microsofts = microsofts;
            o.runtimeVersion = runtimeVersion;
            o.tokenRefreshExtensionHours = tokenRefreshExtensionHours;
            o.tokenStoreEnabled = tokenStoreEnabled;
            o.twitters = twitters;
            o.unauthenticatedClientAction = unauthenticatedClientAction;
            return o;
        }
    }
}
