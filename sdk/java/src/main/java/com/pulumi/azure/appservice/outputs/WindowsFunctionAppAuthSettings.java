// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.outputs;

import com.pulumi.azure.appservice.outputs.WindowsFunctionAppAuthSettingsActiveDirectory;
import com.pulumi.azure.appservice.outputs.WindowsFunctionAppAuthSettingsFacebook;
import com.pulumi.azure.appservice.outputs.WindowsFunctionAppAuthSettingsGithub;
import com.pulumi.azure.appservice.outputs.WindowsFunctionAppAuthSettingsGoogle;
import com.pulumi.azure.appservice.outputs.WindowsFunctionAppAuthSettingsMicrosoft;
import com.pulumi.azure.appservice.outputs.WindowsFunctionAppAuthSettingsTwitter;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class WindowsFunctionAppAuthSettings {
    /**
     * @return An `active_directory` block as defined above.
     * 
     */
    private @Nullable WindowsFunctionAppAuthSettingsActiveDirectory activeDirectory;
    /**
     * @return Specifies a map of login Parameters to send to the OpenID Connect authorization endpoint when a user logs in.
     * 
     */
    private @Nullable Map<String,String> additionalLoginParameters;
    /**
     * @return Specifies a list of External URLs that can be redirected to as part of logging in or logging out of the Windows Function App.
     * 
     */
    private @Nullable List<String> allowedExternalRedirectUrls;
    /**
     * @return The Default Authentication Provider to use when the `unauthenticated_action` is set to `RedirectToLoginPage`. Possible values include: `apple`, `azureactivedirectory`, `facebook`, `github`, `google`, `twitter` and the `name` of your `custom_oidc_v2` provider.
     * 
     * &gt; **NOTE:** Whilst any value will be accepted by the API for `default_provider`, it can leave the app in an unusable state if this value does not correspond to the name of a known provider (either built-in value, or custom_oidc name) as it is used to build the auth endpoint URI.
     * 
     */
    private @Nullable String defaultProvider;
    /**
     * @return Should the Authentication / Authorization feature be enabled for the Windows Function App?
     * 
     */
    private Boolean enabled;
    /**
     * @return A `facebook` block as defined below.
     * 
     */
    private @Nullable WindowsFunctionAppAuthSettingsFacebook facebook;
    /**
     * @return A `github` block as defined below.
     * 
     */
    private @Nullable WindowsFunctionAppAuthSettingsGithub github;
    /**
     * @return A `google` block as defined below.
     * 
     */
    private @Nullable WindowsFunctionAppAuthSettingsGoogle google;
    /**
     * @return The OpenID Connect Issuer URI that represents the entity which issues access tokens for this Windows Function App.
     * 
     * &gt; **NOTE:** When using Azure Active Directory, this value is the URI of the directory tenant, e.g. &lt;https://sts.windows.net/{tenant-guid}/&gt;.
     * 
     */
    private @Nullable String issuer;
    /**
     * @return A `microsoft` block as defined below.
     * 
     */
    private @Nullable WindowsFunctionAppAuthSettingsMicrosoft microsoft;
    /**
     * @return The Runtime Version of the Authentication and Authorisation feature of this App. Defaults to `~1`.
     * 
     */
    private @Nullable String runtimeVersion;
    /**
     * @return The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to `72` hours.
     * 
     */
    private @Nullable Double tokenRefreshExtensionHours;
    /**
     * @return Should the Windows Function App durably store platform-specific security tokens that are obtained during login flows? Defaults to `false`.
     * 
     */
    private @Nullable Boolean tokenStoreEnabled;
    /**
     * @return A `twitter` block as defined below.
     * 
     */
    private @Nullable WindowsFunctionAppAuthSettingsTwitter twitter;
    /**
     * @return The action to take when an unauthenticated client attempts to access the app. Possible values include: `RedirectToLoginPage`, `AllowAnonymous`.
     * 
     */
    private @Nullable String unauthenticatedClientAction;

    private WindowsFunctionAppAuthSettings() {}
    /**
     * @return An `active_directory` block as defined above.
     * 
     */
    public Optional<WindowsFunctionAppAuthSettingsActiveDirectory> activeDirectory() {
        return Optional.ofNullable(this.activeDirectory);
    }
    /**
     * @return Specifies a map of login Parameters to send to the OpenID Connect authorization endpoint when a user logs in.
     * 
     */
    public Map<String,String> additionalLoginParameters() {
        return this.additionalLoginParameters == null ? Map.of() : this.additionalLoginParameters;
    }
    /**
     * @return Specifies a list of External URLs that can be redirected to as part of logging in or logging out of the Windows Function App.
     * 
     */
    public List<String> allowedExternalRedirectUrls() {
        return this.allowedExternalRedirectUrls == null ? List.of() : this.allowedExternalRedirectUrls;
    }
    /**
     * @return The Default Authentication Provider to use when the `unauthenticated_action` is set to `RedirectToLoginPage`. Possible values include: `apple`, `azureactivedirectory`, `facebook`, `github`, `google`, `twitter` and the `name` of your `custom_oidc_v2` provider.
     * 
     * &gt; **NOTE:** Whilst any value will be accepted by the API for `default_provider`, it can leave the app in an unusable state if this value does not correspond to the name of a known provider (either built-in value, or custom_oidc name) as it is used to build the auth endpoint URI.
     * 
     */
    public Optional<String> defaultProvider() {
        return Optional.ofNullable(this.defaultProvider);
    }
    /**
     * @return Should the Authentication / Authorization feature be enabled for the Windows Function App?
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return A `facebook` block as defined below.
     * 
     */
    public Optional<WindowsFunctionAppAuthSettingsFacebook> facebook() {
        return Optional.ofNullable(this.facebook);
    }
    /**
     * @return A `github` block as defined below.
     * 
     */
    public Optional<WindowsFunctionAppAuthSettingsGithub> github() {
        return Optional.ofNullable(this.github);
    }
    /**
     * @return A `google` block as defined below.
     * 
     */
    public Optional<WindowsFunctionAppAuthSettingsGoogle> google() {
        return Optional.ofNullable(this.google);
    }
    /**
     * @return The OpenID Connect Issuer URI that represents the entity which issues access tokens for this Windows Function App.
     * 
     * &gt; **NOTE:** When using Azure Active Directory, this value is the URI of the directory tenant, e.g. &lt;https://sts.windows.net/{tenant-guid}/&gt;.
     * 
     */
    public Optional<String> issuer() {
        return Optional.ofNullable(this.issuer);
    }
    /**
     * @return A `microsoft` block as defined below.
     * 
     */
    public Optional<WindowsFunctionAppAuthSettingsMicrosoft> microsoft() {
        return Optional.ofNullable(this.microsoft);
    }
    /**
     * @return The Runtime Version of the Authentication and Authorisation feature of this App. Defaults to `~1`.
     * 
     */
    public Optional<String> runtimeVersion() {
        return Optional.ofNullable(this.runtimeVersion);
    }
    /**
     * @return The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to `72` hours.
     * 
     */
    public Optional<Double> tokenRefreshExtensionHours() {
        return Optional.ofNullable(this.tokenRefreshExtensionHours);
    }
    /**
     * @return Should the Windows Function App durably store platform-specific security tokens that are obtained during login flows? Defaults to `false`.
     * 
     */
    public Optional<Boolean> tokenStoreEnabled() {
        return Optional.ofNullable(this.tokenStoreEnabled);
    }
    /**
     * @return A `twitter` block as defined below.
     * 
     */
    public Optional<WindowsFunctionAppAuthSettingsTwitter> twitter() {
        return Optional.ofNullable(this.twitter);
    }
    /**
     * @return The action to take when an unauthenticated client attempts to access the app. Possible values include: `RedirectToLoginPage`, `AllowAnonymous`.
     * 
     */
    public Optional<String> unauthenticatedClientAction() {
        return Optional.ofNullable(this.unauthenticatedClientAction);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WindowsFunctionAppAuthSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable WindowsFunctionAppAuthSettingsActiveDirectory activeDirectory;
        private @Nullable Map<String,String> additionalLoginParameters;
        private @Nullable List<String> allowedExternalRedirectUrls;
        private @Nullable String defaultProvider;
        private Boolean enabled;
        private @Nullable WindowsFunctionAppAuthSettingsFacebook facebook;
        private @Nullable WindowsFunctionAppAuthSettingsGithub github;
        private @Nullable WindowsFunctionAppAuthSettingsGoogle google;
        private @Nullable String issuer;
        private @Nullable WindowsFunctionAppAuthSettingsMicrosoft microsoft;
        private @Nullable String runtimeVersion;
        private @Nullable Double tokenRefreshExtensionHours;
        private @Nullable Boolean tokenStoreEnabled;
        private @Nullable WindowsFunctionAppAuthSettingsTwitter twitter;
        private @Nullable String unauthenticatedClientAction;
        public Builder() {}
        public Builder(WindowsFunctionAppAuthSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeDirectory = defaults.activeDirectory;
    	      this.additionalLoginParameters = defaults.additionalLoginParameters;
    	      this.allowedExternalRedirectUrls = defaults.allowedExternalRedirectUrls;
    	      this.defaultProvider = defaults.defaultProvider;
    	      this.enabled = defaults.enabled;
    	      this.facebook = defaults.facebook;
    	      this.github = defaults.github;
    	      this.google = defaults.google;
    	      this.issuer = defaults.issuer;
    	      this.microsoft = defaults.microsoft;
    	      this.runtimeVersion = defaults.runtimeVersion;
    	      this.tokenRefreshExtensionHours = defaults.tokenRefreshExtensionHours;
    	      this.tokenStoreEnabled = defaults.tokenStoreEnabled;
    	      this.twitter = defaults.twitter;
    	      this.unauthenticatedClientAction = defaults.unauthenticatedClientAction;
        }

        @CustomType.Setter
        public Builder activeDirectory(@Nullable WindowsFunctionAppAuthSettingsActiveDirectory activeDirectory) {

            this.activeDirectory = activeDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder additionalLoginParameters(@Nullable Map<String,String> additionalLoginParameters) {

            this.additionalLoginParameters = additionalLoginParameters;
            return this;
        }
        @CustomType.Setter
        public Builder allowedExternalRedirectUrls(@Nullable List<String> allowedExternalRedirectUrls) {

            this.allowedExternalRedirectUrls = allowedExternalRedirectUrls;
            return this;
        }
        public Builder allowedExternalRedirectUrls(String... allowedExternalRedirectUrls) {
            return allowedExternalRedirectUrls(List.of(allowedExternalRedirectUrls));
        }
        @CustomType.Setter
        public Builder defaultProvider(@Nullable String defaultProvider) {

            this.defaultProvider = defaultProvider;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("WindowsFunctionAppAuthSettings", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder facebook(@Nullable WindowsFunctionAppAuthSettingsFacebook facebook) {

            this.facebook = facebook;
            return this;
        }
        @CustomType.Setter
        public Builder github(@Nullable WindowsFunctionAppAuthSettingsGithub github) {

            this.github = github;
            return this;
        }
        @CustomType.Setter
        public Builder google(@Nullable WindowsFunctionAppAuthSettingsGoogle google) {

            this.google = google;
            return this;
        }
        @CustomType.Setter
        public Builder issuer(@Nullable String issuer) {

            this.issuer = issuer;
            return this;
        }
        @CustomType.Setter
        public Builder microsoft(@Nullable WindowsFunctionAppAuthSettingsMicrosoft microsoft) {

            this.microsoft = microsoft;
            return this;
        }
        @CustomType.Setter
        public Builder runtimeVersion(@Nullable String runtimeVersion) {

            this.runtimeVersion = runtimeVersion;
            return this;
        }
        @CustomType.Setter
        public Builder tokenRefreshExtensionHours(@Nullable Double tokenRefreshExtensionHours) {

            this.tokenRefreshExtensionHours = tokenRefreshExtensionHours;
            return this;
        }
        @CustomType.Setter
        public Builder tokenStoreEnabled(@Nullable Boolean tokenStoreEnabled) {

            this.tokenStoreEnabled = tokenStoreEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder twitter(@Nullable WindowsFunctionAppAuthSettingsTwitter twitter) {

            this.twitter = twitter;
            return this;
        }
        @CustomType.Setter
        public Builder unauthenticatedClientAction(@Nullable String unauthenticatedClientAction) {

            this.unauthenticatedClientAction = unauthenticatedClientAction;
            return this;
        }
        public WindowsFunctionAppAuthSettings build() {
            final var _resultValue = new WindowsFunctionAppAuthSettings();
            _resultValue.activeDirectory = activeDirectory;
            _resultValue.additionalLoginParameters = additionalLoginParameters;
            _resultValue.allowedExternalRedirectUrls = allowedExternalRedirectUrls;
            _resultValue.defaultProvider = defaultProvider;
            _resultValue.enabled = enabled;
            _resultValue.facebook = facebook;
            _resultValue.github = github;
            _resultValue.google = google;
            _resultValue.issuer = issuer;
            _resultValue.microsoft = microsoft;
            _resultValue.runtimeVersion = runtimeVersion;
            _resultValue.tokenRefreshExtensionHours = tokenRefreshExtensionHours;
            _resultValue.tokenStoreEnabled = tokenStoreEnabled;
            _resultValue.twitter = twitter;
            _resultValue.unauthenticatedClientAction = unauthenticatedClientAction;
            return _resultValue;
        }
    }
}
