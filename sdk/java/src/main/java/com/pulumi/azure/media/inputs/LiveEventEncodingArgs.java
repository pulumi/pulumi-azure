// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LiveEventEncodingArgs extends com.pulumi.resources.ResourceArgs {

    public static final LiveEventEncodingArgs Empty = new LiveEventEncodingArgs();

    /**
     * Use an `ISO 8601` time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use `PT2S` to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures). The value cannot be set for pass-through live events. Defaults to `PT2S`.
     * 
     */
    @Import(name="keyFrameInterval")
    private @Nullable Output<String> keyFrameInterval;

    /**
     * @return Use an `ISO 8601` time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use `PT2S` to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures). The value cannot be set for pass-through live events. Defaults to `PT2S`.
     * 
     */
    public Optional<Output<String>> keyFrameInterval() {
        return Optional.ofNullable(this.keyFrameInterval);
    }

    /**
     * The optional encoding preset name, used when `type` is not `None`. If the `type` is set to `Standard`, then the default preset name is `Default720p`. Else if the `type` is set to `Premium1080p`, Changing this forces a new resource to be created.
     * 
     */
    @Import(name="presetName")
    private @Nullable Output<String> presetName;

    /**
     * @return The optional encoding preset name, used when `type` is not `None`. If the `type` is set to `Standard`, then the default preset name is `Default720p`. Else if the `type` is set to `Premium1080p`, Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> presetName() {
        return Optional.ofNullable(this.presetName);
    }

    /**
     * Specifies how the input video will be resized to fit the desired output resolution(s). Allowed values are `None`, `AutoFit` or `AutoSize`. Default is `None`.
     * 
     */
    @Import(name="stretchMode")
    private @Nullable Output<String> stretchMode;

    /**
     * @return Specifies how the input video will be resized to fit the desired output resolution(s). Allowed values are `None`, `AutoFit` or `AutoSize`. Default is `None`.
     * 
     */
    public Optional<Output<String>> stretchMode() {
        return Optional.ofNullable(this.stretchMode);
    }

    /**
     * Live event type. Possible values are `None`, `Premium1080p`, `PassthroughBasic`, `PassthroughStandard` and `Standard`. When set to `None`, the service simply passes through the incoming video and audio layer(s) to the output. When `type` is set to `Standard` or `Premium1080p`, a live encoder transcodes the incoming stream into multiple bitrates or layers. Defaults to `None`. Changing this forces a new resource to be created.
     * 
     * &gt; [More information can be found in the Microsoft Documentation](https://go.microsoft.com/fwlink/?linkid=2095101).
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Live event type. Possible values are `None`, `Premium1080p`, `PassthroughBasic`, `PassthroughStandard` and `Standard`. When set to `None`, the service simply passes through the incoming video and audio layer(s) to the output. When `type` is set to `Standard` or `Premium1080p`, a live encoder transcodes the incoming stream into multiple bitrates or layers. Defaults to `None`. Changing this forces a new resource to be created.
     * 
     * &gt; [More information can be found in the Microsoft Documentation](https://go.microsoft.com/fwlink/?linkid=2095101).
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private LiveEventEncodingArgs() {}

    private LiveEventEncodingArgs(LiveEventEncodingArgs $) {
        this.keyFrameInterval = $.keyFrameInterval;
        this.presetName = $.presetName;
        this.stretchMode = $.stretchMode;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LiveEventEncodingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LiveEventEncodingArgs $;

        public Builder() {
            $ = new LiveEventEncodingArgs();
        }

        public Builder(LiveEventEncodingArgs defaults) {
            $ = new LiveEventEncodingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param keyFrameInterval Use an `ISO 8601` time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use `PT2S` to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures). The value cannot be set for pass-through live events. Defaults to `PT2S`.
         * 
         * @return builder
         * 
         */
        public Builder keyFrameInterval(@Nullable Output<String> keyFrameInterval) {
            $.keyFrameInterval = keyFrameInterval;
            return this;
        }

        /**
         * @param keyFrameInterval Use an `ISO 8601` time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use `PT2S` to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures). The value cannot be set for pass-through live events. Defaults to `PT2S`.
         * 
         * @return builder
         * 
         */
        public Builder keyFrameInterval(String keyFrameInterval) {
            return keyFrameInterval(Output.of(keyFrameInterval));
        }

        /**
         * @param presetName The optional encoding preset name, used when `type` is not `None`. If the `type` is set to `Standard`, then the default preset name is `Default720p`. Else if the `type` is set to `Premium1080p`, Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder presetName(@Nullable Output<String> presetName) {
            $.presetName = presetName;
            return this;
        }

        /**
         * @param presetName The optional encoding preset name, used when `type` is not `None`. If the `type` is set to `Standard`, then the default preset name is `Default720p`. Else if the `type` is set to `Premium1080p`, Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder presetName(String presetName) {
            return presetName(Output.of(presetName));
        }

        /**
         * @param stretchMode Specifies how the input video will be resized to fit the desired output resolution(s). Allowed values are `None`, `AutoFit` or `AutoSize`. Default is `None`.
         * 
         * @return builder
         * 
         */
        public Builder stretchMode(@Nullable Output<String> stretchMode) {
            $.stretchMode = stretchMode;
            return this;
        }

        /**
         * @param stretchMode Specifies how the input video will be resized to fit the desired output resolution(s). Allowed values are `None`, `AutoFit` or `AutoSize`. Default is `None`.
         * 
         * @return builder
         * 
         */
        public Builder stretchMode(String stretchMode) {
            return stretchMode(Output.of(stretchMode));
        }

        /**
         * @param type Live event type. Possible values are `None`, `Premium1080p`, `PassthroughBasic`, `PassthroughStandard` and `Standard`. When set to `None`, the service simply passes through the incoming video and audio layer(s) to the output. When `type` is set to `Standard` or `Premium1080p`, a live encoder transcodes the incoming stream into multiple bitrates or layers. Defaults to `None`. Changing this forces a new resource to be created.
         * 
         * &gt; [More information can be found in the Microsoft Documentation](https://go.microsoft.com/fwlink/?linkid=2095101).
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Live event type. Possible values are `None`, `Premium1080p`, `PassthroughBasic`, `PassthroughStandard` and `Standard`. When set to `None`, the service simply passes through the incoming video and audio layer(s) to the output. When `type` is set to `Standard` or `Premium1080p`, a live encoder transcodes the incoming stream into multiple bitrates or layers. Defaults to `None`. Changing this forces a new resource to be created.
         * 
         * &gt; [More information can be found in the Microsoft Documentation](https://go.microsoft.com/fwlink/?linkid=2095101).
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public LiveEventEncodingArgs build() {
            return $;
        }
    }

}
