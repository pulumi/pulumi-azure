// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetLinuxFunctionAppSiteConfigApplicationStackDocker {
    /**
     * @return The name of the Docker image used.
     * 
     */
    private String imageName;
    /**
     * @return The image tag of the image used.
     * 
     */
    private String imageTag;
    /**
     * @return The password for the account to use to connect to the registry.
     * 
     */
    private String registryPassword;
    /**
     * @return The URL of the docker registry.
     * 
     */
    private String registryUrl;
    /**
     * @return The username used for connections to the registry.
     * 
     */
    private String registryUsername;

    private GetLinuxFunctionAppSiteConfigApplicationStackDocker() {}
    /**
     * @return The name of the Docker image used.
     * 
     */
    public String imageName() {
        return this.imageName;
    }
    /**
     * @return The image tag of the image used.
     * 
     */
    public String imageTag() {
        return this.imageTag;
    }
    /**
     * @return The password for the account to use to connect to the registry.
     * 
     */
    public String registryPassword() {
        return this.registryPassword;
    }
    /**
     * @return The URL of the docker registry.
     * 
     */
    public String registryUrl() {
        return this.registryUrl;
    }
    /**
     * @return The username used for connections to the registry.
     * 
     */
    public String registryUsername() {
        return this.registryUsername;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLinuxFunctionAppSiteConfigApplicationStackDocker defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String imageName;
        private String imageTag;
        private String registryPassword;
        private String registryUrl;
        private String registryUsername;
        public Builder() {}
        public Builder(GetLinuxFunctionAppSiteConfigApplicationStackDocker defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.imageName = defaults.imageName;
    	      this.imageTag = defaults.imageTag;
    	      this.registryPassword = defaults.registryPassword;
    	      this.registryUrl = defaults.registryUrl;
    	      this.registryUsername = defaults.registryUsername;
        }

        @CustomType.Setter
        public Builder imageName(String imageName) {
            if (imageName == null) {
              throw new MissingRequiredPropertyException("GetLinuxFunctionAppSiteConfigApplicationStackDocker", "imageName");
            }
            this.imageName = imageName;
            return this;
        }
        @CustomType.Setter
        public Builder imageTag(String imageTag) {
            if (imageTag == null) {
              throw new MissingRequiredPropertyException("GetLinuxFunctionAppSiteConfigApplicationStackDocker", "imageTag");
            }
            this.imageTag = imageTag;
            return this;
        }
        @CustomType.Setter
        public Builder registryPassword(String registryPassword) {
            if (registryPassword == null) {
              throw new MissingRequiredPropertyException("GetLinuxFunctionAppSiteConfigApplicationStackDocker", "registryPassword");
            }
            this.registryPassword = registryPassword;
            return this;
        }
        @CustomType.Setter
        public Builder registryUrl(String registryUrl) {
            if (registryUrl == null) {
              throw new MissingRequiredPropertyException("GetLinuxFunctionAppSiteConfigApplicationStackDocker", "registryUrl");
            }
            this.registryUrl = registryUrl;
            return this;
        }
        @CustomType.Setter
        public Builder registryUsername(String registryUsername) {
            if (registryUsername == null) {
              throw new MissingRequiredPropertyException("GetLinuxFunctionAppSiteConfigApplicationStackDocker", "registryUsername");
            }
            this.registryUsername = registryUsername;
            return this;
        }
        public GetLinuxFunctionAppSiteConfigApplicationStackDocker build() {
            final var _resultValue = new GetLinuxFunctionAppSiteConfigApplicationStackDocker();
            _resultValue.imageName = imageName;
            _resultValue.imageTag = imageTag;
            _resultValue.registryPassword = registryPassword;
            _resultValue.registryUrl = registryUrl;
            _resultValue.registryUsername = registryUsername;
            return _resultValue;
        }
    }
}
