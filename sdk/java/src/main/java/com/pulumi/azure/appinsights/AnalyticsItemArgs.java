// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appinsights;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AnalyticsItemArgs extends com.pulumi.resources.ResourceArgs {

    public static final AnalyticsItemArgs Empty = new AnalyticsItemArgs();

    /**
     * The ID of the Application Insights component on which the Analytics Item exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="applicationInsightsId", required=true)
    private Output<String> applicationInsightsId;

    /**
     * @return The ID of the Application Insights component on which the Analytics Item exists. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> applicationInsightsId() {
        return this.applicationInsightsId;
    }

    /**
     * The content for the Analytics Item, for example the query text if `type` is `query`.
     * 
     */
    @Import(name="content", required=true)
    private Output<String> content;

    /**
     * @return The content for the Analytics Item, for example the query text if `type` is `query`.
     * 
     */
    public Output<String> content() {
        return this.content;
    }

    /**
     * The alias to use for the function. Required when `type` is `function`.
     * 
     */
    @Import(name="functionAlias")
    private @Nullable Output<String> functionAlias;

    /**
     * @return The alias to use for the function. Required when `type` is `function`.
     * 
     */
    public Optional<Output<String>> functionAlias() {
        return Optional.ofNullable(this.functionAlias);
    }

    /**
     * Specifies the name of the Application Insights Analytics Item. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the Application Insights Analytics Item. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The scope for the Analytics Item. Can be `shared` or `user`. Changing this forces a new resource to be created. Must be `shared` for functions.
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    /**
     * @return The scope for the Analytics Item. Can be `shared` or `user`. Changing this forces a new resource to be created. Must be `shared` for functions.
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    /**
     * The type of Analytics Item to create. Can be one of `query`, `function`, `folder`, `recent`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of Analytics Item to create. Can be one of `query`, `function`, `folder`, `recent`. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private AnalyticsItemArgs() {}

    private AnalyticsItemArgs(AnalyticsItemArgs $) {
        this.applicationInsightsId = $.applicationInsightsId;
        this.content = $.content;
        this.functionAlias = $.functionAlias;
        this.name = $.name;
        this.scope = $.scope;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AnalyticsItemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AnalyticsItemArgs $;

        public Builder() {
            $ = new AnalyticsItemArgs();
        }

        public Builder(AnalyticsItemArgs defaults) {
            $ = new AnalyticsItemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationInsightsId The ID of the Application Insights component on which the Analytics Item exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder applicationInsightsId(Output<String> applicationInsightsId) {
            $.applicationInsightsId = applicationInsightsId;
            return this;
        }

        /**
         * @param applicationInsightsId The ID of the Application Insights component on which the Analytics Item exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder applicationInsightsId(String applicationInsightsId) {
            return applicationInsightsId(Output.of(applicationInsightsId));
        }

        /**
         * @param content The content for the Analytics Item, for example the query text if `type` is `query`.
         * 
         * @return builder
         * 
         */
        public Builder content(Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content The content for the Analytics Item, for example the query text if `type` is `query`.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param functionAlias The alias to use for the function. Required when `type` is `function`.
         * 
         * @return builder
         * 
         */
        public Builder functionAlias(@Nullable Output<String> functionAlias) {
            $.functionAlias = functionAlias;
            return this;
        }

        /**
         * @param functionAlias The alias to use for the function. Required when `type` is `function`.
         * 
         * @return builder
         * 
         */
        public Builder functionAlias(String functionAlias) {
            return functionAlias(Output.of(functionAlias));
        }

        /**
         * @param name Specifies the name of the Application Insights Analytics Item. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Application Insights Analytics Item. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param scope The scope for the Analytics Item. Can be `shared` or `user`. Changing this forces a new resource to be created. Must be `shared` for functions.
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope for the Analytics Item. Can be `shared` or `user`. Changing this forces a new resource to be created. Must be `shared` for functions.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param type The type of Analytics Item to create. Can be one of `query`, `function`, `folder`, `recent`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of Analytics Item to create. Can be one of `query`, `function`, `folder`, `recent`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public AnalyticsItemArgs build() {
            if ($.applicationInsightsId == null) {
                throw new MissingRequiredPropertyException("AnalyticsItemArgs", "applicationInsightsId");
            }
            if ($.content == null) {
                throw new MissingRequiredPropertyException("AnalyticsItemArgs", "content");
            }
            if ($.scope == null) {
                throw new MissingRequiredPropertyException("AnalyticsItemArgs", "scope");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("AnalyticsItemArgs", "type");
            }
            return $;
        }
    }

}
