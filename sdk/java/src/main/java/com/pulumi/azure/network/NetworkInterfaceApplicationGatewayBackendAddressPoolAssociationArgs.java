// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs Empty = new NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs();

    /**
     * The ID of the Application Gateway&#39;s Backend Address Pool which this Network Interface which should be connected to. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="backendAddressPoolId", required=true)
    private Output<String> backendAddressPoolId;

    /**
     * @return The ID of the Application Gateway&#39;s Backend Address Pool which this Network Interface which should be connected to. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> backendAddressPoolId() {
        return this.backendAddressPoolId;
    }

    /**
     * The Name of the IP Configuration within the Network Interface which should be connected to the Backend Address Pool. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="ipConfigurationName", required=true)
    private Output<String> ipConfigurationName;

    /**
     * @return The Name of the IP Configuration within the Network Interface which should be connected to the Backend Address Pool. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> ipConfigurationName() {
        return this.ipConfigurationName;
    }

    /**
     * The ID of the Network Interface. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="networkInterfaceId", required=true)
    private Output<String> networkInterfaceId;

    /**
     * @return The ID of the Network Interface. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> networkInterfaceId() {
        return this.networkInterfaceId;
    }

    private NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs() {}

    private NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs(NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs $) {
        this.backendAddressPoolId = $.backendAddressPoolId;
        this.ipConfigurationName = $.ipConfigurationName;
        this.networkInterfaceId = $.networkInterfaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs $;

        public Builder() {
            $ = new NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs();
        }

        public Builder(NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs defaults) {
            $ = new NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backendAddressPoolId The ID of the Application Gateway&#39;s Backend Address Pool which this Network Interface which should be connected to. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder backendAddressPoolId(Output<String> backendAddressPoolId) {
            $.backendAddressPoolId = backendAddressPoolId;
            return this;
        }

        /**
         * @param backendAddressPoolId The ID of the Application Gateway&#39;s Backend Address Pool which this Network Interface which should be connected to. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder backendAddressPoolId(String backendAddressPoolId) {
            return backendAddressPoolId(Output.of(backendAddressPoolId));
        }

        /**
         * @param ipConfigurationName The Name of the IP Configuration within the Network Interface which should be connected to the Backend Address Pool. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder ipConfigurationName(Output<String> ipConfigurationName) {
            $.ipConfigurationName = ipConfigurationName;
            return this;
        }

        /**
         * @param ipConfigurationName The Name of the IP Configuration within the Network Interface which should be connected to the Backend Address Pool. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder ipConfigurationName(String ipConfigurationName) {
            return ipConfigurationName(Output.of(ipConfigurationName));
        }

        /**
         * @param networkInterfaceId The ID of the Network Interface. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaceId(Output<String> networkInterfaceId) {
            $.networkInterfaceId = networkInterfaceId;
            return this;
        }

        /**
         * @param networkInterfaceId The ID of the Network Interface. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaceId(String networkInterfaceId) {
            return networkInterfaceId(Output.of(networkInterfaceId));
        }

        public NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs build() {
            if ($.backendAddressPoolId == null) {
                throw new MissingRequiredPropertyException("NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs", "backendAddressPoolId");
            }
            if ($.ipConfigurationName == null) {
                throw new MissingRequiredPropertyException("NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs", "ipConfigurationName");
            }
            if ($.networkInterfaceId == null) {
                throw new MissingRequiredPropertyException("NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs", "networkInterfaceId");
            }
            return $;
        }
    }

}
