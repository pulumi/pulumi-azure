// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServicePlanArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServicePlanArgs Empty = new ServicePlanArgs();

    /**
     * The ID of the App Service Environment to create this Service Plan in.
     * 
     */
    @Import(name="appServiceEnvironmentId")
    private @Nullable Output<String> appServiceEnvironmentId;

    /**
     * @return The ID of the App Service Environment to create this Service Plan in.
     * 
     */
    public Optional<Output<String>> appServiceEnvironmentId() {
        return Optional.ofNullable(this.appServiceEnvironmentId);
    }

    /**
     * The Azure Region where the Service Plan should exist. Changing this forces a new AppService to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The Azure Region where the Service Plan should exist. Changing this forces a new AppService to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The maximum number of workers to use in an Elastic SKU Plan. Cannot be set unless using an Elastic SKU.
     * 
     */
    @Import(name="maximumElasticWorkerCount")
    private @Nullable Output<Integer> maximumElasticWorkerCount;

    /**
     * @return The maximum number of workers to use in an Elastic SKU Plan. Cannot be set unless using an Elastic SKU.
     * 
     */
    public Optional<Output<Integer>> maximumElasticWorkerCount() {
        return Optional.ofNullable(this.maximumElasticWorkerCount);
    }

    /**
     * The name which should be used for this Service Plan. Changing this forces a new AppService to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Service Plan. Changing this forces a new AppService to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The O/S type for the App Services to be hosted in this plan. Possible values include `Windows`, `Linux`, and `WindowsContainer`.
     * 
     */
    @Import(name="osType", required=true)
    private Output<String> osType;

    /**
     * @return The O/S type for the App Services to be hosted in this plan. Possible values include `Windows`, `Linux`, and `WindowsContainer`.
     * 
     */
    public Output<String> osType() {
        return this.osType;
    }

    /**
     * Should Per Site Scaling be enabled. Defaults to `false`.
     * 
     */
    @Import(name="perSiteScalingEnabled")
    private @Nullable Output<Boolean> perSiteScalingEnabled;

    /**
     * @return Should Per Site Scaling be enabled. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> perSiteScalingEnabled() {
        return Optional.ofNullable(this.perSiteScalingEnabled);
    }

    /**
     * The name of the Resource Group where the AppService should exist. Changing this forces a new AppService to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the AppService should exist. Changing this forces a new AppService to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The SKU for the plan. Possible values include `B1`, `B2`, `B3`, `D1`, `F1`, `FREE`, `I1`, `I2`, `I3`, `I1v2`, `I2v2`, `I3v2`, `P1v2`, `P2v2`, `P3v2`, `P1v3`, `P2v3`, `P3v3`, `S1`, `S2`, `S3`, `SHARED`, `EP1`, `EP2`, `EP3`, `WS1`, `WS2`, and `WS3`.
     * 
     */
    @Import(name="skuName", required=true)
    private Output<String> skuName;

    /**
     * @return The SKU for the plan. Possible values include `B1`, `B2`, `B3`, `D1`, `F1`, `FREE`, `I1`, `I2`, `I3`, `I1v2`, `I2v2`, `I3v2`, `P1v2`, `P2v2`, `P3v2`, `P1v3`, `P2v3`, `P3v3`, `S1`, `S2`, `S3`, `SHARED`, `EP1`, `EP2`, `EP3`, `WS1`, `WS2`, and `WS3`.
     * 
     */
    public Output<String> skuName() {
        return this.skuName;
    }

    /**
     * A mapping of tags which should be assigned to the AppService.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the AppService.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The number of Workers (instances) to be allocated.
     * 
     */
    @Import(name="workerCount")
    private @Nullable Output<Integer> workerCount;

    /**
     * @return The number of Workers (instances) to be allocated.
     * 
     */
    public Optional<Output<Integer>> workerCount() {
        return Optional.ofNullable(this.workerCount);
    }

    /**
     * Should the Service Plan balance across Availability Zones in the region. Defaults to `false`.
     * 
     */
    @Import(name="zoneBalancingEnabled")
    private @Nullable Output<Boolean> zoneBalancingEnabled;

    /**
     * @return Should the Service Plan balance across Availability Zones in the region. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> zoneBalancingEnabled() {
        return Optional.ofNullable(this.zoneBalancingEnabled);
    }

    private ServicePlanArgs() {}

    private ServicePlanArgs(ServicePlanArgs $) {
        this.appServiceEnvironmentId = $.appServiceEnvironmentId;
        this.location = $.location;
        this.maximumElasticWorkerCount = $.maximumElasticWorkerCount;
        this.name = $.name;
        this.osType = $.osType;
        this.perSiteScalingEnabled = $.perSiteScalingEnabled;
        this.resourceGroupName = $.resourceGroupName;
        this.skuName = $.skuName;
        this.tags = $.tags;
        this.workerCount = $.workerCount;
        this.zoneBalancingEnabled = $.zoneBalancingEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServicePlanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServicePlanArgs $;

        public Builder() {
            $ = new ServicePlanArgs();
        }

        public Builder(ServicePlanArgs defaults) {
            $ = new ServicePlanArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appServiceEnvironmentId The ID of the App Service Environment to create this Service Plan in.
         * 
         * @return builder
         * 
         */
        public Builder appServiceEnvironmentId(@Nullable Output<String> appServiceEnvironmentId) {
            $.appServiceEnvironmentId = appServiceEnvironmentId;
            return this;
        }

        /**
         * @param appServiceEnvironmentId The ID of the App Service Environment to create this Service Plan in.
         * 
         * @return builder
         * 
         */
        public Builder appServiceEnvironmentId(String appServiceEnvironmentId) {
            return appServiceEnvironmentId(Output.of(appServiceEnvironmentId));
        }

        /**
         * @param location The Azure Region where the Service Plan should exist. Changing this forces a new AppService to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The Azure Region where the Service Plan should exist. Changing this forces a new AppService to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param maximumElasticWorkerCount The maximum number of workers to use in an Elastic SKU Plan. Cannot be set unless using an Elastic SKU.
         * 
         * @return builder
         * 
         */
        public Builder maximumElasticWorkerCount(@Nullable Output<Integer> maximumElasticWorkerCount) {
            $.maximumElasticWorkerCount = maximumElasticWorkerCount;
            return this;
        }

        /**
         * @param maximumElasticWorkerCount The maximum number of workers to use in an Elastic SKU Plan. Cannot be set unless using an Elastic SKU.
         * 
         * @return builder
         * 
         */
        public Builder maximumElasticWorkerCount(Integer maximumElasticWorkerCount) {
            return maximumElasticWorkerCount(Output.of(maximumElasticWorkerCount));
        }

        /**
         * @param name The name which should be used for this Service Plan. Changing this forces a new AppService to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Service Plan. Changing this forces a new AppService to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param osType The O/S type for the App Services to be hosted in this plan. Possible values include `Windows`, `Linux`, and `WindowsContainer`.
         * 
         * @return builder
         * 
         */
        public Builder osType(Output<String> osType) {
            $.osType = osType;
            return this;
        }

        /**
         * @param osType The O/S type for the App Services to be hosted in this plan. Possible values include `Windows`, `Linux`, and `WindowsContainer`.
         * 
         * @return builder
         * 
         */
        public Builder osType(String osType) {
            return osType(Output.of(osType));
        }

        /**
         * @param perSiteScalingEnabled Should Per Site Scaling be enabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder perSiteScalingEnabled(@Nullable Output<Boolean> perSiteScalingEnabled) {
            $.perSiteScalingEnabled = perSiteScalingEnabled;
            return this;
        }

        /**
         * @param perSiteScalingEnabled Should Per Site Scaling be enabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder perSiteScalingEnabled(Boolean perSiteScalingEnabled) {
            return perSiteScalingEnabled(Output.of(perSiteScalingEnabled));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the AppService should exist. Changing this forces a new AppService to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the AppService should exist. Changing this forces a new AppService to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param skuName The SKU for the plan. Possible values include `B1`, `B2`, `B3`, `D1`, `F1`, `FREE`, `I1`, `I2`, `I3`, `I1v2`, `I2v2`, `I3v2`, `P1v2`, `P2v2`, `P3v2`, `P1v3`, `P2v3`, `P3v3`, `S1`, `S2`, `S3`, `SHARED`, `EP1`, `EP2`, `EP3`, `WS1`, `WS2`, and `WS3`.
         * 
         * @return builder
         * 
         */
        public Builder skuName(Output<String> skuName) {
            $.skuName = skuName;
            return this;
        }

        /**
         * @param skuName The SKU for the plan. Possible values include `B1`, `B2`, `B3`, `D1`, `F1`, `FREE`, `I1`, `I2`, `I3`, `I1v2`, `I2v2`, `I3v2`, `P1v2`, `P2v2`, `P3v2`, `P1v3`, `P2v3`, `P3v3`, `S1`, `S2`, `S3`, `SHARED`, `EP1`, `EP2`, `EP3`, `WS1`, `WS2`, and `WS3`.
         * 
         * @return builder
         * 
         */
        public Builder skuName(String skuName) {
            return skuName(Output.of(skuName));
        }

        /**
         * @param tags A mapping of tags which should be assigned to the AppService.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags which should be assigned to the AppService.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param workerCount The number of Workers (instances) to be allocated.
         * 
         * @return builder
         * 
         */
        public Builder workerCount(@Nullable Output<Integer> workerCount) {
            $.workerCount = workerCount;
            return this;
        }

        /**
         * @param workerCount The number of Workers (instances) to be allocated.
         * 
         * @return builder
         * 
         */
        public Builder workerCount(Integer workerCount) {
            return workerCount(Output.of(workerCount));
        }

        /**
         * @param zoneBalancingEnabled Should the Service Plan balance across Availability Zones in the region. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder zoneBalancingEnabled(@Nullable Output<Boolean> zoneBalancingEnabled) {
            $.zoneBalancingEnabled = zoneBalancingEnabled;
            return this;
        }

        /**
         * @param zoneBalancingEnabled Should the Service Plan balance across Availability Zones in the region. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder zoneBalancingEnabled(Boolean zoneBalancingEnabled) {
            return zoneBalancingEnabled(Output.of(zoneBalancingEnabled));
        }

        public ServicePlanArgs build() {
            $.osType = Objects.requireNonNull($.osType, "expected parameter 'osType' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.skuName = Objects.requireNonNull($.skuName, "expected parameter 'skuName' to be non-null");
            return $;
        }
    }

}
