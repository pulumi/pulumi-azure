// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderFeaturesKeyVaultArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderFeaturesKeyVaultArgs Empty = new ProviderFeaturesKeyVaultArgs();

    /**
     * When enabled soft-deleted `azure.keyvault.KeyVault` resources will be permanently deleted (e.g purged), when destroyed
     * 
     */
    @Import(name="purgeSoftDeleteOnDestroy")
    private @Nullable Output<Boolean> purgeSoftDeleteOnDestroy;

    /**
     * @return When enabled soft-deleted `azure.keyvault.KeyVault` resources will be permanently deleted (e.g purged), when destroyed
     * 
     */
    public Optional<Output<Boolean>> purgeSoftDeleteOnDestroy() {
        return Optional.ofNullable(this.purgeSoftDeleteOnDestroy);
    }

    /**
     * When enabled soft-deleted `azure.keyvault.Certificate` resources will be permanently deleted (e.g purged), when destroyed
     * 
     */
    @Import(name="purgeSoftDeletedCertificatesOnDestroy")
    private @Nullable Output<Boolean> purgeSoftDeletedCertificatesOnDestroy;

    /**
     * @return When enabled soft-deleted `azure.keyvault.Certificate` resources will be permanently deleted (e.g purged), when destroyed
     * 
     */
    public Optional<Output<Boolean>> purgeSoftDeletedCertificatesOnDestroy() {
        return Optional.ofNullable(this.purgeSoftDeletedCertificatesOnDestroy);
    }

    /**
     * When enabled soft-deleted `azure.keyvault.ManagedHardwareSecurityModule` resources will be permanently deleted (e.g purged), when destroyed
     * 
     */
    @Import(name="purgeSoftDeletedHardwareSecurityModulesOnDestroy")
    private @Nullable Output<Boolean> purgeSoftDeletedHardwareSecurityModulesOnDestroy;

    /**
     * @return When enabled soft-deleted `azure.keyvault.ManagedHardwareSecurityModule` resources will be permanently deleted (e.g purged), when destroyed
     * 
     */
    public Optional<Output<Boolean>> purgeSoftDeletedHardwareSecurityModulesOnDestroy() {
        return Optional.ofNullable(this.purgeSoftDeletedHardwareSecurityModulesOnDestroy);
    }

    /**
     * When enabled soft-deleted `azure.keyvault.Key` resources will be permanently deleted (e.g purged), when destroyed
     * 
     */
    @Import(name="purgeSoftDeletedKeysOnDestroy")
    private @Nullable Output<Boolean> purgeSoftDeletedKeysOnDestroy;

    /**
     * @return When enabled soft-deleted `azure.keyvault.Key` resources will be permanently deleted (e.g purged), when destroyed
     * 
     */
    public Optional<Output<Boolean>> purgeSoftDeletedKeysOnDestroy() {
        return Optional.ofNullable(this.purgeSoftDeletedKeysOnDestroy);
    }

    /**
     * When enabled soft-deleted `azure.keyvault.Secret` resources will be permanently deleted (e.g purged), when destroyed
     * 
     */
    @Import(name="purgeSoftDeletedSecretsOnDestroy")
    private @Nullable Output<Boolean> purgeSoftDeletedSecretsOnDestroy;

    /**
     * @return When enabled soft-deleted `azure.keyvault.Secret` resources will be permanently deleted (e.g purged), when destroyed
     * 
     */
    public Optional<Output<Boolean>> purgeSoftDeletedSecretsOnDestroy() {
        return Optional.ofNullable(this.purgeSoftDeletedSecretsOnDestroy);
    }

    /**
     * When enabled soft-deleted `azure.keyvault.Certificate` resources will be restored, instead of creating new ones
     * 
     */
    @Import(name="recoverSoftDeletedCertificates")
    private @Nullable Output<Boolean> recoverSoftDeletedCertificates;

    /**
     * @return When enabled soft-deleted `azure.keyvault.Certificate` resources will be restored, instead of creating new ones
     * 
     */
    public Optional<Output<Boolean>> recoverSoftDeletedCertificates() {
        return Optional.ofNullable(this.recoverSoftDeletedCertificates);
    }

    /**
     * When enabled soft-deleted `azure.keyvault.KeyVault` resources will be restored, instead of creating new ones
     * 
     */
    @Import(name="recoverSoftDeletedKeyVaults")
    private @Nullable Output<Boolean> recoverSoftDeletedKeyVaults;

    /**
     * @return When enabled soft-deleted `azure.keyvault.KeyVault` resources will be restored, instead of creating new ones
     * 
     */
    public Optional<Output<Boolean>> recoverSoftDeletedKeyVaults() {
        return Optional.ofNullable(this.recoverSoftDeletedKeyVaults);
    }

    /**
     * When enabled soft-deleted `azure.keyvault.Key` resources will be restored, instead of creating new ones
     * 
     */
    @Import(name="recoverSoftDeletedKeys")
    private @Nullable Output<Boolean> recoverSoftDeletedKeys;

    /**
     * @return When enabled soft-deleted `azure.keyvault.Key` resources will be restored, instead of creating new ones
     * 
     */
    public Optional<Output<Boolean>> recoverSoftDeletedKeys() {
        return Optional.ofNullable(this.recoverSoftDeletedKeys);
    }

    /**
     * When enabled soft-deleted `azure.keyvault.Secret` resources will be restored, instead of creating new ones
     * 
     */
    @Import(name="recoverSoftDeletedSecrets")
    private @Nullable Output<Boolean> recoverSoftDeletedSecrets;

    /**
     * @return When enabled soft-deleted `azure.keyvault.Secret` resources will be restored, instead of creating new ones
     * 
     */
    public Optional<Output<Boolean>> recoverSoftDeletedSecrets() {
        return Optional.ofNullable(this.recoverSoftDeletedSecrets);
    }

    private ProviderFeaturesKeyVaultArgs() {}

    private ProviderFeaturesKeyVaultArgs(ProviderFeaturesKeyVaultArgs $) {
        this.purgeSoftDeleteOnDestroy = $.purgeSoftDeleteOnDestroy;
        this.purgeSoftDeletedCertificatesOnDestroy = $.purgeSoftDeletedCertificatesOnDestroy;
        this.purgeSoftDeletedHardwareSecurityModulesOnDestroy = $.purgeSoftDeletedHardwareSecurityModulesOnDestroy;
        this.purgeSoftDeletedKeysOnDestroy = $.purgeSoftDeletedKeysOnDestroy;
        this.purgeSoftDeletedSecretsOnDestroy = $.purgeSoftDeletedSecretsOnDestroy;
        this.recoverSoftDeletedCertificates = $.recoverSoftDeletedCertificates;
        this.recoverSoftDeletedKeyVaults = $.recoverSoftDeletedKeyVaults;
        this.recoverSoftDeletedKeys = $.recoverSoftDeletedKeys;
        this.recoverSoftDeletedSecrets = $.recoverSoftDeletedSecrets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderFeaturesKeyVaultArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderFeaturesKeyVaultArgs $;

        public Builder() {
            $ = new ProviderFeaturesKeyVaultArgs();
        }

        public Builder(ProviderFeaturesKeyVaultArgs defaults) {
            $ = new ProviderFeaturesKeyVaultArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param purgeSoftDeleteOnDestroy When enabled soft-deleted `azure.keyvault.KeyVault` resources will be permanently deleted (e.g purged), when destroyed
         * 
         * @return builder
         * 
         */
        public Builder purgeSoftDeleteOnDestroy(@Nullable Output<Boolean> purgeSoftDeleteOnDestroy) {
            $.purgeSoftDeleteOnDestroy = purgeSoftDeleteOnDestroy;
            return this;
        }

        /**
         * @param purgeSoftDeleteOnDestroy When enabled soft-deleted `azure.keyvault.KeyVault` resources will be permanently deleted (e.g purged), when destroyed
         * 
         * @return builder
         * 
         */
        public Builder purgeSoftDeleteOnDestroy(Boolean purgeSoftDeleteOnDestroy) {
            return purgeSoftDeleteOnDestroy(Output.of(purgeSoftDeleteOnDestroy));
        }

        /**
         * @param purgeSoftDeletedCertificatesOnDestroy When enabled soft-deleted `azure.keyvault.Certificate` resources will be permanently deleted (e.g purged), when destroyed
         * 
         * @return builder
         * 
         */
        public Builder purgeSoftDeletedCertificatesOnDestroy(@Nullable Output<Boolean> purgeSoftDeletedCertificatesOnDestroy) {
            $.purgeSoftDeletedCertificatesOnDestroy = purgeSoftDeletedCertificatesOnDestroy;
            return this;
        }

        /**
         * @param purgeSoftDeletedCertificatesOnDestroy When enabled soft-deleted `azure.keyvault.Certificate` resources will be permanently deleted (e.g purged), when destroyed
         * 
         * @return builder
         * 
         */
        public Builder purgeSoftDeletedCertificatesOnDestroy(Boolean purgeSoftDeletedCertificatesOnDestroy) {
            return purgeSoftDeletedCertificatesOnDestroy(Output.of(purgeSoftDeletedCertificatesOnDestroy));
        }

        /**
         * @param purgeSoftDeletedHardwareSecurityModulesOnDestroy When enabled soft-deleted `azure.keyvault.ManagedHardwareSecurityModule` resources will be permanently deleted (e.g purged), when destroyed
         * 
         * @return builder
         * 
         */
        public Builder purgeSoftDeletedHardwareSecurityModulesOnDestroy(@Nullable Output<Boolean> purgeSoftDeletedHardwareSecurityModulesOnDestroy) {
            $.purgeSoftDeletedHardwareSecurityModulesOnDestroy = purgeSoftDeletedHardwareSecurityModulesOnDestroy;
            return this;
        }

        /**
         * @param purgeSoftDeletedHardwareSecurityModulesOnDestroy When enabled soft-deleted `azure.keyvault.ManagedHardwareSecurityModule` resources will be permanently deleted (e.g purged), when destroyed
         * 
         * @return builder
         * 
         */
        public Builder purgeSoftDeletedHardwareSecurityModulesOnDestroy(Boolean purgeSoftDeletedHardwareSecurityModulesOnDestroy) {
            return purgeSoftDeletedHardwareSecurityModulesOnDestroy(Output.of(purgeSoftDeletedHardwareSecurityModulesOnDestroy));
        }

        /**
         * @param purgeSoftDeletedKeysOnDestroy When enabled soft-deleted `azure.keyvault.Key` resources will be permanently deleted (e.g purged), when destroyed
         * 
         * @return builder
         * 
         */
        public Builder purgeSoftDeletedKeysOnDestroy(@Nullable Output<Boolean> purgeSoftDeletedKeysOnDestroy) {
            $.purgeSoftDeletedKeysOnDestroy = purgeSoftDeletedKeysOnDestroy;
            return this;
        }

        /**
         * @param purgeSoftDeletedKeysOnDestroy When enabled soft-deleted `azure.keyvault.Key` resources will be permanently deleted (e.g purged), when destroyed
         * 
         * @return builder
         * 
         */
        public Builder purgeSoftDeletedKeysOnDestroy(Boolean purgeSoftDeletedKeysOnDestroy) {
            return purgeSoftDeletedKeysOnDestroy(Output.of(purgeSoftDeletedKeysOnDestroy));
        }

        /**
         * @param purgeSoftDeletedSecretsOnDestroy When enabled soft-deleted `azure.keyvault.Secret` resources will be permanently deleted (e.g purged), when destroyed
         * 
         * @return builder
         * 
         */
        public Builder purgeSoftDeletedSecretsOnDestroy(@Nullable Output<Boolean> purgeSoftDeletedSecretsOnDestroy) {
            $.purgeSoftDeletedSecretsOnDestroy = purgeSoftDeletedSecretsOnDestroy;
            return this;
        }

        /**
         * @param purgeSoftDeletedSecretsOnDestroy When enabled soft-deleted `azure.keyvault.Secret` resources will be permanently deleted (e.g purged), when destroyed
         * 
         * @return builder
         * 
         */
        public Builder purgeSoftDeletedSecretsOnDestroy(Boolean purgeSoftDeletedSecretsOnDestroy) {
            return purgeSoftDeletedSecretsOnDestroy(Output.of(purgeSoftDeletedSecretsOnDestroy));
        }

        /**
         * @param recoverSoftDeletedCertificates When enabled soft-deleted `azure.keyvault.Certificate` resources will be restored, instead of creating new ones
         * 
         * @return builder
         * 
         */
        public Builder recoverSoftDeletedCertificates(@Nullable Output<Boolean> recoverSoftDeletedCertificates) {
            $.recoverSoftDeletedCertificates = recoverSoftDeletedCertificates;
            return this;
        }

        /**
         * @param recoverSoftDeletedCertificates When enabled soft-deleted `azure.keyvault.Certificate` resources will be restored, instead of creating new ones
         * 
         * @return builder
         * 
         */
        public Builder recoverSoftDeletedCertificates(Boolean recoverSoftDeletedCertificates) {
            return recoverSoftDeletedCertificates(Output.of(recoverSoftDeletedCertificates));
        }

        /**
         * @param recoverSoftDeletedKeyVaults When enabled soft-deleted `azure.keyvault.KeyVault` resources will be restored, instead of creating new ones
         * 
         * @return builder
         * 
         */
        public Builder recoverSoftDeletedKeyVaults(@Nullable Output<Boolean> recoverSoftDeletedKeyVaults) {
            $.recoverSoftDeletedKeyVaults = recoverSoftDeletedKeyVaults;
            return this;
        }

        /**
         * @param recoverSoftDeletedKeyVaults When enabled soft-deleted `azure.keyvault.KeyVault` resources will be restored, instead of creating new ones
         * 
         * @return builder
         * 
         */
        public Builder recoverSoftDeletedKeyVaults(Boolean recoverSoftDeletedKeyVaults) {
            return recoverSoftDeletedKeyVaults(Output.of(recoverSoftDeletedKeyVaults));
        }

        /**
         * @param recoverSoftDeletedKeys When enabled soft-deleted `azure.keyvault.Key` resources will be restored, instead of creating new ones
         * 
         * @return builder
         * 
         */
        public Builder recoverSoftDeletedKeys(@Nullable Output<Boolean> recoverSoftDeletedKeys) {
            $.recoverSoftDeletedKeys = recoverSoftDeletedKeys;
            return this;
        }

        /**
         * @param recoverSoftDeletedKeys When enabled soft-deleted `azure.keyvault.Key` resources will be restored, instead of creating new ones
         * 
         * @return builder
         * 
         */
        public Builder recoverSoftDeletedKeys(Boolean recoverSoftDeletedKeys) {
            return recoverSoftDeletedKeys(Output.of(recoverSoftDeletedKeys));
        }

        /**
         * @param recoverSoftDeletedSecrets When enabled soft-deleted `azure.keyvault.Secret` resources will be restored, instead of creating new ones
         * 
         * @return builder
         * 
         */
        public Builder recoverSoftDeletedSecrets(@Nullable Output<Boolean> recoverSoftDeletedSecrets) {
            $.recoverSoftDeletedSecrets = recoverSoftDeletedSecrets;
            return this;
        }

        /**
         * @param recoverSoftDeletedSecrets When enabled soft-deleted `azure.keyvault.Secret` resources will be restored, instead of creating new ones
         * 
         * @return builder
         * 
         */
        public Builder recoverSoftDeletedSecrets(Boolean recoverSoftDeletedSecrets) {
            return recoverSoftDeletedSecrets(Output.of(recoverSoftDeletedSecrets));
        }

        public ProviderFeaturesKeyVaultArgs build() {
            return $;
        }
    }

}
