// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring;

import com.pulumi.azure.monitoring.inputs.LogzMonitorPlanArgs;
import com.pulumi.azure.monitoring.inputs.LogzMonitorUserArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogzMonitorArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogzMonitorArgs Empty = new LogzMonitorArgs();

    /**
     * Name of the Logz organization. Changing this forces a new logz Monitor to be created.
     * 
     */
    @Import(name="companyName")
    private @Nullable Output<String> companyName;

    /**
     * @return Name of the Logz organization. Changing this forces a new logz Monitor to be created.
     * 
     */
    public Optional<Output<String>> companyName() {
        return Optional.ofNullable(this.companyName);
    }

    /**
     * Whether the resource monitoring is enabled? Defaults to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the resource monitoring is enabled? Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The ID of the Enterprise App. Changing this forces a new logz Monitor to be created.
     * 
     * &gt; **NOTE** Please follow [Set up Logz.io single sign-on](https://docs.microsoft.com/azure/partner-solutions/logzio/setup-sso) to create the ID of the Enterprise App.
     * 
     */
    @Import(name="enterpriseAppId")
    private @Nullable Output<String> enterpriseAppId;

    /**
     * @return The ID of the Enterprise App. Changing this forces a new logz Monitor to be created.
     * 
     * &gt; **NOTE** Please follow [Set up Logz.io single sign-on](https://docs.microsoft.com/azure/partner-solutions/logzio/setup-sso) to create the ID of the Enterprise App.
     * 
     */
    public Optional<Output<String>> enterpriseAppId() {
        return Optional.ofNullable(this.enterpriseAppId);
    }

    /**
     * The Azure Region where the logz Monitor should exist. Changing this forces a new logz Monitor to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The Azure Region where the logz Monitor should exist. Changing this forces a new logz Monitor to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name which should be used for this logz Monitor. Changing this forces a new logz Monitor to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this logz Monitor. Changing this forces a new logz Monitor to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A `plan` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="plan", required=true)
    private Output<LogzMonitorPlanArgs> plan;

    /**
     * @return A `plan` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    public Output<LogzMonitorPlanArgs> plan() {
        return this.plan;
    }

    /**
     * The name of the Resource Group where the logz Monitor should exist. Changing this forces a new logz Monitor to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the logz Monitor should exist. Changing this forces a new logz Monitor to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * A mapping of tags which should be assigned to the logz Monitor.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the logz Monitor.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A `user` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="user", required=true)
    private Output<LogzMonitorUserArgs> user;

    /**
     * @return A `user` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    public Output<LogzMonitorUserArgs> user() {
        return this.user;
    }

    private LogzMonitorArgs() {}

    private LogzMonitorArgs(LogzMonitorArgs $) {
        this.companyName = $.companyName;
        this.enabled = $.enabled;
        this.enterpriseAppId = $.enterpriseAppId;
        this.location = $.location;
        this.name = $.name;
        this.plan = $.plan;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogzMonitorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogzMonitorArgs $;

        public Builder() {
            $ = new LogzMonitorArgs();
        }

        public Builder(LogzMonitorArgs defaults) {
            $ = new LogzMonitorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param companyName Name of the Logz organization. Changing this forces a new logz Monitor to be created.
         * 
         * @return builder
         * 
         */
        public Builder companyName(@Nullable Output<String> companyName) {
            $.companyName = companyName;
            return this;
        }

        /**
         * @param companyName Name of the Logz organization. Changing this forces a new logz Monitor to be created.
         * 
         * @return builder
         * 
         */
        public Builder companyName(String companyName) {
            return companyName(Output.of(companyName));
        }

        /**
         * @param enabled Whether the resource monitoring is enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the resource monitoring is enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param enterpriseAppId The ID of the Enterprise App. Changing this forces a new logz Monitor to be created.
         * 
         * &gt; **NOTE** Please follow [Set up Logz.io single sign-on](https://docs.microsoft.com/azure/partner-solutions/logzio/setup-sso) to create the ID of the Enterprise App.
         * 
         * @return builder
         * 
         */
        public Builder enterpriseAppId(@Nullable Output<String> enterpriseAppId) {
            $.enterpriseAppId = enterpriseAppId;
            return this;
        }

        /**
         * @param enterpriseAppId The ID of the Enterprise App. Changing this forces a new logz Monitor to be created.
         * 
         * &gt; **NOTE** Please follow [Set up Logz.io single sign-on](https://docs.microsoft.com/azure/partner-solutions/logzio/setup-sso) to create the ID of the Enterprise App.
         * 
         * @return builder
         * 
         */
        public Builder enterpriseAppId(String enterpriseAppId) {
            return enterpriseAppId(Output.of(enterpriseAppId));
        }

        /**
         * @param location The Azure Region where the logz Monitor should exist. Changing this forces a new logz Monitor to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The Azure Region where the logz Monitor should exist. Changing this forces a new logz Monitor to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name which should be used for this logz Monitor. Changing this forces a new logz Monitor to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this logz Monitor. Changing this forces a new logz Monitor to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param plan A `plan` block as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder plan(Output<LogzMonitorPlanArgs> plan) {
            $.plan = plan;
            return this;
        }

        /**
         * @param plan A `plan` block as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder plan(LogzMonitorPlanArgs plan) {
            return plan(Output.of(plan));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the logz Monitor should exist. Changing this forces a new logz Monitor to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the logz Monitor should exist. Changing this forces a new logz Monitor to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags A mapping of tags which should be assigned to the logz Monitor.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags which should be assigned to the logz Monitor.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param user A `user` block as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder user(Output<LogzMonitorUserArgs> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user A `user` block as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder user(LogzMonitorUserArgs user) {
            return user(Output.of(user));
        }

        public LogzMonitorArgs build() {
            if ($.plan == null) {
                throw new MissingRequiredPropertyException("LogzMonitorArgs", "plan");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("LogzMonitorArgs", "resourceGroupName");
            }
            if ($.user == null) {
                throw new MissingRequiredPropertyException("LogzMonitorArgs", "user");
            }
            return $;
        }
    }

}
