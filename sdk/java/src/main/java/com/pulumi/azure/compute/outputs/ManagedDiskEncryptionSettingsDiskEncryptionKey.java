// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class ManagedDiskEncryptionSettingsDiskEncryptionKey {
    /**
     * @return The URL to the Key Vault Secret used as the Disk Encryption Key. This can be found as `id` on the `azure.keyvault.Secret` resource.
     * 
     */
    private String secretUrl;
    /**
     * @return The ID of the source Key Vault. This can be found as `id` on the `azure.keyvault.KeyVault` resource.
     * 
     */
    private String sourceVaultId;

    private ManagedDiskEncryptionSettingsDiskEncryptionKey() {}
    /**
     * @return The URL to the Key Vault Secret used as the Disk Encryption Key. This can be found as `id` on the `azure.keyvault.Secret` resource.
     * 
     */
    public String secretUrl() {
        return this.secretUrl;
    }
    /**
     * @return The ID of the source Key Vault. This can be found as `id` on the `azure.keyvault.KeyVault` resource.
     * 
     */
    public String sourceVaultId() {
        return this.sourceVaultId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagedDiskEncryptionSettingsDiskEncryptionKey defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String secretUrl;
        private String sourceVaultId;
        public Builder() {}
        public Builder(ManagedDiskEncryptionSettingsDiskEncryptionKey defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.secretUrl = defaults.secretUrl;
    	      this.sourceVaultId = defaults.sourceVaultId;
        }

        @CustomType.Setter
        public Builder secretUrl(String secretUrl) {
            if (secretUrl == null) {
              throw new MissingRequiredPropertyException("ManagedDiskEncryptionSettingsDiskEncryptionKey", "secretUrl");
            }
            this.secretUrl = secretUrl;
            return this;
        }
        @CustomType.Setter
        public Builder sourceVaultId(String sourceVaultId) {
            if (sourceVaultId == null) {
              throw new MissingRequiredPropertyException("ManagedDiskEncryptionSettingsDiskEncryptionKey", "sourceVaultId");
            }
            this.sourceVaultId = sourceVaultId;
            return this;
        }
        public ManagedDiskEncryptionSettingsDiskEncryptionKey build() {
            final var _resultValue = new ManagedDiskEncryptionSettingsDiskEncryptionKey();
            _resultValue.secretUrl = secretUrl;
            _resultValue.sourceVaultId = sourceVaultId;
            return _resultValue;
        }
    }
}
