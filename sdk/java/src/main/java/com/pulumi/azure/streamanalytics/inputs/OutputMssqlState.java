// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.streamanalytics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OutputMssqlState extends com.pulumi.resources.ResourceArgs {

    public static final OutputMssqlState Empty = new OutputMssqlState();

    @Import(name="database")
    private @Nullable Output<String> database;

    public Optional<Output<String>> database() {
        return Optional.ofNullable(this.database);
    }

    /**
     * The max batch count to write to the SQL Database. Defaults to `10000`. Possible values are between `1` and `1073741824`.
     * 
     */
    @Import(name="maxBatchCount")
    private @Nullable Output<Double> maxBatchCount;

    /**
     * @return The max batch count to write to the SQL Database. Defaults to `10000`. Possible values are between `1` and `1073741824`.
     * 
     */
    public Optional<Output<Double>> maxBatchCount() {
        return Optional.ofNullable(this.maxBatchCount);
    }

    /**
     * The max writer count for the SQL Database. Defaults to `1`. Possible values are `0` which bases the writer count on the query partition and `1` which corresponds to a single writer.
     * 
     */
    @Import(name="maxWriterCount")
    private @Nullable Output<Double> maxWriterCount;

    /**
     * @return The max writer count for the SQL Database. Defaults to `1`. Possible values are `0` which bases the writer count on the query partition and `1` which corresponds to a single writer.
     * 
     */
    public Optional<Output<Double>> maxWriterCount() {
        return Optional.ofNullable(this.maxWriterCount);
    }

    /**
     * The name of the Stream Output. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Stream Output. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Password used together with username, to login to the Microsoft SQL Server. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Password used together with username, to login to the Microsoft SQL Server. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * The SQL server url. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="server")
    private @Nullable Output<String> server;

    /**
     * @return The SQL server url. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> server() {
        return Optional.ofNullable(this.server);
    }

    /**
     * The name of the Stream Analytics Job. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="streamAnalyticsJobName")
    private @Nullable Output<String> streamAnalyticsJobName;

    /**
     * @return The name of the Stream Analytics Job. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> streamAnalyticsJobName() {
        return Optional.ofNullable(this.streamAnalyticsJobName);
    }

    /**
     * Table in the database that the output points to. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="table")
    private @Nullable Output<String> table;

    /**
     * @return Table in the database that the output points to. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> table() {
        return Optional.ofNullable(this.table);
    }

    /**
     * Username used to login to the Microsoft SQL Server. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="user")
    private @Nullable Output<String> user;

    /**
     * @return Username used to login to the Microsoft SQL Server. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    private OutputMssqlState() {}

    private OutputMssqlState(OutputMssqlState $) {
        this.database = $.database;
        this.maxBatchCount = $.maxBatchCount;
        this.maxWriterCount = $.maxWriterCount;
        this.name = $.name;
        this.password = $.password;
        this.resourceGroupName = $.resourceGroupName;
        this.server = $.server;
        this.streamAnalyticsJobName = $.streamAnalyticsJobName;
        this.table = $.table;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OutputMssqlState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OutputMssqlState $;

        public Builder() {
            $ = new OutputMssqlState();
        }

        public Builder(OutputMssqlState defaults) {
            $ = new OutputMssqlState(Objects.requireNonNull(defaults));
        }

        public Builder database(@Nullable Output<String> database) {
            $.database = database;
            return this;
        }

        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param maxBatchCount The max batch count to write to the SQL Database. Defaults to `10000`. Possible values are between `1` and `1073741824`.
         * 
         * @return builder
         * 
         */
        public Builder maxBatchCount(@Nullable Output<Double> maxBatchCount) {
            $.maxBatchCount = maxBatchCount;
            return this;
        }

        /**
         * @param maxBatchCount The max batch count to write to the SQL Database. Defaults to `10000`. Possible values are between `1` and `1073741824`.
         * 
         * @return builder
         * 
         */
        public Builder maxBatchCount(Double maxBatchCount) {
            return maxBatchCount(Output.of(maxBatchCount));
        }

        /**
         * @param maxWriterCount The max writer count for the SQL Database. Defaults to `1`. Possible values are `0` which bases the writer count on the query partition and `1` which corresponds to a single writer.
         * 
         * @return builder
         * 
         */
        public Builder maxWriterCount(@Nullable Output<Double> maxWriterCount) {
            $.maxWriterCount = maxWriterCount;
            return this;
        }

        /**
         * @param maxWriterCount The max writer count for the SQL Database. Defaults to `1`. Possible values are `0` which bases the writer count on the query partition and `1` which corresponds to a single writer.
         * 
         * @return builder
         * 
         */
        public Builder maxWriterCount(Double maxWriterCount) {
            return maxWriterCount(Output.of(maxWriterCount));
        }

        /**
         * @param name The name of the Stream Output. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Stream Output. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param password Password used together with username, to login to the Microsoft SQL Server. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password used together with username, to login to the Microsoft SQL Server. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param server The SQL server url. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder server(@Nullable Output<String> server) {
            $.server = server;
            return this;
        }

        /**
         * @param server The SQL server url. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder server(String server) {
            return server(Output.of(server));
        }

        /**
         * @param streamAnalyticsJobName The name of the Stream Analytics Job. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder streamAnalyticsJobName(@Nullable Output<String> streamAnalyticsJobName) {
            $.streamAnalyticsJobName = streamAnalyticsJobName;
            return this;
        }

        /**
         * @param streamAnalyticsJobName The name of the Stream Analytics Job. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder streamAnalyticsJobName(String streamAnalyticsJobName) {
            return streamAnalyticsJobName(Output.of(streamAnalyticsJobName));
        }

        /**
         * @param table Table in the database that the output points to. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder table(@Nullable Output<String> table) {
            $.table = table;
            return this;
        }

        /**
         * @param table Table in the database that the output points to. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder table(String table) {
            return table(Output.of(table));
        }

        /**
         * @param user Username used to login to the Microsoft SQL Server. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user Username used to login to the Microsoft SQL Server. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        public OutputMssqlState build() {
            return $;
        }
    }

}
