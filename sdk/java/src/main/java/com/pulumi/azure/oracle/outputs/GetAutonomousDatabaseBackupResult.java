// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.oracle.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAutonomousDatabaseBackupResult {
    private Boolean automatic;
    /**
     * @return The backup OCID.
     * 
     */
    private String autonomousDatabaseBackupOcid;
    private String autonomousDatabaseId;
    /**
     * @return The OCID of the Autonomous Database OCID.
     * 
     */
    private String autonomousDatabaseOcid;
    private Double databaseBackupSizeInTbs;
    private String databaseVersion;
    /**
     * @return The user-friendly name of the backup.
     * 
     */
    private String displayName;
    /**
     * @return The ID of the Autonomous Database Backup.
     * 
     */
    private String id;
    /**
     * @return Information about the current lifecycle state of the backup.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The current state of the backup.
     * 
     */
    private String lifecycleState;
    /**
     * @return `- The Azure Region where the Autonomous Database Backup exists.
     * 
     */
    private String location;
    private String name;
    /**
     * @return The current provisioning state of the Autonomous Database Backup.
     * 
     */
    private String provisioningState;
    private Boolean restorable;
    /**
     * @return The retention period in days for the Autonomous Database Backup.
     * 
     */
    private Integer retentionPeriodInDays;
    /**
     * @return The date and time the backup will become unusable.
     * 
     */
    private String timeAvailableTil;
    /**
     * @return The date and time the backup was completed.
     * 
     */
    private String timeEnded;
    /**
     * @return The date and time the backup started.
     * 
     */
    private String timeStarted;
    private String type;

    private GetAutonomousDatabaseBackupResult() {}
    public Boolean automatic() {
        return this.automatic;
    }
    /**
     * @return The backup OCID.
     * 
     */
    public String autonomousDatabaseBackupOcid() {
        return this.autonomousDatabaseBackupOcid;
    }
    public String autonomousDatabaseId() {
        return this.autonomousDatabaseId;
    }
    /**
     * @return The OCID of the Autonomous Database OCID.
     * 
     */
    public String autonomousDatabaseOcid() {
        return this.autonomousDatabaseOcid;
    }
    public Double databaseBackupSizeInTbs() {
        return this.databaseBackupSizeInTbs;
    }
    public String databaseVersion() {
        return this.databaseVersion;
    }
    /**
     * @return The user-friendly name of the backup.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The ID of the Autonomous Database Backup.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Information about the current lifecycle state of the backup.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The current state of the backup.
     * 
     */
    public String lifecycleState() {
        return this.lifecycleState;
    }
    /**
     * @return `- The Azure Region where the Autonomous Database Backup exists.
     * 
     */
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The current provisioning state of the Autonomous Database Backup.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    public Boolean restorable() {
        return this.restorable;
    }
    /**
     * @return The retention period in days for the Autonomous Database Backup.
     * 
     */
    public Integer retentionPeriodInDays() {
        return this.retentionPeriodInDays;
    }
    /**
     * @return The date and time the backup will become unusable.
     * 
     */
    public String timeAvailableTil() {
        return this.timeAvailableTil;
    }
    /**
     * @return The date and time the backup was completed.
     * 
     */
    public String timeEnded() {
        return this.timeEnded;
    }
    /**
     * @return The date and time the backup started.
     * 
     */
    public String timeStarted() {
        return this.timeStarted;
    }
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAutonomousDatabaseBackupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean automatic;
        private String autonomousDatabaseBackupOcid;
        private String autonomousDatabaseId;
        private String autonomousDatabaseOcid;
        private Double databaseBackupSizeInTbs;
        private String databaseVersion;
        private String displayName;
        private String id;
        private String lifecycleDetails;
        private String lifecycleState;
        private String location;
        private String name;
        private String provisioningState;
        private Boolean restorable;
        private Integer retentionPeriodInDays;
        private String timeAvailableTil;
        private String timeEnded;
        private String timeStarted;
        private String type;
        public Builder() {}
        public Builder(GetAutonomousDatabaseBackupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.automatic = defaults.automatic;
    	      this.autonomousDatabaseBackupOcid = defaults.autonomousDatabaseBackupOcid;
    	      this.autonomousDatabaseId = defaults.autonomousDatabaseId;
    	      this.autonomousDatabaseOcid = defaults.autonomousDatabaseOcid;
    	      this.databaseBackupSizeInTbs = defaults.databaseBackupSizeInTbs;
    	      this.databaseVersion = defaults.databaseVersion;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.lifecycleState = defaults.lifecycleState;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.restorable = defaults.restorable;
    	      this.retentionPeriodInDays = defaults.retentionPeriodInDays;
    	      this.timeAvailableTil = defaults.timeAvailableTil;
    	      this.timeEnded = defaults.timeEnded;
    	      this.timeStarted = defaults.timeStarted;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder automatic(Boolean automatic) {
            if (automatic == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseBackupResult", "automatic");
            }
            this.automatic = automatic;
            return this;
        }
        @CustomType.Setter
        public Builder autonomousDatabaseBackupOcid(String autonomousDatabaseBackupOcid) {
            if (autonomousDatabaseBackupOcid == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseBackupResult", "autonomousDatabaseBackupOcid");
            }
            this.autonomousDatabaseBackupOcid = autonomousDatabaseBackupOcid;
            return this;
        }
        @CustomType.Setter
        public Builder autonomousDatabaseId(String autonomousDatabaseId) {
            if (autonomousDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseBackupResult", "autonomousDatabaseId");
            }
            this.autonomousDatabaseId = autonomousDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder autonomousDatabaseOcid(String autonomousDatabaseOcid) {
            if (autonomousDatabaseOcid == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseBackupResult", "autonomousDatabaseOcid");
            }
            this.autonomousDatabaseOcid = autonomousDatabaseOcid;
            return this;
        }
        @CustomType.Setter
        public Builder databaseBackupSizeInTbs(Double databaseBackupSizeInTbs) {
            if (databaseBackupSizeInTbs == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseBackupResult", "databaseBackupSizeInTbs");
            }
            this.databaseBackupSizeInTbs = databaseBackupSizeInTbs;
            return this;
        }
        @CustomType.Setter
        public Builder databaseVersion(String databaseVersion) {
            if (databaseVersion == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseBackupResult", "databaseVersion");
            }
            this.databaseVersion = databaseVersion;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseBackupResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseBackupResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseBackupResult", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleState(String lifecycleState) {
            if (lifecycleState == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseBackupResult", "lifecycleState");
            }
            this.lifecycleState = lifecycleState;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseBackupResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseBackupResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            if (provisioningState == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseBackupResult", "provisioningState");
            }
            this.provisioningState = provisioningState;
            return this;
        }
        @CustomType.Setter
        public Builder restorable(Boolean restorable) {
            if (restorable == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseBackupResult", "restorable");
            }
            this.restorable = restorable;
            return this;
        }
        @CustomType.Setter
        public Builder retentionPeriodInDays(Integer retentionPeriodInDays) {
            if (retentionPeriodInDays == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseBackupResult", "retentionPeriodInDays");
            }
            this.retentionPeriodInDays = retentionPeriodInDays;
            return this;
        }
        @CustomType.Setter
        public Builder timeAvailableTil(String timeAvailableTil) {
            if (timeAvailableTil == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseBackupResult", "timeAvailableTil");
            }
            this.timeAvailableTil = timeAvailableTil;
            return this;
        }
        @CustomType.Setter
        public Builder timeEnded(String timeEnded) {
            if (timeEnded == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseBackupResult", "timeEnded");
            }
            this.timeEnded = timeEnded;
            return this;
        }
        @CustomType.Setter
        public Builder timeStarted(String timeStarted) {
            if (timeStarted == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseBackupResult", "timeStarted");
            }
            this.timeStarted = timeStarted;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseBackupResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetAutonomousDatabaseBackupResult build() {
            final var _resultValue = new GetAutonomousDatabaseBackupResult();
            _resultValue.automatic = automatic;
            _resultValue.autonomousDatabaseBackupOcid = autonomousDatabaseBackupOcid;
            _resultValue.autonomousDatabaseId = autonomousDatabaseId;
            _resultValue.autonomousDatabaseOcid = autonomousDatabaseOcid;
            _resultValue.databaseBackupSizeInTbs = databaseBackupSizeInTbs;
            _resultValue.databaseVersion = databaseVersion;
            _resultValue.displayName = displayName;
            _resultValue.id = id;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.lifecycleState = lifecycleState;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.provisioningState = provisioningState;
            _resultValue.restorable = restorable;
            _resultValue.retentionPeriodInDays = retentionPeriodInDays;
            _resultValue.timeAvailableTil = timeAvailableTil;
            _resultValue.timeEnded = timeEnded;
            _resultValue.timeStarted = timeStarted;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
