// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.systemcenter.inputs;

import com.pulumi.azure.systemcenter.inputs.VirtualMachineManagerVirtualMachineInstanceHardwareArgs;
import com.pulumi.azure.systemcenter.inputs.VirtualMachineManagerVirtualMachineInstanceInfrastructureArgs;
import com.pulumi.azure.systemcenter.inputs.VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceArgs;
import com.pulumi.azure.systemcenter.inputs.VirtualMachineManagerVirtualMachineInstanceOperatingSystemArgs;
import com.pulumi.azure.systemcenter.inputs.VirtualMachineManagerVirtualMachineInstanceStorageDiskArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualMachineManagerVirtualMachineInstanceState extends com.pulumi.resources.ResourceArgs {

    public static final VirtualMachineManagerVirtualMachineInstanceState Empty = new VirtualMachineManagerVirtualMachineInstanceState();

    /**
     * The ID of the Custom Location for the System Center Virtual Machine Manager Virtual Machine Instance. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="customLocationId")
    private @Nullable Output<String> customLocationId;

    /**
     * @return The ID of the Custom Location for the System Center Virtual Machine Manager Virtual Machine Instance. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> customLocationId() {
        return Optional.ofNullable(this.customLocationId);
    }

    /**
     * A `hardware` block as defined below. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:** This resource will be restarted while updating `hardware`.
     * 
     */
    @Import(name="hardware")
    private @Nullable Output<VirtualMachineManagerVirtualMachineInstanceHardwareArgs> hardware;

    /**
     * @return A `hardware` block as defined below. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:** This resource will be restarted while updating `hardware`.
     * 
     */
    public Optional<Output<VirtualMachineManagerVirtualMachineInstanceHardwareArgs>> hardware() {
        return Optional.ofNullable(this.hardware);
    }

    /**
     * An `infrastructure` block as defined below.
     * 
     */
    @Import(name="infrastructure")
    private @Nullable Output<VirtualMachineManagerVirtualMachineInstanceInfrastructureArgs> infrastructure;

    /**
     * @return An `infrastructure` block as defined below.
     * 
     */
    public Optional<Output<VirtualMachineManagerVirtualMachineInstanceInfrastructureArgs>> infrastructure() {
        return Optional.ofNullable(this.infrastructure);
    }

    /**
     * A `networkInterface` block as defined below.
     * 
     * &gt; **Note:** This resource will be restarted while updating `networkInterface`.
     * 
     */
    @Import(name="networkInterfaces")
    private @Nullable Output<List<VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceArgs>> networkInterfaces;

    /**
     * @return A `networkInterface` block as defined below.
     * 
     * &gt; **Note:** This resource will be restarted while updating `networkInterface`.
     * 
     */
    public Optional<Output<List<VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceArgs>>> networkInterfaces() {
        return Optional.ofNullable(this.networkInterfaces);
    }

    /**
     * An `operatingSystem` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="operatingSystem")
    private @Nullable Output<VirtualMachineManagerVirtualMachineInstanceOperatingSystemArgs> operatingSystem;

    /**
     * @return An `operatingSystem` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<VirtualMachineManagerVirtualMachineInstanceOperatingSystemArgs>> operatingSystem() {
        return Optional.ofNullable(this.operatingSystem);
    }

    /**
     * The ID of the Hybrid Compute Machine where this System Center Virtual Machine Manager Virtual Machine Instance is stored. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="scopedResourceId")
    private @Nullable Output<String> scopedResourceId;

    /**
     * @return The ID of the Hybrid Compute Machine where this System Center Virtual Machine Manager Virtual Machine Instance is stored. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> scopedResourceId() {
        return Optional.ofNullable(this.scopedResourceId);
    }

    /**
     * A `storageDisk` block as defined below.
     * 
     * &gt; **Note:** This resource will be restarted while updating `storageDisk`.
     * 
     */
    @Import(name="storageDisks")
    private @Nullable Output<List<VirtualMachineManagerVirtualMachineInstanceStorageDiskArgs>> storageDisks;

    /**
     * @return A `storageDisk` block as defined below.
     * 
     * &gt; **Note:** This resource will be restarted while updating `storageDisk`.
     * 
     */
    public Optional<Output<List<VirtualMachineManagerVirtualMachineInstanceStorageDiskArgs>>> storageDisks() {
        return Optional.ofNullable(this.storageDisks);
    }

    /**
     * A list of IDs of System Center Virtual Machine Manager Availability Set.
     * 
     */
    @Import(name="systemCenterVirtualMachineManagerAvailabilitySetIds")
    private @Nullable Output<List<String>> systemCenterVirtualMachineManagerAvailabilitySetIds;

    /**
     * @return A list of IDs of System Center Virtual Machine Manager Availability Set.
     * 
     */
    public Optional<Output<List<String>>> systemCenterVirtualMachineManagerAvailabilitySetIds() {
        return Optional.ofNullable(this.systemCenterVirtualMachineManagerAvailabilitySetIds);
    }

    private VirtualMachineManagerVirtualMachineInstanceState() {}

    private VirtualMachineManagerVirtualMachineInstanceState(VirtualMachineManagerVirtualMachineInstanceState $) {
        this.customLocationId = $.customLocationId;
        this.hardware = $.hardware;
        this.infrastructure = $.infrastructure;
        this.networkInterfaces = $.networkInterfaces;
        this.operatingSystem = $.operatingSystem;
        this.scopedResourceId = $.scopedResourceId;
        this.storageDisks = $.storageDisks;
        this.systemCenterVirtualMachineManagerAvailabilitySetIds = $.systemCenterVirtualMachineManagerAvailabilitySetIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualMachineManagerVirtualMachineInstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualMachineManagerVirtualMachineInstanceState $;

        public Builder() {
            $ = new VirtualMachineManagerVirtualMachineInstanceState();
        }

        public Builder(VirtualMachineManagerVirtualMachineInstanceState defaults) {
            $ = new VirtualMachineManagerVirtualMachineInstanceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param customLocationId The ID of the Custom Location for the System Center Virtual Machine Manager Virtual Machine Instance. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder customLocationId(@Nullable Output<String> customLocationId) {
            $.customLocationId = customLocationId;
            return this;
        }

        /**
         * @param customLocationId The ID of the Custom Location for the System Center Virtual Machine Manager Virtual Machine Instance. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder customLocationId(String customLocationId) {
            return customLocationId(Output.of(customLocationId));
        }

        /**
         * @param hardware A `hardware` block as defined below. Changing this forces a new resource to be created.
         * 
         * &gt; **Note:** This resource will be restarted while updating `hardware`.
         * 
         * @return builder
         * 
         */
        public Builder hardware(@Nullable Output<VirtualMachineManagerVirtualMachineInstanceHardwareArgs> hardware) {
            $.hardware = hardware;
            return this;
        }

        /**
         * @param hardware A `hardware` block as defined below. Changing this forces a new resource to be created.
         * 
         * &gt; **Note:** This resource will be restarted while updating `hardware`.
         * 
         * @return builder
         * 
         */
        public Builder hardware(VirtualMachineManagerVirtualMachineInstanceHardwareArgs hardware) {
            return hardware(Output.of(hardware));
        }

        /**
         * @param infrastructure An `infrastructure` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder infrastructure(@Nullable Output<VirtualMachineManagerVirtualMachineInstanceInfrastructureArgs> infrastructure) {
            $.infrastructure = infrastructure;
            return this;
        }

        /**
         * @param infrastructure An `infrastructure` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder infrastructure(VirtualMachineManagerVirtualMachineInstanceInfrastructureArgs infrastructure) {
            return infrastructure(Output.of(infrastructure));
        }

        /**
         * @param networkInterfaces A `networkInterface` block as defined below.
         * 
         * &gt; **Note:** This resource will be restarted while updating `networkInterface`.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaces(@Nullable Output<List<VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceArgs>> networkInterfaces) {
            $.networkInterfaces = networkInterfaces;
            return this;
        }

        /**
         * @param networkInterfaces A `networkInterface` block as defined below.
         * 
         * &gt; **Note:** This resource will be restarted while updating `networkInterface`.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaces(List<VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceArgs> networkInterfaces) {
            return networkInterfaces(Output.of(networkInterfaces));
        }

        /**
         * @param networkInterfaces A `networkInterface` block as defined below.
         * 
         * &gt; **Note:** This resource will be restarted while updating `networkInterface`.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaces(VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceArgs... networkInterfaces) {
            return networkInterfaces(List.of(networkInterfaces));
        }

        /**
         * @param operatingSystem An `operatingSystem` block as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder operatingSystem(@Nullable Output<VirtualMachineManagerVirtualMachineInstanceOperatingSystemArgs> operatingSystem) {
            $.operatingSystem = operatingSystem;
            return this;
        }

        /**
         * @param operatingSystem An `operatingSystem` block as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder operatingSystem(VirtualMachineManagerVirtualMachineInstanceOperatingSystemArgs operatingSystem) {
            return operatingSystem(Output.of(operatingSystem));
        }

        /**
         * @param scopedResourceId The ID of the Hybrid Compute Machine where this System Center Virtual Machine Manager Virtual Machine Instance is stored. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder scopedResourceId(@Nullable Output<String> scopedResourceId) {
            $.scopedResourceId = scopedResourceId;
            return this;
        }

        /**
         * @param scopedResourceId The ID of the Hybrid Compute Machine where this System Center Virtual Machine Manager Virtual Machine Instance is stored. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder scopedResourceId(String scopedResourceId) {
            return scopedResourceId(Output.of(scopedResourceId));
        }

        /**
         * @param storageDisks A `storageDisk` block as defined below.
         * 
         * &gt; **Note:** This resource will be restarted while updating `storageDisk`.
         * 
         * @return builder
         * 
         */
        public Builder storageDisks(@Nullable Output<List<VirtualMachineManagerVirtualMachineInstanceStorageDiskArgs>> storageDisks) {
            $.storageDisks = storageDisks;
            return this;
        }

        /**
         * @param storageDisks A `storageDisk` block as defined below.
         * 
         * &gt; **Note:** This resource will be restarted while updating `storageDisk`.
         * 
         * @return builder
         * 
         */
        public Builder storageDisks(List<VirtualMachineManagerVirtualMachineInstanceStorageDiskArgs> storageDisks) {
            return storageDisks(Output.of(storageDisks));
        }

        /**
         * @param storageDisks A `storageDisk` block as defined below.
         * 
         * &gt; **Note:** This resource will be restarted while updating `storageDisk`.
         * 
         * @return builder
         * 
         */
        public Builder storageDisks(VirtualMachineManagerVirtualMachineInstanceStorageDiskArgs... storageDisks) {
            return storageDisks(List.of(storageDisks));
        }

        /**
         * @param systemCenterVirtualMachineManagerAvailabilitySetIds A list of IDs of System Center Virtual Machine Manager Availability Set.
         * 
         * @return builder
         * 
         */
        public Builder systemCenterVirtualMachineManagerAvailabilitySetIds(@Nullable Output<List<String>> systemCenterVirtualMachineManagerAvailabilitySetIds) {
            $.systemCenterVirtualMachineManagerAvailabilitySetIds = systemCenterVirtualMachineManagerAvailabilitySetIds;
            return this;
        }

        /**
         * @param systemCenterVirtualMachineManagerAvailabilitySetIds A list of IDs of System Center Virtual Machine Manager Availability Set.
         * 
         * @return builder
         * 
         */
        public Builder systemCenterVirtualMachineManagerAvailabilitySetIds(List<String> systemCenterVirtualMachineManagerAvailabilitySetIds) {
            return systemCenterVirtualMachineManagerAvailabilitySetIds(Output.of(systemCenterVirtualMachineManagerAvailabilitySetIds));
        }

        /**
         * @param systemCenterVirtualMachineManagerAvailabilitySetIds A list of IDs of System Center Virtual Machine Manager Availability Set.
         * 
         * @return builder
         * 
         */
        public Builder systemCenterVirtualMachineManagerAvailabilitySetIds(String... systemCenterVirtualMachineManagerAvailabilitySetIds) {
            return systemCenterVirtualMachineManagerAvailabilitySetIds(List.of(systemCenterVirtualMachineManagerAvailabilitySetIds));
        }

        public VirtualMachineManagerVirtualMachineInstanceState build() {
            return $;
        }
    }

}
