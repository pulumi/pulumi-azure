// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.nginx.inputs;

import com.pulumi.azure.nginx.inputs.ConfigurationConfigFileArgs;
import com.pulumi.azure.nginx.inputs.ConfigurationProtectedFileArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigurationState extends com.pulumi.resources.ResourceArgs {

    public static final ConfigurationState Empty = new ConfigurationState();

    /**
     * One or more `config_file` blocks as defined below.
     * 
     */
    @Import(name="configFiles")
    private @Nullable Output<List<ConfigurationConfigFileArgs>> configFiles;

    /**
     * @return One or more `config_file` blocks as defined below.
     * 
     */
    public Optional<Output<List<ConfigurationConfigFileArgs>>> configFiles() {
        return Optional.ofNullable(this.configFiles);
    }

    /**
     * The ID of the Nginx Deployment. Changing this forces a new Nginx Configuration to be created.
     * 
     */
    @Import(name="nginxDeploymentId")
    private @Nullable Output<String> nginxDeploymentId;

    /**
     * @return The ID of the Nginx Deployment. Changing this forces a new Nginx Configuration to be created.
     * 
     */
    public Optional<Output<String>> nginxDeploymentId() {
        return Optional.ofNullable(this.nginxDeploymentId);
    }

    /**
     * Specify the package data for this configuration.
     * 
     */
    @Import(name="packageData")
    private @Nullable Output<String> packageData;

    /**
     * @return Specify the package data for this configuration.
     * 
     */
    public Optional<Output<String>> packageData() {
        return Optional.ofNullable(this.packageData);
    }

    /**
     * One or more `protected_file` blocks with sensitive information as defined below. If specified `config_file` must also be specified.
     * 
     */
    @Import(name="protectedFiles")
    private @Nullable Output<List<ConfigurationProtectedFileArgs>> protectedFiles;

    /**
     * @return One or more `protected_file` blocks with sensitive information as defined below. If specified `config_file` must also be specified.
     * 
     */
    public Optional<Output<List<ConfigurationProtectedFileArgs>>> protectedFiles() {
        return Optional.ofNullable(this.protectedFiles);
    }

    /**
     * Specify the root file path of this Nginx Configuration.
     * 
     */
    @Import(name="rootFile")
    private @Nullable Output<String> rootFile;

    /**
     * @return Specify the root file path of this Nginx Configuration.
     * 
     */
    public Optional<Output<String>> rootFile() {
        return Optional.ofNullable(this.rootFile);
    }

    private ConfigurationState() {}

    private ConfigurationState(ConfigurationState $) {
        this.configFiles = $.configFiles;
        this.nginxDeploymentId = $.nginxDeploymentId;
        this.packageData = $.packageData;
        this.protectedFiles = $.protectedFiles;
        this.rootFile = $.rootFile;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigurationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigurationState $;

        public Builder() {
            $ = new ConfigurationState();
        }

        public Builder(ConfigurationState defaults) {
            $ = new ConfigurationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param configFiles One or more `config_file` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder configFiles(@Nullable Output<List<ConfigurationConfigFileArgs>> configFiles) {
            $.configFiles = configFiles;
            return this;
        }

        /**
         * @param configFiles One or more `config_file` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder configFiles(List<ConfigurationConfigFileArgs> configFiles) {
            return configFiles(Output.of(configFiles));
        }

        /**
         * @param configFiles One or more `config_file` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder configFiles(ConfigurationConfigFileArgs... configFiles) {
            return configFiles(List.of(configFiles));
        }

        /**
         * @param nginxDeploymentId The ID of the Nginx Deployment. Changing this forces a new Nginx Configuration to be created.
         * 
         * @return builder
         * 
         */
        public Builder nginxDeploymentId(@Nullable Output<String> nginxDeploymentId) {
            $.nginxDeploymentId = nginxDeploymentId;
            return this;
        }

        /**
         * @param nginxDeploymentId The ID of the Nginx Deployment. Changing this forces a new Nginx Configuration to be created.
         * 
         * @return builder
         * 
         */
        public Builder nginxDeploymentId(String nginxDeploymentId) {
            return nginxDeploymentId(Output.of(nginxDeploymentId));
        }

        /**
         * @param packageData Specify the package data for this configuration.
         * 
         * @return builder
         * 
         */
        public Builder packageData(@Nullable Output<String> packageData) {
            $.packageData = packageData;
            return this;
        }

        /**
         * @param packageData Specify the package data for this configuration.
         * 
         * @return builder
         * 
         */
        public Builder packageData(String packageData) {
            return packageData(Output.of(packageData));
        }

        /**
         * @param protectedFiles One or more `protected_file` blocks with sensitive information as defined below. If specified `config_file` must also be specified.
         * 
         * @return builder
         * 
         */
        public Builder protectedFiles(@Nullable Output<List<ConfigurationProtectedFileArgs>> protectedFiles) {
            $.protectedFiles = protectedFiles;
            return this;
        }

        /**
         * @param protectedFiles One or more `protected_file` blocks with sensitive information as defined below. If specified `config_file` must also be specified.
         * 
         * @return builder
         * 
         */
        public Builder protectedFiles(List<ConfigurationProtectedFileArgs> protectedFiles) {
            return protectedFiles(Output.of(protectedFiles));
        }

        /**
         * @param protectedFiles One or more `protected_file` blocks with sensitive information as defined below. If specified `config_file` must also be specified.
         * 
         * @return builder
         * 
         */
        public Builder protectedFiles(ConfigurationProtectedFileArgs... protectedFiles) {
            return protectedFiles(List.of(protectedFiles));
        }

        /**
         * @param rootFile Specify the root file path of this Nginx Configuration.
         * 
         * @return builder
         * 
         */
        public Builder rootFile(@Nullable Output<String> rootFile) {
            $.rootFile = rootFile;
            return this;
        }

        /**
         * @param rootFile Specify the root file path of this Nginx Configuration.
         * 
         * @return builder
         * 
         */
        public Builder rootFile(String rootFile) {
            return rootFile(Output.of(rootFile));
        }

        public ConfigurationState build() {
            return $;
        }
    }

}
