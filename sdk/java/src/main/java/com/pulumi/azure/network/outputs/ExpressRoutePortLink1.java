// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ExpressRoutePortLink1 {
    /**
     * @return Whether enable administration state on the Express Route Port Link? Defaults to `false`.
     * 
     */
    private @Nullable Boolean adminEnabled;
    /**
     * @return The connector type of the Express Route Port Link.
     * 
     */
    private @Nullable String connectorType;
    /**
     * @return The ID of this Express Route Port Link.
     * 
     */
    private @Nullable String id;
    /**
     * @return The interface name of the Azure router associated with the Express Route Port Link.
     * 
     */
    private @Nullable String interfaceName;
    /**
     * @return The ID of the Key Vault Secret that contains the Mac security CAK key for this Express Route Port Link.
     * 
     */
    private @Nullable String macsecCakKeyvaultSecretId;
    /**
     * @return The MACSec cipher used for this Express Route Port Link. Possible values are `GcmAes128` and `GcmAes256`. Defaults to `GcmAes128`.
     * 
     */
    private @Nullable String macsecCipher;
    /**
     * @return The ID of the Key Vault Secret that contains the MACSec CKN key for this Express Route Port Link.
     * 
     */
    private @Nullable String macsecCknKeyvaultSecretId;
    /**
     * @return Should Secure Channel Identifier on the Express Route Port Link be enabled? Defaults to `false`.
     * 
     * &gt; **NOTE** `macsec_ckn_keyvault_secret_id` and `macsec_cak_keyvault_secret_id` should be used together with `identity`, so that the Express Route Port instance have the right permission to access the Key Vault.
     * 
     */
    private @Nullable Boolean macsecSciEnabled;
    /**
     * @return The ID that maps from the Express Route Port Link to the patch panel port.
     * 
     */
    private @Nullable String patchPanelId;
    /**
     * @return The ID that maps from the patch panel port to the rack.
     * 
     */
    private @Nullable String rackId;
    /**
     * @return The name of the Azure router associated with the Express Route Port Link.
     * 
     */
    private @Nullable String routerName;

    private ExpressRoutePortLink1() {}
    /**
     * @return Whether enable administration state on the Express Route Port Link? Defaults to `false`.
     * 
     */
    public Optional<Boolean> adminEnabled() {
        return Optional.ofNullable(this.adminEnabled);
    }
    /**
     * @return The connector type of the Express Route Port Link.
     * 
     */
    public Optional<String> connectorType() {
        return Optional.ofNullable(this.connectorType);
    }
    /**
     * @return The ID of this Express Route Port Link.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The interface name of the Azure router associated with the Express Route Port Link.
     * 
     */
    public Optional<String> interfaceName() {
        return Optional.ofNullable(this.interfaceName);
    }
    /**
     * @return The ID of the Key Vault Secret that contains the Mac security CAK key for this Express Route Port Link.
     * 
     */
    public Optional<String> macsecCakKeyvaultSecretId() {
        return Optional.ofNullable(this.macsecCakKeyvaultSecretId);
    }
    /**
     * @return The MACSec cipher used for this Express Route Port Link. Possible values are `GcmAes128` and `GcmAes256`. Defaults to `GcmAes128`.
     * 
     */
    public Optional<String> macsecCipher() {
        return Optional.ofNullable(this.macsecCipher);
    }
    /**
     * @return The ID of the Key Vault Secret that contains the MACSec CKN key for this Express Route Port Link.
     * 
     */
    public Optional<String> macsecCknKeyvaultSecretId() {
        return Optional.ofNullable(this.macsecCknKeyvaultSecretId);
    }
    /**
     * @return Should Secure Channel Identifier on the Express Route Port Link be enabled? Defaults to `false`.
     * 
     * &gt; **NOTE** `macsec_ckn_keyvault_secret_id` and `macsec_cak_keyvault_secret_id` should be used together with `identity`, so that the Express Route Port instance have the right permission to access the Key Vault.
     * 
     */
    public Optional<Boolean> macsecSciEnabled() {
        return Optional.ofNullable(this.macsecSciEnabled);
    }
    /**
     * @return The ID that maps from the Express Route Port Link to the patch panel port.
     * 
     */
    public Optional<String> patchPanelId() {
        return Optional.ofNullable(this.patchPanelId);
    }
    /**
     * @return The ID that maps from the patch panel port to the rack.
     * 
     */
    public Optional<String> rackId() {
        return Optional.ofNullable(this.rackId);
    }
    /**
     * @return The name of the Azure router associated with the Express Route Port Link.
     * 
     */
    public Optional<String> routerName() {
        return Optional.ofNullable(this.routerName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExpressRoutePortLink1 defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean adminEnabled;
        private @Nullable String connectorType;
        private @Nullable String id;
        private @Nullable String interfaceName;
        private @Nullable String macsecCakKeyvaultSecretId;
        private @Nullable String macsecCipher;
        private @Nullable String macsecCknKeyvaultSecretId;
        private @Nullable Boolean macsecSciEnabled;
        private @Nullable String patchPanelId;
        private @Nullable String rackId;
        private @Nullable String routerName;
        public Builder() {}
        public Builder(ExpressRoutePortLink1 defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminEnabled = defaults.adminEnabled;
    	      this.connectorType = defaults.connectorType;
    	      this.id = defaults.id;
    	      this.interfaceName = defaults.interfaceName;
    	      this.macsecCakKeyvaultSecretId = defaults.macsecCakKeyvaultSecretId;
    	      this.macsecCipher = defaults.macsecCipher;
    	      this.macsecCknKeyvaultSecretId = defaults.macsecCknKeyvaultSecretId;
    	      this.macsecSciEnabled = defaults.macsecSciEnabled;
    	      this.patchPanelId = defaults.patchPanelId;
    	      this.rackId = defaults.rackId;
    	      this.routerName = defaults.routerName;
        }

        @CustomType.Setter
        public Builder adminEnabled(@Nullable Boolean adminEnabled) {

            this.adminEnabled = adminEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder connectorType(@Nullable String connectorType) {

            this.connectorType = connectorType;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceName(@Nullable String interfaceName) {

            this.interfaceName = interfaceName;
            return this;
        }
        @CustomType.Setter
        public Builder macsecCakKeyvaultSecretId(@Nullable String macsecCakKeyvaultSecretId) {

            this.macsecCakKeyvaultSecretId = macsecCakKeyvaultSecretId;
            return this;
        }
        @CustomType.Setter
        public Builder macsecCipher(@Nullable String macsecCipher) {

            this.macsecCipher = macsecCipher;
            return this;
        }
        @CustomType.Setter
        public Builder macsecCknKeyvaultSecretId(@Nullable String macsecCknKeyvaultSecretId) {

            this.macsecCknKeyvaultSecretId = macsecCknKeyvaultSecretId;
            return this;
        }
        @CustomType.Setter
        public Builder macsecSciEnabled(@Nullable Boolean macsecSciEnabled) {

            this.macsecSciEnabled = macsecSciEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder patchPanelId(@Nullable String patchPanelId) {

            this.patchPanelId = patchPanelId;
            return this;
        }
        @CustomType.Setter
        public Builder rackId(@Nullable String rackId) {

            this.rackId = rackId;
            return this;
        }
        @CustomType.Setter
        public Builder routerName(@Nullable String routerName) {

            this.routerName = routerName;
            return this;
        }
        public ExpressRoutePortLink1 build() {
            final var _resultValue = new ExpressRoutePortLink1();
            _resultValue.adminEnabled = adminEnabled;
            _resultValue.connectorType = connectorType;
            _resultValue.id = id;
            _resultValue.interfaceName = interfaceName;
            _resultValue.macsecCakKeyvaultSecretId = macsecCakKeyvaultSecretId;
            _resultValue.macsecCipher = macsecCipher;
            _resultValue.macsecCknKeyvaultSecretId = macsecCknKeyvaultSecretId;
            _resultValue.macsecSciEnabled = macsecSciEnabled;
            _resultValue.patchPanelId = patchPanelId;
            _resultValue.rackId = rackId;
            _resultValue.routerName = routerName;
            return _resultValue;
        }
    }
}
