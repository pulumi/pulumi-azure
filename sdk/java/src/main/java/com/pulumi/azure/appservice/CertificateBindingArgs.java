// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class CertificateBindingArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateBindingArgs Empty = new CertificateBindingArgs();

    /**
     * The ID of the certificate to bind to the custom domain. Changing this forces a new App Service Certificate Binding to be created.
     * 
     */
    @Import(name="certificateId", required=true)
    private Output<String> certificateId;

    /**
     * @return The ID of the certificate to bind to the custom domain. Changing this forces a new App Service Certificate Binding to be created.
     * 
     */
    public Output<String> certificateId() {
        return this.certificateId;
    }

    /**
     * The ID of the Custom Domain/Hostname Binding. Changing this forces a new App Service Certificate Binding to be created.
     * 
     */
    @Import(name="hostnameBindingId", required=true)
    private Output<String> hostnameBindingId;

    /**
     * @return The ID of the Custom Domain/Hostname Binding. Changing this forces a new App Service Certificate Binding to be created.
     * 
     */
    public Output<String> hostnameBindingId() {
        return this.hostnameBindingId;
    }

    /**
     * The type of certificate binding. Allowed values are `IpBasedEnabled` or `SniEnabled`. Changing this forces a new App Service Certificate Binding to be created.
     * 
     */
    @Import(name="sslState", required=true)
    private Output<String> sslState;

    /**
     * @return The type of certificate binding. Allowed values are `IpBasedEnabled` or `SniEnabled`. Changing this forces a new App Service Certificate Binding to be created.
     * 
     */
    public Output<String> sslState() {
        return this.sslState;
    }

    private CertificateBindingArgs() {}

    private CertificateBindingArgs(CertificateBindingArgs $) {
        this.certificateId = $.certificateId;
        this.hostnameBindingId = $.hostnameBindingId;
        this.sslState = $.sslState;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateBindingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateBindingArgs $;

        public Builder() {
            $ = new CertificateBindingArgs();
        }

        public Builder(CertificateBindingArgs defaults) {
            $ = new CertificateBindingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateId The ID of the certificate to bind to the custom domain. Changing this forces a new App Service Certificate Binding to be created.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(Output<String> certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        /**
         * @param certificateId The ID of the certificate to bind to the custom domain. Changing this forces a new App Service Certificate Binding to be created.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(String certificateId) {
            return certificateId(Output.of(certificateId));
        }

        /**
         * @param hostnameBindingId The ID of the Custom Domain/Hostname Binding. Changing this forces a new App Service Certificate Binding to be created.
         * 
         * @return builder
         * 
         */
        public Builder hostnameBindingId(Output<String> hostnameBindingId) {
            $.hostnameBindingId = hostnameBindingId;
            return this;
        }

        /**
         * @param hostnameBindingId The ID of the Custom Domain/Hostname Binding. Changing this forces a new App Service Certificate Binding to be created.
         * 
         * @return builder
         * 
         */
        public Builder hostnameBindingId(String hostnameBindingId) {
            return hostnameBindingId(Output.of(hostnameBindingId));
        }

        /**
         * @param sslState The type of certificate binding. Allowed values are `IpBasedEnabled` or `SniEnabled`. Changing this forces a new App Service Certificate Binding to be created.
         * 
         * @return builder
         * 
         */
        public Builder sslState(Output<String> sslState) {
            $.sslState = sslState;
            return this;
        }

        /**
         * @param sslState The type of certificate binding. Allowed values are `IpBasedEnabled` or `SniEnabled`. Changing this forces a new App Service Certificate Binding to be created.
         * 
         * @return builder
         * 
         */
        public Builder sslState(String sslState) {
            return sslState(Output.of(sslState));
        }

        public CertificateBindingArgs build() {
            if ($.certificateId == null) {
                throw new MissingRequiredPropertyException("CertificateBindingArgs", "certificateId");
            }
            if ($.hostnameBindingId == null) {
                throw new MissingRequiredPropertyException("CertificateBindingArgs", "hostnameBindingId");
            }
            if ($.sslState == null) {
                throw new MissingRequiredPropertyException("CertificateBindingArgs", "sslState");
            }
            return $;
        }
    }

}
