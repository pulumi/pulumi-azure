// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.core.inputs;

import com.pulumi.azure.core.inputs.SubscriptionCostManagementViewDatasetAggregationArgs;
import com.pulumi.azure.core.inputs.SubscriptionCostManagementViewDatasetGroupingArgs;
import com.pulumi.azure.core.inputs.SubscriptionCostManagementViewDatasetSortingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubscriptionCostManagementViewDatasetArgs extends com.pulumi.resources.ResourceArgs {

    public static final SubscriptionCostManagementViewDatasetArgs Empty = new SubscriptionCostManagementViewDatasetArgs();

    /**
     * One or more `aggregation` blocks as defined above.
     * 
     */
    @Import(name="aggregations", required=true)
    private Output<List<SubscriptionCostManagementViewDatasetAggregationArgs>> aggregations;

    /**
     * @return One or more `aggregation` blocks as defined above.
     * 
     */
    public Output<List<SubscriptionCostManagementViewDatasetAggregationArgs>> aggregations() {
        return this.aggregations;
    }

    /**
     * The granularity of rows in the report. Possible values are `Daily` and `Monthly`.
     * 
     */
    @Import(name="granularity", required=true)
    private Output<String> granularity;

    /**
     * @return The granularity of rows in the report. Possible values are `Daily` and `Monthly`.
     * 
     */
    public Output<String> granularity() {
        return this.granularity;
    }

    /**
     * One or more `grouping` blocks as defined below.
     * 
     */
    @Import(name="groupings")
    private @Nullable Output<List<SubscriptionCostManagementViewDatasetGroupingArgs>> groupings;

    /**
     * @return One or more `grouping` blocks as defined below.
     * 
     */
    public Optional<Output<List<SubscriptionCostManagementViewDatasetGroupingArgs>>> groupings() {
        return Optional.ofNullable(this.groupings);
    }

    /**
     * One or more `sorting` blocks as defined below, containing the order by expression to be used in the report
     * 
     */
    @Import(name="sortings")
    private @Nullable Output<List<SubscriptionCostManagementViewDatasetSortingArgs>> sortings;

    /**
     * @return One or more `sorting` blocks as defined below, containing the order by expression to be used in the report
     * 
     */
    public Optional<Output<List<SubscriptionCostManagementViewDatasetSortingArgs>>> sortings() {
        return Optional.ofNullable(this.sortings);
    }

    private SubscriptionCostManagementViewDatasetArgs() {}

    private SubscriptionCostManagementViewDatasetArgs(SubscriptionCostManagementViewDatasetArgs $) {
        this.aggregations = $.aggregations;
        this.granularity = $.granularity;
        this.groupings = $.groupings;
        this.sortings = $.sortings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubscriptionCostManagementViewDatasetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubscriptionCostManagementViewDatasetArgs $;

        public Builder() {
            $ = new SubscriptionCostManagementViewDatasetArgs();
        }

        public Builder(SubscriptionCostManagementViewDatasetArgs defaults) {
            $ = new SubscriptionCostManagementViewDatasetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aggregations One or more `aggregation` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder aggregations(Output<List<SubscriptionCostManagementViewDatasetAggregationArgs>> aggregations) {
            $.aggregations = aggregations;
            return this;
        }

        /**
         * @param aggregations One or more `aggregation` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder aggregations(List<SubscriptionCostManagementViewDatasetAggregationArgs> aggregations) {
            return aggregations(Output.of(aggregations));
        }

        /**
         * @param aggregations One or more `aggregation` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder aggregations(SubscriptionCostManagementViewDatasetAggregationArgs... aggregations) {
            return aggregations(List.of(aggregations));
        }

        /**
         * @param granularity The granularity of rows in the report. Possible values are `Daily` and `Monthly`.
         * 
         * @return builder
         * 
         */
        public Builder granularity(Output<String> granularity) {
            $.granularity = granularity;
            return this;
        }

        /**
         * @param granularity The granularity of rows in the report. Possible values are `Daily` and `Monthly`.
         * 
         * @return builder
         * 
         */
        public Builder granularity(String granularity) {
            return granularity(Output.of(granularity));
        }

        /**
         * @param groupings One or more `grouping` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder groupings(@Nullable Output<List<SubscriptionCostManagementViewDatasetGroupingArgs>> groupings) {
            $.groupings = groupings;
            return this;
        }

        /**
         * @param groupings One or more `grouping` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder groupings(List<SubscriptionCostManagementViewDatasetGroupingArgs> groupings) {
            return groupings(Output.of(groupings));
        }

        /**
         * @param groupings One or more `grouping` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder groupings(SubscriptionCostManagementViewDatasetGroupingArgs... groupings) {
            return groupings(List.of(groupings));
        }

        /**
         * @param sortings One or more `sorting` blocks as defined below, containing the order by expression to be used in the report
         * 
         * @return builder
         * 
         */
        public Builder sortings(@Nullable Output<List<SubscriptionCostManagementViewDatasetSortingArgs>> sortings) {
            $.sortings = sortings;
            return this;
        }

        /**
         * @param sortings One or more `sorting` blocks as defined below, containing the order by expression to be used in the report
         * 
         * @return builder
         * 
         */
        public Builder sortings(List<SubscriptionCostManagementViewDatasetSortingArgs> sortings) {
            return sortings(Output.of(sortings));
        }

        /**
         * @param sortings One or more `sorting` blocks as defined below, containing the order by expression to be used in the report
         * 
         * @return builder
         * 
         */
        public Builder sortings(SubscriptionCostManagementViewDatasetSortingArgs... sortings) {
            return sortings(List.of(sortings));
        }

        public SubscriptionCostManagementViewDatasetArgs build() {
            if ($.aggregations == null) {
                throw new MissingRequiredPropertyException("SubscriptionCostManagementViewDatasetArgs", "aggregations");
            }
            if ($.granularity == null) {
                throw new MissingRequiredPropertyException("SubscriptionCostManagementViewDatasetArgs", "granularity");
            }
            return $;
        }
    }

}
