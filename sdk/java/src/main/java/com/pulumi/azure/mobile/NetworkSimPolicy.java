// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mobile;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.mobile.NetworkSimPolicyArgs;
import com.pulumi.azure.mobile.inputs.NetworkSimPolicyState;
import com.pulumi.azure.mobile.outputs.NetworkSimPolicySlice;
import com.pulumi.azure.mobile.outputs.NetworkSimPolicyUserEquipmentAggregateMaximumBitRate;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Mobile Network Sim Policy.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.mobile.Network;
 * import com.pulumi.azure.mobile.NetworkArgs;
 * import com.pulumi.azure.mobile.NetworkDataNetwork;
 * import com.pulumi.azure.mobile.NetworkDataNetworkArgs;
 * import com.pulumi.azure.mobile.NetworkService;
 * import com.pulumi.azure.mobile.NetworkServiceArgs;
 * import com.pulumi.azure.mobile.inputs.NetworkServicePccRuleArgs;
 * import com.pulumi.azure.mobile.NetworkSlice;
 * import com.pulumi.azure.mobile.NetworkSliceArgs;
 * import com.pulumi.azure.mobile.inputs.NetworkSliceSingleNetworkSliceSelectionAssistanceInformationArgs;
 * import com.pulumi.azure.mobile.NetworkSimPolicy;
 * import com.pulumi.azure.mobile.NetworkSimPolicyArgs;
 * import com.pulumi.azure.mobile.inputs.NetworkSimPolicySliceArgs;
 * import com.pulumi.azure.mobile.inputs.NetworkSimPolicyUserEquipmentAggregateMaximumBitRateArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var exampleNetwork = new Network(&#34;exampleNetwork&#34;, NetworkArgs.builder()        
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .mobileCountryCode(&#34;001&#34;)
 *             .mobileNetworkCode(&#34;01&#34;)
 *             .build());
 * 
 *         var exampleNetworkDataNetwork = new NetworkDataNetwork(&#34;exampleNetworkDataNetwork&#34;, NetworkDataNetworkArgs.builder()        
 *             .mobileNetworkId(exampleNetwork.id())
 *             .location(exampleResourceGroup.location())
 *             .build());
 * 
 *         var exampleNetworkService = new NetworkService(&#34;exampleNetworkService&#34;, NetworkServiceArgs.builder()        
 *             .mobileNetworkId(exampleNetwork.id())
 *             .location(exampleResourceGroup.location())
 *             .servicePrecedence(0)
 *             .pccRules(NetworkServicePccRuleArgs.builder()
 *                 .name(&#34;default-rule&#34;)
 *                 .precedence(1)
 *                 .trafficControlEnabled(true)
 *                 .serviceDataFlowTemplates(NetworkServicePccRuleServiceDataFlowTemplateArgs.builder()
 *                     .direction(&#34;Uplink&#34;)
 *                     .name(&#34;IP-to-server&#34;)
 *                     .ports()
 *                     .protocols(&#34;ip&#34;)
 *                     .remoteIpLists(&#34;10.3.4.0/24&#34;)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var exampleNetworkSlice = new NetworkSlice(&#34;exampleNetworkSlice&#34;, NetworkSliceArgs.builder()        
 *             .mobileNetworkId(exampleNetwork.id())
 *             .location(exampleResourceGroup.location())
 *             .singleNetworkSliceSelectionAssistanceInformation(NetworkSliceSingleNetworkSliceSelectionAssistanceInformationArgs.builder()
 *                 .sliceServiceType(1)
 *                 .build())
 *             .build());
 * 
 *         var exampleNetworkSimPolicy = new NetworkSimPolicy(&#34;exampleNetworkSimPolicy&#34;, NetworkSimPolicyArgs.builder()        
 *             .mobileNetworkId(exampleNetwork.id())
 *             .location(exampleResourceGroup.location())
 *             .registrationTimerInSeconds(3240)
 *             .defaultSliceId(exampleNetworkSlice.id())
 *             .slices(NetworkSimPolicySliceArgs.builder()
 *                 .defaultDataNetworkId(exampleNetworkDataNetwork.id())
 *                 .sliceId(exampleNetworkSlice.id())
 *                 .dataNetworks(NetworkSimPolicySliceDataNetworkArgs.builder()
 *                     .dataNetworkId(exampleNetworkDataNetwork.id())
 *                     .allocationAndRetentionPriorityLevel(9)
 *                     .defaultSessionType(&#34;IPv4&#34;)
 *                     .qosIndicator(9)
 *                     .preemptionCapability(&#34;NotPreempt&#34;)
 *                     .preemptionVulnerability(&#34;Preemptable&#34;)
 *                     .allowedServicesIds(exampleNetworkService.id())
 *                     .sessionAggregateMaximumBitRate(NetworkSimPolicySliceDataNetworkSessionAggregateMaximumBitRateArgs.builder()
 *                         .downlink(&#34;1 Gbps&#34;)
 *                         .uplink(&#34;500 Mbps&#34;)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .userEquipmentAggregateMaximumBitRate(NetworkSimPolicyUserEquipmentAggregateMaximumBitRateArgs.builder()
 *                 .downlink(&#34;1 Gbps&#34;)
 *                 .uplink(&#34;500 Mbps&#34;)
 *                 .build())
 *             .tags(Map.of(&#34;key&#34;, &#34;value&#34;))
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Mobile Network Sim Policies can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:mobile/networkSimPolicy:NetworkSimPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.MobileNetwork/mobileNetworks/mobileNetwork1/simPolicies/simPolicy1
 * ```
 * 
 */
@ResourceType(type="azure:mobile/networkSimPolicy:NetworkSimPolicy")
public class NetworkSimPolicy extends com.pulumi.resources.CustomResource {
    /**
     * The ID of default slice to use if the UE does not explicitly specify it. This slice must exist in the `slice` block.
     * 
     */
    @Export(name="defaultSliceId", type=String.class, parameters={})
    private Output<String> defaultSliceId;

    /**
     * @return The ID of default slice to use if the UE does not explicitly specify it. This slice must exist in the `slice` block.
     * 
     */
    public Output<String> defaultSliceId() {
        return this.defaultSliceId;
    }
    /**
     * Specifies the Azure Region where the Mobile Network Sim Policy should exist. Changing this forces a new Mobile Network Sim Policies to be created.
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return Specifies the Azure Region where the Mobile Network Sim Policy should exist. Changing this forces a new Mobile Network Sim Policies to be created.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The ID of the Mobile Network which the Sim Policy belongs to. Changing this forces a new Mobile Network Sim Policies to be created.
     * 
     */
    @Export(name="mobileNetworkId", type=String.class, parameters={})
    private Output<String> mobileNetworkId;

    /**
     * @return The ID of the Mobile Network which the Sim Policy belongs to. Changing this forces a new Mobile Network Sim Policies to be created.
     * 
     */
    public Output<String> mobileNetworkId() {
        return this.mobileNetworkId;
    }
    /**
     * The name which should be used for this Mobile Network Sim Policies. Changing this forces a new Mobile Network Sim Policies to be created.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name which should be used for this Mobile Network Sim Policies. Changing this forces a new Mobile Network Sim Policies to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * RAT/Frequency Selection Priority Index, defined in 3GPP TS 36.413.
     * 
     */
    @Export(name="ratFrequencySelectionPriorityIndex", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> ratFrequencySelectionPriorityIndex;

    /**
     * @return RAT/Frequency Selection Priority Index, defined in 3GPP TS 36.413.
     * 
     */
    public Output<Optional<Integer>> ratFrequencySelectionPriorityIndex() {
        return Codegen.optional(this.ratFrequencySelectionPriorityIndex);
    }
    /**
     * Interval for the user equipment periodic registration update procedure. Defaults to `3240`.
     * 
     */
    @Export(name="registrationTimerInSeconds", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> registrationTimerInSeconds;

    /**
     * @return Interval for the user equipment periodic registration update procedure. Defaults to `3240`.
     * 
     */
    public Output<Optional<Integer>> registrationTimerInSeconds() {
        return Codegen.optional(this.registrationTimerInSeconds);
    }
    /**
     * An array of `slice` block as defined below. The allowed slices and the settings to use for them. The list must not contain duplicate items and must contain at least one item.
     * 
     */
    @Export(name="slices", type=List.class, parameters={NetworkSimPolicySlice.class})
    private Output<List<NetworkSimPolicySlice>> slices;

    /**
     * @return An array of `slice` block as defined below. The allowed slices and the settings to use for them. The list must not contain duplicate items and must contain at least one item.
     * 
     */
    public Output<List<NetworkSimPolicySlice>> slices() {
        return this.slices;
    }
    /**
     * A mapping of tags which should be assigned to the Mobile Network Sim Policies.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the Mobile Network Sim Policies.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * A `user_equipment_aggregate_maximum_bit_rate` block as defined below.
     * 
     */
    @Export(name="userEquipmentAggregateMaximumBitRate", type=NetworkSimPolicyUserEquipmentAggregateMaximumBitRate.class, parameters={})
    private Output<NetworkSimPolicyUserEquipmentAggregateMaximumBitRate> userEquipmentAggregateMaximumBitRate;

    /**
     * @return A `user_equipment_aggregate_maximum_bit_rate` block as defined below.
     * 
     */
    public Output<NetworkSimPolicyUserEquipmentAggregateMaximumBitRate> userEquipmentAggregateMaximumBitRate() {
        return this.userEquipmentAggregateMaximumBitRate;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NetworkSimPolicy(String name) {
        this(name, NetworkSimPolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NetworkSimPolicy(String name, NetworkSimPolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NetworkSimPolicy(String name, NetworkSimPolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:mobile/networkSimPolicy:NetworkSimPolicy", name, args == null ? NetworkSimPolicyArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private NetworkSimPolicy(String name, Output<String> id, @Nullable NetworkSimPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:mobile/networkSimPolicy:NetworkSimPolicy", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NetworkSimPolicy get(String name, Output<String> id, @Nullable NetworkSimPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new NetworkSimPolicy(name, id, state, options);
    }
}
