// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.inputs;

import com.pulumi.azure.containerservice.inputs.GroupContainerGpuArgs;
import com.pulumi.azure.containerservice.inputs.GroupContainerGpuLimitArgs;
import com.pulumi.azure.containerservice.inputs.GroupContainerLivenessProbeArgs;
import com.pulumi.azure.containerservice.inputs.GroupContainerPortArgs;
import com.pulumi.azure.containerservice.inputs.GroupContainerReadinessProbeArgs;
import com.pulumi.azure.containerservice.inputs.GroupContainerSecurityArgs;
import com.pulumi.azure.containerservice.inputs.GroupContainerVolumeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupContainerArgs extends com.pulumi.resources.ResourceArgs {

    public static final GroupContainerArgs Empty = new GroupContainerArgs();

    /**
     * A list of commands which should be run on the container. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="commands")
    private @Nullable Output<List<String>> commands;

    /**
     * @return A list of commands which should be run on the container. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<List<String>>> commands() {
        return Optional.ofNullable(this.commands);
    }

    /**
     * The required number of CPU cores of the containers. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="cpu", required=true)
    private Output<Double> cpu;

    /**
     * @return The required number of CPU cores of the containers. Changing this forces a new resource to be created.
     * 
     */
    public Output<Double> cpu() {
        return this.cpu;
    }

    /**
     * The upper limit of the number of CPU cores of the containers.
     * 
     */
    @Import(name="cpuLimit")
    private @Nullable Output<Double> cpuLimit;

    /**
     * @return The upper limit of the number of CPU cores of the containers.
     * 
     */
    public Optional<Output<Double>> cpuLimit() {
        return Optional.ofNullable(this.cpuLimit);
    }

    /**
     * A list of environment variables to be set on the container. Specified as a map of name/value pairs. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="environmentVariables")
    private @Nullable Output<Map<String,String>> environmentVariables;

    /**
     * @return A list of environment variables to be set on the container. Specified as a map of name/value pairs. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<Map<String,String>>> environmentVariables() {
        return Optional.ofNullable(this.environmentVariables);
    }

    /**
     * A `gpu` block as defined below. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:** Gpu resources are currently only supported in Linux containers.
     * 
     */
    @Import(name="gpu")
    private @Nullable Output<GroupContainerGpuArgs> gpu;

    /**
     * @return A `gpu` block as defined below. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:** Gpu resources are currently only supported in Linux containers.
     * 
     */
    public Optional<Output<GroupContainerGpuArgs>> gpu() {
        return Optional.ofNullable(this.gpu);
    }

    /**
     * A `gpu_limit` block as defined below.
     * 
     */
    @Import(name="gpuLimit")
    private @Nullable Output<GroupContainerGpuLimitArgs> gpuLimit;

    /**
     * @return A `gpu_limit` block as defined below.
     * 
     */
    public Optional<Output<GroupContainerGpuLimitArgs>> gpuLimit() {
        return Optional.ofNullable(this.gpuLimit);
    }

    /**
     * The container image name. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="image", required=true)
    private Output<String> image;

    /**
     * @return The container image name. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> image() {
        return this.image;
    }

    /**
     * The definition of a readiness probe for this container as documented in the `liveness_probe` block below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="livenessProbe")
    private @Nullable Output<GroupContainerLivenessProbeArgs> livenessProbe;

    /**
     * @return The definition of a readiness probe for this container as documented in the `liveness_probe` block below. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<GroupContainerLivenessProbeArgs>> livenessProbe() {
        return Optional.ofNullable(this.livenessProbe);
    }

    /**
     * The required memory of the containers in GB. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="memory", required=true)
    private Output<Double> memory;

    /**
     * @return The required memory of the containers in GB. Changing this forces a new resource to be created.
     * 
     */
    public Output<Double> memory() {
        return this.memory;
    }

    /**
     * The the upper limit of the memory of the containers in GB.
     * 
     */
    @Import(name="memoryLimit")
    private @Nullable Output<Double> memoryLimit;

    /**
     * @return The the upper limit of the memory of the containers in GB.
     * 
     */
    public Optional<Output<Double>> memoryLimit() {
        return Optional.ofNullable(this.memoryLimit);
    }

    /**
     * Specifies the name of the Container. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Specifies the name of the Container. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * A set of public ports for the container. Changing this forces a new resource to be created. Set as documented in the `ports` block below.
     * 
     */
    @Import(name="ports")
    private @Nullable Output<List<GroupContainerPortArgs>> ports;

    /**
     * @return A set of public ports for the container. Changing this forces a new resource to be created. Set as documented in the `ports` block below.
     * 
     */
    public Optional<Output<List<GroupContainerPortArgs>>> ports() {
        return Optional.ofNullable(this.ports);
    }

    /**
     * The definition of a readiness probe for this container as documented in the `readiness_probe` block below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="readinessProbe")
    private @Nullable Output<GroupContainerReadinessProbeArgs> readinessProbe;

    /**
     * @return The definition of a readiness probe for this container as documented in the `readiness_probe` block below. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<GroupContainerReadinessProbeArgs>> readinessProbe() {
        return Optional.ofNullable(this.readinessProbe);
    }

    /**
     * A list of sensitive environment variables to be set on the container. Specified as a map of name/value pairs. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="secureEnvironmentVariables")
    private @Nullable Output<Map<String,String>> secureEnvironmentVariables;

    /**
     * @return A list of sensitive environment variables to be set on the container. Specified as a map of name/value pairs. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<Map<String,String>>> secureEnvironmentVariables() {
        return Optional.ofNullable(this.secureEnvironmentVariables);
    }

    /**
     * The definition of the security context for this container as documented in the `security` block below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="securities")
    private @Nullable Output<List<GroupContainerSecurityArgs>> securities;

    /**
     * @return The definition of the security context for this container as documented in the `security` block below. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<List<GroupContainerSecurityArgs>>> securities() {
        return Optional.ofNullable(this.securities);
    }

    /**
     * The definition of a volume mount for this container as documented in the `volume` block below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="volumes")
    private @Nullable Output<List<GroupContainerVolumeArgs>> volumes;

    /**
     * @return The definition of a volume mount for this container as documented in the `volume` block below. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<List<GroupContainerVolumeArgs>>> volumes() {
        return Optional.ofNullable(this.volumes);
    }

    private GroupContainerArgs() {}

    private GroupContainerArgs(GroupContainerArgs $) {
        this.commands = $.commands;
        this.cpu = $.cpu;
        this.cpuLimit = $.cpuLimit;
        this.environmentVariables = $.environmentVariables;
        this.gpu = $.gpu;
        this.gpuLimit = $.gpuLimit;
        this.image = $.image;
        this.livenessProbe = $.livenessProbe;
        this.memory = $.memory;
        this.memoryLimit = $.memoryLimit;
        this.name = $.name;
        this.ports = $.ports;
        this.readinessProbe = $.readinessProbe;
        this.secureEnvironmentVariables = $.secureEnvironmentVariables;
        this.securities = $.securities;
        this.volumes = $.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupContainerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupContainerArgs $;

        public Builder() {
            $ = new GroupContainerArgs();
        }

        public Builder(GroupContainerArgs defaults) {
            $ = new GroupContainerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param commands A list of commands which should be run on the container. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder commands(@Nullable Output<List<String>> commands) {
            $.commands = commands;
            return this;
        }

        /**
         * @param commands A list of commands which should be run on the container. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder commands(List<String> commands) {
            return commands(Output.of(commands));
        }

        /**
         * @param commands A list of commands which should be run on the container. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }

        /**
         * @param cpu The required number of CPU cores of the containers. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder cpu(Output<Double> cpu) {
            $.cpu = cpu;
            return this;
        }

        /**
         * @param cpu The required number of CPU cores of the containers. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder cpu(Double cpu) {
            return cpu(Output.of(cpu));
        }

        /**
         * @param cpuLimit The upper limit of the number of CPU cores of the containers.
         * 
         * @return builder
         * 
         */
        public Builder cpuLimit(@Nullable Output<Double> cpuLimit) {
            $.cpuLimit = cpuLimit;
            return this;
        }

        /**
         * @param cpuLimit The upper limit of the number of CPU cores of the containers.
         * 
         * @return builder
         * 
         */
        public Builder cpuLimit(Double cpuLimit) {
            return cpuLimit(Output.of(cpuLimit));
        }

        /**
         * @param environmentVariables A list of environment variables to be set on the container. Specified as a map of name/value pairs. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(@Nullable Output<Map<String,String>> environmentVariables) {
            $.environmentVariables = environmentVariables;
            return this;
        }

        /**
         * @param environmentVariables A list of environment variables to be set on the container. Specified as a map of name/value pairs. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(Map<String,String> environmentVariables) {
            return environmentVariables(Output.of(environmentVariables));
        }

        /**
         * @param gpu A `gpu` block as defined below. Changing this forces a new resource to be created.
         * 
         * &gt; **Note:** Gpu resources are currently only supported in Linux containers.
         * 
         * @return builder
         * 
         */
        public Builder gpu(@Nullable Output<GroupContainerGpuArgs> gpu) {
            $.gpu = gpu;
            return this;
        }

        /**
         * @param gpu A `gpu` block as defined below. Changing this forces a new resource to be created.
         * 
         * &gt; **Note:** Gpu resources are currently only supported in Linux containers.
         * 
         * @return builder
         * 
         */
        public Builder gpu(GroupContainerGpuArgs gpu) {
            return gpu(Output.of(gpu));
        }

        /**
         * @param gpuLimit A `gpu_limit` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder gpuLimit(@Nullable Output<GroupContainerGpuLimitArgs> gpuLimit) {
            $.gpuLimit = gpuLimit;
            return this;
        }

        /**
         * @param gpuLimit A `gpu_limit` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder gpuLimit(GroupContainerGpuLimitArgs gpuLimit) {
            return gpuLimit(Output.of(gpuLimit));
        }

        /**
         * @param image The container image name. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder image(Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image The container image name. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param livenessProbe The definition of a readiness probe for this container as documented in the `liveness_probe` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbe(@Nullable Output<GroupContainerLivenessProbeArgs> livenessProbe) {
            $.livenessProbe = livenessProbe;
            return this;
        }

        /**
         * @param livenessProbe The definition of a readiness probe for this container as documented in the `liveness_probe` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbe(GroupContainerLivenessProbeArgs livenessProbe) {
            return livenessProbe(Output.of(livenessProbe));
        }

        /**
         * @param memory The required memory of the containers in GB. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder memory(Output<Double> memory) {
            $.memory = memory;
            return this;
        }

        /**
         * @param memory The required memory of the containers in GB. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder memory(Double memory) {
            return memory(Output.of(memory));
        }

        /**
         * @param memoryLimit The the upper limit of the memory of the containers in GB.
         * 
         * @return builder
         * 
         */
        public Builder memoryLimit(@Nullable Output<Double> memoryLimit) {
            $.memoryLimit = memoryLimit;
            return this;
        }

        /**
         * @param memoryLimit The the upper limit of the memory of the containers in GB.
         * 
         * @return builder
         * 
         */
        public Builder memoryLimit(Double memoryLimit) {
            return memoryLimit(Output.of(memoryLimit));
        }

        /**
         * @param name Specifies the name of the Container. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Container. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param ports A set of public ports for the container. Changing this forces a new resource to be created. Set as documented in the `ports` block below.
         * 
         * @return builder
         * 
         */
        public Builder ports(@Nullable Output<List<GroupContainerPortArgs>> ports) {
            $.ports = ports;
            return this;
        }

        /**
         * @param ports A set of public ports for the container. Changing this forces a new resource to be created. Set as documented in the `ports` block below.
         * 
         * @return builder
         * 
         */
        public Builder ports(List<GroupContainerPortArgs> ports) {
            return ports(Output.of(ports));
        }

        /**
         * @param ports A set of public ports for the container. Changing this forces a new resource to be created. Set as documented in the `ports` block below.
         * 
         * @return builder
         * 
         */
        public Builder ports(GroupContainerPortArgs... ports) {
            return ports(List.of(ports));
        }

        /**
         * @param readinessProbe The definition of a readiness probe for this container as documented in the `readiness_probe` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbe(@Nullable Output<GroupContainerReadinessProbeArgs> readinessProbe) {
            $.readinessProbe = readinessProbe;
            return this;
        }

        /**
         * @param readinessProbe The definition of a readiness probe for this container as documented in the `readiness_probe` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbe(GroupContainerReadinessProbeArgs readinessProbe) {
            return readinessProbe(Output.of(readinessProbe));
        }

        /**
         * @param secureEnvironmentVariables A list of sensitive environment variables to be set on the container. Specified as a map of name/value pairs. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder secureEnvironmentVariables(@Nullable Output<Map<String,String>> secureEnvironmentVariables) {
            $.secureEnvironmentVariables = secureEnvironmentVariables;
            return this;
        }

        /**
         * @param secureEnvironmentVariables A list of sensitive environment variables to be set on the container. Specified as a map of name/value pairs. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder secureEnvironmentVariables(Map<String,String> secureEnvironmentVariables) {
            return secureEnvironmentVariables(Output.of(secureEnvironmentVariables));
        }

        /**
         * @param securities The definition of the security context for this container as documented in the `security` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder securities(@Nullable Output<List<GroupContainerSecurityArgs>> securities) {
            $.securities = securities;
            return this;
        }

        /**
         * @param securities The definition of the security context for this container as documented in the `security` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder securities(List<GroupContainerSecurityArgs> securities) {
            return securities(Output.of(securities));
        }

        /**
         * @param securities The definition of the security context for this container as documented in the `security` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder securities(GroupContainerSecurityArgs... securities) {
            return securities(List.of(securities));
        }

        /**
         * @param volumes The definition of a volume mount for this container as documented in the `volume` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder volumes(@Nullable Output<List<GroupContainerVolumeArgs>> volumes) {
            $.volumes = volumes;
            return this;
        }

        /**
         * @param volumes The definition of a volume mount for this container as documented in the `volume` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder volumes(List<GroupContainerVolumeArgs> volumes) {
            return volumes(Output.of(volumes));
        }

        /**
         * @param volumes The definition of a volume mount for this container as documented in the `volume` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder volumes(GroupContainerVolumeArgs... volumes) {
            return volumes(List.of(volumes));
        }

        public GroupContainerArgs build() {
            if ($.cpu == null) {
                throw new MissingRequiredPropertyException("GroupContainerArgs", "cpu");
            }
            if ($.image == null) {
                throw new MissingRequiredPropertyException("GroupContainerArgs", "image");
            }
            if ($.memory == null) {
                throw new MissingRequiredPropertyException("GroupContainerArgs", "memory");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GroupContainerArgs", "name");
            }
            return $;
        }
    }

}
