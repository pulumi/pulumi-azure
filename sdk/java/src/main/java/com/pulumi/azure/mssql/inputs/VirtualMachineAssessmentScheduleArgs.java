// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mssql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualMachineAssessmentScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualMachineAssessmentScheduleArgs Empty = new VirtualMachineAssessmentScheduleArgs();

    /**
     * What day of the week the assessment will be run. Possible values are `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday` and `Wednesday`.
     * 
     */
    @Import(name="dayOfWeek", required=true)
    private Output<String> dayOfWeek;

    /**
     * @return What day of the week the assessment will be run. Possible values are `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday` and `Wednesday`.
     * 
     */
    public Output<String> dayOfWeek() {
        return this.dayOfWeek;
    }

    /**
     * How many months between assessment runs. Valid values are between `1` and `5`.
     * 
     * &gt; **NOTE:** Either one of `weekly_interval` or `monthly_occurrence` must be specified.
     * 
     */
    @Import(name="monthlyOccurrence")
    private @Nullable Output<Integer> monthlyOccurrence;

    /**
     * @return How many months between assessment runs. Valid values are between `1` and `5`.
     * 
     * &gt; **NOTE:** Either one of `weekly_interval` or `monthly_occurrence` must be specified.
     * 
     */
    public Optional<Output<Integer>> monthlyOccurrence() {
        return Optional.ofNullable(this.monthlyOccurrence);
    }

    /**
     * What time the assessment will be run. Must be in the format `HH:mm`.
     * 
     */
    @Import(name="startTime", required=true)
    private Output<String> startTime;

    /**
     * @return What time the assessment will be run. Must be in the format `HH:mm`.
     * 
     */
    public Output<String> startTime() {
        return this.startTime;
    }

    /**
     * How many weeks between assessment runs. Valid values are between `1` and `6`.
     * 
     */
    @Import(name="weeklyInterval")
    private @Nullable Output<Integer> weeklyInterval;

    /**
     * @return How many weeks between assessment runs. Valid values are between `1` and `6`.
     * 
     */
    public Optional<Output<Integer>> weeklyInterval() {
        return Optional.ofNullable(this.weeklyInterval);
    }

    private VirtualMachineAssessmentScheduleArgs() {}

    private VirtualMachineAssessmentScheduleArgs(VirtualMachineAssessmentScheduleArgs $) {
        this.dayOfWeek = $.dayOfWeek;
        this.monthlyOccurrence = $.monthlyOccurrence;
        this.startTime = $.startTime;
        this.weeklyInterval = $.weeklyInterval;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualMachineAssessmentScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualMachineAssessmentScheduleArgs $;

        public Builder() {
            $ = new VirtualMachineAssessmentScheduleArgs();
        }

        public Builder(VirtualMachineAssessmentScheduleArgs defaults) {
            $ = new VirtualMachineAssessmentScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dayOfWeek What day of the week the assessment will be run. Possible values are `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday` and `Wednesday`.
         * 
         * @return builder
         * 
         */
        public Builder dayOfWeek(Output<String> dayOfWeek) {
            $.dayOfWeek = dayOfWeek;
            return this;
        }

        /**
         * @param dayOfWeek What day of the week the assessment will be run. Possible values are `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday` and `Wednesday`.
         * 
         * @return builder
         * 
         */
        public Builder dayOfWeek(String dayOfWeek) {
            return dayOfWeek(Output.of(dayOfWeek));
        }

        /**
         * @param monthlyOccurrence How many months between assessment runs. Valid values are between `1` and `5`.
         * 
         * &gt; **NOTE:** Either one of `weekly_interval` or `monthly_occurrence` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder monthlyOccurrence(@Nullable Output<Integer> monthlyOccurrence) {
            $.monthlyOccurrence = monthlyOccurrence;
            return this;
        }

        /**
         * @param monthlyOccurrence How many months between assessment runs. Valid values are between `1` and `5`.
         * 
         * &gt; **NOTE:** Either one of `weekly_interval` or `monthly_occurrence` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder monthlyOccurrence(Integer monthlyOccurrence) {
            return monthlyOccurrence(Output.of(monthlyOccurrence));
        }

        /**
         * @param startTime What time the assessment will be run. Must be in the format `HH:mm`.
         * 
         * @return builder
         * 
         */
        public Builder startTime(Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime What time the assessment will be run. Must be in the format `HH:mm`.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        /**
         * @param weeklyInterval How many weeks between assessment runs. Valid values are between `1` and `6`.
         * 
         * @return builder
         * 
         */
        public Builder weeklyInterval(@Nullable Output<Integer> weeklyInterval) {
            $.weeklyInterval = weeklyInterval;
            return this;
        }

        /**
         * @param weeklyInterval How many weeks between assessment runs. Valid values are between `1` and `6`.
         * 
         * @return builder
         * 
         */
        public Builder weeklyInterval(Integer weeklyInterval) {
            return weeklyInterval(Output.of(weeklyInterval));
        }

        public VirtualMachineAssessmentScheduleArgs build() {
            $.dayOfWeek = Objects.requireNonNull($.dayOfWeek, "expected parameter 'dayOfWeek' to be non-null");
            $.startTime = Objects.requireNonNull($.startTime, "expected parameter 'startTime' to be non-null");
            return $;
        }
    }

}
