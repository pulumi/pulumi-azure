// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appplatform;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.appplatform.SpringCloudConfigurationServiceArgs;
import com.pulumi.azure.appplatform.inputs.SpringCloudConfigurationServiceState;
import com.pulumi.azure.appplatform.outputs.SpringCloudConfigurationServiceRepository;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Spring Cloud Configuration Service.
 * 
 * &gt; **NOTE:** This resource is applicable only for Spring Cloud Service with enterprise tier.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.appplatform.SpringCloudService;
 * import com.pulumi.azure.appplatform.SpringCloudServiceArgs;
 * import com.pulumi.azure.appplatform.SpringCloudConfigurationService;
 * import com.pulumi.azure.appplatform.SpringCloudConfigurationServiceArgs;
 * import com.pulumi.azure.appplatform.inputs.SpringCloudConfigurationServiceRepositoryArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()
 *             .name("example")
 *             .location("West Europe")
 *             .build());
 * 
 *         var exampleSpringCloudService = new SpringCloudService("exampleSpringCloudService", SpringCloudServiceArgs.builder()
 *             .name("example")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .skuName("E0")
 *             .build());
 * 
 *         var exampleSpringCloudConfigurationService = new SpringCloudConfigurationService("exampleSpringCloudConfigurationService", SpringCloudConfigurationServiceArgs.builder()
 *             .name("default")
 *             .springCloudServiceId(exampleSpringCloudService.id())
 *             .repositories(SpringCloudConfigurationServiceRepositoryArgs.builder()
 *                 .name("fake")
 *                 .label("master")
 *                 .patterns("app/dev")
 *                 .uri("https://github.com/Azure-Samples/piggymetrics")
 *                 .searchPaths(                
 *                     "dir1",
 *                     "dir2")
 *                 .strictHostKeyChecking(false)
 *                 .username("adminuser")
 *                 .password("H}{@literal @}{@code Sh1CoR3!")
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Spring Cloud Configuration Services can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:appplatform/springCloudConfigurationService:SpringCloudConfigurationService example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resourceGroup1/providers/Microsoft.AppPlatform/spring/service1/configurationServices/configurationService1
 * ```
 * 
 */
@ResourceType(type="azure:appplatform/springCloudConfigurationService:SpringCloudConfigurationService")
public class SpringCloudConfigurationService extends com.pulumi.resources.CustomResource {
    /**
     * The generation of the Spring Cloud Configuration Service. Possible values are `Gen1` and `Gen2`.
     * 
     */
    @Export(name="generation", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> generation;

    /**
     * @return The generation of the Spring Cloud Configuration Service. Possible values are `Gen1` and `Gen2`.
     * 
     */
    public Output<Optional<String>> generation() {
        return Codegen.optional(this.generation);
    }
    /**
     * The name which should be used for this Spring Cloud Configuration Service. The only possible value is `default`. Changing this forces a new Spring Cloud Configuration Service to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name which should be used for this Spring Cloud Configuration Service. The only possible value is `default`. Changing this forces a new Spring Cloud Configuration Service to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Specifies how often to check repository updates. Minimum value is 0.
     * 
     */
    @Export(name="refreshIntervalInSeconds", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> refreshIntervalInSeconds;

    /**
     * @return Specifies how often to check repository updates. Minimum value is 0.
     * 
     */
    public Output<Optional<Integer>> refreshIntervalInSeconds() {
        return Codegen.optional(this.refreshIntervalInSeconds);
    }
    /**
     * One or more `repository` blocks as defined below.
     * 
     */
    @Export(name="repositories", refs={List.class,SpringCloudConfigurationServiceRepository.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SpringCloudConfigurationServiceRepository>> repositories;

    /**
     * @return One or more `repository` blocks as defined below.
     * 
     */
    public Output<Optional<List<SpringCloudConfigurationServiceRepository>>> repositories() {
        return Codegen.optional(this.repositories);
    }
    /**
     * The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Configuration Service to be created.
     * 
     */
    @Export(name="springCloudServiceId", refs={String.class}, tree="[0]")
    private Output<String> springCloudServiceId;

    /**
     * @return The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Configuration Service to be created.
     * 
     */
    public Output<String> springCloudServiceId() {
        return this.springCloudServiceId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SpringCloudConfigurationService(java.lang.String name) {
        this(name, SpringCloudConfigurationServiceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SpringCloudConfigurationService(java.lang.String name, SpringCloudConfigurationServiceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SpringCloudConfigurationService(java.lang.String name, SpringCloudConfigurationServiceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:appplatform/springCloudConfigurationService:SpringCloudConfigurationService", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private SpringCloudConfigurationService(java.lang.String name, Output<java.lang.String> id, @Nullable SpringCloudConfigurationServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:appplatform/springCloudConfigurationService:SpringCloudConfigurationService", name, state, makeResourceOptions(options, id), false);
    }

    private static SpringCloudConfigurationServiceArgs makeArgs(SpringCloudConfigurationServiceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? SpringCloudConfigurationServiceArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SpringCloudConfigurationService get(java.lang.String name, Output<java.lang.String> id, @Nullable SpringCloudConfigurationServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SpringCloudConfigurationService(name, id, state, options);
    }
}
