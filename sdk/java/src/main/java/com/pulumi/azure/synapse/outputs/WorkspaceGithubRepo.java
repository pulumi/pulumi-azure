// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.synapse.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class WorkspaceGithubRepo {
    /**
     * @return Specifies the GitHub account name.
     * 
     */
    private String accountName;
    /**
     * @return Specifies the collaboration branch of the repository to get code from.
     * 
     */
    private String branchName;
    /**
     * @return Specifies the GitHub Enterprise host name. For example: https://github.mydomain.com.
     * 
     */
    private @Nullable String gitUrl;
    /**
     * @return The last commit ID.
     * 
     */
    private @Nullable String lastCommitId;
    /**
     * @return Specifies the name of the git repository.
     * 
     */
    private String repositoryName;
    /**
     * @return Specifies the root folder within the repository. Set to `/` for the top level.
     * 
     */
    private String rootFolder;

    private WorkspaceGithubRepo() {}
    /**
     * @return Specifies the GitHub account name.
     * 
     */
    public String accountName() {
        return this.accountName;
    }
    /**
     * @return Specifies the collaboration branch of the repository to get code from.
     * 
     */
    public String branchName() {
        return this.branchName;
    }
    /**
     * @return Specifies the GitHub Enterprise host name. For example: https://github.mydomain.com.
     * 
     */
    public Optional<String> gitUrl() {
        return Optional.ofNullable(this.gitUrl);
    }
    /**
     * @return The last commit ID.
     * 
     */
    public Optional<String> lastCommitId() {
        return Optional.ofNullable(this.lastCommitId);
    }
    /**
     * @return Specifies the name of the git repository.
     * 
     */
    public String repositoryName() {
        return this.repositoryName;
    }
    /**
     * @return Specifies the root folder within the repository. Set to `/` for the top level.
     * 
     */
    public String rootFolder() {
        return this.rootFolder;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkspaceGithubRepo defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountName;
        private String branchName;
        private @Nullable String gitUrl;
        private @Nullable String lastCommitId;
        private String repositoryName;
        private String rootFolder;
        public Builder() {}
        public Builder(WorkspaceGithubRepo defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.branchName = defaults.branchName;
    	      this.gitUrl = defaults.gitUrl;
    	      this.lastCommitId = defaults.lastCommitId;
    	      this.repositoryName = defaults.repositoryName;
    	      this.rootFolder = defaults.rootFolder;
        }

        @CustomType.Setter
        public Builder accountName(String accountName) {
            this.accountName = Objects.requireNonNull(accountName);
            return this;
        }
        @CustomType.Setter
        public Builder branchName(String branchName) {
            this.branchName = Objects.requireNonNull(branchName);
            return this;
        }
        @CustomType.Setter
        public Builder gitUrl(@Nullable String gitUrl) {
            this.gitUrl = gitUrl;
            return this;
        }
        @CustomType.Setter
        public Builder lastCommitId(@Nullable String lastCommitId) {
            this.lastCommitId = lastCommitId;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryName(String repositoryName) {
            this.repositoryName = Objects.requireNonNull(repositoryName);
            return this;
        }
        @CustomType.Setter
        public Builder rootFolder(String rootFolder) {
            this.rootFolder = Objects.requireNonNull(rootFolder);
            return this;
        }
        public WorkspaceGithubRepo build() {
            final var o = new WorkspaceGithubRepo();
            o.accountName = accountName;
            o.branchName = branchName;
            o.gitUrl = gitUrl;
            o.lastCommitId = lastCommitId;
            o.repositoryName = repositoryName;
            o.rootFolder = rootFolder;
            return o;
        }
    }
}
