// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.outputs;

import com.pulumi.azure.compute.outputs.GetSharedImageVersionsImageTargetRegion;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSharedImageVersionsImage {
    /**
     * @return Is this Image Version excluded from the `latest` filter?
     * 
     */
    private final Boolean excludeFromLatest;
    /**
     * @return The supported Azure location where the Shared Image Gallery exists.
     * 
     */
    private final String location;
    /**
     * @return The ID of the Managed Image which was the source of this Shared Image Version.
     * 
     */
    private final String managedImageId;
    /**
     * @return The Azure Region in which this Image Version exists.
     * 
     */
    private final String name;
    /**
     * @return A mapping of tags assigned to the Shared Image.
     * 
     */
    private final Map<String,String> tags;
    /**
     * @return One or more `target_region` blocks as documented below.
     * 
     */
    private final List<GetSharedImageVersionsImageTargetRegion> targetRegions;

    @CustomType.Constructor
    private GetSharedImageVersionsImage(
        @CustomType.Parameter("excludeFromLatest") Boolean excludeFromLatest,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("managedImageId") String managedImageId,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("tags") Map<String,String> tags,
        @CustomType.Parameter("targetRegions") List<GetSharedImageVersionsImageTargetRegion> targetRegions) {
        this.excludeFromLatest = excludeFromLatest;
        this.location = location;
        this.managedImageId = managedImageId;
        this.name = name;
        this.tags = tags;
        this.targetRegions = targetRegions;
    }

    /**
     * @return Is this Image Version excluded from the `latest` filter?
     * 
     */
    public Boolean excludeFromLatest() {
        return this.excludeFromLatest;
    }
    /**
     * @return The supported Azure location where the Shared Image Gallery exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The ID of the Managed Image which was the source of this Shared Image Version.
     * 
     */
    public String managedImageId() {
        return this.managedImageId;
    }
    /**
     * @return The Azure Region in which this Image Version exists.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A mapping of tags assigned to the Shared Image.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return One or more `target_region` blocks as documented below.
     * 
     */
    public List<GetSharedImageVersionsImageTargetRegion> targetRegions() {
        return this.targetRegions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSharedImageVersionsImage defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean excludeFromLatest;
        private String location;
        private String managedImageId;
        private String name;
        private Map<String,String> tags;
        private List<GetSharedImageVersionsImageTargetRegion> targetRegions;

        public Builder() {
    	      // Empty
        }

        public Builder(GetSharedImageVersionsImage defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.excludeFromLatest = defaults.excludeFromLatest;
    	      this.location = defaults.location;
    	      this.managedImageId = defaults.managedImageId;
    	      this.name = defaults.name;
    	      this.tags = defaults.tags;
    	      this.targetRegions = defaults.targetRegions;
        }

        public Builder excludeFromLatest(Boolean excludeFromLatest) {
            this.excludeFromLatest = Objects.requireNonNull(excludeFromLatest);
            return this;
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder managedImageId(String managedImageId) {
            this.managedImageId = Objects.requireNonNull(managedImageId);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder targetRegions(List<GetSharedImageVersionsImageTargetRegion> targetRegions) {
            this.targetRegions = Objects.requireNonNull(targetRegions);
            return this;
        }
        public Builder targetRegions(GetSharedImageVersionsImageTargetRegion... targetRegions) {
            return targetRegions(List.of(targetRegions));
        }        public GetSharedImageVersionsImage build() {
            return new GetSharedImageVersionsImage(excludeFromLatest, location, managedImageId, name, tags, targetRegions);
        }
    }
}
