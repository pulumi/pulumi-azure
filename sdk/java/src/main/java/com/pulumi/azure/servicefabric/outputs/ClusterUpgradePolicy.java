// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.servicefabric.outputs;

import com.pulumi.azure.servicefabric.outputs.ClusterUpgradePolicyDeltaHealthPolicy;
import com.pulumi.azure.servicefabric.outputs.ClusterUpgradePolicyHealthPolicy;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterUpgradePolicy {
    /**
     * @return A `delta_health_policy` block as defined below
     * 
     */
    private @Nullable ClusterUpgradePolicyDeltaHealthPolicy deltaHealthPolicy;
    /**
     * @return Indicates whether to restart the Service Fabric node even if only dynamic configurations have changed.
     * 
     */
    private @Nullable Boolean forceRestartEnabled;
    /**
     * @return Specifies the duration, in &#34;hh:mm:ss&#34; string format, after which Service Fabric retries the health check if the previous health check fails. Defaults to `00:45:00`.
     * 
     */
    private @Nullable String healthCheckRetryTimeout;
    /**
     * @return Specifies the duration, in &#34;hh:mm:ss&#34; string format, that Service Fabric waits in order to verify that the cluster is stable before it continues to the next upgrade domain or completes the upgrade. This wait duration prevents undetected changes of health right after the health check is performed. Defaults to `00:01:00`.
     * 
     */
    private @Nullable String healthCheckStableDuration;
    /**
     * @return Specifies the duration, in &#34;hh:mm:ss&#34; string format, that Service Fabric waits before it performs the initial health check after it finishes the upgrade on the upgrade domain. Defaults to `00:00:30`.
     * 
     */
    private @Nullable String healthCheckWaitDuration;
    /**
     * @return A `health_policy` block as defined below
     * 
     */
    private @Nullable ClusterUpgradePolicyHealthPolicy healthPolicy;
    /**
     * @return Specifies the duration, in &#34;hh:mm:ss&#34; string format, that Service Fabric takes to upgrade a single upgrade domain. After this period, the upgrade fails. Defaults to `02:00:00`.
     * 
     */
    private @Nullable String upgradeDomainTimeout;
    /**
     * @return Specifies the duration, in &#34;hh:mm:ss&#34; string format, that Service Fabric waits for a replica set to reconfigure into a safe state, if it is not already in a safe state, before Service Fabric proceeds with the upgrade. Defaults to `10675199.02:48:05.4775807`.
     * 
     */
    private @Nullable String upgradeReplicaSetCheckTimeout;
    /**
     * @return Specifies the duration, in &#34;hh:mm:ss&#34; string format, that Service Fabric takes for the entire upgrade. After this period, the upgrade fails. Defaults to `12:00:00`.
     * 
     */
    private @Nullable String upgradeTimeout;

    private ClusterUpgradePolicy() {}
    /**
     * @return A `delta_health_policy` block as defined below
     * 
     */
    public Optional<ClusterUpgradePolicyDeltaHealthPolicy> deltaHealthPolicy() {
        return Optional.ofNullable(this.deltaHealthPolicy);
    }
    /**
     * @return Indicates whether to restart the Service Fabric node even if only dynamic configurations have changed.
     * 
     */
    public Optional<Boolean> forceRestartEnabled() {
        return Optional.ofNullable(this.forceRestartEnabled);
    }
    /**
     * @return Specifies the duration, in &#34;hh:mm:ss&#34; string format, after which Service Fabric retries the health check if the previous health check fails. Defaults to `00:45:00`.
     * 
     */
    public Optional<String> healthCheckRetryTimeout() {
        return Optional.ofNullable(this.healthCheckRetryTimeout);
    }
    /**
     * @return Specifies the duration, in &#34;hh:mm:ss&#34; string format, that Service Fabric waits in order to verify that the cluster is stable before it continues to the next upgrade domain or completes the upgrade. This wait duration prevents undetected changes of health right after the health check is performed. Defaults to `00:01:00`.
     * 
     */
    public Optional<String> healthCheckStableDuration() {
        return Optional.ofNullable(this.healthCheckStableDuration);
    }
    /**
     * @return Specifies the duration, in &#34;hh:mm:ss&#34; string format, that Service Fabric waits before it performs the initial health check after it finishes the upgrade on the upgrade domain. Defaults to `00:00:30`.
     * 
     */
    public Optional<String> healthCheckWaitDuration() {
        return Optional.ofNullable(this.healthCheckWaitDuration);
    }
    /**
     * @return A `health_policy` block as defined below
     * 
     */
    public Optional<ClusterUpgradePolicyHealthPolicy> healthPolicy() {
        return Optional.ofNullable(this.healthPolicy);
    }
    /**
     * @return Specifies the duration, in &#34;hh:mm:ss&#34; string format, that Service Fabric takes to upgrade a single upgrade domain. After this period, the upgrade fails. Defaults to `02:00:00`.
     * 
     */
    public Optional<String> upgradeDomainTimeout() {
        return Optional.ofNullable(this.upgradeDomainTimeout);
    }
    /**
     * @return Specifies the duration, in &#34;hh:mm:ss&#34; string format, that Service Fabric waits for a replica set to reconfigure into a safe state, if it is not already in a safe state, before Service Fabric proceeds with the upgrade. Defaults to `10675199.02:48:05.4775807`.
     * 
     */
    public Optional<String> upgradeReplicaSetCheckTimeout() {
        return Optional.ofNullable(this.upgradeReplicaSetCheckTimeout);
    }
    /**
     * @return Specifies the duration, in &#34;hh:mm:ss&#34; string format, that Service Fabric takes for the entire upgrade. After this period, the upgrade fails. Defaults to `12:00:00`.
     * 
     */
    public Optional<String> upgradeTimeout() {
        return Optional.ofNullable(this.upgradeTimeout);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterUpgradePolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ClusterUpgradePolicyDeltaHealthPolicy deltaHealthPolicy;
        private @Nullable Boolean forceRestartEnabled;
        private @Nullable String healthCheckRetryTimeout;
        private @Nullable String healthCheckStableDuration;
        private @Nullable String healthCheckWaitDuration;
        private @Nullable ClusterUpgradePolicyHealthPolicy healthPolicy;
        private @Nullable String upgradeDomainTimeout;
        private @Nullable String upgradeReplicaSetCheckTimeout;
        private @Nullable String upgradeTimeout;
        public Builder() {}
        public Builder(ClusterUpgradePolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deltaHealthPolicy = defaults.deltaHealthPolicy;
    	      this.forceRestartEnabled = defaults.forceRestartEnabled;
    	      this.healthCheckRetryTimeout = defaults.healthCheckRetryTimeout;
    	      this.healthCheckStableDuration = defaults.healthCheckStableDuration;
    	      this.healthCheckWaitDuration = defaults.healthCheckWaitDuration;
    	      this.healthPolicy = defaults.healthPolicy;
    	      this.upgradeDomainTimeout = defaults.upgradeDomainTimeout;
    	      this.upgradeReplicaSetCheckTimeout = defaults.upgradeReplicaSetCheckTimeout;
    	      this.upgradeTimeout = defaults.upgradeTimeout;
        }

        @CustomType.Setter
        public Builder deltaHealthPolicy(@Nullable ClusterUpgradePolicyDeltaHealthPolicy deltaHealthPolicy) {

            this.deltaHealthPolicy = deltaHealthPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder forceRestartEnabled(@Nullable Boolean forceRestartEnabled) {

            this.forceRestartEnabled = forceRestartEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckRetryTimeout(@Nullable String healthCheckRetryTimeout) {

            this.healthCheckRetryTimeout = healthCheckRetryTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckStableDuration(@Nullable String healthCheckStableDuration) {

            this.healthCheckStableDuration = healthCheckStableDuration;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckWaitDuration(@Nullable String healthCheckWaitDuration) {

            this.healthCheckWaitDuration = healthCheckWaitDuration;
            return this;
        }
        @CustomType.Setter
        public Builder healthPolicy(@Nullable ClusterUpgradePolicyHealthPolicy healthPolicy) {

            this.healthPolicy = healthPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder upgradeDomainTimeout(@Nullable String upgradeDomainTimeout) {

            this.upgradeDomainTimeout = upgradeDomainTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder upgradeReplicaSetCheckTimeout(@Nullable String upgradeReplicaSetCheckTimeout) {

            this.upgradeReplicaSetCheckTimeout = upgradeReplicaSetCheckTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder upgradeTimeout(@Nullable String upgradeTimeout) {

            this.upgradeTimeout = upgradeTimeout;
            return this;
        }
        public ClusterUpgradePolicy build() {
            final var _resultValue = new ClusterUpgradePolicy();
            _resultValue.deltaHealthPolicy = deltaHealthPolicy;
            _resultValue.forceRestartEnabled = forceRestartEnabled;
            _resultValue.healthCheckRetryTimeout = healthCheckRetryTimeout;
            _resultValue.healthCheckStableDuration = healthCheckStableDuration;
            _resultValue.healthCheckWaitDuration = healthCheckWaitDuration;
            _resultValue.healthPolicy = healthPolicy;
            _resultValue.upgradeDomainTimeout = upgradeDomainTimeout;
            _resultValue.upgradeReplicaSetCheckTimeout = upgradeReplicaSetCheckTimeout;
            _resultValue.upgradeTimeout = upgradeTimeout;
            return _resultValue;
        }
    }
}
