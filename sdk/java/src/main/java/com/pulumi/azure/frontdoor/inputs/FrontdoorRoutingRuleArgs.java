// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.frontdoor.inputs;

import com.pulumi.azure.frontdoor.inputs.FrontdoorRoutingRuleForwardingConfigurationArgs;
import com.pulumi.azure.frontdoor.inputs.FrontdoorRoutingRuleRedirectConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FrontdoorRoutingRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final FrontdoorRoutingRuleArgs Empty = new FrontdoorRoutingRuleArgs();

    /**
     * Protocol schemes to match for the Backend Routing Rule. Possible values are `Http` and `Https`.
     * 
     */
    @Import(name="acceptedProtocols", required=true)
    private Output<List<String>> acceptedProtocols;

    /**
     * @return Protocol schemes to match for the Backend Routing Rule. Possible values are `Http` and `Https`.
     * 
     */
    public Output<List<String>> acceptedProtocols() {
        return this.acceptedProtocols;
    }

    /**
     * `Enable` or `Disable` use of this Backend Routing Rule. Permitted values are `true` or `false`. Defaults to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return `Enable` or `Disable` use of this Backend Routing Rule. Permitted values are `true` or `false`. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * A `forwarding_configuration` block as defined below.
     * 
     */
    @Import(name="forwardingConfiguration")
    private @Nullable Output<FrontdoorRoutingRuleForwardingConfigurationArgs> forwardingConfiguration;

    /**
     * @return A `forwarding_configuration` block as defined below.
     * 
     */
    public Optional<Output<FrontdoorRoutingRuleForwardingConfigurationArgs>> forwardingConfiguration() {
        return Optional.ofNullable(this.forwardingConfiguration);
    }

    /**
     * The names of the `frontend_endpoint` blocks within this resource to associate with this `routing_rule`.
     * 
     */
    @Import(name="frontendEndpoints", required=true)
    private Output<List<String>> frontendEndpoints;

    /**
     * @return The names of the `frontend_endpoint` blocks within this resource to associate with this `routing_rule`.
     * 
     */
    public Output<List<String>> frontendEndpoints() {
        return this.frontendEndpoints;
    }

    /**
     * The ID of the FrontDoor.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The ID of the FrontDoor.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Specifies the name of the Routing Rule.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Specifies the name of the Routing Rule.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The route patterns for the Backend Routing Rule.
     * 
     */
    @Import(name="patternsToMatches", required=true)
    private Output<List<String>> patternsToMatches;

    /**
     * @return The route patterns for the Backend Routing Rule.
     * 
     */
    public Output<List<String>> patternsToMatches() {
        return this.patternsToMatches;
    }

    /**
     * A `redirect_configuration` block as defined below.
     * 
     */
    @Import(name="redirectConfiguration")
    private @Nullable Output<FrontdoorRoutingRuleRedirectConfigurationArgs> redirectConfiguration;

    /**
     * @return A `redirect_configuration` block as defined below.
     * 
     */
    public Optional<Output<FrontdoorRoutingRuleRedirectConfigurationArgs>> redirectConfiguration() {
        return Optional.ofNullable(this.redirectConfiguration);
    }

    private FrontdoorRoutingRuleArgs() {}

    private FrontdoorRoutingRuleArgs(FrontdoorRoutingRuleArgs $) {
        this.acceptedProtocols = $.acceptedProtocols;
        this.enabled = $.enabled;
        this.forwardingConfiguration = $.forwardingConfiguration;
        this.frontendEndpoints = $.frontendEndpoints;
        this.id = $.id;
        this.name = $.name;
        this.patternsToMatches = $.patternsToMatches;
        this.redirectConfiguration = $.redirectConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FrontdoorRoutingRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FrontdoorRoutingRuleArgs $;

        public Builder() {
            $ = new FrontdoorRoutingRuleArgs();
        }

        public Builder(FrontdoorRoutingRuleArgs defaults) {
            $ = new FrontdoorRoutingRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acceptedProtocols Protocol schemes to match for the Backend Routing Rule. Possible values are `Http` and `Https`.
         * 
         * @return builder
         * 
         */
        public Builder acceptedProtocols(Output<List<String>> acceptedProtocols) {
            $.acceptedProtocols = acceptedProtocols;
            return this;
        }

        /**
         * @param acceptedProtocols Protocol schemes to match for the Backend Routing Rule. Possible values are `Http` and `Https`.
         * 
         * @return builder
         * 
         */
        public Builder acceptedProtocols(List<String> acceptedProtocols) {
            return acceptedProtocols(Output.of(acceptedProtocols));
        }

        /**
         * @param acceptedProtocols Protocol schemes to match for the Backend Routing Rule. Possible values are `Http` and `Https`.
         * 
         * @return builder
         * 
         */
        public Builder acceptedProtocols(String... acceptedProtocols) {
            return acceptedProtocols(List.of(acceptedProtocols));
        }

        /**
         * @param enabled `Enable` or `Disable` use of this Backend Routing Rule. Permitted values are `true` or `false`. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled `Enable` or `Disable` use of this Backend Routing Rule. Permitted values are `true` or `false`. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param forwardingConfiguration A `forwarding_configuration` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder forwardingConfiguration(@Nullable Output<FrontdoorRoutingRuleForwardingConfigurationArgs> forwardingConfiguration) {
            $.forwardingConfiguration = forwardingConfiguration;
            return this;
        }

        /**
         * @param forwardingConfiguration A `forwarding_configuration` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder forwardingConfiguration(FrontdoorRoutingRuleForwardingConfigurationArgs forwardingConfiguration) {
            return forwardingConfiguration(Output.of(forwardingConfiguration));
        }

        /**
         * @param frontendEndpoints The names of the `frontend_endpoint` blocks within this resource to associate with this `routing_rule`.
         * 
         * @return builder
         * 
         */
        public Builder frontendEndpoints(Output<List<String>> frontendEndpoints) {
            $.frontendEndpoints = frontendEndpoints;
            return this;
        }

        /**
         * @param frontendEndpoints The names of the `frontend_endpoint` blocks within this resource to associate with this `routing_rule`.
         * 
         * @return builder
         * 
         */
        public Builder frontendEndpoints(List<String> frontendEndpoints) {
            return frontendEndpoints(Output.of(frontendEndpoints));
        }

        /**
         * @param frontendEndpoints The names of the `frontend_endpoint` blocks within this resource to associate with this `routing_rule`.
         * 
         * @return builder
         * 
         */
        public Builder frontendEndpoints(String... frontendEndpoints) {
            return frontendEndpoints(List.of(frontendEndpoints));
        }

        /**
         * @param id The ID of the FrontDoor.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the FrontDoor.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name Specifies the name of the Routing Rule.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Routing Rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param patternsToMatches The route patterns for the Backend Routing Rule.
         * 
         * @return builder
         * 
         */
        public Builder patternsToMatches(Output<List<String>> patternsToMatches) {
            $.patternsToMatches = patternsToMatches;
            return this;
        }

        /**
         * @param patternsToMatches The route patterns for the Backend Routing Rule.
         * 
         * @return builder
         * 
         */
        public Builder patternsToMatches(List<String> patternsToMatches) {
            return patternsToMatches(Output.of(patternsToMatches));
        }

        /**
         * @param patternsToMatches The route patterns for the Backend Routing Rule.
         * 
         * @return builder
         * 
         */
        public Builder patternsToMatches(String... patternsToMatches) {
            return patternsToMatches(List.of(patternsToMatches));
        }

        /**
         * @param redirectConfiguration A `redirect_configuration` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder redirectConfiguration(@Nullable Output<FrontdoorRoutingRuleRedirectConfigurationArgs> redirectConfiguration) {
            $.redirectConfiguration = redirectConfiguration;
            return this;
        }

        /**
         * @param redirectConfiguration A `redirect_configuration` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder redirectConfiguration(FrontdoorRoutingRuleRedirectConfigurationArgs redirectConfiguration) {
            return redirectConfiguration(Output.of(redirectConfiguration));
        }

        public FrontdoorRoutingRuleArgs build() {
            if ($.acceptedProtocols == null) {
                throw new MissingRequiredPropertyException("FrontdoorRoutingRuleArgs", "acceptedProtocols");
            }
            if ($.frontendEndpoints == null) {
                throw new MissingRequiredPropertyException("FrontdoorRoutingRuleArgs", "frontendEndpoints");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("FrontdoorRoutingRuleArgs", "name");
            }
            if ($.patternsToMatches == null) {
                throw new MissingRequiredPropertyException("FrontdoorRoutingRuleArgs", "patternsToMatches");
            }
            return $;
        }
    }

}
