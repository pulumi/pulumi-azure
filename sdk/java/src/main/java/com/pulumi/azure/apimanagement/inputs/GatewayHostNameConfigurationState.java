// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.apimanagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewayHostNameConfigurationState extends com.pulumi.resources.ResourceArgs {

    public static final GatewayHostNameConfigurationState Empty = new GatewayHostNameConfigurationState();

    /**
     * The ID of the API Management Service. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="apiManagementId")
    private @Nullable Output<String> apiManagementId;

    /**
     * @return The ID of the API Management Service. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> apiManagementId() {
        return Optional.ofNullable(this.apiManagementId);
    }

    /**
     * The certificate ID to be used for TLS connection establishment.
     * 
     */
    @Import(name="certificateId")
    private @Nullable Output<String> certificateId;

    /**
     * @return The certificate ID to be used for TLS connection establishment.
     * 
     */
    public Optional<Output<String>> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }

    /**
     * The name of the API Management Gateway. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="gatewayName")
    private @Nullable Output<String> gatewayName;

    /**
     * @return The name of the API Management Gateway. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> gatewayName() {
        return Optional.ofNullable(this.gatewayName);
    }

    /**
     * The host name to use for the API Management Gateway Host Name Configuration.
     * 
     */
    @Import(name="hostName")
    private @Nullable Output<String> hostName;

    /**
     * @return The host name to use for the API Management Gateway Host Name Configuration.
     * 
     */
    public Optional<Output<String>> hostName() {
        return Optional.ofNullable(this.hostName);
    }

    /**
     * Whether HTTP/2.0 is supported. Defaults to `true`.
     * 
     */
    @Import(name="http2Enabled")
    private @Nullable Output<Boolean> http2Enabled;

    /**
     * @return Whether HTTP/2.0 is supported. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> http2Enabled() {
        return Optional.ofNullable(this.http2Enabled);
    }

    /**
     * The name of the API Management Gateway Host Name Configuration. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the API Management Gateway Host Name Configuration. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Whether the API Management Gateway requests a client certificate.
     * 
     */
    @Import(name="requestClientCertificateEnabled")
    private @Nullable Output<Boolean> requestClientCertificateEnabled;

    /**
     * @return Whether the API Management Gateway requests a client certificate.
     * 
     */
    public Optional<Output<Boolean>> requestClientCertificateEnabled() {
        return Optional.ofNullable(this.requestClientCertificateEnabled);
    }

    /**
     * Whether TLS 1.0 is supported.
     * 
     */
    @Import(name="tls10Enabled")
    private @Nullable Output<Boolean> tls10Enabled;

    /**
     * @return Whether TLS 1.0 is supported.
     * 
     */
    public Optional<Output<Boolean>> tls10Enabled() {
        return Optional.ofNullable(this.tls10Enabled);
    }

    /**
     * Whether TLS 1.1 is supported.
     * 
     */
    @Import(name="tls11Enabled")
    private @Nullable Output<Boolean> tls11Enabled;

    /**
     * @return Whether TLS 1.1 is supported.
     * 
     */
    public Optional<Output<Boolean>> tls11Enabled() {
        return Optional.ofNullable(this.tls11Enabled);
    }

    private GatewayHostNameConfigurationState() {}

    private GatewayHostNameConfigurationState(GatewayHostNameConfigurationState $) {
        this.apiManagementId = $.apiManagementId;
        this.certificateId = $.certificateId;
        this.gatewayName = $.gatewayName;
        this.hostName = $.hostName;
        this.http2Enabled = $.http2Enabled;
        this.name = $.name;
        this.requestClientCertificateEnabled = $.requestClientCertificateEnabled;
        this.tls10Enabled = $.tls10Enabled;
        this.tls11Enabled = $.tls11Enabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayHostNameConfigurationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayHostNameConfigurationState $;

        public Builder() {
            $ = new GatewayHostNameConfigurationState();
        }

        public Builder(GatewayHostNameConfigurationState defaults) {
            $ = new GatewayHostNameConfigurationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiManagementId The ID of the API Management Service. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder apiManagementId(@Nullable Output<String> apiManagementId) {
            $.apiManagementId = apiManagementId;
            return this;
        }

        /**
         * @param apiManagementId The ID of the API Management Service. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder apiManagementId(String apiManagementId) {
            return apiManagementId(Output.of(apiManagementId));
        }

        /**
         * @param certificateId The certificate ID to be used for TLS connection establishment.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(@Nullable Output<String> certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        /**
         * @param certificateId The certificate ID to be used for TLS connection establishment.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(String certificateId) {
            return certificateId(Output.of(certificateId));
        }

        /**
         * @param gatewayName The name of the API Management Gateway. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder gatewayName(@Nullable Output<String> gatewayName) {
            $.gatewayName = gatewayName;
            return this;
        }

        /**
         * @param gatewayName The name of the API Management Gateway. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder gatewayName(String gatewayName) {
            return gatewayName(Output.of(gatewayName));
        }

        /**
         * @param hostName The host name to use for the API Management Gateway Host Name Configuration.
         * 
         * @return builder
         * 
         */
        public Builder hostName(@Nullable Output<String> hostName) {
            $.hostName = hostName;
            return this;
        }

        /**
         * @param hostName The host name to use for the API Management Gateway Host Name Configuration.
         * 
         * @return builder
         * 
         */
        public Builder hostName(String hostName) {
            return hostName(Output.of(hostName));
        }

        /**
         * @param http2Enabled Whether HTTP/2.0 is supported. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder http2Enabled(@Nullable Output<Boolean> http2Enabled) {
            $.http2Enabled = http2Enabled;
            return this;
        }

        /**
         * @param http2Enabled Whether HTTP/2.0 is supported. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder http2Enabled(Boolean http2Enabled) {
            return http2Enabled(Output.of(http2Enabled));
        }

        /**
         * @param name The name of the API Management Gateway Host Name Configuration. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the API Management Gateway Host Name Configuration. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param requestClientCertificateEnabled Whether the API Management Gateway requests a client certificate.
         * 
         * @return builder
         * 
         */
        public Builder requestClientCertificateEnabled(@Nullable Output<Boolean> requestClientCertificateEnabled) {
            $.requestClientCertificateEnabled = requestClientCertificateEnabled;
            return this;
        }

        /**
         * @param requestClientCertificateEnabled Whether the API Management Gateway requests a client certificate.
         * 
         * @return builder
         * 
         */
        public Builder requestClientCertificateEnabled(Boolean requestClientCertificateEnabled) {
            return requestClientCertificateEnabled(Output.of(requestClientCertificateEnabled));
        }

        /**
         * @param tls10Enabled Whether TLS 1.0 is supported.
         * 
         * @return builder
         * 
         */
        public Builder tls10Enabled(@Nullable Output<Boolean> tls10Enabled) {
            $.tls10Enabled = tls10Enabled;
            return this;
        }

        /**
         * @param tls10Enabled Whether TLS 1.0 is supported.
         * 
         * @return builder
         * 
         */
        public Builder tls10Enabled(Boolean tls10Enabled) {
            return tls10Enabled(Output.of(tls10Enabled));
        }

        /**
         * @param tls11Enabled Whether TLS 1.1 is supported.
         * 
         * @return builder
         * 
         */
        public Builder tls11Enabled(@Nullable Output<Boolean> tls11Enabled) {
            $.tls11Enabled = tls11Enabled;
            return this;
        }

        /**
         * @param tls11Enabled Whether TLS 1.1 is supported.
         * 
         * @return builder
         * 
         */
        public Builder tls11Enabled(Boolean tls11Enabled) {
            return tls11Enabled(Output.of(tls11Enabled));
        }

        public GatewayHostNameConfigurationState build() {
            return $;
        }
    }

}
