// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerapp.inputs;

import com.pulumi.azure.containerapp.inputs.JobTemplateInitContainerEnvArgs;
import com.pulumi.azure.containerapp.inputs.JobTemplateInitContainerVolumeMountArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobTemplateInitContainerArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobTemplateInitContainerArgs Empty = new JobTemplateInitContainerArgs();

    /**
     * A list of extra arguments to pass to the container.
     * 
     */
    @Import(name="args")
    private @Nullable Output<List<String>> args;

    /**
     * @return A list of extra arguments to pass to the container.
     * 
     */
    public Optional<Output<List<String>>> args() {
        return Optional.ofNullable(this.args);
    }

    /**
     * A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
     * 
     */
    @Import(name="commands")
    private @Nullable Output<List<String>> commands;

    /**
     * @return A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
     * 
     */
    public Optional<Output<List<String>>> commands() {
        return Optional.ofNullable(this.commands);
    }

    /**
     * The amount of vCPU to allocate to the container.
     * 
     * &gt; **Note:** When using a Consumption plan, the `cpu` and `memory` properties must add up to one of the combinations found in the Microsoft provided documentation, for more information see [vCPU and memory allocation requirements](https://learn.microsoft.com/azure/container-apps/containers#allocations)
     * 
     */
    @Import(name="cpu")
    private @Nullable Output<Double> cpu;

    /**
     * @return The amount of vCPU to allocate to the container.
     * 
     * &gt; **Note:** When using a Consumption plan, the `cpu` and `memory` properties must add up to one of the combinations found in the Microsoft provided documentation, for more information see [vCPU and memory allocation requirements](https://learn.microsoft.com/azure/container-apps/containers#allocations)
     * 
     */
    public Optional<Output<Double>> cpu() {
        return Optional.ofNullable(this.cpu);
    }

    /**
     * One or more `env` blocks as detailed below.
     * 
     */
    @Import(name="envs")
    private @Nullable Output<List<JobTemplateInitContainerEnvArgs>> envs;

    /**
     * @return One or more `env` blocks as detailed below.
     * 
     */
    public Optional<Output<List<JobTemplateInitContainerEnvArgs>>> envs() {
        return Optional.ofNullable(this.envs);
    }

    /**
     * The amount of ephemeral storage available to the Container App.
     * 
     * &gt; **Note:** `ephemeralStorage` is currently in preview and not configurable at this time.
     * 
     */
    @Import(name="ephemeralStorage")
    private @Nullable Output<String> ephemeralStorage;

    /**
     * @return The amount of ephemeral storage available to the Container App.
     * 
     * &gt; **Note:** `ephemeralStorage` is currently in preview and not configurable at this time.
     * 
     */
    public Optional<Output<String>> ephemeralStorage() {
        return Optional.ofNullable(this.ephemeralStorage);
    }

    /**
     * The image to use to create the container.
     * 
     */
    @Import(name="image", required=true)
    private Output<String> image;

    /**
     * @return The image to use to create the container.
     * 
     */
    public Output<String> image() {
        return this.image;
    }

    /**
     * The amount of memory to allocate to the container.
     * 
     * &gt; **Note:** When using a Consumption plan, the `cpu` and `memory` properties must add up to one of the combinations found in the Microsoft provided documentation, for more information see [vCPU and memory allocation requirements](https://learn.microsoft.com/azure/container-apps/containers#allocations)
     * 
     */
    @Import(name="memory")
    private @Nullable Output<String> memory;

    /**
     * @return The amount of memory to allocate to the container.
     * 
     * &gt; **Note:** When using a Consumption plan, the `cpu` and `memory` properties must add up to one of the combinations found in the Microsoft provided documentation, for more information see [vCPU and memory allocation requirements](https://learn.microsoft.com/azure/container-apps/containers#allocations)
     * 
     */
    public Optional<Output<String>> memory() {
        return Optional.ofNullable(this.memory);
    }

    /**
     * The name of the container.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the container.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * A `volumeMounts` block as detailed below.
     * 
     */
    @Import(name="volumeMounts")
    private @Nullable Output<List<JobTemplateInitContainerVolumeMountArgs>> volumeMounts;

    /**
     * @return A `volumeMounts` block as detailed below.
     * 
     */
    public Optional<Output<List<JobTemplateInitContainerVolumeMountArgs>>> volumeMounts() {
        return Optional.ofNullable(this.volumeMounts);
    }

    private JobTemplateInitContainerArgs() {}

    private JobTemplateInitContainerArgs(JobTemplateInitContainerArgs $) {
        this.args = $.args;
        this.commands = $.commands;
        this.cpu = $.cpu;
        this.envs = $.envs;
        this.ephemeralStorage = $.ephemeralStorage;
        this.image = $.image;
        this.memory = $.memory;
        this.name = $.name;
        this.volumeMounts = $.volumeMounts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobTemplateInitContainerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobTemplateInitContainerArgs $;

        public Builder() {
            $ = new JobTemplateInitContainerArgs();
        }

        public Builder(JobTemplateInitContainerArgs defaults) {
            $ = new JobTemplateInitContainerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param args A list of extra arguments to pass to the container.
         * 
         * @return builder
         * 
         */
        public Builder args(@Nullable Output<List<String>> args) {
            $.args = args;
            return this;
        }

        /**
         * @param args A list of extra arguments to pass to the container.
         * 
         * @return builder
         * 
         */
        public Builder args(List<String> args) {
            return args(Output.of(args));
        }

        /**
         * @param args A list of extra arguments to pass to the container.
         * 
         * @return builder
         * 
         */
        public Builder args(String... args) {
            return args(List.of(args));
        }

        /**
         * @param commands A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
         * 
         * @return builder
         * 
         */
        public Builder commands(@Nullable Output<List<String>> commands) {
            $.commands = commands;
            return this;
        }

        /**
         * @param commands A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
         * 
         * @return builder
         * 
         */
        public Builder commands(List<String> commands) {
            return commands(Output.of(commands));
        }

        /**
         * @param commands A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
         * 
         * @return builder
         * 
         */
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }

        /**
         * @param cpu The amount of vCPU to allocate to the container.
         * 
         * &gt; **Note:** When using a Consumption plan, the `cpu` and `memory` properties must add up to one of the combinations found in the Microsoft provided documentation, for more information see [vCPU and memory allocation requirements](https://learn.microsoft.com/azure/container-apps/containers#allocations)
         * 
         * @return builder
         * 
         */
        public Builder cpu(@Nullable Output<Double> cpu) {
            $.cpu = cpu;
            return this;
        }

        /**
         * @param cpu The amount of vCPU to allocate to the container.
         * 
         * &gt; **Note:** When using a Consumption plan, the `cpu` and `memory` properties must add up to one of the combinations found in the Microsoft provided documentation, for more information see [vCPU and memory allocation requirements](https://learn.microsoft.com/azure/container-apps/containers#allocations)
         * 
         * @return builder
         * 
         */
        public Builder cpu(Double cpu) {
            return cpu(Output.of(cpu));
        }

        /**
         * @param envs One or more `env` blocks as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder envs(@Nullable Output<List<JobTemplateInitContainerEnvArgs>> envs) {
            $.envs = envs;
            return this;
        }

        /**
         * @param envs One or more `env` blocks as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder envs(List<JobTemplateInitContainerEnvArgs> envs) {
            return envs(Output.of(envs));
        }

        /**
         * @param envs One or more `env` blocks as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder envs(JobTemplateInitContainerEnvArgs... envs) {
            return envs(List.of(envs));
        }

        /**
         * @param ephemeralStorage The amount of ephemeral storage available to the Container App.
         * 
         * &gt; **Note:** `ephemeralStorage` is currently in preview and not configurable at this time.
         * 
         * @return builder
         * 
         */
        public Builder ephemeralStorage(@Nullable Output<String> ephemeralStorage) {
            $.ephemeralStorage = ephemeralStorage;
            return this;
        }

        /**
         * @param ephemeralStorage The amount of ephemeral storage available to the Container App.
         * 
         * &gt; **Note:** `ephemeralStorage` is currently in preview and not configurable at this time.
         * 
         * @return builder
         * 
         */
        public Builder ephemeralStorage(String ephemeralStorage) {
            return ephemeralStorage(Output.of(ephemeralStorage));
        }

        /**
         * @param image The image to use to create the container.
         * 
         * @return builder
         * 
         */
        public Builder image(Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image The image to use to create the container.
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param memory The amount of memory to allocate to the container.
         * 
         * &gt; **Note:** When using a Consumption plan, the `cpu` and `memory` properties must add up to one of the combinations found in the Microsoft provided documentation, for more information see [vCPU and memory allocation requirements](https://learn.microsoft.com/azure/container-apps/containers#allocations)
         * 
         * @return builder
         * 
         */
        public Builder memory(@Nullable Output<String> memory) {
            $.memory = memory;
            return this;
        }

        /**
         * @param memory The amount of memory to allocate to the container.
         * 
         * &gt; **Note:** When using a Consumption plan, the `cpu` and `memory` properties must add up to one of the combinations found in the Microsoft provided documentation, for more information see [vCPU and memory allocation requirements](https://learn.microsoft.com/azure/container-apps/containers#allocations)
         * 
         * @return builder
         * 
         */
        public Builder memory(String memory) {
            return memory(Output.of(memory));
        }

        /**
         * @param name The name of the container.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the container.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param volumeMounts A `volumeMounts` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(@Nullable Output<List<JobTemplateInitContainerVolumeMountArgs>> volumeMounts) {
            $.volumeMounts = volumeMounts;
            return this;
        }

        /**
         * @param volumeMounts A `volumeMounts` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(List<JobTemplateInitContainerVolumeMountArgs> volumeMounts) {
            return volumeMounts(Output.of(volumeMounts));
        }

        /**
         * @param volumeMounts A `volumeMounts` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(JobTemplateInitContainerVolumeMountArgs... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }

        public JobTemplateInitContainerArgs build() {
            if ($.image == null) {
                throw new MissingRequiredPropertyException("JobTemplateInitContainerArgs", "image");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("JobTemplateInitContainerArgs", "name");
            }
            return $;
        }
    }

}
