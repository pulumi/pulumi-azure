// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.appservice.ManagedCertificateArgs;
import com.pulumi.azure.appservice.inputs.ManagedCertificateState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This certificate can be used to secure custom domains on App Services (Windows and Linux) hosted on an App Service Plan of Basic and above (free and shared tiers are not supported).
 * 
 * &gt; NOTE: A certificate is valid for six months, and about a month before the certificateâ€™s expiration date, App Services renews/rotates the certificate. This is managed by Azure and doesn&#39;t require this resource to be changed or reprovisioned. It will change the `thumbprint` computed attribute the next time the resource is refreshed after rotation occurs, so keep that in mind if you have any dependencies on this attribute directly.
 * 
 * ## Import
 * 
 * App Service Managed Certificates can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:appservice/managedCertificate:ManagedCertificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.Web/certificates/customhost.contoso.com
 * ```
 * 
 */
@ResourceType(type="azure:appservice/managedCertificate:ManagedCertificate")
public class ManagedCertificate extends com.pulumi.resources.CustomResource {
    /**
     * The Canonical Name of the Certificate.
     * 
     */
    @Export(name="canonicalName", type=String.class, parameters={})
    private Output<String> canonicalName;

    /**
     * @return The Canonical Name of the Certificate.
     * 
     */
    public Output<String> canonicalName() {
        return this.canonicalName;
    }
    /**
     * The ID of the App Service Custom Hostname Binding for the Certificate. Changing this forces a new App Service Managed Certificate to be created.
     * 
     */
    @Export(name="customHostnameBindingId", type=String.class, parameters={})
    private Output<String> customHostnameBindingId;

    /**
     * @return The ID of the App Service Custom Hostname Binding for the Certificate. Changing this forces a new App Service Managed Certificate to be created.
     * 
     */
    public Output<String> customHostnameBindingId() {
        return this.customHostnameBindingId;
    }
    /**
     * The expiration date of the Certificate.
     * 
     */
    @Export(name="expirationDate", type=String.class, parameters={})
    private Output<String> expirationDate;

    /**
     * @return The expiration date of the Certificate.
     * 
     */
    public Output<String> expirationDate() {
        return this.expirationDate;
    }
    /**
     * The friendly name of the Certificate.
     * 
     */
    @Export(name="friendlyName", type=String.class, parameters={})
    private Output<String> friendlyName;

    /**
     * @return The friendly name of the Certificate.
     * 
     */
    public Output<String> friendlyName() {
        return this.friendlyName;
    }
    /**
     * The list of Host Names for the Certificate.
     * 
     */
    @Export(name="hostNames", type=List.class, parameters={String.class})
    private Output<List<String>> hostNames;

    /**
     * @return The list of Host Names for the Certificate.
     * 
     */
    public Output<List<String>> hostNames() {
        return this.hostNames;
    }
    /**
     * The Start date for the Certificate.
     * 
     */
    @Export(name="issueDate", type=String.class, parameters={})
    private Output<String> issueDate;

    /**
     * @return The Start date for the Certificate.
     * 
     */
    public Output<String> issueDate() {
        return this.issueDate;
    }
    /**
     * The issuer of the Certificate.
     * 
     */
    @Export(name="issuer", type=String.class, parameters={})
    private Output<String> issuer;

    /**
     * @return The issuer of the Certificate.
     * 
     */
    public Output<String> issuer() {
        return this.issuer;
    }
    /**
     * The Subject Name for the Certificate.
     * 
     */
    @Export(name="subjectName", type=String.class, parameters={})
    private Output<String> subjectName;

    /**
     * @return The Subject Name for the Certificate.
     * 
     */
    public Output<String> subjectName() {
        return this.subjectName;
    }
    /**
     * A mapping of tags which should be assigned to the App Service Managed Certificate.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the App Service Managed Certificate.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The Certificate Thumbprint.
     * 
     */
    @Export(name="thumbprint", type=String.class, parameters={})
    private Output<String> thumbprint;

    /**
     * @return The Certificate Thumbprint.
     * 
     */
    public Output<String> thumbprint() {
        return this.thumbprint;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ManagedCertificate(String name) {
        this(name, ManagedCertificateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ManagedCertificate(String name, ManagedCertificateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ManagedCertificate(String name, ManagedCertificateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:appservice/managedCertificate:ManagedCertificate", name, args == null ? ManagedCertificateArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ManagedCertificate(String name, Output<String> id, @Nullable ManagedCertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:appservice/managedCertificate:ManagedCertificate", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ManagedCertificate get(String name, Output<String> id, @Nullable ManagedCertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ManagedCertificate(name, id, state, options);
    }
}
