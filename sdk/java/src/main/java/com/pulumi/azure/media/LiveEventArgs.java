// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media;

import com.pulumi.azure.media.inputs.LiveEventCrossSiteAccessPolicyArgs;
import com.pulumi.azure.media.inputs.LiveEventEncodingArgs;
import com.pulumi.azure.media.inputs.LiveEventInputArgs;
import com.pulumi.azure.media.inputs.LiveEventPreviewArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LiveEventArgs extends com.pulumi.resources.ResourceArgs {

    public static final LiveEventArgs Empty = new LiveEventArgs();

    /**
     * The flag indicates if the resource should be automatically started on creation. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="autoStartEnabled")
    private @Nullable Output<Boolean> autoStartEnabled;

    /**
     * @return The flag indicates if the resource should be automatically started on creation. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<Boolean>> autoStartEnabled() {
        return Optional.ofNullable(this.autoStartEnabled);
    }

    /**
     * A `cross_site_access_policy` block as defined below.
     * 
     */
    @Import(name="crossSiteAccessPolicy")
    private @Nullable Output<LiveEventCrossSiteAccessPolicyArgs> crossSiteAccessPolicy;

    /**
     * @return A `cross_site_access_policy` block as defined below.
     * 
     */
    public Optional<Output<LiveEventCrossSiteAccessPolicyArgs>> crossSiteAccessPolicy() {
        return Optional.ofNullable(this.crossSiteAccessPolicy);
    }

    /**
     * A description for the live event.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description for the live event.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A `encoding` block as defined below.
     * 
     */
    @Import(name="encoding")
    private @Nullable Output<LiveEventEncodingArgs> encoding;

    /**
     * @return A `encoding` block as defined below.
     * 
     */
    public Optional<Output<LiveEventEncodingArgs>> encoding() {
        return Optional.ofNullable(this.encoding);
    }

    /**
     * When `use_static_hostname` is set to true, the `hostname_prefix` specifies the first part of the hostname assigned to the live event preview and ingest endpoints. The final hostname would be a combination of this prefix, the media service account name and a short code for the Azure Media Services data center.
     * 
     */
    @Import(name="hostnamePrefix")
    private @Nullable Output<String> hostnamePrefix;

    /**
     * @return When `use_static_hostname` is set to true, the `hostname_prefix` specifies the first part of the hostname assigned to the live event preview and ingest endpoints. The final hostname would be a combination of this prefix, the media service account name and a short code for the Azure Media Services data center.
     * 
     */
    public Optional<Output<String>> hostnamePrefix() {
        return Optional.ofNullable(this.hostnamePrefix);
    }

    /**
     * A `input` block as defined below.
     * 
     */
    @Import(name="input", required=true)
    private Output<LiveEventInputArgs> input;

    /**
     * @return A `input` block as defined below.
     * 
     */
    public Output<LiveEventInputArgs> input() {
        return this.input;
    }

    /**
     * The Azure Region where the Live Event should exist. Changing this forces a new Live Event to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The Azure Region where the Live Event should exist. Changing this forces a new Live Event to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The Media Services account name. Changing this forces a new Live Event to be created.
     * 
     */
    @Import(name="mediaServicesAccountName", required=true)
    private Output<String> mediaServicesAccountName;

    /**
     * @return The Media Services account name. Changing this forces a new Live Event to be created.
     * 
     */
    public Output<String> mediaServicesAccountName() {
        return this.mediaServicesAccountName;
    }

    /**
     * The name which should be used for this Live Event. Changing this forces a new Live Event to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Live Event. Changing this forces a new Live Event to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A `preview` block as defined below.
     * 
     */
    @Import(name="preview")
    private @Nullable Output<LiveEventPreviewArgs> preview;

    /**
     * @return A `preview` block as defined below.
     * 
     */
    public Optional<Output<LiveEventPreviewArgs>> preview() {
        return Optional.ofNullable(this.preview);
    }

    /**
     * The name of the Resource Group where the Live Event should exist. Changing this forces a new Live Event to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the Live Event should exist. Changing this forces a new Live Event to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * A list of options to use for the LiveEvent. Possible values are `Default`, `LowLatency`, `LowLatencyV2`. Please see more at this [document](https://learn.microsoft.com/en-us/azure/media-services/latest/live-event-latency-reference#lowlatency-and-lowlatencyv2-options). Changing this forces a new resource to be created.
     * 
     */
    @Import(name="streamOptions")
    private @Nullable Output<List<String>> streamOptions;

    /**
     * @return A list of options to use for the LiveEvent. Possible values are `Default`, `LowLatency`, `LowLatencyV2`. Please see more at this [document](https://learn.microsoft.com/en-us/azure/media-services/latest/live-event-latency-reference#lowlatency-and-lowlatencyv2-options). Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<List<String>>> streamOptions() {
        return Optional.ofNullable(this.streamOptions);
    }

    /**
     * A mapping of tags which should be assigned to the Live Event.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the Live Event.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Specifies a list of languages (locale) to be used for speech-to-text transcription – it should match the spoken language in the audio track. The value should be in `BCP-47` format (e.g: `en-US`). [See the Microsoft Documentation for more information about the live transcription feature and the list of supported languages](https://go.microsoft.com/fwlink/?linkid=2133742).
     * 
     */
    @Import(name="transcriptionLanguages")
    private @Nullable Output<List<String>> transcriptionLanguages;

    /**
     * @return Specifies a list of languages (locale) to be used for speech-to-text transcription – it should match the spoken language in the audio track. The value should be in `BCP-47` format (e.g: `en-US`). [See the Microsoft Documentation for more information about the live transcription feature and the list of supported languages](https://go.microsoft.com/fwlink/?linkid=2133742).
     * 
     */
    public Optional<Output<List<String>>> transcriptionLanguages() {
        return Optional.ofNullable(this.transcriptionLanguages);
    }

    /**
     * Specifies whether a static hostname would be assigned to the live event preview and ingest endpoints. Changing this forces a new Live Event to be created.
     * 
     */
    @Import(name="useStaticHostname")
    private @Nullable Output<Boolean> useStaticHostname;

    /**
     * @return Specifies whether a static hostname would be assigned to the live event preview and ingest endpoints. Changing this forces a new Live Event to be created.
     * 
     */
    public Optional<Output<Boolean>> useStaticHostname() {
        return Optional.ofNullable(this.useStaticHostname);
    }

    private LiveEventArgs() {}

    private LiveEventArgs(LiveEventArgs $) {
        this.autoStartEnabled = $.autoStartEnabled;
        this.crossSiteAccessPolicy = $.crossSiteAccessPolicy;
        this.description = $.description;
        this.encoding = $.encoding;
        this.hostnamePrefix = $.hostnamePrefix;
        this.input = $.input;
        this.location = $.location;
        this.mediaServicesAccountName = $.mediaServicesAccountName;
        this.name = $.name;
        this.preview = $.preview;
        this.resourceGroupName = $.resourceGroupName;
        this.streamOptions = $.streamOptions;
        this.tags = $.tags;
        this.transcriptionLanguages = $.transcriptionLanguages;
        this.useStaticHostname = $.useStaticHostname;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LiveEventArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LiveEventArgs $;

        public Builder() {
            $ = new LiveEventArgs();
        }

        public Builder(LiveEventArgs defaults) {
            $ = new LiveEventArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoStartEnabled The flag indicates if the resource should be automatically started on creation. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder autoStartEnabled(@Nullable Output<Boolean> autoStartEnabled) {
            $.autoStartEnabled = autoStartEnabled;
            return this;
        }

        /**
         * @param autoStartEnabled The flag indicates if the resource should be automatically started on creation. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder autoStartEnabled(Boolean autoStartEnabled) {
            return autoStartEnabled(Output.of(autoStartEnabled));
        }

        /**
         * @param crossSiteAccessPolicy A `cross_site_access_policy` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder crossSiteAccessPolicy(@Nullable Output<LiveEventCrossSiteAccessPolicyArgs> crossSiteAccessPolicy) {
            $.crossSiteAccessPolicy = crossSiteAccessPolicy;
            return this;
        }

        /**
         * @param crossSiteAccessPolicy A `cross_site_access_policy` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder crossSiteAccessPolicy(LiveEventCrossSiteAccessPolicyArgs crossSiteAccessPolicy) {
            return crossSiteAccessPolicy(Output.of(crossSiteAccessPolicy));
        }

        /**
         * @param description A description for the live event.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for the live event.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param encoding A `encoding` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder encoding(@Nullable Output<LiveEventEncodingArgs> encoding) {
            $.encoding = encoding;
            return this;
        }

        /**
         * @param encoding A `encoding` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder encoding(LiveEventEncodingArgs encoding) {
            return encoding(Output.of(encoding));
        }

        /**
         * @param hostnamePrefix When `use_static_hostname` is set to true, the `hostname_prefix` specifies the first part of the hostname assigned to the live event preview and ingest endpoints. The final hostname would be a combination of this prefix, the media service account name and a short code for the Azure Media Services data center.
         * 
         * @return builder
         * 
         */
        public Builder hostnamePrefix(@Nullable Output<String> hostnamePrefix) {
            $.hostnamePrefix = hostnamePrefix;
            return this;
        }

        /**
         * @param hostnamePrefix When `use_static_hostname` is set to true, the `hostname_prefix` specifies the first part of the hostname assigned to the live event preview and ingest endpoints. The final hostname would be a combination of this prefix, the media service account name and a short code for the Azure Media Services data center.
         * 
         * @return builder
         * 
         */
        public Builder hostnamePrefix(String hostnamePrefix) {
            return hostnamePrefix(Output.of(hostnamePrefix));
        }

        /**
         * @param input A `input` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder input(Output<LiveEventInputArgs> input) {
            $.input = input;
            return this;
        }

        /**
         * @param input A `input` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder input(LiveEventInputArgs input) {
            return input(Output.of(input));
        }

        /**
         * @param location The Azure Region where the Live Event should exist. Changing this forces a new Live Event to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The Azure Region where the Live Event should exist. Changing this forces a new Live Event to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param mediaServicesAccountName The Media Services account name. Changing this forces a new Live Event to be created.
         * 
         * @return builder
         * 
         */
        public Builder mediaServicesAccountName(Output<String> mediaServicesAccountName) {
            $.mediaServicesAccountName = mediaServicesAccountName;
            return this;
        }

        /**
         * @param mediaServicesAccountName The Media Services account name. Changing this forces a new Live Event to be created.
         * 
         * @return builder
         * 
         */
        public Builder mediaServicesAccountName(String mediaServicesAccountName) {
            return mediaServicesAccountName(Output.of(mediaServicesAccountName));
        }

        /**
         * @param name The name which should be used for this Live Event. Changing this forces a new Live Event to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Live Event. Changing this forces a new Live Event to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param preview A `preview` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder preview(@Nullable Output<LiveEventPreviewArgs> preview) {
            $.preview = preview;
            return this;
        }

        /**
         * @param preview A `preview` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder preview(LiveEventPreviewArgs preview) {
            return preview(Output.of(preview));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Live Event should exist. Changing this forces a new Live Event to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Live Event should exist. Changing this forces a new Live Event to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param streamOptions A list of options to use for the LiveEvent. Possible values are `Default`, `LowLatency`, `LowLatencyV2`. Please see more at this [document](https://learn.microsoft.com/en-us/azure/media-services/latest/live-event-latency-reference#lowlatency-and-lowlatencyv2-options). Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder streamOptions(@Nullable Output<List<String>> streamOptions) {
            $.streamOptions = streamOptions;
            return this;
        }

        /**
         * @param streamOptions A list of options to use for the LiveEvent. Possible values are `Default`, `LowLatency`, `LowLatencyV2`. Please see more at this [document](https://learn.microsoft.com/en-us/azure/media-services/latest/live-event-latency-reference#lowlatency-and-lowlatencyv2-options). Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder streamOptions(List<String> streamOptions) {
            return streamOptions(Output.of(streamOptions));
        }

        /**
         * @param streamOptions A list of options to use for the LiveEvent. Possible values are `Default`, `LowLatency`, `LowLatencyV2`. Please see more at this [document](https://learn.microsoft.com/en-us/azure/media-services/latest/live-event-latency-reference#lowlatency-and-lowlatencyv2-options). Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder streamOptions(String... streamOptions) {
            return streamOptions(List.of(streamOptions));
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Live Event.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Live Event.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param transcriptionLanguages Specifies a list of languages (locale) to be used for speech-to-text transcription – it should match the spoken language in the audio track. The value should be in `BCP-47` format (e.g: `en-US`). [See the Microsoft Documentation for more information about the live transcription feature and the list of supported languages](https://go.microsoft.com/fwlink/?linkid=2133742).
         * 
         * @return builder
         * 
         */
        public Builder transcriptionLanguages(@Nullable Output<List<String>> transcriptionLanguages) {
            $.transcriptionLanguages = transcriptionLanguages;
            return this;
        }

        /**
         * @param transcriptionLanguages Specifies a list of languages (locale) to be used for speech-to-text transcription – it should match the spoken language in the audio track. The value should be in `BCP-47` format (e.g: `en-US`). [See the Microsoft Documentation for more information about the live transcription feature and the list of supported languages](https://go.microsoft.com/fwlink/?linkid=2133742).
         * 
         * @return builder
         * 
         */
        public Builder transcriptionLanguages(List<String> transcriptionLanguages) {
            return transcriptionLanguages(Output.of(transcriptionLanguages));
        }

        /**
         * @param transcriptionLanguages Specifies a list of languages (locale) to be used for speech-to-text transcription – it should match the spoken language in the audio track. The value should be in `BCP-47` format (e.g: `en-US`). [See the Microsoft Documentation for more information about the live transcription feature and the list of supported languages](https://go.microsoft.com/fwlink/?linkid=2133742).
         * 
         * @return builder
         * 
         */
        public Builder transcriptionLanguages(String... transcriptionLanguages) {
            return transcriptionLanguages(List.of(transcriptionLanguages));
        }

        /**
         * @param useStaticHostname Specifies whether a static hostname would be assigned to the live event preview and ingest endpoints. Changing this forces a new Live Event to be created.
         * 
         * @return builder
         * 
         */
        public Builder useStaticHostname(@Nullable Output<Boolean> useStaticHostname) {
            $.useStaticHostname = useStaticHostname;
            return this;
        }

        /**
         * @param useStaticHostname Specifies whether a static hostname would be assigned to the live event preview and ingest endpoints. Changing this forces a new Live Event to be created.
         * 
         * @return builder
         * 
         */
        public Builder useStaticHostname(Boolean useStaticHostname) {
            return useStaticHostname(Output.of(useStaticHostname));
        }

        public LiveEventArgs build() {
            if ($.input == null) {
                throw new MissingRequiredPropertyException("LiveEventArgs", "input");
            }
            if ($.mediaServicesAccountName == null) {
                throw new MissingRequiredPropertyException("LiveEventArgs", "mediaServicesAccountName");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("LiveEventArgs", "resourceGroupName");
            }
            return $;
        }
    }

}
