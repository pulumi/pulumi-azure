// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class DataCollectionRuleDataSourcesSyslog {
    /**
     * @return Specifies a list of facility names. Use a wildcard `*` to collect logs for all facility names. Possible values are `auth`, `authpriv`, `cron`, `daemon`, `kern`, `lpr`, `mail`, `mark`, `news`, `syslog`, `user`, `uucp`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`,and `*`.
     * 
     */
    private List<String> facilityNames;
    /**
     * @return Specifies a list of log levels. Use a wildcard `*` to collect logs for all log levels. Possible values are `Debug`, `Info`, `Notice`, `Warning`, `Error`, `Critical`, `Alert`, `Emergency`,and `*`.
     * 
     */
    private List<String> logLevels;
    /**
     * @return The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
     * 
     */
    private String name;
    /**
     * @return Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-Syslog`,and `Microsoft-CiscoAsa`, and `Microsoft-CommonSecurityLog`.
     * 
     * &gt; **Note:** In 4.0 or later version of the provider, `streams` will be required. In 3.x version of provider, if `streams` is not specified in creation, it is default to `[&#34;Microsoft-Syslog&#34;]`. if `streams` need to be modified (include change other value to the default value), it must be explicitly specified.
     * 
     */
    private @Nullable List<String> streams;

    private DataCollectionRuleDataSourcesSyslog() {}
    /**
     * @return Specifies a list of facility names. Use a wildcard `*` to collect logs for all facility names. Possible values are `auth`, `authpriv`, `cron`, `daemon`, `kern`, `lpr`, `mail`, `mark`, `news`, `syslog`, `user`, `uucp`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`,and `*`.
     * 
     */
    public List<String> facilityNames() {
        return this.facilityNames;
    }
    /**
     * @return Specifies a list of log levels. Use a wildcard `*` to collect logs for all log levels. Possible values are `Debug`, `Info`, `Notice`, `Warning`, `Error`, `Critical`, `Alert`, `Emergency`,and `*`.
     * 
     */
    public List<String> logLevels() {
        return this.logLevels;
    }
    /**
     * @return The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-Syslog`,and `Microsoft-CiscoAsa`, and `Microsoft-CommonSecurityLog`.
     * 
     * &gt; **Note:** In 4.0 or later version of the provider, `streams` will be required. In 3.x version of provider, if `streams` is not specified in creation, it is default to `[&#34;Microsoft-Syslog&#34;]`. if `streams` need to be modified (include change other value to the default value), it must be explicitly specified.
     * 
     */
    public List<String> streams() {
        return this.streams == null ? List.of() : this.streams;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataCollectionRuleDataSourcesSyslog defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> facilityNames;
        private List<String> logLevels;
        private String name;
        private @Nullable List<String> streams;
        public Builder() {}
        public Builder(DataCollectionRuleDataSourcesSyslog defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.facilityNames = defaults.facilityNames;
    	      this.logLevels = defaults.logLevels;
    	      this.name = defaults.name;
    	      this.streams = defaults.streams;
        }

        @CustomType.Setter
        public Builder facilityNames(List<String> facilityNames) {
            if (facilityNames == null) {
              throw new MissingRequiredPropertyException("DataCollectionRuleDataSourcesSyslog", "facilityNames");
            }
            this.facilityNames = facilityNames;
            return this;
        }
        public Builder facilityNames(String... facilityNames) {
            return facilityNames(List.of(facilityNames));
        }
        @CustomType.Setter
        public Builder logLevels(List<String> logLevels) {
            if (logLevels == null) {
              throw new MissingRequiredPropertyException("DataCollectionRuleDataSourcesSyslog", "logLevels");
            }
            this.logLevels = logLevels;
            return this;
        }
        public Builder logLevels(String... logLevels) {
            return logLevels(List.of(logLevels));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("DataCollectionRuleDataSourcesSyslog", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder streams(@Nullable List<String> streams) {

            this.streams = streams;
            return this;
        }
        public Builder streams(String... streams) {
            return streams(List.of(streams));
        }
        public DataCollectionRuleDataSourcesSyslog build() {
            final var _resultValue = new DataCollectionRuleDataSourcesSyslog();
            _resultValue.facilityNames = facilityNames;
            _resultValue.logLevels = logLevels;
            _resultValue.name = name;
            _resultValue.streams = streams;
            return _resultValue;
        }
    }
}
