// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.compute.VirtualMachineArgs;
import com.pulumi.azure.compute.inputs.VirtualMachineState;
import com.pulumi.azure.compute.outputs.VirtualMachineAdditionalCapabilities;
import com.pulumi.azure.compute.outputs.VirtualMachineBootDiagnostics;
import com.pulumi.azure.compute.outputs.VirtualMachineIdentity;
import com.pulumi.azure.compute.outputs.VirtualMachineOsProfile;
import com.pulumi.azure.compute.outputs.VirtualMachineOsProfileLinuxConfig;
import com.pulumi.azure.compute.outputs.VirtualMachineOsProfileSecret;
import com.pulumi.azure.compute.outputs.VirtualMachineOsProfileWindowsConfig;
import com.pulumi.azure.compute.outputs.VirtualMachinePlan;
import com.pulumi.azure.compute.outputs.VirtualMachineStorageDataDisk;
import com.pulumi.azure.compute.outputs.VirtualMachineStorageImageReference;
import com.pulumi.azure.compute.outputs.VirtualMachineStorageOsDisk;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Virtual Machine.
 * 
 * ## Disclaimers
 * 
 * &gt; **Note:** The `azure.compute.VirtualMachine` resource has been superseded by the `azure.compute.LinuxVirtualMachine` and `azure.compute.WindowsVirtualMachine` resources. The existing `azure.compute.VirtualMachine` resource will continue to be available throughout the 2.x releases however is in a feature-frozen state to maintain compatibility - new functionality will instead be added to the `azure.compute.LinuxVirtualMachine` and `azure.compute.WindowsVirtualMachine` resources.
 * 
 * &gt; **Note:** Data Disks can be attached either directly on the `azure.compute.VirtualMachine` resource, or using the `azure.compute.DataDiskAttachment` resource - but the two cannot be used together. If both are used against the same Virtual Machine, spurious changes will occur.
 * 
 * ## Example Usage
 * ### From An Azure Platform Image)
 * 
 * This example provisions a Virtual Machine with Managed Disks.
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.network.VirtualNetwork;
 * import com.pulumi.azure.network.VirtualNetworkArgs;
 * import com.pulumi.azure.network.Subnet;
 * import com.pulumi.azure.network.SubnetArgs;
 * import com.pulumi.azure.network.NetworkInterface;
 * import com.pulumi.azure.network.NetworkInterfaceArgs;
 * import com.pulumi.azure.network.inputs.NetworkInterfaceIpConfigurationArgs;
 * import com.pulumi.azure.compute.VirtualMachine;
 * import com.pulumi.azure.compute.VirtualMachineArgs;
 * import com.pulumi.azure.compute.inputs.VirtualMachineStorageImageReferenceArgs;
 * import com.pulumi.azure.compute.inputs.VirtualMachineStorageOsDiskArgs;
 * import com.pulumi.azure.compute.inputs.VirtualMachineOsProfileArgs;
 * import com.pulumi.azure.compute.inputs.VirtualMachineOsProfileLinuxConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var prefix = config.get(&#34;prefix&#34;).orElse(&#34;tfvmex&#34;);
 *         var example = new ResourceGroup(&#34;example&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var mainVirtualNetwork = new VirtualNetwork(&#34;mainVirtualNetwork&#34;, VirtualNetworkArgs.builder()        
 *             .addressSpaces(&#34;10.0.0.0/16&#34;)
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .build());
 * 
 *         var internal = new Subnet(&#34;internal&#34;, SubnetArgs.builder()        
 *             .resourceGroupName(example.name())
 *             .virtualNetworkName(mainVirtualNetwork.name())
 *             .addressPrefixes(&#34;10.0.2.0/24&#34;)
 *             .build());
 * 
 *         var mainNetworkInterface = new NetworkInterface(&#34;mainNetworkInterface&#34;, NetworkInterfaceArgs.builder()        
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .ipConfigurations(NetworkInterfaceIpConfigurationArgs.builder()
 *                 .name(&#34;testconfiguration1&#34;)
 *                 .subnetId(internal.id())
 *                 .privateIpAddressAllocation(&#34;Dynamic&#34;)
 *                 .build())
 *             .build());
 * 
 *         var mainVirtualMachine = new VirtualMachine(&#34;mainVirtualMachine&#34;, VirtualMachineArgs.builder()        
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .networkInterfaceIds(mainNetworkInterface.id())
 *             .vmSize(&#34;Standard_DS1_v2&#34;)
 *             .storageImageReference(VirtualMachineStorageImageReferenceArgs.builder()
 *                 .publisher(&#34;Canonical&#34;)
 *                 .offer(&#34;UbuntuServer&#34;)
 *                 .sku(&#34;16.04-LTS&#34;)
 *                 .version(&#34;latest&#34;)
 *                 .build())
 *             .storageOsDisk(VirtualMachineStorageOsDiskArgs.builder()
 *                 .name(&#34;myosdisk1&#34;)
 *                 .caching(&#34;ReadWrite&#34;)
 *                 .createOption(&#34;FromImage&#34;)
 *                 .managedDiskType(&#34;Standard_LRS&#34;)
 *                 .build())
 *             .osProfile(VirtualMachineOsProfileArgs.builder()
 *                 .computerName(&#34;hostname&#34;)
 *                 .adminUsername(&#34;testadmin&#34;)
 *                 .adminPassword(&#34;Password1234!&#34;)
 *                 .build())
 *             .osProfileLinuxConfig(VirtualMachineOsProfileLinuxConfigArgs.builder()
 *                 .disablePasswordAuthentication(false)
 *                 .build())
 *             .tags(Map.of(&#34;environment&#34;, &#34;staging&#34;))
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Virtual Machines can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:compute/virtualMachine:VirtualMachine example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/virtualMachines/machine1
 * ```
 * 
 */
@ResourceType(type="azure:compute/virtualMachine:VirtualMachine")
public class VirtualMachine extends com.pulumi.resources.CustomResource {
    /**
     * An `additional_capabilities` block as defined below.
     * 
     */
    @Export(name="additionalCapabilities", refs={VirtualMachineAdditionalCapabilities.class}, tree="[0]")
    private Output</* @Nullable */ VirtualMachineAdditionalCapabilities> additionalCapabilities;

    /**
     * @return An `additional_capabilities` block as defined below.
     * 
     */
    public Output<Optional<VirtualMachineAdditionalCapabilities>> additionalCapabilities() {
        return Codegen.optional(this.additionalCapabilities);
    }
    /**
     * The ID of the Availability Set in which the Virtual Machine should exist. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="availabilitySetId", refs={String.class}, tree="[0]")
    private Output<String> availabilitySetId;

    /**
     * @return The ID of the Availability Set in which the Virtual Machine should exist. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> availabilitySetId() {
        return this.availabilitySetId;
    }
    /**
     * A `boot_diagnostics` block as defined below.
     * 
     */
    @Export(name="bootDiagnostics", refs={VirtualMachineBootDiagnostics.class}, tree="[0]")
    private Output</* @Nullable */ VirtualMachineBootDiagnostics> bootDiagnostics;

    /**
     * @return A `boot_diagnostics` block as defined below.
     * 
     */
    public Output<Optional<VirtualMachineBootDiagnostics>> bootDiagnostics() {
        return Codegen.optional(this.bootDiagnostics);
    }
    /**
     * Should the Data Disks (either the Managed Disks / VHD Blobs) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
     * 
     */
    @Export(name="deleteDataDisksOnTermination", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> deleteDataDisksOnTermination;

    /**
     * @return Should the Data Disks (either the Managed Disks / VHD Blobs) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> deleteDataDisksOnTermination() {
        return Codegen.optional(this.deleteDataDisksOnTermination);
    }
    /**
     * Should the OS Disk (either the Managed Disk / VHD Blob) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
     * 
     */
    @Export(name="deleteOsDiskOnTermination", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> deleteOsDiskOnTermination;

    /**
     * @return Should the OS Disk (either the Managed Disk / VHD Blob) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> deleteOsDiskOnTermination() {
        return Codegen.optional(this.deleteOsDiskOnTermination);
    }
    /**
     * An `identity` block as defined below.
     * 
     */
    @Export(name="identity", refs={VirtualMachineIdentity.class}, tree="[0]")
    private Output<VirtualMachineIdentity> identity;

    /**
     * @return An `identity` block as defined below.
     * 
     */
    public Output<VirtualMachineIdentity> identity() {
        return this.identity;
    }
    /**
     * Specifies the BYOL Type for this Virtual Machine. This is only applicable to Windows Virtual Machines. Possible values are `Windows_Client` and `Windows_Server`.
     * 
     */
    @Export(name="licenseType", refs={String.class}, tree="[0]")
    private Output<String> licenseType;

    /**
     * @return Specifies the BYOL Type for this Virtual Machine. This is only applicable to Windows Virtual Machines. Possible values are `Windows_Client` and `Windows_Server`.
     * 
     */
    public Output<String> licenseType() {
        return this.licenseType;
    }
    /**
     * Specifies the Azure Region where the Virtual Machine exists. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Specifies the Azure Region where the Virtual Machine exists. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Specifies the name of the Virtual Machine. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Specifies the name of the Virtual Machine. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * A list of Network Interface IDs which should be associated with the Virtual Machine.
     * 
     */
    @Export(name="networkInterfaceIds", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> networkInterfaceIds;

    /**
     * @return A list of Network Interface IDs which should be associated with the Virtual Machine.
     * 
     */
    public Output<List<String>> networkInterfaceIds() {
        return this.networkInterfaceIds;
    }
    /**
     * An `os_profile` block as defined below. Required when `create_option` in the `storage_os_disk` block is set to `FromImage`.
     * 
     */
    @Export(name="osProfile", refs={VirtualMachineOsProfile.class}, tree="[0]")
    private Output</* @Nullable */ VirtualMachineOsProfile> osProfile;

    /**
     * @return An `os_profile` block as defined below. Required when `create_option` in the `storage_os_disk` block is set to `FromImage`.
     * 
     */
    public Output<Optional<VirtualMachineOsProfile>> osProfile() {
        return Codegen.optional(this.osProfile);
    }
    /**
     * (Required, when a Linux machine) An `os_profile_linux_config` block as defined below.
     * 
     */
    @Export(name="osProfileLinuxConfig", refs={VirtualMachineOsProfileLinuxConfig.class}, tree="[0]")
    private Output</* @Nullable */ VirtualMachineOsProfileLinuxConfig> osProfileLinuxConfig;

    /**
     * @return (Required, when a Linux machine) An `os_profile_linux_config` block as defined below.
     * 
     */
    public Output<Optional<VirtualMachineOsProfileLinuxConfig>> osProfileLinuxConfig() {
        return Codegen.optional(this.osProfileLinuxConfig);
    }
    /**
     * One or more `os_profile_secrets` blocks as defined below.
     * 
     */
    @Export(name="osProfileSecrets", refs={List.class,VirtualMachineOsProfileSecret.class}, tree="[0,1]")
    private Output</* @Nullable */ List<VirtualMachineOsProfileSecret>> osProfileSecrets;

    /**
     * @return One or more `os_profile_secrets` blocks as defined below.
     * 
     */
    public Output<Optional<List<VirtualMachineOsProfileSecret>>> osProfileSecrets() {
        return Codegen.optional(this.osProfileSecrets);
    }
    /**
     * (Required, when a Windows machine) An `os_profile_windows_config` block as defined below.
     * 
     */
    @Export(name="osProfileWindowsConfig", refs={VirtualMachineOsProfileWindowsConfig.class}, tree="[0]")
    private Output</* @Nullable */ VirtualMachineOsProfileWindowsConfig> osProfileWindowsConfig;

    /**
     * @return (Required, when a Windows machine) An `os_profile_windows_config` block as defined below.
     * 
     */
    public Output<Optional<VirtualMachineOsProfileWindowsConfig>> osProfileWindowsConfig() {
        return Codegen.optional(this.osProfileWindowsConfig);
    }
    /**
     * A `plan` block as defined below.
     * 
     */
    @Export(name="plan", refs={VirtualMachinePlan.class}, tree="[0]")
    private Output</* @Nullable */ VirtualMachinePlan> plan;

    /**
     * @return A `plan` block as defined below.
     * 
     */
    public Output<Optional<VirtualMachinePlan>> plan() {
        return Codegen.optional(this.plan);
    }
    /**
     * The ID of the Network Interface (which must be attached to the Virtual Machine) which should be the Primary Network Interface for this Virtual Machine.
     * 
     */
    @Export(name="primaryNetworkInterfaceId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> primaryNetworkInterfaceId;

    /**
     * @return The ID of the Network Interface (which must be attached to the Virtual Machine) which should be the Primary Network Interface for this Virtual Machine.
     * 
     */
    public Output<Optional<String>> primaryNetworkInterfaceId() {
        return Codegen.optional(this.primaryNetworkInterfaceId);
    }
    /**
     * The ID of the Proximity Placement Group to which this Virtual Machine should be assigned. Changing this forces a new resource to be created
     * 
     */
    @Export(name="proximityPlacementGroupId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> proximityPlacementGroupId;

    /**
     * @return The ID of the Proximity Placement Group to which this Virtual Machine should be assigned. Changing this forces a new resource to be created
     * 
     */
    public Output<Optional<String>> proximityPlacementGroupId() {
        return Codegen.optional(this.proximityPlacementGroupId);
    }
    /**
     * Specifies the name of the Resource Group in which the Virtual Machine should exist. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return Specifies the name of the Resource Group in which the Virtual Machine should exist. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * One or more `storage_data_disk` blocks as defined below.
     * 
     */
    @Export(name="storageDataDisks", refs={List.class,VirtualMachineStorageDataDisk.class}, tree="[0,1]")
    private Output<List<VirtualMachineStorageDataDisk>> storageDataDisks;

    /**
     * @return One or more `storage_data_disk` blocks as defined below.
     * 
     */
    public Output<List<VirtualMachineStorageDataDisk>> storageDataDisks() {
        return this.storageDataDisks;
    }
    /**
     * A `storage_image_reference` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="storageImageReference", refs={VirtualMachineStorageImageReference.class}, tree="[0]")
    private Output<VirtualMachineStorageImageReference> storageImageReference;

    /**
     * @return A `storage_image_reference` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    public Output<VirtualMachineStorageImageReference> storageImageReference() {
        return this.storageImageReference;
    }
    /**
     * A `storage_os_disk` block as defined below.
     * 
     */
    @Export(name="storageOsDisk", refs={VirtualMachineStorageOsDisk.class}, tree="[0]")
    private Output<VirtualMachineStorageOsDisk> storageOsDisk;

    /**
     * @return A `storage_os_disk` block as defined below.
     * 
     */
    public Output<VirtualMachineStorageOsDisk> storageOsDisk() {
        return this.storageOsDisk;
    }
    /**
     * A mapping of tags to assign to the Virtual Machine.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the Virtual Machine.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Specifies the [size of the Virtual Machine](https://docs.microsoft.com/azure/virtual-machines/sizes-general). See also [Azure VM Naming Conventions](https://docs.microsoft.com/azure/virtual-machines/vm-naming-conventions).
     * 
     */
    @Export(name="vmSize", refs={String.class}, tree="[0]")
    private Output<String> vmSize;

    /**
     * @return Specifies the [size of the Virtual Machine](https://docs.microsoft.com/azure/virtual-machines/sizes-general). See also [Azure VM Naming Conventions](https://docs.microsoft.com/azure/virtual-machines/vm-naming-conventions).
     * 
     */
    public Output<String> vmSize() {
        return this.vmSize;
    }
    /**
     * A list of a single item of the Availability Zone which the Virtual Machine should be allocated in. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="zones", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> zones;

    /**
     * @return A list of a single item of the Availability Zone which the Virtual Machine should be allocated in. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<String>> zones() {
        return Codegen.optional(this.zones);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public VirtualMachine(String name) {
        this(name, VirtualMachineArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public VirtualMachine(String name, VirtualMachineArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public VirtualMachine(String name, VirtualMachineArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:compute/virtualMachine:VirtualMachine", name, args == null ? VirtualMachineArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private VirtualMachine(String name, Output<String> id, @Nullable VirtualMachineState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:compute/virtualMachine:VirtualMachine", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static VirtualMachine get(String name, Output<String> id, @Nullable VirtualMachineState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new VirtualMachine(name, id, state, options);
    }
}
