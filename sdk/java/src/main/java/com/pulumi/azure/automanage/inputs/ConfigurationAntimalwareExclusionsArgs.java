// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.automanage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigurationAntimalwareExclusionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigurationAntimalwareExclusionsArgs Empty = new ConfigurationAntimalwareExclusionsArgs();

    /**
     * The extensions to exclude from the antimalware scan, separated by `;`. For example `.ext1;.ext2`.
     * 
     */
    @Import(name="extensions")
    private @Nullable Output<String> extensions;

    /**
     * @return The extensions to exclude from the antimalware scan, separated by `;`. For example `.ext1;.ext2`.
     * 
     */
    public Optional<Output<String>> extensions() {
        return Optional.ofNullable(this.extensions);
    }

    /**
     * The paths to exclude from the antimalware scan, separated by `;`. For example `C:\\Windows\\Temp;D:\\Temp`.
     * 
     */
    @Import(name="paths")
    private @Nullable Output<String> paths;

    /**
     * @return The paths to exclude from the antimalware scan, separated by `;`. For example `C:\\Windows\\Temp;D:\\Temp`.
     * 
     */
    public Optional<Output<String>> paths() {
        return Optional.ofNullable(this.paths);
    }

    /**
     * The processes to exclude from the antimalware scan, separated by `;`. For example `svchost.exe;notepad.exe`.
     * 
     */
    @Import(name="processes")
    private @Nullable Output<String> processes;

    /**
     * @return The processes to exclude from the antimalware scan, separated by `;`. For example `svchost.exe;notepad.exe`.
     * 
     */
    public Optional<Output<String>> processes() {
        return Optional.ofNullable(this.processes);
    }

    private ConfigurationAntimalwareExclusionsArgs() {}

    private ConfigurationAntimalwareExclusionsArgs(ConfigurationAntimalwareExclusionsArgs $) {
        this.extensions = $.extensions;
        this.paths = $.paths;
        this.processes = $.processes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigurationAntimalwareExclusionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigurationAntimalwareExclusionsArgs $;

        public Builder() {
            $ = new ConfigurationAntimalwareExclusionsArgs();
        }

        public Builder(ConfigurationAntimalwareExclusionsArgs defaults) {
            $ = new ConfigurationAntimalwareExclusionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param extensions The extensions to exclude from the antimalware scan, separated by `;`. For example `.ext1;.ext2`.
         * 
         * @return builder
         * 
         */
        public Builder extensions(@Nullable Output<String> extensions) {
            $.extensions = extensions;
            return this;
        }

        /**
         * @param extensions The extensions to exclude from the antimalware scan, separated by `;`. For example `.ext1;.ext2`.
         * 
         * @return builder
         * 
         */
        public Builder extensions(String extensions) {
            return extensions(Output.of(extensions));
        }

        /**
         * @param paths The paths to exclude from the antimalware scan, separated by `;`. For example `C:\\Windows\\Temp;D:\\Temp`.
         * 
         * @return builder
         * 
         */
        public Builder paths(@Nullable Output<String> paths) {
            $.paths = paths;
            return this;
        }

        /**
         * @param paths The paths to exclude from the antimalware scan, separated by `;`. For example `C:\\Windows\\Temp;D:\\Temp`.
         * 
         * @return builder
         * 
         */
        public Builder paths(String paths) {
            return paths(Output.of(paths));
        }

        /**
         * @param processes The processes to exclude from the antimalware scan, separated by `;`. For example `svchost.exe;notepad.exe`.
         * 
         * @return builder
         * 
         */
        public Builder processes(@Nullable Output<String> processes) {
            $.processes = processes;
            return this;
        }

        /**
         * @param processes The processes to exclude from the antimalware scan, separated by `;`. For example `svchost.exe;notepad.exe`.
         * 
         * @return builder
         * 
         */
        public Builder processes(String processes) {
            return processes(Output.of(processes));
        }

        public ConfigurationAntimalwareExclusionsArgs build() {
            return $;
        }
    }

}
