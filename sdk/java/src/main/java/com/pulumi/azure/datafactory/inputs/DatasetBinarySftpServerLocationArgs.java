// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.datafactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatasetBinarySftpServerLocationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatasetBinarySftpServerLocationArgs Empty = new DatasetBinarySftpServerLocationArgs();

    /**
     * Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
     * 
     */
    @Import(name="dynamicFilenameEnabled")
    private @Nullable Output<Boolean> dynamicFilenameEnabled;

    /**
     * @return Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> dynamicFilenameEnabled() {
        return Optional.ofNullable(this.dynamicFilenameEnabled);
    }

    /**
     * Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
     * 
     */
    @Import(name="dynamicPathEnabled")
    private @Nullable Output<Boolean> dynamicPathEnabled;

    /**
     * @return Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> dynamicPathEnabled() {
        return Optional.ofNullable(this.dynamicPathEnabled);
    }

    /**
     * The filename of the file on the SFTP server.
     * 
     */
    @Import(name="filename", required=true)
    private Output<String> filename;

    /**
     * @return The filename of the file on the SFTP server.
     * 
     */
    public Output<String> filename() {
        return this.filename;
    }

    /**
     * The folder path to the file on the SFTP server.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return The folder path to the file on the SFTP server.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    private DatasetBinarySftpServerLocationArgs() {}

    private DatasetBinarySftpServerLocationArgs(DatasetBinarySftpServerLocationArgs $) {
        this.dynamicFilenameEnabled = $.dynamicFilenameEnabled;
        this.dynamicPathEnabled = $.dynamicPathEnabled;
        this.filename = $.filename;
        this.path = $.path;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatasetBinarySftpServerLocationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatasetBinarySftpServerLocationArgs $;

        public Builder() {
            $ = new DatasetBinarySftpServerLocationArgs();
        }

        public Builder(DatasetBinarySftpServerLocationArgs defaults) {
            $ = new DatasetBinarySftpServerLocationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dynamicFilenameEnabled Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder dynamicFilenameEnabled(@Nullable Output<Boolean> dynamicFilenameEnabled) {
            $.dynamicFilenameEnabled = dynamicFilenameEnabled;
            return this;
        }

        /**
         * @param dynamicFilenameEnabled Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder dynamicFilenameEnabled(Boolean dynamicFilenameEnabled) {
            return dynamicFilenameEnabled(Output.of(dynamicFilenameEnabled));
        }

        /**
         * @param dynamicPathEnabled Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder dynamicPathEnabled(@Nullable Output<Boolean> dynamicPathEnabled) {
            $.dynamicPathEnabled = dynamicPathEnabled;
            return this;
        }

        /**
         * @param dynamicPathEnabled Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder dynamicPathEnabled(Boolean dynamicPathEnabled) {
            return dynamicPathEnabled(Output.of(dynamicPathEnabled));
        }

        /**
         * @param filename The filename of the file on the SFTP server.
         * 
         * @return builder
         * 
         */
        public Builder filename(Output<String> filename) {
            $.filename = filename;
            return this;
        }

        /**
         * @param filename The filename of the file on the SFTP server.
         * 
         * @return builder
         * 
         */
        public Builder filename(String filename) {
            return filename(Output.of(filename));
        }

        /**
         * @param path The folder path to the file on the SFTP server.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The folder path to the file on the SFTP server.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        public DatasetBinarySftpServerLocationArgs build() {
            if ($.filename == null) {
                throw new MissingRequiredPropertyException("DatasetBinarySftpServerLocationArgs", "filename");
            }
            if ($.path == null) {
                throw new MissingRequiredPropertyException("DatasetBinarySftpServerLocationArgs", "path");
            }
            return $;
        }
    }

}
