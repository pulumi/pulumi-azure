// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.datafactory;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.datafactory.LinkedServiceAzureBlobStorageArgs;
import com.pulumi.azure.datafactory.inputs.LinkedServiceAzureBlobStorageState;
import com.pulumi.azure.datafactory.outputs.LinkedServiceAzureBlobStorageKeyVaultSasToken;
import com.pulumi.azure.datafactory.outputs.LinkedServiceAzureBlobStorageServicePrincipalLinkedKeyVaultKey;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Linked Service (connection) between an Azure Blob Storage Account and Azure Data Factory.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.storage.StorageFunctions;
 * import com.pulumi.azure.storage.inputs.GetAccountArgs;
 * import com.pulumi.azure.datafactory.Factory;
 * import com.pulumi.azure.datafactory.FactoryArgs;
 * import com.pulumi.azure.datafactory.LinkedServiceAzureBlobStorage;
 * import com.pulumi.azure.datafactory.LinkedServiceAzureBlobStorageArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleResourceGroup = new ResourceGroup("exampleResourceGroup", ResourceGroupArgs.builder()        
 *             .name("example-resources")
 *             .location("West Europe")
 *             .build());
 * 
 *         final var example = StorageFunctions.getAccount(GetAccountArgs.builder()
 *             .name("storageaccountname")
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .build());
 * 
 *         var exampleFactory = new Factory("exampleFactory", FactoryArgs.builder()        
 *             .name("example")
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .build());
 * 
 *         var exampleLinkedServiceAzureBlobStorage = new LinkedServiceAzureBlobStorage("exampleLinkedServiceAzureBlobStorage", LinkedServiceAzureBlobStorageArgs.builder()        
 *             .name("example")
 *             .dataFactoryId(exampleFactory.id())
 *             .connectionString(example.applyValue(getAccountResult -> getAccountResult).applyValue(example -> example.applyValue(getAccountResult -> getAccountResult.primaryConnectionString())))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Data Factory Linked Service&#39;s can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:datafactory/linkedServiceAzureBlobStorage:LinkedServiceAzureBlobStorage example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/linkedservices/example
 * ```
 * 
 */
@ResourceType(type="azure:datafactory/linkedServiceAzureBlobStorage:LinkedServiceAzureBlobStorage")
public class LinkedServiceAzureBlobStorage extends com.pulumi.resources.CustomResource {
    /**
     * A map of additional properties to associate with the Data Factory Linked Service.
     * 
     * The following supported arguments are specific to Azure Blob Storage Linked Service:
     * 
     */
    @Export(name="additionalProperties", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> additionalProperties;

    /**
     * @return A map of additional properties to associate with the Data Factory Linked Service.
     * 
     * The following supported arguments are specific to Azure Blob Storage Linked Service:
     * 
     */
    public Output<Optional<Map<String,String>>> additionalProperties() {
        return Codegen.optional(this.additionalProperties);
    }
    /**
     * List of tags that can be used for describing the Data Factory Linked Service.
     * 
     */
    @Export(name="annotations", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> annotations;

    /**
     * @return List of tags that can be used for describing the Data Factory Linked Service.
     * 
     */
    public Output<Optional<List<String>>> annotations() {
        return Codegen.optional(this.annotations);
    }
    /**
     * The connection string. Conflicts with `connection_string_insecure`, `sas_uri` and `service_endpoint`.
     * 
     */
    @Export(name="connectionString", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> connectionString;

    /**
     * @return The connection string. Conflicts with `connection_string_insecure`, `sas_uri` and `service_endpoint`.
     * 
     */
    public Output<Optional<String>> connectionString() {
        return Codegen.optional(this.connectionString);
    }
    /**
     * The connection string sent insecurely. Conflicts with `connection_string`, `sas_uri` and `service_endpoint`.
     * 
     * &gt; **Note:** `connection_string` uses the Azure [SecureString](https://learn.microsoft.com/en-us/dotnet/api/microsoft.azure.management.datafactory.models.securestring) to encrypt the contents within the REST payload sent to Azure whilst the `connection_string_insecure` is sent as a regular string. Both properties are still sent using SSL/HTTPS. At this time the portal will not decrypt Secure Strings so the `connection_string` property in the portal will show as `******` whilst `connection_string_insecure` will be viewable in the portal.
     * 
     */
    @Export(name="connectionStringInsecure", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> connectionStringInsecure;

    /**
     * @return The connection string sent insecurely. Conflicts with `connection_string`, `sas_uri` and `service_endpoint`.
     * 
     * &gt; **Note:** `connection_string` uses the Azure [SecureString](https://learn.microsoft.com/en-us/dotnet/api/microsoft.azure.management.datafactory.models.securestring) to encrypt the contents within the REST payload sent to Azure whilst the `connection_string_insecure` is sent as a regular string. Both properties are still sent using SSL/HTTPS. At this time the portal will not decrypt Secure Strings so the `connection_string` property in the portal will show as `******` whilst `connection_string_insecure` will be viewable in the portal.
     * 
     */
    public Output<Optional<String>> connectionStringInsecure() {
        return Codegen.optional(this.connectionStringInsecure);
    }
    /**
     * The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
     * 
     */
    @Export(name="dataFactoryId", refs={String.class}, tree="[0]")
    private Output<String> dataFactoryId;

    /**
     * @return The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
     * 
     */
    public Output<String> dataFactoryId() {
        return this.dataFactoryId;
    }
    /**
     * The description for the Data Factory Linked Service.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description for the Data Factory Linked Service.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The integration runtime reference to associate with the Data Factory Linked Service.
     * 
     */
    @Export(name="integrationRuntimeName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> integrationRuntimeName;

    /**
     * @return The integration runtime reference to associate with the Data Factory Linked Service.
     * 
     */
    public Output<Optional<String>> integrationRuntimeName() {
        return Codegen.optional(this.integrationRuntimeName);
    }
    /**
     * A `key_vault_sas_token` block as defined below. Use this argument to store SAS Token in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service. A `sas_uri` is required.
     * 
     */
    @Export(name="keyVaultSasToken", refs={LinkedServiceAzureBlobStorageKeyVaultSasToken.class}, tree="[0]")
    private Output</* @Nullable */ LinkedServiceAzureBlobStorageKeyVaultSasToken> keyVaultSasToken;

    /**
     * @return A `key_vault_sas_token` block as defined below. Use this argument to store SAS Token in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service. A `sas_uri` is required.
     * 
     */
    public Output<Optional<LinkedServiceAzureBlobStorageKeyVaultSasToken>> keyVaultSasToken() {
        return Codegen.optional(this.keyVaultSasToken);
    }
    /**
     * Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * A map of parameters to associate with the Data Factory Linked Service.
     * 
     */
    @Export(name="parameters", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> parameters;

    /**
     * @return A map of parameters to associate with the Data Factory Linked Service.
     * 
     */
    public Output<Optional<Map<String,String>>> parameters() {
        return Codegen.optional(this.parameters);
    }
    /**
     * The SAS URI. Conflicts with `connection_string_insecure`, `connection_string` and `service_endpoint`.
     * 
     */
    @Export(name="sasUri", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sasUri;

    /**
     * @return The SAS URI. Conflicts with `connection_string_insecure`, `connection_string` and `service_endpoint`.
     * 
     */
    public Output<Optional<String>> sasUri() {
        return Codegen.optional(this.sasUri);
    }
    @Export(name="serviceEndpoint", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> serviceEndpoint;

    public Output<Optional<String>> serviceEndpoint() {
        return Codegen.optional(this.serviceEndpoint);
    }
    @Export(name="servicePrincipalId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> servicePrincipalId;

    public Output<Optional<String>> servicePrincipalId() {
        return Codegen.optional(this.servicePrincipalId);
    }
    @Export(name="servicePrincipalKey", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> servicePrincipalKey;

    public Output<Optional<String>> servicePrincipalKey() {
        return Codegen.optional(this.servicePrincipalKey);
    }
    @Export(name="servicePrincipalLinkedKeyVaultKey", refs={LinkedServiceAzureBlobStorageServicePrincipalLinkedKeyVaultKey.class}, tree="[0]")
    private Output</* @Nullable */ LinkedServiceAzureBlobStorageServicePrincipalLinkedKeyVaultKey> servicePrincipalLinkedKeyVaultKey;

    public Output<Optional<LinkedServiceAzureBlobStorageServicePrincipalLinkedKeyVaultKey>> servicePrincipalLinkedKeyVaultKey() {
        return Codegen.optional(this.servicePrincipalLinkedKeyVaultKey);
    }
    @Export(name="storageKind", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> storageKind;

    public Output<Optional<String>> storageKind() {
        return Codegen.optional(this.storageKind);
    }
    @Export(name="tenantId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tenantId;

    public Output<Optional<String>> tenantId() {
        return Codegen.optional(this.tenantId);
    }
    @Export(name="useManagedIdentity", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> useManagedIdentity;

    public Output<Optional<Boolean>> useManagedIdentity() {
        return Codegen.optional(this.useManagedIdentity);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LinkedServiceAzureBlobStorage(String name) {
        this(name, LinkedServiceAzureBlobStorageArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LinkedServiceAzureBlobStorage(String name, LinkedServiceAzureBlobStorageArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LinkedServiceAzureBlobStorage(String name, LinkedServiceAzureBlobStorageArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:datafactory/linkedServiceAzureBlobStorage:LinkedServiceAzureBlobStorage", name, args == null ? LinkedServiceAzureBlobStorageArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private LinkedServiceAzureBlobStorage(String name, Output<String> id, @Nullable LinkedServiceAzureBlobStorageState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:datafactory/linkedServiceAzureBlobStorage:LinkedServiceAzureBlobStorage", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "connectionString",
                "sasUri",
                "serviceEndpoint"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LinkedServiceAzureBlobStorage get(String name, Output<String> id, @Nullable LinkedServiceAzureBlobStorageState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LinkedServiceAzureBlobStorage(name, id, state, options);
    }
}
