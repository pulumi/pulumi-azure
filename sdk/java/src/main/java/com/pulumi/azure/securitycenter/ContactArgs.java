// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.securitycenter;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContactArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContactArgs Empty = new ContactArgs();

    /**
     * Whether to send security alerts notifications to the security contact.
     * 
     */
    @Import(name="alertNotifications", required=true)
    private Output<Boolean> alertNotifications;

    /**
     * @return Whether to send security alerts notifications to the security contact.
     * 
     */
    public Output<Boolean> alertNotifications() {
        return this.alertNotifications;
    }

    /**
     * Whether to send security alerts notifications to subscription admins.
     * 
     */
    @Import(name="alertsToAdmins", required=true)
    private Output<Boolean> alertsToAdmins;

    /**
     * @return Whether to send security alerts notifications to subscription admins.
     * 
     */
    public Output<Boolean> alertsToAdmins() {
        return this.alertsToAdmins;
    }

    /**
     * The email of the Security Center Contact.
     * 
     */
    @Import(name="email", required=true)
    private Output<String> email;

    /**
     * @return The email of the Security Center Contact.
     * 
     */
    public Output<String> email() {
        return this.email;
    }

    /**
     * The name of the Security Center Contact. Defaults to `default1`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Security Center Contact. Defaults to `default1`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The phone number of the Security Center Contact.
     * 
     */
    @Import(name="phone")
    private @Nullable Output<String> phone;

    /**
     * @return The phone number of the Security Center Contact.
     * 
     */
    public Optional<Output<String>> phone() {
        return Optional.ofNullable(this.phone);
    }

    private ContactArgs() {}

    private ContactArgs(ContactArgs $) {
        this.alertNotifications = $.alertNotifications;
        this.alertsToAdmins = $.alertsToAdmins;
        this.email = $.email;
        this.name = $.name;
        this.phone = $.phone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContactArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContactArgs $;

        public Builder() {
            $ = new ContactArgs();
        }

        public Builder(ContactArgs defaults) {
            $ = new ContactArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alertNotifications Whether to send security alerts notifications to the security contact.
         * 
         * @return builder
         * 
         */
        public Builder alertNotifications(Output<Boolean> alertNotifications) {
            $.alertNotifications = alertNotifications;
            return this;
        }

        /**
         * @param alertNotifications Whether to send security alerts notifications to the security contact.
         * 
         * @return builder
         * 
         */
        public Builder alertNotifications(Boolean alertNotifications) {
            return alertNotifications(Output.of(alertNotifications));
        }

        /**
         * @param alertsToAdmins Whether to send security alerts notifications to subscription admins.
         * 
         * @return builder
         * 
         */
        public Builder alertsToAdmins(Output<Boolean> alertsToAdmins) {
            $.alertsToAdmins = alertsToAdmins;
            return this;
        }

        /**
         * @param alertsToAdmins Whether to send security alerts notifications to subscription admins.
         * 
         * @return builder
         * 
         */
        public Builder alertsToAdmins(Boolean alertsToAdmins) {
            return alertsToAdmins(Output.of(alertsToAdmins));
        }

        /**
         * @param email The email of the Security Center Contact.
         * 
         * @return builder
         * 
         */
        public Builder email(Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email The email of the Security Center Contact.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param name The name of the Security Center Contact. Defaults to `default1`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Security Center Contact. Defaults to `default1`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param phone The phone number of the Security Center Contact.
         * 
         * @return builder
         * 
         */
        public Builder phone(@Nullable Output<String> phone) {
            $.phone = phone;
            return this;
        }

        /**
         * @param phone The phone number of the Security Center Contact.
         * 
         * @return builder
         * 
         */
        public Builder phone(String phone) {
            return phone(Output.of(phone));
        }

        public ContactArgs build() {
            if ($.alertNotifications == null) {
                throw new MissingRequiredPropertyException("ContactArgs", "alertNotifications");
            }
            if ($.alertsToAdmins == null) {
                throw new MissingRequiredPropertyException("ContactArgs", "alertsToAdmins");
            }
            if ($.email == null) {
                throw new MissingRequiredPropertyException("ContactArgs", "email");
            }
            return $;
        }
    }

}
