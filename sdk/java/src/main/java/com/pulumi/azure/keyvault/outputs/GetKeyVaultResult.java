// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.keyvault.outputs;

import com.pulumi.azure.keyvault.outputs.GetKeyVaultAccessPolicy;
import com.pulumi.azure.keyvault.outputs.GetKeyVaultNetworkAcl;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetKeyVaultResult {
    /**
     * @return One or more `access_policy` blocks as defined below.
     * 
     */
    private final List<GetKeyVaultAccessPolicy> accessPolicies;
    /**
     * @return Is Role Based Access Control (RBAC) for authorization of data actions enabled on this Key Vault?
     * 
     */
    private final Boolean enableRbacAuthorization;
    /**
     * @return Can Azure Virtual Machines retrieve certificates stored as secrets from the Key Vault?
     * 
     */
    private final Boolean enabledForDeployment;
    /**
     * @return Can Azure Disk Encryption retrieve secrets from the Key Vault?
     * 
     */
    private final Boolean enabledForDiskEncryption;
    /**
     * @return Can Azure Resource Manager retrieve secrets from the Key Vault?
     * 
     */
    private final Boolean enabledForTemplateDeployment;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return The Azure Region in which the Key Vault exists.
     * 
     */
    private final String location;
    private final String name;
    private final List<GetKeyVaultNetworkAcl> networkAcls;
    /**
     * @return Is purge protection enabled on this Key Vault?
     * 
     */
    private final Boolean purgeProtectionEnabled;
    private final String resourceGroupName;
    /**
     * @return The Name of the SKU used for this Key Vault.
     * 
     */
    private final String skuName;
    /**
     * @return A mapping of tags assigned to the Key Vault.
     * 
     */
    private final Map<String,String> tags;
    /**
     * @return The Azure Active Directory Tenant ID used to authenticate requests for this Key Vault.
     * 
     */
    private final String tenantId;
    /**
     * @return The URI of the vault for performing operations on keys and secrets.
     * 
     */
    private final String vaultUri;

    @CustomType.Constructor
    private GetKeyVaultResult(
        @CustomType.Parameter("accessPolicies") List<GetKeyVaultAccessPolicy> accessPolicies,
        @CustomType.Parameter("enableRbacAuthorization") Boolean enableRbacAuthorization,
        @CustomType.Parameter("enabledForDeployment") Boolean enabledForDeployment,
        @CustomType.Parameter("enabledForDiskEncryption") Boolean enabledForDiskEncryption,
        @CustomType.Parameter("enabledForTemplateDeployment") Boolean enabledForTemplateDeployment,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("networkAcls") List<GetKeyVaultNetworkAcl> networkAcls,
        @CustomType.Parameter("purgeProtectionEnabled") Boolean purgeProtectionEnabled,
        @CustomType.Parameter("resourceGroupName") String resourceGroupName,
        @CustomType.Parameter("skuName") String skuName,
        @CustomType.Parameter("tags") Map<String,String> tags,
        @CustomType.Parameter("tenantId") String tenantId,
        @CustomType.Parameter("vaultUri") String vaultUri) {
        this.accessPolicies = accessPolicies;
        this.enableRbacAuthorization = enableRbacAuthorization;
        this.enabledForDeployment = enabledForDeployment;
        this.enabledForDiskEncryption = enabledForDiskEncryption;
        this.enabledForTemplateDeployment = enabledForTemplateDeployment;
        this.id = id;
        this.location = location;
        this.name = name;
        this.networkAcls = networkAcls;
        this.purgeProtectionEnabled = purgeProtectionEnabled;
        this.resourceGroupName = resourceGroupName;
        this.skuName = skuName;
        this.tags = tags;
        this.tenantId = tenantId;
        this.vaultUri = vaultUri;
    }

    /**
     * @return One or more `access_policy` blocks as defined below.
     * 
     */
    public List<GetKeyVaultAccessPolicy> accessPolicies() {
        return this.accessPolicies;
    }
    /**
     * @return Is Role Based Access Control (RBAC) for authorization of data actions enabled on this Key Vault?
     * 
     */
    public Boolean enableRbacAuthorization() {
        return this.enableRbacAuthorization;
    }
    /**
     * @return Can Azure Virtual Machines retrieve certificates stored as secrets from the Key Vault?
     * 
     */
    public Boolean enabledForDeployment() {
        return this.enabledForDeployment;
    }
    /**
     * @return Can Azure Disk Encryption retrieve secrets from the Key Vault?
     * 
     */
    public Boolean enabledForDiskEncryption() {
        return this.enabledForDiskEncryption;
    }
    /**
     * @return Can Azure Resource Manager retrieve secrets from the Key Vault?
     * 
     */
    public Boolean enabledForTemplateDeployment() {
        return this.enabledForTemplateDeployment;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Azure Region in which the Key Vault exists.
     * 
     */
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    public List<GetKeyVaultNetworkAcl> networkAcls() {
        return this.networkAcls;
    }
    /**
     * @return Is purge protection enabled on this Key Vault?
     * 
     */
    public Boolean purgeProtectionEnabled() {
        return this.purgeProtectionEnabled;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The Name of the SKU used for this Key Vault.
     * 
     */
    public String skuName() {
        return this.skuName;
    }
    /**
     * @return A mapping of tags assigned to the Key Vault.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The Azure Active Directory Tenant ID used to authenticate requests for this Key Vault.
     * 
     */
    public String tenantId() {
        return this.tenantId;
    }
    /**
     * @return The URI of the vault for performing operations on keys and secrets.
     * 
     */
    public String vaultUri() {
        return this.vaultUri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKeyVaultResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetKeyVaultAccessPolicy> accessPolicies;
        private Boolean enableRbacAuthorization;
        private Boolean enabledForDeployment;
        private Boolean enabledForDiskEncryption;
        private Boolean enabledForTemplateDeployment;
        private String id;
        private String location;
        private String name;
        private List<GetKeyVaultNetworkAcl> networkAcls;
        private Boolean purgeProtectionEnabled;
        private String resourceGroupName;
        private String skuName;
        private Map<String,String> tags;
        private String tenantId;
        private String vaultUri;

        public Builder() {
    	      // Empty
        }

        public Builder(GetKeyVaultResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessPolicies = defaults.accessPolicies;
    	      this.enableRbacAuthorization = defaults.enableRbacAuthorization;
    	      this.enabledForDeployment = defaults.enabledForDeployment;
    	      this.enabledForDiskEncryption = defaults.enabledForDiskEncryption;
    	      this.enabledForTemplateDeployment = defaults.enabledForTemplateDeployment;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.networkAcls = defaults.networkAcls;
    	      this.purgeProtectionEnabled = defaults.purgeProtectionEnabled;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.skuName = defaults.skuName;
    	      this.tags = defaults.tags;
    	      this.tenantId = defaults.tenantId;
    	      this.vaultUri = defaults.vaultUri;
        }

        public Builder accessPolicies(List<GetKeyVaultAccessPolicy> accessPolicies) {
            this.accessPolicies = Objects.requireNonNull(accessPolicies);
            return this;
        }
        public Builder accessPolicies(GetKeyVaultAccessPolicy... accessPolicies) {
            return accessPolicies(List.of(accessPolicies));
        }
        public Builder enableRbacAuthorization(Boolean enableRbacAuthorization) {
            this.enableRbacAuthorization = Objects.requireNonNull(enableRbacAuthorization);
            return this;
        }
        public Builder enabledForDeployment(Boolean enabledForDeployment) {
            this.enabledForDeployment = Objects.requireNonNull(enabledForDeployment);
            return this;
        }
        public Builder enabledForDiskEncryption(Boolean enabledForDiskEncryption) {
            this.enabledForDiskEncryption = Objects.requireNonNull(enabledForDiskEncryption);
            return this;
        }
        public Builder enabledForTemplateDeployment(Boolean enabledForTemplateDeployment) {
            this.enabledForTemplateDeployment = Objects.requireNonNull(enabledForTemplateDeployment);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder networkAcls(List<GetKeyVaultNetworkAcl> networkAcls) {
            this.networkAcls = Objects.requireNonNull(networkAcls);
            return this;
        }
        public Builder networkAcls(GetKeyVaultNetworkAcl... networkAcls) {
            return networkAcls(List.of(networkAcls));
        }
        public Builder purgeProtectionEnabled(Boolean purgeProtectionEnabled) {
            this.purgeProtectionEnabled = Objects.requireNonNull(purgeProtectionEnabled);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder skuName(String skuName) {
            this.skuName = Objects.requireNonNull(skuName);
            return this;
        }
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tenantId(String tenantId) {
            this.tenantId = Objects.requireNonNull(tenantId);
            return this;
        }
        public Builder vaultUri(String vaultUri) {
            this.vaultUri = Objects.requireNonNull(vaultUri);
            return this;
        }        public GetKeyVaultResult build() {
            return new GetKeyVaultResult(accessPolicies, enableRbacAuthorization, enabledForDeployment, enabledForDiskEncryption, enabledForTemplateDeployment, id, location, name, networkAcls, purgeProtectionEnabled, resourceGroupName, skuName, tags, tenantId, vaultUri);
        }
    }
}
