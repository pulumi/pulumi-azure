// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.pim.inputs;

import com.pulumi.azure.pim.inputs.RoleManagementPolicyActivationRulesApprovalStageArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RoleManagementPolicyActivationRulesArgs extends com.pulumi.resources.ResourceArgs {

    public static final RoleManagementPolicyActivationRulesArgs Empty = new RoleManagementPolicyActivationRulesArgs();

    /**
     * An `approvalStage` block as defined below.
     * 
     */
    @Import(name="approvalStage")
    private @Nullable Output<RoleManagementPolicyActivationRulesApprovalStageArgs> approvalStage;

    /**
     * @return An `approvalStage` block as defined below.
     * 
     */
    public Optional<Output<RoleManagementPolicyActivationRulesApprovalStageArgs>> approvalStage() {
        return Optional.ofNullable(this.approvalStage);
    }

    /**
     * The maximum length of time an activated role can be valid, in an ISO8601 Duration format (e.g. `PT8H`). Valid range is `PT30M` to `PT23H30M`, in 30 minute increments, or `PT1D`.
     * 
     */
    @Import(name="maximumDuration")
    private @Nullable Output<String> maximumDuration;

    /**
     * @return The maximum length of time an activated role can be valid, in an ISO8601 Duration format (e.g. `PT8H`). Valid range is `PT30M` to `PT23H30M`, in 30 minute increments, or `PT1D`.
     * 
     */
    public Optional<Output<String>> maximumDuration() {
        return Optional.ofNullable(this.maximumDuration);
    }

    /**
     * Is approval required for activation. If `true` an `approvalStage` block must be provided.
     * 
     */
    @Import(name="requireApproval")
    private @Nullable Output<Boolean> requireApproval;

    /**
     * @return Is approval required for activation. If `true` an `approvalStage` block must be provided.
     * 
     */
    public Optional<Output<Boolean>> requireApproval() {
        return Optional.ofNullable(this.requireApproval);
    }

    /**
     * Is a justification required during activation of the role.
     * 
     */
    @Import(name="requireJustification")
    private @Nullable Output<Boolean> requireJustification;

    /**
     * @return Is a justification required during activation of the role.
     * 
     */
    public Optional<Output<Boolean>> requireJustification() {
        return Optional.ofNullable(this.requireJustification);
    }

    /**
     * Is multi-factor authentication required to activate the role. Conflicts with `requiredConditionalAccessAuthenticationContext`.
     * 
     */
    @Import(name="requireMultifactorAuthentication")
    private @Nullable Output<Boolean> requireMultifactorAuthentication;

    /**
     * @return Is multi-factor authentication required to activate the role. Conflicts with `requiredConditionalAccessAuthenticationContext`.
     * 
     */
    public Optional<Output<Boolean>> requireMultifactorAuthentication() {
        return Optional.ofNullable(this.requireMultifactorAuthentication);
    }

    /**
     * Is ticket information requrired during activation of the role.
     * 
     */
    @Import(name="requireTicketInfo")
    private @Nullable Output<Boolean> requireTicketInfo;

    /**
     * @return Is ticket information requrired during activation of the role.
     * 
     */
    public Optional<Output<Boolean>> requireTicketInfo() {
        return Optional.ofNullable(this.requireTicketInfo);
    }

    /**
     * The Entra ID Conditional Access context that must be present for activation. Conflicts with `requireMultifactorAuthentication`.
     * 
     */
    @Import(name="requiredConditionalAccessAuthenticationContext")
    private @Nullable Output<String> requiredConditionalAccessAuthenticationContext;

    /**
     * @return The Entra ID Conditional Access context that must be present for activation. Conflicts with `requireMultifactorAuthentication`.
     * 
     */
    public Optional<Output<String>> requiredConditionalAccessAuthenticationContext() {
        return Optional.ofNullable(this.requiredConditionalAccessAuthenticationContext);
    }

    private RoleManagementPolicyActivationRulesArgs() {}

    private RoleManagementPolicyActivationRulesArgs(RoleManagementPolicyActivationRulesArgs $) {
        this.approvalStage = $.approvalStage;
        this.maximumDuration = $.maximumDuration;
        this.requireApproval = $.requireApproval;
        this.requireJustification = $.requireJustification;
        this.requireMultifactorAuthentication = $.requireMultifactorAuthentication;
        this.requireTicketInfo = $.requireTicketInfo;
        this.requiredConditionalAccessAuthenticationContext = $.requiredConditionalAccessAuthenticationContext;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoleManagementPolicyActivationRulesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoleManagementPolicyActivationRulesArgs $;

        public Builder() {
            $ = new RoleManagementPolicyActivationRulesArgs();
        }

        public Builder(RoleManagementPolicyActivationRulesArgs defaults) {
            $ = new RoleManagementPolicyActivationRulesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param approvalStage An `approvalStage` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder approvalStage(@Nullable Output<RoleManagementPolicyActivationRulesApprovalStageArgs> approvalStage) {
            $.approvalStage = approvalStage;
            return this;
        }

        /**
         * @param approvalStage An `approvalStage` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder approvalStage(RoleManagementPolicyActivationRulesApprovalStageArgs approvalStage) {
            return approvalStage(Output.of(approvalStage));
        }

        /**
         * @param maximumDuration The maximum length of time an activated role can be valid, in an ISO8601 Duration format (e.g. `PT8H`). Valid range is `PT30M` to `PT23H30M`, in 30 minute increments, or `PT1D`.
         * 
         * @return builder
         * 
         */
        public Builder maximumDuration(@Nullable Output<String> maximumDuration) {
            $.maximumDuration = maximumDuration;
            return this;
        }

        /**
         * @param maximumDuration The maximum length of time an activated role can be valid, in an ISO8601 Duration format (e.g. `PT8H`). Valid range is `PT30M` to `PT23H30M`, in 30 minute increments, or `PT1D`.
         * 
         * @return builder
         * 
         */
        public Builder maximumDuration(String maximumDuration) {
            return maximumDuration(Output.of(maximumDuration));
        }

        /**
         * @param requireApproval Is approval required for activation. If `true` an `approvalStage` block must be provided.
         * 
         * @return builder
         * 
         */
        public Builder requireApproval(@Nullable Output<Boolean> requireApproval) {
            $.requireApproval = requireApproval;
            return this;
        }

        /**
         * @param requireApproval Is approval required for activation. If `true` an `approvalStage` block must be provided.
         * 
         * @return builder
         * 
         */
        public Builder requireApproval(Boolean requireApproval) {
            return requireApproval(Output.of(requireApproval));
        }

        /**
         * @param requireJustification Is a justification required during activation of the role.
         * 
         * @return builder
         * 
         */
        public Builder requireJustification(@Nullable Output<Boolean> requireJustification) {
            $.requireJustification = requireJustification;
            return this;
        }

        /**
         * @param requireJustification Is a justification required during activation of the role.
         * 
         * @return builder
         * 
         */
        public Builder requireJustification(Boolean requireJustification) {
            return requireJustification(Output.of(requireJustification));
        }

        /**
         * @param requireMultifactorAuthentication Is multi-factor authentication required to activate the role. Conflicts with `requiredConditionalAccessAuthenticationContext`.
         * 
         * @return builder
         * 
         */
        public Builder requireMultifactorAuthentication(@Nullable Output<Boolean> requireMultifactorAuthentication) {
            $.requireMultifactorAuthentication = requireMultifactorAuthentication;
            return this;
        }

        /**
         * @param requireMultifactorAuthentication Is multi-factor authentication required to activate the role. Conflicts with `requiredConditionalAccessAuthenticationContext`.
         * 
         * @return builder
         * 
         */
        public Builder requireMultifactorAuthentication(Boolean requireMultifactorAuthentication) {
            return requireMultifactorAuthentication(Output.of(requireMultifactorAuthentication));
        }

        /**
         * @param requireTicketInfo Is ticket information requrired during activation of the role.
         * 
         * @return builder
         * 
         */
        public Builder requireTicketInfo(@Nullable Output<Boolean> requireTicketInfo) {
            $.requireTicketInfo = requireTicketInfo;
            return this;
        }

        /**
         * @param requireTicketInfo Is ticket information requrired during activation of the role.
         * 
         * @return builder
         * 
         */
        public Builder requireTicketInfo(Boolean requireTicketInfo) {
            return requireTicketInfo(Output.of(requireTicketInfo));
        }

        /**
         * @param requiredConditionalAccessAuthenticationContext The Entra ID Conditional Access context that must be present for activation. Conflicts with `requireMultifactorAuthentication`.
         * 
         * @return builder
         * 
         */
        public Builder requiredConditionalAccessAuthenticationContext(@Nullable Output<String> requiredConditionalAccessAuthenticationContext) {
            $.requiredConditionalAccessAuthenticationContext = requiredConditionalAccessAuthenticationContext;
            return this;
        }

        /**
         * @param requiredConditionalAccessAuthenticationContext The Entra ID Conditional Access context that must be present for activation. Conflicts with `requireMultifactorAuthentication`.
         * 
         * @return builder
         * 
         */
        public Builder requiredConditionalAccessAuthenticationContext(String requiredConditionalAccessAuthenticationContext) {
            return requiredConditionalAccessAuthenticationContext(Output.of(requiredConditionalAccessAuthenticationContext));
        }

        public RoleManagementPolicyActivationRulesArgs build() {
            return $;
        }
    }

}
