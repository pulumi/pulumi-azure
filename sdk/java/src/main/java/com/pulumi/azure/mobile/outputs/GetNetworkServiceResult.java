// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mobile.outputs;

import com.pulumi.azure.mobile.outputs.GetNetworkServicePccRule;
import com.pulumi.azure.mobile.outputs.GetNetworkServiceServiceQosPolicy;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetNetworkServiceResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The Azure Region where the Mobile Network Service should exist.
     * 
     */
    private String location;
    private String mobileNetworkId;
    /**
     * @return The name of the data flow template. This must be unique within the parent data flow policy rule.
     * 
     */
    private String name;
    /**
     * @return A `pcc_rule` block as defined below. The set of PCC Rules that make up this service.
     * 
     */
    private List<GetNetworkServicePccRule> pccRules;
    /**
     * @return A precedence value that is used to decide between services when identifying the QoS values to use for a particular SIM. A lower value means a higher priority.
     * 
     */
    private Integer servicePrecedence;
    /**
     * @return A `service_qos_policy` block as defined below. The QoS policy to use for packets matching this service.
     * 
     */
    private List<GetNetworkServiceServiceQosPolicy> serviceQosPolicies;
    /**
     * @return A mapping of tags which should be assigned to the Mobile Network Service.
     * 
     */
    private Map<String,String> tags;

    private GetNetworkServiceResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Azure Region where the Mobile Network Service should exist.
     * 
     */
    public String location() {
        return this.location;
    }
    public String mobileNetworkId() {
        return this.mobileNetworkId;
    }
    /**
     * @return The name of the data flow template. This must be unique within the parent data flow policy rule.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A `pcc_rule` block as defined below. The set of PCC Rules that make up this service.
     * 
     */
    public List<GetNetworkServicePccRule> pccRules() {
        return this.pccRules;
    }
    /**
     * @return A precedence value that is used to decide between services when identifying the QoS values to use for a particular SIM. A lower value means a higher priority.
     * 
     */
    public Integer servicePrecedence() {
        return this.servicePrecedence;
    }
    /**
     * @return A `service_qos_policy` block as defined below. The QoS policy to use for packets matching this service.
     * 
     */
    public List<GetNetworkServiceServiceQosPolicy> serviceQosPolicies() {
        return this.serviceQosPolicies;
    }
    /**
     * @return A mapping of tags which should be assigned to the Mobile Network Service.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkServiceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private String location;
        private String mobileNetworkId;
        private String name;
        private List<GetNetworkServicePccRule> pccRules;
        private Integer servicePrecedence;
        private List<GetNetworkServiceServiceQosPolicy> serviceQosPolicies;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetNetworkServiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.mobileNetworkId = defaults.mobileNetworkId;
    	      this.name = defaults.name;
    	      this.pccRules = defaults.pccRules;
    	      this.servicePrecedence = defaults.servicePrecedence;
    	      this.serviceQosPolicies = defaults.serviceQosPolicies;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNetworkServiceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetNetworkServiceResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder mobileNetworkId(String mobileNetworkId) {
            if (mobileNetworkId == null) {
              throw new MissingRequiredPropertyException("GetNetworkServiceResult", "mobileNetworkId");
            }
            this.mobileNetworkId = mobileNetworkId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetNetworkServiceResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder pccRules(List<GetNetworkServicePccRule> pccRules) {
            if (pccRules == null) {
              throw new MissingRequiredPropertyException("GetNetworkServiceResult", "pccRules");
            }
            this.pccRules = pccRules;
            return this;
        }
        public Builder pccRules(GetNetworkServicePccRule... pccRules) {
            return pccRules(List.of(pccRules));
        }
        @CustomType.Setter
        public Builder servicePrecedence(Integer servicePrecedence) {
            if (servicePrecedence == null) {
              throw new MissingRequiredPropertyException("GetNetworkServiceResult", "servicePrecedence");
            }
            this.servicePrecedence = servicePrecedence;
            return this;
        }
        @CustomType.Setter
        public Builder serviceQosPolicies(List<GetNetworkServiceServiceQosPolicy> serviceQosPolicies) {
            if (serviceQosPolicies == null) {
              throw new MissingRequiredPropertyException("GetNetworkServiceResult", "serviceQosPolicies");
            }
            this.serviceQosPolicies = serviceQosPolicies;
            return this;
        }
        public Builder serviceQosPolicies(GetNetworkServiceServiceQosPolicy... serviceQosPolicies) {
            return serviceQosPolicies(List.of(serviceQosPolicies));
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetNetworkServiceResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public GetNetworkServiceResult build() {
            final var _resultValue = new GetNetworkServiceResult();
            _resultValue.id = id;
            _resultValue.location = location;
            _resultValue.mobileNetworkId = mobileNetworkId;
            _resultValue.name = name;
            _resultValue.pccRules = pccRules;
            _resultValue.servicePrecedence = servicePrecedence;
            _resultValue.serviceQosPolicies = serviceQosPolicies;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
