// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.datafactory;

import com.pulumi.azure.datafactory.inputs.TriggerTumblingWindowPipelineArgs;
import com.pulumi.azure.datafactory.inputs.TriggerTumblingWindowRetryArgs;
import com.pulumi.azure.datafactory.inputs.TriggerTumblingWindowTriggerDependencyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TriggerTumblingWindowArgs extends com.pulumi.resources.ResourceArgs {

    public static final TriggerTumblingWindowArgs Empty = new TriggerTumblingWindowArgs();

    /**
     * Specifies if the Data Factory Tumbling Window Trigger is activated. Defaults to `true`.
     * 
     */
    @Import(name="activated")
    private @Nullable Output<Boolean> activated;

    /**
     * @return Specifies if the Data Factory Tumbling Window Trigger is activated. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> activated() {
        return Optional.ofNullable(this.activated);
    }

    /**
     * A map of additional properties to associate with the Data Factory Tumbling Window Trigger.
     * 
     */
    @Import(name="additionalProperties")
    private @Nullable Output<Map<String,String>> additionalProperties;

    /**
     * @return A map of additional properties to associate with the Data Factory Tumbling Window Trigger.
     * 
     */
    public Optional<Output<Map<String,String>>> additionalProperties() {
        return Optional.ofNullable(this.additionalProperties);
    }

    /**
     * List of tags that can be used for describing the Data Factory Tumbling Window Trigger.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<List<String>> annotations;

    /**
     * @return List of tags that can be used for describing the Data Factory Tumbling Window Trigger.
     * 
     */
    public Optional<Output<List<String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The ID of Data Factory in which to associate the Trigger with. Changing this forces a new resource.
     * 
     */
    @Import(name="dataFactoryId", required=true)
    private Output<String> dataFactoryId;

    /**
     * @return The ID of Data Factory in which to associate the Trigger with. Changing this forces a new resource.
     * 
     */
    public Output<String> dataFactoryId() {
        return this.dataFactoryId;
    }

    /**
     * Specifies how long the trigger waits before triggering new run. formatted as an `D.HH:MM:SS`.
     * 
     */
    @Import(name="delay")
    private @Nullable Output<String> delay;

    /**
     * @return Specifies how long the trigger waits before triggering new run. formatted as an `D.HH:MM:SS`.
     * 
     */
    public Optional<Output<String>> delay() {
        return Optional.ofNullable(this.delay);
    }

    /**
     * The description for the Data Factory Tumbling Window Trigger.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description for the Data Factory Tumbling Window Trigger.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Specifies the end time of Tumbling Window, formatted as an RFC3339 string.
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<String> endTime;

    /**
     * @return Specifies the end time of Tumbling Window, formatted as an RFC3339 string.
     * 
     */
    public Optional<Output<String>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * Specifies the frequency of Tumbling Window. Possible values are `Hour`, `Minute` and `Month`. Changing this forces a new resource.
     * 
     */
    @Import(name="frequency", required=true)
    private Output<String> frequency;

    /**
     * @return Specifies the frequency of Tumbling Window. Possible values are `Hour`, `Minute` and `Month`. Changing this forces a new resource.
     * 
     */
    public Output<String> frequency() {
        return this.frequency;
    }

    /**
     * Specifies the interval of Tumbling Window. Changing this forces a new resource.
     * 
     */
    @Import(name="interval", required=true)
    private Output<Integer> interval;

    /**
     * @return Specifies the interval of Tumbling Window. Changing this forces a new resource.
     * 
     */
    public Output<Integer> interval() {
        return this.interval;
    }

    /**
     * The max number for simultaneous trigger run fired by Tumbling Window. Possible values are between `1` and `50`. Defaults to `50`.
     * 
     */
    @Import(name="maxConcurrency")
    private @Nullable Output<Integer> maxConcurrency;

    /**
     * @return The max number for simultaneous trigger run fired by Tumbling Window. Possible values are between `1` and `50`. Defaults to `50`.
     * 
     */
    public Optional<Output<Integer>> maxConcurrency() {
        return Optional.ofNullable(this.maxConcurrency);
    }

    /**
     * Specifies the name of the Data Factory Tumbling Window Trigger. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the Data Factory Tumbling Window Trigger. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A `pipeline` block as defined below.
     * 
     */
    @Import(name="pipeline", required=true)
    private Output<TriggerTumblingWindowPipelineArgs> pipeline;

    /**
     * @return A `pipeline` block as defined below.
     * 
     */
    public Output<TriggerTumblingWindowPipelineArgs> pipeline() {
        return this.pipeline;
    }

    /**
     * A `retry` block as defined below.
     * 
     */
    @Import(name="retry")
    private @Nullable Output<TriggerTumblingWindowRetryArgs> retry;

    /**
     * @return A `retry` block as defined below.
     * 
     */
    public Optional<Output<TriggerTumblingWindowRetryArgs>> retry() {
        return Optional.ofNullable(this.retry);
    }

    /**
     * Specifies the start time of Tumbling Window, formatted as an RFC3339 string. Changing this forces a new resource.
     * 
     */
    @Import(name="startTime", required=true)
    private Output<String> startTime;

    /**
     * @return Specifies the start time of Tumbling Window, formatted as an RFC3339 string. Changing this forces a new resource.
     * 
     */
    public Output<String> startTime() {
        return this.startTime;
    }

    /**
     * One or more `trigger_dependency` block as defined below.
     * 
     */
    @Import(name="triggerDependencies")
    private @Nullable Output<List<TriggerTumblingWindowTriggerDependencyArgs>> triggerDependencies;

    /**
     * @return One or more `trigger_dependency` block as defined below.
     * 
     */
    public Optional<Output<List<TriggerTumblingWindowTriggerDependencyArgs>>> triggerDependencies() {
        return Optional.ofNullable(this.triggerDependencies);
    }

    private TriggerTumblingWindowArgs() {}

    private TriggerTumblingWindowArgs(TriggerTumblingWindowArgs $) {
        this.activated = $.activated;
        this.additionalProperties = $.additionalProperties;
        this.annotations = $.annotations;
        this.dataFactoryId = $.dataFactoryId;
        this.delay = $.delay;
        this.description = $.description;
        this.endTime = $.endTime;
        this.frequency = $.frequency;
        this.interval = $.interval;
        this.maxConcurrency = $.maxConcurrency;
        this.name = $.name;
        this.pipeline = $.pipeline;
        this.retry = $.retry;
        this.startTime = $.startTime;
        this.triggerDependencies = $.triggerDependencies;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TriggerTumblingWindowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TriggerTumblingWindowArgs $;

        public Builder() {
            $ = new TriggerTumblingWindowArgs();
        }

        public Builder(TriggerTumblingWindowArgs defaults) {
            $ = new TriggerTumblingWindowArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activated Specifies if the Data Factory Tumbling Window Trigger is activated. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder activated(@Nullable Output<Boolean> activated) {
            $.activated = activated;
            return this;
        }

        /**
         * @param activated Specifies if the Data Factory Tumbling Window Trigger is activated. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder activated(Boolean activated) {
            return activated(Output.of(activated));
        }

        /**
         * @param additionalProperties A map of additional properties to associate with the Data Factory Tumbling Window Trigger.
         * 
         * @return builder
         * 
         */
        public Builder additionalProperties(@Nullable Output<Map<String,String>> additionalProperties) {
            $.additionalProperties = additionalProperties;
            return this;
        }

        /**
         * @param additionalProperties A map of additional properties to associate with the Data Factory Tumbling Window Trigger.
         * 
         * @return builder
         * 
         */
        public Builder additionalProperties(Map<String,String> additionalProperties) {
            return additionalProperties(Output.of(additionalProperties));
        }

        /**
         * @param annotations List of tags that can be used for describing the Data Factory Tumbling Window Trigger.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<List<String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations List of tags that can be used for describing the Data Factory Tumbling Window Trigger.
         * 
         * @return builder
         * 
         */
        public Builder annotations(List<String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param annotations List of tags that can be used for describing the Data Factory Tumbling Window Trigger.
         * 
         * @return builder
         * 
         */
        public Builder annotations(String... annotations) {
            return annotations(List.of(annotations));
        }

        /**
         * @param dataFactoryId The ID of Data Factory in which to associate the Trigger with. Changing this forces a new resource.
         * 
         * @return builder
         * 
         */
        public Builder dataFactoryId(Output<String> dataFactoryId) {
            $.dataFactoryId = dataFactoryId;
            return this;
        }

        /**
         * @param dataFactoryId The ID of Data Factory in which to associate the Trigger with. Changing this forces a new resource.
         * 
         * @return builder
         * 
         */
        public Builder dataFactoryId(String dataFactoryId) {
            return dataFactoryId(Output.of(dataFactoryId));
        }

        /**
         * @param delay Specifies how long the trigger waits before triggering new run. formatted as an `D.HH:MM:SS`.
         * 
         * @return builder
         * 
         */
        public Builder delay(@Nullable Output<String> delay) {
            $.delay = delay;
            return this;
        }

        /**
         * @param delay Specifies how long the trigger waits before triggering new run. formatted as an `D.HH:MM:SS`.
         * 
         * @return builder
         * 
         */
        public Builder delay(String delay) {
            return delay(Output.of(delay));
        }

        /**
         * @param description The description for the Data Factory Tumbling Window Trigger.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description for the Data Factory Tumbling Window Trigger.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param endTime Specifies the end time of Tumbling Window, formatted as an RFC3339 string.
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime Specifies the end time of Tumbling Window, formatted as an RFC3339 string.
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param frequency Specifies the frequency of Tumbling Window. Possible values are `Hour`, `Minute` and `Month`. Changing this forces a new resource.
         * 
         * @return builder
         * 
         */
        public Builder frequency(Output<String> frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param frequency Specifies the frequency of Tumbling Window. Possible values are `Hour`, `Minute` and `Month`. Changing this forces a new resource.
         * 
         * @return builder
         * 
         */
        public Builder frequency(String frequency) {
            return frequency(Output.of(frequency));
        }

        /**
         * @param interval Specifies the interval of Tumbling Window. Changing this forces a new resource.
         * 
         * @return builder
         * 
         */
        public Builder interval(Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval Specifies the interval of Tumbling Window. Changing this forces a new resource.
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param maxConcurrency The max number for simultaneous trigger run fired by Tumbling Window. Possible values are between `1` and `50`. Defaults to `50`.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrency(@Nullable Output<Integer> maxConcurrency) {
            $.maxConcurrency = maxConcurrency;
            return this;
        }

        /**
         * @param maxConcurrency The max number for simultaneous trigger run fired by Tumbling Window. Possible values are between `1` and `50`. Defaults to `50`.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrency(Integer maxConcurrency) {
            return maxConcurrency(Output.of(maxConcurrency));
        }

        /**
         * @param name Specifies the name of the Data Factory Tumbling Window Trigger. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Data Factory Tumbling Window Trigger. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param pipeline A `pipeline` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder pipeline(Output<TriggerTumblingWindowPipelineArgs> pipeline) {
            $.pipeline = pipeline;
            return this;
        }

        /**
         * @param pipeline A `pipeline` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder pipeline(TriggerTumblingWindowPipelineArgs pipeline) {
            return pipeline(Output.of(pipeline));
        }

        /**
         * @param retry A `retry` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder retry(@Nullable Output<TriggerTumblingWindowRetryArgs> retry) {
            $.retry = retry;
            return this;
        }

        /**
         * @param retry A `retry` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder retry(TriggerTumblingWindowRetryArgs retry) {
            return retry(Output.of(retry));
        }

        /**
         * @param startTime Specifies the start time of Tumbling Window, formatted as an RFC3339 string. Changing this forces a new resource.
         * 
         * @return builder
         * 
         */
        public Builder startTime(Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime Specifies the start time of Tumbling Window, formatted as an RFC3339 string. Changing this forces a new resource.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        /**
         * @param triggerDependencies One or more `trigger_dependency` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder triggerDependencies(@Nullable Output<List<TriggerTumblingWindowTriggerDependencyArgs>> triggerDependencies) {
            $.triggerDependencies = triggerDependencies;
            return this;
        }

        /**
         * @param triggerDependencies One or more `trigger_dependency` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder triggerDependencies(List<TriggerTumblingWindowTriggerDependencyArgs> triggerDependencies) {
            return triggerDependencies(Output.of(triggerDependencies));
        }

        /**
         * @param triggerDependencies One or more `trigger_dependency` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder triggerDependencies(TriggerTumblingWindowTriggerDependencyArgs... triggerDependencies) {
            return triggerDependencies(List.of(triggerDependencies));
        }

        public TriggerTumblingWindowArgs build() {
            if ($.dataFactoryId == null) {
                throw new MissingRequiredPropertyException("TriggerTumblingWindowArgs", "dataFactoryId");
            }
            if ($.frequency == null) {
                throw new MissingRequiredPropertyException("TriggerTumblingWindowArgs", "frequency");
            }
            if ($.interval == null) {
                throw new MissingRequiredPropertyException("TriggerTumblingWindowArgs", "interval");
            }
            if ($.pipeline == null) {
                throw new MissingRequiredPropertyException("TriggerTumblingWindowArgs", "pipeline");
            }
            if ($.startTime == null) {
                throw new MissingRequiredPropertyException("TriggerTumblingWindowArgs", "startTime");
            }
            return $;
        }
    }

}
