// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.inputs;

import com.pulumi.azure.network.inputs.ApplicationGatewayUrlPathMapPathRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationGatewayUrlPathMapArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationGatewayUrlPathMapArgs Empty = new ApplicationGatewayUrlPathMapArgs();

    /**
     * The ID of the Default Backend Address Pool.
     * 
     */
    @Import(name="defaultBackendAddressPoolId")
    private @Nullable Output<String> defaultBackendAddressPoolId;

    /**
     * @return The ID of the Default Backend Address Pool.
     * 
     */
    public Optional<Output<String>> defaultBackendAddressPoolId() {
        return Optional.ofNullable(this.defaultBackendAddressPoolId);
    }

    /**
     * The Name of the Default Backend Address Pool which should be used for this URL Path Map. Cannot be set if `default_redirect_configuration_name` is set.
     * 
     */
    @Import(name="defaultBackendAddressPoolName")
    private @Nullable Output<String> defaultBackendAddressPoolName;

    /**
     * @return The Name of the Default Backend Address Pool which should be used for this URL Path Map. Cannot be set if `default_redirect_configuration_name` is set.
     * 
     */
    public Optional<Output<String>> defaultBackendAddressPoolName() {
        return Optional.ofNullable(this.defaultBackendAddressPoolName);
    }

    /**
     * The ID of the Default Backend HTTP Settings Collection.
     * 
     */
    @Import(name="defaultBackendHttpSettingsId")
    private @Nullable Output<String> defaultBackendHttpSettingsId;

    /**
     * @return The ID of the Default Backend HTTP Settings Collection.
     * 
     */
    public Optional<Output<String>> defaultBackendHttpSettingsId() {
        return Optional.ofNullable(this.defaultBackendHttpSettingsId);
    }

    /**
     * The Name of the Default Backend HTTP Settings Collection which should be used for this URL Path Map. Cannot be set if `default_redirect_configuration_name` is set.
     * 
     */
    @Import(name="defaultBackendHttpSettingsName")
    private @Nullable Output<String> defaultBackendHttpSettingsName;

    /**
     * @return The Name of the Default Backend HTTP Settings Collection which should be used for this URL Path Map. Cannot be set if `default_redirect_configuration_name` is set.
     * 
     */
    public Optional<Output<String>> defaultBackendHttpSettingsName() {
        return Optional.ofNullable(this.defaultBackendHttpSettingsName);
    }

    /**
     * The ID of the Default Redirect Configuration.
     * 
     */
    @Import(name="defaultRedirectConfigurationId")
    private @Nullable Output<String> defaultRedirectConfigurationId;

    /**
     * @return The ID of the Default Redirect Configuration.
     * 
     */
    public Optional<Output<String>> defaultRedirectConfigurationId() {
        return Optional.ofNullable(this.defaultRedirectConfigurationId);
    }

    /**
     * The Name of the Default Redirect Configuration which should be used for this URL Path Map. Cannot be set if either `default_backend_address_pool_name` or `default_backend_http_settings_name` is set.
     * 
     * &gt; **NOTE:** Both `default_backend_address_pool_name` and `default_backend_http_settings_name` or `default_redirect_configuration_name` should be specified.
     * 
     */
    @Import(name="defaultRedirectConfigurationName")
    private @Nullable Output<String> defaultRedirectConfigurationName;

    /**
     * @return The Name of the Default Redirect Configuration which should be used for this URL Path Map. Cannot be set if either `default_backend_address_pool_name` or `default_backend_http_settings_name` is set.
     * 
     * &gt; **NOTE:** Both `default_backend_address_pool_name` and `default_backend_http_settings_name` or `default_redirect_configuration_name` should be specified.
     * 
     */
    public Optional<Output<String>> defaultRedirectConfigurationName() {
        return Optional.ofNullable(this.defaultRedirectConfigurationName);
    }

    @Import(name="defaultRewriteRuleSetId")
    private @Nullable Output<String> defaultRewriteRuleSetId;

    public Optional<Output<String>> defaultRewriteRuleSetId() {
        return Optional.ofNullable(this.defaultRewriteRuleSetId);
    }

    /**
     * The Name of the Default Rewrite Rule Set which should be used for this URL Path Map. Only valid for v2 SKUs.
     * 
     */
    @Import(name="defaultRewriteRuleSetName")
    private @Nullable Output<String> defaultRewriteRuleSetName;

    /**
     * @return The Name of the Default Rewrite Rule Set which should be used for this URL Path Map. Only valid for v2 SKUs.
     * 
     */
    public Optional<Output<String>> defaultRewriteRuleSetName() {
        return Optional.ofNullable(this.defaultRewriteRuleSetName);
    }

    /**
     * The ID of the Rewrite Rule Set
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The ID of the Rewrite Rule Set
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The Name of the URL Path Map.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The Name of the URL Path Map.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * One or more `path_rule` blocks as defined above.
     * 
     */
    @Import(name="pathRules", required=true)
    private Output<List<ApplicationGatewayUrlPathMapPathRuleArgs>> pathRules;

    /**
     * @return One or more `path_rule` blocks as defined above.
     * 
     */
    public Output<List<ApplicationGatewayUrlPathMapPathRuleArgs>> pathRules() {
        return this.pathRules;
    }

    private ApplicationGatewayUrlPathMapArgs() {}

    private ApplicationGatewayUrlPathMapArgs(ApplicationGatewayUrlPathMapArgs $) {
        this.defaultBackendAddressPoolId = $.defaultBackendAddressPoolId;
        this.defaultBackendAddressPoolName = $.defaultBackendAddressPoolName;
        this.defaultBackendHttpSettingsId = $.defaultBackendHttpSettingsId;
        this.defaultBackendHttpSettingsName = $.defaultBackendHttpSettingsName;
        this.defaultRedirectConfigurationId = $.defaultRedirectConfigurationId;
        this.defaultRedirectConfigurationName = $.defaultRedirectConfigurationName;
        this.defaultRewriteRuleSetId = $.defaultRewriteRuleSetId;
        this.defaultRewriteRuleSetName = $.defaultRewriteRuleSetName;
        this.id = $.id;
        this.name = $.name;
        this.pathRules = $.pathRules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationGatewayUrlPathMapArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationGatewayUrlPathMapArgs $;

        public Builder() {
            $ = new ApplicationGatewayUrlPathMapArgs();
        }

        public Builder(ApplicationGatewayUrlPathMapArgs defaults) {
            $ = new ApplicationGatewayUrlPathMapArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultBackendAddressPoolId The ID of the Default Backend Address Pool.
         * 
         * @return builder
         * 
         */
        public Builder defaultBackendAddressPoolId(@Nullable Output<String> defaultBackendAddressPoolId) {
            $.defaultBackendAddressPoolId = defaultBackendAddressPoolId;
            return this;
        }

        /**
         * @param defaultBackendAddressPoolId The ID of the Default Backend Address Pool.
         * 
         * @return builder
         * 
         */
        public Builder defaultBackendAddressPoolId(String defaultBackendAddressPoolId) {
            return defaultBackendAddressPoolId(Output.of(defaultBackendAddressPoolId));
        }

        /**
         * @param defaultBackendAddressPoolName The Name of the Default Backend Address Pool which should be used for this URL Path Map. Cannot be set if `default_redirect_configuration_name` is set.
         * 
         * @return builder
         * 
         */
        public Builder defaultBackendAddressPoolName(@Nullable Output<String> defaultBackendAddressPoolName) {
            $.defaultBackendAddressPoolName = defaultBackendAddressPoolName;
            return this;
        }

        /**
         * @param defaultBackendAddressPoolName The Name of the Default Backend Address Pool which should be used for this URL Path Map. Cannot be set if `default_redirect_configuration_name` is set.
         * 
         * @return builder
         * 
         */
        public Builder defaultBackendAddressPoolName(String defaultBackendAddressPoolName) {
            return defaultBackendAddressPoolName(Output.of(defaultBackendAddressPoolName));
        }

        /**
         * @param defaultBackendHttpSettingsId The ID of the Default Backend HTTP Settings Collection.
         * 
         * @return builder
         * 
         */
        public Builder defaultBackendHttpSettingsId(@Nullable Output<String> defaultBackendHttpSettingsId) {
            $.defaultBackendHttpSettingsId = defaultBackendHttpSettingsId;
            return this;
        }

        /**
         * @param defaultBackendHttpSettingsId The ID of the Default Backend HTTP Settings Collection.
         * 
         * @return builder
         * 
         */
        public Builder defaultBackendHttpSettingsId(String defaultBackendHttpSettingsId) {
            return defaultBackendHttpSettingsId(Output.of(defaultBackendHttpSettingsId));
        }

        /**
         * @param defaultBackendHttpSettingsName The Name of the Default Backend HTTP Settings Collection which should be used for this URL Path Map. Cannot be set if `default_redirect_configuration_name` is set.
         * 
         * @return builder
         * 
         */
        public Builder defaultBackendHttpSettingsName(@Nullable Output<String> defaultBackendHttpSettingsName) {
            $.defaultBackendHttpSettingsName = defaultBackendHttpSettingsName;
            return this;
        }

        /**
         * @param defaultBackendHttpSettingsName The Name of the Default Backend HTTP Settings Collection which should be used for this URL Path Map. Cannot be set if `default_redirect_configuration_name` is set.
         * 
         * @return builder
         * 
         */
        public Builder defaultBackendHttpSettingsName(String defaultBackendHttpSettingsName) {
            return defaultBackendHttpSettingsName(Output.of(defaultBackendHttpSettingsName));
        }

        /**
         * @param defaultRedirectConfigurationId The ID of the Default Redirect Configuration.
         * 
         * @return builder
         * 
         */
        public Builder defaultRedirectConfigurationId(@Nullable Output<String> defaultRedirectConfigurationId) {
            $.defaultRedirectConfigurationId = defaultRedirectConfigurationId;
            return this;
        }

        /**
         * @param defaultRedirectConfigurationId The ID of the Default Redirect Configuration.
         * 
         * @return builder
         * 
         */
        public Builder defaultRedirectConfigurationId(String defaultRedirectConfigurationId) {
            return defaultRedirectConfigurationId(Output.of(defaultRedirectConfigurationId));
        }

        /**
         * @param defaultRedirectConfigurationName The Name of the Default Redirect Configuration which should be used for this URL Path Map. Cannot be set if either `default_backend_address_pool_name` or `default_backend_http_settings_name` is set.
         * 
         * &gt; **NOTE:** Both `default_backend_address_pool_name` and `default_backend_http_settings_name` or `default_redirect_configuration_name` should be specified.
         * 
         * @return builder
         * 
         */
        public Builder defaultRedirectConfigurationName(@Nullable Output<String> defaultRedirectConfigurationName) {
            $.defaultRedirectConfigurationName = defaultRedirectConfigurationName;
            return this;
        }

        /**
         * @param defaultRedirectConfigurationName The Name of the Default Redirect Configuration which should be used for this URL Path Map. Cannot be set if either `default_backend_address_pool_name` or `default_backend_http_settings_name` is set.
         * 
         * &gt; **NOTE:** Both `default_backend_address_pool_name` and `default_backend_http_settings_name` or `default_redirect_configuration_name` should be specified.
         * 
         * @return builder
         * 
         */
        public Builder defaultRedirectConfigurationName(String defaultRedirectConfigurationName) {
            return defaultRedirectConfigurationName(Output.of(defaultRedirectConfigurationName));
        }

        public Builder defaultRewriteRuleSetId(@Nullable Output<String> defaultRewriteRuleSetId) {
            $.defaultRewriteRuleSetId = defaultRewriteRuleSetId;
            return this;
        }

        public Builder defaultRewriteRuleSetId(String defaultRewriteRuleSetId) {
            return defaultRewriteRuleSetId(Output.of(defaultRewriteRuleSetId));
        }

        /**
         * @param defaultRewriteRuleSetName The Name of the Default Rewrite Rule Set which should be used for this URL Path Map. Only valid for v2 SKUs.
         * 
         * @return builder
         * 
         */
        public Builder defaultRewriteRuleSetName(@Nullable Output<String> defaultRewriteRuleSetName) {
            $.defaultRewriteRuleSetName = defaultRewriteRuleSetName;
            return this;
        }

        /**
         * @param defaultRewriteRuleSetName The Name of the Default Rewrite Rule Set which should be used for this URL Path Map. Only valid for v2 SKUs.
         * 
         * @return builder
         * 
         */
        public Builder defaultRewriteRuleSetName(String defaultRewriteRuleSetName) {
            return defaultRewriteRuleSetName(Output.of(defaultRewriteRuleSetName));
        }

        /**
         * @param id The ID of the Rewrite Rule Set
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the Rewrite Rule Set
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name The Name of the URL Path Map.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The Name of the URL Path Map.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param pathRules One or more `path_rule` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder pathRules(Output<List<ApplicationGatewayUrlPathMapPathRuleArgs>> pathRules) {
            $.pathRules = pathRules;
            return this;
        }

        /**
         * @param pathRules One or more `path_rule` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder pathRules(List<ApplicationGatewayUrlPathMapPathRuleArgs> pathRules) {
            return pathRules(Output.of(pathRules));
        }

        /**
         * @param pathRules One or more `path_rule` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder pathRules(ApplicationGatewayUrlPathMapPathRuleArgs... pathRules) {
            return pathRules(List.of(pathRules));
        }

        public ApplicationGatewayUrlPathMapArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ApplicationGatewayUrlPathMapArgs", "name");
            }
            if ($.pathRules == null) {
                throw new MissingRequiredPropertyException("ApplicationGatewayUrlPathMapArgs", "pathRules");
            }
            return $;
        }
    }

}
