// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.siterecovery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReplicatedVMNetworkInterfaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReplicatedVMNetworkInterfaceArgs Empty = new ReplicatedVMNetworkInterfaceArgs();

    /**
     * Id of the public IP object to use when a failover is done.
     * 
     */
    @Import(name="recoveryPublicIpAddressId")
    private @Nullable Output<String> recoveryPublicIpAddressId;

    /**
     * @return Id of the public IP object to use when a failover is done.
     * 
     */
    public Optional<Output<String>> recoveryPublicIpAddressId() {
        return Optional.ofNullable(this.recoveryPublicIpAddressId);
    }

    /**
     * Id source network interface.
     * 
     */
    @Import(name="sourceNetworkInterfaceId")
    private @Nullable Output<String> sourceNetworkInterfaceId;

    /**
     * @return Id source network interface.
     * 
     */
    public Optional<Output<String>> sourceNetworkInterfaceId() {
        return Optional.ofNullable(this.sourceNetworkInterfaceId);
    }

    /**
     * Static IP to assign when a failover is done.
     * 
     */
    @Import(name="targetStaticIp")
    private @Nullable Output<String> targetStaticIp;

    /**
     * @return Static IP to assign when a failover is done.
     * 
     */
    public Optional<Output<String>> targetStaticIp() {
        return Optional.ofNullable(this.targetStaticIp);
    }

    /**
     * Name of the subnet to to use when a failover is done.
     * 
     */
    @Import(name="targetSubnetName")
    private @Nullable Output<String> targetSubnetName;

    /**
     * @return Name of the subnet to to use when a failover is done.
     * 
     */
    public Optional<Output<String>> targetSubnetName() {
        return Optional.ofNullable(this.targetSubnetName);
    }

    private ReplicatedVMNetworkInterfaceArgs() {}

    private ReplicatedVMNetworkInterfaceArgs(ReplicatedVMNetworkInterfaceArgs $) {
        this.recoveryPublicIpAddressId = $.recoveryPublicIpAddressId;
        this.sourceNetworkInterfaceId = $.sourceNetworkInterfaceId;
        this.targetStaticIp = $.targetStaticIp;
        this.targetSubnetName = $.targetSubnetName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReplicatedVMNetworkInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReplicatedVMNetworkInterfaceArgs $;

        public Builder() {
            $ = new ReplicatedVMNetworkInterfaceArgs();
        }

        public Builder(ReplicatedVMNetworkInterfaceArgs defaults) {
            $ = new ReplicatedVMNetworkInterfaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param recoveryPublicIpAddressId Id of the public IP object to use when a failover is done.
         * 
         * @return builder
         * 
         */
        public Builder recoveryPublicIpAddressId(@Nullable Output<String> recoveryPublicIpAddressId) {
            $.recoveryPublicIpAddressId = recoveryPublicIpAddressId;
            return this;
        }

        /**
         * @param recoveryPublicIpAddressId Id of the public IP object to use when a failover is done.
         * 
         * @return builder
         * 
         */
        public Builder recoveryPublicIpAddressId(String recoveryPublicIpAddressId) {
            return recoveryPublicIpAddressId(Output.of(recoveryPublicIpAddressId));
        }

        /**
         * @param sourceNetworkInterfaceId Id source network interface.
         * 
         * @return builder
         * 
         */
        public Builder sourceNetworkInterfaceId(@Nullable Output<String> sourceNetworkInterfaceId) {
            $.sourceNetworkInterfaceId = sourceNetworkInterfaceId;
            return this;
        }

        /**
         * @param sourceNetworkInterfaceId Id source network interface.
         * 
         * @return builder
         * 
         */
        public Builder sourceNetworkInterfaceId(String sourceNetworkInterfaceId) {
            return sourceNetworkInterfaceId(Output.of(sourceNetworkInterfaceId));
        }

        /**
         * @param targetStaticIp Static IP to assign when a failover is done.
         * 
         * @return builder
         * 
         */
        public Builder targetStaticIp(@Nullable Output<String> targetStaticIp) {
            $.targetStaticIp = targetStaticIp;
            return this;
        }

        /**
         * @param targetStaticIp Static IP to assign when a failover is done.
         * 
         * @return builder
         * 
         */
        public Builder targetStaticIp(String targetStaticIp) {
            return targetStaticIp(Output.of(targetStaticIp));
        }

        /**
         * @param targetSubnetName Name of the subnet to to use when a failover is done.
         * 
         * @return builder
         * 
         */
        public Builder targetSubnetName(@Nullable Output<String> targetSubnetName) {
            $.targetSubnetName = targetSubnetName;
            return this;
        }

        /**
         * @param targetSubnetName Name of the subnet to to use when a failover is done.
         * 
         * @return builder
         * 
         */
        public Builder targetSubnetName(String targetSubnetName) {
            return targetSubnetName(Output.of(targetSubnetName));
        }

        public ReplicatedVMNetworkInterfaceArgs build() {
            return $;
        }
    }

}
