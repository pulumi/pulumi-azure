// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.inputs;

import com.pulumi.azure.network.inputs.VirtualHubConnectionRoutingPropagatedRouteTableArgs;
import com.pulumi.azure.network.inputs.VirtualHubConnectionRoutingStaticVnetRouteArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualHubConnectionRoutingArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualHubConnectionRoutingArgs Empty = new VirtualHubConnectionRoutingArgs();

    /**
     * The ID of the route table associated with this Virtual Hub connection.
     * 
     */
    @Import(name="associatedRouteTableId")
    private @Nullable Output<String> associatedRouteTableId;

    /**
     * @return The ID of the route table associated with this Virtual Hub connection.
     * 
     */
    public Optional<Output<String>> associatedRouteTableId() {
        return Optional.ofNullable(this.associatedRouteTableId);
    }

    /**
     * The resource ID of the Route Map associated with this Routing Configuration for inbound learned routes.
     * 
     */
    @Import(name="inboundRouteMapId")
    private @Nullable Output<String> inboundRouteMapId;

    /**
     * @return The resource ID of the Route Map associated with this Routing Configuration for inbound learned routes.
     * 
     */
    public Optional<Output<String>> inboundRouteMapId() {
        return Optional.ofNullable(this.inboundRouteMapId);
    }

    /**
     * The resource ID of the Route Map associated with this Routing Configuration for outbound advertised routes.
     * 
     */
    @Import(name="outboundRouteMapId")
    private @Nullable Output<String> outboundRouteMapId;

    /**
     * @return The resource ID of the Route Map associated with this Routing Configuration for outbound advertised routes.
     * 
     */
    public Optional<Output<String>> outboundRouteMapId() {
        return Optional.ofNullable(this.outboundRouteMapId);
    }

    /**
     * A `propagated_route_table` block as defined below.
     * 
     */
    @Import(name="propagatedRouteTable")
    private @Nullable Output<VirtualHubConnectionRoutingPropagatedRouteTableArgs> propagatedRouteTable;

    /**
     * @return A `propagated_route_table` block as defined below.
     * 
     */
    public Optional<Output<VirtualHubConnectionRoutingPropagatedRouteTableArgs>> propagatedRouteTable() {
        return Optional.ofNullable(this.propagatedRouteTable);
    }

    /**
     * The static VNet local route override criteria that is used to determine whether NVA in spoke VNet is bypassed for traffic with destination in spoke VNet. Possible values are `Contains` and `Equal`. Defaults to `Contains`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="staticVnetLocalRouteOverrideCriteria")
    private @Nullable Output<String> staticVnetLocalRouteOverrideCriteria;

    /**
     * @return The static VNet local route override criteria that is used to determine whether NVA in spoke VNet is bypassed for traffic with destination in spoke VNet. Possible values are `Contains` and `Equal`. Defaults to `Contains`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> staticVnetLocalRouteOverrideCriteria() {
        return Optional.ofNullable(this.staticVnetLocalRouteOverrideCriteria);
    }

    /**
     * A `static_vnet_route` block as defined below.
     * 
     */
    @Import(name="staticVnetRoutes")
    private @Nullable Output<List<VirtualHubConnectionRoutingStaticVnetRouteArgs>> staticVnetRoutes;

    /**
     * @return A `static_vnet_route` block as defined below.
     * 
     */
    public Optional<Output<List<VirtualHubConnectionRoutingStaticVnetRouteArgs>>> staticVnetRoutes() {
        return Optional.ofNullable(this.staticVnetRoutes);
    }

    private VirtualHubConnectionRoutingArgs() {}

    private VirtualHubConnectionRoutingArgs(VirtualHubConnectionRoutingArgs $) {
        this.associatedRouteTableId = $.associatedRouteTableId;
        this.inboundRouteMapId = $.inboundRouteMapId;
        this.outboundRouteMapId = $.outboundRouteMapId;
        this.propagatedRouteTable = $.propagatedRouteTable;
        this.staticVnetLocalRouteOverrideCriteria = $.staticVnetLocalRouteOverrideCriteria;
        this.staticVnetRoutes = $.staticVnetRoutes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualHubConnectionRoutingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualHubConnectionRoutingArgs $;

        public Builder() {
            $ = new VirtualHubConnectionRoutingArgs();
        }

        public Builder(VirtualHubConnectionRoutingArgs defaults) {
            $ = new VirtualHubConnectionRoutingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param associatedRouteTableId The ID of the route table associated with this Virtual Hub connection.
         * 
         * @return builder
         * 
         */
        public Builder associatedRouteTableId(@Nullable Output<String> associatedRouteTableId) {
            $.associatedRouteTableId = associatedRouteTableId;
            return this;
        }

        /**
         * @param associatedRouteTableId The ID of the route table associated with this Virtual Hub connection.
         * 
         * @return builder
         * 
         */
        public Builder associatedRouteTableId(String associatedRouteTableId) {
            return associatedRouteTableId(Output.of(associatedRouteTableId));
        }

        /**
         * @param inboundRouteMapId The resource ID of the Route Map associated with this Routing Configuration for inbound learned routes.
         * 
         * @return builder
         * 
         */
        public Builder inboundRouteMapId(@Nullable Output<String> inboundRouteMapId) {
            $.inboundRouteMapId = inboundRouteMapId;
            return this;
        }

        /**
         * @param inboundRouteMapId The resource ID of the Route Map associated with this Routing Configuration for inbound learned routes.
         * 
         * @return builder
         * 
         */
        public Builder inboundRouteMapId(String inboundRouteMapId) {
            return inboundRouteMapId(Output.of(inboundRouteMapId));
        }

        /**
         * @param outboundRouteMapId The resource ID of the Route Map associated with this Routing Configuration for outbound advertised routes.
         * 
         * @return builder
         * 
         */
        public Builder outboundRouteMapId(@Nullable Output<String> outboundRouteMapId) {
            $.outboundRouteMapId = outboundRouteMapId;
            return this;
        }

        /**
         * @param outboundRouteMapId The resource ID of the Route Map associated with this Routing Configuration for outbound advertised routes.
         * 
         * @return builder
         * 
         */
        public Builder outboundRouteMapId(String outboundRouteMapId) {
            return outboundRouteMapId(Output.of(outboundRouteMapId));
        }

        /**
         * @param propagatedRouteTable A `propagated_route_table` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder propagatedRouteTable(@Nullable Output<VirtualHubConnectionRoutingPropagatedRouteTableArgs> propagatedRouteTable) {
            $.propagatedRouteTable = propagatedRouteTable;
            return this;
        }

        /**
         * @param propagatedRouteTable A `propagated_route_table` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder propagatedRouteTable(VirtualHubConnectionRoutingPropagatedRouteTableArgs propagatedRouteTable) {
            return propagatedRouteTable(Output.of(propagatedRouteTable));
        }

        /**
         * @param staticVnetLocalRouteOverrideCriteria The static VNet local route override criteria that is used to determine whether NVA in spoke VNet is bypassed for traffic with destination in spoke VNet. Possible values are `Contains` and `Equal`. Defaults to `Contains`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder staticVnetLocalRouteOverrideCriteria(@Nullable Output<String> staticVnetLocalRouteOverrideCriteria) {
            $.staticVnetLocalRouteOverrideCriteria = staticVnetLocalRouteOverrideCriteria;
            return this;
        }

        /**
         * @param staticVnetLocalRouteOverrideCriteria The static VNet local route override criteria that is used to determine whether NVA in spoke VNet is bypassed for traffic with destination in spoke VNet. Possible values are `Contains` and `Equal`. Defaults to `Contains`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder staticVnetLocalRouteOverrideCriteria(String staticVnetLocalRouteOverrideCriteria) {
            return staticVnetLocalRouteOverrideCriteria(Output.of(staticVnetLocalRouteOverrideCriteria));
        }

        /**
         * @param staticVnetRoutes A `static_vnet_route` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder staticVnetRoutes(@Nullable Output<List<VirtualHubConnectionRoutingStaticVnetRouteArgs>> staticVnetRoutes) {
            $.staticVnetRoutes = staticVnetRoutes;
            return this;
        }

        /**
         * @param staticVnetRoutes A `static_vnet_route` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder staticVnetRoutes(List<VirtualHubConnectionRoutingStaticVnetRouteArgs> staticVnetRoutes) {
            return staticVnetRoutes(Output.of(staticVnetRoutes));
        }

        /**
         * @param staticVnetRoutes A `static_vnet_route` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder staticVnetRoutes(VirtualHubConnectionRoutingStaticVnetRouteArgs... staticVnetRoutes) {
            return staticVnetRoutes(List.of(staticVnetRoutes));
        }

        public VirtualHubConnectionRoutingArgs build() {
            return $;
        }
    }

}
