// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.avs.outputs;

import com.pulumi.azure.avs.outputs.GetPrivateCloudCircuit;
import com.pulumi.azure.avs.outputs.GetPrivateCloudManagementCluster;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetPrivateCloudResult {
    /**
     * @return A `circuit` block as defined below.
     * 
     */
    private List<GetPrivateCloudCircuit> circuits;
    /**
     * @return The endpoint for the HCX Cloud Manager.
     * 
     */
    private String hcxCloudManagerEndpoint;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Is the VMware Private Cluster connected to the internet?
     * 
     */
    private Boolean internetConnectionEnabled;
    /**
     * @return The Azure Region where the VMware Private Cloud exists.
     * 
     */
    private String location;
    /**
     * @return A `management_cluster` block as defined below.
     * 
     */
    private List<GetPrivateCloudManagementCluster> managementClusters;
    /**
     * @return The network used to access vCenter Server and NSX-T Manager.
     * 
     */
    private String managementSubnetCidr;
    private String name;
    /**
     * @return The subnet CIDR of the VMware Private Cloud.
     * 
     */
    private String networkSubnetCidr;
    /**
     * @return The thumbprint of the NSX-T Manager SSL certificate.
     * 
     */
    private String nsxtCertificateThumbprint;
    /**
     * @return The endpoint for the NSX-T Data Center manager.
     * 
     */
    private String nsxtManagerEndpoint;
    /**
     * @return The network which isused for virtual machine cold migration, cloning, and snapshot migration.
     * 
     */
    private String provisioningSubnetCidr;
    private String resourceGroupName;
    /**
     * @return The Name of the SKU used for this Private Cloud.
     * 
     */
    private String skuName;
    /**
     * @return A mapping of tags assigned to the VMware Private Cloud.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The thumbprint of the vCenter Server SSL certificate.
     * 
     */
    private String vcenterCertificateThumbprint;
    /**
     * @return The endpoint for Virtual Center Server Appliance.
     * 
     */
    private String vcsaEndpoint;
    /**
     * @return The network which is used for live migration of virtual machines.
     * 
     */
    private String vmotionSubnetCidr;

    private GetPrivateCloudResult() {}
    /**
     * @return A `circuit` block as defined below.
     * 
     */
    public List<GetPrivateCloudCircuit> circuits() {
        return this.circuits;
    }
    /**
     * @return The endpoint for the HCX Cloud Manager.
     * 
     */
    public String hcxCloudManagerEndpoint() {
        return this.hcxCloudManagerEndpoint;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Is the VMware Private Cluster connected to the internet?
     * 
     */
    public Boolean internetConnectionEnabled() {
        return this.internetConnectionEnabled;
    }
    /**
     * @return The Azure Region where the VMware Private Cloud exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return A `management_cluster` block as defined below.
     * 
     */
    public List<GetPrivateCloudManagementCluster> managementClusters() {
        return this.managementClusters;
    }
    /**
     * @return The network used to access vCenter Server and NSX-T Manager.
     * 
     */
    public String managementSubnetCidr() {
        return this.managementSubnetCidr;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The subnet CIDR of the VMware Private Cloud.
     * 
     */
    public String networkSubnetCidr() {
        return this.networkSubnetCidr;
    }
    /**
     * @return The thumbprint of the NSX-T Manager SSL certificate.
     * 
     */
    public String nsxtCertificateThumbprint() {
        return this.nsxtCertificateThumbprint;
    }
    /**
     * @return The endpoint for the NSX-T Data Center manager.
     * 
     */
    public String nsxtManagerEndpoint() {
        return this.nsxtManagerEndpoint;
    }
    /**
     * @return The network which isused for virtual machine cold migration, cloning, and snapshot migration.
     * 
     */
    public String provisioningSubnetCidr() {
        return this.provisioningSubnetCidr;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The Name of the SKU used for this Private Cloud.
     * 
     */
    public String skuName() {
        return this.skuName;
    }
    /**
     * @return A mapping of tags assigned to the VMware Private Cloud.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The thumbprint of the vCenter Server SSL certificate.
     * 
     */
    public String vcenterCertificateThumbprint() {
        return this.vcenterCertificateThumbprint;
    }
    /**
     * @return The endpoint for Virtual Center Server Appliance.
     * 
     */
    public String vcsaEndpoint() {
        return this.vcsaEndpoint;
    }
    /**
     * @return The network which is used for live migration of virtual machines.
     * 
     */
    public String vmotionSubnetCidr() {
        return this.vmotionSubnetCidr;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPrivateCloudResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetPrivateCloudCircuit> circuits;
        private String hcxCloudManagerEndpoint;
        private String id;
        private Boolean internetConnectionEnabled;
        private String location;
        private List<GetPrivateCloudManagementCluster> managementClusters;
        private String managementSubnetCidr;
        private String name;
        private String networkSubnetCidr;
        private String nsxtCertificateThumbprint;
        private String nsxtManagerEndpoint;
        private String provisioningSubnetCidr;
        private String resourceGroupName;
        private String skuName;
        private Map<String,String> tags;
        private String vcenterCertificateThumbprint;
        private String vcsaEndpoint;
        private String vmotionSubnetCidr;
        public Builder() {}
        public Builder(GetPrivateCloudResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.circuits = defaults.circuits;
    	      this.hcxCloudManagerEndpoint = defaults.hcxCloudManagerEndpoint;
    	      this.id = defaults.id;
    	      this.internetConnectionEnabled = defaults.internetConnectionEnabled;
    	      this.location = defaults.location;
    	      this.managementClusters = defaults.managementClusters;
    	      this.managementSubnetCidr = defaults.managementSubnetCidr;
    	      this.name = defaults.name;
    	      this.networkSubnetCidr = defaults.networkSubnetCidr;
    	      this.nsxtCertificateThumbprint = defaults.nsxtCertificateThumbprint;
    	      this.nsxtManagerEndpoint = defaults.nsxtManagerEndpoint;
    	      this.provisioningSubnetCidr = defaults.provisioningSubnetCidr;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.skuName = defaults.skuName;
    	      this.tags = defaults.tags;
    	      this.vcenterCertificateThumbprint = defaults.vcenterCertificateThumbprint;
    	      this.vcsaEndpoint = defaults.vcsaEndpoint;
    	      this.vmotionSubnetCidr = defaults.vmotionSubnetCidr;
        }

        @CustomType.Setter
        public Builder circuits(List<GetPrivateCloudCircuit> circuits) {
            if (circuits == null) {
              throw new MissingRequiredPropertyException("GetPrivateCloudResult", "circuits");
            }
            this.circuits = circuits;
            return this;
        }
        public Builder circuits(GetPrivateCloudCircuit... circuits) {
            return circuits(List.of(circuits));
        }
        @CustomType.Setter
        public Builder hcxCloudManagerEndpoint(String hcxCloudManagerEndpoint) {
            if (hcxCloudManagerEndpoint == null) {
              throw new MissingRequiredPropertyException("GetPrivateCloudResult", "hcxCloudManagerEndpoint");
            }
            this.hcxCloudManagerEndpoint = hcxCloudManagerEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPrivateCloudResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder internetConnectionEnabled(Boolean internetConnectionEnabled) {
            if (internetConnectionEnabled == null) {
              throw new MissingRequiredPropertyException("GetPrivateCloudResult", "internetConnectionEnabled");
            }
            this.internetConnectionEnabled = internetConnectionEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetPrivateCloudResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder managementClusters(List<GetPrivateCloudManagementCluster> managementClusters) {
            if (managementClusters == null) {
              throw new MissingRequiredPropertyException("GetPrivateCloudResult", "managementClusters");
            }
            this.managementClusters = managementClusters;
            return this;
        }
        public Builder managementClusters(GetPrivateCloudManagementCluster... managementClusters) {
            return managementClusters(List.of(managementClusters));
        }
        @CustomType.Setter
        public Builder managementSubnetCidr(String managementSubnetCidr) {
            if (managementSubnetCidr == null) {
              throw new MissingRequiredPropertyException("GetPrivateCloudResult", "managementSubnetCidr");
            }
            this.managementSubnetCidr = managementSubnetCidr;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetPrivateCloudResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkSubnetCidr(String networkSubnetCidr) {
            if (networkSubnetCidr == null) {
              throw new MissingRequiredPropertyException("GetPrivateCloudResult", "networkSubnetCidr");
            }
            this.networkSubnetCidr = networkSubnetCidr;
            return this;
        }
        @CustomType.Setter
        public Builder nsxtCertificateThumbprint(String nsxtCertificateThumbprint) {
            if (nsxtCertificateThumbprint == null) {
              throw new MissingRequiredPropertyException("GetPrivateCloudResult", "nsxtCertificateThumbprint");
            }
            this.nsxtCertificateThumbprint = nsxtCertificateThumbprint;
            return this;
        }
        @CustomType.Setter
        public Builder nsxtManagerEndpoint(String nsxtManagerEndpoint) {
            if (nsxtManagerEndpoint == null) {
              throw new MissingRequiredPropertyException("GetPrivateCloudResult", "nsxtManagerEndpoint");
            }
            this.nsxtManagerEndpoint = nsxtManagerEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningSubnetCidr(String provisioningSubnetCidr) {
            if (provisioningSubnetCidr == null) {
              throw new MissingRequiredPropertyException("GetPrivateCloudResult", "provisioningSubnetCidr");
            }
            this.provisioningSubnetCidr = provisioningSubnetCidr;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetPrivateCloudResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder skuName(String skuName) {
            if (skuName == null) {
              throw new MissingRequiredPropertyException("GetPrivateCloudResult", "skuName");
            }
            this.skuName = skuName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetPrivateCloudResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder vcenterCertificateThumbprint(String vcenterCertificateThumbprint) {
            if (vcenterCertificateThumbprint == null) {
              throw new MissingRequiredPropertyException("GetPrivateCloudResult", "vcenterCertificateThumbprint");
            }
            this.vcenterCertificateThumbprint = vcenterCertificateThumbprint;
            return this;
        }
        @CustomType.Setter
        public Builder vcsaEndpoint(String vcsaEndpoint) {
            if (vcsaEndpoint == null) {
              throw new MissingRequiredPropertyException("GetPrivateCloudResult", "vcsaEndpoint");
            }
            this.vcsaEndpoint = vcsaEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder vmotionSubnetCidr(String vmotionSubnetCidr) {
            if (vmotionSubnetCidr == null) {
              throw new MissingRequiredPropertyException("GetPrivateCloudResult", "vmotionSubnetCidr");
            }
            this.vmotionSubnetCidr = vmotionSubnetCidr;
            return this;
        }
        public GetPrivateCloudResult build() {
            final var _resultValue = new GetPrivateCloudResult();
            _resultValue.circuits = circuits;
            _resultValue.hcxCloudManagerEndpoint = hcxCloudManagerEndpoint;
            _resultValue.id = id;
            _resultValue.internetConnectionEnabled = internetConnectionEnabled;
            _resultValue.location = location;
            _resultValue.managementClusters = managementClusters;
            _resultValue.managementSubnetCidr = managementSubnetCidr;
            _resultValue.name = name;
            _resultValue.networkSubnetCidr = networkSubnetCidr;
            _resultValue.nsxtCertificateThumbprint = nsxtCertificateThumbprint;
            _resultValue.nsxtManagerEndpoint = nsxtManagerEndpoint;
            _resultValue.provisioningSubnetCidr = provisioningSubnetCidr;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.skuName = skuName;
            _resultValue.tags = tags;
            _resultValue.vcenterCertificateThumbprint = vcenterCertificateThumbprint;
            _resultValue.vcsaEndpoint = vcsaEndpoint;
            _resultValue.vmotionSubnetCidr = vmotionSubnetCidr;
            return _resultValue;
        }
    }
}
