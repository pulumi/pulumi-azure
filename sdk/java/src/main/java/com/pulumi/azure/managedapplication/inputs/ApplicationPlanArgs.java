// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.managedapplication.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationPlanArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationPlanArgs Empty = new ApplicationPlanArgs();

    /**
     * Specifies the name of the plan from the marketplace.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Specifies the name of the plan from the marketplace.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Specifies the product of the plan from the marketplace.
     * 
     */
    @Import(name="product", required=true)
    private Output<String> product;

    /**
     * @return Specifies the product of the plan from the marketplace.
     * 
     */
    public Output<String> product() {
        return this.product;
    }

    /**
     * Specifies the promotion code to use with the plan.
     * 
     */
    @Import(name="promotionCode")
    private @Nullable Output<String> promotionCode;

    /**
     * @return Specifies the promotion code to use with the plan.
     * 
     */
    public Optional<Output<String>> promotionCode() {
        return Optional.ofNullable(this.promotionCode);
    }

    /**
     * Specifies the publisher of the plan.
     * 
     */
    @Import(name="publisher", required=true)
    private Output<String> publisher;

    /**
     * @return Specifies the publisher of the plan.
     * 
     */
    public Output<String> publisher() {
        return this.publisher;
    }

    /**
     * Specifies the version of the plan from the marketplace.
     * 
     */
    @Import(name="version", required=true)
    private Output<String> version;

    /**
     * @return Specifies the version of the plan from the marketplace.
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    private ApplicationPlanArgs() {}

    private ApplicationPlanArgs(ApplicationPlanArgs $) {
        this.name = $.name;
        this.product = $.product;
        this.promotionCode = $.promotionCode;
        this.publisher = $.publisher;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationPlanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationPlanArgs $;

        public Builder() {
            $ = new ApplicationPlanArgs();
        }

        public Builder(ApplicationPlanArgs defaults) {
            $ = new ApplicationPlanArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Specifies the name of the plan from the marketplace.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the plan from the marketplace.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param product Specifies the product of the plan from the marketplace.
         * 
         * @return builder
         * 
         */
        public Builder product(Output<String> product) {
            $.product = product;
            return this;
        }

        /**
         * @param product Specifies the product of the plan from the marketplace.
         * 
         * @return builder
         * 
         */
        public Builder product(String product) {
            return product(Output.of(product));
        }

        /**
         * @param promotionCode Specifies the promotion code to use with the plan.
         * 
         * @return builder
         * 
         */
        public Builder promotionCode(@Nullable Output<String> promotionCode) {
            $.promotionCode = promotionCode;
            return this;
        }

        /**
         * @param promotionCode Specifies the promotion code to use with the plan.
         * 
         * @return builder
         * 
         */
        public Builder promotionCode(String promotionCode) {
            return promotionCode(Output.of(promotionCode));
        }

        /**
         * @param publisher Specifies the publisher of the plan.
         * 
         * @return builder
         * 
         */
        public Builder publisher(Output<String> publisher) {
            $.publisher = publisher;
            return this;
        }

        /**
         * @param publisher Specifies the publisher of the plan.
         * 
         * @return builder
         * 
         */
        public Builder publisher(String publisher) {
            return publisher(Output.of(publisher));
        }

        /**
         * @param version Specifies the version of the plan from the marketplace.
         * 
         * @return builder
         * 
         */
        public Builder version(Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Specifies the version of the plan from the marketplace.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public ApplicationPlanArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.product = Objects.requireNonNull($.product, "expected parameter 'product' to be non-null");
            $.publisher = Objects.requireNonNull($.publisher, "expected parameter 'publisher' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
