// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.outputs;

import com.pulumi.azure.media.outputs.ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ContentKeyPolicyPolicyOptionFairplayConfiguration {
    /**
     * @return The key that must be used as FairPlay Application Secret key.
     * 
     */
    private final @Nullable String ask;
    /**
     * @return A `offline_rental_configuration` block as defined below.
     * 
     */
    private final @Nullable ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration offlineRentalConfiguration;
    /**
     * @return The Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key).
     * 
     */
    private final @Nullable String pfx;
    /**
     * @return The password encrypting FairPlay certificate in PKCS 12 (pfx) format.
     * 
     */
    private final @Nullable String pfxPassword;
    /**
     * @return The rental and lease key type. Supported values are `DualExpiry`, `PersistentLimited`, `PersistentUnlimited` or `Undefined`.
     * 
     */
    private final @Nullable String rentalAndLeaseKeyType;
    /**
     * @return The rental duration. Must be greater than 0.
     * 
     */
    private final @Nullable Integer rentalDurationSeconds;

    @CustomType.Constructor
    private ContentKeyPolicyPolicyOptionFairplayConfiguration(
        @CustomType.Parameter("ask") @Nullable String ask,
        @CustomType.Parameter("offlineRentalConfiguration") @Nullable ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration offlineRentalConfiguration,
        @CustomType.Parameter("pfx") @Nullable String pfx,
        @CustomType.Parameter("pfxPassword") @Nullable String pfxPassword,
        @CustomType.Parameter("rentalAndLeaseKeyType") @Nullable String rentalAndLeaseKeyType,
        @CustomType.Parameter("rentalDurationSeconds") @Nullable Integer rentalDurationSeconds) {
        this.ask = ask;
        this.offlineRentalConfiguration = offlineRentalConfiguration;
        this.pfx = pfx;
        this.pfxPassword = pfxPassword;
        this.rentalAndLeaseKeyType = rentalAndLeaseKeyType;
        this.rentalDurationSeconds = rentalDurationSeconds;
    }

    /**
     * @return The key that must be used as FairPlay Application Secret key.
     * 
     */
    public Optional<String> ask() {
        return Optional.ofNullable(this.ask);
    }
    /**
     * @return A `offline_rental_configuration` block as defined below.
     * 
     */
    public Optional<ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration> offlineRentalConfiguration() {
        return Optional.ofNullable(this.offlineRentalConfiguration);
    }
    /**
     * @return The Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key).
     * 
     */
    public Optional<String> pfx() {
        return Optional.ofNullable(this.pfx);
    }
    /**
     * @return The password encrypting FairPlay certificate in PKCS 12 (pfx) format.
     * 
     */
    public Optional<String> pfxPassword() {
        return Optional.ofNullable(this.pfxPassword);
    }
    /**
     * @return The rental and lease key type. Supported values are `DualExpiry`, `PersistentLimited`, `PersistentUnlimited` or `Undefined`.
     * 
     */
    public Optional<String> rentalAndLeaseKeyType() {
        return Optional.ofNullable(this.rentalAndLeaseKeyType);
    }
    /**
     * @return The rental duration. Must be greater than 0.
     * 
     */
    public Optional<Integer> rentalDurationSeconds() {
        return Optional.ofNullable(this.rentalDurationSeconds);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContentKeyPolicyPolicyOptionFairplayConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String ask;
        private @Nullable ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration offlineRentalConfiguration;
        private @Nullable String pfx;
        private @Nullable String pfxPassword;
        private @Nullable String rentalAndLeaseKeyType;
        private @Nullable Integer rentalDurationSeconds;

        public Builder() {
    	      // Empty
        }

        public Builder(ContentKeyPolicyPolicyOptionFairplayConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ask = defaults.ask;
    	      this.offlineRentalConfiguration = defaults.offlineRentalConfiguration;
    	      this.pfx = defaults.pfx;
    	      this.pfxPassword = defaults.pfxPassword;
    	      this.rentalAndLeaseKeyType = defaults.rentalAndLeaseKeyType;
    	      this.rentalDurationSeconds = defaults.rentalDurationSeconds;
        }

        public Builder ask(@Nullable String ask) {
            this.ask = ask;
            return this;
        }
        public Builder offlineRentalConfiguration(@Nullable ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration offlineRentalConfiguration) {
            this.offlineRentalConfiguration = offlineRentalConfiguration;
            return this;
        }
        public Builder pfx(@Nullable String pfx) {
            this.pfx = pfx;
            return this;
        }
        public Builder pfxPassword(@Nullable String pfxPassword) {
            this.pfxPassword = pfxPassword;
            return this;
        }
        public Builder rentalAndLeaseKeyType(@Nullable String rentalAndLeaseKeyType) {
            this.rentalAndLeaseKeyType = rentalAndLeaseKeyType;
            return this;
        }
        public Builder rentalDurationSeconds(@Nullable Integer rentalDurationSeconds) {
            this.rentalDurationSeconds = rentalDurationSeconds;
            return this;
        }        public ContentKeyPolicyPolicyOptionFairplayConfiguration build() {
            return new ContentKeyPolicyPolicyOptionFairplayConfiguration(ask, offlineRentalConfiguration, pfx, pfxPassword, rentalAndLeaseKeyType, rentalDurationSeconds);
        }
    }
}
