// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mssql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class VirtualMachineAvailabilityGroupListenerLoadBalancerConfiguration {
    /**
     * @return The ID of the Load Balancer. Changing this forces a new resource to be created.
     * 
     */
    private String loadBalancerId;
    /**
     * @return The private IP Address of the listener. Changing this forces a new resource to be created.
     * 
     */
    private String privateIpAddress;
    /**
     * @return The probe port of the listener. Changing this forces a new resource to be created.
     * 
     */
    private Integer probePort;
    /**
     * @return Specifies a list of SQL Virtual Machine IDs. Changing this forces a new resource to be created.
     * 
     */
    private List<String> sqlVirtualMachineIds;
    /**
     * @return The ID of the Subnet to create the listener. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** `sql_virtual_machine_ids` should match with the SQL Virtual Machines specified in `replica`.
     * 
     */
    private String subnetId;

    private VirtualMachineAvailabilityGroupListenerLoadBalancerConfiguration() {}
    /**
     * @return The ID of the Load Balancer. Changing this forces a new resource to be created.
     * 
     */
    public String loadBalancerId() {
        return this.loadBalancerId;
    }
    /**
     * @return The private IP Address of the listener. Changing this forces a new resource to be created.
     * 
     */
    public String privateIpAddress() {
        return this.privateIpAddress;
    }
    /**
     * @return The probe port of the listener. Changing this forces a new resource to be created.
     * 
     */
    public Integer probePort() {
        return this.probePort;
    }
    /**
     * @return Specifies a list of SQL Virtual Machine IDs. Changing this forces a new resource to be created.
     * 
     */
    public List<String> sqlVirtualMachineIds() {
        return this.sqlVirtualMachineIds;
    }
    /**
     * @return The ID of the Subnet to create the listener. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** `sql_virtual_machine_ids` should match with the SQL Virtual Machines specified in `replica`.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualMachineAvailabilityGroupListenerLoadBalancerConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String loadBalancerId;
        private String privateIpAddress;
        private Integer probePort;
        private List<String> sqlVirtualMachineIds;
        private String subnetId;
        public Builder() {}
        public Builder(VirtualMachineAvailabilityGroupListenerLoadBalancerConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.loadBalancerId = defaults.loadBalancerId;
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.probePort = defaults.probePort;
    	      this.sqlVirtualMachineIds = defaults.sqlVirtualMachineIds;
    	      this.subnetId = defaults.subnetId;
        }

        @CustomType.Setter
        public Builder loadBalancerId(String loadBalancerId) {
            if (loadBalancerId == null) {
              throw new MissingRequiredPropertyException("VirtualMachineAvailabilityGroupListenerLoadBalancerConfiguration", "loadBalancerId");
            }
            this.loadBalancerId = loadBalancerId;
            return this;
        }
        @CustomType.Setter
        public Builder privateIpAddress(String privateIpAddress) {
            if (privateIpAddress == null) {
              throw new MissingRequiredPropertyException("VirtualMachineAvailabilityGroupListenerLoadBalancerConfiguration", "privateIpAddress");
            }
            this.privateIpAddress = privateIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder probePort(Integer probePort) {
            if (probePort == null) {
              throw new MissingRequiredPropertyException("VirtualMachineAvailabilityGroupListenerLoadBalancerConfiguration", "probePort");
            }
            this.probePort = probePort;
            return this;
        }
        @CustomType.Setter
        public Builder sqlVirtualMachineIds(List<String> sqlVirtualMachineIds) {
            if (sqlVirtualMachineIds == null) {
              throw new MissingRequiredPropertyException("VirtualMachineAvailabilityGroupListenerLoadBalancerConfiguration", "sqlVirtualMachineIds");
            }
            this.sqlVirtualMachineIds = sqlVirtualMachineIds;
            return this;
        }
        public Builder sqlVirtualMachineIds(String... sqlVirtualMachineIds) {
            return sqlVirtualMachineIds(List.of(sqlVirtualMachineIds));
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("VirtualMachineAvailabilityGroupListenerLoadBalancerConfiguration", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        public VirtualMachineAvailabilityGroupListenerLoadBalancerConfiguration build() {
            final var _resultValue = new VirtualMachineAvailabilityGroupListenerLoadBalancerConfiguration();
            _resultValue.loadBalancerId = loadBalancerId;
            _resultValue.privateIpAddress = privateIpAddress;
            _resultValue.probePort = probePort;
            _resultValue.sqlVirtualMachineIds = sqlVirtualMachineIds;
            _resultValue.subnetId = subnetId;
            return _resultValue;
        }
    }
}
