// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.logicapps;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.logicapps.StandardArgs;
import com.pulumi.azure.logicapps.inputs.StandardState;
import com.pulumi.azure.logicapps.outputs.StandardConnectionString;
import com.pulumi.azure.logicapps.outputs.StandardIdentity;
import com.pulumi.azure.logicapps.outputs.StandardSiteConfig;
import com.pulumi.azure.logicapps.outputs.StandardSiteCredential;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Logic App (Standard / Single Tenant)
 * 
 * ## Example Usage
 * 
 * ### With App Service Plan)
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.storage.Account;
 * import com.pulumi.azure.storage.AccountArgs;
 * import com.pulumi.azure.appservice.ServicePlan;
 * import com.pulumi.azure.appservice.ServicePlanArgs;
 * import com.pulumi.azure.logicapps.Standard;
 * import com.pulumi.azure.logicapps.StandardArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()
 *             .name("example")
 *             .location("West Europe")
 *             .build());
 * 
 *         var exampleAccount = new Account("exampleAccount", AccountArgs.builder()
 *             .name("examplestorageaccount")
 *             .resourceGroupName(example.name())
 *             .location(example.location())
 *             .accountTier("Standard")
 *             .accountReplicationType("LRS")
 *             .build());
 * 
 *         var exampleServicePlan = new ServicePlan("exampleServicePlan", ServicePlanArgs.builder()
 *             .name("example-service-plan")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .osType("Windows")
 *             .skuName("WS1")
 *             .build());
 * 
 *         var exampleStandard = new Standard("exampleStandard", StandardArgs.builder()
 *             .name("example-logic-app")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .appServicePlanId(exampleAzurermAppServicePlan.id())
 *             .storageAccountName(exampleAccount.name())
 *             .storageAccountAccessKey(exampleAccount.primaryAccessKey())
 *             .appSettings(Map.ofEntries(
 *                 Map.entry("FUNCTIONS_WORKER_RUNTIME", "node"),
 *                 Map.entry("WEBSITE_NODE_DEFAULT_VERSION", "~18")
 *             ))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### For Container Mode)
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.storage.Account;
 * import com.pulumi.azure.storage.AccountArgs;
 * import com.pulumi.azure.appservice.Plan;
 * import com.pulumi.azure.appservice.PlanArgs;
 * import com.pulumi.azure.appservice.inputs.PlanSkuArgs;
 * import com.pulumi.azure.logicapps.Standard;
 * import com.pulumi.azure.logicapps.StandardArgs;
 * import com.pulumi.azure.logicapps.inputs.StandardSiteConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()
 *             .name("example")
 *             .location("West Europe")
 *             .build());
 * 
 *         var exampleAccount = new Account("exampleAccount", AccountArgs.builder()
 *             .name("examplestorageaccount")
 *             .resourceGroupName(example.name())
 *             .location(example.location())
 *             .accountTier("Standard")
 *             .accountReplicationType("LRS")
 *             .build());
 * 
 *         var examplePlan = new Plan("examplePlan", PlanArgs.builder()
 *             .name("example-service-plan")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .kind("Linux")
 *             .reserved(true)
 *             .sku(PlanSkuArgs.builder()
 *                 .tier("WorkflowStandard")
 *                 .size("WS1")
 *                 .build())
 *             .build());
 * 
 *         var exampleStandard = new Standard("exampleStandard", StandardArgs.builder()
 *             .name("example-logic-app")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .appServicePlanId(examplePlan.id())
 *             .storageAccountName(exampleAccount.name())
 *             .storageAccountAccessKey(exampleAccount.primaryAccessKey())
 *             .siteConfig(StandardSiteConfigArgs.builder()
 *                 .linuxFxVersion("DOCKER|mcr.microsoft.com/azure-functions/dotnet:3.0-appservice")
 *                 .build())
 *             .appSettings(Map.ofEntries(
 *                 Map.entry("DOCKER_REGISTRY_SERVER_URL", "https://<server-name>.azurecr.io"),
 *                 Map.entry("DOCKER_REGISTRY_SERVER_USERNAME", "username"),
 *                 Map.entry("DOCKER_REGISTRY_SERVER_PASSWORD", "password")
 *             ))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## API Providers
 * 
 * &lt;!-- This section is generated, changes will be overwritten --&gt;
 * This resource uses the following Azure API Providers:
 * 
 * * `Microsoft.Web` - 2023-12-01, 2023-01-01
 * 
 * ## Import
 * 
 * Logic Apps can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:logicapps/standard:Standard logicapp1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Web/sites/logicapp1
 * ```
 * 
 */
@ResourceType(type="azure:logicapps/standard:Standard")
public class Standard extends com.pulumi.resources.CustomResource {
    /**
     * The ID of the App Service Plan within which to create this Logic App.
     * 
     */
    @Export(name="appServicePlanId", refs={String.class}, tree="[0]")
    private Output<String> appServicePlanId;

    /**
     * @return The ID of the App Service Plan within which to create this Logic App.
     * 
     */
    public Output<String> appServicePlanId() {
        return this.appServicePlanId;
    }
    /**
     * A map of key-value pairs for [App Settings](https://docs.microsoft.com/azure/azure-functions/functions-app-settings) and custom values.
     * 
     * &gt; **Note:** There are a number of application settings that will be managed for you by this resource type and *shouldn&#39;t* be configured separately as part of the app_settings you specify.  `AzureWebJobsStorage` is filled based on `storage_account_name` and `storage_account_access_key`. `WEBSITE_CONTENTSHARE` is detailed below. `FUNCTIONS_EXTENSION_VERSION` is filled based on `version`. `APP_KIND` is set to workflowApp and `AzureFunctionsJobHost__extensionBundle__id` and `AzureFunctionsJobHost__extensionBundle__version` are set as detailed below.
     * 
     */
    @Export(name="appSettings", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> appSettings;

    /**
     * @return A map of key-value pairs for [App Settings](https://docs.microsoft.com/azure/azure-functions/functions-app-settings) and custom values.
     * 
     * &gt; **Note:** There are a number of application settings that will be managed for you by this resource type and *shouldn&#39;t* be configured separately as part of the app_settings you specify.  `AzureWebJobsStorage` is filled based on `storage_account_name` and `storage_account_access_key`. `WEBSITE_CONTENTSHARE` is detailed below. `FUNCTIONS_EXTENSION_VERSION` is filled based on `version`. `APP_KIND` is set to workflowApp and `AzureFunctionsJobHost__extensionBundle__id` and `AzureFunctionsJobHost__extensionBundle__version` are set as detailed below.
     * 
     */
    public Output<Map<String,String>> appSettings() {
        return this.appSettings;
    }
    /**
     * If `use_extension_bundle` is set to `true` this controls the allowed range for bundle versions. Defaults to `[1.*, 2.0.0)`.
     * 
     */
    @Export(name="bundleVersion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> bundleVersion;

    /**
     * @return If `use_extension_bundle` is set to `true` this controls the allowed range for bundle versions. Defaults to `[1.*, 2.0.0)`.
     * 
     */
    public Output<Optional<String>> bundleVersion() {
        return Codegen.optional(this.bundleVersion);
    }
    /**
     * Should the Logic App send session affinity cookies, which route client requests in the same session to the same instance?
     * 
     */
    @Export(name="clientAffinityEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> clientAffinityEnabled;

    /**
     * @return Should the Logic App send session affinity cookies, which route client requests in the same session to the same instance?
     * 
     */
    public Output<Boolean> clientAffinityEnabled() {
        return this.clientAffinityEnabled;
    }
    /**
     * The mode of the Logic App&#39;s client certificates requirement for incoming requests. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`.
     * 
     */
    @Export(name="clientCertificateMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clientCertificateMode;

    /**
     * @return The mode of the Logic App&#39;s client certificates requirement for incoming requests. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`.
     * 
     */
    public Output<Optional<String>> clientCertificateMode() {
        return Codegen.optional(this.clientCertificateMode);
    }
    /**
     * A `connection_string` block as defined below.
     * 
     */
    @Export(name="connectionStrings", refs={List.class,StandardConnectionString.class}, tree="[0,1]")
    private Output<List<StandardConnectionString>> connectionStrings;

    /**
     * @return A `connection_string` block as defined below.
     * 
     */
    public Output<List<StandardConnectionString>> connectionStrings() {
        return this.connectionStrings;
    }
    /**
     * An identifier used by App Service to perform domain ownership verification via DNS TXT record.
     * 
     */
    @Export(name="customDomainVerificationId", refs={String.class}, tree="[0]")
    private Output<String> customDomainVerificationId;

    /**
     * @return An identifier used by App Service to perform domain ownership verification via DNS TXT record.
     * 
     */
    public Output<String> customDomainVerificationId() {
        return this.customDomainVerificationId;
    }
    /**
     * The default hostname associated with the Logic App - such as `mysite.azurewebsites.net`.
     * 
     */
    @Export(name="defaultHostname", refs={String.class}, tree="[0]")
    private Output<String> defaultHostname;

    /**
     * @return The default hostname associated with the Logic App - such as `mysite.azurewebsites.net`.
     * 
     */
    public Output<String> defaultHostname() {
        return this.defaultHostname;
    }
    /**
     * Is the Logic App enabled? Defaults to `true`.
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enabled;

    /**
     * @return Is the Logic App enabled? Defaults to `true`.
     * 
     */
    public Output<Optional<Boolean>> enabled() {
        return Codegen.optional(this.enabled);
    }
    /**
     * Whether the FTP basic authentication publishing profile is enabled. Defaults to `true`.
     * 
     */
    @Export(name="ftpPublishBasicAuthenticationEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ftpPublishBasicAuthenticationEnabled;

    /**
     * @return Whether the FTP basic authentication publishing profile is enabled. Defaults to `true`.
     * 
     */
    public Output<Optional<Boolean>> ftpPublishBasicAuthenticationEnabled() {
        return Codegen.optional(this.ftpPublishBasicAuthenticationEnabled);
    }
    /**
     * Can the Logic App only be accessed via HTTPS? Defaults to `false`.
     * 
     */
    @Export(name="httpsOnly", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> httpsOnly;

    /**
     * @return Can the Logic App only be accessed via HTTPS? Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> httpsOnly() {
        return Codegen.optional(this.httpsOnly);
    }
    /**
     * An `identity` block as defined below.
     * 
     */
    @Export(name="identity", refs={StandardIdentity.class}, tree="[0]")
    private Output</* @Nullable */ StandardIdentity> identity;

    /**
     * @return An `identity` block as defined below.
     * 
     */
    public Output<Optional<StandardIdentity>> identity() {
        return Codegen.optional(this.identity);
    }
    /**
     * The Logic App kind.
     * 
     */
    @Export(name="kind", refs={String.class}, tree="[0]")
    private Output<String> kind;

    /**
     * @return The Logic App kind.
     * 
     */
    public Output<String> kind() {
        return this.kind;
    }
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Specifies the name of the Logic App. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Specifies the name of the Logic App. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
     * 
     */
    @Export(name="outboundIpAddresses", refs={String.class}, tree="[0]")
    private Output<String> outboundIpAddresses;

    /**
     * @return A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
     * 
     */
    public Output<String> outboundIpAddresses() {
        return this.outboundIpAddresses;
    }
    /**
     * A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outbound_ip_addresses`.
     * 
     */
    @Export(name="possibleOutboundIpAddresses", refs={String.class}, tree="[0]")
    private Output<String> possibleOutboundIpAddresses;

    /**
     * @return A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outbound_ip_addresses`.
     * 
     */
    public Output<String> possibleOutboundIpAddresses() {
        return this.possibleOutboundIpAddresses;
    }
    /**
     * Whether Public Network Access should be enabled or not. Possible values are `Enabled` and `Disabled`. Defaults to `Enabled`.
     * 
     * &gt; **Note:** Setting this property will also set it in the Site Config.
     * 
     */
    @Export(name="publicNetworkAccess", refs={String.class}, tree="[0]")
    private Output<String> publicNetworkAccess;

    /**
     * @return Whether Public Network Access should be enabled or not. Possible values are `Enabled` and `Disabled`. Defaults to `Enabled`.
     * 
     * &gt; **Note:** Setting this property will also set it in the Site Config.
     * 
     */
    public Output<String> publicNetworkAccess() {
        return this.publicNetworkAccess;
    }
    /**
     * The name of the resource group in which to create the Logic App. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the Logic App. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * Whether the default SCM basic authentication publishing profile is enabled. Defaults to `true`.
     * 
     */
    @Export(name="scmPublishBasicAuthenticationEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> scmPublishBasicAuthenticationEnabled;

    /**
     * @return Whether the default SCM basic authentication publishing profile is enabled. Defaults to `true`.
     * 
     */
    public Output<Optional<Boolean>> scmPublishBasicAuthenticationEnabled() {
        return Codegen.optional(this.scmPublishBasicAuthenticationEnabled);
    }
    /**
     * A `site_config` object as defined below.
     * 
     */
    @Export(name="siteConfig", refs={StandardSiteConfig.class}, tree="[0]")
    private Output<StandardSiteConfig> siteConfig;

    /**
     * @return A `site_config` object as defined below.
     * 
     */
    public Output<StandardSiteConfig> siteConfig() {
        return this.siteConfig;
    }
    /**
     * A `site_credential` block as defined below, which contains the site-level credentials used to publish to this App Service.
     * 
     */
    @Export(name="siteCredentials", refs={List.class,StandardSiteCredential.class}, tree="[0,1]")
    private Output<List<StandardSiteCredential>> siteCredentials;

    /**
     * @return A `site_credential` block as defined below, which contains the site-level credentials used to publish to this App Service.
     * 
     */
    public Output<List<StandardSiteCredential>> siteCredentials() {
        return this.siteCredentials;
    }
    /**
     * The access key which will be used to access the backend storage account for the Logic App.
     * 
     */
    @Export(name="storageAccountAccessKey", refs={String.class}, tree="[0]")
    private Output<String> storageAccountAccessKey;

    /**
     * @return The access key which will be used to access the backend storage account for the Logic App.
     * 
     */
    public Output<String> storageAccountAccessKey() {
        return this.storageAccountAccessKey;
    }
    /**
     * The backend storage account name which will be used by this Logic App (e.g. for Stateful workflows data). Changing this forces a new resource to be created.
     * 
     */
    @Export(name="storageAccountName", refs={String.class}, tree="[0]")
    private Output<String> storageAccountName;

    /**
     * @return The backend storage account name which will be used by this Logic App (e.g. for Stateful workflows data). Changing this forces a new resource to be created.
     * 
     */
    public Output<String> storageAccountName() {
        return this.storageAccountName;
    }
    @Export(name="storageAccountShareName", refs={String.class}, tree="[0]")
    private Output<String> storageAccountShareName;

    public Output<String> storageAccountShareName() {
        return this.storageAccountShareName;
    }
    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Should the logic app use the bundled extension package? If true, then application settings for `AzureFunctionsJobHost__extensionBundle__id` and `AzureFunctionsJobHost__extensionBundle__version` will be created. Defaults to `true`.
     * 
     */
    @Export(name="useExtensionBundle", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> useExtensionBundle;

    /**
     * @return Should the logic app use the bundled extension package? If true, then application settings for `AzureFunctionsJobHost__extensionBundle__id` and `AzureFunctionsJobHost__extensionBundle__version` will be created. Defaults to `true`.
     * 
     */
    public Output<Optional<Boolean>> useExtensionBundle() {
        return Codegen.optional(this.useExtensionBundle);
    }
    /**
     * The runtime version associated with the Logic App. Defaults to `~4`.
     * 
     */
    @Export(name="version", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> version;

    /**
     * @return The runtime version associated with the Logic App. Defaults to `~4`.
     * 
     */
    public Output<Optional<String>> version() {
        return Codegen.optional(this.version);
    }
    @Export(name="virtualNetworkSubnetId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> virtualNetworkSubnetId;

    public Output<Optional<String>> virtualNetworkSubnetId() {
        return Codegen.optional(this.virtualNetworkSubnetId);
    }
    /**
     * Specifies whether allow routing traffic between the Logic App and Storage Account content share through a virtual network. Defaults to `false`.
     * 
     */
    @Export(name="vnetContentShareEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> vnetContentShareEnabled;

    /**
     * @return Specifies whether allow routing traffic between the Logic App and Storage Account content share through a virtual network. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> vnetContentShareEnabled() {
        return Codegen.optional(this.vnetContentShareEnabled);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Standard(java.lang.String name) {
        this(name, StandardArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Standard(java.lang.String name, StandardArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Standard(java.lang.String name, StandardArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:logicapps/standard:Standard", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Standard(java.lang.String name, Output<java.lang.String> id, @Nullable StandardState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:logicapps/standard:Standard", name, state, makeResourceOptions(options, id), false);
    }

    private static StandardArgs makeArgs(StandardArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? StandardArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "storageAccountAccessKey"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Standard get(java.lang.String name, Output<java.lang.String> id, @Nullable StandardState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Standard(name, id, state, options);
    }
}
