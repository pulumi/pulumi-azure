// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.keyvault.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedStorageAccountSasTokenDefinitionState extends com.pulumi.resources.ResourceArgs {

    public static final ManagedStorageAccountSasTokenDefinitionState Empty = new ManagedStorageAccountSasTokenDefinitionState();

    /**
     * The ID of the Managed Storage Account.
     * 
     */
    @Import(name="managedStorageAccountId")
    private @Nullable Output<String> managedStorageAccountId;

    /**
     * @return The ID of the Managed Storage Account.
     * 
     */
    public Optional<Output<String>> managedStorageAccountId() {
        return Optional.ofNullable(this.managedStorageAccountId);
    }

    /**
     * The name which should be used for this SAS Definition.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this SAS Definition.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The SAS definition token template signed with an arbitrary key. Tokens created according to the SAS definition will have the same properties as the template, but regenerated with a new validity period.
     * 
     */
    @Import(name="sasTemplateUri")
    private @Nullable Output<String> sasTemplateUri;

    /**
     * @return The SAS definition token template signed with an arbitrary key. Tokens created according to the SAS definition will have the same properties as the template, but regenerated with a new validity period.
     * 
     */
    public Optional<Output<String>> sasTemplateUri() {
        return Optional.ofNullable(this.sasTemplateUri);
    }

    /**
     * The type of SAS token the SAS definition will create. Possible values are `account` and `service`.
     * 
     */
    @Import(name="sasType")
    private @Nullable Output<String> sasType;

    /**
     * @return The type of SAS token the SAS definition will create. Possible values are `account` and `service`.
     * 
     */
    public Optional<Output<String>> sasType() {
        return Optional.ofNullable(this.sasType);
    }

    /**
     * The ID of the Secret that is created by Managed Storage Account SAS Definition.
     * 
     */
    @Import(name="secretId")
    private @Nullable Output<String> secretId;

    /**
     * @return The ID of the Secret that is created by Managed Storage Account SAS Definition.
     * 
     */
    public Optional<Output<String>> secretId() {
        return Optional.ofNullable(this.secretId);
    }

    /**
     * A mapping of tags which should be assigned to the SAS Definition.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the SAS Definition.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Validity period of SAS token. Value needs to be in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations).
     * 
     */
    @Import(name="validityPeriod")
    private @Nullable Output<String> validityPeriod;

    /**
     * @return Validity period of SAS token. Value needs to be in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations).
     * 
     */
    public Optional<Output<String>> validityPeriod() {
        return Optional.ofNullable(this.validityPeriod);
    }

    private ManagedStorageAccountSasTokenDefinitionState() {}

    private ManagedStorageAccountSasTokenDefinitionState(ManagedStorageAccountSasTokenDefinitionState $) {
        this.managedStorageAccountId = $.managedStorageAccountId;
        this.name = $.name;
        this.sasTemplateUri = $.sasTemplateUri;
        this.sasType = $.sasType;
        this.secretId = $.secretId;
        this.tags = $.tags;
        this.validityPeriod = $.validityPeriod;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedStorageAccountSasTokenDefinitionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedStorageAccountSasTokenDefinitionState $;

        public Builder() {
            $ = new ManagedStorageAccountSasTokenDefinitionState();
        }

        public Builder(ManagedStorageAccountSasTokenDefinitionState defaults) {
            $ = new ManagedStorageAccountSasTokenDefinitionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param managedStorageAccountId The ID of the Managed Storage Account.
         * 
         * @return builder
         * 
         */
        public Builder managedStorageAccountId(@Nullable Output<String> managedStorageAccountId) {
            $.managedStorageAccountId = managedStorageAccountId;
            return this;
        }

        /**
         * @param managedStorageAccountId The ID of the Managed Storage Account.
         * 
         * @return builder
         * 
         */
        public Builder managedStorageAccountId(String managedStorageAccountId) {
            return managedStorageAccountId(Output.of(managedStorageAccountId));
        }

        /**
         * @param name The name which should be used for this SAS Definition.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this SAS Definition.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param sasTemplateUri The SAS definition token template signed with an arbitrary key. Tokens created according to the SAS definition will have the same properties as the template, but regenerated with a new validity period.
         * 
         * @return builder
         * 
         */
        public Builder sasTemplateUri(@Nullable Output<String> sasTemplateUri) {
            $.sasTemplateUri = sasTemplateUri;
            return this;
        }

        /**
         * @param sasTemplateUri The SAS definition token template signed with an arbitrary key. Tokens created according to the SAS definition will have the same properties as the template, but regenerated with a new validity period.
         * 
         * @return builder
         * 
         */
        public Builder sasTemplateUri(String sasTemplateUri) {
            return sasTemplateUri(Output.of(sasTemplateUri));
        }

        /**
         * @param sasType The type of SAS token the SAS definition will create. Possible values are `account` and `service`.
         * 
         * @return builder
         * 
         */
        public Builder sasType(@Nullable Output<String> sasType) {
            $.sasType = sasType;
            return this;
        }

        /**
         * @param sasType The type of SAS token the SAS definition will create. Possible values are `account` and `service`.
         * 
         * @return builder
         * 
         */
        public Builder sasType(String sasType) {
            return sasType(Output.of(sasType));
        }

        /**
         * @param secretId The ID of the Secret that is created by Managed Storage Account SAS Definition.
         * 
         * @return builder
         * 
         */
        public Builder secretId(@Nullable Output<String> secretId) {
            $.secretId = secretId;
            return this;
        }

        /**
         * @param secretId The ID of the Secret that is created by Managed Storage Account SAS Definition.
         * 
         * @return builder
         * 
         */
        public Builder secretId(String secretId) {
            return secretId(Output.of(secretId));
        }

        /**
         * @param tags A mapping of tags which should be assigned to the SAS Definition.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags which should be assigned to the SAS Definition.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param validityPeriod Validity period of SAS token. Value needs to be in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations).
         * 
         * @return builder
         * 
         */
        public Builder validityPeriod(@Nullable Output<String> validityPeriod) {
            $.validityPeriod = validityPeriod;
            return this;
        }

        /**
         * @param validityPeriod Validity period of SAS token. Value needs to be in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations).
         * 
         * @return builder
         * 
         */
        public Builder validityPeriod(String validityPeriod) {
            return validityPeriod(Output.of(validityPeriod));
        }

        public ManagedStorageAccountSasTokenDefinitionState build() {
            return $;
        }
    }

}
