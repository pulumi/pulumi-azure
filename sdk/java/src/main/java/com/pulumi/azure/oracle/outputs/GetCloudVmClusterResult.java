// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.oracle.outputs;

import com.pulumi.azure.oracle.outputs.GetCloudVmClusterDataCollectionOption;
import com.pulumi.azure.oracle.outputs.GetCloudVmClusterFileSystemConfiguration;
import com.pulumi.azure.oracle.outputs.GetCloudVmClusterIormConfigCach;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetCloudVmClusterResult {
    /**
     * @return Client OCI backup subnet CIDR, default is `192.168.252.0/22`.
     * 
     */
    private String backupSubnetCidr;
    /**
     * @return The Cloud Exadata Infrastructure ID.
     * 
     */
    private String cloudExadataInfrastructureId;
    /**
     * @return The cluster name for Cloud VM Cluster.
     * 
     */
    private String clusterName;
    /**
     * @return The OCID of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The compute model of the Exadata Infrastructure.
     * 
     */
    private String computeModel;
    /**
     * @return A `computeNodes` block as defined below.
     * 
     */
    private List<String> computeNodes;
    /**
     * @return The number of CPU cores enabled on the Cloud VM Cluster.
     * 
     */
    private Integer cpuCoreCount;
    /**
     * @return A `dataCollectionOptions` block as defined below.
     * 
     */
    private List<GetCloudVmClusterDataCollectionOption> dataCollectionOptions;
    /**
     * @return The percentage assigned to DATA storage (user data and database files). The remaining percentage is assigned to RECO storage (database redo logs, archive logs, and recovery manager backups). Accepted values are `35`, `40`, `60`, and 80. The default is `80` percent assigned to DATA storage. See [Storage Configuration](https://docs.oracle.com/en-us/iaas/exadatacloud/index.html#Exadata) in the Exadata documentation for details on the impact of the configuration settings on storage.
     * 
     */
    private Integer dataStoragePercentage;
    /**
     * @return The data disk group size to be allocated in TBs.
     * 
     */
    private Double dataStorageSizeInTbs;
    /**
     * @return The local node storage to be allocated in GBs.
     * 
     */
    private Integer dbNodeStorageSizeInGbs;
    /**
     * @return A `dbServers` block as defined below.
     * 
     */
    private List<String> dbServers;
    /**
     * @return The type of redundancy configured for the Cloud Vm Cluster. `NORMAL` is 2-way redundancy. `HIGH` is 3-way redundancy.
     * 
     */
    private String diskRedundancy;
    /**
     * @return The user-friendly name for the Cloud VM Cluster. The name does not need to be unique.
     * 
     */
    private String displayName;
    /**
     * @return The domain name for the Cloud VM Cluster.
     * 
     */
    private String domain;
    /**
     * @return A `fileSystemConfiguration` block as defined below.
     * 
     */
    private List<GetCloudVmClusterFileSystemConfiguration> fileSystemConfigurations;
    /**
     * @return A valid Oracle Grid Infrastructure (GI) software version.
     * 
     */
    private String giVersion;
    /**
     * @return The hostname for the Cloud VM Cluster without suffix.
     * 
     */
    private String hostname;
    /**
     * @return The hostname for the Cloud VM Cluster with suffix.
     * 
     */
    private String hostnameActual;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A `iormConfigCache` block as defined below.
     * 
     */
    private List<GetCloudVmClusterIormConfigCach> iormConfigCaches;
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the last maintenance update history entry. This value is updated when a maintenance update starts.
     * 
     */
    private String lastUpdateHistoryEntryId;
    /**
     * @return The Oracle license model that applies to the Cloud VM Cluster.
     * 
     */
    private String licenseModel;
    /**
     * @return Additional information about the current `lifecycleState`.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The current state of IORM configuration for the Exadata DB system.
     * 
     */
    private String lifecycleState;
    /**
     * @return The port number configured for the listener on the Cloud VM Cluster.
     * 
     */
    private Integer listenerPort;
    /**
     * @return If true, database backup on local Exadata storage is configured for the Cloud VM Cluster. If false, database backup on local Exadata storage is not available in the Cloud VM Cluster.
     * 
     */
    private Boolean localBackupEnabled;
    /**
     * @return The Azure Region where the Cloud VM Cluster exists.
     * 
     */
    private String location;
    /**
     * @return The memory to be allocated in GBs.
     * 
     */
    private Integer memorySizeInGbs;
    private String name;
    /**
     * @return The number of nodes in the Cloud VM Cluster.
     * 
     */
    private Integer nodeCount;
    /**
     * @return The list of [OCIDs](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) for the network security groups (NSGs) to which this resource belongs. Setting this to an empty list removes all resources from all NSGs. For more information about NSGs, see [Security Rules](https://docs.oracle.com/en-us/iaas/Content/Network/Concepts/securityrules.htm). NsgIds restrictions:
     * * A network security group (NSG) is optional for Autonomous Databases with private access. The nsgIds list can be empty.
     * 
     */
    private String nsgUrl;
    /**
     * @return The URL of the resource in the OCI console.
     * 
     */
    private String ociUrl;
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the Cloud VM Cluster.
     * 
     */
    private String ocid;
    /**
     * @return The number of OCPU cores to enable on the Cloud VM Cluster. Only 1 decimal place is allowed for the fractional part.
     * 
     */
    private Double ocpuCount;
    private String resourceGroupName;
    /**
     * @return The FQDN of the DNS record for the SCAN IP addresses that are associated with the Cloud VM Cluster.
     * 
     */
    private String scanDnsName;
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the DNS record for the SCAN IP addresses that are associated with the Cloud VM Cluster.
     * 
     */
    private String scanDnsRecordId;
    /**
     * @return A `scanIpIds` block as defined below.
     * 
     */
    private List<String> scanIpIds;
    /**
     * @return The TCP Single Client Access Name (SCAN) port. The default port is 1521.
     * 
     */
    private Integer scanListenerPortTcp;
    /**
     * @return The TCPS Single Client Access Name (SCAN) port. The default port is 2484.
     * 
     */
    private Integer scanListenerPortTcpSsl;
    /**
     * @return The model name of the Exadata hardware running the Cloud VM Cluster.
     * 
     */
    private String shape;
    /**
     * @return If true, sparse disk group is configured for the Cloud VM Cluster. If false, sparse disk group is not created.
     * 
     */
    private Boolean sparseDiskgroupEnabled;
    /**
     * @return The public key portion of one or more key pairs used for SSH access to the Cloud VM Cluster.
     * 
     */
    private List<String> sshPublicKeys;
    /**
     * @return The storage allocation for the disk group, in gigabytes (GB).
     * 
     */
    private Integer storageSizeInGbs;
    /**
     * @return The ID of the Azure Resource Manager subnet resource.
     * 
     */
    private String subnetId;
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the subnet associated with the Cloud VM Cluster.
     * 
     */
    private String subnetOcid;
    /**
     * @return Operating system version of the image.
     * 
     */
    private String systemVersion;
    /**
     * @return A mapping of tags assigned to the Cloud VM Cluster.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The date and time that the Cloud VM Cluster was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The time zone of the Cloud VM Cluster. For details, see [Exadata Infrastructure Time Zones](https://docs.oracle.com/en-us/iaas/base-database/doc/manage-time-zone.html).
     * 
     */
    private String timeZone;
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the virtual IP (VIP) addresses associated with the Cloud VM Cluster. The Cluster Ready Services (CRS) creates and maintains one VIP address for each node in the Exadata Cloud Service instance to enable failover. If one node fails, the VIP is reassigned to another active node in the Cluster.
     * 
     */
    private List<String> vipOds;
    /**
     * @return The ID to an Azure Resource Manager Virtual Network resource.
     * 
     */
    private String virtualNetworkId;
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the zone the Cloud VM Cluster is associated with.
     * 
     */
    private String zoneId;

    private GetCloudVmClusterResult() {}
    /**
     * @return Client OCI backup subnet CIDR, default is `192.168.252.0/22`.
     * 
     */
    public String backupSubnetCidr() {
        return this.backupSubnetCidr;
    }
    /**
     * @return The Cloud Exadata Infrastructure ID.
     * 
     */
    public String cloudExadataInfrastructureId() {
        return this.cloudExadataInfrastructureId;
    }
    /**
     * @return The cluster name for Cloud VM Cluster.
     * 
     */
    public String clusterName() {
        return this.clusterName;
    }
    /**
     * @return The OCID of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The compute model of the Exadata Infrastructure.
     * 
     */
    public String computeModel() {
        return this.computeModel;
    }
    /**
     * @return A `computeNodes` block as defined below.
     * 
     */
    public List<String> computeNodes() {
        return this.computeNodes;
    }
    /**
     * @return The number of CPU cores enabled on the Cloud VM Cluster.
     * 
     */
    public Integer cpuCoreCount() {
        return this.cpuCoreCount;
    }
    /**
     * @return A `dataCollectionOptions` block as defined below.
     * 
     */
    public List<GetCloudVmClusterDataCollectionOption> dataCollectionOptions() {
        return this.dataCollectionOptions;
    }
    /**
     * @return The percentage assigned to DATA storage (user data and database files). The remaining percentage is assigned to RECO storage (database redo logs, archive logs, and recovery manager backups). Accepted values are `35`, `40`, `60`, and 80. The default is `80` percent assigned to DATA storage. See [Storage Configuration](https://docs.oracle.com/en-us/iaas/exadatacloud/index.html#Exadata) in the Exadata documentation for details on the impact of the configuration settings on storage.
     * 
     */
    public Integer dataStoragePercentage() {
        return this.dataStoragePercentage;
    }
    /**
     * @return The data disk group size to be allocated in TBs.
     * 
     */
    public Double dataStorageSizeInTbs() {
        return this.dataStorageSizeInTbs;
    }
    /**
     * @return The local node storage to be allocated in GBs.
     * 
     */
    public Integer dbNodeStorageSizeInGbs() {
        return this.dbNodeStorageSizeInGbs;
    }
    /**
     * @return A `dbServers` block as defined below.
     * 
     */
    public List<String> dbServers() {
        return this.dbServers;
    }
    /**
     * @return The type of redundancy configured for the Cloud Vm Cluster. `NORMAL` is 2-way redundancy. `HIGH` is 3-way redundancy.
     * 
     */
    public String diskRedundancy() {
        return this.diskRedundancy;
    }
    /**
     * @return The user-friendly name for the Cloud VM Cluster. The name does not need to be unique.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The domain name for the Cloud VM Cluster.
     * 
     */
    public String domain() {
        return this.domain;
    }
    /**
     * @return A `fileSystemConfiguration` block as defined below.
     * 
     */
    public List<GetCloudVmClusterFileSystemConfiguration> fileSystemConfigurations() {
        return this.fileSystemConfigurations;
    }
    /**
     * @return A valid Oracle Grid Infrastructure (GI) software version.
     * 
     */
    public String giVersion() {
        return this.giVersion;
    }
    /**
     * @return The hostname for the Cloud VM Cluster without suffix.
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return The hostname for the Cloud VM Cluster with suffix.
     * 
     */
    public String hostnameActual() {
        return this.hostnameActual;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A `iormConfigCache` block as defined below.
     * 
     */
    public List<GetCloudVmClusterIormConfigCach> iormConfigCaches() {
        return this.iormConfigCaches;
    }
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the last maintenance update history entry. This value is updated when a maintenance update starts.
     * 
     */
    public String lastUpdateHistoryEntryId() {
        return this.lastUpdateHistoryEntryId;
    }
    /**
     * @return The Oracle license model that applies to the Cloud VM Cluster.
     * 
     */
    public String licenseModel() {
        return this.licenseModel;
    }
    /**
     * @return Additional information about the current `lifecycleState`.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The current state of IORM configuration for the Exadata DB system.
     * 
     */
    public String lifecycleState() {
        return this.lifecycleState;
    }
    /**
     * @return The port number configured for the listener on the Cloud VM Cluster.
     * 
     */
    public Integer listenerPort() {
        return this.listenerPort;
    }
    /**
     * @return If true, database backup on local Exadata storage is configured for the Cloud VM Cluster. If false, database backup on local Exadata storage is not available in the Cloud VM Cluster.
     * 
     */
    public Boolean localBackupEnabled() {
        return this.localBackupEnabled;
    }
    /**
     * @return The Azure Region where the Cloud VM Cluster exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The memory to be allocated in GBs.
     * 
     */
    public Integer memorySizeInGbs() {
        return this.memorySizeInGbs;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The number of nodes in the Cloud VM Cluster.
     * 
     */
    public Integer nodeCount() {
        return this.nodeCount;
    }
    /**
     * @return The list of [OCIDs](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) for the network security groups (NSGs) to which this resource belongs. Setting this to an empty list removes all resources from all NSGs. For more information about NSGs, see [Security Rules](https://docs.oracle.com/en-us/iaas/Content/Network/Concepts/securityrules.htm). NsgIds restrictions:
     * * A network security group (NSG) is optional for Autonomous Databases with private access. The nsgIds list can be empty.
     * 
     */
    public String nsgUrl() {
        return this.nsgUrl;
    }
    /**
     * @return The URL of the resource in the OCI console.
     * 
     */
    public String ociUrl() {
        return this.ociUrl;
    }
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the Cloud VM Cluster.
     * 
     */
    public String ocid() {
        return this.ocid;
    }
    /**
     * @return The number of OCPU cores to enable on the Cloud VM Cluster. Only 1 decimal place is allowed for the fractional part.
     * 
     */
    public Double ocpuCount() {
        return this.ocpuCount;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The FQDN of the DNS record for the SCAN IP addresses that are associated with the Cloud VM Cluster.
     * 
     */
    public String scanDnsName() {
        return this.scanDnsName;
    }
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the DNS record for the SCAN IP addresses that are associated with the Cloud VM Cluster.
     * 
     */
    public String scanDnsRecordId() {
        return this.scanDnsRecordId;
    }
    /**
     * @return A `scanIpIds` block as defined below.
     * 
     */
    public List<String> scanIpIds() {
        return this.scanIpIds;
    }
    /**
     * @return The TCP Single Client Access Name (SCAN) port. The default port is 1521.
     * 
     */
    public Integer scanListenerPortTcp() {
        return this.scanListenerPortTcp;
    }
    /**
     * @return The TCPS Single Client Access Name (SCAN) port. The default port is 2484.
     * 
     */
    public Integer scanListenerPortTcpSsl() {
        return this.scanListenerPortTcpSsl;
    }
    /**
     * @return The model name of the Exadata hardware running the Cloud VM Cluster.
     * 
     */
    public String shape() {
        return this.shape;
    }
    /**
     * @return If true, sparse disk group is configured for the Cloud VM Cluster. If false, sparse disk group is not created.
     * 
     */
    public Boolean sparseDiskgroupEnabled() {
        return this.sparseDiskgroupEnabled;
    }
    /**
     * @return The public key portion of one or more key pairs used for SSH access to the Cloud VM Cluster.
     * 
     */
    public List<String> sshPublicKeys() {
        return this.sshPublicKeys;
    }
    /**
     * @return The storage allocation for the disk group, in gigabytes (GB).
     * 
     */
    public Integer storageSizeInGbs() {
        return this.storageSizeInGbs;
    }
    /**
     * @return The ID of the Azure Resource Manager subnet resource.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the subnet associated with the Cloud VM Cluster.
     * 
     */
    public String subnetOcid() {
        return this.subnetOcid;
    }
    /**
     * @return Operating system version of the image.
     * 
     */
    public String systemVersion() {
        return this.systemVersion;
    }
    /**
     * @return A mapping of tags assigned to the Cloud VM Cluster.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The date and time that the Cloud VM Cluster was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time zone of the Cloud VM Cluster. For details, see [Exadata Infrastructure Time Zones](https://docs.oracle.com/en-us/iaas/base-database/doc/manage-time-zone.html).
     * 
     */
    public String timeZone() {
        return this.timeZone;
    }
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the virtual IP (VIP) addresses associated with the Cloud VM Cluster. The Cluster Ready Services (CRS) creates and maintains one VIP address for each node in the Exadata Cloud Service instance to enable failover. If one node fails, the VIP is reassigned to another active node in the Cluster.
     * 
     */
    public List<String> vipOds() {
        return this.vipOds;
    }
    /**
     * @return The ID to an Azure Resource Manager Virtual Network resource.
     * 
     */
    public String virtualNetworkId() {
        return this.virtualNetworkId;
    }
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the zone the Cloud VM Cluster is associated with.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCloudVmClusterResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backupSubnetCidr;
        private String cloudExadataInfrastructureId;
        private String clusterName;
        private String compartmentId;
        private String computeModel;
        private List<String> computeNodes;
        private Integer cpuCoreCount;
        private List<GetCloudVmClusterDataCollectionOption> dataCollectionOptions;
        private Integer dataStoragePercentage;
        private Double dataStorageSizeInTbs;
        private Integer dbNodeStorageSizeInGbs;
        private List<String> dbServers;
        private String diskRedundancy;
        private String displayName;
        private String domain;
        private List<GetCloudVmClusterFileSystemConfiguration> fileSystemConfigurations;
        private String giVersion;
        private String hostname;
        private String hostnameActual;
        private String id;
        private List<GetCloudVmClusterIormConfigCach> iormConfigCaches;
        private String lastUpdateHistoryEntryId;
        private String licenseModel;
        private String lifecycleDetails;
        private String lifecycleState;
        private Integer listenerPort;
        private Boolean localBackupEnabled;
        private String location;
        private Integer memorySizeInGbs;
        private String name;
        private Integer nodeCount;
        private String nsgUrl;
        private String ociUrl;
        private String ocid;
        private Double ocpuCount;
        private String resourceGroupName;
        private String scanDnsName;
        private String scanDnsRecordId;
        private List<String> scanIpIds;
        private Integer scanListenerPortTcp;
        private Integer scanListenerPortTcpSsl;
        private String shape;
        private Boolean sparseDiskgroupEnabled;
        private List<String> sshPublicKeys;
        private Integer storageSizeInGbs;
        private String subnetId;
        private String subnetOcid;
        private String systemVersion;
        private Map<String,String> tags;
        private String timeCreated;
        private String timeZone;
        private List<String> vipOds;
        private String virtualNetworkId;
        private String zoneId;
        public Builder() {}
        public Builder(GetCloudVmClusterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupSubnetCidr = defaults.backupSubnetCidr;
    	      this.cloudExadataInfrastructureId = defaults.cloudExadataInfrastructureId;
    	      this.clusterName = defaults.clusterName;
    	      this.compartmentId = defaults.compartmentId;
    	      this.computeModel = defaults.computeModel;
    	      this.computeNodes = defaults.computeNodes;
    	      this.cpuCoreCount = defaults.cpuCoreCount;
    	      this.dataCollectionOptions = defaults.dataCollectionOptions;
    	      this.dataStoragePercentage = defaults.dataStoragePercentage;
    	      this.dataStorageSizeInTbs = defaults.dataStorageSizeInTbs;
    	      this.dbNodeStorageSizeInGbs = defaults.dbNodeStorageSizeInGbs;
    	      this.dbServers = defaults.dbServers;
    	      this.diskRedundancy = defaults.diskRedundancy;
    	      this.displayName = defaults.displayName;
    	      this.domain = defaults.domain;
    	      this.fileSystemConfigurations = defaults.fileSystemConfigurations;
    	      this.giVersion = defaults.giVersion;
    	      this.hostname = defaults.hostname;
    	      this.hostnameActual = defaults.hostnameActual;
    	      this.id = defaults.id;
    	      this.iormConfigCaches = defaults.iormConfigCaches;
    	      this.lastUpdateHistoryEntryId = defaults.lastUpdateHistoryEntryId;
    	      this.licenseModel = defaults.licenseModel;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.lifecycleState = defaults.lifecycleState;
    	      this.listenerPort = defaults.listenerPort;
    	      this.localBackupEnabled = defaults.localBackupEnabled;
    	      this.location = defaults.location;
    	      this.memorySizeInGbs = defaults.memorySizeInGbs;
    	      this.name = defaults.name;
    	      this.nodeCount = defaults.nodeCount;
    	      this.nsgUrl = defaults.nsgUrl;
    	      this.ociUrl = defaults.ociUrl;
    	      this.ocid = defaults.ocid;
    	      this.ocpuCount = defaults.ocpuCount;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.scanDnsName = defaults.scanDnsName;
    	      this.scanDnsRecordId = defaults.scanDnsRecordId;
    	      this.scanIpIds = defaults.scanIpIds;
    	      this.scanListenerPortTcp = defaults.scanListenerPortTcp;
    	      this.scanListenerPortTcpSsl = defaults.scanListenerPortTcpSsl;
    	      this.shape = defaults.shape;
    	      this.sparseDiskgroupEnabled = defaults.sparseDiskgroupEnabled;
    	      this.sshPublicKeys = defaults.sshPublicKeys;
    	      this.storageSizeInGbs = defaults.storageSizeInGbs;
    	      this.subnetId = defaults.subnetId;
    	      this.subnetOcid = defaults.subnetOcid;
    	      this.systemVersion = defaults.systemVersion;
    	      this.tags = defaults.tags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeZone = defaults.timeZone;
    	      this.vipOds = defaults.vipOds;
    	      this.virtualNetworkId = defaults.virtualNetworkId;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder backupSubnetCidr(String backupSubnetCidr) {
            if (backupSubnetCidr == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "backupSubnetCidr");
            }
            this.backupSubnetCidr = backupSubnetCidr;
            return this;
        }
        @CustomType.Setter
        public Builder cloudExadataInfrastructureId(String cloudExadataInfrastructureId) {
            if (cloudExadataInfrastructureId == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "cloudExadataInfrastructureId");
            }
            this.cloudExadataInfrastructureId = cloudExadataInfrastructureId;
            return this;
        }
        @CustomType.Setter
        public Builder clusterName(String clusterName) {
            if (clusterName == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "clusterName");
            }
            this.clusterName = clusterName;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder computeModel(String computeModel) {
            if (computeModel == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "computeModel");
            }
            this.computeModel = computeModel;
            return this;
        }
        @CustomType.Setter
        public Builder computeNodes(List<String> computeNodes) {
            if (computeNodes == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "computeNodes");
            }
            this.computeNodes = computeNodes;
            return this;
        }
        public Builder computeNodes(String... computeNodes) {
            return computeNodes(List.of(computeNodes));
        }
        @CustomType.Setter
        public Builder cpuCoreCount(Integer cpuCoreCount) {
            if (cpuCoreCount == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "cpuCoreCount");
            }
            this.cpuCoreCount = cpuCoreCount;
            return this;
        }
        @CustomType.Setter
        public Builder dataCollectionOptions(List<GetCloudVmClusterDataCollectionOption> dataCollectionOptions) {
            if (dataCollectionOptions == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "dataCollectionOptions");
            }
            this.dataCollectionOptions = dataCollectionOptions;
            return this;
        }
        public Builder dataCollectionOptions(GetCloudVmClusterDataCollectionOption... dataCollectionOptions) {
            return dataCollectionOptions(List.of(dataCollectionOptions));
        }
        @CustomType.Setter
        public Builder dataStoragePercentage(Integer dataStoragePercentage) {
            if (dataStoragePercentage == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "dataStoragePercentage");
            }
            this.dataStoragePercentage = dataStoragePercentage;
            return this;
        }
        @CustomType.Setter
        public Builder dataStorageSizeInTbs(Double dataStorageSizeInTbs) {
            if (dataStorageSizeInTbs == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "dataStorageSizeInTbs");
            }
            this.dataStorageSizeInTbs = dataStorageSizeInTbs;
            return this;
        }
        @CustomType.Setter
        public Builder dbNodeStorageSizeInGbs(Integer dbNodeStorageSizeInGbs) {
            if (dbNodeStorageSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "dbNodeStorageSizeInGbs");
            }
            this.dbNodeStorageSizeInGbs = dbNodeStorageSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder dbServers(List<String> dbServers) {
            if (dbServers == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "dbServers");
            }
            this.dbServers = dbServers;
            return this;
        }
        public Builder dbServers(String... dbServers) {
            return dbServers(List.of(dbServers));
        }
        @CustomType.Setter
        public Builder diskRedundancy(String diskRedundancy) {
            if (diskRedundancy == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "diskRedundancy");
            }
            this.diskRedundancy = diskRedundancy;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder fileSystemConfigurations(List<GetCloudVmClusterFileSystemConfiguration> fileSystemConfigurations) {
            if (fileSystemConfigurations == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "fileSystemConfigurations");
            }
            this.fileSystemConfigurations = fileSystemConfigurations;
            return this;
        }
        public Builder fileSystemConfigurations(GetCloudVmClusterFileSystemConfiguration... fileSystemConfigurations) {
            return fileSystemConfigurations(List.of(fileSystemConfigurations));
        }
        @CustomType.Setter
        public Builder giVersion(String giVersion) {
            if (giVersion == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "giVersion");
            }
            this.giVersion = giVersion;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder hostnameActual(String hostnameActual) {
            if (hostnameActual == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "hostnameActual");
            }
            this.hostnameActual = hostnameActual;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder iormConfigCaches(List<GetCloudVmClusterIormConfigCach> iormConfigCaches) {
            if (iormConfigCaches == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "iormConfigCaches");
            }
            this.iormConfigCaches = iormConfigCaches;
            return this;
        }
        public Builder iormConfigCaches(GetCloudVmClusterIormConfigCach... iormConfigCaches) {
            return iormConfigCaches(List.of(iormConfigCaches));
        }
        @CustomType.Setter
        public Builder lastUpdateHistoryEntryId(String lastUpdateHistoryEntryId) {
            if (lastUpdateHistoryEntryId == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "lastUpdateHistoryEntryId");
            }
            this.lastUpdateHistoryEntryId = lastUpdateHistoryEntryId;
            return this;
        }
        @CustomType.Setter
        public Builder licenseModel(String licenseModel) {
            if (licenseModel == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "licenseModel");
            }
            this.licenseModel = licenseModel;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleState(String lifecycleState) {
            if (lifecycleState == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "lifecycleState");
            }
            this.lifecycleState = lifecycleState;
            return this;
        }
        @CustomType.Setter
        public Builder listenerPort(Integer listenerPort) {
            if (listenerPort == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "listenerPort");
            }
            this.listenerPort = listenerPort;
            return this;
        }
        @CustomType.Setter
        public Builder localBackupEnabled(Boolean localBackupEnabled) {
            if (localBackupEnabled == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "localBackupEnabled");
            }
            this.localBackupEnabled = localBackupEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder memorySizeInGbs(Integer memorySizeInGbs) {
            if (memorySizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "memorySizeInGbs");
            }
            this.memorySizeInGbs = memorySizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nodeCount(Integer nodeCount) {
            if (nodeCount == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "nodeCount");
            }
            this.nodeCount = nodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder nsgUrl(String nsgUrl) {
            if (nsgUrl == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "nsgUrl");
            }
            this.nsgUrl = nsgUrl;
            return this;
        }
        @CustomType.Setter
        public Builder ociUrl(String ociUrl) {
            if (ociUrl == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "ociUrl");
            }
            this.ociUrl = ociUrl;
            return this;
        }
        @CustomType.Setter
        public Builder ocid(String ocid) {
            if (ocid == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "ocid");
            }
            this.ocid = ocid;
            return this;
        }
        @CustomType.Setter
        public Builder ocpuCount(Double ocpuCount) {
            if (ocpuCount == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "ocpuCount");
            }
            this.ocpuCount = ocpuCount;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder scanDnsName(String scanDnsName) {
            if (scanDnsName == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "scanDnsName");
            }
            this.scanDnsName = scanDnsName;
            return this;
        }
        @CustomType.Setter
        public Builder scanDnsRecordId(String scanDnsRecordId) {
            if (scanDnsRecordId == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "scanDnsRecordId");
            }
            this.scanDnsRecordId = scanDnsRecordId;
            return this;
        }
        @CustomType.Setter
        public Builder scanIpIds(List<String> scanIpIds) {
            if (scanIpIds == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "scanIpIds");
            }
            this.scanIpIds = scanIpIds;
            return this;
        }
        public Builder scanIpIds(String... scanIpIds) {
            return scanIpIds(List.of(scanIpIds));
        }
        @CustomType.Setter
        public Builder scanListenerPortTcp(Integer scanListenerPortTcp) {
            if (scanListenerPortTcp == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "scanListenerPortTcp");
            }
            this.scanListenerPortTcp = scanListenerPortTcp;
            return this;
        }
        @CustomType.Setter
        public Builder scanListenerPortTcpSsl(Integer scanListenerPortTcpSsl) {
            if (scanListenerPortTcpSsl == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "scanListenerPortTcpSsl");
            }
            this.scanListenerPortTcpSsl = scanListenerPortTcpSsl;
            return this;
        }
        @CustomType.Setter
        public Builder shape(String shape) {
            if (shape == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "shape");
            }
            this.shape = shape;
            return this;
        }
        @CustomType.Setter
        public Builder sparseDiskgroupEnabled(Boolean sparseDiskgroupEnabled) {
            if (sparseDiskgroupEnabled == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "sparseDiskgroupEnabled");
            }
            this.sparseDiskgroupEnabled = sparseDiskgroupEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder sshPublicKeys(List<String> sshPublicKeys) {
            if (sshPublicKeys == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "sshPublicKeys");
            }
            this.sshPublicKeys = sshPublicKeys;
            return this;
        }
        public Builder sshPublicKeys(String... sshPublicKeys) {
            return sshPublicKeys(List.of(sshPublicKeys));
        }
        @CustomType.Setter
        public Builder storageSizeInGbs(Integer storageSizeInGbs) {
            if (storageSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "storageSizeInGbs");
            }
            this.storageSizeInGbs = storageSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder subnetOcid(String subnetOcid) {
            if (subnetOcid == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "subnetOcid");
            }
            this.subnetOcid = subnetOcid;
            return this;
        }
        @CustomType.Setter
        public Builder systemVersion(String systemVersion) {
            if (systemVersion == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "systemVersion");
            }
            this.systemVersion = systemVersion;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(String timeZone) {
            if (timeZone == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "timeZone");
            }
            this.timeZone = timeZone;
            return this;
        }
        @CustomType.Setter
        public Builder vipOds(List<String> vipOds) {
            if (vipOds == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "vipOds");
            }
            this.vipOds = vipOds;
            return this;
        }
        public Builder vipOds(String... vipOds) {
            return vipOds(List.of(vipOds));
        }
        @CustomType.Setter
        public Builder virtualNetworkId(String virtualNetworkId) {
            if (virtualNetworkId == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "virtualNetworkId");
            }
            this.virtualNetworkId = virtualNetworkId;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClusterResult", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetCloudVmClusterResult build() {
            final var _resultValue = new GetCloudVmClusterResult();
            _resultValue.backupSubnetCidr = backupSubnetCidr;
            _resultValue.cloudExadataInfrastructureId = cloudExadataInfrastructureId;
            _resultValue.clusterName = clusterName;
            _resultValue.compartmentId = compartmentId;
            _resultValue.computeModel = computeModel;
            _resultValue.computeNodes = computeNodes;
            _resultValue.cpuCoreCount = cpuCoreCount;
            _resultValue.dataCollectionOptions = dataCollectionOptions;
            _resultValue.dataStoragePercentage = dataStoragePercentage;
            _resultValue.dataStorageSizeInTbs = dataStorageSizeInTbs;
            _resultValue.dbNodeStorageSizeInGbs = dbNodeStorageSizeInGbs;
            _resultValue.dbServers = dbServers;
            _resultValue.diskRedundancy = diskRedundancy;
            _resultValue.displayName = displayName;
            _resultValue.domain = domain;
            _resultValue.fileSystemConfigurations = fileSystemConfigurations;
            _resultValue.giVersion = giVersion;
            _resultValue.hostname = hostname;
            _resultValue.hostnameActual = hostnameActual;
            _resultValue.id = id;
            _resultValue.iormConfigCaches = iormConfigCaches;
            _resultValue.lastUpdateHistoryEntryId = lastUpdateHistoryEntryId;
            _resultValue.licenseModel = licenseModel;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.lifecycleState = lifecycleState;
            _resultValue.listenerPort = listenerPort;
            _resultValue.localBackupEnabled = localBackupEnabled;
            _resultValue.location = location;
            _resultValue.memorySizeInGbs = memorySizeInGbs;
            _resultValue.name = name;
            _resultValue.nodeCount = nodeCount;
            _resultValue.nsgUrl = nsgUrl;
            _resultValue.ociUrl = ociUrl;
            _resultValue.ocid = ocid;
            _resultValue.ocpuCount = ocpuCount;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.scanDnsName = scanDnsName;
            _resultValue.scanDnsRecordId = scanDnsRecordId;
            _resultValue.scanIpIds = scanIpIds;
            _resultValue.scanListenerPortTcp = scanListenerPortTcp;
            _resultValue.scanListenerPortTcpSsl = scanListenerPortTcpSsl;
            _resultValue.shape = shape;
            _resultValue.sparseDiskgroupEnabled = sparseDiskgroupEnabled;
            _resultValue.sshPublicKeys = sshPublicKeys;
            _resultValue.storageSizeInGbs = storageSizeInGbs;
            _resultValue.subnetId = subnetId;
            _resultValue.subnetOcid = subnetOcid;
            _resultValue.systemVersion = systemVersion;
            _resultValue.tags = tags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeZone = timeZone;
            _resultValue.vipOds = vipOds;
            _resultValue.virtualNetworkId = virtualNetworkId;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
