// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.apimanagement;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class ProductApiArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProductApiArgs Empty = new ProductApiArgs();

    /**
     * The name of the API Management Service. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="apiManagementName", required=true)
    private Output<String> apiManagementName;

    /**
     * @return The name of the API Management Service. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> apiManagementName() {
        return this.apiManagementName;
    }

    /**
     * The Name of the API Management API within the API Management Service. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="apiName", required=true)
    private Output<String> apiName;

    /**
     * @return The Name of the API Management API within the API Management Service. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> apiName() {
        return this.apiName;
    }

    /**
     * The ID of the API Management Product within the API Management Service. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="productId", required=true)
    private Output<String> productId;

    /**
     * @return The ID of the API Management Product within the API Management Service. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> productId() {
        return this.productId;
    }

    /**
     * The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    private ProductApiArgs() {}

    private ProductApiArgs(ProductApiArgs $) {
        this.apiManagementName = $.apiManagementName;
        this.apiName = $.apiName;
        this.productId = $.productId;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProductApiArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProductApiArgs $;

        public Builder() {
            $ = new ProductApiArgs();
        }

        public Builder(ProductApiArgs defaults) {
            $ = new ProductApiArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiManagementName The name of the API Management Service. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder apiManagementName(Output<String> apiManagementName) {
            $.apiManagementName = apiManagementName;
            return this;
        }

        /**
         * @param apiManagementName The name of the API Management Service. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder apiManagementName(String apiManagementName) {
            return apiManagementName(Output.of(apiManagementName));
        }

        /**
         * @param apiName The Name of the API Management API within the API Management Service. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder apiName(Output<String> apiName) {
            $.apiName = apiName;
            return this;
        }

        /**
         * @param apiName The Name of the API Management API within the API Management Service. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder apiName(String apiName) {
            return apiName(Output.of(apiName));
        }

        /**
         * @param productId The ID of the API Management Product within the API Management Service. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder productId(Output<String> productId) {
            $.productId = productId;
            return this;
        }

        /**
         * @param productId The ID of the API Management Product within the API Management Service. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder productId(String productId) {
            return productId(Output.of(productId));
        }

        /**
         * @param resourceGroupName The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public ProductApiArgs build() {
            if ($.apiManagementName == null) {
                throw new MissingRequiredPropertyException("ProductApiArgs", "apiManagementName");
            }
            if ($.apiName == null) {
                throw new MissingRequiredPropertyException("ProductApiArgs", "apiName");
            }
            if ($.productId == null) {
                throw new MissingRequiredPropertyException("ProductApiArgs", "productId");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("ProductApiArgs", "resourceGroupName");
            }
            return $;
        }
    }

}
