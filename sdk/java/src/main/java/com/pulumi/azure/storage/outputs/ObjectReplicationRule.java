// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.storage.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ObjectReplicationRule {
    /**
     * @return The time after which the Block Blobs created will be copies to the destination. Possible values are `OnlyNewObjects`, `Everything` and time in RFC3339 format: `2006-01-02T15:04:00Z`.
     * 
     */
    private final @Nullable String copyBlobsCreatedAfter;
    /**
     * @return The destination storage container name. Changing this forces a new Storage Object Replication to be created.
     * 
     */
    private final String destinationContainerName;
    /**
     * @return Specifies a list of filters prefixes, the blobs whose names begin with which will be replicated.
     * 
     */
    private final @Nullable List<String> filterOutBlobsWithPrefixes;
    private final @Nullable String name;
    /**
     * @return The source storage container name. Changing this forces a new Storage Object Replication to be created.
     * 
     */
    private final String sourceContainerName;

    @CustomType.Constructor
    private ObjectReplicationRule(
        @CustomType.Parameter("copyBlobsCreatedAfter") @Nullable String copyBlobsCreatedAfter,
        @CustomType.Parameter("destinationContainerName") String destinationContainerName,
        @CustomType.Parameter("filterOutBlobsWithPrefixes") @Nullable List<String> filterOutBlobsWithPrefixes,
        @CustomType.Parameter("name") @Nullable String name,
        @CustomType.Parameter("sourceContainerName") String sourceContainerName) {
        this.copyBlobsCreatedAfter = copyBlobsCreatedAfter;
        this.destinationContainerName = destinationContainerName;
        this.filterOutBlobsWithPrefixes = filterOutBlobsWithPrefixes;
        this.name = name;
        this.sourceContainerName = sourceContainerName;
    }

    /**
     * @return The time after which the Block Blobs created will be copies to the destination. Possible values are `OnlyNewObjects`, `Everything` and time in RFC3339 format: `2006-01-02T15:04:00Z`.
     * 
     */
    public Optional<String> copyBlobsCreatedAfter() {
        return Optional.ofNullable(this.copyBlobsCreatedAfter);
    }
    /**
     * @return The destination storage container name. Changing this forces a new Storage Object Replication to be created.
     * 
     */
    public String destinationContainerName() {
        return this.destinationContainerName;
    }
    /**
     * @return Specifies a list of filters prefixes, the blobs whose names begin with which will be replicated.
     * 
     */
    public List<String> filterOutBlobsWithPrefixes() {
        return this.filterOutBlobsWithPrefixes == null ? List.of() : this.filterOutBlobsWithPrefixes;
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The source storage container name. Changing this forces a new Storage Object Replication to be created.
     * 
     */
    public String sourceContainerName() {
        return this.sourceContainerName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ObjectReplicationRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String copyBlobsCreatedAfter;
        private String destinationContainerName;
        private @Nullable List<String> filterOutBlobsWithPrefixes;
        private @Nullable String name;
        private String sourceContainerName;

        public Builder() {
    	      // Empty
        }

        public Builder(ObjectReplicationRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.copyBlobsCreatedAfter = defaults.copyBlobsCreatedAfter;
    	      this.destinationContainerName = defaults.destinationContainerName;
    	      this.filterOutBlobsWithPrefixes = defaults.filterOutBlobsWithPrefixes;
    	      this.name = defaults.name;
    	      this.sourceContainerName = defaults.sourceContainerName;
        }

        public Builder copyBlobsCreatedAfter(@Nullable String copyBlobsCreatedAfter) {
            this.copyBlobsCreatedAfter = copyBlobsCreatedAfter;
            return this;
        }
        public Builder destinationContainerName(String destinationContainerName) {
            this.destinationContainerName = Objects.requireNonNull(destinationContainerName);
            return this;
        }
        public Builder filterOutBlobsWithPrefixes(@Nullable List<String> filterOutBlobsWithPrefixes) {
            this.filterOutBlobsWithPrefixes = filterOutBlobsWithPrefixes;
            return this;
        }
        public Builder filterOutBlobsWithPrefixes(String... filterOutBlobsWithPrefixes) {
            return filterOutBlobsWithPrefixes(List.of(filterOutBlobsWithPrefixes));
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder sourceContainerName(String sourceContainerName) {
            this.sourceContainerName = Objects.requireNonNull(sourceContainerName);
            return this;
        }        public ObjectReplicationRule build() {
            return new ObjectReplicationRule(copyBlobsCreatedAfter, destinationContainerName, filterOutBlobsWithPrefixes, name, sourceContainerName);
        }
    }
}
