// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.storage.outputs;

import com.pulumi.azure.storage.outputs.AccountNetworkRulesPrivateLinkAccess;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class AccountNetworkRules {
    /**
     * @return Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Valid options are any combination of `Logging`, `Metrics`, `AzureServices`, or `None`.
     * 
     */
    private @Nullable List<String> bypasses;
    /**
     * @return Specifies the default action of allow or deny when no other rules match. Valid options are `Deny` or `Allow`.
     * 
     */
    private String defaultAction;
    /**
     * @return List of public IP or IP ranges in CIDR Format. Only IPv4 addresses are allowed. /31 CIDRs, /32 CIDRs, and Private IP address ranges (as defined in [RFC 1918](https://tools.ietf.org/html/rfc1918#section-3)), are not allowed.
     * 
     */
    private @Nullable List<String> ipRules;
    /**
     * @return One or more `private_link_access` block as defined below.
     * 
     * &gt; **Note:** If specifying `network_rules`, one of either `ip_rules` or `virtual_network_subnet_ids` must be specified and `default_action` must be set to `Deny`.
     * 
     * &gt; **NOTE:** Network Rules can be defined either directly on the `azure.storage.Account` resource, or using the `azure.storage.AccountNetworkRules` resource - but the two cannot be used together. If both are used against the same Storage Account, spurious changes will occur. When managing Network Rules using this resource, to change from a `default_action` of `Deny` to `Allow` requires defining, rather than removing, the block.
     * 
     * &gt; **Note:** The prefix of `ip_rules` must be between 0 and 30 and only supports public IP addresses.
     * 
     * &gt; **Note:** [More information on Validation is available here](https://docs.microsoft.com/en-gb/azure/storage/blobs/storage-custom-domain-name)
     * 
     */
    private @Nullable List<AccountNetworkRulesPrivateLinkAccess> privateLinkAccesses;
    /**
     * @return A list of resource ids for subnets.
     * 
     */
    private @Nullable List<String> virtualNetworkSubnetIds;

    private AccountNetworkRules() {}
    /**
     * @return Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Valid options are any combination of `Logging`, `Metrics`, `AzureServices`, or `None`.
     * 
     */
    public List<String> bypasses() {
        return this.bypasses == null ? List.of() : this.bypasses;
    }
    /**
     * @return Specifies the default action of allow or deny when no other rules match. Valid options are `Deny` or `Allow`.
     * 
     */
    public String defaultAction() {
        return this.defaultAction;
    }
    /**
     * @return List of public IP or IP ranges in CIDR Format. Only IPv4 addresses are allowed. /31 CIDRs, /32 CIDRs, and Private IP address ranges (as defined in [RFC 1918](https://tools.ietf.org/html/rfc1918#section-3)), are not allowed.
     * 
     */
    public List<String> ipRules() {
        return this.ipRules == null ? List.of() : this.ipRules;
    }
    /**
     * @return One or more `private_link_access` block as defined below.
     * 
     * &gt; **Note:** If specifying `network_rules`, one of either `ip_rules` or `virtual_network_subnet_ids` must be specified and `default_action` must be set to `Deny`.
     * 
     * &gt; **NOTE:** Network Rules can be defined either directly on the `azure.storage.Account` resource, or using the `azure.storage.AccountNetworkRules` resource - but the two cannot be used together. If both are used against the same Storage Account, spurious changes will occur. When managing Network Rules using this resource, to change from a `default_action` of `Deny` to `Allow` requires defining, rather than removing, the block.
     * 
     * &gt; **Note:** The prefix of `ip_rules` must be between 0 and 30 and only supports public IP addresses.
     * 
     * &gt; **Note:** [More information on Validation is available here](https://docs.microsoft.com/en-gb/azure/storage/blobs/storage-custom-domain-name)
     * 
     */
    public List<AccountNetworkRulesPrivateLinkAccess> privateLinkAccesses() {
        return this.privateLinkAccesses == null ? List.of() : this.privateLinkAccesses;
    }
    /**
     * @return A list of resource ids for subnets.
     * 
     */
    public List<String> virtualNetworkSubnetIds() {
        return this.virtualNetworkSubnetIds == null ? List.of() : this.virtualNetworkSubnetIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccountNetworkRules defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> bypasses;
        private String defaultAction;
        private @Nullable List<String> ipRules;
        private @Nullable List<AccountNetworkRulesPrivateLinkAccess> privateLinkAccesses;
        private @Nullable List<String> virtualNetworkSubnetIds;
        public Builder() {}
        public Builder(AccountNetworkRules defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bypasses = defaults.bypasses;
    	      this.defaultAction = defaults.defaultAction;
    	      this.ipRules = defaults.ipRules;
    	      this.privateLinkAccesses = defaults.privateLinkAccesses;
    	      this.virtualNetworkSubnetIds = defaults.virtualNetworkSubnetIds;
        }

        @CustomType.Setter
        public Builder bypasses(@Nullable List<String> bypasses) {

            this.bypasses = bypasses;
            return this;
        }
        public Builder bypasses(String... bypasses) {
            return bypasses(List.of(bypasses));
        }
        @CustomType.Setter
        public Builder defaultAction(String defaultAction) {
            if (defaultAction == null) {
              throw new MissingRequiredPropertyException("AccountNetworkRules", "defaultAction");
            }
            this.defaultAction = defaultAction;
            return this;
        }
        @CustomType.Setter
        public Builder ipRules(@Nullable List<String> ipRules) {

            this.ipRules = ipRules;
            return this;
        }
        public Builder ipRules(String... ipRules) {
            return ipRules(List.of(ipRules));
        }
        @CustomType.Setter
        public Builder privateLinkAccesses(@Nullable List<AccountNetworkRulesPrivateLinkAccess> privateLinkAccesses) {

            this.privateLinkAccesses = privateLinkAccesses;
            return this;
        }
        public Builder privateLinkAccesses(AccountNetworkRulesPrivateLinkAccess... privateLinkAccesses) {
            return privateLinkAccesses(List.of(privateLinkAccesses));
        }
        @CustomType.Setter
        public Builder virtualNetworkSubnetIds(@Nullable List<String> virtualNetworkSubnetIds) {

            this.virtualNetworkSubnetIds = virtualNetworkSubnetIds;
            return this;
        }
        public Builder virtualNetworkSubnetIds(String... virtualNetworkSubnetIds) {
            return virtualNetworkSubnetIds(List.of(virtualNetworkSubnetIds));
        }
        public AccountNetworkRules build() {
            final var _resultValue = new AccountNetworkRules();
            _resultValue.bypasses = bypasses;
            _resultValue.defaultAction = defaultAction;
            _resultValue.ipRules = ipRules;
            _resultValue.privateLinkAccesses = privateLinkAccesses;
            _resultValue.virtualNetworkSubnetIds = virtualNetworkSubnetIds;
            return _resultValue;
        }
    }
}
