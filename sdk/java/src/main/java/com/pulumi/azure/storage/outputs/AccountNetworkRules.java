// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.storage.outputs;

import com.pulumi.azure.storage.outputs.AccountNetworkRulesPrivateLinkAccess;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class AccountNetworkRules {
    /**
     * @return Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Valid options are
     * any combination of `Logging`, `Metrics`, `AzureServices`, or `None`.
     * 
     */
    private final @Nullable List<String> bypasses;
    /**
     * @return Specifies the default action of allow or deny when no other rules match. Valid options are `Deny` or `Allow`.
     * 
     */
    private final String defaultAction;
    /**
     * @return List of public IP or IP ranges in CIDR Format. Only IPv4 addresses are allowed. Private IP address ranges (as defined in [RFC 1918](https://tools.ietf.org/html/rfc1918#section-3)) are not allowed.
     * 
     */
    private final @Nullable List<String> ipRules;
    /**
     * @return One or More `private_link_access` block as defined below.
     * 
     */
    private final @Nullable List<AccountNetworkRulesPrivateLinkAccess> privateLinkAccesses;
    /**
     * @return A list of resource ids for subnets.
     * 
     */
    private final @Nullable List<String> virtualNetworkSubnetIds;

    @CustomType.Constructor
    private AccountNetworkRules(
        @CustomType.Parameter("bypasses") @Nullable List<String> bypasses,
        @CustomType.Parameter("defaultAction") String defaultAction,
        @CustomType.Parameter("ipRules") @Nullable List<String> ipRules,
        @CustomType.Parameter("privateLinkAccesses") @Nullable List<AccountNetworkRulesPrivateLinkAccess> privateLinkAccesses,
        @CustomType.Parameter("virtualNetworkSubnetIds") @Nullable List<String> virtualNetworkSubnetIds) {
        this.bypasses = bypasses;
        this.defaultAction = defaultAction;
        this.ipRules = ipRules;
        this.privateLinkAccesses = privateLinkAccesses;
        this.virtualNetworkSubnetIds = virtualNetworkSubnetIds;
    }

    /**
     * @return Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Valid options are
     * any combination of `Logging`, `Metrics`, `AzureServices`, or `None`.
     * 
     */
    public List<String> bypasses() {
        return this.bypasses == null ? List.of() : this.bypasses;
    }
    /**
     * @return Specifies the default action of allow or deny when no other rules match. Valid options are `Deny` or `Allow`.
     * 
     */
    public String defaultAction() {
        return this.defaultAction;
    }
    /**
     * @return List of public IP or IP ranges in CIDR Format. Only IPv4 addresses are allowed. Private IP address ranges (as defined in [RFC 1918](https://tools.ietf.org/html/rfc1918#section-3)) are not allowed.
     * 
     */
    public List<String> ipRules() {
        return this.ipRules == null ? List.of() : this.ipRules;
    }
    /**
     * @return One or More `private_link_access` block as defined below.
     * 
     */
    public List<AccountNetworkRulesPrivateLinkAccess> privateLinkAccesses() {
        return this.privateLinkAccesses == null ? List.of() : this.privateLinkAccesses;
    }
    /**
     * @return A list of resource ids for subnets.
     * 
     */
    public List<String> virtualNetworkSubnetIds() {
        return this.virtualNetworkSubnetIds == null ? List.of() : this.virtualNetworkSubnetIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccountNetworkRules defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> bypasses;
        private String defaultAction;
        private @Nullable List<String> ipRules;
        private @Nullable List<AccountNetworkRulesPrivateLinkAccess> privateLinkAccesses;
        private @Nullable List<String> virtualNetworkSubnetIds;

        public Builder() {
    	      // Empty
        }

        public Builder(AccountNetworkRules defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bypasses = defaults.bypasses;
    	      this.defaultAction = defaults.defaultAction;
    	      this.ipRules = defaults.ipRules;
    	      this.privateLinkAccesses = defaults.privateLinkAccesses;
    	      this.virtualNetworkSubnetIds = defaults.virtualNetworkSubnetIds;
        }

        public Builder bypasses(@Nullable List<String> bypasses) {
            this.bypasses = bypasses;
            return this;
        }
        public Builder bypasses(String... bypasses) {
            return bypasses(List.of(bypasses));
        }
        public Builder defaultAction(String defaultAction) {
            this.defaultAction = Objects.requireNonNull(defaultAction);
            return this;
        }
        public Builder ipRules(@Nullable List<String> ipRules) {
            this.ipRules = ipRules;
            return this;
        }
        public Builder ipRules(String... ipRules) {
            return ipRules(List.of(ipRules));
        }
        public Builder privateLinkAccesses(@Nullable List<AccountNetworkRulesPrivateLinkAccess> privateLinkAccesses) {
            this.privateLinkAccesses = privateLinkAccesses;
            return this;
        }
        public Builder privateLinkAccesses(AccountNetworkRulesPrivateLinkAccess... privateLinkAccesses) {
            return privateLinkAccesses(List.of(privateLinkAccesses));
        }
        public Builder virtualNetworkSubnetIds(@Nullable List<String> virtualNetworkSubnetIds) {
            this.virtualNetworkSubnetIds = virtualNetworkSubnetIds;
            return this;
        }
        public Builder virtualNetworkSubnetIds(String... virtualNetworkSubnetIds) {
            return virtualNetworkSubnetIds(List.of(virtualNetworkSubnetIds));
        }        public AccountNetworkRules build() {
            return new AccountNetworkRules(bypasses, defaultAction, ipRules, privateLinkAccesses, virtualNetworkSubnetIds);
        }
    }
}
