// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FluxConfigurationKustomizationPostBuildSubstituteFromArgs extends com.pulumi.resources.ResourceArgs {

    public static final FluxConfigurationKustomizationPostBuildSubstituteFromArgs Empty = new FluxConfigurationKustomizationPostBuildSubstituteFromArgs();

    /**
     * Specifies the source kind to hold the variables to be used in substitution. Possible values are `ConfigMap` and `Secret`.
     * 
     */
    @Import(name="kind", required=true)
    private Output<String> kind;

    /**
     * @return Specifies the source kind to hold the variables to be used in substitution. Possible values are `ConfigMap` and `Secret`.
     * 
     */
    public Output<String> kind() {
        return this.kind;
    }

    /**
     * Specifies the name of the ConfigMap/Secret that holds the variables to be used in substitution.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Specifies the name of the ConfigMap/Secret that holds the variables to be used in substitution.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Whether to proceed without ConfigMap/Secret if it is not present. Defaults to `false`.
     * 
     */
    @Import(name="optional")
    private @Nullable Output<Boolean> optional;

    /**
     * @return Whether to proceed without ConfigMap/Secret if it is not present. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> optional() {
        return Optional.ofNullable(this.optional);
    }

    private FluxConfigurationKustomizationPostBuildSubstituteFromArgs() {}

    private FluxConfigurationKustomizationPostBuildSubstituteFromArgs(FluxConfigurationKustomizationPostBuildSubstituteFromArgs $) {
        this.kind = $.kind;
        this.name = $.name;
        this.optional = $.optional;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FluxConfigurationKustomizationPostBuildSubstituteFromArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FluxConfigurationKustomizationPostBuildSubstituteFromArgs $;

        public Builder() {
            $ = new FluxConfigurationKustomizationPostBuildSubstituteFromArgs();
        }

        public Builder(FluxConfigurationKustomizationPostBuildSubstituteFromArgs defaults) {
            $ = new FluxConfigurationKustomizationPostBuildSubstituteFromArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param kind Specifies the source kind to hold the variables to be used in substitution. Possible values are `ConfigMap` and `Secret`.
         * 
         * @return builder
         * 
         */
        public Builder kind(Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind Specifies the source kind to hold the variables to be used in substitution. Possible values are `ConfigMap` and `Secret`.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param name Specifies the name of the ConfigMap/Secret that holds the variables to be used in substitution.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the ConfigMap/Secret that holds the variables to be used in substitution.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param optional Whether to proceed without ConfigMap/Secret if it is not present. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder optional(@Nullable Output<Boolean> optional) {
            $.optional = optional;
            return this;
        }

        /**
         * @param optional Whether to proceed without ConfigMap/Secret if it is not present. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder optional(Boolean optional) {
            return optional(Output.of(optional));
        }

        public FluxConfigurationKustomizationPostBuildSubstituteFromArgs build() {
            if ($.kind == null) {
                throw new MissingRequiredPropertyException("FluxConfigurationKustomizationPostBuildSubstituteFromArgs", "kind");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("FluxConfigurationKustomizationPostBuildSubstituteFromArgs", "name");
            }
            return $;
        }
    }

}
