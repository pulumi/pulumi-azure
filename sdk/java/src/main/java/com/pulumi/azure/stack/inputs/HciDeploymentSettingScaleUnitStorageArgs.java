// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.stack.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class HciDeploymentSettingScaleUnitStorageArgs extends com.pulumi.resources.ResourceArgs {

    public static final HciDeploymentSettingScaleUnitStorageArgs Empty = new HciDeploymentSettingScaleUnitStorageArgs();

    /**
     * The configuration mode of storage. If set to `Express` and your storage is configured as per best practices based on the number of nodes in the cluster. Possible values are `Express`, `InfraOnly` and `KeepStorage`. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     */
    @Import(name="configurationMode", required=true)
    private Output<String> configurationMode;

    /**
     * @return The configuration mode of storage. If set to `Express` and your storage is configured as per best practices based on the number of nodes in the cluster. Possible values are `Express`, `InfraOnly` and `KeepStorage`. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     */
    public Output<String> configurationMode() {
        return this.configurationMode;
    }

    private HciDeploymentSettingScaleUnitStorageArgs() {}

    private HciDeploymentSettingScaleUnitStorageArgs(HciDeploymentSettingScaleUnitStorageArgs $) {
        this.configurationMode = $.configurationMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HciDeploymentSettingScaleUnitStorageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HciDeploymentSettingScaleUnitStorageArgs $;

        public Builder() {
            $ = new HciDeploymentSettingScaleUnitStorageArgs();
        }

        public Builder(HciDeploymentSettingScaleUnitStorageArgs defaults) {
            $ = new HciDeploymentSettingScaleUnitStorageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configurationMode The configuration mode of storage. If set to `Express` and your storage is configured as per best practices based on the number of nodes in the cluster. Possible values are `Express`, `InfraOnly` and `KeepStorage`. Changing this forces a new Stack HCI Deployment Setting to be created.
         * 
         * @return builder
         * 
         */
        public Builder configurationMode(Output<String> configurationMode) {
            $.configurationMode = configurationMode;
            return this;
        }

        /**
         * @param configurationMode The configuration mode of storage. If set to `Express` and your storage is configured as per best practices based on the number of nodes in the cluster. Possible values are `Express`, `InfraOnly` and `KeepStorage`. Changing this forces a new Stack HCI Deployment Setting to be created.
         * 
         * @return builder
         * 
         */
        public Builder configurationMode(String configurationMode) {
            return configurationMode(Output.of(configurationMode));
        }

        public HciDeploymentSettingScaleUnitStorageArgs build() {
            if ($.configurationMode == null) {
                throw new MissingRequiredPropertyException("HciDeploymentSettingScaleUnitStorageArgs", "configurationMode");
            }
            return $;
        }
    }

}
