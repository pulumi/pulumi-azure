// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.maintenance.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigurationInstallPatchesLinuxArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigurationInstallPatchesLinuxArgs Empty = new ConfigurationInstallPatchesLinuxArgs();

    /**
     * List of Classification category of patches to be patched. Possible values are `Critical`, `Security` and `Other`.
     * 
     */
    @Import(name="classificationsToIncludes")
    private @Nullable Output<List<String>> classificationsToIncludes;

    /**
     * @return List of Classification category of patches to be patched. Possible values are `Critical`, `Security` and `Other`.
     * 
     */
    public Optional<Output<List<String>>> classificationsToIncludes() {
        return Optional.ofNullable(this.classificationsToIncludes);
    }

    /**
     * List of package names to be excluded from patching.
     * 
     */
    @Import(name="packageNamesMaskToExcludes")
    private @Nullable Output<List<String>> packageNamesMaskToExcludes;

    /**
     * @return List of package names to be excluded from patching.
     * 
     */
    public Optional<Output<List<String>>> packageNamesMaskToExcludes() {
        return Optional.ofNullable(this.packageNamesMaskToExcludes);
    }

    /**
     * List of package names to be included for patching.
     * 
     */
    @Import(name="packageNamesMaskToIncludes")
    private @Nullable Output<List<String>> packageNamesMaskToIncludes;

    /**
     * @return List of package names to be included for patching.
     * 
     */
    public Optional<Output<List<String>>> packageNamesMaskToIncludes() {
        return Optional.ofNullable(this.packageNamesMaskToIncludes);
    }

    private ConfigurationInstallPatchesLinuxArgs() {}

    private ConfigurationInstallPatchesLinuxArgs(ConfigurationInstallPatchesLinuxArgs $) {
        this.classificationsToIncludes = $.classificationsToIncludes;
        this.packageNamesMaskToExcludes = $.packageNamesMaskToExcludes;
        this.packageNamesMaskToIncludes = $.packageNamesMaskToIncludes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigurationInstallPatchesLinuxArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigurationInstallPatchesLinuxArgs $;

        public Builder() {
            $ = new ConfigurationInstallPatchesLinuxArgs();
        }

        public Builder(ConfigurationInstallPatchesLinuxArgs defaults) {
            $ = new ConfigurationInstallPatchesLinuxArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param classificationsToIncludes List of Classification category of patches to be patched. Possible values are `Critical`, `Security` and `Other`.
         * 
         * @return builder
         * 
         */
        public Builder classificationsToIncludes(@Nullable Output<List<String>> classificationsToIncludes) {
            $.classificationsToIncludes = classificationsToIncludes;
            return this;
        }

        /**
         * @param classificationsToIncludes List of Classification category of patches to be patched. Possible values are `Critical`, `Security` and `Other`.
         * 
         * @return builder
         * 
         */
        public Builder classificationsToIncludes(List<String> classificationsToIncludes) {
            return classificationsToIncludes(Output.of(classificationsToIncludes));
        }

        /**
         * @param classificationsToIncludes List of Classification category of patches to be patched. Possible values are `Critical`, `Security` and `Other`.
         * 
         * @return builder
         * 
         */
        public Builder classificationsToIncludes(String... classificationsToIncludes) {
            return classificationsToIncludes(List.of(classificationsToIncludes));
        }

        /**
         * @param packageNamesMaskToExcludes List of package names to be excluded from patching.
         * 
         * @return builder
         * 
         */
        public Builder packageNamesMaskToExcludes(@Nullable Output<List<String>> packageNamesMaskToExcludes) {
            $.packageNamesMaskToExcludes = packageNamesMaskToExcludes;
            return this;
        }

        /**
         * @param packageNamesMaskToExcludes List of package names to be excluded from patching.
         * 
         * @return builder
         * 
         */
        public Builder packageNamesMaskToExcludes(List<String> packageNamesMaskToExcludes) {
            return packageNamesMaskToExcludes(Output.of(packageNamesMaskToExcludes));
        }

        /**
         * @param packageNamesMaskToExcludes List of package names to be excluded from patching.
         * 
         * @return builder
         * 
         */
        public Builder packageNamesMaskToExcludes(String... packageNamesMaskToExcludes) {
            return packageNamesMaskToExcludes(List.of(packageNamesMaskToExcludes));
        }

        /**
         * @param packageNamesMaskToIncludes List of package names to be included for patching.
         * 
         * @return builder
         * 
         */
        public Builder packageNamesMaskToIncludes(@Nullable Output<List<String>> packageNamesMaskToIncludes) {
            $.packageNamesMaskToIncludes = packageNamesMaskToIncludes;
            return this;
        }

        /**
         * @param packageNamesMaskToIncludes List of package names to be included for patching.
         * 
         * @return builder
         * 
         */
        public Builder packageNamesMaskToIncludes(List<String> packageNamesMaskToIncludes) {
            return packageNamesMaskToIncludes(Output.of(packageNamesMaskToIncludes));
        }

        /**
         * @param packageNamesMaskToIncludes List of package names to be included for patching.
         * 
         * @return builder
         * 
         */
        public Builder packageNamesMaskToIncludes(String... packageNamesMaskToIncludes) {
            return packageNamesMaskToIncludes(List.of(packageNamesMaskToIncludes));
        }

        public ConfigurationInstallPatchesLinuxArgs build() {
            return $;
        }
    }

}
