// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.eventgrid.outputs;

import com.pulumi.azure.eventgrid.outputs.NamespaceTopicSpacesConfigurationDynamicRoutingEnrichment;
import com.pulumi.azure.eventgrid.outputs.NamespaceTopicSpacesConfigurationStaticRoutingEnrichment;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NamespaceTopicSpacesConfiguration {
    /**
     * @return Specifies a list of alternative sources for the client authentication name from the client certificate. Possible values are `ClientCertificateDns`, `ClientCertificateEmail`, `ClientCertificateIp`, `ClientCertificateSubject` and `ClientCertificateUri`.
     * 
     */
    private @Nullable List<String> alternativeAuthenticationNameSources;
    /**
     * @return One or more `dynamic_routing_enrichment` blocks as defined below.
     * 
     */
    private @Nullable List<NamespaceTopicSpacesConfigurationDynamicRoutingEnrichment> dynamicRoutingEnrichments;
    /**
     * @return Specifies the maximum number of client sessions per authentication name. Valid values can be between `1` and `100`.
     * 
     */
    private @Nullable Integer maximumClientSessionsPerAuthenticationName;
    /**
     * @return Specifies the maximum session expiry interval allowed for all MQTT clients connecting to the Event Grid namespace. Valid values can be between `1` and `8`.
     * 
     */
    private @Nullable Integer maximumSessionExpiryInHours;
    /**
     * @return Specifies the Event Grid topic resource ID to route messages to.
     * 
     */
    private @Nullable String routeTopicId;
    /**
     * @return One or more `static_routing_enrichment` blocks as defined below.
     * 
     */
    private @Nullable List<NamespaceTopicSpacesConfigurationStaticRoutingEnrichment> staticRoutingEnrichments;

    private NamespaceTopicSpacesConfiguration() {}
    /**
     * @return Specifies a list of alternative sources for the client authentication name from the client certificate. Possible values are `ClientCertificateDns`, `ClientCertificateEmail`, `ClientCertificateIp`, `ClientCertificateSubject` and `ClientCertificateUri`.
     * 
     */
    public List<String> alternativeAuthenticationNameSources() {
        return this.alternativeAuthenticationNameSources == null ? List.of() : this.alternativeAuthenticationNameSources;
    }
    /**
     * @return One or more `dynamic_routing_enrichment` blocks as defined below.
     * 
     */
    public List<NamespaceTopicSpacesConfigurationDynamicRoutingEnrichment> dynamicRoutingEnrichments() {
        return this.dynamicRoutingEnrichments == null ? List.of() : this.dynamicRoutingEnrichments;
    }
    /**
     * @return Specifies the maximum number of client sessions per authentication name. Valid values can be between `1` and `100`.
     * 
     */
    public Optional<Integer> maximumClientSessionsPerAuthenticationName() {
        return Optional.ofNullable(this.maximumClientSessionsPerAuthenticationName);
    }
    /**
     * @return Specifies the maximum session expiry interval allowed for all MQTT clients connecting to the Event Grid namespace. Valid values can be between `1` and `8`.
     * 
     */
    public Optional<Integer> maximumSessionExpiryInHours() {
        return Optional.ofNullable(this.maximumSessionExpiryInHours);
    }
    /**
     * @return Specifies the Event Grid topic resource ID to route messages to.
     * 
     */
    public Optional<String> routeTopicId() {
        return Optional.ofNullable(this.routeTopicId);
    }
    /**
     * @return One or more `static_routing_enrichment` blocks as defined below.
     * 
     */
    public List<NamespaceTopicSpacesConfigurationStaticRoutingEnrichment> staticRoutingEnrichments() {
        return this.staticRoutingEnrichments == null ? List.of() : this.staticRoutingEnrichments;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NamespaceTopicSpacesConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> alternativeAuthenticationNameSources;
        private @Nullable List<NamespaceTopicSpacesConfigurationDynamicRoutingEnrichment> dynamicRoutingEnrichments;
        private @Nullable Integer maximumClientSessionsPerAuthenticationName;
        private @Nullable Integer maximumSessionExpiryInHours;
        private @Nullable String routeTopicId;
        private @Nullable List<NamespaceTopicSpacesConfigurationStaticRoutingEnrichment> staticRoutingEnrichments;
        public Builder() {}
        public Builder(NamespaceTopicSpacesConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alternativeAuthenticationNameSources = defaults.alternativeAuthenticationNameSources;
    	      this.dynamicRoutingEnrichments = defaults.dynamicRoutingEnrichments;
    	      this.maximumClientSessionsPerAuthenticationName = defaults.maximumClientSessionsPerAuthenticationName;
    	      this.maximumSessionExpiryInHours = defaults.maximumSessionExpiryInHours;
    	      this.routeTopicId = defaults.routeTopicId;
    	      this.staticRoutingEnrichments = defaults.staticRoutingEnrichments;
        }

        @CustomType.Setter
        public Builder alternativeAuthenticationNameSources(@Nullable List<String> alternativeAuthenticationNameSources) {

            this.alternativeAuthenticationNameSources = alternativeAuthenticationNameSources;
            return this;
        }
        public Builder alternativeAuthenticationNameSources(String... alternativeAuthenticationNameSources) {
            return alternativeAuthenticationNameSources(List.of(alternativeAuthenticationNameSources));
        }
        @CustomType.Setter
        public Builder dynamicRoutingEnrichments(@Nullable List<NamespaceTopicSpacesConfigurationDynamicRoutingEnrichment> dynamicRoutingEnrichments) {

            this.dynamicRoutingEnrichments = dynamicRoutingEnrichments;
            return this;
        }
        public Builder dynamicRoutingEnrichments(NamespaceTopicSpacesConfigurationDynamicRoutingEnrichment... dynamicRoutingEnrichments) {
            return dynamicRoutingEnrichments(List.of(dynamicRoutingEnrichments));
        }
        @CustomType.Setter
        public Builder maximumClientSessionsPerAuthenticationName(@Nullable Integer maximumClientSessionsPerAuthenticationName) {

            this.maximumClientSessionsPerAuthenticationName = maximumClientSessionsPerAuthenticationName;
            return this;
        }
        @CustomType.Setter
        public Builder maximumSessionExpiryInHours(@Nullable Integer maximumSessionExpiryInHours) {

            this.maximumSessionExpiryInHours = maximumSessionExpiryInHours;
            return this;
        }
        @CustomType.Setter
        public Builder routeTopicId(@Nullable String routeTopicId) {

            this.routeTopicId = routeTopicId;
            return this;
        }
        @CustomType.Setter
        public Builder staticRoutingEnrichments(@Nullable List<NamespaceTopicSpacesConfigurationStaticRoutingEnrichment> staticRoutingEnrichments) {

            this.staticRoutingEnrichments = staticRoutingEnrichments;
            return this;
        }
        public Builder staticRoutingEnrichments(NamespaceTopicSpacesConfigurationStaticRoutingEnrichment... staticRoutingEnrichments) {
            return staticRoutingEnrichments(List.of(staticRoutingEnrichments));
        }
        public NamespaceTopicSpacesConfiguration build() {
            final var _resultValue = new NamespaceTopicSpacesConfiguration();
            _resultValue.alternativeAuthenticationNameSources = alternativeAuthenticationNameSources;
            _resultValue.dynamicRoutingEnrichments = dynamicRoutingEnrichments;
            _resultValue.maximumClientSessionsPerAuthenticationName = maximumClientSessionsPerAuthenticationName;
            _resultValue.maximumSessionExpiryInHours = maximumSessionExpiryInHours;
            _resultValue.routeTopicId = routeTopicId;
            _resultValue.staticRoutingEnrichments = staticRoutingEnrichments;
            return _resultValue;
        }
    }
}
