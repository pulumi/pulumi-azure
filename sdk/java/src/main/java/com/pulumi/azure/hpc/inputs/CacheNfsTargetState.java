// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.hpc.inputs;

import com.pulumi.azure.hpc.inputs.CacheNfsTargetNamespaceJunctionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CacheNfsTargetState extends com.pulumi.resources.ResourceArgs {

    public static final CacheNfsTargetState Empty = new CacheNfsTargetState();

    /**
     * The name HPC Cache, which the HPC Cache NFS Target will be added to. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="cacheName")
    private @Nullable Output<String> cacheName;

    /**
     * @return The name HPC Cache, which the HPC Cache NFS Target will be added to. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> cacheName() {
        return Optional.ofNullable(this.cacheName);
    }

    /**
     * The name of the HPC Cache NFS Target. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the HPC Cache NFS Target. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Can be specified multiple times to define multiple `namespace_junction`. Each `namespace_junction` block supports fields documented below.
     * 
     */
    @Import(name="namespaceJunctions")
    private @Nullable Output<List<CacheNfsTargetNamespaceJunctionArgs>> namespaceJunctions;

    /**
     * @return Can be specified multiple times to define multiple `namespace_junction`. Each `namespace_junction` block supports fields documented below.
     * 
     */
    public Optional<Output<List<CacheNfsTargetNamespaceJunctionArgs>>> namespaceJunctions() {
        return Optional.ofNullable(this.namespaceJunctions);
    }

    /**
     * The name of the Resource Group in which to create the HPC Cache NFS Target. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group in which to create the HPC Cache NFS Target. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * The IP address or fully qualified domain name (FQDN) of the HPC Cache NFS target. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="targetHostName")
    private @Nullable Output<String> targetHostName;

    /**
     * @return The IP address or fully qualified domain name (FQDN) of the HPC Cache NFS target. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> targetHostName() {
        return Optional.ofNullable(this.targetHostName);
    }

    /**
     * The type of usage of the HPC Cache NFS Target. Possible values are: `READ_HEAVY_INFREQ`, `READ_HEAVY_CHECK_180`, `READ_ONLY`, `READ_WRITE`, `WRITE_WORKLOAD_15`, `WRITE_AROUND`, `WRITE_WORKLOAD_CHECK_30`, `WRITE_WORKLOAD_CHECK_60` and `WRITE_WORKLOAD_CLOUDWS`.
     * 
     */
    @Import(name="usageModel")
    private @Nullable Output<String> usageModel;

    /**
     * @return The type of usage of the HPC Cache NFS Target. Possible values are: `READ_HEAVY_INFREQ`, `READ_HEAVY_CHECK_180`, `READ_ONLY`, `READ_WRITE`, `WRITE_WORKLOAD_15`, `WRITE_AROUND`, `WRITE_WORKLOAD_CHECK_30`, `WRITE_WORKLOAD_CHECK_60` and `WRITE_WORKLOAD_CLOUDWS`.
     * 
     */
    public Optional<Output<String>> usageModel() {
        return Optional.ofNullable(this.usageModel);
    }

    private CacheNfsTargetState() {}

    private CacheNfsTargetState(CacheNfsTargetState $) {
        this.cacheName = $.cacheName;
        this.name = $.name;
        this.namespaceJunctions = $.namespaceJunctions;
        this.resourceGroupName = $.resourceGroupName;
        this.targetHostName = $.targetHostName;
        this.usageModel = $.usageModel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CacheNfsTargetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CacheNfsTargetState $;

        public Builder() {
            $ = new CacheNfsTargetState();
        }

        public Builder(CacheNfsTargetState defaults) {
            $ = new CacheNfsTargetState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cacheName The name HPC Cache, which the HPC Cache NFS Target will be added to. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder cacheName(@Nullable Output<String> cacheName) {
            $.cacheName = cacheName;
            return this;
        }

        /**
         * @param cacheName The name HPC Cache, which the HPC Cache NFS Target will be added to. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder cacheName(String cacheName) {
            return cacheName(Output.of(cacheName));
        }

        /**
         * @param name The name of the HPC Cache NFS Target. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the HPC Cache NFS Target. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespaceJunctions Can be specified multiple times to define multiple `namespace_junction`. Each `namespace_junction` block supports fields documented below.
         * 
         * @return builder
         * 
         */
        public Builder namespaceJunctions(@Nullable Output<List<CacheNfsTargetNamespaceJunctionArgs>> namespaceJunctions) {
            $.namespaceJunctions = namespaceJunctions;
            return this;
        }

        /**
         * @param namespaceJunctions Can be specified multiple times to define multiple `namespace_junction`. Each `namespace_junction` block supports fields documented below.
         * 
         * @return builder
         * 
         */
        public Builder namespaceJunctions(List<CacheNfsTargetNamespaceJunctionArgs> namespaceJunctions) {
            return namespaceJunctions(Output.of(namespaceJunctions));
        }

        /**
         * @param namespaceJunctions Can be specified multiple times to define multiple `namespace_junction`. Each `namespace_junction` block supports fields documented below.
         * 
         * @return builder
         * 
         */
        public Builder namespaceJunctions(CacheNfsTargetNamespaceJunctionArgs... namespaceJunctions) {
            return namespaceJunctions(List.of(namespaceJunctions));
        }

        /**
         * @param resourceGroupName The name of the Resource Group in which to create the HPC Cache NFS Target. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group in which to create the HPC Cache NFS Target. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param targetHostName The IP address or fully qualified domain name (FQDN) of the HPC Cache NFS target. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder targetHostName(@Nullable Output<String> targetHostName) {
            $.targetHostName = targetHostName;
            return this;
        }

        /**
         * @param targetHostName The IP address or fully qualified domain name (FQDN) of the HPC Cache NFS target. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder targetHostName(String targetHostName) {
            return targetHostName(Output.of(targetHostName));
        }

        /**
         * @param usageModel The type of usage of the HPC Cache NFS Target. Possible values are: `READ_HEAVY_INFREQ`, `READ_HEAVY_CHECK_180`, `READ_ONLY`, `READ_WRITE`, `WRITE_WORKLOAD_15`, `WRITE_AROUND`, `WRITE_WORKLOAD_CHECK_30`, `WRITE_WORKLOAD_CHECK_60` and `WRITE_WORKLOAD_CLOUDWS`.
         * 
         * @return builder
         * 
         */
        public Builder usageModel(@Nullable Output<String> usageModel) {
            $.usageModel = usageModel;
            return this;
        }

        /**
         * @param usageModel The type of usage of the HPC Cache NFS Target. Possible values are: `READ_HEAVY_INFREQ`, `READ_HEAVY_CHECK_180`, `READ_ONLY`, `READ_WRITE`, `WRITE_WORKLOAD_15`, `WRITE_AROUND`, `WRITE_WORKLOAD_CHECK_30`, `WRITE_WORKLOAD_CHECK_60` and `WRITE_WORKLOAD_CLOUDWS`.
         * 
         * @return builder
         * 
         */
        public Builder usageModel(String usageModel) {
            return usageModel(Output.of(usageModel));
        }

        public CacheNfsTargetState build() {
            return $;
        }
    }

}
