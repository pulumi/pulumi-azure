// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network;

import com.pulumi.azure.network.inputs.ExpressRoutePortIdentityArgs;
import com.pulumi.azure.network.inputs.ExpressRoutePortLink1Args;
import com.pulumi.azure.network.inputs.ExpressRoutePortLink2Args;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExpressRoutePortArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExpressRoutePortArgs Empty = new ExpressRoutePortArgs();

    /**
     * Bandwidth of the Express Route Port in Gbps. Changing this forces a new Express Route Port to be created.
     * 
     */
    @Import(name="bandwidthInGbps", required=true)
    private Output<Integer> bandwidthInGbps;

    /**
     * @return Bandwidth of the Express Route Port in Gbps. Changing this forces a new Express Route Port to be created.
     * 
     */
    public Output<Integer> bandwidthInGbps() {
        return this.bandwidthInGbps;
    }

    /**
     * The billing type of the Express Route Port. Possible values are `MeteredData` and `UnlimitedData`.
     * 
     */
    @Import(name="billingType")
    private @Nullable Output<String> billingType;

    /**
     * @return The billing type of the Express Route Port. Possible values are `MeteredData` and `UnlimitedData`.
     * 
     */
    public Optional<Output<String>> billingType() {
        return Optional.ofNullable(this.billingType);
    }

    /**
     * The encapsulation method used for the Express Route Port. Changing this forces a new Express Route Port to be created. Possible values are: `Dot1Q`, `QinQ`.
     * 
     */
    @Import(name="encapsulation", required=true)
    private Output<String> encapsulation;

    /**
     * @return The encapsulation method used for the Express Route Port. Changing this forces a new Express Route Port to be created. Possible values are: `Dot1Q`, `QinQ`.
     * 
     */
    public Output<String> encapsulation() {
        return this.encapsulation;
    }

    /**
     * An `identity` block as defined below.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<ExpressRoutePortIdentityArgs> identity;

    /**
     * @return An `identity` block as defined below.
     * 
     */
    public Optional<Output<ExpressRoutePortIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * A list of `link` blocks as defined below.
     * 
     */
    @Import(name="link1")
    private @Nullable Output<ExpressRoutePortLink1Args> link1;

    /**
     * @return A list of `link` blocks as defined below.
     * 
     */
    public Optional<Output<ExpressRoutePortLink1Args>> link1() {
        return Optional.ofNullable(this.link1);
    }

    /**
     * A list of `link` blocks as defined below.
     * 
     */
    @Import(name="link2")
    private @Nullable Output<ExpressRoutePortLink2Args> link2;

    /**
     * @return A list of `link` blocks as defined below.
     * 
     */
    public Optional<Output<ExpressRoutePortLink2Args>> link2() {
        return Optional.ofNullable(this.link2);
    }

    /**
     * The Azure Region where the Express Route Port should exist. Changing this forces a new Express Route Port to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The Azure Region where the Express Route Port should exist. Changing this forces a new Express Route Port to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name which should be used for this Express Route Port. Changing this forces a new Express Route Port to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Express Route Port. Changing this forces a new Express Route Port to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the peering location that this Express Route Port is physically mapped to. Changing this forces a new Express Route Port to be created.
     * 
     */
    @Import(name="peeringLocation", required=true)
    private Output<String> peeringLocation;

    /**
     * @return The name of the peering location that this Express Route Port is physically mapped to. Changing this forces a new Express Route Port to be created.
     * 
     */
    public Output<String> peeringLocation() {
        return this.peeringLocation;
    }

    /**
     * The name of the Resource Group where the Express Route Port should exist. Changing this forces a new Express Route Port to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the Express Route Port should exist. Changing this forces a new Express Route Port to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * A mapping of tags which should be assigned to the Express Route Port.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the Express Route Port.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ExpressRoutePortArgs() {}

    private ExpressRoutePortArgs(ExpressRoutePortArgs $) {
        this.bandwidthInGbps = $.bandwidthInGbps;
        this.billingType = $.billingType;
        this.encapsulation = $.encapsulation;
        this.identity = $.identity;
        this.link1 = $.link1;
        this.link2 = $.link2;
        this.location = $.location;
        this.name = $.name;
        this.peeringLocation = $.peeringLocation;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExpressRoutePortArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExpressRoutePortArgs $;

        public Builder() {
            $ = new ExpressRoutePortArgs();
        }

        public Builder(ExpressRoutePortArgs defaults) {
            $ = new ExpressRoutePortArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bandwidthInGbps Bandwidth of the Express Route Port in Gbps. Changing this forces a new Express Route Port to be created.
         * 
         * @return builder
         * 
         */
        public Builder bandwidthInGbps(Output<Integer> bandwidthInGbps) {
            $.bandwidthInGbps = bandwidthInGbps;
            return this;
        }

        /**
         * @param bandwidthInGbps Bandwidth of the Express Route Port in Gbps. Changing this forces a new Express Route Port to be created.
         * 
         * @return builder
         * 
         */
        public Builder bandwidthInGbps(Integer bandwidthInGbps) {
            return bandwidthInGbps(Output.of(bandwidthInGbps));
        }

        /**
         * @param billingType The billing type of the Express Route Port. Possible values are `MeteredData` and `UnlimitedData`.
         * 
         * @return builder
         * 
         */
        public Builder billingType(@Nullable Output<String> billingType) {
            $.billingType = billingType;
            return this;
        }

        /**
         * @param billingType The billing type of the Express Route Port. Possible values are `MeteredData` and `UnlimitedData`.
         * 
         * @return builder
         * 
         */
        public Builder billingType(String billingType) {
            return billingType(Output.of(billingType));
        }

        /**
         * @param encapsulation The encapsulation method used for the Express Route Port. Changing this forces a new Express Route Port to be created. Possible values are: `Dot1Q`, `QinQ`.
         * 
         * @return builder
         * 
         */
        public Builder encapsulation(Output<String> encapsulation) {
            $.encapsulation = encapsulation;
            return this;
        }

        /**
         * @param encapsulation The encapsulation method used for the Express Route Port. Changing this forces a new Express Route Port to be created. Possible values are: `Dot1Q`, `QinQ`.
         * 
         * @return builder
         * 
         */
        public Builder encapsulation(String encapsulation) {
            return encapsulation(Output.of(encapsulation));
        }

        /**
         * @param identity An `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<ExpressRoutePortIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity An `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(ExpressRoutePortIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param link1 A list of `link` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder link1(@Nullable Output<ExpressRoutePortLink1Args> link1) {
            $.link1 = link1;
            return this;
        }

        /**
         * @param link1 A list of `link` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder link1(ExpressRoutePortLink1Args link1) {
            return link1(Output.of(link1));
        }

        /**
         * @param link2 A list of `link` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder link2(@Nullable Output<ExpressRoutePortLink2Args> link2) {
            $.link2 = link2;
            return this;
        }

        /**
         * @param link2 A list of `link` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder link2(ExpressRoutePortLink2Args link2) {
            return link2(Output.of(link2));
        }

        /**
         * @param location The Azure Region where the Express Route Port should exist. Changing this forces a new Express Route Port to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The Azure Region where the Express Route Port should exist. Changing this forces a new Express Route Port to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name which should be used for this Express Route Port. Changing this forces a new Express Route Port to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Express Route Port. Changing this forces a new Express Route Port to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param peeringLocation The name of the peering location that this Express Route Port is physically mapped to. Changing this forces a new Express Route Port to be created.
         * 
         * @return builder
         * 
         */
        public Builder peeringLocation(Output<String> peeringLocation) {
            $.peeringLocation = peeringLocation;
            return this;
        }

        /**
         * @param peeringLocation The name of the peering location that this Express Route Port is physically mapped to. Changing this forces a new Express Route Port to be created.
         * 
         * @return builder
         * 
         */
        public Builder peeringLocation(String peeringLocation) {
            return peeringLocation(Output.of(peeringLocation));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Express Route Port should exist. Changing this forces a new Express Route Port to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Express Route Port should exist. Changing this forces a new Express Route Port to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Express Route Port.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Express Route Port.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public ExpressRoutePortArgs build() {
            if ($.bandwidthInGbps == null) {
                throw new MissingRequiredPropertyException("ExpressRoutePortArgs", "bandwidthInGbps");
            }
            if ($.encapsulation == null) {
                throw new MissingRequiredPropertyException("ExpressRoutePortArgs", "encapsulation");
            }
            if ($.peeringLocation == null) {
                throw new MissingRequiredPropertyException("ExpressRoutePortArgs", "peeringLocation");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("ExpressRoutePortArgs", "resourceGroupName");
            }
            return $;
        }
    }

}
