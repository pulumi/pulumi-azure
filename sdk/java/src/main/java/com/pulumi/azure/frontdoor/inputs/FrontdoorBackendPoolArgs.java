// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.frontdoor.inputs;

import com.pulumi.azure.frontdoor.inputs.FrontdoorBackendPoolBackendArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FrontdoorBackendPoolArgs extends com.pulumi.resources.ResourceArgs {

    public static final FrontdoorBackendPoolArgs Empty = new FrontdoorBackendPoolArgs();

    /**
     * A `backend` block as defined below.
     * 
     */
    @Import(name="backends", required=true)
    private Output<List<FrontdoorBackendPoolBackendArgs>> backends;

    /**
     * @return A `backend` block as defined below.
     * 
     */
    public Output<List<FrontdoorBackendPoolBackendArgs>> backends() {
        return this.backends;
    }

    /**
     * Specifies the name of the `backend_pool_health_probe` block within this resource to use for this `Backend Pool`.
     * 
     */
    @Import(name="healthProbeName", required=true)
    private Output<String> healthProbeName;

    /**
     * @return Specifies the name of the `backend_pool_health_probe` block within this resource to use for this `Backend Pool`.
     * 
     */
    public Output<String> healthProbeName() {
        return this.healthProbeName;
    }

    /**
     * The ID of the FrontDoor.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The ID of the FrontDoor.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Specifies the name of the `backend_pool_load_balancing` block within this resource to use for this `Backend Pool`.
     * 
     */
    @Import(name="loadBalancingName", required=true)
    private Output<String> loadBalancingName;

    /**
     * @return Specifies the name of the `backend_pool_load_balancing` block within this resource to use for this `Backend Pool`.
     * 
     */
    public Output<String> loadBalancingName() {
        return this.loadBalancingName;
    }

    /**
     * Specifies the name of the Backend Pool.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Specifies the name of the Backend Pool.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private FrontdoorBackendPoolArgs() {}

    private FrontdoorBackendPoolArgs(FrontdoorBackendPoolArgs $) {
        this.backends = $.backends;
        this.healthProbeName = $.healthProbeName;
        this.id = $.id;
        this.loadBalancingName = $.loadBalancingName;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FrontdoorBackendPoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FrontdoorBackendPoolArgs $;

        public Builder() {
            $ = new FrontdoorBackendPoolArgs();
        }

        public Builder(FrontdoorBackendPoolArgs defaults) {
            $ = new FrontdoorBackendPoolArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backends A `backend` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder backends(Output<List<FrontdoorBackendPoolBackendArgs>> backends) {
            $.backends = backends;
            return this;
        }

        /**
         * @param backends A `backend` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder backends(List<FrontdoorBackendPoolBackendArgs> backends) {
            return backends(Output.of(backends));
        }

        /**
         * @param backends A `backend` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder backends(FrontdoorBackendPoolBackendArgs... backends) {
            return backends(List.of(backends));
        }

        /**
         * @param healthProbeName Specifies the name of the `backend_pool_health_probe` block within this resource to use for this `Backend Pool`.
         * 
         * @return builder
         * 
         */
        public Builder healthProbeName(Output<String> healthProbeName) {
            $.healthProbeName = healthProbeName;
            return this;
        }

        /**
         * @param healthProbeName Specifies the name of the `backend_pool_health_probe` block within this resource to use for this `Backend Pool`.
         * 
         * @return builder
         * 
         */
        public Builder healthProbeName(String healthProbeName) {
            return healthProbeName(Output.of(healthProbeName));
        }

        /**
         * @param id The ID of the FrontDoor.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the FrontDoor.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param loadBalancingName Specifies the name of the `backend_pool_load_balancing` block within this resource to use for this `Backend Pool`.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingName(Output<String> loadBalancingName) {
            $.loadBalancingName = loadBalancingName;
            return this;
        }

        /**
         * @param loadBalancingName Specifies the name of the `backend_pool_load_balancing` block within this resource to use for this `Backend Pool`.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingName(String loadBalancingName) {
            return loadBalancingName(Output.of(loadBalancingName));
        }

        /**
         * @param name Specifies the name of the Backend Pool.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Backend Pool.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public FrontdoorBackendPoolArgs build() {
            if ($.backends == null) {
                throw new MissingRequiredPropertyException("FrontdoorBackendPoolArgs", "backends");
            }
            if ($.healthProbeName == null) {
                throw new MissingRequiredPropertyException("FrontdoorBackendPoolArgs", "healthProbeName");
            }
            if ($.loadBalancingName == null) {
                throw new MissingRequiredPropertyException("FrontdoorBackendPoolArgs", "loadBalancingName");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("FrontdoorBackendPoolArgs", "name");
            }
            return $;
        }
    }

}
