// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.consumption;

import com.pulumi.azure.consumption.inputs.BudgetSubscriptionFilterArgs;
import com.pulumi.azure.consumption.inputs.BudgetSubscriptionNotificationArgs;
import com.pulumi.azure.consumption.inputs.BudgetSubscriptionTimePeriodArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BudgetSubscriptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final BudgetSubscriptionArgs Empty = new BudgetSubscriptionArgs();

    /**
     * The total amount of cost to track with the budget.
     * 
     */
    @Import(name="amount", required=true)
    private Output<Double> amount;

    /**
     * @return The total amount of cost to track with the budget.
     * 
     */
    public Output<Double> amount() {
        return this.amount;
    }

    /**
     * (Optional) The ETag of the Subscription Consumption Budget.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return (Optional) The ETag of the Subscription Consumption Budget.
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * A `filter` block as defined below.
     * 
     */
    @Import(name="filter")
    private @Nullable Output<BudgetSubscriptionFilterArgs> filter;

    /**
     * @return A `filter` block as defined below.
     * 
     */
    public Optional<Output<BudgetSubscriptionFilterArgs>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * The name which should be used for this Subscription Consumption Budget. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Subscription Consumption Budget. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * One or more `notification` blocks as defined below.
     * 
     */
    @Import(name="notifications", required=true)
    private Output<List<BudgetSubscriptionNotificationArgs>> notifications;

    /**
     * @return One or more `notification` blocks as defined below.
     * 
     */
    public Output<List<BudgetSubscriptionNotificationArgs>> notifications() {
        return this.notifications;
    }

    /**
     * The ID of the Subscription for which to create a Consumption Budget. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** The `subscription_id` property can accept a subscription ID e.g. `00000000-0000-0000-0000-000000000000` or the subscription resource ID e.g. `/subscriptions/00000000-0000-0000-0000-000000000000`. In version 3.0 this property will only accept the subscription resource ID.
     * 
     */
    @Import(name="subscriptionId", required=true)
    private Output<String> subscriptionId;

    /**
     * @return The ID of the Subscription for which to create a Consumption Budget. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** The `subscription_id` property can accept a subscription ID e.g. `00000000-0000-0000-0000-000000000000` or the subscription resource ID e.g. `/subscriptions/00000000-0000-0000-0000-000000000000`. In version 3.0 this property will only accept the subscription resource ID.
     * 
     */
    public Output<String> subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * The time covered by a budget. Tracking of the amount will be reset based on the time grain. Must be one of `BillingAnnual`, `BillingMonth`, `BillingQuarter`, `Annually`, `Monthly` and `Quarterly`. Defaults to `Monthly`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="timeGrain")
    private @Nullable Output<String> timeGrain;

    /**
     * @return The time covered by a budget. Tracking of the amount will be reset based on the time grain. Must be one of `BillingAnnual`, `BillingMonth`, `BillingQuarter`, `Annually`, `Monthly` and `Quarterly`. Defaults to `Monthly`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> timeGrain() {
        return Optional.ofNullable(this.timeGrain);
    }

    /**
     * A `time_period` block as defined below.
     * 
     */
    @Import(name="timePeriod", required=true)
    private Output<BudgetSubscriptionTimePeriodArgs> timePeriod;

    /**
     * @return A `time_period` block as defined below.
     * 
     */
    public Output<BudgetSubscriptionTimePeriodArgs> timePeriod() {
        return this.timePeriod;
    }

    private BudgetSubscriptionArgs() {}

    private BudgetSubscriptionArgs(BudgetSubscriptionArgs $) {
        this.amount = $.amount;
        this.etag = $.etag;
        this.filter = $.filter;
        this.name = $.name;
        this.notifications = $.notifications;
        this.subscriptionId = $.subscriptionId;
        this.timeGrain = $.timeGrain;
        this.timePeriod = $.timePeriod;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BudgetSubscriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BudgetSubscriptionArgs $;

        public Builder() {
            $ = new BudgetSubscriptionArgs();
        }

        public Builder(BudgetSubscriptionArgs defaults) {
            $ = new BudgetSubscriptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param amount The total amount of cost to track with the budget.
         * 
         * @return builder
         * 
         */
        public Builder amount(Output<Double> amount) {
            $.amount = amount;
            return this;
        }

        /**
         * @param amount The total amount of cost to track with the budget.
         * 
         * @return builder
         * 
         */
        public Builder amount(Double amount) {
            return amount(Output.of(amount));
        }

        /**
         * @param etag (Optional) The ETag of the Subscription Consumption Budget.
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag (Optional) The ETag of the Subscription Consumption Budget.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param filter A `filter` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<BudgetSubscriptionFilterArgs> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter A `filter` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder filter(BudgetSubscriptionFilterArgs filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param name The name which should be used for this Subscription Consumption Budget. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Subscription Consumption Budget. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notifications One or more `notification` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder notifications(Output<List<BudgetSubscriptionNotificationArgs>> notifications) {
            $.notifications = notifications;
            return this;
        }

        /**
         * @param notifications One or more `notification` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder notifications(List<BudgetSubscriptionNotificationArgs> notifications) {
            return notifications(Output.of(notifications));
        }

        /**
         * @param notifications One or more `notification` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder notifications(BudgetSubscriptionNotificationArgs... notifications) {
            return notifications(List.of(notifications));
        }

        /**
         * @param subscriptionId The ID of the Subscription for which to create a Consumption Budget. Changing this forces a new resource to be created.
         * 
         * &gt; **NOTE:** The `subscription_id` property can accept a subscription ID e.g. `00000000-0000-0000-0000-000000000000` or the subscription resource ID e.g. `/subscriptions/00000000-0000-0000-0000-000000000000`. In version 3.0 this property will only accept the subscription resource ID.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(Output<String> subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        /**
         * @param subscriptionId The ID of the Subscription for which to create a Consumption Budget. Changing this forces a new resource to be created.
         * 
         * &gt; **NOTE:** The `subscription_id` property can accept a subscription ID e.g. `00000000-0000-0000-0000-000000000000` or the subscription resource ID e.g. `/subscriptions/00000000-0000-0000-0000-000000000000`. In version 3.0 this property will only accept the subscription resource ID.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(String subscriptionId) {
            return subscriptionId(Output.of(subscriptionId));
        }

        /**
         * @param timeGrain The time covered by a budget. Tracking of the amount will be reset based on the time grain. Must be one of `BillingAnnual`, `BillingMonth`, `BillingQuarter`, `Annually`, `Monthly` and `Quarterly`. Defaults to `Monthly`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder timeGrain(@Nullable Output<String> timeGrain) {
            $.timeGrain = timeGrain;
            return this;
        }

        /**
         * @param timeGrain The time covered by a budget. Tracking of the amount will be reset based on the time grain. Must be one of `BillingAnnual`, `BillingMonth`, `BillingQuarter`, `Annually`, `Monthly` and `Quarterly`. Defaults to `Monthly`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder timeGrain(String timeGrain) {
            return timeGrain(Output.of(timeGrain));
        }

        /**
         * @param timePeriod A `time_period` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder timePeriod(Output<BudgetSubscriptionTimePeriodArgs> timePeriod) {
            $.timePeriod = timePeriod;
            return this;
        }

        /**
         * @param timePeriod A `time_period` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder timePeriod(BudgetSubscriptionTimePeriodArgs timePeriod) {
            return timePeriod(Output.of(timePeriod));
        }

        public BudgetSubscriptionArgs build() {
            if ($.amount == null) {
                throw new MissingRequiredPropertyException("BudgetSubscriptionArgs", "amount");
            }
            if ($.notifications == null) {
                throw new MissingRequiredPropertyException("BudgetSubscriptionArgs", "notifications");
            }
            if ($.subscriptionId == null) {
                throw new MissingRequiredPropertyException("BudgetSubscriptionArgs", "subscriptionId");
            }
            if ($.timePeriod == null) {
                throw new MissingRequiredPropertyException("BudgetSubscriptionArgs", "timePeriod");
            }
            return $;
        }
    }

}
