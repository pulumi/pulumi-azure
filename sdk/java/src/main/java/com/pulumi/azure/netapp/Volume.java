// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.netapp;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.netapp.VolumeArgs;
import com.pulumi.azure.netapp.inputs.VolumeState;
import com.pulumi.azure.netapp.outputs.VolumeDataProtectionReplication;
import com.pulumi.azure.netapp.outputs.VolumeDataProtectionSnapshotPolicy;
import com.pulumi.azure.netapp.outputs.VolumeExportPolicyRule;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * NetApp Volumes can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:netapp/volume:Volume example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1
 * ```
 * 
 */
@ResourceType(type="azure:netapp/volume:Volume")
public class Volume extends com.pulumi.resources.CustomResource {
    /**
     * The name of the NetApp account in which the NetApp Pool should be created. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="accountName", refs={String.class}, tree="[0]")
    private Output<String> accountName;

    /**
     * @return The name of the NetApp account in which the NetApp Pool should be created. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> accountName() {
        return this.accountName;
    }
    /**
     * Is the NetApp Volume enabled for Azure VMware Solution (AVS) datastore purpose. Defaults to `false`. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="azureVmwareDataStoreEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> azureVmwareDataStoreEnabled;

    /**
     * @return Is the NetApp Volume enabled for Azure VMware Solution (AVS) datastore purpose. Defaults to `false`. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<Boolean>> azureVmwareDataStoreEnabled() {
        return Codegen.optional(this.azureVmwareDataStoreEnabled);
    }
    /**
     * Creates volume from snapshot. Following properties must be the same as the original volume where the snapshot was taken from: `protocols`, `subnet_id`, `location`, `service_level`, `resource_group_name`, `account_name` and `pool_name`. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="createFromSnapshotResourceId", refs={String.class}, tree="[0]")
    private Output<String> createFromSnapshotResourceId;

    /**
     * @return Creates volume from snapshot. Following properties must be the same as the original volume where the snapshot was taken from: `protocols`, `subnet_id`, `location`, `service_level`, `resource_group_name`, `account_name` and `pool_name`. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> createFromSnapshotResourceId() {
        return this.createFromSnapshotResourceId;
    }
    /**
     * A `data_protection_replication` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="dataProtectionReplication", refs={VolumeDataProtectionReplication.class}, tree="[0]")
    private Output</* @Nullable */ VolumeDataProtectionReplication> dataProtectionReplication;

    /**
     * @return A `data_protection_replication` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<VolumeDataProtectionReplication>> dataProtectionReplication() {
        return Codegen.optional(this.dataProtectionReplication);
    }
    /**
     * A `data_protection_snapshot_policy` block as defined below.
     * 
     */
    @Export(name="dataProtectionSnapshotPolicy", refs={VolumeDataProtectionSnapshotPolicy.class}, tree="[0]")
    private Output</* @Nullable */ VolumeDataProtectionSnapshotPolicy> dataProtectionSnapshotPolicy;

    /**
     * @return A `data_protection_snapshot_policy` block as defined below.
     * 
     */
    public Output<Optional<VolumeDataProtectionSnapshotPolicy>> dataProtectionSnapshotPolicy() {
        return Codegen.optional(this.dataProtectionSnapshotPolicy);
    }
    /**
     * One or more `export_policy_rule` block defined below.
     * 
     */
    @Export(name="exportPolicyRules", refs={List.class,VolumeExportPolicyRule.class}, tree="[0,1]")
    private Output</* @Nullable */ List<VolumeExportPolicyRule>> exportPolicyRules;

    /**
     * @return One or more `export_policy_rule` block defined below.
     * 
     */
    public Output<Optional<List<VolumeExportPolicyRule>>> exportPolicyRules() {
        return Codegen.optional(this.exportPolicyRules);
    }
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * A list of IPv4 Addresses which should be used to mount the volume.
     * 
     */
    @Export(name="mountIpAddresses", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> mountIpAddresses;

    /**
     * @return A list of IPv4 Addresses which should be used to mount the volume.
     * 
     */
    public Output<List<String>> mountIpAddresses() {
        return this.mountIpAddresses;
    }
    /**
     * The name of the NetApp Volume. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the NetApp Volume. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Indicates which network feature to use, accepted values are `Basic` or `Standard`, it defaults to `Basic` if not defined. This is a feature in public preview and for more information about it and how to register, please refer to [Configure network features for an Azure NetApp Files volume](https://docs.microsoft.com/en-us/azure/azure-netapp-files/configure-network-features). Changing this forces a new resource to be created.
     * 
     */
    @Export(name="networkFeatures", refs={String.class}, tree="[0]")
    private Output<String> networkFeatures;

    /**
     * @return Indicates which network feature to use, accepted values are `Basic` or `Standard`, it defaults to `Basic` if not defined. This is a feature in public preview and for more information about it and how to register, please refer to [Configure network features for an Azure NetApp Files volume](https://docs.microsoft.com/en-us/azure/azure-netapp-files/configure-network-features). Changing this forces a new resource to be created.
     * 
     */
    public Output<String> networkFeatures() {
        return this.networkFeatures;
    }
    /**
     * The name of the NetApp pool in which the NetApp Volume should be created. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="poolName", refs={String.class}, tree="[0]")
    private Output<String> poolName;

    /**
     * @return The name of the NetApp pool in which the NetApp Volume should be created. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> poolName() {
        return this.poolName;
    }
    /**
     * The target volume protocol expressed as a list. Supported single value include `CIFS`, `NFSv3`, or `NFSv4.1`. If argument is not defined it will default to `NFSv3`. Changing this forces a new resource to be created and data will be lost. Dual protocol scenario is supported for CIFS and NFSv3, for more information, please refer to [Create a dual-protocol volume for Azure NetApp Files](https://docs.microsoft.com/azure/azure-netapp-files/create-volumes-dual-protocol) document.
     * 
     */
    @Export(name="protocols", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> protocols;

    /**
     * @return The target volume protocol expressed as a list. Supported single value include `CIFS`, `NFSv3`, or `NFSv4.1`. If argument is not defined it will default to `NFSv3`. Changing this forces a new resource to be created and data will be lost. Dual protocol scenario is supported for CIFS and NFSv3, for more information, please refer to [Create a dual-protocol volume for Azure NetApp Files](https://docs.microsoft.com/azure/azure-netapp-files/create-volumes-dual-protocol) document.
     * 
     */
    public Output<List<String>> protocols() {
        return this.protocols;
    }
    /**
     * The name of the resource group where the NetApp Volume should be created. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group where the NetApp Volume should be created. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * Volume security style, accepted values are `unix` or `ntfs`. If not provided, single-protocol volume is created defaulting to `unix` if it is `NFSv3` or `NFSv4.1` volume, if `CIFS`, it will default to `ntfs`. In a dual-protocol volume, if not provided, its value will be `ntfs`. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="securityStyle", refs={String.class}, tree="[0]")
    private Output<String> securityStyle;

    /**
     * @return Volume security style, accepted values are `unix` or `ntfs`. If not provided, single-protocol volume is created defaulting to `unix` if it is `NFSv3` or `NFSv4.1` volume, if `CIFS`, it will default to `ntfs`. In a dual-protocol volume, if not provided, its value will be `ntfs`. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> securityStyle() {
        return this.securityStyle;
    }
    /**
     * The target performance of the file system. Valid values include `Premium`, `Standard`, or `Ultra`. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="serviceLevel", refs={String.class}, tree="[0]")
    private Output<String> serviceLevel;

    /**
     * @return The target performance of the file system. Valid values include `Premium`, `Standard`, or `Ultra`. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> serviceLevel() {
        return this.serviceLevel;
    }
    /**
     * Specifies whether the .snapshot (NFS clients) or ~snapshot (SMB clients) path of a volume is visible, default value is true.
     * 
     */
    @Export(name="snapshotDirectoryVisible", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> snapshotDirectoryVisible;

    /**
     * @return Specifies whether the .snapshot (NFS clients) or ~snapshot (SMB clients) path of a volume is visible, default value is true.
     * 
     */
    public Output<Boolean> snapshotDirectoryVisible() {
        return this.snapshotDirectoryVisible;
    }
    /**
     * The maximum Storage Quota allowed for a file system in Gigabytes.
     * 
     */
    @Export(name="storageQuotaInGb", refs={Integer.class}, tree="[0]")
    private Output<Integer> storageQuotaInGb;

    /**
     * @return The maximum Storage Quota allowed for a file system in Gigabytes.
     * 
     */
    public Output<Integer> storageQuotaInGb() {
        return this.storageQuotaInGb;
    }
    /**
     * The ID of the Subnet the NetApp Volume resides in, which must have the `Microsoft.NetApp/volumes` delegation. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="subnetId", refs={String.class}, tree="[0]")
    private Output<String> subnetId;

    /**
     * @return The ID of the Subnet the NetApp Volume resides in, which must have the `Microsoft.NetApp/volumes` delegation. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }
    /**
     * A mapping of tags to assign to the resource.
     * 
     * &gt; **Note:** It is highly recommended to use the **lifecycle** property as noted in the example since it will prevent an accidental deletion of the volume if the `protocols` argument changes to a different protocol type.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     * &gt; **Note:** It is highly recommended to use the **lifecycle** property as noted in the example since it will prevent an accidental deletion of the volume if the `protocols` argument changes to a different protocol type.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Throughput of this volume in Mibps.
     * 
     */
    @Export(name="throughputInMibps", refs={Double.class}, tree="[0]")
    private Output<Double> throughputInMibps;

    /**
     * @return Throughput of this volume in Mibps.
     * 
     */
    public Output<Double> throughputInMibps() {
        return this.throughputInMibps;
    }
    /**
     * A unique file path for the volume. Used when creating mount targets. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="volumePath", refs={String.class}, tree="[0]")
    private Output<String> volumePath;

    /**
     * @return A unique file path for the volume. Used when creating mount targets. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> volumePath() {
        return this.volumePath;
    }
    /**
     * Specifies the Availability Zone in which the Volume should be located. Possible values are `1`, `2` and `3`. Changing this forces a new resource to be created. This feature is currently in preview, for more information on how to enable it, please refer to [Manage availability zone volume placement for Azure NetApp Files](https://learn.microsoft.com/en-us/azure/azure-netapp-files/manage-availability-zone-volume-placement#register-the-feature).
     * 
     */
    @Export(name="zone", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> zone;

    /**
     * @return Specifies the Availability Zone in which the Volume should be located. Possible values are `1`, `2` and `3`. Changing this forces a new resource to be created. This feature is currently in preview, for more information on how to enable it, please refer to [Manage availability zone volume placement for Azure NetApp Files](https://learn.microsoft.com/en-us/azure/azure-netapp-files/manage-availability-zone-volume-placement#register-the-feature).
     * 
     */
    public Output<Optional<String>> zone() {
        return Codegen.optional(this.zone);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Volume(String name) {
        this(name, VolumeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Volume(String name, VolumeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Volume(String name, VolumeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:netapp/volume:Volume", name, args == null ? VolumeArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Volume(String name, Output<String> id, @Nullable VolumeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:netapp/volume:Volume", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Volume get(String name, Output<String> id, @Nullable VolumeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Volume(name, id, state, options);
    }
}
