// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class RegistryCredentialSetAuthenticationCredentials {
    /**
     * @return The URI of the secret containing the password in a Key Vault.
     * 
     * &gt; NOTE: Be aware that you will need to permit the Identity that is created for the Container Registry to have `get` on secrets to the Key Vault, e.g. using the `azure.keyvault.AccessPolicy` resource.
     * 
     */
    private String passwordSecretId;
    /**
     * @return The URI of the secret containing the username in a Key Vault.
     * 
     */
    private String usernameSecretId;

    private RegistryCredentialSetAuthenticationCredentials() {}
    /**
     * @return The URI of the secret containing the password in a Key Vault.
     * 
     * &gt; NOTE: Be aware that you will need to permit the Identity that is created for the Container Registry to have `get` on secrets to the Key Vault, e.g. using the `azure.keyvault.AccessPolicy` resource.
     * 
     */
    public String passwordSecretId() {
        return this.passwordSecretId;
    }
    /**
     * @return The URI of the secret containing the username in a Key Vault.
     * 
     */
    public String usernameSecretId() {
        return this.usernameSecretId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegistryCredentialSetAuthenticationCredentials defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String passwordSecretId;
        private String usernameSecretId;
        public Builder() {}
        public Builder(RegistryCredentialSetAuthenticationCredentials defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.passwordSecretId = defaults.passwordSecretId;
    	      this.usernameSecretId = defaults.usernameSecretId;
        }

        @CustomType.Setter
        public Builder passwordSecretId(String passwordSecretId) {
            if (passwordSecretId == null) {
              throw new MissingRequiredPropertyException("RegistryCredentialSetAuthenticationCredentials", "passwordSecretId");
            }
            this.passwordSecretId = passwordSecretId;
            return this;
        }
        @CustomType.Setter
        public Builder usernameSecretId(String usernameSecretId) {
            if (usernameSecretId == null) {
              throw new MissingRequiredPropertyException("RegistryCredentialSetAuthenticationCredentials", "usernameSecretId");
            }
            this.usernameSecretId = usernameSecretId;
            return this;
        }
        public RegistryCredentialSetAuthenticationCredentials build() {
            final var _resultValue = new RegistryCredentialSetAuthenticationCredentials();
            _resultValue.passwordSecretId = passwordSecretId;
            _resultValue.usernameSecretId = usernameSecretId;
            return _resultValue;
        }
    }
}
