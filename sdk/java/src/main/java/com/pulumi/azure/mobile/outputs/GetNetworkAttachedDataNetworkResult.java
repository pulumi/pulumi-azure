// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mobile.outputs;

import com.pulumi.azure.mobile.outputs.GetNetworkAttachedDataNetworkNetworkAddressPortTranslation;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetNetworkAttachedDataNetworkResult {
    /**
     * @return The DNS servers to signal to UEs to use for this attached data network.
     * 
     */
    private List<String> dnsAddresses;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The Azure Region where the Mobile Network Attached Data Network should exist.
     * 
     */
    private String location;
    private String mobileNetworkDataNetworkName;
    private String mobileNetworkPacketCoreDataPlaneId;
    /**
     * @return A `network_address_port_translation` block as defined below.
     * 
     */
    private List<GetNetworkAttachedDataNetworkNetworkAddressPortTranslation> networkAddressPortTranslations;
    /**
     * @return A mapping of tags which should be assigned to the Mobile Network Attached Data Network.
     * 
     */
    private Map<String,String> tags;
    private List<String> userEquipmentAddressPoolPrefixes;
    private List<String> userEquipmentStaticAddressPoolPrefixes;
    /**
     * @return The IPv4 address for the user data plane interface.
     * 
     */
    private String userPlaneAccessIpv4Address;
    /**
     * @return The default IPv4 gateway for the user data plane interface.
     * 
     */
    private String userPlaneAccessIpv4Gateway;
    /**
     * @return The IPv4 subnet for the user data plane interface.
     * 
     */
    private String userPlaneAccessIpv4Subnet;
    /**
     * @return The logical name for thie user data plane interface.
     * 
     */
    private String userPlaneAccessName;

    private GetNetworkAttachedDataNetworkResult() {}
    /**
     * @return The DNS servers to signal to UEs to use for this attached data network.
     * 
     */
    public List<String> dnsAddresses() {
        return this.dnsAddresses;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Azure Region where the Mobile Network Attached Data Network should exist.
     * 
     */
    public String location() {
        return this.location;
    }
    public String mobileNetworkDataNetworkName() {
        return this.mobileNetworkDataNetworkName;
    }
    public String mobileNetworkPacketCoreDataPlaneId() {
        return this.mobileNetworkPacketCoreDataPlaneId;
    }
    /**
     * @return A `network_address_port_translation` block as defined below.
     * 
     */
    public List<GetNetworkAttachedDataNetworkNetworkAddressPortTranslation> networkAddressPortTranslations() {
        return this.networkAddressPortTranslations;
    }
    /**
     * @return A mapping of tags which should be assigned to the Mobile Network Attached Data Network.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    public List<String> userEquipmentAddressPoolPrefixes() {
        return this.userEquipmentAddressPoolPrefixes;
    }
    public List<String> userEquipmentStaticAddressPoolPrefixes() {
        return this.userEquipmentStaticAddressPoolPrefixes;
    }
    /**
     * @return The IPv4 address for the user data plane interface.
     * 
     */
    public String userPlaneAccessIpv4Address() {
        return this.userPlaneAccessIpv4Address;
    }
    /**
     * @return The default IPv4 gateway for the user data plane interface.
     * 
     */
    public String userPlaneAccessIpv4Gateway() {
        return this.userPlaneAccessIpv4Gateway;
    }
    /**
     * @return The IPv4 subnet for the user data plane interface.
     * 
     */
    public String userPlaneAccessIpv4Subnet() {
        return this.userPlaneAccessIpv4Subnet;
    }
    /**
     * @return The logical name for thie user data plane interface.
     * 
     */
    public String userPlaneAccessName() {
        return this.userPlaneAccessName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkAttachedDataNetworkResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> dnsAddresses;
        private String id;
        private String location;
        private String mobileNetworkDataNetworkName;
        private String mobileNetworkPacketCoreDataPlaneId;
        private List<GetNetworkAttachedDataNetworkNetworkAddressPortTranslation> networkAddressPortTranslations;
        private Map<String,String> tags;
        private List<String> userEquipmentAddressPoolPrefixes;
        private List<String> userEquipmentStaticAddressPoolPrefixes;
        private String userPlaneAccessIpv4Address;
        private String userPlaneAccessIpv4Gateway;
        private String userPlaneAccessIpv4Subnet;
        private String userPlaneAccessName;
        public Builder() {}
        public Builder(GetNetworkAttachedDataNetworkResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dnsAddresses = defaults.dnsAddresses;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.mobileNetworkDataNetworkName = defaults.mobileNetworkDataNetworkName;
    	      this.mobileNetworkPacketCoreDataPlaneId = defaults.mobileNetworkPacketCoreDataPlaneId;
    	      this.networkAddressPortTranslations = defaults.networkAddressPortTranslations;
    	      this.tags = defaults.tags;
    	      this.userEquipmentAddressPoolPrefixes = defaults.userEquipmentAddressPoolPrefixes;
    	      this.userEquipmentStaticAddressPoolPrefixes = defaults.userEquipmentStaticAddressPoolPrefixes;
    	      this.userPlaneAccessIpv4Address = defaults.userPlaneAccessIpv4Address;
    	      this.userPlaneAccessIpv4Gateway = defaults.userPlaneAccessIpv4Gateway;
    	      this.userPlaneAccessIpv4Subnet = defaults.userPlaneAccessIpv4Subnet;
    	      this.userPlaneAccessName = defaults.userPlaneAccessName;
        }

        @CustomType.Setter
        public Builder dnsAddresses(List<String> dnsAddresses) {
            this.dnsAddresses = Objects.requireNonNull(dnsAddresses);
            return this;
        }
        public Builder dnsAddresses(String... dnsAddresses) {
            return dnsAddresses(List.of(dnsAddresses));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder mobileNetworkDataNetworkName(String mobileNetworkDataNetworkName) {
            this.mobileNetworkDataNetworkName = Objects.requireNonNull(mobileNetworkDataNetworkName);
            return this;
        }
        @CustomType.Setter
        public Builder mobileNetworkPacketCoreDataPlaneId(String mobileNetworkPacketCoreDataPlaneId) {
            this.mobileNetworkPacketCoreDataPlaneId = Objects.requireNonNull(mobileNetworkPacketCoreDataPlaneId);
            return this;
        }
        @CustomType.Setter
        public Builder networkAddressPortTranslations(List<GetNetworkAttachedDataNetworkNetworkAddressPortTranslation> networkAddressPortTranslations) {
            this.networkAddressPortTranslations = Objects.requireNonNull(networkAddressPortTranslations);
            return this;
        }
        public Builder networkAddressPortTranslations(GetNetworkAttachedDataNetworkNetworkAddressPortTranslation... networkAddressPortTranslations) {
            return networkAddressPortTranslations(List.of(networkAddressPortTranslations));
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder userEquipmentAddressPoolPrefixes(List<String> userEquipmentAddressPoolPrefixes) {
            this.userEquipmentAddressPoolPrefixes = Objects.requireNonNull(userEquipmentAddressPoolPrefixes);
            return this;
        }
        public Builder userEquipmentAddressPoolPrefixes(String... userEquipmentAddressPoolPrefixes) {
            return userEquipmentAddressPoolPrefixes(List.of(userEquipmentAddressPoolPrefixes));
        }
        @CustomType.Setter
        public Builder userEquipmentStaticAddressPoolPrefixes(List<String> userEquipmentStaticAddressPoolPrefixes) {
            this.userEquipmentStaticAddressPoolPrefixes = Objects.requireNonNull(userEquipmentStaticAddressPoolPrefixes);
            return this;
        }
        public Builder userEquipmentStaticAddressPoolPrefixes(String... userEquipmentStaticAddressPoolPrefixes) {
            return userEquipmentStaticAddressPoolPrefixes(List.of(userEquipmentStaticAddressPoolPrefixes));
        }
        @CustomType.Setter
        public Builder userPlaneAccessIpv4Address(String userPlaneAccessIpv4Address) {
            this.userPlaneAccessIpv4Address = Objects.requireNonNull(userPlaneAccessIpv4Address);
            return this;
        }
        @CustomType.Setter
        public Builder userPlaneAccessIpv4Gateway(String userPlaneAccessIpv4Gateway) {
            this.userPlaneAccessIpv4Gateway = Objects.requireNonNull(userPlaneAccessIpv4Gateway);
            return this;
        }
        @CustomType.Setter
        public Builder userPlaneAccessIpv4Subnet(String userPlaneAccessIpv4Subnet) {
            this.userPlaneAccessIpv4Subnet = Objects.requireNonNull(userPlaneAccessIpv4Subnet);
            return this;
        }
        @CustomType.Setter
        public Builder userPlaneAccessName(String userPlaneAccessName) {
            this.userPlaneAccessName = Objects.requireNonNull(userPlaneAccessName);
            return this;
        }
        public GetNetworkAttachedDataNetworkResult build() {
            final var _resultValue = new GetNetworkAttachedDataNetworkResult();
            _resultValue.dnsAddresses = dnsAddresses;
            _resultValue.id = id;
            _resultValue.location = location;
            _resultValue.mobileNetworkDataNetworkName = mobileNetworkDataNetworkName;
            _resultValue.mobileNetworkPacketCoreDataPlaneId = mobileNetworkPacketCoreDataPlaneId;
            _resultValue.networkAddressPortTranslations = networkAddressPortTranslations;
            _resultValue.tags = tags;
            _resultValue.userEquipmentAddressPoolPrefixes = userEquipmentAddressPoolPrefixes;
            _resultValue.userEquipmentStaticAddressPoolPrefixes = userEquipmentStaticAddressPoolPrefixes;
            _resultValue.userPlaneAccessIpv4Address = userPlaneAccessIpv4Address;
            _resultValue.userPlaneAccessIpv4Gateway = userPlaneAccessIpv4Gateway;
            _resultValue.userPlaneAccessIpv4Subnet = userPlaneAccessIpv4Subnet;
            _resultValue.userPlaneAccessName = userPlaneAccessName;
            return _resultValue;
        }
    }
}
