// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.servicebus.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSubscriptionResult {
    /**
     * @return The idle interval after which the topic is automatically deleted.
     * 
     */
    private final String autoDeleteOnIdle;
    /**
     * @return Does the ServiceBus Subscription have dead letter support on filter evaluation exceptions?
     * 
     */
    private final Boolean deadLetteringOnFilterEvaluationError;
    /**
     * @return Does the Service Bus Subscription have dead letter support when a message expires?
     * 
     */
    private final Boolean deadLetteringOnMessageExpiration;
    /**
     * @return The Default message timespan to live. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
     * 
     */
    private final String defaultMessageTtl;
    /**
     * @return Are batched operations enabled on this ServiceBus Subscription?
     * 
     */
    private final Boolean enableBatchedOperations;
    /**
     * @return The name of a Queue or Topic to automatically forward Dead Letter messages to.
     * 
     */
    private final String forwardDeadLetteredMessagesTo;
    /**
     * @return The name of a ServiceBus Queue or ServiceBus Topic where messages are automatically forwarded.
     * 
     */
    private final String forwardTo;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return The lock duration for the subscription.
     * 
     */
    private final String lockDuration;
    /**
     * @return The maximum number of deliveries.
     * 
     */
    private final Integer maxDeliveryCount;
    private final String name;
    private final @Nullable String namespaceName;
    /**
     * @return Whether or not this ServiceBus Subscription supports session.
     * 
     */
    private final Boolean requiresSession;
    private final @Nullable String resourceGroupName;
    private final @Nullable String topicId;
    private final @Nullable String topicName;

    @CustomType.Constructor
    private GetSubscriptionResult(
        @CustomType.Parameter("autoDeleteOnIdle") String autoDeleteOnIdle,
        @CustomType.Parameter("deadLetteringOnFilterEvaluationError") Boolean deadLetteringOnFilterEvaluationError,
        @CustomType.Parameter("deadLetteringOnMessageExpiration") Boolean deadLetteringOnMessageExpiration,
        @CustomType.Parameter("defaultMessageTtl") String defaultMessageTtl,
        @CustomType.Parameter("enableBatchedOperations") Boolean enableBatchedOperations,
        @CustomType.Parameter("forwardDeadLetteredMessagesTo") String forwardDeadLetteredMessagesTo,
        @CustomType.Parameter("forwardTo") String forwardTo,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("lockDuration") String lockDuration,
        @CustomType.Parameter("maxDeliveryCount") Integer maxDeliveryCount,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("namespaceName") @Nullable String namespaceName,
        @CustomType.Parameter("requiresSession") Boolean requiresSession,
        @CustomType.Parameter("resourceGroupName") @Nullable String resourceGroupName,
        @CustomType.Parameter("topicId") @Nullable String topicId,
        @CustomType.Parameter("topicName") @Nullable String topicName) {
        this.autoDeleteOnIdle = autoDeleteOnIdle;
        this.deadLetteringOnFilterEvaluationError = deadLetteringOnFilterEvaluationError;
        this.deadLetteringOnMessageExpiration = deadLetteringOnMessageExpiration;
        this.defaultMessageTtl = defaultMessageTtl;
        this.enableBatchedOperations = enableBatchedOperations;
        this.forwardDeadLetteredMessagesTo = forwardDeadLetteredMessagesTo;
        this.forwardTo = forwardTo;
        this.id = id;
        this.lockDuration = lockDuration;
        this.maxDeliveryCount = maxDeliveryCount;
        this.name = name;
        this.namespaceName = namespaceName;
        this.requiresSession = requiresSession;
        this.resourceGroupName = resourceGroupName;
        this.topicId = topicId;
        this.topicName = topicName;
    }

    /**
     * @return The idle interval after which the topic is automatically deleted.
     * 
     */
    public String autoDeleteOnIdle() {
        return this.autoDeleteOnIdle;
    }
    /**
     * @return Does the ServiceBus Subscription have dead letter support on filter evaluation exceptions?
     * 
     */
    public Boolean deadLetteringOnFilterEvaluationError() {
        return this.deadLetteringOnFilterEvaluationError;
    }
    /**
     * @return Does the Service Bus Subscription have dead letter support when a message expires?
     * 
     */
    public Boolean deadLetteringOnMessageExpiration() {
        return this.deadLetteringOnMessageExpiration;
    }
    /**
     * @return The Default message timespan to live. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
     * 
     */
    public String defaultMessageTtl() {
        return this.defaultMessageTtl;
    }
    /**
     * @return Are batched operations enabled on this ServiceBus Subscription?
     * 
     */
    public Boolean enableBatchedOperations() {
        return this.enableBatchedOperations;
    }
    /**
     * @return The name of a Queue or Topic to automatically forward Dead Letter messages to.
     * 
     */
    public String forwardDeadLetteredMessagesTo() {
        return this.forwardDeadLetteredMessagesTo;
    }
    /**
     * @return The name of a ServiceBus Queue or ServiceBus Topic where messages are automatically forwarded.
     * 
     */
    public String forwardTo() {
        return this.forwardTo;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The lock duration for the subscription.
     * 
     */
    public String lockDuration() {
        return this.lockDuration;
    }
    /**
     * @return The maximum number of deliveries.
     * 
     */
    public Integer maxDeliveryCount() {
        return this.maxDeliveryCount;
    }
    public String name() {
        return this.name;
    }
    public Optional<String> namespaceName() {
        return Optional.ofNullable(this.namespaceName);
    }
    /**
     * @return Whether or not this ServiceBus Subscription supports session.
     * 
     */
    public Boolean requiresSession() {
        return this.requiresSession;
    }
    public Optional<String> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }
    public Optional<String> topicId() {
        return Optional.ofNullable(this.topicId);
    }
    public Optional<String> topicName() {
        return Optional.ofNullable(this.topicName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubscriptionResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String autoDeleteOnIdle;
        private Boolean deadLetteringOnFilterEvaluationError;
        private Boolean deadLetteringOnMessageExpiration;
        private String defaultMessageTtl;
        private Boolean enableBatchedOperations;
        private String forwardDeadLetteredMessagesTo;
        private String forwardTo;
        private String id;
        private String lockDuration;
        private Integer maxDeliveryCount;
        private String name;
        private @Nullable String namespaceName;
        private Boolean requiresSession;
        private @Nullable String resourceGroupName;
        private @Nullable String topicId;
        private @Nullable String topicName;

        public Builder() {
    	      // Empty
        }

        public Builder(GetSubscriptionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoDeleteOnIdle = defaults.autoDeleteOnIdle;
    	      this.deadLetteringOnFilterEvaluationError = defaults.deadLetteringOnFilterEvaluationError;
    	      this.deadLetteringOnMessageExpiration = defaults.deadLetteringOnMessageExpiration;
    	      this.defaultMessageTtl = defaults.defaultMessageTtl;
    	      this.enableBatchedOperations = defaults.enableBatchedOperations;
    	      this.forwardDeadLetteredMessagesTo = defaults.forwardDeadLetteredMessagesTo;
    	      this.forwardTo = defaults.forwardTo;
    	      this.id = defaults.id;
    	      this.lockDuration = defaults.lockDuration;
    	      this.maxDeliveryCount = defaults.maxDeliveryCount;
    	      this.name = defaults.name;
    	      this.namespaceName = defaults.namespaceName;
    	      this.requiresSession = defaults.requiresSession;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.topicId = defaults.topicId;
    	      this.topicName = defaults.topicName;
        }

        public Builder autoDeleteOnIdle(String autoDeleteOnIdle) {
            this.autoDeleteOnIdle = Objects.requireNonNull(autoDeleteOnIdle);
            return this;
        }
        public Builder deadLetteringOnFilterEvaluationError(Boolean deadLetteringOnFilterEvaluationError) {
            this.deadLetteringOnFilterEvaluationError = Objects.requireNonNull(deadLetteringOnFilterEvaluationError);
            return this;
        }
        public Builder deadLetteringOnMessageExpiration(Boolean deadLetteringOnMessageExpiration) {
            this.deadLetteringOnMessageExpiration = Objects.requireNonNull(deadLetteringOnMessageExpiration);
            return this;
        }
        public Builder defaultMessageTtl(String defaultMessageTtl) {
            this.defaultMessageTtl = Objects.requireNonNull(defaultMessageTtl);
            return this;
        }
        public Builder enableBatchedOperations(Boolean enableBatchedOperations) {
            this.enableBatchedOperations = Objects.requireNonNull(enableBatchedOperations);
            return this;
        }
        public Builder forwardDeadLetteredMessagesTo(String forwardDeadLetteredMessagesTo) {
            this.forwardDeadLetteredMessagesTo = Objects.requireNonNull(forwardDeadLetteredMessagesTo);
            return this;
        }
        public Builder forwardTo(String forwardTo) {
            this.forwardTo = Objects.requireNonNull(forwardTo);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder lockDuration(String lockDuration) {
            this.lockDuration = Objects.requireNonNull(lockDuration);
            return this;
        }
        public Builder maxDeliveryCount(Integer maxDeliveryCount) {
            this.maxDeliveryCount = Objects.requireNonNull(maxDeliveryCount);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder namespaceName(@Nullable String namespaceName) {
            this.namespaceName = namespaceName;
            return this;
        }
        public Builder requiresSession(Boolean requiresSession) {
            this.requiresSession = Objects.requireNonNull(requiresSession);
            return this;
        }
        public Builder resourceGroupName(@Nullable String resourceGroupName) {
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        public Builder topicId(@Nullable String topicId) {
            this.topicId = topicId;
            return this;
        }
        public Builder topicName(@Nullable String topicName) {
            this.topicName = topicName;
            return this;
        }        public GetSubscriptionResult build() {
            return new GetSubscriptionResult(autoDeleteOnIdle, deadLetteringOnFilterEvaluationError, deadLetteringOnMessageExpiration, defaultMessageTtl, enableBatchedOperations, forwardDeadLetteredMessagesTo, forwardTo, id, lockDuration, maxDeliveryCount, name, namespaceName, requiresSession, resourceGroupName, topicId, topicName);
        }
    }
}
