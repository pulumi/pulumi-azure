// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.outputs;

import com.pulumi.azure.media.outputs.TransformOutputCustomPresetFilterCropRectangle;
import com.pulumi.azure.media.outputs.TransformOutputCustomPresetFilterDeinterlace;
import com.pulumi.azure.media.outputs.TransformOutputCustomPresetFilterFadeIn;
import com.pulumi.azure.media.outputs.TransformOutputCustomPresetFilterFadeOut;
import com.pulumi.azure.media.outputs.TransformOutputCustomPresetFilterOverlay;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TransformOutputCustomPresetFilter {
    /**
     * @return A `crop_rectangle` block as defined above.
     * 
     */
    private @Nullable TransformOutputCustomPresetFilterCropRectangle cropRectangle;
    /**
     * @return A `deinterlace` block as defined below.
     * 
     */
    private @Nullable TransformOutputCustomPresetFilterDeinterlace deinterlace;
    /**
     * @return A `fade_in` block as defined above.
     * 
     */
    private @Nullable TransformOutputCustomPresetFilterFadeIn fadeIn;
    /**
     * @return A `fade_out` block as defined above.
     * 
     */
    private @Nullable TransformOutputCustomPresetFilterFadeOut fadeOut;
    /**
     * @return One or more `overlay` blocks as defined below.
     * 
     */
    private @Nullable List<TransformOutputCustomPresetFilterOverlay> overlays;
    /**
     * @return The rotation to be applied to the input video before it is encoded. Possible values are `Auto`, `None`, `Rotate90`, `Rotate180`, `Rotate270`,or `Rotate0`. Default to `Auto`.
     * 
     */
    private @Nullable String rotation;

    private TransformOutputCustomPresetFilter() {}
    /**
     * @return A `crop_rectangle` block as defined above.
     * 
     */
    public Optional<TransformOutputCustomPresetFilterCropRectangle> cropRectangle() {
        return Optional.ofNullable(this.cropRectangle);
    }
    /**
     * @return A `deinterlace` block as defined below.
     * 
     */
    public Optional<TransformOutputCustomPresetFilterDeinterlace> deinterlace() {
        return Optional.ofNullable(this.deinterlace);
    }
    /**
     * @return A `fade_in` block as defined above.
     * 
     */
    public Optional<TransformOutputCustomPresetFilterFadeIn> fadeIn() {
        return Optional.ofNullable(this.fadeIn);
    }
    /**
     * @return A `fade_out` block as defined above.
     * 
     */
    public Optional<TransformOutputCustomPresetFilterFadeOut> fadeOut() {
        return Optional.ofNullable(this.fadeOut);
    }
    /**
     * @return One or more `overlay` blocks as defined below.
     * 
     */
    public List<TransformOutputCustomPresetFilterOverlay> overlays() {
        return this.overlays == null ? List.of() : this.overlays;
    }
    /**
     * @return The rotation to be applied to the input video before it is encoded. Possible values are `Auto`, `None`, `Rotate90`, `Rotate180`, `Rotate270`,or `Rotate0`. Default to `Auto`.
     * 
     */
    public Optional<String> rotation() {
        return Optional.ofNullable(this.rotation);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TransformOutputCustomPresetFilter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable TransformOutputCustomPresetFilterCropRectangle cropRectangle;
        private @Nullable TransformOutputCustomPresetFilterDeinterlace deinterlace;
        private @Nullable TransformOutputCustomPresetFilterFadeIn fadeIn;
        private @Nullable TransformOutputCustomPresetFilterFadeOut fadeOut;
        private @Nullable List<TransformOutputCustomPresetFilterOverlay> overlays;
        private @Nullable String rotation;
        public Builder() {}
        public Builder(TransformOutputCustomPresetFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cropRectangle = defaults.cropRectangle;
    	      this.deinterlace = defaults.deinterlace;
    	      this.fadeIn = defaults.fadeIn;
    	      this.fadeOut = defaults.fadeOut;
    	      this.overlays = defaults.overlays;
    	      this.rotation = defaults.rotation;
        }

        @CustomType.Setter
        public Builder cropRectangle(@Nullable TransformOutputCustomPresetFilterCropRectangle cropRectangle) {

            this.cropRectangle = cropRectangle;
            return this;
        }
        @CustomType.Setter
        public Builder deinterlace(@Nullable TransformOutputCustomPresetFilterDeinterlace deinterlace) {

            this.deinterlace = deinterlace;
            return this;
        }
        @CustomType.Setter
        public Builder fadeIn(@Nullable TransformOutputCustomPresetFilterFadeIn fadeIn) {

            this.fadeIn = fadeIn;
            return this;
        }
        @CustomType.Setter
        public Builder fadeOut(@Nullable TransformOutputCustomPresetFilterFadeOut fadeOut) {

            this.fadeOut = fadeOut;
            return this;
        }
        @CustomType.Setter
        public Builder overlays(@Nullable List<TransformOutputCustomPresetFilterOverlay> overlays) {

            this.overlays = overlays;
            return this;
        }
        public Builder overlays(TransformOutputCustomPresetFilterOverlay... overlays) {
            return overlays(List.of(overlays));
        }
        @CustomType.Setter
        public Builder rotation(@Nullable String rotation) {

            this.rotation = rotation;
            return this;
        }
        public TransformOutputCustomPresetFilter build() {
            final var _resultValue = new TransformOutputCustomPresetFilter();
            _resultValue.cropRectangle = cropRectangle;
            _resultValue.deinterlace = deinterlace;
            _resultValue.fadeIn = fadeIn;
            _resultValue.fadeOut = fadeOut;
            _resultValue.overlays = overlays;
            _resultValue.rotation = rotation;
            return _resultValue;
        }
    }
}
