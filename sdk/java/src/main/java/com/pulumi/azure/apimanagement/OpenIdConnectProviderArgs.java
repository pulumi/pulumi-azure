// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.apimanagement;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OpenIdConnectProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final OpenIdConnectProviderArgs Empty = new OpenIdConnectProviderArgs();

    /**
     * The name of the API Management Service in which this OpenID Connect Provider should be created. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="apiManagementName", required=true)
    private Output<String> apiManagementName;

    /**
     * @return The name of the API Management Service in which this OpenID Connect Provider should be created. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> apiManagementName() {
        return this.apiManagementName;
    }

    /**
     * The Client ID used for the Client Application.
     * 
     */
    @Import(name="clientId", required=true)
    private Output<String> clientId;

    /**
     * @return The Client ID used for the Client Application.
     * 
     */
    public Output<String> clientId() {
        return this.clientId;
    }

    /**
     * The Client Secret used for the Client Application.
     * 
     */
    @Import(name="clientSecret", required=true)
    private Output<String> clientSecret;

    /**
     * @return The Client Secret used for the Client Application.
     * 
     */
    public Output<String> clientSecret() {
        return this.clientSecret;
    }

    /**
     * A description of this OpenID Connect Provider.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of this OpenID Connect Provider.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A user-friendly name for this OpenID Connect Provider.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return A user-friendly name for this OpenID Connect Provider.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * The URI of the Metadata endpoint.
     * 
     */
    @Import(name="metadataEndpoint", required=true)
    private Output<String> metadataEndpoint;

    /**
     * @return The URI of the Metadata endpoint.
     * 
     */
    public Output<String> metadataEndpoint() {
        return this.metadataEndpoint;
    }

    /**
     * the Name of the OpenID Connect Provider which should be created within the API Management Service. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return the Name of the OpenID Connect Provider which should be created within the API Management Service. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    private OpenIdConnectProviderArgs() {}

    private OpenIdConnectProviderArgs(OpenIdConnectProviderArgs $) {
        this.apiManagementName = $.apiManagementName;
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.description = $.description;
        this.displayName = $.displayName;
        this.metadataEndpoint = $.metadataEndpoint;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OpenIdConnectProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OpenIdConnectProviderArgs $;

        public Builder() {
            $ = new OpenIdConnectProviderArgs();
        }

        public Builder(OpenIdConnectProviderArgs defaults) {
            $ = new OpenIdConnectProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiManagementName The name of the API Management Service in which this OpenID Connect Provider should be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder apiManagementName(Output<String> apiManagementName) {
            $.apiManagementName = apiManagementName;
            return this;
        }

        /**
         * @param apiManagementName The name of the API Management Service in which this OpenID Connect Provider should be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder apiManagementName(String apiManagementName) {
            return apiManagementName(Output.of(apiManagementName));
        }

        /**
         * @param clientId The Client ID used for the Client Application.
         * 
         * @return builder
         * 
         */
        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The Client ID used for the Client Application.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecret The Client Secret used for the Client Application.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret The Client Secret used for the Client Application.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        /**
         * @param description A description of this OpenID Connect Provider.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of this OpenID Connect Provider.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName A user-friendly name for this OpenID Connect Provider.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A user-friendly name for this OpenID Connect Provider.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param metadataEndpoint The URI of the Metadata endpoint.
         * 
         * @return builder
         * 
         */
        public Builder metadataEndpoint(Output<String> metadataEndpoint) {
            $.metadataEndpoint = metadataEndpoint;
            return this;
        }

        /**
         * @param metadataEndpoint The URI of the Metadata endpoint.
         * 
         * @return builder
         * 
         */
        public Builder metadataEndpoint(String metadataEndpoint) {
            return metadataEndpoint(Output.of(metadataEndpoint));
        }

        /**
         * @param name the Name of the OpenID Connect Provider which should be created within the API Management Service. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name the Name of the OpenID Connect Provider which should be created within the API Management Service. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public OpenIdConnectProviderArgs build() {
            if ($.apiManagementName == null) {
                throw new MissingRequiredPropertyException("OpenIdConnectProviderArgs", "apiManagementName");
            }
            if ($.clientId == null) {
                throw new MissingRequiredPropertyException("OpenIdConnectProviderArgs", "clientId");
            }
            if ($.clientSecret == null) {
                throw new MissingRequiredPropertyException("OpenIdConnectProviderArgs", "clientSecret");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("OpenIdConnectProviderArgs", "displayName");
            }
            if ($.metadataEndpoint == null) {
                throw new MissingRequiredPropertyException("OpenIdConnectProviderArgs", "metadataEndpoint");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("OpenIdConnectProviderArgs", "resourceGroupName");
            }
            return $;
        }
    }

}
