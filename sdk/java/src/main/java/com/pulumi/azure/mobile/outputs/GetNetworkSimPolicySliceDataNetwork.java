// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mobile.outputs;

import com.pulumi.azure.mobile.outputs.GetNetworkSimPolicySliceDataNetworkSessionAggregateMaximumBitRate;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNetworkSimPolicySliceDataNetwork {
    /**
     * @return Allowed session types in addition to the default session type.
     * 
     */
    private List<String> additionalAllowedSessionTypes;
    /**
     * @return Default QoS Flow allocation and retention priority (ARP) level. Flows with higher priority preempt flows with lower priority, if the settings of `preemption_capability` and `preemption_vulnerability` allow it. 1 is the highest level of priority. If this field is not specified then `qos_indicator` is used to derive the ARP value. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
     * 
     */
    private Integer allocationAndRetentionPriorityLevel;
    /**
     * @return An array of IDs of services that can be used as part of this SIM policy.
     * 
     */
    private List<String> allowedServicesIds;
    /**
     * @return The ID of Mobile Network Data Network which these settings apply to.
     * 
     */
    private String dataNetworkId;
    /**
     * @return The default PDU session type, which is used if the UE does not request a specific session type.
     * 
     */
    private String defaultSessionType;
    /**
     * @return The maximum number of downlink packets to buffer at the user plane for High Latency Communication - Extended Buffering.
     * 
     */
    private Integer maxBufferedPackets;
    /**
     * @return The Preemption Capability of a QoS Flow controls whether it can preempt another QoS Flow with a lower priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
     * 
     */
    private String preemptionCapability;
    /**
     * @return The Preemption Vulnerability of a QoS Flow controls whether it can be preempted by QoS Flow with a higher priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
     * 
     */
    private String preemptionVulnerability;
    /**
     * @return The QoS Indicator (5QI for 5G network /QCI for 4G net work) value identifies a set of QoS characteristics that control QoS forwarding treatment for QoS flows or EPS bearers.
     * 
     */
    private Integer qosIndicator;
    /**
     * @return A `session_aggregate_maximum_bit_rate` block as defined below.
     * 
     */
    private List<GetNetworkSimPolicySliceDataNetworkSessionAggregateMaximumBitRate> sessionAggregateMaximumBitRates;

    private GetNetworkSimPolicySliceDataNetwork() {}
    /**
     * @return Allowed session types in addition to the default session type.
     * 
     */
    public List<String> additionalAllowedSessionTypes() {
        return this.additionalAllowedSessionTypes;
    }
    /**
     * @return Default QoS Flow allocation and retention priority (ARP) level. Flows with higher priority preempt flows with lower priority, if the settings of `preemption_capability` and `preemption_vulnerability` allow it. 1 is the highest level of priority. If this field is not specified then `qos_indicator` is used to derive the ARP value. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
     * 
     */
    public Integer allocationAndRetentionPriorityLevel() {
        return this.allocationAndRetentionPriorityLevel;
    }
    /**
     * @return An array of IDs of services that can be used as part of this SIM policy.
     * 
     */
    public List<String> allowedServicesIds() {
        return this.allowedServicesIds;
    }
    /**
     * @return The ID of Mobile Network Data Network which these settings apply to.
     * 
     */
    public String dataNetworkId() {
        return this.dataNetworkId;
    }
    /**
     * @return The default PDU session type, which is used if the UE does not request a specific session type.
     * 
     */
    public String defaultSessionType() {
        return this.defaultSessionType;
    }
    /**
     * @return The maximum number of downlink packets to buffer at the user plane for High Latency Communication - Extended Buffering.
     * 
     */
    public Integer maxBufferedPackets() {
        return this.maxBufferedPackets;
    }
    /**
     * @return The Preemption Capability of a QoS Flow controls whether it can preempt another QoS Flow with a lower priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
     * 
     */
    public String preemptionCapability() {
        return this.preemptionCapability;
    }
    /**
     * @return The Preemption Vulnerability of a QoS Flow controls whether it can be preempted by QoS Flow with a higher priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
     * 
     */
    public String preemptionVulnerability() {
        return this.preemptionVulnerability;
    }
    /**
     * @return The QoS Indicator (5QI for 5G network /QCI for 4G net work) value identifies a set of QoS characteristics that control QoS forwarding treatment for QoS flows or EPS bearers.
     * 
     */
    public Integer qosIndicator() {
        return this.qosIndicator;
    }
    /**
     * @return A `session_aggregate_maximum_bit_rate` block as defined below.
     * 
     */
    public List<GetNetworkSimPolicySliceDataNetworkSessionAggregateMaximumBitRate> sessionAggregateMaximumBitRates() {
        return this.sessionAggregateMaximumBitRates;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkSimPolicySliceDataNetwork defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> additionalAllowedSessionTypes;
        private Integer allocationAndRetentionPriorityLevel;
        private List<String> allowedServicesIds;
        private String dataNetworkId;
        private String defaultSessionType;
        private Integer maxBufferedPackets;
        private String preemptionCapability;
        private String preemptionVulnerability;
        private Integer qosIndicator;
        private List<GetNetworkSimPolicySliceDataNetworkSessionAggregateMaximumBitRate> sessionAggregateMaximumBitRates;
        public Builder() {}
        public Builder(GetNetworkSimPolicySliceDataNetwork defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalAllowedSessionTypes = defaults.additionalAllowedSessionTypes;
    	      this.allocationAndRetentionPriorityLevel = defaults.allocationAndRetentionPriorityLevel;
    	      this.allowedServicesIds = defaults.allowedServicesIds;
    	      this.dataNetworkId = defaults.dataNetworkId;
    	      this.defaultSessionType = defaults.defaultSessionType;
    	      this.maxBufferedPackets = defaults.maxBufferedPackets;
    	      this.preemptionCapability = defaults.preemptionCapability;
    	      this.preemptionVulnerability = defaults.preemptionVulnerability;
    	      this.qosIndicator = defaults.qosIndicator;
    	      this.sessionAggregateMaximumBitRates = defaults.sessionAggregateMaximumBitRates;
        }

        @CustomType.Setter
        public Builder additionalAllowedSessionTypes(List<String> additionalAllowedSessionTypes) {
            if (additionalAllowedSessionTypes == null) {
              throw new MissingRequiredPropertyException("GetNetworkSimPolicySliceDataNetwork", "additionalAllowedSessionTypes");
            }
            this.additionalAllowedSessionTypes = additionalAllowedSessionTypes;
            return this;
        }
        public Builder additionalAllowedSessionTypes(String... additionalAllowedSessionTypes) {
            return additionalAllowedSessionTypes(List.of(additionalAllowedSessionTypes));
        }
        @CustomType.Setter
        public Builder allocationAndRetentionPriorityLevel(Integer allocationAndRetentionPriorityLevel) {
            if (allocationAndRetentionPriorityLevel == null) {
              throw new MissingRequiredPropertyException("GetNetworkSimPolicySliceDataNetwork", "allocationAndRetentionPriorityLevel");
            }
            this.allocationAndRetentionPriorityLevel = allocationAndRetentionPriorityLevel;
            return this;
        }
        @CustomType.Setter
        public Builder allowedServicesIds(List<String> allowedServicesIds) {
            if (allowedServicesIds == null) {
              throw new MissingRequiredPropertyException("GetNetworkSimPolicySliceDataNetwork", "allowedServicesIds");
            }
            this.allowedServicesIds = allowedServicesIds;
            return this;
        }
        public Builder allowedServicesIds(String... allowedServicesIds) {
            return allowedServicesIds(List.of(allowedServicesIds));
        }
        @CustomType.Setter
        public Builder dataNetworkId(String dataNetworkId) {
            if (dataNetworkId == null) {
              throw new MissingRequiredPropertyException("GetNetworkSimPolicySliceDataNetwork", "dataNetworkId");
            }
            this.dataNetworkId = dataNetworkId;
            return this;
        }
        @CustomType.Setter
        public Builder defaultSessionType(String defaultSessionType) {
            if (defaultSessionType == null) {
              throw new MissingRequiredPropertyException("GetNetworkSimPolicySliceDataNetwork", "defaultSessionType");
            }
            this.defaultSessionType = defaultSessionType;
            return this;
        }
        @CustomType.Setter
        public Builder maxBufferedPackets(Integer maxBufferedPackets) {
            if (maxBufferedPackets == null) {
              throw new MissingRequiredPropertyException("GetNetworkSimPolicySliceDataNetwork", "maxBufferedPackets");
            }
            this.maxBufferedPackets = maxBufferedPackets;
            return this;
        }
        @CustomType.Setter
        public Builder preemptionCapability(String preemptionCapability) {
            if (preemptionCapability == null) {
              throw new MissingRequiredPropertyException("GetNetworkSimPolicySliceDataNetwork", "preemptionCapability");
            }
            this.preemptionCapability = preemptionCapability;
            return this;
        }
        @CustomType.Setter
        public Builder preemptionVulnerability(String preemptionVulnerability) {
            if (preemptionVulnerability == null) {
              throw new MissingRequiredPropertyException("GetNetworkSimPolicySliceDataNetwork", "preemptionVulnerability");
            }
            this.preemptionVulnerability = preemptionVulnerability;
            return this;
        }
        @CustomType.Setter
        public Builder qosIndicator(Integer qosIndicator) {
            if (qosIndicator == null) {
              throw new MissingRequiredPropertyException("GetNetworkSimPolicySliceDataNetwork", "qosIndicator");
            }
            this.qosIndicator = qosIndicator;
            return this;
        }
        @CustomType.Setter
        public Builder sessionAggregateMaximumBitRates(List<GetNetworkSimPolicySliceDataNetworkSessionAggregateMaximumBitRate> sessionAggregateMaximumBitRates) {
            if (sessionAggregateMaximumBitRates == null) {
              throw new MissingRequiredPropertyException("GetNetworkSimPolicySliceDataNetwork", "sessionAggregateMaximumBitRates");
            }
            this.sessionAggregateMaximumBitRates = sessionAggregateMaximumBitRates;
            return this;
        }
        public Builder sessionAggregateMaximumBitRates(GetNetworkSimPolicySliceDataNetworkSessionAggregateMaximumBitRate... sessionAggregateMaximumBitRates) {
            return sessionAggregateMaximumBitRates(List.of(sessionAggregateMaximumBitRates));
        }
        public GetNetworkSimPolicySliceDataNetwork build() {
            final var _resultValue = new GetNetworkSimPolicySliceDataNetwork();
            _resultValue.additionalAllowedSessionTypes = additionalAllowedSessionTypes;
            _resultValue.allocationAndRetentionPriorityLevel = allocationAndRetentionPriorityLevel;
            _resultValue.allowedServicesIds = allowedServicesIds;
            _resultValue.dataNetworkId = dataNetworkId;
            _resultValue.defaultSessionType = defaultSessionType;
            _resultValue.maxBufferedPackets = maxBufferedPackets;
            _resultValue.preemptionCapability = preemptionCapability;
            _resultValue.preemptionVulnerability = preemptionVulnerability;
            _resultValue.qosIndicator = qosIndicator;
            _resultValue.sessionAggregateMaximumBitRates = sessionAggregateMaximumBitRates;
            return _resultValue;
        }
    }
}
