// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LinuxFunctionAppSlotAuthSettingsV2GithubV2Args extends com.pulumi.resources.ResourceArgs {

    public static final LinuxFunctionAppSlotAuthSettingsV2GithubV2Args Empty = new LinuxFunctionAppSlotAuthSettingsV2GithubV2Args();

    /**
     * The OpenID Connect Client ID for the Apple web application.
     * 
     */
    @Import(name="clientId", required=true)
    private Output<String> clientId;

    /**
     * @return The OpenID Connect Client ID for the Apple web application.
     * 
     */
    public Output<String> clientId() {
        return this.clientId;
    }

    /**
     * The app setting name that contains the `client_secret` value used for Apple Login.
     * 
     * !&gt; **NOTE:** A setting with this name must exist in `app_settings` to function correctly.
     * 
     * !&gt; **NOTE:** A setting with this name must exist in `app_settings` to function correctly.
     * 
     * !&gt; **NOTE:** A setting with this name must exist in `app_settings` to function correctly.
     * 
     * !&gt; **NOTE:** A setting with this name must exist in `app_settings` to function correctly.
     * 
     * !&gt; **NOTE:** A setting with this name must exist in `app_settings` to function correctly.
     * 
     */
    @Import(name="clientSecretSettingName", required=true)
    private Output<String> clientSecretSettingName;

    /**
     * @return The app setting name that contains the `client_secret` value used for Apple Login.
     * 
     * !&gt; **NOTE:** A setting with this name must exist in `app_settings` to function correctly.
     * 
     * !&gt; **NOTE:** A setting with this name must exist in `app_settings` to function correctly.
     * 
     * !&gt; **NOTE:** A setting with this name must exist in `app_settings` to function correctly.
     * 
     * !&gt; **NOTE:** A setting with this name must exist in `app_settings` to function correctly.
     * 
     * !&gt; **NOTE:** A setting with this name must exist in `app_settings` to function correctly.
     * 
     */
    public Output<String> clientSecretSettingName() {
        return this.clientSecretSettingName;
    }

    /**
     * A list of Login Scopes provided by this Authentication Provider.
     * 
     * &gt; **NOTE:** This is configured on the Authentication Provider side and is Read Only here.
     * 
     */
    @Import(name="loginScopes")
    private @Nullable Output<List<String>> loginScopes;

    /**
     * @return A list of Login Scopes provided by this Authentication Provider.
     * 
     * &gt; **NOTE:** This is configured on the Authentication Provider side and is Read Only here.
     * 
     */
    public Optional<Output<List<String>>> loginScopes() {
        return Optional.ofNullable(this.loginScopes);
    }

    private LinuxFunctionAppSlotAuthSettingsV2GithubV2Args() {}

    private LinuxFunctionAppSlotAuthSettingsV2GithubV2Args(LinuxFunctionAppSlotAuthSettingsV2GithubV2Args $) {
        this.clientId = $.clientId;
        this.clientSecretSettingName = $.clientSecretSettingName;
        this.loginScopes = $.loginScopes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LinuxFunctionAppSlotAuthSettingsV2GithubV2Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LinuxFunctionAppSlotAuthSettingsV2GithubV2Args $;

        public Builder() {
            $ = new LinuxFunctionAppSlotAuthSettingsV2GithubV2Args();
        }

        public Builder(LinuxFunctionAppSlotAuthSettingsV2GithubV2Args defaults) {
            $ = new LinuxFunctionAppSlotAuthSettingsV2GithubV2Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientId The OpenID Connect Client ID for the Apple web application.
         * 
         * @return builder
         * 
         */
        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The OpenID Connect Client ID for the Apple web application.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecretSettingName The app setting name that contains the `client_secret` value used for Apple Login.
         * 
         * !&gt; **NOTE:** A setting with this name must exist in `app_settings` to function correctly.
         * 
         * !&gt; **NOTE:** A setting with this name must exist in `app_settings` to function correctly.
         * 
         * !&gt; **NOTE:** A setting with this name must exist in `app_settings` to function correctly.
         * 
         * !&gt; **NOTE:** A setting with this name must exist in `app_settings` to function correctly.
         * 
         * !&gt; **NOTE:** A setting with this name must exist in `app_settings` to function correctly.
         * 
         * @return builder
         * 
         */
        public Builder clientSecretSettingName(Output<String> clientSecretSettingName) {
            $.clientSecretSettingName = clientSecretSettingName;
            return this;
        }

        /**
         * @param clientSecretSettingName The app setting name that contains the `client_secret` value used for Apple Login.
         * 
         * !&gt; **NOTE:** A setting with this name must exist in `app_settings` to function correctly.
         * 
         * !&gt; **NOTE:** A setting with this name must exist in `app_settings` to function correctly.
         * 
         * !&gt; **NOTE:** A setting with this name must exist in `app_settings` to function correctly.
         * 
         * !&gt; **NOTE:** A setting with this name must exist in `app_settings` to function correctly.
         * 
         * !&gt; **NOTE:** A setting with this name must exist in `app_settings` to function correctly.
         * 
         * @return builder
         * 
         */
        public Builder clientSecretSettingName(String clientSecretSettingName) {
            return clientSecretSettingName(Output.of(clientSecretSettingName));
        }

        /**
         * @param loginScopes A list of Login Scopes provided by this Authentication Provider.
         * 
         * &gt; **NOTE:** This is configured on the Authentication Provider side and is Read Only here.
         * 
         * @return builder
         * 
         */
        public Builder loginScopes(@Nullable Output<List<String>> loginScopes) {
            $.loginScopes = loginScopes;
            return this;
        }

        /**
         * @param loginScopes A list of Login Scopes provided by this Authentication Provider.
         * 
         * &gt; **NOTE:** This is configured on the Authentication Provider side and is Read Only here.
         * 
         * @return builder
         * 
         */
        public Builder loginScopes(List<String> loginScopes) {
            return loginScopes(Output.of(loginScopes));
        }

        /**
         * @param loginScopes A list of Login Scopes provided by this Authentication Provider.
         * 
         * &gt; **NOTE:** This is configured on the Authentication Provider side and is Read Only here.
         * 
         * @return builder
         * 
         */
        public Builder loginScopes(String... loginScopes) {
            return loginScopes(List.of(loginScopes));
        }

        public LinuxFunctionAppSlotAuthSettingsV2GithubV2Args build() {
            $.clientId = Objects.requireNonNull($.clientId, "expected parameter 'clientId' to be non-null");
            $.clientSecretSettingName = Objects.requireNonNull($.clientSecretSettingName, "expected parameter 'clientSecretSettingName' to be non-null");
            return $;
        }
    }

}
