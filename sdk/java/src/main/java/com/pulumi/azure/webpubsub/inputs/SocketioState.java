// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.webpubsub.inputs;

import com.pulumi.azure.webpubsub.inputs.SocketioIdentityArgs;
import com.pulumi.azure.webpubsub.inputs.SocketioSkuArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SocketioState extends com.pulumi.resources.ResourceArgs {

    public static final SocketioState Empty = new SocketioState();

    /**
     * Whether Azure Active Directory authentication is enabled. Defaults to `true`.
     * 
     */
    @Import(name="aadAuthEnabled")
    private @Nullable Output<Boolean> aadAuthEnabled;

    /**
     * @return Whether Azure Active Directory authentication is enabled. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> aadAuthEnabled() {
        return Optional.ofNullable(this.aadAuthEnabled);
    }

    /**
     * The publicly accessible IP address of the Web PubSub Service.
     * 
     */
    @Import(name="externalIp")
    private @Nullable Output<String> externalIp;

    /**
     * @return The publicly accessible IP address of the Web PubSub Service.
     * 
     */
    public Optional<Output<String>> externalIp() {
        return Optional.ofNullable(this.externalIp);
    }

    /**
     * The FQDN of the Web PubSub Service.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return The FQDN of the Web PubSub Service.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * An `identity` block as defined below.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<SocketioIdentityArgs> identity;

    /**
     * @return An `identity` block as defined below.
     * 
     */
    public Optional<Output<SocketioIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * Whether the connectivity log category for live trace is enabled. Defaults to `true`.
     * 
     */
    @Import(name="liveTraceConnectivityLogsEnabled")
    private @Nullable Output<Boolean> liveTraceConnectivityLogsEnabled;

    /**
     * @return Whether the connectivity log category for live trace is enabled. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> liveTraceConnectivityLogsEnabled() {
        return Optional.ofNullable(this.liveTraceConnectivityLogsEnabled);
    }

    /**
     * Whether the live trace tool is enabled. Defaults to `true`.
     * 
     */
    @Import(name="liveTraceEnabled")
    private @Nullable Output<Boolean> liveTraceEnabled;

    /**
     * @return Whether the live trace tool is enabled. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> liveTraceEnabled() {
        return Optional.ofNullable(this.liveTraceEnabled);
    }

    /**
     * Whether the HTTP request log category for live trace is enabled. Defaults to `true`.
     * 
     */
    @Import(name="liveTraceHttpRequestLogsEnabled")
    private @Nullable Output<Boolean> liveTraceHttpRequestLogsEnabled;

    /**
     * @return Whether the HTTP request log category for live trace is enabled. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> liveTraceHttpRequestLogsEnabled() {
        return Optional.ofNullable(this.liveTraceHttpRequestLogsEnabled);
    }

    /**
     * Whether the messaging log category for live trace is enabled. Defaults to `true`.
     * 
     */
    @Import(name="liveTraceMessagingLogsEnabled")
    private @Nullable Output<Boolean> liveTraceMessagingLogsEnabled;

    /**
     * @return Whether the messaging log category for live trace is enabled. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> liveTraceMessagingLogsEnabled() {
        return Optional.ofNullable(this.liveTraceMessagingLogsEnabled);
    }

    /**
     * Whether local authentication using an access key is enabled. Defaults to `true`.
     * 
     */
    @Import(name="localAuthEnabled")
    private @Nullable Output<Boolean> localAuthEnabled;

    /**
     * @return Whether local authentication using an access key is enabled. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> localAuthEnabled() {
        return Optional.ofNullable(this.localAuthEnabled);
    }

    /**
     * The Azure Region where the Web PubSub Service should exist. Changing this forces a new Web PubSub Service to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The Azure Region where the Web PubSub Service should exist. Changing this forces a new Web PubSub Service to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name which should be used for this Web PubSub Service. Changing this forces a new Web PubSub Service to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Web PubSub Service. Changing this forces a new Web PubSub Service to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The primary access key for the Web PubSub Service.
     * 
     */
    @Import(name="primaryAccessKey")
    private @Nullable Output<String> primaryAccessKey;

    /**
     * @return The primary access key for the Web PubSub Service.
     * 
     */
    public Optional<Output<String>> primaryAccessKey() {
        return Optional.ofNullable(this.primaryAccessKey);
    }

    /**
     * The primary connection string for the Web PubSub Service.
     * 
     */
    @Import(name="primaryConnectionString")
    private @Nullable Output<String> primaryConnectionString;

    /**
     * @return The primary connection string for the Web PubSub Service.
     * 
     */
    public Optional<Output<String>> primaryConnectionString() {
        return Optional.ofNullable(this.primaryConnectionString);
    }

    /**
     * Whether public network access is enabled. Defaults to `Enabled`. Possible values are `Enabled` and `Disabled`.
     * 
     * &gt; **Note:** `public_network_access` cannot be set to `Disabled` when `sku` is `Free_F1`.
     * 
     */
    @Import(name="publicNetworkAccess")
    private @Nullable Output<String> publicNetworkAccess;

    /**
     * @return Whether public network access is enabled. Defaults to `Enabled`. Possible values are `Enabled` and `Disabled`.
     * 
     * &gt; **Note:** `public_network_access` cannot be set to `Disabled` when `sku` is `Free_F1`.
     * 
     */
    public Optional<Output<String>> publicNetworkAccess() {
        return Optional.ofNullable(this.publicNetworkAccess);
    }

    /**
     * The publicly accessible port for client-side usage of the Web PubSub Service.
     * 
     */
    @Import(name="publicPort")
    private @Nullable Output<Integer> publicPort;

    /**
     * @return The publicly accessible port for client-side usage of the Web PubSub Service.
     * 
     */
    public Optional<Output<Integer>> publicPort() {
        return Optional.ofNullable(this.publicPort);
    }

    /**
     * The name of the Resource Group where the Web PubSub Service should exist. Changing this forces a new Web PubSub Service to be created.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the Web PubSub Service should exist. Changing this forces a new Web PubSub Service to be created.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * The secondary access key for the Web PubSub Service.
     * 
     */
    @Import(name="secondaryAccessKey")
    private @Nullable Output<String> secondaryAccessKey;

    /**
     * @return The secondary access key for the Web PubSub Service.
     * 
     */
    public Optional<Output<String>> secondaryAccessKey() {
        return Optional.ofNullable(this.secondaryAccessKey);
    }

    /**
     * The secondary connection string for the Web PubSub Service.
     * 
     */
    @Import(name="secondaryConnectionString")
    private @Nullable Output<String> secondaryConnectionString;

    /**
     * @return The secondary connection string for the Web PubSub Service.
     * 
     */
    public Optional<Output<String>> secondaryConnectionString() {
        return Optional.ofNullable(this.secondaryConnectionString);
    }

    /**
     * The publicly accessible port for server-side usage of the Web PubSub Service.
     * 
     */
    @Import(name="serverPort")
    private @Nullable Output<Integer> serverPort;

    /**
     * @return The publicly accessible port for server-side usage of the Web PubSub Service.
     * 
     */
    public Optional<Output<Integer>> serverPort() {
        return Optional.ofNullable(this.serverPort);
    }

    /**
     * The service mode of this Web PubSub Service. Defaults to `Default`. Possible values are `Default` and `Serverless`.
     * 
     */
    @Import(name="serviceMode")
    private @Nullable Output<String> serviceMode;

    /**
     * @return The service mode of this Web PubSub Service. Defaults to `Default`. Possible values are `Default` and `Serverless`.
     * 
     */
    public Optional<Output<String>> serviceMode() {
        return Optional.ofNullable(this.serviceMode);
    }

    /**
     * The SKU to use for this Web PubSub Service. Possible values are `Free_F1`, `Standard_S1`, `Premium_P1`, and `Premium_P2`.
     * 
     */
    @Import(name="sku")
    private @Nullable Output<SocketioSkuArgs> sku;

    /**
     * @return The SKU to use for this Web PubSub Service. Possible values are `Free_F1`, `Standard_S1`, `Premium_P1`, and `Premium_P2`.
     * 
     */
    public Optional<Output<SocketioSkuArgs>> sku() {
        return Optional.ofNullable(this.sku);
    }

    /**
     * A mapping of tags which should be assigned to the Web PubSub Service.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the Web PubSub Service.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Whether the service should request a client certificate during a TLS handshake. Defaults to `false`.
     * 
     * &gt; **Note:** `tls_client_cert_enabled` cannot be set to `true` when `sku` is `Free_F1`.
     * 
     */
    @Import(name="tlsClientCertEnabled")
    private @Nullable Output<Boolean> tlsClientCertEnabled;

    /**
     * @return Whether the service should request a client certificate during a TLS handshake. Defaults to `false`.
     * 
     * &gt; **Note:** `tls_client_cert_enabled` cannot be set to `true` when `sku` is `Free_F1`.
     * 
     */
    public Optional<Output<Boolean>> tlsClientCertEnabled() {
        return Optional.ofNullable(this.tlsClientCertEnabled);
    }

    private SocketioState() {}

    private SocketioState(SocketioState $) {
        this.aadAuthEnabled = $.aadAuthEnabled;
        this.externalIp = $.externalIp;
        this.hostname = $.hostname;
        this.identity = $.identity;
        this.liveTraceConnectivityLogsEnabled = $.liveTraceConnectivityLogsEnabled;
        this.liveTraceEnabled = $.liveTraceEnabled;
        this.liveTraceHttpRequestLogsEnabled = $.liveTraceHttpRequestLogsEnabled;
        this.liveTraceMessagingLogsEnabled = $.liveTraceMessagingLogsEnabled;
        this.localAuthEnabled = $.localAuthEnabled;
        this.location = $.location;
        this.name = $.name;
        this.primaryAccessKey = $.primaryAccessKey;
        this.primaryConnectionString = $.primaryConnectionString;
        this.publicNetworkAccess = $.publicNetworkAccess;
        this.publicPort = $.publicPort;
        this.resourceGroupName = $.resourceGroupName;
        this.secondaryAccessKey = $.secondaryAccessKey;
        this.secondaryConnectionString = $.secondaryConnectionString;
        this.serverPort = $.serverPort;
        this.serviceMode = $.serviceMode;
        this.sku = $.sku;
        this.tags = $.tags;
        this.tlsClientCertEnabled = $.tlsClientCertEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SocketioState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SocketioState $;

        public Builder() {
            $ = new SocketioState();
        }

        public Builder(SocketioState defaults) {
            $ = new SocketioState(Objects.requireNonNull(defaults));
        }

        /**
         * @param aadAuthEnabled Whether Azure Active Directory authentication is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder aadAuthEnabled(@Nullable Output<Boolean> aadAuthEnabled) {
            $.aadAuthEnabled = aadAuthEnabled;
            return this;
        }

        /**
         * @param aadAuthEnabled Whether Azure Active Directory authentication is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder aadAuthEnabled(Boolean aadAuthEnabled) {
            return aadAuthEnabled(Output.of(aadAuthEnabled));
        }

        /**
         * @param externalIp The publicly accessible IP address of the Web PubSub Service.
         * 
         * @return builder
         * 
         */
        public Builder externalIp(@Nullable Output<String> externalIp) {
            $.externalIp = externalIp;
            return this;
        }

        /**
         * @param externalIp The publicly accessible IP address of the Web PubSub Service.
         * 
         * @return builder
         * 
         */
        public Builder externalIp(String externalIp) {
            return externalIp(Output.of(externalIp));
        }

        /**
         * @param hostname The FQDN of the Web PubSub Service.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname The FQDN of the Web PubSub Service.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param identity An `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<SocketioIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity An `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(SocketioIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param liveTraceConnectivityLogsEnabled Whether the connectivity log category for live trace is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder liveTraceConnectivityLogsEnabled(@Nullable Output<Boolean> liveTraceConnectivityLogsEnabled) {
            $.liveTraceConnectivityLogsEnabled = liveTraceConnectivityLogsEnabled;
            return this;
        }

        /**
         * @param liveTraceConnectivityLogsEnabled Whether the connectivity log category for live trace is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder liveTraceConnectivityLogsEnabled(Boolean liveTraceConnectivityLogsEnabled) {
            return liveTraceConnectivityLogsEnabled(Output.of(liveTraceConnectivityLogsEnabled));
        }

        /**
         * @param liveTraceEnabled Whether the live trace tool is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder liveTraceEnabled(@Nullable Output<Boolean> liveTraceEnabled) {
            $.liveTraceEnabled = liveTraceEnabled;
            return this;
        }

        /**
         * @param liveTraceEnabled Whether the live trace tool is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder liveTraceEnabled(Boolean liveTraceEnabled) {
            return liveTraceEnabled(Output.of(liveTraceEnabled));
        }

        /**
         * @param liveTraceHttpRequestLogsEnabled Whether the HTTP request log category for live trace is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder liveTraceHttpRequestLogsEnabled(@Nullable Output<Boolean> liveTraceHttpRequestLogsEnabled) {
            $.liveTraceHttpRequestLogsEnabled = liveTraceHttpRequestLogsEnabled;
            return this;
        }

        /**
         * @param liveTraceHttpRequestLogsEnabled Whether the HTTP request log category for live trace is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder liveTraceHttpRequestLogsEnabled(Boolean liveTraceHttpRequestLogsEnabled) {
            return liveTraceHttpRequestLogsEnabled(Output.of(liveTraceHttpRequestLogsEnabled));
        }

        /**
         * @param liveTraceMessagingLogsEnabled Whether the messaging log category for live trace is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder liveTraceMessagingLogsEnabled(@Nullable Output<Boolean> liveTraceMessagingLogsEnabled) {
            $.liveTraceMessagingLogsEnabled = liveTraceMessagingLogsEnabled;
            return this;
        }

        /**
         * @param liveTraceMessagingLogsEnabled Whether the messaging log category for live trace is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder liveTraceMessagingLogsEnabled(Boolean liveTraceMessagingLogsEnabled) {
            return liveTraceMessagingLogsEnabled(Output.of(liveTraceMessagingLogsEnabled));
        }

        /**
         * @param localAuthEnabled Whether local authentication using an access key is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder localAuthEnabled(@Nullable Output<Boolean> localAuthEnabled) {
            $.localAuthEnabled = localAuthEnabled;
            return this;
        }

        /**
         * @param localAuthEnabled Whether local authentication using an access key is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder localAuthEnabled(Boolean localAuthEnabled) {
            return localAuthEnabled(Output.of(localAuthEnabled));
        }

        /**
         * @param location The Azure Region where the Web PubSub Service should exist. Changing this forces a new Web PubSub Service to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The Azure Region where the Web PubSub Service should exist. Changing this forces a new Web PubSub Service to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name which should be used for this Web PubSub Service. Changing this forces a new Web PubSub Service to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Web PubSub Service. Changing this forces a new Web PubSub Service to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param primaryAccessKey The primary access key for the Web PubSub Service.
         * 
         * @return builder
         * 
         */
        public Builder primaryAccessKey(@Nullable Output<String> primaryAccessKey) {
            $.primaryAccessKey = primaryAccessKey;
            return this;
        }

        /**
         * @param primaryAccessKey The primary access key for the Web PubSub Service.
         * 
         * @return builder
         * 
         */
        public Builder primaryAccessKey(String primaryAccessKey) {
            return primaryAccessKey(Output.of(primaryAccessKey));
        }

        /**
         * @param primaryConnectionString The primary connection string for the Web PubSub Service.
         * 
         * @return builder
         * 
         */
        public Builder primaryConnectionString(@Nullable Output<String> primaryConnectionString) {
            $.primaryConnectionString = primaryConnectionString;
            return this;
        }

        /**
         * @param primaryConnectionString The primary connection string for the Web PubSub Service.
         * 
         * @return builder
         * 
         */
        public Builder primaryConnectionString(String primaryConnectionString) {
            return primaryConnectionString(Output.of(primaryConnectionString));
        }

        /**
         * @param publicNetworkAccess Whether public network access is enabled. Defaults to `Enabled`. Possible values are `Enabled` and `Disabled`.
         * 
         * &gt; **Note:** `public_network_access` cannot be set to `Disabled` when `sku` is `Free_F1`.
         * 
         * @return builder
         * 
         */
        public Builder publicNetworkAccess(@Nullable Output<String> publicNetworkAccess) {
            $.publicNetworkAccess = publicNetworkAccess;
            return this;
        }

        /**
         * @param publicNetworkAccess Whether public network access is enabled. Defaults to `Enabled`. Possible values are `Enabled` and `Disabled`.
         * 
         * &gt; **Note:** `public_network_access` cannot be set to `Disabled` when `sku` is `Free_F1`.
         * 
         * @return builder
         * 
         */
        public Builder publicNetworkAccess(String publicNetworkAccess) {
            return publicNetworkAccess(Output.of(publicNetworkAccess));
        }

        /**
         * @param publicPort The publicly accessible port for client-side usage of the Web PubSub Service.
         * 
         * @return builder
         * 
         */
        public Builder publicPort(@Nullable Output<Integer> publicPort) {
            $.publicPort = publicPort;
            return this;
        }

        /**
         * @param publicPort The publicly accessible port for client-side usage of the Web PubSub Service.
         * 
         * @return builder
         * 
         */
        public Builder publicPort(Integer publicPort) {
            return publicPort(Output.of(publicPort));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Web PubSub Service should exist. Changing this forces a new Web PubSub Service to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Web PubSub Service should exist. Changing this forces a new Web PubSub Service to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param secondaryAccessKey The secondary access key for the Web PubSub Service.
         * 
         * @return builder
         * 
         */
        public Builder secondaryAccessKey(@Nullable Output<String> secondaryAccessKey) {
            $.secondaryAccessKey = secondaryAccessKey;
            return this;
        }

        /**
         * @param secondaryAccessKey The secondary access key for the Web PubSub Service.
         * 
         * @return builder
         * 
         */
        public Builder secondaryAccessKey(String secondaryAccessKey) {
            return secondaryAccessKey(Output.of(secondaryAccessKey));
        }

        /**
         * @param secondaryConnectionString The secondary connection string for the Web PubSub Service.
         * 
         * @return builder
         * 
         */
        public Builder secondaryConnectionString(@Nullable Output<String> secondaryConnectionString) {
            $.secondaryConnectionString = secondaryConnectionString;
            return this;
        }

        /**
         * @param secondaryConnectionString The secondary connection string for the Web PubSub Service.
         * 
         * @return builder
         * 
         */
        public Builder secondaryConnectionString(String secondaryConnectionString) {
            return secondaryConnectionString(Output.of(secondaryConnectionString));
        }

        /**
         * @param serverPort The publicly accessible port for server-side usage of the Web PubSub Service.
         * 
         * @return builder
         * 
         */
        public Builder serverPort(@Nullable Output<Integer> serverPort) {
            $.serverPort = serverPort;
            return this;
        }

        /**
         * @param serverPort The publicly accessible port for server-side usage of the Web PubSub Service.
         * 
         * @return builder
         * 
         */
        public Builder serverPort(Integer serverPort) {
            return serverPort(Output.of(serverPort));
        }

        /**
         * @param serviceMode The service mode of this Web PubSub Service. Defaults to `Default`. Possible values are `Default` and `Serverless`.
         * 
         * @return builder
         * 
         */
        public Builder serviceMode(@Nullable Output<String> serviceMode) {
            $.serviceMode = serviceMode;
            return this;
        }

        /**
         * @param serviceMode The service mode of this Web PubSub Service. Defaults to `Default`. Possible values are `Default` and `Serverless`.
         * 
         * @return builder
         * 
         */
        public Builder serviceMode(String serviceMode) {
            return serviceMode(Output.of(serviceMode));
        }

        /**
         * @param sku The SKU to use for this Web PubSub Service. Possible values are `Free_F1`, `Standard_S1`, `Premium_P1`, and `Premium_P2`.
         * 
         * @return builder
         * 
         */
        public Builder sku(@Nullable Output<SocketioSkuArgs> sku) {
            $.sku = sku;
            return this;
        }

        /**
         * @param sku The SKU to use for this Web PubSub Service. Possible values are `Free_F1`, `Standard_S1`, `Premium_P1`, and `Premium_P2`.
         * 
         * @return builder
         * 
         */
        public Builder sku(SocketioSkuArgs sku) {
            return sku(Output.of(sku));
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Web PubSub Service.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Web PubSub Service.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tlsClientCertEnabled Whether the service should request a client certificate during a TLS handshake. Defaults to `false`.
         * 
         * &gt; **Note:** `tls_client_cert_enabled` cannot be set to `true` when `sku` is `Free_F1`.
         * 
         * @return builder
         * 
         */
        public Builder tlsClientCertEnabled(@Nullable Output<Boolean> tlsClientCertEnabled) {
            $.tlsClientCertEnabled = tlsClientCertEnabled;
            return this;
        }

        /**
         * @param tlsClientCertEnabled Whether the service should request a client certificate during a TLS handshake. Defaults to `false`.
         * 
         * &gt; **Note:** `tls_client_cert_enabled` cannot be set to `true` when `sku` is `Free_F1`.
         * 
         * @return builder
         * 
         */
        public Builder tlsClientCertEnabled(Boolean tlsClientCertEnabled) {
            return tlsClientCertEnabled(Output.of(tlsClientCertEnabled));
        }

        public SocketioState build() {
            return $;
        }
    }

}
