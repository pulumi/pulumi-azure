// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.azure.network.outputs.GetApplicationGatewayProbeMatch;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetApplicationGatewayProbe {
    /**
     * @return The Hostname used for this Probe.
     * 
     */
    private String host;
    /**
     * @return The ID of the Rewrite Rule Set
     * 
     */
    private String id;
    /**
     * @return The Interval between two consecutive probes in seconds.
     * 
     */
    private Integer interval;
    /**
     * @return A `match` block as defined above.
     * 
     */
    private List<GetApplicationGatewayProbeMatch> matches;
    /**
     * @return The minimum number of servers that are always marked as healthy.
     * 
     */
    private Integer minimumServers;
    /**
     * @return The name of this Application Gateway.
     * 
     */
    private String name;
    /**
     * @return The URL path to rewrite.
     * 
     */
    private String path;
    /**
     * @return Whether the host header is picked from the backend HTTP settings.
     * 
     */
    private Boolean pickHostNameFromBackendHttpSettings;
    /**
     * @return Custom port which is used for probing the backend servers.
     * 
     */
    private Integer port;
    /**
     * @return The Protocol used for this Probe.
     * 
     */
    private String protocol;
    /**
     * @return The Timeout used for this Probe, indicating when a probe becomes unhealthy.
     * 
     */
    private Integer timeout;
    /**
     * @return The Unhealthy Threshold for this Probe, which indicates the amount of retries which will be attempted before a node is deemed unhealthy.
     * 
     */
    private Integer unhealthyThreshold;

    private GetApplicationGatewayProbe() {}
    /**
     * @return The Hostname used for this Probe.
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return The ID of the Rewrite Rule Set
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Interval between two consecutive probes in seconds.
     * 
     */
    public Integer interval() {
        return this.interval;
    }
    /**
     * @return A `match` block as defined above.
     * 
     */
    public List<GetApplicationGatewayProbeMatch> matches() {
        return this.matches;
    }
    /**
     * @return The minimum number of servers that are always marked as healthy.
     * 
     */
    public Integer minimumServers() {
        return this.minimumServers;
    }
    /**
     * @return The name of this Application Gateway.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The URL path to rewrite.
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return Whether the host header is picked from the backend HTTP settings.
     * 
     */
    public Boolean pickHostNameFromBackendHttpSettings() {
        return this.pickHostNameFromBackendHttpSettings;
    }
    /**
     * @return Custom port which is used for probing the backend servers.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The Protocol used for this Probe.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return The Timeout used for this Probe, indicating when a probe becomes unhealthy.
     * 
     */
    public Integer timeout() {
        return this.timeout;
    }
    /**
     * @return The Unhealthy Threshold for this Probe, which indicates the amount of retries which will be attempted before a node is deemed unhealthy.
     * 
     */
    public Integer unhealthyThreshold() {
        return this.unhealthyThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationGatewayProbe defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String host;
        private String id;
        private Integer interval;
        private List<GetApplicationGatewayProbeMatch> matches;
        private Integer minimumServers;
        private String name;
        private String path;
        private Boolean pickHostNameFromBackendHttpSettings;
        private Integer port;
        private String protocol;
        private Integer timeout;
        private Integer unhealthyThreshold;
        public Builder() {}
        public Builder(GetApplicationGatewayProbe defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.host = defaults.host;
    	      this.id = defaults.id;
    	      this.interval = defaults.interval;
    	      this.matches = defaults.matches;
    	      this.minimumServers = defaults.minimumServers;
    	      this.name = defaults.name;
    	      this.path = defaults.path;
    	      this.pickHostNameFromBackendHttpSettings = defaults.pickHostNameFromBackendHttpSettings;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.timeout = defaults.timeout;
    	      this.unhealthyThreshold = defaults.unhealthyThreshold;
        }

        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayProbe", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayProbe", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder interval(Integer interval) {
            if (interval == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayProbe", "interval");
            }
            this.interval = interval;
            return this;
        }
        @CustomType.Setter
        public Builder matches(List<GetApplicationGatewayProbeMatch> matches) {
            if (matches == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayProbe", "matches");
            }
            this.matches = matches;
            return this;
        }
        public Builder matches(GetApplicationGatewayProbeMatch... matches) {
            return matches(List.of(matches));
        }
        @CustomType.Setter
        public Builder minimumServers(Integer minimumServers) {
            if (minimumServers == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayProbe", "minimumServers");
            }
            this.minimumServers = minimumServers;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayProbe", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayProbe", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder pickHostNameFromBackendHttpSettings(Boolean pickHostNameFromBackendHttpSettings) {
            if (pickHostNameFromBackendHttpSettings == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayProbe", "pickHostNameFromBackendHttpSettings");
            }
            this.pickHostNameFromBackendHttpSettings = pickHostNameFromBackendHttpSettings;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayProbe", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayProbe", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(Integer timeout) {
            if (timeout == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayProbe", "timeout");
            }
            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder unhealthyThreshold(Integer unhealthyThreshold) {
            if (unhealthyThreshold == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayProbe", "unhealthyThreshold");
            }
            this.unhealthyThreshold = unhealthyThreshold;
            return this;
        }
        public GetApplicationGatewayProbe build() {
            final var _resultValue = new GetApplicationGatewayProbe();
            _resultValue.host = host;
            _resultValue.id = id;
            _resultValue.interval = interval;
            _resultValue.matches = matches;
            _resultValue.minimumServers = minimumServers;
            _resultValue.name = name;
            _resultValue.path = path;
            _resultValue.pickHostNameFromBackendHttpSettings = pickHostNameFromBackendHttpSettings;
            _resultValue.port = port;
            _resultValue.protocol = protocol;
            _resultValue.timeout = timeout;
            _resultValue.unhealthyThreshold = unhealthyThreshold;
            return _resultValue;
        }
    }
}
