// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.storage.inputs;

import com.pulumi.azure.storage.inputs.BlobInventoryPolicyRuleFilterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BlobInventoryPolicyRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final BlobInventoryPolicyRuleArgs Empty = new BlobInventoryPolicyRuleArgs();

    /**
     * A `filter` block as defined above. Can only be set when the `scope` is `Blob`.
     * 
     */
    @Import(name="filter")
    private @Nullable Output<BlobInventoryPolicyRuleFilterArgs> filter;

    /**
     * @return A `filter` block as defined above. Can only be set when the `scope` is `Blob`.
     * 
     */
    public Optional<Output<BlobInventoryPolicyRuleFilterArgs>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * The format of the inventory files. Possible values are `Csv` and `Parquet`.
     * 
     */
    @Import(name="format", required=true)
    private Output<String> format;

    /**
     * @return The format of the inventory files. Possible values are `Csv` and `Parquet`.
     * 
     */
    public Output<String> format() {
        return this.format;
    }

    /**
     * The name which should be used for this Blob Inventory Policy Rule.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name which should be used for this Blob Inventory Policy Rule.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The inventory schedule applied by this rule. Possible values are `Daily` and `Weekly`.
     * 
     */
    @Import(name="schedule", required=true)
    private Output<String> schedule;

    /**
     * @return The inventory schedule applied by this rule. Possible values are `Daily` and `Weekly`.
     * 
     */
    public Output<String> schedule() {
        return this.schedule;
    }

    /**
     * A list of fields to be included in the inventory. See the [Azure API reference](https://docs.microsoft.com/rest/api/storagerp/blob-inventory-policies/create-or-update#blobinventorypolicydefinition) for all the supported fields.
     * 
     */
    @Import(name="schemaFields", required=true)
    private Output<List<String>> schemaFields;

    /**
     * @return A list of fields to be included in the inventory. See the [Azure API reference](https://docs.microsoft.com/rest/api/storagerp/blob-inventory-policies/create-or-update#blobinventorypolicydefinition) for all the supported fields.
     * 
     */
    public Output<List<String>> schemaFields() {
        return this.schemaFields;
    }

    /**
     * The scope of the inventory for this rule. Possible values are `Blob` and `Container`.
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    /**
     * @return The scope of the inventory for this rule. Possible values are `Blob` and `Container`.
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    /**
     * The storage container name to store the blob inventory files for this rule.
     * 
     */
    @Import(name="storageContainerName", required=true)
    private Output<String> storageContainerName;

    /**
     * @return The storage container name to store the blob inventory files for this rule.
     * 
     */
    public Output<String> storageContainerName() {
        return this.storageContainerName;
    }

    private BlobInventoryPolicyRuleArgs() {}

    private BlobInventoryPolicyRuleArgs(BlobInventoryPolicyRuleArgs $) {
        this.filter = $.filter;
        this.format = $.format;
        this.name = $.name;
        this.schedule = $.schedule;
        this.schemaFields = $.schemaFields;
        this.scope = $.scope;
        this.storageContainerName = $.storageContainerName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BlobInventoryPolicyRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BlobInventoryPolicyRuleArgs $;

        public Builder() {
            $ = new BlobInventoryPolicyRuleArgs();
        }

        public Builder(BlobInventoryPolicyRuleArgs defaults) {
            $ = new BlobInventoryPolicyRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filter A `filter` block as defined above. Can only be set when the `scope` is `Blob`.
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<BlobInventoryPolicyRuleFilterArgs> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter A `filter` block as defined above. Can only be set when the `scope` is `Blob`.
         * 
         * @return builder
         * 
         */
        public Builder filter(BlobInventoryPolicyRuleFilterArgs filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param format The format of the inventory files. Possible values are `Csv` and `Parquet`.
         * 
         * @return builder
         * 
         */
        public Builder format(Output<String> format) {
            $.format = format;
            return this;
        }

        /**
         * @param format The format of the inventory files. Possible values are `Csv` and `Parquet`.
         * 
         * @return builder
         * 
         */
        public Builder format(String format) {
            return format(Output.of(format));
        }

        /**
         * @param name The name which should be used for this Blob Inventory Policy Rule.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Blob Inventory Policy Rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param schedule The inventory schedule applied by this rule. Possible values are `Daily` and `Weekly`.
         * 
         * @return builder
         * 
         */
        public Builder schedule(Output<String> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule The inventory schedule applied by this rule. Possible values are `Daily` and `Weekly`.
         * 
         * @return builder
         * 
         */
        public Builder schedule(String schedule) {
            return schedule(Output.of(schedule));
        }

        /**
         * @param schemaFields A list of fields to be included in the inventory. See the [Azure API reference](https://docs.microsoft.com/rest/api/storagerp/blob-inventory-policies/create-or-update#blobinventorypolicydefinition) for all the supported fields.
         * 
         * @return builder
         * 
         */
        public Builder schemaFields(Output<List<String>> schemaFields) {
            $.schemaFields = schemaFields;
            return this;
        }

        /**
         * @param schemaFields A list of fields to be included in the inventory. See the [Azure API reference](https://docs.microsoft.com/rest/api/storagerp/blob-inventory-policies/create-or-update#blobinventorypolicydefinition) for all the supported fields.
         * 
         * @return builder
         * 
         */
        public Builder schemaFields(List<String> schemaFields) {
            return schemaFields(Output.of(schemaFields));
        }

        /**
         * @param schemaFields A list of fields to be included in the inventory. See the [Azure API reference](https://docs.microsoft.com/rest/api/storagerp/blob-inventory-policies/create-or-update#blobinventorypolicydefinition) for all the supported fields.
         * 
         * @return builder
         * 
         */
        public Builder schemaFields(String... schemaFields) {
            return schemaFields(List.of(schemaFields));
        }

        /**
         * @param scope The scope of the inventory for this rule. Possible values are `Blob` and `Container`.
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope of the inventory for this rule. Possible values are `Blob` and `Container`.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param storageContainerName The storage container name to store the blob inventory files for this rule.
         * 
         * @return builder
         * 
         */
        public Builder storageContainerName(Output<String> storageContainerName) {
            $.storageContainerName = storageContainerName;
            return this;
        }

        /**
         * @param storageContainerName The storage container name to store the blob inventory files for this rule.
         * 
         * @return builder
         * 
         */
        public Builder storageContainerName(String storageContainerName) {
            return storageContainerName(Output.of(storageContainerName));
        }

        public BlobInventoryPolicyRuleArgs build() {
            if ($.format == null) {
                throw new MissingRequiredPropertyException("BlobInventoryPolicyRuleArgs", "format");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("BlobInventoryPolicyRuleArgs", "name");
            }
            if ($.schedule == null) {
                throw new MissingRequiredPropertyException("BlobInventoryPolicyRuleArgs", "schedule");
            }
            if ($.schemaFields == null) {
                throw new MissingRequiredPropertyException("BlobInventoryPolicyRuleArgs", "schemaFields");
            }
            if ($.scope == null) {
                throw new MissingRequiredPropertyException("BlobInventoryPolicyRuleArgs", "scope");
            }
            if ($.storageContainerName == null) {
                throw new MissingRequiredPropertyException("BlobInventoryPolicyRuleArgs", "storageContainerName");
            }
            return $;
        }
    }

}
