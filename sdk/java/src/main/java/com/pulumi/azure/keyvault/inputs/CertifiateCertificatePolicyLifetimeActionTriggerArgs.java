// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.keyvault.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertifiateCertificatePolicyLifetimeActionTriggerArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertifiateCertificatePolicyLifetimeActionTriggerArgs Empty = new CertifiateCertificatePolicyLifetimeActionTriggerArgs();

    /**
     * The number of days before the Certificate expires that the action associated with this Trigger should run. Conflicts with `lifetimePercentage`.
     * 
     */
    @Import(name="daysBeforeExpiry")
    private @Nullable Output<Integer> daysBeforeExpiry;

    /**
     * @return The number of days before the Certificate expires that the action associated with this Trigger should run. Conflicts with `lifetimePercentage`.
     * 
     */
    public Optional<Output<Integer>> daysBeforeExpiry() {
        return Optional.ofNullable(this.daysBeforeExpiry);
    }

    /**
     * The percentage at which during the Certificates Lifetime the action associated with this Trigger should run. Conflicts with `daysBeforeExpiry`.
     * 
     */
    @Import(name="lifetimePercentage")
    private @Nullable Output<Integer> lifetimePercentage;

    /**
     * @return The percentage at which during the Certificates Lifetime the action associated with this Trigger should run. Conflicts with `daysBeforeExpiry`.
     * 
     */
    public Optional<Output<Integer>> lifetimePercentage() {
        return Optional.ofNullable(this.lifetimePercentage);
    }

    private CertifiateCertificatePolicyLifetimeActionTriggerArgs() {}

    private CertifiateCertificatePolicyLifetimeActionTriggerArgs(CertifiateCertificatePolicyLifetimeActionTriggerArgs $) {
        this.daysBeforeExpiry = $.daysBeforeExpiry;
        this.lifetimePercentage = $.lifetimePercentage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertifiateCertificatePolicyLifetimeActionTriggerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertifiateCertificatePolicyLifetimeActionTriggerArgs $;

        public Builder() {
            $ = new CertifiateCertificatePolicyLifetimeActionTriggerArgs();
        }

        public Builder(CertifiateCertificatePolicyLifetimeActionTriggerArgs defaults) {
            $ = new CertifiateCertificatePolicyLifetimeActionTriggerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param daysBeforeExpiry The number of days before the Certificate expires that the action associated with this Trigger should run. Conflicts with `lifetimePercentage`.
         * 
         * @return builder
         * 
         */
        public Builder daysBeforeExpiry(@Nullable Output<Integer> daysBeforeExpiry) {
            $.daysBeforeExpiry = daysBeforeExpiry;
            return this;
        }

        /**
         * @param daysBeforeExpiry The number of days before the Certificate expires that the action associated with this Trigger should run. Conflicts with `lifetimePercentage`.
         * 
         * @return builder
         * 
         */
        public Builder daysBeforeExpiry(Integer daysBeforeExpiry) {
            return daysBeforeExpiry(Output.of(daysBeforeExpiry));
        }

        /**
         * @param lifetimePercentage The percentage at which during the Certificates Lifetime the action associated with this Trigger should run. Conflicts with `daysBeforeExpiry`.
         * 
         * @return builder
         * 
         */
        public Builder lifetimePercentage(@Nullable Output<Integer> lifetimePercentage) {
            $.lifetimePercentage = lifetimePercentage;
            return this;
        }

        /**
         * @param lifetimePercentage The percentage at which during the Certificates Lifetime the action associated with this Trigger should run. Conflicts with `daysBeforeExpiry`.
         * 
         * @return builder
         * 
         */
        public Builder lifetimePercentage(Integer lifetimePercentage) {
            return lifetimePercentage(Output.of(lifetimePercentage));
        }

        public CertifiateCertificatePolicyLifetimeActionTriggerArgs build() {
            return $;
        }
    }

}
