// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.outputs;

import com.pulumi.azure.media.outputs.ContentKeyPolicyPolicyOptionFairplayConfiguration;
import com.pulumi.azure.media.outputs.ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense;
import com.pulumi.azure.media.outputs.ContentKeyPolicyPolicyOptionTokenRestriction;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ContentKeyPolicyPolicyOption {
    /**
     * @return Enable a configuration for non-DRM keys.
     * 
     */
    private @Nullable Boolean clearKeyConfigurationEnabled;
    /**
     * @return A `fairplay_configuration` block as defined above. Check license requirements here &lt;https://docs.microsoft.com/azure/media-services/latest/fairplay-license-overview&gt;.
     * 
     */
    private @Nullable ContentKeyPolicyPolicyOptionFairplayConfiguration fairplayConfiguration;
    /**
     * @return The name which should be used for this Policy Option.
     * 
     */
    private String name;
    /**
     * @return Enable an open restriction. License or key will be delivered on every request.
     * 
     */
    private @Nullable Boolean openRestrictionEnabled;
    /**
     * @return One or more `playready_configuration_license` blocks as defined above.
     * 
     */
    private @Nullable List<ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense> playreadyConfigurationLicenses;
    /**
     * @return The custom response data of the PlayReady configuration. This only applies when `playready_configuration_license` is specified.
     * 
     */
    private @Nullable String playreadyResponseCustomData;
    /**
     * @return A `token_restriction` block as defined below.
     * 
     */
    private @Nullable ContentKeyPolicyPolicyOptionTokenRestriction tokenRestriction;
    /**
     * @return The Widevine template.
     * 
     * &gt; **NOTE:** Each policy_option can only have one type of configuration: `fairplay_configuration`, `clear_key_configuration_enabled`, `playready_configuration_license` or `widevine_configuration_template`. And is possible to assign only one type of restriction: `open_restriction_enabled` or `token_restriction`.
     * 
     */
    private @Nullable String widevineConfigurationTemplate;

    private ContentKeyPolicyPolicyOption() {}
    /**
     * @return Enable a configuration for non-DRM keys.
     * 
     */
    public Optional<Boolean> clearKeyConfigurationEnabled() {
        return Optional.ofNullable(this.clearKeyConfigurationEnabled);
    }
    /**
     * @return A `fairplay_configuration` block as defined above. Check license requirements here &lt;https://docs.microsoft.com/azure/media-services/latest/fairplay-license-overview&gt;.
     * 
     */
    public Optional<ContentKeyPolicyPolicyOptionFairplayConfiguration> fairplayConfiguration() {
        return Optional.ofNullable(this.fairplayConfiguration);
    }
    /**
     * @return The name which should be used for this Policy Option.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Enable an open restriction. License or key will be delivered on every request.
     * 
     */
    public Optional<Boolean> openRestrictionEnabled() {
        return Optional.ofNullable(this.openRestrictionEnabled);
    }
    /**
     * @return One or more `playready_configuration_license` blocks as defined above.
     * 
     */
    public List<ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense> playreadyConfigurationLicenses() {
        return this.playreadyConfigurationLicenses == null ? List.of() : this.playreadyConfigurationLicenses;
    }
    /**
     * @return The custom response data of the PlayReady configuration. This only applies when `playready_configuration_license` is specified.
     * 
     */
    public Optional<String> playreadyResponseCustomData() {
        return Optional.ofNullable(this.playreadyResponseCustomData);
    }
    /**
     * @return A `token_restriction` block as defined below.
     * 
     */
    public Optional<ContentKeyPolicyPolicyOptionTokenRestriction> tokenRestriction() {
        return Optional.ofNullable(this.tokenRestriction);
    }
    /**
     * @return The Widevine template.
     * 
     * &gt; **NOTE:** Each policy_option can only have one type of configuration: `fairplay_configuration`, `clear_key_configuration_enabled`, `playready_configuration_license` or `widevine_configuration_template`. And is possible to assign only one type of restriction: `open_restriction_enabled` or `token_restriction`.
     * 
     */
    public Optional<String> widevineConfigurationTemplate() {
        return Optional.ofNullable(this.widevineConfigurationTemplate);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContentKeyPolicyPolicyOption defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean clearKeyConfigurationEnabled;
        private @Nullable ContentKeyPolicyPolicyOptionFairplayConfiguration fairplayConfiguration;
        private String name;
        private @Nullable Boolean openRestrictionEnabled;
        private @Nullable List<ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense> playreadyConfigurationLicenses;
        private @Nullable String playreadyResponseCustomData;
        private @Nullable ContentKeyPolicyPolicyOptionTokenRestriction tokenRestriction;
        private @Nullable String widevineConfigurationTemplate;
        public Builder() {}
        public Builder(ContentKeyPolicyPolicyOption defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clearKeyConfigurationEnabled = defaults.clearKeyConfigurationEnabled;
    	      this.fairplayConfiguration = defaults.fairplayConfiguration;
    	      this.name = defaults.name;
    	      this.openRestrictionEnabled = defaults.openRestrictionEnabled;
    	      this.playreadyConfigurationLicenses = defaults.playreadyConfigurationLicenses;
    	      this.playreadyResponseCustomData = defaults.playreadyResponseCustomData;
    	      this.tokenRestriction = defaults.tokenRestriction;
    	      this.widevineConfigurationTemplate = defaults.widevineConfigurationTemplate;
        }

        @CustomType.Setter
        public Builder clearKeyConfigurationEnabled(@Nullable Boolean clearKeyConfigurationEnabled) {

            this.clearKeyConfigurationEnabled = clearKeyConfigurationEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder fairplayConfiguration(@Nullable ContentKeyPolicyPolicyOptionFairplayConfiguration fairplayConfiguration) {

            this.fairplayConfiguration = fairplayConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ContentKeyPolicyPolicyOption", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder openRestrictionEnabled(@Nullable Boolean openRestrictionEnabled) {

            this.openRestrictionEnabled = openRestrictionEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder playreadyConfigurationLicenses(@Nullable List<ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense> playreadyConfigurationLicenses) {

            this.playreadyConfigurationLicenses = playreadyConfigurationLicenses;
            return this;
        }
        public Builder playreadyConfigurationLicenses(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense... playreadyConfigurationLicenses) {
            return playreadyConfigurationLicenses(List.of(playreadyConfigurationLicenses));
        }
        @CustomType.Setter
        public Builder playreadyResponseCustomData(@Nullable String playreadyResponseCustomData) {

            this.playreadyResponseCustomData = playreadyResponseCustomData;
            return this;
        }
        @CustomType.Setter
        public Builder tokenRestriction(@Nullable ContentKeyPolicyPolicyOptionTokenRestriction tokenRestriction) {

            this.tokenRestriction = tokenRestriction;
            return this;
        }
        @CustomType.Setter
        public Builder widevineConfigurationTemplate(@Nullable String widevineConfigurationTemplate) {

            this.widevineConfigurationTemplate = widevineConfigurationTemplate;
            return this;
        }
        public ContentKeyPolicyPolicyOption build() {
            final var _resultValue = new ContentKeyPolicyPolicyOption();
            _resultValue.clearKeyConfigurationEnabled = clearKeyConfigurationEnabled;
            _resultValue.fairplayConfiguration = fairplayConfiguration;
            _resultValue.name = name;
            _resultValue.openRestrictionEnabled = openRestrictionEnabled;
            _resultValue.playreadyConfigurationLicenses = playreadyConfigurationLicenses;
            _resultValue.playreadyResponseCustomData = playreadyResponseCustomData;
            _resultValue.tokenRestriction = tokenRestriction;
            _resultValue.widevineConfigurationTemplate = widevineConfigurationTemplate;
            return _resultValue;
        }
    }
}
