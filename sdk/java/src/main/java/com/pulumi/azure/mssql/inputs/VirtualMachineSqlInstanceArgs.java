// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mssql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualMachineSqlInstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualMachineSqlInstanceArgs Empty = new VirtualMachineSqlInstanceArgs();

    /**
     * Specifies if the SQL Server is optimized for adhoc workloads. Possible values are `true` and `false`. Defaults to `false`.
     * 
     */
    @Import(name="adhocWorkloadsOptimizationEnabled")
    private @Nullable Output<Boolean> adhocWorkloadsOptimizationEnabled;

    /**
     * @return Specifies if the SQL Server is optimized for adhoc workloads. Possible values are `true` and `false`. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> adhocWorkloadsOptimizationEnabled() {
        return Optional.ofNullable(this.adhocWorkloadsOptimizationEnabled);
    }

    /**
     * Collation of the SQL Server. Defaults to `SQL_Latin1_General_CP1_CI_AS`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="collation")
    private @Nullable Output<String> collation;

    /**
     * @return Collation of the SQL Server. Defaults to `SQL_Latin1_General_CP1_CI_AS`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> collation() {
        return Optional.ofNullable(this.collation);
    }

    /**
     * Specifies if Instant File Initialization is enabled for the SQL Server. Possible values are `true` and `false`. Defaults to `false`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="instantFileInitializationEnabled")
    private @Nullable Output<Boolean> instantFileInitializationEnabled;

    /**
     * @return Specifies if Instant File Initialization is enabled for the SQL Server. Possible values are `true` and `false`. Defaults to `false`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<Boolean>> instantFileInitializationEnabled() {
        return Optional.ofNullable(this.instantFileInitializationEnabled);
    }

    /**
     * Specifies if Lock Pages in Memory is enabled for the SQL Server. Possible values are `true` and `false`. Defaults to `false`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="lockPagesInMemoryEnabled")
    private @Nullable Output<Boolean> lockPagesInMemoryEnabled;

    /**
     * @return Specifies if Lock Pages in Memory is enabled for the SQL Server. Possible values are `true` and `false`. Defaults to `false`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<Boolean>> lockPagesInMemoryEnabled() {
        return Optional.ofNullable(this.lockPagesInMemoryEnabled);
    }

    /**
     * Maximum Degree of Parallelism of the SQL Server. Possible values are between `0` and `32767`. Defaults to `0`.
     * 
     */
    @Import(name="maxDop")
    private @Nullable Output<Integer> maxDop;

    /**
     * @return Maximum Degree of Parallelism of the SQL Server. Possible values are between `0` and `32767`. Defaults to `0`.
     * 
     */
    public Optional<Output<Integer>> maxDop() {
        return Optional.ofNullable(this.maxDop);
    }

    /**
     * Maximum amount memory that SQL Server Memory Manager can allocate to the SQL Server process. Possible values are between `128` and `2147483647` Defaults to `2147483647`.
     * 
     */
    @Import(name="maxServerMemoryMb")
    private @Nullable Output<Integer> maxServerMemoryMb;

    /**
     * @return Maximum amount memory that SQL Server Memory Manager can allocate to the SQL Server process. Possible values are between `128` and `2147483647` Defaults to `2147483647`.
     * 
     */
    public Optional<Output<Integer>> maxServerMemoryMb() {
        return Optional.ofNullable(this.maxServerMemoryMb);
    }

    /**
     * Minimum amount memory that SQL Server Memory Manager can allocate to the SQL Server process. Possible values are between `0` and `2147483647` Defaults to `0`.
     * 
     */
    @Import(name="minServerMemoryMb")
    private @Nullable Output<Integer> minServerMemoryMb;

    /**
     * @return Minimum amount memory that SQL Server Memory Manager can allocate to the SQL Server process. Possible values are between `0` and `2147483647` Defaults to `0`.
     * 
     */
    public Optional<Output<Integer>> minServerMemoryMb() {
        return Optional.ofNullable(this.minServerMemoryMb);
    }

    private VirtualMachineSqlInstanceArgs() {}

    private VirtualMachineSqlInstanceArgs(VirtualMachineSqlInstanceArgs $) {
        this.adhocWorkloadsOptimizationEnabled = $.adhocWorkloadsOptimizationEnabled;
        this.collation = $.collation;
        this.instantFileInitializationEnabled = $.instantFileInitializationEnabled;
        this.lockPagesInMemoryEnabled = $.lockPagesInMemoryEnabled;
        this.maxDop = $.maxDop;
        this.maxServerMemoryMb = $.maxServerMemoryMb;
        this.minServerMemoryMb = $.minServerMemoryMb;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualMachineSqlInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualMachineSqlInstanceArgs $;

        public Builder() {
            $ = new VirtualMachineSqlInstanceArgs();
        }

        public Builder(VirtualMachineSqlInstanceArgs defaults) {
            $ = new VirtualMachineSqlInstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adhocWorkloadsOptimizationEnabled Specifies if the SQL Server is optimized for adhoc workloads. Possible values are `true` and `false`. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder adhocWorkloadsOptimizationEnabled(@Nullable Output<Boolean> adhocWorkloadsOptimizationEnabled) {
            $.adhocWorkloadsOptimizationEnabled = adhocWorkloadsOptimizationEnabled;
            return this;
        }

        /**
         * @param adhocWorkloadsOptimizationEnabled Specifies if the SQL Server is optimized for adhoc workloads. Possible values are `true` and `false`. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder adhocWorkloadsOptimizationEnabled(Boolean adhocWorkloadsOptimizationEnabled) {
            return adhocWorkloadsOptimizationEnabled(Output.of(adhocWorkloadsOptimizationEnabled));
        }

        /**
         * @param collation Collation of the SQL Server. Defaults to `SQL_Latin1_General_CP1_CI_AS`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder collation(@Nullable Output<String> collation) {
            $.collation = collation;
            return this;
        }

        /**
         * @param collation Collation of the SQL Server. Defaults to `SQL_Latin1_General_CP1_CI_AS`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder collation(String collation) {
            return collation(Output.of(collation));
        }

        /**
         * @param instantFileInitializationEnabled Specifies if Instant File Initialization is enabled for the SQL Server. Possible values are `true` and `false`. Defaults to `false`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder instantFileInitializationEnabled(@Nullable Output<Boolean> instantFileInitializationEnabled) {
            $.instantFileInitializationEnabled = instantFileInitializationEnabled;
            return this;
        }

        /**
         * @param instantFileInitializationEnabled Specifies if Instant File Initialization is enabled for the SQL Server. Possible values are `true` and `false`. Defaults to `false`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder instantFileInitializationEnabled(Boolean instantFileInitializationEnabled) {
            return instantFileInitializationEnabled(Output.of(instantFileInitializationEnabled));
        }

        /**
         * @param lockPagesInMemoryEnabled Specifies if Lock Pages in Memory is enabled for the SQL Server. Possible values are `true` and `false`. Defaults to `false`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder lockPagesInMemoryEnabled(@Nullable Output<Boolean> lockPagesInMemoryEnabled) {
            $.lockPagesInMemoryEnabled = lockPagesInMemoryEnabled;
            return this;
        }

        /**
         * @param lockPagesInMemoryEnabled Specifies if Lock Pages in Memory is enabled for the SQL Server. Possible values are `true` and `false`. Defaults to `false`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder lockPagesInMemoryEnabled(Boolean lockPagesInMemoryEnabled) {
            return lockPagesInMemoryEnabled(Output.of(lockPagesInMemoryEnabled));
        }

        /**
         * @param maxDop Maximum Degree of Parallelism of the SQL Server. Possible values are between `0` and `32767`. Defaults to `0`.
         * 
         * @return builder
         * 
         */
        public Builder maxDop(@Nullable Output<Integer> maxDop) {
            $.maxDop = maxDop;
            return this;
        }

        /**
         * @param maxDop Maximum Degree of Parallelism of the SQL Server. Possible values are between `0` and `32767`. Defaults to `0`.
         * 
         * @return builder
         * 
         */
        public Builder maxDop(Integer maxDop) {
            return maxDop(Output.of(maxDop));
        }

        /**
         * @param maxServerMemoryMb Maximum amount memory that SQL Server Memory Manager can allocate to the SQL Server process. Possible values are between `128` and `2147483647` Defaults to `2147483647`.
         * 
         * @return builder
         * 
         */
        public Builder maxServerMemoryMb(@Nullable Output<Integer> maxServerMemoryMb) {
            $.maxServerMemoryMb = maxServerMemoryMb;
            return this;
        }

        /**
         * @param maxServerMemoryMb Maximum amount memory that SQL Server Memory Manager can allocate to the SQL Server process. Possible values are between `128` and `2147483647` Defaults to `2147483647`.
         * 
         * @return builder
         * 
         */
        public Builder maxServerMemoryMb(Integer maxServerMemoryMb) {
            return maxServerMemoryMb(Output.of(maxServerMemoryMb));
        }

        /**
         * @param minServerMemoryMb Minimum amount memory that SQL Server Memory Manager can allocate to the SQL Server process. Possible values are between `0` and `2147483647` Defaults to `0`.
         * 
         * @return builder
         * 
         */
        public Builder minServerMemoryMb(@Nullable Output<Integer> minServerMemoryMb) {
            $.minServerMemoryMb = minServerMemoryMb;
            return this;
        }

        /**
         * @param minServerMemoryMb Minimum amount memory that SQL Server Memory Manager can allocate to the SQL Server process. Possible values are between `0` and `2147483647` Defaults to `0`.
         * 
         * @return builder
         * 
         */
        public Builder minServerMemoryMb(Integer minServerMemoryMb) {
            return minServerMemoryMb(Output.of(minServerMemoryMb));
        }

        public VirtualMachineSqlInstanceArgs build() {
            return $;
        }
    }

}
