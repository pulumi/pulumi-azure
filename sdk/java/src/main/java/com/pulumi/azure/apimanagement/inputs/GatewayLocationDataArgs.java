// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.apimanagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewayLocationDataArgs extends com.pulumi.resources.ResourceArgs {

    public static final GatewayLocationDataArgs Empty = new GatewayLocationDataArgs();

    /**
     * The city or locality where the resource is located.
     * 
     */
    @Import(name="city")
    private @Nullable Output<String> city;

    /**
     * @return The city or locality where the resource is located.
     * 
     */
    public Optional<Output<String>> city() {
        return Optional.ofNullable(this.city);
    }

    /**
     * The district, state, or province where the resource is located.
     * 
     */
    @Import(name="district")
    private @Nullable Output<String> district;

    /**
     * @return The district, state, or province where the resource is located.
     * 
     */
    public Optional<Output<String>> district() {
        return Optional.ofNullable(this.district);
    }

    /**
     * A canonical name for the geographic or physical location.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A canonical name for the geographic or physical location.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The country or region where the resource is located.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The country or region where the resource is located.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    private GatewayLocationDataArgs() {}

    private GatewayLocationDataArgs(GatewayLocationDataArgs $) {
        this.city = $.city;
        this.district = $.district;
        this.name = $.name;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayLocationDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayLocationDataArgs $;

        public Builder() {
            $ = new GatewayLocationDataArgs();
        }

        public Builder(GatewayLocationDataArgs defaults) {
            $ = new GatewayLocationDataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param city The city or locality where the resource is located.
         * 
         * @return builder
         * 
         */
        public Builder city(@Nullable Output<String> city) {
            $.city = city;
            return this;
        }

        /**
         * @param city The city or locality where the resource is located.
         * 
         * @return builder
         * 
         */
        public Builder city(String city) {
            return city(Output.of(city));
        }

        /**
         * @param district The district, state, or province where the resource is located.
         * 
         * @return builder
         * 
         */
        public Builder district(@Nullable Output<String> district) {
            $.district = district;
            return this;
        }

        /**
         * @param district The district, state, or province where the resource is located.
         * 
         * @return builder
         * 
         */
        public Builder district(String district) {
            return district(Output.of(district));
        }

        /**
         * @param name A canonical name for the geographic or physical location.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A canonical name for the geographic or physical location.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param region The country or region where the resource is located.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The country or region where the resource is located.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public GatewayLocationDataArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GatewayLocationDataArgs", "name");
            }
            return $;
        }
    }

}
