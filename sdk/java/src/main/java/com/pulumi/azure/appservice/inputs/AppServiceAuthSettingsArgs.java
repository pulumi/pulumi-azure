// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.inputs;

import com.pulumi.azure.appservice.inputs.AppServiceAuthSettingsActiveDirectoryArgs;
import com.pulumi.azure.appservice.inputs.AppServiceAuthSettingsFacebookArgs;
import com.pulumi.azure.appservice.inputs.AppServiceAuthSettingsGoogleArgs;
import com.pulumi.azure.appservice.inputs.AppServiceAuthSettingsMicrosoftArgs;
import com.pulumi.azure.appservice.inputs.AppServiceAuthSettingsTwitterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppServiceAuthSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppServiceAuthSettingsArgs Empty = new AppServiceAuthSettingsArgs();

    /**
     * A `active_directory` block as defined below.
     * 
     */
    @Import(name="activeDirectory")
    private @Nullable Output<AppServiceAuthSettingsActiveDirectoryArgs> activeDirectory;

    /**
     * @return A `active_directory` block as defined below.
     * 
     */
    public Optional<Output<AppServiceAuthSettingsActiveDirectoryArgs>> activeDirectory() {
        return Optional.ofNullable(this.activeDirectory);
    }

    /**
     * Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form &#34;key=value&#34;.
     * 
     */
    @Import(name="additionalLoginParams")
    private @Nullable Output<Map<String,String>> additionalLoginParams;

    /**
     * @return Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form &#34;key=value&#34;.
     * 
     */
    public Optional<Output<Map<String,String>>> additionalLoginParams() {
        return Optional.ofNullable(this.additionalLoginParams);
    }

    /**
     * External URLs that can be redirected to as part of logging in or logging out of the app.
     * 
     */
    @Import(name="allowedExternalRedirectUrls")
    private @Nullable Output<List<String>> allowedExternalRedirectUrls;

    /**
     * @return External URLs that can be redirected to as part of logging in or logging out of the app.
     * 
     */
    public Optional<Output<List<String>>> allowedExternalRedirectUrls() {
        return Optional.ofNullable(this.allowedExternalRedirectUrls);
    }

    /**
     * The default provider to use when multiple providers have been set up. Possible values are `AzureActiveDirectory`, `Facebook`, `Google`, `MicrosoftAccount` and `Twitter`.
     * 
     * &gt; **NOTE:** When using multiple providers, the default provider must be set for settings like `unauthenticated_client_action` to work.
     * 
     */
    @Import(name="defaultProvider")
    private @Nullable Output<String> defaultProvider;

    /**
     * @return The default provider to use when multiple providers have been set up. Possible values are `AzureActiveDirectory`, `Facebook`, `Google`, `MicrosoftAccount` and `Twitter`.
     * 
     * &gt; **NOTE:** When using multiple providers, the default provider must be set for settings like `unauthenticated_client_action` to work.
     * 
     */
    public Optional<Output<String>> defaultProvider() {
        return Optional.ofNullable(this.defaultProvider);
    }

    /**
     * Is Authentication enabled?
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Is Authentication enabled?
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * A `facebook` block as defined below.
     * 
     */
    @Import(name="facebook")
    private @Nullable Output<AppServiceAuthSettingsFacebookArgs> facebook;

    /**
     * @return A `facebook` block as defined below.
     * 
     */
    public Optional<Output<AppServiceAuthSettingsFacebookArgs>> facebook() {
        return Optional.ofNullable(this.facebook);
    }

    /**
     * A `google` block as defined below.
     * 
     */
    @Import(name="google")
    private @Nullable Output<AppServiceAuthSettingsGoogleArgs> google;

    /**
     * @return A `google` block as defined below.
     * 
     */
    public Optional<Output<AppServiceAuthSettingsGoogleArgs>> google() {
        return Optional.ofNullable(this.google);
    }

    /**
     * Issuer URI. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. &lt;https://sts.windows.net/{tenant-guid}/&gt;.
     * 
     */
    @Import(name="issuer")
    private @Nullable Output<String> issuer;

    /**
     * @return Issuer URI. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. &lt;https://sts.windows.net/{tenant-guid}/&gt;.
     * 
     */
    public Optional<Output<String>> issuer() {
        return Optional.ofNullable(this.issuer);
    }

    /**
     * A `microsoft` block as defined below.
     * 
     */
    @Import(name="microsoft")
    private @Nullable Output<AppServiceAuthSettingsMicrosoftArgs> microsoft;

    /**
     * @return A `microsoft` block as defined below.
     * 
     */
    public Optional<Output<AppServiceAuthSettingsMicrosoftArgs>> microsoft() {
        return Optional.ofNullable(this.microsoft);
    }

    /**
     * The runtime version of the Authentication/Authorization module.
     * 
     */
    @Import(name="runtimeVersion")
    private @Nullable Output<String> runtimeVersion;

    /**
     * @return The runtime version of the Authentication/Authorization module.
     * 
     */
    public Optional<Output<String>> runtimeVersion() {
        return Optional.ofNullable(this.runtimeVersion);
    }

    /**
     * The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to `72`.
     * 
     */
    @Import(name="tokenRefreshExtensionHours")
    private @Nullable Output<Double> tokenRefreshExtensionHours;

    /**
     * @return The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to `72`.
     * 
     */
    public Optional<Output<Double>> tokenRefreshExtensionHours() {
        return Optional.ofNullable(this.tokenRefreshExtensionHours);
    }

    /**
     * If enabled the module will durably store platform-specific security tokens that are obtained during login flows. Defaults to `false`.
     * 
     */
    @Import(name="tokenStoreEnabled")
    private @Nullable Output<Boolean> tokenStoreEnabled;

    /**
     * @return If enabled the module will durably store platform-specific security tokens that are obtained during login flows. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> tokenStoreEnabled() {
        return Optional.ofNullable(this.tokenStoreEnabled);
    }

    /**
     * A `twitter` block as defined below.
     * 
     */
    @Import(name="twitter")
    private @Nullable Output<AppServiceAuthSettingsTwitterArgs> twitter;

    /**
     * @return A `twitter` block as defined below.
     * 
     */
    public Optional<Output<AppServiceAuthSettingsTwitterArgs>> twitter() {
        return Optional.ofNullable(this.twitter);
    }

    /**
     * The action to take when an unauthenticated client attempts to access the app. Possible values are `AllowAnonymous` and `RedirectToLoginPage`.
     * 
     */
    @Import(name="unauthenticatedClientAction")
    private @Nullable Output<String> unauthenticatedClientAction;

    /**
     * @return The action to take when an unauthenticated client attempts to access the app. Possible values are `AllowAnonymous` and `RedirectToLoginPage`.
     * 
     */
    public Optional<Output<String>> unauthenticatedClientAction() {
        return Optional.ofNullable(this.unauthenticatedClientAction);
    }

    private AppServiceAuthSettingsArgs() {}

    private AppServiceAuthSettingsArgs(AppServiceAuthSettingsArgs $) {
        this.activeDirectory = $.activeDirectory;
        this.additionalLoginParams = $.additionalLoginParams;
        this.allowedExternalRedirectUrls = $.allowedExternalRedirectUrls;
        this.defaultProvider = $.defaultProvider;
        this.enabled = $.enabled;
        this.facebook = $.facebook;
        this.google = $.google;
        this.issuer = $.issuer;
        this.microsoft = $.microsoft;
        this.runtimeVersion = $.runtimeVersion;
        this.tokenRefreshExtensionHours = $.tokenRefreshExtensionHours;
        this.tokenStoreEnabled = $.tokenStoreEnabled;
        this.twitter = $.twitter;
        this.unauthenticatedClientAction = $.unauthenticatedClientAction;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppServiceAuthSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppServiceAuthSettingsArgs $;

        public Builder() {
            $ = new AppServiceAuthSettingsArgs();
        }

        public Builder(AppServiceAuthSettingsArgs defaults) {
            $ = new AppServiceAuthSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activeDirectory A `active_directory` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder activeDirectory(@Nullable Output<AppServiceAuthSettingsActiveDirectoryArgs> activeDirectory) {
            $.activeDirectory = activeDirectory;
            return this;
        }

        /**
         * @param activeDirectory A `active_directory` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder activeDirectory(AppServiceAuthSettingsActiveDirectoryArgs activeDirectory) {
            return activeDirectory(Output.of(activeDirectory));
        }

        /**
         * @param additionalLoginParams Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form &#34;key=value&#34;.
         * 
         * @return builder
         * 
         */
        public Builder additionalLoginParams(@Nullable Output<Map<String,String>> additionalLoginParams) {
            $.additionalLoginParams = additionalLoginParams;
            return this;
        }

        /**
         * @param additionalLoginParams Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form &#34;key=value&#34;.
         * 
         * @return builder
         * 
         */
        public Builder additionalLoginParams(Map<String,String> additionalLoginParams) {
            return additionalLoginParams(Output.of(additionalLoginParams));
        }

        /**
         * @param allowedExternalRedirectUrls External URLs that can be redirected to as part of logging in or logging out of the app.
         * 
         * @return builder
         * 
         */
        public Builder allowedExternalRedirectUrls(@Nullable Output<List<String>> allowedExternalRedirectUrls) {
            $.allowedExternalRedirectUrls = allowedExternalRedirectUrls;
            return this;
        }

        /**
         * @param allowedExternalRedirectUrls External URLs that can be redirected to as part of logging in or logging out of the app.
         * 
         * @return builder
         * 
         */
        public Builder allowedExternalRedirectUrls(List<String> allowedExternalRedirectUrls) {
            return allowedExternalRedirectUrls(Output.of(allowedExternalRedirectUrls));
        }

        /**
         * @param allowedExternalRedirectUrls External URLs that can be redirected to as part of logging in or logging out of the app.
         * 
         * @return builder
         * 
         */
        public Builder allowedExternalRedirectUrls(String... allowedExternalRedirectUrls) {
            return allowedExternalRedirectUrls(List.of(allowedExternalRedirectUrls));
        }

        /**
         * @param defaultProvider The default provider to use when multiple providers have been set up. Possible values are `AzureActiveDirectory`, `Facebook`, `Google`, `MicrosoftAccount` and `Twitter`.
         * 
         * &gt; **NOTE:** When using multiple providers, the default provider must be set for settings like `unauthenticated_client_action` to work.
         * 
         * @return builder
         * 
         */
        public Builder defaultProvider(@Nullable Output<String> defaultProvider) {
            $.defaultProvider = defaultProvider;
            return this;
        }

        /**
         * @param defaultProvider The default provider to use when multiple providers have been set up. Possible values are `AzureActiveDirectory`, `Facebook`, `Google`, `MicrosoftAccount` and `Twitter`.
         * 
         * &gt; **NOTE:** When using multiple providers, the default provider must be set for settings like `unauthenticated_client_action` to work.
         * 
         * @return builder
         * 
         */
        public Builder defaultProvider(String defaultProvider) {
            return defaultProvider(Output.of(defaultProvider));
        }

        /**
         * @param enabled Is Authentication enabled?
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Is Authentication enabled?
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param facebook A `facebook` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder facebook(@Nullable Output<AppServiceAuthSettingsFacebookArgs> facebook) {
            $.facebook = facebook;
            return this;
        }

        /**
         * @param facebook A `facebook` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder facebook(AppServiceAuthSettingsFacebookArgs facebook) {
            return facebook(Output.of(facebook));
        }

        /**
         * @param google A `google` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder google(@Nullable Output<AppServiceAuthSettingsGoogleArgs> google) {
            $.google = google;
            return this;
        }

        /**
         * @param google A `google` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder google(AppServiceAuthSettingsGoogleArgs google) {
            return google(Output.of(google));
        }

        /**
         * @param issuer Issuer URI. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. &lt;https://sts.windows.net/{tenant-guid}/&gt;.
         * 
         * @return builder
         * 
         */
        public Builder issuer(@Nullable Output<String> issuer) {
            $.issuer = issuer;
            return this;
        }

        /**
         * @param issuer Issuer URI. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. &lt;https://sts.windows.net/{tenant-guid}/&gt;.
         * 
         * @return builder
         * 
         */
        public Builder issuer(String issuer) {
            return issuer(Output.of(issuer));
        }

        /**
         * @param microsoft A `microsoft` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder microsoft(@Nullable Output<AppServiceAuthSettingsMicrosoftArgs> microsoft) {
            $.microsoft = microsoft;
            return this;
        }

        /**
         * @param microsoft A `microsoft` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder microsoft(AppServiceAuthSettingsMicrosoftArgs microsoft) {
            return microsoft(Output.of(microsoft));
        }

        /**
         * @param runtimeVersion The runtime version of the Authentication/Authorization module.
         * 
         * @return builder
         * 
         */
        public Builder runtimeVersion(@Nullable Output<String> runtimeVersion) {
            $.runtimeVersion = runtimeVersion;
            return this;
        }

        /**
         * @param runtimeVersion The runtime version of the Authentication/Authorization module.
         * 
         * @return builder
         * 
         */
        public Builder runtimeVersion(String runtimeVersion) {
            return runtimeVersion(Output.of(runtimeVersion));
        }

        /**
         * @param tokenRefreshExtensionHours The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to `72`.
         * 
         * @return builder
         * 
         */
        public Builder tokenRefreshExtensionHours(@Nullable Output<Double> tokenRefreshExtensionHours) {
            $.tokenRefreshExtensionHours = tokenRefreshExtensionHours;
            return this;
        }

        /**
         * @param tokenRefreshExtensionHours The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to `72`.
         * 
         * @return builder
         * 
         */
        public Builder tokenRefreshExtensionHours(Double tokenRefreshExtensionHours) {
            return tokenRefreshExtensionHours(Output.of(tokenRefreshExtensionHours));
        }

        /**
         * @param tokenStoreEnabled If enabled the module will durably store platform-specific security tokens that are obtained during login flows. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder tokenStoreEnabled(@Nullable Output<Boolean> tokenStoreEnabled) {
            $.tokenStoreEnabled = tokenStoreEnabled;
            return this;
        }

        /**
         * @param tokenStoreEnabled If enabled the module will durably store platform-specific security tokens that are obtained during login flows. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder tokenStoreEnabled(Boolean tokenStoreEnabled) {
            return tokenStoreEnabled(Output.of(tokenStoreEnabled));
        }

        /**
         * @param twitter A `twitter` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder twitter(@Nullable Output<AppServiceAuthSettingsTwitterArgs> twitter) {
            $.twitter = twitter;
            return this;
        }

        /**
         * @param twitter A `twitter` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder twitter(AppServiceAuthSettingsTwitterArgs twitter) {
            return twitter(Output.of(twitter));
        }

        /**
         * @param unauthenticatedClientAction The action to take when an unauthenticated client attempts to access the app. Possible values are `AllowAnonymous` and `RedirectToLoginPage`.
         * 
         * @return builder
         * 
         */
        public Builder unauthenticatedClientAction(@Nullable Output<String> unauthenticatedClientAction) {
            $.unauthenticatedClientAction = unauthenticatedClientAction;
            return this;
        }

        /**
         * @param unauthenticatedClientAction The action to take when an unauthenticated client attempts to access the app. Possible values are `AllowAnonymous` and `RedirectToLoginPage`.
         * 
         * @return builder
         * 
         */
        public Builder unauthenticatedClientAction(String unauthenticatedClientAction) {
            return unauthenticatedClientAction(Output.of(unauthenticatedClientAction));
        }

        public AppServiceAuthSettingsArgs build() {
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("AppServiceAuthSettingsArgs", "enabled");
            }
            return $;
        }
    }

}
