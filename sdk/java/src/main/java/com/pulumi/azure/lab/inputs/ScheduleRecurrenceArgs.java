// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.lab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScheduleRecurrenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScheduleRecurrenceArgs Empty = new ScheduleRecurrenceArgs();

    /**
     * When the recurrence will expire in RFC-3339 format.
     * 
     */
    @Import(name="expirationDate", required=true)
    private Output<String> expirationDate;

    /**
     * @return When the recurrence will expire in RFC-3339 format.
     * 
     */
    public Output<String> expirationDate() {
        return this.expirationDate;
    }

    /**
     * The frequency of the recurrence. Possible values are `Daily` and `Weekly`.
     * 
     */
    @Import(name="frequency", required=true)
    private Output<String> frequency;

    /**
     * @return The frequency of the recurrence. Possible values are `Daily` and `Weekly`.
     * 
     */
    public Output<String> frequency() {
        return this.frequency;
    }

    /**
     * The interval to invoke the schedule on. Possible values are between `1` and `365`.
     * 
     */
    @Import(name="interval")
    private @Nullable Output<Integer> interval;

    /**
     * @return The interval to invoke the schedule on. Possible values are between `1` and `365`.
     * 
     */
    public Optional<Output<Integer>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * The interval to invoke the schedule on. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
     * 
     */
    @Import(name="weekDays")
    private @Nullable Output<List<String>> weekDays;

    /**
     * @return The interval to invoke the schedule on. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
     * 
     */
    public Optional<Output<List<String>>> weekDays() {
        return Optional.ofNullable(this.weekDays);
    }

    private ScheduleRecurrenceArgs() {}

    private ScheduleRecurrenceArgs(ScheduleRecurrenceArgs $) {
        this.expirationDate = $.expirationDate;
        this.frequency = $.frequency;
        this.interval = $.interval;
        this.weekDays = $.weekDays;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduleRecurrenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduleRecurrenceArgs $;

        public Builder() {
            $ = new ScheduleRecurrenceArgs();
        }

        public Builder(ScheduleRecurrenceArgs defaults) {
            $ = new ScheduleRecurrenceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param expirationDate When the recurrence will expire in RFC-3339 format.
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(Output<String> expirationDate) {
            $.expirationDate = expirationDate;
            return this;
        }

        /**
         * @param expirationDate When the recurrence will expire in RFC-3339 format.
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(String expirationDate) {
            return expirationDate(Output.of(expirationDate));
        }

        /**
         * @param frequency The frequency of the recurrence. Possible values are `Daily` and `Weekly`.
         * 
         * @return builder
         * 
         */
        public Builder frequency(Output<String> frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param frequency The frequency of the recurrence. Possible values are `Daily` and `Weekly`.
         * 
         * @return builder
         * 
         */
        public Builder frequency(String frequency) {
            return frequency(Output.of(frequency));
        }

        /**
         * @param interval The interval to invoke the schedule on. Possible values are between `1` and `365`.
         * 
         * @return builder
         * 
         */
        public Builder interval(@Nullable Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval The interval to invoke the schedule on. Possible values are between `1` and `365`.
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param weekDays The interval to invoke the schedule on. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
         * 
         * @return builder
         * 
         */
        public Builder weekDays(@Nullable Output<List<String>> weekDays) {
            $.weekDays = weekDays;
            return this;
        }

        /**
         * @param weekDays The interval to invoke the schedule on. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
         * 
         * @return builder
         * 
         */
        public Builder weekDays(List<String> weekDays) {
            return weekDays(Output.of(weekDays));
        }

        /**
         * @param weekDays The interval to invoke the schedule on. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
         * 
         * @return builder
         * 
         */
        public Builder weekDays(String... weekDays) {
            return weekDays(List.of(weekDays));
        }

        public ScheduleRecurrenceArgs build() {
            if ($.expirationDate == null) {
                throw new MissingRequiredPropertyException("ScheduleRecurrenceArgs", "expirationDate");
            }
            if ($.frequency == null) {
                throw new MissingRequiredPropertyException("ScheduleRecurrenceArgs", "frequency");
            }
            return $;
        }
    }

}
