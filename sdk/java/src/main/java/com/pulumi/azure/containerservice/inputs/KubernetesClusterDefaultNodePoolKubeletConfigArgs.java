// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KubernetesClusterDefaultNodePoolKubeletConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final KubernetesClusterDefaultNodePoolKubeletConfigArgs Empty = new KubernetesClusterDefaultNodePoolKubeletConfigArgs();

    /**
     * Specifies the allow list of unsafe sysctls command or patterns (ending in `*`).
     * 
     */
    @Import(name="allowedUnsafeSysctls")
    private @Nullable Output<List<String>> allowedUnsafeSysctls;

    /**
     * @return Specifies the allow list of unsafe sysctls command or patterns (ending in `*`).
     * 
     */
    public Optional<Output<List<String>>> allowedUnsafeSysctls() {
        return Optional.ofNullable(this.allowedUnsafeSysctls);
    }

    /**
     * Specifies the maximum number of container log files that can be present for a container. must be at least 2.
     * 
     */
    @Import(name="containerLogMaxLine")
    private @Nullable Output<Integer> containerLogMaxLine;

    /**
     * @return Specifies the maximum number of container log files that can be present for a container. must be at least 2.
     * 
     */
    public Optional<Output<Integer>> containerLogMaxLine() {
        return Optional.ofNullable(this.containerLogMaxLine);
    }

    /**
     * Specifies the maximum size (e.g. 10MB) of container log file before it is rotated.
     * 
     */
    @Import(name="containerLogMaxSizeMb")
    private @Nullable Output<Integer> containerLogMaxSizeMb;

    /**
     * @return Specifies the maximum size (e.g. 10MB) of container log file before it is rotated.
     * 
     */
    public Optional<Output<Integer>> containerLogMaxSizeMb() {
        return Optional.ofNullable(this.containerLogMaxSizeMb);
    }

    /**
     * Is CPU CFS quota enforcement for containers enabled?
     * 
     */
    @Import(name="cpuCfsQuotaEnabled")
    private @Nullable Output<Boolean> cpuCfsQuotaEnabled;

    /**
     * @return Is CPU CFS quota enforcement for containers enabled?
     * 
     */
    public Optional<Output<Boolean>> cpuCfsQuotaEnabled() {
        return Optional.ofNullable(this.cpuCfsQuotaEnabled);
    }

    /**
     * Specifies the CPU CFS quota period value.
     * 
     */
    @Import(name="cpuCfsQuotaPeriod")
    private @Nullable Output<String> cpuCfsQuotaPeriod;

    /**
     * @return Specifies the CPU CFS quota period value.
     * 
     */
    public Optional<Output<String>> cpuCfsQuotaPeriod() {
        return Optional.ofNullable(this.cpuCfsQuotaPeriod);
    }

    /**
     * Specifies the CPU Manager policy to use. Possible values are `none` and `static`,.
     * 
     */
    @Import(name="cpuManagerPolicy")
    private @Nullable Output<String> cpuManagerPolicy;

    /**
     * @return Specifies the CPU Manager policy to use. Possible values are `none` and `static`,.
     * 
     */
    public Optional<Output<String>> cpuManagerPolicy() {
        return Optional.ofNullable(this.cpuManagerPolicy);
    }

    /**
     * Specifies the percent of disk usage above which image garbage collection is always run. Must be between `0` and `100`.
     * 
     */
    @Import(name="imageGcHighThreshold")
    private @Nullable Output<Integer> imageGcHighThreshold;

    /**
     * @return Specifies the percent of disk usage above which image garbage collection is always run. Must be between `0` and `100`.
     * 
     */
    public Optional<Output<Integer>> imageGcHighThreshold() {
        return Optional.ofNullable(this.imageGcHighThreshold);
    }

    /**
     * Specifies the percent of disk usage lower than which image garbage collection is never run. Must be between `0` and `100`.
     * 
     */
    @Import(name="imageGcLowThreshold")
    private @Nullable Output<Integer> imageGcLowThreshold;

    /**
     * @return Specifies the percent of disk usage lower than which image garbage collection is never run. Must be between `0` and `100`.
     * 
     */
    public Optional<Output<Integer>> imageGcLowThreshold() {
        return Optional.ofNullable(this.imageGcLowThreshold);
    }

    /**
     * Specifies the maximum number of processes per pod.
     * 
     */
    @Import(name="podMaxPid")
    private @Nullable Output<Integer> podMaxPid;

    /**
     * @return Specifies the maximum number of processes per pod.
     * 
     */
    public Optional<Output<Integer>> podMaxPid() {
        return Optional.ofNullable(this.podMaxPid);
    }

    /**
     * Specifies the Topology Manager policy to use. Possible values are `none`, `best-effort`, `restricted` or `single-numa-node`.
     * 
     */
    @Import(name="topologyManagerPolicy")
    private @Nullable Output<String> topologyManagerPolicy;

    /**
     * @return Specifies the Topology Manager policy to use. Possible values are `none`, `best-effort`, `restricted` or `single-numa-node`.
     * 
     */
    public Optional<Output<String>> topologyManagerPolicy() {
        return Optional.ofNullable(this.topologyManagerPolicy);
    }

    private KubernetesClusterDefaultNodePoolKubeletConfigArgs() {}

    private KubernetesClusterDefaultNodePoolKubeletConfigArgs(KubernetesClusterDefaultNodePoolKubeletConfigArgs $) {
        this.allowedUnsafeSysctls = $.allowedUnsafeSysctls;
        this.containerLogMaxLine = $.containerLogMaxLine;
        this.containerLogMaxSizeMb = $.containerLogMaxSizeMb;
        this.cpuCfsQuotaEnabled = $.cpuCfsQuotaEnabled;
        this.cpuCfsQuotaPeriod = $.cpuCfsQuotaPeriod;
        this.cpuManagerPolicy = $.cpuManagerPolicy;
        this.imageGcHighThreshold = $.imageGcHighThreshold;
        this.imageGcLowThreshold = $.imageGcLowThreshold;
        this.podMaxPid = $.podMaxPid;
        this.topologyManagerPolicy = $.topologyManagerPolicy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KubernetesClusterDefaultNodePoolKubeletConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KubernetesClusterDefaultNodePoolKubeletConfigArgs $;

        public Builder() {
            $ = new KubernetesClusterDefaultNodePoolKubeletConfigArgs();
        }

        public Builder(KubernetesClusterDefaultNodePoolKubeletConfigArgs defaults) {
            $ = new KubernetesClusterDefaultNodePoolKubeletConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedUnsafeSysctls Specifies the allow list of unsafe sysctls command or patterns (ending in `*`).
         * 
         * @return builder
         * 
         */
        public Builder allowedUnsafeSysctls(@Nullable Output<List<String>> allowedUnsafeSysctls) {
            $.allowedUnsafeSysctls = allowedUnsafeSysctls;
            return this;
        }

        /**
         * @param allowedUnsafeSysctls Specifies the allow list of unsafe sysctls command or patterns (ending in `*`).
         * 
         * @return builder
         * 
         */
        public Builder allowedUnsafeSysctls(List<String> allowedUnsafeSysctls) {
            return allowedUnsafeSysctls(Output.of(allowedUnsafeSysctls));
        }

        /**
         * @param allowedUnsafeSysctls Specifies the allow list of unsafe sysctls command or patterns (ending in `*`).
         * 
         * @return builder
         * 
         */
        public Builder allowedUnsafeSysctls(String... allowedUnsafeSysctls) {
            return allowedUnsafeSysctls(List.of(allowedUnsafeSysctls));
        }

        /**
         * @param containerLogMaxLine Specifies the maximum number of container log files that can be present for a container. must be at least 2.
         * 
         * @return builder
         * 
         */
        public Builder containerLogMaxLine(@Nullable Output<Integer> containerLogMaxLine) {
            $.containerLogMaxLine = containerLogMaxLine;
            return this;
        }

        /**
         * @param containerLogMaxLine Specifies the maximum number of container log files that can be present for a container. must be at least 2.
         * 
         * @return builder
         * 
         */
        public Builder containerLogMaxLine(Integer containerLogMaxLine) {
            return containerLogMaxLine(Output.of(containerLogMaxLine));
        }

        /**
         * @param containerLogMaxSizeMb Specifies the maximum size (e.g. 10MB) of container log file before it is rotated.
         * 
         * @return builder
         * 
         */
        public Builder containerLogMaxSizeMb(@Nullable Output<Integer> containerLogMaxSizeMb) {
            $.containerLogMaxSizeMb = containerLogMaxSizeMb;
            return this;
        }

        /**
         * @param containerLogMaxSizeMb Specifies the maximum size (e.g. 10MB) of container log file before it is rotated.
         * 
         * @return builder
         * 
         */
        public Builder containerLogMaxSizeMb(Integer containerLogMaxSizeMb) {
            return containerLogMaxSizeMb(Output.of(containerLogMaxSizeMb));
        }

        /**
         * @param cpuCfsQuotaEnabled Is CPU CFS quota enforcement for containers enabled?
         * 
         * @return builder
         * 
         */
        public Builder cpuCfsQuotaEnabled(@Nullable Output<Boolean> cpuCfsQuotaEnabled) {
            $.cpuCfsQuotaEnabled = cpuCfsQuotaEnabled;
            return this;
        }

        /**
         * @param cpuCfsQuotaEnabled Is CPU CFS quota enforcement for containers enabled?
         * 
         * @return builder
         * 
         */
        public Builder cpuCfsQuotaEnabled(Boolean cpuCfsQuotaEnabled) {
            return cpuCfsQuotaEnabled(Output.of(cpuCfsQuotaEnabled));
        }

        /**
         * @param cpuCfsQuotaPeriod Specifies the CPU CFS quota period value.
         * 
         * @return builder
         * 
         */
        public Builder cpuCfsQuotaPeriod(@Nullable Output<String> cpuCfsQuotaPeriod) {
            $.cpuCfsQuotaPeriod = cpuCfsQuotaPeriod;
            return this;
        }

        /**
         * @param cpuCfsQuotaPeriod Specifies the CPU CFS quota period value.
         * 
         * @return builder
         * 
         */
        public Builder cpuCfsQuotaPeriod(String cpuCfsQuotaPeriod) {
            return cpuCfsQuotaPeriod(Output.of(cpuCfsQuotaPeriod));
        }

        /**
         * @param cpuManagerPolicy Specifies the CPU Manager policy to use. Possible values are `none` and `static`,.
         * 
         * @return builder
         * 
         */
        public Builder cpuManagerPolicy(@Nullable Output<String> cpuManagerPolicy) {
            $.cpuManagerPolicy = cpuManagerPolicy;
            return this;
        }

        /**
         * @param cpuManagerPolicy Specifies the CPU Manager policy to use. Possible values are `none` and `static`,.
         * 
         * @return builder
         * 
         */
        public Builder cpuManagerPolicy(String cpuManagerPolicy) {
            return cpuManagerPolicy(Output.of(cpuManagerPolicy));
        }

        /**
         * @param imageGcHighThreshold Specifies the percent of disk usage above which image garbage collection is always run. Must be between `0` and `100`.
         * 
         * @return builder
         * 
         */
        public Builder imageGcHighThreshold(@Nullable Output<Integer> imageGcHighThreshold) {
            $.imageGcHighThreshold = imageGcHighThreshold;
            return this;
        }

        /**
         * @param imageGcHighThreshold Specifies the percent of disk usage above which image garbage collection is always run. Must be between `0` and `100`.
         * 
         * @return builder
         * 
         */
        public Builder imageGcHighThreshold(Integer imageGcHighThreshold) {
            return imageGcHighThreshold(Output.of(imageGcHighThreshold));
        }

        /**
         * @param imageGcLowThreshold Specifies the percent of disk usage lower than which image garbage collection is never run. Must be between `0` and `100`.
         * 
         * @return builder
         * 
         */
        public Builder imageGcLowThreshold(@Nullable Output<Integer> imageGcLowThreshold) {
            $.imageGcLowThreshold = imageGcLowThreshold;
            return this;
        }

        /**
         * @param imageGcLowThreshold Specifies the percent of disk usage lower than which image garbage collection is never run. Must be between `0` and `100`.
         * 
         * @return builder
         * 
         */
        public Builder imageGcLowThreshold(Integer imageGcLowThreshold) {
            return imageGcLowThreshold(Output.of(imageGcLowThreshold));
        }

        /**
         * @param podMaxPid Specifies the maximum number of processes per pod.
         * 
         * @return builder
         * 
         */
        public Builder podMaxPid(@Nullable Output<Integer> podMaxPid) {
            $.podMaxPid = podMaxPid;
            return this;
        }

        /**
         * @param podMaxPid Specifies the maximum number of processes per pod.
         * 
         * @return builder
         * 
         */
        public Builder podMaxPid(Integer podMaxPid) {
            return podMaxPid(Output.of(podMaxPid));
        }

        /**
         * @param topologyManagerPolicy Specifies the Topology Manager policy to use. Possible values are `none`, `best-effort`, `restricted` or `single-numa-node`.
         * 
         * @return builder
         * 
         */
        public Builder topologyManagerPolicy(@Nullable Output<String> topologyManagerPolicy) {
            $.topologyManagerPolicy = topologyManagerPolicy;
            return this;
        }

        /**
         * @param topologyManagerPolicy Specifies the Topology Manager policy to use. Possible values are `none`, `best-effort`, `restricted` or `single-numa-node`.
         * 
         * @return builder
         * 
         */
        public Builder topologyManagerPolicy(String topologyManagerPolicy) {
            return topologyManagerPolicy(Output.of(topologyManagerPolicy));
        }

        public KubernetesClusterDefaultNodePoolKubeletConfigArgs build() {
            return $;
        }
    }

}
