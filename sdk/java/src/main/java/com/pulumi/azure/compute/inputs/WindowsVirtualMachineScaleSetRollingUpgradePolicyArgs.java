// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WindowsVirtualMachineScaleSetRollingUpgradePolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final WindowsVirtualMachineScaleSetRollingUpgradePolicyArgs Empty = new WindowsVirtualMachineScaleSetRollingUpgradePolicyArgs();

    /**
     * Should the Virtual Machine Scale Set ignore the Azure Zone boundaries when constructing upgrade batches? Possible values are `true` or `false`.
     * 
     */
    @Import(name="crossZoneUpgradesEnabled")
    private @Nullable Output<Boolean> crossZoneUpgradesEnabled;

    /**
     * @return Should the Virtual Machine Scale Set ignore the Azure Zone boundaries when constructing upgrade batches? Possible values are `true` or `false`.
     * 
     */
    public Optional<Output<Boolean>> crossZoneUpgradesEnabled() {
        return Optional.ofNullable(this.crossZoneUpgradesEnabled);
    }

    /**
     * The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability.
     * 
     */
    @Import(name="maxBatchInstancePercent", required=true)
    private Output<Integer> maxBatchInstancePercent;

    /**
     * @return The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability.
     * 
     */
    public Output<Integer> maxBatchInstancePercent() {
        return this.maxBatchInstancePercent;
    }

    /**
     * The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch.
     * 
     */
    @Import(name="maxUnhealthyInstancePercent", required=true)
    private Output<Integer> maxUnhealthyInstancePercent;

    /**
     * @return The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch.
     * 
     */
    public Output<Integer> maxUnhealthyInstancePercent() {
        return this.maxUnhealthyInstancePercent;
    }

    /**
     * The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts.
     * 
     */
    @Import(name="maxUnhealthyUpgradedInstancePercent", required=true)
    private Output<Integer> maxUnhealthyUpgradedInstancePercent;

    /**
     * @return The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts.
     * 
     */
    public Output<Integer> maxUnhealthyUpgradedInstancePercent() {
        return this.maxUnhealthyUpgradedInstancePercent;
    }

    /**
     * The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format.
     * 
     */
    @Import(name="pauseTimeBetweenBatches", required=true)
    private Output<String> pauseTimeBetweenBatches;

    /**
     * @return The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format.
     * 
     */
    public Output<String> pauseTimeBetweenBatches() {
        return this.pauseTimeBetweenBatches;
    }

    /**
     * Upgrade all unhealthy instances in a scale set before any healthy instances. Possible values are `true` or `false`.
     * 
     */
    @Import(name="prioritizeUnhealthyInstancesEnabled")
    private @Nullable Output<Boolean> prioritizeUnhealthyInstancesEnabled;

    /**
     * @return Upgrade all unhealthy instances in a scale set before any healthy instances. Possible values are `true` or `false`.
     * 
     */
    public Optional<Output<Boolean>> prioritizeUnhealthyInstancesEnabled() {
        return Optional.ofNullable(this.prioritizeUnhealthyInstancesEnabled);
    }

    private WindowsVirtualMachineScaleSetRollingUpgradePolicyArgs() {}

    private WindowsVirtualMachineScaleSetRollingUpgradePolicyArgs(WindowsVirtualMachineScaleSetRollingUpgradePolicyArgs $) {
        this.crossZoneUpgradesEnabled = $.crossZoneUpgradesEnabled;
        this.maxBatchInstancePercent = $.maxBatchInstancePercent;
        this.maxUnhealthyInstancePercent = $.maxUnhealthyInstancePercent;
        this.maxUnhealthyUpgradedInstancePercent = $.maxUnhealthyUpgradedInstancePercent;
        this.pauseTimeBetweenBatches = $.pauseTimeBetweenBatches;
        this.prioritizeUnhealthyInstancesEnabled = $.prioritizeUnhealthyInstancesEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WindowsVirtualMachineScaleSetRollingUpgradePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WindowsVirtualMachineScaleSetRollingUpgradePolicyArgs $;

        public Builder() {
            $ = new WindowsVirtualMachineScaleSetRollingUpgradePolicyArgs();
        }

        public Builder(WindowsVirtualMachineScaleSetRollingUpgradePolicyArgs defaults) {
            $ = new WindowsVirtualMachineScaleSetRollingUpgradePolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param crossZoneUpgradesEnabled Should the Virtual Machine Scale Set ignore the Azure Zone boundaries when constructing upgrade batches? Possible values are `true` or `false`.
         * 
         * @return builder
         * 
         */
        public Builder crossZoneUpgradesEnabled(@Nullable Output<Boolean> crossZoneUpgradesEnabled) {
            $.crossZoneUpgradesEnabled = crossZoneUpgradesEnabled;
            return this;
        }

        /**
         * @param crossZoneUpgradesEnabled Should the Virtual Machine Scale Set ignore the Azure Zone boundaries when constructing upgrade batches? Possible values are `true` or `false`.
         * 
         * @return builder
         * 
         */
        public Builder crossZoneUpgradesEnabled(Boolean crossZoneUpgradesEnabled) {
            return crossZoneUpgradesEnabled(Output.of(crossZoneUpgradesEnabled));
        }

        /**
         * @param maxBatchInstancePercent The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability.
         * 
         * @return builder
         * 
         */
        public Builder maxBatchInstancePercent(Output<Integer> maxBatchInstancePercent) {
            $.maxBatchInstancePercent = maxBatchInstancePercent;
            return this;
        }

        /**
         * @param maxBatchInstancePercent The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability.
         * 
         * @return builder
         * 
         */
        public Builder maxBatchInstancePercent(Integer maxBatchInstancePercent) {
            return maxBatchInstancePercent(Output.of(maxBatchInstancePercent));
        }

        /**
         * @param maxUnhealthyInstancePercent The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch.
         * 
         * @return builder
         * 
         */
        public Builder maxUnhealthyInstancePercent(Output<Integer> maxUnhealthyInstancePercent) {
            $.maxUnhealthyInstancePercent = maxUnhealthyInstancePercent;
            return this;
        }

        /**
         * @param maxUnhealthyInstancePercent The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch.
         * 
         * @return builder
         * 
         */
        public Builder maxUnhealthyInstancePercent(Integer maxUnhealthyInstancePercent) {
            return maxUnhealthyInstancePercent(Output.of(maxUnhealthyInstancePercent));
        }

        /**
         * @param maxUnhealthyUpgradedInstancePercent The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts.
         * 
         * @return builder
         * 
         */
        public Builder maxUnhealthyUpgradedInstancePercent(Output<Integer> maxUnhealthyUpgradedInstancePercent) {
            $.maxUnhealthyUpgradedInstancePercent = maxUnhealthyUpgradedInstancePercent;
            return this;
        }

        /**
         * @param maxUnhealthyUpgradedInstancePercent The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts.
         * 
         * @return builder
         * 
         */
        public Builder maxUnhealthyUpgradedInstancePercent(Integer maxUnhealthyUpgradedInstancePercent) {
            return maxUnhealthyUpgradedInstancePercent(Output.of(maxUnhealthyUpgradedInstancePercent));
        }

        /**
         * @param pauseTimeBetweenBatches The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format.
         * 
         * @return builder
         * 
         */
        public Builder pauseTimeBetweenBatches(Output<String> pauseTimeBetweenBatches) {
            $.pauseTimeBetweenBatches = pauseTimeBetweenBatches;
            return this;
        }

        /**
         * @param pauseTimeBetweenBatches The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format.
         * 
         * @return builder
         * 
         */
        public Builder pauseTimeBetweenBatches(String pauseTimeBetweenBatches) {
            return pauseTimeBetweenBatches(Output.of(pauseTimeBetweenBatches));
        }

        /**
         * @param prioritizeUnhealthyInstancesEnabled Upgrade all unhealthy instances in a scale set before any healthy instances. Possible values are `true` or `false`.
         * 
         * @return builder
         * 
         */
        public Builder prioritizeUnhealthyInstancesEnabled(@Nullable Output<Boolean> prioritizeUnhealthyInstancesEnabled) {
            $.prioritizeUnhealthyInstancesEnabled = prioritizeUnhealthyInstancesEnabled;
            return this;
        }

        /**
         * @param prioritizeUnhealthyInstancesEnabled Upgrade all unhealthy instances in a scale set before any healthy instances. Possible values are `true` or `false`.
         * 
         * @return builder
         * 
         */
        public Builder prioritizeUnhealthyInstancesEnabled(Boolean prioritizeUnhealthyInstancesEnabled) {
            return prioritizeUnhealthyInstancesEnabled(Output.of(prioritizeUnhealthyInstancesEnabled));
        }

        public WindowsVirtualMachineScaleSetRollingUpgradePolicyArgs build() {
            if ($.maxBatchInstancePercent == null) {
                throw new MissingRequiredPropertyException("WindowsVirtualMachineScaleSetRollingUpgradePolicyArgs", "maxBatchInstancePercent");
            }
            if ($.maxUnhealthyInstancePercent == null) {
                throw new MissingRequiredPropertyException("WindowsVirtualMachineScaleSetRollingUpgradePolicyArgs", "maxUnhealthyInstancePercent");
            }
            if ($.maxUnhealthyUpgradedInstancePercent == null) {
                throw new MissingRequiredPropertyException("WindowsVirtualMachineScaleSetRollingUpgradePolicyArgs", "maxUnhealthyUpgradedInstancePercent");
            }
            if ($.pauseTimeBetweenBatches == null) {
                throw new MissingRequiredPropertyException("WindowsVirtualMachineScaleSetRollingUpgradePolicyArgs", "pauseTimeBetweenBatches");
            }
            return $;
        }
    }

}
