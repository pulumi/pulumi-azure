// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.eventhub.inputs;

import com.pulumi.azure.eventhub.inputs.EventHubCaptureDescriptionDestinationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventHubCaptureDescriptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventHubCaptureDescriptionArgs Empty = new EventHubCaptureDescriptionArgs();

    /**
     * A `destination` block as defined below.
     * 
     */
    @Import(name="destination", required=true)
    private Output<EventHubCaptureDescriptionDestinationArgs> destination;

    /**
     * @return A `destination` block as defined below.
     * 
     */
    public Output<EventHubCaptureDescriptionDestinationArgs> destination() {
        return this.destination;
    }

    /**
     * Specifies if the Capture Description is Enabled.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Specifies if the Capture Description is Enabled.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Specifies the Encoding used for the Capture Description. Possible values are `Avro` and `AvroDeflate`.
     * 
     */
    @Import(name="encoding", required=true)
    private Output<String> encoding;

    /**
     * @return Specifies the Encoding used for the Capture Description. Possible values are `Avro` and `AvroDeflate`.
     * 
     */
    public Output<String> encoding() {
        return this.encoding;
    }

    /**
     * Specifies the time interval in seconds at which the capture will happen. Values can be between `60` and `900` seconds. Defaults to `300` seconds.
     * 
     */
    @Import(name="intervalInSeconds")
    private @Nullable Output<Integer> intervalInSeconds;

    /**
     * @return Specifies the time interval in seconds at which the capture will happen. Values can be between `60` and `900` seconds. Defaults to `300` seconds.
     * 
     */
    public Optional<Output<Integer>> intervalInSeconds() {
        return Optional.ofNullable(this.intervalInSeconds);
    }

    /**
     * Specifies the amount of data built up in your EventHub before a Capture Operation occurs. Value should be between `10485760` and `524288000` bytes. Defaults to `314572800` bytes.
     * 
     */
    @Import(name="sizeLimitInBytes")
    private @Nullable Output<Integer> sizeLimitInBytes;

    /**
     * @return Specifies the amount of data built up in your EventHub before a Capture Operation occurs. Value should be between `10485760` and `524288000` bytes. Defaults to `314572800` bytes.
     * 
     */
    public Optional<Output<Integer>> sizeLimitInBytes() {
        return Optional.ofNullable(this.sizeLimitInBytes);
    }

    /**
     * Specifies if empty files should not be emitted if no events occur during the Capture time window. Defaults to `false`.
     * 
     */
    @Import(name="skipEmptyArchives")
    private @Nullable Output<Boolean> skipEmptyArchives;

    /**
     * @return Specifies if empty files should not be emitted if no events occur during the Capture time window. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> skipEmptyArchives() {
        return Optional.ofNullable(this.skipEmptyArchives);
    }

    private EventHubCaptureDescriptionArgs() {}

    private EventHubCaptureDescriptionArgs(EventHubCaptureDescriptionArgs $) {
        this.destination = $.destination;
        this.enabled = $.enabled;
        this.encoding = $.encoding;
        this.intervalInSeconds = $.intervalInSeconds;
        this.sizeLimitInBytes = $.sizeLimitInBytes;
        this.skipEmptyArchives = $.skipEmptyArchives;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventHubCaptureDescriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventHubCaptureDescriptionArgs $;

        public Builder() {
            $ = new EventHubCaptureDescriptionArgs();
        }

        public Builder(EventHubCaptureDescriptionArgs defaults) {
            $ = new EventHubCaptureDescriptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destination A `destination` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder destination(Output<EventHubCaptureDescriptionDestinationArgs> destination) {
            $.destination = destination;
            return this;
        }

        /**
         * @param destination A `destination` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder destination(EventHubCaptureDescriptionDestinationArgs destination) {
            return destination(Output.of(destination));
        }

        /**
         * @param enabled Specifies if the Capture Description is Enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Specifies if the Capture Description is Enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param encoding Specifies the Encoding used for the Capture Description. Possible values are `Avro` and `AvroDeflate`.
         * 
         * @return builder
         * 
         */
        public Builder encoding(Output<String> encoding) {
            $.encoding = encoding;
            return this;
        }

        /**
         * @param encoding Specifies the Encoding used for the Capture Description. Possible values are `Avro` and `AvroDeflate`.
         * 
         * @return builder
         * 
         */
        public Builder encoding(String encoding) {
            return encoding(Output.of(encoding));
        }

        /**
         * @param intervalInSeconds Specifies the time interval in seconds at which the capture will happen. Values can be between `60` and `900` seconds. Defaults to `300` seconds.
         * 
         * @return builder
         * 
         */
        public Builder intervalInSeconds(@Nullable Output<Integer> intervalInSeconds) {
            $.intervalInSeconds = intervalInSeconds;
            return this;
        }

        /**
         * @param intervalInSeconds Specifies the time interval in seconds at which the capture will happen. Values can be between `60` and `900` seconds. Defaults to `300` seconds.
         * 
         * @return builder
         * 
         */
        public Builder intervalInSeconds(Integer intervalInSeconds) {
            return intervalInSeconds(Output.of(intervalInSeconds));
        }

        /**
         * @param sizeLimitInBytes Specifies the amount of data built up in your EventHub before a Capture Operation occurs. Value should be between `10485760` and `524288000` bytes. Defaults to `314572800` bytes.
         * 
         * @return builder
         * 
         */
        public Builder sizeLimitInBytes(@Nullable Output<Integer> sizeLimitInBytes) {
            $.sizeLimitInBytes = sizeLimitInBytes;
            return this;
        }

        /**
         * @param sizeLimitInBytes Specifies the amount of data built up in your EventHub before a Capture Operation occurs. Value should be between `10485760` and `524288000` bytes. Defaults to `314572800` bytes.
         * 
         * @return builder
         * 
         */
        public Builder sizeLimitInBytes(Integer sizeLimitInBytes) {
            return sizeLimitInBytes(Output.of(sizeLimitInBytes));
        }

        /**
         * @param skipEmptyArchives Specifies if empty files should not be emitted if no events occur during the Capture time window. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder skipEmptyArchives(@Nullable Output<Boolean> skipEmptyArchives) {
            $.skipEmptyArchives = skipEmptyArchives;
            return this;
        }

        /**
         * @param skipEmptyArchives Specifies if empty files should not be emitted if no events occur during the Capture time window. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder skipEmptyArchives(Boolean skipEmptyArchives) {
            return skipEmptyArchives(Output.of(skipEmptyArchives));
        }

        public EventHubCaptureDescriptionArgs build() {
            if ($.destination == null) {
                throw new MissingRequiredPropertyException("EventHubCaptureDescriptionArgs", "destination");
            }
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("EventHubCaptureDescriptionArgs", "enabled");
            }
            if ($.encoding == null) {
                throw new MissingRequiredPropertyException("EventHubCaptureDescriptionArgs", "encoding");
            }
            return $;
        }
    }

}
