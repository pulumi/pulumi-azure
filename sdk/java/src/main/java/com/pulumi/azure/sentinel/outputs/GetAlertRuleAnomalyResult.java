// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.sentinel.outputs;

import com.pulumi.azure.sentinel.outputs.GetAlertRuleAnomalyMultiSelectObservation;
import com.pulumi.azure.sentinel.outputs.GetAlertRuleAnomalyPrioritizedExcludeObservation;
import com.pulumi.azure.sentinel.outputs.GetAlertRuleAnomalyRequiredDataConnector;
import com.pulumi.azure.sentinel.outputs.GetAlertRuleAnomalySingleSelectObservation;
import com.pulumi.azure.sentinel.outputs.GetAlertRuleAnomalyThresholdObservation;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAlertRuleAnomalyResult {
    /**
     * @return The version of the Anomaly Security ML Analytics Settings.
     * 
     */
    private Integer anomalySettingsVersion;
    /**
     * @return The anomaly version of the Anomaly Alert Rule.
     * 
     */
    private String anomalyVersion;
    /**
     * @return The description of the threshold observation.
     * 
     */
    private String description;
    private String displayName;
    /**
     * @return Is the Anomaly Alert Rule enabled?
     * 
     */
    private Boolean enabled;
    /**
     * @return The frequency the Anomaly Alert Rule will be run.
     * 
     */
    private String frequency;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String logAnalyticsWorkspaceId;
    private String mode;
    /**
     * @return A list of `multi_select_observation` blocks as defined below.
     * 
     */
    private List<GetAlertRuleAnomalyMultiSelectObservation> multiSelectObservations;
    /**
     * @return The name of the threshold observation.
     * 
     */
    private String name;
    /**
     * @return A list of `prioritized_exclude_observation` blocks as defined below.
     * 
     */
    private List<GetAlertRuleAnomalyPrioritizedExcludeObservation> prioritizedExcludeObservations;
    /**
     * @return A `required_data_connector` block as defined below.
     * 
     */
    private List<GetAlertRuleAnomalyRequiredDataConnector> requiredDataConnectors;
    /**
     * @return The ID of the anomaly settings definition Id.
     * 
     */
    private String settingsDefinitionId;
    /**
     * @return A list of `single_select_observation` blocks as defined below.
     * 
     */
    private List<GetAlertRuleAnomalySingleSelectObservation> singleSelectObservations;
    /**
     * @return A list of categories of attacks by which to classify the rule.
     * 
     */
    private List<String> tactics;
    /**
     * @return A list of techniques of attacks by which to classify the rule.
     * 
     */
    private List<String> techniques;
    /**
     * @return A list of `threshold_observation` blocks as defined below.
     * 
     */
    private List<GetAlertRuleAnomalyThresholdObservation> thresholdObservations;

    private GetAlertRuleAnomalyResult() {}
    /**
     * @return The version of the Anomaly Security ML Analytics Settings.
     * 
     */
    public Integer anomalySettingsVersion() {
        return this.anomalySettingsVersion;
    }
    /**
     * @return The anomaly version of the Anomaly Alert Rule.
     * 
     */
    public String anomalyVersion() {
        return this.anomalyVersion;
    }
    /**
     * @return The description of the threshold observation.
     * 
     */
    public String description() {
        return this.description;
    }
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Is the Anomaly Alert Rule enabled?
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return The frequency the Anomaly Alert Rule will be run.
     * 
     */
    public String frequency() {
        return this.frequency;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String logAnalyticsWorkspaceId() {
        return this.logAnalyticsWorkspaceId;
    }
    public String mode() {
        return this.mode;
    }
    /**
     * @return A list of `multi_select_observation` blocks as defined below.
     * 
     */
    public List<GetAlertRuleAnomalyMultiSelectObservation> multiSelectObservations() {
        return this.multiSelectObservations;
    }
    /**
     * @return The name of the threshold observation.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A list of `prioritized_exclude_observation` blocks as defined below.
     * 
     */
    public List<GetAlertRuleAnomalyPrioritizedExcludeObservation> prioritizedExcludeObservations() {
        return this.prioritizedExcludeObservations;
    }
    /**
     * @return A `required_data_connector` block as defined below.
     * 
     */
    public List<GetAlertRuleAnomalyRequiredDataConnector> requiredDataConnectors() {
        return this.requiredDataConnectors;
    }
    /**
     * @return The ID of the anomaly settings definition Id.
     * 
     */
    public String settingsDefinitionId() {
        return this.settingsDefinitionId;
    }
    /**
     * @return A list of `single_select_observation` blocks as defined below.
     * 
     */
    public List<GetAlertRuleAnomalySingleSelectObservation> singleSelectObservations() {
        return this.singleSelectObservations;
    }
    /**
     * @return A list of categories of attacks by which to classify the rule.
     * 
     */
    public List<String> tactics() {
        return this.tactics;
    }
    /**
     * @return A list of techniques of attacks by which to classify the rule.
     * 
     */
    public List<String> techniques() {
        return this.techniques;
    }
    /**
     * @return A list of `threshold_observation` blocks as defined below.
     * 
     */
    public List<GetAlertRuleAnomalyThresholdObservation> thresholdObservations() {
        return this.thresholdObservations;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAlertRuleAnomalyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer anomalySettingsVersion;
        private String anomalyVersion;
        private String description;
        private String displayName;
        private Boolean enabled;
        private String frequency;
        private String id;
        private String logAnalyticsWorkspaceId;
        private String mode;
        private List<GetAlertRuleAnomalyMultiSelectObservation> multiSelectObservations;
        private String name;
        private List<GetAlertRuleAnomalyPrioritizedExcludeObservation> prioritizedExcludeObservations;
        private List<GetAlertRuleAnomalyRequiredDataConnector> requiredDataConnectors;
        private String settingsDefinitionId;
        private List<GetAlertRuleAnomalySingleSelectObservation> singleSelectObservations;
        private List<String> tactics;
        private List<String> techniques;
        private List<GetAlertRuleAnomalyThresholdObservation> thresholdObservations;
        public Builder() {}
        public Builder(GetAlertRuleAnomalyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.anomalySettingsVersion = defaults.anomalySettingsVersion;
    	      this.anomalyVersion = defaults.anomalyVersion;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.enabled = defaults.enabled;
    	      this.frequency = defaults.frequency;
    	      this.id = defaults.id;
    	      this.logAnalyticsWorkspaceId = defaults.logAnalyticsWorkspaceId;
    	      this.mode = defaults.mode;
    	      this.multiSelectObservations = defaults.multiSelectObservations;
    	      this.name = defaults.name;
    	      this.prioritizedExcludeObservations = defaults.prioritizedExcludeObservations;
    	      this.requiredDataConnectors = defaults.requiredDataConnectors;
    	      this.settingsDefinitionId = defaults.settingsDefinitionId;
    	      this.singleSelectObservations = defaults.singleSelectObservations;
    	      this.tactics = defaults.tactics;
    	      this.techniques = defaults.techniques;
    	      this.thresholdObservations = defaults.thresholdObservations;
        }

        @CustomType.Setter
        public Builder anomalySettingsVersion(Integer anomalySettingsVersion) {
            if (anomalySettingsVersion == null) {
              throw new MissingRequiredPropertyException("GetAlertRuleAnomalyResult", "anomalySettingsVersion");
            }
            this.anomalySettingsVersion = anomalySettingsVersion;
            return this;
        }
        @CustomType.Setter
        public Builder anomalyVersion(String anomalyVersion) {
            if (anomalyVersion == null) {
              throw new MissingRequiredPropertyException("GetAlertRuleAnomalyResult", "anomalyVersion");
            }
            this.anomalyVersion = anomalyVersion;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetAlertRuleAnomalyResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetAlertRuleAnomalyResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetAlertRuleAnomalyResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder frequency(String frequency) {
            if (frequency == null) {
              throw new MissingRequiredPropertyException("GetAlertRuleAnomalyResult", "frequency");
            }
            this.frequency = frequency;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAlertRuleAnomalyResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder logAnalyticsWorkspaceId(String logAnalyticsWorkspaceId) {
            if (logAnalyticsWorkspaceId == null) {
              throw new MissingRequiredPropertyException("GetAlertRuleAnomalyResult", "logAnalyticsWorkspaceId");
            }
            this.logAnalyticsWorkspaceId = logAnalyticsWorkspaceId;
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            if (mode == null) {
              throw new MissingRequiredPropertyException("GetAlertRuleAnomalyResult", "mode");
            }
            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder multiSelectObservations(List<GetAlertRuleAnomalyMultiSelectObservation> multiSelectObservations) {
            if (multiSelectObservations == null) {
              throw new MissingRequiredPropertyException("GetAlertRuleAnomalyResult", "multiSelectObservations");
            }
            this.multiSelectObservations = multiSelectObservations;
            return this;
        }
        public Builder multiSelectObservations(GetAlertRuleAnomalyMultiSelectObservation... multiSelectObservations) {
            return multiSelectObservations(List.of(multiSelectObservations));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetAlertRuleAnomalyResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder prioritizedExcludeObservations(List<GetAlertRuleAnomalyPrioritizedExcludeObservation> prioritizedExcludeObservations) {
            if (prioritizedExcludeObservations == null) {
              throw new MissingRequiredPropertyException("GetAlertRuleAnomalyResult", "prioritizedExcludeObservations");
            }
            this.prioritizedExcludeObservations = prioritizedExcludeObservations;
            return this;
        }
        public Builder prioritizedExcludeObservations(GetAlertRuleAnomalyPrioritizedExcludeObservation... prioritizedExcludeObservations) {
            return prioritizedExcludeObservations(List.of(prioritizedExcludeObservations));
        }
        @CustomType.Setter
        public Builder requiredDataConnectors(List<GetAlertRuleAnomalyRequiredDataConnector> requiredDataConnectors) {
            if (requiredDataConnectors == null) {
              throw new MissingRequiredPropertyException("GetAlertRuleAnomalyResult", "requiredDataConnectors");
            }
            this.requiredDataConnectors = requiredDataConnectors;
            return this;
        }
        public Builder requiredDataConnectors(GetAlertRuleAnomalyRequiredDataConnector... requiredDataConnectors) {
            return requiredDataConnectors(List.of(requiredDataConnectors));
        }
        @CustomType.Setter
        public Builder settingsDefinitionId(String settingsDefinitionId) {
            if (settingsDefinitionId == null) {
              throw new MissingRequiredPropertyException("GetAlertRuleAnomalyResult", "settingsDefinitionId");
            }
            this.settingsDefinitionId = settingsDefinitionId;
            return this;
        }
        @CustomType.Setter
        public Builder singleSelectObservations(List<GetAlertRuleAnomalySingleSelectObservation> singleSelectObservations) {
            if (singleSelectObservations == null) {
              throw new MissingRequiredPropertyException("GetAlertRuleAnomalyResult", "singleSelectObservations");
            }
            this.singleSelectObservations = singleSelectObservations;
            return this;
        }
        public Builder singleSelectObservations(GetAlertRuleAnomalySingleSelectObservation... singleSelectObservations) {
            return singleSelectObservations(List.of(singleSelectObservations));
        }
        @CustomType.Setter
        public Builder tactics(List<String> tactics) {
            if (tactics == null) {
              throw new MissingRequiredPropertyException("GetAlertRuleAnomalyResult", "tactics");
            }
            this.tactics = tactics;
            return this;
        }
        public Builder tactics(String... tactics) {
            return tactics(List.of(tactics));
        }
        @CustomType.Setter
        public Builder techniques(List<String> techniques) {
            if (techniques == null) {
              throw new MissingRequiredPropertyException("GetAlertRuleAnomalyResult", "techniques");
            }
            this.techniques = techniques;
            return this;
        }
        public Builder techniques(String... techniques) {
            return techniques(List.of(techniques));
        }
        @CustomType.Setter
        public Builder thresholdObservations(List<GetAlertRuleAnomalyThresholdObservation> thresholdObservations) {
            if (thresholdObservations == null) {
              throw new MissingRequiredPropertyException("GetAlertRuleAnomalyResult", "thresholdObservations");
            }
            this.thresholdObservations = thresholdObservations;
            return this;
        }
        public Builder thresholdObservations(GetAlertRuleAnomalyThresholdObservation... thresholdObservations) {
            return thresholdObservations(List.of(thresholdObservations));
        }
        public GetAlertRuleAnomalyResult build() {
            final var _resultValue = new GetAlertRuleAnomalyResult();
            _resultValue.anomalySettingsVersion = anomalySettingsVersion;
            _resultValue.anomalyVersion = anomalyVersion;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.enabled = enabled;
            _resultValue.frequency = frequency;
            _resultValue.id = id;
            _resultValue.logAnalyticsWorkspaceId = logAnalyticsWorkspaceId;
            _resultValue.mode = mode;
            _resultValue.multiSelectObservations = multiSelectObservations;
            _resultValue.name = name;
            _resultValue.prioritizedExcludeObservations = prioritizedExcludeObservations;
            _resultValue.requiredDataConnectors = requiredDataConnectors;
            _resultValue.settingsDefinitionId = settingsDefinitionId;
            _resultValue.singleSelectObservations = singleSelectObservations;
            _resultValue.tactics = tactics;
            _resultValue.techniques = techniques;
            _resultValue.thresholdObservations = thresholdObservations;
            return _resultValue;
        }
    }
}
