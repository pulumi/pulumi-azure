// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.netapp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PoolState extends com.pulumi.resources.ResourceArgs {

    public static final PoolState Empty = new PoolState();

    /**
     * The name of the NetApp account in which the NetApp Pool should be created. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="accountName")
    private @Nullable Output<String> accountName;

    /**
     * @return The name of the NetApp account in which the NetApp Pool should be created. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> accountName() {
        return Optional.ofNullable(this.accountName);
    }

    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the NetApp Pool. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the NetApp Pool. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * QoS Type of the pool. Valid values include `Auto` or `Manual`.
     * 
     */
    @Import(name="qosType")
    private @Nullable Output<String> qosType;

    /**
     * @return QoS Type of the pool. Valid values include `Auto` or `Manual`.
     * 
     */
    public Optional<Output<String>> qosType() {
        return Optional.ofNullable(this.qosType);
    }

    /**
     * The name of the resource group where the NetApp Pool should be created. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return The name of the resource group where the NetApp Pool should be created. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * The service level of the file system. Valid values include `Premium`, `Standard`, or `Ultra`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="serviceLevel")
    private @Nullable Output<String> serviceLevel;

    /**
     * @return The service level of the file system. Valid values include `Premium`, `Standard`, or `Ultra`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> serviceLevel() {
        return Optional.ofNullable(this.serviceLevel);
    }

    /**
     * Provisioned size of the pool in TB. Value must be between `4` and `500`.
     * 
     */
    @Import(name="sizeInTb")
    private @Nullable Output<Integer> sizeInTb;

    /**
     * @return Provisioned size of the pool in TB. Value must be between `4` and `500`.
     * 
     */
    public Optional<Output<Integer>> sizeInTb() {
        return Optional.ofNullable(this.sizeInTb);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private PoolState() {}

    private PoolState(PoolState $) {
        this.accountName = $.accountName;
        this.location = $.location;
        this.name = $.name;
        this.qosType = $.qosType;
        this.resourceGroupName = $.resourceGroupName;
        this.serviceLevel = $.serviceLevel;
        this.sizeInTb = $.sizeInTb;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PoolState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PoolState $;

        public Builder() {
            $ = new PoolState();
        }

        public Builder(PoolState defaults) {
            $ = new PoolState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountName The name of the NetApp account in which the NetApp Pool should be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder accountName(@Nullable Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName The name of the NetApp account in which the NetApp Pool should be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param location Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name of the NetApp Pool. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the NetApp Pool. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param qosType QoS Type of the pool. Valid values include `Auto` or `Manual`.
         * 
         * @return builder
         * 
         */
        public Builder qosType(@Nullable Output<String> qosType) {
            $.qosType = qosType;
            return this;
        }

        /**
         * @param qosType QoS Type of the pool. Valid values include `Auto` or `Manual`.
         * 
         * @return builder
         * 
         */
        public Builder qosType(String qosType) {
            return qosType(Output.of(qosType));
        }

        /**
         * @param resourceGroupName The name of the resource group where the NetApp Pool should be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group where the NetApp Pool should be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param serviceLevel The service level of the file system. Valid values include `Premium`, `Standard`, or `Ultra`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder serviceLevel(@Nullable Output<String> serviceLevel) {
            $.serviceLevel = serviceLevel;
            return this;
        }

        /**
         * @param serviceLevel The service level of the file system. Valid values include `Premium`, `Standard`, or `Ultra`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder serviceLevel(String serviceLevel) {
            return serviceLevel(Output.of(serviceLevel));
        }

        /**
         * @param sizeInTb Provisioned size of the pool in TB. Value must be between `4` and `500`.
         * 
         * @return builder
         * 
         */
        public Builder sizeInTb(@Nullable Output<Integer> sizeInTb) {
            $.sizeInTb = sizeInTb;
            return this;
        }

        /**
         * @param sizeInTb Provisioned size of the pool in TB. Value must be between `4` and `500`.
         * 
         * @return builder
         * 
         */
        public Builder sizeInTb(Integer sizeInTb) {
            return sizeInTb(Output.of(sizeInTb));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public PoolState build() {
            return $;
        }
    }

}
