// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.azure.network.outputs.GetVpnServerConfigurationAzureActiveDirectoryAuthentication;
import com.pulumi.azure.network.outputs.GetVpnServerConfigurationClientRevokedCertificate;
import com.pulumi.azure.network.outputs.GetVpnServerConfigurationClientRootCertificate;
import com.pulumi.azure.network.outputs.GetVpnServerConfigurationIpsecPolicy;
import com.pulumi.azure.network.outputs.GetVpnServerConfigurationRadius;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetVpnServerConfigurationResult {
    /**
     * @return A `azure_active_directory_authentication` block as defined below.
     * 
     */
    private List<GetVpnServerConfigurationAzureActiveDirectoryAuthentication> azureActiveDirectoryAuthentications;
    /**
     * @return One or more `client_revoked_certificate` blocks as defined below.
     * 
     */
    private List<GetVpnServerConfigurationClientRevokedCertificate> clientRevokedCertificates;
    /**
     * @return One or more `client_root_certificate` blocks as defined below.
     * 
     */
    private List<GetVpnServerConfigurationClientRootCertificate> clientRootCertificates;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The `bgp_settings` block as defined below.
     * 
     */
    private List<GetVpnServerConfigurationIpsecPolicy> ipsecPolicies;
    /**
     * @return The Azure Region where the VPN Server Configuration exists.
     * 
     */
    private String location;
    /**
     * @return The name used to uniquely identify this certificate.
     * 
     */
    private String name;
    /**
     * @return A `radius` block as defined below.
     * 
     */
    private List<GetVpnServerConfigurationRadius> radii;
    private String resourceGroupName;
    /**
     * @return A mapping of tags to assign to the VPN Server Configuration.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The list of Authentication Types applicable for the VPN Server Configuration.
     * 
     */
    private List<String> vpnAuthenticationTypes;
    /**
     * @return The list of VPN Protocols to use for the VPN Server Configuration.
     * 
     */
    private List<String> vpnProtocols;

    private GetVpnServerConfigurationResult() {}
    /**
     * @return A `azure_active_directory_authentication` block as defined below.
     * 
     */
    public List<GetVpnServerConfigurationAzureActiveDirectoryAuthentication> azureActiveDirectoryAuthentications() {
        return this.azureActiveDirectoryAuthentications;
    }
    /**
     * @return One or more `client_revoked_certificate` blocks as defined below.
     * 
     */
    public List<GetVpnServerConfigurationClientRevokedCertificate> clientRevokedCertificates() {
        return this.clientRevokedCertificates;
    }
    /**
     * @return One or more `client_root_certificate` blocks as defined below.
     * 
     */
    public List<GetVpnServerConfigurationClientRootCertificate> clientRootCertificates() {
        return this.clientRootCertificates;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The `bgp_settings` block as defined below.
     * 
     */
    public List<GetVpnServerConfigurationIpsecPolicy> ipsecPolicies() {
        return this.ipsecPolicies;
    }
    /**
     * @return The Azure Region where the VPN Server Configuration exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The name used to uniquely identify this certificate.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A `radius` block as defined below.
     * 
     */
    public List<GetVpnServerConfigurationRadius> radii() {
        return this.radii;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return A mapping of tags to assign to the VPN Server Configuration.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The list of Authentication Types applicable for the VPN Server Configuration.
     * 
     */
    public List<String> vpnAuthenticationTypes() {
        return this.vpnAuthenticationTypes;
    }
    /**
     * @return The list of VPN Protocols to use for the VPN Server Configuration.
     * 
     */
    public List<String> vpnProtocols() {
        return this.vpnProtocols;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVpnServerConfigurationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetVpnServerConfigurationAzureActiveDirectoryAuthentication> azureActiveDirectoryAuthentications;
        private List<GetVpnServerConfigurationClientRevokedCertificate> clientRevokedCertificates;
        private List<GetVpnServerConfigurationClientRootCertificate> clientRootCertificates;
        private String id;
        private List<GetVpnServerConfigurationIpsecPolicy> ipsecPolicies;
        private String location;
        private String name;
        private List<GetVpnServerConfigurationRadius> radii;
        private String resourceGroupName;
        private Map<String,String> tags;
        private List<String> vpnAuthenticationTypes;
        private List<String> vpnProtocols;
        public Builder() {}
        public Builder(GetVpnServerConfigurationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.azureActiveDirectoryAuthentications = defaults.azureActiveDirectoryAuthentications;
    	      this.clientRevokedCertificates = defaults.clientRevokedCertificates;
    	      this.clientRootCertificates = defaults.clientRootCertificates;
    	      this.id = defaults.id;
    	      this.ipsecPolicies = defaults.ipsecPolicies;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.radii = defaults.radii;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
    	      this.vpnAuthenticationTypes = defaults.vpnAuthenticationTypes;
    	      this.vpnProtocols = defaults.vpnProtocols;
        }

        @CustomType.Setter
        public Builder azureActiveDirectoryAuthentications(List<GetVpnServerConfigurationAzureActiveDirectoryAuthentication> azureActiveDirectoryAuthentications) {
            if (azureActiveDirectoryAuthentications == null) {
              throw new MissingRequiredPropertyException("GetVpnServerConfigurationResult", "azureActiveDirectoryAuthentications");
            }
            this.azureActiveDirectoryAuthentications = azureActiveDirectoryAuthentications;
            return this;
        }
        public Builder azureActiveDirectoryAuthentications(GetVpnServerConfigurationAzureActiveDirectoryAuthentication... azureActiveDirectoryAuthentications) {
            return azureActiveDirectoryAuthentications(List.of(azureActiveDirectoryAuthentications));
        }
        @CustomType.Setter
        public Builder clientRevokedCertificates(List<GetVpnServerConfigurationClientRevokedCertificate> clientRevokedCertificates) {
            if (clientRevokedCertificates == null) {
              throw new MissingRequiredPropertyException("GetVpnServerConfigurationResult", "clientRevokedCertificates");
            }
            this.clientRevokedCertificates = clientRevokedCertificates;
            return this;
        }
        public Builder clientRevokedCertificates(GetVpnServerConfigurationClientRevokedCertificate... clientRevokedCertificates) {
            return clientRevokedCertificates(List.of(clientRevokedCertificates));
        }
        @CustomType.Setter
        public Builder clientRootCertificates(List<GetVpnServerConfigurationClientRootCertificate> clientRootCertificates) {
            if (clientRootCertificates == null) {
              throw new MissingRequiredPropertyException("GetVpnServerConfigurationResult", "clientRootCertificates");
            }
            this.clientRootCertificates = clientRootCertificates;
            return this;
        }
        public Builder clientRootCertificates(GetVpnServerConfigurationClientRootCertificate... clientRootCertificates) {
            return clientRootCertificates(List.of(clientRootCertificates));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetVpnServerConfigurationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecPolicies(List<GetVpnServerConfigurationIpsecPolicy> ipsecPolicies) {
            if (ipsecPolicies == null) {
              throw new MissingRequiredPropertyException("GetVpnServerConfigurationResult", "ipsecPolicies");
            }
            this.ipsecPolicies = ipsecPolicies;
            return this;
        }
        public Builder ipsecPolicies(GetVpnServerConfigurationIpsecPolicy... ipsecPolicies) {
            return ipsecPolicies(List.of(ipsecPolicies));
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetVpnServerConfigurationResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetVpnServerConfigurationResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder radii(List<GetVpnServerConfigurationRadius> radii) {
            if (radii == null) {
              throw new MissingRequiredPropertyException("GetVpnServerConfigurationResult", "radii");
            }
            this.radii = radii;
            return this;
        }
        public Builder radii(GetVpnServerConfigurationRadius... radii) {
            return radii(List.of(radii));
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetVpnServerConfigurationResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetVpnServerConfigurationResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder vpnAuthenticationTypes(List<String> vpnAuthenticationTypes) {
            if (vpnAuthenticationTypes == null) {
              throw new MissingRequiredPropertyException("GetVpnServerConfigurationResult", "vpnAuthenticationTypes");
            }
            this.vpnAuthenticationTypes = vpnAuthenticationTypes;
            return this;
        }
        public Builder vpnAuthenticationTypes(String... vpnAuthenticationTypes) {
            return vpnAuthenticationTypes(List.of(vpnAuthenticationTypes));
        }
        @CustomType.Setter
        public Builder vpnProtocols(List<String> vpnProtocols) {
            if (vpnProtocols == null) {
              throw new MissingRequiredPropertyException("GetVpnServerConfigurationResult", "vpnProtocols");
            }
            this.vpnProtocols = vpnProtocols;
            return this;
        }
        public Builder vpnProtocols(String... vpnProtocols) {
            return vpnProtocols(List.of(vpnProtocols));
        }
        public GetVpnServerConfigurationResult build() {
            final var _resultValue = new GetVpnServerConfigurationResult();
            _resultValue.azureActiveDirectoryAuthentications = azureActiveDirectoryAuthentications;
            _resultValue.clientRevokedCertificates = clientRevokedCertificates;
            _resultValue.clientRootCertificates = clientRootCertificates;
            _resultValue.id = id;
            _resultValue.ipsecPolicies = ipsecPolicies;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.radii = radii;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.tags = tags;
            _resultValue.vpnAuthenticationTypes = vpnAuthenticationTypes;
            _resultValue.vpnProtocols = vpnProtocols;
            return _resultValue;
        }
    }
}
