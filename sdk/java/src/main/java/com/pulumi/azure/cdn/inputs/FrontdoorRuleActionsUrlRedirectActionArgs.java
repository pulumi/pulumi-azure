// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cdn.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FrontdoorRuleActionsUrlRedirectActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final FrontdoorRuleActionsUrlRedirectActionArgs Empty = new FrontdoorRuleActionsUrlRedirectActionArgs();

    /**
     * The fragment to use in the redirect. The value must be a string between `0` and `1024` characters in length, leave blank to preserve the incoming fragment. Defaults to `&#34;&#34;`.
     * 
     */
    @Import(name="destinationFragment")
    private @Nullable Output<String> destinationFragment;

    /**
     * @return The fragment to use in the redirect. The value must be a string between `0` and `1024` characters in length, leave blank to preserve the incoming fragment. Defaults to `&#34;&#34;`.
     * 
     */
    public Optional<Output<String>> destinationFragment() {
        return Optional.ofNullable(this.destinationFragment);
    }

    /**
     * The host name you want the request to be redirected to. The value must be a string between `0` and `2048` characters in length, leave blank to preserve the incoming host.
     * 
     */
    @Import(name="destinationHostname", required=true)
    private Output<String> destinationHostname;

    /**
     * @return The host name you want the request to be redirected to. The value must be a string between `0` and `2048` characters in length, leave blank to preserve the incoming host.
     * 
     */
    public Output<String> destinationHostname() {
        return this.destinationHostname;
    }

    /**
     * The path to use in the redirect. The value must be a string and include the leading `/`, leave blank to preserve the incoming path. Defaults to `&#34;&#34;`.
     * 
     */
    @Import(name="destinationPath")
    private @Nullable Output<String> destinationPath;

    /**
     * @return The path to use in the redirect. The value must be a string and include the leading `/`, leave blank to preserve the incoming path. Defaults to `&#34;&#34;`.
     * 
     */
    public Optional<Output<String>> destinationPath() {
        return Optional.ofNullable(this.destinationPath);
    }

    /**
     * The query string used in the redirect URL. The value must be in the &amp;lt;key&gt;=&amp;lt;value&gt; or &amp;lt;key&gt;={`action_server_variable`} format and must not include the leading `?`, leave blank to preserve the incoming query string. Maximum allowed length for this field is `2048` characters. Defaults to `&#34;&#34;`.
     * 
     */
    @Import(name="queryString")
    private @Nullable Output<String> queryString;

    /**
     * @return The query string used in the redirect URL. The value must be in the &amp;lt;key&gt;=&amp;lt;value&gt; or &amp;lt;key&gt;={`action_server_variable`} format and must not include the leading `?`, leave blank to preserve the incoming query string. Maximum allowed length for this field is `2048` characters. Defaults to `&#34;&#34;`.
     * 
     */
    public Optional<Output<String>> queryString() {
        return Optional.ofNullable(this.queryString);
    }

    /**
     * The protocol the request will be redirected as. Possible values include `MatchRequest`, `Http` or `Https`. Defaults to `MatchRequest`.
     * 
     */
    @Import(name="redirectProtocol")
    private @Nullable Output<String> redirectProtocol;

    /**
     * @return The protocol the request will be redirected as. Possible values include `MatchRequest`, `Http` or `Https`. Defaults to `MatchRequest`.
     * 
     */
    public Optional<Output<String>> redirectProtocol() {
        return Optional.ofNullable(this.redirectProtocol);
    }

    /**
     * The response type to return to the requestor. Possible values include `Moved`, `Found` , `TemporaryRedirect` or `PermanentRedirect`.
     * 
     */
    @Import(name="redirectType", required=true)
    private Output<String> redirectType;

    /**
     * @return The response type to return to the requestor. Possible values include `Moved`, `Found` , `TemporaryRedirect` or `PermanentRedirect`.
     * 
     */
    public Output<String> redirectType() {
        return this.redirectType;
    }

    private FrontdoorRuleActionsUrlRedirectActionArgs() {}

    private FrontdoorRuleActionsUrlRedirectActionArgs(FrontdoorRuleActionsUrlRedirectActionArgs $) {
        this.destinationFragment = $.destinationFragment;
        this.destinationHostname = $.destinationHostname;
        this.destinationPath = $.destinationPath;
        this.queryString = $.queryString;
        this.redirectProtocol = $.redirectProtocol;
        this.redirectType = $.redirectType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FrontdoorRuleActionsUrlRedirectActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FrontdoorRuleActionsUrlRedirectActionArgs $;

        public Builder() {
            $ = new FrontdoorRuleActionsUrlRedirectActionArgs();
        }

        public Builder(FrontdoorRuleActionsUrlRedirectActionArgs defaults) {
            $ = new FrontdoorRuleActionsUrlRedirectActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinationFragment The fragment to use in the redirect. The value must be a string between `0` and `1024` characters in length, leave blank to preserve the incoming fragment. Defaults to `&#34;&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder destinationFragment(@Nullable Output<String> destinationFragment) {
            $.destinationFragment = destinationFragment;
            return this;
        }

        /**
         * @param destinationFragment The fragment to use in the redirect. The value must be a string between `0` and `1024` characters in length, leave blank to preserve the incoming fragment. Defaults to `&#34;&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder destinationFragment(String destinationFragment) {
            return destinationFragment(Output.of(destinationFragment));
        }

        /**
         * @param destinationHostname The host name you want the request to be redirected to. The value must be a string between `0` and `2048` characters in length, leave blank to preserve the incoming host.
         * 
         * @return builder
         * 
         */
        public Builder destinationHostname(Output<String> destinationHostname) {
            $.destinationHostname = destinationHostname;
            return this;
        }

        /**
         * @param destinationHostname The host name you want the request to be redirected to. The value must be a string between `0` and `2048` characters in length, leave blank to preserve the incoming host.
         * 
         * @return builder
         * 
         */
        public Builder destinationHostname(String destinationHostname) {
            return destinationHostname(Output.of(destinationHostname));
        }

        /**
         * @param destinationPath The path to use in the redirect. The value must be a string and include the leading `/`, leave blank to preserve the incoming path. Defaults to `&#34;&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder destinationPath(@Nullable Output<String> destinationPath) {
            $.destinationPath = destinationPath;
            return this;
        }

        /**
         * @param destinationPath The path to use in the redirect. The value must be a string and include the leading `/`, leave blank to preserve the incoming path. Defaults to `&#34;&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder destinationPath(String destinationPath) {
            return destinationPath(Output.of(destinationPath));
        }

        /**
         * @param queryString The query string used in the redirect URL. The value must be in the &amp;lt;key&gt;=&amp;lt;value&gt; or &amp;lt;key&gt;={`action_server_variable`} format and must not include the leading `?`, leave blank to preserve the incoming query string. Maximum allowed length for this field is `2048` characters. Defaults to `&#34;&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder queryString(@Nullable Output<String> queryString) {
            $.queryString = queryString;
            return this;
        }

        /**
         * @param queryString The query string used in the redirect URL. The value must be in the &amp;lt;key&gt;=&amp;lt;value&gt; or &amp;lt;key&gt;={`action_server_variable`} format and must not include the leading `?`, leave blank to preserve the incoming query string. Maximum allowed length for this field is `2048` characters. Defaults to `&#34;&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder queryString(String queryString) {
            return queryString(Output.of(queryString));
        }

        /**
         * @param redirectProtocol The protocol the request will be redirected as. Possible values include `MatchRequest`, `Http` or `Https`. Defaults to `MatchRequest`.
         * 
         * @return builder
         * 
         */
        public Builder redirectProtocol(@Nullable Output<String> redirectProtocol) {
            $.redirectProtocol = redirectProtocol;
            return this;
        }

        /**
         * @param redirectProtocol The protocol the request will be redirected as. Possible values include `MatchRequest`, `Http` or `Https`. Defaults to `MatchRequest`.
         * 
         * @return builder
         * 
         */
        public Builder redirectProtocol(String redirectProtocol) {
            return redirectProtocol(Output.of(redirectProtocol));
        }

        /**
         * @param redirectType The response type to return to the requestor. Possible values include `Moved`, `Found` , `TemporaryRedirect` or `PermanentRedirect`.
         * 
         * @return builder
         * 
         */
        public Builder redirectType(Output<String> redirectType) {
            $.redirectType = redirectType;
            return this;
        }

        /**
         * @param redirectType The response type to return to the requestor. Possible values include `Moved`, `Found` , `TemporaryRedirect` or `PermanentRedirect`.
         * 
         * @return builder
         * 
         */
        public Builder redirectType(String redirectType) {
            return redirectType(Output.of(redirectType));
        }

        public FrontdoorRuleActionsUrlRedirectActionArgs build() {
            $.destinationHostname = Objects.requireNonNull($.destinationHostname, "expected parameter 'destinationHostname' to be non-null");
            $.redirectType = Objects.requireNonNull($.redirectType, "expected parameter 'redirectType' to be non-null");
            return $;
        }
    }

}
