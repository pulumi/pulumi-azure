// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.privatedns;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.privatedns.LinkServiceArgs;
import com.pulumi.azure.privatedns.inputs.LinkServiceState;
import com.pulumi.azure.privatedns.outputs.LinkServiceNatIpConfiguration;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Private Link Service.
 * 
 * &gt; **NOTE** Private Link is now in [GA](https://docs.microsoft.com/en-gb/azure/private-link/).
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.network.VirtualNetwork;
 * import com.pulumi.azure.network.VirtualNetworkArgs;
 * import com.pulumi.azure.network.Subnet;
 * import com.pulumi.azure.network.SubnetArgs;
 * import com.pulumi.azure.network.PublicIp;
 * import com.pulumi.azure.network.PublicIpArgs;
 * import com.pulumi.azure.lb.LoadBalancer;
 * import com.pulumi.azure.lb.LoadBalancerArgs;
 * import com.pulumi.azure.lb.inputs.LoadBalancerFrontendIpConfigurationArgs;
 * import com.pulumi.azure.privatedns.LinkService;
 * import com.pulumi.azure.privatedns.LinkServiceArgs;
 * import com.pulumi.azure.privatedns.inputs.LinkServiceNatIpConfigurationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var exampleVirtualNetwork = new VirtualNetwork(&#34;exampleVirtualNetwork&#34;, VirtualNetworkArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .addressSpaces(&#34;10.5.0.0/16&#34;)
 *             .build());
 * 
 *         var exampleSubnet = new Subnet(&#34;exampleSubnet&#34;, SubnetArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .virtualNetworkName(exampleVirtualNetwork.name())
 *             .addressPrefixes(&#34;10.5.1.0/24&#34;)
 *             .enforcePrivateLinkServiceNetworkPolicies(true)
 *             .build());
 * 
 *         var examplePublicIp = new PublicIp(&#34;examplePublicIp&#34;, PublicIpArgs.builder()        
 *             .sku(&#34;Standard&#34;)
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .allocationMethod(&#34;Static&#34;)
 *             .build());
 * 
 *         var exampleLoadBalancer = new LoadBalancer(&#34;exampleLoadBalancer&#34;, LoadBalancerArgs.builder()        
 *             .sku(&#34;Standard&#34;)
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .frontendIpConfigurations(LoadBalancerFrontendIpConfigurationArgs.builder()
 *                 .name(examplePublicIp.name())
 *                 .publicIpAddressId(examplePublicIp.id())
 *                 .build())
 *             .build());
 * 
 *         var exampleLinkService = new LinkService(&#34;exampleLinkService&#34;, LinkServiceArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .autoApprovalSubscriptionIds(&#34;00000000-0000-0000-0000-000000000000&#34;)
 *             .visibilitySubscriptionIds(&#34;00000000-0000-0000-0000-000000000000&#34;)
 *             .loadBalancerFrontendIpConfigurationIds(exampleLoadBalancer.frontendIpConfigurations().applyValue(frontendIpConfigurations -&gt; frontendIpConfigurations[0].id()))
 *             .natIpConfigurations(            
 *                 LinkServiceNatIpConfigurationArgs.builder()
 *                     .name(&#34;primary&#34;)
 *                     .privateIpAddress(&#34;10.5.1.17&#34;)
 *                     .privateIpAddressVersion(&#34;IPv4&#34;)
 *                     .subnetId(exampleSubnet.id())
 *                     .primary(true)
 *                     .build(),
 *                 LinkServiceNatIpConfigurationArgs.builder()
 *                     .name(&#34;secondary&#34;)
 *                     .privateIpAddress(&#34;10.5.1.18&#34;)
 *                     .privateIpAddressVersion(&#34;IPv4&#34;)
 *                     .subnetId(exampleSubnet.id())
 *                     .primary(false)
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Private Link Services can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:privatedns/linkService:LinkService example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/privateLinkServices/service1
 * ```
 * 
 */
@ResourceType(type="azure:privatedns/linkService:LinkService")
public class LinkService extends com.pulumi.resources.CustomResource {
    /**
     * A globally unique DNS Name for your Private Link Service. You can use this alias to request a connection to your Private Link Service.
     * 
     */
    @Export(name="alias", type=String.class, parameters={})
    private Output<String> alias;

    /**
     * @return A globally unique DNS Name for your Private Link Service. You can use this alias to request a connection to your Private Link Service.
     * 
     */
    public Output<String> alias() {
        return this.alias;
    }
    /**
     * A list of Subscription UUID/GUID&#39;s that will be automatically be able to use this Private Link Service.
     * 
     */
    @Export(name="autoApprovalSubscriptionIds", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> autoApprovalSubscriptionIds;

    /**
     * @return A list of Subscription UUID/GUID&#39;s that will be automatically be able to use this Private Link Service.
     * 
     */
    public Output<Optional<List<String>>> autoApprovalSubscriptionIds() {
        return Codegen.optional(this.autoApprovalSubscriptionIds);
    }
    /**
     * Should the Private Link Service support the Proxy Protocol? Defaults to `false`.
     * 
     */
    @Export(name="enableProxyProtocol", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enableProxyProtocol;

    /**
     * @return Should the Private Link Service support the Proxy Protocol? Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> enableProxyProtocol() {
        return Codegen.optional(this.enableProxyProtocol);
    }
    /**
     * List of FQDNs allowed for the Private Link Service.
     * 
     */
    @Export(name="fqdns", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> fqdns;

    /**
     * @return List of FQDNs allowed for the Private Link Service.
     * 
     */
    public Output<Optional<List<String>>> fqdns() {
        return Codegen.optional(this.fqdns);
    }
    /**
     * A list of Frontend IP Configuration IDs from a Standard Load Balancer, where traffic from the Private Link Service should be routed. You can use Load Balancer Rules to direct this traffic to appropriate backend pools where your applications are running. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="loadBalancerFrontendIpConfigurationIds", type=List.class, parameters={String.class})
    private Output<List<String>> loadBalancerFrontendIpConfigurationIds;

    /**
     * @return A list of Frontend IP Configuration IDs from a Standard Load Balancer, where traffic from the Private Link Service should be routed. You can use Load Balancer Rules to direct this traffic to appropriate backend pools where your applications are running. Changing this forces a new resource to be created.
     * 
     */
    public Output<List<String>> loadBalancerFrontendIpConfigurationIds() {
        return this.loadBalancerFrontendIpConfigurationIds;
    }
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Specifies the name of this Private Link Service. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Specifies the name of this Private Link Service. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * One or more (up to 8) `nat_ip_configuration` block as defined below.
     * 
     */
    @Export(name="natIpConfigurations", type=List.class, parameters={LinkServiceNatIpConfiguration.class})
    private Output<List<LinkServiceNatIpConfiguration>> natIpConfigurations;

    /**
     * @return One or more (up to 8) `nat_ip_configuration` block as defined below.
     * 
     */
    public Output<List<LinkServiceNatIpConfiguration>> natIpConfigurations() {
        return this.natIpConfigurations;
    }
    /**
     * The name of the Resource Group where the Private Link Service should exist. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="resourceGroupName", type=String.class, parameters={})
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the Private Link Service should exist. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * A list of Subscription UUID/GUID&#39;s that will be able to see this Private Link Service.
     * 
     */
    @Export(name="visibilitySubscriptionIds", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> visibilitySubscriptionIds;

    /**
     * @return A list of Subscription UUID/GUID&#39;s that will be able to see this Private Link Service.
     * 
     */
    public Output<Optional<List<String>>> visibilitySubscriptionIds() {
        return Codegen.optional(this.visibilitySubscriptionIds);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LinkService(String name) {
        this(name, LinkServiceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LinkService(String name, LinkServiceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LinkService(String name, LinkServiceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:privatedns/linkService:LinkService", name, args == null ? LinkServiceArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private LinkService(String name, Output<String> id, @Nullable LinkServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:privatedns/linkService:LinkService", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LinkService get(String name, Output<String> id, @Nullable LinkServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LinkService(name, id, state, options);
    }
}
