// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.stack.outputs;

import com.pulumi.azure.stack.outputs.HciDeploymentSettingScaleUnitInfrastructureNetworkIpPool;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class HciDeploymentSettingScaleUnitInfrastructureNetwork {
    /**
     * @return Whether DHCP is enabled for hosts and cluster IPs. Possible values are `true` and `false`. defaults to `false`. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     * &gt; **NOTE:** If `dhcp_enabled` is set to `false`, the deployment will use static IPs. If set to `true`, the gateway and DNS servers are not required.
     * 
     */
    private @Nullable Boolean dhcpEnabled;
    /**
     * @return Specifies a list of IPv4 addresses of the DNS servers in your environment. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     */
    private List<String> dnsServers;
    /**
     * @return Specifies the default gateway that should be used for the provided IP address space. It should be in the format of an IPv4 IP address. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     */
    private String gateway;
    /**
     * @return One or more `ip_pool` blocks as defined below. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     */
    private List<HciDeploymentSettingScaleUnitInfrastructureNetworkIpPool> ipPools;
    /**
     * @return Specifies the subnet mask that matches the provided IP address space. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     */
    private String subnetMask;

    private HciDeploymentSettingScaleUnitInfrastructureNetwork() {}
    /**
     * @return Whether DHCP is enabled for hosts and cluster IPs. Possible values are `true` and `false`. defaults to `false`. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     * &gt; **NOTE:** If `dhcp_enabled` is set to `false`, the deployment will use static IPs. If set to `true`, the gateway and DNS servers are not required.
     * 
     */
    public Optional<Boolean> dhcpEnabled() {
        return Optional.ofNullable(this.dhcpEnabled);
    }
    /**
     * @return Specifies a list of IPv4 addresses of the DNS servers in your environment. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     */
    public List<String> dnsServers() {
        return this.dnsServers;
    }
    /**
     * @return Specifies the default gateway that should be used for the provided IP address space. It should be in the format of an IPv4 IP address. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     */
    public String gateway() {
        return this.gateway;
    }
    /**
     * @return One or more `ip_pool` blocks as defined below. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     */
    public List<HciDeploymentSettingScaleUnitInfrastructureNetworkIpPool> ipPools() {
        return this.ipPools;
    }
    /**
     * @return Specifies the subnet mask that matches the provided IP address space. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     */
    public String subnetMask() {
        return this.subnetMask;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HciDeploymentSettingScaleUnitInfrastructureNetwork defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean dhcpEnabled;
        private List<String> dnsServers;
        private String gateway;
        private List<HciDeploymentSettingScaleUnitInfrastructureNetworkIpPool> ipPools;
        private String subnetMask;
        public Builder() {}
        public Builder(HciDeploymentSettingScaleUnitInfrastructureNetwork defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dhcpEnabled = defaults.dhcpEnabled;
    	      this.dnsServers = defaults.dnsServers;
    	      this.gateway = defaults.gateway;
    	      this.ipPools = defaults.ipPools;
    	      this.subnetMask = defaults.subnetMask;
        }

        @CustomType.Setter
        public Builder dhcpEnabled(@Nullable Boolean dhcpEnabled) {

            this.dhcpEnabled = dhcpEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder dnsServers(List<String> dnsServers) {
            if (dnsServers == null) {
              throw new MissingRequiredPropertyException("HciDeploymentSettingScaleUnitInfrastructureNetwork", "dnsServers");
            }
            this.dnsServers = dnsServers;
            return this;
        }
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }
        @CustomType.Setter
        public Builder gateway(String gateway) {
            if (gateway == null) {
              throw new MissingRequiredPropertyException("HciDeploymentSettingScaleUnitInfrastructureNetwork", "gateway");
            }
            this.gateway = gateway;
            return this;
        }
        @CustomType.Setter
        public Builder ipPools(List<HciDeploymentSettingScaleUnitInfrastructureNetworkIpPool> ipPools) {
            if (ipPools == null) {
              throw new MissingRequiredPropertyException("HciDeploymentSettingScaleUnitInfrastructureNetwork", "ipPools");
            }
            this.ipPools = ipPools;
            return this;
        }
        public Builder ipPools(HciDeploymentSettingScaleUnitInfrastructureNetworkIpPool... ipPools) {
            return ipPools(List.of(ipPools));
        }
        @CustomType.Setter
        public Builder subnetMask(String subnetMask) {
            if (subnetMask == null) {
              throw new MissingRequiredPropertyException("HciDeploymentSettingScaleUnitInfrastructureNetwork", "subnetMask");
            }
            this.subnetMask = subnetMask;
            return this;
        }
        public HciDeploymentSettingScaleUnitInfrastructureNetwork build() {
            final var _resultValue = new HciDeploymentSettingScaleUnitInfrastructureNetwork();
            _resultValue.dhcpEnabled = dhcpEnabled;
            _resultValue.dnsServers = dnsServers;
            _resultValue.gateway = gateway;
            _resultValue.ipPools = ipPools;
            _resultValue.subnetMask = subnetMask;
            return _resultValue;
        }
    }
}
