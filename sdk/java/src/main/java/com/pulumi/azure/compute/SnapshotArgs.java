// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute;

import com.pulumi.azure.compute.inputs.SnapshotEncryptionSettingsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SnapshotArgs extends com.pulumi.resources.ResourceArgs {

    public static final SnapshotArgs Empty = new SnapshotArgs();

    /**
     * Indicates how the snapshot is to be created. Possible values are `Copy` or `Import`.
     * 
     * &gt; **Note:** One of `source_uri`, `source_resource_id` or `storage_account_id` must be specified.
     * 
     */
    @Import(name="createOption", required=true)
    private Output<String> createOption;

    /**
     * @return Indicates how the snapshot is to be created. Possible values are `Copy` or `Import`.
     * 
     * &gt; **Note:** One of `source_uri`, `source_resource_id` or `storage_account_id` must be specified.
     * 
     */
    public Output<String> createOption() {
        return this.createOption;
    }

    /**
     * The size of the Snapshotted Disk in GB.
     * 
     */
    @Import(name="diskSizeGb")
    private @Nullable Output<Integer> diskSizeGb;

    /**
     * @return The size of the Snapshotted Disk in GB.
     * 
     */
    public Optional<Output<Integer>> diskSizeGb() {
        return Optional.ofNullable(this.diskSizeGb);
    }

    /**
     * A `encryption_settings` block as defined below.
     * 
     * &gt; **NOTE:** Removing `encryption_settings` forces a new resource to be created.
     * 
     */
    @Import(name="encryptionSettings")
    private @Nullable Output<SnapshotEncryptionSettingsArgs> encryptionSettings;

    /**
     * @return A `encryption_settings` block as defined below.
     * 
     * &gt; **NOTE:** Removing `encryption_settings` forces a new resource to be created.
     * 
     */
    public Optional<Output<SnapshotEncryptionSettingsArgs>> encryptionSettings() {
        return Optional.ofNullable(this.encryptionSettings);
    }

    /**
     * Specifies if the Snapshot is incremental. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="incrementalEnabled")
    private @Nullable Output<Boolean> incrementalEnabled;

    /**
     * @return Specifies if the Snapshot is incremental. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<Boolean>> incrementalEnabled() {
        return Optional.ofNullable(this.incrementalEnabled);
    }

    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Specifies the name of the Snapshot resource. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the Snapshot resource. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the resource group in which to create the Snapshot. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the Snapshot. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Specifies a reference to an existing snapshot, when `create_option` is `Copy`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="sourceResourceId")
    private @Nullable Output<String> sourceResourceId;

    /**
     * @return Specifies a reference to an existing snapshot, when `create_option` is `Copy`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> sourceResourceId() {
        return Optional.ofNullable(this.sourceResourceId);
    }

    /**
     * Specifies the URI to a Managed or Unmanaged Disk. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="sourceUri")
    private @Nullable Output<String> sourceUri;

    /**
     * @return Specifies the URI to a Managed or Unmanaged Disk. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> sourceUri() {
        return Optional.ofNullable(this.sourceUri);
    }

    /**
     * Specifies the ID of an storage account. Used with `source_uri` to allow authorization during import of unmanaged blobs from a different subscription. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="storageAccountId")
    private @Nullable Output<String> storageAccountId;

    /**
     * @return Specifies the ID of an storage account. Used with `source_uri` to allow authorization during import of unmanaged blobs from a different subscription. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> storageAccountId() {
        return Optional.ofNullable(this.storageAccountId);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private SnapshotArgs() {}

    private SnapshotArgs(SnapshotArgs $) {
        this.createOption = $.createOption;
        this.diskSizeGb = $.diskSizeGb;
        this.encryptionSettings = $.encryptionSettings;
        this.incrementalEnabled = $.incrementalEnabled;
        this.location = $.location;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
        this.sourceResourceId = $.sourceResourceId;
        this.sourceUri = $.sourceUri;
        this.storageAccountId = $.storageAccountId;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SnapshotArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SnapshotArgs $;

        public Builder() {
            $ = new SnapshotArgs();
        }

        public Builder(SnapshotArgs defaults) {
            $ = new SnapshotArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createOption Indicates how the snapshot is to be created. Possible values are `Copy` or `Import`.
         * 
         * &gt; **Note:** One of `source_uri`, `source_resource_id` or `storage_account_id` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder createOption(Output<String> createOption) {
            $.createOption = createOption;
            return this;
        }

        /**
         * @param createOption Indicates how the snapshot is to be created. Possible values are `Copy` or `Import`.
         * 
         * &gt; **Note:** One of `source_uri`, `source_resource_id` or `storage_account_id` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder createOption(String createOption) {
            return createOption(Output.of(createOption));
        }

        /**
         * @param diskSizeGb The size of the Snapshotted Disk in GB.
         * 
         * @return builder
         * 
         */
        public Builder diskSizeGb(@Nullable Output<Integer> diskSizeGb) {
            $.diskSizeGb = diskSizeGb;
            return this;
        }

        /**
         * @param diskSizeGb The size of the Snapshotted Disk in GB.
         * 
         * @return builder
         * 
         */
        public Builder diskSizeGb(Integer diskSizeGb) {
            return diskSizeGb(Output.of(diskSizeGb));
        }

        /**
         * @param encryptionSettings A `encryption_settings` block as defined below.
         * 
         * &gt; **NOTE:** Removing `encryption_settings` forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder encryptionSettings(@Nullable Output<SnapshotEncryptionSettingsArgs> encryptionSettings) {
            $.encryptionSettings = encryptionSettings;
            return this;
        }

        /**
         * @param encryptionSettings A `encryption_settings` block as defined below.
         * 
         * &gt; **NOTE:** Removing `encryption_settings` forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder encryptionSettings(SnapshotEncryptionSettingsArgs encryptionSettings) {
            return encryptionSettings(Output.of(encryptionSettings));
        }

        /**
         * @param incrementalEnabled Specifies if the Snapshot is incremental. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder incrementalEnabled(@Nullable Output<Boolean> incrementalEnabled) {
            $.incrementalEnabled = incrementalEnabled;
            return this;
        }

        /**
         * @param incrementalEnabled Specifies if the Snapshot is incremental. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder incrementalEnabled(Boolean incrementalEnabled) {
            return incrementalEnabled(Output.of(incrementalEnabled));
        }

        /**
         * @param location Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Specifies the name of the Snapshot resource. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Snapshot resource. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the Snapshot. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the Snapshot. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param sourceResourceId Specifies a reference to an existing snapshot, when `create_option` is `Copy`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder sourceResourceId(@Nullable Output<String> sourceResourceId) {
            $.sourceResourceId = sourceResourceId;
            return this;
        }

        /**
         * @param sourceResourceId Specifies a reference to an existing snapshot, when `create_option` is `Copy`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder sourceResourceId(String sourceResourceId) {
            return sourceResourceId(Output.of(sourceResourceId));
        }

        /**
         * @param sourceUri Specifies the URI to a Managed or Unmanaged Disk. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder sourceUri(@Nullable Output<String> sourceUri) {
            $.sourceUri = sourceUri;
            return this;
        }

        /**
         * @param sourceUri Specifies the URI to a Managed or Unmanaged Disk. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder sourceUri(String sourceUri) {
            return sourceUri(Output.of(sourceUri));
        }

        /**
         * @param storageAccountId Specifies the ID of an storage account. Used with `source_uri` to allow authorization during import of unmanaged blobs from a different subscription. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountId(@Nullable Output<String> storageAccountId) {
            $.storageAccountId = storageAccountId;
            return this;
        }

        /**
         * @param storageAccountId Specifies the ID of an storage account. Used with `source_uri` to allow authorization during import of unmanaged blobs from a different subscription. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountId(String storageAccountId) {
            return storageAccountId(Output.of(storageAccountId));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public SnapshotArgs build() {
            $.createOption = Objects.requireNonNull($.createOption, "expected parameter 'createOption' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
