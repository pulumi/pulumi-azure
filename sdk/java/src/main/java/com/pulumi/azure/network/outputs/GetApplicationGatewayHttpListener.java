// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.azure.network.outputs.GetApplicationGatewayHttpListenerCustomErrorConfiguration;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetApplicationGatewayHttpListener {
    /**
     * @return One or more `custom_error_configuration` blocks as defined below.
     * 
     */
    private List<GetApplicationGatewayHttpListenerCustomErrorConfiguration> customErrorConfigurations;
    /**
     * @return The ID of the Web Application Firewall Policy which is used as an HTTP Listener for this Path Rule.
     * 
     */
    private String firewallPolicyId;
    /**
     * @return The ID of the associated Frontend Configuration.
     * 
     */
    private String frontendIpConfigurationId;
    /**
     * @return The Name of the Frontend IP Configuration used for this HTTP Listener.
     * 
     */
    private String frontendIpConfigurationName;
    /**
     * @return The ID of the associated Frontend Port.
     * 
     */
    private String frontendPortId;
    /**
     * @return The Name of the Frontend Port used for this HTTP Listener.
     * 
     */
    private String frontendPortName;
    /**
     * @return The Hostname which is used for this HTTP Listener.
     * 
     */
    private String hostName;
    /**
     * @return A list of Hostname(s) used for this HTTP Listener. It allows special wildcard characters.
     * 
     */
    private List<String> hostNames;
    /**
     * @return The ID of the Rewrite Rule Set
     * 
     */
    private String id;
    /**
     * @return The name of this Application Gateway.
     * 
     */
    private String name;
    /**
     * @return The Protocol used for this Probe.
     * 
     */
    private String protocol;
    /**
     * @return Is Server Name Indication required?
     * 
     */
    private Boolean requireSni;
    /**
     * @return The ID of the associated SSL Certificate.
     * 
     */
    private String sslCertificateId;
    /**
     * @return The name of the associated SSL Certificate which is used for this HTTP Listener.
     * 
     */
    private String sslCertificateName;
    /**
     * @return The ID of the associated SSL Profile.
     * 
     */
    private String sslProfileId;
    /**
     * @return The name of the associated SSL Profile which is used for this HTTP Listener.
     * 
     */
    private String sslProfileName;

    private GetApplicationGatewayHttpListener() {}
    /**
     * @return One or more `custom_error_configuration` blocks as defined below.
     * 
     */
    public List<GetApplicationGatewayHttpListenerCustomErrorConfiguration> customErrorConfigurations() {
        return this.customErrorConfigurations;
    }
    /**
     * @return The ID of the Web Application Firewall Policy which is used as an HTTP Listener for this Path Rule.
     * 
     */
    public String firewallPolicyId() {
        return this.firewallPolicyId;
    }
    /**
     * @return The ID of the associated Frontend Configuration.
     * 
     */
    public String frontendIpConfigurationId() {
        return this.frontendIpConfigurationId;
    }
    /**
     * @return The Name of the Frontend IP Configuration used for this HTTP Listener.
     * 
     */
    public String frontendIpConfigurationName() {
        return this.frontendIpConfigurationName;
    }
    /**
     * @return The ID of the associated Frontend Port.
     * 
     */
    public String frontendPortId() {
        return this.frontendPortId;
    }
    /**
     * @return The Name of the Frontend Port used for this HTTP Listener.
     * 
     */
    public String frontendPortName() {
        return this.frontendPortName;
    }
    /**
     * @return The Hostname which is used for this HTTP Listener.
     * 
     */
    public String hostName() {
        return this.hostName;
    }
    /**
     * @return A list of Hostname(s) used for this HTTP Listener. It allows special wildcard characters.
     * 
     */
    public List<String> hostNames() {
        return this.hostNames;
    }
    /**
     * @return The ID of the Rewrite Rule Set
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of this Application Gateway.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The Protocol used for this Probe.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return Is Server Name Indication required?
     * 
     */
    public Boolean requireSni() {
        return this.requireSni;
    }
    /**
     * @return The ID of the associated SSL Certificate.
     * 
     */
    public String sslCertificateId() {
        return this.sslCertificateId;
    }
    /**
     * @return The name of the associated SSL Certificate which is used for this HTTP Listener.
     * 
     */
    public String sslCertificateName() {
        return this.sslCertificateName;
    }
    /**
     * @return The ID of the associated SSL Profile.
     * 
     */
    public String sslProfileId() {
        return this.sslProfileId;
    }
    /**
     * @return The name of the associated SSL Profile which is used for this HTTP Listener.
     * 
     */
    public String sslProfileName() {
        return this.sslProfileName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationGatewayHttpListener defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetApplicationGatewayHttpListenerCustomErrorConfiguration> customErrorConfigurations;
        private String firewallPolicyId;
        private String frontendIpConfigurationId;
        private String frontendIpConfigurationName;
        private String frontendPortId;
        private String frontendPortName;
        private String hostName;
        private List<String> hostNames;
        private String id;
        private String name;
        private String protocol;
        private Boolean requireSni;
        private String sslCertificateId;
        private String sslCertificateName;
        private String sslProfileId;
        private String sslProfileName;
        public Builder() {}
        public Builder(GetApplicationGatewayHttpListener defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customErrorConfigurations = defaults.customErrorConfigurations;
    	      this.firewallPolicyId = defaults.firewallPolicyId;
    	      this.frontendIpConfigurationId = defaults.frontendIpConfigurationId;
    	      this.frontendIpConfigurationName = defaults.frontendIpConfigurationName;
    	      this.frontendPortId = defaults.frontendPortId;
    	      this.frontendPortName = defaults.frontendPortName;
    	      this.hostName = defaults.hostName;
    	      this.hostNames = defaults.hostNames;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.protocol = defaults.protocol;
    	      this.requireSni = defaults.requireSni;
    	      this.sslCertificateId = defaults.sslCertificateId;
    	      this.sslCertificateName = defaults.sslCertificateName;
    	      this.sslProfileId = defaults.sslProfileId;
    	      this.sslProfileName = defaults.sslProfileName;
        }

        @CustomType.Setter
        public Builder customErrorConfigurations(List<GetApplicationGatewayHttpListenerCustomErrorConfiguration> customErrorConfigurations) {
            this.customErrorConfigurations = Objects.requireNonNull(customErrorConfigurations);
            return this;
        }
        public Builder customErrorConfigurations(GetApplicationGatewayHttpListenerCustomErrorConfiguration... customErrorConfigurations) {
            return customErrorConfigurations(List.of(customErrorConfigurations));
        }
        @CustomType.Setter
        public Builder firewallPolicyId(String firewallPolicyId) {
            this.firewallPolicyId = Objects.requireNonNull(firewallPolicyId);
            return this;
        }
        @CustomType.Setter
        public Builder frontendIpConfigurationId(String frontendIpConfigurationId) {
            this.frontendIpConfigurationId = Objects.requireNonNull(frontendIpConfigurationId);
            return this;
        }
        @CustomType.Setter
        public Builder frontendIpConfigurationName(String frontendIpConfigurationName) {
            this.frontendIpConfigurationName = Objects.requireNonNull(frontendIpConfigurationName);
            return this;
        }
        @CustomType.Setter
        public Builder frontendPortId(String frontendPortId) {
            this.frontendPortId = Objects.requireNonNull(frontendPortId);
            return this;
        }
        @CustomType.Setter
        public Builder frontendPortName(String frontendPortName) {
            this.frontendPortName = Objects.requireNonNull(frontendPortName);
            return this;
        }
        @CustomType.Setter
        public Builder hostName(String hostName) {
            this.hostName = Objects.requireNonNull(hostName);
            return this;
        }
        @CustomType.Setter
        public Builder hostNames(List<String> hostNames) {
            this.hostNames = Objects.requireNonNull(hostNames);
            return this;
        }
        public Builder hostNames(String... hostNames) {
            return hostNames(List.of(hostNames));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        @CustomType.Setter
        public Builder requireSni(Boolean requireSni) {
            this.requireSni = Objects.requireNonNull(requireSni);
            return this;
        }
        @CustomType.Setter
        public Builder sslCertificateId(String sslCertificateId) {
            this.sslCertificateId = Objects.requireNonNull(sslCertificateId);
            return this;
        }
        @CustomType.Setter
        public Builder sslCertificateName(String sslCertificateName) {
            this.sslCertificateName = Objects.requireNonNull(sslCertificateName);
            return this;
        }
        @CustomType.Setter
        public Builder sslProfileId(String sslProfileId) {
            this.sslProfileId = Objects.requireNonNull(sslProfileId);
            return this;
        }
        @CustomType.Setter
        public Builder sslProfileName(String sslProfileName) {
            this.sslProfileName = Objects.requireNonNull(sslProfileName);
            return this;
        }
        public GetApplicationGatewayHttpListener build() {
            final var _resultValue = new GetApplicationGatewayHttpListener();
            _resultValue.customErrorConfigurations = customErrorConfigurations;
            _resultValue.firewallPolicyId = firewallPolicyId;
            _resultValue.frontendIpConfigurationId = frontendIpConfigurationId;
            _resultValue.frontendIpConfigurationName = frontendIpConfigurationName;
            _resultValue.frontendPortId = frontendPortId;
            _resultValue.frontendPortName = frontendPortName;
            _resultValue.hostName = hostName;
            _resultValue.hostNames = hostNames;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.protocol = protocol;
            _resultValue.requireSni = requireSni;
            _resultValue.sslCertificateId = sslCertificateId;
            _resultValue.sslCertificateName = sslCertificateName;
            _resultValue.sslProfileId = sslProfileId;
            _resultValue.sslProfileName = sslProfileName;
            return _resultValue;
        }
    }
}
