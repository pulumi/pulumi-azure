// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerapp.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetEnvironmentResult {
    /**
     * @return The default publicly resolvable name of this Container App Environment. This is generated at creation time to be globally unique.
     * 
     */
    private String defaultDomain;
    /**
     * @return The network addressing in which the Container Apps in this Container App Environment will reside in CIDR notation.
     * 
     */
    private String dockerBridgeCidr;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The ID of the Subnet in use by the Container Apps Control Plane.
     * 
     */
    private String infrastructureSubnetId;
    /**
     * @return Does the Container App Environment operate in Internal Load Balancing Mode?
     * 
     */
    private Boolean internalLoadBalancerEnabled;
    /**
     * @return The Azure Location where this Container App Environment exists.
     * 
     */
    private String location;
    /**
     * @return The name of the Log Analytics Workspace this Container Apps Managed Environment is linked to.
     * 
     */
    private String logAnalyticsWorkspaceName;
    private String name;
    /**
     * @return The IP range, in CIDR notation, that is reserved for environment infrastructure IP addresses.
     * 
     */
    private String platformReservedCidr;
    /**
     * @return The IP address from the IP range defined by `platform_reserved_cidr` that is reserved for the internal DNS server.
     * 
     */
    private String platformReservedDnsIpAddress;
    private String resourceGroupName;
    /**
     * @return The Static IP address of the Environment.
     * 
     */
    private String staticIpAddress;
    /**
     * @return A mapping of tags assigned to the resource.
     * 
     */
    private Map<String,String> tags;

    private GetEnvironmentResult() {}
    /**
     * @return The default publicly resolvable name of this Container App Environment. This is generated at creation time to be globally unique.
     * 
     */
    public String defaultDomain() {
        return this.defaultDomain;
    }
    /**
     * @return The network addressing in which the Container Apps in this Container App Environment will reside in CIDR notation.
     * 
     */
    public String dockerBridgeCidr() {
        return this.dockerBridgeCidr;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of the Subnet in use by the Container Apps Control Plane.
     * 
     */
    public String infrastructureSubnetId() {
        return this.infrastructureSubnetId;
    }
    /**
     * @return Does the Container App Environment operate in Internal Load Balancing Mode?
     * 
     */
    public Boolean internalLoadBalancerEnabled() {
        return this.internalLoadBalancerEnabled;
    }
    /**
     * @return The Azure Location where this Container App Environment exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The name of the Log Analytics Workspace this Container Apps Managed Environment is linked to.
     * 
     */
    public String logAnalyticsWorkspaceName() {
        return this.logAnalyticsWorkspaceName;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The IP range, in CIDR notation, that is reserved for environment infrastructure IP addresses.
     * 
     */
    public String platformReservedCidr() {
        return this.platformReservedCidr;
    }
    /**
     * @return The IP address from the IP range defined by `platform_reserved_cidr` that is reserved for the internal DNS server.
     * 
     */
    public String platformReservedDnsIpAddress() {
        return this.platformReservedDnsIpAddress;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The Static IP address of the Environment.
     * 
     */
    public String staticIpAddress() {
        return this.staticIpAddress;
    }
    /**
     * @return A mapping of tags assigned to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEnvironmentResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String defaultDomain;
        private String dockerBridgeCidr;
        private String id;
        private String infrastructureSubnetId;
        private Boolean internalLoadBalancerEnabled;
        private String location;
        private String logAnalyticsWorkspaceName;
        private String name;
        private String platformReservedCidr;
        private String platformReservedDnsIpAddress;
        private String resourceGroupName;
        private String staticIpAddress;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetEnvironmentResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultDomain = defaults.defaultDomain;
    	      this.dockerBridgeCidr = defaults.dockerBridgeCidr;
    	      this.id = defaults.id;
    	      this.infrastructureSubnetId = defaults.infrastructureSubnetId;
    	      this.internalLoadBalancerEnabled = defaults.internalLoadBalancerEnabled;
    	      this.location = defaults.location;
    	      this.logAnalyticsWorkspaceName = defaults.logAnalyticsWorkspaceName;
    	      this.name = defaults.name;
    	      this.platformReservedCidr = defaults.platformReservedCidr;
    	      this.platformReservedDnsIpAddress = defaults.platformReservedDnsIpAddress;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.staticIpAddress = defaults.staticIpAddress;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder defaultDomain(String defaultDomain) {
            if (defaultDomain == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "defaultDomain");
            }
            this.defaultDomain = defaultDomain;
            return this;
        }
        @CustomType.Setter
        public Builder dockerBridgeCidr(String dockerBridgeCidr) {
            if (dockerBridgeCidr == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "dockerBridgeCidr");
            }
            this.dockerBridgeCidr = dockerBridgeCidr;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder infrastructureSubnetId(String infrastructureSubnetId) {
            if (infrastructureSubnetId == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "infrastructureSubnetId");
            }
            this.infrastructureSubnetId = infrastructureSubnetId;
            return this;
        }
        @CustomType.Setter
        public Builder internalLoadBalancerEnabled(Boolean internalLoadBalancerEnabled) {
            if (internalLoadBalancerEnabled == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "internalLoadBalancerEnabled");
            }
            this.internalLoadBalancerEnabled = internalLoadBalancerEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder logAnalyticsWorkspaceName(String logAnalyticsWorkspaceName) {
            if (logAnalyticsWorkspaceName == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "logAnalyticsWorkspaceName");
            }
            this.logAnalyticsWorkspaceName = logAnalyticsWorkspaceName;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder platformReservedCidr(String platformReservedCidr) {
            if (platformReservedCidr == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "platformReservedCidr");
            }
            this.platformReservedCidr = platformReservedCidr;
            return this;
        }
        @CustomType.Setter
        public Builder platformReservedDnsIpAddress(String platformReservedDnsIpAddress) {
            if (platformReservedDnsIpAddress == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "platformReservedDnsIpAddress");
            }
            this.platformReservedDnsIpAddress = platformReservedDnsIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder staticIpAddress(String staticIpAddress) {
            if (staticIpAddress == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "staticIpAddress");
            }
            this.staticIpAddress = staticIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public GetEnvironmentResult build() {
            final var _resultValue = new GetEnvironmentResult();
            _resultValue.defaultDomain = defaultDomain;
            _resultValue.dockerBridgeCidr = dockerBridgeCidr;
            _resultValue.id = id;
            _resultValue.infrastructureSubnetId = infrastructureSubnetId;
            _resultValue.internalLoadBalancerEnabled = internalLoadBalancerEnabled;
            _resultValue.location = location;
            _resultValue.logAnalyticsWorkspaceName = logAnalyticsWorkspaceName;
            _resultValue.name = name;
            _resultValue.platformReservedCidr = platformReservedCidr;
            _resultValue.platformReservedDnsIpAddress = platformReservedDnsIpAddress;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.staticIpAddress = staticIpAddress;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
