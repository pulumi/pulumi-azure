// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LinuxFunctionAppSiteConfigApplicationStackDocker {
    /**
     * @return The name of the Docker image to use.
     * 
     */
    private String imageName;
    /**
     * @return The image tag of the image to use.
     * 
     */
    private String imageTag;
    /**
     * @return The password for the account to use to connect to the registry.
     * 
     * &gt; **NOTE:** This value is required if `container_registry_use_managed_identity` is not set to `true`.
     * 
     */
    private @Nullable String registryPassword;
    /**
     * @return The URL of the docker registry.
     * 
     */
    private String registryUrl;
    /**
     * @return The username to use for connections to the registry.
     * 
     * &gt; **NOTE:** This value is required if `container_registry_use_managed_identity` is not set to `true`.
     * 
     */
    private @Nullable String registryUsername;

    private LinuxFunctionAppSiteConfigApplicationStackDocker() {}
    /**
     * @return The name of the Docker image to use.
     * 
     */
    public String imageName() {
        return this.imageName;
    }
    /**
     * @return The image tag of the image to use.
     * 
     */
    public String imageTag() {
        return this.imageTag;
    }
    /**
     * @return The password for the account to use to connect to the registry.
     * 
     * &gt; **NOTE:** This value is required if `container_registry_use_managed_identity` is not set to `true`.
     * 
     */
    public Optional<String> registryPassword() {
        return Optional.ofNullable(this.registryPassword);
    }
    /**
     * @return The URL of the docker registry.
     * 
     */
    public String registryUrl() {
        return this.registryUrl;
    }
    /**
     * @return The username to use for connections to the registry.
     * 
     * &gt; **NOTE:** This value is required if `container_registry_use_managed_identity` is not set to `true`.
     * 
     */
    public Optional<String> registryUsername() {
        return Optional.ofNullable(this.registryUsername);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LinuxFunctionAppSiteConfigApplicationStackDocker defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String imageName;
        private String imageTag;
        private @Nullable String registryPassword;
        private String registryUrl;
        private @Nullable String registryUsername;
        public Builder() {}
        public Builder(LinuxFunctionAppSiteConfigApplicationStackDocker defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.imageName = defaults.imageName;
    	      this.imageTag = defaults.imageTag;
    	      this.registryPassword = defaults.registryPassword;
    	      this.registryUrl = defaults.registryUrl;
    	      this.registryUsername = defaults.registryUsername;
        }

        @CustomType.Setter
        public Builder imageName(String imageName) {
            if (imageName == null) {
              throw new MissingRequiredPropertyException("LinuxFunctionAppSiteConfigApplicationStackDocker", "imageName");
            }
            this.imageName = imageName;
            return this;
        }
        @CustomType.Setter
        public Builder imageTag(String imageTag) {
            if (imageTag == null) {
              throw new MissingRequiredPropertyException("LinuxFunctionAppSiteConfigApplicationStackDocker", "imageTag");
            }
            this.imageTag = imageTag;
            return this;
        }
        @CustomType.Setter
        public Builder registryPassword(@Nullable String registryPassword) {

            this.registryPassword = registryPassword;
            return this;
        }
        @CustomType.Setter
        public Builder registryUrl(String registryUrl) {
            if (registryUrl == null) {
              throw new MissingRequiredPropertyException("LinuxFunctionAppSiteConfigApplicationStackDocker", "registryUrl");
            }
            this.registryUrl = registryUrl;
            return this;
        }
        @CustomType.Setter
        public Builder registryUsername(@Nullable String registryUsername) {

            this.registryUsername = registryUsername;
            return this;
        }
        public LinuxFunctionAppSiteConfigApplicationStackDocker build() {
            final var _resultValue = new LinuxFunctionAppSiteConfigApplicationStackDocker();
            _resultValue.imageName = imageName;
            _resultValue.imageTag = imageTag;
            _resultValue.registryPassword = registryPassword;
            _resultValue.registryUrl = registryUrl;
            _resultValue.registryUsername = registryUsername;
            return _resultValue;
        }
    }
}
