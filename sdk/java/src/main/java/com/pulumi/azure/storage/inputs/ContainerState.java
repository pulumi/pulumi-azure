// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.storage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerState extends com.pulumi.resources.ResourceArgs {

    public static final ContainerState Empty = new ContainerState();

    /**
     * The Access Level configured for this Container. Possible values are `blob`, `container` or `private`. Defaults to `private`.
     * 
     * &gt; **Note** When updating `container_access_type` for an existing storage container resource, Shared Key authentication will always be used, as AzureAD authentication is not supported.
     * 
     */
    @Import(name="containerAccessType")
    private @Nullable Output<String> containerAccessType;

    /**
     * @return The Access Level configured for this Container. Possible values are `blob`, `container` or `private`. Defaults to `private`.
     * 
     * &gt; **Note** When updating `container_access_type` for an existing storage container resource, Shared Key authentication will always be used, as AzureAD authentication is not supported.
     * 
     */
    public Optional<Output<String>> containerAccessType() {
        return Optional.ofNullable(this.containerAccessType);
    }

    /**
     * The default encryption scope to use for blobs uploaded to this container. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="defaultEncryptionScope")
    private @Nullable Output<String> defaultEncryptionScope;

    /**
     * @return The default encryption scope to use for blobs uploaded to this container. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> defaultEncryptionScope() {
        return Optional.ofNullable(this.defaultEncryptionScope);
    }

    /**
     * Whether to allow blobs to override the default encryption scope for this container. Can only be set when specifying `default_encryption_scope`. Defaults to `true`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="encryptionScopeOverrideEnabled")
    private @Nullable Output<Boolean> encryptionScopeOverrideEnabled;

    /**
     * @return Whether to allow blobs to override the default encryption scope for this container. Can only be set when specifying `default_encryption_scope`. Defaults to `true`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<Boolean>> encryptionScopeOverrideEnabled() {
        return Optional.ofNullable(this.encryptionScopeOverrideEnabled);
    }

    /**
     * Is there an Immutability Policy configured on this Storage Container?
     * 
     */
    @Import(name="hasImmutabilityPolicy")
    private @Nullable Output<Boolean> hasImmutabilityPolicy;

    /**
     * @return Is there an Immutability Policy configured on this Storage Container?
     * 
     */
    public Optional<Output<Boolean>> hasImmutabilityPolicy() {
        return Optional.ofNullable(this.hasImmutabilityPolicy);
    }

    /**
     * Is there a Legal Hold configured on this Storage Container?
     * 
     */
    @Import(name="hasLegalHold")
    private @Nullable Output<Boolean> hasLegalHold;

    /**
     * @return Is there a Legal Hold configured on this Storage Container?
     * 
     */
    public Optional<Output<Boolean>> hasLegalHold() {
        return Optional.ofNullable(this.hasLegalHold);
    }

    /**
     * A mapping of MetaData for this Container. All metadata keys should be lowercase.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<Map<String,String>> metadata;

    /**
     * @return A mapping of MetaData for this Container. All metadata keys should be lowercase.
     * 
     */
    public Optional<Output<Map<String,String>>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * The name of the Container which should be created within the Storage Account. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Container which should be created within the Storage Account. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The Resource Manager ID of this Storage Container.
     * 
     * @deprecated
     * this property has been deprecated in favour of `id` and will be removed in version 5.0 of the Provider.
     * 
     */
    @Deprecated /* this property has been deprecated in favour of `id` and will be removed in version 5.0 of the Provider. */
    @Import(name="resourceManagerId")
    private @Nullable Output<String> resourceManagerId;

    /**
     * @return The Resource Manager ID of this Storage Container.
     * 
     * @deprecated
     * this property has been deprecated in favour of `id` and will be removed in version 5.0 of the Provider.
     * 
     */
    @Deprecated /* this property has been deprecated in favour of `id` and will be removed in version 5.0 of the Provider. */
    public Optional<Output<String>> resourceManagerId() {
        return Optional.ofNullable(this.resourceManagerId);
    }

    /**
     * The name of the Storage Account where the Container should be created. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** One of `storage_account_name` or `storage_account_id` must be specified. When specifying `storage_account_id` the resource will use the Resource Manager API, rather than the Data Plane API.
     * 
     */
    @Import(name="storageAccountId")
    private @Nullable Output<String> storageAccountId;

    /**
     * @return The name of the Storage Account where the Container should be created. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** One of `storage_account_name` or `storage_account_id` must be specified. When specifying `storage_account_id` the resource will use the Resource Manager API, rather than the Data Plane API.
     * 
     */
    public Optional<Output<String>> storageAccountId() {
        return Optional.ofNullable(this.storageAccountId);
    }

    /**
     * The name of the Storage Account where the Container should be created. Changing this forces a new resource to be created. This property is deprecated in favour of `storage_account_id`.
     * 
     * @deprecated
     * the `storage_account_name` property has been deprecated in favour of `storage_account_id` and will be removed in version 5.0 of the Provider.
     * 
     */
    @Deprecated /* the `storage_account_name` property has been deprecated in favour of `storage_account_id` and will be removed in version 5.0 of the Provider. */
    @Import(name="storageAccountName")
    private @Nullable Output<String> storageAccountName;

    /**
     * @return The name of the Storage Account where the Container should be created. Changing this forces a new resource to be created. This property is deprecated in favour of `storage_account_id`.
     * 
     * @deprecated
     * the `storage_account_name` property has been deprecated in favour of `storage_account_id` and will be removed in version 5.0 of the Provider.
     * 
     */
    @Deprecated /* the `storage_account_name` property has been deprecated in favour of `storage_account_id` and will be removed in version 5.0 of the Provider. */
    public Optional<Output<String>> storageAccountName() {
        return Optional.ofNullable(this.storageAccountName);
    }

    private ContainerState() {}

    private ContainerState(ContainerState $) {
        this.containerAccessType = $.containerAccessType;
        this.defaultEncryptionScope = $.defaultEncryptionScope;
        this.encryptionScopeOverrideEnabled = $.encryptionScopeOverrideEnabled;
        this.hasImmutabilityPolicy = $.hasImmutabilityPolicy;
        this.hasLegalHold = $.hasLegalHold;
        this.metadata = $.metadata;
        this.name = $.name;
        this.resourceManagerId = $.resourceManagerId;
        this.storageAccountId = $.storageAccountId;
        this.storageAccountName = $.storageAccountName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerState $;

        public Builder() {
            $ = new ContainerState();
        }

        public Builder(ContainerState defaults) {
            $ = new ContainerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param containerAccessType The Access Level configured for this Container. Possible values are `blob`, `container` or `private`. Defaults to `private`.
         * 
         * &gt; **Note** When updating `container_access_type` for an existing storage container resource, Shared Key authentication will always be used, as AzureAD authentication is not supported.
         * 
         * @return builder
         * 
         */
        public Builder containerAccessType(@Nullable Output<String> containerAccessType) {
            $.containerAccessType = containerAccessType;
            return this;
        }

        /**
         * @param containerAccessType The Access Level configured for this Container. Possible values are `blob`, `container` or `private`. Defaults to `private`.
         * 
         * &gt; **Note** When updating `container_access_type` for an existing storage container resource, Shared Key authentication will always be used, as AzureAD authentication is not supported.
         * 
         * @return builder
         * 
         */
        public Builder containerAccessType(String containerAccessType) {
            return containerAccessType(Output.of(containerAccessType));
        }

        /**
         * @param defaultEncryptionScope The default encryption scope to use for blobs uploaded to this container. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder defaultEncryptionScope(@Nullable Output<String> defaultEncryptionScope) {
            $.defaultEncryptionScope = defaultEncryptionScope;
            return this;
        }

        /**
         * @param defaultEncryptionScope The default encryption scope to use for blobs uploaded to this container. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder defaultEncryptionScope(String defaultEncryptionScope) {
            return defaultEncryptionScope(Output.of(defaultEncryptionScope));
        }

        /**
         * @param encryptionScopeOverrideEnabled Whether to allow blobs to override the default encryption scope for this container. Can only be set when specifying `default_encryption_scope`. Defaults to `true`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder encryptionScopeOverrideEnabled(@Nullable Output<Boolean> encryptionScopeOverrideEnabled) {
            $.encryptionScopeOverrideEnabled = encryptionScopeOverrideEnabled;
            return this;
        }

        /**
         * @param encryptionScopeOverrideEnabled Whether to allow blobs to override the default encryption scope for this container. Can only be set when specifying `default_encryption_scope`. Defaults to `true`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder encryptionScopeOverrideEnabled(Boolean encryptionScopeOverrideEnabled) {
            return encryptionScopeOverrideEnabled(Output.of(encryptionScopeOverrideEnabled));
        }

        /**
         * @param hasImmutabilityPolicy Is there an Immutability Policy configured on this Storage Container?
         * 
         * @return builder
         * 
         */
        public Builder hasImmutabilityPolicy(@Nullable Output<Boolean> hasImmutabilityPolicy) {
            $.hasImmutabilityPolicy = hasImmutabilityPolicy;
            return this;
        }

        /**
         * @param hasImmutabilityPolicy Is there an Immutability Policy configured on this Storage Container?
         * 
         * @return builder
         * 
         */
        public Builder hasImmutabilityPolicy(Boolean hasImmutabilityPolicy) {
            return hasImmutabilityPolicy(Output.of(hasImmutabilityPolicy));
        }

        /**
         * @param hasLegalHold Is there a Legal Hold configured on this Storage Container?
         * 
         * @return builder
         * 
         */
        public Builder hasLegalHold(@Nullable Output<Boolean> hasLegalHold) {
            $.hasLegalHold = hasLegalHold;
            return this;
        }

        /**
         * @param hasLegalHold Is there a Legal Hold configured on this Storage Container?
         * 
         * @return builder
         * 
         */
        public Builder hasLegalHold(Boolean hasLegalHold) {
            return hasLegalHold(Output.of(hasLegalHold));
        }

        /**
         * @param metadata A mapping of MetaData for this Container. All metadata keys should be lowercase.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata A mapping of MetaData for this Container. All metadata keys should be lowercase.
         * 
         * @return builder
         * 
         */
        public Builder metadata(Map<String,String> metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param name The name of the Container which should be created within the Storage Account. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Container which should be created within the Storage Account. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceManagerId The Resource Manager ID of this Storage Container.
         * 
         * @return builder
         * 
         * @deprecated
         * this property has been deprecated in favour of `id` and will be removed in version 5.0 of the Provider.
         * 
         */
        @Deprecated /* this property has been deprecated in favour of `id` and will be removed in version 5.0 of the Provider. */
        public Builder resourceManagerId(@Nullable Output<String> resourceManagerId) {
            $.resourceManagerId = resourceManagerId;
            return this;
        }

        /**
         * @param resourceManagerId The Resource Manager ID of this Storage Container.
         * 
         * @return builder
         * 
         * @deprecated
         * this property has been deprecated in favour of `id` and will be removed in version 5.0 of the Provider.
         * 
         */
        @Deprecated /* this property has been deprecated in favour of `id` and will be removed in version 5.0 of the Provider. */
        public Builder resourceManagerId(String resourceManagerId) {
            return resourceManagerId(Output.of(resourceManagerId));
        }

        /**
         * @param storageAccountId The name of the Storage Account where the Container should be created. Changing this forces a new resource to be created.
         * 
         * &gt; **NOTE:** One of `storage_account_name` or `storage_account_id` must be specified. When specifying `storage_account_id` the resource will use the Resource Manager API, rather than the Data Plane API.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountId(@Nullable Output<String> storageAccountId) {
            $.storageAccountId = storageAccountId;
            return this;
        }

        /**
         * @param storageAccountId The name of the Storage Account where the Container should be created. Changing this forces a new resource to be created.
         * 
         * &gt; **NOTE:** One of `storage_account_name` or `storage_account_id` must be specified. When specifying `storage_account_id` the resource will use the Resource Manager API, rather than the Data Plane API.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountId(String storageAccountId) {
            return storageAccountId(Output.of(storageAccountId));
        }

        /**
         * @param storageAccountName The name of the Storage Account where the Container should be created. Changing this forces a new resource to be created. This property is deprecated in favour of `storage_account_id`.
         * 
         * @return builder
         * 
         * @deprecated
         * the `storage_account_name` property has been deprecated in favour of `storage_account_id` and will be removed in version 5.0 of the Provider.
         * 
         */
        @Deprecated /* the `storage_account_name` property has been deprecated in favour of `storage_account_id` and will be removed in version 5.0 of the Provider. */
        public Builder storageAccountName(@Nullable Output<String> storageAccountName) {
            $.storageAccountName = storageAccountName;
            return this;
        }

        /**
         * @param storageAccountName The name of the Storage Account where the Container should be created. Changing this forces a new resource to be created. This property is deprecated in favour of `storage_account_id`.
         * 
         * @return builder
         * 
         * @deprecated
         * the `storage_account_name` property has been deprecated in favour of `storage_account_id` and will be removed in version 5.0 of the Provider.
         * 
         */
        @Deprecated /* the `storage_account_name` property has been deprecated in favour of `storage_account_id` and will be removed in version 5.0 of the Provider. */
        public Builder storageAccountName(String storageAccountName) {
            return storageAccountName(Output.of(storageAccountName));
        }

        public ContainerState build() {
            return $;
        }
    }

}
