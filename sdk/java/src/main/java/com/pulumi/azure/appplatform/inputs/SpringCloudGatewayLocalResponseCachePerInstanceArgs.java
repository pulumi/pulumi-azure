// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appplatform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SpringCloudGatewayLocalResponseCachePerInstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final SpringCloudGatewayLocalResponseCachePerInstanceArgs Empty = new SpringCloudGatewayLocalResponseCachePerInstanceArgs();

    /**
     * Specifies the maximum size of cache (10MB, 900KB, 1GB...) to determine if the cache needs to evict some entries.
     * 
     */
    @Import(name="size")
    private @Nullable Output<String> size;

    /**
     * @return Specifies the maximum size of cache (10MB, 900KB, 1GB...) to determine if the cache needs to evict some entries.
     * 
     */
    public Optional<Output<String>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * Specifies the time before a cached entry is expired (300s, 5m, 1h...).
     * 
     */
    @Import(name="timeToLive")
    private @Nullable Output<String> timeToLive;

    /**
     * @return Specifies the time before a cached entry is expired (300s, 5m, 1h...).
     * 
     */
    public Optional<Output<String>> timeToLive() {
        return Optional.ofNullable(this.timeToLive);
    }

    private SpringCloudGatewayLocalResponseCachePerInstanceArgs() {}

    private SpringCloudGatewayLocalResponseCachePerInstanceArgs(SpringCloudGatewayLocalResponseCachePerInstanceArgs $) {
        this.size = $.size;
        this.timeToLive = $.timeToLive;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SpringCloudGatewayLocalResponseCachePerInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SpringCloudGatewayLocalResponseCachePerInstanceArgs $;

        public Builder() {
            $ = new SpringCloudGatewayLocalResponseCachePerInstanceArgs();
        }

        public Builder(SpringCloudGatewayLocalResponseCachePerInstanceArgs defaults) {
            $ = new SpringCloudGatewayLocalResponseCachePerInstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param size Specifies the maximum size of cache (10MB, 900KB, 1GB...) to determine if the cache needs to evict some entries.
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<String> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size Specifies the maximum size of cache (10MB, 900KB, 1GB...) to determine if the cache needs to evict some entries.
         * 
         * @return builder
         * 
         */
        public Builder size(String size) {
            return size(Output.of(size));
        }

        /**
         * @param timeToLive Specifies the time before a cached entry is expired (300s, 5m, 1h...).
         * 
         * @return builder
         * 
         */
        public Builder timeToLive(@Nullable Output<String> timeToLive) {
            $.timeToLive = timeToLive;
            return this;
        }

        /**
         * @param timeToLive Specifies the time before a cached entry is expired (300s, 5m, 1h...).
         * 
         * @return builder
         * 
         */
        public Builder timeToLive(String timeToLive) {
            return timeToLive(Output.of(timeToLive));
        }

        public SpringCloudGatewayLocalResponseCachePerInstanceArgs build() {
            return $;
        }
    }

}
