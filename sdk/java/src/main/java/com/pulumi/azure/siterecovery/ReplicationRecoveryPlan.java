// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.siterecovery;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.siterecovery.ReplicationRecoveryPlanArgs;
import com.pulumi.azure.siterecovery.inputs.ReplicationRecoveryPlanState;
import com.pulumi.azure.siterecovery.outputs.ReplicationRecoveryPlanAzureToAzureSettings;
import com.pulumi.azure.siterecovery.outputs.ReplicationRecoveryPlanBootRecoveryGroup;
import com.pulumi.azure.siterecovery.outputs.ReplicationRecoveryPlanFailoverRecoveryGroup;
import com.pulumi.azure.siterecovery.outputs.ReplicationRecoveryPlanRecoveryGroup;
import com.pulumi.azure.siterecovery.outputs.ReplicationRecoveryPlanShutdownRecoveryGroup;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Site Recovery Replication Recovery Plan within a Recovery Services vault. A recovery plan gathers machines into recovery groups for the purpose of failover.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.network_virtualNetwork.VirtualNetwork;
 * import com.pulumi.azure.network_virtualNetwork.VirtualNetworkArgs;
 * import com.pulumi.azure.network.Subnet;
 * import com.pulumi.azure.network.SubnetArgs;
 * import com.pulumi.azure.network.PublicIp;
 * import com.pulumi.azure.network.PublicIpArgs;
 * import com.pulumi.azure.network.NetworkInterface;
 * import com.pulumi.azure.network.NetworkInterfaceArgs;
 * import com.pulumi.azure.compute_virtualMachine.VirtualMachine;
 * import com.pulumi.azure.compute_virtualMachine.VirtualMachineArgs;
 * import com.pulumi.azure.recoveryservices_vault.Vault;
 * import com.pulumi.azure.recoveryservices_vault.VaultArgs;
 * import com.pulumi.azure.siterecovery.Fabric;
 * import com.pulumi.azure.siterecovery.FabricArgs;
 * import com.pulumi.azure.siterecovery.ProtectionContainer;
 * import com.pulumi.azure.siterecovery.ProtectionContainerArgs;
 * import com.pulumi.azure.siterecovery.ReplicationPolicy;
 * import com.pulumi.azure.siterecovery.ReplicationPolicyArgs;
 * import com.pulumi.azure.siterecovery.ProtectionContainerMapping;
 * import com.pulumi.azure.siterecovery.ProtectionContainerMappingArgs;
 * import com.pulumi.azure.siterecovery.NetworkMapping;
 * import com.pulumi.azure.siterecovery.NetworkMappingArgs;
 * import com.pulumi.azure.storage.Account;
 * import com.pulumi.azure.storage.AccountArgs;
 * import com.pulumi.azure.siterecovery.ReplicatedVM;
 * import com.pulumi.azure.siterecovery.ReplicatedVMArgs;
 * import com.pulumi.azure.siterecovery.ReplicationRecoveryPlan;
 * import com.pulumi.azure.siterecovery.ReplicationRecoveryPlanArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var primary = new ResourceGroup(&#34;primary&#34;, ResourceGroupArgs.builder()        
 *             .name(&#34;tfex-replicated-vm-primary&#34;)
 *             .location(&#34;West US&#34;)
 *             .build());
 * 
 *         var secondary = new ResourceGroup(&#34;secondary&#34;, ResourceGroupArgs.builder()        
 *             .name(&#34;tfex-replicated-vm-secondary&#34;)
 *             .location(&#34;East US&#34;)
 *             .build());
 * 
 *         var primaryVirtualNetwork = new VirtualNetwork(&#34;primaryVirtualNetwork&#34;, VirtualNetworkArgs.builder()        
 *             .name(&#34;network1&#34;)
 *             .resourceGroupName(primary.name())
 *             .addressSpaces(&#34;192.168.1.0/24&#34;)
 *             .location(primary.location())
 *             .build());
 * 
 *         var primarySubnet = new Subnet(&#34;primarySubnet&#34;, SubnetArgs.builder()        
 *             .name(&#34;network1-subnet&#34;)
 *             .resourceGroupName(primary.name())
 *             .virtualNetworkName(primaryVirtualNetwork.name())
 *             .addressPrefixes(&#34;192.168.1.0/24&#34;)
 *             .build());
 * 
 *         var primaryPublicIp = new PublicIp(&#34;primaryPublicIp&#34;, PublicIpArgs.builder()        
 *             .name(&#34;vm-public-ip-primary&#34;)
 *             .allocationMethod(&#34;Static&#34;)
 *             .location(primary.location())
 *             .resourceGroupName(primary.name())
 *             .sku(&#34;Basic&#34;)
 *             .build());
 * 
 *         var vmNetworkInterface = new NetworkInterface(&#34;vmNetworkInterface&#34;, NetworkInterfaceArgs.builder()        
 *             .name(&#34;vm-nic&#34;)
 *             .location(primary.location())
 *             .resourceGroupName(primary.name())
 *             .ipConfigurations(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *             .build());
 * 
 *         var vm = new VirtualMachine(&#34;vm&#34;, VirtualMachineArgs.builder()        
 *             .name(&#34;vm&#34;)
 *             .location(primary.location())
 *             .resourceGroupName(primary.name())
 *             .vmSize(&#34;Standard_B1s&#34;)
 *             .networkInterfaceIds(vmNetworkInterface.id())
 *             .storageImageReference(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *             .storageOsDisk(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *             .osProfile(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *             .osProfileLinuxConfig(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *             .build());
 * 
 *         var vault = new Vault(&#34;vault&#34;, VaultArgs.builder()        
 *             .name(&#34;example-recovery-vault&#34;)
 *             .location(secondary.location())
 *             .resourceGroupName(secondary.name())
 *             .sku(&#34;Standard&#34;)
 *             .build());
 * 
 *         var primaryFabric = new Fabric(&#34;primaryFabric&#34;, FabricArgs.builder()        
 *             .name(&#34;primary-fabric&#34;)
 *             .resourceGroupName(secondary.name())
 *             .recoveryVaultName(vault.name())
 *             .location(primary.location())
 *             .build());
 * 
 *         var secondaryFabric = new Fabric(&#34;secondaryFabric&#34;, FabricArgs.builder()        
 *             .name(&#34;secondary-fabric&#34;)
 *             .resourceGroupName(secondary.name())
 *             .recoveryVaultName(vault.name())
 *             .location(secondary.location())
 *             .build());
 * 
 *         var primaryProtectionContainer = new ProtectionContainer(&#34;primaryProtectionContainer&#34;, ProtectionContainerArgs.builder()        
 *             .name(&#34;primary-protection-container&#34;)
 *             .resourceGroupName(secondary.name())
 *             .recoveryVaultName(vault.name())
 *             .recoveryFabricName(primaryFabric.name())
 *             .build());
 * 
 *         var secondaryProtectionContainer = new ProtectionContainer(&#34;secondaryProtectionContainer&#34;, ProtectionContainerArgs.builder()        
 *             .name(&#34;secondary-protection-container&#34;)
 *             .resourceGroupName(secondary.name())
 *             .recoveryVaultName(vault.name())
 *             .recoveryFabricName(secondaryFabric.name())
 *             .build());
 * 
 *         var policy = new ReplicationPolicy(&#34;policy&#34;, ReplicationPolicyArgs.builder()        
 *             .name(&#34;policy&#34;)
 *             .resourceGroupName(secondary.name())
 *             .recoveryVaultName(vault.name())
 *             .recoveryPointRetentionInMinutes(24 * 60)
 *             .applicationConsistentSnapshotFrequencyInMinutes(4 * 60)
 *             .build());
 * 
 *         var container_mapping = new ProtectionContainerMapping(&#34;container-mapping&#34;, ProtectionContainerMappingArgs.builder()        
 *             .name(&#34;container-mapping&#34;)
 *             .resourceGroupName(secondary.name())
 *             .recoveryVaultName(vault.name())
 *             .recoveryFabricName(primaryFabric.name())
 *             .recoverySourceProtectionContainerName(primaryProtectionContainer.name())
 *             .recoveryTargetProtectionContainerId(secondaryProtectionContainer.id())
 *             .recoveryReplicationPolicyId(policy.id())
 *             .build());
 * 
 *         var secondaryVirtualNetwork = new VirtualNetwork(&#34;secondaryVirtualNetwork&#34;, VirtualNetworkArgs.builder()        
 *             .name(&#34;network2&#34;)
 *             .resourceGroupName(secondary.name())
 *             .addressSpaces(&#34;192.168.2.0/24&#34;)
 *             .location(secondary.location())
 *             .build());
 * 
 *         var network_mapping = new NetworkMapping(&#34;network-mapping&#34;, NetworkMappingArgs.builder()        
 *             .name(&#34;network-mapping&#34;)
 *             .resourceGroupName(secondary.name())
 *             .recoveryVaultName(vault.name())
 *             .sourceRecoveryFabricName(primaryFabric.name())
 *             .targetRecoveryFabricName(secondaryFabric.name())
 *             .sourceNetworkId(primaryVirtualNetwork.id())
 *             .targetNetworkId(secondaryVirtualNetwork.id())
 *             .build());
 * 
 *         var primaryAccount = new Account(&#34;primaryAccount&#34;, AccountArgs.builder()        
 *             .name(&#34;primaryrecoverycache&#34;)
 *             .location(primary.location())
 *             .resourceGroupName(primary.name())
 *             .accountTier(&#34;Standard&#34;)
 *             .accountReplicationType(&#34;LRS&#34;)
 *             .build());
 * 
 *         var secondarySubnet = new Subnet(&#34;secondarySubnet&#34;, SubnetArgs.builder()        
 *             .name(&#34;network2-subnet&#34;)
 *             .resourceGroupName(secondary.name())
 *             .virtualNetworkName(secondaryVirtualNetwork.name())
 *             .addressPrefixes(&#34;192.168.2.0/24&#34;)
 *             .build());
 * 
 *         var secondaryPublicIp = new PublicIp(&#34;secondaryPublicIp&#34;, PublicIpArgs.builder()        
 *             .name(&#34;vm-public-ip-secondary&#34;)
 *             .allocationMethod(&#34;Static&#34;)
 *             .location(secondary.location())
 *             .resourceGroupName(secondary.name())
 *             .sku(&#34;Basic&#34;)
 *             .build());
 * 
 *         var vm_replication = new ReplicatedVM(&#34;vm-replication&#34;, ReplicatedVMArgs.builder()        
 *             .name(&#34;vm-replication&#34;)
 *             .resourceGroupName(secondary.name())
 *             .recoveryVaultName(vault.name())
 *             .sourceRecoveryFabricName(primaryFabric.name())
 *             .sourceVmId(vm.id())
 *             .recoveryReplicationPolicyId(policy.id())
 *             .sourceRecoveryProtectionContainerName(primaryProtectionContainer.name())
 *             .targetResourceGroupId(secondary.id())
 *             .targetRecoveryFabricId(secondaryFabric.id())
 *             .targetRecoveryProtectionContainerId(secondaryProtectionContainer.id())
 *             .managedDisks(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *             .networkInterfaces(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *             .build());
 * 
 *         var example = new ReplicationRecoveryPlan(&#34;example&#34;, ReplicationRecoveryPlanArgs.builder()        
 *             .name(&#34;example-recover-plan&#34;)
 *             .recoveryVaultId(vault.id())
 *             .sourceRecoveryFabricId(primaryFabric.id())
 *             .targetRecoveryFabricId(secondaryFabric.id())
 *             .shutdownRecoveryGroup()
 *             .failoverRecoveryGroup()
 *             .bootRecoveryGroups(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Site Recovery Fabric can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:siterecovery/replicationRecoveryPlan:ReplicationRecoveryPlan azurerm_site_recovery_replication_recovery_plan.example /subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/groupName/providers/Microsoft.RecoveryServices/vaults/vaultName/replicationRecoveryPlans/planName
 * ```
 * 
 */
@ResourceType(type="azure:siterecovery/replicationRecoveryPlan:ReplicationRecoveryPlan")
public class ReplicationRecoveryPlan extends com.pulumi.resources.CustomResource {
    /**
     * An `azure_to_azure_settings` block as defined below.
     * 
     */
    @Export(name="azureToAzureSettings", refs={ReplicationRecoveryPlanAzureToAzureSettings.class}, tree="[0]")
    private Output</* @Nullable */ ReplicationRecoveryPlanAzureToAzureSettings> azureToAzureSettings;

    /**
     * @return An `azure_to_azure_settings` block as defined below.
     * 
     */
    public Output<Optional<ReplicationRecoveryPlanAzureToAzureSettings>> azureToAzureSettings() {
        return Codegen.optional(this.azureToAzureSettings);
    }
    /**
     * One or more `boot_recovery_group` blocks as defined below.
     * 
     * &gt; **NOTE:** At least one `boot_recovery_group` block will be required in the next major version of the AzureRM Provider.
     * 
     */
    @Export(name="bootRecoveryGroups", refs={List.class,ReplicationRecoveryPlanBootRecoveryGroup.class}, tree="[0,1]")
    private Output<List<ReplicationRecoveryPlanBootRecoveryGroup>> bootRecoveryGroups;

    /**
     * @return One or more `boot_recovery_group` blocks as defined below.
     * 
     * &gt; **NOTE:** At least one `boot_recovery_group` block will be required in the next major version of the AzureRM Provider.
     * 
     */
    public Output<List<ReplicationRecoveryPlanBootRecoveryGroup>> bootRecoveryGroups() {
        return this.bootRecoveryGroups;
    }
    /**
     * One `failover_recovery_group` block as defined below.
     * 
     * &gt; **NOTE:** `failover_recovery_group` will be required in the next major version of the AzureRM Provider.
     * 
     */
    @Export(name="failoverRecoveryGroup", refs={ReplicationRecoveryPlanFailoverRecoveryGroup.class}, tree="[0]")
    private Output<ReplicationRecoveryPlanFailoverRecoveryGroup> failoverRecoveryGroup;

    /**
     * @return One `failover_recovery_group` block as defined below.
     * 
     * &gt; **NOTE:** `failover_recovery_group` will be required in the next major version of the AzureRM Provider.
     * 
     */
    public Output<ReplicationRecoveryPlanFailoverRecoveryGroup> failoverRecoveryGroup() {
        return this.failoverRecoveryGroup;
    }
    /**
     * The name of the Replication Plan. The name can contain only letters, numbers, and hyphens. It should start with a letter and end with a letter or a number. Can be a maximum of 63 characters. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the Replication Plan. The name can contain only letters, numbers, and hyphens. It should start with a letter and end with a letter or a number. Can be a maximum of 63 characters. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Three or more `recovery_group` block defined as below.
     * 
     * &gt; **Note:** The `recovery_group` block is deprecated in favor of `shutdown_recovery_group`, `failover_recovery_group` and `boot_recovery_group`. It will be removed in v4.0 of the Azure Provider.
     * 
     * @deprecated
     * the `recovery_group` block has been deprecated in favour of the `shutdown_recovery_group`, `failover_recovery_group` and `boot_recovery_group` and will be removed in version 4.0 of the provider.
     * 
     */
    @Deprecated /* the `recovery_group` block has been deprecated in favour of the `shutdown_recovery_group`, `failover_recovery_group` and `boot_recovery_group` and will be removed in version 4.0 of the provider. */
    @Export(name="recoveryGroups", refs={List.class,ReplicationRecoveryPlanRecoveryGroup.class}, tree="[0,1]")
    private Output<List<ReplicationRecoveryPlanRecoveryGroup>> recoveryGroups;

    /**
     * @return Three or more `recovery_group` block defined as below.
     * 
     * &gt; **Note:** The `recovery_group` block is deprecated in favor of `shutdown_recovery_group`, `failover_recovery_group` and `boot_recovery_group`. It will be removed in v4.0 of the Azure Provider.
     * 
     */
    public Output<List<ReplicationRecoveryPlanRecoveryGroup>> recoveryGroups() {
        return this.recoveryGroups;
    }
    /**
     * The ID of the vault that should be updated. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="recoveryVaultId", refs={String.class}, tree="[0]")
    private Output<String> recoveryVaultId;

    /**
     * @return The ID of the vault that should be updated. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> recoveryVaultId() {
        return this.recoveryVaultId;
    }
    /**
     * One `shutdown_recovery_group` block as defined below.
     * 
     * &gt; **NOTE:** `shutdown_recovery_group` will be required in the next major version of the AzureRM Provider.
     * 
     */
    @Export(name="shutdownRecoveryGroup", refs={ReplicationRecoveryPlanShutdownRecoveryGroup.class}, tree="[0]")
    private Output<ReplicationRecoveryPlanShutdownRecoveryGroup> shutdownRecoveryGroup;

    /**
     * @return One `shutdown_recovery_group` block as defined below.
     * 
     * &gt; **NOTE:** `shutdown_recovery_group` will be required in the next major version of the AzureRM Provider.
     * 
     */
    public Output<ReplicationRecoveryPlanShutdownRecoveryGroup> shutdownRecoveryGroup() {
        return this.shutdownRecoveryGroup;
    }
    /**
     * ID of source fabric to be recovered from. Changing this forces a new Replication Plan to be created.
     * 
     */
    @Export(name="sourceRecoveryFabricId", refs={String.class}, tree="[0]")
    private Output<String> sourceRecoveryFabricId;

    /**
     * @return ID of source fabric to be recovered from. Changing this forces a new Replication Plan to be created.
     * 
     */
    public Output<String> sourceRecoveryFabricId() {
        return this.sourceRecoveryFabricId;
    }
    /**
     * ID of target fabric to recover. Changing this forces a new Replication Plan to be created.
     * 
     */
    @Export(name="targetRecoveryFabricId", refs={String.class}, tree="[0]")
    private Output<String> targetRecoveryFabricId;

    /**
     * @return ID of target fabric to recover. Changing this forces a new Replication Plan to be created.
     * 
     */
    public Output<String> targetRecoveryFabricId() {
        return this.targetRecoveryFabricId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ReplicationRecoveryPlan(String name) {
        this(name, ReplicationRecoveryPlanArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ReplicationRecoveryPlan(String name, ReplicationRecoveryPlanArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ReplicationRecoveryPlan(String name, ReplicationRecoveryPlanArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:siterecovery/replicationRecoveryPlan:ReplicationRecoveryPlan", name, args == null ? ReplicationRecoveryPlanArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ReplicationRecoveryPlan(String name, Output<String> id, @Nullable ReplicationRecoveryPlanState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:siterecovery/replicationRecoveryPlan:ReplicationRecoveryPlan", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ReplicationRecoveryPlan get(String name, Output<String> id, @Nullable ReplicationRecoveryPlanState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ReplicationRecoveryPlan(name, id, state, options);
    }
}
