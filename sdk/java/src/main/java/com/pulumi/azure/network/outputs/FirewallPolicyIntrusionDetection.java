// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.azure.network.outputs.FirewallPolicyIntrusionDetectionSignatureOverride;
import com.pulumi.azure.network.outputs.FirewallPolicyIntrusionDetectionTrafficBypass;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FirewallPolicyIntrusionDetection {
    /**
     * @return In which mode you want to run intrusion detection: `Off`, `Alert` or `Deny`.
     * 
     */
    private final @Nullable String mode;
    /**
     * @return One or more `signature_overrides` blocks as defined below.
     * 
     */
    private final @Nullable List<FirewallPolicyIntrusionDetectionSignatureOverride> signatureOverrides;
    /**
     * @return One or more `traffic_bypass` blocks as defined below.
     * 
     */
    private final @Nullable List<FirewallPolicyIntrusionDetectionTrafficBypass> trafficBypasses;

    @CustomType.Constructor
    private FirewallPolicyIntrusionDetection(
        @CustomType.Parameter("mode") @Nullable String mode,
        @CustomType.Parameter("signatureOverrides") @Nullable List<FirewallPolicyIntrusionDetectionSignatureOverride> signatureOverrides,
        @CustomType.Parameter("trafficBypasses") @Nullable List<FirewallPolicyIntrusionDetectionTrafficBypass> trafficBypasses) {
        this.mode = mode;
        this.signatureOverrides = signatureOverrides;
        this.trafficBypasses = trafficBypasses;
    }

    /**
     * @return In which mode you want to run intrusion detection: `Off`, `Alert` or `Deny`.
     * 
     */
    public Optional<String> mode() {
        return Optional.ofNullable(this.mode);
    }
    /**
     * @return One or more `signature_overrides` blocks as defined below.
     * 
     */
    public List<FirewallPolicyIntrusionDetectionSignatureOverride> signatureOverrides() {
        return this.signatureOverrides == null ? List.of() : this.signatureOverrides;
    }
    /**
     * @return One or more `traffic_bypass` blocks as defined below.
     * 
     */
    public List<FirewallPolicyIntrusionDetectionTrafficBypass> trafficBypasses() {
        return this.trafficBypasses == null ? List.of() : this.trafficBypasses;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FirewallPolicyIntrusionDetection defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String mode;
        private @Nullable List<FirewallPolicyIntrusionDetectionSignatureOverride> signatureOverrides;
        private @Nullable List<FirewallPolicyIntrusionDetectionTrafficBypass> trafficBypasses;

        public Builder() {
    	      // Empty
        }

        public Builder(FirewallPolicyIntrusionDetection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.mode = defaults.mode;
    	      this.signatureOverrides = defaults.signatureOverrides;
    	      this.trafficBypasses = defaults.trafficBypasses;
        }

        public Builder mode(@Nullable String mode) {
            this.mode = mode;
            return this;
        }
        public Builder signatureOverrides(@Nullable List<FirewallPolicyIntrusionDetectionSignatureOverride> signatureOverrides) {
            this.signatureOverrides = signatureOverrides;
            return this;
        }
        public Builder signatureOverrides(FirewallPolicyIntrusionDetectionSignatureOverride... signatureOverrides) {
            return signatureOverrides(List.of(signatureOverrides));
        }
        public Builder trafficBypasses(@Nullable List<FirewallPolicyIntrusionDetectionTrafficBypass> trafficBypasses) {
            this.trafficBypasses = trafficBypasses;
            return this;
        }
        public Builder trafficBypasses(FirewallPolicyIntrusionDetectionTrafficBypass... trafficBypasses) {
            return trafficBypasses(List.of(trafficBypasses));
        }        public FirewallPolicyIntrusionDetection build() {
            return new FirewallPolicyIntrusionDetection(mode, signatureOverrides, trafficBypasses);
        }
    }
}
