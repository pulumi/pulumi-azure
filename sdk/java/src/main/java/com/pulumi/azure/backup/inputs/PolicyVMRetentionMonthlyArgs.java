// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.backup.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyVMRetentionMonthlyArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyVMRetentionMonthlyArgs Empty = new PolicyVMRetentionMonthlyArgs();

    /**
     * The number of monthly backups to keep. Must be between `1` and `9999`
     * 
     */
    @Import(name="count", required=true)
    private Output<Integer> count;

    /**
     * @return The number of monthly backups to keep. Must be between `1` and `9999`
     * 
     */
    public Output<Integer> count() {
        return this.count;
    }

    /**
     * The days of the month to retain backups of. Must be between `1` and `31`.
     * 
     */
    @Import(name="days")
    private @Nullable Output<List<Integer>> days;

    /**
     * @return The days of the month to retain backups of. Must be between `1` and `31`.
     * 
     */
    public Optional<Output<List<Integer>>> days() {
        return Optional.ofNullable(this.days);
    }

    /**
     * Including the last day of the month, default to `false`.
     * 
     * &gt; **NOTE:**: Either `weekdays` and `weeks` or `days` and `include_last_days` must be specified.
     * 
     */
    @Import(name="includeLastDays")
    private @Nullable Output<Boolean> includeLastDays;

    /**
     * @return Including the last day of the month, default to `false`.
     * 
     * &gt; **NOTE:**: Either `weekdays` and `weeks` or `days` and `include_last_days` must be specified.
     * 
     */
    public Optional<Output<Boolean>> includeLastDays() {
        return Optional.ofNullable(this.includeLastDays);
    }

    /**
     * The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
     * 
     */
    @Import(name="weekdays")
    private @Nullable Output<List<String>> weekdays;

    /**
     * @return The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
     * 
     */
    public Optional<Output<List<String>>> weekdays() {
        return Optional.ofNullable(this.weekdays);
    }

    /**
     * The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
     * 
     */
    @Import(name="weeks")
    private @Nullable Output<List<String>> weeks;

    /**
     * @return The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
     * 
     */
    public Optional<Output<List<String>>> weeks() {
        return Optional.ofNullable(this.weeks);
    }

    private PolicyVMRetentionMonthlyArgs() {}

    private PolicyVMRetentionMonthlyArgs(PolicyVMRetentionMonthlyArgs $) {
        this.count = $.count;
        this.days = $.days;
        this.includeLastDays = $.includeLastDays;
        this.weekdays = $.weekdays;
        this.weeks = $.weeks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyVMRetentionMonthlyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyVMRetentionMonthlyArgs $;

        public Builder() {
            $ = new PolicyVMRetentionMonthlyArgs();
        }

        public Builder(PolicyVMRetentionMonthlyArgs defaults) {
            $ = new PolicyVMRetentionMonthlyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param count The number of monthly backups to keep. Must be between `1` and `9999`
         * 
         * @return builder
         * 
         */
        public Builder count(Output<Integer> count) {
            $.count = count;
            return this;
        }

        /**
         * @param count The number of monthly backups to keep. Must be between `1` and `9999`
         * 
         * @return builder
         * 
         */
        public Builder count(Integer count) {
            return count(Output.of(count));
        }

        /**
         * @param days The days of the month to retain backups of. Must be between `1` and `31`.
         * 
         * @return builder
         * 
         */
        public Builder days(@Nullable Output<List<Integer>> days) {
            $.days = days;
            return this;
        }

        /**
         * @param days The days of the month to retain backups of. Must be between `1` and `31`.
         * 
         * @return builder
         * 
         */
        public Builder days(List<Integer> days) {
            return days(Output.of(days));
        }

        /**
         * @param days The days of the month to retain backups of. Must be between `1` and `31`.
         * 
         * @return builder
         * 
         */
        public Builder days(Integer... days) {
            return days(List.of(days));
        }

        /**
         * @param includeLastDays Including the last day of the month, default to `false`.
         * 
         * &gt; **NOTE:**: Either `weekdays` and `weeks` or `days` and `include_last_days` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder includeLastDays(@Nullable Output<Boolean> includeLastDays) {
            $.includeLastDays = includeLastDays;
            return this;
        }

        /**
         * @param includeLastDays Including the last day of the month, default to `false`.
         * 
         * &gt; **NOTE:**: Either `weekdays` and `weeks` or `days` and `include_last_days` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder includeLastDays(Boolean includeLastDays) {
            return includeLastDays(Output.of(includeLastDays));
        }

        /**
         * @param weekdays The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
         * 
         * @return builder
         * 
         */
        public Builder weekdays(@Nullable Output<List<String>> weekdays) {
            $.weekdays = weekdays;
            return this;
        }

        /**
         * @param weekdays The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
         * 
         * @return builder
         * 
         */
        public Builder weekdays(List<String> weekdays) {
            return weekdays(Output.of(weekdays));
        }

        /**
         * @param weekdays The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
         * 
         * @return builder
         * 
         */
        public Builder weekdays(String... weekdays) {
            return weekdays(List.of(weekdays));
        }

        /**
         * @param weeks The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
         * 
         * @return builder
         * 
         */
        public Builder weeks(@Nullable Output<List<String>> weeks) {
            $.weeks = weeks;
            return this;
        }

        /**
         * @param weeks The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
         * 
         * @return builder
         * 
         */
        public Builder weeks(List<String> weeks) {
            return weeks(Output.of(weeks));
        }

        /**
         * @param weeks The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
         * 
         * @return builder
         * 
         */
        public Builder weeks(String... weeks) {
            return weeks(List.of(weeks));
        }

        public PolicyVMRetentionMonthlyArgs build() {
            if ($.count == null) {
                throw new MissingRequiredPropertyException("PolicyVMRetentionMonthlyArgs", "count");
            }
            return $;
        }
    }

}
