// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.machinelearning.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceServerlessComputeArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceServerlessComputeArgs Empty = new WorkspaceServerlessComputeArgs();

    /**
     * Should serverless compute nodes deployed in a custom Virtual Network have public IP addresses enabled for a workspace with private endpoint? Defaults to `false`.
     * 
     * &gt; **Note:** `publicIpEnabled` cannot be updated from `true` to `false` when `subnetId` is not set. `publicIpEnabled` must be set to `true` if `subnetId` is not set and when `publicNetworkAccessEnabled` is `false`.
     * 
     */
    @Import(name="publicIpEnabled")
    private @Nullable Output<Boolean> publicIpEnabled;

    /**
     * @return Should serverless compute nodes deployed in a custom Virtual Network have public IP addresses enabled for a workspace with private endpoint? Defaults to `false`.
     * 
     * &gt; **Note:** `publicIpEnabled` cannot be updated from `true` to `false` when `subnetId` is not set. `publicIpEnabled` must be set to `true` if `subnetId` is not set and when `publicNetworkAccessEnabled` is `false`.
     * 
     */
    public Optional<Output<Boolean>> publicIpEnabled() {
        return Optional.ofNullable(this.publicIpEnabled);
    }

    /**
     * The ID of an existing Virtual Network Subnet in which the serverless compute nodes should be deployed to.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return The ID of an existing Virtual Network Subnet in which the serverless compute nodes should be deployed to.
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    private WorkspaceServerlessComputeArgs() {}

    private WorkspaceServerlessComputeArgs(WorkspaceServerlessComputeArgs $) {
        this.publicIpEnabled = $.publicIpEnabled;
        this.subnetId = $.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceServerlessComputeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceServerlessComputeArgs $;

        public Builder() {
            $ = new WorkspaceServerlessComputeArgs();
        }

        public Builder(WorkspaceServerlessComputeArgs defaults) {
            $ = new WorkspaceServerlessComputeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param publicIpEnabled Should serverless compute nodes deployed in a custom Virtual Network have public IP addresses enabled for a workspace with private endpoint? Defaults to `false`.
         * 
         * &gt; **Note:** `publicIpEnabled` cannot be updated from `true` to `false` when `subnetId` is not set. `publicIpEnabled` must be set to `true` if `subnetId` is not set and when `publicNetworkAccessEnabled` is `false`.
         * 
         * @return builder
         * 
         */
        public Builder publicIpEnabled(@Nullable Output<Boolean> publicIpEnabled) {
            $.publicIpEnabled = publicIpEnabled;
            return this;
        }

        /**
         * @param publicIpEnabled Should serverless compute nodes deployed in a custom Virtual Network have public IP addresses enabled for a workspace with private endpoint? Defaults to `false`.
         * 
         * &gt; **Note:** `publicIpEnabled` cannot be updated from `true` to `false` when `subnetId` is not set. `publicIpEnabled` must be set to `true` if `subnetId` is not set and when `publicNetworkAccessEnabled` is `false`.
         * 
         * @return builder
         * 
         */
        public Builder publicIpEnabled(Boolean publicIpEnabled) {
            return publicIpEnabled(Output.of(publicIpEnabled));
        }

        /**
         * @param subnetId The ID of an existing Virtual Network Subnet in which the serverless compute nodes should be deployed to.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The ID of an existing Virtual Network Subnet in which the serverless compute nodes should be deployed to.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public WorkspaceServerlessComputeArgs build() {
            return $;
        }
    }

}
