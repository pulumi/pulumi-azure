// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.storage.outputs;

import com.pulumi.azure.storage.outputs.GetPolicyRuleFilterMatchBlobIndexTag;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPolicyRuleFilter {
    /**
     * @return An array of predefined values. Valid options are `blockBlob` and `appendBlob`.
     * 
     */
    private List<String> blobTypes;
    /**
     * @return A `match_blob_index_tag` block as defined below. The block defines the blob index tag based filtering for blob objects.
     * 
     */
    private List<GetPolicyRuleFilterMatchBlobIndexTag> matchBlobIndexTags;
    /**
     * @return An array of strings for prefixes to be matched.
     * 
     */
    private List<String> prefixMatches;

    private GetPolicyRuleFilter() {}
    /**
     * @return An array of predefined values. Valid options are `blockBlob` and `appendBlob`.
     * 
     */
    public List<String> blobTypes() {
        return this.blobTypes;
    }
    /**
     * @return A `match_blob_index_tag` block as defined below. The block defines the blob index tag based filtering for blob objects.
     * 
     */
    public List<GetPolicyRuleFilterMatchBlobIndexTag> matchBlobIndexTags() {
        return this.matchBlobIndexTags;
    }
    /**
     * @return An array of strings for prefixes to be matched.
     * 
     */
    public List<String> prefixMatches() {
        return this.prefixMatches;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPolicyRuleFilter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> blobTypes;
        private List<GetPolicyRuleFilterMatchBlobIndexTag> matchBlobIndexTags;
        private List<String> prefixMatches;
        public Builder() {}
        public Builder(GetPolicyRuleFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blobTypes = defaults.blobTypes;
    	      this.matchBlobIndexTags = defaults.matchBlobIndexTags;
    	      this.prefixMatches = defaults.prefixMatches;
        }

        @CustomType.Setter
        public Builder blobTypes(List<String> blobTypes) {
            if (blobTypes == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleFilter", "blobTypes");
            }
            this.blobTypes = blobTypes;
            return this;
        }
        public Builder blobTypes(String... blobTypes) {
            return blobTypes(List.of(blobTypes));
        }
        @CustomType.Setter
        public Builder matchBlobIndexTags(List<GetPolicyRuleFilterMatchBlobIndexTag> matchBlobIndexTags) {
            if (matchBlobIndexTags == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleFilter", "matchBlobIndexTags");
            }
            this.matchBlobIndexTags = matchBlobIndexTags;
            return this;
        }
        public Builder matchBlobIndexTags(GetPolicyRuleFilterMatchBlobIndexTag... matchBlobIndexTags) {
            return matchBlobIndexTags(List.of(matchBlobIndexTags));
        }
        @CustomType.Setter
        public Builder prefixMatches(List<String> prefixMatches) {
            if (prefixMatches == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleFilter", "prefixMatches");
            }
            this.prefixMatches = prefixMatches;
            return this;
        }
        public Builder prefixMatches(String... prefixMatches) {
            return prefixMatches(List.of(prefixMatches));
        }
        public GetPolicyRuleFilter build() {
            final var _resultValue = new GetPolicyRuleFilter();
            _resultValue.blobTypes = blobTypes;
            _resultValue.matchBlobIndexTags = matchBlobIndexTags;
            _resultValue.prefixMatches = prefixMatches;
            return _resultValue;
        }
    }
}
