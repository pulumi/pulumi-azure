// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.orbital.inputs;

import com.pulumi.azure.orbital.inputs.ContactProfileLinkChannelArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ContactProfileLinkArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContactProfileLinkArgs Empty = new ContactProfileLinkArgs();

    /**
     * A list of contact profile link channels. A `channels` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="channels", required=true)
    private Output<List<ContactProfileLinkChannelArgs>> channels;

    /**
     * @return A list of contact profile link channels. A `channels` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    public Output<List<ContactProfileLinkChannelArgs>> channels() {
        return this.channels;
    }

    /**
     * Direction of the link. Possible values are `Uplink` and `Downlink`.
     * 
     */
    @Import(name="direction", required=true)
    private Output<String> direction;

    /**
     * @return Direction of the link. Possible values are `Uplink` and `Downlink`.
     * 
     */
    public Output<String> direction() {
        return this.direction;
    }

    /**
     * Name of the link.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the link.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Polarization of the link. Possible values are `LHCP`, `RHCP`, `linearVertical` and `linearHorizontal`.
     * 
     */
    @Import(name="polarization", required=true)
    private Output<String> polarization;

    /**
     * @return Polarization of the link. Possible values are `LHCP`, `RHCP`, `linearVertical` and `linearHorizontal`.
     * 
     */
    public Output<String> polarization() {
        return this.polarization;
    }

    private ContactProfileLinkArgs() {}

    private ContactProfileLinkArgs(ContactProfileLinkArgs $) {
        this.channels = $.channels;
        this.direction = $.direction;
        this.name = $.name;
        this.polarization = $.polarization;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContactProfileLinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContactProfileLinkArgs $;

        public Builder() {
            $ = new ContactProfileLinkArgs();
        }

        public Builder(ContactProfileLinkArgs defaults) {
            $ = new ContactProfileLinkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param channels A list of contact profile link channels. A `channels` block as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder channels(Output<List<ContactProfileLinkChannelArgs>> channels) {
            $.channels = channels;
            return this;
        }

        /**
         * @param channels A list of contact profile link channels. A `channels` block as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder channels(List<ContactProfileLinkChannelArgs> channels) {
            return channels(Output.of(channels));
        }

        /**
         * @param channels A list of contact profile link channels. A `channels` block as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder channels(ContactProfileLinkChannelArgs... channels) {
            return channels(List.of(channels));
        }

        /**
         * @param direction Direction of the link. Possible values are `Uplink` and `Downlink`.
         * 
         * @return builder
         * 
         */
        public Builder direction(Output<String> direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param direction Direction of the link. Possible values are `Uplink` and `Downlink`.
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            return direction(Output.of(direction));
        }

        /**
         * @param name Name of the link.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the link.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param polarization Polarization of the link. Possible values are `LHCP`, `RHCP`, `linearVertical` and `linearHorizontal`.
         * 
         * @return builder
         * 
         */
        public Builder polarization(Output<String> polarization) {
            $.polarization = polarization;
            return this;
        }

        /**
         * @param polarization Polarization of the link. Possible values are `LHCP`, `RHCP`, `linearVertical` and `linearHorizontal`.
         * 
         * @return builder
         * 
         */
        public Builder polarization(String polarization) {
            return polarization(Output.of(polarization));
        }

        public ContactProfileLinkArgs build() {
            if ($.channels == null) {
                throw new MissingRequiredPropertyException("ContactProfileLinkArgs", "channels");
            }
            if ($.direction == null) {
                throw new MissingRequiredPropertyException("ContactProfileLinkArgs", "direction");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ContactProfileLinkArgs", "name");
            }
            if ($.polarization == null) {
                throw new MissingRequiredPropertyException("ContactProfileLinkArgs", "polarization");
            }
            return $;
        }
    }

}
