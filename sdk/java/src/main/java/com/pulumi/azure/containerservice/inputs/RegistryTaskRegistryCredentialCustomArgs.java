// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistryTaskRegistryCredentialCustomArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistryTaskRegistryCredentialCustomArgs Empty = new RegistryTaskRegistryCredentialCustomArgs();

    /**
     * The managed identity assigned to this custom credential. For user assigned identity, the value is the client ID of the identity. For system assigned identity, the value is `[system]`.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<String> identity;

    /**
     * @return The managed identity assigned to this custom credential. For user assigned identity, the value is the client ID of the identity. For system assigned identity, the value is `[system]`.
     * 
     */
    public Optional<Output<String>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * The login server of the custom Container Registry.
     * 
     */
    @Import(name="loginServer", required=true)
    private Output<String> loginServer;

    /**
     * @return The login server of the custom Container Registry.
     * 
     */
    public Output<String> loginServer() {
        return this.loginServer;
    }

    /**
     * The password for logging into the custom Container Registry. It can be either a plain text of password, or a Keyvault Secret ID.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password for logging into the custom Container Registry. It can be either a plain text of password, or a Keyvault Secret ID.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The username for logging into the custom Container Registry. It can be either a plain text of username, or a Keyvault Secret ID.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The username for logging into the custom Container Registry. It can be either a plain text of username, or a Keyvault Secret ID.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private RegistryTaskRegistryCredentialCustomArgs() {}

    private RegistryTaskRegistryCredentialCustomArgs(RegistryTaskRegistryCredentialCustomArgs $) {
        this.identity = $.identity;
        this.loginServer = $.loginServer;
        this.password = $.password;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryTaskRegistryCredentialCustomArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryTaskRegistryCredentialCustomArgs $;

        public Builder() {
            $ = new RegistryTaskRegistryCredentialCustomArgs();
        }

        public Builder(RegistryTaskRegistryCredentialCustomArgs defaults) {
            $ = new RegistryTaskRegistryCredentialCustomArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param identity The managed identity assigned to this custom credential. For user assigned identity, the value is the client ID of the identity. For system assigned identity, the value is `[system]`.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<String> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity The managed identity assigned to this custom credential. For user assigned identity, the value is the client ID of the identity. For system assigned identity, the value is `[system]`.
         * 
         * @return builder
         * 
         */
        public Builder identity(String identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param loginServer The login server of the custom Container Registry.
         * 
         * @return builder
         * 
         */
        public Builder loginServer(Output<String> loginServer) {
            $.loginServer = loginServer;
            return this;
        }

        /**
         * @param loginServer The login server of the custom Container Registry.
         * 
         * @return builder
         * 
         */
        public Builder loginServer(String loginServer) {
            return loginServer(Output.of(loginServer));
        }

        /**
         * @param password The password for logging into the custom Container Registry. It can be either a plain text of password, or a Keyvault Secret ID.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password for logging into the custom Container Registry. It can be either a plain text of password, or a Keyvault Secret ID.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param username The username for logging into the custom Container Registry. It can be either a plain text of username, or a Keyvault Secret ID.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username for logging into the custom Container Registry. It can be either a plain text of username, or a Keyvault Secret ID.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public RegistryTaskRegistryCredentialCustomArgs build() {
            if ($.loginServer == null) {
                throw new MissingRequiredPropertyException("RegistryTaskRegistryCredentialCustomArgs", "loginServer");
            }
            return $;
        }
    }

}
