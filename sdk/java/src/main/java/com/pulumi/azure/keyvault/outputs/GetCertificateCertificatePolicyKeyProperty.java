// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.keyvault.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCertificateCertificatePolicyKeyProperty {
    private String curve;
    /**
     * @return Is this Certificate Exportable?
     * 
     */
    private Boolean exportable;
    /**
     * @return The size of the Key used in the Certificate.
     * 
     */
    private Integer keySize;
    /**
     * @return Specifies the Type of Key, for example `RSA`.
     * 
     */
    private String keyType;
    /**
     * @return Is the key reusable?
     * 
     */
    private Boolean reuseKey;

    private GetCertificateCertificatePolicyKeyProperty() {}
    public String curve() {
        return this.curve;
    }
    /**
     * @return Is this Certificate Exportable?
     * 
     */
    public Boolean exportable() {
        return this.exportable;
    }
    /**
     * @return The size of the Key used in the Certificate.
     * 
     */
    public Integer keySize() {
        return this.keySize;
    }
    /**
     * @return Specifies the Type of Key, for example `RSA`.
     * 
     */
    public String keyType() {
        return this.keyType;
    }
    /**
     * @return Is the key reusable?
     * 
     */
    public Boolean reuseKey() {
        return this.reuseKey;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificateCertificatePolicyKeyProperty defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String curve;
        private Boolean exportable;
        private Integer keySize;
        private String keyType;
        private Boolean reuseKey;
        public Builder() {}
        public Builder(GetCertificateCertificatePolicyKeyProperty defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.curve = defaults.curve;
    	      this.exportable = defaults.exportable;
    	      this.keySize = defaults.keySize;
    	      this.keyType = defaults.keyType;
    	      this.reuseKey = defaults.reuseKey;
        }

        @CustomType.Setter
        public Builder curve(String curve) {
            if (curve == null) {
              throw new MissingRequiredPropertyException("GetCertificateCertificatePolicyKeyProperty", "curve");
            }
            this.curve = curve;
            return this;
        }
        @CustomType.Setter
        public Builder exportable(Boolean exportable) {
            if (exportable == null) {
              throw new MissingRequiredPropertyException("GetCertificateCertificatePolicyKeyProperty", "exportable");
            }
            this.exportable = exportable;
            return this;
        }
        @CustomType.Setter
        public Builder keySize(Integer keySize) {
            if (keySize == null) {
              throw new MissingRequiredPropertyException("GetCertificateCertificatePolicyKeyProperty", "keySize");
            }
            this.keySize = keySize;
            return this;
        }
        @CustomType.Setter
        public Builder keyType(String keyType) {
            if (keyType == null) {
              throw new MissingRequiredPropertyException("GetCertificateCertificatePolicyKeyProperty", "keyType");
            }
            this.keyType = keyType;
            return this;
        }
        @CustomType.Setter
        public Builder reuseKey(Boolean reuseKey) {
            if (reuseKey == null) {
              throw new MissingRequiredPropertyException("GetCertificateCertificatePolicyKeyProperty", "reuseKey");
            }
            this.reuseKey = reuseKey;
            return this;
        }
        public GetCertificateCertificatePolicyKeyProperty build() {
            final var _resultValue = new GetCertificateCertificatePolicyKeyProperty();
            _resultValue.curve = curve;
            _resultValue.exportable = exportable;
            _resultValue.keySize = keySize;
            _resultValue.keyType = keyType;
            _resultValue.reuseKey = reuseKey;
            return _resultValue;
        }
    }
}
