// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.keyvault.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KeyRotationPolicyAutomaticArgs extends com.pulumi.resources.ResourceArgs {

    public static final KeyRotationPolicyAutomaticArgs Empty = new KeyRotationPolicyAutomaticArgs();

    /**
     * Rotate automatically at a duration after create as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).
     * 
     */
    @Import(name="timeAfterCreation")
    private @Nullable Output<String> timeAfterCreation;

    /**
     * @return Rotate automatically at a duration after create as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).
     * 
     */
    public Optional<Output<String>> timeAfterCreation() {
        return Optional.ofNullable(this.timeAfterCreation);
    }

    /**
     * Rotate automatically at a duration before expiry as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).
     * 
     */
    @Import(name="timeBeforeExpiry")
    private @Nullable Output<String> timeBeforeExpiry;

    /**
     * @return Rotate automatically at a duration before expiry as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).
     * 
     */
    public Optional<Output<String>> timeBeforeExpiry() {
        return Optional.ofNullable(this.timeBeforeExpiry);
    }

    private KeyRotationPolicyAutomaticArgs() {}

    private KeyRotationPolicyAutomaticArgs(KeyRotationPolicyAutomaticArgs $) {
        this.timeAfterCreation = $.timeAfterCreation;
        this.timeBeforeExpiry = $.timeBeforeExpiry;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeyRotationPolicyAutomaticArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeyRotationPolicyAutomaticArgs $;

        public Builder() {
            $ = new KeyRotationPolicyAutomaticArgs();
        }

        public Builder(KeyRotationPolicyAutomaticArgs defaults) {
            $ = new KeyRotationPolicyAutomaticArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param timeAfterCreation Rotate automatically at a duration after create as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).
         * 
         * @return builder
         * 
         */
        public Builder timeAfterCreation(@Nullable Output<String> timeAfterCreation) {
            $.timeAfterCreation = timeAfterCreation;
            return this;
        }

        /**
         * @param timeAfterCreation Rotate automatically at a duration after create as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).
         * 
         * @return builder
         * 
         */
        public Builder timeAfterCreation(String timeAfterCreation) {
            return timeAfterCreation(Output.of(timeAfterCreation));
        }

        /**
         * @param timeBeforeExpiry Rotate automatically at a duration before expiry as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).
         * 
         * @return builder
         * 
         */
        public Builder timeBeforeExpiry(@Nullable Output<String> timeBeforeExpiry) {
            $.timeBeforeExpiry = timeBeforeExpiry;
            return this;
        }

        /**
         * @param timeBeforeExpiry Rotate automatically at a duration before expiry as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).
         * 
         * @return builder
         * 
         */
        public Builder timeBeforeExpiry(String timeBeforeExpiry) {
            return timeBeforeExpiry(Output.of(timeBeforeExpiry));
        }

        public KeyRotationPolicyAutomaticArgs build() {
            return $;
        }
    }

}
