// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appplatform;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.appplatform.SpringCloudGatewayRouteConfigArgs;
import com.pulumi.azure.appplatform.inputs.SpringCloudGatewayRouteConfigState;
import com.pulumi.azure.appplatform.outputs.SpringCloudGatewayRouteConfigOpenApi;
import com.pulumi.azure.appplatform.outputs.SpringCloudGatewayRouteConfigRoute;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Spring Cloud Gateway Route Config.
 * 
 * &gt; **Note:** This resource is applicable only for Spring Cloud Service with enterprise tier.
 * 
 * !&gt; **Note:** Azure Spring Apps is now deprecated and will be retired on 2028-05-31 - as such the `azure.appplatform.SpringCloudGatewayRouteConfig` resource is deprecated and will be removed in a future major version of the AzureRM Provider. See https://aka.ms/asaretirement for more information.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.appplatform.SpringCloudService;
 * import com.pulumi.azure.appplatform.SpringCloudServiceArgs;
 * import com.pulumi.azure.appplatform.SpringCloudApp;
 * import com.pulumi.azure.appplatform.SpringCloudAppArgs;
 * import com.pulumi.azure.appplatform.SpringCloudGateway;
 * import com.pulumi.azure.appplatform.SpringCloudGatewayArgs;
 * import com.pulumi.azure.appplatform.SpringCloudGatewayRouteConfig;
 * import com.pulumi.azure.appplatform.SpringCloudGatewayRouteConfigArgs;
 * import com.pulumi.azure.appplatform.inputs.SpringCloudGatewayRouteConfigRouteArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()
 *             .name("example")
 *             .location("West Europe")
 *             .build());
 * 
 *         var exampleSpringCloudService = new SpringCloudService("exampleSpringCloudService", SpringCloudServiceArgs.builder()
 *             .name("example")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .skuName("E0")
 *             .build());
 * 
 *         var exampleSpringCloudApp = new SpringCloudApp("exampleSpringCloudApp", SpringCloudAppArgs.builder()
 *             .name("example")
 *             .resourceGroupName(example.name())
 *             .serviceName(exampleSpringCloudService.name())
 *             .build());
 * 
 *         var exampleSpringCloudGateway = new SpringCloudGateway("exampleSpringCloudGateway", SpringCloudGatewayArgs.builder()
 *             .name("default")
 *             .springCloudServiceId(exampleSpringCloudService.id())
 *             .build());
 * 
 *         var exampleSpringCloudGatewayRouteConfig = new SpringCloudGatewayRouteConfig("exampleSpringCloudGatewayRouteConfig", SpringCloudGatewayRouteConfigArgs.builder()
 *             .name("example")
 *             .springCloudGatewayId(exampleSpringCloudGateway.id())
 *             .springCloudAppId(exampleSpringCloudApp.id())
 *             .protocol("HTTPS")
 *             .routes(SpringCloudGatewayRouteConfigRouteArgs.builder()
 *                 .description("example description")
 *                 .filters(                
 *                     "StripPrefix=2",
 *                     "RateLimit=1,1s")
 *                 .order(1)
 *                 .predicates("Path=/api5/customer/**")
 *                 .ssoValidationEnabled(true)
 *                 .title("myApp route config")
 *                 .tokenRelay(true)
 *                 .uri("https://www.example.com")
 *                 .classificationTags(                
 *                     "tag1",
 *                     "tag2")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Spring Cloud Gateway Route Configs can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:appplatform/springCloudGatewayRouteConfig:SpringCloudGatewayRouteConfig example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.AppPlatform/spring/service1/gateways/gateway1/routeConfigs/routeConfig1
 * ```
 * 
 */
@ResourceType(type="azure:appplatform/springCloudGatewayRouteConfig:SpringCloudGatewayRouteConfig")
public class SpringCloudGatewayRouteConfig extends com.pulumi.resources.CustomResource {
    /**
     * Specifies a list of filters which are used to modify the request before sending it to the target endpoint, or the received response in app level.
     * 
     */
    @Export(name="filters", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> filters;

    /**
     * @return Specifies a list of filters which are used to modify the request before sending it to the target endpoint, or the received response in app level.
     * 
     */
    public Output<Optional<List<String>>> filters() {
        return Codegen.optional(this.filters);
    }
    /**
     * The name which should be used for this Spring Cloud Gateway Route Config. Changing this forces a new Spring Cloud Gateway Route Config to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name which should be used for this Spring Cloud Gateway Route Config. Changing this forces a new Spring Cloud Gateway Route Config to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * One or more `open_api` blocks as defined below.
     * 
     */
    @Export(name="openApi", refs={SpringCloudGatewayRouteConfigOpenApi.class}, tree="[0]")
    private Output</* @Nullable */ SpringCloudGatewayRouteConfigOpenApi> openApi;

    /**
     * @return One or more `open_api` blocks as defined below.
     * 
     */
    public Output<Optional<SpringCloudGatewayRouteConfigOpenApi>> openApi() {
        return Codegen.optional(this.openApi);
    }
    /**
     * Specifies a list of conditions to evaluate a route for each request in app level. Each predicate may be evaluated against request headers and parameter values. All of the predicates associated with a route must evaluate to true for the route to be matched to the request.
     * 
     */
    @Export(name="predicates", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> predicates;

    /**
     * @return Specifies a list of conditions to evaluate a route for each request in app level. Each predicate may be evaluated against request headers and parameter values. All of the predicates associated with a route must evaluate to true for the route to be matched to the request.
     * 
     */
    public Output<Optional<List<String>>> predicates() {
        return Codegen.optional(this.predicates);
    }
    /**
     * Specifies the protocol of routed Spring Cloud App. Allowed values are `HTTP` and `HTTPS`.
     * 
     * &gt; **Note:** You likely want to use `HTTPS` in a production environment, since `HTTP` offers no encryption.
     * 
     */
    @Export(name="protocol", refs={String.class}, tree="[0]")
    private Output<String> protocol;

    /**
     * @return Specifies the protocol of routed Spring Cloud App. Allowed values are `HTTP` and `HTTPS`.
     * 
     * &gt; **Note:** You likely want to use `HTTPS` in a production environment, since `HTTP` offers no encryption.
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }
    /**
     * One or more `route` blocks as defined below.
     * 
     */
    @Export(name="routes", refs={List.class,SpringCloudGatewayRouteConfigRoute.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SpringCloudGatewayRouteConfigRoute>> routes;

    /**
     * @return One or more `route` blocks as defined below.
     * 
     */
    public Output<Optional<List<SpringCloudGatewayRouteConfigRoute>>> routes() {
        return Codegen.optional(this.routes);
    }
    /**
     * The ID of the Spring Cloud App.
     * 
     */
    @Export(name="springCloudAppId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> springCloudAppId;

    /**
     * @return The ID of the Spring Cloud App.
     * 
     */
    public Output<Optional<String>> springCloudAppId() {
        return Codegen.optional(this.springCloudAppId);
    }
    /**
     * The ID of the Spring Cloud Gateway. Changing this forces a new Spring Cloud Gateway Route Config to be created.
     * 
     */
    @Export(name="springCloudGatewayId", refs={String.class}, tree="[0]")
    private Output<String> springCloudGatewayId;

    /**
     * @return The ID of the Spring Cloud Gateway. Changing this forces a new Spring Cloud Gateway Route Config to be created.
     * 
     */
    public Output<String> springCloudGatewayId() {
        return this.springCloudGatewayId;
    }
    /**
     * Should the sso validation be enabled in app level?
     * 
     */
    @Export(name="ssoValidationEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ssoValidationEnabled;

    /**
     * @return Should the sso validation be enabled in app level?
     * 
     */
    public Output<Optional<Boolean>> ssoValidationEnabled() {
        return Codegen.optional(this.ssoValidationEnabled);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SpringCloudGatewayRouteConfig(java.lang.String name) {
        this(name, SpringCloudGatewayRouteConfigArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SpringCloudGatewayRouteConfig(java.lang.String name, SpringCloudGatewayRouteConfigArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SpringCloudGatewayRouteConfig(java.lang.String name, SpringCloudGatewayRouteConfigArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:appplatform/springCloudGatewayRouteConfig:SpringCloudGatewayRouteConfig", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private SpringCloudGatewayRouteConfig(java.lang.String name, Output<java.lang.String> id, @Nullable SpringCloudGatewayRouteConfigState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:appplatform/springCloudGatewayRouteConfig:SpringCloudGatewayRouteConfig", name, state, makeResourceOptions(options, id), false);
    }

    private static SpringCloudGatewayRouteConfigArgs makeArgs(SpringCloudGatewayRouteConfigArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? SpringCloudGatewayRouteConfigArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SpringCloudGatewayRouteConfig get(java.lang.String name, Output<java.lang.String> id, @Nullable SpringCloudGatewayRouteConfigState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SpringCloudGatewayRouteConfig(name, id, state, options);
    }
}
