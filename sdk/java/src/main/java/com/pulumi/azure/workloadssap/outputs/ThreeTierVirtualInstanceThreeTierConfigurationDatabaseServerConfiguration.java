// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.workloadssap.outputs;

import com.pulumi.azure.workloadssap.outputs.ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfigurationDiskVolumeConfiguration;
import com.pulumi.azure.workloadssap.outputs.ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfigurationVirtualMachineConfiguration;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfiguration {
    /**
     * @return The database type for the Database Server. Possible values are `DB2` and `HANA`. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable String databaseType;
    /**
     * @return One or more `disk_volume_configuration` blocks as defined below. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable List<ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfigurationDiskVolumeConfiguration> diskVolumeConfigurations;
    /**
     * @return The number of instances for the Database Server. Possible values are at least `1`. Changing this forces a new resource to be created.
     * 
     */
    private Integer instanceCount;
    /**
     * @return The resource ID of the Subnet for the Database Server. Changing this forces a new resource to be created.
     * 
     */
    private String subnetId;
    /**
     * @return A `virtual_machine_configuration` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    private ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfigurationVirtualMachineConfiguration virtualMachineConfiguration;

    private ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfiguration() {}
    /**
     * @return The database type for the Database Server. Possible values are `DB2` and `HANA`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<String> databaseType() {
        return Optional.ofNullable(this.databaseType);
    }
    /**
     * @return One or more `disk_volume_configuration` blocks as defined below. Changing this forces a new resource to be created.
     * 
     */
    public List<ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfigurationDiskVolumeConfiguration> diskVolumeConfigurations() {
        return this.diskVolumeConfigurations == null ? List.of() : this.diskVolumeConfigurations;
    }
    /**
     * @return The number of instances for the Database Server. Possible values are at least `1`. Changing this forces a new resource to be created.
     * 
     */
    public Integer instanceCount() {
        return this.instanceCount;
    }
    /**
     * @return The resource ID of the Subnet for the Database Server. Changing this forces a new resource to be created.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return A `virtual_machine_configuration` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    public ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfigurationVirtualMachineConfiguration virtualMachineConfiguration() {
        return this.virtualMachineConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String databaseType;
        private @Nullable List<ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfigurationDiskVolumeConfiguration> diskVolumeConfigurations;
        private Integer instanceCount;
        private String subnetId;
        private ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfigurationVirtualMachineConfiguration virtualMachineConfiguration;
        public Builder() {}
        public Builder(ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseType = defaults.databaseType;
    	      this.diskVolumeConfigurations = defaults.diskVolumeConfigurations;
    	      this.instanceCount = defaults.instanceCount;
    	      this.subnetId = defaults.subnetId;
    	      this.virtualMachineConfiguration = defaults.virtualMachineConfiguration;
        }

        @CustomType.Setter
        public Builder databaseType(@Nullable String databaseType) {

            this.databaseType = databaseType;
            return this;
        }
        @CustomType.Setter
        public Builder diskVolumeConfigurations(@Nullable List<ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfigurationDiskVolumeConfiguration> diskVolumeConfigurations) {

            this.diskVolumeConfigurations = diskVolumeConfigurations;
            return this;
        }
        public Builder diskVolumeConfigurations(ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfigurationDiskVolumeConfiguration... diskVolumeConfigurations) {
            return diskVolumeConfigurations(List.of(diskVolumeConfigurations));
        }
        @CustomType.Setter
        public Builder instanceCount(Integer instanceCount) {
            if (instanceCount == null) {
              throw new MissingRequiredPropertyException("ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfiguration", "instanceCount");
            }
            this.instanceCount = instanceCount;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfiguration", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder virtualMachineConfiguration(ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfigurationVirtualMachineConfiguration virtualMachineConfiguration) {
            if (virtualMachineConfiguration == null) {
              throw new MissingRequiredPropertyException("ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfiguration", "virtualMachineConfiguration");
            }
            this.virtualMachineConfiguration = virtualMachineConfiguration;
            return this;
        }
        public ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfiguration build() {
            final var _resultValue = new ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfiguration();
            _resultValue.databaseType = databaseType;
            _resultValue.diskVolumeConfigurations = diskVolumeConfigurations;
            _resultValue.instanceCount = instanceCount;
            _resultValue.subnetId = subnetId;
            _resultValue.virtualMachineConfiguration = virtualMachineConfiguration;
            return _resultValue;
        }
    }
}
