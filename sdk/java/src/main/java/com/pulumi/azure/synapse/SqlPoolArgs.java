// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.synapse;

import com.pulumi.azure.synapse.inputs.SqlPoolRestoreArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SqlPoolArgs extends com.pulumi.resources.ResourceArgs {

    public static final SqlPoolArgs Empty = new SqlPoolArgs();

    /**
     * The name of the collation to use with this pool, only applicable when `create_mode` is set to `Default`. Azure default is `SQL_LATIN1_GENERAL_CP1_CI_AS`. Changing this forces a new Synapse SQL Pool to be created.
     * 
     */
    @Import(name="collation")
    private @Nullable Output<String> collation;

    /**
     * @return The name of the collation to use with this pool, only applicable when `create_mode` is set to `Default`. Azure default is `SQL_LATIN1_GENERAL_CP1_CI_AS`. Changing this forces a new Synapse SQL Pool to be created.
     * 
     */
    public Optional<Output<String>> collation() {
        return Optional.ofNullable(this.collation);
    }

    /**
     * Specifies how to create the SQL Pool. Valid values are: `Default`, `Recovery` or `PointInTimeRestore`. Must be `Default` to create a new database. Defaults to `Default`. Changing this forces a new Synapse SQL Pool to be created.
     * 
     */
    @Import(name="createMode")
    private @Nullable Output<String> createMode;

    /**
     * @return Specifies how to create the SQL Pool. Valid values are: `Default`, `Recovery` or `PointInTimeRestore`. Must be `Default` to create a new database. Defaults to `Default`. Changing this forces a new Synapse SQL Pool to be created.
     * 
     */
    public Optional<Output<String>> createMode() {
        return Optional.ofNullable(this.createMode);
    }

    /**
     * Is transparent data encryption enabled?
     * 
     */
    @Import(name="dataEncrypted")
    private @Nullable Output<Boolean> dataEncrypted;

    /**
     * @return Is transparent data encryption enabled?
     * 
     */
    public Optional<Output<Boolean>> dataEncrypted() {
        return Optional.ofNullable(this.dataEncrypted);
    }

    /**
     * Is geo-backup policy enabled? Possible values include `true` or `false`. Defaults to `true`.
     * 
     */
    @Import(name="geoBackupPolicyEnabled")
    private @Nullable Output<Boolean> geoBackupPolicyEnabled;

    /**
     * @return Is geo-backup policy enabled? Possible values include `true` or `false`. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> geoBackupPolicyEnabled() {
        return Optional.ofNullable(this.geoBackupPolicyEnabled);
    }

    /**
     * The name which should be used for this Synapse SQL Pool. Changing this forces a new Synapse SQL Pool to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Synapse SQL Pool. Changing this forces a new Synapse SQL Pool to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the Synapse SQL Pool or SQL Database which is to back up, only applicable when `create_mode` is set to `Recovery`. Changing this forces a new Synapse SQL Pool to be created.
     * 
     */
    @Import(name="recoveryDatabaseId")
    private @Nullable Output<String> recoveryDatabaseId;

    /**
     * @return The ID of the Synapse SQL Pool or SQL Database which is to back up, only applicable when `create_mode` is set to `Recovery`. Changing this forces a new Synapse SQL Pool to be created.
     * 
     */
    public Optional<Output<String>> recoveryDatabaseId() {
        return Optional.ofNullable(this.recoveryDatabaseId);
    }

    /**
     * A `restore` block as defined below. Only applicable when `create_mode` is set to `PointInTimeRestore`. Changing this forces a new Synapse SQL Pool to be created.
     * 
     */
    @Import(name="restore")
    private @Nullable Output<SqlPoolRestoreArgs> restore;

    /**
     * @return A `restore` block as defined below. Only applicable when `create_mode` is set to `PointInTimeRestore`. Changing this forces a new Synapse SQL Pool to be created.
     * 
     */
    public Optional<Output<SqlPoolRestoreArgs>> restore() {
        return Optional.ofNullable(this.restore);
    }

    /**
     * Specifies the SKU Name for this Synapse SQL Pool. Possible values are `DW100c`, `DW200c`, `DW300c`, `DW400c`, `DW500c`, `DW1000c`, `DW1500c`, `DW2000c`, `DW2500c`, `DW3000c`, `DW5000c`, `DW6000c`, `DW7500c`, `DW10000c`, `DW15000c` or `DW30000c`.
     * 
     */
    @Import(name="skuName", required=true)
    private Output<String> skuName;

    /**
     * @return Specifies the SKU Name for this Synapse SQL Pool. Possible values are `DW100c`, `DW200c`, `DW300c`, `DW400c`, `DW500c`, `DW1000c`, `DW1500c`, `DW2000c`, `DW2500c`, `DW3000c`, `DW5000c`, `DW6000c`, `DW7500c`, `DW10000c`, `DW15000c` or `DW30000c`.
     * 
     */
    public Output<String> skuName() {
        return this.skuName;
    }

    /**
     * The storage account type that will be used to store backups for this Synapse SQL Pool. Possible values are `LRS` or `GRS`. Changing this forces a new Synapse SQL Pool to be created. Defaults to `GRS`.
     * 
     */
    @Import(name="storageAccountType")
    private @Nullable Output<String> storageAccountType;

    /**
     * @return The storage account type that will be used to store backups for this Synapse SQL Pool. Possible values are `LRS` or `GRS`. Changing this forces a new Synapse SQL Pool to be created. Defaults to `GRS`.
     * 
     */
    public Optional<Output<String>> storageAccountType() {
        return Optional.ofNullable(this.storageAccountType);
    }

    /**
     * The ID of Synapse Workspace within which this SQL Pool should be created. Changing this forces a new Synapse SQL Pool to be created.
     * 
     */
    @Import(name="synapseWorkspaceId", required=true)
    private Output<String> synapseWorkspaceId;

    /**
     * @return The ID of Synapse Workspace within which this SQL Pool should be created. Changing this forces a new Synapse SQL Pool to be created.
     * 
     */
    public Output<String> synapseWorkspaceId() {
        return this.synapseWorkspaceId;
    }

    /**
     * A mapping of tags which should be assigned to the Synapse SQL Pool.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the Synapse SQL Pool.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private SqlPoolArgs() {}

    private SqlPoolArgs(SqlPoolArgs $) {
        this.collation = $.collation;
        this.createMode = $.createMode;
        this.dataEncrypted = $.dataEncrypted;
        this.geoBackupPolicyEnabled = $.geoBackupPolicyEnabled;
        this.name = $.name;
        this.recoveryDatabaseId = $.recoveryDatabaseId;
        this.restore = $.restore;
        this.skuName = $.skuName;
        this.storageAccountType = $.storageAccountType;
        this.synapseWorkspaceId = $.synapseWorkspaceId;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SqlPoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlPoolArgs $;

        public Builder() {
            $ = new SqlPoolArgs();
        }

        public Builder(SqlPoolArgs defaults) {
            $ = new SqlPoolArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param collation The name of the collation to use with this pool, only applicable when `create_mode` is set to `Default`. Azure default is `SQL_LATIN1_GENERAL_CP1_CI_AS`. Changing this forces a new Synapse SQL Pool to be created.
         * 
         * @return builder
         * 
         */
        public Builder collation(@Nullable Output<String> collation) {
            $.collation = collation;
            return this;
        }

        /**
         * @param collation The name of the collation to use with this pool, only applicable when `create_mode` is set to `Default`. Azure default is `SQL_LATIN1_GENERAL_CP1_CI_AS`. Changing this forces a new Synapse SQL Pool to be created.
         * 
         * @return builder
         * 
         */
        public Builder collation(String collation) {
            return collation(Output.of(collation));
        }

        /**
         * @param createMode Specifies how to create the SQL Pool. Valid values are: `Default`, `Recovery` or `PointInTimeRestore`. Must be `Default` to create a new database. Defaults to `Default`. Changing this forces a new Synapse SQL Pool to be created.
         * 
         * @return builder
         * 
         */
        public Builder createMode(@Nullable Output<String> createMode) {
            $.createMode = createMode;
            return this;
        }

        /**
         * @param createMode Specifies how to create the SQL Pool. Valid values are: `Default`, `Recovery` or `PointInTimeRestore`. Must be `Default` to create a new database. Defaults to `Default`. Changing this forces a new Synapse SQL Pool to be created.
         * 
         * @return builder
         * 
         */
        public Builder createMode(String createMode) {
            return createMode(Output.of(createMode));
        }

        /**
         * @param dataEncrypted Is transparent data encryption enabled?
         * 
         * @return builder
         * 
         */
        public Builder dataEncrypted(@Nullable Output<Boolean> dataEncrypted) {
            $.dataEncrypted = dataEncrypted;
            return this;
        }

        /**
         * @param dataEncrypted Is transparent data encryption enabled?
         * 
         * @return builder
         * 
         */
        public Builder dataEncrypted(Boolean dataEncrypted) {
            return dataEncrypted(Output.of(dataEncrypted));
        }

        /**
         * @param geoBackupPolicyEnabled Is geo-backup policy enabled? Possible values include `true` or `false`. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder geoBackupPolicyEnabled(@Nullable Output<Boolean> geoBackupPolicyEnabled) {
            $.geoBackupPolicyEnabled = geoBackupPolicyEnabled;
            return this;
        }

        /**
         * @param geoBackupPolicyEnabled Is geo-backup policy enabled? Possible values include `true` or `false`. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder geoBackupPolicyEnabled(Boolean geoBackupPolicyEnabled) {
            return geoBackupPolicyEnabled(Output.of(geoBackupPolicyEnabled));
        }

        /**
         * @param name The name which should be used for this Synapse SQL Pool. Changing this forces a new Synapse SQL Pool to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Synapse SQL Pool. Changing this forces a new Synapse SQL Pool to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param recoveryDatabaseId The ID of the Synapse SQL Pool or SQL Database which is to back up, only applicable when `create_mode` is set to `Recovery`. Changing this forces a new Synapse SQL Pool to be created.
         * 
         * @return builder
         * 
         */
        public Builder recoveryDatabaseId(@Nullable Output<String> recoveryDatabaseId) {
            $.recoveryDatabaseId = recoveryDatabaseId;
            return this;
        }

        /**
         * @param recoveryDatabaseId The ID of the Synapse SQL Pool or SQL Database which is to back up, only applicable when `create_mode` is set to `Recovery`. Changing this forces a new Synapse SQL Pool to be created.
         * 
         * @return builder
         * 
         */
        public Builder recoveryDatabaseId(String recoveryDatabaseId) {
            return recoveryDatabaseId(Output.of(recoveryDatabaseId));
        }

        /**
         * @param restore A `restore` block as defined below. Only applicable when `create_mode` is set to `PointInTimeRestore`. Changing this forces a new Synapse SQL Pool to be created.
         * 
         * @return builder
         * 
         */
        public Builder restore(@Nullable Output<SqlPoolRestoreArgs> restore) {
            $.restore = restore;
            return this;
        }

        /**
         * @param restore A `restore` block as defined below. Only applicable when `create_mode` is set to `PointInTimeRestore`. Changing this forces a new Synapse SQL Pool to be created.
         * 
         * @return builder
         * 
         */
        public Builder restore(SqlPoolRestoreArgs restore) {
            return restore(Output.of(restore));
        }

        /**
         * @param skuName Specifies the SKU Name for this Synapse SQL Pool. Possible values are `DW100c`, `DW200c`, `DW300c`, `DW400c`, `DW500c`, `DW1000c`, `DW1500c`, `DW2000c`, `DW2500c`, `DW3000c`, `DW5000c`, `DW6000c`, `DW7500c`, `DW10000c`, `DW15000c` or `DW30000c`.
         * 
         * @return builder
         * 
         */
        public Builder skuName(Output<String> skuName) {
            $.skuName = skuName;
            return this;
        }

        /**
         * @param skuName Specifies the SKU Name for this Synapse SQL Pool. Possible values are `DW100c`, `DW200c`, `DW300c`, `DW400c`, `DW500c`, `DW1000c`, `DW1500c`, `DW2000c`, `DW2500c`, `DW3000c`, `DW5000c`, `DW6000c`, `DW7500c`, `DW10000c`, `DW15000c` or `DW30000c`.
         * 
         * @return builder
         * 
         */
        public Builder skuName(String skuName) {
            return skuName(Output.of(skuName));
        }

        /**
         * @param storageAccountType The storage account type that will be used to store backups for this Synapse SQL Pool. Possible values are `LRS` or `GRS`. Changing this forces a new Synapse SQL Pool to be created. Defaults to `GRS`.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountType(@Nullable Output<String> storageAccountType) {
            $.storageAccountType = storageAccountType;
            return this;
        }

        /**
         * @param storageAccountType The storage account type that will be used to store backups for this Synapse SQL Pool. Possible values are `LRS` or `GRS`. Changing this forces a new Synapse SQL Pool to be created. Defaults to `GRS`.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountType(String storageAccountType) {
            return storageAccountType(Output.of(storageAccountType));
        }

        /**
         * @param synapseWorkspaceId The ID of Synapse Workspace within which this SQL Pool should be created. Changing this forces a new Synapse SQL Pool to be created.
         * 
         * @return builder
         * 
         */
        public Builder synapseWorkspaceId(Output<String> synapseWorkspaceId) {
            $.synapseWorkspaceId = synapseWorkspaceId;
            return this;
        }

        /**
         * @param synapseWorkspaceId The ID of Synapse Workspace within which this SQL Pool should be created. Changing this forces a new Synapse SQL Pool to be created.
         * 
         * @return builder
         * 
         */
        public Builder synapseWorkspaceId(String synapseWorkspaceId) {
            return synapseWorkspaceId(Output.of(synapseWorkspaceId));
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Synapse SQL Pool.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Synapse SQL Pool.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public SqlPoolArgs build() {
            if ($.skuName == null) {
                throw new MissingRequiredPropertyException("SqlPoolArgs", "skuName");
            }
            if ($.synapseWorkspaceId == null) {
                throw new MissingRequiredPropertyException("SqlPoolArgs", "synapseWorkspaceId");
            }
            return $;
        }
    }

}
