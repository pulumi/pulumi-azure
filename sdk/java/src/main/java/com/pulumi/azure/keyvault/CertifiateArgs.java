// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.keyvault;

import com.pulumi.azure.keyvault.inputs.CertifiateCertificateArgs;
import com.pulumi.azure.keyvault.inputs.CertifiateCertificatePolicyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertifiateArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertifiateArgs Empty = new CertifiateArgs();

    /**
     * A `certificate` block as defined below, used to Import an existing certificate. Changing this will create a new version of the Key Vault Certificate.
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<CertifiateCertificateArgs> certificate;

    /**
     * @return A `certificate` block as defined below, used to Import an existing certificate. Changing this will create a new version of the Key Vault Certificate.
     * 
     */
    public Optional<Output<CertifiateCertificateArgs>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * A `certificate_policy` block as defined below. Changing this will create a new version of the Key Vault Certificate.
     * 
     * &gt; **NOTE:** When creating a Key Vault Certificate, at least one of `certificate` or `certificate_policy` is required. Provide `certificate` to import an existing certificate, `certificate_policy` to generate a new certificate.
     * 
     */
    @Import(name="certificatePolicy")
    private @Nullable Output<CertifiateCertificatePolicyArgs> certificatePolicy;

    /**
     * @return A `certificate_policy` block as defined below. Changing this will create a new version of the Key Vault Certificate.
     * 
     * &gt; **NOTE:** When creating a Key Vault Certificate, at least one of `certificate` or `certificate_policy` is required. Provide `certificate` to import an existing certificate, `certificate_policy` to generate a new certificate.
     * 
     */
    public Optional<Output<CertifiateCertificatePolicyArgs>> certificatePolicy() {
        return Optional.ofNullable(this.certificatePolicy);
    }

    /**
     * The ID of the Key Vault where the Certificate should be created. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="keyVaultId", required=true)
    private Output<String> keyVaultId;

    /**
     * @return The ID of the Key Vault where the Certificate should be created. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> keyVaultId() {
        return this.keyVaultId;
    }

    /**
     * Specifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private CertifiateArgs() {}

    private CertifiateArgs(CertifiateArgs $) {
        this.certificate = $.certificate;
        this.certificatePolicy = $.certificatePolicy;
        this.keyVaultId = $.keyVaultId;
        this.name = $.name;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertifiateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertifiateArgs $;

        public Builder() {
            $ = new CertifiateArgs();
        }

        public Builder(CertifiateArgs defaults) {
            $ = new CertifiateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificate A `certificate` block as defined below, used to Import an existing certificate. Changing this will create a new version of the Key Vault Certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<CertifiateCertificateArgs> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate A `certificate` block as defined below, used to Import an existing certificate. Changing this will create a new version of the Key Vault Certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificate(CertifiateCertificateArgs certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param certificatePolicy A `certificate_policy` block as defined below. Changing this will create a new version of the Key Vault Certificate.
         * 
         * &gt; **NOTE:** When creating a Key Vault Certificate, at least one of `certificate` or `certificate_policy` is required. Provide `certificate` to import an existing certificate, `certificate_policy` to generate a new certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificatePolicy(@Nullable Output<CertifiateCertificatePolicyArgs> certificatePolicy) {
            $.certificatePolicy = certificatePolicy;
            return this;
        }

        /**
         * @param certificatePolicy A `certificate_policy` block as defined below. Changing this will create a new version of the Key Vault Certificate.
         * 
         * &gt; **NOTE:** When creating a Key Vault Certificate, at least one of `certificate` or `certificate_policy` is required. Provide `certificate` to import an existing certificate, `certificate_policy` to generate a new certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificatePolicy(CertifiateCertificatePolicyArgs certificatePolicy) {
            return certificatePolicy(Output.of(certificatePolicy));
        }

        /**
         * @param keyVaultId The ID of the Key Vault where the Certificate should be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultId(Output<String> keyVaultId) {
            $.keyVaultId = keyVaultId;
            return this;
        }

        /**
         * @param keyVaultId The ID of the Key Vault where the Certificate should be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultId(String keyVaultId) {
            return keyVaultId(Output.of(keyVaultId));
        }

        /**
         * @param name Specifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public CertifiateArgs build() {
            if ($.keyVaultId == null) {
                throw new MissingRequiredPropertyException("CertifiateArgs", "keyVaultId");
            }
            return $;
        }
    }

}
