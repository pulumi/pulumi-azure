// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cosmosdb.inputs;

import com.pulumi.azure.cosmosdb.inputs.GremlinGraphIndexPolicyCompositeIndexArgs;
import com.pulumi.azure.cosmosdb.inputs.GremlinGraphIndexPolicySpatialIndexArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GremlinGraphIndexPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final GremlinGraphIndexPolicyArgs Empty = new GremlinGraphIndexPolicyArgs();

    /**
     * Indicates if the indexing policy is automatic. Defaults to `true`.
     * 
     */
    @Import(name="automatic")
    private @Nullable Output<Boolean> automatic;

    /**
     * @return Indicates if the indexing policy is automatic. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> automatic() {
        return Optional.ofNullable(this.automatic);
    }

    /**
     * One or more `composite_index` blocks as defined below.
     * 
     */
    @Import(name="compositeIndices")
    private @Nullable Output<List<GremlinGraphIndexPolicyCompositeIndexArgs>> compositeIndices;

    /**
     * @return One or more `composite_index` blocks as defined below.
     * 
     */
    public Optional<Output<List<GremlinGraphIndexPolicyCompositeIndexArgs>>> compositeIndices() {
        return Optional.ofNullable(this.compositeIndices);
    }

    /**
     * List of paths to exclude from indexing. Required if `indexing_mode` is `Consistent` or `Lazy`.
     * 
     */
    @Import(name="excludedPaths")
    private @Nullable Output<List<String>> excludedPaths;

    /**
     * @return List of paths to exclude from indexing. Required if `indexing_mode` is `Consistent` or `Lazy`.
     * 
     */
    public Optional<Output<List<String>>> excludedPaths() {
        return Optional.ofNullable(this.excludedPaths);
    }

    /**
     * List of paths to include in the indexing. Required if `indexing_mode` is `Consistent` or `Lazy`.
     * 
     */
    @Import(name="includedPaths")
    private @Nullable Output<List<String>> includedPaths;

    /**
     * @return List of paths to include in the indexing. Required if `indexing_mode` is `Consistent` or `Lazy`.
     * 
     */
    public Optional<Output<List<String>>> includedPaths() {
        return Optional.ofNullable(this.includedPaths);
    }

    /**
     * Indicates the indexing mode. Possible values include: `Consistent`, `Lazy`, `None`.
     * 
     */
    @Import(name="indexingMode", required=true)
    private Output<String> indexingMode;

    /**
     * @return Indicates the indexing mode. Possible values include: `Consistent`, `Lazy`, `None`.
     * 
     */
    public Output<String> indexingMode() {
        return this.indexingMode;
    }

    /**
     * One or more `spatial_index` blocks as defined below.
     * 
     */
    @Import(name="spatialIndices")
    private @Nullable Output<List<GremlinGraphIndexPolicySpatialIndexArgs>> spatialIndices;

    /**
     * @return One or more `spatial_index` blocks as defined below.
     * 
     */
    public Optional<Output<List<GremlinGraphIndexPolicySpatialIndexArgs>>> spatialIndices() {
        return Optional.ofNullable(this.spatialIndices);
    }

    private GremlinGraphIndexPolicyArgs() {}

    private GremlinGraphIndexPolicyArgs(GremlinGraphIndexPolicyArgs $) {
        this.automatic = $.automatic;
        this.compositeIndices = $.compositeIndices;
        this.excludedPaths = $.excludedPaths;
        this.includedPaths = $.includedPaths;
        this.indexingMode = $.indexingMode;
        this.spatialIndices = $.spatialIndices;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GremlinGraphIndexPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GremlinGraphIndexPolicyArgs $;

        public Builder() {
            $ = new GremlinGraphIndexPolicyArgs();
        }

        public Builder(GremlinGraphIndexPolicyArgs defaults) {
            $ = new GremlinGraphIndexPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param automatic Indicates if the indexing policy is automatic. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder automatic(@Nullable Output<Boolean> automatic) {
            $.automatic = automatic;
            return this;
        }

        /**
         * @param automatic Indicates if the indexing policy is automatic. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder automatic(Boolean automatic) {
            return automatic(Output.of(automatic));
        }

        /**
         * @param compositeIndices One or more `composite_index` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder compositeIndices(@Nullable Output<List<GremlinGraphIndexPolicyCompositeIndexArgs>> compositeIndices) {
            $.compositeIndices = compositeIndices;
            return this;
        }

        /**
         * @param compositeIndices One or more `composite_index` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder compositeIndices(List<GremlinGraphIndexPolicyCompositeIndexArgs> compositeIndices) {
            return compositeIndices(Output.of(compositeIndices));
        }

        /**
         * @param compositeIndices One or more `composite_index` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder compositeIndices(GremlinGraphIndexPolicyCompositeIndexArgs... compositeIndices) {
            return compositeIndices(List.of(compositeIndices));
        }

        /**
         * @param excludedPaths List of paths to exclude from indexing. Required if `indexing_mode` is `Consistent` or `Lazy`.
         * 
         * @return builder
         * 
         */
        public Builder excludedPaths(@Nullable Output<List<String>> excludedPaths) {
            $.excludedPaths = excludedPaths;
            return this;
        }

        /**
         * @param excludedPaths List of paths to exclude from indexing. Required if `indexing_mode` is `Consistent` or `Lazy`.
         * 
         * @return builder
         * 
         */
        public Builder excludedPaths(List<String> excludedPaths) {
            return excludedPaths(Output.of(excludedPaths));
        }

        /**
         * @param excludedPaths List of paths to exclude from indexing. Required if `indexing_mode` is `Consistent` or `Lazy`.
         * 
         * @return builder
         * 
         */
        public Builder excludedPaths(String... excludedPaths) {
            return excludedPaths(List.of(excludedPaths));
        }

        /**
         * @param includedPaths List of paths to include in the indexing. Required if `indexing_mode` is `Consistent` or `Lazy`.
         * 
         * @return builder
         * 
         */
        public Builder includedPaths(@Nullable Output<List<String>> includedPaths) {
            $.includedPaths = includedPaths;
            return this;
        }

        /**
         * @param includedPaths List of paths to include in the indexing. Required if `indexing_mode` is `Consistent` or `Lazy`.
         * 
         * @return builder
         * 
         */
        public Builder includedPaths(List<String> includedPaths) {
            return includedPaths(Output.of(includedPaths));
        }

        /**
         * @param includedPaths List of paths to include in the indexing. Required if `indexing_mode` is `Consistent` or `Lazy`.
         * 
         * @return builder
         * 
         */
        public Builder includedPaths(String... includedPaths) {
            return includedPaths(List.of(includedPaths));
        }

        /**
         * @param indexingMode Indicates the indexing mode. Possible values include: `Consistent`, `Lazy`, `None`.
         * 
         * @return builder
         * 
         */
        public Builder indexingMode(Output<String> indexingMode) {
            $.indexingMode = indexingMode;
            return this;
        }

        /**
         * @param indexingMode Indicates the indexing mode. Possible values include: `Consistent`, `Lazy`, `None`.
         * 
         * @return builder
         * 
         */
        public Builder indexingMode(String indexingMode) {
            return indexingMode(Output.of(indexingMode));
        }

        /**
         * @param spatialIndices One or more `spatial_index` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder spatialIndices(@Nullable Output<List<GremlinGraphIndexPolicySpatialIndexArgs>> spatialIndices) {
            $.spatialIndices = spatialIndices;
            return this;
        }

        /**
         * @param spatialIndices One or more `spatial_index` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder spatialIndices(List<GremlinGraphIndexPolicySpatialIndexArgs> spatialIndices) {
            return spatialIndices(Output.of(spatialIndices));
        }

        /**
         * @param spatialIndices One or more `spatial_index` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder spatialIndices(GremlinGraphIndexPolicySpatialIndexArgs... spatialIndices) {
            return spatialIndices(List.of(spatialIndices));
        }

        public GremlinGraphIndexPolicyArgs build() {
            if ($.indexingMode == null) {
                throw new MissingRequiredPropertyException("GremlinGraphIndexPolicyArgs", "indexingMode");
            }
            return $;
        }
    }

}
