// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.servicefabric.inputs;

import com.pulumi.azure.servicefabric.inputs.ClusterNodeTypeApplicationPortsArgs;
import com.pulumi.azure.servicefabric.inputs.ClusterNodeTypeEphemeralPortsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterNodeTypeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterNodeTypeArgs Empty = new ClusterNodeTypeArgs();

    /**
     * A `application_ports` block as defined below.
     * 
     */
    @Import(name="applicationPorts")
    private @Nullable Output<ClusterNodeTypeApplicationPortsArgs> applicationPorts;

    /**
     * @return A `application_ports` block as defined below.
     * 
     */
    public Optional<Output<ClusterNodeTypeApplicationPortsArgs>> applicationPorts() {
        return Optional.ofNullable(this.applicationPorts);
    }

    /**
     * The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
     * 
     */
    @Import(name="capacities")
    private @Nullable Output<Map<String,String>> capacities;

    /**
     * @return The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
     * 
     */
    public Optional<Output<Map<String,String>>> capacities() {
        return Optional.ofNullable(this.capacities);
    }

    /**
     * The Port used for the Client Endpoint for this Node Type.
     * 
     */
    @Import(name="clientEndpointPort", required=true)
    private Output<Integer> clientEndpointPort;

    /**
     * @return The Port used for the Client Endpoint for this Node Type.
     * 
     */
    public Output<Integer> clientEndpointPort() {
        return this.clientEndpointPort;
    }

    /**
     * The Durability Level for this Node Type. Possible values include `Bronze`, `Gold` and `Silver`. Defaults to `Bronze`.
     * 
     */
    @Import(name="durabilityLevel")
    private @Nullable Output<String> durabilityLevel;

    /**
     * @return The Durability Level for this Node Type. Possible values include `Bronze`, `Gold` and `Silver`. Defaults to `Bronze`.
     * 
     */
    public Optional<Output<String>> durabilityLevel() {
        return Optional.ofNullable(this.durabilityLevel);
    }

    /**
     * A `ephemeral_ports` block as defined below.
     * 
     */
    @Import(name="ephemeralPorts")
    private @Nullable Output<ClusterNodeTypeEphemeralPortsArgs> ephemeralPorts;

    /**
     * @return A `ephemeral_ports` block as defined below.
     * 
     */
    public Optional<Output<ClusterNodeTypeEphemeralPortsArgs>> ephemeralPorts() {
        return Optional.ofNullable(this.ephemeralPorts);
    }

    /**
     * The Port used for the HTTP Endpoint for this Node Type.
     * 
     */
    @Import(name="httpEndpointPort", required=true)
    private Output<Integer> httpEndpointPort;

    /**
     * @return The Port used for the HTTP Endpoint for this Node Type.
     * 
     */
    public Output<Integer> httpEndpointPort() {
        return this.httpEndpointPort;
    }

    /**
     * The number of nodes for this Node Type.
     * 
     */
    @Import(name="instanceCount", required=true)
    private Output<Integer> instanceCount;

    /**
     * @return The number of nodes for this Node Type.
     * 
     */
    public Output<Integer> instanceCount() {
        return this.instanceCount;
    }

    /**
     * Is this the Primary Node Type?
     * 
     */
    @Import(name="isPrimary", required=true)
    private Output<Boolean> isPrimary;

    /**
     * @return Is this the Primary Node Type?
     * 
     */
    public Output<Boolean> isPrimary() {
        return this.isPrimary;
    }

    /**
     * Should this node type run only stateless services?
     * 
     */
    @Import(name="isStateless")
    private @Nullable Output<Boolean> isStateless;

    /**
     * @return Should this node type run only stateless services?
     * 
     */
    public Optional<Output<Boolean>> isStateless() {
        return Optional.ofNullable(this.isStateless);
    }

    /**
     * Does this node type span availability zones?
     * 
     */
    @Import(name="multipleAvailabilityZones")
    private @Nullable Output<Boolean> multipleAvailabilityZones;

    /**
     * @return Does this node type span availability zones?
     * 
     */
    public Optional<Output<Boolean>> multipleAvailabilityZones() {
        return Optional.ofNullable(this.multipleAvailabilityZones);
    }

    /**
     * The name of the Node Type.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the Node Type.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
     * 
     */
    @Import(name="placementProperties")
    private @Nullable Output<Map<String,String>> placementProperties;

    /**
     * @return The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
     * 
     */
    public Optional<Output<Map<String,String>>> placementProperties() {
        return Optional.ofNullable(this.placementProperties);
    }

    /**
     * The Port used for the Reverse Proxy Endpoint for this Node Type. Changing this will upgrade the cluster.
     * 
     */
    @Import(name="reverseProxyEndpointPort")
    private @Nullable Output<Integer> reverseProxyEndpointPort;

    /**
     * @return The Port used for the Reverse Proxy Endpoint for this Node Type. Changing this will upgrade the cluster.
     * 
     */
    public Optional<Output<Integer>> reverseProxyEndpointPort() {
        return Optional.ofNullable(this.reverseProxyEndpointPort);
    }

    private ClusterNodeTypeArgs() {}

    private ClusterNodeTypeArgs(ClusterNodeTypeArgs $) {
        this.applicationPorts = $.applicationPorts;
        this.capacities = $.capacities;
        this.clientEndpointPort = $.clientEndpointPort;
        this.durabilityLevel = $.durabilityLevel;
        this.ephemeralPorts = $.ephemeralPorts;
        this.httpEndpointPort = $.httpEndpointPort;
        this.instanceCount = $.instanceCount;
        this.isPrimary = $.isPrimary;
        this.isStateless = $.isStateless;
        this.multipleAvailabilityZones = $.multipleAvailabilityZones;
        this.name = $.name;
        this.placementProperties = $.placementProperties;
        this.reverseProxyEndpointPort = $.reverseProxyEndpointPort;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterNodeTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterNodeTypeArgs $;

        public Builder() {
            $ = new ClusterNodeTypeArgs();
        }

        public Builder(ClusterNodeTypeArgs defaults) {
            $ = new ClusterNodeTypeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationPorts A `application_ports` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder applicationPorts(@Nullable Output<ClusterNodeTypeApplicationPortsArgs> applicationPorts) {
            $.applicationPorts = applicationPorts;
            return this;
        }

        /**
         * @param applicationPorts A `application_ports` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder applicationPorts(ClusterNodeTypeApplicationPortsArgs applicationPorts) {
            return applicationPorts(Output.of(applicationPorts));
        }

        /**
         * @param capacities The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
         * 
         * @return builder
         * 
         */
        public Builder capacities(@Nullable Output<Map<String,String>> capacities) {
            $.capacities = capacities;
            return this;
        }

        /**
         * @param capacities The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
         * 
         * @return builder
         * 
         */
        public Builder capacities(Map<String,String> capacities) {
            return capacities(Output.of(capacities));
        }

        /**
         * @param clientEndpointPort The Port used for the Client Endpoint for this Node Type.
         * 
         * @return builder
         * 
         */
        public Builder clientEndpointPort(Output<Integer> clientEndpointPort) {
            $.clientEndpointPort = clientEndpointPort;
            return this;
        }

        /**
         * @param clientEndpointPort The Port used for the Client Endpoint for this Node Type.
         * 
         * @return builder
         * 
         */
        public Builder clientEndpointPort(Integer clientEndpointPort) {
            return clientEndpointPort(Output.of(clientEndpointPort));
        }

        /**
         * @param durabilityLevel The Durability Level for this Node Type. Possible values include `Bronze`, `Gold` and `Silver`. Defaults to `Bronze`.
         * 
         * @return builder
         * 
         */
        public Builder durabilityLevel(@Nullable Output<String> durabilityLevel) {
            $.durabilityLevel = durabilityLevel;
            return this;
        }

        /**
         * @param durabilityLevel The Durability Level for this Node Type. Possible values include `Bronze`, `Gold` and `Silver`. Defaults to `Bronze`.
         * 
         * @return builder
         * 
         */
        public Builder durabilityLevel(String durabilityLevel) {
            return durabilityLevel(Output.of(durabilityLevel));
        }

        /**
         * @param ephemeralPorts A `ephemeral_ports` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder ephemeralPorts(@Nullable Output<ClusterNodeTypeEphemeralPortsArgs> ephemeralPorts) {
            $.ephemeralPorts = ephemeralPorts;
            return this;
        }

        /**
         * @param ephemeralPorts A `ephemeral_ports` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder ephemeralPorts(ClusterNodeTypeEphemeralPortsArgs ephemeralPorts) {
            return ephemeralPorts(Output.of(ephemeralPorts));
        }

        /**
         * @param httpEndpointPort The Port used for the HTTP Endpoint for this Node Type.
         * 
         * @return builder
         * 
         */
        public Builder httpEndpointPort(Output<Integer> httpEndpointPort) {
            $.httpEndpointPort = httpEndpointPort;
            return this;
        }

        /**
         * @param httpEndpointPort The Port used for the HTTP Endpoint for this Node Type.
         * 
         * @return builder
         * 
         */
        public Builder httpEndpointPort(Integer httpEndpointPort) {
            return httpEndpointPort(Output.of(httpEndpointPort));
        }

        /**
         * @param instanceCount The number of nodes for this Node Type.
         * 
         * @return builder
         * 
         */
        public Builder instanceCount(Output<Integer> instanceCount) {
            $.instanceCount = instanceCount;
            return this;
        }

        /**
         * @param instanceCount The number of nodes for this Node Type.
         * 
         * @return builder
         * 
         */
        public Builder instanceCount(Integer instanceCount) {
            return instanceCount(Output.of(instanceCount));
        }

        /**
         * @param isPrimary Is this the Primary Node Type?
         * 
         * @return builder
         * 
         */
        public Builder isPrimary(Output<Boolean> isPrimary) {
            $.isPrimary = isPrimary;
            return this;
        }

        /**
         * @param isPrimary Is this the Primary Node Type?
         * 
         * @return builder
         * 
         */
        public Builder isPrimary(Boolean isPrimary) {
            return isPrimary(Output.of(isPrimary));
        }

        /**
         * @param isStateless Should this node type run only stateless services?
         * 
         * @return builder
         * 
         */
        public Builder isStateless(@Nullable Output<Boolean> isStateless) {
            $.isStateless = isStateless;
            return this;
        }

        /**
         * @param isStateless Should this node type run only stateless services?
         * 
         * @return builder
         * 
         */
        public Builder isStateless(Boolean isStateless) {
            return isStateless(Output.of(isStateless));
        }

        /**
         * @param multipleAvailabilityZones Does this node type span availability zones?
         * 
         * @return builder
         * 
         */
        public Builder multipleAvailabilityZones(@Nullable Output<Boolean> multipleAvailabilityZones) {
            $.multipleAvailabilityZones = multipleAvailabilityZones;
            return this;
        }

        /**
         * @param multipleAvailabilityZones Does this node type span availability zones?
         * 
         * @return builder
         * 
         */
        public Builder multipleAvailabilityZones(Boolean multipleAvailabilityZones) {
            return multipleAvailabilityZones(Output.of(multipleAvailabilityZones));
        }

        /**
         * @param name The name of the Node Type.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Node Type.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param placementProperties The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
         * 
         * @return builder
         * 
         */
        public Builder placementProperties(@Nullable Output<Map<String,String>> placementProperties) {
            $.placementProperties = placementProperties;
            return this;
        }

        /**
         * @param placementProperties The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
         * 
         * @return builder
         * 
         */
        public Builder placementProperties(Map<String,String> placementProperties) {
            return placementProperties(Output.of(placementProperties));
        }

        /**
         * @param reverseProxyEndpointPort The Port used for the Reverse Proxy Endpoint for this Node Type. Changing this will upgrade the cluster.
         * 
         * @return builder
         * 
         */
        public Builder reverseProxyEndpointPort(@Nullable Output<Integer> reverseProxyEndpointPort) {
            $.reverseProxyEndpointPort = reverseProxyEndpointPort;
            return this;
        }

        /**
         * @param reverseProxyEndpointPort The Port used for the Reverse Proxy Endpoint for this Node Type. Changing this will upgrade the cluster.
         * 
         * @return builder
         * 
         */
        public Builder reverseProxyEndpointPort(Integer reverseProxyEndpointPort) {
            return reverseProxyEndpointPort(Output.of(reverseProxyEndpointPort));
        }

        public ClusterNodeTypeArgs build() {
            if ($.clientEndpointPort == null) {
                throw new MissingRequiredPropertyException("ClusterNodeTypeArgs", "clientEndpointPort");
            }
            if ($.httpEndpointPort == null) {
                throw new MissingRequiredPropertyException("ClusterNodeTypeArgs", "httpEndpointPort");
            }
            if ($.instanceCount == null) {
                throw new MissingRequiredPropertyException("ClusterNodeTypeArgs", "instanceCount");
            }
            if ($.isPrimary == null) {
                throw new MissingRequiredPropertyException("ClusterNodeTypeArgs", "isPrimary");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ClusterNodeTypeArgs", "name");
            }
            return $;
        }
    }

}
