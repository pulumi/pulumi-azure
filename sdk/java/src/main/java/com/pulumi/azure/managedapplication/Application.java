// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.managedapplication;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.managedapplication.ApplicationArgs;
import com.pulumi.azure.managedapplication.inputs.ApplicationState;
import com.pulumi.azure.managedapplication.outputs.ApplicationPlan;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Managed Application.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.CoreFunctions;
 * import com.pulumi.azure.authorization.AuthorizationFunctions;
 * import com.pulumi.azure.authorization.inputs.GetRoleDefinitionArgs;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.managedapplication.Definition;
 * import com.pulumi.azure.managedapplication.DefinitionArgs;
 * import com.pulumi.azure.managedapplication.inputs.DefinitionAuthorizationArgs;
 * import com.pulumi.azure.managedapplication.Application;
 * import com.pulumi.azure.managedapplication.ApplicationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var current = CoreFunctions.getClientConfig();
 * 
 *         final var builtin = AuthorizationFunctions.getRoleDefinition(GetRoleDefinitionArgs.builder()
 *             .name(&#34;Contributor&#34;)
 *             .build());
 * 
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var exampleDefinition = new Definition(&#34;exampleDefinition&#34;, DefinitionArgs.builder()        
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .lockLevel(&#34;ReadOnly&#34;)
 *             .packageFileUri(&#34;https://github.com/Azure/azure-managedapp-samples/raw/master/Managed Application Sample Packages/201-managed-storage-account/managedstorage.zip&#34;)
 *             .displayName(&#34;TestManagedAppDefinition&#34;)
 *             .description(&#34;Test Managed App Definition&#34;)
 *             .authorizations(DefinitionAuthorizationArgs.builder()
 *                 .servicePrincipalId(current.applyValue(getClientConfigResult -&gt; getClientConfigResult.objectId()))
 *                 .roleDefinitionId(builtin.applyValue(getRoleDefinitionResult -&gt; getRoleDefinitionResult.id()).split(&#34;/&#34;)[builtin.applyValue(getRoleDefinitionResult -&gt; getRoleDefinitionResult.id()).split(&#34;/&#34;).length() - 1])
 *                 .build())
 *             .build());
 * 
 *         var exampleApplication = new Application(&#34;exampleApplication&#34;, ApplicationArgs.builder()        
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .kind(&#34;ServiceCatalog&#34;)
 *             .managedResourceGroupName(&#34;infrastructureGroup&#34;)
 *             .applicationDefinitionId(exampleDefinition.id())
 *             .parameters(Map.ofEntries(
 *                 Map.entry(&#34;location&#34;, exampleResourceGroup.location()),
 *                 Map.entry(&#34;storageAccountNamePrefix&#34;, &#34;storeNamePrefix&#34;),
 *                 Map.entry(&#34;storageAccountType&#34;, &#34;Standard_LRS&#34;)
 *             ))
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Managed Application can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:managedapplication/application:Application example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Solutions/applications/app1
 * ```
 * 
 */
@ResourceType(type="azure:managedapplication/application:Application")
public class Application extends com.pulumi.resources.CustomResource {
    /**
     * The application definition ID to deploy.
     * 
     */
    @Export(name="applicationDefinitionId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> applicationDefinitionId;

    /**
     * @return The application definition ID to deploy.
     * 
     */
    public Output<Optional<String>> applicationDefinitionId() {
        return Codegen.optional(this.applicationDefinitionId);
    }
    /**
     * The kind of the managed application to deploy. Possible values are `MarketPlace` and `ServiceCatalog`. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="kind", refs={String.class}, tree="[0]")
    private Output<String> kind;

    /**
     * @return The kind of the managed application to deploy. Possible values are `MarketPlace` and `ServiceCatalog`. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> kind() {
        return this.kind;
    }
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The name of the target resource group where all the resources deployed by the managed application will reside. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="managedResourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> managedResourceGroupName;

    /**
     * @return The name of the target resource group where all the resources deployed by the managed application will reside. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> managedResourceGroupName() {
        return this.managedResourceGroupName;
    }
    /**
     * Specifies the name of the Managed Application. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Specifies the name of the Managed Application. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The name and value pairs that define the managed application outputs.
     * 
     */
    @Export(name="outputs", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> outputs;

    /**
     * @return The name and value pairs that define the managed application outputs.
     * 
     */
    public Output<Map<String,String>> outputs() {
        return this.outputs;
    }
    /**
     * The parameter values to pass to the Managed Application. This field is a JSON object that allows you to assign parameters to this Managed Application.
     * 
     */
    @Export(name="parameterValues", refs={String.class}, tree="[0]")
    private Output<String> parameterValues;

    /**
     * @return The parameter values to pass to the Managed Application. This field is a JSON object that allows you to assign parameters to this Managed Application.
     * 
     */
    public Output<String> parameterValues() {
        return this.parameterValues;
    }
    /**
     * A mapping of name and value pairs to pass to the managed application as parameters.
     * 
     */
    @Export(name="parameters", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> parameters;

    /**
     * @return A mapping of name and value pairs to pass to the managed application as parameters.
     * 
     */
    public Output<Map<String,String>> parameters() {
        return this.parameters;
    }
    /**
     * One `plan` block as defined below.
     * 
     */
    @Export(name="plan", refs={ApplicationPlan.class}, tree="[0]")
    private Output</* @Nullable */ ApplicationPlan> plan;

    /**
     * @return One `plan` block as defined below.
     * 
     */
    public Output<Optional<ApplicationPlan>> plan() {
        return Codegen.optional(this.plan);
    }
    /**
     * The name of the Resource Group where the Managed Application should exist. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the Managed Application should exist. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Application(String name) {
        this(name, ApplicationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Application(String name, ApplicationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Application(String name, ApplicationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:managedapplication/application:Application", name, args == null ? ApplicationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Application(String name, Output<String> id, @Nullable ApplicationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:managedapplication/application:Application", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Application get(String name, Output<String> id, @Nullable ApplicationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Application(name, id, state, options);
    }
}
