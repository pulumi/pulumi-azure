// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.waf.outputs;

import com.pulumi.azure.waf.outputs.PolicyManagedRulesManagedRuleSetRuleGroupOverrideRule;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class PolicyManagedRulesManagedRuleSetRuleGroupOverride {
    /**
     * @deprecated
     * `disabled_rules` will be removed in favour of the `rule` property in version 4.0 of the AzureRM Provider.
     * 
     */
    @Deprecated /* `disabled_rules` will be removed in favour of the `rule` property in version 4.0 of the AzureRM Provider. */
    private @Nullable List<String> disabledRules;
    /**
     * @return The name of the Rule Group. Possible values are `BadBots`, `crs_20_protocol_violations`, `crs_21_protocol_anomalies`, `crs_23_request_limits`, `crs_30_http_policy`, `crs_35_bad_robots`, `crs_40_generic_attacks`, `crs_41_sql_injection_attacks`, `crs_41_xss_attacks`, `crs_42_tight_security`, `crs_45_trojans`, `crs_49_inbound_blocking`, `General`, `GoodBots`, `KnownBadBots`, `Known-CVEs`, `REQUEST-911-METHOD-ENFORCEMENT`, `REQUEST-913-SCANNER-DETECTION`, `REQUEST-920-PROTOCOL-ENFORCEMENT`, `REQUEST-921-PROTOCOL-ATTACK`, `REQUEST-930-APPLICATION-ATTACK-LFI`, `REQUEST-931-APPLICATION-ATTACK-RFI`, `REQUEST-932-APPLICATION-ATTACK-RCE`, `REQUEST-933-APPLICATION-ATTACK-PHP`, `REQUEST-941-APPLICATION-ATTACK-XSS`, `REQUEST-942-APPLICATION-ATTACK-SQLI`, `REQUEST-943-APPLICATION-ATTACK-SESSION-FIXATION`, `REQUEST-944-APPLICATION-ATTACK-JAVA`, `UnknownBots`, `METHOD-ENFORCEMENT`, `PROTOCOL-ENFORCEMENT`, `PROTOCOL-ATTACK`, `LFI`, `RFI`, `RCE`, `PHP`, `NODEJS`, `XSS`, `SQLI`, `FIX`, `JAVA`, `MS-ThreatIntel-WebShells`, `MS-ThreatIntel-AppSec`, `MS-ThreatIntel-SQLI` and `MS-ThreatIntel-CVEs`MS-ThreatIntel-WebShells`,.
     * 
     */
    private String ruleGroupName;
    /**
     * @return One or more `rule` block defined below.
     * 
     */
    private @Nullable List<PolicyManagedRulesManagedRuleSetRuleGroupOverrideRule> rules;

    private PolicyManagedRulesManagedRuleSetRuleGroupOverride() {}
    /**
     * @deprecated
     * `disabled_rules` will be removed in favour of the `rule` property in version 4.0 of the AzureRM Provider.
     * 
     */
    @Deprecated /* `disabled_rules` will be removed in favour of the `rule` property in version 4.0 of the AzureRM Provider. */
    public List<String> disabledRules() {
        return this.disabledRules == null ? List.of() : this.disabledRules;
    }
    /**
     * @return The name of the Rule Group. Possible values are `BadBots`, `crs_20_protocol_violations`, `crs_21_protocol_anomalies`, `crs_23_request_limits`, `crs_30_http_policy`, `crs_35_bad_robots`, `crs_40_generic_attacks`, `crs_41_sql_injection_attacks`, `crs_41_xss_attacks`, `crs_42_tight_security`, `crs_45_trojans`, `crs_49_inbound_blocking`, `General`, `GoodBots`, `KnownBadBots`, `Known-CVEs`, `REQUEST-911-METHOD-ENFORCEMENT`, `REQUEST-913-SCANNER-DETECTION`, `REQUEST-920-PROTOCOL-ENFORCEMENT`, `REQUEST-921-PROTOCOL-ATTACK`, `REQUEST-930-APPLICATION-ATTACK-LFI`, `REQUEST-931-APPLICATION-ATTACK-RFI`, `REQUEST-932-APPLICATION-ATTACK-RCE`, `REQUEST-933-APPLICATION-ATTACK-PHP`, `REQUEST-941-APPLICATION-ATTACK-XSS`, `REQUEST-942-APPLICATION-ATTACK-SQLI`, `REQUEST-943-APPLICATION-ATTACK-SESSION-FIXATION`, `REQUEST-944-APPLICATION-ATTACK-JAVA`, `UnknownBots`, `METHOD-ENFORCEMENT`, `PROTOCOL-ENFORCEMENT`, `PROTOCOL-ATTACK`, `LFI`, `RFI`, `RCE`, `PHP`, `NODEJS`, `XSS`, `SQLI`, `FIX`, `JAVA`, `MS-ThreatIntel-WebShells`, `MS-ThreatIntel-AppSec`, `MS-ThreatIntel-SQLI` and `MS-ThreatIntel-CVEs`MS-ThreatIntel-WebShells`,.
     * 
     */
    public String ruleGroupName() {
        return this.ruleGroupName;
    }
    /**
     * @return One or more `rule` block defined below.
     * 
     */
    public List<PolicyManagedRulesManagedRuleSetRuleGroupOverrideRule> rules() {
        return this.rules == null ? List.of() : this.rules;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PolicyManagedRulesManagedRuleSetRuleGroupOverride defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> disabledRules;
        private String ruleGroupName;
        private @Nullable List<PolicyManagedRulesManagedRuleSetRuleGroupOverrideRule> rules;
        public Builder() {}
        public Builder(PolicyManagedRulesManagedRuleSetRuleGroupOverride defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.disabledRules = defaults.disabledRules;
    	      this.ruleGroupName = defaults.ruleGroupName;
    	      this.rules = defaults.rules;
        }

        @CustomType.Setter
        public Builder disabledRules(@Nullable List<String> disabledRules) {

            this.disabledRules = disabledRules;
            return this;
        }
        public Builder disabledRules(String... disabledRules) {
            return disabledRules(List.of(disabledRules));
        }
        @CustomType.Setter
        public Builder ruleGroupName(String ruleGroupName) {
            if (ruleGroupName == null) {
              throw new MissingRequiredPropertyException("PolicyManagedRulesManagedRuleSetRuleGroupOverride", "ruleGroupName");
            }
            this.ruleGroupName = ruleGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder rules(@Nullable List<PolicyManagedRulesManagedRuleSetRuleGroupOverrideRule> rules) {

            this.rules = rules;
            return this;
        }
        public Builder rules(PolicyManagedRulesManagedRuleSetRuleGroupOverrideRule... rules) {
            return rules(List.of(rules));
        }
        public PolicyManagedRulesManagedRuleSetRuleGroupOverride build() {
            final var _resultValue = new PolicyManagedRulesManagedRuleSetRuleGroupOverride();
            _resultValue.disabledRules = disabledRules;
            _resultValue.ruleGroupName = ruleGroupName;
            _resultValue.rules = rules;
            return _resultValue;
        }
    }
}
