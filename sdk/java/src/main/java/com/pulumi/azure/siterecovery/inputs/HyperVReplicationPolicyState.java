// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.siterecovery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HyperVReplicationPolicyState extends com.pulumi.resources.ResourceArgs {

    public static final HyperVReplicationPolicyState Empty = new HyperVReplicationPolicyState();

    /**
     * Specifies the frequency at which to create application consistent recovery points.
     * 
     */
    @Import(name="applicationConsistentSnapshotFrequencyInHours")
    private @Nullable Output<Integer> applicationConsistentSnapshotFrequencyInHours;

    /**
     * @return Specifies the frequency at which to create application consistent recovery points.
     * 
     */
    public Optional<Output<Integer>> applicationConsistentSnapshotFrequencyInHours() {
        return Optional.ofNullable(this.applicationConsistentSnapshotFrequencyInHours);
    }

    /**
     * The name of the replication policy. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the replication policy. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The duration in hours for which the recovery points need to be stored.
     * 
     */
    @Import(name="recoveryPointRetentionInHours")
    private @Nullable Output<Integer> recoveryPointRetentionInHours;

    /**
     * @return The duration in hours for which the recovery points need to be stored.
     * 
     */
    public Optional<Output<Integer>> recoveryPointRetentionInHours() {
        return Optional.ofNullable(this.recoveryPointRetentionInHours);
    }

    /**
     * The id of the vault that should be updated. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="recoveryVaultId")
    private @Nullable Output<String> recoveryVaultId;

    /**
     * @return The id of the vault that should be updated. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> recoveryVaultId() {
        return Optional.ofNullable(this.recoveryVaultId);
    }

    /**
     * Specifies how frequently data should be synchronized between source and target locations. Possible values are `30` and `300`.
     * 
     */
    @Import(name="replicationIntervalInSeconds")
    private @Nullable Output<Integer> replicationIntervalInSeconds;

    /**
     * @return Specifies how frequently data should be synchronized between source and target locations. Possible values are `30` and `300`.
     * 
     */
    public Optional<Output<Integer>> replicationIntervalInSeconds() {
        return Optional.ofNullable(this.replicationIntervalInSeconds);
    }

    private HyperVReplicationPolicyState() {}

    private HyperVReplicationPolicyState(HyperVReplicationPolicyState $) {
        this.applicationConsistentSnapshotFrequencyInHours = $.applicationConsistentSnapshotFrequencyInHours;
        this.name = $.name;
        this.recoveryPointRetentionInHours = $.recoveryPointRetentionInHours;
        this.recoveryVaultId = $.recoveryVaultId;
        this.replicationIntervalInSeconds = $.replicationIntervalInSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HyperVReplicationPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HyperVReplicationPolicyState $;

        public Builder() {
            $ = new HyperVReplicationPolicyState();
        }

        public Builder(HyperVReplicationPolicyState defaults) {
            $ = new HyperVReplicationPolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationConsistentSnapshotFrequencyInHours Specifies the frequency at which to create application consistent recovery points.
         * 
         * @return builder
         * 
         */
        public Builder applicationConsistentSnapshotFrequencyInHours(@Nullable Output<Integer> applicationConsistentSnapshotFrequencyInHours) {
            $.applicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHours;
            return this;
        }

        /**
         * @param applicationConsistentSnapshotFrequencyInHours Specifies the frequency at which to create application consistent recovery points.
         * 
         * @return builder
         * 
         */
        public Builder applicationConsistentSnapshotFrequencyInHours(Integer applicationConsistentSnapshotFrequencyInHours) {
            return applicationConsistentSnapshotFrequencyInHours(Output.of(applicationConsistentSnapshotFrequencyInHours));
        }

        /**
         * @param name The name of the replication policy. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the replication policy. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param recoveryPointRetentionInHours The duration in hours for which the recovery points need to be stored.
         * 
         * @return builder
         * 
         */
        public Builder recoveryPointRetentionInHours(@Nullable Output<Integer> recoveryPointRetentionInHours) {
            $.recoveryPointRetentionInHours = recoveryPointRetentionInHours;
            return this;
        }

        /**
         * @param recoveryPointRetentionInHours The duration in hours for which the recovery points need to be stored.
         * 
         * @return builder
         * 
         */
        public Builder recoveryPointRetentionInHours(Integer recoveryPointRetentionInHours) {
            return recoveryPointRetentionInHours(Output.of(recoveryPointRetentionInHours));
        }

        /**
         * @param recoveryVaultId The id of the vault that should be updated. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder recoveryVaultId(@Nullable Output<String> recoveryVaultId) {
            $.recoveryVaultId = recoveryVaultId;
            return this;
        }

        /**
         * @param recoveryVaultId The id of the vault that should be updated. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder recoveryVaultId(String recoveryVaultId) {
            return recoveryVaultId(Output.of(recoveryVaultId));
        }

        /**
         * @param replicationIntervalInSeconds Specifies how frequently data should be synchronized between source and target locations. Possible values are `30` and `300`.
         * 
         * @return builder
         * 
         */
        public Builder replicationIntervalInSeconds(@Nullable Output<Integer> replicationIntervalInSeconds) {
            $.replicationIntervalInSeconds = replicationIntervalInSeconds;
            return this;
        }

        /**
         * @param replicationIntervalInSeconds Specifies how frequently data should be synchronized between source and target locations. Possible values are `30` and `300`.
         * 
         * @return builder
         * 
         */
        public Builder replicationIntervalInSeconds(Integer replicationIntervalInSeconds) {
            return replicationIntervalInSeconds(Output.of(replicationIntervalInSeconds));
        }

        public HyperVReplicationPolicyState build() {
            return $;
        }
    }

}
