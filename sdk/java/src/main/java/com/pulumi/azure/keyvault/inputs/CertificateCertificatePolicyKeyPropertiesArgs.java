// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.keyvault.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateCertificatePolicyKeyPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateCertificatePolicyKeyPropertiesArgs Empty = new CertificateCertificatePolicyKeyPropertiesArgs();

    /**
     * Specifies the curve to use when creating an `EC` key. Possible values are `P-256`, `P-256K`, `P-384`, and `P-521`. This field will be required in a future release if `key_type` is `EC` or `EC-HSM`.
     * 
     */
    @Import(name="curve")
    private @Nullable Output<String> curve;

    /**
     * @return Specifies the curve to use when creating an `EC` key. Possible values are `P-256`, `P-256K`, `P-384`, and `P-521`. This field will be required in a future release if `key_type` is `EC` or `EC-HSM`.
     * 
     */
    public Optional<Output<String>> curve() {
        return Optional.ofNullable(this.curve);
    }

    /**
     * Is this certificate exportable?
     * 
     */
    @Import(name="exportable", required=true)
    private Output<Boolean> exportable;

    /**
     * @return Is this certificate exportable?
     * 
     */
    public Output<Boolean> exportable() {
        return this.exportable;
    }

    /**
     * The size of the key used in the certificate. Possible values include `2048`, `3072`, and `4096` for `RSA` keys, or `256`, `384`, and `521` for `EC` keys. This property is required when using RSA keys.
     * 
     */
    @Import(name="keySize")
    private @Nullable Output<Integer> keySize;

    /**
     * @return The size of the key used in the certificate. Possible values include `2048`, `3072`, and `4096` for `RSA` keys, or `256`, `384`, and `521` for `EC` keys. This property is required when using RSA keys.
     * 
     */
    public Optional<Output<Integer>> keySize() {
        return Optional.ofNullable(this.keySize);
    }

    /**
     * Specifies the type of key. Possible values are `EC`, `EC-HSM`, `RSA`, `RSA-HSM` and `oct`.
     * 
     */
    @Import(name="keyType", required=true)
    private Output<String> keyType;

    /**
     * @return Specifies the type of key. Possible values are `EC`, `EC-HSM`, `RSA`, `RSA-HSM` and `oct`.
     * 
     */
    public Output<String> keyType() {
        return this.keyType;
    }

    /**
     * Is the key reusable?
     * 
     */
    @Import(name="reuseKey", required=true)
    private Output<Boolean> reuseKey;

    /**
     * @return Is the key reusable?
     * 
     */
    public Output<Boolean> reuseKey() {
        return this.reuseKey;
    }

    private CertificateCertificatePolicyKeyPropertiesArgs() {}

    private CertificateCertificatePolicyKeyPropertiesArgs(CertificateCertificatePolicyKeyPropertiesArgs $) {
        this.curve = $.curve;
        this.exportable = $.exportable;
        this.keySize = $.keySize;
        this.keyType = $.keyType;
        this.reuseKey = $.reuseKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateCertificatePolicyKeyPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateCertificatePolicyKeyPropertiesArgs $;

        public Builder() {
            $ = new CertificateCertificatePolicyKeyPropertiesArgs();
        }

        public Builder(CertificateCertificatePolicyKeyPropertiesArgs defaults) {
            $ = new CertificateCertificatePolicyKeyPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param curve Specifies the curve to use when creating an `EC` key. Possible values are `P-256`, `P-256K`, `P-384`, and `P-521`. This field will be required in a future release if `key_type` is `EC` or `EC-HSM`.
         * 
         * @return builder
         * 
         */
        public Builder curve(@Nullable Output<String> curve) {
            $.curve = curve;
            return this;
        }

        /**
         * @param curve Specifies the curve to use when creating an `EC` key. Possible values are `P-256`, `P-256K`, `P-384`, and `P-521`. This field will be required in a future release if `key_type` is `EC` or `EC-HSM`.
         * 
         * @return builder
         * 
         */
        public Builder curve(String curve) {
            return curve(Output.of(curve));
        }

        /**
         * @param exportable Is this certificate exportable?
         * 
         * @return builder
         * 
         */
        public Builder exportable(Output<Boolean> exportable) {
            $.exportable = exportable;
            return this;
        }

        /**
         * @param exportable Is this certificate exportable?
         * 
         * @return builder
         * 
         */
        public Builder exportable(Boolean exportable) {
            return exportable(Output.of(exportable));
        }

        /**
         * @param keySize The size of the key used in the certificate. Possible values include `2048`, `3072`, and `4096` for `RSA` keys, or `256`, `384`, and `521` for `EC` keys. This property is required when using RSA keys.
         * 
         * @return builder
         * 
         */
        public Builder keySize(@Nullable Output<Integer> keySize) {
            $.keySize = keySize;
            return this;
        }

        /**
         * @param keySize The size of the key used in the certificate. Possible values include `2048`, `3072`, and `4096` for `RSA` keys, or `256`, `384`, and `521` for `EC` keys. This property is required when using RSA keys.
         * 
         * @return builder
         * 
         */
        public Builder keySize(Integer keySize) {
            return keySize(Output.of(keySize));
        }

        /**
         * @param keyType Specifies the type of key. Possible values are `EC`, `EC-HSM`, `RSA`, `RSA-HSM` and `oct`.
         * 
         * @return builder
         * 
         */
        public Builder keyType(Output<String> keyType) {
            $.keyType = keyType;
            return this;
        }

        /**
         * @param keyType Specifies the type of key. Possible values are `EC`, `EC-HSM`, `RSA`, `RSA-HSM` and `oct`.
         * 
         * @return builder
         * 
         */
        public Builder keyType(String keyType) {
            return keyType(Output.of(keyType));
        }

        /**
         * @param reuseKey Is the key reusable?
         * 
         * @return builder
         * 
         */
        public Builder reuseKey(Output<Boolean> reuseKey) {
            $.reuseKey = reuseKey;
            return this;
        }

        /**
         * @param reuseKey Is the key reusable?
         * 
         * @return builder
         * 
         */
        public Builder reuseKey(Boolean reuseKey) {
            return reuseKey(Output.of(reuseKey));
        }

        public CertificateCertificatePolicyKeyPropertiesArgs build() {
            $.exportable = Objects.requireNonNull($.exportable, "expected parameter 'exportable' to be non-null");
            $.keyType = Objects.requireNonNull($.keyType, "expected parameter 'keyType' to be non-null");
            $.reuseKey = Objects.requireNonNull($.reuseKey, "expected parameter 'reuseKey' to be non-null");
            return $;
        }
    }

}
