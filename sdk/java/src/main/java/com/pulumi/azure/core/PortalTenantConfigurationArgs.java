// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.core;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.util.Objects;


public final class PortalTenantConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final PortalTenantConfigurationArgs Empty = new PortalTenantConfigurationArgs();

    /**
     * Is the private tile markdown storage which used to display custom dynamic and static content enabled?
     * 
     * &gt; **Note:** When `private_markdown_storage_enforced` is set to `true`, only external storage configuration (URI) is allowed for Markdown tiles. Inline content configuration will be prohibited.
     * 
     */
    @Import(name="privateMarkdownStorageEnforced", required=true)
    private Output<Boolean> privateMarkdownStorageEnforced;

    /**
     * @return Is the private tile markdown storage which used to display custom dynamic and static content enabled?
     * 
     * &gt; **Note:** When `private_markdown_storage_enforced` is set to `true`, only external storage configuration (URI) is allowed for Markdown tiles. Inline content configuration will be prohibited.
     * 
     */
    public Output<Boolean> privateMarkdownStorageEnforced() {
        return this.privateMarkdownStorageEnforced;
    }

    private PortalTenantConfigurationArgs() {}

    private PortalTenantConfigurationArgs(PortalTenantConfigurationArgs $) {
        this.privateMarkdownStorageEnforced = $.privateMarkdownStorageEnforced;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PortalTenantConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PortalTenantConfigurationArgs $;

        public Builder() {
            $ = new PortalTenantConfigurationArgs();
        }

        public Builder(PortalTenantConfigurationArgs defaults) {
            $ = new PortalTenantConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param privateMarkdownStorageEnforced Is the private tile markdown storage which used to display custom dynamic and static content enabled?
         * 
         * &gt; **Note:** When `private_markdown_storage_enforced` is set to `true`, only external storage configuration (URI) is allowed for Markdown tiles. Inline content configuration will be prohibited.
         * 
         * @return builder
         * 
         */
        public Builder privateMarkdownStorageEnforced(Output<Boolean> privateMarkdownStorageEnforced) {
            $.privateMarkdownStorageEnforced = privateMarkdownStorageEnforced;
            return this;
        }

        /**
         * @param privateMarkdownStorageEnforced Is the private tile markdown storage which used to display custom dynamic and static content enabled?
         * 
         * &gt; **Note:** When `private_markdown_storage_enforced` is set to `true`, only external storage configuration (URI) is allowed for Markdown tiles. Inline content configuration will be prohibited.
         * 
         * @return builder
         * 
         */
        public Builder privateMarkdownStorageEnforced(Boolean privateMarkdownStorageEnforced) {
            return privateMarkdownStorageEnforced(Output.of(privateMarkdownStorageEnforced));
        }

        public PortalTenantConfigurationArgs build() {
            if ($.privateMarkdownStorageEnforced == null) {
                throw new MissingRequiredPropertyException("PortalTenantConfigurationArgs", "privateMarkdownStorageEnforced");
            }
            return $;
        }
    }

}
