// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mssql;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.mssql.ServerArgs;
import com.pulumi.azure.mssql.inputs.ServerState;
import com.pulumi.azure.mssql.outputs.ServerAzureadAdministrator;
import com.pulumi.azure.mssql.outputs.ServerIdentity;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Microsoft SQL Azure Database Server.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.mssql.Server;
 * import com.pulumi.azure.mssql.ServerArgs;
 * import com.pulumi.azure.mssql.inputs.ServerAzureadAdministratorArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var exampleServer = new Server(&#34;exampleServer&#34;, ServerArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .version(&#34;12.0&#34;)
 *             .administratorLogin(&#34;missadministrator&#34;)
 *             .administratorLoginPassword(&#34;thisIsKat11&#34;)
 *             .minimumTlsVersion(&#34;1.2&#34;)
 *             .azureadAdministrator(ServerAzureadAdministratorArgs.builder()
 *                 .loginUsername(&#34;AzureAD Admin&#34;)
 *                 .objectId(&#34;00000000-0000-0000-0000-000000000000&#34;)
 *                 .build())
 *             .tags(Map.of(&#34;environment&#34;, &#34;production&#34;))
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Transparent Data Encryption(TDE) With A Customer Managed Key(CMK) During Create
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.CoreFunctions;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.authorization.UserAssignedIdentity;
 * import com.pulumi.azure.authorization.UserAssignedIdentityArgs;
 * import com.pulumi.azure.keyvault.KeyVault;
 * import com.pulumi.azure.keyvault.KeyVaultArgs;
 * import com.pulumi.azure.keyvault.inputs.KeyVaultAccessPolicyArgs;
 * import com.pulumi.azure.keyvault.Key;
 * import com.pulumi.azure.keyvault.KeyArgs;
 * import com.pulumi.azure.mssql.Server;
 * import com.pulumi.azure.mssql.ServerArgs;
 * import com.pulumi.azure.mssql.inputs.ServerAzureadAdministratorArgs;
 * import com.pulumi.azure.mssql.inputs.ServerIdentityArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var current = CoreFunctions.getClientConfig();
 * 
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var exampleUserAssignedIdentity = new UserAssignedIdentity(&#34;exampleUserAssignedIdentity&#34;, UserAssignedIdentityArgs.builder()        
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .build());
 * 
 *         var exampleKeyVault = new KeyVault(&#34;exampleKeyVault&#34;, KeyVaultArgs.builder()        
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .enabledForDiskEncryption(true)
 *             .tenantId(exampleUserAssignedIdentity.tenantId())
 *             .softDeleteRetentionDays(7)
 *             .purgeProtectionEnabled(true)
 *             .skuName(&#34;standard&#34;)
 *             .accessPolicies(            
 *                 KeyVaultAccessPolicyArgs.builder()
 *                     .tenantId(current.applyValue(getClientConfigResult -&gt; getClientConfigResult.tenantId()))
 *                     .objectId(current.applyValue(getClientConfigResult -&gt; getClientConfigResult.objectId()))
 *                     .keyPermissions(                    
 *                         &#34;Get&#34;,
 *                         &#34;List&#34;,
 *                         &#34;Create&#34;,
 *                         &#34;Delete&#34;,
 *                         &#34;Update&#34;,
 *                         &#34;Recover&#34;,
 *                         &#34;Purge&#34;,
 *                         &#34;GetRotationPolicy&#34;)
 *                     .build(),
 *                 KeyVaultAccessPolicyArgs.builder()
 *                     .tenantId(exampleUserAssignedIdentity.tenantId())
 *                     .objectId(exampleUserAssignedIdentity.principalId())
 *                     .keyPermissions(                    
 *                         &#34;Get&#34;,
 *                         &#34;WrapKey&#34;,
 *                         &#34;UnwrapKey&#34;)
 *                     .build())
 *             .build());
 * 
 *         var exampleKey = new Key(&#34;exampleKey&#34;, KeyArgs.builder()        
 *             .keyVaultId(exampleKeyVault.id())
 *             .keyType(&#34;RSA&#34;)
 *             .keySize(2048)
 *             .keyOpts(            
 *                 &#34;unwrapKey&#34;,
 *                 &#34;wrapKey&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(exampleKeyVault)
 *                 .build());
 * 
 *         var exampleServer = new Server(&#34;exampleServer&#34;, ServerArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .version(&#34;12.0&#34;)
 *             .administratorLogin(&#34;Example-Administrator&#34;)
 *             .administratorLoginPassword(&#34;Example_Password!&#34;)
 *             .minimumTlsVersion(&#34;1.2&#34;)
 *             .azureadAdministrator(ServerAzureadAdministratorArgs.builder()
 *                 .loginUsername(exampleUserAssignedIdentity.name())
 *                 .objectId(exampleUserAssignedIdentity.principalId())
 *                 .build())
 *             .identity(ServerIdentityArgs.builder()
 *                 .type(&#34;UserAssigned&#34;)
 *                 .identityIds(exampleUserAssignedIdentity.id())
 *                 .build())
 *             .primaryUserAssignedIdentityId(exampleUserAssignedIdentity.id())
 *             .transparentDataEncryptionKeyVaultKeyId(exampleKey.id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * SQL Servers can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:mssql/server:Server example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Sql/servers/myserver
 * ```
 * 
 */
@ResourceType(type="azure:mssql/server:Server")
public class Server extends com.pulumi.resources.CustomResource {
    /**
     * The administrator login name for the new server. Required unless `azuread_authentication_only` in the `azuread_administrator` block is `true`. When omitted, Azure will generate a default username which cannot be subsequently changed. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="administratorLogin", refs={String.class}, tree="[0]")
    private Output<String> administratorLogin;

    /**
     * @return The administrator login name for the new server. Required unless `azuread_authentication_only` in the `azuread_administrator` block is `true`. When omitted, Azure will generate a default username which cannot be subsequently changed. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> administratorLogin() {
        return this.administratorLogin;
    }
    /**
     * The password associated with the `administrator_login` user. Needs to comply with Azure&#39;s [Password Policy](https://msdn.microsoft.com/library/ms161959.aspx). Required unless `azuread_authentication_only` in the `azuread_administrator` block is `true`.
     * 
     */
    @Export(name="administratorLoginPassword", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> administratorLoginPassword;

    /**
     * @return The password associated with the `administrator_login` user. Needs to comply with Azure&#39;s [Password Policy](https://msdn.microsoft.com/library/ms161959.aspx). Required unless `azuread_authentication_only` in the `azuread_administrator` block is `true`.
     * 
     */
    public Output<Optional<String>> administratorLoginPassword() {
        return Codegen.optional(this.administratorLoginPassword);
    }
    /**
     * An `azuread_administrator` block as defined below.
     * 
     */
    @Export(name="azureadAdministrator", refs={ServerAzureadAdministrator.class}, tree="[0]")
    private Output</* @Nullable */ ServerAzureadAdministrator> azureadAdministrator;

    /**
     * @return An `azuread_administrator` block as defined below.
     * 
     */
    public Output<Optional<ServerAzureadAdministrator>> azureadAdministrator() {
        return Codegen.optional(this.azureadAdministrator);
    }
    /**
     * The connection policy the server will use. Possible values are `Default`, `Proxy`, and `Redirect`. Defaults to `Default`.
     * 
     */
    @Export(name="connectionPolicy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> connectionPolicy;

    /**
     * @return The connection policy the server will use. Possible values are `Default`, `Proxy`, and `Redirect`. Defaults to `Default`.
     * 
     */
    public Output<Optional<String>> connectionPolicy() {
        return Codegen.optional(this.connectionPolicy);
    }
    /**
     * The fully qualified domain name of the Azure SQL Server (e.g. myServerName.database.windows.net)
     * 
     */
    @Export(name="fullyQualifiedDomainName", refs={String.class}, tree="[0]")
    private Output<String> fullyQualifiedDomainName;

    /**
     * @return The fully qualified domain name of the Azure SQL Server (e.g. myServerName.database.windows.net)
     * 
     */
    public Output<String> fullyQualifiedDomainName() {
        return this.fullyQualifiedDomainName;
    }
    /**
     * An `identity` block as defined below.
     * 
     */
    @Export(name="identity", refs={ServerIdentity.class}, tree="[0]")
    private Output</* @Nullable */ ServerIdentity> identity;

    /**
     * @return An `identity` block as defined below.
     * 
     */
    public Output<Optional<ServerIdentity>> identity() {
        return Codegen.optional(this.identity);
    }
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The Minimum TLS Version for all SQL Database and SQL Data Warehouse databases associated with the server. Valid values are: `1.0`, `1.1` , `1.2` and `Disabled`. Defaults to `1.2`.
     * 
     * &gt; **NOTE:** The `minimum_tls_version` is set to `Disabled` means all TLS versions are allowed. After you enforce a version of `minimum_tls_version`, it&#39;s not possible to revert to `Disabled`.
     * 
     */
    @Export(name="minimumTlsVersion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> minimumTlsVersion;

    /**
     * @return The Minimum TLS Version for all SQL Database and SQL Data Warehouse databases associated with the server. Valid values are: `1.0`, `1.1` , `1.2` and `Disabled`. Defaults to `1.2`.
     * 
     * &gt; **NOTE:** The `minimum_tls_version` is set to `Disabled` means all TLS versions are allowed. After you enforce a version of `minimum_tls_version`, it&#39;s not possible to revert to `Disabled`.
     * 
     */
    public Output<Optional<String>> minimumTlsVersion() {
        return Codegen.optional(this.minimumTlsVersion);
    }
    /**
     * The name of the Microsoft SQL Server. This needs to be globally unique within Azure. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the Microsoft SQL Server. This needs to be globally unique within Azure. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Whether outbound network traffic is restricted for this server. Defaults to `false`.
     * 
     */
    @Export(name="outboundNetworkRestrictionEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> outboundNetworkRestrictionEnabled;

    /**
     * @return Whether outbound network traffic is restricted for this server. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> outboundNetworkRestrictionEnabled() {
        return Codegen.optional(this.outboundNetworkRestrictionEnabled);
    }
    /**
     * Specifies the primary user managed identity id. Required if `type` is `UserAssigned` and should be combined with `identity_ids`.
     * 
     */
    @Export(name="primaryUserAssignedIdentityId", refs={String.class}, tree="[0]")
    private Output<String> primaryUserAssignedIdentityId;

    /**
     * @return Specifies the primary user managed identity id. Required if `type` is `UserAssigned` and should be combined with `identity_ids`.
     * 
     */
    public Output<String> primaryUserAssignedIdentityId() {
        return this.primaryUserAssignedIdentityId;
    }
    /**
     * Whether public network access is allowed for this server. Defaults to `true`.
     * 
     */
    @Export(name="publicNetworkAccessEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> publicNetworkAccessEnabled;

    /**
     * @return Whether public network access is allowed for this server. Defaults to `true`.
     * 
     */
    public Output<Optional<Boolean>> publicNetworkAccessEnabled() {
        return Codegen.optional(this.publicNetworkAccessEnabled);
    }
    /**
     * The name of the resource group in which to create the Microsoft SQL Server. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the Microsoft SQL Server. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * A list of dropped restorable database IDs on the server.
     * 
     */
    @Export(name="restorableDroppedDatabaseIds", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> restorableDroppedDatabaseIds;

    /**
     * @return A list of dropped restorable database IDs on the server.
     * 
     */
    public Output<List<String>> restorableDroppedDatabaseIds() {
        return this.restorableDroppedDatabaseIds;
    }
    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The fully versioned `Key Vault` `Key` URL (e.g. `&#39;https://&lt;YourVaultName&gt;.vault.azure.net/keys/&lt;YourKeyName&gt;/&lt;YourKeyVersion&gt;`) to be used as the `Customer Managed Key`(CMK/BYOK) for the `Transparent Data Encryption`(TDE) layer.
     * 
     * &gt; **NOTE:** To successfully deploy a `Microsoft SQL Server` in CMK/BYOK TDE the `Key Vault` must have `Soft-delete` and `purge protection` enabled to protect from data loss due to accidental key and/or key vault deletion. The `Key Vault` and the `Microsoft SQL Server` `User Managed Identity Instance` must belong to the same `Azure Active Directory` `tenant`.
     * 
     * &gt; **NOTE:**  Cross-tenant `Key Vault` and `Microsoft SQL Server` interactions are not supported. Please see the [product documentation](https://learn.microsoft.com/azure/azure-sql/database/transparent-data-encryption-byok-overview?view=azuresql#requirements-for-configuring-customer-managed-tde) for more information.
     * 
     * &gt; **NOTE:** When using a firewall with a `Key Vault`, you must enable the option `Allow trusted Microsoft services to bypass the firewall`.
     * 
     */
    @Export(name="transparentDataEncryptionKeyVaultKeyId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> transparentDataEncryptionKeyVaultKeyId;

    /**
     * @return The fully versioned `Key Vault` `Key` URL (e.g. `&#39;https://&lt;YourVaultName&gt;.vault.azure.net/keys/&lt;YourKeyName&gt;/&lt;YourKeyVersion&gt;`) to be used as the `Customer Managed Key`(CMK/BYOK) for the `Transparent Data Encryption`(TDE) layer.
     * 
     * &gt; **NOTE:** To successfully deploy a `Microsoft SQL Server` in CMK/BYOK TDE the `Key Vault` must have `Soft-delete` and `purge protection` enabled to protect from data loss due to accidental key and/or key vault deletion. The `Key Vault` and the `Microsoft SQL Server` `User Managed Identity Instance` must belong to the same `Azure Active Directory` `tenant`.
     * 
     * &gt; **NOTE:**  Cross-tenant `Key Vault` and `Microsoft SQL Server` interactions are not supported. Please see the [product documentation](https://learn.microsoft.com/azure/azure-sql/database/transparent-data-encryption-byok-overview?view=azuresql#requirements-for-configuring-customer-managed-tde) for more information.
     * 
     * &gt; **NOTE:** When using a firewall with a `Key Vault`, you must enable the option `Allow trusted Microsoft services to bypass the firewall`.
     * 
     */
    public Output<Optional<String>> transparentDataEncryptionKeyVaultKeyId() {
        return Codegen.optional(this.transparentDataEncryptionKeyVaultKeyId);
    }
    /**
     * The version for the new server. Valid values are: 2.0 (for v11 server) and 12.0 (for v12 server). Changing this forces a new resource to be created.
     * 
     */
    @Export(name="version", refs={String.class}, tree="[0]")
    private Output<String> version;

    /**
     * @return The version for the new server. Valid values are: 2.0 (for v11 server) and 12.0 (for v12 server). Changing this forces a new resource to be created.
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Server(String name) {
        this(name, ServerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Server(String name, ServerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Server(String name, ServerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:mssql/server:Server", name, args == null ? ServerArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Server(String name, Output<String> id, @Nullable ServerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:mssql/server:Server", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "administratorLoginPassword"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Server get(String name, Output<String> id, @Nullable ServerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Server(name, id, state, options);
    }
}
