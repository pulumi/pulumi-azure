// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.outputs;

import com.pulumi.azure.containerservice.outputs.GetKubernetesClusterAciConnectorLinux;
import com.pulumi.azure.containerservice.outputs.GetKubernetesClusterAgentPoolProfile;
import com.pulumi.azure.containerservice.outputs.GetKubernetesClusterAzureActiveDirectoryRoleBasedAccessControl;
import com.pulumi.azure.containerservice.outputs.GetKubernetesClusterIdentity;
import com.pulumi.azure.containerservice.outputs.GetKubernetesClusterIngressApplicationGateway;
import com.pulumi.azure.containerservice.outputs.GetKubernetesClusterKeyVaultSecretsProvider;
import com.pulumi.azure.containerservice.outputs.GetKubernetesClusterKubeAdminConfig;
import com.pulumi.azure.containerservice.outputs.GetKubernetesClusterKubeConfig;
import com.pulumi.azure.containerservice.outputs.GetKubernetesClusterKubeletIdentity;
import com.pulumi.azure.containerservice.outputs.GetKubernetesClusterLinuxProfile;
import com.pulumi.azure.containerservice.outputs.GetKubernetesClusterMicrosoftDefender;
import com.pulumi.azure.containerservice.outputs.GetKubernetesClusterNetworkProfile;
import com.pulumi.azure.containerservice.outputs.GetKubernetesClusterOmsAgent;
import com.pulumi.azure.containerservice.outputs.GetKubernetesClusterServicePrincipal;
import com.pulumi.azure.containerservice.outputs.GetKubernetesClusterWindowsProfile;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetKubernetesClusterResult {
    /**
     * @return An `aci_connector_linux` block as documented below.
     * 
     */
    private final List<GetKubernetesClusterAciConnectorLinux> aciConnectorLinuxes;
    /**
     * @return An `agent_pool_profile` block as documented below.
     * 
     */
    private final List<GetKubernetesClusterAgentPoolProfile> agentPoolProfiles;
    /**
     * @return The IP ranges to whitelist for incoming traffic to the primaries.
     * 
     */
    private final List<String> apiServerAuthorizedIpRanges;
    /**
     * @return An `azure_active_directory_role_based_access_control` block as documented below.
     * 
     */
    private final List<GetKubernetesClusterAzureActiveDirectoryRoleBasedAccessControl> azureActiveDirectoryRoleBasedAccessControls;
    /**
     * @return Is Azure Policy enabled on this managed Kubernetes Cluster?
     * 
     */
    private final Boolean azurePolicyEnabled;
    /**
     * @return The ID of the Disk Encryption Set used for the Nodes and Volumes.
     * 
     */
    private final String diskEncryptionSetId;
    /**
     * @return The DNS Prefix of the managed Kubernetes cluster.
     * 
     */
    private final String dnsPrefix;
    /**
     * @return The FQDN of the Azure Kubernetes Managed Cluster.
     * 
     */
    private final String fqdn;
    /**
     * @return Is HTTP Application Routing enabled for this managed Kubernetes Cluster?
     * 
     */
    private final Boolean httpApplicationRoutingEnabled;
    /**
     * @return The Zone Name of the HTTP Application Routing.
     * 
     */
    private final String httpApplicationRoutingZoneName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return An `identity` block as documented below.
     * 
     */
    private final List<GetKubernetesClusterIdentity> identities;
    /**
     * @return An `ingress_application_gateway` block as documented below.
     * 
     */
    private final List<GetKubernetesClusterIngressApplicationGateway> ingressApplicationGateways;
    /**
     * @return A `key_vault_secrets_provider` block as documented below.
     * 
     */
    private final List<GetKubernetesClusterKeyVaultSecretsProvider> keyVaultSecretsProviders;
    /**
     * @return Raw Kubernetes config for the admin account to be used by [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/) and other compatible tools. This is only available when Role Based Access Control with Azure Active Directory is enabled and local accounts are not disabled.
     * 
     */
    private final String kubeAdminConfigRaw;
    /**
     * @return A `kube_admin_config` block as defined below. This is only available when Role Based Access Control with Azure Active Directory is enabled and local accounts are not disabled.
     * 
     */
    private final List<GetKubernetesClusterKubeAdminConfig> kubeAdminConfigs;
    /**
     * @return Base64 encoded Kubernetes configuration.
     * 
     */
    private final String kubeConfigRaw;
    /**
     * @return A `kube_config` block as defined below.
     * 
     */
    private final List<GetKubernetesClusterKubeConfig> kubeConfigs;
    /**
     * @return A `kubelet_identity` block as documented below.
     * 
     */
    private final List<GetKubernetesClusterKubeletIdentity> kubeletIdentities;
    /**
     * @return The version of Kubernetes used on the managed Kubernetes Cluster.
     * 
     */
    private final String kubernetesVersion;
    /**
     * @return A `linux_profile` block as documented below.
     * 
     */
    private final List<GetKubernetesClusterLinuxProfile> linuxProfiles;
    /**
     * @return The Azure Region in which the managed Kubernetes Cluster exists.
     * 
     */
    private final String location;
    /**
     * @return A `microsoft_defender` block as defined below.
     * 
     */
    private final List<GetKubernetesClusterMicrosoftDefender> microsoftDefenders;
    /**
     * @return The name assigned to this pool of agents.
     * 
     */
    private final String name;
    /**
     * @return A `network_profile` block as documented below.
     * 
     */
    private final List<GetKubernetesClusterNetworkProfile> networkProfiles;
    /**
     * @return Auto-generated Resource Group containing AKS Cluster resources.
     * 
     */
    private final String nodeResourceGroup;
    /**
     * @return Whether or not the OIDC feature is enabled or disabled.
     * 
     */
    private final Boolean oidcIssuerEnabled;
    /**
     * @return The OIDC issuer URL that is associated with the cluster.
     * 
     */
    private final String oidcIssuerUrl;
    /**
     * @return An `oms_agent` block as documented below.
     * 
     */
    private final List<GetKubernetesClusterOmsAgent> omsAgents;
    /**
     * @return Is Open Service Mesh enabled for this managed Kubernetes Cluster?
     * 
     */
    private final Boolean openServiceMeshEnabled;
    /**
     * @return If the cluster has the Kubernetes API only exposed on internal IP addresses.
     * 
     */
    private final Boolean privateClusterEnabled;
    /**
     * @return The FQDN of this Kubernetes Cluster when private link has been enabled. This name is only resolvable inside the Virtual Network where the Azure Kubernetes Service is located
     * 
     */
    private final String privateFqdn;
    private final String resourceGroupName;
    /**
     * @return Is Role Based Access Control enabled for this managed Kubernetes Cluster.
     * 
     */
    private final Boolean roleBasedAccessControlEnabled;
    /**
     * @return A `service_principal` block as documented below.
     * 
     */
    private final List<GetKubernetesClusterServicePrincipal> servicePrincipals;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private final Map<String,String> tags;
    /**
     * @return A `windows_profile` block as documented below.
     * 
     */
    private final List<GetKubernetesClusterWindowsProfile> windowsProfiles;

    @CustomType.Constructor
    private GetKubernetesClusterResult(
        @CustomType.Parameter("aciConnectorLinuxes") List<GetKubernetesClusterAciConnectorLinux> aciConnectorLinuxes,
        @CustomType.Parameter("agentPoolProfiles") List<GetKubernetesClusterAgentPoolProfile> agentPoolProfiles,
        @CustomType.Parameter("apiServerAuthorizedIpRanges") List<String> apiServerAuthorizedIpRanges,
        @CustomType.Parameter("azureActiveDirectoryRoleBasedAccessControls") List<GetKubernetesClusterAzureActiveDirectoryRoleBasedAccessControl> azureActiveDirectoryRoleBasedAccessControls,
        @CustomType.Parameter("azurePolicyEnabled") Boolean azurePolicyEnabled,
        @CustomType.Parameter("diskEncryptionSetId") String diskEncryptionSetId,
        @CustomType.Parameter("dnsPrefix") String dnsPrefix,
        @CustomType.Parameter("fqdn") String fqdn,
        @CustomType.Parameter("httpApplicationRoutingEnabled") Boolean httpApplicationRoutingEnabled,
        @CustomType.Parameter("httpApplicationRoutingZoneName") String httpApplicationRoutingZoneName,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("identities") List<GetKubernetesClusterIdentity> identities,
        @CustomType.Parameter("ingressApplicationGateways") List<GetKubernetesClusterIngressApplicationGateway> ingressApplicationGateways,
        @CustomType.Parameter("keyVaultSecretsProviders") List<GetKubernetesClusterKeyVaultSecretsProvider> keyVaultSecretsProviders,
        @CustomType.Parameter("kubeAdminConfigRaw") String kubeAdminConfigRaw,
        @CustomType.Parameter("kubeAdminConfigs") List<GetKubernetesClusterKubeAdminConfig> kubeAdminConfigs,
        @CustomType.Parameter("kubeConfigRaw") String kubeConfigRaw,
        @CustomType.Parameter("kubeConfigs") List<GetKubernetesClusterKubeConfig> kubeConfigs,
        @CustomType.Parameter("kubeletIdentities") List<GetKubernetesClusterKubeletIdentity> kubeletIdentities,
        @CustomType.Parameter("kubernetesVersion") String kubernetesVersion,
        @CustomType.Parameter("linuxProfiles") List<GetKubernetesClusterLinuxProfile> linuxProfiles,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("microsoftDefenders") List<GetKubernetesClusterMicrosoftDefender> microsoftDefenders,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("networkProfiles") List<GetKubernetesClusterNetworkProfile> networkProfiles,
        @CustomType.Parameter("nodeResourceGroup") String nodeResourceGroup,
        @CustomType.Parameter("oidcIssuerEnabled") Boolean oidcIssuerEnabled,
        @CustomType.Parameter("oidcIssuerUrl") String oidcIssuerUrl,
        @CustomType.Parameter("omsAgents") List<GetKubernetesClusterOmsAgent> omsAgents,
        @CustomType.Parameter("openServiceMeshEnabled") Boolean openServiceMeshEnabled,
        @CustomType.Parameter("privateClusterEnabled") Boolean privateClusterEnabled,
        @CustomType.Parameter("privateFqdn") String privateFqdn,
        @CustomType.Parameter("resourceGroupName") String resourceGroupName,
        @CustomType.Parameter("roleBasedAccessControlEnabled") Boolean roleBasedAccessControlEnabled,
        @CustomType.Parameter("servicePrincipals") List<GetKubernetesClusterServicePrincipal> servicePrincipals,
        @CustomType.Parameter("tags") Map<String,String> tags,
        @CustomType.Parameter("windowsProfiles") List<GetKubernetesClusterWindowsProfile> windowsProfiles) {
        this.aciConnectorLinuxes = aciConnectorLinuxes;
        this.agentPoolProfiles = agentPoolProfiles;
        this.apiServerAuthorizedIpRanges = apiServerAuthorizedIpRanges;
        this.azureActiveDirectoryRoleBasedAccessControls = azureActiveDirectoryRoleBasedAccessControls;
        this.azurePolicyEnabled = azurePolicyEnabled;
        this.diskEncryptionSetId = diskEncryptionSetId;
        this.dnsPrefix = dnsPrefix;
        this.fqdn = fqdn;
        this.httpApplicationRoutingEnabled = httpApplicationRoutingEnabled;
        this.httpApplicationRoutingZoneName = httpApplicationRoutingZoneName;
        this.id = id;
        this.identities = identities;
        this.ingressApplicationGateways = ingressApplicationGateways;
        this.keyVaultSecretsProviders = keyVaultSecretsProviders;
        this.kubeAdminConfigRaw = kubeAdminConfigRaw;
        this.kubeAdminConfigs = kubeAdminConfigs;
        this.kubeConfigRaw = kubeConfigRaw;
        this.kubeConfigs = kubeConfigs;
        this.kubeletIdentities = kubeletIdentities;
        this.kubernetesVersion = kubernetesVersion;
        this.linuxProfiles = linuxProfiles;
        this.location = location;
        this.microsoftDefenders = microsoftDefenders;
        this.name = name;
        this.networkProfiles = networkProfiles;
        this.nodeResourceGroup = nodeResourceGroup;
        this.oidcIssuerEnabled = oidcIssuerEnabled;
        this.oidcIssuerUrl = oidcIssuerUrl;
        this.omsAgents = omsAgents;
        this.openServiceMeshEnabled = openServiceMeshEnabled;
        this.privateClusterEnabled = privateClusterEnabled;
        this.privateFqdn = privateFqdn;
        this.resourceGroupName = resourceGroupName;
        this.roleBasedAccessControlEnabled = roleBasedAccessControlEnabled;
        this.servicePrincipals = servicePrincipals;
        this.tags = tags;
        this.windowsProfiles = windowsProfiles;
    }

    /**
     * @return An `aci_connector_linux` block as documented below.
     * 
     */
    public List<GetKubernetesClusterAciConnectorLinux> aciConnectorLinuxes() {
        return this.aciConnectorLinuxes;
    }
    /**
     * @return An `agent_pool_profile` block as documented below.
     * 
     */
    public List<GetKubernetesClusterAgentPoolProfile> agentPoolProfiles() {
        return this.agentPoolProfiles;
    }
    /**
     * @return The IP ranges to whitelist for incoming traffic to the primaries.
     * 
     */
    public List<String> apiServerAuthorizedIpRanges() {
        return this.apiServerAuthorizedIpRanges;
    }
    /**
     * @return An `azure_active_directory_role_based_access_control` block as documented below.
     * 
     */
    public List<GetKubernetesClusterAzureActiveDirectoryRoleBasedAccessControl> azureActiveDirectoryRoleBasedAccessControls() {
        return this.azureActiveDirectoryRoleBasedAccessControls;
    }
    /**
     * @return Is Azure Policy enabled on this managed Kubernetes Cluster?
     * 
     */
    public Boolean azurePolicyEnabled() {
        return this.azurePolicyEnabled;
    }
    /**
     * @return The ID of the Disk Encryption Set used for the Nodes and Volumes.
     * 
     */
    public String diskEncryptionSetId() {
        return this.diskEncryptionSetId;
    }
    /**
     * @return The DNS Prefix of the managed Kubernetes cluster.
     * 
     */
    public String dnsPrefix() {
        return this.dnsPrefix;
    }
    /**
     * @return The FQDN of the Azure Kubernetes Managed Cluster.
     * 
     */
    public String fqdn() {
        return this.fqdn;
    }
    /**
     * @return Is HTTP Application Routing enabled for this managed Kubernetes Cluster?
     * 
     */
    public Boolean httpApplicationRoutingEnabled() {
        return this.httpApplicationRoutingEnabled;
    }
    /**
     * @return The Zone Name of the HTTP Application Routing.
     * 
     */
    public String httpApplicationRoutingZoneName() {
        return this.httpApplicationRoutingZoneName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return An `identity` block as documented below.
     * 
     */
    public List<GetKubernetesClusterIdentity> identities() {
        return this.identities;
    }
    /**
     * @return An `ingress_application_gateway` block as documented below.
     * 
     */
    public List<GetKubernetesClusterIngressApplicationGateway> ingressApplicationGateways() {
        return this.ingressApplicationGateways;
    }
    /**
     * @return A `key_vault_secrets_provider` block as documented below.
     * 
     */
    public List<GetKubernetesClusterKeyVaultSecretsProvider> keyVaultSecretsProviders() {
        return this.keyVaultSecretsProviders;
    }
    /**
     * @return Raw Kubernetes config for the admin account to be used by [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/) and other compatible tools. This is only available when Role Based Access Control with Azure Active Directory is enabled and local accounts are not disabled.
     * 
     */
    public String kubeAdminConfigRaw() {
        return this.kubeAdminConfigRaw;
    }
    /**
     * @return A `kube_admin_config` block as defined below. This is only available when Role Based Access Control with Azure Active Directory is enabled and local accounts are not disabled.
     * 
     */
    public List<GetKubernetesClusterKubeAdminConfig> kubeAdminConfigs() {
        return this.kubeAdminConfigs;
    }
    /**
     * @return Base64 encoded Kubernetes configuration.
     * 
     */
    public String kubeConfigRaw() {
        return this.kubeConfigRaw;
    }
    /**
     * @return A `kube_config` block as defined below.
     * 
     */
    public List<GetKubernetesClusterKubeConfig> kubeConfigs() {
        return this.kubeConfigs;
    }
    /**
     * @return A `kubelet_identity` block as documented below.
     * 
     */
    public List<GetKubernetesClusterKubeletIdentity> kubeletIdentities() {
        return this.kubeletIdentities;
    }
    /**
     * @return The version of Kubernetes used on the managed Kubernetes Cluster.
     * 
     */
    public String kubernetesVersion() {
        return this.kubernetesVersion;
    }
    /**
     * @return A `linux_profile` block as documented below.
     * 
     */
    public List<GetKubernetesClusterLinuxProfile> linuxProfiles() {
        return this.linuxProfiles;
    }
    /**
     * @return The Azure Region in which the managed Kubernetes Cluster exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return A `microsoft_defender` block as defined below.
     * 
     */
    public List<GetKubernetesClusterMicrosoftDefender> microsoftDefenders() {
        return this.microsoftDefenders;
    }
    /**
     * @return The name assigned to this pool of agents.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A `network_profile` block as documented below.
     * 
     */
    public List<GetKubernetesClusterNetworkProfile> networkProfiles() {
        return this.networkProfiles;
    }
    /**
     * @return Auto-generated Resource Group containing AKS Cluster resources.
     * 
     */
    public String nodeResourceGroup() {
        return this.nodeResourceGroup;
    }
    /**
     * @return Whether or not the OIDC feature is enabled or disabled.
     * 
     */
    public Boolean oidcIssuerEnabled() {
        return this.oidcIssuerEnabled;
    }
    /**
     * @return The OIDC issuer URL that is associated with the cluster.
     * 
     */
    public String oidcIssuerUrl() {
        return this.oidcIssuerUrl;
    }
    /**
     * @return An `oms_agent` block as documented below.
     * 
     */
    public List<GetKubernetesClusterOmsAgent> omsAgents() {
        return this.omsAgents;
    }
    /**
     * @return Is Open Service Mesh enabled for this managed Kubernetes Cluster?
     * 
     */
    public Boolean openServiceMeshEnabled() {
        return this.openServiceMeshEnabled;
    }
    /**
     * @return If the cluster has the Kubernetes API only exposed on internal IP addresses.
     * 
     */
    public Boolean privateClusterEnabled() {
        return this.privateClusterEnabled;
    }
    /**
     * @return The FQDN of this Kubernetes Cluster when private link has been enabled. This name is only resolvable inside the Virtual Network where the Azure Kubernetes Service is located
     * 
     */
    public String privateFqdn() {
        return this.privateFqdn;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return Is Role Based Access Control enabled for this managed Kubernetes Cluster.
     * 
     */
    public Boolean roleBasedAccessControlEnabled() {
        return this.roleBasedAccessControlEnabled;
    }
    /**
     * @return A `service_principal` block as documented below.
     * 
     */
    public List<GetKubernetesClusterServicePrincipal> servicePrincipals() {
        return this.servicePrincipals;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return A `windows_profile` block as documented below.
     * 
     */
    public List<GetKubernetesClusterWindowsProfile> windowsProfiles() {
        return this.windowsProfiles;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKubernetesClusterResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetKubernetesClusterAciConnectorLinux> aciConnectorLinuxes;
        private List<GetKubernetesClusterAgentPoolProfile> agentPoolProfiles;
        private List<String> apiServerAuthorizedIpRanges;
        private List<GetKubernetesClusterAzureActiveDirectoryRoleBasedAccessControl> azureActiveDirectoryRoleBasedAccessControls;
        private Boolean azurePolicyEnabled;
        private String diskEncryptionSetId;
        private String dnsPrefix;
        private String fqdn;
        private Boolean httpApplicationRoutingEnabled;
        private String httpApplicationRoutingZoneName;
        private String id;
        private List<GetKubernetesClusterIdentity> identities;
        private List<GetKubernetesClusterIngressApplicationGateway> ingressApplicationGateways;
        private List<GetKubernetesClusterKeyVaultSecretsProvider> keyVaultSecretsProviders;
        private String kubeAdminConfigRaw;
        private List<GetKubernetesClusterKubeAdminConfig> kubeAdminConfigs;
        private String kubeConfigRaw;
        private List<GetKubernetesClusterKubeConfig> kubeConfigs;
        private List<GetKubernetesClusterKubeletIdentity> kubeletIdentities;
        private String kubernetesVersion;
        private List<GetKubernetesClusterLinuxProfile> linuxProfiles;
        private String location;
        private List<GetKubernetesClusterMicrosoftDefender> microsoftDefenders;
        private String name;
        private List<GetKubernetesClusterNetworkProfile> networkProfiles;
        private String nodeResourceGroup;
        private Boolean oidcIssuerEnabled;
        private String oidcIssuerUrl;
        private List<GetKubernetesClusterOmsAgent> omsAgents;
        private Boolean openServiceMeshEnabled;
        private Boolean privateClusterEnabled;
        private String privateFqdn;
        private String resourceGroupName;
        private Boolean roleBasedAccessControlEnabled;
        private List<GetKubernetesClusterServicePrincipal> servicePrincipals;
        private Map<String,String> tags;
        private List<GetKubernetesClusterWindowsProfile> windowsProfiles;

        public Builder() {
    	      // Empty
        }

        public Builder(GetKubernetesClusterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aciConnectorLinuxes = defaults.aciConnectorLinuxes;
    	      this.agentPoolProfiles = defaults.agentPoolProfiles;
    	      this.apiServerAuthorizedIpRanges = defaults.apiServerAuthorizedIpRanges;
    	      this.azureActiveDirectoryRoleBasedAccessControls = defaults.azureActiveDirectoryRoleBasedAccessControls;
    	      this.azurePolicyEnabled = defaults.azurePolicyEnabled;
    	      this.diskEncryptionSetId = defaults.diskEncryptionSetId;
    	      this.dnsPrefix = defaults.dnsPrefix;
    	      this.fqdn = defaults.fqdn;
    	      this.httpApplicationRoutingEnabled = defaults.httpApplicationRoutingEnabled;
    	      this.httpApplicationRoutingZoneName = defaults.httpApplicationRoutingZoneName;
    	      this.id = defaults.id;
    	      this.identities = defaults.identities;
    	      this.ingressApplicationGateways = defaults.ingressApplicationGateways;
    	      this.keyVaultSecretsProviders = defaults.keyVaultSecretsProviders;
    	      this.kubeAdminConfigRaw = defaults.kubeAdminConfigRaw;
    	      this.kubeAdminConfigs = defaults.kubeAdminConfigs;
    	      this.kubeConfigRaw = defaults.kubeConfigRaw;
    	      this.kubeConfigs = defaults.kubeConfigs;
    	      this.kubeletIdentities = defaults.kubeletIdentities;
    	      this.kubernetesVersion = defaults.kubernetesVersion;
    	      this.linuxProfiles = defaults.linuxProfiles;
    	      this.location = defaults.location;
    	      this.microsoftDefenders = defaults.microsoftDefenders;
    	      this.name = defaults.name;
    	      this.networkProfiles = defaults.networkProfiles;
    	      this.nodeResourceGroup = defaults.nodeResourceGroup;
    	      this.oidcIssuerEnabled = defaults.oidcIssuerEnabled;
    	      this.oidcIssuerUrl = defaults.oidcIssuerUrl;
    	      this.omsAgents = defaults.omsAgents;
    	      this.openServiceMeshEnabled = defaults.openServiceMeshEnabled;
    	      this.privateClusterEnabled = defaults.privateClusterEnabled;
    	      this.privateFqdn = defaults.privateFqdn;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.roleBasedAccessControlEnabled = defaults.roleBasedAccessControlEnabled;
    	      this.servicePrincipals = defaults.servicePrincipals;
    	      this.tags = defaults.tags;
    	      this.windowsProfiles = defaults.windowsProfiles;
        }

        public Builder aciConnectorLinuxes(List<GetKubernetesClusterAciConnectorLinux> aciConnectorLinuxes) {
            this.aciConnectorLinuxes = Objects.requireNonNull(aciConnectorLinuxes);
            return this;
        }
        public Builder aciConnectorLinuxes(GetKubernetesClusterAciConnectorLinux... aciConnectorLinuxes) {
            return aciConnectorLinuxes(List.of(aciConnectorLinuxes));
        }
        public Builder agentPoolProfiles(List<GetKubernetesClusterAgentPoolProfile> agentPoolProfiles) {
            this.agentPoolProfiles = Objects.requireNonNull(agentPoolProfiles);
            return this;
        }
        public Builder agentPoolProfiles(GetKubernetesClusterAgentPoolProfile... agentPoolProfiles) {
            return agentPoolProfiles(List.of(agentPoolProfiles));
        }
        public Builder apiServerAuthorizedIpRanges(List<String> apiServerAuthorizedIpRanges) {
            this.apiServerAuthorizedIpRanges = Objects.requireNonNull(apiServerAuthorizedIpRanges);
            return this;
        }
        public Builder apiServerAuthorizedIpRanges(String... apiServerAuthorizedIpRanges) {
            return apiServerAuthorizedIpRanges(List.of(apiServerAuthorizedIpRanges));
        }
        public Builder azureActiveDirectoryRoleBasedAccessControls(List<GetKubernetesClusterAzureActiveDirectoryRoleBasedAccessControl> azureActiveDirectoryRoleBasedAccessControls) {
            this.azureActiveDirectoryRoleBasedAccessControls = Objects.requireNonNull(azureActiveDirectoryRoleBasedAccessControls);
            return this;
        }
        public Builder azureActiveDirectoryRoleBasedAccessControls(GetKubernetesClusterAzureActiveDirectoryRoleBasedAccessControl... azureActiveDirectoryRoleBasedAccessControls) {
            return azureActiveDirectoryRoleBasedAccessControls(List.of(azureActiveDirectoryRoleBasedAccessControls));
        }
        public Builder azurePolicyEnabled(Boolean azurePolicyEnabled) {
            this.azurePolicyEnabled = Objects.requireNonNull(azurePolicyEnabled);
            return this;
        }
        public Builder diskEncryptionSetId(String diskEncryptionSetId) {
            this.diskEncryptionSetId = Objects.requireNonNull(diskEncryptionSetId);
            return this;
        }
        public Builder dnsPrefix(String dnsPrefix) {
            this.dnsPrefix = Objects.requireNonNull(dnsPrefix);
            return this;
        }
        public Builder fqdn(String fqdn) {
            this.fqdn = Objects.requireNonNull(fqdn);
            return this;
        }
        public Builder httpApplicationRoutingEnabled(Boolean httpApplicationRoutingEnabled) {
            this.httpApplicationRoutingEnabled = Objects.requireNonNull(httpApplicationRoutingEnabled);
            return this;
        }
        public Builder httpApplicationRoutingZoneName(String httpApplicationRoutingZoneName) {
            this.httpApplicationRoutingZoneName = Objects.requireNonNull(httpApplicationRoutingZoneName);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder identities(List<GetKubernetesClusterIdentity> identities) {
            this.identities = Objects.requireNonNull(identities);
            return this;
        }
        public Builder identities(GetKubernetesClusterIdentity... identities) {
            return identities(List.of(identities));
        }
        public Builder ingressApplicationGateways(List<GetKubernetesClusterIngressApplicationGateway> ingressApplicationGateways) {
            this.ingressApplicationGateways = Objects.requireNonNull(ingressApplicationGateways);
            return this;
        }
        public Builder ingressApplicationGateways(GetKubernetesClusterIngressApplicationGateway... ingressApplicationGateways) {
            return ingressApplicationGateways(List.of(ingressApplicationGateways));
        }
        public Builder keyVaultSecretsProviders(List<GetKubernetesClusterKeyVaultSecretsProvider> keyVaultSecretsProviders) {
            this.keyVaultSecretsProviders = Objects.requireNonNull(keyVaultSecretsProviders);
            return this;
        }
        public Builder keyVaultSecretsProviders(GetKubernetesClusterKeyVaultSecretsProvider... keyVaultSecretsProviders) {
            return keyVaultSecretsProviders(List.of(keyVaultSecretsProviders));
        }
        public Builder kubeAdminConfigRaw(String kubeAdminConfigRaw) {
            this.kubeAdminConfigRaw = Objects.requireNonNull(kubeAdminConfigRaw);
            return this;
        }
        public Builder kubeAdminConfigs(List<GetKubernetesClusterKubeAdminConfig> kubeAdminConfigs) {
            this.kubeAdminConfigs = Objects.requireNonNull(kubeAdminConfigs);
            return this;
        }
        public Builder kubeAdminConfigs(GetKubernetesClusterKubeAdminConfig... kubeAdminConfigs) {
            return kubeAdminConfigs(List.of(kubeAdminConfigs));
        }
        public Builder kubeConfigRaw(String kubeConfigRaw) {
            this.kubeConfigRaw = Objects.requireNonNull(kubeConfigRaw);
            return this;
        }
        public Builder kubeConfigs(List<GetKubernetesClusterKubeConfig> kubeConfigs) {
            this.kubeConfigs = Objects.requireNonNull(kubeConfigs);
            return this;
        }
        public Builder kubeConfigs(GetKubernetesClusterKubeConfig... kubeConfigs) {
            return kubeConfigs(List.of(kubeConfigs));
        }
        public Builder kubeletIdentities(List<GetKubernetesClusterKubeletIdentity> kubeletIdentities) {
            this.kubeletIdentities = Objects.requireNonNull(kubeletIdentities);
            return this;
        }
        public Builder kubeletIdentities(GetKubernetesClusterKubeletIdentity... kubeletIdentities) {
            return kubeletIdentities(List.of(kubeletIdentities));
        }
        public Builder kubernetesVersion(String kubernetesVersion) {
            this.kubernetesVersion = Objects.requireNonNull(kubernetesVersion);
            return this;
        }
        public Builder linuxProfiles(List<GetKubernetesClusterLinuxProfile> linuxProfiles) {
            this.linuxProfiles = Objects.requireNonNull(linuxProfiles);
            return this;
        }
        public Builder linuxProfiles(GetKubernetesClusterLinuxProfile... linuxProfiles) {
            return linuxProfiles(List.of(linuxProfiles));
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder microsoftDefenders(List<GetKubernetesClusterMicrosoftDefender> microsoftDefenders) {
            this.microsoftDefenders = Objects.requireNonNull(microsoftDefenders);
            return this;
        }
        public Builder microsoftDefenders(GetKubernetesClusterMicrosoftDefender... microsoftDefenders) {
            return microsoftDefenders(List.of(microsoftDefenders));
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder networkProfiles(List<GetKubernetesClusterNetworkProfile> networkProfiles) {
            this.networkProfiles = Objects.requireNonNull(networkProfiles);
            return this;
        }
        public Builder networkProfiles(GetKubernetesClusterNetworkProfile... networkProfiles) {
            return networkProfiles(List.of(networkProfiles));
        }
        public Builder nodeResourceGroup(String nodeResourceGroup) {
            this.nodeResourceGroup = Objects.requireNonNull(nodeResourceGroup);
            return this;
        }
        public Builder oidcIssuerEnabled(Boolean oidcIssuerEnabled) {
            this.oidcIssuerEnabled = Objects.requireNonNull(oidcIssuerEnabled);
            return this;
        }
        public Builder oidcIssuerUrl(String oidcIssuerUrl) {
            this.oidcIssuerUrl = Objects.requireNonNull(oidcIssuerUrl);
            return this;
        }
        public Builder omsAgents(List<GetKubernetesClusterOmsAgent> omsAgents) {
            this.omsAgents = Objects.requireNonNull(omsAgents);
            return this;
        }
        public Builder omsAgents(GetKubernetesClusterOmsAgent... omsAgents) {
            return omsAgents(List.of(omsAgents));
        }
        public Builder openServiceMeshEnabled(Boolean openServiceMeshEnabled) {
            this.openServiceMeshEnabled = Objects.requireNonNull(openServiceMeshEnabled);
            return this;
        }
        public Builder privateClusterEnabled(Boolean privateClusterEnabled) {
            this.privateClusterEnabled = Objects.requireNonNull(privateClusterEnabled);
            return this;
        }
        public Builder privateFqdn(String privateFqdn) {
            this.privateFqdn = Objects.requireNonNull(privateFqdn);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder roleBasedAccessControlEnabled(Boolean roleBasedAccessControlEnabled) {
            this.roleBasedAccessControlEnabled = Objects.requireNonNull(roleBasedAccessControlEnabled);
            return this;
        }
        public Builder servicePrincipals(List<GetKubernetesClusterServicePrincipal> servicePrincipals) {
            this.servicePrincipals = Objects.requireNonNull(servicePrincipals);
            return this;
        }
        public Builder servicePrincipals(GetKubernetesClusterServicePrincipal... servicePrincipals) {
            return servicePrincipals(List.of(servicePrincipals));
        }
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder windowsProfiles(List<GetKubernetesClusterWindowsProfile> windowsProfiles) {
            this.windowsProfiles = Objects.requireNonNull(windowsProfiles);
            return this;
        }
        public Builder windowsProfiles(GetKubernetesClusterWindowsProfile... windowsProfiles) {
            return windowsProfiles(List.of(windowsProfiles));
        }        public GetKubernetesClusterResult build() {
            return new GetKubernetesClusterResult(aciConnectorLinuxes, agentPoolProfiles, apiServerAuthorizedIpRanges, azureActiveDirectoryRoleBasedAccessControls, azurePolicyEnabled, diskEncryptionSetId, dnsPrefix, fqdn, httpApplicationRoutingEnabled, httpApplicationRoutingZoneName, id, identities, ingressApplicationGateways, keyVaultSecretsProviders, kubeAdminConfigRaw, kubeAdminConfigs, kubeConfigRaw, kubeConfigs, kubeletIdentities, kubernetesVersion, linuxProfiles, location, microsoftDefenders, name, networkProfiles, nodeResourceGroup, oidcIssuerEnabled, oidcIssuerUrl, omsAgents, openServiceMeshEnabled, privateClusterEnabled, privateFqdn, resourceGroupName, roleBasedAccessControlEnabled, servicePrincipals, tags, windowsProfiles);
        }
    }
}
