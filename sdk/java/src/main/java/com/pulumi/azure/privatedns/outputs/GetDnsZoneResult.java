// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.privatedns.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetDnsZoneResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Maximum number of recordsets that can be created in this Private Zone.
     * 
     */
    private Integer maxNumberOfRecordSets;
    /**
     * @return Maximum number of Virtual Networks that can be linked to this Private Zone.
     * 
     */
    private Integer maxNumberOfVirtualNetworkLinks;
    /**
     * @return Maximum number of Virtual Networks that can be linked to this Private Zone with registration enabled.
     * 
     */
    private Integer maxNumberOfVirtualNetworkLinksWithRegistration;
    private String name;
    /**
     * @return The number of recordsets currently in the zone.
     * 
     */
    private Integer numberOfRecordSets;
    private String resourceGroupName;
    /**
     * @return A mapping of tags for the zone.
     * 
     */
    private @Nullable Map<String,String> tags;

    private GetDnsZoneResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Maximum number of recordsets that can be created in this Private Zone.
     * 
     */
    public Integer maxNumberOfRecordSets() {
        return this.maxNumberOfRecordSets;
    }
    /**
     * @return Maximum number of Virtual Networks that can be linked to this Private Zone.
     * 
     */
    public Integer maxNumberOfVirtualNetworkLinks() {
        return this.maxNumberOfVirtualNetworkLinks;
    }
    /**
     * @return Maximum number of Virtual Networks that can be linked to this Private Zone with registration enabled.
     * 
     */
    public Integer maxNumberOfVirtualNetworkLinksWithRegistration() {
        return this.maxNumberOfVirtualNetworkLinksWithRegistration;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The number of recordsets currently in the zone.
     * 
     */
    public Integer numberOfRecordSets() {
        return this.numberOfRecordSets;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return A mapping of tags for the zone.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDnsZoneResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private Integer maxNumberOfRecordSets;
        private Integer maxNumberOfVirtualNetworkLinks;
        private Integer maxNumberOfVirtualNetworkLinksWithRegistration;
        private String name;
        private Integer numberOfRecordSets;
        private String resourceGroupName;
        private @Nullable Map<String,String> tags;
        public Builder() {}
        public Builder(GetDnsZoneResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.maxNumberOfRecordSets = defaults.maxNumberOfRecordSets;
    	      this.maxNumberOfVirtualNetworkLinks = defaults.maxNumberOfVirtualNetworkLinks;
    	      this.maxNumberOfVirtualNetworkLinksWithRegistration = defaults.maxNumberOfVirtualNetworkLinksWithRegistration;
    	      this.name = defaults.name;
    	      this.numberOfRecordSets = defaults.numberOfRecordSets;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDnsZoneResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder maxNumberOfRecordSets(Integer maxNumberOfRecordSets) {
            if (maxNumberOfRecordSets == null) {
              throw new MissingRequiredPropertyException("GetDnsZoneResult", "maxNumberOfRecordSets");
            }
            this.maxNumberOfRecordSets = maxNumberOfRecordSets;
            return this;
        }
        @CustomType.Setter
        public Builder maxNumberOfVirtualNetworkLinks(Integer maxNumberOfVirtualNetworkLinks) {
            if (maxNumberOfVirtualNetworkLinks == null) {
              throw new MissingRequiredPropertyException("GetDnsZoneResult", "maxNumberOfVirtualNetworkLinks");
            }
            this.maxNumberOfVirtualNetworkLinks = maxNumberOfVirtualNetworkLinks;
            return this;
        }
        @CustomType.Setter
        public Builder maxNumberOfVirtualNetworkLinksWithRegistration(Integer maxNumberOfVirtualNetworkLinksWithRegistration) {
            if (maxNumberOfVirtualNetworkLinksWithRegistration == null) {
              throw new MissingRequiredPropertyException("GetDnsZoneResult", "maxNumberOfVirtualNetworkLinksWithRegistration");
            }
            this.maxNumberOfVirtualNetworkLinksWithRegistration = maxNumberOfVirtualNetworkLinksWithRegistration;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDnsZoneResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder numberOfRecordSets(Integer numberOfRecordSets) {
            if (numberOfRecordSets == null) {
              throw new MissingRequiredPropertyException("GetDnsZoneResult", "numberOfRecordSets");
            }
            this.numberOfRecordSets = numberOfRecordSets;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetDnsZoneResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {

            this.tags = tags;
            return this;
        }
        public GetDnsZoneResult build() {
            final var _resultValue = new GetDnsZoneResult();
            _resultValue.id = id;
            _resultValue.maxNumberOfRecordSets = maxNumberOfRecordSets;
            _resultValue.maxNumberOfVirtualNetworkLinks = maxNumberOfVirtualNetworkLinks;
            _resultValue.maxNumberOfVirtualNetworkLinksWithRegistration = maxNumberOfVirtualNetworkLinksWithRegistration;
            _resultValue.name = name;
            _resultValue.numberOfRecordSets = numberOfRecordSets;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
