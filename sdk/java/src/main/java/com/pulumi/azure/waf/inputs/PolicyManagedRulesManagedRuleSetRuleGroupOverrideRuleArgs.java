// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.waf.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyManagedRulesManagedRuleSetRuleGroupOverrideRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyManagedRulesManagedRuleSetRuleGroupOverrideRuleArgs Empty = new PolicyManagedRulesManagedRuleSetRuleGroupOverrideRuleArgs();

    /**
     * Describes the override action to be applied when rule matches. Possible values are `Allow`, `AnomalyScoring`, `Block` and `Log`.
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    /**
     * @return Describes the override action to be applied when rule matches. Possible values are `Allow`, `AnomalyScoring`, `Block` and `Log`.
     * 
     */
    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * Describes if the managed rule is in enabled state or disabled state.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Describes if the managed rule is in enabled state or disabled state.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Identifier for the managed rule.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return Identifier for the managed rule.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    private PolicyManagedRulesManagedRuleSetRuleGroupOverrideRuleArgs() {}

    private PolicyManagedRulesManagedRuleSetRuleGroupOverrideRuleArgs(PolicyManagedRulesManagedRuleSetRuleGroupOverrideRuleArgs $) {
        this.action = $.action;
        this.enabled = $.enabled;
        this.id = $.id;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyManagedRulesManagedRuleSetRuleGroupOverrideRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyManagedRulesManagedRuleSetRuleGroupOverrideRuleArgs $;

        public Builder() {
            $ = new PolicyManagedRulesManagedRuleSetRuleGroupOverrideRuleArgs();
        }

        public Builder(PolicyManagedRulesManagedRuleSetRuleGroupOverrideRuleArgs defaults) {
            $ = new PolicyManagedRulesManagedRuleSetRuleGroupOverrideRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Describes the override action to be applied when rule matches. Possible values are `Allow`, `AnomalyScoring`, `Block` and `Log`.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Describes the override action to be applied when rule matches. Possible values are `Allow`, `AnomalyScoring`, `Block` and `Log`.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param enabled Describes if the managed rule is in enabled state or disabled state.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Describes if the managed rule is in enabled state or disabled state.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param id Identifier for the managed rule.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Identifier for the managed rule.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        public PolicyManagedRulesManagedRuleSetRuleGroupOverrideRuleArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("PolicyManagedRulesManagedRuleSetRuleGroupOverrideRuleArgs", "id");
            }
            return $;
        }
    }

}
