// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.frontdoor.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class FirewallPolicyManagedRuleOverrideExclusionArgs extends com.pulumi.resources.ResourceArgs {

    public static final FirewallPolicyManagedRuleOverrideExclusionArgs Empty = new FirewallPolicyManagedRuleOverrideExclusionArgs();

    /**
     * The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
     * 
     */
    @Import(name="matchVariable", required=true)
    private Output<String> matchVariable;

    /**
     * @return The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
     * 
     */
    public Output<String> matchVariable() {
        return this.matchVariable;
    }

    /**
     * Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
     * 
     */
    @Import(name="operator", required=true)
    private Output<String> operator;

    /**
     * @return Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
     * 
     */
    public Output<String> operator() {
        return this.operator;
    }

    /**
     * Selector for the value in the `match_variable` attribute this exclusion applies to.
     * 
     */
    @Import(name="selector", required=true)
    private Output<String> selector;

    /**
     * @return Selector for the value in the `match_variable` attribute this exclusion applies to.
     * 
     */
    public Output<String> selector() {
        return this.selector;
    }

    private FirewallPolicyManagedRuleOverrideExclusionArgs() {}

    private FirewallPolicyManagedRuleOverrideExclusionArgs(FirewallPolicyManagedRuleOverrideExclusionArgs $) {
        this.matchVariable = $.matchVariable;
        this.operator = $.operator;
        this.selector = $.selector;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FirewallPolicyManagedRuleOverrideExclusionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FirewallPolicyManagedRuleOverrideExclusionArgs $;

        public Builder() {
            $ = new FirewallPolicyManagedRuleOverrideExclusionArgs();
        }

        public Builder(FirewallPolicyManagedRuleOverrideExclusionArgs defaults) {
            $ = new FirewallPolicyManagedRuleOverrideExclusionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param matchVariable The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
         * 
         * @return builder
         * 
         */
        public Builder matchVariable(Output<String> matchVariable) {
            $.matchVariable = matchVariable;
            return this;
        }

        /**
         * @param matchVariable The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
         * 
         * @return builder
         * 
         */
        public Builder matchVariable(String matchVariable) {
            return matchVariable(Output.of(matchVariable));
        }

        /**
         * @param operator Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
         * 
         * @return builder
         * 
         */
        public Builder operator(Output<String> operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param operator Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
         * 
         * @return builder
         * 
         */
        public Builder operator(String operator) {
            return operator(Output.of(operator));
        }

        /**
         * @param selector Selector for the value in the `match_variable` attribute this exclusion applies to.
         * 
         * @return builder
         * 
         */
        public Builder selector(Output<String> selector) {
            $.selector = selector;
            return this;
        }

        /**
         * @param selector Selector for the value in the `match_variable` attribute this exclusion applies to.
         * 
         * @return builder
         * 
         */
        public Builder selector(String selector) {
            return selector(Output.of(selector));
        }

        public FirewallPolicyManagedRuleOverrideExclusionArgs build() {
            if ($.matchVariable == null) {
                throw new MissingRequiredPropertyException("FirewallPolicyManagedRuleOverrideExclusionArgs", "matchVariable");
            }
            if ($.operator == null) {
                throw new MissingRequiredPropertyException("FirewallPolicyManagedRuleOverrideExclusionArgs", "operator");
            }
            if ($.selector == null) {
                throw new MissingRequiredPropertyException("FirewallPolicyManagedRuleOverrideExclusionArgs", "selector");
            }
            return $;
        }
    }

}
