// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.storage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetStorageContainerArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetStorageContainerArgs Empty = new GetStorageContainerArgs();

    /**
     * A mapping of MetaData for this Container.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<Map<String,String>> metadata;

    /**
     * @return A mapping of MetaData for this Container.
     * 
     */
    public Optional<Output<Map<String,String>>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * The name of the Container.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the Container.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The name of the Storage Account where the Container exists.
     * 
     */
    @Import(name="storageAccountName", required=true)
    private Output<String> storageAccountName;

    /**
     * @return The name of the Storage Account where the Container exists.
     * 
     */
    public Output<String> storageAccountName() {
        return this.storageAccountName;
    }

    private GetStorageContainerArgs() {}

    private GetStorageContainerArgs(GetStorageContainerArgs $) {
        this.metadata = $.metadata;
        this.name = $.name;
        this.storageAccountName = $.storageAccountName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetStorageContainerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetStorageContainerArgs $;

        public Builder() {
            $ = new GetStorageContainerArgs();
        }

        public Builder(GetStorageContainerArgs defaults) {
            $ = new GetStorageContainerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param metadata A mapping of MetaData for this Container.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata A mapping of MetaData for this Container.
         * 
         * @return builder
         * 
         */
        public Builder metadata(Map<String,String> metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param name The name of the Container.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Container.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param storageAccountName The name of the Storage Account where the Container exists.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountName(Output<String> storageAccountName) {
            $.storageAccountName = storageAccountName;
            return this;
        }

        /**
         * @param storageAccountName The name of the Storage Account where the Container exists.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountName(String storageAccountName) {
            return storageAccountName(Output.of(storageAccountName));
        }

        public GetStorageContainerArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetStorageContainerArgs", "name");
            }
            if ($.storageAccountName == null) {
                throw new MissingRequiredPropertyException("GetStorageContainerArgs", "storageAccountName");
            }
            return $;
        }
    }

}
