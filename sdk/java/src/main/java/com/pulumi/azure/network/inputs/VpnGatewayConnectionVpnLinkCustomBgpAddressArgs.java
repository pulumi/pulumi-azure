// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class VpnGatewayConnectionVpnLinkCustomBgpAddressArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpnGatewayConnectionVpnLinkCustomBgpAddressArgs Empty = new VpnGatewayConnectionVpnLinkCustomBgpAddressArgs();

    /**
     * The custom bgp ip address which belongs to the IP Configuration.
     * 
     */
    @Import(name="ipAddress", required=true)
    private Output<String> ipAddress;

    /**
     * @return The custom bgp ip address which belongs to the IP Configuration.
     * 
     */
    public Output<String> ipAddress() {
        return this.ipAddress;
    }

    /**
     * The ID of the IP Configuration which belongs to the VPN Gateway.
     * 
     */
    @Import(name="ipConfigurationId", required=true)
    private Output<String> ipConfigurationId;

    /**
     * @return The ID of the IP Configuration which belongs to the VPN Gateway.
     * 
     */
    public Output<String> ipConfigurationId() {
        return this.ipConfigurationId;
    }

    private VpnGatewayConnectionVpnLinkCustomBgpAddressArgs() {}

    private VpnGatewayConnectionVpnLinkCustomBgpAddressArgs(VpnGatewayConnectionVpnLinkCustomBgpAddressArgs $) {
        this.ipAddress = $.ipAddress;
        this.ipConfigurationId = $.ipConfigurationId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpnGatewayConnectionVpnLinkCustomBgpAddressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpnGatewayConnectionVpnLinkCustomBgpAddressArgs $;

        public Builder() {
            $ = new VpnGatewayConnectionVpnLinkCustomBgpAddressArgs();
        }

        public Builder(VpnGatewayConnectionVpnLinkCustomBgpAddressArgs defaults) {
            $ = new VpnGatewayConnectionVpnLinkCustomBgpAddressArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipAddress The custom bgp ip address which belongs to the IP Configuration.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress The custom bgp ip address which belongs to the IP Configuration.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param ipConfigurationId The ID of the IP Configuration which belongs to the VPN Gateway.
         * 
         * @return builder
         * 
         */
        public Builder ipConfigurationId(Output<String> ipConfigurationId) {
            $.ipConfigurationId = ipConfigurationId;
            return this;
        }

        /**
         * @param ipConfigurationId The ID of the IP Configuration which belongs to the VPN Gateway.
         * 
         * @return builder
         * 
         */
        public Builder ipConfigurationId(String ipConfigurationId) {
            return ipConfigurationId(Output.of(ipConfigurationId));
        }

        public VpnGatewayConnectionVpnLinkCustomBgpAddressArgs build() {
            if ($.ipAddress == null) {
                throw new MissingRequiredPropertyException("VpnGatewayConnectionVpnLinkCustomBgpAddressArgs", "ipAddress");
            }
            if ($.ipConfigurationId == null) {
                throw new MissingRequiredPropertyException("VpnGatewayConnectionVpnLinkCustomBgpAddressArgs", "ipConfigurationId");
            }
            return $;
        }
    }

}
