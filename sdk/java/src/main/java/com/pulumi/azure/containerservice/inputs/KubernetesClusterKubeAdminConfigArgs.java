// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KubernetesClusterKubeAdminConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final KubernetesClusterKubeAdminConfigArgs Empty = new KubernetesClusterKubeAdminConfigArgs();

    /**
     * Base64 encoded public certificate used by clients to authenticate to the Kubernetes cluster.
     * 
     */
    @Import(name="clientCertificate")
    private @Nullable Output<String> clientCertificate;

    /**
     * @return Base64 encoded public certificate used by clients to authenticate to the Kubernetes cluster.
     * 
     */
    public Optional<Output<String>> clientCertificate() {
        return Optional.ofNullable(this.clientCertificate);
    }

    /**
     * Base64 encoded private key used by clients to authenticate to the Kubernetes cluster.
     * 
     */
    @Import(name="clientKey")
    private @Nullable Output<String> clientKey;

    /**
     * @return Base64 encoded private key used by clients to authenticate to the Kubernetes cluster.
     * 
     */
    public Optional<Output<String>> clientKey() {
        return Optional.ofNullable(this.clientKey);
    }

    /**
     * Base64 encoded public CA certificate used as the root of trust for the Kubernetes cluster.
     * 
     */
    @Import(name="clusterCaCertificate")
    private @Nullable Output<String> clusterCaCertificate;

    /**
     * @return Base64 encoded public CA certificate used as the root of trust for the Kubernetes cluster.
     * 
     */
    public Optional<Output<String>> clusterCaCertificate() {
        return Optional.ofNullable(this.clusterCaCertificate);
    }

    /**
     * The Kubernetes cluster server host.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return The Kubernetes cluster server host.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * A password or token used to authenticate to the Kubernetes cluster.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return A password or token used to authenticate to the Kubernetes cluster.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * A username used to authenticate to the Kubernetes cluster.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return A username used to authenticate to the Kubernetes cluster.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private KubernetesClusterKubeAdminConfigArgs() {}

    private KubernetesClusterKubeAdminConfigArgs(KubernetesClusterKubeAdminConfigArgs $) {
        this.clientCertificate = $.clientCertificate;
        this.clientKey = $.clientKey;
        this.clusterCaCertificate = $.clusterCaCertificate;
        this.host = $.host;
        this.password = $.password;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KubernetesClusterKubeAdminConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KubernetesClusterKubeAdminConfigArgs $;

        public Builder() {
            $ = new KubernetesClusterKubeAdminConfigArgs();
        }

        public Builder(KubernetesClusterKubeAdminConfigArgs defaults) {
            $ = new KubernetesClusterKubeAdminConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientCertificate Base64 encoded public certificate used by clients to authenticate to the Kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificate(@Nullable Output<String> clientCertificate) {
            $.clientCertificate = clientCertificate;
            return this;
        }

        /**
         * @param clientCertificate Base64 encoded public certificate used by clients to authenticate to the Kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificate(String clientCertificate) {
            return clientCertificate(Output.of(clientCertificate));
        }

        /**
         * @param clientKey Base64 encoded private key used by clients to authenticate to the Kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder clientKey(@Nullable Output<String> clientKey) {
            $.clientKey = clientKey;
            return this;
        }

        /**
         * @param clientKey Base64 encoded private key used by clients to authenticate to the Kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder clientKey(String clientKey) {
            return clientKey(Output.of(clientKey));
        }

        /**
         * @param clusterCaCertificate Base64 encoded public CA certificate used as the root of trust for the Kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterCaCertificate(@Nullable Output<String> clusterCaCertificate) {
            $.clusterCaCertificate = clusterCaCertificate;
            return this;
        }

        /**
         * @param clusterCaCertificate Base64 encoded public CA certificate used as the root of trust for the Kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterCaCertificate(String clusterCaCertificate) {
            return clusterCaCertificate(Output.of(clusterCaCertificate));
        }

        /**
         * @param host The Kubernetes cluster server host.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The Kubernetes cluster server host.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param password A password or token used to authenticate to the Kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password A password or token used to authenticate to the Kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param username A username used to authenticate to the Kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username A username used to authenticate to the Kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public KubernetesClusterKubeAdminConfigArgs build() {
            return $;
        }
    }

}
