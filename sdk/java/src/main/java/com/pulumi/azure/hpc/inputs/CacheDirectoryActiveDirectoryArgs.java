// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.hpc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CacheDirectoryActiveDirectoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final CacheDirectoryActiveDirectoryArgs Empty = new CacheDirectoryActiveDirectoryArgs();

    /**
     * The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server.
     * 
     */
    @Import(name="cacheNetbiosName", required=true)
    private Output<String> cacheNetbiosName;

    /**
     * @return The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server.
     * 
     */
    public Output<String> cacheNetbiosName() {
        return this.cacheNetbiosName;
    }

    /**
     * The primary DNS IP address used to resolve the Active Directory domain controller&#39;s FQDN.
     * 
     */
    @Import(name="dnsPrimaryIp", required=true)
    private Output<String> dnsPrimaryIp;

    /**
     * @return The primary DNS IP address used to resolve the Active Directory domain controller&#39;s FQDN.
     * 
     */
    public Output<String> dnsPrimaryIp() {
        return this.dnsPrimaryIp;
    }

    /**
     * The secondary DNS IP address used to resolve the Active Directory domain controller&#39;s FQDN.
     * 
     */
    @Import(name="dnsSecondaryIp")
    private @Nullable Output<String> dnsSecondaryIp;

    /**
     * @return The secondary DNS IP address used to resolve the Active Directory domain controller&#39;s FQDN.
     * 
     */
    public Optional<Output<String>> dnsSecondaryIp() {
        return Optional.ofNullable(this.dnsSecondaryIp);
    }

    /**
     * The fully qualified domain name of the Active Directory domain controller.
     * 
     */
    @Import(name="domainName", required=true)
    private Output<String> domainName;

    /**
     * @return The fully qualified domain name of the Active Directory domain controller.
     * 
     */
    public Output<String> domainName() {
        return this.domainName;
    }

    /**
     * The Active Directory domain&#39;s NetBIOS name.
     * 
     */
    @Import(name="domainNetbiosName", required=true)
    private Output<String> domainNetbiosName;

    /**
     * @return The Active Directory domain&#39;s NetBIOS name.
     * 
     */
    public Output<String> domainNetbiosName() {
        return this.domainNetbiosName;
    }

    /**
     * The password of the Active Directory domain administrator.
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return The password of the Active Directory domain administrator.
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    /**
     * The username of the Active Directory domain administrator.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return The username of the Active Directory domain administrator.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private CacheDirectoryActiveDirectoryArgs() {}

    private CacheDirectoryActiveDirectoryArgs(CacheDirectoryActiveDirectoryArgs $) {
        this.cacheNetbiosName = $.cacheNetbiosName;
        this.dnsPrimaryIp = $.dnsPrimaryIp;
        this.dnsSecondaryIp = $.dnsSecondaryIp;
        this.domainName = $.domainName;
        this.domainNetbiosName = $.domainNetbiosName;
        this.password = $.password;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CacheDirectoryActiveDirectoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CacheDirectoryActiveDirectoryArgs $;

        public Builder() {
            $ = new CacheDirectoryActiveDirectoryArgs();
        }

        public Builder(CacheDirectoryActiveDirectoryArgs defaults) {
            $ = new CacheDirectoryActiveDirectoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cacheNetbiosName The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server.
         * 
         * @return builder
         * 
         */
        public Builder cacheNetbiosName(Output<String> cacheNetbiosName) {
            $.cacheNetbiosName = cacheNetbiosName;
            return this;
        }

        /**
         * @param cacheNetbiosName The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server.
         * 
         * @return builder
         * 
         */
        public Builder cacheNetbiosName(String cacheNetbiosName) {
            return cacheNetbiosName(Output.of(cacheNetbiosName));
        }

        /**
         * @param dnsPrimaryIp The primary DNS IP address used to resolve the Active Directory domain controller&#39;s FQDN.
         * 
         * @return builder
         * 
         */
        public Builder dnsPrimaryIp(Output<String> dnsPrimaryIp) {
            $.dnsPrimaryIp = dnsPrimaryIp;
            return this;
        }

        /**
         * @param dnsPrimaryIp The primary DNS IP address used to resolve the Active Directory domain controller&#39;s FQDN.
         * 
         * @return builder
         * 
         */
        public Builder dnsPrimaryIp(String dnsPrimaryIp) {
            return dnsPrimaryIp(Output.of(dnsPrimaryIp));
        }

        /**
         * @param dnsSecondaryIp The secondary DNS IP address used to resolve the Active Directory domain controller&#39;s FQDN.
         * 
         * @return builder
         * 
         */
        public Builder dnsSecondaryIp(@Nullable Output<String> dnsSecondaryIp) {
            $.dnsSecondaryIp = dnsSecondaryIp;
            return this;
        }

        /**
         * @param dnsSecondaryIp The secondary DNS IP address used to resolve the Active Directory domain controller&#39;s FQDN.
         * 
         * @return builder
         * 
         */
        public Builder dnsSecondaryIp(String dnsSecondaryIp) {
            return dnsSecondaryIp(Output.of(dnsSecondaryIp));
        }

        /**
         * @param domainName The fully qualified domain name of the Active Directory domain controller.
         * 
         * @return builder
         * 
         */
        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName The fully qualified domain name of the Active Directory domain controller.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param domainNetbiosName The Active Directory domain&#39;s NetBIOS name.
         * 
         * @return builder
         * 
         */
        public Builder domainNetbiosName(Output<String> domainNetbiosName) {
            $.domainNetbiosName = domainNetbiosName;
            return this;
        }

        /**
         * @param domainNetbiosName The Active Directory domain&#39;s NetBIOS name.
         * 
         * @return builder
         * 
         */
        public Builder domainNetbiosName(String domainNetbiosName) {
            return domainNetbiosName(Output.of(domainNetbiosName));
        }

        /**
         * @param password The password of the Active Directory domain administrator.
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password of the Active Directory domain administrator.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param username The username of the Active Directory domain administrator.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username of the Active Directory domain administrator.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public CacheDirectoryActiveDirectoryArgs build() {
            if ($.cacheNetbiosName == null) {
                throw new MissingRequiredPropertyException("CacheDirectoryActiveDirectoryArgs", "cacheNetbiosName");
            }
            if ($.dnsPrimaryIp == null) {
                throw new MissingRequiredPropertyException("CacheDirectoryActiveDirectoryArgs", "dnsPrimaryIp");
            }
            if ($.domainName == null) {
                throw new MissingRequiredPropertyException("CacheDirectoryActiveDirectoryArgs", "domainName");
            }
            if ($.domainNetbiosName == null) {
                throw new MissingRequiredPropertyException("CacheDirectoryActiveDirectoryArgs", "domainNetbiosName");
            }
            if ($.password == null) {
                throw new MissingRequiredPropertyException("CacheDirectoryActiveDirectoryArgs", "password");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("CacheDirectoryActiveDirectoryArgs", "username");
            }
            return $;
        }
    }

}
