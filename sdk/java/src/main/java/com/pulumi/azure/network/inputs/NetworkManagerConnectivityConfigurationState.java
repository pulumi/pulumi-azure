// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.inputs;

import com.pulumi.azure.network.inputs.NetworkManagerConnectivityConfigurationAppliesToGroupArgs;
import com.pulumi.azure.network.inputs.NetworkManagerConnectivityConfigurationHubArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkManagerConnectivityConfigurationState extends com.pulumi.resources.ResourceArgs {

    public static final NetworkManagerConnectivityConfigurationState Empty = new NetworkManagerConnectivityConfigurationState();

    /**
     * One or more `applies_to_group` blocks as defined below.
     * 
     */
    @Import(name="appliesToGroups")
    private @Nullable Output<List<NetworkManagerConnectivityConfigurationAppliesToGroupArgs>> appliesToGroups;

    /**
     * @return One or more `applies_to_group` blocks as defined below.
     * 
     */
    public Optional<Output<List<NetworkManagerConnectivityConfigurationAppliesToGroupArgs>>> appliesToGroups() {
        return Optional.ofNullable(this.appliesToGroups);
    }

    /**
     * Specifies the connectivity topology type. Possible values are `HubAndSpoke` and `Mesh`.
     * 
     */
    @Import(name="connectivityTopology")
    private @Nullable Output<String> connectivityTopology;

    /**
     * @return Specifies the connectivity topology type. Possible values are `HubAndSpoke` and `Mesh`.
     * 
     */
    public Optional<Output<String>> connectivityTopology() {
        return Optional.ofNullable(this.connectivityTopology);
    }

    /**
     * Indicates whether to remove current existing Virtual Network Peering in the Connectivity Configuration affected scope. Possible values are `true` and `false`.
     * 
     */
    @Import(name="deleteExistingPeeringEnabled")
    private @Nullable Output<Boolean> deleteExistingPeeringEnabled;

    /**
     * @return Indicates whether to remove current existing Virtual Network Peering in the Connectivity Configuration affected scope. Possible values are `true` and `false`.
     * 
     */
    public Optional<Output<Boolean>> deleteExistingPeeringEnabled() {
        return Optional.ofNullable(this.deleteExistingPeeringEnabled);
    }

    /**
     * A description of the Connectivity Configuration.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the Connectivity Configuration.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Indicates whether to global mesh is supported. Possible values are `true` and `false`.
     * 
     */
    @Import(name="globalMeshEnabled")
    private @Nullable Output<Boolean> globalMeshEnabled;

    /**
     * @return Indicates whether to global mesh is supported. Possible values are `true` and `false`.
     * 
     */
    public Optional<Output<Boolean>> globalMeshEnabled() {
        return Optional.ofNullable(this.globalMeshEnabled);
    }

    /**
     * A `hub` block as defined below.
     * 
     */
    @Import(name="hub")
    private @Nullable Output<NetworkManagerConnectivityConfigurationHubArgs> hub;

    /**
     * @return A `hub` block as defined below.
     * 
     */
    public Optional<Output<NetworkManagerConnectivityConfigurationHubArgs>> hub() {
        return Optional.ofNullable(this.hub);
    }

    /**
     * Specifies the name which should be used for this Network Manager Connectivity Configuration. Changing this forces a new Network Manager Connectivity Configuration to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name which should be used for this Network Manager Connectivity Configuration. Changing this forces a new Network Manager Connectivity Configuration to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the ID of the Network Manager. Changing this forces a new Network Manager Connectivity Configuration to be created.
     * 
     */
    @Import(name="networkManagerId")
    private @Nullable Output<String> networkManagerId;

    /**
     * @return Specifies the ID of the Network Manager. Changing this forces a new Network Manager Connectivity Configuration to be created.
     * 
     */
    public Optional<Output<String>> networkManagerId() {
        return Optional.ofNullable(this.networkManagerId);
    }

    private NetworkManagerConnectivityConfigurationState() {}

    private NetworkManagerConnectivityConfigurationState(NetworkManagerConnectivityConfigurationState $) {
        this.appliesToGroups = $.appliesToGroups;
        this.connectivityTopology = $.connectivityTopology;
        this.deleteExistingPeeringEnabled = $.deleteExistingPeeringEnabled;
        this.description = $.description;
        this.globalMeshEnabled = $.globalMeshEnabled;
        this.hub = $.hub;
        this.name = $.name;
        this.networkManagerId = $.networkManagerId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkManagerConnectivityConfigurationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkManagerConnectivityConfigurationState $;

        public Builder() {
            $ = new NetworkManagerConnectivityConfigurationState();
        }

        public Builder(NetworkManagerConnectivityConfigurationState defaults) {
            $ = new NetworkManagerConnectivityConfigurationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param appliesToGroups One or more `applies_to_group` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder appliesToGroups(@Nullable Output<List<NetworkManagerConnectivityConfigurationAppliesToGroupArgs>> appliesToGroups) {
            $.appliesToGroups = appliesToGroups;
            return this;
        }

        /**
         * @param appliesToGroups One or more `applies_to_group` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder appliesToGroups(List<NetworkManagerConnectivityConfigurationAppliesToGroupArgs> appliesToGroups) {
            return appliesToGroups(Output.of(appliesToGroups));
        }

        /**
         * @param appliesToGroups One or more `applies_to_group` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder appliesToGroups(NetworkManagerConnectivityConfigurationAppliesToGroupArgs... appliesToGroups) {
            return appliesToGroups(List.of(appliesToGroups));
        }

        /**
         * @param connectivityTopology Specifies the connectivity topology type. Possible values are `HubAndSpoke` and `Mesh`.
         * 
         * @return builder
         * 
         */
        public Builder connectivityTopology(@Nullable Output<String> connectivityTopology) {
            $.connectivityTopology = connectivityTopology;
            return this;
        }

        /**
         * @param connectivityTopology Specifies the connectivity topology type. Possible values are `HubAndSpoke` and `Mesh`.
         * 
         * @return builder
         * 
         */
        public Builder connectivityTopology(String connectivityTopology) {
            return connectivityTopology(Output.of(connectivityTopology));
        }

        /**
         * @param deleteExistingPeeringEnabled Indicates whether to remove current existing Virtual Network Peering in the Connectivity Configuration affected scope. Possible values are `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder deleteExistingPeeringEnabled(@Nullable Output<Boolean> deleteExistingPeeringEnabled) {
            $.deleteExistingPeeringEnabled = deleteExistingPeeringEnabled;
            return this;
        }

        /**
         * @param deleteExistingPeeringEnabled Indicates whether to remove current existing Virtual Network Peering in the Connectivity Configuration affected scope. Possible values are `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder deleteExistingPeeringEnabled(Boolean deleteExistingPeeringEnabled) {
            return deleteExistingPeeringEnabled(Output.of(deleteExistingPeeringEnabled));
        }

        /**
         * @param description A description of the Connectivity Configuration.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the Connectivity Configuration.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param globalMeshEnabled Indicates whether to global mesh is supported. Possible values are `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder globalMeshEnabled(@Nullable Output<Boolean> globalMeshEnabled) {
            $.globalMeshEnabled = globalMeshEnabled;
            return this;
        }

        /**
         * @param globalMeshEnabled Indicates whether to global mesh is supported. Possible values are `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder globalMeshEnabled(Boolean globalMeshEnabled) {
            return globalMeshEnabled(Output.of(globalMeshEnabled));
        }

        /**
         * @param hub A `hub` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder hub(@Nullable Output<NetworkManagerConnectivityConfigurationHubArgs> hub) {
            $.hub = hub;
            return this;
        }

        /**
         * @param hub A `hub` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder hub(NetworkManagerConnectivityConfigurationHubArgs hub) {
            return hub(Output.of(hub));
        }

        /**
         * @param name Specifies the name which should be used for this Network Manager Connectivity Configuration. Changing this forces a new Network Manager Connectivity Configuration to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name which should be used for this Network Manager Connectivity Configuration. Changing this forces a new Network Manager Connectivity Configuration to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkManagerId Specifies the ID of the Network Manager. Changing this forces a new Network Manager Connectivity Configuration to be created.
         * 
         * @return builder
         * 
         */
        public Builder networkManagerId(@Nullable Output<String> networkManagerId) {
            $.networkManagerId = networkManagerId;
            return this;
        }

        /**
         * @param networkManagerId Specifies the ID of the Network Manager. Changing this forces a new Network Manager Connectivity Configuration to be created.
         * 
         * @return builder
         * 
         */
        public Builder networkManagerId(String networkManagerId) {
            return networkManagerId(Output.of(networkManagerId));
        }

        public NetworkManagerConnectivityConfigurationState build() {
            return $;
        }
    }

}
