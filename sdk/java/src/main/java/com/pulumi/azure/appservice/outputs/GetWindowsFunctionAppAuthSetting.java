// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.outputs;

import com.pulumi.azure.appservice.outputs.GetWindowsFunctionAppAuthSettingActiveDirectory;
import com.pulumi.azure.appservice.outputs.GetWindowsFunctionAppAuthSettingFacebook;
import com.pulumi.azure.appservice.outputs.GetWindowsFunctionAppAuthSettingGithub;
import com.pulumi.azure.appservice.outputs.GetWindowsFunctionAppAuthSettingGoogle;
import com.pulumi.azure.appservice.outputs.GetWindowsFunctionAppAuthSettingMicrosoft;
import com.pulumi.azure.appservice.outputs.GetWindowsFunctionAppAuthSettingTwitter;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetWindowsFunctionAppAuthSetting {
    /**
     * @return A `active_directory` block as defined above.
     * 
     */
    private final List<GetWindowsFunctionAppAuthSettingActiveDirectory> activeDirectories;
    /**
     * @return A map of Login Parameters to send to the OpenID Connect authorization endpoint when a user logs in.
     * 
     */
    private final Map<String,String> additionalLoginParameters;
    /**
     * @return A list of External URLs that can be redirected to as part of logging in or logging out of the Windows Function App.
     * 
     */
    private final List<String> allowedExternalRedirectUrls;
    /**
     * @return The default authentication provider to use when multiple providers are configured.
     * 
     */
    private final String defaultProvider;
    /**
     * @return Is the Backup Job enabled?
     * 
     */
    private final Boolean enabled;
    /**
     * @return A `facebook` block as defined below.
     * 
     */
    private final List<GetWindowsFunctionAppAuthSettingFacebook> facebooks;
    /**
     * @return A `github` block as defined below.
     * 
     */
    private final List<GetWindowsFunctionAppAuthSettingGithub> githubs;
    /**
     * @return A `google` block as defined below.
     * 
     */
    private final List<GetWindowsFunctionAppAuthSettingGoogle> googles;
    /**
     * @return The OpenID Connect Issuer URI that represents the entity which issues access tokens for this Windows Function App.
     * 
     */
    private final String issuer;
    /**
     * @return A `microsoft` block as defined below.
     * 
     */
    private final List<GetWindowsFunctionAppAuthSettingMicrosoft> microsofts;
    /**
     * @return The Runtime Version of the Authentication / Authorization feature in use for the Windows Function App.
     * 
     */
    private final String runtimeVersion;
    /**
     * @return The number of hours after session token expiration that a session token can be used to call the token refresh API.
     * 
     */
    private final Double tokenRefreshExtensionHours;
    /**
     * @return Is the durable storing of platform-specific security token that are obtained during login flows enabled?
     * 
     */
    private final Boolean tokenStoreEnabled;
    /**
     * @return A `twitter` block as defined below.
     * 
     */
    private final List<GetWindowsFunctionAppAuthSettingTwitter> twitters;
    /**
     * @return The action to take when an unauthenticated client attempts to access the app.
     * 
     */
    private final String unauthenticatedClientAction;

    @CustomType.Constructor
    private GetWindowsFunctionAppAuthSetting(
        @CustomType.Parameter("activeDirectories") List<GetWindowsFunctionAppAuthSettingActiveDirectory> activeDirectories,
        @CustomType.Parameter("additionalLoginParameters") Map<String,String> additionalLoginParameters,
        @CustomType.Parameter("allowedExternalRedirectUrls") List<String> allowedExternalRedirectUrls,
        @CustomType.Parameter("defaultProvider") String defaultProvider,
        @CustomType.Parameter("enabled") Boolean enabled,
        @CustomType.Parameter("facebooks") List<GetWindowsFunctionAppAuthSettingFacebook> facebooks,
        @CustomType.Parameter("githubs") List<GetWindowsFunctionAppAuthSettingGithub> githubs,
        @CustomType.Parameter("googles") List<GetWindowsFunctionAppAuthSettingGoogle> googles,
        @CustomType.Parameter("issuer") String issuer,
        @CustomType.Parameter("microsofts") List<GetWindowsFunctionAppAuthSettingMicrosoft> microsofts,
        @CustomType.Parameter("runtimeVersion") String runtimeVersion,
        @CustomType.Parameter("tokenRefreshExtensionHours") Double tokenRefreshExtensionHours,
        @CustomType.Parameter("tokenStoreEnabled") Boolean tokenStoreEnabled,
        @CustomType.Parameter("twitters") List<GetWindowsFunctionAppAuthSettingTwitter> twitters,
        @CustomType.Parameter("unauthenticatedClientAction") String unauthenticatedClientAction) {
        this.activeDirectories = activeDirectories;
        this.additionalLoginParameters = additionalLoginParameters;
        this.allowedExternalRedirectUrls = allowedExternalRedirectUrls;
        this.defaultProvider = defaultProvider;
        this.enabled = enabled;
        this.facebooks = facebooks;
        this.githubs = githubs;
        this.googles = googles;
        this.issuer = issuer;
        this.microsofts = microsofts;
        this.runtimeVersion = runtimeVersion;
        this.tokenRefreshExtensionHours = tokenRefreshExtensionHours;
        this.tokenStoreEnabled = tokenStoreEnabled;
        this.twitters = twitters;
        this.unauthenticatedClientAction = unauthenticatedClientAction;
    }

    /**
     * @return A `active_directory` block as defined above.
     * 
     */
    public List<GetWindowsFunctionAppAuthSettingActiveDirectory> activeDirectories() {
        return this.activeDirectories;
    }
    /**
     * @return A map of Login Parameters to send to the OpenID Connect authorization endpoint when a user logs in.
     * 
     */
    public Map<String,String> additionalLoginParameters() {
        return this.additionalLoginParameters;
    }
    /**
     * @return A list of External URLs that can be redirected to as part of logging in or logging out of the Windows Function App.
     * 
     */
    public List<String> allowedExternalRedirectUrls() {
        return this.allowedExternalRedirectUrls;
    }
    /**
     * @return The default authentication provider to use when multiple providers are configured.
     * 
     */
    public String defaultProvider() {
        return this.defaultProvider;
    }
    /**
     * @return Is the Backup Job enabled?
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return A `facebook` block as defined below.
     * 
     */
    public List<GetWindowsFunctionAppAuthSettingFacebook> facebooks() {
        return this.facebooks;
    }
    /**
     * @return A `github` block as defined below.
     * 
     */
    public List<GetWindowsFunctionAppAuthSettingGithub> githubs() {
        return this.githubs;
    }
    /**
     * @return A `google` block as defined below.
     * 
     */
    public List<GetWindowsFunctionAppAuthSettingGoogle> googles() {
        return this.googles;
    }
    /**
     * @return The OpenID Connect Issuer URI that represents the entity which issues access tokens for this Windows Function App.
     * 
     */
    public String issuer() {
        return this.issuer;
    }
    /**
     * @return A `microsoft` block as defined below.
     * 
     */
    public List<GetWindowsFunctionAppAuthSettingMicrosoft> microsofts() {
        return this.microsofts;
    }
    /**
     * @return The Runtime Version of the Authentication / Authorization feature in use for the Windows Function App.
     * 
     */
    public String runtimeVersion() {
        return this.runtimeVersion;
    }
    /**
     * @return The number of hours after session token expiration that a session token can be used to call the token refresh API.
     * 
     */
    public Double tokenRefreshExtensionHours() {
        return this.tokenRefreshExtensionHours;
    }
    /**
     * @return Is the durable storing of platform-specific security token that are obtained during login flows enabled?
     * 
     */
    public Boolean tokenStoreEnabled() {
        return this.tokenStoreEnabled;
    }
    /**
     * @return A `twitter` block as defined below.
     * 
     */
    public List<GetWindowsFunctionAppAuthSettingTwitter> twitters() {
        return this.twitters;
    }
    /**
     * @return The action to take when an unauthenticated client attempts to access the app.
     * 
     */
    public String unauthenticatedClientAction() {
        return this.unauthenticatedClientAction;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWindowsFunctionAppAuthSetting defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetWindowsFunctionAppAuthSettingActiveDirectory> activeDirectories;
        private Map<String,String> additionalLoginParameters;
        private List<String> allowedExternalRedirectUrls;
        private String defaultProvider;
        private Boolean enabled;
        private List<GetWindowsFunctionAppAuthSettingFacebook> facebooks;
        private List<GetWindowsFunctionAppAuthSettingGithub> githubs;
        private List<GetWindowsFunctionAppAuthSettingGoogle> googles;
        private String issuer;
        private List<GetWindowsFunctionAppAuthSettingMicrosoft> microsofts;
        private String runtimeVersion;
        private Double tokenRefreshExtensionHours;
        private Boolean tokenStoreEnabled;
        private List<GetWindowsFunctionAppAuthSettingTwitter> twitters;
        private String unauthenticatedClientAction;

        public Builder() {
    	      // Empty
        }

        public Builder(GetWindowsFunctionAppAuthSetting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeDirectories = defaults.activeDirectories;
    	      this.additionalLoginParameters = defaults.additionalLoginParameters;
    	      this.allowedExternalRedirectUrls = defaults.allowedExternalRedirectUrls;
    	      this.defaultProvider = defaults.defaultProvider;
    	      this.enabled = defaults.enabled;
    	      this.facebooks = defaults.facebooks;
    	      this.githubs = defaults.githubs;
    	      this.googles = defaults.googles;
    	      this.issuer = defaults.issuer;
    	      this.microsofts = defaults.microsofts;
    	      this.runtimeVersion = defaults.runtimeVersion;
    	      this.tokenRefreshExtensionHours = defaults.tokenRefreshExtensionHours;
    	      this.tokenStoreEnabled = defaults.tokenStoreEnabled;
    	      this.twitters = defaults.twitters;
    	      this.unauthenticatedClientAction = defaults.unauthenticatedClientAction;
        }

        public Builder activeDirectories(List<GetWindowsFunctionAppAuthSettingActiveDirectory> activeDirectories) {
            this.activeDirectories = Objects.requireNonNull(activeDirectories);
            return this;
        }
        public Builder activeDirectories(GetWindowsFunctionAppAuthSettingActiveDirectory... activeDirectories) {
            return activeDirectories(List.of(activeDirectories));
        }
        public Builder additionalLoginParameters(Map<String,String> additionalLoginParameters) {
            this.additionalLoginParameters = Objects.requireNonNull(additionalLoginParameters);
            return this;
        }
        public Builder allowedExternalRedirectUrls(List<String> allowedExternalRedirectUrls) {
            this.allowedExternalRedirectUrls = Objects.requireNonNull(allowedExternalRedirectUrls);
            return this;
        }
        public Builder allowedExternalRedirectUrls(String... allowedExternalRedirectUrls) {
            return allowedExternalRedirectUrls(List.of(allowedExternalRedirectUrls));
        }
        public Builder defaultProvider(String defaultProvider) {
            this.defaultProvider = Objects.requireNonNull(defaultProvider);
            return this;
        }
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        public Builder facebooks(List<GetWindowsFunctionAppAuthSettingFacebook> facebooks) {
            this.facebooks = Objects.requireNonNull(facebooks);
            return this;
        }
        public Builder facebooks(GetWindowsFunctionAppAuthSettingFacebook... facebooks) {
            return facebooks(List.of(facebooks));
        }
        public Builder githubs(List<GetWindowsFunctionAppAuthSettingGithub> githubs) {
            this.githubs = Objects.requireNonNull(githubs);
            return this;
        }
        public Builder githubs(GetWindowsFunctionAppAuthSettingGithub... githubs) {
            return githubs(List.of(githubs));
        }
        public Builder googles(List<GetWindowsFunctionAppAuthSettingGoogle> googles) {
            this.googles = Objects.requireNonNull(googles);
            return this;
        }
        public Builder googles(GetWindowsFunctionAppAuthSettingGoogle... googles) {
            return googles(List.of(googles));
        }
        public Builder issuer(String issuer) {
            this.issuer = Objects.requireNonNull(issuer);
            return this;
        }
        public Builder microsofts(List<GetWindowsFunctionAppAuthSettingMicrosoft> microsofts) {
            this.microsofts = Objects.requireNonNull(microsofts);
            return this;
        }
        public Builder microsofts(GetWindowsFunctionAppAuthSettingMicrosoft... microsofts) {
            return microsofts(List.of(microsofts));
        }
        public Builder runtimeVersion(String runtimeVersion) {
            this.runtimeVersion = Objects.requireNonNull(runtimeVersion);
            return this;
        }
        public Builder tokenRefreshExtensionHours(Double tokenRefreshExtensionHours) {
            this.tokenRefreshExtensionHours = Objects.requireNonNull(tokenRefreshExtensionHours);
            return this;
        }
        public Builder tokenStoreEnabled(Boolean tokenStoreEnabled) {
            this.tokenStoreEnabled = Objects.requireNonNull(tokenStoreEnabled);
            return this;
        }
        public Builder twitters(List<GetWindowsFunctionAppAuthSettingTwitter> twitters) {
            this.twitters = Objects.requireNonNull(twitters);
            return this;
        }
        public Builder twitters(GetWindowsFunctionAppAuthSettingTwitter... twitters) {
            return twitters(List.of(twitters));
        }
        public Builder unauthenticatedClientAction(String unauthenticatedClientAction) {
            this.unauthenticatedClientAction = Objects.requireNonNull(unauthenticatedClientAction);
            return this;
        }        public GetWindowsFunctionAppAuthSetting build() {
            return new GetWindowsFunctionAppAuthSetting(activeDirectories, additionalLoginParameters, allowedExternalRedirectUrls, defaultProvider, enabled, facebooks, githubs, googles, issuer, microsofts, runtimeVersion, tokenRefreshExtensionHours, tokenStoreEnabled, twitters, unauthenticatedClientAction);
        }
    }
}
