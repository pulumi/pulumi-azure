// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.datafactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LinkedServiceAzureDatabricksInstancePoolArgs extends com.pulumi.resources.ResourceArgs {

    public static final LinkedServiceAzureDatabricksInstancePoolArgs Empty = new LinkedServiceAzureDatabricksInstancePoolArgs();

    /**
     * Spark version of a the cluster.
     * 
     */
    @Import(name="clusterVersion", required=true)
    private Output<String> clusterVersion;

    /**
     * @return Spark version of a the cluster.
     * 
     */
    public Output<String> clusterVersion() {
        return this.clusterVersion;
    }

    /**
     * Identifier of the instance pool within the linked ADB instance.
     * 
     */
    @Import(name="instancePoolId", required=true)
    private Output<String> instancePoolId;

    /**
     * @return Identifier of the instance pool within the linked ADB instance.
     * 
     */
    public Output<String> instancePoolId() {
        return this.instancePoolId;
    }

    /**
     * The max number of worker nodes. Set this value if you want to enable autoscaling between the `min_number_of_workers` and this value. Omit this value to use a fixed number of workers defined in the `min_number_of_workers` property.
     * 
     */
    @Import(name="maxNumberOfWorkers")
    private @Nullable Output<Integer> maxNumberOfWorkers;

    /**
     * @return The max number of worker nodes. Set this value if you want to enable autoscaling between the `min_number_of_workers` and this value. Omit this value to use a fixed number of workers defined in the `min_number_of_workers` property.
     * 
     */
    public Optional<Output<Integer>> maxNumberOfWorkers() {
        return Optional.ofNullable(this.maxNumberOfWorkers);
    }

    /**
     * The minimum number of worker nodes. Defaults to `1`.
     * 
     */
    @Import(name="minNumberOfWorkers")
    private @Nullable Output<Integer> minNumberOfWorkers;

    /**
     * @return The minimum number of worker nodes. Defaults to `1`.
     * 
     */
    public Optional<Output<Integer>> minNumberOfWorkers() {
        return Optional.ofNullable(this.minNumberOfWorkers);
    }

    private LinkedServiceAzureDatabricksInstancePoolArgs() {}

    private LinkedServiceAzureDatabricksInstancePoolArgs(LinkedServiceAzureDatabricksInstancePoolArgs $) {
        this.clusterVersion = $.clusterVersion;
        this.instancePoolId = $.instancePoolId;
        this.maxNumberOfWorkers = $.maxNumberOfWorkers;
        this.minNumberOfWorkers = $.minNumberOfWorkers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LinkedServiceAzureDatabricksInstancePoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LinkedServiceAzureDatabricksInstancePoolArgs $;

        public Builder() {
            $ = new LinkedServiceAzureDatabricksInstancePoolArgs();
        }

        public Builder(LinkedServiceAzureDatabricksInstancePoolArgs defaults) {
            $ = new LinkedServiceAzureDatabricksInstancePoolArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterVersion Spark version of a the cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterVersion(Output<String> clusterVersion) {
            $.clusterVersion = clusterVersion;
            return this;
        }

        /**
         * @param clusterVersion Spark version of a the cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterVersion(String clusterVersion) {
            return clusterVersion(Output.of(clusterVersion));
        }

        /**
         * @param instancePoolId Identifier of the instance pool within the linked ADB instance.
         * 
         * @return builder
         * 
         */
        public Builder instancePoolId(Output<String> instancePoolId) {
            $.instancePoolId = instancePoolId;
            return this;
        }

        /**
         * @param instancePoolId Identifier of the instance pool within the linked ADB instance.
         * 
         * @return builder
         * 
         */
        public Builder instancePoolId(String instancePoolId) {
            return instancePoolId(Output.of(instancePoolId));
        }

        /**
         * @param maxNumberOfWorkers The max number of worker nodes. Set this value if you want to enable autoscaling between the `min_number_of_workers` and this value. Omit this value to use a fixed number of workers defined in the `min_number_of_workers` property.
         * 
         * @return builder
         * 
         */
        public Builder maxNumberOfWorkers(@Nullable Output<Integer> maxNumberOfWorkers) {
            $.maxNumberOfWorkers = maxNumberOfWorkers;
            return this;
        }

        /**
         * @param maxNumberOfWorkers The max number of worker nodes. Set this value if you want to enable autoscaling between the `min_number_of_workers` and this value. Omit this value to use a fixed number of workers defined in the `min_number_of_workers` property.
         * 
         * @return builder
         * 
         */
        public Builder maxNumberOfWorkers(Integer maxNumberOfWorkers) {
            return maxNumberOfWorkers(Output.of(maxNumberOfWorkers));
        }

        /**
         * @param minNumberOfWorkers The minimum number of worker nodes. Defaults to `1`.
         * 
         * @return builder
         * 
         */
        public Builder minNumberOfWorkers(@Nullable Output<Integer> minNumberOfWorkers) {
            $.minNumberOfWorkers = minNumberOfWorkers;
            return this;
        }

        /**
         * @param minNumberOfWorkers The minimum number of worker nodes. Defaults to `1`.
         * 
         * @return builder
         * 
         */
        public Builder minNumberOfWorkers(Integer minNumberOfWorkers) {
            return minNumberOfWorkers(Output.of(minNumberOfWorkers));
        }

        public LinkedServiceAzureDatabricksInstancePoolArgs build() {
            if ($.clusterVersion == null) {
                throw new MissingRequiredPropertyException("LinkedServiceAzureDatabricksInstancePoolArgs", "clusterVersion");
            }
            if ($.instancePoolId == null) {
                throw new MissingRequiredPropertyException("LinkedServiceAzureDatabricksInstancePoolArgs", "instancePoolId");
            }
            return $;
        }
    }

}
