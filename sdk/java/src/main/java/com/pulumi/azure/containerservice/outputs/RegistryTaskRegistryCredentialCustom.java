// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegistryTaskRegistryCredentialCustom {
    /**
     * @return The managed identity assigned to this custom credential. For user assigned identity, the value is the client ID of the identity. For system assigned identity, the value is `[system]`.
     * 
     */
    private @Nullable String identity;
    /**
     * @return The login server of the custom Container Registry.
     * 
     */
    private String loginServer;
    /**
     * @return The password for logging into the custom Container Registry. It can be either a plain text of password, or a Keyvault Secret ID.
     * 
     */
    private @Nullable String password;
    /**
     * @return The username for logging into the custom Container Registry. It can be either a plain text of username, or a Keyvault Secret ID.
     * 
     */
    private @Nullable String username;

    private RegistryTaskRegistryCredentialCustom() {}
    /**
     * @return The managed identity assigned to this custom credential. For user assigned identity, the value is the client ID of the identity. For system assigned identity, the value is `[system]`.
     * 
     */
    public Optional<String> identity() {
        return Optional.ofNullable(this.identity);
    }
    /**
     * @return The login server of the custom Container Registry.
     * 
     */
    public String loginServer() {
        return this.loginServer;
    }
    /**
     * @return The password for logging into the custom Container Registry. It can be either a plain text of password, or a Keyvault Secret ID.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return The username for logging into the custom Container Registry. It can be either a plain text of username, or a Keyvault Secret ID.
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegistryTaskRegistryCredentialCustom defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String identity;
        private String loginServer;
        private @Nullable String password;
        private @Nullable String username;
        public Builder() {}
        public Builder(RegistryTaskRegistryCredentialCustom defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.identity = defaults.identity;
    	      this.loginServer = defaults.loginServer;
    	      this.password = defaults.password;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder identity(@Nullable String identity) {

            this.identity = identity;
            return this;
        }
        @CustomType.Setter
        public Builder loginServer(String loginServer) {
            if (loginServer == null) {
              throw new MissingRequiredPropertyException("RegistryTaskRegistryCredentialCustom", "loginServer");
            }
            this.loginServer = loginServer;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {

            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder username(@Nullable String username) {

            this.username = username;
            return this;
        }
        public RegistryTaskRegistryCredentialCustom build() {
            final var _resultValue = new RegistryTaskRegistryCredentialCustom();
            _resultValue.identity = identity;
            _resultValue.loginServer = loginServer;
            _resultValue.password = password;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
