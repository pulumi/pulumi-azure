// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.siterecovery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class ReplicatedVMUnmanagedDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReplicatedVMUnmanagedDiskArgs Empty = new ReplicatedVMUnmanagedDiskArgs();

    /**
     * Id of disk that should be replicated. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="diskUri", required=true)
    private Output<String> diskUri;

    /**
     * @return Id of disk that should be replicated. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> diskUri() {
        return this.diskUri;
    }

    /**
     * Storage account that should be used for caching. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="stagingStorageAccountId", required=true)
    private Output<String> stagingStorageAccountId;

    /**
     * @return Storage account that should be used for caching. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> stagingStorageAccountId() {
        return this.stagingStorageAccountId;
    }

    /**
     * Storage account disk should belong to when a failover is done. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="targetStorageAccountId", required=true)
    private Output<String> targetStorageAccountId;

    /**
     * @return Storage account disk should belong to when a failover is done. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> targetStorageAccountId() {
        return this.targetStorageAccountId;
    }

    private ReplicatedVMUnmanagedDiskArgs() {}

    private ReplicatedVMUnmanagedDiskArgs(ReplicatedVMUnmanagedDiskArgs $) {
        this.diskUri = $.diskUri;
        this.stagingStorageAccountId = $.stagingStorageAccountId;
        this.targetStorageAccountId = $.targetStorageAccountId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReplicatedVMUnmanagedDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReplicatedVMUnmanagedDiskArgs $;

        public Builder() {
            $ = new ReplicatedVMUnmanagedDiskArgs();
        }

        public Builder(ReplicatedVMUnmanagedDiskArgs defaults) {
            $ = new ReplicatedVMUnmanagedDiskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskUri Id of disk that should be replicated. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder diskUri(Output<String> diskUri) {
            $.diskUri = diskUri;
            return this;
        }

        /**
         * @param diskUri Id of disk that should be replicated. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder diskUri(String diskUri) {
            return diskUri(Output.of(diskUri));
        }

        /**
         * @param stagingStorageAccountId Storage account that should be used for caching. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder stagingStorageAccountId(Output<String> stagingStorageAccountId) {
            $.stagingStorageAccountId = stagingStorageAccountId;
            return this;
        }

        /**
         * @param stagingStorageAccountId Storage account that should be used for caching. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder stagingStorageAccountId(String stagingStorageAccountId) {
            return stagingStorageAccountId(Output.of(stagingStorageAccountId));
        }

        /**
         * @param targetStorageAccountId Storage account disk should belong to when a failover is done. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder targetStorageAccountId(Output<String> targetStorageAccountId) {
            $.targetStorageAccountId = targetStorageAccountId;
            return this;
        }

        /**
         * @param targetStorageAccountId Storage account disk should belong to when a failover is done. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder targetStorageAccountId(String targetStorageAccountId) {
            return targetStorageAccountId(Output.of(targetStorageAccountId));
        }

        public ReplicatedVMUnmanagedDiskArgs build() {
            if ($.diskUri == null) {
                throw new MissingRequiredPropertyException("ReplicatedVMUnmanagedDiskArgs", "diskUri");
            }
            if ($.stagingStorageAccountId == null) {
                throw new MissingRequiredPropertyException("ReplicatedVMUnmanagedDiskArgs", "stagingStorageAccountId");
            }
            if ($.targetStorageAccountId == null) {
                throw new MissingRequiredPropertyException("ReplicatedVMUnmanagedDiskArgs", "targetStorageAccountId");
            }
            return $;
        }
    }

}
