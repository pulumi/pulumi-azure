// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.core;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.core.SubscriptionCostManagementViewArgs;
import com.pulumi.azure.core.inputs.SubscriptionCostManagementViewState;
import com.pulumi.azure.core.outputs.SubscriptionCostManagementViewDataset;
import com.pulumi.azure.core.outputs.SubscriptionCostManagementViewKpi;
import com.pulumi.azure.core.outputs.SubscriptionCostManagementViewPivot;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages an Azure Cost Management View for a Subscription.
 * 
 * ## Example Usage
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.SubscriptionCostManagementView;
 * import com.pulumi.azure.core.SubscriptionCostManagementViewArgs;
 * import com.pulumi.azure.core.inputs.SubscriptionCostManagementViewDatasetArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new SubscriptionCostManagementView(&#34;example&#34;, SubscriptionCostManagementViewArgs.builder()        
 *             .accumulated(false)
 *             .chartType(&#34;StackedColumn&#34;)
 *             .dataset(SubscriptionCostManagementViewDatasetArgs.builder()
 *                 .aggregations(SubscriptionCostManagementViewDatasetAggregationArgs.builder()
 *                     .columnName(&#34;Cost&#34;)
 *                     .name(&#34;totalCost&#34;)
 *                     .build())
 *                 .granularity(&#34;Monthly&#34;)
 *                 .totalCost(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *                 .build())
 *             .displayName(&#34;Cost View per Month&#34;)
 *             .reportType(&#34;Usage&#34;)
 *             .subscriptionId(&#34;/subscription/00000000-0000-0000-0000-000000000000&#34;)
 *             .timeframe(&#34;MonthToDate&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Cost Management View for a Subscriptions can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:core/subscriptionCostManagementView:SubscriptionCostManagementView example /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/views/costmanagementview
 * ```
 * 
 */
@ResourceType(type="azure:core/subscriptionCostManagementView:SubscriptionCostManagementView")
public class SubscriptionCostManagementView extends com.pulumi.resources.CustomResource {
    /**
     * Whether the costs data in the Cost Management View are accumulated over time. Changing this forces a new Cost Management View for a Subscription to be created.
     * 
     */
    @Export(name="accumulated", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> accumulated;

    /**
     * @return Whether the costs data in the Cost Management View are accumulated over time. Changing this forces a new Cost Management View for a Subscription to be created.
     * 
     */
    public Output<Boolean> accumulated() {
        return this.accumulated;
    }
    /**
     * Chart type of the main view in Cost Analysis. Possible values are `Area`, `GroupedColumn`, `Line`, `StackedColumn` and `Table`.
     * 
     */
    @Export(name="chartType", refs={String.class}, tree="[0]")
    private Output<String> chartType;

    /**
     * @return Chart type of the main view in Cost Analysis. Possible values are `Area`, `GroupedColumn`, `Line`, `StackedColumn` and `Table`.
     * 
     */
    public Output<String> chartType() {
        return this.chartType;
    }
    /**
     * A `dataset` block as defined below.
     * 
     */
    @Export(name="dataset", refs={SubscriptionCostManagementViewDataset.class}, tree="[0]")
    private Output<SubscriptionCostManagementViewDataset> dataset;

    /**
     * @return A `dataset` block as defined below.
     * 
     */
    public Output<SubscriptionCostManagementViewDataset> dataset() {
        return this.dataset;
    }
    /**
     * User visible input name of the Cost Management View.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return User visible input name of the Cost Management View.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * One or more `kpi` blocks as defined below, to show in Cost Analysis UI.
     * 
     */
    @Export(name="kpis", refs={List.class,SubscriptionCostManagementViewKpi.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SubscriptionCostManagementViewKpi>> kpis;

    /**
     * @return One or more `kpi` blocks as defined below, to show in Cost Analysis UI.
     * 
     */
    public Output<Optional<List<SubscriptionCostManagementViewKpi>>> kpis() {
        return Codegen.optional(this.kpis);
    }
    /**
     * The name which should be used for this Cost Management View for a Subscription. Changing this forces a new Cost Management View for a Subscription to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name which should be used for this Cost Management View for a Subscription. Changing this forces a new Cost Management View for a Subscription to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * One or more `pivot` blocks as defined below, containing the configuration of 3 sub-views in the Cost Analysis UI. Non table views should have three pivots.
     * 
     */
    @Export(name="pivots", refs={List.class,SubscriptionCostManagementViewPivot.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SubscriptionCostManagementViewPivot>> pivots;

    /**
     * @return One or more `pivot` blocks as defined below, containing the configuration of 3 sub-views in the Cost Analysis UI. Non table views should have three pivots.
     * 
     */
    public Output<Optional<List<SubscriptionCostManagementViewPivot>>> pivots() {
        return Codegen.optional(this.pivots);
    }
    /**
     * The type of the report. The only possible value is `Usage`.
     * 
     */
    @Export(name="reportType", refs={String.class}, tree="[0]")
    private Output<String> reportType;

    /**
     * @return The type of the report. The only possible value is `Usage`.
     * 
     */
    public Output<String> reportType() {
        return this.reportType;
    }
    /**
     * The ID of the Subscription this View is scoped to. Changing this forces a new Cost Management View for a Subscription to be created.
     * 
     */
    @Export(name="subscriptionId", refs={String.class}, tree="[0]")
    private Output<String> subscriptionId;

    /**
     * @return The ID of the Subscription this View is scoped to. Changing this forces a new Cost Management View for a Subscription to be created.
     * 
     */
    public Output<String> subscriptionId() {
        return this.subscriptionId;
    }
    /**
     * The time frame for pulling data for the report. Possible values are `Custom`, `MonthToDate`, `WeekToDate` and `YearToDate`.
     * 
     */
    @Export(name="timeframe", refs={String.class}, tree="[0]")
    private Output<String> timeframe;

    /**
     * @return The time frame for pulling data for the report. Possible values are `Custom`, `MonthToDate`, `WeekToDate` and `YearToDate`.
     * 
     */
    public Output<String> timeframe() {
        return this.timeframe;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SubscriptionCostManagementView(String name) {
        this(name, SubscriptionCostManagementViewArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SubscriptionCostManagementView(String name, SubscriptionCostManagementViewArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SubscriptionCostManagementView(String name, SubscriptionCostManagementViewArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:core/subscriptionCostManagementView:SubscriptionCostManagementView", name, args == null ? SubscriptionCostManagementViewArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SubscriptionCostManagementView(String name, Output<String> id, @Nullable SubscriptionCostManagementViewState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:core/subscriptionCostManagementView:SubscriptionCostManagementView", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SubscriptionCostManagementView get(String name, Output<String> id, @Nullable SubscriptionCostManagementViewState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SubscriptionCostManagementView(name, id, state, options);
    }
}
