// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MonitorPlan {
    /**
     * @return Different billing cycles. Possible values are `MONTHLY` and `WEEKLY`.
     * 
     */
    private @Nullable String billingCycle;
    /**
     * @return Date when plan was applied.
     * 
     */
    private @Nullable String effectiveDate;
    /**
     * @return Plan id as published by Dynatrace.
     * 
     */
    private String plan;
    /**
     * @return Different usage type. Possible values are `PAYG` and `COMMITTED`.
     * 
     */
    private @Nullable String usageType;

    private MonitorPlan() {}
    /**
     * @return Different billing cycles. Possible values are `MONTHLY` and `WEEKLY`.
     * 
     */
    public Optional<String> billingCycle() {
        return Optional.ofNullable(this.billingCycle);
    }
    /**
     * @return Date when plan was applied.
     * 
     */
    public Optional<String> effectiveDate() {
        return Optional.ofNullable(this.effectiveDate);
    }
    /**
     * @return Plan id as published by Dynatrace.
     * 
     */
    public String plan() {
        return this.plan;
    }
    /**
     * @return Different usage type. Possible values are `PAYG` and `COMMITTED`.
     * 
     */
    public Optional<String> usageType() {
        return Optional.ofNullable(this.usageType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MonitorPlan defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String billingCycle;
        private @Nullable String effectiveDate;
        private String plan;
        private @Nullable String usageType;
        public Builder() {}
        public Builder(MonitorPlan defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.billingCycle = defaults.billingCycle;
    	      this.effectiveDate = defaults.effectiveDate;
    	      this.plan = defaults.plan;
    	      this.usageType = defaults.usageType;
        }

        @CustomType.Setter
        public Builder billingCycle(@Nullable String billingCycle) {

            this.billingCycle = billingCycle;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveDate(@Nullable String effectiveDate) {

            this.effectiveDate = effectiveDate;
            return this;
        }
        @CustomType.Setter
        public Builder plan(String plan) {
            if (plan == null) {
              throw new MissingRequiredPropertyException("MonitorPlan", "plan");
            }
            this.plan = plan;
            return this;
        }
        @CustomType.Setter
        public Builder usageType(@Nullable String usageType) {

            this.usageType = usageType;
            return this;
        }
        public MonitorPlan build() {
            final var _resultValue = new MonitorPlan();
            _resultValue.billingCycle = billingCycle;
            _resultValue.effectiveDate = effectiveDate;
            _resultValue.plan = plan;
            _resultValue.usageType = usageType;
            return _resultValue;
        }
    }
}
