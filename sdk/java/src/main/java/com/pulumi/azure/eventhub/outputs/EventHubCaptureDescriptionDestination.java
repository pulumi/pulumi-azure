// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.eventhub.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class EventHubCaptureDescriptionDestination {
    /**
     * @return The Blob naming convention for archiving. e.g. `{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}`. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
     * 
     */
    private final String archiveNameFormat;
    /**
     * @return The name of the Container within the Blob Storage Account where messages should be archived.
     * 
     */
    private final String blobContainerName;
    /**
     * @return The Name of the Destination where the capture should take place. At this time the only supported value is `EventHubArchive.AzureBlockBlob`.
     * 
     */
    private final String name;
    /**
     * @return The ID of the Blob Storage Account where messages should be archived.
     * 
     */
    private final String storageAccountId;

    @CustomType.Constructor
    private EventHubCaptureDescriptionDestination(
        @CustomType.Parameter("archiveNameFormat") String archiveNameFormat,
        @CustomType.Parameter("blobContainerName") String blobContainerName,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("storageAccountId") String storageAccountId) {
        this.archiveNameFormat = archiveNameFormat;
        this.blobContainerName = blobContainerName;
        this.name = name;
        this.storageAccountId = storageAccountId;
    }

    /**
     * @return The Blob naming convention for archiving. e.g. `{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}`. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
     * 
     */
    public String archiveNameFormat() {
        return this.archiveNameFormat;
    }
    /**
     * @return The name of the Container within the Blob Storage Account where messages should be archived.
     * 
     */
    public String blobContainerName() {
        return this.blobContainerName;
    }
    /**
     * @return The Name of the Destination where the capture should take place. At this time the only supported value is `EventHubArchive.AzureBlockBlob`.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The ID of the Blob Storage Account where messages should be archived.
     * 
     */
    public String storageAccountId() {
        return this.storageAccountId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventHubCaptureDescriptionDestination defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String archiveNameFormat;
        private String blobContainerName;
        private String name;
        private String storageAccountId;

        public Builder() {
    	      // Empty
        }

        public Builder(EventHubCaptureDescriptionDestination defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.archiveNameFormat = defaults.archiveNameFormat;
    	      this.blobContainerName = defaults.blobContainerName;
    	      this.name = defaults.name;
    	      this.storageAccountId = defaults.storageAccountId;
        }

        public Builder archiveNameFormat(String archiveNameFormat) {
            this.archiveNameFormat = Objects.requireNonNull(archiveNameFormat);
            return this;
        }
        public Builder blobContainerName(String blobContainerName) {
            this.blobContainerName = Objects.requireNonNull(blobContainerName);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder storageAccountId(String storageAccountId) {
            this.storageAccountId = Objects.requireNonNull(storageAccountId);
            return this;
        }        public EventHubCaptureDescriptionDestination build() {
            return new EventHubCaptureDescriptionDestination(archiveNameFormat, blobContainerName, name, storageAccountId);
        }
    }
}
