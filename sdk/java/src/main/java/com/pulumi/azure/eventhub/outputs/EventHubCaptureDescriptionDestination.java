// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.eventhub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class EventHubCaptureDescriptionDestination {
    /**
     * @return The Blob naming convention for archiving. e.g. `{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}`. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
     * 
     */
    private String archiveNameFormat;
    /**
     * @return The name of the Container within the Blob Storage Account where messages should be archived.
     * 
     */
    private String blobContainerName;
    /**
     * @return The Name of the Destination where the capture should take place. At this time the only supported value is `EventHubArchive.AzureBlockBlob`.
     * 
     * &gt; At this time it&#39;s only possible to Capture EventHub messages to Blob Storage. There&#39;s [a Feature Request for the Azure SDK to add support for Capturing messages to Azure Data Lake here](https://github.com/Azure/azure-rest-api-specs/issues/2255).
     * 
     */
    private String name;
    /**
     * @return The ID of the Blob Storage Account where messages should be archived.
     * 
     */
    private String storageAccountId;

    private EventHubCaptureDescriptionDestination() {}
    /**
     * @return The Blob naming convention for archiving. e.g. `{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}`. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
     * 
     */
    public String archiveNameFormat() {
        return this.archiveNameFormat;
    }
    /**
     * @return The name of the Container within the Blob Storage Account where messages should be archived.
     * 
     */
    public String blobContainerName() {
        return this.blobContainerName;
    }
    /**
     * @return The Name of the Destination where the capture should take place. At this time the only supported value is `EventHubArchive.AzureBlockBlob`.
     * 
     * &gt; At this time it&#39;s only possible to Capture EventHub messages to Blob Storage. There&#39;s [a Feature Request for the Azure SDK to add support for Capturing messages to Azure Data Lake here](https://github.com/Azure/azure-rest-api-specs/issues/2255).
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The ID of the Blob Storage Account where messages should be archived.
     * 
     */
    public String storageAccountId() {
        return this.storageAccountId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventHubCaptureDescriptionDestination defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String archiveNameFormat;
        private String blobContainerName;
        private String name;
        private String storageAccountId;
        public Builder() {}
        public Builder(EventHubCaptureDescriptionDestination defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.archiveNameFormat = defaults.archiveNameFormat;
    	      this.blobContainerName = defaults.blobContainerName;
    	      this.name = defaults.name;
    	      this.storageAccountId = defaults.storageAccountId;
        }

        @CustomType.Setter
        public Builder archiveNameFormat(String archiveNameFormat) {
            if (archiveNameFormat == null) {
              throw new MissingRequiredPropertyException("EventHubCaptureDescriptionDestination", "archiveNameFormat");
            }
            this.archiveNameFormat = archiveNameFormat;
            return this;
        }
        @CustomType.Setter
        public Builder blobContainerName(String blobContainerName) {
            if (blobContainerName == null) {
              throw new MissingRequiredPropertyException("EventHubCaptureDescriptionDestination", "blobContainerName");
            }
            this.blobContainerName = blobContainerName;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("EventHubCaptureDescriptionDestination", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder storageAccountId(String storageAccountId) {
            if (storageAccountId == null) {
              throw new MissingRequiredPropertyException("EventHubCaptureDescriptionDestination", "storageAccountId");
            }
            this.storageAccountId = storageAccountId;
            return this;
        }
        public EventHubCaptureDescriptionDestination build() {
            final var _resultValue = new EventHubCaptureDescriptionDestination();
            _resultValue.archiveNameFormat = archiveNameFormat;
            _resultValue.blobContainerName = blobContainerName;
            _resultValue.name = name;
            _resultValue.storageAccountId = storageAccountId;
            return _resultValue;
        }
    }
}
