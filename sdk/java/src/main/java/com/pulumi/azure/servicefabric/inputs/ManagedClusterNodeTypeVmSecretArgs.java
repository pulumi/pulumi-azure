// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.servicefabric.inputs;

import com.pulumi.azure.servicefabric.inputs.ManagedClusterNodeTypeVmSecretCertificateArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ManagedClusterNodeTypeVmSecretArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedClusterNodeTypeVmSecretArgs Empty = new ManagedClusterNodeTypeVmSecretArgs();

    /**
     * One or more `certificates` blocks as defined above.
     * 
     */
    @Import(name="certificates", required=true)
    private Output<List<ManagedClusterNodeTypeVmSecretCertificateArgs>> certificates;

    /**
     * @return One or more `certificates` blocks as defined above.
     * 
     */
    public Output<List<ManagedClusterNodeTypeVmSecretCertificateArgs>> certificates() {
        return this.certificates;
    }

    /**
     * The ID of the Vault that contain the certificates.
     * 
     */
    @Import(name="vaultId", required=true)
    private Output<String> vaultId;

    /**
     * @return The ID of the Vault that contain the certificates.
     * 
     */
    public Output<String> vaultId() {
        return this.vaultId;
    }

    private ManagedClusterNodeTypeVmSecretArgs() {}

    private ManagedClusterNodeTypeVmSecretArgs(ManagedClusterNodeTypeVmSecretArgs $) {
        this.certificates = $.certificates;
        this.vaultId = $.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedClusterNodeTypeVmSecretArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedClusterNodeTypeVmSecretArgs $;

        public Builder() {
            $ = new ManagedClusterNodeTypeVmSecretArgs();
        }

        public Builder(ManagedClusterNodeTypeVmSecretArgs defaults) {
            $ = new ManagedClusterNodeTypeVmSecretArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificates One or more `certificates` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder certificates(Output<List<ManagedClusterNodeTypeVmSecretCertificateArgs>> certificates) {
            $.certificates = certificates;
            return this;
        }

        /**
         * @param certificates One or more `certificates` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder certificates(List<ManagedClusterNodeTypeVmSecretCertificateArgs> certificates) {
            return certificates(Output.of(certificates));
        }

        /**
         * @param certificates One or more `certificates` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder certificates(ManagedClusterNodeTypeVmSecretCertificateArgs... certificates) {
            return certificates(List.of(certificates));
        }

        /**
         * @param vaultId The ID of the Vault that contain the certificates.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(Output<String> vaultId) {
            $.vaultId = vaultId;
            return this;
        }

        /**
         * @param vaultId The ID of the Vault that contain the certificates.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(String vaultId) {
            return vaultId(Output.of(vaultId));
        }

        public ManagedClusterNodeTypeVmSecretArgs build() {
            if ($.certificates == null) {
                throw new MissingRequiredPropertyException("ManagedClusterNodeTypeVmSecretArgs", "certificates");
            }
            if ($.vaultId == null) {
                throw new MissingRequiredPropertyException("ManagedClusterNodeTypeVmSecretArgs", "vaultId");
            }
            return $;
        }
    }

}
