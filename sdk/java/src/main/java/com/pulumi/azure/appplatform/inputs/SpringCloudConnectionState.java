// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appplatform.inputs;

import com.pulumi.azure.appplatform.inputs.SpringCloudConnectionAuthenticationArgs;
import com.pulumi.azure.appplatform.inputs.SpringCloudConnectionSecretStoreArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SpringCloudConnectionState extends com.pulumi.resources.ResourceArgs {

    public static final SpringCloudConnectionState Empty = new SpringCloudConnectionState();

    /**
     * The authentication info. An `authentication` block as defined below.
     * 
     */
    @Import(name="authentication")
    private @Nullable Output<SpringCloudConnectionAuthenticationArgs> authentication;

    /**
     * @return The authentication info. An `authentication` block as defined below.
     * 
     */
    public Optional<Output<SpringCloudConnectionAuthenticationArgs>> authentication() {
        return Optional.ofNullable(this.authentication);
    }

    /**
     * The application client type. Possible values are `none`, `dotnet`, `java`, `python`, `go`, `php`, `ruby`, `django`, `nodejs` and `springBoot`. Defaults to `none`.
     * 
     */
    @Import(name="clientType")
    private @Nullable Output<String> clientType;

    /**
     * @return The application client type. Possible values are `none`, `dotnet`, `java`, `python`, `go`, `php`, `ruby`, `django`, `nodejs` and `springBoot`. Defaults to `none`.
     * 
     */
    public Optional<Output<String>> clientType() {
        return Optional.ofNullable(this.clientType);
    }

    /**
     * The name of the service connection. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the service connection. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * An option to store secret value in secure place. An `secret_store` block as defined below.
     * 
     */
    @Import(name="secretStore")
    private @Nullable Output<SpringCloudConnectionSecretStoreArgs> secretStore;

    /**
     * @return An option to store secret value in secure place. An `secret_store` block as defined below.
     * 
     */
    public Optional<Output<SpringCloudConnectionSecretStoreArgs>> secretStore() {
        return Optional.ofNullable(this.secretStore);
    }

    /**
     * The ID of the data source spring cloud. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="springCloudId")
    private @Nullable Output<String> springCloudId;

    /**
     * @return The ID of the data source spring cloud. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> springCloudId() {
        return Optional.ofNullable(this.springCloudId);
    }

    /**
     * The ID of the target resource. Changing this forces a new resource to be created. Possible target resources are `Postgres`, `PostgresFlexible`, `Mysql`, `Sql`, `Redis`, `RedisEnterprise`, `CosmosCassandra`, `CosmosGremlin`, `CosmosMongo`, `CosmosSql`, `CosmosTable`, `StorageBlob`, `StorageQueue`, `StorageFile`, `StorageTable`, `AppConfig`, `EventHub`, `ServiceBus`, `SignalR`, `WebPubSub`, `ConfluentKafka`. The integration guide can be found [here](https://learn.microsoft.com/en-us/azure/service-connector/how-to-integrate-postgres).
     * 
     */
    @Import(name="targetResourceId")
    private @Nullable Output<String> targetResourceId;

    /**
     * @return The ID of the target resource. Changing this forces a new resource to be created. Possible target resources are `Postgres`, `PostgresFlexible`, `Mysql`, `Sql`, `Redis`, `RedisEnterprise`, `CosmosCassandra`, `CosmosGremlin`, `CosmosMongo`, `CosmosSql`, `CosmosTable`, `StorageBlob`, `StorageQueue`, `StorageFile`, `StorageTable`, `AppConfig`, `EventHub`, `ServiceBus`, `SignalR`, `WebPubSub`, `ConfluentKafka`. The integration guide can be found [here](https://learn.microsoft.com/en-us/azure/service-connector/how-to-integrate-postgres).
     * 
     */
    public Optional<Output<String>> targetResourceId() {
        return Optional.ofNullable(this.targetResourceId);
    }

    /**
     * The type of the VNet solution. Possible values are `serviceEndpoint`, `privateLink`.
     * 
     */
    @Import(name="vnetSolution")
    private @Nullable Output<String> vnetSolution;

    /**
     * @return The type of the VNet solution. Possible values are `serviceEndpoint`, `privateLink`.
     * 
     */
    public Optional<Output<String>> vnetSolution() {
        return Optional.ofNullable(this.vnetSolution);
    }

    private SpringCloudConnectionState() {}

    private SpringCloudConnectionState(SpringCloudConnectionState $) {
        this.authentication = $.authentication;
        this.clientType = $.clientType;
        this.name = $.name;
        this.secretStore = $.secretStore;
        this.springCloudId = $.springCloudId;
        this.targetResourceId = $.targetResourceId;
        this.vnetSolution = $.vnetSolution;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SpringCloudConnectionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SpringCloudConnectionState $;

        public Builder() {
            $ = new SpringCloudConnectionState();
        }

        public Builder(SpringCloudConnectionState defaults) {
            $ = new SpringCloudConnectionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param authentication The authentication info. An `authentication` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder authentication(@Nullable Output<SpringCloudConnectionAuthenticationArgs> authentication) {
            $.authentication = authentication;
            return this;
        }

        /**
         * @param authentication The authentication info. An `authentication` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder authentication(SpringCloudConnectionAuthenticationArgs authentication) {
            return authentication(Output.of(authentication));
        }

        /**
         * @param clientType The application client type. Possible values are `none`, `dotnet`, `java`, `python`, `go`, `php`, `ruby`, `django`, `nodejs` and `springBoot`. Defaults to `none`.
         * 
         * @return builder
         * 
         */
        public Builder clientType(@Nullable Output<String> clientType) {
            $.clientType = clientType;
            return this;
        }

        /**
         * @param clientType The application client type. Possible values are `none`, `dotnet`, `java`, `python`, `go`, `php`, `ruby`, `django`, `nodejs` and `springBoot`. Defaults to `none`.
         * 
         * @return builder
         * 
         */
        public Builder clientType(String clientType) {
            return clientType(Output.of(clientType));
        }

        /**
         * @param name The name of the service connection. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the service connection. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param secretStore An option to store secret value in secure place. An `secret_store` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder secretStore(@Nullable Output<SpringCloudConnectionSecretStoreArgs> secretStore) {
            $.secretStore = secretStore;
            return this;
        }

        /**
         * @param secretStore An option to store secret value in secure place. An `secret_store` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder secretStore(SpringCloudConnectionSecretStoreArgs secretStore) {
            return secretStore(Output.of(secretStore));
        }

        /**
         * @param springCloudId The ID of the data source spring cloud. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder springCloudId(@Nullable Output<String> springCloudId) {
            $.springCloudId = springCloudId;
            return this;
        }

        /**
         * @param springCloudId The ID of the data source spring cloud. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder springCloudId(String springCloudId) {
            return springCloudId(Output.of(springCloudId));
        }

        /**
         * @param targetResourceId The ID of the target resource. Changing this forces a new resource to be created. Possible target resources are `Postgres`, `PostgresFlexible`, `Mysql`, `Sql`, `Redis`, `RedisEnterprise`, `CosmosCassandra`, `CosmosGremlin`, `CosmosMongo`, `CosmosSql`, `CosmosTable`, `StorageBlob`, `StorageQueue`, `StorageFile`, `StorageTable`, `AppConfig`, `EventHub`, `ServiceBus`, `SignalR`, `WebPubSub`, `ConfluentKafka`. The integration guide can be found [here](https://learn.microsoft.com/en-us/azure/service-connector/how-to-integrate-postgres).
         * 
         * @return builder
         * 
         */
        public Builder targetResourceId(@Nullable Output<String> targetResourceId) {
            $.targetResourceId = targetResourceId;
            return this;
        }

        /**
         * @param targetResourceId The ID of the target resource. Changing this forces a new resource to be created. Possible target resources are `Postgres`, `PostgresFlexible`, `Mysql`, `Sql`, `Redis`, `RedisEnterprise`, `CosmosCassandra`, `CosmosGremlin`, `CosmosMongo`, `CosmosSql`, `CosmosTable`, `StorageBlob`, `StorageQueue`, `StorageFile`, `StorageTable`, `AppConfig`, `EventHub`, `ServiceBus`, `SignalR`, `WebPubSub`, `ConfluentKafka`. The integration guide can be found [here](https://learn.microsoft.com/en-us/azure/service-connector/how-to-integrate-postgres).
         * 
         * @return builder
         * 
         */
        public Builder targetResourceId(String targetResourceId) {
            return targetResourceId(Output.of(targetResourceId));
        }

        /**
         * @param vnetSolution The type of the VNet solution. Possible values are `serviceEndpoint`, `privateLink`.
         * 
         * @return builder
         * 
         */
        public Builder vnetSolution(@Nullable Output<String> vnetSolution) {
            $.vnetSolution = vnetSolution;
            return this;
        }

        /**
         * @param vnetSolution The type of the VNet solution. Possible values are `serviceEndpoint`, `privateLink`.
         * 
         * @return builder
         * 
         */
        public Builder vnetSolution(String vnetSolution) {
            return vnetSolution(Output.of(vnetSolution));
        }

        public SpringCloudConnectionState build() {
            return $;
        }
    }

}
