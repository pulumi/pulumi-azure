// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mssql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobCredentialArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobCredentialArgs Empty = new JobCredentialArgs();

    /**
     * The ID of the Elastic Job Agent. Changing this forces a new Elastic Job Credential to be created.
     * 
     */
    @Import(name="jobAgentId", required=true)
    private Output<String> jobAgentId;

    /**
     * @return The ID of the Elastic Job Agent. Changing this forces a new Elastic Job Credential to be created.
     * 
     */
    public Output<String> jobAgentId() {
        return this.jobAgentId;
    }

    /**
     * The name which should be used for this Elastic Job Credential. Changing this forces a new Elastic Job Credential to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Elastic Job Credential. Changing this forces a new Elastic Job Credential to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The password part of the credential.
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return The password part of the credential.
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    /**
     * The username part of the credential.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return The username part of the credential.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private JobCredentialArgs() {}

    private JobCredentialArgs(JobCredentialArgs $) {
        this.jobAgentId = $.jobAgentId;
        this.name = $.name;
        this.password = $.password;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobCredentialArgs $;

        public Builder() {
            $ = new JobCredentialArgs();
        }

        public Builder(JobCredentialArgs defaults) {
            $ = new JobCredentialArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param jobAgentId The ID of the Elastic Job Agent. Changing this forces a new Elastic Job Credential to be created.
         * 
         * @return builder
         * 
         */
        public Builder jobAgentId(Output<String> jobAgentId) {
            $.jobAgentId = jobAgentId;
            return this;
        }

        /**
         * @param jobAgentId The ID of the Elastic Job Agent. Changing this forces a new Elastic Job Credential to be created.
         * 
         * @return builder
         * 
         */
        public Builder jobAgentId(String jobAgentId) {
            return jobAgentId(Output.of(jobAgentId));
        }

        /**
         * @param name The name which should be used for this Elastic Job Credential. Changing this forces a new Elastic Job Credential to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Elastic Job Credential. Changing this forces a new Elastic Job Credential to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param password The password part of the credential.
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password part of the credential.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param username The username part of the credential.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username part of the credential.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public JobCredentialArgs build() {
            if ($.jobAgentId == null) {
                throw new MissingRequiredPropertyException("JobCredentialArgs", "jobAgentId");
            }
            if ($.password == null) {
                throw new MissingRequiredPropertyException("JobCredentialArgs", "password");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("JobCredentialArgs", "username");
            }
            return $;
        }
    }

}
