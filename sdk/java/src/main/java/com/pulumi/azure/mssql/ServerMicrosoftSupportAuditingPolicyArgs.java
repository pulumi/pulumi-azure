// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mssql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerMicrosoftSupportAuditingPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerMicrosoftSupportAuditingPolicyArgs Empty = new ServerMicrosoftSupportAuditingPolicyArgs();

    /**
     * The blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all Microsoft support auditing logs.
     * 
     */
    @Import(name="blobStorageEndpoint")
    private @Nullable Output<String> blobStorageEndpoint;

    /**
     * @return The blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all Microsoft support auditing logs.
     * 
     */
    public Optional<Output<String>> blobStorageEndpoint() {
        return Optional.ofNullable(this.blobStorageEndpoint);
    }

    /**
     * Whether to enable the extended auditing policy. Possible values are `true` and `false`. Defaults to `true`.
     * 
     * -&gt;**NOTE:**  If `enabled` is `true`, `blob_storage_endpoint` or `log_monitoring_enabled` are required.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether to enable the extended auditing policy. Possible values are `true` and `false`. Defaults to `true`.
     * 
     * -&gt;**NOTE:**  If `enabled` is `true`, `blob_storage_endpoint` or `log_monitoring_enabled` are required.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its main database audit events to Azure Monitor. Defaults to `true`.
     * 
     */
    @Import(name="logMonitoringEnabled")
    private @Nullable Output<Boolean> logMonitoringEnabled;

    /**
     * @return Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its main database audit events to Azure Monitor. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> logMonitoringEnabled() {
        return Optional.ofNullable(this.logMonitoringEnabled);
    }

    /**
     * The ID of the SQL Server to set the extended auditing policy. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="serverId", required=true)
    private Output<String> serverId;

    /**
     * @return The ID of the SQL Server to set the extended auditing policy. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> serverId() {
        return this.serverId;
    }

    /**
     * The access key to use for the auditing storage account.
     * 
     */
    @Import(name="storageAccountAccessKey")
    private @Nullable Output<String> storageAccountAccessKey;

    /**
     * @return The access key to use for the auditing storage account.
     * 
     */
    public Optional<Output<String>> storageAccountAccessKey() {
        return Optional.ofNullable(this.storageAccountAccessKey);
    }

    /**
     * The ID of the Subscription containing the Storage Account.
     * 
     */
    @Import(name="storageAccountSubscriptionId")
    private @Nullable Output<String> storageAccountSubscriptionId;

    /**
     * @return The ID of the Subscription containing the Storage Account.
     * 
     */
    public Optional<Output<String>> storageAccountSubscriptionId() {
        return Optional.ofNullable(this.storageAccountSubscriptionId);
    }

    private ServerMicrosoftSupportAuditingPolicyArgs() {}

    private ServerMicrosoftSupportAuditingPolicyArgs(ServerMicrosoftSupportAuditingPolicyArgs $) {
        this.blobStorageEndpoint = $.blobStorageEndpoint;
        this.enabled = $.enabled;
        this.logMonitoringEnabled = $.logMonitoringEnabled;
        this.serverId = $.serverId;
        this.storageAccountAccessKey = $.storageAccountAccessKey;
        this.storageAccountSubscriptionId = $.storageAccountSubscriptionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerMicrosoftSupportAuditingPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerMicrosoftSupportAuditingPolicyArgs $;

        public Builder() {
            $ = new ServerMicrosoftSupportAuditingPolicyArgs();
        }

        public Builder(ServerMicrosoftSupportAuditingPolicyArgs defaults) {
            $ = new ServerMicrosoftSupportAuditingPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param blobStorageEndpoint The blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all Microsoft support auditing logs.
         * 
         * @return builder
         * 
         */
        public Builder blobStorageEndpoint(@Nullable Output<String> blobStorageEndpoint) {
            $.blobStorageEndpoint = blobStorageEndpoint;
            return this;
        }

        /**
         * @param blobStorageEndpoint The blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all Microsoft support auditing logs.
         * 
         * @return builder
         * 
         */
        public Builder blobStorageEndpoint(String blobStorageEndpoint) {
            return blobStorageEndpoint(Output.of(blobStorageEndpoint));
        }

        /**
         * @param enabled Whether to enable the extended auditing policy. Possible values are `true` and `false`. Defaults to `true`.
         * 
         * -&gt;**NOTE:**  If `enabled` is `true`, `blob_storage_endpoint` or `log_monitoring_enabled` are required.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether to enable the extended auditing policy. Possible values are `true` and `false`. Defaults to `true`.
         * 
         * -&gt;**NOTE:**  If `enabled` is `true`, `blob_storage_endpoint` or `log_monitoring_enabled` are required.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param logMonitoringEnabled Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its main database audit events to Azure Monitor. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder logMonitoringEnabled(@Nullable Output<Boolean> logMonitoringEnabled) {
            $.logMonitoringEnabled = logMonitoringEnabled;
            return this;
        }

        /**
         * @param logMonitoringEnabled Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its main database audit events to Azure Monitor. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder logMonitoringEnabled(Boolean logMonitoringEnabled) {
            return logMonitoringEnabled(Output.of(logMonitoringEnabled));
        }

        /**
         * @param serverId The ID of the SQL Server to set the extended auditing policy. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder serverId(Output<String> serverId) {
            $.serverId = serverId;
            return this;
        }

        /**
         * @param serverId The ID of the SQL Server to set the extended auditing policy. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder serverId(String serverId) {
            return serverId(Output.of(serverId));
        }

        /**
         * @param storageAccountAccessKey The access key to use for the auditing storage account.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountAccessKey(@Nullable Output<String> storageAccountAccessKey) {
            $.storageAccountAccessKey = storageAccountAccessKey;
            return this;
        }

        /**
         * @param storageAccountAccessKey The access key to use for the auditing storage account.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountAccessKey(String storageAccountAccessKey) {
            return storageAccountAccessKey(Output.of(storageAccountAccessKey));
        }

        /**
         * @param storageAccountSubscriptionId The ID of the Subscription containing the Storage Account.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountSubscriptionId(@Nullable Output<String> storageAccountSubscriptionId) {
            $.storageAccountSubscriptionId = storageAccountSubscriptionId;
            return this;
        }

        /**
         * @param storageAccountSubscriptionId The ID of the Subscription containing the Storage Account.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountSubscriptionId(String storageAccountSubscriptionId) {
            return storageAccountSubscriptionId(Output.of(storageAccountSubscriptionId));
        }

        public ServerMicrosoftSupportAuditingPolicyArgs build() {
            if ($.serverId == null) {
                throw new MissingRequiredPropertyException("ServerMicrosoftSupportAuditingPolicyArgs", "serverId");
            }
            return $;
        }
    }

}
