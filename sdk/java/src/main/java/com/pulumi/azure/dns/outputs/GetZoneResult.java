// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.dns.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetZoneResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Maximum number of Records in the zone.
     * 
     */
    private Integer maxNumberOfRecordSets;
    private String name;
    /**
     * @return A list of values that make up the NS record for the zone.
     * 
     */
    private List<String> nameServers;
    /**
     * @return The number of records already in the zone.
     * 
     */
    private Integer numberOfRecordSets;
    private String resourceGroupName;
    /**
     * @return A mapping of tags assigned to the DNS Zone.
     * 
     */
    private Map<String,String> tags;

    private GetZoneResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Maximum number of Records in the zone.
     * 
     */
    public Integer maxNumberOfRecordSets() {
        return this.maxNumberOfRecordSets;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return A list of values that make up the NS record for the zone.
     * 
     */
    public List<String> nameServers() {
        return this.nameServers;
    }
    /**
     * @return The number of records already in the zone.
     * 
     */
    public Integer numberOfRecordSets() {
        return this.numberOfRecordSets;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return A mapping of tags assigned to the DNS Zone.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetZoneResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private Integer maxNumberOfRecordSets;
        private String name;
        private List<String> nameServers;
        private Integer numberOfRecordSets;
        private String resourceGroupName;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetZoneResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.maxNumberOfRecordSets = defaults.maxNumberOfRecordSets;
    	      this.name = defaults.name;
    	      this.nameServers = defaults.nameServers;
    	      this.numberOfRecordSets = defaults.numberOfRecordSets;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder maxNumberOfRecordSets(Integer maxNumberOfRecordSets) {
            this.maxNumberOfRecordSets = Objects.requireNonNull(maxNumberOfRecordSets);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder nameServers(List<String> nameServers) {
            this.nameServers = Objects.requireNonNull(nameServers);
            return this;
        }
        public Builder nameServers(String... nameServers) {
            return nameServers(List.of(nameServers));
        }
        @CustomType.Setter
        public Builder numberOfRecordSets(Integer numberOfRecordSets) {
            this.numberOfRecordSets = Objects.requireNonNull(numberOfRecordSets);
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public GetZoneResult build() {
            final var o = new GetZoneResult();
            o.id = id;
            o.maxNumberOfRecordSets = maxNumberOfRecordSets;
            o.name = name;
            o.nameServers = nameServers;
            o.numberOfRecordSets = numberOfRecordSets;
            o.resourceGroupName = resourceGroupName;
            o.tags = tags;
            return o;
        }
    }
}
