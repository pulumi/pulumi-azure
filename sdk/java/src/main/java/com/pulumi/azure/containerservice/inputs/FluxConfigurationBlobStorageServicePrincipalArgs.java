// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FluxConfigurationBlobStorageServicePrincipalArgs extends com.pulumi.resources.ResourceArgs {

    public static final FluxConfigurationBlobStorageServicePrincipalArgs Empty = new FluxConfigurationBlobStorageServicePrincipalArgs();

    /**
     * Base64-encoded certificate used to authenticate a Service Principal .
     * 
     */
    @Import(name="clientCertificateBase64")
    private @Nullable Output<String> clientCertificateBase64;

    /**
     * @return Base64-encoded certificate used to authenticate a Service Principal .
     * 
     */
    public Optional<Output<String>> clientCertificateBase64() {
        return Optional.ofNullable(this.clientCertificateBase64);
    }

    /**
     * Specifies the password for the certificate used to authenticate a Service Principal .
     * 
     */
    @Import(name="clientCertificatePassword")
    private @Nullable Output<String> clientCertificatePassword;

    /**
     * @return Specifies the password for the certificate used to authenticate a Service Principal .
     * 
     */
    public Optional<Output<String>> clientCertificatePassword() {
        return Optional.ofNullable(this.clientCertificatePassword);
    }

    /**
     * Specifies whether to include x5c header in client claims when acquiring a token to enable subject name / issuer based authentication for the client certificate.
     * 
     */
    @Import(name="clientCertificateSendChain")
    private @Nullable Output<Boolean> clientCertificateSendChain;

    /**
     * @return Specifies whether to include x5c header in client claims when acquiring a token to enable subject name / issuer based authentication for the client certificate.
     * 
     */
    public Optional<Output<Boolean>> clientCertificateSendChain() {
        return Optional.ofNullable(this.clientCertificateSendChain);
    }

    /**
     * Specifies the client ID for authenticating a Service Principal.
     * 
     */
    @Import(name="clientId", required=true)
    private Output<String> clientId;

    /**
     * @return Specifies the client ID for authenticating a Service Principal.
     * 
     */
    public Output<String> clientId() {
        return this.clientId;
    }

    /**
     * Specifies the client secret for authenticating a Service Principal.
     * 
     */
    @Import(name="clientSecret")
    private @Nullable Output<String> clientSecret;

    /**
     * @return Specifies the client secret for authenticating a Service Principal.
     * 
     */
    public Optional<Output<String>> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * Specifies the tenant ID for authenticating a Service Principal.
     * 
     */
    @Import(name="tenantId", required=true)
    private Output<String> tenantId;

    /**
     * @return Specifies the tenant ID for authenticating a Service Principal.
     * 
     */
    public Output<String> tenantId() {
        return this.tenantId;
    }

    private FluxConfigurationBlobStorageServicePrincipalArgs() {}

    private FluxConfigurationBlobStorageServicePrincipalArgs(FluxConfigurationBlobStorageServicePrincipalArgs $) {
        this.clientCertificateBase64 = $.clientCertificateBase64;
        this.clientCertificatePassword = $.clientCertificatePassword;
        this.clientCertificateSendChain = $.clientCertificateSendChain;
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FluxConfigurationBlobStorageServicePrincipalArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FluxConfigurationBlobStorageServicePrincipalArgs $;

        public Builder() {
            $ = new FluxConfigurationBlobStorageServicePrincipalArgs();
        }

        public Builder(FluxConfigurationBlobStorageServicePrincipalArgs defaults) {
            $ = new FluxConfigurationBlobStorageServicePrincipalArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientCertificateBase64 Base64-encoded certificate used to authenticate a Service Principal .
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateBase64(@Nullable Output<String> clientCertificateBase64) {
            $.clientCertificateBase64 = clientCertificateBase64;
            return this;
        }

        /**
         * @param clientCertificateBase64 Base64-encoded certificate used to authenticate a Service Principal .
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateBase64(String clientCertificateBase64) {
            return clientCertificateBase64(Output.of(clientCertificateBase64));
        }

        /**
         * @param clientCertificatePassword Specifies the password for the certificate used to authenticate a Service Principal .
         * 
         * @return builder
         * 
         */
        public Builder clientCertificatePassword(@Nullable Output<String> clientCertificatePassword) {
            $.clientCertificatePassword = clientCertificatePassword;
            return this;
        }

        /**
         * @param clientCertificatePassword Specifies the password for the certificate used to authenticate a Service Principal .
         * 
         * @return builder
         * 
         */
        public Builder clientCertificatePassword(String clientCertificatePassword) {
            return clientCertificatePassword(Output.of(clientCertificatePassword));
        }

        /**
         * @param clientCertificateSendChain Specifies whether to include x5c header in client claims when acquiring a token to enable subject name / issuer based authentication for the client certificate.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateSendChain(@Nullable Output<Boolean> clientCertificateSendChain) {
            $.clientCertificateSendChain = clientCertificateSendChain;
            return this;
        }

        /**
         * @param clientCertificateSendChain Specifies whether to include x5c header in client claims when acquiring a token to enable subject name / issuer based authentication for the client certificate.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateSendChain(Boolean clientCertificateSendChain) {
            return clientCertificateSendChain(Output.of(clientCertificateSendChain));
        }

        /**
         * @param clientId Specifies the client ID for authenticating a Service Principal.
         * 
         * @return builder
         * 
         */
        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId Specifies the client ID for authenticating a Service Principal.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecret Specifies the client secret for authenticating a Service Principal.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(@Nullable Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret Specifies the client secret for authenticating a Service Principal.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        /**
         * @param tenantId Specifies the tenant ID for authenticating a Service Principal.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId Specifies the tenant ID for authenticating a Service Principal.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public FluxConfigurationBlobStorageServicePrincipalArgs build() {
            if ($.clientId == null) {
                throw new MissingRequiredPropertyException("FluxConfigurationBlobStorageServicePrincipalArgs", "clientId");
            }
            if ($.tenantId == null) {
                throw new MissingRequiredPropertyException("FluxConfigurationBlobStorageServicePrincipalArgs", "tenantId");
            }
            return $;
        }
    }

}
