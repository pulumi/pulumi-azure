// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AccountFilterPresentationTimeRange {
    /**
     * @return The absolute end time boundary. Applies to Video on Demand (VoD).
     * For the Live Streaming presentation, it is silently ignored and applied when the presentation ends and the stream becomes VoD. This is a long value that represents an absolute end point of the presentation, rounded to the closest next GOP start. The unit is defined by `unit_timescale_in_milliseconds`, so an `end_in_units` of 180 would be for 3 minutes. Use `start_in_units` and `end_in_units` to trim the fragments that will be in the playlist (manifest). For example, `start_in_units` set to 20 and `end_in_units` set to 60 using `unit_timescale_in_milliseconds` in 1000 will generate a playlist that contains fragments from between 20 seconds and 60 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
     * 
     */
    private @Nullable Integer endInUnits;
    /**
     * @return Indicates whether the `end_in_units` property must be present. If true, `end_in_units` must be specified or a bad request code is returned. Applies to Live Streaming only. Allowed values: `false`, `true`.
     * 
     */
    private @Nullable Boolean forceEnd;
    /**
     * @return The relative to end right edge. Applies to Live Streaming only.
     * This value defines the latest live position that a client can seek to. Using this property, you can delay live playback position and create a server-side buffer for players. The unit is defined by `unit_timescale_in_milliseconds`. The maximum live back off duration is 300 seconds. For example, a value of 20 means that the latest available content is 20 seconds delayed from the real live edge.
     * 
     */
    private @Nullable Integer liveBackoffInUnits;
    /**
     * @return The relative to end sliding window. Applies to Live Streaming only. Use `presentation_window_in_units` to apply a sliding window of fragments to include in a playlist. The unit is defined by `unit_timescale_in_milliseconds`. For example, set `presentation_window_in_units` to 120 to apply a two-minute sliding window. Media within 2 minutes of the live edge will be included in the playlist. If a fragment straddles the boundary, the entire fragment will be included in the playlist. The minimum presentation window duration is 60 seconds.
     * 
     */
    private @Nullable Integer presentationWindowInUnits;
    /**
     * @return The absolute start time boundary. Applies to Video on Demand (VoD) or Live Streaming. This is a long value that represents an absolute start point of the stream. The value gets rounded to the closest next GOP start. The unit is defined by `unit_timescale_in_milliseconds`, so a `start_in_units` of 15 would be for 15 seconds. Use `start_in_units` and `end_in_units` to trim the fragments that will be in the playlist (manifest). For example, `start_in_units` set to 20 and `end_in_units` set to 60 using `unit_timescale_in_milliseconds` in 1000 will generate a playlist that contains fragments from between 20 seconds and 60 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
     * 
     */
    private @Nullable Integer startInUnits;
    /**
     * @return Specified as the number of milliseconds in one unit timescale. For example, if you want to set a `start_in_units` at 30 seconds, you would use a value of 30 when using the `unit_timescale_in_milliseconds` in 1000. Or if you want to set `start_in_units` in 30 milliseconds, you would use a value of 30 when using the `unit_timescale_in_milliseconds` in 1. Applies timescale to `start_in_units`, `start_timescale` and `presentation_window_in_timescale` and `live_backoff_in_timescale`.
     * 
     */
    private Integer unitTimescaleInMilliseconds;

    private AccountFilterPresentationTimeRange() {}
    /**
     * @return The absolute end time boundary. Applies to Video on Demand (VoD).
     * For the Live Streaming presentation, it is silently ignored and applied when the presentation ends and the stream becomes VoD. This is a long value that represents an absolute end point of the presentation, rounded to the closest next GOP start. The unit is defined by `unit_timescale_in_milliseconds`, so an `end_in_units` of 180 would be for 3 minutes. Use `start_in_units` and `end_in_units` to trim the fragments that will be in the playlist (manifest). For example, `start_in_units` set to 20 and `end_in_units` set to 60 using `unit_timescale_in_milliseconds` in 1000 will generate a playlist that contains fragments from between 20 seconds and 60 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
     * 
     */
    public Optional<Integer> endInUnits() {
        return Optional.ofNullable(this.endInUnits);
    }
    /**
     * @return Indicates whether the `end_in_units` property must be present. If true, `end_in_units` must be specified or a bad request code is returned. Applies to Live Streaming only. Allowed values: `false`, `true`.
     * 
     */
    public Optional<Boolean> forceEnd() {
        return Optional.ofNullable(this.forceEnd);
    }
    /**
     * @return The relative to end right edge. Applies to Live Streaming only.
     * This value defines the latest live position that a client can seek to. Using this property, you can delay live playback position and create a server-side buffer for players. The unit is defined by `unit_timescale_in_milliseconds`. The maximum live back off duration is 300 seconds. For example, a value of 20 means that the latest available content is 20 seconds delayed from the real live edge.
     * 
     */
    public Optional<Integer> liveBackoffInUnits() {
        return Optional.ofNullable(this.liveBackoffInUnits);
    }
    /**
     * @return The relative to end sliding window. Applies to Live Streaming only. Use `presentation_window_in_units` to apply a sliding window of fragments to include in a playlist. The unit is defined by `unit_timescale_in_milliseconds`. For example, set `presentation_window_in_units` to 120 to apply a two-minute sliding window. Media within 2 minutes of the live edge will be included in the playlist. If a fragment straddles the boundary, the entire fragment will be included in the playlist. The minimum presentation window duration is 60 seconds.
     * 
     */
    public Optional<Integer> presentationWindowInUnits() {
        return Optional.ofNullable(this.presentationWindowInUnits);
    }
    /**
     * @return The absolute start time boundary. Applies to Video on Demand (VoD) or Live Streaming. This is a long value that represents an absolute start point of the stream. The value gets rounded to the closest next GOP start. The unit is defined by `unit_timescale_in_milliseconds`, so a `start_in_units` of 15 would be for 15 seconds. Use `start_in_units` and `end_in_units` to trim the fragments that will be in the playlist (manifest). For example, `start_in_units` set to 20 and `end_in_units` set to 60 using `unit_timescale_in_milliseconds` in 1000 will generate a playlist that contains fragments from between 20 seconds and 60 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
     * 
     */
    public Optional<Integer> startInUnits() {
        return Optional.ofNullable(this.startInUnits);
    }
    /**
     * @return Specified as the number of milliseconds in one unit timescale. For example, if you want to set a `start_in_units` at 30 seconds, you would use a value of 30 when using the `unit_timescale_in_milliseconds` in 1000. Or if you want to set `start_in_units` in 30 milliseconds, you would use a value of 30 when using the `unit_timescale_in_milliseconds` in 1. Applies timescale to `start_in_units`, `start_timescale` and `presentation_window_in_timescale` and `live_backoff_in_timescale`.
     * 
     */
    public Integer unitTimescaleInMilliseconds() {
        return this.unitTimescaleInMilliseconds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccountFilterPresentationTimeRange defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer endInUnits;
        private @Nullable Boolean forceEnd;
        private @Nullable Integer liveBackoffInUnits;
        private @Nullable Integer presentationWindowInUnits;
        private @Nullable Integer startInUnits;
        private Integer unitTimescaleInMilliseconds;
        public Builder() {}
        public Builder(AccountFilterPresentationTimeRange defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endInUnits = defaults.endInUnits;
    	      this.forceEnd = defaults.forceEnd;
    	      this.liveBackoffInUnits = defaults.liveBackoffInUnits;
    	      this.presentationWindowInUnits = defaults.presentationWindowInUnits;
    	      this.startInUnits = defaults.startInUnits;
    	      this.unitTimescaleInMilliseconds = defaults.unitTimescaleInMilliseconds;
        }

        @CustomType.Setter
        public Builder endInUnits(@Nullable Integer endInUnits) {

            this.endInUnits = endInUnits;
            return this;
        }
        @CustomType.Setter
        public Builder forceEnd(@Nullable Boolean forceEnd) {

            this.forceEnd = forceEnd;
            return this;
        }
        @CustomType.Setter
        public Builder liveBackoffInUnits(@Nullable Integer liveBackoffInUnits) {

            this.liveBackoffInUnits = liveBackoffInUnits;
            return this;
        }
        @CustomType.Setter
        public Builder presentationWindowInUnits(@Nullable Integer presentationWindowInUnits) {

            this.presentationWindowInUnits = presentationWindowInUnits;
            return this;
        }
        @CustomType.Setter
        public Builder startInUnits(@Nullable Integer startInUnits) {

            this.startInUnits = startInUnits;
            return this;
        }
        @CustomType.Setter
        public Builder unitTimescaleInMilliseconds(Integer unitTimescaleInMilliseconds) {
            if (unitTimescaleInMilliseconds == null) {
              throw new MissingRequiredPropertyException("AccountFilterPresentationTimeRange", "unitTimescaleInMilliseconds");
            }
            this.unitTimescaleInMilliseconds = unitTimescaleInMilliseconds;
            return this;
        }
        public AccountFilterPresentationTimeRange build() {
            final var _resultValue = new AccountFilterPresentationTimeRange();
            _resultValue.endInUnits = endInUnits;
            _resultValue.forceEnd = forceEnd;
            _resultValue.liveBackoffInUnits = liveBackoffInUnits;
            _resultValue.presentationWindowInUnits = presentationWindowInUnits;
            _resultValue.startInUnits = startInUnits;
            _resultValue.unitTimescaleInMilliseconds = unitTimescaleInMilliseconds;
            return _resultValue;
        }
    }
}
