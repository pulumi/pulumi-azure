// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.oracle.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDbServersDbServer {
    /**
     * @return The list of [OCIDs](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the Autonomous Virtual Machines associated with the DB Server.
     * 
     */
    private List<String> autonomousVirtualMachineDs;
    /**
     * @return The list of [OCIDs](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the Autonomous VM Clusters associated with the DB Server.
     * 
     */
    private List<String> autonomousVmClusterIds;
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The number of CPU cores enabled on the DB Server.
     * 
     */
    private Integer cpuCoreCount;
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the Db nodes associated with the DB Server.
     * 
     */
    private List<String> dbNodeIds;
    /**
     * @return The allocated local node storage in GBs on the DB Server.
     * 
     */
    private Integer dbNodeStorageSizeInGbs;
    /**
     * @return The user-friendly name for the DB Server. The name does not need to be unique.
     * 
     */
    private String displayName;
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the Exadata infrastructure.
     * 
     */
    private String exadataInfrastructureId;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The current state of the DB Server.
     * 
     */
    private String lifecycleState;
    /**
     * @return The total number of CPU cores available.
     * 
     */
    private Integer maxCpuCount;
    /**
     * @return The total local node storage available in GBs.
     * 
     */
    private Integer maxDbNodeStorageInGbs;
    /**
     * @return The total memory available in GBs.
     * 
     */
    private Integer maxMemoryInGbs;
    /**
     * @return The allocated memory in GBs on the DB Server.
     * 
     */
    private Integer memorySizeInGbs;
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the DB Server.
     * 
     */
    private String ocid;
    /**
     * @return The shape of the DB Server. The shape determines the amount of CPU, storage, and memory resources available.
     * 
     */
    private String shape;
    /**
     * @return The date and time that the DB Server was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the VM Clusters associated with the DB Server.
     * 
     */
    private List<String> vmClusterIds;

    private GetDbServersDbServer() {}
    /**
     * @return The list of [OCIDs](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the Autonomous Virtual Machines associated with the DB Server.
     * 
     */
    public List<String> autonomousVirtualMachineDs() {
        return this.autonomousVirtualMachineDs;
    }
    /**
     * @return The list of [OCIDs](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the Autonomous VM Clusters associated with the DB Server.
     * 
     */
    public List<String> autonomousVmClusterIds() {
        return this.autonomousVmClusterIds;
    }
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The number of CPU cores enabled on the DB Server.
     * 
     */
    public Integer cpuCoreCount() {
        return this.cpuCoreCount;
    }
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the Db nodes associated with the DB Server.
     * 
     */
    public List<String> dbNodeIds() {
        return this.dbNodeIds;
    }
    /**
     * @return The allocated local node storage in GBs on the DB Server.
     * 
     */
    public Integer dbNodeStorageSizeInGbs() {
        return this.dbNodeStorageSizeInGbs;
    }
    /**
     * @return The user-friendly name for the DB Server. The name does not need to be unique.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the Exadata infrastructure.
     * 
     */
    public String exadataInfrastructureId() {
        return this.exadataInfrastructureId;
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The current state of the DB Server.
     * 
     */
    public String lifecycleState() {
        return this.lifecycleState;
    }
    /**
     * @return The total number of CPU cores available.
     * 
     */
    public Integer maxCpuCount() {
        return this.maxCpuCount;
    }
    /**
     * @return The total local node storage available in GBs.
     * 
     */
    public Integer maxDbNodeStorageInGbs() {
        return this.maxDbNodeStorageInGbs;
    }
    /**
     * @return The total memory available in GBs.
     * 
     */
    public Integer maxMemoryInGbs() {
        return this.maxMemoryInGbs;
    }
    /**
     * @return The allocated memory in GBs on the DB Server.
     * 
     */
    public Integer memorySizeInGbs() {
        return this.memorySizeInGbs;
    }
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the DB Server.
     * 
     */
    public String ocid() {
        return this.ocid;
    }
    /**
     * @return The shape of the DB Server. The shape determines the amount of CPU, storage, and memory resources available.
     * 
     */
    public String shape() {
        return this.shape;
    }
    /**
     * @return The date and time that the DB Server was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the VM Clusters associated with the DB Server.
     * 
     */
    public List<String> vmClusterIds() {
        return this.vmClusterIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbServersDbServer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> autonomousVirtualMachineDs;
        private List<String> autonomousVmClusterIds;
        private String compartmentId;
        private Integer cpuCoreCount;
        private List<String> dbNodeIds;
        private Integer dbNodeStorageSizeInGbs;
        private String displayName;
        private String exadataInfrastructureId;
        private String lifecycleDetails;
        private String lifecycleState;
        private Integer maxCpuCount;
        private Integer maxDbNodeStorageInGbs;
        private Integer maxMemoryInGbs;
        private Integer memorySizeInGbs;
        private String ocid;
        private String shape;
        private String timeCreated;
        private List<String> vmClusterIds;
        public Builder() {}
        public Builder(GetDbServersDbServer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autonomousVirtualMachineDs = defaults.autonomousVirtualMachineDs;
    	      this.autonomousVmClusterIds = defaults.autonomousVmClusterIds;
    	      this.compartmentId = defaults.compartmentId;
    	      this.cpuCoreCount = defaults.cpuCoreCount;
    	      this.dbNodeIds = defaults.dbNodeIds;
    	      this.dbNodeStorageSizeInGbs = defaults.dbNodeStorageSizeInGbs;
    	      this.displayName = defaults.displayName;
    	      this.exadataInfrastructureId = defaults.exadataInfrastructureId;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.lifecycleState = defaults.lifecycleState;
    	      this.maxCpuCount = defaults.maxCpuCount;
    	      this.maxDbNodeStorageInGbs = defaults.maxDbNodeStorageInGbs;
    	      this.maxMemoryInGbs = defaults.maxMemoryInGbs;
    	      this.memorySizeInGbs = defaults.memorySizeInGbs;
    	      this.ocid = defaults.ocid;
    	      this.shape = defaults.shape;
    	      this.timeCreated = defaults.timeCreated;
    	      this.vmClusterIds = defaults.vmClusterIds;
        }

        @CustomType.Setter
        public Builder autonomousVirtualMachineDs(List<String> autonomousVirtualMachineDs) {
            if (autonomousVirtualMachineDs == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "autonomousVirtualMachineDs");
            }
            this.autonomousVirtualMachineDs = autonomousVirtualMachineDs;
            return this;
        }
        public Builder autonomousVirtualMachineDs(String... autonomousVirtualMachineDs) {
            return autonomousVirtualMachineDs(List.of(autonomousVirtualMachineDs));
        }
        @CustomType.Setter
        public Builder autonomousVmClusterIds(List<String> autonomousVmClusterIds) {
            if (autonomousVmClusterIds == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "autonomousVmClusterIds");
            }
            this.autonomousVmClusterIds = autonomousVmClusterIds;
            return this;
        }
        public Builder autonomousVmClusterIds(String... autonomousVmClusterIds) {
            return autonomousVmClusterIds(List.of(autonomousVmClusterIds));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder cpuCoreCount(Integer cpuCoreCount) {
            if (cpuCoreCount == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "cpuCoreCount");
            }
            this.cpuCoreCount = cpuCoreCount;
            return this;
        }
        @CustomType.Setter
        public Builder dbNodeIds(List<String> dbNodeIds) {
            if (dbNodeIds == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "dbNodeIds");
            }
            this.dbNodeIds = dbNodeIds;
            return this;
        }
        public Builder dbNodeIds(String... dbNodeIds) {
            return dbNodeIds(List.of(dbNodeIds));
        }
        @CustomType.Setter
        public Builder dbNodeStorageSizeInGbs(Integer dbNodeStorageSizeInGbs) {
            if (dbNodeStorageSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "dbNodeStorageSizeInGbs");
            }
            this.dbNodeStorageSizeInGbs = dbNodeStorageSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder exadataInfrastructureId(String exadataInfrastructureId) {
            if (exadataInfrastructureId == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "exadataInfrastructureId");
            }
            this.exadataInfrastructureId = exadataInfrastructureId;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleState(String lifecycleState) {
            if (lifecycleState == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "lifecycleState");
            }
            this.lifecycleState = lifecycleState;
            return this;
        }
        @CustomType.Setter
        public Builder maxCpuCount(Integer maxCpuCount) {
            if (maxCpuCount == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "maxCpuCount");
            }
            this.maxCpuCount = maxCpuCount;
            return this;
        }
        @CustomType.Setter
        public Builder maxDbNodeStorageInGbs(Integer maxDbNodeStorageInGbs) {
            if (maxDbNodeStorageInGbs == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "maxDbNodeStorageInGbs");
            }
            this.maxDbNodeStorageInGbs = maxDbNodeStorageInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder maxMemoryInGbs(Integer maxMemoryInGbs) {
            if (maxMemoryInGbs == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "maxMemoryInGbs");
            }
            this.maxMemoryInGbs = maxMemoryInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder memorySizeInGbs(Integer memorySizeInGbs) {
            if (memorySizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "memorySizeInGbs");
            }
            this.memorySizeInGbs = memorySizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder ocid(String ocid) {
            if (ocid == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "ocid");
            }
            this.ocid = ocid;
            return this;
        }
        @CustomType.Setter
        public Builder shape(String shape) {
            if (shape == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "shape");
            }
            this.shape = shape;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder vmClusterIds(List<String> vmClusterIds) {
            if (vmClusterIds == null) {
              throw new MissingRequiredPropertyException("GetDbServersDbServer", "vmClusterIds");
            }
            this.vmClusterIds = vmClusterIds;
            return this;
        }
        public Builder vmClusterIds(String... vmClusterIds) {
            return vmClusterIds(List.of(vmClusterIds));
        }
        public GetDbServersDbServer build() {
            final var _resultValue = new GetDbServersDbServer();
            _resultValue.autonomousVirtualMachineDs = autonomousVirtualMachineDs;
            _resultValue.autonomousVmClusterIds = autonomousVmClusterIds;
            _resultValue.compartmentId = compartmentId;
            _resultValue.cpuCoreCount = cpuCoreCount;
            _resultValue.dbNodeIds = dbNodeIds;
            _resultValue.dbNodeStorageSizeInGbs = dbNodeStorageSizeInGbs;
            _resultValue.displayName = displayName;
            _resultValue.exadataInfrastructureId = exadataInfrastructureId;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.lifecycleState = lifecycleState;
            _resultValue.maxCpuCount = maxCpuCount;
            _resultValue.maxDbNodeStorageInGbs = maxDbNodeStorageInGbs;
            _resultValue.maxMemoryInGbs = maxMemoryInGbs;
            _resultValue.memorySizeInGbs = memorySizeInGbs;
            _resultValue.ocid = ocid;
            _resultValue.shape = shape;
            _resultValue.timeCreated = timeCreated;
            _resultValue.vmClusterIds = vmClusterIds;
            return _resultValue;
        }
    }
}
