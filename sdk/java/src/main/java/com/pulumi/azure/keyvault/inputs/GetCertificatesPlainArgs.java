// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.keyvault.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCertificatesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetCertificatesPlainArgs Empty = new GetCertificatesPlainArgs();

    /**
     * Specifies whether to include certificates which are not completely provisioned. Defaults to true.
     * 
     */
    @Import(name="includePending")
    private @Nullable Boolean includePending;

    /**
     * @return Specifies whether to include certificates which are not completely provisioned. Defaults to true.
     * 
     */
    public Optional<Boolean> includePending() {
        return Optional.ofNullable(this.includePending);
    }

    /**
     * Specifies the ID of the Key Vault instance to fetch certificate names from, available on the `azure.keyvault.KeyVault` Data Source / Resource.
     * 
     * **NOTE:** The vault must be in the same subscription as the provider. If the vault is in another subscription, you must create an aliased provider for that subscription.
     * 
     */
    @Import(name="keyVaultId", required=true)
    private String keyVaultId;

    /**
     * @return Specifies the ID of the Key Vault instance to fetch certificate names from, available on the `azure.keyvault.KeyVault` Data Source / Resource.
     * 
     * **NOTE:** The vault must be in the same subscription as the provider. If the vault is in another subscription, you must create an aliased provider for that subscription.
     * 
     */
    public String keyVaultId() {
        return this.keyVaultId;
    }

    private GetCertificatesPlainArgs() {}

    private GetCertificatesPlainArgs(GetCertificatesPlainArgs $) {
        this.includePending = $.includePending;
        this.keyVaultId = $.keyVaultId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCertificatesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCertificatesPlainArgs $;

        public Builder() {
            $ = new GetCertificatesPlainArgs();
        }

        public Builder(GetCertificatesPlainArgs defaults) {
            $ = new GetCertificatesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param includePending Specifies whether to include certificates which are not completely provisioned. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder includePending(@Nullable Boolean includePending) {
            $.includePending = includePending;
            return this;
        }

        /**
         * @param keyVaultId Specifies the ID of the Key Vault instance to fetch certificate names from, available on the `azure.keyvault.KeyVault` Data Source / Resource.
         * 
         * **NOTE:** The vault must be in the same subscription as the provider. If the vault is in another subscription, you must create an aliased provider for that subscription.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultId(String keyVaultId) {
            $.keyVaultId = keyVaultId;
            return this;
        }

        public GetCertificatesPlainArgs build() {
            if ($.keyVaultId == null) {
                throw new MissingRequiredPropertyException("GetCertificatesPlainArgs", "keyVaultId");
            }
            return $;
        }
    }

}
