// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NetworkManagerConnectivityConfigurationAppliesToGroup {
    /**
     * @return Indicates whether to global mesh is supported for this group. Possible values are `true` and `false`.
     * 
     * &gt; **NOTE:** A group can be global only if the `group_connectivity` is `DirectlyConnected`.
     * 
     */
    private @Nullable Boolean globalMeshEnabled;
    /**
     * @return Specifies the group connectivity type. Possible values are `None` and `DirectlyConnected`.
     * 
     */
    private String groupConnectivity;
    /**
     * @return Specifies the resource ID of Network Group which the configuration applies to.
     * 
     */
    private String networkGroupId;
    /**
     * @return Indicates whether the hub gateway is used. Possible values are `true` and `false`.
     * 
     */
    private @Nullable Boolean useHubGateway;

    private NetworkManagerConnectivityConfigurationAppliesToGroup() {}
    /**
     * @return Indicates whether to global mesh is supported for this group. Possible values are `true` and `false`.
     * 
     * &gt; **NOTE:** A group can be global only if the `group_connectivity` is `DirectlyConnected`.
     * 
     */
    public Optional<Boolean> globalMeshEnabled() {
        return Optional.ofNullable(this.globalMeshEnabled);
    }
    /**
     * @return Specifies the group connectivity type. Possible values are `None` and `DirectlyConnected`.
     * 
     */
    public String groupConnectivity() {
        return this.groupConnectivity;
    }
    /**
     * @return Specifies the resource ID of Network Group which the configuration applies to.
     * 
     */
    public String networkGroupId() {
        return this.networkGroupId;
    }
    /**
     * @return Indicates whether the hub gateway is used. Possible values are `true` and `false`.
     * 
     */
    public Optional<Boolean> useHubGateway() {
        return Optional.ofNullable(this.useHubGateway);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkManagerConnectivityConfigurationAppliesToGroup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean globalMeshEnabled;
        private String groupConnectivity;
        private String networkGroupId;
        private @Nullable Boolean useHubGateway;
        public Builder() {}
        public Builder(NetworkManagerConnectivityConfigurationAppliesToGroup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.globalMeshEnabled = defaults.globalMeshEnabled;
    	      this.groupConnectivity = defaults.groupConnectivity;
    	      this.networkGroupId = defaults.networkGroupId;
    	      this.useHubGateway = defaults.useHubGateway;
        }

        @CustomType.Setter
        public Builder globalMeshEnabled(@Nullable Boolean globalMeshEnabled) {

            this.globalMeshEnabled = globalMeshEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder groupConnectivity(String groupConnectivity) {
            if (groupConnectivity == null) {
              throw new MissingRequiredPropertyException("NetworkManagerConnectivityConfigurationAppliesToGroup", "groupConnectivity");
            }
            this.groupConnectivity = groupConnectivity;
            return this;
        }
        @CustomType.Setter
        public Builder networkGroupId(String networkGroupId) {
            if (networkGroupId == null) {
              throw new MissingRequiredPropertyException("NetworkManagerConnectivityConfigurationAppliesToGroup", "networkGroupId");
            }
            this.networkGroupId = networkGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder useHubGateway(@Nullable Boolean useHubGateway) {

            this.useHubGateway = useHubGateway;
            return this;
        }
        public NetworkManagerConnectivityConfigurationAppliesToGroup build() {
            final var _resultValue = new NetworkManagerConnectivityConfigurationAppliesToGroup();
            _resultValue.globalMeshEnabled = globalMeshEnabled;
            _resultValue.groupConnectivity = groupConnectivity;
            _resultValue.networkGroupId = networkGroupId;
            _resultValue.useHubGateway = useHubGateway;
            return _resultValue;
        }
    }
}
