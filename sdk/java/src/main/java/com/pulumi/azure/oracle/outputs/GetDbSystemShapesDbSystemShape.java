// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.oracle.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDbSystemShapesDbSystemShape {
    /**
     * @return Indicates if the shape supports database and storage server types.
     * 
     */
    private Boolean areServerTypesSupported;
    /**
     * @return The maximum number of CPU cores that can be enabled on the DB system for this shape.
     * 
     */
    private Integer availableCoreCount;
    /**
     * @return The maximum number of CPU cores per database node that can be enabled for this shape. Only applicable to the flex Exadata shape, ExaCC Elastic shapes and VM Flex shapes.
     * 
     */
    private Integer availableCoreCountPerNode;
    /**
     * @return The maximum data storage that can be enabled for this shape.
     * 
     */
    private Integer availableDataStorageInTbs;
    /**
     * @return The maximum data storage available per storage server for this shape. Only applicable to ExaCC Elastic shapes.
     * 
     */
    private Integer availableDataStoragePerServerInTbs;
    /**
     * @return The maximum DB Node storage available per database node for this shape. Only applicable to ExaCC Elastic shapes.
     * 
     */
    private Integer availableDbNodePerNodeInGbs;
    /**
     * @return The maximum DB Node storage that can be enabled for this shape.
     * 
     */
    private Integer availableDbNodeStorageInGbs;
    /**
     * @return The maximum memory that can be enabled for this shape.
     * 
     */
    private Integer availableMemoryInGbs;
    /**
     * @return The maximum memory available per database node for this shape. Only applicable to ExaCC Elastic shapes.
     * 
     */
    private Integer availableMemoryPerNodeInGbs;
    /**
     * @return The compute model of the Exadata Infrastructure.
     * 
     */
    private String computeModel;
    /**
     * @return The discrete number by which the CPU core count for this shape can be increased or decreased.
     * 
     */
    private Integer coreCountIncrement;
    /**
     * @return The display name of the shape used for the DB system.
     * 
     */
    private String displayName;
    /**
     * @return The maximum number of compute servers available for this shape.
     * 
     */
    private Integer maximumNodeCount;
    /**
     * @return The maximum number of Exadata storage servers available for the Exadata infrastructure.
     * 
     */
    private Integer maximumStorageCount;
    /**
     * @return The minimum number of CPU cores that can be enabled on the DB system for this shape.
     * 
     */
    private Integer minimumCoreCount;
    /**
     * @return The minimum number of CPU cores that can be enabled per node for this shape.
     * 
     */
    private Integer minimumCoreCountPerNode;
    /**
     * @return The minimum data storage that need be allocated for this shape.
     * 
     */
    private Integer minimumDataStorageInTbs;
    /**
     * @return The minimum DB Node storage that need be allocated per node for this shape.
     * 
     */
    private Integer minimumDbNodeStoragePerNodeInGbs;
    /**
     * @return The minimum memory that need be allocated per node for this shape.
     * 
     */
    private Integer minimumMemoryPerNodeInGbs;
    /**
     * @return The minimum number of compute servers available for this shape.
     * 
     */
    private Integer minimumNodeCount;
    /**
     * @return The minimum number of Exadata storage servers available for the Exadata infrastructure.
     * 
     */
    private Integer minimumStorageCount;
    /**
     * @return The runtime minimum number of compute servers available for this shape.
     * 
     */
    private Integer runtimeMinimumCoreCount;
    /**
     * @return The family of the shape used for the DB system.
     * 
     */
    private String shapeFamily;

    private GetDbSystemShapesDbSystemShape() {}
    /**
     * @return Indicates if the shape supports database and storage server types.
     * 
     */
    public Boolean areServerTypesSupported() {
        return this.areServerTypesSupported;
    }
    /**
     * @return The maximum number of CPU cores that can be enabled on the DB system for this shape.
     * 
     */
    public Integer availableCoreCount() {
        return this.availableCoreCount;
    }
    /**
     * @return The maximum number of CPU cores per database node that can be enabled for this shape. Only applicable to the flex Exadata shape, ExaCC Elastic shapes and VM Flex shapes.
     * 
     */
    public Integer availableCoreCountPerNode() {
        return this.availableCoreCountPerNode;
    }
    /**
     * @return The maximum data storage that can be enabled for this shape.
     * 
     */
    public Integer availableDataStorageInTbs() {
        return this.availableDataStorageInTbs;
    }
    /**
     * @return The maximum data storage available per storage server for this shape. Only applicable to ExaCC Elastic shapes.
     * 
     */
    public Integer availableDataStoragePerServerInTbs() {
        return this.availableDataStoragePerServerInTbs;
    }
    /**
     * @return The maximum DB Node storage available per database node for this shape. Only applicable to ExaCC Elastic shapes.
     * 
     */
    public Integer availableDbNodePerNodeInGbs() {
        return this.availableDbNodePerNodeInGbs;
    }
    /**
     * @return The maximum DB Node storage that can be enabled for this shape.
     * 
     */
    public Integer availableDbNodeStorageInGbs() {
        return this.availableDbNodeStorageInGbs;
    }
    /**
     * @return The maximum memory that can be enabled for this shape.
     * 
     */
    public Integer availableMemoryInGbs() {
        return this.availableMemoryInGbs;
    }
    /**
     * @return The maximum memory available per database node for this shape. Only applicable to ExaCC Elastic shapes.
     * 
     */
    public Integer availableMemoryPerNodeInGbs() {
        return this.availableMemoryPerNodeInGbs;
    }
    /**
     * @return The compute model of the Exadata Infrastructure.
     * 
     */
    public String computeModel() {
        return this.computeModel;
    }
    /**
     * @return The discrete number by which the CPU core count for this shape can be increased or decreased.
     * 
     */
    public Integer coreCountIncrement() {
        return this.coreCountIncrement;
    }
    /**
     * @return The display name of the shape used for the DB system.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The maximum number of compute servers available for this shape.
     * 
     */
    public Integer maximumNodeCount() {
        return this.maximumNodeCount;
    }
    /**
     * @return The maximum number of Exadata storage servers available for the Exadata infrastructure.
     * 
     */
    public Integer maximumStorageCount() {
        return this.maximumStorageCount;
    }
    /**
     * @return The minimum number of CPU cores that can be enabled on the DB system for this shape.
     * 
     */
    public Integer minimumCoreCount() {
        return this.minimumCoreCount;
    }
    /**
     * @return The minimum number of CPU cores that can be enabled per node for this shape.
     * 
     */
    public Integer minimumCoreCountPerNode() {
        return this.minimumCoreCountPerNode;
    }
    /**
     * @return The minimum data storage that need be allocated for this shape.
     * 
     */
    public Integer minimumDataStorageInTbs() {
        return this.minimumDataStorageInTbs;
    }
    /**
     * @return The minimum DB Node storage that need be allocated per node for this shape.
     * 
     */
    public Integer minimumDbNodeStoragePerNodeInGbs() {
        return this.minimumDbNodeStoragePerNodeInGbs;
    }
    /**
     * @return The minimum memory that need be allocated per node for this shape.
     * 
     */
    public Integer minimumMemoryPerNodeInGbs() {
        return this.minimumMemoryPerNodeInGbs;
    }
    /**
     * @return The minimum number of compute servers available for this shape.
     * 
     */
    public Integer minimumNodeCount() {
        return this.minimumNodeCount;
    }
    /**
     * @return The minimum number of Exadata storage servers available for the Exadata infrastructure.
     * 
     */
    public Integer minimumStorageCount() {
        return this.minimumStorageCount;
    }
    /**
     * @return The runtime minimum number of compute servers available for this shape.
     * 
     */
    public Integer runtimeMinimumCoreCount() {
        return this.runtimeMinimumCoreCount;
    }
    /**
     * @return The family of the shape used for the DB system.
     * 
     */
    public String shapeFamily() {
        return this.shapeFamily;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbSystemShapesDbSystemShape defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean areServerTypesSupported;
        private Integer availableCoreCount;
        private Integer availableCoreCountPerNode;
        private Integer availableDataStorageInTbs;
        private Integer availableDataStoragePerServerInTbs;
        private Integer availableDbNodePerNodeInGbs;
        private Integer availableDbNodeStorageInGbs;
        private Integer availableMemoryInGbs;
        private Integer availableMemoryPerNodeInGbs;
        private String computeModel;
        private Integer coreCountIncrement;
        private String displayName;
        private Integer maximumNodeCount;
        private Integer maximumStorageCount;
        private Integer minimumCoreCount;
        private Integer minimumCoreCountPerNode;
        private Integer minimumDataStorageInTbs;
        private Integer minimumDbNodeStoragePerNodeInGbs;
        private Integer minimumMemoryPerNodeInGbs;
        private Integer minimumNodeCount;
        private Integer minimumStorageCount;
        private Integer runtimeMinimumCoreCount;
        private String shapeFamily;
        public Builder() {}
        public Builder(GetDbSystemShapesDbSystemShape defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.areServerTypesSupported = defaults.areServerTypesSupported;
    	      this.availableCoreCount = defaults.availableCoreCount;
    	      this.availableCoreCountPerNode = defaults.availableCoreCountPerNode;
    	      this.availableDataStorageInTbs = defaults.availableDataStorageInTbs;
    	      this.availableDataStoragePerServerInTbs = defaults.availableDataStoragePerServerInTbs;
    	      this.availableDbNodePerNodeInGbs = defaults.availableDbNodePerNodeInGbs;
    	      this.availableDbNodeStorageInGbs = defaults.availableDbNodeStorageInGbs;
    	      this.availableMemoryInGbs = defaults.availableMemoryInGbs;
    	      this.availableMemoryPerNodeInGbs = defaults.availableMemoryPerNodeInGbs;
    	      this.computeModel = defaults.computeModel;
    	      this.coreCountIncrement = defaults.coreCountIncrement;
    	      this.displayName = defaults.displayName;
    	      this.maximumNodeCount = defaults.maximumNodeCount;
    	      this.maximumStorageCount = defaults.maximumStorageCount;
    	      this.minimumCoreCount = defaults.minimumCoreCount;
    	      this.minimumCoreCountPerNode = defaults.minimumCoreCountPerNode;
    	      this.minimumDataStorageInTbs = defaults.minimumDataStorageInTbs;
    	      this.minimumDbNodeStoragePerNodeInGbs = defaults.minimumDbNodeStoragePerNodeInGbs;
    	      this.minimumMemoryPerNodeInGbs = defaults.minimumMemoryPerNodeInGbs;
    	      this.minimumNodeCount = defaults.minimumNodeCount;
    	      this.minimumStorageCount = defaults.minimumStorageCount;
    	      this.runtimeMinimumCoreCount = defaults.runtimeMinimumCoreCount;
    	      this.shapeFamily = defaults.shapeFamily;
        }

        @CustomType.Setter
        public Builder areServerTypesSupported(Boolean areServerTypesSupported) {
            if (areServerTypesSupported == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "areServerTypesSupported");
            }
            this.areServerTypesSupported = areServerTypesSupported;
            return this;
        }
        @CustomType.Setter
        public Builder availableCoreCount(Integer availableCoreCount) {
            if (availableCoreCount == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "availableCoreCount");
            }
            this.availableCoreCount = availableCoreCount;
            return this;
        }
        @CustomType.Setter
        public Builder availableCoreCountPerNode(Integer availableCoreCountPerNode) {
            if (availableCoreCountPerNode == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "availableCoreCountPerNode");
            }
            this.availableCoreCountPerNode = availableCoreCountPerNode;
            return this;
        }
        @CustomType.Setter
        public Builder availableDataStorageInTbs(Integer availableDataStorageInTbs) {
            if (availableDataStorageInTbs == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "availableDataStorageInTbs");
            }
            this.availableDataStorageInTbs = availableDataStorageInTbs;
            return this;
        }
        @CustomType.Setter
        public Builder availableDataStoragePerServerInTbs(Integer availableDataStoragePerServerInTbs) {
            if (availableDataStoragePerServerInTbs == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "availableDataStoragePerServerInTbs");
            }
            this.availableDataStoragePerServerInTbs = availableDataStoragePerServerInTbs;
            return this;
        }
        @CustomType.Setter
        public Builder availableDbNodePerNodeInGbs(Integer availableDbNodePerNodeInGbs) {
            if (availableDbNodePerNodeInGbs == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "availableDbNodePerNodeInGbs");
            }
            this.availableDbNodePerNodeInGbs = availableDbNodePerNodeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder availableDbNodeStorageInGbs(Integer availableDbNodeStorageInGbs) {
            if (availableDbNodeStorageInGbs == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "availableDbNodeStorageInGbs");
            }
            this.availableDbNodeStorageInGbs = availableDbNodeStorageInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder availableMemoryInGbs(Integer availableMemoryInGbs) {
            if (availableMemoryInGbs == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "availableMemoryInGbs");
            }
            this.availableMemoryInGbs = availableMemoryInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder availableMemoryPerNodeInGbs(Integer availableMemoryPerNodeInGbs) {
            if (availableMemoryPerNodeInGbs == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "availableMemoryPerNodeInGbs");
            }
            this.availableMemoryPerNodeInGbs = availableMemoryPerNodeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder computeModel(String computeModel) {
            if (computeModel == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "computeModel");
            }
            this.computeModel = computeModel;
            return this;
        }
        @CustomType.Setter
        public Builder coreCountIncrement(Integer coreCountIncrement) {
            if (coreCountIncrement == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "coreCountIncrement");
            }
            this.coreCountIncrement = coreCountIncrement;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder maximumNodeCount(Integer maximumNodeCount) {
            if (maximumNodeCount == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "maximumNodeCount");
            }
            this.maximumNodeCount = maximumNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder maximumStorageCount(Integer maximumStorageCount) {
            if (maximumStorageCount == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "maximumStorageCount");
            }
            this.maximumStorageCount = maximumStorageCount;
            return this;
        }
        @CustomType.Setter
        public Builder minimumCoreCount(Integer minimumCoreCount) {
            if (minimumCoreCount == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "minimumCoreCount");
            }
            this.minimumCoreCount = minimumCoreCount;
            return this;
        }
        @CustomType.Setter
        public Builder minimumCoreCountPerNode(Integer minimumCoreCountPerNode) {
            if (minimumCoreCountPerNode == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "minimumCoreCountPerNode");
            }
            this.minimumCoreCountPerNode = minimumCoreCountPerNode;
            return this;
        }
        @CustomType.Setter
        public Builder minimumDataStorageInTbs(Integer minimumDataStorageInTbs) {
            if (minimumDataStorageInTbs == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "minimumDataStorageInTbs");
            }
            this.minimumDataStorageInTbs = minimumDataStorageInTbs;
            return this;
        }
        @CustomType.Setter
        public Builder minimumDbNodeStoragePerNodeInGbs(Integer minimumDbNodeStoragePerNodeInGbs) {
            if (minimumDbNodeStoragePerNodeInGbs == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "minimumDbNodeStoragePerNodeInGbs");
            }
            this.minimumDbNodeStoragePerNodeInGbs = minimumDbNodeStoragePerNodeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder minimumMemoryPerNodeInGbs(Integer minimumMemoryPerNodeInGbs) {
            if (minimumMemoryPerNodeInGbs == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "minimumMemoryPerNodeInGbs");
            }
            this.minimumMemoryPerNodeInGbs = minimumMemoryPerNodeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder minimumNodeCount(Integer minimumNodeCount) {
            if (minimumNodeCount == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "minimumNodeCount");
            }
            this.minimumNodeCount = minimumNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder minimumStorageCount(Integer minimumStorageCount) {
            if (minimumStorageCount == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "minimumStorageCount");
            }
            this.minimumStorageCount = minimumStorageCount;
            return this;
        }
        @CustomType.Setter
        public Builder runtimeMinimumCoreCount(Integer runtimeMinimumCoreCount) {
            if (runtimeMinimumCoreCount == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "runtimeMinimumCoreCount");
            }
            this.runtimeMinimumCoreCount = runtimeMinimumCoreCount;
            return this;
        }
        @CustomType.Setter
        public Builder shapeFamily(String shapeFamily) {
            if (shapeFamily == null) {
              throw new MissingRequiredPropertyException("GetDbSystemShapesDbSystemShape", "shapeFamily");
            }
            this.shapeFamily = shapeFamily;
            return this;
        }
        public GetDbSystemShapesDbSystemShape build() {
            final var _resultValue = new GetDbSystemShapesDbSystemShape();
            _resultValue.areServerTypesSupported = areServerTypesSupported;
            _resultValue.availableCoreCount = availableCoreCount;
            _resultValue.availableCoreCountPerNode = availableCoreCountPerNode;
            _resultValue.availableDataStorageInTbs = availableDataStorageInTbs;
            _resultValue.availableDataStoragePerServerInTbs = availableDataStoragePerServerInTbs;
            _resultValue.availableDbNodePerNodeInGbs = availableDbNodePerNodeInGbs;
            _resultValue.availableDbNodeStorageInGbs = availableDbNodeStorageInGbs;
            _resultValue.availableMemoryInGbs = availableMemoryInGbs;
            _resultValue.availableMemoryPerNodeInGbs = availableMemoryPerNodeInGbs;
            _resultValue.computeModel = computeModel;
            _resultValue.coreCountIncrement = coreCountIncrement;
            _resultValue.displayName = displayName;
            _resultValue.maximumNodeCount = maximumNodeCount;
            _resultValue.maximumStorageCount = maximumStorageCount;
            _resultValue.minimumCoreCount = minimumCoreCount;
            _resultValue.minimumCoreCountPerNode = minimumCoreCountPerNode;
            _resultValue.minimumDataStorageInTbs = minimumDataStorageInTbs;
            _resultValue.minimumDbNodeStoragePerNodeInGbs = minimumDbNodeStoragePerNodeInGbs;
            _resultValue.minimumMemoryPerNodeInGbs = minimumMemoryPerNodeInGbs;
            _resultValue.minimumNodeCount = minimumNodeCount;
            _resultValue.minimumStorageCount = minimumStorageCount;
            _resultValue.runtimeMinimumCoreCount = runtimeMinimumCoreCount;
            _resultValue.shapeFamily = shapeFamily;
            return _resultValue;
        }
    }
}
